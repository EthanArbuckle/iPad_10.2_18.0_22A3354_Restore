void sub_19F9AFDA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 - 192);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(v1 - 208);
  *(_QWORD *)(v1 - 208) = 0;
  if (!v5)
    _Unwind_Resume(a1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEEclES1E_S1N_(uint64_t a1, int8x8_t **a2, _QWORD *a3)
{
  int8x8_t *v3;
  uint64_t *v6;
  _QWORD *i;
  uint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  _OWORD *v11;
  uint64_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  unint64_t v15;
  int8x8_t *v16;
  uint8x8_t v17;
  int8x8_t *v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v3 = (int8x8_t *)(*a2)[2];
  if (v3)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 672);
    do
    {
      while (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a3, (unsigned __int8 *)&v3[2]))
      {
        v3 = (int8x8_t *)*v3;
        if (!v3)
          return;
      }
      for (i = (_QWORD *)v3[8]; i; i = (_QWORD *)*i)
      {
        v8 = *(_QWORD *)(i[3] + 136);
        v9 = (unsigned __int8 **)std::__hash_table<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, v3[5].u32[0], &v3[5]);
        v10 = geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>::operator[](v9 + 3, *(_DWORD *)(v8 + 44));
        v11 = operator new(0x20uLL);
        v11[1] = *(_OWORD *)(i + 3);
        i[3] = 0;
        i[4] = 0;
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v11 = *(_QWORD *)v10;
        *((_QWORD *)v11 + 1) = v10;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)v10 = v11;
        ++*((_QWORD *)v10 + 2);
      }
      v13 = *a2;
      v14 = (*a2)[1];
      v16 = (int8x8_t *)*v3;
      v15 = (unint64_t)v3[1];
      v17 = (uint8x8_t)vcnt_s8(v14);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v14)
          v15 %= *(_QWORD *)&v14;
      }
      else
      {
        v15 &= *(_QWORD *)&v14 - 1;
      }
      v18 = *(int8x8_t **)(*(_QWORD *)v13 + 8 * v15);
      do
      {
        v19 = v18;
        v18 = (int8x8_t *)*v18;
      }
      while (v18 != v3);
      if (v19 == &v13[2])
        goto LABEL_46;
      v20 = (unint64_t)v19[1];
      if (v17.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v14)
          v20 %= *(_QWORD *)&v14;
      }
      else
      {
        v20 &= *(_QWORD *)&v14 - 1;
      }
      v21 = *v3;
      if (v20 != v15)
      {
LABEL_46:
        if (v16)
        {
          v22 = (unint64_t)v16[1];
          if (v17.u32[0] > 1uLL)
          {
            if (v22 >= *(_QWORD *)&v14)
              v22 %= *(_QWORD *)&v14;
          }
          else
          {
            v22 &= *(_QWORD *)&v14 - 1;
          }
          v21 = *v3;
          if (v22 == v15)
          {
LABEL_27:
            v23 = *(_QWORD *)(*(_QWORD *)&v21 + 8);
            if (v17.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&v14)
                v23 %= *(_QWORD *)&v14;
            }
            else
            {
              v23 &= *(_QWORD *)&v14 - 1;
            }
            if (v23 != v15)
            {
              *(_QWORD *)(*(_QWORD *)v13 + 8 * v23) = v19;
              v21 = *v3;
            }
            goto LABEL_33;
          }
        }
        *(_QWORD *)(*(_QWORD *)v13 + 8 * v15) = 0;
        v21 = *v3;
      }
      if (v21)
        goto LABEL_27;
LABEL_33:
      *v19 = v21;
      *v3 = 0;
      --*(_QWORD *)&v13[3];
      v24 = (_QWORD *)v3[8];
      while (v24)
      {
        v26 = v24;
        v24 = (_QWORD *)*v24;
        v27 = (std::__shared_weak_count *)v26[4];
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        operator delete(v26);
      }
      v25 = (void *)v3[6];
      v3[6] = 0;
      if (v25)
        operator delete(v25);
      operator delete(v3);
      v3 = v16;
    }
    while (v16);
  }
}

void ___ZL31GEOGetVectorKitOverlaysLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "OverlaysLogic");
  v1 = (void *)GEOGetVectorKitOverlaysLogicLog(void)::log;
  GEOGetVectorKitOverlaysLogicLog(void)::log = (uint64_t)v0;

}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CB408;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB408;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *i;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _OWORD v26[2];
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t (**v31)();
  os_signpost_id_t *v32;
  uint64_t (***v33)();
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v31 = &off_1E42D9950;
  v32 = (os_signpost_id_t *)(a1 + 24);
  v33 = &v31;
  v29[0] = &off_1E42D9908;
  v29[1] = a1 + 24;
  v30 = v29;
  v35 = v34;
  v34[0] = &off_1E42D9908;
  v34[1] = a1 + 24;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v3 = (id)GEOGetVectorKitPerformanceLog_log;
  v4 = v3;
  v5 = *v32;
  if (*v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    LOWORD(v26[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "DynamicOverlayLayout", (const char *)&unk_1A0189141, (uint8_t *)v26, 2u);
  }

  v6 = v30;
  if (v30 == v29)
  {
    v7 = 4;
    v6 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v33;
  if (v33 == &v31)
  {
    v9 = 4;
    v8 = &v31;
  }
  else
  {
    if (!v33)
      goto LABEL_16;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_16:
  memset(v26, 0, sizeof(v26));
  v10 = *(_QWORD *)(v2 + 712);
  v28 = 0;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E42D98C0;
  v11[1] = v2;
  v11[2] = a1 + 32;
  v11[3] = a1 + 16;
  v11[4] = v26;
  v28 = v11;
  md::OverlayContainer::visitOverlays(v10, (uint64_t)v27);
  v12 = v28;
  if (v28 == v27)
  {
    v13 = 4;
    v12 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  for (i = *(_QWORD **)(v2 + 688); i; i = (_QWORD *)*i)
  {
    v17 = i[3];
    v18 = i[4];
    while (v17 != v18)
    {
      v19 = *(_QWORD *)(v17 + 24);
      if (v19 < 0xB)
        goto LABEL_22;
      v20 = v19 - 10;
      do
      {
        v21 = *(uint64_t **)(v17 + 16);
        v22 = *v21;
        *(_QWORD *)(v22 + 8) = v21[1];
        *(_QWORD *)v21[1] = v22;
        --*(_QWORD *)(v17 + 24);
        v23 = (std::__shared_weak_count *)v21[3];
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        --v20;
        operator delete(v21);
      }
      while (v20);
      v17 += 32;
    }
  }
LABEL_22:
  if (!v35)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F9B0E6CLL);
  }
  (*(void (**)(_QWORD *))(*v35 + 48))(v35);
  result = v35;
  if (v35 == v34)
  {
    v16 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_19F9B0E7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F9B0E88()
{
  JUMPOUT(0x19F9B0E90);
}

void _ZNSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlRT_14VKOverlayLevelE_NS_9allocatorISQ_EEFvRKN3geo11_retain_ptrIU8__strongP9VKOverlayNST_16_retain_objc_arcENST_17_release_objc_arcENST_10_hash_objcENST_11_equal_objcEEESP_EED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 _ZNKSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlRT_14VKOverlayLevelE_NS_9allocatorISQ_EEFvRKN3geo11_retain_ptrIU8__strongP9VKOverlayNST_16_retain_objc_arcENST_17_release_objc_arcENST_10_hash_objcENST_11_equal_objcEEESP_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D98C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlRT_14VKOverlayLevelE_NS_9allocatorISQ_EEFvRKN3geo11_retain_ptrIU8__strongP9VKOverlayNST_16_retain_objc_arcENST_17_release_objc_arcENST_10_hash_objcENST_11_equal_objcEEESP_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D98C0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlRT_14VKOverlayLevelE_NS_9allocatorISQ_EEFvRKN3geo11_retain_ptrIU8__strongP9VKOverlayNST_16_retain_objc_arcENST_17_release_objc_arcENST_10_hash_objcENST_11_equal_objcEEESP_EEclES14_OSP_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t **i;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  char *v28;
  char *v29;
  void *v30;
  uint64_t *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t *v65;
  id v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  void **v85;
  unsigned __int8 *v86;
  unint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  _BOOL8 v91;
  unint64_t v92;
  unint64_t v93;
  size_t prime;
  void *v95;
  void *v96;
  uint64_t v97;
  _QWORD *v98;
  size_t v99;
  size_t v100;
  size_t v101;
  _QWORD *v102;
  size_t v103;
  uint64_t v104;
  unint64_t v105;
  uint8x8_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  size_t v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  id v115;
  unsigned int v116;
  unsigned __int8 **v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned __int8 *v126;
  uint64_t *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  unint64_t v132;
  uint8x8_t v133;
  unint64_t v134;
  uint64_t ***v135;
  uint64_t **v136;
  unint64_t v137;
  uint64_t *v138;
  char *v139;
  std::__shared_weak_count *v140;
  uint8x8_t v141;
  uint64_t ***v142;
  uint64_t **v143;
  unint64_t v144;
  uint64_t *v145;
  char *v146;
  float v147;
  float v148;
  _BOOL8 v149;
  unint64_t v150;
  unint64_t v151;
  size_t v152;
  unint64_t v153;
  uint8x8_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint8x8_t v163;
  void **v164;
  unsigned __int8 *v165;
  unint64_t v166;
  uint64_t v167;
  float v168;
  float v169;
  _BOOL8 v170;
  unint64_t v171;
  unint64_t v172;
  size_t v173;
  unint64_t v174;
  uint8x8_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t (**v180)();
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t (***v194)();
  uint64_t v195;
  uint64_t v196;
  uint64_t (**v197)();
  uint64_t (**v198)();
  uint64_t (**v199)();
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint8x8_t v205;
  _QWORD *v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  _QWORD *v212;
  float v213;
  float v214;
  _BOOL8 v215;
  unint64_t v216;
  unint64_t v217;
  size_t v218;
  int8x8_t v219;
  unint64_t v220;
  uint8x8_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  id v231;
  int v232;
  uint64_t *v233;
  uint64_t v234;
  id v235;
  double v236;
  id *v237;
  uint64_t *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  double *v256;
  _QWORD *v257;
  _QWORD *v258;
  __int128 v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  id v263;
  uint64_t v265;
  uint64_t *v266;
  __int128 v267;
  unint64_t v268;
  __int128 v269;
  unsigned __int8 v270[4];
  unint64_t v271;
  int v272;
  _QWORD v273[2];
  void *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t (**v278)();
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t (**v281)();
  __int128 v282;
  int v283;
  uint64_t (**v284)();
  __int128 *v285;
  char v286;
  uint64_t (***v287)();
  uint64_t v288;

  v288 = *MEMORY[0x1E0C80C00];
  v253 = *a3;
  v262 = *(_QWORD *)(a1 + 8);
  objc_msgSend(*(id *)(a2 + 8), "customTileProvider");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    return;
  v4 = objc_msgSend(*(id *)(a2 + 8), "areResourcesRequired");
  for (i = *(uint64_t ***)(v262 + 80 * v253 + 40 * v4 + 360); i; i = (uint64_t **)*i)
  {
    v7 = *((unsigned __int8 *)i + 17) | 0x200000000;
    v284 = (uint64_t (**)())(*((unsigned int *)i + 6) | ((unint64_t)*((unsigned int *)i + 5) << 32));
    v285 = (__int128 *)v7;
    v8 = *(id *)(a2 + 8);
    objc_msgSend(v8, "didExitKey:", &v284);

  }
  v252 = v4;
  v9 = v262 + 48 * v253 + 24 * v4;
  v10 = *(_QWORD *)(v9 + 504);
  for (j = *(_QWORD *)(v9 + 512); v10 != j; v10 += 32)
  {
    v284 = 0;
    v285 = 0;
    v12 = *(unsigned __int8 *)(v10 + 1) | 0x200000000;
    v284 = (uint64_t (**)())(*(unsigned int *)(v10 + 8) | ((unint64_t)*(unsigned int *)(v10 + 4) << 32));
    v285 = (__int128 *)v12;
    v13 = *(id *)(a2 + 8);
    objc_msgSend(v13, "didEnterKey:withFallback:", &v284, *(unsigned __int8 *)(v10 + 24));

  }
  v14 = v262 + 80 * v253 + 40 * v252;
  v266 = *(uint64_t **)(v262 + 16 * v253 + 8 * v252 + 640);
  v15 = *(_QWORD *)(v14 + 208);
  if (v15)
  {
    if (v15 >> 60)
      abort();
    v16 = (unint64_t *)operator new(16 * v15);
    v17 = &v16[2 * v15];
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v18 = v14 + 184;
  v19 = *(uint64_t ***)(v14 + 200);
  if (v19)
  {
    v20 = v16;
    do
    {
      while (1)
      {
        v21 = *((unsigned int *)v19 + 6) | ((unint64_t)*((unsigned int *)v19 + 5) << 32);
        v22 = *((unsigned __int8 *)v19 + 17) | 0x200000000;
        if (v20 >= v17)
          break;
        *v20 = v21;
        v20[1] = v22;
        v20 += 2;
        v19 = (uint64_t **)*v19;
        if (!v19)
          goto LABEL_32;
      }
      v23 = ((char *)v20 - (char *)v16) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        abort();
      if (v17 - v16 > v24)
        v24 = v17 - v16;
      if ((unint64_t)((char *)v17 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        if (v25 >> 60)
          goto LABEL_521;
        v26 = (char *)operator new(16 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = (unint64_t *)&v26[16 * v23];
      *v27 = v21;
      v27[1] = v22;
      if (v20 == v16)
      {
        v29 = &v26[16 * v23];
      }
      else
      {
        v28 = &v26[16 * v23];
        do
        {
          v29 = v28 - 16;
          *((_OWORD *)v28 - 1) = *((_OWORD *)v20 - 1);
          v20 -= 2;
          v28 -= 16;
        }
        while (v20 != v16);
      }
      v17 = (unint64_t *)&v26[16 * v25];
      v20 = v27 + 2;
      if (v16)
        operator delete(v16);
      v16 = (unint64_t *)v29;
      v19 = (uint64_t **)*v19;
    }
    while (v19);
LABEL_32:
    if (v20 != v16)
    {
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v16, (char *)v20 - (char *)v16);
      objc_msgSend(*(id *)(a2 + 8), "onVisibleTiles:", v30);

    }
  }
  if (v16)
    operator delete(v16);
  v31 = *(uint64_t **)(v18 + 16);
  if (!v31)
    goto LABEL_516;
  v261 = (uint64_t *)(v262 + 600);
  v257 = (_QWORD *)(v262 + 616);
  v258 = v266 + 2;
  while (2)
  {
    LOBYTE(v5) = *((_BYTE *)v31 + 17);
    v32 = exp2((float)(**(float **)(a1 + 16) - (float)v5));
    v256 = *(double **)(a1 + 24);
    v277 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v253 + 8 * v252);
    v33 = v31[5];
    v34 = *(_QWORD *)(v33 + 760);
    v254 = v33 + 752;
    if (v34 == v33 + 752)
      goto LABEL_38;
    v35 = v32;
    v260 = v31;
    while (2)
    {
      v37 = *(uint64_t **)(v34 + 112);
      if (!v37)
        goto LABEL_44;
      v255 = v34;
      v38 = *v37;
      v39 = v37[1];
      v40 = v39 - *v37;
      if (v39 == *v37)
        goto LABEL_43;
      v41 = 0xF0F0F0F0F0F0F0F1 * (v40 >> 3);
      if (v41 >= 0x1E1E1E1E1E1E1E2)
        abort();
      v42 = (uint64_t)operator new(v40);
      v274 = (void *)v42;
      v275 = v42;
      v276 = v42 + 136 * v41;
      v43 = v42;
      do
      {
        *(_WORD *)v43 = *(_WORD *)v38;
        *(_QWORD *)(v43 + 4) = *(_QWORD *)(v38 + 4);
        *(_QWORD *)(v43 + 24) = *(_QWORD *)(v38 + 24);
        *(_QWORD *)(v43 + 32) = &off_1E42B4A70;
        *(_QWORD *)(v43 + 40) = 0;
        v44 = *(id *)(v38 + 40);
        v45 = *(void **)(v43 + 40);
        *(_QWORD *)(v43 + 40) = v44;

        *(_QWORD *)(v43 + 56) = *(_QWORD *)(v38 + 56);
        v46 = *(_QWORD *)(v38 + 64);
        *(_QWORD *)(v43 + 64) = v46;
        if (v46)
        {
          v47 = (unint64_t *)(v46 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        *(_QWORD *)(v43 + 72) = *(_QWORD *)(v38 + 72);
        v49 = *(_QWORD *)(v38 + 80);
        *(_QWORD *)(v43 + 80) = v49;
        if (v49)
        {
          v50 = (unint64_t *)(v49 + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        *(_QWORD *)(v43 + 88) = *(_QWORD *)(v38 + 88);
        v52 = *(_QWORD *)(v38 + 96);
        *(_QWORD *)(v43 + 96) = v52;
        if (v52)
        {
          v53 = (unint64_t *)(v52 + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        *(_QWORD *)(v43 + 104) = *(_QWORD *)(v38 + 104);
        v55 = *(_QWORD *)(v38 + 112);
        *(_QWORD *)(v43 + 112) = v55;
        if (v55)
        {
          v56 = (unint64_t *)(v55 + 8);
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        *(_OWORD *)(v43 + 120) = *(_OWORD *)(v38 + 120);
        v38 += 136;
        v43 += 136;
      }
      while (v38 != v39);
      v275 = v43;
      if (v43 == v42)
        goto LABEL_41;
      v58 = 0;
      v59 = v277;
      while (2)
      {
        v265 = v58;
        if (*(_QWORD *)(v42 + 136 * v58 + 24) != v59)
          goto LABEL_65;
        v263 = *(id *)(v42 + 136 * v58 + 40);
        v60 = *((unsigned int *)v260 + 6);
        v61 = *((int *)v260 + 5);
        v62 = *((unsigned __int8 *)v260 + 17);
        v273[0] = v60 | (v61 << 32);
        v273[1] = v62 | 0x200000000;
        v63 = *((unsigned __int8 *)v260 + 16);
        v270[0] = *((_BYTE *)v260 + 16);
        v270[1] = v62;
        v271 = __PAIR64__(v60, v61);
        v64 = *(id *)(a2 + 8);
        v65 = (uint64_t *)objc_msgSend(v64, "identifier");
        v272 = (int)v65;

        v66 = *(id *)(a2 + 8);
        v67 = objc_msgSend(v66, "canDrawKey:withData:", v273, v263);

        if (!v67)
          goto LABEL_491;
        v68 = (v62
             - 0x61C8864680B583EBLL
             + ((v63 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v63 - 0x61C8864680B583EBLL) >> 2)) ^ (v63 - 0x61C8864680B583EBLL);
        v69 = (v61 - 0x61C8864680B583EBLL + (v68 << 6) + (v68 >> 2)) ^ v68;
        v70 = ((int)v60 - 0x61C8864680B583EBLL + (v69 << 6) + (v69 >> 2)) ^ v69;
        v71 = (v65 - 0x61C8864680B583EBLL + (v70 << 6) + (v70 >> 2)) ^ v70;
        v72 = v266[1];
        if (v72)
        {
          v73 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
          v73.i16[0] = vaddlv_u8(v73);
          if (v73.u32[0] > 1uLL)
          {
            v74 = (v65 - 0x61C8864680B583EBLL + (v70 << 6) + (v70 >> 2)) ^ v70;
            if (v71 >= v72)
              v74 = v71 % v72;
          }
          else
          {
            v74 = v71 & (v72 - 1);
          }
          v75 = *(uint64_t ***)(*v266 + 8 * v74);
          if (v75)
          {
            v76 = *v75;
            if (*v75)
            {
              v77 = v72 - 1;
              if (v73.u32[0] < 2uLL)
              {
                while (1)
                {
                  v78 = v76[1];
                  if (v71 == v78)
                  {
                    if (*((unsigned __int8 *)v76 + 16) == (_DWORD)v63
                      && *((unsigned __int8 *)v76 + 17) == (_DWORD)v62
                      && *((_DWORD *)v76 + 5) == (_DWORD)v61
                      && *((_DWORD *)v76 + 6) == (_DWORD)v60
                      && *((_DWORD *)v76 + 10) == (_DWORD)v65)
                    {
                      goto LABEL_85;
                    }
                  }
                  else if ((v78 & v77) != v74)
                  {
                    goto LABEL_113;
                  }
                  v76 = (uint64_t *)*v76;
                  if (!v76)
                    goto LABEL_113;
                }
              }
              do
              {
                v80 = v76[1];
                if (v71 == v80)
                {
                  if (*((unsigned __int8 *)v76 + 16) == (_DWORD)v63
                    && *((unsigned __int8 *)v76 + 17) == (_DWORD)v62
                    && *((_DWORD *)v76 + 5) == (_DWORD)v61
                    && *((_DWORD *)v76 + 6) == (_DWORD)v60
                    && *((_DWORD *)v76 + 10) == (_DWORD)v65)
                  {
LABEL_85:
                    if (v73.u32[0] > 1uLL)
                    {
                      v79 = (v65 - 0x61C8864680B583EBLL + (v70 << 6) + (v70 >> 2)) ^ v70;
                      if (v71 >= v72)
                        v79 = v71 % v72;
                    }
                    else
                    {
                      v79 = v71 & v77;
                    }
                    v81 = *(uint64_t ***)(*v266 + 8 * v79);
                    if (!v81 || (v82 = *v81) == 0)
LABEL_518:
                      abort();
                    if (v73.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v83 = v82[1];
                        if (v83 == v71)
                        {
                          if (*((unsigned __int8 *)v82 + 16) == (_DWORD)v63
                            && *((unsigned __int8 *)v82 + 17) == (_DWORD)v62
                            && *((_DWORD *)v82 + 5) == (_DWORD)v61
                            && *((_DWORD *)v82 + 6) == (_DWORD)v60
                            && *((_DWORD *)v82 + 10) == (_DWORD)v65)
                          {
                            goto LABEL_112;
                          }
                        }
                        else if ((v83 & v77) != v79)
                        {
                          goto LABEL_518;
                        }
                        v82 = (uint64_t *)*v82;
                        if (!v82)
                          goto LABEL_518;
                      }
                    }
                    while (1)
                    {
                      v84 = v82[1];
                      if (v84 == v71)
                      {
                        if (*((unsigned __int8 *)v82 + 16) == (_DWORD)v63
                          && *((unsigned __int8 *)v82 + 17) == (_DWORD)v62
                          && *((_DWORD *)v82 + 5) == (_DWORD)v61
                          && *((_DWORD *)v82 + 6) == (_DWORD)v60
                          && *((_DWORD *)v82 + 10) == (_DWORD)v65)
                        {
LABEL_112:
                          if (v82[9] > v59)
                            goto LABEL_480;
                          goto LABEL_113;
                        }
                      }
                      else
                      {
                        if (v84 >= v72)
                          v84 %= v72;
                        if (v84 != v79)
                          goto LABEL_518;
                      }
                      v82 = (uint64_t *)*v82;
                      if (!v82)
                        goto LABEL_518;
                    }
                  }
                }
                else
                {
                  if (v80 >= v72)
                    v80 %= v72;
                  if (v80 != v74)
                    break;
                }
                v76 = (uint64_t *)*v76;
              }
              while (v76);
            }
          }
LABEL_113:
          if (v73.u32[0] > 1uLL)
          {
            v42 = (v65 - 0x61C8864680B583EBLL + (v70 << 6) + (v70 >> 2)) ^ v70;
            if (v71 >= v72)
              v42 = v71 % v72;
          }
          else
          {
            v42 = v71 & (v72 - 1);
          }
          v85 = *(void ***)(*v266 + 8 * v42);
          if (v85)
          {
            v86 = (unsigned __int8 *)*v85;
            if (*v85)
            {
              if (v73.u32[0] < 2uLL)
              {
                while (1)
                {
                  v88 = *((_QWORD *)v86 + 1);
                  if (v88 == v71)
                  {
                    if (v86[16] == (_DWORD)v63
                      && v86[17] == (_DWORD)v62
                      && *((_DWORD *)v86 + 5) == (_DWORD)v61
                      && *((_DWORD *)v86 + 6) == (_DWORD)v60
                      && *((_DWORD *)v86 + 10) == (_DWORD)v65)
                    {
                      goto LABEL_219;
                    }
                  }
                  else if ((v88 & (v72 - 1)) != v42)
                  {
                    goto LABEL_152;
                  }
                  v86 = *(unsigned __int8 **)v86;
                  if (!v86)
                    goto LABEL_152;
                }
              }
              do
              {
                v87 = *((_QWORD *)v86 + 1);
                if (v87 == v71)
                {
                  if (v86[16] == (_DWORD)v63
                    && v86[17] == (_DWORD)v62
                    && *((_DWORD *)v86 + 5) == (_DWORD)v61
                    && *((_DWORD *)v86 + 6) == (_DWORD)v60
                    && *((_DWORD *)v86 + 10) == (_DWORD)v65)
                  {
                    goto LABEL_219;
                  }
                }
                else
                {
                  if (v87 >= v72)
                    v87 %= v72;
                  if (v87 != v42)
                    break;
                }
                v86 = *(unsigned __int8 **)v86;
              }
              while (v86);
            }
          }
        }
LABEL_152:
        v86 = (unsigned __int8 *)operator new(0x58uLL);
        v284 = (uint64_t (**)())v86;
        v285 = (__int128 *)(v266 + 2);
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = v71;
        v86[16] = v63;
        v86[17] = v62;
        *(_QWORD *)(v86 + 20) = v271;
        *((_DWORD *)v86 + 10) = (_DWORD)v65;
        *((_OWORD *)v86 + 3) = 0u;
        *((_OWORD *)v86 + 4) = 0u;
        *((_DWORD *)v86 + 20) = 1065353216;
        v286 = 1;
        v89 = (float)(unint64_t)(v266[3] + 1);
        v90 = *((float *)v266 + 8);
        if (!v72 || (float)(v90 * (float)v72) < v89)
        {
          v91 = (v72 & (v72 - 1)) != 0;
          if (v72 < 3)
            v91 = 1;
          v92 = v91 | (2 * v72);
          v93 = vcvtps_u32_f32(v89 / v90);
          if (v92 <= v93)
            prime = v93;
          else
            prime = v92;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v72 = v266[1];
          }
          if (prime <= v72)
          {
            if (prime >= v72)
              goto LABEL_204;
            v105 = vcvtps_u32_f32((float)(unint64_t)v266[3] / *((float *)v266 + 8));
            if (v72 < 3
              || (v106 = (uint8x8_t)vcnt_s8((int8x8_t)v72), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
            {
              v105 = std::__next_prime(v105);
            }
            else
            {
              v107 = 1 << -(char)__clz(v105 - 1);
              if (v105 >= 2)
                v105 = v107;
            }
            if (prime <= v105)
              prime = v105;
            if (prime >= v72)
              goto LABEL_204;
            if (!prime)
            {
              v111 = (void *)*v266;
              *v266 = 0;
              if (v111)
                operator delete(v111);
              v266[1] = 0;
              goto LABEL_204;
            }
          }
          if (prime >> 61)
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v95 = operator new(8 * prime);
          v96 = (void *)*v266;
          *v266 = (uint64_t)v95;
          if (v96)
            operator delete(v96);
          v97 = 0;
          v266[1] = prime;
          do
            *(_QWORD *)(*v266 + 8 * v97++) = 0;
          while (prime != v97);
          v98 = (_QWORD *)*v258;
          if (!*v258)
            goto LABEL_204;
          v99 = v98[1];
          v100 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v101 = v99 & v100;
            *(_QWORD *)(*v266 + 8 * v101) = v258;
            while (1)
            {
              v102 = (_QWORD *)*v98;
              if (!*v98)
                break;
              v103 = v102[1] & v100;
              if (v103 == v101)
              {
                v98 = (_QWORD *)*v98;
              }
              else if (*(_QWORD *)(*v266 + 8 * v103))
              {
                *v98 = *v102;
                v104 = 8 * v103;
                *v102 = **(_QWORD **)(*v266 + v104);
                **(_QWORD **)(*v266 + v104) = v102;
              }
              else
              {
                *(_QWORD *)(*v266 + 8 * v103) = v98;
                v98 = v102;
                v101 = v103;
              }
            }
LABEL_204:
            v72 = v266[1];
            if ((v72 & (v72 - 1)) != 0)
            {
              if (v71 >= v72)
                v42 = v71 % v72;
              else
                v42 = v71;
            }
            else
            {
              v42 = (v72 - 1) & v71;
            }
            goto LABEL_209;
          }
          if (v99 >= prime)
            v99 %= prime;
          *(_QWORD *)(*v266 + 8 * v99) = v258;
          v108 = (_QWORD *)*v98;
          if (!*v98)
            goto LABEL_204;
          while (1)
          {
            v110 = v108[1];
            if (v110 >= prime)
              v110 %= prime;
            if (v110 != v99)
            {
              if (!*(_QWORD *)(*v266 + 8 * v110))
              {
                *(_QWORD *)(*v266 + 8 * v110) = v98;
                goto LABEL_190;
              }
              *v98 = *v108;
              v109 = 8 * v110;
              *v108 = **(_QWORD **)(*v266 + v109);
              **(_QWORD **)(*v266 + v109) = v108;
              v108 = v98;
            }
            v110 = v99;
LABEL_190:
            v98 = v108;
            v108 = (_QWORD *)*v108;
            v99 = v110;
            if (!v108)
              goto LABEL_204;
          }
        }
LABEL_209:
        v112 = *v266;
        v113 = *(_QWORD **)(*v266 + 8 * v42);
        if (v113)
        {
          *(_QWORD *)v86 = *v113;
LABEL_217:
          *v113 = v86;
          goto LABEL_218;
        }
        *(_QWORD *)v86 = *v258;
        *v258 = v86;
        *(_QWORD *)(v112 + 8 * v42) = v258;
        if (*(_QWORD *)v86)
        {
          v114 = *(_QWORD *)(*(_QWORD *)v86 + 8);
          if ((v72 & (v72 - 1)) != 0)
          {
            if (v114 >= v72)
              v114 %= v72;
          }
          else
          {
            v114 &= v72 - 1;
          }
          v113 = (_QWORD *)(*v266 + 8 * v114);
          goto LABEL_217;
        }
LABEL_218:
        ++v266[3];
LABEL_219:
        v115 = *(id *)(a2 + 8);
        v116 = objc_msgSend(v115, "anisotropy");
        v283 = (int)v65;
        v117 = (unsigned __int8 **)std::__hash_table<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)(v262 + 672), v65, &v283);
        v118 = v117[3];
        v119 = v117[4];
        v120 = (unint64_t)(v117 + 3);
        if (v118 != v119)
        {
          while (*v118 != v116)
          {
            v118 += 32;
            if (v118 == v119)
              goto LABEL_234;
          }
        }
        if (v118 != v119
          && *((_QWORD *)geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>::operator[](v117 + 3, v116)+ 2))
        {
          v121 = *((_QWORD *)geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>::operator[]((unsigned __int8 **)v120, v116)+ 1);
          v123 = *(_QWORD *)(v121 + 16);
          v122 = *(_QWORD *)(v121 + 24);
          *(_QWORD *)&v267 = v123;
          *((_QWORD *)&v267 + 1) = v122;
          if (v122)
          {
            v124 = (unint64_t *)(v122 + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v126 = geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>::operator[]((unsigned __int8 **)v120, v116);
          v127 = (uint64_t *)*((_QWORD *)v126 + 1);
          v128 = *v127;
          *(_QWORD *)(v128 + 8) = v127[1];
          *(_QWORD *)v127[1] = v128;
          --*((_QWORD *)v126 + 2);
          v129 = (std::__shared_weak_count *)v127[3];
          if (v129)
          {
            p_shared_owners = (unint64_t *)&v129->__shared_owners_;
            do
              v131 = __ldaxr(p_shared_owners);
            while (__stlxr(v131 - 1, p_shared_owners));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          operator delete(v127);
          goto LABEL_411;
        }
LABEL_234:
        v62 = v116;
        v132 = *(_QWORD *)(v262 + 608);
        if (v132)
        {
          v133 = (uint8x8_t)vcnt_s8((int8x8_t)v132);
          v133.i16[0] = vaddlv_u8(v133);
          if (v133.u32[0] > 1uLL)
          {
            v134 = v116;
            if (v132 <= v116)
              v134 = v116 % v132;
          }
          else
          {
            v134 = ((_DWORD)v132 - 1) & v116;
          }
          v135 = *(uint64_t ****)(*v261 + 8 * v134);
          if (v135)
          {
            v136 = *v135;
            if (v136)
            {
              if (v133.u32[0] < 2uLL)
              {
                while (1)
                {
                  v138 = v136[1];
                  if (v138 == (uint64_t *)v116)
                  {
                    if (*((unsigned __int8 *)v136 + 16) == v116)
                      goto LABEL_322;
                  }
                  else if (((unint64_t)v138 & (v132 - 1)) != v134)
                  {
                    goto LABEL_254;
                  }
                  v136 = (uint64_t **)*v136;
                  if (!v136)
                    goto LABEL_254;
                }
              }
              do
              {
                v137 = (unint64_t)v136[1];
                if (v137 == v116)
                {
                  if (*((unsigned __int8 *)v136 + 16) == v116)
                    goto LABEL_322;
                }
                else
                {
                  if (v137 >= v132)
                    v137 %= v132;
                  if (v137 != v134)
                    break;
                }
                v136 = (uint64_t **)*v136;
              }
              while (v136);
            }
          }
        }
LABEL_254:
        v139 = (char *)operator new(0x58uLL);
        v140 = (std::__shared_weak_count *)v139;
        *((_QWORD *)v139 + 1) = 0;
        *((_QWORD *)v139 + 2) = 0;
        *(_QWORD *)v139 = &off_1E42DED18;
        *((_QWORD *)v139 + 5) = 0;
        *((_QWORD *)v139 + 6) = 0;
        *((_QWORD *)v139 + 4) = 0;
        *((_DWORD *)v139 + 14) = 0;
        *((_QWORD *)v139 + 3) = &off_1E42B63B0;
        *(_QWORD *)(v139 + 60) = 0x100000001;
        *((_DWORD *)v139 + 17) = v116;
        *(_OWORD *)(v139 + 72) = xmmword_19FFB3C50;
        LOBYTE(v281) = v116;
        *(_QWORD *)&v282 = v139 + 24;
        *((_QWORD *)&v282 + 1) = v139;
        v279 = 0;
        v280 = 0;
        if (!v132)
          goto LABEL_274;
        v141 = (uint8x8_t)vcnt_s8((int8x8_t)v132);
        v141.i16[0] = vaddlv_u8(v141);
        if (v141.u32[0] > 1uLL)
        {
          v120 = v116;
          if (v132 <= v116)
            v120 = v116 % v132;
        }
        else
        {
          v120 = ((_DWORD)v132 - 1) & v116;
        }
        v142 = *(uint64_t ****)(*v261 + 8 * v120);
        if (!v142 || (v143 = *v142) == 0)
        {
LABEL_274:
          v146 = (char *)operator new(0x28uLL);
          v284 = (uint64_t (**)())v146;
          v285 = (__int128 *)(v262 + 616);
          *(_QWORD *)v146 = 0;
          *((_QWORD *)v146 + 1) = v116;
          v146[16] = v116;
          *(_OWORD *)(v146 + 24) = v282;
          v282 = 0uLL;
          v286 = 1;
          v147 = (float)(unint64_t)(*(_QWORD *)(v262 + 624) + 1);
          v148 = *(float *)(v262 + 632);
          if (!v132 || (float)(v148 * (float)v132) < v147)
          {
            v149 = (v132 & (v132 - 1)) != 0;
            if (v132 < 3)
              v149 = 1;
            v150 = v149 | (2 * v132);
            v151 = vcvtps_u32_f32(v147 / v148);
            if (v150 <= v151)
              v152 = v151;
            else
              v152 = v150;
            if (v152 == 1)
            {
              v152 = 2;
            }
            else if ((v152 & (v152 - 1)) != 0)
            {
              v152 = std::__next_prime(v152);
              v132 = *(_QWORD *)(v262 + 608);
            }
            if (v152 > v132)
              goto LABEL_286;
            if (v152 < v132)
            {
              v153 = vcvtps_u32_f32((float)*(unint64_t *)(v262 + 624) / *(float *)(v262 + 632));
              if (v132 < 3
                || (v154 = (uint8x8_t)vcnt_s8((int8x8_t)v132), v154.i16[0] = vaddlv_u8(v154), v154.u32[0] > 1uLL))
              {
                v153 = std::__next_prime(v153);
              }
              else
              {
                v155 = 1 << -(char)__clz(v153 - 1);
                if (v153 >= 2)
                  v153 = v155;
              }
              if (v152 <= v153)
                v152 = v153;
              if (v152 < v132)
LABEL_286:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v261, v152);
            }
            v132 = *(_QWORD *)(v262 + 608);
            if ((v132 & (v132 - 1)) != 0)
            {
              if (v132 <= v116)
                v120 = v116 % v132;
              else
                v120 = v116;
            }
            else
            {
              v120 = ((_DWORD)v132 - 1) & v116;
            }
          }
          v158 = *v261;
          v159 = *(_QWORD **)(*v261 + 8 * v120);
          if (v159)
          {
            *(_QWORD *)v146 = *v159;
          }
          else
          {
            *(_QWORD *)v146 = *v257;
            *v257 = v146;
            *(_QWORD *)(v158 + 8 * v120) = v257;
            if (!*(_QWORD *)v146)
            {
LABEL_315:
              ++*(_QWORD *)(v262 + 624);
              goto LABEL_316;
            }
            v160 = *(_QWORD *)(*(_QWORD *)v146 + 8);
            if ((v132 & (v132 - 1)) != 0)
            {
              if (v160 >= v132)
                v160 %= v132;
            }
            else
            {
              v160 &= v132 - 1;
            }
            v159 = (_QWORD *)(*v261 + 8 * v160);
          }
          *v159 = v146;
          goto LABEL_315;
        }
        if (v141.u32[0] < 2uLL)
        {
          while (1)
          {
            v145 = v143[1];
            if (v145 == (uint64_t *)v116)
            {
              if (*((unsigned __int8 *)v143 + 16) == v116)
                goto LABEL_293;
            }
            else if (((unint64_t)v145 & (v132 - 1)) != v120)
            {
              goto LABEL_274;
            }
            v143 = (uint64_t **)*v143;
            if (!v143)
              goto LABEL_274;
          }
        }
        while (1)
        {
          v144 = (unint64_t)v143[1];
          if (v144 == v116)
            break;
          if (v144 >= v132)
            v144 %= v132;
          if (v144 != v120)
            goto LABEL_274;
LABEL_264:
          v143 = (uint64_t **)*v143;
          if (!v143)
            goto LABEL_274;
        }
        if (*((unsigned __int8 *)v143 + 16) != v116)
          goto LABEL_264;
LABEL_293:
        v156 = (unint64_t *)(v139 + 8);
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          (*(void (**)(char *))(*(_QWORD *)v139 + 16))(v139);
          std::__shared_weak_count::__release_weak(v140);
        }
LABEL_316:
        v120 = (unint64_t)v280;
        if (v280)
        {
          v161 = (unint64_t *)&v280->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v120 + 16))(v120);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v120);
          }
        }
        v132 = *(_QWORD *)(v262 + 608);
LABEL_322:
        if (v132)
        {
          v163 = (uint8x8_t)vcnt_s8((int8x8_t)v132);
          v163.i16[0] = vaddlv_u8(v163);
          if (v163.u32[0] > 1uLL)
          {
            v120 = v116;
            if (v132 <= v116)
              v120 = v116 % v132;
          }
          else
          {
            v120 = ((_DWORD)v132 - 1) & v116;
          }
          v164 = *(void ***)(*v261 + 8 * v120);
          if (v164)
          {
            v165 = (unsigned __int8 *)*v164;
            if (*v164)
            {
              if (v163.u32[0] < 2uLL)
              {
                while (1)
                {
                  v167 = *((_QWORD *)v165 + 1);
                  if (v167 == v116)
                  {
                    if (v165[16] == v116)
                      goto LABEL_380;
                  }
                  else if ((v167 & (v132 - 1)) != v120)
                  {
                    goto LABEL_342;
                  }
                  v165 = *(unsigned __int8 **)v165;
                  if (!v165)
                    goto LABEL_342;
                }
              }
              do
              {
                v166 = *((_QWORD *)v165 + 1);
                if (v166 == v116)
                {
                  if (v165[16] == v116)
                    goto LABEL_380;
                }
                else
                {
                  if (v166 >= v132)
                    v166 %= v132;
                  if (v166 != v120)
                    break;
                }
                v165 = *(unsigned __int8 **)v165;
              }
              while (v165);
            }
          }
        }
LABEL_342:
        v165 = (unsigned __int8 *)operator new(0x28uLL);
        v284 = (uint64_t (**)())v165;
        v285 = (__int128 *)(v262 + 616);
        *(_QWORD *)v165 = 0;
        *((_QWORD *)v165 + 1) = v116;
        v165[16] = v116;
        *((_QWORD *)v165 + 3) = 0;
        *((_QWORD *)v165 + 4) = 0;
        v286 = 1;
        v168 = (float)(unint64_t)(*(_QWORD *)(v262 + 624) + 1);
        v169 = *(float *)(v262 + 632);
        if (v132 && (float)(v169 * (float)v132) >= v168)
        {
          v62 = v120;
        }
        else
        {
          v170 = (v132 & (v132 - 1)) != 0;
          if (v132 < 3)
            v170 = 1;
          v171 = v170 | (2 * v132);
          v172 = vcvtps_u32_f32(v168 / v169);
          if (v171 <= v172)
            v173 = v172;
          else
            v173 = v171;
          if (v173 == 1)
          {
            v173 = 2;
          }
          else if ((v173 & (v173 - 1)) != 0)
          {
            v173 = std::__next_prime(v173);
            v132 = *(_QWORD *)(v262 + 608);
          }
          if (v173 > v132)
            goto LABEL_355;
          if (v173 < v132)
          {
            v174 = vcvtps_u32_f32((float)*(unint64_t *)(v262 + 624) / *(float *)(v262 + 632));
            if (v132 < 3
              || (v175 = (uint8x8_t)vcnt_s8((int8x8_t)v132), v175.i16[0] = vaddlv_u8(v175), v175.u32[0] > 1uLL))
            {
              v174 = std::__next_prime(v174);
            }
            else
            {
              v176 = 1 << -(char)__clz(v174 - 1);
              if (v174 >= 2)
                v174 = v176;
            }
            if (v173 <= v174)
              v173 = v174;
            if (v173 < v132)
LABEL_355:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v261, v173);
          }
          v132 = *(_QWORD *)(v262 + 608);
          if ((v132 & (v132 - 1)) != 0)
          {
            if (v132 <= v116)
              v62 = v116 % v132;
          }
          else
          {
            v62 = ((_DWORD)v132 - 1) & v116;
          }
        }
        v177 = *v261;
        v178 = *(_QWORD **)(*v261 + 8 * v62);
        if (v178)
        {
          *(_QWORD *)v165 = *v178;
          goto LABEL_378;
        }
        *(_QWORD *)v165 = *v257;
        *v257 = v165;
        *(_QWORD *)(v177 + 8 * v62) = v257;
        if (*(_QWORD *)v165)
        {
          v179 = *(_QWORD *)(*(_QWORD *)v165 + 8);
          if ((v132 & (v132 - 1)) != 0)
          {
            if (v179 >= v132)
              v179 %= v132;
          }
          else
          {
            v179 &= v132 - 1;
          }
          v178 = (_QWORD *)(*v261 + 8 * v179);
LABEL_378:
          *v178 = v165;
        }
        ++*(_QWORD *)(v262 + 624);
LABEL_380:
        v180 = (uint64_t (**)())*((_QWORD *)v165 + 3);
        v181 = (std::__shared_weak_count *)*((_QWORD *)v165 + 4);
        v281 = v180;
        *(_QWORD *)&v282 = v181;
        if (v181)
        {
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldxr(v182);
          while (__stxr(v183 + 1, v182));
        }
        v184 = operator new(0xC8uLL);
        v185 = v184;
        v184[1] = 0;
        v184[2] = 0;
        *v184 = &off_1E42E0BB8;
        v284 = v180;
        v285 = (__int128 *)v181;
        if (v181)
        {
          v186 = (unint64_t *)&v181->__shared_owners_;
          do
            v187 = __ldxr(v186);
          while (__stxr(v187 + 1, v186));
        }
        ggl::IOSurfaceTexture::IOSurfaceTexture((uint64_t)(v184 + 3), 512, 512, 13, &v284, 3);
        if (v181)
        {
          v188 = (unint64_t *)&v181->__shared_owners_;
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        *(_QWORD *)&v267 = v185 + 3;
        *((_QWORD *)&v267 + 1) = v185;
        +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
        v190 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t (***__return_ptr)()))(**(_QWORD **)(objc_msgSend(v190, "device") + 8)
                                                                       + 24))(&v278);

        v284 = &off_1E42CB7F8;
        v285 = &v267;
        v287 = &v284;
        v279 = 0;
        v280 = 0;
        (*((void (**)(uint64_t (**)(), uint64_t (***)(), uint64_t *))*v278 + 2))(v278, &v284, &v279);
        v191 = v280;
        if (v280)
        {
          v192 = (unint64_t *)&v280->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v194 = v287;
        if (v287 == &v284)
        {
          v194 = &v284;
          v195 = 4;
LABEL_400:
          (*v194)[v195]();
        }
        else if (v287)
        {
          v195 = 5;
          goto LABEL_400;
        }
        if (v278)
        {
          v196 = (*((uint64_t (**)(uint64_t (**)()))*v278 + 3))(v278);
          v197 = v278;
          v278 = 0;
          v284 = v197;
          (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v196 + 48))(v196, &v284);
          v198 = v284;
          v284 = 0;
          if (v198)
            (*((void (**)(uint64_t (**)()))*v198 + 1))(v198);
          v199 = v278;
          v278 = 0;
          if (v199)
            (*((void (**)(uint64_t (**)()))*v199 + 1))(v199);
        }
        v200 = (std::__shared_weak_count *)v282;
        if ((_QWORD)v282)
        {
          v201 = (unint64_t *)(v282 + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
LABEL_411:
        v65 = (uint64_t *)(v86 + 48);
        v203 = v277;
        v259 = v267;
        v269 = v267;
        v267 = 0uLL;
        v268 = v277;
        v204 = *((_QWORD *)v86 + 7);
        if (v204)
        {
          v205 = (uint8x8_t)vcnt_s8((int8x8_t)v204);
          v205.i16[0] = vaddlv_u8(v205);
          if (v205.u32[0] > 1uLL)
          {
            v62 = v277;
            if (v277 >= v204)
              v62 = v277 % v204;
          }
          else
          {
            v62 = (v204 - 1) & v277;
          }
          v206 = *(_QWORD **)(*v65 + 8 * v62);
          if (v206)
          {
            v207 = (_QWORD *)*v206;
            if (v207)
            {
              v208 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
              if (v205.u32[0] < 2uLL)
              {
                while (1)
                {
                  v210 = v207[1];
                  if (v210 == v277)
                  {
                    if (v207[2] == v277)
                      goto LABEL_469;
                  }
                  else if ((v210 & (v204 - 1)) != v62)
                  {
                    goto LABEL_431;
                  }
                  v207 = (_QWORD *)*v207;
                  if (!v207)
                    goto LABEL_431;
                }
              }
              do
              {
                v209 = v207[1];
                if (v209 == v277)
                {
                  if (v207[2] == v277)
                    goto LABEL_469;
                }
                else
                {
                  if (v209 >= v204)
                    v209 %= v204;
                  if (v209 != v62)
                    break;
                }
                v207 = (_QWORD *)*v207;
              }
              while (v207);
            }
          }
        }
LABEL_431:
        v211 = (char *)operator new(0x28uLL);
        v212 = v86 + 64;
        v284 = (uint64_t (**)())v211;
        v285 = (__int128 *)(v86 + 64);
        *(_QWORD *)v211 = 0;
        *((_QWORD *)v211 + 1) = v203;
        *((_QWORD *)v211 + 2) = v203;
        *(_OWORD *)(v211 + 24) = v259;
        v269 = 0uLL;
        v286 = 1;
        v213 = (float)(unint64_t)(*((_QWORD *)v86 + 9) + 1);
        v214 = *((float *)v86 + 20);
        if (!v204 || (float)(v214 * (float)v204) < v213)
        {
          v215 = (v204 & (v204 - 1)) != 0;
          if (v204 < 3)
            v215 = 1;
          v216 = v215 | (2 * v204);
          v217 = vcvtps_u32_f32(v213 / v214);
          if (v216 <= v217)
            v218 = v217;
          else
            v218 = v216;
          if (v218 == 1)
          {
            v218 = 2;
          }
          else if ((v218 & (v218 - 1)) != 0)
          {
            v218 = std::__next_prime(v218);
          }
          v219 = *(int8x8_t *)(v86 + 56);
          if (v218 > *(_QWORD *)&v219)
            goto LABEL_443;
          if (v218 < *(_QWORD *)&v219)
          {
            v220 = vcvtps_u32_f32((float)*((unint64_t *)v86 + 9) / *((float *)v86 + 20));
            if (*(_QWORD *)&v219 < 3uLL
              || (v221 = (uint8x8_t)vcnt_s8(v219), v221.i16[0] = vaddlv_u8(v221), v221.u32[0] > 1uLL))
            {
              v220 = std::__next_prime(v220);
            }
            else
            {
              v222 = 1 << -(char)__clz(v220 - 1);
              if (v220 >= 2)
                v220 = v222;
            }
            if (v218 <= v220)
              v218 = v220;
            if (v218 < *(_QWORD *)&v219)
LABEL_443:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v86 + 48), v218);
          }
          v204 = *((_QWORD *)v86 + 7);
          if ((v204 & (v204 - 1)) != 0)
          {
            if (v203 >= v204)
              v62 = v203 % v204;
            else
              v62 = v203;
          }
          else
          {
            v62 = (v204 - 1) & v203;
          }
        }
        v223 = *v65;
        v224 = *(_QWORD **)(*v65 + 8 * v62);
        if (v224)
        {
          *(_QWORD *)v211 = *v224;
          goto LABEL_467;
        }
        *(_QWORD *)v211 = *v212;
        *v212 = v211;
        *(_QWORD *)(v223 + 8 * v62) = v212;
        if (*(_QWORD *)v211)
        {
          v225 = *(_QWORD *)(*(_QWORD *)v211 + 8);
          if ((v204 & (v204 - 1)) != 0)
          {
            if (v225 >= v204)
              v225 %= v204;
          }
          else
          {
            v225 &= v204 - 1;
          }
          v224 = (_QWORD *)(*v65 + 8 * v225);
LABEL_467:
          *v224 = v211;
        }
        ++*((_QWORD *)v86 + 9);
        v208 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
        if (!v208)
          goto LABEL_473;
LABEL_469:
        v226 = (unint64_t *)&v208->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
          v228 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
          if (*((_QWORD *)&v267 + 1))
          {
LABEL_474:
            v229 = (unint64_t *)&v228->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }
        }
        else
        {
LABEL_473:
          v228 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
          if (*((_QWORD *)&v267 + 1))
            goto LABEL_474;
        }

LABEL_480:
        v231 = *(id *)(a2 + 8);
        v232 = objc_msgSend(v231, "shouldUseMetalTexture");

        if (v232)
        {
          v233 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>(v266, v270);
          if (!v233)
            abort();
          v59 = v277;
          v234 = *(_QWORD *)(std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v233 + 6), v277, (uint64_t *)&v277)[3]+ 24);
          v235 = *(id *)(a2 + 8);
          if (*(_BYTE *)(v234 + 120) == 1)
          {
            v237 = (id *)(*(_QWORD *)(v234 + 32) + 8 * *(unsigned int *)(v234 + 64));
LABEL_488:
            v65 = (uint64_t *)*v237;
          }
          else if (!*(_BYTE *)(v234 + 120))
          {
            v237 = *(id **)(v234 + 32);
            goto LABEL_488;
          }
          *(float *)&v236 = v35;
          objc_msgSend(v235, "drawKey:withData:inTexture:withTimestamp:withTileScale:", v273, v263, v65, *v256, v236);

        }
        else
        {
          v235 = *(id *)(a2 + 8);
          v238 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>(v266, v270);
          if (!v238)
            abort();
          v59 = v277;
          objc_msgSend(v235, "drawKey:withData:inIOSurface:withTimestamp:", v273, v263, *(_QWORD *)(std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v238 + 6), v277, (uint64_t *)&v277)[3]+ 160), *v256);
        }

        v42 = (uint64_t)v274;
        v43 = v275;
LABEL_491:

LABEL_65:
        v58 = v265 + 1;
        if (v265 + 1 < 0xF0F0F0F0F0F0F0F1 * ((v43 - v42) >> 3))
          continue;
        break;
      }
      if (!v42)
        goto LABEL_43;
      if (v43 == v42)
      {
LABEL_41:
        v36 = (void *)v42;
        goto LABEL_42;
      }
      while (2)
      {
        v239 = *(std::__shared_weak_count **)(v43 - 24);
        if (!v239)
          goto LABEL_498;
        v240 = (unint64_t *)&v239->__shared_owners_;
        do
          v241 = __ldaxr(v240);
        while (__stlxr(v241 - 1, v240));
        if (!v241)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
          v242 = *(std::__shared_weak_count **)(v43 - 40);
          if (v242)
          {
LABEL_499:
            v243 = (unint64_t *)&v242->__shared_owners_;
            do
              v244 = __ldaxr(v243);
            while (__stlxr(v244 - 1, v243));
            if (!v244)
            {
              ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
              std::__shared_weak_count::__release_weak(v242);
            }
          }
        }
        else
        {
LABEL_498:
          v242 = *(std::__shared_weak_count **)(v43 - 40);
          if (v242)
            goto LABEL_499;
        }
        v245 = *(std::__shared_weak_count **)(v43 - 56);
        if (!v245)
          goto LABEL_508;
        v246 = (unint64_t *)&v245->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
          v248 = *(std::__shared_weak_count **)(v43 - 72);
          if (v248)
            goto LABEL_509;
        }
        else
        {
LABEL_508:
          v248 = *(std::__shared_weak_count **)(v43 - 72);
          if (v248)
          {
LABEL_509:
            v249 = (unint64_t *)&v248->__shared_owners_;
            do
              v250 = __ldaxr(v249);
            while (__stlxr(v250 - 1, v249));
            if (!v250)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
          }
        }
        *(_QWORD *)(v43 - 104) = &off_1E42B4A70;

        v43 -= 136;
        if (v43 != v42)
          continue;
        break;
      }
      v36 = v274;
LABEL_42:
      v275 = v42;
      operator delete(v36);
LABEL_43:
      v31 = v260;
      v34 = v255;
LABEL_44:
      v34 = *(_QWORD *)(v34 + 8);
      if (v34 != v254)
        continue;
      break;
    }
LABEL_38:
    v31 = (uint64_t *)*v31;
    if (v31)
      continue;
    break;
  }
LABEL_516:
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v253 + 8 * v252);
}

void sub_19F9B2CE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  v14 = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *v10 = *v25;
LABEL_58:
    *v25 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v5) = v13;
  if (*v10)
  {
    v26 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F9B317C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<md::OverlayTileData::OverlayTileResource::CustomTile>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v3 - 136));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v6);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v6) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F9B3654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>::operator[](unsigned __int8 **a1, unsigned __int8 a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unsigned __int8 *v44;
  char *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  char *v62;
  char *v63;
  _QWORD *v64;

  v4 = *a1;
  v5 = (unint64_t)a1[1];
  v6 = *a1;
  if (*a1 != (unsigned __int8 *)v5)
  {
    v6 = *a1;
    while (*v6 != a2)
    {
      v6 += 32;
      if (v6 == (unsigned __int8 *)v5)
        goto LABEL_7;
    }
  }
  if (v6 == (unsigned __int8 *)v5)
  {
LABEL_7:
    v53 = (uint64_t)&v53;
    v54 = &v53;
    v55 = 0;
    v56 = a2;
    v57 = (uint64_t)&v57;
    v58 = &v57;
    v59 = 0;
    v6 = v4;
    if (v4 != (unsigned __int8 *)v5)
    {
      while (*v6 != a2)
      {
        v6 += 32;
        if (v6 == (unsigned __int8 *)v5)
          goto LABEL_12;
      }
    }
    if (v6 != (unsigned __int8 *)v5)
      goto LABEL_36;
LABEL_12:
    v7 = (unint64_t)a1[2];
    if (v5 < v7)
    {
      *(_BYTE *)v5 = a2;
      std::list<std::shared_ptr<ggl::IOSurfaceTexture>>::list((_QWORD *)(v5 + 8), &v57);
      v8 = (char *)(v5 + 32);
      a1[1] = (unsigned __int8 *)v8;
LABEL_34:
      a1[1] = (unsigned __int8 *)v8;
      v6 = (unsigned __int8 *)(v8 - 32);
      if (v59)
      {
        v29 = v57;
        v30 = v58;
        v31 = *v58;
        *(_QWORD *)(v31 + 8) = *(_QWORD *)(v57 + 8);
        **(_QWORD **)(v29 + 8) = v31;
        v59 = 0;
        if (v30 != &v57)
        {
          do
          {
            v40 = (uint64_t *)v30[1];
            v41 = (std::__shared_weak_count *)v30[3];
            if (v41)
            {
              p_shared_owners = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldaxr(p_shared_owners);
              while (__stlxr(v43 - 1, p_shared_owners));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            operator delete(v30);
            v30 = v40;
          }
          while (v40 != &v57);
        }
      }
LABEL_36:
      if (v55)
      {
        v32 = v53;
        v33 = v54;
        v34 = *v54;
        *(_QWORD *)(v34 + 8) = *(_QWORD *)(v53 + 8);
        **(_QWORD **)(v32 + 8) = v34;
        v55 = 0;
        if (v33 != &v53)
        {
          do
          {
            v36 = (uint64_t *)v33[1];
            v37 = (std::__shared_weak_count *)v33[3];
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            operator delete(v33);
            v33 = v36;
          }
          while (v36 != &v53);
        }
      }
      return v6 + 8;
    }
    v9 = (uint64_t)(v5 - (_QWORD)v4) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      abort();
    v10 = v7 - (_QWORD)v4;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v64 = a1 + 2;
    if (v12)
    {
      if (v12 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(32 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[32 * v9];
    v60 = (unsigned __int8 *)v13;
    v61 = (unsigned __int8 *)v14;
    v62 = v14;
    v63 = &v13[32 * v12];
    *v14 = a2;
    std::list<std::shared_ptr<ggl::IOSurfaceTexture>>::list((_QWORD *)v14 + 1, &v57);
    v15 = v61;
    v8 = v62 + 32;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v27 = a1[1];
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v15[v18];
        v20 = (char *)&v16[v18];
        *(v19 - 32) = v16[v18 - 32];
        v21 = (uint64_t *)&v15[v18 - 24];
        *((_QWORD *)v19 - 3) = v21;
        *((_QWORD *)v19 - 2) = v21;
        *((_QWORD *)v19 - 1) = 0;
        v22 = *(_QWORD *)&v16[v18 - 8];
        if (v22)
        {
          v24 = *((_QWORD *)v20 - 3);
          v23 = (uint64_t *)*((_QWORD *)v20 - 2);
          v25 = *v23;
          *(_QWORD *)(v25 + 8) = *(_QWORD *)(v24 + 8);
          **(_QWORD **)(v24 + 8) = v25;
          v26 = *v21;
          *(_QWORD *)(v26 + 8) = v23;
          *v23 = v26;
          *v21 = v24;
          *(_QWORD *)(v24 + 8) = v21;
          *((_QWORD *)v19 - 1) = v22;
          *((_QWORD *)v20 - 1) = 0;
        }
        v18 -= 32;
      }
      while (&v16[v18] != v17);
      v15 += v18;
      v27 = *a1;
      v16 = a1[1];
    }
    *a1 = v15;
    a1[1] = (unsigned __int8 *)v8;
    v28 = (char *)a1[2];
    a1[2] = (unsigned __int8 *)v63;
    v63 = v28;
    v60 = v27;
    v61 = v27;
    if (v16 == v27)
    {
      if (!v16)
        goto LABEL_34;
    }
    else
    {
      do
      {
        v44 = v16 - 32;
        v62 = (char *)(v16 - 32);
        if (*((_QWORD *)v16 - 1))
        {
          v45 = (char *)(v16 - 24);
          v46 = *((_QWORD *)v16 - 3);
          v47 = (unsigned __int8 *)*((_QWORD *)v16 - 2);
          v48 = *(_QWORD *)v47;
          *(_QWORD *)(v48 + 8) = *(_QWORD *)(v46 + 8);
          **(_QWORD **)(v46 + 8) = v48;
          *((_QWORD *)v16 - 1) = 0;
          if (v47 != v16 - 24)
          {
            do
            {
              v49 = (char *)*((_QWORD *)v47 + 1);
              v50 = (std::__shared_weak_count *)*((_QWORD *)v47 + 3);
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              operator delete(v47);
              v47 = (unsigned __int8 *)v49;
            }
            while (v49 != v45);
            v44 = (unsigned __int8 *)v62;
          }
        }
        v16 = v44;
      }
      while (v44 != v27);
      v16 = v60;
      if (!v60)
        goto LABEL_34;
    }
    operator delete(v16);
    goto LABEL_34;
  }
  return v6 + 8;
}

void sub_19F9B3A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__split_buffer<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::~__split_buffer((uint64_t)&a16);
  std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>::~pair(&a12);
  std::list<std::shared_ptr<ggl::IOSurfaceTexture>>::~list(&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0,std::allocator<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0,std::allocator<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB7F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0,std::allocator<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB7F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0,std::allocator<md::OverlaysLogic::checkoutSurfaceTexture(unsigned int,unsigned char)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __n128 v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(result + 8);
  if (!v2)
    return result;
  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 112);
  v5 = *(_QWORD *)(v2 + 80);
  v6 = operator new(0x20uLL);
  *v6 = &off_1E42C6DE0;
  v6[1] = ggl::Texture2D::onImplicitLoadComplete;
  v6[2] = 0;
  v6[3] = v2;
  v21 = v6;
  v13[0] = v4;
  v13[1] = v2;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v7 = v18;
  v17 = v5;
  v8 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v6);
  v19 = v9;
  v10 = v21;
  if (v21 == v20)
  {
    v11 = 4;
    v10 = v20;
    goto LABEL_6;
  }
  if (v21)
  {
    v11 = 5;
LABEL_6:
    (*(void (**)(__n128))(*v10 + 8 * v11))(v8);
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v13, v8);
  if (v19 == v18)
  {
    v12 = 4;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
    v7 = v19;
  }
  return (*(uint64_t (**)(_QWORD *))(*v7 + 8 * v12))(v7);
}

void sub_19F9B3C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ggl::IOSurfaceTexture>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::IOSurfaceTexture>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::IOSurfaceTexture>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::list<std::shared_ptr<ggl::IOSurfaceTexture>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_19F9B3D58(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>::~pair(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (a1[3])
  {
    v2 = a1 + 1;
    v3 = a1[1];
    v4 = (uint64_t *)a1[2];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[3] = 0;
    if (v4 != a1 + 1)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (std::__shared_weak_count *)v4[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  return a1;
}

uint64_t *std::list<std::shared_ptr<ggl::IOSurfaceTexture>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (std::__shared_weak_count *)v3[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(_QWORD *)(v2 - 8))
      {
        v6 = (uint64_t *)(v2 - 24);
        v7 = *(_QWORD *)(v2 - 24);
        v8 = *(uint64_t **)(v2 - 16);
        v9 = *v8;
        *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
        **(_QWORD **)(v7 + 8) = v9;
        *(_QWORD *)(v2 - 8) = 0;
        if (v8 != (uint64_t *)(v2 - 24))
        {
          do
          {
            v10 = (uint64_t *)v8[1];
            v11 = (std::__shared_weak_count *)v8[3];
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            operator delete(v8);
            v8 = v10;
          }
          while (v10 != v6);
          v5 = *(_QWORD *)(a1 + 16);
        }
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = v2 + 3;
      std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100](&v4);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[8];
      while (v3)
      {
        v6 = v3;
        v3 = (_QWORD *)*v3;
        v7 = (std::__shared_weak_count *)v6[4];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v6);
      }
      v4 = (void *)v2[6];
      v2[6] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE0_NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE0_NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9908;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE0_NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9908;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE0_NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DynamicOverlayLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE_NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE_NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9950;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE_NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9950;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEENK3__0clEvEUlvE_NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DynamicOverlayLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB5B8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB5B8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__5NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__5NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB570;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__5NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB570;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__5NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEEclES1E_S1N_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t i;
  void **v7;

  v2 = *(_QWORD **)(a1 + 8);
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*a2);
  if (v2[87])
  {
    v3 = (char *)v2[86];
    if (v3)
    {
      do
      {
        v4 = *(char **)v3;
        v7 = (void **)(v3 + 24);
        std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100](&v7);
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v2[86] = 0;
    v5 = v2[85];
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(v2[84] + 8 * i) = 0;
    }
    v2[87] = 0;
  }
}

uint64_t gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5D35DD6F80F2990ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5D35DD6F80F2990ALL;
      if (*(_QWORD *)&v3 <= 0x5D35DD6F80F2990AuLL)
        v5 = 0x5D35DD6F80F2990AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5D35DD6F80F2990ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5D35DD6F80F2990ALL)
            {
              if (v7[2] == 0x5D35DD6F80F2990ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5D35DD6F80F2990ALL)
          {
            if (v7[2] == 0x5D35DD6F80F2990ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "std::unordered_set<gdc::Registry *>]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B44B8;
  *(_QWORD *)(v11 + 8) = 0x5D35DD6F80F2990ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5D35DD6F80F2990AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5D35DD6F80F2990ALL;
  v15[1] = "std::unordered_set<gdc::Registry *>]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5D35DD6F80F2990ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9B46D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F9B49DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void **v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *__p;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;

  v5 = (uint64_t *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(a1);
  std::unordered_set<gdc::Registry *>::unordered_set((uint64_t)&v55, a3);
  v60 = a2;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v5 + 4, (uint64_t)&v60);
  if ((v7 & 1) != 0)
  {
    v20 = v5[12];
    v21 = v5[11];
    if (v21 < v20)
    {
      std::unordered_set<gdc::Registry *>::unordered_set(v5[11], (uint64_t)&v55);
      v5[11] = v21 + 40;
      v5[11] = v21 + 40;
      goto LABEL_50;
    }
    v22 = v5[10];
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v22) >> 3);
    if (v23 + 1 > 0x666666666666666)
      abort();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v22) >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= v23 + 1)
      v25 = v23 + 1;
    if (v24 >= 0x333333333333333)
      v26 = 0x666666666666666;
    else
      v26 = v25;
    v66 = v5 + 12;
    if (v26)
    {
      if (v26 > 0x666666666666666)
        goto LABEL_68;
      v27 = (uint64_t *)operator new(40 * v26);
    }
    else
    {
      v27 = 0;
    }
    v62 = v27;
    v63 = (uint64_t)&v27[5 * v23];
    v64 = v63;
    v65 = (char *)&v27[5 * v26];
    std::unordered_set<gdc::Registry *>::unordered_set(v63, (uint64_t)&v55);
    v31 = v63;
    v32 = v64 + 40;
    v34 = (_QWORD *)v5[10];
    v33 = (_QWORD *)v5[11];
    if (v33 == v34)
    {
      v43 = v5[11];
    }
    else
    {
      v35 = 0;
      do
      {
        v37 = v31 + v35 * 8;
        v38 = (char *)&v33[v35];
        v39 = v33[v35 - 5];
        *((_QWORD *)v38 - 5) = 0;
        *(_QWORD *)(v37 - 40) = v39;
        *(_QWORD *)(v37 - 32) = v33[v35 - 4];
        *((_QWORD *)v38 - 4) = 0;
        v40 = v33[v35 - 3];
        *(_QWORD *)(v31 + v35 * 8 - 24) = v40;
        v41 = v33[v35 - 2];
        *(_QWORD *)(v37 - 16) = v41;
        *(_DWORD *)(v37 - 8) = v33[v35 - 1];
        if (v41)
        {
          v36 = *(_QWORD *)(v40 + 8);
          v42 = *(_QWORD *)(v37 - 32);
          if ((v42 & (v42 - 1)) != 0)
          {
            if (v36 >= v42)
              v36 %= v42;
          }
          else
          {
            v36 &= v42 - 1;
          }
          *(_QWORD *)(v39 + 8 * v36) = v31 + v35 * 8 - 24;
          v33[v35 - 3] = 0;
          v33[v35 - 2] = 0;
        }
        v35 -= 5;
      }
      while (&v33[v35] != v34);
      v31 += v35 * 8;
      v43 = v5[10];
      v33 = (_QWORD *)v5[11];
    }
    v5[10] = v31;
    v5[11] = v32;
    v44 = v5[12];
    v5[12] = (uint64_t)v65;
    v65 = (char *)v44;
    v62 = (uint64_t *)v43;
    v63 = v43;
    if (v33 == (_QWORD *)v43)
    {
      if (!v33)
      {
LABEL_49:
        v5[11] = v32;
        goto LABEL_50;
      }
    }
    else
    {
      do
      {
        v51 = (void **)(v33 - 5);
        v64 = (uint64_t)(v33 - 5);
        v52 = (_QWORD *)*(v33 - 3);
        if (v52)
        {
          do
          {
            v53 = (_QWORD *)*v52;
            operator delete(v52);
            v52 = v53;
          }
          while (v53);
        }
        v54 = *v51;
        *v51 = 0;
        if (v54)
          operator delete(v54);
        v33 = (_QWORD *)v64;
      }
      while (v64 != v43);
      v33 = v62;
      if (!v62)
        goto LABEL_49;
    }
    operator delete(v33);
    goto LABEL_49;
  }
  v8 = v5[10] + 40 * (((uint64_t)v6 - v5[7]) >> 3);
  if (*(_QWORD *)(v8 + 24))
  {
    v9 = *(_QWORD **)(v8 + 16);
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    *(_QWORD *)(v8 + 16) = 0;
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*(_QWORD *)v8 + 8 * i) = 0;
    }
    *(_QWORD *)(v8 + 24) = 0;
  }
  v13 = v55;
  v55 = 0;
  v14 = *(void **)v8;
  *(_QWORD *)v8 = v13;
  if (v14)
    operator delete(v14);
  v15 = v56;
  v16 = __p;
  *(_QWORD *)(v8 + 16) = __p;
  *(_QWORD *)(v8 + 8) = v15;
  v56 = 0;
  v17 = v58;
  *(_QWORD *)(v8 + 24) = v58;
  *(_DWORD *)(v8 + 32) = v59;
  if (v17)
  {
    v18 = v16[1];
    v19 = *(_QWORD *)(v8 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19)
        v18 %= v19;
    }
    else
    {
      v18 &= v19 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v18) = v8 + 16;
    __p = 0;
    v58 = 0;
  }
  if (v8 != v5[11])
  {
    v28 = (_QWORD *)v5[16];
    if (v28)
    {
      v29 = v5[31];
      while (1)
      {
        v62 = &v60;
        v63 = 1;
        v61 = v29;
        v30 = v28[6];
        if (!v30)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v30 + 48))(v30, &v61, &v62);
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_54;
      }
LABEL_66:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
LABEL_68:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    goto LABEL_54;
  }
LABEL_50:
  v45 = (_QWORD *)v5[22];
  if (v45)
  {
    v46 = v5[31];
    do
    {
      v62 = &v60;
      v63 = 1;
      v61 = v46;
      v47 = v45[6];
      if (!v47)
        goto LABEL_66;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v47 + 48))(v47, &v61, &v62);
      v45 = (_QWORD *)*v45;
    }
    while (v45);
  }
LABEL_54:
  v48 = __p;
  if (__p)
  {
    do
    {
      v49 = (_QWORD *)*v48;
      operator delete(v48);
      v48 = v49;
    }
    while (v49);
  }
  v50 = v55;
  v55 = 0;
  if (v50)
    operator delete(v50);
}

void std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      v7 = (_QWORD *)*v6;
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (_QWORD *)*a2;
      v6 = v7;
      if (!v7)
        goto LABEL_7;
    }
    do
    {
      v12 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v8 = operator new(0x18uLL);
      *v8 = 0;
      v9 = a2[2];
      v10 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      v11 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v10 >> 47) ^ v10);
      v8[1] = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      v8[2] = v9;
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_19F9B4F40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::OverlaysLogic::updateFoundationAssociation(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  void *v54;
  void **v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  BOOL v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v140;
  char *v141;
  _BYTE *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  char *v148;
  _BYTE *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  __int128 *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  void **v162;
  _QWORD *v163;
  char *v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  _QWORD *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  _QWORD *v183;
  void *v184;
  _QWORD *v185;
  void *v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  __int128 *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  _QWORD *v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  __int128 *v212;
  uint64_t v213;
  __int128 v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t j;
  _QWORD *v218;
  void *v219;
  char *v220;
  _QWORD *v222;
  void *v223[2];
  void *v224[2];
  int v225;
  unint64_t v226;
  uint64_t v227;
  void *__p[2];
  void *v229[2];
  uint64_t *v230;

  v5 = *(_QWORD *)(a1 + 152);
  v6 = (_QWORD *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(v5);
  v7 = HIDWORD(a2);
  v8 = a2 >> 39;
  v9 = v6[4];
  if (a2 >> 39 < (v6[5] - v9) >> 3)
  {
    v10 = *(_QWORD *)(v9 + 8 * v8);
    if (v10)
    {
      v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F));
      v13 = v6[7];
      v12 = v6[8];
      if (v11 < (v12 - v13) >> 3)
      {
        v14 = v13 + 8 * v11;
        if (v14 != v12 && *(_DWORD *)(v14 + 4) == HIDWORD(a2))
        {
          v16 = v6[10];
          v17 = v16 + 40 * v11;
          if (v17 != v6[11] && v16 != 0)
            goto LABEL_87;
        }
      }
    }
  }
  v19 = (uint64_t *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(v5);
  *(_OWORD *)v223 = 0u;
  *(_OWORD *)v224 = 0u;
  v225 = 1065353216;
  v226 = a2;
  v20 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v19 + 4, (uint64_t)&v226);
  if ((v21 & 1) != 0)
  {
    v32 = v19[12];
    v33 = v19[11];
    if (v33 >= v32)
    {
      v35 = v19[10];
      v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - v35) >> 3);
      if (v36 + 1 > 0x666666666666666)
        abort();
      v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - v35) >> 3);
      v38 = 2 * v37;
      if (2 * v37 <= v36 + 1)
        v38 = v36 + 1;
      if (v37 >= 0x333333333333333)
        v39 = 0x666666666666666;
      else
        v39 = v38;
      v230 = v19 + 12;
      if (v39)
      {
        if (v39 > 0x666666666666666)
LABEL_282:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v40 = (char *)operator new(40 * v39);
      }
      else
      {
        v40 = 0;
      }
      __p[0] = v40;
      __p[1] = &v40[40 * v36];
      v229[0] = __p[1];
      v229[1] = &v40[40 * v39];
      std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>::unordered_map((uint64_t)__p[1], (uint64_t)v223);
      v41 = (char *)__p[1];
      v42 = (char *)v229[0] + 40;
      v44 = (_QWORD *)v19[10];
      v43 = (_QWORD *)v19[11];
      if (v43 == v44)
      {
        v53 = (_QWORD *)v19[11];
      }
      else
      {
        v45 = 0;
        do
        {
          v47 = &v41[v45 * 8];
          v48 = (char *)&v43[v45];
          v49 = v43[v45 - 5];
          *((_QWORD *)v48 - 5) = 0;
          *((_QWORD *)v47 - 5) = v49;
          *((_QWORD *)v47 - 4) = v43[v45 - 4];
          *((_QWORD *)v48 - 4) = 0;
          v50 = v43[v45 - 3];
          *(_QWORD *)&v41[v45 * 8 - 24] = v50;
          v51 = v43[v45 - 2];
          *((_QWORD *)v47 - 2) = v51;
          *((_DWORD *)v47 - 2) = v43[v45 - 1];
          if (v51)
          {
            v46 = *(_QWORD *)(v50 + 8);
            v52 = *((_QWORD *)v47 - 4);
            if ((v52 & (v52 - 1)) != 0)
            {
              if (v46 >= v52)
                v46 %= v52;
            }
            else
            {
              v46 &= v52 - 1;
            }
            *(_QWORD *)(v49 + 8 * v46) = &v41[v45 * 8 - 24];
            v43[v45 - 3] = 0;
            v43[v45 - 2] = 0;
          }
          v45 -= 5;
        }
        while (&v43[v45] != v44);
        v41 += v45 * 8;
        v53 = (_QWORD *)v19[10];
        v43 = (_QWORD *)v19[11];
      }
      v19[10] = (uint64_t)v41;
      v19[11] = (uint64_t)v42;
      v54 = (void *)v19[12];
      v19[12] = (uint64_t)v229[1];
      v229[1] = v54;
      __p[0] = v53;
      __p[1] = v53;
      if (v43 != v53)
      {
        v220 = v42;
        do
        {
          v55 = (void **)(v43 - 5);
          v229[0] = v43 - 5;
          v56 = (_QWORD *)*(v43 - 3);
          if (v56)
          {
            do
            {
              v58 = (_QWORD *)*v56;
              v59 = (void *)v56[3];
              if (v59)
              {
                v56[4] = v59;
                operator delete(v59);
              }
              operator delete(v56);
              v56 = v58;
            }
            while (v58);
          }
          v57 = *v55;
          *v55 = 0;
          if (v57)
            operator delete(v57);
          v43 = v229[0];
        }
        while (v229[0] != v53);
        v43 = __p[0];
        v7 = HIDWORD(a2);
        v42 = v220;
      }
      if (v43)
        operator delete(v43);
      v19[11] = (uint64_t)v42;
      v34 = (_QWORD *)v19[22];
      if (!v34)
        goto LABEL_73;
      goto LABEL_70;
    }
    std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>::unordered_map(v19[11], (uint64_t)v223);
    v19[11] = v33 + 40;
    v19[11] = v33 + 40;
LABEL_34:
    v34 = (_QWORD *)v19[22];
    if (!v34)
      goto LABEL_73;
LABEL_70:
    v60 = v19[31];
    while (1)
    {
      __p[0] = &v226;
      __p[1] = (void *)1;
      v227 = v60;
      v61 = v34[6];
      if (!v61)
        break;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v61 + 48))(v61, &v227, __p);
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_73;
    }
LABEL_280:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  v22 = v19[10] + 40 * (((uint64_t)v20 - v19[7]) >> 3);
  if (*(_QWORD *)(v22 + 24))
  {
    v23 = *(_QWORD **)(v22 + 16);
    if (v23)
    {
      do
      {
        v30 = (_QWORD *)*v23;
        v31 = (void *)v23[3];
        if (v31)
        {
          v23[4] = v31;
          operator delete(v31);
        }
        operator delete(v23);
        v23 = v30;
      }
      while (v30);
    }
    *(_QWORD *)(v22 + 16) = 0;
    v24 = *(_QWORD *)(v22 + 8);
    if (v24)
    {
      for (i = 0; i != v24; ++i)
        *(_QWORD *)(*(_QWORD *)v22 + 8 * i) = 0;
    }
    *(_QWORD *)(v22 + 24) = 0;
  }
  v223[0] = 0;
  v26 = *(void **)v22;
  *(_QWORD *)v22 = 0;
  if (v26)
    operator delete(v26);
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  v223[1] = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_DWORD *)(v22 + 32) = 1065353216;
  if (v22 == v19[11])
    goto LABEL_34;
  v27 = (_QWORD *)v19[16];
  if (v27)
  {
    v28 = v19[31];
    do
    {
      __p[0] = &v226;
      __p[1] = (void *)1;
      v227 = v28;
      v29 = v27[6];
      if (!v29)
        goto LABEL_280;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v29 + 48))(v29, &v227, __p);
      v27 = (_QWORD *)*v27;
    }
    while (v27);
  }
LABEL_73:
  v62 = v224[0];
  if (v224[0])
  {
    do
    {
      v85 = (_QWORD *)*v62;
      v86 = (void *)v62[3];
      if (v86)
      {
        v62[4] = v86;
        operator delete(v86);
      }
      operator delete(v62);
      v62 = v85;
    }
    while (v85);
  }
  if (v223[0])
    operator delete(v223[0]);
  v63 = (_QWORD *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(v5);
  v64 = v63[4];
  if (v8 < (v63[5] - v64) >> 3
    && (v65 = *(_QWORD *)(v64 + 8 * v8)) != 0
    && (v66 = *(unsigned __int16 *)(v65 + 2 * (HIDWORD(a2) & 0x7F)), v68 = v63[7], v67 = v63[8], v66 < (v67 - v68) >> 3)
    && ((v69 = v68 + 8 * v66, v69 != v67) ? (v70 = *(_DWORD *)(v69 + 4) == (_DWORD)v7) : (v70 = 0), v70))
  {
    v71 = v63[11];
    v72 = v63[10] + 40 * v66;
  }
  else
  {
    v71 = v63[11];
    v72 = v71;
  }
  if (v72 == v71)
    v17 = 0;
  else
    v17 = v72;
LABEL_87:
  v222 = (_QWORD *)v17;
  v73 = (_QWORD *)gdc::Registry::storage<std::vector<gdc::Registry*>>(*(_QWORD *)(a1 + 152));
  v74 = v73[4];
  if (v8 < (v73[5] - v74) >> 3
    && (v75 = *(_QWORD *)(v74 + 8 * v8)) != 0
    && (v76 = *(unsigned __int16 *)(v75 + 2 * (HIDWORD(a2) & 0x7F)), v78 = v73[7], v77 = v73[8], v76 < (v77 - v78) >> 3)
    && ((v79 = v78 + 8 * v76, v79 != v77) ? (v80 = *(_DWORD *)(v79 + 4) == (_DWORD)v7) : (v80 = 0), v80))
  {
    v81 = v73[11];
    v82 = v73[10] + 24 * v76;
  }
  else
  {
    v81 = v73[11];
    v82 = v81;
  }
  if (v82 == v81)
    v83 = 0;
  else
    v83 = v82;
  if (!*(_QWORD *)(a3 + 24))
  {
    v147 = *(_QWORD *)(v17 + 24);
    if (!v147)
      return;
    v148 = *(char **)v83;
    if (v147 <= (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)v83) >> 3)
      goto LABEL_237;
    if (v147 >> 61)
LABEL_283:
      abort();
    v149 = *(_BYTE **)(v83 + 8);
    v150 = 8 * v147;
    v151 = (char *)operator new(8 * v147);
    v152 = v149 - v148;
    v153 = &v151[(v149 - v148) & 0xFFFFFFFFFFFFFFF8];
    v154 = v153;
    if (v149 != v148)
    {
      if ((unint64_t)(v152 - 8) < 0x58)
      {
        v154 = &v151[(v149 - v148) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_234:
          v193 = *((_QWORD *)v149 - 1);
          v149 -= 8;
          *((_QWORD *)v154 - 1) = v193;
          v154 -= 8;
        }
        while (v149 != v148);
        goto LABEL_235;
      }
      v154 = &v151[(v149 - v148) & 0xFFFFFFFFFFFFFFF8];
      if (v149 - v151 - (v152 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_234;
      v187 = v152 >> 3;
      v188 = ((unint64_t)(v152 - 8) >> 3) + 1;
      v189 = &v151[8 * v187 - 16];
      v190 = (__int128 *)(v149 - 16);
      v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v192 = *v190;
        *((_OWORD *)v189 - 1) = *(v190 - 1);
        *(_OWORD *)v189 = v192;
        v189 -= 32;
        v190 -= 2;
        v191 -= 4;
      }
      while (v191);
      v154 = &v153[-8 * (v188 & 0x3FFFFFFFFFFFFFFCLL)];
      v149 -= 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
      if (v188 != (v188 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_234;
    }
LABEL_235:
    *(_QWORD *)v83 = v154;
    *(_QWORD *)(v83 + 8) = v153;
    *(_QWORD *)(v83 + 16) = &v151[v150];
    if (v148)
      operator delete(v148);
LABEL_237:
    v194 = v222;
    v195 = (_QWORD *)v222[2];
    if (!v195)
      goto LABEL_270;
    v196 = *(_QWORD **)(v83 + 8);
    while (1)
    {
      v198 = *(_QWORD *)(v83 + 16);
      if ((unint64_t)v196 >= v198)
        break;
      *v196 = v195[2];
      v197 = v196 + 1;
LABEL_240:
      *(_QWORD *)(v83 + 8) = v197;
      v195 = (_QWORD *)*v195;
      v196 = v197;
      if (!v195)
      {
        v194 = v222;
LABEL_270:
        if (v194[3])
        {
          v215 = (_QWORD *)v194[2];
          if (v215)
          {
            do
            {
              v218 = (_QWORD *)*v215;
              v219 = (void *)v215[3];
              if (v219)
              {
                v215[4] = v219;
                operator delete(v219);
              }
              operator delete(v215);
              v215 = v218;
            }
            while (v218);
          }
          v194[2] = 0;
          v216 = v194[1];
          if (v216)
          {
            for (j = 0; j != v216; ++j)
              *(_QWORD *)(*v194 + 8 * j) = 0;
          }
          v194[3] = 0;
        }
        return;
      }
    }
    v199 = *(char **)v83;
    v200 = (uint64_t)v196 - *(_QWORD *)v83;
    v201 = v200 >> 3;
    v202 = (v200 >> 3) + 1;
    if (v202 >> 61)
      goto LABEL_283;
    v203 = v198 - (_QWORD)v199;
    if (v203 >> 2 > v202)
      v202 = v203 >> 2;
    if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF8)
      v204 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v204 = v202;
    if (v204)
    {
      if (v204 >> 61)
        goto LABEL_282;
      v205 = operator new(8 * v204);
    }
    else
    {
      v205 = 0;
    }
    v206 = &v205[8 * v201];
    *v206 = v195[2];
    v197 = v206 + 1;
    if (v196 == (_QWORD *)v199)
    {
LABEL_257:
      *(_QWORD *)v83 = v206;
      *(_QWORD *)(v83 + 8) = v197;
      *(_QWORD *)(v83 + 16) = &v205[8 * v204];
      if (v196)
        operator delete(v196);
      goto LABEL_240;
    }
    v207 = (char *)(v196 - 1) - v199;
    if (v207 >= 0x168)
    {
      if (&v205[v200 - 8 - (v207 & 0xFFFFFFFFFFFFFFF8)] > &v205[v200 - 8])
      {
        v208 = (char *)v196;
      }
      else if ((_QWORD *)((char *)v196 - (v207 & 0xFFFFFFFFFFFFFFF8) - 8) > v196 - 1)
      {
        v208 = (char *)v196;
      }
      else if ((unint64_t)((char *)v196 - v205 - v200) >= 0x20)
      {
        v210 = (v207 >> 3) + 1;
        v208 = (char *)&v196[-(v210 & 0x3FFFFFFFFFFFFFFCLL)];
        v211 = &v205[8 * v201 - 16];
        v212 = (__int128 *)(v196 - 2);
        v213 = v210 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v214 = *v212;
          *(v211 - 1) = *(v212 - 1);
          *v211 = v214;
          v211 -= 2;
          v212 -= 2;
          v213 -= 4;
        }
        while (v213);
        v206 -= v210 & 0x3FFFFFFFFFFFFFFCLL;
        if (v210 == (v210 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_256;
      }
      else
      {
        v208 = (char *)v196;
      }
    }
    else
    {
      v208 = (char *)v196;
    }
    do
    {
      v209 = *((_QWORD *)v208 - 1);
      v208 -= 8;
      *--v206 = v209;
    }
    while (v208 != v199);
LABEL_256:
    v196 = *(_QWORD **)v83;
    goto LABEL_257;
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v229 = 0u;
  LODWORD(v230) = 1065353216;
  v84 = *(_QWORD **)(a3 + 16);
  if (v84)
  {
    do
    {
      v87 = v84[2];
      v226 = 0;
      v227 = v87;
      v88 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(v87);
      v89 = gdc::Registry::storage<md::overlayComponents::Overlayable>(v87);
      v90 = (_QWORD *)v89;
      v91 = v89 + 32;
      v92 = v88[7];
      v93 = v88[8];
      if (*(_QWORD *)(v89 + 64) - *(_QWORD *)(v89 + 56) >= (unint64_t)(v93 - v92))
        v94 = v88 + 4;
      else
        v94 = (_QWORD *)(v89 + 32);
      if (v88 + 4 == v94)
      {
        v223[0] = &v226;
        v223[1] = __p;
        v224[0] = &v227;
        v224[1] = &v222;
        while (v92 != v93)
        {
          v114 = *(unsigned int *)(v92 + 4);
          v115 = v90[4];
          if (v114 >> 7 < (v90[5] - v115) >> 3)
          {
            v116 = *(_QWORD *)(v115 + 8 * (v114 >> 7));
            if (v116)
            {
              v117 = *(unsigned __int16 *)(v116 + 2 * (v114 & 0x7F));
              v119 = v90[7];
              v118 = v90[8];
              if (v117 < (v118 - v119) >> 3)
              {
                v120 = v119 + 8 * v117;
                if (v120 != v118 && *(_DWORD *)(v120 + 4) == (_DWORD)v114)
                  md::OverlaysLogic::updateFoundationAssociation(gdc::Entity,std::unordered_set<gdc::Registry *> &)::$_0::operator()((uint64_t)v223, *(_QWORD *)v92);
              }
            }
          }
          v92 += 8;
        }
      }
      if ((_QWORD *)v91 == v94)
      {
        v223[0] = &v226;
        v223[1] = __p;
        v224[0] = &v227;
        v224[1] = &v222;
        v122 = v90[7];
        v123 = v90[8];
        while (v122 != v123)
        {
          v124 = *(unsigned int *)(v122 + 4);
          v125 = v88[4];
          if (v124 >> 7 < (v88[5] - v125) >> 3)
          {
            v126 = *(_QWORD *)(v125 + 8 * (v124 >> 7));
            if (v126)
            {
              v127 = *(unsigned __int16 *)(v126 + 2 * (v124 & 0x7F));
              v129 = v88[7];
              v128 = v88[8];
              if (v127 < (v128 - v129) >> 3)
              {
                v130 = v129 + 8 * v127;
                if (v130 != v128 && *(_DWORD *)(v130 + 4) == (_DWORD)v124)
                  md::OverlaysLogic::updateFoundationAssociation(gdc::Entity,std::unordered_set<gdc::Registry *> &)::$_0::operator()((uint64_t)v223, *(_QWORD *)v122);
              }
            }
          }
          v122 += 8;
        }
      }
      if (*(_BYTE *)(a1 + 922))
        v95 = v226 == 0;
      else
        v95 = 0;
      if (v95)
      {
        v96 = v227;
        v97 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(v227);
        v98 = gdc::Registry::storage<md::overlayComponents::OverlayableFallback>(v96);
        v99 = (_QWORD *)v98;
        v100 = v98 + 32;
        v101 = v97[7];
        v102 = v97[8];
        if (*(_QWORD *)(v98 + 64) - *(_QWORD *)(v98 + 56) >= (unint64_t)(v102 - v101))
          v103 = v97 + 4;
        else
          v103 = (_QWORD *)(v98 + 32);
        if (v97 + 4 == v103)
        {
          v223[0] = __p;
          v223[1] = &v227;
          v224[0] = &v222;
          while (v101 != v102)
          {
            v132 = *(unsigned int *)(v101 + 4);
            v133 = v99[4];
            if (v132 >> 7 < (v99[5] - v133) >> 3)
            {
              v134 = *(_QWORD *)(v133 + 8 * (v132 >> 7));
              if (v134)
              {
                v135 = *(unsigned __int16 *)(v134 + 2 * (v132 & 0x7F));
                v137 = v99[7];
                v136 = v99[8];
                if (v135 < (v136 - v137) >> 3)
                {
                  v138 = v137 + 8 * v135;
                  if (v138 != v136 && *(_DWORD *)(v138 + 4) == (_DWORD)v132)
                    md::OverlaysLogic::updateFoundationAssociation(gdc::Entity,std::unordered_set<gdc::Registry *> &)::$_1::operator()((uint64_t)v223, *(_QWORD *)v101);
                }
              }
            }
            v101 += 8;
          }
        }
        if ((_QWORD *)v100 == v103)
        {
          v223[0] = __p;
          v223[1] = &v227;
          v224[0] = &v222;
          v104 = v99[7];
          v105 = v99[8];
          while (v104 != v105)
          {
            v106 = *(unsigned int *)(v104 + 4);
            v107 = v97[4];
            if (v106 >> 7 < (v97[5] - v107) >> 3)
            {
              v108 = *(_QWORD *)(v107 + 8 * (v106 >> 7));
              if (v108)
              {
                v109 = *(unsigned __int16 *)(v108 + 2 * (v106 & 0x7F));
                v111 = v97[7];
                v110 = v97[8];
                if (v109 < (v110 - v111) >> 3)
                {
                  v112 = v111 + 8 * v109;
                  if (v112 != v110 && *(_DWORD *)(v112 + 4) == (_DWORD)v106)
                    md::OverlaysLogic::updateFoundationAssociation(gdc::Entity,std::unordered_set<gdc::Registry *> &)::$_1::operator()((uint64_t)v223, *(_QWORD *)v104);
                }
              }
            }
            v104 += 8;
          }
        }
      }
      v84 = (_QWORD *)*v84;
    }
    while (v84);
    v17 = (uint64_t)v222;
  }
  v140 = *(_QWORD *)(v17 + 24);
  v141 = *(char **)v83;
  if (v140 <= (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)v83) >> 3)
    goto LABEL_187;
  if (v140 >> 61)
    abort();
  v142 = *(_BYTE **)(v83 + 8);
  v143 = (char *)operator new(8 * v140);
  v144 = v142 - v141;
  v145 = &v143[(v142 - v141) & 0xFFFFFFFFFFFFFFF8];
  v146 = v145;
  if (v142 != v141)
  {
    if ((unint64_t)(v144 - 8) < 0x58)
    {
      v146 = &v143[(v142 - v141) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_184:
        v161 = *((_QWORD *)v142 - 1);
        v142 -= 8;
        *((_QWORD *)v146 - 1) = v161;
        v146 -= 8;
      }
      while (v142 != v141);
      goto LABEL_185;
    }
    v146 = &v143[(v142 - v141) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v142[-(v144 & 0xFFFFFFFFFFFFFFF8)] - v143) < 0x20)
      goto LABEL_184;
    v155 = v144 >> 3;
    v156 = ((unint64_t)(v144 - 8) >> 3) + 1;
    v157 = &v143[8 * v155 - 16];
    v158 = (__int128 *)(v142 - 16);
    v159 = v156 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v160 = *v158;
      *((_OWORD *)v157 - 1) = *(v158 - 1);
      *(_OWORD *)v157 = v160;
      v157 -= 32;
      v158 -= 2;
      v159 -= 4;
    }
    while (v159);
    v146 = &v145[-8 * (v156 & 0x3FFFFFFFFFFFFFFCLL)];
    v142 -= 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
    if (v156 != (v156 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_184;
  }
LABEL_185:
  *(_QWORD *)v83 = v146;
  *(_QWORD *)(v83 + 8) = v145;
  *(_QWORD *)(v83 + 16) = &v143[8 * v140];
  if (v141)
    operator delete(v141);
LABEL_187:
  v162 = (void **)v222;
  v163 = (_QWORD *)v222[2];
  if (!v163)
    goto LABEL_220;
  v164 = *(char **)(v83 + 8);
  do
  {
    v166 = *(_QWORD *)(v83 + 16);
    if ((unint64_t)v164 < v166)
    {
      *(_QWORD *)v164 = v163[2];
      v165 = v164 + 8;
      goto LABEL_190;
    }
    v167 = *(char **)v83;
    v168 = (uint64_t)&v164[-*(_QWORD *)v83];
    v169 = v168 >> 3;
    v170 = (v168 >> 3) + 1;
    if (v170 >> 61)
      abort();
    v171 = v166 - (_QWORD)v167;
    if (v171 >> 2 > v170)
      v170 = v171 >> 2;
    if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8)
      v172 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v172 = v170;
    if (v172)
    {
      if (v172 >> 61)
        goto LABEL_282;
      v173 = operator new(8 * v172);
    }
    else
    {
      v173 = 0;
    }
    v174 = &v173[8 * v169];
    *v174 = v163[2];
    v165 = (char *)(v174 + 1);
    if (v164 != v167)
    {
      v175 = v164 - 8 - v167;
      if (v175 >= 0x168)
      {
        if (&v173[v168 - 8 - (v175 & 0xFFFFFFFFFFFFFFF8)] > &v173[v168 - 8])
        {
          v176 = v164;
        }
        else if (&v164[-(v175 & 0xFFFFFFFFFFFFFFF8) - 8] > v164 - 8)
        {
          v176 = v164;
        }
        else if ((unint64_t)(v164 - v173 - v168) >= 0x20)
        {
          v178 = (v175 >> 3) + 1;
          v176 = &v164[-8 * (v178 & 0x3FFFFFFFFFFFFFFCLL)];
          v179 = &v173[8 * v169 - 16];
          v180 = v164 - 16;
          v181 = v178 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v182 = *(_OWORD *)v180;
            *(v179 - 1) = *((_OWORD *)v180 - 1);
            *v179 = v182;
            v179 -= 2;
            v180 -= 32;
            v181 -= 4;
          }
          while (v181);
          v174 -= v178 & 0x3FFFFFFFFFFFFFFCLL;
          if (v178 == (v178 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_206;
        }
        else
        {
          v176 = v164;
        }
      }
      else
      {
        v176 = v164;
      }
      do
      {
        v177 = *((_QWORD *)v176 - 1);
        v176 -= 8;
        *--v174 = v177;
      }
      while (v176 != v167);
LABEL_206:
      v164 = *(char **)v83;
    }
    *(_QWORD *)v83 = v174;
    *(_QWORD *)(v83 + 8) = v165;
    *(_QWORD *)(v83 + 16) = &v173[8 * v172];
    if (v164)
      operator delete(v164);
LABEL_190:
    *(_QWORD *)(v83 + 8) = v165;
    v163 = (_QWORD *)*v163;
    v164 = v165;
  }
  while (v163);
  v162 = (void **)v222;
LABEL_220:
  if (v162 != __p)
  {
    *((_DWORD *)v162 + 8) = (_DWORD)v230;
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *> *>>(v162, (uint64_t **)v229[0]);
  }
  v183 = v229[0];
  if (v229[0])
  {
    do
    {
      v185 = (_QWORD *)*v183;
      v186 = (void *)v183[3];
      if (v186)
      {
        v183[4] = v186;
        operator delete(v186);
      }
      operator delete(v183);
      v183 = v185;
    }
    while (v185);
  }
  v184 = __p[0];
  __p[0] = 0;
  if (v184)
    operator delete(v184);
}

void sub_19F9B5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _QWORD *v22;
  _QWORD *v23;
  void *v24;

  std::__split_buffer<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~__split_buffer((uint64_t)&a21);
  v22 = a15;
  if (a15)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      v24 = (void *)v22[3];
      if (v24)
      {
        v22[4] = v24;
        operator delete(v24);
      }
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void md::OverlaysLogic::updateFoundationAssociation(gdc::Entity,std::unordered_set<gdc::Registry *> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *__p;
  char v31;

  ++**(_QWORD **)a1;
  v4 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), *(_QWORD **)(a1 + 16));
  v5 = v4;
  v7 = (char *)v4[4];
  v6 = v4[5];
  v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)v4[3];
    v11 = (v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v6 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v9 = v16 + 1;
    if (v7 == v10)
    {
      v10 = v7;
    }
    else
    {
      v18 = v7 - v10 - 8;
      if (v18 < 0x58)
        goto LABEL_35;
      if ((unint64_t)(v10 - v15) < 0x20)
        goto LABEL_35;
      v19 = (v18 >> 3) + 1;
      v8 = &v7[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v15[8 * v11 - 16];
      v21 = v7 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        do
        {
          v24 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v16 = v24;
        }
        while (v8 != v10);
        v10 = (char *)v5[3];
      }
    }
    v5[3] = v16;
    v5[4] = v9;
    v5[5] = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    v9 = v7 + 8;
  }
  v5[4] = v9;
  v25 = *(unint64_t **)(a1 + 16);
  v26 = **(_QWORD ***)(a1 + 24);
  v27 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v26, *v25);
  if (v27)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v26, v27);
    v28 = __p;
    if (__p)
    {
      if (v31)
      {
        v29 = (void *)*((_QWORD *)__p + 3);
        if (v29)
        {
          *((_QWORD *)__p + 4) = v29;
          operator delete(v29);
        }
      }
      operator delete(v28);
    }
  }
}

void md::OverlaysLogic::updateFoundationAssociation(gdc::Entity,std::unordered_set<gdc::Registry *> &)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *__p;
  char v31;

  v4 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 8));
  v5 = v4;
  v7 = (char *)v4[4];
  v6 = v4[5];
  v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)v4[3];
    v11 = (v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v6 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v9 = v16 + 1;
    if (v7 == v10)
    {
      v10 = v7;
    }
    else
    {
      v18 = v7 - v10 - 8;
      if (v18 < 0x58)
        goto LABEL_35;
      if ((unint64_t)(v10 - v15) < 0x20)
        goto LABEL_35;
      v19 = (v18 >> 3) + 1;
      v8 = &v7[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v15[8 * v11 - 16];
      v21 = v7 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        do
        {
          v24 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v16 = v24;
        }
        while (v8 != v10);
        v10 = (char *)v5[3];
      }
    }
    v5[3] = v16;
    v5[4] = v9;
    v5[5] = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    v9 = v7 + 8;
  }
  v5[4] = v9;
  v25 = *(unint64_t **)(a1 + 8);
  v26 = **(_QWORD ***)(a1 + 16);
  v27 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v26, *v25);
  if (v27)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v26, v27);
    v28 = __p;
    if (__p)
    {
      if (v31)
      {
        v29 = (void *)*((_QWORD *)__p + 3);
        if (v29)
        {
          *((_QWORD *)__p + 4) = v29;
          operator delete(v29);
        }
      }
      operator delete(v28);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_34;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *v12 = *v26;
LABEL_58:
    *v26 = v12;
    goto LABEL_59;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*v12)
  {
    v27 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19F9B64EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::overlayComponents::OverlayableFallback>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::OverlayableFallback>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::OverlayableFallback>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::OverlayableFallback>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::Overlayable>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::Overlayable>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::Overlayable>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::Overlayable>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v41;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *(_QWORD **)(a2 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = v11[2];
      v14 = 0x9DDFEA08EB382D69 * (((8 * v13) + 8) ^ HIDWORD(v13));
      v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ (v14 >> 47) ^ v14);
      v16 = v15 ^ (v15 >> 47);
      v17 = 0x9DDFEA08EB382D69 * v16;
      if (v12)
      {
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          v2 = 0x9DDFEA08EB382D69 * v16;
          if (v17 >= v12)
            v2 = v17 % v12;
        }
        else
        {
          v2 = v17 & (v12 - 1);
        }
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v19)
        {
          v20 = (_QWORD *)*v19;
          if (v20)
          {
            if (v18.u32[0] < 2uLL)
            {
              while (1)
              {
                v22 = v20[1];
                if (v22 == v17)
                {
                  if (v20[2] == v13)
                    goto LABEL_80;
                }
                else if ((v22 & (v12 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                v20 = (_QWORD *)*v20;
                if (!v20)
                  goto LABEL_40;
              }
            }
            do
            {
              v21 = v20[1];
              if (v21 == v17)
              {
                if (v20[2] == v13)
                  goto LABEL_80;
              }
              else
              {
                if (v21 >= v12)
                  v21 %= v12;
                if (v21 != v2)
                  break;
              }
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_40:
      v23 = operator new(0x30uLL);
      v41 = v23;
      *v23 = 0;
      v23[1] = v17;
      v23[2] = v11[2];
      v23[3] = 0;
      v23[4] = 0;
      v23[5] = 0;
      v25 = (_BYTE *)v11[3];
      v24 = (_BYTE *)v11[4];
      v26 = v24 - v25;
      if (v24 != v25)
      {
        if (v26 < 0)
          abort();
        v27 = (char *)operator new(v24 - v25);
        v23[3] = v27;
        v23[4] = v27;
        v28 = &v27[8 * (v26 >> 3)];
        v23[5] = v28;
        memcpy(v27, v25, v26);
        v23[4] = v28;
      }
      v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v30 = *(float *)(a1 + 32);
      if (!v12 || (float)(v30 * (float)v12) < v29)
      {
        v31 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v31 = 1;
        v32 = v31 | (2 * v12);
        v33 = vcvtps_u32_f32(v29 / v30);
        if (v32 <= v33)
          v34 = v33;
        else
          v34 = v32;
        if (v34 == 1)
        {
          v34 = 2;
        }
        else if ((v34 & (v34 - 1)) != 0)
        {
          v34 = std::__next_prime(v34);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v34 > v12)
          goto LABEL_55;
        if (v34 < v12)
        {
          v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
          {
            v35 = std::__next_prime(v35);
          }
          else
          {
            v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2)
              v35 = v37;
          }
          if (v34 <= v35)
            v34 = v35;
          if (v34 < v12)
LABEL_55:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v34);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v17 >= v12)
            v2 = v17 % v12;
          else
            v2 = v17;
        }
        else
        {
          v2 = (v12 - 1) & v17;
        }
      }
      v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v38)
      {
        *v41 = *v38;
        *v38 = v41;
      }
      else
      {
        *v41 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v41;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
        if (*v41)
        {
          v39 = *(_QWORD *)(*v41 + 8);
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v39 >= v12)
              v39 %= v12;
          }
          else
          {
            v39 &= v12 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41;
        }
      }
      ++*(_QWORD *)(a1 + 24);
LABEL_80:
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return a1;
}

void sub_19F9B6C1C(_Unwind_Exception *a1)
{
  md::MeshRenderableContext *v1;

  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = *(_QWORD **)(i - 24);
    if (v5)
    {
      do
      {
        v7 = (_QWORD *)*v5;
        v8 = (void *)v5[3];
        if (v8)
        {
          v5[4] = v8;
          operator delete(v8);
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7);
    }
    v6 = *v4;
    *v4 = 0;
    if (v6)
      operator delete(v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::unordered_set<gdc::Registry *>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>(a1, i[2], i[2]);
  return a1;
}

void sub_19F9B6E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_set<gdc::Registry *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = *(_QWORD **)(i - 24);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *v4;
    *v4 = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<std::unordered_set<gdc::Registry *>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::unordered_set<gdc::Registry *>>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<std::unordered_set<gdc::Registry *>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::unordered_set<gdc::Registry *>>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<std::unordered_set<gdc::Registry *>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v25 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 40 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != v15 - 40)
  {
    *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 - 8);
    std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>((_QWORD *)v14, *(_QWORD **)(v15 - 24));
    v15 = a1[11];
  }
  v16 = (void **)(v15 - 40);
  v17 = *(_QWORD **)(v15 - 24);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *v16;
  *v16 = 0;
  if (v19)
    operator delete(v19);
  a1[11] = v16;
  v20 = (_QWORD *)a1[28];
  if (!v20)
    return 1;
  v21 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    v26 = v21;
    v22 = v20[6];
    if (!v22)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v22 + 48))(v22, &v26, v27);
    v20 = (_QWORD *)*v20;
    if (!v20)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<std::unordered_set<gdc::Registry *>>::contains(v23, v24);
}

BOOL gdc::ComponentStorageWrapper<std::unordered_set<gdc::Registry *>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,std::unordered_set<gdc::Registry *>>::~sparse_map(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  v10 = (_QWORD *)*a1;
  if (*a1)
  {
    v11 = (_QWORD *)a1[1];
    v12 = (_QWORD *)*a1;
    if (v11 != v10)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          MEMORY[0x1A1AF4E00](v13, 0x1000C40104B78CFLL);
      }
      while (v11 != v10);
      v12 = (_QWORD *)*a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void md::OverlaysLogic::updateVisibilityForOverlayTiles(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned __int8 **a5)
{
  size_t v5;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD **v74;
  size_t v75;
  size_t v76;
  size_t v77;
  _QWORD *m;
  size_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  uint64_t v97;
  unsigned __int8 **v98;
  unsigned __int8 *j;
  uint64_t *v100;
  unsigned int v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  int *v120;
  unsigned __int8 *v121;
  unint64_t v122;
  _QWORD *v123;
  uint8x8_t v124;
  unint64_t v125;
  unsigned int v126;
  int v127;
  int v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t k;
  void *v143;
  void *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  unsigned __int8 **v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  uint64_t *v165;
  __int128 v166;
  _QWORD *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  void *__p[2];
  __int128 v174;
  float v175;
  _QWORD v176[2];
  char v177;

  if (a4[3])
  {
    v10 = (_QWORD *)a4[2];
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    a4[2] = 0;
    v12 = a4[1];
    if (v12)
    {
      for (i = 0; i != v12; ++i)
        *(_QWORD *)(*a4 + 8 * i) = 0;
    }
    a4[3] = 0;
  }
  v159 = a3;
  v160 = (uint64_t)a4;
  v158 = a5;
  a5[1] = *a5;
  *((_QWORD *)&v14 + 1) = 0;
  *(_OWORD *)__p = 0u;
  v174 = 0u;
  v175 = 1.0;
  v15 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
LABEL_177:
    v98 = a5;
    v97 = v159;
    for (j = *(unsigned __int8 **)(v159 + 16); j; j = *(unsigned __int8 **)j)
    {
      if (!std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>>>::find<geo::QuadTile>((uint64_t)__p[0], (unint64_t)__p[1], j + 16))std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v160, j + 16, (uint64_t)(j + 16));
    }
    v167 = (_QWORD *)(v159 + 16);
    v100 = (uint64_t *)v174;
    if ((_QWORD)v174)
    {
      LOBYTE(v101) = 25;
      while (1)
      {
        if (!std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>>>::find<geo::QuadTile>(*(_QWORD *)v97, *(_QWORD *)(v97 + 8), (unsigned __int8 *)v100 + 16))
        {
          v103 = *((unsigned __int8 *)v100 + 17);
          v105 = *((_DWORD *)v100 + 5);
          v104 = *((_DWORD *)v100 + 6);
          v106 = *((unsigned __int8 *)v100 + 16);
          v107 = *v98;
          v108 = v98[1];
          v109 = *v98;
          if (*v98 != v108)
          {
            v109 = *v98;
            while (v106 != *v109 || v103 != v109[1] || v105 != *((_DWORD *)v109 + 1) || v104 != *((_DWORD *)v109 + 2))
            {
              v109 += 32;
              if (v109 == v108)
                goto LABEL_198;
            }
          }
          if (v109 == v108)
          {
LABEL_198:
            v110 = v98[2];
            if (v108 < v110)
            {
              *v108 = v106;
              v108[1] = v103;
              *((_DWORD *)v108 + 1) = v105;
              *((_DWORD *)v108 + 2) = v104;
              v102 = v108 + 32;
              v108[24] = 0;
            }
            else
            {
              v111 = (v108 - v107) >> 5;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 59)
                abort();
              v113 = v110 - v107;
              if (v113 >> 4 > v112)
                v112 = v113 >> 4;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFE0)
                v114 = 0x7FFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114 >> 59)
                goto LABEL_287;
              v115 = (char *)operator new(32 * v114);
              v116 = &v115[32 * v111];
              *v116 = v106;
              v116[1] = v103;
              *((_DWORD *)v116 + 1) = v105;
              *((_DWORD *)v116 + 2) = v104;
              v116[24] = 0;
              if (v107 == v108)
              {
                v119 = &v115[32 * v111];
                v98 = v158;
              }
              else
              {
                v117 = 0;
                v98 = v158;
                do
                {
                  v118 = &v116[v117];
                  *((_WORD *)v118 - 16) = *(_WORD *)&v108[v117 - 32];
                  *(_QWORD *)(v118 - 28) = *(_QWORD *)&v108[v117 - 28];
                  *(v118 - 8) = v108[v117 - 8];
                  v117 -= 32;
                }
                while (&v108[v117] != v107);
                v119 = &v116[v117];
              }
              v102 = (unsigned __int8 *)(v116 + 32);
              *v98 = (unsigned __int8 *)v119;
              v98[1] = (unsigned __int8 *)(v116 + 32);
              v98[2] = (unsigned __int8 *)&v115[32 * v114];
              if (v107)
                operator delete(v107);
              v97 = v159;
            }
            v98[1] = v102;
          }
        }
        if (*((unsigned __int8 *)v100 + 17) >= v101)
          v101 = v101;
        else
          v101 = *((unsigned __int8 *)v100 + 17);
        v100 = (uint64_t *)*v100;
        if (!v100)
          goto LABEL_215;
      }
    }
    v101 = 25;
LABEL_215:
    v120 = (int *)*v98;
    v121 = v98[1];
    if (*v98 != v121)
    {
      v123 = __p[0];
      v122 = (unint64_t)__p[1];
      v124 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v124.i16[0] = vaddlv_u8(v124);
      v125 = (unint64_t)__p[1] - 1;
      do
      {
        LOBYTE(v126) = *((_BYTE *)v120 + 1);
        if ((_BYTE)v126)
        {
          LOBYTE(v126) = v126 - 1;
          v127 = v120[1] >> 1;
          v128 = v120[2] >> 1;
        }
        else
        {
          v127 = v120[1];
          v128 = v120[2];
        }
        v129 = v101 > v126 || v122 == 0;
        if (!v129)
        {
          v130 = *(unsigned __int8 *)v120;
          do
          {
            v131 = ((v130 - 0x61C8864680B583EBLL) << 6)
                 - 0x61C8864680B583EBLL
                 + ((unint64_t)(v130 - 0x61C8864680B583EBLL) >> 2);
            v133 = (v127
                  - 0x61C8864680B583EBLL
                  + (((v131 + v126) ^ (v130 - 0x61C8864680B583EBLL)) << 6)
                  + (((v131 + v126) ^ (v130 - 0x61C8864680B583EBLL)) >> 2)) ^ (v131
                                                                                              + v126) ^ (v130 - 0x61C8864680B583EBLL);
            v134 = (v128 - 0x61C8864680B583EBLL + (v133 << 6) + (v133 >> 2)) ^ v133;
            if (v124.u32[0] > 1uLL)
            {
              v135 = v134;
              if (v134 >= v122)
                v135 = v134 % v122;
            }
            else
            {
              v135 = v125 & v134;
            }
            v136 = (uint64_t **)v123[v135];
            if (v136)
            {
              v137 = *v136;
              if (v137)
              {
                if (v124.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v138 = v137[1];
                    if (v134 == v138)
                    {
                      if (__PAIR64__(*((unsigned __int8 *)v137 + 17), *((unsigned __int8 *)v137 + 16)) == __PAIR64__(v126, v130)
                        && *((_DWORD *)v137 + 5) == v127
                        && *((_DWORD *)v137 + 6) == v128)
                      {
                        goto LABEL_217;
                      }
                    }
                    else if ((v138 & v125) != v135)
                    {
                      goto LABEL_227;
                    }
                    v137 = (uint64_t *)*v137;
                    if (!v137)
                      goto LABEL_227;
                  }
                }
                do
                {
                  v139 = v137[1];
                  if (v134 == v139)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v137 + 17), *((unsigned __int8 *)v137 + 16)) == __PAIR64__(v126, v130)
                      && *((_DWORD *)v137 + 5) == v127
                      && *((_DWORD *)v137 + 6) == v128)
                    {
LABEL_217:
                      *((_BYTE *)v120 + 24) = 1;
                      goto LABEL_218;
                    }
                  }
                  else
                  {
                    if (v139 >= v122)
                      v139 %= v122;
                    if (v139 != v135)
                      break;
                  }
                  v137 = (uint64_t *)*v137;
                }
                while (v137);
              }
            }
LABEL_227:
            v132 = v126 != 0;
            v126 = v126 - 1;
            if (!v132)
              v126 = 0;
            v127 >>= v132;
            v128 >>= v132;
          }
          while (v126 >= v101);
        }
LABEL_218:
        v120 += 8;
      }
      while (v120 != (int *)v121);
    }
    if (*(_QWORD *)(v97 + 24))
    {
      v140 = (_QWORD *)*v167;
      if (*v167)
      {
        do
        {
          v149 = v140;
          v140 = (_QWORD *)*v140;
          v150 = (std::__shared_weak_count *)v149[6];
          if (v150)
          {
            p_shared_owners = (unint64_t *)&v150->__shared_owners_;
            do
              v152 = __ldaxr(p_shared_owners);
            while (__stlxr(v152 - 1, p_shared_owners));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          operator delete(v149);
        }
        while (v140);
      }
      *(_QWORD *)(v97 + 16) = 0;
      v141 = *(_QWORD *)(v97 + 8);
      if (v141)
      {
        for (k = 0; k != v141; ++k)
          *(_QWORD *)(*(_QWORD *)v97 + 8 * k) = 0;
      }
      *(_QWORD *)(v97 + 24) = 0;
    }
    v143 = __p[0];
    __p[0] = 0;
    v144 = *(void **)v97;
    *(_QWORD *)v97 = v143;
    if (v144)
      operator delete(v144);
    v145 = (unint64_t)__p[1];
    v146 = (_QWORD *)v174;
    __p[1] = 0;
    v147 = *((_QWORD *)&v174 + 1);
    *(_QWORD *)(v97 + 16) = v174;
    *(_QWORD *)(v97 + 24) = v147;
    *(float *)(v97 + 32) = v175;
    *(_QWORD *)(v97 + 8) = v145;
    if (v147)
    {
      v148 = v146[1];
      if ((v145 & (v145 - 1)) != 0)
      {
        if (v148 >= v145)
          v148 %= v145;
      }
      else
      {
        v148 &= v145 - 1;
      }
      *(_QWORD *)(*(_QWORD *)v97 + 8 * v148) = v167;
      v174 = 0uLL;
    }
    else
    {
      while (v146)
      {
        v153 = v146;
        v146 = (_QWORD *)*v146;
        v154 = (std::__shared_weak_count *)v153[6];
        if (v154)
        {
          v155 = (unint64_t *)&v154->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
        operator delete(v153);
      }
    }
    v157 = __p[0];
    __p[0] = 0;
    if (v157)
      operator delete(v157);
    return;
  }
LABEL_11:
  v16 = v15[4];
  v17 = *(uint64_t **)(v16 + 848);
  v18 = v16;
  v164 = *(uint64_t **)(v16 + 856);
  if (v17 == v164)
    goto LABEL_65;
  v162 = v15[4];
  v163 = v15;
  v19 = *(_QWORD *)(a1 + 152);
  v165 = (uint64_t *)(v19 + 120);
  while (1)
  {
    v20 = *v17;
    v176[0] = 0x9956BFA43F1B46A6;
    v21 = *(int8x8_t *)(v19 + 128);
    if (v21)
    {
      v22 = (uint8x8_t)vcnt_s8(v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v23 = 0x9956BFA43F1B46A6;
        if (*(_QWORD *)&v21 <= 0x9956BFA43F1B46A6)
          v23 = 0x9956BFA43F1B46A6 % *(_QWORD *)&v21;
      }
      else
      {
        v23 = (*(_QWORD *)&v21 - 1) & 0x9956BFA43F1B46A6;
      }
      v24 = *(_QWORD **)(*v165 + 8 * v23);
      if (v24)
      {
        v25 = (_QWORD *)*v24;
        if (v25)
        {
          if (v22.u32[0] < 2uLL)
          {
            v26 = *(_QWORD *)&v21 - 1;
            while (1)
            {
              v28 = v25[1];
              if (v28 == 0x9956BFA43F1B46A6)
              {
                if (v25[2] == 0x9956BFA43F1B46A6)
                  goto LABEL_63;
              }
              else if ((v28 & v26) != v23)
              {
                goto LABEL_34;
              }
              v25 = (_QWORD *)*v25;
              if (!v25)
                goto LABEL_34;
            }
          }
          do
          {
            v27 = v25[1];
            if (v27 == 0x9956BFA43F1B46A6)
            {
              if (v25[2] == 0x9956BFA43F1B46A6)
              {
LABEL_63:
                v29 = v25[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v27 >= *(_QWORD *)&v21)
                v27 %= *(_QWORD *)&v21;
              if (v27 != v23)
                break;
            }
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_34:
    v29 = operator new();
    *(_QWORD *)(v29 + 16) = "md::overlayComponents::TileIsInView]";
    *(_QWORD *)(v29 + 24) = 35;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_OWORD *)(v29 + 80) = 0u;
    *(_OWORD *)(v29 + 96) = 0u;
    *(_OWORD *)(v29 + 112) = 0u;
    *(_OWORD *)(v29 + 128) = 0u;
    *(_DWORD *)(v29 + 144) = 1065353216;
    *(_OWORD *)(v29 + 152) = 0u;
    *(_OWORD *)(v29 + 168) = 0u;
    *(_QWORD *)(v29 + 184) = 0;
    *(_DWORD *)(v29 + 192) = 1065353216;
    *(_OWORD *)(v29 + 200) = 0u;
    *(_OWORD *)(v29 + 216) = 0u;
    *(_QWORD *)(v29 + 232) = 0;
    *(_DWORD *)(v29 + 240) = 1065353216;
    *(_QWORD *)v29 = &off_1E42B36A8;
    *(_QWORD *)(v29 + 8) = 0x9956BFA43F1B46A6;
    *(_QWORD *)(v29 + 248) = v19;
    v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v165, 0x9956BFA43F1B46A6, v176);
    v31 = v30[3];
    v30[3] = v29;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    *(_QWORD *)&v170 = 0x9956BFA43F1B46A6;
    *((_QWORD *)&v170 + 1) = "md::overlayComponents::TileIsInView]";
    v171 = 35;
    gdc::Registry::_registerStorageDataSignals(v19, 0x9956BFA43F1B46A6, (uint64_t)&v170, (uint64_t *)(v29 + 104));
LABEL_37:
    v168 = v20;
    v32 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v29 + 32), (uint64_t)&v168);
    if ((v33 & 1) != 0)
    {
      v38 = *(_BYTE **)(v29 + 88);
      v37 = *(_QWORD *)(v29 + 96);
      if ((unint64_t)v38 >= v37)
      {
        v40 = *(char **)(v29 + 80);
        v41 = v38 - v40;
        v42 = v38 - v40 + 1;
        if (v42 < 0)
          abort();
        v43 = v37 - (_QWORD)v40;
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
          v5 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v5 = v42;
        if (v5)
          v44 = (char *)operator new(v5);
        else
          v44 = 0;
        v45 = &v44[v41];
        v39 = (uint64_t)&v44[v41 + 1];
        v46 = (char *)(v40 - v38);
        if (v40 == v38)
          v46 = 0;
        *(_QWORD *)(v29 + 80) = &v46[(_QWORD)v45];
        *(_QWORD *)(v29 + 88) = v39;
        *(_QWORD *)(v29 + 96) = &v44[v5];
        if (v40)
          operator delete(v40);
      }
      else
      {
        v39 = (uint64_t)(v38 + 1);
      }
      *(_QWORD *)(v29 + 88) = v39;
      v34 = *(_QWORD *)(v29 + 248);
    }
    else
    {
      v34 = *(_QWORD *)(v29 + 248);
      if (*(_QWORD *)(v29 + 80) + (((uint64_t)v32 - *(_QWORD *)(v29 + 56)) >> 3) != *(_QWORD *)(v29 + 88))
      {
        v35 = *(_QWORD **)(v29 + 128);
        if (v35)
        {
          while (1)
          {
            *(_QWORD *)&v170 = &v168;
            *((_QWORD *)&v170 + 1) = 1;
            v176[0] = v34;
            v36 = v35[6];
            if (!v36)
              goto LABEL_285;
            (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v36 + 48))(v36, v176, &v170);
            v35 = (_QWORD *)*v35;
            if (!v35)
              goto LABEL_13;
          }
        }
        goto LABEL_13;
      }
    }
    v47 = *(_QWORD **)(v29 + 176);
    if (v47)
      break;
LABEL_13:
    if (++v17 == v164)
    {
      v16 = v162;
      v15 = v163;
      v18 = v163[4];
LABEL_65:
      v49 = *(unsigned __int8 *)(v16 + 169);
      *(_QWORD *)&v14 = *(_QWORD *)(v16 + 172);
      v166 = v14;
      v50 = *(unsigned __int8 *)(v16 + 168);
      v51 = v15;
      v52 = (std::__shared_weak_count *)v15[5];
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      LOBYTE(v170) = v50;
      BYTE1(v170) = v49;
      *(_QWORD *)((char *)&v170 + 4) = v14;
      *(_QWORD *)&v172 = v18;
      *((_QWORD *)&v172 + 1) = v52;
      v168 = 0;
      v169 = 0;
      v55 = (v49
           - 0x61C8864680B583EBLL
           + ((v50 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v50 - 0x61C8864680B583EBLL) >> 2)) ^ (v50 - 0x61C8864680B583EBLL);
      v56 = ((int)v14 - 0x61C8864680B583EBLL + (v55 << 6) + (v55 >> 2)) ^ v55;
      v57 = SDWORD1(v14) - 0x61C8864680B583EBLL + (v56 << 6) + (v56 >> 2);
      v58 = v57 ^ v56;
      v59 = (unint64_t)__p[1];
      if (__p[1])
      {
        *(int8x8_t *)&v14 = vcnt_s8((int8x8_t)__p[1]);
        LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
        if (v14 > 1uLL)
        {
          v5 = v57 ^ v56;
          if ((void *)v58 >= __p[1])
            v5 = v58 % (size_t)__p[1];
        }
        else
        {
          v5 = v58 & ((size_t)__p[1] - 1);
        }
        v60 = (uint64_t **)*((_QWORD *)__p[0] + v5);
        if (v60)
        {
          v61 = *v60;
          if (v61)
          {
            *((_QWORD *)&v14 + 1) = *((_QWORD *)&v166 + 1);
            if (v14 < 2uLL)
            {
              while (1)
              {
                v63 = v61[1];
                if (v63 == v58)
                {
                  if (*((unsigned __int8 *)v61 + 16) == (_DWORD)v50
                    && *((unsigned __int8 *)v61 + 17) == (_DWORD)v49
                    && *(uint64_t *)((char *)v61 + 20) == (_QWORD)v166)
                  {
                    goto LABEL_92;
                  }
                }
                else if ((v63 & ((unint64_t)__p[1] - 1)) != v5)
                {
                  goto LABEL_97;
                }
                v61 = (uint64_t *)*v61;
                if (!v61)
                  goto LABEL_97;
              }
            }
            do
            {
              v62 = v61[1];
              if (v62 == v58)
              {
                if (*((unsigned __int8 *)v61 + 16) == (_DWORD)v50
                  && *((unsigned __int8 *)v61 + 17) == (_DWORD)v49
                  && *(uint64_t *)((char *)v61 + 20) == (_QWORD)v166)
                {
LABEL_92:
                  if (v52)
                  {
                    v64 = (unint64_t *)&v52->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
LABEL_157:
                  v90 = v169;
                  if (v169)
                  {
                    v91 = (unint64_t *)&v169->__shared_owners_;
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
                  v93 = v51;
                  v94 = (_QWORD *)v51[1];
                  if (v94)
                  {
                    do
                    {
                      v95 = v94;
                      v94 = (_QWORD *)*v94;
                    }
                    while (v94);
                  }
                  else
                  {
                    do
                    {
                      v95 = (_QWORD *)v93[2];
                      v129 = *v95 == (_QWORD)v93;
                      v93 = v95;
                    }
                    while (!v129);
                  }
                  v15 = v95;
                  if (v95 == a2 + 1)
                    goto LABEL_177;
                  goto LABEL_11;
                }
              }
              else
              {
                if ((void *)v62 >= __p[1])
                  v62 %= (unint64_t)__p[1];
                if (v62 != v5)
                  break;
              }
              v61 = (uint64_t *)*v61;
            }
            while (v61);
          }
        }
      }
LABEL_97:
      v66 = (char *)operator new(0x38uLL);
      v176[0] = v66;
      v176[1] = &v174;
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = v58;
      v66[16] = v50;
      v66[17] = v49;
      *(_QWORD *)(v66 + 20) = v166;
      *((_QWORD *)&v14 + 1) = *((_QWORD *)&v172 + 1);
      *(_OWORD *)(v66 + 40) = v172;
      v172 = 0uLL;
      v177 = 1;
      *(float *)&v14 = (float)(unint64_t)(*((_QWORD *)&v174 + 1) + 1);
      if (v59 && (float)(v175 * (float)v59) >= *(float *)&v14)
      {
LABEL_147:
        v87 = __p[0];
        v88 = (_QWORD *)*((_QWORD *)__p[0] + v5);
        if (v88)
        {
          *(_QWORD *)v66 = *v88;
        }
        else
        {
          *(_QWORD *)v66 = v174;
          *(_QWORD *)&v174 = v66;
          v87[v5] = &v174;
          if (!*(_QWORD *)v66)
          {
LABEL_156:
            ++*((_QWORD *)&v174 + 1);
            goto LABEL_157;
          }
          v89 = *(_QWORD *)(*(_QWORD *)v66 + 8);
          if ((v59 & (v59 - 1)) != 0)
          {
            if (v89 >= v59)
              v89 %= v59;
          }
          else
          {
            v89 &= v59 - 1;
          }
          v88 = (char *)__p[0] + 8 * v89;
        }
        *v88 = v66;
        goto LABEL_156;
      }
      v67 = (v59 & (v59 - 1)) != 0;
      if (v59 < 3)
        v67 = 1;
      v68 = v67 | (2 * v59);
      v69 = vcvtps_u32_f32(*(float *)&v14 / v175);
      if (v68 <= v69)
        prime = v69;
      else
        prime = v68;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v59 = (unint64_t)__p[1];
      }
      if (prime <= v59)
      {
        if (prime >= v59)
          goto LABEL_134;
        v81 = vcvtps_u32_f32((float)*((unint64_t *)&v174 + 1) / v175);
        if (v59 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v59), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
        {
          v81 = std::__next_prime(v81);
        }
        else
        {
          v83 = 1 << -(char)__clz(v81 - 1);
          if (v81 >= 2)
            v81 = v83;
        }
        if (prime <= v81)
          prime = v81;
        if (prime >= v59)
        {
          v59 = (unint64_t)__p[1];
LABEL_134:
          if ((v59 & (v59 - 1)) != 0)
          {
            if (v58 >= v59)
              v5 = v58 % v59;
            else
              v5 = v58;
          }
          else
          {
            v5 = (v59 - 1) & v58;
          }
          goto LABEL_147;
        }
        if (!prime)
        {
          v96 = __p[0];
          __p[0] = 0;
          if (v96)
            operator delete(v96);
          v59 = 0;
          __p[1] = 0;
          goto LABEL_134;
        }
      }
      if (prime >> 61)
LABEL_287:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v71 = operator new(8 * prime);
      v72 = __p[0];
      __p[0] = v71;
      if (v72)
        operator delete(v72);
      v73 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v73++) = 0;
      while (prime != v73);
      v74 = (_QWORD **)v174;
      if (!(_QWORD)v174)
      {
LABEL_133:
        v59 = prime;
        goto LABEL_134;
      }
      v75 = *(_QWORD *)(v174 + 8);
      v76 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v77 = v75 & v76;
        *((_QWORD *)__p[0] + v77) = &v174;
        for (m = *v74; *v74; m = *v74)
        {
          v79 = m[1] & v76;
          if (v79 == v77)
          {
            v74 = (_QWORD **)m;
          }
          else if (*((_QWORD *)__p[0] + v79))
          {
            *v74 = (_QWORD *)*m;
            v80 = 8 * v79;
            *m = **(_QWORD **)((char *)__p[0] + v80);
            **(_QWORD **)((char *)__p[0] + v80) = m;
          }
          else
          {
            *((_QWORD *)__p[0] + v79) = v74;
            v74 = (_QWORD **)m;
            v77 = v79;
          }
        }
        goto LABEL_133;
      }
      if (v75 >= prime)
        v75 %= prime;
      *((_QWORD *)__p[0] + v75) = &v174;
      v84 = *v74;
      if (!*v74)
        goto LABEL_133;
      while (1)
      {
        v86 = v84[1];
        if (v86 >= prime)
          v86 %= prime;
        if (v86 != v75)
        {
          if (!*((_QWORD *)__p[0] + v86))
          {
            *((_QWORD *)__p[0] + v86) = v74;
            goto LABEL_138;
          }
          *v74 = (_QWORD *)*v84;
          v85 = 8 * v86;
          *v84 = **(_QWORD **)((char *)__p[0] + v85);
          **(_QWORD **)((char *)__p[0] + v85) = v84;
          v84 = v74;
        }
        v86 = v75;
LABEL_138:
        v74 = (_QWORD **)v84;
        v84 = (_QWORD *)*v84;
        v75 = v86;
        if (!v84)
          goto LABEL_133;
      }
    }
  }
  while (1)
  {
    *(_QWORD *)&v170 = &v168;
    *((_QWORD *)&v170 + 1) = 1;
    v176[0] = v34;
    v48 = v47[6];
    if (!v48)
      break;
    (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v48 + 48))(v48, v176, &v170);
    v47 = (_QWORD *)*v47;
    if (!v47)
      goto LABEL_13;
  }
LABEL_285:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F9B80B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::~__hash_table((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlaysLogic::updateOverlaysResources(void)::$_0,std::allocator<md::OverlaysLogic::updateOverlaysResources(void)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::OverlaysLogic::updateOverlaysResources(void)::$_0,std::allocator<md::OverlaysLogic::updateOverlaysResources(void)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CB840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::OverlaysLogic::updateOverlaysResources(void)::$_0,std::allocator<md::OverlaysLogic::updateOverlaysResources(void)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateOverlaysResources(void)::$_0,std::allocator<md::OverlaysLogic::updateOverlaysResources(void)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *i;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD **)(v3 + 80 * *a2 + 40 * *a3 + 200); i; i = (_QWORD *)*i)
  {
    md::OverlayTileData::resetNonTileOverlays((md::OverlayTileData *)&v11, i[5]);
    v6 = v13;
    **(_BYTE **)(a1 + 16) |= v13 != 0;
    if (v6)
    {
      v8 = v11;
      v7 = v12;
      v9 = *v12;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v11 + 8);
      **(_QWORD **)(v8 + 8) = v9;
      v10 = *(_QWORD *)(v3 + 944);
      *(_QWORD *)(v10 + 8) = v7;
      *v7 = v10;
      *(_QWORD *)(v3 + 944) = v8;
      *(_QWORD *)(v8 + 8) = v3 + 944;
      *(_QWORD *)(v3 + 960) += v6;
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::OverlayTileData>>>>::find<geo::QuadTile>(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *result;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v3 = *a3;
  v4 = a3[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a3 + 1);
  v7 = *((int *)a3 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= a2)
      v11 = v9 % a2;
  }
  else
  {
    v11 = v9 & (a2 - 1);
  }
  v12 = *(uint64_t ***)(a1 + 8 * v11);
  if (!v12)
    return 0;
  result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      while (1)
      {
        v15 = result[1];
        if (v9 == v15)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v15 & (a2 - 1)) != v11)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v14 = result[1];
      if (v9 == v14)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v14 >= a2)
          v14 %= a2;
        if (v14 != v11)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1,std::allocator<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1,std::allocator<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CB690;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1,std::allocator<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB690;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1,std::allocator<md::OverlaysLogic::updateVisibleTiles(md::LayoutContext const&)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t *v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *a2;
  v7 = *a3;
  if (*a3)
    v8 = 71;
  else
    v8 = 11;
  if (*a3)
    v9 = 72;
  else
    v9 = 12;
  if (v6)
    v8 = v9;
  v10 = *v5;
  if ((v11 & 1) == 0)
  {
    v21 = *a3;
    v22 = v4;
    v20 = *a2;
    v19 = v8;
    v18 = v10;
    v10 = v18;
    v8 = v19;
    v6 = v20;
    v17 = v16;
    v7 = v21;
    v4 = v22;
    if (v17)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      v10 = v18;
      v8 = v19;
      v6 = v20;
      v7 = v21;
      v4 = v22;
    }
  }
  v12 = *(unsigned __int16 **)(v10 + 48);
  v13 = *(unsigned __int16 **)(v10 + 56);
  v14 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v12 != v13)
  {
    v15 = v12;
    while (*v15 != v8)
    {
      v15 += 16;
      if (v15 == v13)
        goto LABEL_21;
    }
    if (v15 == v13)
    {
      v14 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v12 != v8)
      {
        v12 += 16;
        if (v12 == v13)
        {
          v12 = v13;
          break;
        }
      }
      v14 = (uint64_t *)(v12 + 4);
    }
  }
LABEL_21:
  md::OverlaysLogic::updateVisibilityForOverlayTiles(v4, v14, v4 + 80 * v6 + 40 * v7 + 184, (_QWORD *)(v4 + 80 * v6 + 40 * v7 + 344), (unsigned __int8 **)(v4 + 48 * v6 + 24 * v7 + 504));
}

_QWORD *gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>,std::function<void ()(gdc::Entity)>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v4 = *a1;
  v5 = *(uint64_t **)(*a1 + 56);
  for (i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    v9 = *v5;
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v9);
  }
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v8))(result);
}

void sub_19F9B86C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>,std::function<void ()(gdc::Entity)>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v4 = *a1;
  v5 = *(uint64_t **)(*a1 + 56);
  for (i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    v9 = *v5;
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v9);
  }
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v8))(result);
}

void sub_19F9B8810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>,std::function<void ()(gdc::Entity)>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v4 = *a1;
  v5 = *(uint64_t **)(*a1 + 56);
  for (i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    v9 = *v5;
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v9);
  }
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v8))(result);
}

void sub_19F9B8958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x43549FEE549D79F2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x43549FEE549D79F2;
      if (*(_QWORD *)&v3 <= 0x43549FEE549D79F2uLL)
        v5 = 0x43549FEE549D79F2uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x43549FEE549D79F2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x43549FEE549D79F2)
            {
              if (v7[2] == 0x43549FEE549D79F2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x43549FEE549D79F2)
          {
            if (v7[2] == 0x43549FEE549D79F2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::Sidewalk>]";
  *(_QWORD *)(v11 + 24) = 66;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B38B8;
  *(_QWORD *)(v11 + 8) = 0x43549FEE549D79F2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x43549FEE549D79F2uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x43549FEE549D79F2;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::Sidewalk>]";
  v15[2] = 66;
  gdc::Registry::_registerStorageDataSignals(a1, 0x43549FEE549D79F2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9B8BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5AE6AA63834E6144;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5AE6AA63834E6144;
      if (*(_QWORD *)&v3 <= 0x5AE6AA63834E6144uLL)
        v5 = 0x5AE6AA63834E6144uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5AE6AA63834E6144;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5AE6AA63834E6144)
            {
              if (v7[2] == 0x5AE6AA63834E6144)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5AE6AA63834E6144)
          {
            if (v7[2] == 0x5AE6AA63834E6144)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::Pier>]";
  *(_QWORD *)(v11 + 24) = 62;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B37F8;
  *(_QWORD *)(v11 + 8) = 0x5AE6AA63834E6144;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5AE6AA63834E6144uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5AE6AA63834E6144;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::Pier>]";
  v15[2] = 62;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5AE6AA63834E6144, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9B8DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_3,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_3>,void ()(gdc::Entity)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_3,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_3>,void ()(gdc::Entity)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB7B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_3,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_3>,void ()(gdc::Entity)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB7B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_3,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_3>,void ()(gdc::Entity)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *a2;
  v3 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::Overlayable>(**(_QWORD **)(a1 + 8));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v3, v2);
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_2,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_2>,void ()(gdc::Entity)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_2,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_2>,void ()(gdc::Entity)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_2,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_2>,void ()(gdc::Entity)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB768;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_2,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_2>,void ()(gdc::Entity)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *a2;
  v3 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::OverlayableFallback>(**(_QWORD **)(a1 + 8));
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_1,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_1>,void ()(gdc::Entity)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_1,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_1>,void ()(gdc::Entity)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_1,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_1>,void ()(gdc::Entity)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB720;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_1,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_1>,void ()(gdc::Entity)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *a2;
  v3 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::Overlayable>(**(_QWORD **)(a1 + 8));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v3, v2);
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB6D8;
  return result;
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB6D8;
}

BOOL std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL8 result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *a2;
  v3 = (*a2)[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x64A448A5CD5D38DBLL;
    if (*(_QWORD *)&v3 <= 0x64A448A5CD5D38DBuLL)
      v5 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x64A448A5CD5D38DBLL;
  }
  v6 = *v2;
  v7 = *(_QWORD **)(*(_QWORD *)v2 + 8 * v5);
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (!*v7)
    return 0;
  v9 = *(_QWORD *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x64A448A5CD5D38DBLL)
      {
        if (v8[2] == 0x64A448A5CD5D38DBLL)
          goto LABEL_22;
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return 0;
    }
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 != 0x64A448A5CD5D38DBLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
      if (v11 != v5)
        return 0;
      goto LABEL_16;
    }
    if (v8[2] == 0x64A448A5CD5D38DBLL)
      break;
LABEL_16:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return 0;
  }
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) != 0x64A448A5CD5D38DBLL || !*(_QWORD *)(v12 + 32))
    return 0;
  if (v4.u32[0] > 1uLL)
  {
    v13 = 0x41A3BFA74D47A0E8;
    if (*(_QWORD *)&v3 <= 0x41A3BFA74D47A0E8uLL)
      v13 = 0x41A3BFA74D47A0E8uLL % *(_QWORD *)&v3;
  }
  else
  {
    v13 = v9 & 0x41A3BFA74D47A0E8;
  }
  v14 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v13);
  if (!v14)
    return 0;
  v15 = (_QWORD *)*v14;
  if (!v15)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x41A3BFA74D47A0E8)
      {
        if (v15[2] == 0x41A3BFA74D47A0E8)
          goto LABEL_44;
      }
      else if ((v17 & v9) != v13)
      {
        return 0;
      }
      result = 0;
      v15 = (_QWORD *)*v15;
      if (!v15)
        return result;
    }
  }
  while (2)
  {
    v18 = v15[1];
    if (v18 != 0x41A3BFA74D47A0E8)
    {
      if (v18 >= *(_QWORD *)&v3)
        v18 %= *(_QWORD *)&v3;
      if (v18 != v13)
        return 0;
      goto LABEL_38;
    }
    if (v15[2] != 0x41A3BFA74D47A0E8)
    {
LABEL_38:
      result = 0;
      v15 = (_QWORD *)*v15;
      if (!v15)
        return result;
      continue;
    }
    break;
  }
LABEL_44:
  v19 = v15[5];
  if (*(_QWORD *)(v19 + 8) == 0x41A3BFA74D47A0E8)
    return *(_QWORD *)(v19 + 32) != 0;
  return 0;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__4NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__4NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CB528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__4NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__4NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEEclEOSP_OSQ_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 16) + 16 * *a2 + 80;
  if (!*(_QWORD *)(v3 + 8 * *a3))
    *(_QWORD *)(v3 + 8 * *a3) = *(_QWORD *)(*(_QWORD *)(result + 8) + 16 * *a2 + 8 * *a3 + 640);
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__3NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__3NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB4E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__3NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEE7__cloneEPNS0_6__baseISR_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB4E0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__3NS_9allocatorISM_EEFv14VKOverlayLevel33VKOverlayResourceFallbackableModeEEclEOSP_OSQ_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * *a2 + 8 * *a3 + 640));
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__2NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__2NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB498;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__2NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB498;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__2NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "OverlaysLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__1NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB450;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB450;
  a2[1] = v2;
  return result;
}

void md::OverlaysContext::~OverlaysContext(md::OverlaysContext *this)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 16);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
    operator delete(v6);
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    operator delete(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 2);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v12)
    operator delete(v12);
}

_QWORD *gdc::ManagedObjectHolder<md::OverlaysContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::OverlaysContext *v2;

  *a1 = &off_1E42B0D20;
  v2 = (md::OverlaysContext *)a1[4];
  if (v2)
  {
    md::OverlaysContext::~OverlaysContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::OverlaysContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::OverlaysContext *v1;

  *a1 = &off_1E42B0D20;
  v1 = (md::OverlaysContext *)a1[4];
  if (v1)
  {
    md::OverlaysContext::~OverlaysContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::OverlaysContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_1,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_1,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_1,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB648;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_1,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * *a2 + 8 * *a3 + 640));
}

void std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_0,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_0,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB600;
  return result;
}

void std::__function::__func<md::OverlaysLogic::didBecomeInactive(void)::$_0,std::allocator<md::OverlaysLogic::didBecomeInactive(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB600;
}

void std::__function::__func<md::OverlaysLogic::reset(void)::$_1,std::allocator<md::OverlaysLogic::reset(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::reset(void)::$_1,std::allocator<md::OverlaysLogic::reset(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB8D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::reset(void)::$_1,std::allocator<md::OverlaysLogic::reset(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB8D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::OverlaysLogic::reset(void)::$_1,std::allocator<md::OverlaysLogic::reset(void)::$_1>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * *a2 + 8 * *a3 + 640));
}

void std::__function::__func<md::OverlaysLogic::reset(void)::$_0,std::allocator<md::OverlaysLogic::reset(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::reset(void)::$_0,std::allocator<md::OverlaysLogic::reset(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB888;
  return result;
}

void std::__function::__func<md::OverlaysLogic::reset(void)::$_0,std::allocator<md::OverlaysLogic::reset(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB888;
}

void sub_19F9BA494(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 944));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 928);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 840);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 760);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 712);
  std::unordered_map<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>::~unordered_map[abi:nn180100](v1 + 672);
  std::array<std::array<std::unique_ptr<std::unordered_map<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,std::allocator<std::pair<md::SurfaceKey const,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,2ul>,2ul>::~array((uint64_t *)(v1 + 640));
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v1 + 600);
  std::array<std::array<geo::linear_map<geo::QuadTile,BOOL,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile,BOOL>>,std::vector<std::pair<geo::QuadTile,BOOL>>>,2ul>,2ul>::~array(v1 + 504);
  std::array<std::array<std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>,2ul>,2ul>::~array(v1 + 344);
  std::array<std::unordered_map<geo::QuadTile,std::shared_ptr<md::OverlayTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::OverlayTileData>>>>,2ul>::~array(v1 + 264);
  std::array<std::unordered_map<geo::QuadTile,std::shared_ptr<md::OverlayTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::OverlayTileData>>>>,2ul>::~array(v1 + 184);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 168));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 136);

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::array<std::array<std::unique_ptr<std::unordered_map<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,std::allocator<std::pair<md::SurfaceKey const,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,2ul>,2ul>::~array(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::~__hash_table(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C408EF24B1CLL);
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::~__hash_table(v4);
    MEMORY[0x1A1AF4E00](v5, 0x10A0C408EF24B1CLL);
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    v7 = std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::~__hash_table(v6);
    MEMORY[0x1A1AF4E00](v7, 0x10A0C408EF24B1CLL);
  }
  v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    v9 = std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::~__hash_table(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

uint64_t std::array<std::array<std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>,2ul>,2ul>::~array(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v2 = *(_QWORD **)(a1 + 136);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 96);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 56);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(_QWORD **)(a1 + 16);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v13)
    operator delete(v13);
  return a1;
}

uint64_t std::array<std::unordered_map<geo::QuadTile,std::shared_ptr<md::OverlayTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::OverlayTileData>>>>,2ul>::~array(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(_QWORD **)(a1 + 56);
  while (v2)
  {
    v7 = v2;
    v2 = (_QWORD *)*v2;
    v8 = (std::__shared_weak_count *)v7[6];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    operator delete(v7);
  }
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 16);
  while (v4)
  {
    v11 = v4;
    v4 = (_QWORD *)*v4;
    v12 = (std::__shared_weak_count *)v11[6];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t std::unordered_map<unsigned int,geo::linear_map<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>,std::equal_to<unsigned char>,std::allocator<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>,std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::array<std::array<geo::linear_map<geo::QuadTile,BOOL,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile,BOOL>>,std::vector<std::pair<geo::QuadTile,BOOL>>>,2ul>,2ul>::~array(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[8];
      while (v6)
      {
        v8 = v6;
        v6 = (_QWORD *)*v6;
        v9 = (std::__shared_weak_count *)v8[4];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        operator delete(v8);
      }
      v7 = (void *)v2[6];
      v2[6] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__function::__func<md::OverlaysLogic::~OverlaysLogic()::$_0,std::allocator<md::OverlaysLogic::~OverlaysLogic()::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::~OverlaysLogic()::$_0,std::allocator<md::OverlaysLogic::~OverlaysLogic()::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB960;
  return result;
}

void std::__function::__func<md::OverlaysLogic::~OverlaysLogic()::$_0,std::allocator<md::OverlaysLogic::~OverlaysLogic()::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB960;
}

uint64_t ___ZN2md13OverlaysLogicC2ERKNSt3__110shared_ptrINS_15RegistryManagerEEEPN3geo9TaskQueueEPN3gdc15ResourceManagerEPU28objcproto17OS_dispatch_queue8NSObjectRKNS2_INS_17RunLoopControllerEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (a4)
    result = MapsFeature_IsAvailable_ElevatedPolygons();
  else
    result = 0;
  *(_BYTE *)(v4 + 128) = result;
  return result;
}

void std::__function::__func<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0,std::allocator<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0,std::allocator<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0,std::allocator<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB918;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0,std::allocator<md::OverlaysLogic::OverlaysLogic(std::shared_ptr<md::RegistryManager> const&,geo::TaskQueue *,gdc::ResourceManager *,NSObject  {objcproto17OS_dispatch_queue}*,std::shared_ptr<md::RunLoopController> const&)::$_0>,void ()(VKOverlayLevel,VKOverlayResourceFallbackableMode)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = *a3;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v7 = v3 + 16 * v4 + 8 * v5;
  result = *(_QWORD *)(v7 + 640);
  *(_QWORD *)(v7 + 640) = v6;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::~__hash_table(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void sub_19F9BBF44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F9BC3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F9BC5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9BCA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F9BCB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::optional<md::mun::CollectionPoint>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F9BD334(_Unwind_Exception *a1)
{
  md::mun::PointView::~PointView((md::mun::PointView *)&STACK[0x7A8]);
  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&STACK[0xF70]);
  if (STACK[0x16B8] != STACK[0x16C8])
    free((void *)STACK[0x16B8]);
  _Unwind_Resume(a1);
}

void sub_19F9BDB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21)
{
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v24 = *(_QWORD **)(v22 - 112);
  if (v24 == v21)
  {
    v25 = 4;
    v24 = (_QWORD *)(v22 - 136);
  }
  else
  {
    if (!v24)
    {
      v26 = __p;
      if (__p)
        goto LABEL_9;
      goto LABEL_5;
    }
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
  v26 = __p;
  if (__p)
  {
LABEL_9:
    operator delete(v26);
    v27 = a21;
    if (a21)
    {
LABEL_10:
      operator delete(v27);
      _Unwind_Resume(exception_object);
    }
LABEL_11:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v27 = a21;
  if (a21)
    goto LABEL_10;
  goto LABEL_11;
}

void sub_19F9BE33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  void *v54;
  void *v55;
  id *v56;
  void *v57;
  id *v58;
  uint64_t v59;

  objc_destroyWeak(v58);

  objc_destroyWeak(v56);
  objc_destroyWeak(&location);

  std::vector<md::mun::CollectionPoint>::~vector[abi:nn180100](&a54);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v59 - 216);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v59 - 200);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v59 - 184);

  _Unwind_Resume(a1);
}

void sub_19F9BED10(_Unwind_Exception *a1)
{
  unint64_t v1;
  void *v2;

  STACK[0x818] = v1;
  std::vector<md::mun::CollectionPoint>::~vector[abi:nn180100]((void **)&STACK[0x810]);

  _Unwind_Resume(a1);
}

void sub_19F9BEEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _anonymous_namespace_::PointSegment *v10;

  if (a10)
  _Unwind_Resume(exception_object);
}

void sub_19F9BF284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  md::MuninSceneEvent::~MuninSceneEvent((md::MuninSceneEvent *)va);
  _Unwind_Resume(a1);
}

void sub_19F9BF3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  md::MuninSceneEvent::~MuninSceneEvent((md::MuninSceneEvent *)va);
  _Unwind_Resume(a1);
}

void sub_19F9C04E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,id a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char *a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  char *v57;
  id *v58;
  char *v60;
  uint64_t v61;

  v60 = a44;
  if (a44 == v57)
  {
    v61 = 4;
    v60 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_6;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_6:
  objc_destroyWeak(v58);
  objc_destroyWeak(&location);
  if (__p)
    operator delete(__p);
  objc_destroyWeak(&a30);

  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

void sub_19F9C0A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C13BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,void *a26,id a27,id a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;

  v50 = *(_QWORD **)(v46 + 136);
  if (v50 == v47)
  {
    v51 = 4;
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v51 = 5;
    v47 = *(_QWORD **)(v46 + 136);
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v51))(v47);
LABEL_6:
  v52 = *(_QWORD **)(v46 + 104);
  if (v52 == a9)
  {
    v53 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_11;
    v53 = 5;
    a9 = *(_QWORD **)(v46 + 104);
  }
  (*(void (**)(void))(*a9 + 8 * v53))();
LABEL_11:
  *(_QWORD *)(v46 + 56) = &off_1E42B4C90;

  v54 = *(_QWORD **)(v48 - 232);
  if (v54 == (_QWORD *)(v48 - 256))
  {
    v55 = 4;
    v54 = (_QWORD *)(v48 - 256);
  }
  else
  {
    if (!v54)
      goto LABEL_16;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_16:
  v56 = *(_QWORD **)(v48 - 200);
  if (v56 == (_QWORD *)(v48 - 224))
  {
    v57 = 4;
    v56 = (_QWORD *)(v48 - 224);
  }
  else
  {
    if (!v56)
      goto LABEL_21;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_21:
  v58 = *(_QWORD **)(v48 - 168);
  if (v58 == (_QWORD *)(v48 - 192))
  {
    v59 = 4;
    v58 = (_QWORD *)(v48 - 192);
  }
  else
  {
    if (!v58)
      goto LABEL_26;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_26:
  MEMORY[0x1A1AF4E00](v46, 0x10A0C40F8EDBF0ELL);

  objc_destroyWeak(&location);
  objc_destroyWeak(&a27);
  objc_destroyWeak(&a28);
  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

void sub_19F9C2378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F9C238C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F9C299C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>>::~unordered_map[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F9C2FE0(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x840]);
  _Unwind_Resume(a1);
}

void sub_19F9C47EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_19F9C49D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C4A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F9C4B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F9C4E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C502C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19F9C5054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C5224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C54D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  md::MuninSceneEvent::~MuninSceneEvent((md::MuninSceneEvent *)va);
  _Unwind_Resume(a1);
}

void sub_19F9C54F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C5800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C59B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9C5B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  id *v15;
  void *v16;
  uint64_t v17;

  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v17 - 72));

  _Unwind_Resume(a1);
}

void `anonymous namespace'::PendingPathAnimation::~PendingPathAnimation(_anonymous_namespace_::PendingPathAnimation *this)
{
  _BYTE *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;

  v2 = (_BYTE *)*((_QWORD *)this + 272);
  if (v2)
  {
    while (1)
    {
      v6 = *(_BYTE **)v2;
      v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 17);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
          break;
      }
      if (v2[112])
        goto LABEL_12;
LABEL_13:
      v10 = (void *)*((_QWORD *)v2 + 4);
      if (v10 != *((void **)v2 + 6))
        free(v10);
      operator delete(v2);
      v2 = v6;
      if (!v6)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v2[112])
      goto LABEL_13;
LABEL_12:
    v2[112] = 0;
    goto LABEL_13;
  }
LABEL_2:
  v3 = (void *)*((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 40);
  v5 = (_QWORD *)*((_QWORD *)this + 41);
  if (v4 != v5)
  {
    do
    {
      v11 = (void *)v4[31];
      if (v11 != (void *)v4[33])
        free(v11);
      v4 += 36;
    }
    while (v4 != v5);
    v4 = (_QWORD *)*((_QWORD *)this + 40);
  }
  if (v4 != *((_QWORD **)this + 42))
    free(v4);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v12)
    goto LABEL_27;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
  }
  else
  {
LABEL_27:
    v15 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
  }
  v16 = (char *)*((_QWORD *)this + 1);
  v17 = v15;
  if (v16 != v15)
  {
    do
    {
      v18 = v16 - 1864;
      v19 = (_QWORD *)*((_QWORD *)v16 - 222);
      v20 = (_QWORD *)*((_QWORD *)v16 - 221);
      if (v19 != v20)
      {
        do
        {
          v21 = (void *)v19[31];
          if (v21 != (void *)v19[33])
            free(v21);
          v19 += 36;
        }
        while (v19 != v20);
        v19 = (_QWORD *)*((_QWORD *)v16 - 222);
      }
      if (v19 != *((_QWORD **)v16 - 220))
        free(v19);
      v16 -= 1864;
    }
    while (v18 != v15);
    v17 = *(char **)this;
  }
  *((_QWORD *)this + 1) = v15;
  operator delete(v17);
}

void ***std::unique_ptr<`anonymous namespace'::PathAnimationDescription>::reset[abi:nn180100](void ***result, void **a2)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[15];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (char *)*v2;
    if (*v2)
    {
      v7 = (char *)v2[1];
      v8 = *v2;
      if (v7 != v6)
      {
        do
        {
          v9 = v7 - 1864;
          v10 = (_QWORD *)*((_QWORD *)v7 - 222);
          v11 = (_QWORD *)*((_QWORD *)v7 - 221);
          if (v10 != v11)
          {
            do
            {
              v12 = (void *)v10[31];
              if (v12 != (void *)v10[33])
                free(v12);
              v10 += 36;
            }
            while (v10 != v11);
            v10 = (_QWORD *)*((_QWORD *)v7 - 222);
          }
          if (v10 != *((_QWORD **)v7 - 220))
            free(v10);
          v7 -= 1864;
        }
        while (v9 != v6);
        v8 = *v2;
      }
      v2[1] = v6;
      operator delete(v8);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t *std::unique_ptr<`anonymous namespace'::BumpAnimator>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 64), "stop");
    v3 = *(_QWORD **)(v2 + 168);
    if (v3 == (_QWORD *)(v2 + 144))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 144);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = *(_QWORD **)(v2 + 136);
    if (v5 == (_QWORD *)(v2 + 112))
    {
      v6 = 4;
      v5 = (_QWORD *)(v2 + 112);
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    v7 = *(_QWORD **)(v2 + 104);
    if (v7 == (_QWORD *)(v2 + 80))
    {
      v8 = 4;
      v7 = (_QWORD *)(v2 + 80);
    }
    else
    {
      if (!v7)
      {
LABEL_18:
        *(_QWORD *)(v2 + 56) = &off_1E42B4C90;

        JUMPOUT(0x1A1AF4E00);
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_18;
  }
  return result;
}

void sub_19F9C6228(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_QWORD **)(v1 + 168);
  if (v3 == (_QWORD *)(v1 + 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(v1 + 136);
  if (v5 == (_QWORD *)(v1 + 112))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 + 112);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(v1 + 104);
  if (v7 == (_QWORD *)(v1 + 80))
  {
    v8 = 4;
    v7 = (_QWORD *)(v1 + 80);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  *(_QWORD *)(v1 + 56) = &off_1E42B4C90;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::PointSegment::~PointSegment(_anonymous_namespace_::PointSegment *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v2 = (void *)*((_QWORD *)this + 488);
  if (v2 != *((void **)this + 490))
    free(v2);
  v3 = (void *)*((_QWORD *)this + 485);
  if (v3)
  {
    *((_QWORD *)this + 486) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 482);
  if (v4)
  {
    *((_QWORD *)this + 483) = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 260);
  v6 = (_QWORD *)*((_QWORD *)this + 261);
  if (v5 != v6)
  {
    do
    {
      v7 = (void *)v5[31];
      if (v7 != (void *)v5[33])
        free(v7);
      v5 += 36;
    }
    while (v5 != v6);
    v5 = (_QWORD *)*((_QWORD *)this + 260);
  }
  if (v5 != *((_QWORD **)this + 262))
    free(v5);
  v8 = (void *)*((_QWORD *)this + 239);
  if (v8 != *((void **)this + 241))
    free(v8);
  v9 = (void *)*((_QWORD *)this + 236);
  if (v9)
  {
    *((_QWORD *)this + 237) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 233);
  if (v10)
  {
    *((_QWORD *)this + 234) = v10;
    operator delete(v10);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 11);
  v12 = (_QWORD *)*((_QWORD *)this + 12);
  if (v11 != v12)
  {
    do
    {
      v13 = (void *)v11[31];
      if (v13 != (void *)v11[33])
        free(v13);
      v11 += 36;
    }
    while (v11 != v12);
    v11 = (_QWORD *)*((_QWORD *)this + 11);
  }
  if (v11 != *((_QWORD **)this + 13))
    free(v11);
}

void sub_19F9C6488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE48c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

void std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (void *)a1[239];
  if (v2 != (void *)a1[241])
    free(v2);
  v3 = (void *)a1[236];
  if (v3)
  {
    a1[237] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[233];
  if (v4)
  {
    a1[234] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[11];
  v6 = (_QWORD *)a1[12];
  if (v5 != v6)
  {
    do
    {
      v7 = (void *)v5[31];
      if (v7 != (void *)v5[33])
        free(v7);
      v5 += 36;
    }
    while (v5 != v6);
    v5 = (_QWORD *)a1[11];
  }
  if (v5 != (_QWORD *)a1[13])
    free(v5);
}

void md::MuninSceneEvent::~MuninSceneEvent(md::MuninSceneEvent *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  if (*((_BYTE *)this + 168))
  {
    v2 = (void *)*((_QWORD *)this + 22);
    if (v2)
    {
      *((_QWORD *)this + 23) = v2;
      operator delete(v2);
    }
    *((_BYTE *)this + 168) = 0;
  }
  if (*((_BYTE *)this + 128))
  {
    v3 = (_QWORD *)*((_QWORD *)this + 17);
    if (v3)
    {
      v4 = (_QWORD *)*((_QWORD *)this + 18);
      v5 = (void *)*((_QWORD *)this + 17);
      if (v4 != v3)
      {
        do
        {
          v4 -= 249;
          std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(v4);
        }
        while (v4 != v3);
        v5 = (void *)*((_QWORD *)this + 17);
      }
      *((_QWORD *)this + 18) = v3;
      operator delete(v5);
    }
    *((_BYTE *)this + 128) = 0;
  }
  if (*((_BYTE *)this + 8))
    *((_BYTE *)this + 8) = 0;
}

void sub_19F9C6688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double gdc::CameraFrame<geo::Radians,double>::toRigidTransformEcefNoOffset(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  __double2 v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  double v11;
  __double2 v12;
  __double2 v13;
  __double2 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  double v31;

  v4 = a2[1];
  v5 = a2[2];
  v6 = __sincos_stret(*a2);
  v7 = 6378137.0 / sqrt(v6.__sinval * v6.__sinval * -0.00669437999 + 1.0);
  v8 = (v7 + v5) * v6.__cosval;
  v9 = __sincos_stret(v4);
  *(double *)&v30 = v8 * v9.__cosval;
  *((double *)&v30 + 1) = v8 * v9.__sinval;
  v31 = (v5 + v7 * 0.99330562) * v6.__sinval;
  gdc::CameraFrame<geo::Radians,double>::createLocalEcefFrame((uint64_t)&v25, (uint64_t)&v30);
  v10 = a2[4];
  v11 = a2[6];
  v12 = __sincos_stret(a2[5] * 0.5);
  v13 = __sincos_stret(v10 * -0.5);
  v14 = __sincos_stret(v11 * -0.5);
  v15 = v13.__cosval * v12.__cosval * v14.__cosval + v13.__sinval * v12.__sinval * v14.__sinval;
  v16 = v13.__sinval * v12.__cosval * v14.__cosval + v13.__cosval * v12.__sinval * v14.__sinval;
  v17 = -(v13.__sinval * v12.__cosval * v14.__sinval - v13.__cosval * v12.__sinval * v14.__cosval);
  v18 = -(v13.__sinval * v12.__sinval * v14.__cosval - v13.__cosval * v12.__cosval * v14.__sinval);
  v19 = v29;
  v20 = v15 * v26 - (v28 * v17 - v16 * v29) + v18 * v27;
  v21 = v17 * v29 + v28 * v16 + v15 * v27 - v18 * v26;
  v22 = v18 * v29 - (v16 * v27 - v17 * v26) + v15 * v28;
  v23 = v17 * v27 + v16 * v26 + v18 * v28;
  *(_OWORD *)a1 = v30;
  *(double *)(a1 + 16) = v31;
  *(double *)(a1 + 24) = v20;
  *(double *)(a1 + 32) = v21;
  result = -(v23 - v15 * v19);
  *(double *)(a1 + 40) = v22;
  *(double *)(a1 + 48) = result;
  return result;
}

void `anonymous namespace'::TapDescription::~TapDescription(_anonymous_namespace_::TapDescription *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 23);
  v3 = (_QWORD *)*((_QWORD *)this + 24);
  if (v2 != v3)
  {
    do
    {
      v4 = (void *)v2[31];
      if (v4 != (void *)v2[33])
        free(v4);
      v2 += 36;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 23);
  }
  if (v2 != *((_QWORD **)this + 25))
    free(v2);
}

void sub_19F9C6C08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F9C8530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,_QWORD *a47,_QWORD *a48)
{
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  unint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;

  v49 = (_QWORD *)STACK[0xA48];
  v50 = STACK[0xA50];
  if (STACK[0xA48] != STACK[0xA50])
  {
    do
    {
      v51 = (void *)v49[31];
      if (v51 != (void *)v49[33])
        free(v51);
      v49 += 36;
    }
    while (v49 != (_QWORD *)v50);
    v49 = (_QWORD *)STACK[0xA48];
  }
  if (v49 != (_QWORD *)STACK[0xA58])
    free(v49);
  v52 = (std::__shared_weak_count *)STACK[0x9B8];
  if (STACK[0x9B8])
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = STACK[0x940];
  if (STACK[0x940])
  {
    v56 = STACK[0x948];
    v57 = (void *)STACK[0x940];
    if (STACK[0x948] != v55)
    {
      do
      {
        v58 = v56 - 1864;
        v59 = *(_QWORD **)(v56 - 1776);
        v60 = *(_QWORD **)(v56 - 1768);
        if (v59 != v60)
        {
          do
          {
            v61 = (void *)v59[31];
            if (v61 != (void *)v59[33])
              free(v61);
            v59 += 36;
          }
          while (v59 != v60);
          v59 = *(_QWORD **)(v56 - 1776);
        }
        if (v59 != *(_QWORD **)(v56 - 1760))
          free(v59);
        v56 -= 1864;
      }
      while (v58 != v55);
      v57 = (void *)STACK[0x940];
    }
    STACK[0x948] = v55;
    operator delete(v57);
  }
  v62 = (unint64_t *)STACK[0x9E8];
  if ((unint64_t *)STACK[0x9E8] == &STACK[0x9D0])
  {
    v63 = 4;
    v62 = &STACK[0x9D0];
  }
  else
  {
    if (!v62)
      goto LABEL_33;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_33:
  v65 = a46;
  v64 = a47;
  if (a46 != a47)
  {
    do
    {
      v66 = (void *)v65[31];
      if (v66 != (void *)v65[33])
        free(v66);
      v65 += 36;
    }
    while (v65 != v64);
    v65 = a46;
  }
  if (v65 != a48)
    free(v65);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::PathAnimator::PathAnimator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  __int128 *v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  double *v49;
  double *v50;
  double *v51;
  __int128 v52;
  __int128 *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  char *v58;
  double *v59;
  double *v60;
  double *v61;
  __int128 v62;
  double *v63;
  double *v64;
  char *v65;
  double *v66;
  double *v67;
  double *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  double *v100;
  char *v101;
  double *v102;
  char *v103;
  double v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  double *v109;
  char *v110;
  double *v111;
  int64_t v112;
  double *v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  _QWORD *v119;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  float64x2_t v129;
  float64_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  int64_t v134;
  uint64_t v135;
  double *v136;
  float64x2_t *v137;
  double *v138;
  float64x2_t *v139;
  double *v140;
  double *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  double *v149;
  double *v150;
  double *v151;
  double *v152;
  double *v153;
  unint64_t v154;
  double *v155;
  uint64_t v156;
  char *v157;
  double *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  float64x2_t *v163;
  float64x2_t *v164;
  unint64_t v165;
  float64x2_t *v166;
  float64x2_t *v167;
  float64_t v168;
  uint64_t v169;
  char *v170;
  double *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 *v176;
  uint64_t v177;
  __int128 v178;
  unint64_t v179;
  double v180;
  double *v181;
  uint64_t v182;
  float64x2_t *v183;
  float64x2_t v184;
  uint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  double v190;
  double *v191;
  uint64_t v192;
  int8x16_t v193;
  _QWORD *v194;
  float64x2_t v196;
  unint64_t v197;
  float64x2_t v198;
  const double *v199;
  int64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  double v203;
  BOOL v204;
  uint64_t v205;
  double *f64;
  double v207;
  double v208;
  uint64_t v209;
  double v210;
  float64x2_t *v211;
  char *v212;
  float64x2_t *v213;
  double v214;
  double *v215;
  uint64_t v216;
  double *v217;
  float64x2_t *v218;
  float64x2_t *v219;
  float64x2_t *v220;
  _BYTE *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int8x16_t v230;
  int8x16_t *v231;
  int64x2_t v233;
  unint64_t v234;
  double v235;
  unint64_t v236;
  unint64_t v237;
  uint64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int8x16_t v241;
  int8x16_t *v242;
  int64x2_t v244;
  unint64_t v245;
  double v246;
  double v247;
  double v248;
  void *v249;
  double v250;
  uint64_t v251;
  double v252;
  float64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  void **v258;
  uint64_t v259;
  void **v260;
  uint64_t v261;
  int64_t v262;
  char *v263;
  size_t v264;
  char *v265;
  _QWORD *v266;
  uint64_t v267;
  char *v268;
  size_t v269;
  __int128 *v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  double *v274;
  uint64_t *v275;
  char *v276;
  char *v277;
  __int128 v278;
  void **v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  double *v287;
  double v288;
  double *v289;
  uint64_t v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  char *v296;
  size_t v297;
  void *v298;
  int64_t v299;
  void *v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  double v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  void *v311;
  uint64_t v312;
  float64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  double v317;
  int v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  unint64_t v324;
  uint64_t v325;
  double v326;
  double v327;
  double v328;
  double v329;
  unint64_t v330;
  _QWORD *v331;
  unint64_t v332;
  char *v333;
  int v334;
  double v335;
  unsigned int v336;
  int v337;
  double v338;
  uint64_t v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  unint64_t v346;
  double v347;
  unsigned int v348;
  uint64_t v349;
  double v350;
  double v351;
  double v352;
  double v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  double v357;
  char *v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  float64x2_t *v362;
  int64x2_t v363;
  float64x2_t *v364;
  int64x2_t v365;
  int64x2_t v366;
  double v367;
  float64x2_t v368;
  _QWORD *v369;
  uint64_t v370;
  size_t v371;
  void *v372;
  _OWORD *v373;
  void *v374;
  std::locale *v375;
  uint64_t v376;
  double v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  double *v382;
  double *v383;
  unint64_t v384;
  char *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  unint64_t v397;
  double v398;
  uint64_t v399;
  float v400;
  double v401;
  double v402;
  double v403;
  double v404;
  uint64_t v405;
  int8x16_t v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  int8x16_t v412;
  double v413;
  float64x2_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  double v418;
  double v419;
  double *v420;
  double v421;
  double v422;
  char *v423;
  double v424;
  double v425;
  double v426;
  unint64_t v427;
  double v428;
  float64x2_t v429;
  double v430;
  double *v431;
  double *v432;
  uint64_t v433;
  double *v434;
  double v435;
  double v436;
  double *v437;
  double *v438;
  unint64_t v439;
  double *v440;
  unint64_t v441;
  double *v442;
  double *v443;
  double v444;
  uint64_t v445;
  uint64_t v446;
  float v447;
  unint64_t v448;
  double v449;
  int v450;
  uint64_t v451;
  int v452;
  float v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  int8x16_t v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  int8x16_t v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  int8x16_t v498;
  double v499;
  double v500;
  double v501;
  double v502;
  int8x16_t v503;
  double v504;
  double v505;
  uint64_t v506;
  double v507;
  double v508;
  uint64_t v509;
  double *v510;
  double v511;
  float *v512;
  _QWORD *v513;
  uint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t i;
  float32x2_t v525;
  float *v526;
  float *v527;
  unint64_t v528;
  float *v529;
  float *v530;
  float *v531;
  unint64_t v532;
  float *v533;
  float *v534;
  uint64_t v535;
  float *v536;
  float *v537;
  float *v538;
  float *v539;
  float *v540;
  uint64_t **v541;
  float v542;
  float *v543;
  float v544;
  uint64_t *v545;
  uint64_t v546;
  uint64_t v547;
  char *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  char *v553;
  uint64_t v554;
  char *v555;
  unint64_t v556;
  char *v557;
  char *v558;
  uint64_t *v559;
  char *v560;
  unint64_t v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  __int128 *v565;
  _OWORD *v566;
  uint64_t v567;
  __int128 v568;
  uint64_t v569;
  float *v570;
  float v571;
  unint64_t v572;
  float v573;
  double v574;
  double v575;
  double *v576;
  double *v577;
  unint64_t v578;
  double *v579;
  unint64_t v580;
  double *v581;
  double *v582;
  double v583;
  uint64_t v584;
  uint64_t v585;
  float v586;
  unint64_t v587;
  double v588;
  int v589;
  uint64_t v590;
  int v591;
  float v592;
  double v593;
  double v594;
  double v595;
  uint64_t v596;
  double v597;
  double v598;
  double v599;
  double v600;
  _QWORD *v601;
  double v602;
  double v603;
  __double2 v604;
  __double2 v605;
  double v606;
  double v607;
  double v608;
  double v609;
  double v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  char v617;
  uint64_t v618;
  double v619;
  long double v620;
  long double v621;
  char v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t *v631;
  uint64_t *v632;
  char *v633;
  uint64_t v634;
  uint64_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  char *v654;
  char *v655;
  char *v656;
  char *v657;
  char *v658;
  uint64_t v659;
  float *v660;
  float *v661;
  uint64_t v662;
  float *v663;
  float *v664;
  double *v665;
  unint64_t v666;
  double v667;
  double v668;
  double v669;
  double v670;
  double v671;
  double v672;
  uint64_t v673;
  float v674;
  float v675;
  __float2 v676;
  float v677;
  float v678;
  double v679;
  double v680;
  double v681;
  float64x2_t v682;
  double v683;
  double *v684;
  float *v685;
  uint64_t v686;
  float *v687;
  float *v688;
  __int128 *v689;
  uint64_t v690;
  uint64_t v691;
  size_t v692;
  size_t v693;
  char *v694;
  char *v695;
  char *v696;
  unint64_t v697;
  char *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  __int128 *v702;
  _OWORD *v703;
  unint64_t v704;
  __int128 v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t *v708;
  char *v709;
  uint64_t v710;
  char v711;
  __int128 *v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  int *v716;
  int *v717;
  unint64_t v718;
  __int128 *v719;
  uint64_t v720;
  uint64_t v721;
  __int128 *v722;
  _OWORD *v723;
  uint64_t v724;
  __int128 v725;
  unint64_t v726;
  int v727;
  size_t v728;
  char *v729;
  uint64_t v730;
  size_t v731;
  double v732;
  float64x2_t v733;
  size_t v734;
  float *v735;
  float64x2_t *v736;
  float v737;
  double v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  uint64_t v742;
  unint64_t v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  char *v747;
  int *v748;
  char *v749;
  float v750;
  char *v751;
  float v752;
  int *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  int64_t v757;
  char *v758;
  float v759;
  int v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  char *v767;
  float v768;
  uint64_t v769;
  float v770;
  uint64_t v771;
  int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  unint64_t v777;
  unint64_t v778;
  float v779;
  unint64_t v780;
  float v781;
  float v782;
  char *v783;
  int64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  unint64_t v793;
  char *v794;
  char *v795;
  char *v796;
  char *v797;
  unint64_t v798;
  char *v799;
  char *v800;
  float v801;
  float v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  int v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  int64x2_t v811;
  unint64_t v812;
  unint64_t v813;
  int64x2_t v814;
  int64x2_t v815;
  int64x2_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  unint64_t v821;
  int8x8_t *v822;
  int64x2_t v823;
  int64x2_t v824;
  int64x2_t v825;
  int64x2_t v826;
  int64x2_t v827;
  int64x2_t v828;
  int64x2_t v829;
  int64x2_t v830;
  int64x2_t v831;
  int64x2_t v832;
  int64x2_t v833;
  int64x2_t v834;
  int8x16_t *v835;
  int64x2_t v836;
  int8x16_t v837;
  int64x2_t v838;
  int64x2_t v839;
  unint64_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t v844;
  int64x2_t v845;
  int64x2_t v846;
  int64x2_t v847;
  int64x2_t v848;
  int64x2_t v849;
  int64x2_t v850;
  int64x2_t v851;
  int64x2_t v852;
  int64x2_t v853;
  int64x2_t v854;
  int64x2_t v855;
  int64x2_t v856;
  int64x2_t v857;
  unint64_t v858;
  BOOL *v859;
  unint64_t v860;
  uint64_t v861;
  NSObject *v862;
  std::locale::__imp *v863;
  double v864;
  void **v865;
  void **v866;
  unint64_t v867;
  void *v868;
  void *v869;
  uint64_t *v870;
  size_t v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t v874;
  unint64_t v875;
  uint64_t v876;
  unint64_t v877;
  _BOOL4 v878;
  unsigned int v879;
  unsigned int v880;
  char v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t *v884;
  uint64_t v885;
  uint64_t v886;
  unint64_t v887;
  unint64_t v888;
  uint64_t *v889;
  uint64_t v890;
  unint64_t v891;
  float v892;
  std::ios_base *v893;
  unsigned int v894;
  char v895;
  uint64_t v896;
  unsigned __int8 *v897;
  unsigned __int8 *j;
  unsigned __int8 v899;
  md::mun::PointView *v900;
  uint64_t v901;
  int v903;
  char v904;
  _BYTE *v905;
  uint64_t v906;
  int v907;
  int v908;
  const std::locale::facet *v909;
  char *v910;
  uint64_t v911;
  uint64_t v912;
  size_t v913;
  uint64_t v914;
  std::locale::__imp *v915;
  uint64_t v916;
  uint64_t v917;
  void *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  char *v924;
  uint64_t v925;
  int v926;
  int v927;
  const std::locale::facet *v928;
  char *v929;
  uint64_t v930;
  uint64_t v931;
  size_t v932;
  std::locale::__imp *v933;
  uint64_t v934;
  uint64_t v935;
  void *locale;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  _QWORD *v940;
  char *v941;
  uint64_t v942;
  int v943;
  int v944;
  const std::locale::facet *v945;
  char *v946;
  uint64_t v947;
  uint64_t v948;
  size_t v949;
  std::locale::__imp *v950;
  uint64_t v951;
  uint64_t v952;
  void *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  _QWORD *v957;
  char *v958;
  uint64_t v959;
  int v960;
  int v961;
  const std::locale::facet *v962;
  char *v963;
  uint64_t v964;
  uint64_t v965;
  size_t v966;
  std::locale::__imp *v967;
  uint64_t v968;
  uint64_t v969;
  void *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  unsigned __int8 v975;
  NSObject *v976;
  std::locale::__imp *v977;
  _QWORD *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  size_t v983;
  _BYTE *v984;
  double v985;
  const void **v986;
  const void *v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  void **v993;
  void *v994;
  unint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  uint64_t v1002;
  _QWORD *v1003;
  _QWORD *v1004;
  BOOL v1005;
  uint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  unint64_t v1009;
  _DWORD *v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unint64_t v1015;
  unint64_t v1016;
  _DWORD *v1017;
  uint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  _DWORD *v1021;
  uint64_t v1022;
  uint64_t v1023;
  double v1024;
  unint64_t v1025;
  unint64_t v1026;
  float v1028;
  float v1029;
  float v1030;
  double v1031;
  void *v1032;
  int v1033;
  double v1034;
  VKQuickDynamicAnimation *v1035;
  VKQuickDynamicAnimation *v1036;
  VKQuickDynamicAnimation *v1037;
  id v1038;
  _QWORD *v1039;
  _QWORD *v1040;
  uint64_t v1041;
  NSObject *v1042;
  uint64_t v1043;
  uint64_t v1044;
  unint64_t v1045;
  std::ios_base *v1046;
  char v1047;
  char v1048;
  _QWORD *v1049;
  char *v1050;
  _BYTE *v1051;
  uint64_t v1052;
  int v1053;
  int v1054;
  const std::locale::facet *v1055;
  const char *v1056;
  char *v1057;
  const char *v1058;
  int64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  size_t v1062;
  std::locale::__imp *v1063;
  uint64_t v1064;
  uint64_t v1065;
  void *v1066;
  uint64_t v1067;
  uint64_t v1068;
  _BYTE *v1069;
  uint64_t v1070;
  int v1071;
  int v1072;
  const std::locale::facet *v1073;
  char *v1074;
  uint64_t v1075;
  uint64_t v1076;
  size_t v1077;
  std::locale::__imp *v1078;
  uint64_t v1079;
  uint64_t v1080;
  void *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  _QWORD *v1085;
  char *v1086;
  uint64_t v1087;
  int v1088;
  int v1089;
  const std::locale::facet *v1090;
  char *v1091;
  uint64_t v1092;
  uint64_t v1093;
  size_t v1094;
  std::locale::__imp *v1095;
  uint64_t v1096;
  uint64_t v1097;
  void *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  unsigned int v1104;
  _BYTE *v1105;
  uint64_t v1106;
  int v1107;
  int v1108;
  const std::locale::facet *v1109;
  char *v1110;
  uint64_t v1111;
  uint64_t v1112;
  size_t v1113;
  std::locale::__imp *v1114;
  uint64_t v1115;
  uint64_t v1116;
  void *v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _QWORD *v1121;
  char *v1122;
  uint64_t v1123;
  int v1124;
  int v1125;
  const std::locale::facet *v1126;
  char *v1127;
  uint64_t v1128;
  uint64_t v1129;
  size_t v1130;
  std::locale::__imp *v1131;
  uint64_t v1132;
  uint64_t v1133;
  void *v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  _BYTE *v1138;
  uint64_t v1139;
  int v1140;
  int v1141;
  const std::locale::facet *v1142;
  char *v1143;
  uint64_t v1144;
  uint64_t v1145;
  size_t v1146;
  std::locale::__imp *v1147;
  uint64_t v1148;
  uint64_t v1149;
  void *v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  NSObject *v1154;
  unint64_t v1155;
  std::locale::__imp *v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  size_t v1162;
  void *v1163;
  double v1164;
  const void **v1165;
  const void *v1166;
  uint64_t v1167;
  uint64_t v1168;
  void **v1169;
  uint64_t v1170;
  uint64_t v1171;
  std::ios_base *v1172;
  uint64_t v1173;
  uint64_t v1174;
  void *v1175;
  _QWORD *v1176;
  _QWORD *v1177;
  _QWORD *v1178;
  _QWORD *v1179;
  NSObject *v1180;
  uint64_t v1181;
  uint64_t v1182;
  size_t v1183;
  std::locale::__imp *v1184;
  double v1185;
  const void **v1186;
  const void *v1187;
  uint64_t v1188;
  uint64_t v1189;
  void *v1190;
  NSObject *v1191;
  uint64_t v1192;
  _QWORD *v1193;
  double *v1194;
  _QWORD *v1195;
  _QWORD *v1196;
  float *v1197;
  _QWORD *v1198;
  _QWORD *v1199;
  size_t v1200;
  size_t __len;
  size_t __sz;
  _BYTE *v1203;
  double *v1204;
  unint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  _QWORD **v1208;
  double v1209;
  unint64_t v1210;
  double v1211;
  float64x2_t *v1212;
  double v1213;
  double *v1214[2];
  unint64_t v1215;
  float64x2_t *v1216;
  float64x2_t *v1217;
  double v1218;
  double *v1219[2];
  uint64_t v1220;
  _QWORD *v1221;
  int8x16_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  double *__p;
  _QWORD *__pa;
  uint64_t v1227;
  double v1228;
  float *v1229;
  uint64_t v1230;
  double *v1231;
  double v1232;
  float v1233;
  double v1234;
  double v1235;
  char v1236;
  uint64_t v1237;
  size_t v1238;
  double v1239;
  double v1240;
  float64x2_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  double v1244;
  double v1245;
  float64x2_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  double v1249;
  float64x2_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  double v1253;
  double v1254;
  float64x2_t v1255;
  uint64_t v1256;
  double v1257;
  double v1258;
  float64x2_t v1259;
  uint64_t v1260;
  unint64_t v1261;
  double v1262;
  double v1263;
  float64x2_t v1264;
  int v1265;
  double v1266;
  double v1267;
  md::mun::PointView *v1268[2];
  md::mun::PointView *v1269[2];
  md::mun::PointView *v1270;
  float64x2_t *v1271;
  double v1272;
  double *v1273[2];
  double *v1274[2];
  uint64_t v1275;
  char v1276;
  double *v1277;
  double *v1278;
  double v1279;
  double v1280;
  void *v1281[2];
  uint64_t *v1282;
  double v1283;
  char v1284;
  uint64_t v1285;
  double *v1286;
  double v1287;
  double v1288;
  float32x2_t v1289;
  uint64_t v1290;
  void *v1291[2];
  uint64_t v1292;
  double v1293;
  _BOOL4 v1294;
  std::locale::__imp *v1295;
  void *v1296;
  _QWORD v1297[6];
  void *v1298;
  __int128 v1299;
  __int128 v1300;
  uint64_t v1301;
  uint64_t v1302;
  double v1303[7];
  __int128 v1304;
  uint64_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  _OWORD v1308[24];
  std::locale buf[3];
  std::locale *v1310;
  _BYTE v1311[24];
  void *v1312[6];
  unsigned __int8 v1313;
  float64x2_t v1314;
  double v1315;
  float64x2_t v1316;
  double v1317;
  __int128 v1318;
  double v1319;
  float64x2_t v1320;
  double v1321;
  float64x2_t v1322;
  double v1323;
  float64x2_t v1324;
  double v1325;
  __int128 v1326;
  double v1327;
  float64x2_t v1328;
  double v1329;
  _QWORD v1330[2];
  __int128 v1331;
  __int128 v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  char v1352;
  char v1353;
  char v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  int v1360;
  double v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  void *v1366[2];
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  __int128 *v1370;
  __int128 v1371;
  double v1372;
  _QWORD v1373[3];
  uint64_t *v1374;
  __int128 v1375;
  double v1376;
  double v1377;
  void *v1378[4];
  __int128 v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  __int128 v1387;
  __int128 v1388;
  __int128 v1389;
  __int128 v1390;
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  __int128 v1398;
  char v1399;
  char v1400;
  char v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  __int128 v1406;
  int v1407;
  double v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  float64x2_t v1413[24];
  _BYTE __src[32];
  __int128 v1415;
  double v1416;
  double v1417;
  _BYTE v1418[40];
  uint64_t v1419;
  _QWORD v1420[2];
  uint64_t *v1421;
  __int128 v1422;
  double v1423;
  uint64_t v1424;
  float64x2x2_t v1425;
  float64x2x2_t v1426;

  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = v10;
  v1207 = v12;
  v1424 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  v14 = *v13;
  v15 = v13[2];
  *(_OWORD *)(v9 + 32) = v13[1];
  *(_OWORD *)(v9 + 48) = v15;
  *(_OWORD *)(v9 + 16) = v14;
  v16 = v13[3];
  v17 = v13[4];
  v18 = v13[5];
  *(_WORD *)(v9 + 112) = *((_WORD *)v13 + 48);
  *(_OWORD *)(v9 + 80) = v17;
  *(_OWORD *)(v9 + 96) = v18;
  *(_OWORD *)(v9 + 64) = v16;
  *(_QWORD *)(v9 + 120) = *((_QWORD *)v13 + 13);
  *(_QWORD *)(v9 + 128) = *((_QWORD *)v13 + 14);
  *(_QWORD *)(v9 + 136) = *((_QWORD *)v13 + 15);
  *(_QWORD *)(v9 + 144) = *((_QWORD *)v13 + 16);
  *(_QWORD *)(v9 + 152) = *((_QWORD *)v13 + 17);
  *(_QWORD *)(v9 + 160) = *((_QWORD *)v13 + 18);
  *(_QWORD *)(v9 + 168) = *((_QWORD *)v13 + 19);
  v19 = v13[11];
  v1194 = (double *)v13;
  *(_OWORD *)(v9 + 176) = v13[10];
  *(_OWORD *)(v9 + 192) = v19;
  *(_QWORD *)(v9 + 208) = -1;
  *(_BYTE *)(v9 + 216) = v20;
  *(_BYTE *)(v9 + 217) = v21;
  *(_BYTE *)(v9 + 218) = a9;
  v23 = *v22;
  *(_QWORD *)(v9 + 240) = *((_QWORD *)v22 + 2);
  *(_OWORD *)(v9 + 224) = v23;
  v25 = *v24;
  *(_QWORD *)(v9 + 264) = *((_QWORD *)v24 + 2);
  *(_OWORD *)(v9 + 248) = v25;
  v26 = *(__int128 *)((char *)v24 + 24);
  *(_QWORD *)(v9 + 288) = *((_QWORD *)v24 + 5);
  *(_OWORD *)(v9 + 272) = v26;
  *(_QWORD *)(v9 + 296) = *((_QWORD *)v24 + 6);
  v27 = v9 + 312;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 304) = v9 + 312;
  v1199 = (_QWORD *)(v9 + 328);
  *(_QWORD *)(v9 + 352) = 0;
  v1193 = (_QWORD *)(v9 + 384);
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(_OWORD *)(v9 + 416) = 0u;
  *(_QWORD *)(v9 + 464) = 0;
  v1195 = (_QWORD *)(v9 + 440);
  v1196 = (_QWORD *)(v9 + 472);
  v1208 = (_QWORD **)(v9 + 496);
  *(_QWORD *)(v9 + 552) = 0;
  *(_QWORD *)(v9 + 584) = 0;
  *(_OWORD *)(v9 + 496) = 0u;
  *(_OWORD *)(v9 + 512) = 0u;
  *(_QWORD *)(v9 + 592) = &off_1E42B5030;
  *(_QWORD *)(v9 + 600) = 0;
  *(_OWORD *)(v9 + 616) = 0u;
  *(_OWORD *)(v9 + 632) = 0u;
  v1238 = v9;
  *(_QWORD *)(v9 + 648) = 0;
  v28 = *v10;
  v29 = v10[1];
  v30 = v29 - *v10;
  if (v29 == *v10)
  {
    v32 = 0;
  }
  else
  {
    v31 = 0x63FB9AEB1FDCD759 * (v30 >> 3);
    if (v31 > 0x20E64C148FEF8CLL)
      goto LABEL_1417;
    v32 = (char *)operator new(0xFDCD758FEE6BAC88 * (v30 >> 3));
    *(_QWORD *)(v1238 + 504) = v32;
    *(_QWORD *)(v1238 + 512) = v32;
    *(_QWORD *)(v1238 + 520) = &v32[1992 * v31];
    v28 = *v11;
    v29 = v11[1];
  }
  v1197 = (float *)v27;
  if (v29 != v28)
  {
    v33 = 0;
    v34 = (_QWORD *)v1238;
    while (1)
    {
      v35 = v28 + 1864 * v33;
      v36 = v34[65];
      if ((unint64_t)v32 >= v36)
        break;
      md::mun::PointView::PointView((uint64_t)v32, v35);
      v32 += 1992;
      v34[64] = v32;
LABEL_8:
      v34[64] = v32;
      ++v33;
      v28 = *v11;
      if (v33 >= 0x63FB9AEB1FDCD759 * ((v11[1] - *v11) >> 3))
      {
        v48 = v34[63];
        if (v32 != (char *)v48)
        {
          if ((unint64_t)(0x367D6E020E64C149 * ((uint64_t)&v32[-v48] >> 3)) <= 0xAAAAAAAAAAAAAAALL)
          {
            v49 = (double *)operator new(0x1BC2503159721ED8 * ((uint64_t)&v32[-v48] >> 3));
            v50 = &v49[0x3784A062B2E43DBLL * ((uint64_t)&v32[-v48] >> 3)];
            __p = v49;
            v51 = v49;
            while (1)
            {
              v53 = (__int128 *)(v48 + 8);
              if (v51 < v50)
              {
                v52 = *v53;
                v51[2] = *(double *)(v48 + 24);
                *(_OWORD *)v51 = v52;
                v51 += 3;
              }
              else
              {
                v54 = 0xAAAAAAAAAAAAAAABLL * (v51 - __p) + 1;
                if (v54 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * (v50 - __p) > v54)
                  v54 = 0x5555555555555556 * (v50 - __p);
                if (0xAAAAAAAAAAAAAAABLL * (v50 - __p) >= 0x555555555555555)
                  v55 = 0xAAAAAAAAAAAAAAALL;
                else
                  v55 = v54;
                if (v55)
                {
                  if (v55 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_1405;
                  v56 = (char *)operator new(24 * v55);
                }
                else
                {
                  v56 = 0;
                }
                v57 = *v53;
                v58 = &v56[8 * (v51 - __p)];
                *((_QWORD *)v58 + 2) = *(_QWORD *)(v48 + 24);
                *(_OWORD *)v58 = v57;
                if (v51 == __p)
                {
                  v61 = (double *)&v56[8 * (v51 - __p)];
                  v60 = __p;
                }
                else
                {
                  v59 = (double *)&v56[8 * (v51 - __p)];
                  v60 = __p;
                  do
                  {
                    v61 = v59 - 3;
                    v62 = *(_OWORD *)(v51 - 3);
                    *(v59 - 1) = *(v51 - 1);
                    *(_OWORD *)(v59 - 3) = v62;
                    v51 -= 3;
                    v59 -= 3;
                  }
                  while (v51 != __p);
                }
                v50 = (double *)&v56[24 * v55];
                v51 = (double *)(v58 + 24);
                if (v60)
                  operator delete(v60);
                __p = v61;
              }
              v48 += 1992;
              if ((char *)v48 == v32)
                goto LABEL_54;
            }
          }
LABEL_1417:
          abort();
        }
        goto LABEL_53;
      }
    }
    v37 = v34[63];
    v38 = 0x367D6E020E64C149 * ((uint64_t)&v32[-v37] >> 3);
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) > 0x20E64C148FEF8CLL)
      abort();
    v40 = 0x367D6E020E64C149 * ((uint64_t)(v36 - v37) >> 3);
    if (2 * v40 > v39)
      v39 = 2 * v40;
    if (v40 >= 0x1073260A47F7C6)
      v41 = 0x20E64C148FEF8CLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 > 0x20E64C148FEF8CLL)
LABEL_1405:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v42 = (char *)operator new(1992 * v41);
    }
    else
    {
      v42 = 0;
    }
    v43 = &v42[1992 * v41];
    md::mun::PointView::PointView((uint64_t)&v42[1992 * v38], v35);
    v32 = (char *)(v44 + 1992);
    v45 = *(char **)(v1238 + 504);
    v46 = *(char **)(v1238 + 512);
    if (v46 == v45)
    {
      *(_QWORD *)(v1238 + 504) = v44;
      *(_QWORD *)(v1238 + 512) = v32;
      *(_QWORD *)(v1238 + 520) = v43;
      if (!v46)
        goto LABEL_26;
    }
    else
    {
      do
      {
        v46 -= 1992;
        v44 = md::mun::PointView::PointView(v44 - 1992, (uint64_t)v46);
      }
      while (v46 != v45);
      v46 = *(char **)(v1238 + 504);
      v47 = *(char **)(v1238 + 512);
      *(_QWORD *)(v1238 + 504) = v44;
      *(_QWORD *)(v1238 + 512) = v32;
      *(_QWORD *)(v1238 + 520) = v43;
      while (v47 != v46)
      {
        v47 -= 1992;
        std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(v47);
      }
      if (!v46)
        goto LABEL_26;
    }
    operator delete(v46);
LABEL_26:
    v34 = (_QWORD *)v1238;
    goto LABEL_8;
  }
LABEL_53:
  v51 = 0;
  __p = 0;
LABEL_54:
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v1286 = 0;
  v66 = 0;
  v67 = 0;
  v68 = __p;
  v1200 = (char *)v51 - (char *)__p;
  v1310 = 0;
  *(_QWORD *)v1311 = ((char *)v51 - (char *)__p) / 24;
  v69 = __p[1];
  v70 = *(v51 - 3) - *__p;
  v71 = *(v51 - 2) - v69;
  v72 = __p[2];
  v73 = *(v51 - 1) - v72;
  v74 = 1.0 / sqrt(*__p * *__p + v69 * v69 + v72 * v72);
  v1244 = *__p;
  v75 = v74 * *__p;
  v1249 = v69;
  v76 = v74 * v69;
  v1239 = v72;
  v77 = v74 * v72;
  v78 = -(v77 * v71 - v76 * v73);
  v79 = -(v75 * v73 - v77 * v70);
  v80 = -(v76 * v70 - v75 * v71);
  v81 = 1.0 / sqrt(v78 * v78 + v79 * v79 + v80 * v80);
  v82 = v81 * v78;
  v83 = v81 * v79;
  v84 = v81 * v80;
  v85 = -(v81 * v79 * v73 - v84 * v71);
  v1257 = v84;
  v86 = -(v84 * v70 - v82 * v73);
  v1266 = v82;
  v1262 = v83;
  v87 = -(v82 * v71 - v83 * v70);
  v88 = 1.0 / sqrt(v85 * v85 + v86 * v86 + v87 * v87);
  v1232 = v88 * v86;
  v1234 = v88 * v85;
  v1228 = v88 * v87;
  v1253 = v71;
  v1211 = v70 * v70 + v71 * v71 + v73 * v73;
  do
  {
    v89 = v68[1];
    v90 = v68[2];
    v91 = ((*v68 - v1244) * v70 + (v89 - v1249) * v1253 + (v90 - v1239) * v73) * (1.0 / v1211);
    v92 = *v68 - (v1244 + v91 * v70);
    v93 = v89 - (v1249 + v91 * v1253);
    v94 = v90 - (v1239 + v91 * v73);
    v95 = v92 * v1266 + v93 * v1262 + v94 * v1257;
    if (v66 >= v67)
    {
      v96 = ((char *)v66 - (char *)v1286) >> 4;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 60)
        abort();
      if (v67 - v1286 > v97)
        v97 = v67 - v1286;
      if ((unint64_t)((char *)v67 - (char *)v1286) >= 0x7FFFFFFFFFFFFFF0)
        v98 = 0xFFFFFFFFFFFFFFFLL;
      else
        v98 = v97;
      if (v98)
      {
        if (v98 >> 60)
          goto LABEL_1405;
        v99 = (char *)operator new(16 * v98);
      }
      else
      {
        v99 = 0;
      }
      v100 = (double *)&v99[16 * v96];
      *v100 = v91;
      v100[1] = v95;
      if (v66 == v1286)
      {
        v103 = &v99[16 * v96];
        v102 = v1286;
      }
      else
      {
        v101 = &v99[16 * v96];
        v102 = v1286;
        do
        {
          v103 = v101 - 16;
          *((_OWORD *)v101 - 1) = *((_OWORD *)v66 - 1);
          v66 -= 2;
          v101 -= 16;
        }
        while (v66 != v1286);
      }
      v67 = (double *)&v99[16 * v98];
      v66 = v100 + 2;
      if (v102)
        operator delete(v102);
      v1286 = (double *)v103;
    }
    else
    {
      *v66 = v91;
      v66[1] = v95;
      v66 += 2;
    }
    v104 = v92 * v1234 + v93 * v1232 + v94 * v1228;
    if (v64 < v63)
    {
      *v64 = v91;
      v64[1] = v104;
      v64 += 2;
    }
    else
    {
      v105 = ((char *)v64 - v65) >> 4;
      v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 60)
        abort();
      if (((char *)v63 - v65) >> 3 > v106)
        v106 = ((char *)v63 - v65) >> 3;
      if ((unint64_t)((char *)v63 - v65) >= 0x7FFFFFFFFFFFFFF0)
        v107 = 0xFFFFFFFFFFFFFFFLL;
      else
        v107 = v106;
      if (v107)
      {
        if (v107 >> 60)
          goto LABEL_1405;
        v108 = (char *)operator new(16 * v107);
      }
      else
      {
        v108 = 0;
      }
      v109 = (double *)&v108[16 * v105];
      *v109 = v91;
      v109[1] = v104;
      if (v64 == (double *)v65)
      {
        v111 = v64;
        v65 = &v108[16 * v105];
      }
      else
      {
        v110 = &v108[16 * v105];
        do
        {
          *((_OWORD *)v110 - 1) = *((_OWORD *)v64 - 1);
          v110 -= 16;
          v64 -= 2;
        }
        while (v64 != (double *)v65);
        v111 = (double *)v65;
        v65 = v110;
      }
      v63 = (double *)&v108[16 * v107];
      v64 = v109 + 2;
      if (v111)
        operator delete(v111);
    }
    v68 += 3;
  }
  while (v68 != v51);
  v112 = (char *)v64 - v65;
  if (v112)
  {
    v113 = v1286;
    if (v112 < 0)
      abort();
    v114 = operator new(v112);
    v115 = (char *)v114 + v112;
  }
  else
  {
    v115 = 0;
    v114 = 0;
    v113 = v1286;
  }
  v116 = v112 >> 4;
  *v114 = *(_QWORD *)v65;
  v114[1] = *((_QWORD *)v65 + 1);
  v117 = (v112 >> 4) - 1;
  v118 = &v65[16 * v117];
  v1221 = v114;
  v119 = &v114[2 * v117];
  *v119 = *(_QWORD *)v118;
  v119[1] = *((_QWORD *)v118 + 1);
  if (v117 < 2)
    goto LABEL_104;
  v120.f64[0] = *((float64_t *)v65 + 2);
  v121 = v116 - 2;
  if ((unint64_t)(v116 - 2) < 8)
    goto LABEL_101;
  v191 = (double *)(v114 + 2);
  v192 = 2 * (v116 - 3);
  v122 = 1;
  if (&v114[v192 + 2] < v114 + 2 || &v114[v192 + 3] < v114 + 3 || (unint64_t)(v116 - 3) >> 60)
    goto LABEL_102;
  if (v191 < (double *)&v65[v112 & 0xFFFFFFFFFFFFFFF0] && v65 < (char *)v114 + (v112 & 0xFFFFFFFFFFFFFFF0) - 16)
  {
LABEL_101:
    v122 = 1;
  }
  else
  {
    v193 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v120.f64[0], 0);
    v194 = v65 + 40;
    __asm { FMOV            V1.2D, #0.5 }
    v196 = (float64x2_t)vdupq_n_s64(0x3FE6666660000000uLL);
    v197 = v121 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v198.f64[0] = *(float64_t *)(v194 - 2);
      v198.f64[1] = *(float64_t *)v194;
      v199 = (const double *)(v194 - 5);
      v1426 = vld2q_f64(v199);
      v120 = *(float64x2_t *)(v194 + 1);
      v200 = *(int64x2_t *)(v194 - 1);
      v201 = (float64x2_t)vzip1q_s64(v200, (int64x2_t)v120);
      v202 = (float64x2_t)vextq_s8(v193, (int8x16_t)v201, 8uLL);
      v1425.val[0] = vmlaq_f64(v202, v196, vmlaq_f64(vnegq_f64(v202), _Q1, vaddq_f64(v201, v1426.val[0])));
      v1425.val[1] = vmlaq_f64(v198, v196, vmlaq_f64(vnegq_f64(v198), _Q1, vaddq_f64((float64x2_t)vzip2q_s64(v200, (int64x2_t)v120), v1426.val[1])));
      vst2q_f64(v191, v1425);
      v191 += 4;
      v194 += 4;
      v193 = (int8x16_t)v201;
      v197 -= 2;
    }
    while (v197);
    if (v121 == (v121 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_104;
    v122 = v121 | 1;
  }
LABEL_102:
  v123 = (float64x2_t *)&v114[2 * v122];
  v124 = ~v122 + v116;
  v125 = (float64x2_t *)&v65[16 * v122 + 16];
  __asm { FMOV            V1.2D, #-0.5 }
  v129 = (float64x2_t)vdupq_n_s64(0xBFE6666660000000);
  do
  {
    v130 = &v125[-1].f64[1];
    v131 = v125[-2];
    v132 = *v125++;
    v120.f64[1] = *v130;
    *v123++ = vmlaq_f64(v120, v129, vmlaq_f64(v120, _Q1, vaddq_f64(v132, v131)));
    v120.f64[0] = v132.f64[0];
    --v124;
  }
  while (v124);
LABEL_104:
  operator delete(v65);
  v133 = 0.0;
  v134 = (char *)v66 - (char *)v113;
  v135 = 8 * (((char *)v66 - (char *)v113) >> 4);
  v1203 = v115;
  v1205 = ((char *)v66 - (char *)v113) >> 4;
  v1215 = (char *)v66 - (char *)v113;
  __len = v135;
  __sz = (unint64_t)((char *)v66 - (char *)v113) >> 1;
  if (v66 == v113)
  {
    v137 = 0;
    v136 = 0;
    v140 = 0;
    v1271 = 0;
    v180 = 0.0;
    goto LABEL_182;
  }
  if (v134 < 0)
    abort();
  v136 = (double *)operator new((unint64_t)((char *)v66 - (char *)v113) >> 1);
  v137 = (float64x2_t *)operator new((unint64_t)((char *)v66 - (char *)v113) >> 1);
  v138 = &v136[(unint64_t)v135 / 8];
  v139 = (float64x2_t *)((char *)v137 + v135);
  v140 = v136;
  v1271 = v137;
  do
  {
    if (v136 < v138)
    {
      *v136++ = *v113;
      if (v137 < v139)
        goto LABEL_107;
      goto LABEL_129;
    }
    v141 = v140;
    v142 = (char *)v136 - (char *)v140;
    v143 = v142 >> 3;
    v144 = (v142 >> 3) + 1;
    v1277 = v141;
    if (v144 >> 61)
      abort();
    v145 = (char *)v138 - (char *)v141;
    v146 = ((char *)v138 - (char *)v141) >> 2;
    if (v146 > v144)
      v144 = v146;
    if (v145 >= 0x7FFFFFFFFFFFFFF8)
      v147 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v147 = v144;
    if (v147)
    {
      if (v147 >> 61)
        goto LABEL_1405;
      v148 = (char *)operator new(8 * v147);
      v149 = v136;
    }
    else
    {
      v149 = v136;
      v148 = 0;
    }
    v150 = (double *)&v148[8 * v143];
    *v150 = *v113;
    v136 = v150 + 1;
    v151 = v1277;
    if (v149 != v1277)
    {
      v152 = v149;
      v153 = v149 - 1;
      v154 = (char *)(v149 - 1) - (char *)v1277;
      if (v154 < 0x168
        || &v148[v142 - 8 - (v154 & 0xFFFFFFFFFFFFFFF8)] > &v148[v142 - 8]
        || (double *)((char *)v153 - (v154 & 0xFFFFFFFFFFFFFFF8)) > v153
        || (unint64_t)((char *)v153 - &v148[v142] + 8) < 0x20)
      {
        v155 = v152;
        v151 = v1277;
        do
        {
LABEL_125:
          v156 = *((_QWORD *)v155-- - 1);
          *((_QWORD *)v150-- - 1) = v156;
        }
        while (v155 != v151);
        goto LABEL_126;
      }
      v169 = (v154 >> 3) + 1;
      v155 = &v152[-(v169 & 0x3FFFFFFFFFFFFFFCLL)];
      v170 = &v148[8 * v143 - 16];
      v171 = v152 - 2;
      v172 = v169 & 0x3FFFFFFFFFFFFFFCLL;
      v151 = v1277;
      do
      {
        v173 = *(_OWORD *)v171;
        *((_OWORD *)v170 - 1) = *((_OWORD *)v171 - 1);
        *(_OWORD *)v170 = v173;
        v170 -= 32;
        v171 -= 4;
        v172 -= 4;
      }
      while (v172);
      v150 -= v169 & 0x3FFFFFFFFFFFFFFCLL;
      if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_125;
    }
LABEL_126:
    v138 = (double *)&v148[8 * v147];
    if (v151)
      operator delete(v151);
    v140 = v150;
    if (v137 < v139)
    {
LABEL_107:
      v137->f64[0] = v113[1];
      v137 = (float64x2_t *)((char *)v137 + 8);
      goto LABEL_108;
    }
LABEL_129:
    v157 = (char *)v139;
    v158 = v138;
    v159 = ((char *)v137 - (char *)v1271) >> 3;
    v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 61)
      abort();
    if ((v157 - (char *)v1271) >> 2 > v160)
      v160 = (v157 - (char *)v1271) >> 2;
    if ((unint64_t)(v157 - (char *)v1271) >= 0x7FFFFFFFFFFFFFF8)
      v161 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v161 = v160;
    v1231 = v136;
    if (v161)
    {
      if (v161 >> 61)
        goto LABEL_1405;
      v162 = operator new(8 * v161);
    }
    else
    {
      v162 = 0;
    }
    v163 = (float64x2_t *)&v162[8 * v159];
    v163->f64[0] = v113[1];
    v164 = (float64x2_t *)&v163->f64[1];
    if (v137 == v1271)
    {
      v138 = v158;
      v167 = v1271;
      v139 = (float64x2_t *)&v162[8 * v161];
      if (!v1271)
        goto LABEL_145;
LABEL_144:
      operator delete(v167);
      goto LABEL_145;
    }
    v165 = (char *)&v137[-1].f64[1] - (char *)v1271;
    if (v165 < 0x168
      || &v162[(char *)v137 - (char *)v1271 - 8 - (v165 & 0xFFFFFFFFFFFFFFF8)] > &v162[(char *)v137
                                                                                       - (char *)v1271
                                                                                       - 8]
      || (char *)&v137[-1].f64[1] - (v165 & 0xFFFFFFFFFFFFFFF8) > (char *)&v137[-1].f64[1]
      || (unint64_t)((char *)v1271 - v162) < 0x20)
    {
      v166 = v137;
      v138 = v158;
      v167 = v1271;
      do
      {
LABEL_142:
        v168 = v166[-1].f64[1];
        v166 = (float64x2_t *)((char *)v166 - 8);
        v163[-1].f64[1] = v168;
        v163 = (float64x2_t *)((char *)v163 - 8);
      }
      while (v166 != v167);
      goto LABEL_143;
    }
    v174 = (v165 >> 3) + 1;
    v166 = (float64x2_t *)((char *)v137 - 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL));
    v175 = &v162[8 * v159 - 16];
    v176 = (__int128 *)&v137[-1];
    v177 = v174 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v178 = *v176;
      *(v175 - 1) = *(v176 - 1);
      *v175 = v178;
      v175 -= 2;
      v176 -= 2;
      v177 -= 4;
    }
    while (v177);
    v163 = (float64x2_t *)((char *)v163 - 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL));
    _ZF = v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL);
    v138 = v158;
    v167 = v1271;
    if (!_ZF)
      goto LABEL_142;
LABEL_143:
    v139 = (float64x2_t *)&v162[8 * v161];
    if (v167)
      goto LABEL_144;
LABEL_145:
    v1271 = v163;
    v137 = v164;
    v136 = v1231;
LABEL_108:
    v113 += 2;
  }
  while (v113 != v66);
  if (v1271 == v137)
  {
    v134 = (int64_t)v1271;
    v180 = 0.0;
    v113 = v1286;
  }
  else
  {
    v179 = (char *)v137 - (char *)v1271 - 8;
    v180 = 0.0;
    v133 = 0.0;
    v181 = (double *)v1271;
    v113 = v1286;
    if (v179 <= 0x17)
    {
      do
      {
LABEL_169:
        v190 = *v181++;
        v180 = fmax(v180, v190);
        v133 = fmax(v133, -v190);
      }
      while (v181 != (double *)v137);
    }
    else
    {
      v182 = (v179 >> 3) + 1;
      v183 = v1271 + 1;
      v184 = 0uLL;
      v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
      v186 = 0uLL;
      v187 = 0uLL;
      v188 = 0uLL;
      do
      {
        v189 = v183[-1];
        v184 = vmaxnmq_f64(v184, v189);
        v186 = vmaxnmq_f64(v186, *v183);
        v187 = vmaxnmq_f64(v187, vnegq_f64(v189));
        v188 = vmaxnmq_f64(v188, vnegq_f64(*v183));
        v183 += 2;
        v185 -= 4;
      }
      while (v185);
      v133 = vmaxnmvq_f64(vmaxnmq_f64(v187, v188));
      v180 = vmaxnmvq_f64(vmaxnmq_f64(v184, v186));
      if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v181 = &v1271->f64[v182 & 0x3FFFFFFFFFFFFFFCLL];
        goto LABEL_169;
      }
    }
    v134 = (int64_t)v1271;
  }
LABEL_182:
  v203 = sqrt(v1211);
  v204 = fmin(v133, v180) / v203 > 0.1 || v203 < 15.0;
  if (v204)
  {
    v205 = ((uint64_t)v137 - v134) >> 3;
    if ((unint64_t)(v205 - 1) >= 2)
    {
      v207 = v1271->f64[0];
      v208 = v1271->f64[1];
      f64 = v1271[1].f64;
      v209 = v205 - 2;
      do
      {
        v210 = *f64;
        v207 = v208 + (v208 + (*f64 + v207) * -0.5) * -0.75;
        *(f64++ - 1) = v207;
        v208 = v210;
        --v209;
      }
      while (v209);
    }
  }
  if (v66 == v113)
  {
    v211 = 0;
    v212 = 0;
  }
  else
  {
    if ((v1215 & 0x8000000000000000) != 0)
      abort();
    v211 = (float64x2_t *)operator new(__sz);
    memset_pattern16(v211, &xmmword_19FFB63A0, __len);
    v212 = (char *)v211 + __len;
  }
  *((_QWORD *)v212 - 1) = 0x408F400000000000;
  v211->f64[0] = 1000.0;
  v213 = v1271;
  if (v66 == v113)
    goto LABEL_203;
  v1278 = v140;
  v214 = 0.0;
  v215 = v113;
  do
  {
    *(double *)__src = *v215;
    if (!*((_QWORD *)&v1367 + 1))
      goto LABEL_1406;
    v214 = fmax(vabdd_f64((*(double (**)(_QWORD, _BYTE *))(**((_QWORD **)&v1367 + 1) + 48))(*((_QWORD *)&v1367 + 1), __src), v215[1]), v214);
    v215 += 2;
  }
  while (v215 != v66);
  v140 = v1278;
  if (v214 < 4.3 || v1215 < 0x70)
  {
LABEL_203:
    if (*((_QWORD *)&v1367 + 1))
    {
      v221 = v1221;
      if (*((void ***)&v1367 + 1) == v1366)
      {
        *(_QWORD *)&v1413[1].f64[1] = v1413;
        (*((void (**)(void **, float64x2_t *))v1366[0] + 3))(v1366, v1413);
      }
      else
      {
        v1413[1].f64[1] = *((float64_t *)&v1367 + 1);
        *((_QWORD *)&v1367 + 1) = 0;
      }
    }
    else
    {
      v1413[1].f64[1] = 0.0;
      v221 = v1221;
    }
    goto LABEL_275;
  }
  v216 = (char *)v136 - (char *)v1278;
  if (v136 == v1278)
  {
    v217 = v136;
    v220 = 0;
    v219 = 0;
  }
  else
  {
    if (v216 < 0)
      abort();
    v1216 = (float64x2_t *)operator new((char *)v136 - (char *)v1278);
    bzero(v1216, v216 & 0xFFFFFFFFFFFFFFF8);
    v217 = v136;
    v218 = (float64x2_t *)operator new((char *)v136 - (char *)v1278);
    bzero(v218, v216 & 0xFFFFFFFFFFFFFFF8);
    v219 = v218;
    v220 = v1216;
  }
  v222 = v216 >> 3;
  v223 = (unint64_t)(v216 >> 3) >> 1;
  v224 = v223;
  v1212 = v219;
  v219->f64[v224] = 5.0;
  v1217 = v220;
  v220->f64[v224] = ((v1271->f64[v223 + 1] - v1271->f64[v223]) / (v1278[v223 + 1] - v1278[v223])
                   + (v1271->f64[v223] - v1271->f64[v223 - 1]) / (v1278[v223] - v1278[v223 - 1]))
                  * 0.5;
  if (v217 != v1278)
  {
    if (v222 <= 1)
      v225 = 1;
    else
      v225 = v216 >> 3;
    if (v225 <= 3)
    {
      v226 = 0;
      goto LABEL_218;
    }
    v226 = v225 & 0xFFFFFFFFFFFFFFFCLL;
    v227 = (uint64x2_t)vdupq_n_s64(v223);
    v228 = (int64x2_t)xmmword_19FFB2E40;
    v229 = vdupq_n_s64(2uLL);
    v230 = (int8x16_t)vdupq_n_s64(0x3FB999999999999AuLL);
    v231 = (int8x16_t *)&v211[1];
    __asm { FMOV            V4.2D, #1.0 }
    v233 = vdupq_n_s64(4uLL);
    v234 = v225 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v231[-1] = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v228, v227), v230, _Q4);
      *v231 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v228, v229), v227), v230, _Q4);
      v228 = vaddq_s64(v228, v233);
      v231 += 2;
      v234 -= 4;
    }
    while (v234);
    for (; v225 != v226; ++v226)
    {
LABEL_218:
      if (v226 <= v223)
        v235 = 1.0;
      else
        v235 = 0.1;
      v211->f64[v226] = v235;
    }
  }
  v211->f64[0] = 1000.0;
  if (v217 != v1278)
  {
    if ((unint64_t)(v216 >> 3) <= 1)
      v236 = 1;
    else
      v236 = v216 >> 3;
    if (v236 <= 3)
    {
      v237 = 0;
      goto LABEL_231;
    }
    v237 = v236 & 0xFFFFFFFFFFFFFFFCLL;
    v238 = (uint64x2_t)vdupq_n_s64(v223);
    v239 = (int64x2_t)xmmword_19FFB2E40;
    v240 = vdupq_n_s64(2uLL);
    v241 = (int8x16_t)vdupq_n_s64(0x3FB999999999999AuLL);
    v242 = (int8x16_t *)&v211[1];
    __asm { FMOV            V4.2D, #1.0 }
    v244 = vdupq_n_s64(4uLL);
    v245 = v236 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v242[-1] = vbslq_s8((int8x16_t)vcgtq_u64(v238, (uint64x2_t)v239), v241, _Q4);
      *v242 = vbslq_s8((int8x16_t)vcgtq_u64(v238, (uint64x2_t)vaddq_s64(v239, v240)), v241, _Q4);
      v239 = vaddq_s64(v239, v244);
      v242 += 2;
      v245 -= 4;
    }
    while (v245);
    for (; v236 != v237; ++v237)
    {
LABEL_231:
      if (v237 >= v223)
        v246 = 1.0;
      else
        v246 = 0.1;
      v211->f64[v237] = v246;
    }
  }
  *((_QWORD *)v212 - 1) = 0x408F400000000000;
  *(double *)__src = v1278[v223];
  if (!v1378[3])
  {
LABEL_1406:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_1432;
  }
  v1271->f64[v223] = (*(double (**)(void *, _BYTE *))(*(_QWORD *)v1378[3] + 48))(v1378[3], __src);
  v211->f64[v223] = 5.0;
  v247 = v1278[v223 - 1];
  v248 = v1278[v223 + 1];
  v249 = v1378[3];
  if (!v1378[3])
    goto LABEL_239;
  if (v1378[3] == v1378)
  {
    *(_QWORD *)&__src[24] = __src;
    (*((void (**)(void **, _BYTE *))v1378[0] + 3))(v1378, __src);
  }
  else
  {
    v249 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1378[3] + 16))();
LABEL_239:
    *(_QWORD *)&__src[24] = v249;
  }
  v250 = COERCE_DOUBLE(&v1415);
  v251 = *((uint64_t *)&v1331 + 1);
  if (*((_QWORD *)&v1331 + 1))
  {
    if (*((_QWORD **)&v1331 + 1) != v1330)
    {
      *(double *)&v251 = COERCE_DOUBLE((*(uint64_t (**)(void))(**((_QWORD **)&v1331 + 1) + 16))());
      goto LABEL_244;
    }
    v1417 = COERCE_DOUBLE(&v1415);
    (*(void (**)(_QWORD *, __int128 *))(v1330[0] + 24))(v1330, &v1415);
  }
  else
  {
LABEL_244:
    v1417 = *(double *)&v251;
  }
  *(double *)v1418 = v247;
  *(double *)&v1418[8] = v248;
  v252 = COERCE_DOUBLE(operator new(0x58uLL));
  v253 = v252;
  **(_QWORD **)&v252 = &off_1E42C8318;
  if (*(_QWORD *)&__src[24])
  {
    if (*(_BYTE **)&__src[24] == __src)
    {
      *(_QWORD *)(*(_QWORD *)&v252 + 32) = *(_QWORD *)&v252 + 8;
      (*(void (**)(_BYTE *))(*(_QWORD *)__src + 24))(__src);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)&v252 + 32) = *(_QWORD *)&__src[24];
      *(_QWORD *)&__src[24] = 0;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)&v252 + 32) = 0;
  }
  if (v1417 == 0.0)
  {
    *(_QWORD *)(*(_QWORD *)&v253 + 64) = 0;
LABEL_255:
    *(_OWORD *)(*(_QWORD *)&v253 + 72) = *(_OWORD *)v1418;
    v1413[1].f64[1] = v253;
    v221 = v1221;
    v213 = v1271;
  }
  else
  {
    if (*(__int128 **)&v1417 != &v1415)
    {
      *(double *)(*(_QWORD *)&v253 + 64) = v1417;
      v1417 = 0.0;
      goto LABEL_255;
    }
    *(_QWORD *)(*(_QWORD *)&v253 + 64) = *(_QWORD *)&v253 + 40;
    (*(void (**)(__int128 *))(v1415 + 24))(&v1415);
    v305 = v1417;
    *(_OWORD *)(*(_QWORD *)&v253 + 72) = *(_OWORD *)v1418;
    v1413[1].f64[1] = v253;
    if (*(__int128 **)&v305 == &v1415)
    {
      v306 = 4;
      v221 = v1221;
      v213 = v1271;
LABEL_725:
      (*(void (**)(double))(**(_QWORD **)&v250 + 8 * v306))(COERCE_DOUBLE(*(_QWORD *)&v250));
    }
    else
    {
      v221 = v1221;
      v213 = v1271;
      if (v305 != 0.0)
      {
        v306 = 5;
        v250 = v305;
        goto LABEL_725;
      }
    }
  }
  v254 = *(_QWORD **)&__src[24];
  if (*(_BYTE **)&__src[24] == __src)
  {
    v255 = 4;
    v254 = __src;
LABEL_260:
    (*(void (**)(void))(*v254 + 8 * v255))();
  }
  else if (*(_QWORD *)&__src[24])
  {
    v255 = 5;
    goto LABEL_260;
  }
  v256 = (_QWORD *)*((_QWORD *)&v1331 + 1);
  if (*((_QWORD **)&v1331 + 1) == v1330)
  {
    v257 = 4;
    v256 = v1330;
LABEL_265:
    (*(void (**)(void))(*v256 + 8 * v257))();
  }
  else if (*((_QWORD *)&v1331 + 1))
  {
    v257 = 5;
    goto LABEL_265;
  }
  v258 = (void **)v1378[3];
  if (v1378[3] == v1378)
  {
    v259 = 4;
    v258 = v1378;
LABEL_270:
    (*((void (**)(void))*v258 + v259))();
  }
  else if (v1378[3])
  {
    v259 = 5;
    goto LABEL_270;
  }
  if (v1212)
    operator delete(v1212);
  if (v1217)
    operator delete(v1217);
LABEL_275:
  v260 = (void **)*((_QWORD *)&v1367 + 1);
  if (*((void ***)&v1367 + 1) == v1366)
  {
    v261 = 4;
    v260 = v1366;
LABEL_279:
    (*((void (**)(void))*v260 + v261))();
  }
  else if (*((_QWORD *)&v1367 + 1))
  {
    v261 = 5;
    goto LABEL_279;
  }
  operator delete(v211);
  if (v213)
    operator delete(v213);
  if (v140)
    operator delete(v140);
  v262 = v1203 - v221;
  if (v1203 == v221)
  {
    v263 = 0;
    v265 = 0;
  }
  else
  {
    if (v262 < 0)
      abort();
    v263 = (char *)operator new(v1203 - v221);
    v264 = v262 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v263, v221, v264);
    v265 = &v263[v264];
  }
  v266 = operator new(0x20uLL);
  *v266 = &off_1E42C8360;
  v266[1] = 0;
  v266[2] = 0;
  v266[3] = 0;
  v267 = v265 - v263;
  if (v265 != v263)
  {
    if (v267 < 0)
      abort();
    v268 = (char *)operator new(v265 - v263);
    v266[1] = v268;
    v266[3] = &v268[16 * (v267 >> 4)];
    v269 = v267 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v268, v263, v269);
    v266[2] = &v268[v269];
  }
  *((_QWORD *)&v1331 + 1) = v266;
  if (v263)
  {
    operator delete(v263);
    v266 = (_QWORD *)*((_QWORD *)&v1331 + 1);
  }
  *(_QWORD *)&v1311[8] = 1;
  v1366[0] = *(void **)&v1244;
  v1366[1] = *(void **)&v1249;
  *(double *)&v1367 = v1239;
  *((double *)&v1367 + 1) = v70;
  v270 = &v1369;
  *(double *)&v1368 = v1253;
  *((double *)&v1368 + 1) = v73;
  if (v266)
  {
    if (v266 != v1330)
    {
      v271 = (*(uint64_t (**)(_QWORD *))(*v266 + 16))(v266);
      goto LABEL_297;
    }
    v1370 = &v1369;
    (*(void (**)(_QWORD *, __int128 *))(v1330[0] + 24))(v1330, &v1369);
  }
  else
  {
    v271 = 0;
LABEL_297:
    v1370 = (__int128 *)v271;
  }
  *(double *)&v1371 = v1234;
  *((double *)&v1371 + 1) = v1232;
  v1372 = v1228;
  v272 = v1373;
  v273 = *(_QWORD *)&v1413[1].f64[1];
  if (*(_QWORD *)&v1413[1].f64[1])
  {
    if (*(float64x2_t **)&v1413[1].f64[1] != v1413)
    {
      v273 = (*(uint64_t (**)(void))(**(_QWORD **)&v1413[1].f64[1] + 16))();
      goto LABEL_302;
    }
    v1374 = v1373;
    (*(void (**)(float64x2_t *, _QWORD *))(*(_QWORD *)&v1413[0].f64[0] + 24))(v1413, v1373);
  }
  else
  {
LABEL_302:
    v1374 = (uint64_t *)v273;
  }
  *(double *)&v1375 = v1266;
  *((double *)&v1375 + 1) = v1262;
  v1376 = v1257;
  *(_OWORD *)__src = *(_OWORD *)v1366;
  *(_OWORD *)&__src[16] = v1367;
  v1415 = v1368;
  v274 = &v1416;
  if (v1370)
  {
    if (v1370 == &v1369)
    {
      *(_QWORD *)&v1418[8] = &v1416;
      (*(void (**)(__int128 *, double *))(v1369 + 24))(&v1369, &v1416);
    }
    else
    {
      *(_QWORD *)&v1418[8] = v1370;
      v1370 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v1418[8] = 0;
  }
  *(_OWORD *)&v1418[16] = v1371;
  *(double *)&v1418[32] = v1372;
  v275 = &v1419;
  if (v1374)
  {
    if (v1374 == v1373)
    {
      v1421 = &v1419;
      (*(void (**)(_QWORD *, uint64_t *))(v1373[0] + 24))(v1373, &v1419);
    }
    else
    {
      v1421 = v1374;
      v1374 = 0;
    }
  }
  else
  {
    v1421 = 0;
  }
  v1422 = v1375;
  v1423 = v1376;
  v276 = (char *)operator new(0xA8uLL);
  v277 = v276;
  *(_QWORD *)v276 = &off_1E42C8480;
  v278 = *(_OWORD *)&__src[16];
  *(_OWORD *)(v276 + 8) = *(_OWORD *)__src;
  *(_OWORD *)(v276 + 24) = v278;
  *(_OWORD *)(v276 + 40) = v1415;
  if (*(_QWORD *)&v1418[8])
  {
    if (*(double **)&v1418[8] == &v1416)
    {
      *((_QWORD *)v276 + 10) = v276 + 56;
      (*(void (**)(double *))(*(_QWORD *)&v1416 + 24))(&v1416);
    }
    else
    {
      *((_QWORD *)v276 + 10) = *(_QWORD *)&v1418[8];
      *(_QWORD *)&v1418[8] = 0;
    }
  }
  else
  {
    *((_QWORD *)v276 + 10) = 0;
  }
  *(_OWORD *)(v277 + 88) = *(_OWORD *)&v1418[16];
  *((_QWORD *)v277 + 13) = *(_QWORD *)&v1418[32];
  if (v1421)
  {
    if (v1421 == &v1419)
    {
      *((_QWORD *)v277 + 17) = v277 + 112;
      (*(void (**)(uint64_t *))(v1419 + 24))(&v1419);
    }
    else
    {
      *((_QWORD *)v277 + 17) = v1421;
      v1421 = 0;
    }
  }
  else
  {
    *((_QWORD *)v277 + 17) = 0;
  }
  *((_OWORD *)v277 + 9) = v1422;
  *((double *)v277 + 20) = v1423;
  v1378[3] = v277;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v1378, buf);
  v279 = (void **)v1378[3];
  if (v1378[3] == v1378)
  {
    v280 = 4;
    v279 = v1378;
LABEL_328:
    (*((void (**)(void))*v279 + v280))();
  }
  else if (v1378[3])
  {
    v280 = 5;
    goto LABEL_328;
  }
  if (v1421 == &v1419)
  {
    v281 = 4;
LABEL_333:
    (*(void (**)(uint64_t *))(*v275 + 8 * v281))(v275);
  }
  else if (v1421)
  {
    v281 = 5;
    v275 = v1421;
    goto LABEL_333;
  }
  if (*(double **)&v1418[8] == &v1416)
  {
    v282 = 4;
LABEL_338:
    (*(void (**)(double *))(*(_QWORD *)v274 + 8 * v282))(v274);
  }
  else if (*(_QWORD *)&v1418[8])
  {
    v282 = 5;
    v274 = *(double **)&v1418[8];
    goto LABEL_338;
  }
  if (v1374 == v1373)
  {
    v284 = 4;
    v283 = ((char *)v51 - (char *)__p) / 24;
LABEL_343:
    (*(void (**)(uint64_t *))(*v272 + 8 * v284))(v272);
  }
  else
  {
    v283 = ((char *)v51 - (char *)__p) / 24;
    if (v1374)
    {
      v284 = 5;
      v272 = v1374;
      goto LABEL_343;
    }
  }
  if (v1370 == &v1369)
  {
    v285 = 4;
LABEL_348:
    (*(void (**)(__int128 *))(*(_QWORD *)v270 + 8 * v285))(v270);
  }
  else if (v1370)
  {
    v285 = 5;
    v270 = v1370;
    goto LABEL_348;
  }
  if (__p != v51)
  {
    v286 = v283 <= 1 ? 1 : v283;
    v287 = __p + 2;
    v288 = 0.0;
    v289 = v113;
    do
    {
      v290 = *(_QWORD *)v289;
      LODWORD(v1366[0]) = 0;
      *(_QWORD *)__src = v290;
      if (!v1310)
        goto LABEL_1407;
      v291 = (*((double (**)(std::locale *, void **, _BYTE *))v1310->__locale_ + 6))(v1310, v1366, __src)
           - *(v287 - 2);
      v293 = v292 - *(v287 - 1);
      v294 = *v287;
      v287 += 3;
      v288 = fmax(v291 * v291 + v293 * v293 + (v295 - v294) * (v295 - v294), v288);
      v289 += 2;
      --v286;
    }
    while (v286);
    if (v288 > 100.0)
    {
      if (v283 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v296 = (char *)operator new(v1200);
      v1366[0] = v296;
      v1366[1] = v296;
      *(_QWORD *)&v1367 = &v296[24 * v283];
      v297 = 24 * ((v1200 - 24) / 0x18) + 24;
      memcpy(v296, __p, v297);
      v1366[1] = &v296[v297];
      geo::refine<gm::Matrix<double,3,1>>((_QWORD **)v1366);
      geo::refine<gm::Matrix<double,3,1>>((_QWORD **)v1366);
      v298 = v1366[0];
      v299 = (char *)v1366[1] - (char *)v1366[0];
      if (v1366[1] == v1366[0])
      {
        v300 = 0;
        v303 = 0;
        v304 = 0;
        *(_QWORD *)&v1311[8] = -1;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v299 >> 3) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v300 = operator new((char *)v1366[1] - (char *)v1366[0]);
        v301 = 24 * ((v299 - 24) / 0x18uLL);
        v299 = v301 + 24;
        memcpy(v300, v298, v301 + 24);
        v302 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301 + 24) >> 3);
        *(_QWORD *)&v1311[8] = v302 - 1;
        if (v301 == -24)
        {
          v303 = 0;
          v304 = 0;
        }
        else
        {
          if (v302 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v303 = (char *)operator new(v301 + 24);
          v304 = &v303[8 * (v299 >> 3)];
          memcpy(v303, v300, 24 * (v301 / 0x18) + 24);
          v299 = (int64_t)&v303[24 * (v301 / 0x18) + 24];
        }
      }
      v307 = operator new(0x20uLL);
      *v307 = &off_1E42C8438;
      v307[1] = v303;
      v307[2] = v299;
      v307[3] = v304;
      *(_QWORD *)&__src[24] = v307;
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](__src, buf);
      v308 = *(_QWORD **)&__src[24];
      if (*(_BYTE **)&__src[24] == __src)
      {
        v309 = 4;
        v308 = __src;
LABEL_372:
        (*(void (**)(void))(*v308 + 8 * v309))();
      }
      else if (*(_QWORD *)&__src[24])
      {
        v309 = 5;
        goto LABEL_372;
      }
      if (v300)
        operator delete(v300);
      if (v298)
        operator delete(v298);
    }
  }
  v310 = (_QWORD *)*((_QWORD *)&v1331 + 1);
  if (*((_QWORD **)&v1331 + 1) == v1330)
  {
    v312 = 4;
    v310 = v1330;
    v311 = v1221;
LABEL_381:
    (*(void (**)(void))(*v310 + 8 * v312))();
  }
  else
  {
    v311 = v1221;
    if (*((_QWORD *)&v1331 + 1))
    {
      v312 = 5;
      goto LABEL_381;
    }
  }
  v313 = v1413[1].f64[1];
  if (*(float64x2_t **)&v1413[1].f64[1] == v1413)
  {
    v314 = 4;
    v313 = COERCE_DOUBLE(v1413);
LABEL_386:
    (*(void (**)(void))(**(_QWORD **)&v313 + 8 * v314))();
  }
  else if (*(_QWORD *)&v1413[1].f64[1])
  {
    v314 = 5;
    goto LABEL_386;
  }
  operator delete(v311);
  if (v113)
    operator delete(v113);
  v315 = *(_DWORD *)&v1311[8];
  if (*(int *)&v1311[8] < 1)
  {
    v317 = 0.0;
  }
  else
  {
    v316 = 0;
    v317 = 0.0;
    do
    {
      v318 = *(_DWORD *)v1311;
      LODWORD(v1366[0]) = v316;
      *(_QWORD *)__src = 0;
      if (!v1310)
        goto LABEL_1407;
      v319 = (*((double (**)(std::locale *, void **, _BYTE *))v1310->__locale_ + 6))(v1310, v1366, __src);
      v321 = v320;
      v323 = v322;
      v324 = 0;
      if ((10 * v318) <= 2)
        v325 = 2;
      else
        v325 = (10 * v318);
      v326 = 0.0;
      do
      {
        LODWORD(v1366[0]) = v316;
        *(double *)__src = (double)v324 * (1.0 / (double)(v325 - 1));
        if (!v1310)
          goto LABEL_1407;
        v327 = (*((double (**)(std::locale *, void **, _BYTE *))v1310->__locale_ + 6))(v1310, v1366, __src);
        ++v324;
        v326 = sqrt((v327 - v319) * (v327 - v319) + (v328 - v321) * (v328 - v321) + (v329 - v323) * (v329 - v323))
             + v326;
        v323 = v329;
        v321 = v328;
        v319 = v327;
      }
      while (v325 != v324);
      v317 = v326 + v317;
      ++v316;
    }
    while (v316 != v315);
    v315 = *(_DWORD *)&v1311[8];
  }
  *(double *)&v1311[16] = v317;
  memset(v1312, 0, sizeof(v1312));
  v1313 = 12;
  v330 = (12 * v315) | 1;
  std::vector<double>::__append((uint64_t)v1312, v330);
  v331 = v1312[3];
  v332 = ((char *)v1312[4] - (char *)v1312[3]) >> 3;
  if (v330 <= v332)
  {
    if (v330 < v332)
      v1312[4] = (char *)v1312[3] + 8 * v330;
  }
  else
  {
    std::vector<double>::__append((uint64_t)&v1312[3], v330 - v332);
    v331 = v1312[3];
  }
  v333 = (char *)v1312[0];
  *(_QWORD *)v1312[0] = 0;
  *v331 = 0;
  if (v315 < 1)
  {
    v335 = 0.0;
LABEL_421:
    if (v315)
    {
      v354 = 12 * v315;
      v355 = v333 + 8;
      v356 = (8 * v354) | 8;
      v357 = 1.0 / (double)(12 * v315);
      if (v333 + 8 >= (char *)v1312[3] + v356
        || (v358 = &v333[v356], v359 = (char *)v1312[3] + 8, (char *)v1312[3] + 8 >= v358))
      {
        v362 = (float64x2_t *)((char *)v1312[3] + 24);
        v363 = (int64x2_t)xmmword_19FFB2DB0;
        v364 = (float64x2_t *)(v333 + 24);
        v365 = vdupq_n_s64(2uLL);
        v366 = vdupq_n_s64(4uLL);
        v367 = 1.0 / v335;
        do
        {
          v368 = vmulq_n_f64(*v364, v367);
          v364[-1] = vmulq_n_f64(v364[-1], v367);
          *v364 = v368;
          v362[-1] = vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v363), v357);
          *v362 = vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v363, v365)), v357);
          v363 = vaddq_s64(v363, v366);
          v362 += 2;
          v364 += 2;
          v354 -= 4;
        }
        while (v354);
      }
      else
      {
        v360 = 0;
        do
        {
          v361 = 8 * v360;
          *(double *)&v355[v361] = *(double *)&v355[8 * v360] * (1.0 / v335);
          *(double *)&v359[v361] = (double)(unint64_t)++v360 * v357;
        }
        while (v354 != v360);
      }
    }
    v369 = *(_QWORD **)(v1238 + 352);
    *(_QWORD *)(v1238 + 352) = 0;
    if (v369 == v1199)
    {
      v370 = 4;
      v369 = v1199;
    }
    else
    {
      if (!v369)
        goto LABEL_434;
      v370 = 5;
    }
    (*(void (**)(void))(*v369 + 8 * v370))();
LABEL_434:
    if (v1310)
    {
      v371 = v1238;
      if (v1310 == buf)
      {
        *(_QWORD *)(v1238 + 352) = v1199;
        (*((void (**)(std::locale *, _QWORD *))buf[0].__locale_ + 3))(buf, v1199);
      }
      else
      {
        *(_QWORD *)(v1238 + 352) = v1310;
        v1310 = 0;
      }
    }
    else
    {
      v371 = v1238;
      *(_QWORD *)(v1238 + 352) = 0;
    }
    *(_OWORD *)(v371 + 360) = *(_OWORD *)v1311;
    *(_QWORD *)(v371 + 376) = *(_QWORD *)&v1311[16];
    v372 = *(void **)(v371 + 384);
    if (v372)
    {
      *(_QWORD *)(v371 + 392) = v372;
      operator delete(v372);
      *v1193 = 0;
      v1193[1] = 0;
      v1193[2] = 0;
    }
    *(_OWORD *)(v371 + 384) = *(_OWORD *)v1312;
    *(void **)(v371 + 400) = v1312[2];
    memset(v1312, 0, 24);
    v373 = (_OWORD *)(v371 + 408);
    v374 = *(void **)(v371 + 408);
    v1198 = (_QWORD *)(v371 + 408);
    if (v374)
    {
      *(_QWORD *)(v371 + 416) = v374;
      operator delete(v374);
      v373 = (_OWORD *)(v371 + 408);
      *v1198 = 0;
      *(_QWORD *)(v371 + 416) = 0;
      *(_QWORD *)(v371 + 424) = 0;
      v374 = v1312[0];
    }
    *v373 = *(_OWORD *)&v1312[3];
    *(void **)(v371 + 424) = v1312[5];
    memset(&v1312[3], 0, 24);
    *(_BYTE *)(v371 + 432) = v1313;
    if (v374)
    {
      v1312[1] = v374;
      operator delete(v374);
    }
    v375 = v1310;
    if (v1310 == buf)
    {
      v376 = 4;
      v375 = buf;
    }
    else
    {
      if (!v1310)
        goto LABEL_450;
      v376 = 5;
    }
    (*((void (**)(void))v375->__locale_ + v376))();
LABEL_450:
    v1272 = *(double *)(v1238 + 272);
    v1267 = *(double *)(v1238 + 280);
    v1263 = *(double *)(v1238 + 288);
    v1258 = *(double *)(v1238 + 296);
    v377 = *(double *)(v1238 + 376);
    v379 = *(_QWORD *)(v1238 + 504);
    v378 = *(_QWORD *)(v1238 + 512);
    *(_QWORD *)__src = 0;
    v380 = v378 - v379;
    if (!v380)
    {
      v383 = 0;
      goto LABEL_463;
    }
    v381 = 0x367D6E020E64C149 * (v380 >> 3);
    if (v381 >> 61)
      abort();
    v382 = (double *)operator new(0xB3EB701073260A48 * (v380 >> 3));
    v383 = v382;
    v384 = (v381 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v385 = (char *)v382;
    if (v384 >= 0x13)
    {
      if (v382 >= (double *)&__src[8] || (v385 = (char *)v382, &v382[v381] <= (double *)__src))
      {
        v386 = 0;
        v387 = v384 + 1;
        v388 = v387 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v389 = (char *)&v382[v386];
          v386 += 4;
          *(_OWORD *)v389 = 0uLL;
          *((_OWORD *)v389 + 1) = 0uLL;
        }
        while (v388 != v386);
        if (v387 == v388)
        {
LABEL_463:
          v392 = v391;
          v394 = v393;
          v396 = v395;
          v397 = *(_QWORD *)(v1238 + 368);
          v398 = (double)v397;
          v399 = *(_QWORD *)(v1238 + 352);
          if ((int)v397 - 1 < (int)v397)
            LODWORD(v397) = v397 - 1;
          v400 = (1.0 - (double)(int)v397 / v398) / ((double)((int)v397 + 1) / v398 - (double)(int)v397 / v398);
          LODWORD(v1366[0]) = v397;
          *(double *)__src = v400;
          if (!v399)
            goto LABEL_1407;
          v401 = (*(double (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v399 + 48))(v399, v1366, __src);
          v402 = *(double *)v406.i64;
          v404 = v403;
          v405 = *(_QWORD *)(v1238 + 504);
          v412.i32[0] = *(_DWORD *)(v405 + 32);
          v406.i32[0] = *(_DWORD *)(v405 + 36);
          LODWORD(v403) = *(_DWORD *)(v405 + 40);
          v407 = *(float *)(v405 + 44);
          v408 = *(double *)(v1238 + 272);
          v409 = *(double *)(v1238 + 280);
          v410 = *(double *)(v1238 + 288);
          v411 = *(double *)(v1238 + 296);
          *(double *)v412.i64 = ((float)((float)((float)(*(float *)v406.i32 * v410) + (float)(*(float *)v412.i32 * v411))
                                       - (float)((float)(v407 * v408) + (float)(*(float *)&v403 * v409)))
                               * (float)((float)((float)((float)(*(float *)v412.i32 * v408)
                                                       + (float)(*(float *)v406.i32 * v409))
                                               + (float)(*(float *)&v403 * v410))
                                       + (float)(v407 * v411))
                               + (float)((float)((float)(*(float *)v406.i32 * v408) + (float)(v407 * v410))
                                       - (float)((float)(*(float *)v412.i32 * v409) + (float)(*(float *)&v403 * v411)))
                               * (float)((float)((float)(v407 * v409) + (float)(*(float *)v412.i32 * v410))
                                       - (float)((float)(*(float *)&v403 * v408) + (float)(*(float *)v406.i32 * v411))))
                              * -2.0;
          if (fabs(*(double *)v412.i64) >= 1.0)
          {
            v406.i64[0] = 0x3FF921FB54442D18;
            v414.f64[0] = NAN;
            v414.f64[1] = NAN;
            *(_QWORD *)&v413 = vbslq_s8((int8x16_t)vnegq_f64(v414), v406, v412).u64[0];
          }
          else
          {
            v413 = asin(*(long double *)v412.i64);
          }
          v1218 = v413;
          v1287 = v396;
          v415 = *(_QWORD *)(v1238 + 512);
          memset(buf, 0, sizeof(buf));
          v416 = v415 - v405;
          v417 = v416 / 1992;
          v1279 = v377;
          if (v416)
          {
            if (v417 >> 60)
              abort();
            v418 = v394;
            v419 = v392;
            v420 = (double *)operator new(16 * v417);
            v421 = v401;
            v422 = 1.0;
            buf[0].__locale_ = (std::locale::__imp *)v420;
            buf[2].__locale_ = (std::locale::__imp *)&v420[2 * v417];
            bzero(v420, 16 * v417);
            buf[1].__locale_ = (std::locale::__imp *)&v420[2 * v417];
            v423 = (char *)operator new(16 * v417);
            v424 = v402;
            v1204 = &v420[2 * v417];
            v1378[0] = v423;
            v1378[2] = &v423[16 * v417];
            bzero(v423, 16 * v417);
            v1378[1] = &v423[16 * v417];
          }
          else
          {
            v418 = v394;
            v419 = v392;
            v421 = v401;
            v422 = 1.0;
            v424 = v402;
            v1204 = 0;
            v423 = 0;
            v420 = 0;
            memset(v1378, 0, 24);
          }
          v425 = 0.0;
          if (v417 >= 2)
          {
            v426 = v422 / sqrt(v419 * v419 + v418 * v418 + v1287 * v1287);
            v1245 = v421 + v426 * v419;
            v1240 = v424 + v426 * v418;
            v1235 = v404 + v426 * v1287;
            v1213 = fmax(v1279 + -100.0, 0.0);
            v1209 = 1.0 / (v1279 - v1213);
            v427 = 1;
            v428 = -2.0;
            v429.f64[0] = NAN;
            v429.f64[1] = NAN;
            v1222 = (int8x16_t)vnegq_f64(v429);
            do
            {
              v433 = 0;
              v1288 = (double)v427 * (1.0 / (double)(v417 - 1));
              v434 = (double *)(v405 + 1992 * v427 + 8);
              do
              {
                v435 = v425 / *(double *)(v1238 + 376);
                v436 = 0.0;
                if (v435 > 0.0)
                {
                  v436 = 1.0;
                  if (v435 < 1.0)
                  {
                    v437 = *(double **)(v1238 + 384);
                    v438 = *(double **)(v1238 + 392);
                    if (v438 != v437)
                    {
                      v439 = v438 - v437;
                      v440 = *(double **)(v1238 + 384);
                      do
                      {
                        v441 = v439 >> 1;
                        v442 = &v440[v439 >> 1];
                        v444 = *v442;
                        v443 = v442 + 1;
                        v439 += ~(v439 >> 1);
                        if (v444 > v435)
                          v439 = v441;
                        else
                          v440 = v443;
                      }
                      while (v439);
                      if (v438 != v440)
                      {
                        v445 = v440 - v437;
                        if (v445 <= 1)
                          v445 = 1;
                        v446 = v445;
                        v447 = (v435 - v437[v446 - 1]) / (v437[v446] - v437[v446 - 1]);
                        v436 = fmax(fmin(*(double *)(*v1198 + v446 * 8 - 8)+ (*(double *)(*v1198 + v446 * 8) - *(double *)(*v1198 + v446 * 8 - 8)) * v447, 1.0), 0.0);
                      }
                    }
                  }
                }
                v448 = *(_QWORD *)(v1238 + 368);
                v449 = (double)v448;
                v450 = (int)(v436 * (double)v448);
                v451 = *(_QWORD *)(v1238 + 352);
                v452 = v448 - 1;
                if (v452 >= v450)
                  v452 = v450;
                v453 = (v436 - (double)v452 / v449) / ((double)(v452 + 1) / v449 - (double)v452 / v449);
                LODWORD(v1366[0]) = v452;
                *(double *)__src = v453;
                if (!v451)
                  goto LABEL_1407;
                v454 = *v434
                     - (*(double (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v451 + 48))(v451, v1366, __src);
                v456 = v434[1] - v455;
                v458 = v434[2] - v457;
                if (v454 * v454 + v456 * v456 + v458 * v458 < 0.04)
                  break;
                v462 = (v459 * v456 + v460 * v458 + v461 * v454) / sqrt(v461 * v461 + v459 * v459 + v460 * v460);
                if (fabs(v462) < 0.1)
                  break;
                v425 = v462 + v425;
                ++v433;
              }
              while (v433 != 30);
              v383[v427] = v425;
              *(double *)v476.i64 = v1245 - *(double *)v476.i64;
              *(double *)v470.i64 = v1240 - *(double *)v470.i64;
              v464 = v1235 - v463;
              v465 = 1.0
                   / sqrt(*(double *)v476.i64 * *(double *)v476.i64+ *(double *)v470.i64 * *(double *)v470.i64+ v464 * v464);
              *(double *)v470.i64 = v465 * *(double *)v470.i64;
              *(double *)v476.i64 = -(*(double *)v476.i64 * v465);
              v466 = -(v464 * v465);
              v467 = *(double *)v470.i64 * *(double *)v470.i64 + *(double *)v476.i64 * *(double *)v476.i64;
              v468 = sqrt(v467 + v466 * v466) + v466;
              v469 = 1.0 / sqrt(v467 + v468 * v468);
              *(double *)v470.i64 = v469 * *(double *)v470.i64;
              *(double *)v476.i64 = v469 * *(double *)v476.i64;
              v471 = v469 * v468;
              v472 = *(double *)v476.i64 * v1263 - (v471 * v1272 - *(double *)v470.i64 * v1258);
              v473 = *(double *)v476.i64 * v1258 - (*(double *)v470.i64 * v1263 - v471 * -v1267);
              v474 = *(double *)v470.i64 * v1267 - (v471 * v1263 - *(double *)v476.i64 * -v1272);
              v475 = *(double *)v470.i64 * v1272 + *(double *)v476.i64 * v1267 + v471 * v1258;
              *(double *)v476.i64 = -(v475 * v472 - v474 * v473) * v428;
              if (fabs(*(double *)v476.i64) >= 1.0)
              {
                v470.i64[0] = 0x3FF921FB54442D18;
                *(_QWORD *)&v477 = vbslq_s8(v1222, v470, v476).u64[0];
              }
              else
              {
                v477 = asin(*(long double *)v476.i64);
              }
              v1280 = v477;
              v478 = atan2(v474 * v472 + v475 * v473 + v474 * v472 + v475 * v473, (v472 * v472 + v473 * v473) * v428 + 1.0);
              if (v425 < 20.0)
              {
                v479 = fmin(fmax(v425 * 0.05, 0.0), 1.0);
                v478 = v478 * v479;
                v1280 = v1280 * v479;
              }
              if (*(_BYTE *)(v1238 + 216))
              {
                v483 = 1.0 / sqrt(v480 * v480 + v481 * v481 + v482 * v482);
                v484 = v483 * v480;
                v485 = v483 * v481;
                v486 = v483 * v482;
                v487 = *(double *)(v1238 + 224) - v480;
                v488 = *(double *)(v1238 + 232) - v481;
                v489 = *(double *)(v1238 + 240) - v482;
                v490 = 1.0 / sqrt(v487 * v487 + v488 * v488 + v489 * v489);
                v491 = -(v487 * v490);
                v492 = -(v488 * v490);
                v493 = -(v489 * v490);
                v494 = -(v492 * v486 - v493 * v485);
                v495 = -(v493 * v484 - v491 * v486);
                v496 = -(v491 * v485 - v492 * v484);
                v497 = 1.0 / sqrt(v494 * v494 + v495 * v495 + v496 * v496);
                *(double *)__src = v497 * v494;
                *(double *)&__src[8] = v497 * v495;
                *(double *)&__src[16] = v497 * v496;
                *(double *)&__src[24] = -(v497 * v495 * v493 - v497 * v496 * v492);
                *(double *)&v1415 = -(v497 * v496 * v491 - v497 * v494 * v493);
                *((double *)&v1415 + 1) = -(v497 * v494 * v492 - v497 * v495 * v491);
                v1416 = v491;
                v1417 = v492;
                *(double *)v1418 = v493;
                gm::quaternionFromRotationMatrix<double>((double *)v1366, (double *)__src);
                v499 = *(double *)v1366 * v1258
                     + *(double *)&v1366[1] * v1263
                     - (*(double *)&v1367 * v1267
                      + *((double *)&v1367 + 1) * v1272);
                v500 = *(double *)&v1366[1] * v1258
                     + *(double *)&v1367 * v1272
                     - (*(double *)v1366 * v1263
                      + *((double *)&v1367 + 1) * v1267);
                v501 = *(double *)v1366 * v1267
                     + *(double *)&v1367 * v1258
                     - (*(double *)&v1366[1] * v1272
                      + *((double *)&v1367 + 1) * v1263);
                v502 = *(double *)v1366 * v1272
                     + *(double *)&v1366[1] * v1267
                     + *(double *)&v1367 * v1263
                     + *((double *)&v1367 + 1) * v1258;
                *(double *)v503.i64 = -(v499 * v502 - v501 * v500) * v428;
                if (fabs(*(double *)v503.i64) >= 1.0)
                {
                  v498.i64[0] = 0x3FF921FB54442D18;
                  *(_QWORD *)&v504 = vbslq_s8(v1222, v498, v503).u64[0];
                }
                else
                {
                  v504 = asin(*(long double *)v503.i64);
                }
                v1254 = v504;
                v505 = fmin(fmax((v425 - v1213) * v1209, 0.0), 1.0);
                v478 = v478
                     + (atan2(v502 * v500 + v499 * v501 + v502 * v500 + v499 * v501, (v499 * v499 + v500 * v500) * -2.0 + 1.0)- v478)* v505;
                v428 = -2.0;
                v430 = v1280 + (fmin(fmax(v1254 + v1218, -0.3), 1.0) - (v1218 + v1280)) * v505;
              }
              else
              {
                v430 = v1280;
              }
              v431 = &v420[2 * v427];
              *v431 = v1288;
              v431[1] = v478;
              v432 = (double *)&v423[16 * v427];
              *v432 = v1288;
              v432[1] = v430;
              ++v427;
              v405 = *(_QWORD *)(v1238 + 504);
            }
            while (v427 < 0x367D6E020E64C149 * ((*(_QWORD *)(v1238 + 512) - v405) >> 3));
          }
          v506 = ((char *)v1204 - (char *)v420) >> 4;
          if ((unint64_t)(v506 - 1) >= 2)
          {
            v507 = v420[3];
            v508 = v420[1];
            v509 = v506 - 2;
            v510 = v420 + 5;
            do
            {
              v511 = *v510;
              v508 = v507 + (v507 + (*v510 + v508) * -0.5) * -0.9;
              *(v510 - 2) = v508;
              v510 += 2;
              v507 = v511;
              --v509;
            }
            while (v509);
          }
          v512 = v1197;
          v513 = *(_QWORD **)(v1238 + 464);
          *(_QWORD *)(v1238 + 464) = 0;
          if (v513 == v1195)
          {
            v514 = 4;
            v513 = v1195;
          }
          else
          {
            if (!v513)
              goto LABEL_516;
            v514 = 5;
          }
          (*(void (**)(void))(*v513 + 8 * v514))();
LABEL_516:
          if (!*(_QWORD *)&__src[24])
          {
            *(_QWORD *)(v1238 + 464) = 0;
            goto LABEL_525;
          }
          if (*(_BYTE **)&__src[24] != __src)
          {
            *(_QWORD *)(v1238 + 464) = *(_QWORD *)&__src[24];
            goto LABEL_525;
          }
          *(_QWORD *)(v1238 + 464) = v1195;
          (*(void (**)(_BYTE *))(*(_QWORD *)__src + 24))(__src);
          v515 = *(_QWORD **)&__src[24];
          if (*(_BYTE **)&__src[24] == __src)
          {
            v516 = 4;
            v515 = __src;
          }
          else
          {
            if (!*(_QWORD *)&__src[24])
              goto LABEL_525;
            v516 = 5;
          }
          (*(void (**)(void))(*v515 + 8 * v516))();
LABEL_525:
          v517 = *v1208;
          *v1208 = 0;
          if (v517 == v1196)
          {
            v518 = 4;
            v517 = v1196;
          }
          else
          {
            if (!v517)
              goto LABEL_530;
            v518 = 5;
          }
          (*(void (**)(void))(*v517 + 8 * v518))();
LABEL_530:
          if (!*(_QWORD *)&__src[24])
          {
            *v1208 = 0;
            goto LABEL_539;
          }
          if (*(_BYTE **)&__src[24] != __src)
          {
            *v1208 = *(_QWORD **)&__src[24];
            goto LABEL_539;
          }
          *v1208 = v1196;
          (*(void (**)(_BYTE *))(*(_QWORD *)__src + 24))(__src);
          v519 = *(_QWORD **)&__src[24];
          if (*(_BYTE **)&__src[24] == __src)
          {
            v520 = 4;
            v519 = __src;
          }
          else
          {
            if (!*(_QWORD *)&__src[24])
              goto LABEL_539;
            v520 = 5;
          }
          (*(void (**)(void))(*v519 + 8 * v520))();
LABEL_539:
          v522 = *(_QWORD *)(v1238 + 504);
          v521 = *(_QWORD *)(v1238 + 512);
          if ((unint64_t)(0x367D6E020E64C149 * ((v521 - v522) >> 3)) >= 2)
          {
            v523 = *(_QWORD *)(v1238 + 320);
            for (i = 1; i < 0x367D6E020E64C149 * ((v521 - v522) >> 3); ++i)
            {
              v525 = vcvt_f32_f64(vmulq_n_f64(*(float64x2_t *)&v383[i - 1], 1.0 / v425));
              v1289 = v525;
              if (v523)
              {
                v526 = *(float **)(v1238 + 304);
                v527 = v512;
                if (v526 != v512)
                {
                  v528 = 0;
                  v529 = *(float **)(v1238 + 304);
                  do
                  {
                    v530 = (float *)*((_QWORD *)v529 + 1);
                    if (v530)
                    {
                      do
                      {
                        v531 = v530;
                        v530 = *(float **)v530;
                      }
                      while (v530);
                    }
                    else
                    {
                      do
                      {
                        v531 = (float *)*((_QWORD *)v529 + 2);
                        _ZF = *(_QWORD *)v531 == (_QWORD)v529;
                        v529 = v531;
                      }
                      while (!_ZF);
                    }
                    ++v528;
                    v529 = v531;
                  }
                  while (v531 != v512);
                  v527 = *(float **)(v1238 + 304);
                  do
                  {
                    v532 = v528 >> 1;
                    v533 = v527;
                    if (v528 != 1)
                    {
                      v535 = v528 >> 1;
                      v536 = v527;
                      do
                      {
                        v537 = (float *)*((_QWORD *)v536 + 1);
                        if (v537)
                        {
                          do
                          {
                            v533 = v537;
                            v537 = *(float **)v537;
                          }
                          while (v537);
                        }
                        else
                        {
                          do
                          {
                            v533 = (float *)*((_QWORD *)v536 + 2);
                            _ZF = *(_QWORD *)v533 == (_QWORD)v536;
                            v536 = v533;
                          }
                          while (!_ZF);
                        }
                        v536 = v533;
                        v204 = v535-- <= 1;
                      }
                      while (!v204);
                    }
                    if (v533[9] < v525.f32[1])
                    {
                      v534 = (float *)*((_QWORD *)v533 + 1);
                      if (v534)
                      {
                        do
                        {
                          v527 = v534;
                          v534 = *(float **)v534;
                        }
                        while (v534);
                      }
                      else
                      {
                        do
                        {
                          v527 = (float *)*((_QWORD *)v533 + 2);
                          _ZF = *(_QWORD *)v527 == (_QWORD)v533;
                          v533 = v527;
                        }
                        while (!_ZF);
                      }
                      v532 = v528 + ~v532;
                    }
                    v528 = v532;
                  }
                  while (v532);
                  if (v527 != v512 && v527[8] < v525.f32[1])
                    continue;
                }
                if (v527 != v526)
                {
                  v538 = *(float **)v527;
                  if (*(_QWORD *)v527)
                  {
                    do
                    {
                      v539 = v538;
                      v538 = (float *)*((_QWORD *)v538 + 1);
                    }
                    while (v538);
                  }
                  else
                  {
                    do
                    {
                      v539 = (float *)*((_QWORD *)v527 + 2);
                      _ZF = *(_QWORD *)v539 == (_QWORD)v527;
                      v527 = v539;
                    }
                    while (_ZF);
                  }
                  if (v539[9] > v525.f32[0])
                    continue;
                }
                v540 = *(float **)v512;
                v541 = (uint64_t **)v512;
                if (*(_QWORD *)v512)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v512 = v540;
                      v542 = v540[9];
                      if (v542 <= v525.f32[1])
                        break;
                      v540 = *(float **)v540;
                      v541 = (uint64_t **)v512;
                      if (!*(_QWORD *)v512)
                        goto LABEL_597;
                    }
                    if (v542 >= v525.f32[1])
                      goto LABEL_542;
                    v540 = (float *)*((_QWORD *)v540 + 1);
                    if (!v540)
                    {
                      v541 = (uint64_t **)(v512 + 2);
                      break;
                    }
                  }
                }
              }
              else
              {
                v543 = *(float **)v512;
                v541 = (uint64_t **)v512;
                if (*(_QWORD *)v512)
                {
                  do
                  {
                    while (1)
                    {
                      v512 = v543;
                      v544 = v543[9];
                      if (v544 <= v525.f32[1])
                        break;
                      v543 = *(float **)v543;
                      v541 = (uint64_t **)v512;
                      if (!*(_QWORD *)v512)
                        goto LABEL_597;
                    }
                    if (v544 >= v525.f32[1])
                    {
                      v523 = 0;
                      goto LABEL_542;
                    }
                    v543 = (float *)*((_QWORD *)v543 + 1);
                  }
                  while (v543);
                  v541 = (uint64_t **)(v512 + 2);
                }
              }
LABEL_597:
              v545 = (uint64_t *)operator new(0x30uLL);
              v545[4] = (uint64_t)v1289;
              v545[5] = i - 1;
              *v545 = 0;
              v545[1] = 0;
              v545[2] = (uint64_t)v512;
              *v541 = v545;
              v546 = **(_QWORD **)(v1238 + 304);
              if (v546)
              {
                *(_QWORD *)(v1238 + 304) = v546;
                v545 = *v541;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1238 + 312), v545);
              v523 = *(_QWORD *)(v1238 + 320) + 1;
              *(_QWORD *)(v1238 + 320) = v523;
              v522 = *(_QWORD *)(v1238 + 504);
              v521 = *(_QWORD *)(v1238 + 512);
LABEL_542:
              v512 = v1197;
            }
          }
          if (v423)
          {
            v1378[1] = v423;
            operator delete(v423);
          }
          if (v420)
            operator delete(v420);
          if (v383)
            operator delete(v383);
          operator delete(__p);
          v547 = *(_QWORD *)(v1238 + 504);
          v1290 = *(_QWORD *)(v1238 + 512);
          if (v547 != v1290)
          {
            while (1)
            {
              v548 = *(char **)(v547 + 1912);
              *(_QWORD *)(v547 + 1920) = v548;
              v550 = *(_QWORD *)(v547 + 88);
              v549 = *(_QWORD *)(v547 + 96);
              if (v549 != v550)
                break;
LABEL_607:
              v547 += 1992;
              if (v547 == v1290)
                goto LABEL_629;
            }
            v551 = 0;
            v552 = *(_QWORD *)(v547 + 1936);
            v553 = v548;
            while (1)
            {
              v554 = (v553 - v548) >> 3;
              if (v552 < v554 + 1)
                break;
LABEL_611:
              *v553 = v551;
              *(_WORD *)(v553 + 1) = 7;
              *((_DWORD *)v553 + 1) = 0;
              v553 += 8;
              *(_QWORD *)(v547 + 1920) = v553;
              if (++v551 >= 0x8E38E38E38E38E39 * ((v549 - v550) >> 5))
                goto LABEL_607;
            }
            v555 = *(char **)(v547 + 1928);
            v556 = (1 << -(char)__clz(v552 + 1));
            if (v552 >= 0xFFFFFFFFFFFFFFFELL)
              v556 = 1;
            if (v556 <= v554 + 1)
              v552 = v554 + 1;
            else
              v552 = v556;
            v557 = (char *)malloc_type_malloc(8 * v552, 0x100004087EB8081uLL);
            v558 = v557;
            v559 = *(uint64_t **)(v547 + 1912);
            v560 = *(char **)(v547 + 1920);
            if (v559 != (uint64_t *)v560)
            {
              v561 = v560 - (char *)v559 - 8;
              if (v561 < 0x18)
              {
                v562 = v557;
              }
              else
              {
                v562 = v557;
                if ((unint64_t)(v557 - (char *)v559) >= 0x20)
                {
                  v563 = (v561 >> 3) + 1;
                  v564 = 8 * (v563 & 0x3FFFFFFFFFFFFFFCLL);
                  v562 = &v557[v564];
                  v565 = (__int128 *)(v559 + 2);
                  v566 = v557 + 16;
                  v567 = v563 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v568 = *v565;
                    *(v566 - 1) = *(v565 - 1);
                    *v566 = v568;
                    v565 += 2;
                    v566 += 2;
                    v567 -= 4;
                  }
                  while (v567);
                  if (v563 == (v563 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_627;
                  v559 = (uint64_t *)((char *)v559 + v564);
                }
              }
              do
              {
                v569 = *v559++;
                *(_QWORD *)v562 = v569;
                v562 += 8;
              }
              while (v559 != (uint64_t *)v560);
            }
LABEL_627:
            if (v548 != v555)
              free(*(void **)(v547 + 1912));
            *(_QWORD *)(v547 + 1912) = v558;
            v553 = &v558[8 * v554];
            *(_QWORD *)(v547 + 1936) = v552;
            v548 = v558;
            v550 = *(_QWORD *)(v547 + 88);
            v549 = *(_QWORD *)(v547 + 96);
            goto LABEL_611;
          }
LABEL_629:
          v570 = *(float **)(v1238 + 304);
          if (v570 != v1197)
          {
            v571 = 1.0;
            *(int64x2_t *)v1214 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            *(int64x2_t *)v1219 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
LABEL_632:
            v572 = 0;
            v1229 = v570;
            while (1)
            {
              v1233 = (float)v572 * 0.11111;
              v573 = v570[8] + (float)(v570[9] - v570[8]) * v1233;
              v574 = v573;
              v575 = 0.0;
              if (v573 > 0.0)
              {
                v575 = 1.0;
                if (v573 < v571)
                {
                  v576 = *(double **)(v1238 + 384);
                  v577 = *(double **)(v1238 + 392);
                  if (v577 != v576)
                  {
                    v578 = v577 - v576;
                    v579 = *(double **)(v1238 + 384);
                    do
                    {
                      v580 = v578 >> 1;
                      v581 = &v579[v578 >> 1];
                      v583 = *v581;
                      v582 = v581 + 1;
                      v578 += ~(v578 >> 1);
                      if (v583 > v574)
                        v578 = v580;
                      else
                        v579 = v582;
                    }
                    while (v578);
                    if (v577 != v579)
                    {
                      v584 = v579 - v576;
                      if (v584 <= 1)
                        v584 = 1;
                      v585 = v584;
                      v586 = (v574 - v576[v585 - 1]) / (v576[v585] - v576[v585 - 1]);
                      v575 = fmax(fmin(*(double *)(*v1198 + v585 * 8 - 8)+ (*(double *)(*v1198 + v585 * 8) - *(double *)(*v1198 + v585 * 8 - 8)) * v586, 1.0), 0.0);
                    }
                  }
                }
              }
              v587 = *(_QWORD *)(v1238 + 368);
              v588 = (double)v587;
              v589 = (int)(v575 * (double)v587);
              v590 = *(_QWORD *)(v1238 + 352);
              v591 = v587 - 1;
              if (v591 >= v589)
                v591 = v589;
              v592 = (v575 - (double)v591 / v588) / ((double)(v591 + 1) / v588 - (double)v591 / v588);
              LODWORD(v1366[0]) = v591;
              *(double *)__src = v592;
              if (!v590)
                break;
              (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v590 + 48))(v590, v1366, __src);
              v596 = *(_QWORD *)(v1238 + 464);
              *(double *)__src = v574;
              if (!v596)
                break;
              v597 = v593;
              v598 = v594;
              v599 = v595;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v596 + 48))(v596, __src);
              v601 = *v1208;
              *(double *)__src = v574;
              if (!v601)
                break;
              v602 = v600;
              v603 = (*(double (**)(_QWORD *, _BYTE *))(*v601 + 48))(v601, __src);
              v1210 = v572;
              v604 = __sincos_stret(v602 * 0.5);
              v605 = __sincos_stret(v603 * 0.5);
              v606 = -(v604.__sinval * v605.__sinval);
              v608 = *(double *)(v1238 + 288);
              v607 = *(double *)(v1238 + 296);
              v609 = *(double *)(v1238 + 272);
              v610 = *(double *)(v1238 + 280);
              v1303[0] = v597;
              v1303[1] = v598;
              v1303[2] = v599;
              v1303[3] = v607 * (v605.__sinval * v604.__cosval)
                       + v609 * (v605.__cosval * v604.__cosval)
                       + v610 * v606
                       - v608 * (v605.__cosval * v604.__sinval);
              v1303[4] = v610 * (v605.__cosval * v604.__cosval)
                       - (v609 * v606
                        - v607 * (v605.__cosval * v604.__sinval))
                       + v608 * (v605.__sinval * v604.__cosval);
              v1303[5] = v607 * v606
                       + v609 * (v605.__cosval * v604.__sinval)
                       - v610 * (v605.__sinval * v604.__cosval)
                       + v608 * (v605.__cosval * v604.__cosval);
              v1303[6] = -(v609 * (v605.__sinval * v604.__cosval)
                         + v610 * (v605.__cosval * v604.__sinval)
                         + v608 * v606
                         - v607 * (v605.__cosval * v604.__cosval));
              gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)&v1298, v1303);
              v611 = *(_QWORD *)(v1207 + 16);
              v612 = *(_QWORD *)(v611 + 472);
              v613 = *(_QWORD *)(v611 + 480);
              v614 = v1298;
              v1378[1] = v1298;
              *(_OWORD *)v1281 = v1299;
              *(_OWORD *)v1291 = v1300;
              *(_OWORD *)&v1378[2] = v1299;
              v1379 = v1300;
              v615 = v1301;
              v616 = v1302;
              v1380 = v1301;
              v1381 = v1302;
              v1382 = 0;
              v1383 = 0;
              v1385 = 0;
              v1386 = 0;
              v1384 = 0;
              v1387 = *(_OWORD *)v1219;
              v1388 = *(_OWORD *)v1214;
              v1389 = *(_OWORD *)v1219;
              v1390 = *(_OWORD *)v1214;
              v1391 = *(_OWORD *)v1219;
              v1392 = *(_OWORD *)v1214;
              v1393 = *(_OWORD *)v1219;
              v1394 = *(_OWORD *)v1214;
              v1395 = *(_OWORD *)v1219;
              v1396 = *(_OWORD *)v1214;
              v1397 = *(_OWORD *)v1219;
              v1398 = *(_OWORD *)v1214;
              v617 = 1;
              v1399 = 1;
              v1400 = 0;
              v1401 = 0;
              *(_OWORD *)v1273 = *(_OWORD *)(v611 + 384);
              v1402 = *(_OWORD *)(v611 + 368);
              *(_OWORD *)v1268 = v1402;
              v1403 = *(_OWORD *)v1273;
              v1407 = *(_DWORD *)(v611 + 448);
              v1406 = *(_OWORD *)(v611 + 432);
              v1405 = *(_OWORD *)(v611 + 416);
              v1404 = *(_OWORD *)(v611 + 400);
              v618 = *(_QWORD *)(v611 + 464);
              v1408 = *(double *)(v611 + 456);
              v619 = v1408;
              v1409 = v618;
              v1410 = v612;
              v1411 = v613;
              v1412 = *(_QWORD *)(v611 + 488);
              gdc::CameraView::ecefCameraView((gdc::CameraView *)v1366, (const Camera *)v1378);
              v620 = tan(v619 * 0.5);
              v621 = atan(v620 * 0.330000013);
              v1330[1] = v614;
              v1331 = *(_OWORD *)v1281;
              v1332 = *(_OWORD *)v1291;
              v1333 = v615;
              v1334 = v616;
              v1335 = 0;
              v1336 = 0;
              v1338 = 0;
              v1339 = 0;
              v1337 = 0;
              v1340 = *(_OWORD *)v1219;
              v1341 = *(_OWORD *)v1214;
              v1342 = *(_OWORD *)v1219;
              v1343 = *(_OWORD *)v1214;
              v1344 = *(_OWORD *)v1219;
              v1345 = *(_OWORD *)v1214;
              v1346 = *(_OWORD *)v1219;
              v1347 = *(_OWORD *)v1214;
              v1348 = *(_OWORD *)v1219;
              v1349 = *(_OWORD *)v1214;
              v1350 = *(_OWORD *)v1219;
              v1351 = *(_OWORD *)v1214;
              v1352 = 1;
              v1353 = 0;
              v1354 = 0;
              v1355 = *(_OWORD *)v1268;
              v1356 = *(_OWORD *)v1273;
              v1357 = v1404;
              v1358 = v1405;
              v1359 = v1406;
              v1360 = v1407;
              v1361 = v621 + v621;
              v1362 = v618;
              v1363 = v612;
              v1364 = v613;
              v1365 = 0;
              gdc::CameraView::ecefCameraView((gdc::CameraView *)buf, (const Camera *)v1330);
              v622 = 0;
              v623 = 0;
              v571 = 1.0;
              do
              {
                v624 = *((_QWORD *)v570 + 5);
                v625 = *(_QWORD *)(v1238 + 504);
                if (v1233 < 0.99 && (v622 & 1) != 0)
                  break;
                v1236 = v617;
                v626 = v624 + v623;
                v627 = v625 + 1992 * (v624 + v623);
                if (v624 + v623 == 0x367D6E020E64C149 * ((*(_QWORD *)(v1238 + 512) - v625) >> 3) - 1
                  || (*(char *)(v627 + 1860) & 0x80000000) == 0)
                {
                  v659 = v625 + 1992 * v626;
                  v660 = *(float **)(v659 + 1912);
                  v661 = *(float **)(v659 + 1920);
                  if (v660 != v661)
                  {
                    v662 = *(_QWORD *)(v627 + 88);
                    v663 = v660 + 1;
                    do
                    {
                      v664 = v663 - 1;
                      if (md::mun::isPhotoVisible(&v1377, v662 + 288 * *((unsigned __int8 *)v663 - 4)))
                        *v663 = *v663 + v571;
                      ++*((_BYTE *)v663 - 2);
                      v663 += 2;
                    }
                    while (v664 + 2 != v661);
                  }
                }
                else
                {
                  *(_QWORD *)__src = &v1415;
                  *(_QWORD *)&__src[8] = &v1415;
                  *(_QWORD *)&__src[16] = &v1415;
                  *(_QWORD *)&__src[24] = 6;
                  v628 = v625 + 1992 * v626;
                  v629 = *(_QWORD *)(v628 + 1920);
                  if (v629 == *(_QWORD *)(v628 + 1912))
                  {
                    v665 = (double *)&v1415;
                    v634 = *(_QWORD *)(v628 + 1920);
                  }
                  else
                  {
                    v630 = 0;
                    v631 = (uint64_t *)(v628 + 1912);
                    v632 = (uint64_t *)(v628 + 1920);
                    v629 = *(_QWORD *)(v628 + 1912);
                    v1292 = v625 + 1992 * (v624 + v623);
                    v1282 = (uint64_t *)(v628 + 1920);
                    do
                    {
                      v635 = *(_QWORD *)(v627 + 88) + 288 * *(unsigned __int8 *)(v629 + 8 * v630);
                      v636 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 52));
                      v1308[0] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 44));
                      v1308[1] = v636;
                      v637 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 68));
                      v1308[2] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 60));
                      v1308[3] = v637;
                      v638 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 84));
                      v1308[4] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 76));
                      v1308[5] = v638;
                      v639 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 100));
                      v1308[6] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 92));
                      v1308[7] = v639;
                      v640 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 116));
                      v1308[8] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 108));
                      v1308[9] = v640;
                      v641 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 132));
                      v1308[10] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 124));
                      v1308[11] = v641;
                      v642 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 148));
                      v1308[12] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 140));
                      v1308[13] = v642;
                      v643 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 164));
                      v1308[14] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 156));
                      v1308[15] = v643;
                      v644 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 180));
                      v1308[16] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 172));
                      v1308[17] = v644;
                      v645 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 196));
                      v1308[18] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 188));
                      v1308[19] = v645;
                      v646 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 212));
                      v1308[20] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 204));
                      v1308[21] = v646;
                      v647 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 228));
                      v1308[22] = vcvtq_f64_f32(*(float32x2_t *)(v635 + 220));
                      v1308[23] = v647;
                      v1304 = *(_OWORD *)v635;
                      v647.f64[0] = *(float64_t *)(v635 + 32);
                      v1306 = vcvtq_f64_f32(*(float32x2_t *)(v635 + 24));
                      v1305 = *(_QWORD *)(v635 + 16);
                      v1307 = vcvtq_f64_f32(*(float32x2_t *)&v647.f64[0]);
                      geo::Frustum<double>::transformed(v1413[0].f64, (const double *)v1308, (uint64_t)&v1304);
                      v633 = *(char **)&__src[8];
                      v648 = *(_QWORD *)__src;
                      v649 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__src[8] - *(_QWORD *)__src) >> 7);
                      if (*(_QWORD *)&__src[24] < v649 + 1)
                      {
                        v650 = *(_QWORD *)&__src[16];
                        v651 = (1 << -(char)__clz(*(_QWORD *)&__src[24] + 1));
                        if (*(_QWORD *)&__src[24] >= 0xFFFFFFFFFFFFFFFELL)
                          v652 = 1;
                        else
                          v652 = v651;
                        if (v652 <= v649 + 1)
                          v653 = v649 + 1;
                        else
                          v653 = v652;
                        v654 = (char *)malloc_type_malloc(384 * v653, 0x10000400F47AF14uLL);
                        v655 = v654;
                        v656 = *(char **)__src;
                        v657 = *(char **)&__src[8];
                        if (*(_QWORD *)__src != *(_QWORD *)&__src[8])
                        {
                          v658 = v654;
                          do
                          {
                            memcpy(v658, v656, 0x180uLL);
                            v658 += 384;
                            v656 += 384;
                          }
                          while (v656 != v657);
                        }
                        v627 = v1292;
                        if (v648 != v650)
                          free(*(void **)__src);
                        v633 = &v655[384 * v649];
                        *(_QWORD *)__src = v655;
                        *(_QWORD *)&__src[8] = v633;
                        *(_QWORD *)&__src[24] = v653;
                        v632 = v1282;
                      }
                      memcpy(v633, v1413, 0x180uLL);
                      *(_QWORD *)&__src[8] += 384;
                      ++v630;
                      v634 = *v632;
                      v629 = *v631;
                    }
                    while (v630 < (*v632 - *v631) >> 3);
                    v665 = *(double **)__src;
                  }
                  v666 = 0;
                  v1293 = v1319;
                  v1283 = v1327;
                  v667 = v1315;
                  v668 = v1323;
                  v669 = v1321;
                  v670 = v1329;
                  v671 = v1317;
                  v672 = v1325;
                  *(_OWORD *)v1269 = v1326;
                  *(_OWORD *)v1274 = v1318;
                  v1259 = v1322;
                  v1264 = v1314;
                  v1250 = v1328;
                  v1255 = v1320;
                  v673 = (unint64_t)((v634 - v629) >> 3) <= 1 ? 1 : (v634 - v629) >> 3;
                  v1241 = v1324;
                  v1246 = v1316;
                  do
                  {
                    if (v666 == 8)
                      v675 = 0.0;
                    else
                      v675 = 0.5;
                    v674 = (double)v666 * 0.897597901;
                    v676 = __sincosf_stret(v674);
                    v677 = (float)(v676.__cosval * v675) + 0.5;
                    v678 = (float)(v676.__sinval * v675) + 0.5;
                    v571 = 1.0;
                    v679 = v677;
                    v680 = v678;
                    v681 = (v671 * (1.0 - v679) + v672 * v679) * v680
                         - ((v1283 * v679 + (1.0 - v679) * v1293) * (1.0 - v680)
                          + (v667 * (1.0 - v679) + v668 * v679) * v680
                          - (v669 * (1.0 - v679) + v670 * v679) * (1.0 - v680));
                    v1413[0] = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1269, v679), *(float64x2_t *)v1274, 1.0 - v679), 1.0 - v680), vmlaq_n_f64(vmulq_n_f64(v1264, 1.0 - v679), v1259, v679), v680);
                    v1413[1].f64[0] = (v1283 * v679 + (1.0 - v679) * v1293) * (1.0 - v680)
                                    + (v667 * (1.0 - v679) + v668 * v679) * v680;
                    v682 = vmlaq_n_f64(vmlaq_n_f64(vnegq_f64(v1413[0]), vmlaq_n_f64(vmulq_n_f64(v1255, 1.0 - v679), v1250, v679), 1.0 - v680), vmlaq_n_f64(vmulq_n_f64(v1246, 1.0 - v679), v1241, v679), v680);
                    v683 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v682, v682)) + v681 * v681);
                    *(float64x2_t *)((char *)&v1413[1] + 8) = vmulq_n_f64(v682, v683);
                    v1413[2].f64[1] = v683 * v681;
                    v684 = v665;
                    v685 = (float *)(v629 + 4);
                    v686 = v673;
                    if (v634 != v629)
                    {
                      do
                      {
                        *(_QWORD *)&v1308[0] = 0;
                        *(_QWORD *)&v1304 = 0;
                        if (geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v684, v1413[0].f64, 1u, (double *)v1308, (double *)&v1304)&& *(double *)&v1304 - *(double *)v1308 > 100.0)
                        {
                          *v685 = *v685 + 1.0;
                        }
                        ++*((_BYTE *)v685 - 2);
                        v685 += 2;
                        v684 += 48;
                        --v686;
                      }
                      while (v686);
                    }
                    ++v666;
                  }
                  while (v666 != 9);
                  if (v665 != *(double **)&__src[16])
                    free(v665);
                  v570 = v1229;
                }
                v617 = 0;
                v622 = 1;
                v623 = 1;
              }
              while ((v1236 & 1) != 0);
              v572 = v1210 + 1;
              if (v1210 == 9)
              {
                v687 = (float *)*((_QWORD *)v570 + 1);
                if (v687)
                {
                  do
                  {
                    v688 = v687;
                    v687 = *(float **)v687;
                  }
                  while (v687);
                }
                else
                {
                  do
                  {
                    v688 = (float *)*((_QWORD *)v570 + 2);
                    _ZF = *(_QWORD *)v688 == (_QWORD)v570;
                    v570 = v688;
                  }
                  while (!_ZF);
                }
                v570 = v688;
                if (v688 == v1197)
                  goto LABEL_704;
                goto LABEL_632;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_1432;
          }
LABEL_704:
          v689 = &v1368;
          v1366[0] = &v1368;
          v1366[1] = &v1368;
          *(_QWORD *)&v1367 = &v1368;
          *((_QWORD *)&v1367 + 1) = 30;
          v691 = *(_QWORD *)(v1238 + 504);
          v690 = *(_QWORD *)(v1238 + 512);
          if (v690 == v691)
          {
            v691 = *(_QWORD *)(v1238 + 512);
            v700 = v691;
            v701 = v691;
            goto LABEL_731;
          }
          v692 = 0x367D6E020E64C149 * ((v690 - v691) >> 3);
          if (v692 < 0x1F)
          {
LABEL_730:
            v701 = v690;
            bzero(v689, v692);
            v1366[1] = (char *)v689 + v692;
            v700 = v690;
            v690 = v691;
LABEL_731:
            v712 = &v1415;
            *(_QWORD *)__src = &v1415;
            *(_QWORD *)&__src[8] = &v1415;
            *(_QWORD *)&__src[16] = &v1415;
            *(_QWORD *)&__src[24] = 30;
            if (v701 == v690)
              goto LABEL_867;
            v713 = (unsigned __int128)((v700 - v691) * (__int128)0x1073260A47F7C66DLL) >> 64;
            v714 = (v713 >> 7) + ((unint64_t)v713 >> 63);
            if (v714 < 0x1F)
            {
              v726 = (v713 >> 7) + ((unint64_t)v713 >> 63);
              goto LABEL_747;
            }
            if (v714 <= 0x20)
              v715 = 32;
            else
              v715 = (v713 >> 7) + ((unint64_t)v713 >> 63);
            v712 = (__int128 *)malloc_type_malloc(4 * v715, 0x100004052888210uLL);
            v716 = *(int **)__src;
            v717 = *(int **)&__src[8];
            if (*(_QWORD *)__src != *(_QWORD *)&__src[8])
            {
              v718 = *(_QWORD *)&__src[8] - *(_QWORD *)__src - 4;
              if (v718 < 0x1C)
              {
                v719 = v712;
              }
              else
              {
                v719 = v712;
                if ((unint64_t)v712 - *(_QWORD *)__src >= 0x20)
                {
                  v720 = (v718 >> 2) + 1;
                  v721 = 4 * (v720 & 0x7FFFFFFFFFFFFFF8);
                  v719 = (__int128 *)((char *)v712 + v721);
                  v722 = (__int128 *)(*(_QWORD *)__src + 16);
                  v723 = v712 + 1;
                  v724 = v720 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v725 = *v722;
                    *(v723 - 1) = *(v722 - 1);
                    *v723 = v725;
                    v722 += 2;
                    v723 += 2;
                    v724 -= 8;
                  }
                  while (v724);
                  if (v720 == (v720 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_746;
                  v716 = (int *)((char *)v716 + v721);
                }
              }
              do
              {
                v727 = *v716++;
                *(_DWORD *)v719 = v727;
                v719 = (__int128 *)((char *)v719 + 4);
              }
              while (v716 != v717);
            }
LABEL_746:
            *(_QWORD *)__src = v712;
            *(_QWORD *)&__src[24] = v715;
            v690 = *(_QWORD *)(v1238 + 504);
            v701 = *(_QWORD *)(v1238 + 512);
            v726 = (v701 - v690) / 1992;
LABEL_747:
            v728 = 4 * v714;
            v729 = (char *)v712 + 4 * v714;
            bzero(v712, v728);
            *(_QWORD *)&__src[8] = v729;
            if (v701 == v690)
            {
              if (v726 < 4)
                goto LABEL_867;
            }
            else
            {
              v730 = *(_QWORD *)__src;
              if (v726 <= 1)
                v731 = 1;
              else
                v731 = v726;
              **(_DWORD **)__src = 0;
              if (v726 < 2)
                goto LABEL_755;
              v732 = *(double *)(v690 + 8);
              v733 = *(float64x2_t *)(v690 + 16);
              v734 = v731 - 1;
              v735 = (float *)(v730 + 4);
              v736 = (float64x2_t *)(v690 + 2008);
              v737 = 0.0;
              do
              {
                v738 = v736[-1].f64[1];
                v739 = *v736;
                v740 = vsubq_f64(*v736, v733);
                v741 = vmulq_f64(v740, v740);
                v737 = sqrt(v741.f64[0] + (v738 - v732) * (v738 - v732) + v741.f64[1]) + v737;
                *v735++ = v737;
                v736 = (float64x2_t *)((char *)v736 + 1992);
                v732 = v738;
                v733 = v739;
                --v734;
              }
              while (v734);
              if (v726 <= 3)
              {
LABEL_755:
                memset(v689, 1, v731);
                goto LABEL_867;
              }
            }
            v1379 = 0u;
            memset(v1378, 0, sizeof(v1378));
            v742 = *((_QWORD *)&v1379 + 1);
            v743 = v1379;
            v744 = (char *)v1378[1];
            v745 = *(_QWORD *)((char *)v1378[1]
                             + (((*((_QWORD *)&v1379 + 1) + (_QWORD)v1379) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (BYTE8(v1379) + v1379);
            *(_DWORD *)v745 = 1;
            *(_QWORD *)(v745 + 8) = 0;
            *((_QWORD *)&v1379 + 1) = v742 + 1;
            v746 = *(_QWORD *)&v744[(v743 >> 5) & 0x7FFFFFFFFFFFFF8];
            v747 = (char *)operator new(0x10uLL);
            v748 = 0;
            v749 = v747 + 16;
            *(_DWORD *)v747 = 0;
            *((_QWORD *)v747 + 1) = v746 + 16 * v743;
            v750 = 3.4028e38;
            v751 = v747 + 16;
            do
            {
              v752 = *(float *)v747;
              v753 = (int *)*((_QWORD *)v747 + 1);
              v754 = v749 - v747;
              if (v749 - v747 >= 17)
              {
                v755 = 0;
                v756 = v754 >> 4;
                v757 = (unint64_t)((v754 >> 4) - 2) >> 1;
                v758 = v747;
                do
                {
                  v761 = (uint64_t)&v758[16 * v755 + 16];
                  v763 = (2 * v755) | 1;
                  v755 = 2 * v755 + 2;
                  if (v755 < v756)
                  {
                    v759 = *(float *)v761;
                    if (*(float *)v761 <= *(float *)(v761 + 16))
                      v760 = -1;
                    else
                      v760 = 1;
                    if (v760 <= 0)
                    {
                      v755 = v763;
                    }
                    else
                    {
                      v759 = *(float *)(v761 + 16);
                      v761 += 16;
                    }
                  }
                  else
                  {
                    v759 = *(float *)v761;
                    v755 = v763;
                  }
                  v762 = *(_QWORD *)(v761 + 8);
                  *(float *)v758 = v759;
                  *((_QWORD *)v758 + 1) = v762;
                  v758 = (char *)v761;
                }
                while (v755 <= v757);
                if ((char *)v761 == v749 - 16)
                {
                  *(float *)v761 = v752;
                  *(_QWORD *)(v761 + 8) = v753;
                }
                else
                {
                  v764 = *((_QWORD *)v749 - 1);
                  *(_DWORD *)v761 = *((_DWORD *)v749 - 4);
                  *(_QWORD *)(v761 + 8) = v764;
                  *((float *)v749 - 4) = v752;
                  *((_QWORD *)v749 - 1) = v753;
                  v765 = v761 - (_QWORD)v747 + 16;
                  if (v765 >= 17)
                  {
                    v766 = (((unint64_t)v765 >> 4) - 2) >> 1;
                    v767 = &v747[16 * v766];
                    v768 = *(float *)v767;
                    v769 = *((_QWORD *)v767 + 1);
                    v770 = *(float *)v761;
                    v771 = *(_QWORD *)(v761 + 8);
                    v772 = *(float *)v767 <= *(float *)v761 ? -1 : 1;
                    if (v772 >= 1)
                    {
                      do
                      {
                        *(float *)v761 = v768;
                        *(_QWORD *)(v761 + 8) = v769;
                        v761 = (uint64_t)v767;
                        if (!v766)
                          break;
                        v766 = (v766 - 1) >> 1;
                        v767 = &v747[16 * v766];
                        v768 = *(float *)v767;
                        v769 = *((_QWORD *)v767 + 1);
                        v773 = *(float *)v767 <= v770 ? -1 : 1;
                      }
                      while (v773 > 0);
                      *(float *)v761 = v770;
                      *(_QWORD *)(v761 + 8) = v771;
                    }
                  }
                }
              }
              v774 = *v753;
              v776 = *(_QWORD *)(v1238 + 504);
              v775 = *(_QWORD *)(v1238 + 512);
              v777 = (v775 - v776) / 1992;
              if (v777 - 1 == v774)
              {
                v749 = v747;
                v748 = v753;
                v750 = v752;
                goto LABEL_826;
              }
              v749 -= 16;
              v778 = v774 + 1;
              if (v777 > v774 + 1)
              {
                v779 = v752 + 70.0;
                do
                {
                  v781 = *(float *)(*(_QWORD *)__src + 4 * v778) - *(float *)(*(_QWORD *)__src + 4 * *v753);
                  v782 = v779 + (float)((float)(v781 * v781) * 0.077778);
                  if (v782 > v750)
                  {
                    v780 = 0x367D6E020E64C149 * ((v775 - v776) >> 3);
                  }
                  else
                  {
                    v783 = (char *)v1378[1];
                    if (v1378[2] == v1378[1])
                      v784 = 0;
                    else
                      v784 = 32 * ((char *)v1378[2] - (char *)v1378[1]) - 1;
                    v785 = *((_QWORD *)&v1379 + 1);
                    v786 = *((_QWORD *)&v1379 + 1) + v1379;
                    if (v784 == *((_QWORD *)&v1379 + 1) + (_QWORD)v1379)
                    {
                      v783 = (char *)v1378[1];
                      v785 = *((_QWORD *)&v1379 + 1);
                      v786 = *((_QWORD *)&v1379 + 1) + v1379;
                    }
                    v787 = (v786 >> 5) & 0x7FFFFFFFFFFFFF8;
                    v788 = 16 * v786;
                    v789 = *(_QWORD *)&v783[v787] + v788;
                    *(_DWORD *)v789 = v778;
                    *(_QWORD *)(v789 + 8) = v753;
                    *((_QWORD *)&v1379 + 1) = v785 + 1;
                    v790 = *(_QWORD *)&v783[v787] + v788;
                    if (v749 >= v751)
                    {
                      v791 = (v749 - v747) >> 4;
                      v792 = v791 + 1;
                      if ((unint64_t)(v791 + 1) >> 60)
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      if ((v751 - v747) >> 3 > v792)
                        v792 = (v751 - v747) >> 3;
                      if ((unint64_t)(v751 - v747) >= 0x7FFFFFFFFFFFFFF0)
                        v793 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v793 = v792;
                      if (v793 >> 60)
                        goto LABEL_1405;
                      v794 = (char *)operator new(16 * v793);
                      v795 = &v794[16 * v791];
                      *(float *)v795 = v782;
                      *((_QWORD *)v795 + 1) = v790;
                      if (v749 == v747)
                      {
                        v797 = &v794[16 * v791];
                      }
                      else
                      {
                        v796 = &v794[16 * v791];
                        do
                        {
                          v797 = v796 - 16;
                          *((_OWORD *)v796 - 1) = *((_OWORD *)v749 - 1);
                          v749 -= 16;
                          v796 -= 16;
                        }
                        while (v749 != v747);
                      }
                      v751 = &v794[16 * v793];
                      v749 = v795 + 16;
                      if (v747)
                        operator delete(v747);
                      v747 = v797;
                    }
                    else
                    {
                      *(float *)v749 = v782;
                      *((_QWORD *)v749 + 1) = v790;
                      v749 += 16;
                    }
                    if (v749 - v747 >= 17)
                    {
                      v798 = (((unint64_t)(v749 - v747) >> 4) - 2) >> 1;
                      v799 = &v747[16 * v798];
                      v800 = v749 - 16;
                      v801 = *((float *)v749 - 4);
                      v802 = *(float *)v799;
                      v803 = *((_QWORD *)v799 + 1);
                      v804 = *((_QWORD *)v749 - 1);
                      v805 = *(float *)v799 <= v801 ? -1 : 1;
                      if (v805 >= 1)
                      {
                        do
                        {
                          *(float *)v800 = v802;
                          *((_QWORD *)v800 + 1) = v803;
                          v800 = v799;
                          if (!v798)
                            break;
                          v798 = (v798 - 1) >> 1;
                          v799 = &v747[16 * v798];
                          v802 = *(float *)v799;
                          v803 = *((_QWORD *)v799 + 1);
                          v806 = *(float *)v799 <= v801 ? -1 : 1;
                        }
                        while (v806 > 0);
                        *(float *)v800 = v801;
                        *((_QWORD *)v800 + 1) = v804;
                      }
                    }
                    v776 = *(_QWORD *)(v1238 + 504);
                    v775 = *(_QWORD *)(v1238 + 512);
                    v780 = 0x367D6E020E64C149 * ((v775 - v776) >> 3);
                    if (v778 == v780 - 1)
                    {
                      v748 = (int *)(*(_QWORD *)((char *)v1378[1]
                                               + (((unint64_t)(*((_QWORD *)&v1379 + 1) + v1379 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (BYTE8(v1379) + v1379 - 1));
                      v750 = v782;
                    }
                  }
                  ++v778;
                }
                while (v778 < v780);
              }
            }
            while (v747 != v749);
            v777 = (v775 - v776) / 1992;
LABEL_826:
            if (v775 == v776)
            {
              v808 = 0;
              goto LABEL_850;
            }
            if (v777 <= 1)
              v807 = 1;
            else
              v807 = v777;
            v808 = 1;
            *(_BYTE *)v689 = 1;
            if (v777 < 2)
              goto LABEL_850;
            *((_BYTE *)v689 + 1) = 1;
            v809 = v807 - 2;
            if (v807 == 2)
            {
              v808 = 2;
LABEL_850:
              while (v748)
              {
                v861 = *v748;
                if (!*((_BYTE *)v689 + v861))
                  ++v808;
                *((_BYTE *)v689 + v861) = 1;
                v748 = (int *)*((_QWORD *)v748 + 1);
              }
              if (GEOGetVectorKitVKMuninLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
              v862 = (id)GEOGetVectorKitVKMuninLog_log;
              if (os_log_type_enabled(v862, OS_LOG_TYPE_INFO))
              {
                v863 = (std::locale::__imp *)(0x367D6E020E64C149
                                            * ((uint64_t)(*(_QWORD *)(v1238 + 512) - *(_QWORD *)(v1238 + 504)) >> 3));
                v864 = *(float *)(*(_QWORD *)&__src[8] - 4);
                LODWORD(buf[0].__locale_) = 134219008;
                *(std::locale::__imp **)((char *)&buf[0].__locale_ + 4) = (std::locale::__imp *)v808;
                WORD2(buf[1].__locale_) = 2048;
                *(std::locale::__imp **)((char *)&buf[1].__locale_ + 6) = v863;
                HIWORD(buf[2].__locale_) = 2048;
                v1310 = (std::locale *)(v808 - 3);
                *(_WORD *)v1311 = 2048;
                *(double *)&v1311[2] = v750;
                *(_WORD *)&v1311[10] = 2048;
                *(double *)&v1311[12] = v864;
                _os_log_impl(&dword_19F029000, v862, OS_LOG_TYPE_INFO, "Flagged %zu/%zu points as required (%zu are intermediate), cost: %f, total length: %f", (uint8_t *)buf, 0x34u);
              }

              if (v749)
                operator delete(v749);
              v865 = (void **)v1378[1];
              v866 = (void **)v1378[2];
              v867 = (char *)v1378[2] - (char *)v1378[1];
              if ((void *)((char *)v1378[2] - (char *)v1378[1]) >= (void *)0x11)
              {
                do
                {
                  v868 = *v865++;
                  operator delete(v868);
                  v867 -= 8;
                }
                while (v867 > 0x10);
              }
              while (v865 != v866)
              {
                v869 = *v865++;
                operator delete(v869);
              }
              if (v1378[0])
                operator delete(v1378[0]);
LABEL_867:
              if (*(_QWORD *)__src != *(_QWORD *)&__src[16])
                free(*(void **)__src);
              v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
              v871 = v1238;
              v872 = *(_QWORD *)(v1238 + 504);
              v873 = *(_QWORD *)(v1238 + 512) - v872;
              if (v873)
              {
                v874 = 0;
                v875 = 0x367D6E020E64C149 * (v873 >> 3);
                v1251 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
                __pa = (_QWORD *)*MEMORY[0x1E0DE4F60];
                v1247 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
                v1223 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
                v1242 = MEMORY[0x1E0DE4FE0] + 64;
                v1230 = MEMORY[0x1E0DE4FB8] + 16;
                do
                {
                  v876 = v872 + 1992 * v874;
                  v877 = *(unsigned __int16 *)(v871 + 106);
                  if (v874 <= v877)
                  {
                    v1294 = *(char *)(v876 + 1860) >= 0;
                    v879 = *(unsigned __int8 *)(v871 + 217);
                    if (!v874)
                      goto LABEL_886;
                    v878 = 1;
                    v871 = v1238;
                  }
                  else
                  {
                    v878 = v874 >= ((v875 + ~v877) & ~((uint64_t)(v875 + ~v877) >> 63));
                    v1294 = *(char *)(v876 + 1860) >= 0;
                    v879 = *(unsigned __int8 *)(v871 + 217);
                  }
                  v880 = *(unsigned __int8 *)(v871 + 104);
                  if (v880 <= v879)
                    v881 = v879;
                  else
                    v881 = *(_BYTE *)(v871 + 104);
                  if (*(_BYTE *)(v871 + 218))
                  {
                    v881 = v879;
LABEL_885:
                    LOBYTE(v879) = v881;
                    goto LABEL_886;
                  }
                  if (!v878)
                    goto LABEL_885;
                  if (v880 >= (v879 + *(_BYTE *)(v1238 + 108)))
                    LOBYTE(v879) = v879 + *(_BYTE *)(v1238 + 108);
                  else
                    LOBYTE(v879) = *(_BYTE *)(v871 + 104);
LABEL_886:
                  v882 = v875 - 1;
                  if (v874 == v875 - 1 || !v1294)
                    goto LABEL_897;
                  v883 = v872 + 1992 * v874;
                  v884 = (uint64_t *)(v883 + 1920);
                  v885 = *(_QWORD *)(v883 + 1920);
                  v886 = *(_QWORD *)(v883 + 1912);
                  if (v885 == v886)
                  {
                    v888 = 0;
                    if ((v885 - v886) >> 3)
                      goto LABEL_896;
                  }
                  else
                  {
                    v887 = 0;
                    v888 = 0;
                    v889 = (uint64_t *)(v883 + 1912);
                    v890 = 4;
                    do
                    {
                      if (*(float *)(v886 + v890) >= 0.01)
                      {
                        if (v887 != v888)
                        {
                          *(_QWORD *)(v886 + 8 * v888) = *(_QWORD *)(v886 + 8 * v887);
                          v885 = *v884;
                          v886 = *v889;
                        }
                        ++v888;
                      }
                      ++v887;
                      v891 = (v885 - v886) >> 3;
                      v890 += 8;
                    }
                    while (v887 < v891);
                    v885 = v886;
                    if (v891 > v888)
LABEL_896:
                      *v884 = v885 + 8 * v888;
                  }
LABEL_897:
                  if (v874 == v882)
                    v892 = 0.0001;
                  else
                    v892 = 0.5;
                  v1420[0] = v1242;
                  *(_QWORD *)__src = v1251;
                  *(_QWORD *)&__src[*(_QWORD *)(v1251 - 24)] = v1247;
                  v893 = (std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                  std::ios_base::init(v893, &__src[8]);
                  v893[1].__vftable = 0;
                  v893[1].__fmtflags_ = -1;
                  *(_QWORD *)__src = MEMORY[0x1E0DE4FE0] + 24;
                  v1420[0] = MEMORY[0x1E0DE4FE0] + 64;
                  std::streambuf::basic_streambuf();
                  *(_QWORD *)&__src[8] = v1230;
                  memset(&v1418[8], 0, 32);
                  LODWORD(v1419) = 16;
                  *(_QWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 16] = 2;
                  v895 = v1294;
                  if (!v874)
                    v895 = 1;
                  if ((v895 & 1) == 0)
                  {
                    v896 = v872 + 1992 * v874;
                    v897 = *(unsigned __int8 **)(v896 + 1912);
                    for (j = *(unsigned __int8 **)(v896 + 1920); v897 != j; v897 += 8)
                    {
                      while (1)
                      {
                        v899 = *v897;
                        v900 = (md::mun::PointView *)(v872 + 1992 * v874);
                        if (*((_BYTE *)v1366[0] + v874))
                          break;
                        md::mun::PointView::addOptionalView(v900, v899, 7);
                        v897 += 8;
                        if (v897 == j)
                          goto LABEL_908;
                      }
                      md::mun::PointView::addRequiredView(v900, v899, 7);
                    }
                  }
LABEL_908:
                  v1284 = v879;
                  v1270 = (md::mun::PointView *)(v872 + 1992 * v874);
                  v1260 = v872;
                  v901 = *((_QWORD *)v1270 + 239);
                  v1275 = *((_QWORD *)v1270 + 240);
                  if (v901 != v1275)
                  {
                    _ZF = v874 == 1 || v874 == v882;
                    v903 = _ZF;
                    v1265 = v903;
                    while (1)
                    {
                      LOBYTE(v894) = *(_BYTE *)(v901 + 2);
                      v904 = (float)(*(float *)(v901 + 4) / (float)v894) >= v892 ? v1284 : 7;
                      *(_BYTE *)(v901 + 1) = v904;
                      MEMORY[0x1A1AF49E0](v1378, __src);
                      if (LOBYTE(v1378[0]))
                        break;
LABEL_951:
                      MEMORY[0x1A1AF49EC](v1378);
                      v923 = (_QWORD *)std::ostream::operator<<();
                      MEMORY[0x1A1AF49E0](v1378, v923);
                      if (!LOBYTE(v1378[0]))
                        goto LABEL_981;
                      v924 = (char *)v923 + *(_QWORD *)(*v923 - 24);
                      v925 = *((_QWORD *)v924 + 5);
                      v926 = *((_DWORD *)v924 + 2);
                      v927 = *((_DWORD *)v924 + 36);
                      if (v927 == -1)
                      {
                        std::ios_base::getloc((const std::ios_base *)((char *)v923 + *(_QWORD *)(*v923 - 24)));
                        v928 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                        v927 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v928->__vftable[2].~facet_0)(v928, 32);
                        std::locale::~locale(buf);
                        *((_DWORD *)v924 + 36) = v927;
                      }
                      if ((v926 & 0xB0) == 0x20)
                        v929 = "";
                      else
                        v929 = "(";
                      if (!v925)
                        goto LABEL_980;
                      v930 = *((_QWORD *)v924 + 3);
                      v204 = v930 <= 1;
                      v931 = v930 - 1;
                      v932 = v204 ? 0 : v931;
                      if (v929 - "(" >= 1
                        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v925 + 96))(v925, "(", v929 - "(") != v929 - "(")
                      {
                        goto LABEL_980;
                      }
                      if ((uint64_t)v932 >= 1)
                      {
                        if (v932 > 0x7FFFFFFFFFFFFFF7)
                          abort();
                        if (v932 >= 0x17)
                        {
                          v934 = (v932 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v932 | 7) != 0x17)
                            v934 = v932 | 7;
                          v935 = v934 + 1;
                          v933 = (std::locale::__imp *)operator new(v934 + 1);
                          buf[2].__locale_ = (std::locale::__imp *)(v935 | 0x8000000000000000);
                          buf[0].__locale_ = v933;
                          buf[1].__locale_ = (std::locale::__imp *)v932;
                        }
                        else
                        {
                          HIBYTE(buf[2].__locale_) = v932;
                          v933 = (std::locale::__imp *)buf;
                        }
                        memset(v933, v927, v932);
                        *((_BYTE *)v933 + v932) = 0;
                        if (SHIBYTE(buf[2].__locale_) >= 0)
                          locale = buf;
                        else
                          locale = buf[0].__locale_;
                        v937 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v925 + 96))(v925, locale, v932);
                        v938 = v937;
                        if (SHIBYTE(buf[2].__locale_) < 0)
                        {
                          operator delete(buf[0].__locale_);
                          if (v938 != v932)
                            goto LABEL_980;
                        }
                        else if (v937 != v932)
                        {
                          goto LABEL_980;
                        }
                      }
                      v939 = "(" - v929 + 1;
                      if (v939 < 1
                        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v925 + 96))(v925, v929, "(" - v929 + 1) == v939)
                      {
                        *((_QWORD *)v924 + 3) = 0;
                        v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
                        goto LABEL_981;
                      }
LABEL_980:
                      std::ios_base::clear((std::ios_base *)((char *)v923 + *(_QWORD *)(*v923 - 24)), *(_DWORD *)((char *)v923 + *(_QWORD *)(*v923 - 24) + 32) | 5);
                      v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
LABEL_981:
                      MEMORY[0x1A1AF49EC](v1378);
                      v940 = (_QWORD *)std::ostream::operator<<();
                      MEMORY[0x1A1AF49E0](v1378, v940);
                      if (!LOBYTE(v1378[0]))
                        goto LABEL_1011;
                      v941 = (char *)v940 + *(_QWORD *)(*v940 - 24);
                      v942 = *((_QWORD *)v941 + 5);
                      v943 = *((_DWORD *)v941 + 2);
                      v944 = *((_DWORD *)v941 + 36);
                      if (v944 == -1)
                      {
                        std::ios_base::getloc((const std::ios_base *)((char *)v940 + *(_QWORD *)(*v940 - 24)));
                        v945 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                        v944 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v945->__vftable[2].~facet_0)(v945, 32);
                        std::locale::~locale(buf);
                        *((_DWORD *)v941 + 36) = v944;
                      }
                      if ((v943 & 0xB0) == 0x20)
                        v946 = "";
                      else
                        v946 = "):L";
                      if (!v942)
                        goto LABEL_1010;
                      v947 = *((_QWORD *)v941 + 3);
                      v204 = v947 <= 3;
                      v948 = v947 - 3;
                      v949 = v204 ? 0 : v948;
                      if (v946 - "):L" >= 1
                        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v942 + 96))(v942, "):L", v946 - "):L") != v946 - "):L")
                      {
                        goto LABEL_1010;
                      }
                      if ((uint64_t)v949 >= 1)
                      {
                        if (v949 > 0x7FFFFFFFFFFFFFF7)
                          abort();
                        if (v949 >= 0x17)
                        {
                          v951 = (v949 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v949 | 7) != 0x17)
                            v951 = v949 | 7;
                          v952 = v951 + 1;
                          v950 = (std::locale::__imp *)operator new(v951 + 1);
                          buf[2].__locale_ = (std::locale::__imp *)(v952 | 0x8000000000000000);
                          buf[0].__locale_ = v950;
                          buf[1].__locale_ = (std::locale::__imp *)v949;
                        }
                        else
                        {
                          HIBYTE(buf[2].__locale_) = v949;
                          v950 = (std::locale::__imp *)buf;
                        }
                        memset(v950, v944, v949);
                        *((_BYTE *)v950 + v949) = 0;
                        if (SHIBYTE(buf[2].__locale_) >= 0)
                          v953 = buf;
                        else
                          v953 = buf[0].__locale_;
                        v954 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v942 + 96))(v942, v953, v949);
                        v955 = v954;
                        if (SHIBYTE(buf[2].__locale_) < 0)
                        {
                          operator delete(buf[0].__locale_);
                          if (v955 != v949)
                            goto LABEL_1010;
                        }
                        else if (v954 != v949)
                        {
                          goto LABEL_1010;
                        }
                      }
                      v956 = "):L" - v946 + 3;
                      if (v956 < 1
                        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v942 + 96))(v942, v946, "):L" - v946 + 3) == v956)
                      {
                        *((_QWORD *)v941 + 3) = 0;
                        v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
                        goto LABEL_1011;
                      }
LABEL_1010:
                      std::ios_base::clear((std::ios_base *)((char *)v940 + *(_QWORD *)(*v940 - 24)), *(_DWORD *)((char *)v940 + *(_QWORD *)(*v940 - 24) + 32) | 5);
                      v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
LABEL_1011:
                      MEMORY[0x1A1AF49EC](v1378);
                      v957 = (_QWORD *)std::ostream::operator<<();
                      MEMORY[0x1A1AF49E0](v1378, v957);
                      if (!LOBYTE(v1378[0]))
                        goto LABEL_1041;
                      v958 = (char *)v957 + *(_QWORD *)(*v957 - 24);
                      v959 = *((_QWORD *)v958 + 5);
                      v960 = *((_DWORD *)v958 + 2);
                      v961 = *((_DWORD *)v958 + 36);
                      if (v961 == -1)
                      {
                        std::ios_base::getloc((const std::ios_base *)((char *)v957 + *(_QWORD *)(*v957 - 24)));
                        v962 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                        v961 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v962->__vftable[2].~facet_0)(v962, 32);
                        std::locale::~locale(buf);
                        *((_DWORD *)v958 + 36) = v961;
                      }
                      if ((v960 & 0xB0) == 0x20)
                        v963 = "";
                      else
                        v963 = " ";
                      if (!v959)
                        goto LABEL_1040;
                      v964 = *((_QWORD *)v958 + 3);
                      v204 = v964 <= 1;
                      v965 = v964 - 1;
                      v966 = v204 ? 0 : v965;
                      if (v963 - " " >= 1
                        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v959 + 96))(v959, " ", v963 - " ") != v963 - " ")
                      {
                        goto LABEL_1040;
                      }
                      if ((uint64_t)v966 >= 1)
                      {
                        if (v966 > 0x7FFFFFFFFFFFFFF7)
                          abort();
                        if (v966 >= 0x17)
                        {
                          v968 = (v966 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v966 | 7) != 0x17)
                            v968 = v966 | 7;
                          v969 = v968 + 1;
                          v967 = (std::locale::__imp *)operator new(v968 + 1);
                          buf[2].__locale_ = (std::locale::__imp *)(v969 | 0x8000000000000000);
                          buf[0].__locale_ = v967;
                          buf[1].__locale_ = (std::locale::__imp *)v966;
                        }
                        else
                        {
                          HIBYTE(buf[2].__locale_) = v966;
                          v967 = (std::locale::__imp *)buf;
                        }
                        memset(v967, v961, v966);
                        *((_BYTE *)v967 + v966) = 0;
                        if (SHIBYTE(buf[2].__locale_) >= 0)
                          v970 = buf;
                        else
                          v970 = buf[0].__locale_;
                        v971 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v959 + 96))(v959, v970, v966);
                        v972 = v971;
                        if (SHIBYTE(buf[2].__locale_) < 0)
                        {
                          operator delete(buf[0].__locale_);
                          if (v972 != v966)
                            goto LABEL_1040;
                        }
                        else if (v971 != v966)
                        {
                          goto LABEL_1040;
                        }
                      }
                      v973 = " " - v963 + 1;
                      if (v973 < 1
                        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v959 + 96))(v959, v963, " " - v963 + 1) == v973)
                      {
                        *((_QWORD *)v958 + 3) = 0;
                        v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
                        goto LABEL_1041;
                      }
LABEL_1040:
                      std::ios_base::clear((std::ios_base *)((char *)v957 + *(_QWORD *)(*v957 - 24)), *(_DWORD *)((char *)v957 + *(_QWORD *)(*v957 - 24) + 32) | 5);
                      v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
LABEL_1041:
                      MEMORY[0x1A1AF49EC](v1378);
                      if (!v1294)
                      {
                        if (!v874)
                          goto LABEL_917;
                        v974 = *(unsigned __int8 *)(v901 + 1);
                        if (v974 == 7)
                          goto LABEL_917;
                        goto LABEL_1046;
                      }
                      if (v874)
                      {
                        v974 = *(unsigned __int8 *)(v901 + 1);
LABEL_1046:
                        v975 = *(_BYTE *)v901;
                        if (v1265)
                          md::mun::PointView::addRequiredView(v1270, v975, v974);
                        else
                          md::mun::PointView::addOptionalView(v1270, v975, v974);
                      }
LABEL_917:
                      v901 += 8;
                      if (v901 == v1275)
                        goto LABEL_1048;
                    }
                    v905 = &__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                    v906 = *((_QWORD *)v905 + 5);
                    v907 = *((_DWORD *)v905 + 2);
                    v908 = *((_DWORD *)v905 + 36);
                    if (v908 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)]);
                      v909 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                      v908 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v909->__vftable[2].~facet_0)(v909, 32);
                      std::locale::~locale(buf);
                      *((_DWORD *)v905 + 36) = v908;
                      v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
                    }
                    if ((v907 & 0xB0) == 0x20)
                      v910 = "";
                    else
                      v910 = " C";
                    if (v906)
                    {
                      v911 = *((_QWORD *)v905 + 3);
                      v204 = v911 <= 2;
                      v912 = v911 - 2;
                      v913 = v204 ? 0 : v912;
                      if (v910 - " C" < 1
                        || (v914 = (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v906 + 96))(v906, " C", v910 - " C"), v870 = (uint64_t *)MEMORY[0x1E0DE4F60], v914 == v910 - " C"))
                      {
                        if ((uint64_t)v913 < 1)
                          goto LABEL_947;
                        if (v913 > 0x7FFFFFFFFFFFFFF7)
                          abort();
                        if (v913 >= 0x17)
                        {
                          v916 = (v913 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v913 | 7) != 0x17)
                            v916 = v913 | 7;
                          v917 = v916 + 1;
                          v915 = (std::locale::__imp *)operator new(v916 + 1);
                          buf[2].__locale_ = (std::locale::__imp *)(v917 | 0x8000000000000000);
                          buf[0].__locale_ = v915;
                          buf[1].__locale_ = (std::locale::__imp *)v913;
                        }
                        else
                        {
                          HIBYTE(buf[2].__locale_) = v913;
                          v915 = (std::locale::__imp *)buf;
                        }
                        memset(v915, v908, v913);
                        *((_BYTE *)v915 + v913) = 0;
                        if (SHIBYTE(buf[2].__locale_) >= 0)
                          v918 = buf;
                        else
                          v918 = buf[0].__locale_;
                        v919 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v906 + 96))(v906, v918, v913);
                        v920 = v919;
                        v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
                        if ((SHIBYTE(buf[2].__locale_) & 0x80000000) == 0)
                        {
                          if (v919 != v913)
                            goto LABEL_950;
LABEL_947:
                          v921 = " C" - v910 + 2;
                          if (v921 < 1
                            || (v922 = (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v906
                                                                                                  + 96))(v906, v910, " C" - v910 + 2), v870 = (uint64_t *)MEMORY[0x1E0DE4F60], v922 == v921))
                          {
                            *((_QWORD *)v905 + 3) = 0;
                            goto LABEL_951;
                          }
                          goto LABEL_950;
                        }
                        operator delete(buf[0].__locale_);
                        if (v920 == v913)
                          goto LABEL_947;
                      }
                    }
LABEL_950:
                    std::ios_base::clear((std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)], *(_DWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 32] | 5);
                    goto LABEL_951;
                  }
LABEL_1048:
                  if (GEOGetVectorKitVKMuninLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
                  v976 = (id)GEOGetVectorKitVKMuninLog_log;
                  if (os_log_type_enabled(v976, OS_LOG_TYPE_INFO))
                  {
                    v977 = *(std::locale::__imp **)v1270;
                    v978 = (_QWORD *)(v1260 + 1992 * v874);
                    v979 = v978[234];
                    v980 = v978[233];
                    v981 = v978[237];
                    v982 = v978[236];
                    if ((v1419 & 0x10) != 0)
                    {
                      v985 = *(double *)&v1418[32];
                      v986 = (const void **)&v1416;
                      if (*(_QWORD *)&v1418[32] < *(_QWORD *)&v1417)
                      {
                        *(double *)&v1418[32] = v1417;
                        v985 = v1417;
                        v986 = (const void **)&v1416;
                      }
                    }
                    else
                    {
                      if ((v1419 & 8) == 0)
                      {
                        v983 = 0;
                        HIBYTE(v1378[2]) = 0;
                        v984 = v1378;
LABEL_1068:
                        v984[v983] = 0;
                        LODWORD(buf[0].__locale_) = 134218498;
                        *(std::locale::__imp **)((char *)&buf[0].__locale_ + 4) = v977;
                        v993 = v1378;
                        if (SHIBYTE(v1378[2]) < 0)
                          v993 = (void **)v1378[0];
                        WORD2(buf[1].__locale_) = 2048;
                        *(std::locale::__imp **)((char *)&buf[1].__locale_ + 6) = (std::locale::__imp *)(0xAAAAAAAAAAAAAAABLL * ((v981 - v982) >> 3) - 0x5555555555555555 * ((v979 - v980) >> 3));
                        HIWORD(buf[2].__locale_) = 2080;
                        v1310 = (std::locale *)v993;
                        _os_log_impl(&dword_19F029000, v976, OS_LOG_TYPE_INFO, "%llu (n: %zu, %s)", (uint8_t *)buf, 0x20u);
                        if (SHIBYTE(v1378[2]) < 0)
                          operator delete(v1378[0]);
                        goto LABEL_1072;
                      }
                      v985 = *((double *)&v1415 + 1);
                      v986 = (const void **)&__src[24];
                    }
                    v987 = *v986;
                    v983 = *(_QWORD *)&v985 - (_QWORD)*v986;
                    if (v983 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    v1295 = v977;
                    if (v983 >= 0x17)
                    {
                      v988 = v982;
                      v989 = v979;
                      v990 = v981;
                      v991 = (v983 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v983 | 7) != 0x17)
                        v991 = v983 | 7;
                      v992 = v991 + 1;
                      v984 = operator new(v991 + 1);
                      v1378[2] = (void *)(v992 | 0x8000000000000000);
                      v1378[0] = v984;
                      v1378[1] = (void *)v983;
                      v981 = v990;
                      v979 = v989;
                      v982 = v988;
                    }
                    else
                    {
                      HIBYTE(v1378[2]) = LOBYTE(v985) - *(_BYTE *)v986;
                      v984 = v1378;
                      if (!v983)
                        goto LABEL_1067;
                    }
                    memmove(v984, v987, v983);
LABEL_1067:
                    v870 = (uint64_t *)MEMORY[0x1E0DE4F60];
                    v977 = v1295;
                    goto LABEL_1068;
                  }
LABEL_1072:

                  *(_QWORD *)__src = __pa;
                  *(_QWORD *)&__src[*(__pa - 3)] = v1223;
                  *(_QWORD *)&__src[8] = MEMORY[0x1E0DE4FB8] + 16;
                  if ((v1418[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v1418[8]);
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x1A1AF4D64](v1420);
                  ++v874;
                  v871 = v1238;
                  v872 = *(_QWORD *)(v1238 + 504);
                  v875 = 0x367D6E020E64C149 * ((*(_QWORD *)(v1238 + 512) - v872) >> 3);
                }
                while (v874 < v875);
              }
              if (v1366[0] != (void *)v1367)
                free(v1366[0]);
              +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v1193);
              v994 = (void *)objc_claimAutoreleasedReturnValue();
              v995 = objc_msgSend(v994, "muninIntermediatePointStep");
              v996 = *(_QWORD *)(v1238 + 504);
              v997 = *(_QWORD *)(v1238 + 512);
              v998 = v997 - v996;
              if (v997 != v996)
              {
                v999 = 0;
                v1000 = v998 / 1992;
                v1001 = v1000 - 1;
                if (v1000 <= 1)
                  v1002 = 1;
                else
                  v1002 = v1000;
                while (1)
                {
                  v1004 = (_QWORD *)(v996 + 1992 * v999 + 1864);
                  if (v999 % v995)
                    v1005 = v999 == v1001;
                  else
                    v1005 = 1;
                  if (!v1005)
                  {
                    v1003 = (_QWORD *)(v996 + 1992 * v999);
                    v1003[234] = *v1004;
                    v1003[237] = v1003[236];
                    goto LABEL_1080;
                  }
                  v1006 = *v1004;
                  v1007 = *(_QWORD *)(v996 + 1992 * v999 + 1872);
                  if (v1006 != v1007)
                  {
                    v1008 = v1007 - v1006 - 24;
                    if (v1008 <= 0x17)
                      goto LABEL_1092;
                    v1009 = v1008 / 0x18 + 1;
                    v1010 = (_DWORD *)(v1006 + 40);
                    v1011 = v1009 & 0x1FFFFFFFFFFFFFFELL;
                    do
                    {
                      *(v1010 - 6) = -1073741827;
                      *v1010 = -1073741827;
                      v1010 += 12;
                      v1011 -= 2;
                    }
                    while (v1011);
                    if (v1009 != (v1009 & 0x1FFFFFFFFFFFFFFELL))
                      break;
                  }
LABEL_1093:
                  v1012 = v996 + 1992 * v999;
                  v1013 = *(_QWORD *)(v1012 + 1888);
                  v1014 = *(_QWORD *)(v1012 + 1896);
                  if (v1013 != v1014)
                  {
                    if (v999 == 1)
                    {
                      v1015 = v1014 - v1013 - 24;
                      if (v1015 >= 0x18)
                      {
                        v1016 = v1015 / 0x18 + 1;
                        v1017 = (_DWORD *)(v1013 + 40);
                        v1018 = v1016 & 0x1FFFFFFFFFFFFFFELL;
                        do
                        {
                          *(v1017 - 6) = -1073741827;
                          *v1017 = -1073741827;
                          v1017 += 12;
                          v1018 -= 2;
                        }
                        while (v1018);
                        if (v1016 == (v1016 & 0x1FFFFFFFFFFFFFFELL))
                          goto LABEL_1080;
                        v1013 += 24 * (v1016 & 0x1FFFFFFFFFFFFFFELL);
                      }
                      do
                      {
                        *(_DWORD *)(v1013 + 16) = -1073741827;
                        v1013 += 24;
                      }
                      while (v1013 != v1014);
                    }
                    else
                    {
                      if (v1000 >> 1 != v999)
                      {
                        do
                        {
                          v1023 = 0;
                          v1024 = 1.0;
                          v1025 = v1000 >> 1;
                          v1026 = v1000;
                          do
                          {
                            _CF = v1025 >= v999;
                            while (_CF)
                            {
                              v1026 = v1025;
                              v1024 = v1024 * 0.5;
                              v1025 = v1023 + ((v1025 - v1023) >> 1);
                              _CF = v1025 >= v999;
                              if (v1025 == v999)
                                goto LABEL_1116;
                            }
                            v1023 = v1025;
                            v1024 = v1024 * 0.5;
                            v1025 += (v1026 - v1025) >> 1;
                          }
                          while (v1025 != v999);
LABEL_1116:
                          v1028 = v1024;
                          if (v999 == v1001)
                            v1028 = 1.0;
                          v1029 = fmaxf(v1028, 0.0);
                          if (v1029 <= 1.0)
                            v1030 = (float)(v1029 * 1073700000.0) + 1.0;
                          else
                            v1030 = 1073700000.0;
                          *(_DWORD *)(v1013 + 16) = v1030;
                          v1013 += 24;
                        }
                        while (v1013 != v1014);
                        goto LABEL_1080;
                      }
                      v1019 = v1014 - v1013 - 24;
                      if (v1019 >= 0x18)
                      {
                        v1020 = v1019 / 0x18 + 1;
                        v1021 = (_DWORD *)(v1013 + 40);
                        v1022 = v1020 & 0x1FFFFFFFFFFFFFFELL;
                        do
                        {
                          *(v1021 - 6) = 0x40000000;
                          *v1021 = 0x40000000;
                          v1021 += 12;
                          v1022 -= 2;
                        }
                        while (v1022);
                        if (v1020 == (v1020 & 0x1FFFFFFFFFFFFFFELL))
                          goto LABEL_1080;
                        v1013 += 24 * (v1020 & 0x1FFFFFFFFFFFFFFELL);
                      }
                      do
                      {
                        *(_DWORD *)(v1013 + 16) = 0x40000000;
                        v1013 += 24;
                      }
                      while (v1013 != v1014);
                    }
                  }
LABEL_1080:
                  if (++v999 == v1002)
                    goto LABEL_1123;
                }
                v1006 += 24 * (v1009 & 0x1FFFFFFFFFFFFFFELL);
                do
                {
LABEL_1092:
                  *(_DWORD *)(v1006 + 16) = -1073741827;
                  v1006 += 24;
                }
                while (v1006 != v1007);
                goto LABEL_1093;
              }
LABEL_1123:

              v1031 = v1194[10];
              +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
              v1032 = (void *)objc_claimAutoreleasedReturnValue();
              v1033 = objc_msgSend(v1032, "muninSlowMotion");
              v1034 = *(double *)(v1238 + 376);
              *(double *)(v1238 + 640) = v1034;
              *(double *)(v1238 + 648) = v1034 * 0.5;
              v1035 = objc_alloc_init(VKQuickDynamicAnimation);
              v1036 = v1035;
              if (v1033)
                v1031 = v1031 * 0.1;
              v1037 = v1035;
              objc_storeStrong((id *)(v1238 + 600), v1036);

              v1297[0] = MEMORY[0x1E0C809B0];
              v1297[1] = 3221225472;
              v1297[2] = ___ZN12_GLOBAL__N_112PathAnimatorC2EPN2md13MapDataAccessERKN3geo14RigidTransformIddEEONSt3__16vectorINS1_3mun15CollectionPointENS9_9allocatorISC_EEEERKNS4_10GeocentricIdEERKNS1_13MuninSettingsEhbb_block_invoke;
              v1297[3] = &__block_descriptor_48_e8_B16__0d8l;
              v1297[4] = v1238;
              *(double *)&v1297[5] = v1031;
              v1038 = *(id *)(v1238 + 600);
              objc_msgSend(v1038, "setDynamicStepHandler:", v1297);

              v1039 = *(_QWORD **)(v1238 + 504);
              v1040 = *(_QWORD **)(v1238 + 512);
              if (v1039 == v1040)
              {
                v1041 = 0;
              }
              else
              {
                v1041 = 0;
                do
                {
                  v1041 = v1041
                        - 0x5555555555555555 * ((uint64_t)(v1039[234] - v1039[233]) >> 3)
                        - 0x5555555555555555 * ((uint64_t)(v1039[237] - v1039[236]) >> 3);
                  v1039 += 249;
                }
                while (v1039 != v1040);
              }
              v1206 = v1041;
              if (GEOGetVectorKitVKMuninLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
              v1042 = (id)GEOGetVectorKitVKMuninLog_log;
              if (os_log_type_enabled(v1042, OS_LOG_TYPE_INFO))
              {
                v1043 = 0x367D6E020E64C149 * ((uint64_t)(*(_QWORD *)(v1238 + 512) - *(_QWORD *)(v1238 + 504)) >> 3);
                *(_DWORD *)__src = 134217984;
                *(_QWORD *)&__src[4] = v1043;
                _os_log_impl(&dword_19F029000, v1042, OS_LOG_TYPE_INFO, "Path has %zu points", __src, 0xCu);
              }

              v1369 = 0u;
              v1368 = 0u;
              v1367 = 0u;
              *(_OWORD *)v1366 = 0u;
              v1044 = *(_QWORD *)(v1238 + 504);
              v1248 = v870[1];
              v1243 = v870[2];
              v1296 = v1032;
              if (*(_QWORD *)(v1238 + 512) != v1044)
              {
                v1045 = 0;
                v1224 = *v870;
                v1220 = v870[3];
                v1237 = MEMORY[0x1E0DE4FE0] + 64;
                v1227 = MEMORY[0x1E0DE4FB8] + 16;
                while (1)
                {
                  v1420[0] = v1237;
                  *(_QWORD *)__src = v1248;
                  *(_QWORD *)&__src[*(_QWORD *)(v1248 - 24)] = v1243;
                  v1046 = (std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                  std::ios_base::init(v1046, &__src[8]);
                  v1046[1].__vftable = 0;
                  v1046[1].__fmtflags_ = -1;
                  *(_QWORD *)__src = MEMORY[0x1E0DE4FE0] + 24;
                  v1420[0] = MEMORY[0x1E0DE4FE0] + 64;
                  std::streambuf::basic_streambuf();
                  v1252 = v1044 + 1992 * v1045;
                  *(_QWORD *)&__src[8] = v1227;
                  memset(&v1418[8], 0, 32);
                  LODWORD(v1419) = 16;
                  *(_QWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 16] = 2;
                  v1261 = v1045;
                  v1256 = v1044;
                  v1047 = 1;
LABEL_1141:
                  v1048 = v1047;
                  if ((v1047 & 1) != 0)
                    v1049 = (_QWORD *)(v1252 + 1864);
                  else
                    v1049 = (_QWORD *)(v1252 + 1888);
                  if (v1049[1] == *v1049)
                    goto LABEL_1140;
                  v1276 = v1047;
                  v1050 = (v1047 & 1) != 0 ? "R" : "O";
                  LODWORD(v1031) = *(_DWORD *)(*v1049 + 16);
                  MEMORY[0x1A1AF49E0](v1378, __src);
                  if (LOBYTE(v1378[0]))
                    break;
LABEL_1180:
                  MEMORY[0x1A1AF49EC](v1378);
                  MEMORY[0x1A1AF49E0](v1378, __src);
                  if (!LOBYTE(v1378[0]))
                    goto LABEL_1210;
                  v1069 = &__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                  v1070 = *((_QWORD *)v1069 + 5);
                  v1071 = *((_DWORD *)v1069 + 2);
                  v1072 = *((_DWORD *)v1069 + 36);
                  if (v1072 == -1)
                  {
                    std::ios_base::getloc((const std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)]);
                    v1073 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                    v1072 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1073->__vftable[2].~facet_0)(v1073, 32);
                    std::locale::~locale(buf);
                    *((_DWORD *)v1069 + 36) = v1072;
                  }
                  if ((v1071 & 0xB0) == 0x20)
                    v1074 = "";
                  else
                    v1074 = "(";
                  if (!v1070)
                    goto LABEL_1209;
                  v1075 = *((_QWORD *)v1069 + 3);
                  v204 = v1075 <= 1;
                  v1076 = v1075 - 1;
                  v1077 = v204 ? 0 : v1076;
                  if (v1074 - "(" >= 1
                    && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v1070 + 96))(v1070, "(", v1074 - "(") != v1074 - "(")
                  {
                    goto LABEL_1209;
                  }
                  if ((uint64_t)v1077 >= 1)
                  {
                    if (v1077 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    if (v1077 >= 0x17)
                    {
                      v1079 = (v1077 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v1077 | 7) != 0x17)
                        v1079 = v1077 | 7;
                      v1080 = v1079 + 1;
                      v1078 = (std::locale::__imp *)operator new(v1079 + 1);
                      buf[2].__locale_ = (std::locale::__imp *)(v1080 | 0x8000000000000000);
                      buf[0].__locale_ = v1078;
                      buf[1].__locale_ = (std::locale::__imp *)v1077;
                    }
                    else
                    {
                      HIBYTE(buf[2].__locale_) = v1077;
                      v1078 = (std::locale::__imp *)buf;
                    }
                    memset(v1078, v1072, v1077);
                    *((_BYTE *)v1078 + v1077) = 0;
                    if (SHIBYTE(buf[2].__locale_) >= 0)
                      v1081 = buf;
                    else
                      v1081 = buf[0].__locale_;
                    v1082 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1070 + 96))(v1070, v1081, v1077);
                    v1083 = v1082;
                    if (SHIBYTE(buf[2].__locale_) < 0)
                    {
                      operator delete(buf[0].__locale_);
                      if (v1083 != v1077)
                        goto LABEL_1209;
                    }
                    else if (v1082 != v1077)
                    {
                      goto LABEL_1209;
                    }
                  }
                  v1084 = "(" - v1074 + 1;
                  if (v1084 < 1
                    || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1070 + 96))(v1070, v1074, "(" - v1074 + 1) == v1084)
                  {
                    *((_QWORD *)v1069 + 3) = 0;
                    goto LABEL_1210;
                  }
LABEL_1209:
                  std::ios_base::clear((std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)], *(_DWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 32] | 5);
LABEL_1210:
                  v1031 = (double)*(unint64_t *)&v1031 * 2.32830644e-10;
                  MEMORY[0x1A1AF49EC](v1378);
                  v1085 = (_QWORD *)std::ostream::operator<<();
                  MEMORY[0x1A1AF49E0](v1378, v1085);
                  if (LOBYTE(v1378[0]))
                  {
                    v1086 = (char *)v1085 + *(_QWORD *)(*v1085 - 24);
                    v1087 = *((_QWORD *)v1086 + 5);
                    v1088 = *((_DWORD *)v1086 + 2);
                    v1089 = *((_DWORD *)v1086 + 36);
                    if (v1089 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v1085 + *(_QWORD *)(*v1085 - 24)));
                      v1090 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                      v1089 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1090->__vftable[2].~facet_0)(v1090, 32);
                      std::locale::~locale(buf);
                      *((_DWORD *)v1086 + 36) = v1089;
                    }
                    if ((v1088 & 0xB0) == 0x20)
                      v1091 = "";
                    else
                      v1091 = ")";
                    if (!v1087)
                      goto LABEL_1239;
                    v1092 = *((_QWORD *)v1086 + 3);
                    v204 = v1092 <= 1;
                    v1093 = v1092 - 1;
                    v1094 = v204 ? 0 : v1093;
                    if (v1091 - ")" >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v1087 + 96))(v1087, ")", v1091 - ")") != v1091 - ")")
                    {
                      goto LABEL_1239;
                    }
                    if ((uint64_t)v1094 >= 1)
                    {
                      if (v1094 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v1094 >= 0x17)
                      {
                        v1096 = (v1094 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v1094 | 7) != 0x17)
                          v1096 = v1094 | 7;
                        v1097 = v1096 + 1;
                        v1095 = (std::locale::__imp *)operator new(v1096 + 1);
                        buf[2].__locale_ = (std::locale::__imp *)(v1097 | 0x8000000000000000);
                        buf[0].__locale_ = v1095;
                        buf[1].__locale_ = (std::locale::__imp *)v1094;
                      }
                      else
                      {
                        HIBYTE(buf[2].__locale_) = v1094;
                        v1095 = (std::locale::__imp *)buf;
                      }
                      memset(v1095, v1089, v1094);
                      *((_BYTE *)v1095 + v1094) = 0;
                      if (SHIBYTE(buf[2].__locale_) >= 0)
                        v1098 = buf;
                      else
                        v1098 = buf[0].__locale_;
                      v1099 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1087 + 96))(v1087, v1098, v1094);
                      v1100 = v1099;
                      if (SHIBYTE(buf[2].__locale_) < 0)
                      {
                        operator delete(buf[0].__locale_);
                        if (v1100 != v1094)
                          goto LABEL_1239;
                      }
                      else if (v1099 != v1094)
                      {
                        goto LABEL_1239;
                      }
                    }
                    v1101 = ")" - v1091 + 1;
                    if (v1101 >= 1
                      && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1087 + 96))(v1087, v1091, ")" - v1091 + 1) != v1101)
                    {
LABEL_1239:
                      std::ios_base::clear((std::ios_base *)((char *)v1085 + *(_QWORD *)(*v1085 - 24)), *(_DWORD *)((char *)v1085 + *(_QWORD *)(*v1085 - 24) + 32) | 5);
                      goto LABEL_1240;
                    }
                    *((_QWORD *)v1086 + 3) = 0;
                  }
LABEL_1240:
                  MEMORY[0x1A1AF49EC](v1378);
                  v1103 = *v1049;
                  v1102 = v1049[1];
                  v1285 = v1102;
                  while (v1103 != v1102)
                  {
                    v1104 = *(unsigned __int8 *)(v1103 + 9);
                    MEMORY[0x1A1AF49E0](v1378, __src);
                    if (!LOBYTE(v1378[0]))
                      goto LABEL_1273;
                    v1105 = &__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                    v1106 = *((_QWORD *)v1105 + 5);
                    v1107 = *((_DWORD *)v1105 + 2);
                    v1108 = *((_DWORD *)v1105 + 36);
                    if (v1108 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)]);
                      v1109 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                      v1108 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1109->__vftable[2].~facet_0)(v1109, 32);
                      std::locale::~locale(buf);
                      *((_DWORD *)v1105 + 36) = v1108;
                    }
                    if ((v1107 & 0xB0) == 0x20)
                      v1110 = "";
                    else
                      v1110 = " C";
                    if (!v1106)
                      goto LABEL_1272;
                    v1111 = *((_QWORD *)v1105 + 3);
                    v204 = v1111 <= 2;
                    v1112 = v1111 - 2;
                    v1113 = v204 ? 0 : v1112;
                    if (v1110 - " C" >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v1106 + 96))(v1106, " C", v1110 - " C") != v1110 - " C")
                    {
                      goto LABEL_1272;
                    }
                    if ((uint64_t)v1113 >= 1)
                    {
                      if (v1113 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v1113 >= 0x17)
                      {
                        v1115 = (v1113 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v1113 | 7) != 0x17)
                          v1115 = v1113 | 7;
                        v1116 = v1115 + 1;
                        v1114 = (std::locale::__imp *)operator new(v1115 + 1);
                        buf[2].__locale_ = (std::locale::__imp *)(v1116 | 0x8000000000000000);
                        buf[0].__locale_ = v1114;
                        buf[1].__locale_ = (std::locale::__imp *)v1113;
                      }
                      else
                      {
                        HIBYTE(buf[2].__locale_) = v1113;
                        v1114 = (std::locale::__imp *)buf;
                      }
                      memset(v1114, v1108, v1113);
                      *((_BYTE *)v1114 + v1113) = 0;
                      if (SHIBYTE(buf[2].__locale_) >= 0)
                        v1117 = buf;
                      else
                        v1117 = buf[0].__locale_;
                      v1118 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1106 + 96))(v1106, v1117, v1113);
                      v1119 = v1118;
                      if (SHIBYTE(buf[2].__locale_) < 0)
                      {
                        operator delete(buf[0].__locale_);
                        if (v1119 != v1113)
                          goto LABEL_1272;
                      }
                      else if (v1118 != v1113)
                      {
                        goto LABEL_1272;
                      }
                    }
                    v1120 = " C" - v1110 + 2;
                    if (v1120 < 1
                      || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1106 + 96))(v1106, v1110, " C" - v1110 + 2) == v1120)
                    {
                      *((_QWORD *)v1105 + 3) = 0;
                      goto LABEL_1273;
                    }
LABEL_1272:
                    std::ios_base::clear((std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)], *(_DWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 32] | 5);
LABEL_1273:
                    MEMORY[0x1A1AF49EC](v1378);
                    v1121 = (_QWORD *)std::ostream::operator<<();
                    MEMORY[0x1A1AF49E0](v1378, v1121);
                    if (!LOBYTE(v1378[0]))
                      goto LABEL_1303;
                    v1122 = (char *)v1121 + *(_QWORD *)(*v1121 - 24);
                    v1123 = *((_QWORD *)v1122 + 5);
                    v1124 = *((_DWORD *)v1122 + 2);
                    v1125 = *((_DWORD *)v1122 + 36);
                    if (v1125 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v1121 + *(_QWORD *)(*v1121 - 24)));
                      v1126 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                      v1125 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1126->__vftable[2].~facet_0)(v1126, 32);
                      std::locale::~locale(buf);
                      *((_DWORD *)v1122 + 36) = v1125;
                    }
                    if ((v1124 & 0xB0) == 0x20)
                      v1127 = "";
                    else
                      v1127 = ":L";
                    if (!v1123)
                      goto LABEL_1302;
                    v1128 = *((_QWORD *)v1122 + 3);
                    v204 = v1128 <= 2;
                    v1129 = v1128 - 2;
                    v1130 = v204 ? 0 : v1129;
                    if (v1127 - ":L" >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v1123 + 96))(v1123, ":L", v1127 - ":L") != v1127 - ":L")
                    {
                      goto LABEL_1302;
                    }
                    if ((uint64_t)v1130 >= 1)
                    {
                      if (v1130 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v1130 >= 0x17)
                      {
                        v1132 = (v1130 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v1130 | 7) != 0x17)
                          v1132 = v1130 | 7;
                        v1133 = v1132 + 1;
                        v1131 = (std::locale::__imp *)operator new(v1132 + 1);
                        buf[2].__locale_ = (std::locale::__imp *)(v1133 | 0x8000000000000000);
                        buf[0].__locale_ = v1131;
                        buf[1].__locale_ = (std::locale::__imp *)v1130;
                      }
                      else
                      {
                        HIBYTE(buf[2].__locale_) = v1130;
                        v1131 = (std::locale::__imp *)buf;
                      }
                      memset(v1131, v1125, v1130);
                      *((_BYTE *)v1131 + v1130) = 0;
                      if (SHIBYTE(buf[2].__locale_) >= 0)
                        v1134 = buf;
                      else
                        v1134 = buf[0].__locale_;
                      v1135 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1123 + 96))(v1123, v1134, v1130);
                      v1136 = v1135;
                      if (SHIBYTE(buf[2].__locale_) < 0)
                      {
                        operator delete(buf[0].__locale_);
                        if (v1136 != v1130)
                          goto LABEL_1302;
                      }
                      else if (v1135 != v1130)
                      {
                        goto LABEL_1302;
                      }
                    }
                    v1137 = ":L" - v1127 + 2;
                    if (v1137 < 1
                      || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1123 + 96))(v1123, v1127, ":L" - v1127 + 2) == v1137)
                    {
                      *((_QWORD *)v1122 + 3) = 0;
                      goto LABEL_1303;
                    }
LABEL_1302:
                    std::ios_base::clear((std::ios_base *)((char *)v1121 + *(_QWORD *)(*v1121 - 24)), *(_DWORD *)((char *)v1121 + *(_QWORD *)(*v1121 - 24) + 32) | 5);
LABEL_1303:
                    MEMORY[0x1A1AF49EC](v1378);
                    std::ostream::operator<<();
                    if (v1104 <= 7)
                      v1366[v1104] = (char *)v1366[v1104] + 1;
                    v1103 += 24;
                    v1102 = v1285;
                  }
                  MEMORY[0x1A1AF49E0](v1378, __src);
                  if (!LOBYTE(v1378[0]))
                    goto LABEL_1139;
                  v1138 = &__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                  v1139 = *((_QWORD *)v1138 + 5);
                  v1140 = *((_DWORD *)v1138 + 2);
                  v1141 = *((_DWORD *)v1138 + 36);
                  if (v1141 == -1)
                  {
                    std::ios_base::getloc((const std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)]);
                    v1142 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                    v1141 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1142->__vftable[2].~facet_0)(v1142, 32);
                    std::locale::~locale(buf);
                    *((_DWORD *)v1138 + 36) = v1141;
                  }
                  if ((v1140 & 0xB0) == 0x20)
                    v1143 = "";
                  else
                    v1143 = " ";
                  if (!v1139)
                    goto LABEL_1138;
                  v1144 = *((_QWORD *)v1138 + 3);
                  v204 = v1144 <= 1;
                  v1145 = v1144 - 1;
                  v1146 = v204 ? 0 : v1145;
                  if (v1143 - " " >= 1
                    && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v1139 + 96))(v1139, " ", v1143 - " ") != v1143 - " ")
                  {
                    goto LABEL_1138;
                  }
                  if ((uint64_t)v1146 < 1)
                    goto LABEL_1331;
                  if (v1146 > 0x7FFFFFFFFFFFFFF7)
                    abort();
                  if (v1146 >= 0x17)
                  {
                    v1148 = (v1146 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v1146 | 7) != 0x17)
                      v1148 = v1146 | 7;
                    v1149 = v1148 + 1;
                    v1147 = (std::locale::__imp *)operator new(v1148 + 1);
                    buf[2].__locale_ = (std::locale::__imp *)(v1149 | 0x8000000000000000);
                    buf[0].__locale_ = v1147;
                    buf[1].__locale_ = (std::locale::__imp *)v1146;
                  }
                  else
                  {
                    HIBYTE(buf[2].__locale_) = v1146;
                    v1147 = (std::locale::__imp *)buf;
                  }
                  memset(v1147, v1141, v1146);
                  *((_BYTE *)v1147 + v1146) = 0;
                  if (SHIBYTE(buf[2].__locale_) >= 0)
                    v1150 = buf;
                  else
                    v1150 = buf[0].__locale_;
                  v1151 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1139 + 96))(v1139, v1150, v1146);
                  v1152 = v1151;
                  if (SHIBYTE(buf[2].__locale_) < 0)
                  {
                    operator delete(buf[0].__locale_);
                    if (v1152 != v1146)
                      goto LABEL_1138;
LABEL_1331:
                    v1153 = " " - v1143 + 1;
                    if (v1153 >= 1
                      && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1139 + 96))(v1139, v1143, " " - v1143 + 1) != v1153)
                    {
                      goto LABEL_1138;
                    }
                    *((_QWORD *)v1138 + 3) = 0;
                    goto LABEL_1139;
                  }
                  if (v1151 == v1146)
                    goto LABEL_1331;
LABEL_1138:
                  std::ios_base::clear((std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)], *(_DWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 32] | 5);
LABEL_1139:
                  MEMORY[0x1A1AF49EC](v1378);
                  v1048 = v1276;
LABEL_1140:
                  v1047 = 0;
                  if ((v1048 & 1) != 0)
                    goto LABEL_1141;
                  if (GEOGetVectorKitVKMuninLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
                  v1154 = (id)GEOGetVectorKitVKMuninLog_log;
                  v1155 = v1261;
                  if (os_log_type_enabled(v1154, OS_LOG_TYPE_INFO))
                  {
                    v1156 = *(std::locale::__imp **)v1252;
                    v1157 = v1256 + 1992 * v1261;
                    v1158 = *(_QWORD *)(v1157 + 1872);
                    v1159 = *(_QWORD *)(v1252 + 1864);
                    v1160 = *(_QWORD *)(v1157 + 1896);
                    v1161 = *(_QWORD *)(v1252 + 1888);
                    if ((v1419 & 0x10) != 0)
                    {
                      v1164 = *(double *)&v1418[32];
                      v1165 = (const void **)&v1416;
                      if (*(_QWORD *)&v1418[32] < *(_QWORD *)&v1417)
                      {
                        *(double *)&v1418[32] = v1417;
                        v1164 = v1417;
                        v1165 = (const void **)&v1416;
                      }
                    }
                    else
                    {
                      if ((v1419 & 8) == 0)
                      {
                        v1162 = 0;
                        HIBYTE(v1378[2]) = 0;
                        v1163 = v1378;
                        goto LABEL_1351;
                      }
                      v1164 = *((double *)&v1415 + 1);
                      v1165 = (const void **)&__src[24];
                    }
                    v1166 = *v1165;
                    v1162 = *(_QWORD *)&v1164 - (_QWORD)*v1165;
                    if (v1162 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    if (v1162 >= 0x17)
                    {
                      v1167 = (v1162 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v1162 | 7) != 0x17)
                        v1167 = v1162 | 7;
                      v1168 = v1167 + 1;
                      v1163 = operator new(v1167 + 1);
                      v1378[2] = (void *)(v1168 | 0x8000000000000000);
                      v1378[0] = v1163;
                      v1378[1] = (void *)v1162;
                    }
                    else
                    {
                      HIBYTE(v1378[2]) = LOBYTE(v1164) - *(_BYTE *)v1165;
                      v1163 = v1378;
                      if (!v1162)
                      {
LABEL_1351:
                        *((_BYTE *)v1163 + v1162) = 0;
                        LODWORD(buf[0].__locale_) = 134218498;
                        *(std::locale::__imp **)((char *)&buf[0].__locale_ + 4) = v1156;
                        v1169 = v1378;
                        if (SHIBYTE(v1378[2]) < 0)
                          v1169 = (void **)v1378[0];
                        WORD2(buf[1].__locale_) = 2048;
                        *(std::locale::__imp **)((char *)&buf[1].__locale_ + 6) = (std::locale::__imp *)(0xAAAAAAAAAAAAAAABLL * ((v1160 - v1161) >> 3) - 0x5555555555555555 * ((v1158 - v1159) >> 3));
                        HIWORD(buf[2].__locale_) = 2080;
                        v1310 = (std::locale *)v1169;
                        _os_log_impl(&dword_19F029000, v1154, OS_LOG_TYPE_INFO, "%llu (n: %zu, %s)", (uint8_t *)buf, 0x20u);
                        if (SHIBYTE(v1378[2]) < 0)
                          operator delete(v1378[0]);
                        v1155 = v1261;
                        goto LABEL_1356;
                      }
                    }
                    memmove(v1163, v1166, v1162);
                    goto LABEL_1351;
                  }
LABEL_1356:

                  *(_QWORD *)__src = v1224;
                  *(_QWORD *)&__src[*(_QWORD *)(v1224 - 24)] = v1220;
                  *(_QWORD *)&__src[8] = MEMORY[0x1E0DE4FB8] + 16;
                  if ((v1418[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v1418[8]);
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x1A1AF4D64](v1420);
                  v1045 = v1155 + 1;
                  v1044 = *(_QWORD *)(v1238 + 504);
                  if (v1045 >= 0x367D6E020E64C149 * ((*(_QWORD *)(v1238 + 512) - v1044) >> 3))
                    goto LABEL_1358;
                }
                v1051 = &__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
                v1052 = *((_QWORD *)v1051 + 5);
                v1053 = *((_DWORD *)v1051 + 2);
                v1054 = *((_DWORD *)v1051 + 36);
                if (v1054 == -1)
                {
                  std::ios_base::getloc((const std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)]);
                  v1055 = std::locale::use_facet(buf, MEMORY[0x1E0DE4A90]);
                  v1054 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1055->__vftable[2].~facet_0)(v1055, 32);
                  std::locale::~locale(buf);
                  *((_DWORD *)v1051 + 36) = v1054;
                }
                v1056 = "O";
                if ((v1276 & 1) != 0)
                  v1056 = "R";
                if ((v1053 & 0xB0) == 0x20)
                  v1057 = (char *)(v1056 + 1);
                else
                  v1057 = v1050;
                if (v1052)
                {
                  v1058 = v1056 + 1;
                  v1059 = v1056 + 1 - v1050;
                  v1060 = *((_QWORD *)v1051 + 3);
                  _VF = __OFSUB__(v1060, v1059);
                  v1061 = v1060 - v1059;
                  v1062 = ((v1061 < 0) ^ _VF) | (v1061 == 0) ? 0 : v1061;
                  if (v1057 - v1050 < 1
                    || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1052 + 96))(v1052, v1050, v1057 - v1050) == v1057 - v1050)
                  {
                    if ((uint64_t)v1062 < 1)
                      goto LABEL_1176;
                    if (v1062 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    if (v1062 >= 0x17)
                    {
                      v1064 = (v1062 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v1062 | 7) != 0x17)
                        v1064 = v1062 | 7;
                      v1065 = v1064 + 1;
                      v1063 = (std::locale::__imp *)operator new(v1064 + 1);
                      buf[2].__locale_ = (std::locale::__imp *)(v1065 | 0x8000000000000000);
                      buf[0].__locale_ = v1063;
                      buf[1].__locale_ = (std::locale::__imp *)v1062;
                    }
                    else
                    {
                      HIBYTE(buf[2].__locale_) = v1062;
                      v1063 = (std::locale::__imp *)buf;
                    }
                    memset(v1063, v1054, v1062);
                    *((_BYTE *)v1063 + v1062) = 0;
                    if (SHIBYTE(buf[2].__locale_) >= 0)
                      v1066 = buf;
                    else
                      v1066 = buf[0].__locale_;
                    v1067 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1052 + 96))(v1052, v1066, v1062);
                    v1068 = v1067;
                    if ((SHIBYTE(buf[2].__locale_) & 0x80000000) == 0)
                    {
                      if (v1067 != v1062)
                        goto LABEL_1179;
LABEL_1176:
                      if (v1058 - v1057 < 1
                        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1052 + 96))(v1052, v1057, v1058 - v1057) == v1058 - v1057)
                      {
                        *((_QWORD *)v1051 + 3) = 0;
                        goto LABEL_1180;
                      }
                      goto LABEL_1179;
                    }
                    operator delete(buf[0].__locale_);
                    if (v1068 == v1062)
                      goto LABEL_1176;
                  }
                }
LABEL_1179:
                std::ios_base::clear((std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)], *(_DWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 32] | 5);
                goto LABEL_1180;
              }
LABEL_1358:
              v1170 = MEMORY[0x1E0DE4FE0];
              v1171 = MEMORY[0x1E0DE4FE0] + 64;
              v1420[0] = MEMORY[0x1E0DE4FE0] + 64;
              *(_QWORD *)__src = v1248;
              *(_QWORD *)&__src[*(_QWORD *)(v1248 - 24)] = v1243;
              v1172 = (std::ios_base *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)];
              std::ios_base::init(v1172, &__src[8]);
              v1172[1].__vftable = 0;
              v1172[1].__fmtflags_ = -1;
              *(_QWORD *)__src = v1170 + 24;
              v1420[0] = v1171;
              std::streambuf::basic_streambuf();
              v1173 = 0;
              v1174 = 0;
              *(_QWORD *)&__src[8] = MEMORY[0x1E0DE4FB8] + 16;
              memset(&v1418[8], 0, 32);
              LODWORD(v1419) = 16;
              *(_QWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24) + 16] = 2;
              do
              {
                v1175 = v1366[v1173];
                if (v1175)
                {
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__src, (uint64_t)" L", 2);
                  v1176 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v1176, (uint64_t)": ", 2);
                  v1177 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v1177, (uint64_t)", ", 2);
                  v1178 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v1178, (uint64_t)"/v", 2);
                  v1174 += (uint64_t)v1175;
                }
                ++v1173;
              }
              while (v1173 != 8);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__src, (uint64_t)" total: ", 8);
              std::ostream::operator<<();
              v1179 = (_QWORD *)MEMORY[0x1E0DE4F60];
              if (GEOGetVectorKitVKMuninLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
              v1180 = (id)GEOGetVectorKitVKMuninLog_log;
              if (!os_log_type_enabled(v1180, OS_LOG_TYPE_INFO))
              {
LABEL_1385:

                *(_QWORD *)__src = *v1179;
                *(_QWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)] = v1179[3];
                *(_QWORD *)&__src[8] = MEMORY[0x1E0DE4FB8] + 16;
                if ((v1418[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v1418[8]);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x1A1AF4D64](v1420);
                if (GEOGetVectorKitVKMuninLog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
                v1191 = (id)GEOGetVectorKitVKMuninLog_log;
                if (os_log_type_enabled(v1191, OS_LOG_TYPE_INFO))
                {
                  v1192 = 0x367D6E020E64C149 * ((uint64_t)(*(_QWORD *)(v1238 + 512) - *(_QWORD *)(v1238 + 504)) >> 3);
                  *(_DWORD *)__src = 134218496;
                  *(_QWORD *)&__src[4] = v1192;
                  *(_WORD *)&__src[12] = 2048;
                  *(_QWORD *)&__src[14] = v1206;
                  *(_WORD *)&__src[22] = 2048;
                  *(double *)&__src[24] = (double)v1206 / (double)(unint64_t)v1192;
                  _os_log_impl(&dword_19F029000, v1191, OS_LOG_TYPE_INFO, "Path planned, points: %zu, views: %zu, %.1f view/point", __src, 0x20u);
                }

                return;
              }
              v1182 = *(_QWORD *)(v1238 + 504);
              v1181 = *(_QWORD *)(v1238 + 512);
              if ((v1419 & 0x10) != 0)
              {
                v1185 = *(double *)&v1418[32];
                if (*(_QWORD *)&v1418[32] < *(_QWORD *)&v1417)
                {
                  *(double *)&v1418[32] = v1417;
                  v1185 = v1417;
                }
                v1186 = (const void **)&v1416;
              }
              else
              {
                if ((v1419 & 8) == 0)
                {
                  v1183 = 0;
                  HIBYTE(buf[2].__locale_) = 0;
                  v1184 = (std::locale::__imp *)buf;
                  goto LABEL_1380;
                }
                v1186 = (const void **)&__src[24];
                v1185 = *((double *)&v1415 + 1);
              }
              v1187 = *v1186;
              v1183 = *(_QWORD *)&v1185 - (_QWORD)*v1186;
              if (v1183 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v1183 >= 0x17)
              {
                v1188 = (v1183 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v1183 | 7) != 0x17)
                  v1188 = v1183 | 7;
                v1189 = v1188 + 1;
                v1184 = (std::locale::__imp *)operator new(v1188 + 1);
                buf[2].__locale_ = (std::locale::__imp *)(v1189 | 0x8000000000000000);
                buf[0].__locale_ = v1184;
                buf[1].__locale_ = (std::locale::__imp *)v1183;
              }
              else
              {
                HIBYTE(buf[2].__locale_) = LOBYTE(v1185) - *(_BYTE *)v1186;
                v1184 = (std::locale::__imp *)buf;
                if (!v1183)
                  goto LABEL_1380;
              }
              memmove(v1184, v1187, v1183);
LABEL_1380:
              *((_BYTE *)v1184 + v1183) = 0;
              v1190 = buf;
              if (SHIBYTE(buf[2].__locale_) < 0)
                v1190 = buf[0].__locale_;
              LODWORD(v1378[0]) = 134218242;
              *(void **)((char *)v1378 + 4) = (void *)(0x367D6E020E64C149 * ((v1181 - v1182) >> 3));
              WORD2(v1378[1]) = 2080;
              *(void **)((char *)&v1378[1] + 6) = v1190;
              _os_log_impl(&dword_19F029000, v1180, OS_LOG_TYPE_INFO, "views(%zu): %s", (uint8_t *)v1378, 0x16u);
              if (SHIBYTE(buf[2].__locale_) < 0)
                operator delete(buf[0].__locale_);
              v1179 = (_QWORD *)MEMORY[0x1E0DE4F60];
              goto LABEL_1385;
            }
            if (v809 <= 7)
            {
              v810 = 2;
              v808 = 2;
              goto LABEL_846;
            }
            v811 = vdupq_n_s64(v777 - 1);
            if (v809 >= 0x10)
            {
              v812 = v809 & 0xFFFFFFFFFFFFFFF0;
              v830 = (int64x2_t)xmmword_19FFB35C0;
              v831 = (int64x2_t)xmmword_19FFB4EF0;
              v832 = (int64x2_t)xmmword_19FFB4F00;
              v833 = (int64x2_t)xmmword_19FFB4F10;
              v834 = (int64x2_t)xmmword_19FFB4F20;
              v835 = (int8x16_t *)((char *)v689 + 2);
              v836 = 0uLL;
              v837.i64[0] = 0x101010101010101;
              v837.i64[1] = 0x101010101010101;
              v838 = (int64x2_t)xmmword_19FFB2FD0;
              v839 = vdupq_n_s64(0x10uLL);
              v840 = v809 & 0xFFFFFFFFFFFFFFF0;
              v841 = 0uLL;
              v842 = 0uLL;
              v843 = (int64x2_t)xmmword_19FFB2FE0;
              v844 = 0uLL;
              v845 = 0uLL;
              v846 = (int64x2_t)xmmword_19FFB2FF0;
              v847 = 0uLL;
              v848 = 0uLL;
              v849 = (int64x2_t)xmmword_19FFB3000;
              do
              {
                v850 = vceqq_s64(v849, v811);
                v851 = vceqq_s64(v846, v811);
                v852 = vceqq_s64(v843, v811);
                v853 = vceqq_s64(v838, v811);
                v854 = vceqq_s64(v834, v811);
                v855 = vceqq_s64(v833, v811);
                v856 = vceqq_s64(v832, v811);
                v857 = vceqq_s64(v831, v811);
                v830 = vsubq_s64(v830, v850);
                v836 = vsubq_s64(v836, v851);
                v841 = vsubq_s64(v841, v852);
                v842 = vsubq_s64(v842, v853);
                v844 = vsubq_s64(v844, v854);
                v845 = vsubq_s64(v845, v855);
                v847 = vsubq_s64(v847, v856);
                v848 = vsubq_s64(v848, v857);
                *v835++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v850, (int32x4_t)v851), (int16x8_t)vuzp1q_s32((int32x4_t)v852, (int32x4_t)v853)), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v854, (int32x4_t)v855), (int16x8_t)vuzp1q_s32((int32x4_t)v856, (int32x4_t)v857))), v837);
                v843 = vaddq_s64(v843, v839);
                v846 = vaddq_s64(v846, v839);
                v849 = vaddq_s64(v849, v839);
                v838 = vaddq_s64(v838, v839);
                v834 = vaddq_s64(v834, v839);
                v833 = vaddq_s64(v833, v839);
                v832 = vaddq_s64(v832, v839);
                v831 = vaddq_s64(v831, v839);
                v840 -= 16;
              }
              while (v840);
              v808 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v830, v844), vaddq_s64(v841, v847)), vaddq_s64(vaddq_s64(v836, v845), vaddq_s64(v842, v848))));
              if (v809 == v812)
                goto LABEL_850;
              v810 = v812 | 2;
              if ((v809 & 8) == 0)
                goto LABEL_846;
            }
            else
            {
              v812 = 0;
              v808 = 2;
              v810 = 2;
            }
            v813 = v809 & 0xFFFFFFFFFFFFFFF8;
            v814 = vdupq_n_s64(v810);
            v815 = vaddq_s64(v814, (int64x2_t)xmmword_19FFB2FE0);
            v816 = vaddq_s64(v814, (int64x2_t)xmmword_19FFB2FF0);
            v817 = vaddq_s64(v814, (int64x2_t)xmmword_19FFB3000);
            v818 = vaddq_s64(v814, (int64x2_t)xmmword_19FFB2E40);
            v819 = 0uLL;
            v820 = (int64x2_t)(unint64_t)v808;
            v821 = v812 - (v809 & 0xFFFFFFFFFFFFFFF8);
            v822 = (int8x8_t *)((char *)v689 + v812 + 2);
            v823 = vdupq_n_s64(8uLL);
            v824 = 0uLL;
            v825 = 0uLL;
            do
            {
              v826 = vceqq_s64(v818, v811);
              v827 = vceqq_s64(v817, v811);
              v828 = vceqq_s64(v816, v811);
              v829 = vceqq_s64(v815, v811);
              v820 = vsubq_s64(v820, v826);
              v819 = vsubq_s64(v819, v827);
              v824 = vsubq_s64(v824, v828);
              *v822++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v826, (int32x4_t)v827), (int16x8_t)vuzp1q_s32((int32x4_t)v828, (int32x4_t)v829))), (int8x8_t)0x101010101010101);
              v825 = vsubq_s64(v825, v829);
              v816 = vaddq_s64(v816, v823);
              v817 = vaddq_s64(v817, v823);
              v818 = vaddq_s64(v818, v823);
              v815 = vaddq_s64(v815, v823);
              v821 += 8;
            }
            while (v821);
            v808 = vaddvq_s64(vaddq_s64(vaddq_s64(v820, v824), vaddq_s64(v819, v825)));
            if (v809 == v813)
              goto LABEL_850;
            v810 = v813 | 2;
LABEL_846:
            v858 = v807 - v810;
            v859 = (BOOL *)v689 + v810;
            v860 = ~v810 + v777;
            do
            {
              if (!v860)
                ++v808;
              *v859++ = v860-- == 0;
              --v858;
            }
            while (v858);
            goto LABEL_850;
          }
          if (v692 <= 0x20)
            v693 = 32;
          else
            v693 = 0x367D6E020E64C149 * ((v690 - v691) >> 3);
          v694 = (char *)malloc_type_malloc(v693, 0x100004077774924uLL);
          v689 = (__int128 *)v694;
          v695 = (char *)v1366[0];
          v696 = (char *)v1366[1];
          if (v1366[0] == v1366[1])
          {
LABEL_729:
            v1366[0] = v694;
            *((_QWORD *)&v1367 + 1) = v693;
            v691 = *(_QWORD *)(v1238 + 504);
            v690 = *(_QWORD *)(v1238 + 512);
            goto LABEL_730;
          }
          v697 = (char *)v1366[1] - (char *)v1366[0];
          if ((void *)((char *)v1366[1] - (char *)v1366[0]) < (void *)8)
          {
            v698 = v694;
          }
          else
          {
            v698 = v694;
            if ((unint64_t)(v694 - (char *)v1366[0]) >= 0x20)
            {
              if (v697 < 0x20)
              {
                v699 = 0;
LABEL_720:
                v706 = v697 & 0xFFFFFFFFFFFFFFF8;
                v698 = &v694[v697 & 0xFFFFFFFFFFFFFFF8];
                v707 = v699 - (v697 & 0xFFFFFFFFFFFFFFF8);
                v708 = (uint64_t *)&v695[v699];
                v709 = &v694[v699];
                do
                {
                  v710 = *v708++;
                  *(_QWORD *)v709 = v710;
                  v709 += 8;
                  v707 += 8;
                }
                while (v707);
                if (v697 == v706)
                  goto LABEL_729;
                v695 += v706;
                goto LABEL_728;
              }
              v699 = v697 & 0xFFFFFFFFFFFFFFE0;
              v702 = (__int128 *)((char *)v1366[0] + 16);
              v703 = v694 + 16;
              v704 = v697 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v705 = *v702;
                *(v703 - 1) = *(v702 - 1);
                *v703 = v705;
                v702 += 2;
                v703 += 2;
                v704 -= 32;
              }
              while (v704);
              if (v697 == v699)
                goto LABEL_729;
              if ((v697 & 0x18) != 0)
                goto LABEL_720;
              v695 += v699;
              v698 = &v694[v699];
            }
          }
          do
          {
LABEL_728:
            v711 = *v695++;
            *v698++ = v711;
          }
          while (v695 != v696);
          goto LABEL_729;
        }
        v385 = (char *)&v382[v387 & 0x3FFFFFFFFFFFFFFCLL];
      }
    }
    v390 = *(_QWORD *)__src;
    do
    {
      *(_QWORD *)v385 = v390;
      v385 += 8;
    }
    while (v385 != (char *)&v382[v381]);
    goto LABEL_463;
  }
  v334 = 0;
  v335 = 0.0;
  LOBYTE(v336) = v1313;
  while (!(_BYTE)v336)
  {
    LOBYTE(v336) = 0;
LABEL_408:
    if (++v334 == v315)
      goto LABEL_421;
  }
  v337 = 0;
  while (1)
  {
    v338 = (double)v336;
    v339 = *(_QWORD *)v1311;
    v340 = (double)v337 / v338;
    LODWORD(v1366[0]) = v334;
    *(double *)__src = v340;
    if (!v1310)
      break;
    v341 = (*((double (**)(std::locale *, void **, _BYTE *))v1310->__locale_ + 6))(v1310, v1366, __src);
    v343 = v342;
    v345 = v344;
    v346 = 0;
    v347 = (double)++v337 / v338 - v340;
    v348 = (v347 * (double)(unint64_t)(10 * v339));
    if (v348 <= 2)
      v349 = 2;
    else
      v349 = v348;
    v350 = 0.0;
    do
    {
      LODWORD(v1366[0]) = v334;
      *(double *)__src = v340 + v347 * (double)v346 * (1.0 / (double)(v349 - 1));
      if (!v1310)
        goto LABEL_1407;
      v351 = (*((double (**)(std::locale *, void **, _BYTE *))v1310->__locale_ + 6))(v1310, v1366, __src);
      ++v346;
      v350 = sqrt((v351 - v341) * (v351 - v341) + (v352 - v343) * (v352 - v343) + (v353 - v345) * (v353 - v345)) + v350;
      v345 = v353;
      v343 = v352;
      v341 = v351;
    }
    while (v349 != v346);
    v335 = v350 + v335;
    v336 = v1313;
    v333 = (char *)v1312[0];
    *((double *)v1312[0] + v337 + v334 * v1313) = v335;
    if (v337 >= v336)
      goto LABEL_408;
  }
LABEL_1407:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_1432:
  __break(1u);
}

void sub_19F9D0044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27,uint64_t a28,void *__p,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,void *a59,uint64_t a60,void *a61)
{
  void *v61;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  v63 = (unint64_t *)STACK[0x1448];
  if ((unint64_t *)STACK[0x1448] == &STACK[0x1430])
  {
    v64 = 4;
    v63 = &STACK[0x1430];
  }
  else
  {
    if (!v63)
      goto LABEL_6;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_6:
  v65 = (unint64_t *)STACK[0x988];
  if ((unint64_t *)STACK[0x988] == &STACK[0x970])
  {
    v66 = 4;
    v65 = &STACK[0x970];
  }
  else
  {
    if (!v65)
      goto LABEL_11;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_11:
  v67 = (unint64_t *)STACK[0x10D8];
  if ((unint64_t *)STACK[0x10D8] == &STACK[0x10C0])
  {
    v68 = 4;
    v67 = &STACK[0x10C0];
  }
  else
  {
    if (!v67)
    {
      if (__p)
        goto LABEL_19;
      goto LABEL_15;
    }
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
  if (__p)
  {
LABEL_19:
    operator delete(__p);
    if (!a31)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_15:
  if (!a31)
  {
LABEL_21:
    v69 = (unint64_t *)STACK[0xB78];
    if ((unint64_t *)STACK[0xB78] == &STACK[0xB60])
    {
      v70 = 4;
      v69 = &STACK[0xB60];
    }
    else
    {
      if (!v69)
        goto LABEL_26;
      v70 = 5;
    }
    (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_26:
    operator delete(v61);
    if (a57)
      operator delete(a57);
    if (a59)
      operator delete(a59);
    if (a33)
      operator delete(a33);
    if (a61)
      operator delete(a61);
    v71 = (unint64_t *)STACK[0x428];
    if ((unint64_t *)STACK[0x428] == &STACK[0x410])
    {
      v72 = 4;
      v71 = &STACK[0x410];
    }
    else
    {
      if (!v71)
      {
        v73 = a36;
        goto LABEL_40;
      }
      v72 = 5;
    }
    v73 = a36;
    (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_40:
    if (v73)
      operator delete(v73);
    *(_QWORD *)(a42 + 592) = &off_1E42B5030;

    v74 = *(_QWORD **)(a42 + 584);
    if (v74 == (_QWORD *)(a42 + 560))
    {
      v75 = 4;
      v74 = (_QWORD *)(a42 + 560);
    }
    else
    {
      if (!v74)
        goto LABEL_47;
      v75 = 5;
    }
    (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_47:
    v76 = *(_QWORD **)(a42 + 552);
    if (v76 == (_QWORD *)(a42 + 528))
    {
      v77 = 4;
      v76 = (_QWORD *)(a42 + 528);
      v78 = a13;
    }
    else
    {
      v78 = a13;
      if (!v76)
        goto LABEL_52;
      v77 = 5;
    }
    (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_52:
    v79 = *(_QWORD **)(a42 + 504);
    if (v79)
    {
      v80 = a42;
      v81 = *(_QWORD **)(a42 + 512);
      v82 = *(void **)(a42 + 504);
      if (v81 != v79)
      {
        do
        {
          v81 -= 249;
          std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(v81);
        }
        while (v81 != v79);
        v80 = a42;
        v82 = *(void **)(a42 + 504);
      }
      *(_QWORD *)(v80 + 512) = v79;
      operator delete(v82);
      v78 = a13;
    }
    if ((_QWORD *)*a27 == v78)
    {
      v83 = 4;
      v84 = a16;
    }
    else
    {
      v84 = a16;
      if (!*a27)
        goto LABEL_62;
      v83 = 5;
      a13 = (_QWORD *)*a27;
    }
    (*(void (**)(void))(*a13 + 8 * v83))();
LABEL_62:
    v85 = *(_QWORD **)(a42 + 464);
    if (v85 == a12)
    {
      v86 = 4;
    }
    else
    {
      if (!v85)
        goto LABEL_67;
      v86 = 5;
      a12 = *(_QWORD **)(a42 + 464);
    }
    (*(void (**)(void))(*a12 + 8 * v86))();
LABEL_67:
    v87 = *(void **)(a42 + 408);
    if (v87)
    {
      *(_QWORD *)(a42 + 416) = v87;
      operator delete(v87);
    }
    v88 = *a9;
    if (*a9)
    {
      *(_QWORD *)(a42 + 392) = v88;
      operator delete(v88);
    }
    v89 = *(_QWORD **)(a42 + 352);
    if (v89 == v84)
    {
      v90 = 4;
    }
    else
    {
      if (!v89)
        goto LABEL_76;
      v90 = 5;
      v84 = *(_QWORD **)(a42 + 352);
    }
    (*(void (**)(_QWORD *))(*v84 + 8 * v90))(v84);
LABEL_76:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a42 + 312));
    v91 = *(std::__shared_weak_count **)(a42 + 8);
    if (v91)
    {
      std::__shared_weak_count::__release_weak(v91);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_20:
  operator delete(a31);
  goto LABEL_21;
}

void `anonymous namespace'::PathAnimator::_computeFrameForT(_anonymous_namespace_::PathAnimator *this, double a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  __double2 v17;
  __double2 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _anonymous_namespace_::PathAnimator *v24;
  double v25;

  v9 = *(_QWORD *)(a3 + 464);
  v25 = a2;
  if (v9
    && (v10 = v6,
        v11 = v7,
        v12 = v8,
        (*(void (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v25),
        v14 = *(_QWORD *)(a3 + 496),
        v25 = a2,
        v14))
  {
    v15 = v13;
    v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v14 + 48))(v14, &v25);
    v17 = __sincos_stret(v15 * 0.5);
    v18 = __sincos_stret(v16 * 0.5);
    v19 = -(v17.__sinval * v18.__sinval);
    v21 = *(double *)(a3 + 288);
    v20 = *(double *)(a3 + 296);
    v22 = *(double *)(a3 + 272);
    v23 = *(double *)(a3 + 280);
    *(_QWORD *)this = v10;
    *((_QWORD *)this + 1) = v11;
    *((_QWORD *)this + 2) = v12;
    *((double *)this + 3) = v18.__sinval * v17.__cosval * v20
                          + v22 * (v18.__cosval * v17.__cosval)
                          + v23 * v19
                          - v21 * (v18.__cosval * v17.__sinval);
    *((double *)this + 4) = v23 * (v18.__cosval * v17.__cosval)
                          - (v22 * v19
                           - v18.__cosval * v17.__sinval * v20)
                          + v21 * (v18.__sinval * v17.__cosval);
    *((double *)this + 5) = v19 * v20
                          + v22 * (v18.__cosval * v17.__sinval)
                          - v23 * (v18.__sinval * v17.__cosval)
                          + v21 * (v18.__cosval * v17.__cosval);
    *((double *)this + 6) = -(v22 * (v18.__sinval * v17.__cosval)
                            + v23 * (v18.__cosval * v17.__sinval)
                            + v21 * v19
                            - v18.__cosval * v17.__cosval * v20);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

void `anonymous namespace'::PathAnimator::~PathAnimator(id *this)
{
  _anonymous_namespace_::PathAnimator *v2;
  uint64_t v3;
  _anonymous_namespace_::PathAnimator *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  _anonymous_namespace_::PathAnimator *v9;
  uint64_t v10;
  _anonymous_namespace_::PathAnimator *v11;
  uint64_t v12;
  id v13;
  id v14;
  _anonymous_namespace_::PathAnimator *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  objc_msgSend(this[75], "stop");
  this[74] = &off_1E42B5030;

  v2 = (_anonymous_namespace_::PathAnimator *)this[73];
  if (v2 == (_anonymous_namespace_::PathAnimator *)(this + 70))
  {
    v3 = 4;
    v2 = (_anonymous_namespace_::PathAnimator *)(this + 70);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (_anonymous_namespace_::PathAnimator *)this[69];
  if (v4 == (_anonymous_namespace_::PathAnimator *)(this + 66))
  {
    v5 = 4;
    v4 = (_anonymous_namespace_::PathAnimator *)(this + 66);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  v6 = this[63];
  if (v6)
  {
    v7 = this[64];
    v8 = this[63];
    if (v7 != v6)
    {
      do
      {
        v7 -= 249;
        std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(v7);
      }
      while (v7 != v6);
      v8 = this[63];
    }
    this[64] = v6;
    operator delete(v8);
  }
  v9 = (_anonymous_namespace_::PathAnimator *)this[62];
  if (v9 == (_anonymous_namespace_::PathAnimator *)(this + 59))
  {
    v10 = 4;
    v9 = (_anonymous_namespace_::PathAnimator *)(this + 59);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (_anonymous_namespace_::PathAnimator *)this[58];
  if (v11 == (_anonymous_namespace_::PathAnimator *)(this + 55))
  {
    v12 = 4;
    v11 = (_anonymous_namespace_::PathAnimator *)(this + 55);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = this[51];
  if (v13)
  {
    this[52] = v13;
    operator delete(v13);
  }
  v14 = this[48];
  if (v14)
  {
    this[49] = v14;
    operator delete(v14);
  }
  v15 = (_anonymous_namespace_::PathAnimator *)this[44];
  if (v15 == (_anonymous_namespace_::PathAnimator *)(this + 41))
  {
    v16 = 4;
    v15 = (_anonymous_namespace_::PathAnimator *)(this + 41);
  }
  else
  {
    if (!v15)
      goto LABEL_35;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_35:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[39]);
  v17 = (std::__shared_weak_count *)this[1];
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

void sub_19F9D0DB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(_QWORD *)(v1 + 592) = &off_1E42B5030;

  v3 = *(_QWORD **)(v1 + 584);
  if (v3 == (_QWORD *)(v1 + 560))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 560);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(v1 + 552);
  if (v5 == (_QWORD *)(v1 + 528))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 + 528);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(v1 + 504);
  if (v7)
  {
    v8 = *(_QWORD **)(v1 + 512);
    v9 = *(void **)(v1 + 504);
    if (v8 != v7)
    {
      do
      {
        v8 -= 249;
        std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(v8);
      }
      while (v8 != v7);
      v9 = *(void **)(v1 + 504);
    }
    *(_QWORD *)(v1 + 512) = v7;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(v1 + 496);
  if (v10 == (_QWORD *)(v1 + 472))
  {
    v11 = 4;
    v10 = (_QWORD *)(v1 + 472);
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v12 = *(_QWORD **)(v1 + 464);
  if (v12 == (_QWORD *)(v1 + 440))
  {
    v13 = 4;
    v12 = (_QWORD *)(v1 + 440);
  }
  else
  {
    if (!v12)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_26:
  v14 = *(void **)(v1 + 408);
  if (v14)
  {
    *(_QWORD *)(v1 + 416) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v1 + 384);
  if (v15)
  {
    *(_QWORD *)(v1 + 392) = v15;
    operator delete(v15);
  }
  v16 = *(_QWORD **)(v1 + 352);
  if (v16 == (_QWORD *)(v1 + 328))
  {
    v17 = 4;
    v16 = (_QWORD *)(v1 + 328);
  }
  else
  {
    if (!v16)
      goto LABEL_35;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_35:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 312));
  v18 = *(std::__shared_weak_count **)(v1 + 8);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<md::mun::ViewId,unsigned int>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::pair<md::mun::ViewId,unsigned int> const*>,std::__wrap_iter<std::pair<md::mun::ViewId,unsigned int> const*>>(void **a1, uint64_t a2, uint64_t *a3, __int128 *a4, uint64_t a5)
{
  uint64_t *v6;
  _BYTE *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  __int128 *v19;
  _QWORD *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  char *i;
  __int128 v31;
  void *v32;
  uint64_t v33;
  __int128 *v34;
  _QWORD *v35;
  __int128 v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = (__int128 *)a1[1];
  v10 = (a2 - (uint64_t)*a1) / 24;
  v11 = (uint64_t)*a1 + 24 * v10;
  v12 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)v9) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v11) >> 3)) >= a5)
    {
      v18 = &a3[3 * a5];
      v20 = a1[1];
    }
    else
    {
      v18 = &a3[((uint64_t)v9 - v11) >> 3];
      if (v18 == (uint64_t *)a4)
      {
        v20 = a1[1];
      }
      else
      {
        v19 = (__int128 *)&a3[((uint64_t)v9 - v11) >> 3];
        v20 = a1[1];
        do
        {
          v21 = *v19;
          v20[2] = *((_QWORD *)v19 + 2);
          *(_OWORD *)v20 = v21;
          v20 += 3;
          v19 = (__int128 *)((char *)v19 + 24);
        }
        while (v19 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)v9 - v11 < 1)
        return;
    }
    v33 = v11 + 24 * a5;
    v34 = (__int128 *)&v20[-3 * a5];
    v35 = v20;
    if (v34 < v9)
    {
      v35 = v20;
      do
      {
        v36 = *v34;
        v35[2] = *((_QWORD *)v34 + 2);
        *(_OWORD *)v35 = v36;
        v35 += 3;
        v34 = (__int128 *)((char *)v34 + 24);
      }
      while (v34 < v9);
    }
    a1[1] = v35;
    if (v20 != (_QWORD *)v33)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - v33) >> 3);
      v38 = v20 - 1;
      v39 = 24 * v37;
      do
      {
        v40 = *(_QWORD *)(v11 + v39 - 24);
        *(_DWORD *)((char *)v38 - 9) = *(_DWORD *)(v11 + v39 - 17);
        *((_QWORD *)v38 - 2) = v40;
        *v38 = *(_DWORD *)(v11 + v39 - 8);
        v38 -= 6;
        v39 -= 24;
      }
      while (v39);
    }
    if (v18 != a3)
    {
      do
      {
        v41 = *v6;
        *(_DWORD *)(v11 + 7) = *(_DWORD *)((char *)v6 + 7);
        *(_QWORD *)v11 = v41;
        *(_DWORD *)(v11 + 16) = *((_DWORD *)v6 + 4);
        v6 += 3;
        v11 += 24;
      }
      while (v6 != v18);
    }
  }
  else
  {
    v13 = a5 - 0x5555555555555555 * (((char *)v9 - v8) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = (char *)operator new(24 * v16);
    }
    else
    {
      v17 = 0;
    }
    v22 = &v17[24 * v10];
    v23 = 24 * a5;
    v24 = &v22[24 * a5];
    v25 = v22;
    do
    {
      v26 = *(_OWORD *)v6;
      *((_QWORD *)v25 + 2) = v6[2];
      *(_OWORD *)v25 = v26;
      v25 += 24;
      v6 += 3;
      v23 -= 24;
    }
    while (v23);
    v27 = *a1;
    if (*a1 != (void *)v11)
    {
      v28 = v11;
      do
      {
        v29 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v22 - 1) = *(_QWORD *)(v28 - 8);
        *(_OWORD *)(v22 - 24) = v29;
        v22 -= 24;
        v28 -= 24;
      }
      while ((void *)v28 != v27);
      v9 = (__int128 *)a1[1];
    }
    for (i = &v17[24 * v16]; (__int128 *)v11 != v9; v11 += 24)
    {
      v31 = *(_OWORD *)v11;
      *((_QWORD *)v24 + 2) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v24 = v31;
      v24 += 24;
    }
    v32 = *a1;
    *a1 = v22;
    a1[1] = v24;
    a1[2] = i;
    if (v32)
      operator delete(v32);
  }
}

uint64_t `anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;

  v2 = *(std::__shared_weak_count **)(a1 + 184);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(char **)(a1 + 64);
    if (!v5)
      goto LABEL_19;
  }
  else
  {
LABEL_5:
    v5 = *(char **)(a1 + 64);
    if (!v5)
      goto LABEL_19;
  }
  v6 = *(char **)(a1 + 72);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = v6 - 1864;
      v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      v10 = (_QWORD *)*((_QWORD *)v6 - 221);
      if (v9 != v10)
      {
        do
        {
          v11 = (void *)v9[31];
          if (v11 != (void *)v9[33])
            free(v11);
          v9 += 36;
        }
        while (v9 != v10);
        v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      }
      if (v9 != *((_QWORD **)v6 - 220))
        free(v9);
      v6 -= 1864;
    }
    while (v8 != v5);
    v7 = *(char **)(a1 + 64);
  }
  *(_QWORD *)(a1 + 72) = v5;
  operator delete(v7);
LABEL_19:
  v12 = *(_QWORD **)(a1 + 56);
  if (v12 == (_QWORD *)(a1 + 32))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v12)
      goto LABEL_24;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_24:
  v14 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v14;
    operator delete(v14);
  }
  return a1;
}

void std::vector<md::mun::CollectionPoint>::__assign_with_size[abi:nn180100]<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>(char **a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a1[2];
  v7 = *a1;
  if (v6 == *a1)
  {
    if (v6)
    {
      v14 = a1[1];
      v15 = a1[2];
      if (v14 != v6)
      {
        do
        {
          v16 = v14 - 1864;
          v17 = (_QWORD *)*((_QWORD *)v14 - 222);
          v18 = (_QWORD *)*((_QWORD *)v14 - 221);
          if (v17 != v18)
          {
            do
            {
              v19 = (void *)v17[31];
              if (v19 != (void *)v17[33])
                free(v19);
              v17 += 36;
            }
            while (v17 != v18);
            v17 = (_QWORD *)*((_QWORD *)v14 - 222);
          }
          if (v17 != *((_QWORD **)v14 - 220))
            free(v17);
          v14 -= 1864;
        }
        while (v16 != v6);
        v15 = *a1;
      }
      a1[1] = v6;
      operator delete(v15);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v7 = (char *)operator new(0x748uLL);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = v7 + 1864;
    if (a2 == a3)
      goto LABEL_36;
    v20 = 0;
    do
    {
      v30 = a2 + v20;
      v31 = &v7[v20];
      *(_QWORD *)v31 = *(_QWORD *)(a2 + v20);
      *(_OWORD *)(v31 + 8) = *(_OWORD *)(a2 + v20 + 8);
      v32 = *(_QWORD *)(a2 + v20 + 32);
      *((_QWORD *)v31 + 3) = *(_QWORD *)(a2 + v20 + 24);
      *((_QWORD *)v31 + 4) = v32;
      *((_DWORD *)v31 + 10) = *(_DWORD *)(a2 + v20 + 40);
      *(_QWORD *)(v31 + 44) = *(_QWORD *)(a2 + v20 + 44);
      *(_OWORD *)(v31 + 72) = *(_OWORD *)(a2 + v20 + 72);
      *(_OWORD *)(v31 + 56) = *(_OWORD *)(a2 + v20 + 56);
      v33 = (uint64_t)&v7[v20 + 120];
      *((_QWORD *)v31 + 12) = v33;
      *((_QWORD *)v31 + 13) = v33;
      *((_QWORD *)v31 + 14) = 6;
      *((_QWORD *)v31 + 11) = v33;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v7[v20 + 88], *(__int128 **)(a2 + v20 + 88), *(__int128 **)(a2 + v20 + 96));
      *(_QWORD *)&v7[v20 + 1848] = *(_QWORD *)(a2 + v20 + 1848);
      *(_QWORD *)&v7[v20 + 1853] = *(_QWORD *)(a2 + v20 + 1853);
      v20 += 1864;
    }
    while (v30 + 1864 != a3);
    goto LABEL_35;
  }
  if (a1[1] == v7)
  {
    if (a2 == a3)
    {
LABEL_36:
      a1[1] = v7;
      return;
    }
    v20 = 0;
    do
    {
      v21 = a2 + v20;
      v22 = &v7[v20];
      *(_QWORD *)v22 = *(_QWORD *)(a2 + v20);
      v23 = *(_OWORD *)(a2 + v20 + 8);
      *((_QWORD *)v22 + 3) = *(_QWORD *)(a2 + v20 + 24);
      *(_OWORD *)(v22 + 8) = v23;
      v24 = *(_QWORD *)(a2 + v20 + 32);
      *((_DWORD *)v22 + 10) = *(_DWORD *)(a2 + v20 + 40);
      *((_QWORD *)v22 + 4) = v24;
      *(_QWORD *)(v22 + 44) = *(_QWORD *)(a2 + v20 + 44);
      v25 = *(_OWORD *)(a2 + v20 + 56);
      v26 = *(_OWORD *)(a2 + v20 + 72);
      v27 = (uint64_t)&v7[v20 + 120];
      *((_QWORD *)v22 + 11) = v27;
      v28 = &v7[v20 + 88];
      *((_OWORD *)v28 - 2) = v25;
      *((_OWORD *)v28 - 1) = v26;
      *((_QWORD *)v28 + 1) = v27;
      *((_QWORD *)v28 + 2) = v27;
      *((_QWORD *)v28 + 3) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v28, *(__int128 **)(a2 + v20 + 88), *(__int128 **)(a2 + v20 + 96));
      v29 = *(_QWORD *)(a2 + v20 + 1848);
      *(_QWORD *)&v7[v20 + 1853] = *(_QWORD *)(a2 + v20 + 1853);
      *(_QWORD *)&v7[v20 + 1848] = v29;
      v20 += 1864;
    }
    while (v21 + 1864 != a3);
LABEL_35:
    v7 += v20;
    goto LABEL_36;
  }
  v8 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*,md::mun::CollectionPoint*>(a2, a3, (uint64_t)v7);
  v9 = a1[1];
  if (v9 != (char *)v8)
  {
    do
    {
      v10 = v9 - 1864;
      v11 = (_QWORD *)*((_QWORD *)v9 - 222);
      v12 = (_QWORD *)*((_QWORD *)v9 - 221);
      if (v11 != v12)
      {
        do
        {
          v13 = (void *)v11[31];
          if (v13 != (void *)v11[33])
            free(v13);
          v11 += 36;
        }
        while (v11 != v12);
        v11 = (_QWORD *)*((_QWORD *)v9 - 222);
      }
      if (v11 != *((_QWORD **)v9 - 220))
        free(v11);
      v9 -= 1864;
    }
    while (v10 != (char *)v8);
  }
  a1[1] = (char *)v8;
}

void sub_19F9D164C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19F9D1654(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42C8288;
  return a1;
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42C8288;
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xD0uLL);
  *v2 = &off_1E42C8288;
  return v2;
}

void sub_19F9D170C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8288;
}

uint64_t std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 *v54;
  uint8_t buf[24];
  uint8_t *v56;
  void *__p[2];
  char *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[3];
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKMuninLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
  v2 = (id)GEOGetVectorKitVKMuninLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "Preloading %zu initial points", buf, 0xCu);
  }

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v4 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PathPreload", (const char *)&unk_1A0189141, buf, 2u);
  }

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    if (v6 == a1 + 40)
    {
      v56 = buf;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 24))(v6, buf);
    }
    else
    {
      v56 = (uint8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    v56 = 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  v58 = 0;
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    v10 = 0x63FB9AEB1FDCD759 * (v9 >> 3);
    if (v10 >= 0x2328A701194539)
      abort();
    v11 = (char *)operator new(v9);
    v12 = 0;
    __p[0] = v11;
    __p[1] = v11;
    v58 = &v11[1864 * v10];
    do
    {
      v13 = v7 + v12;
      v14 = &v11[v12];
      *(_QWORD *)v14 = *(_QWORD *)(v7 + v12);
      v15 = *(_OWORD *)(v7 + v12 + 8);
      *((_QWORD *)v14 + 3) = *(_QWORD *)(v7 + v12 + 24);
      *(_OWORD *)(v14 + 8) = v15;
      v16 = *(_QWORD *)(v7 + v12 + 32);
      *((_DWORD *)v14 + 10) = *(_DWORD *)(v7 + v12 + 40);
      *((_QWORD *)v14 + 4) = v16;
      *(_QWORD *)(v14 + 44) = *(_QWORD *)(v7 + v12 + 44);
      v17 = *(_OWORD *)(v7 + v12 + 56);
      v18 = *(_OWORD *)(v7 + v12 + 72);
      v19 = (uint64_t)&v11[v12 + 120];
      *((_QWORD *)v14 + 11) = v19;
      v20 = &v11[v12 + 88];
      *((_OWORD *)v20 - 2) = v17;
      *((_OWORD *)v20 - 1) = v18;
      *((_QWORD *)v20 + 1) = v19;
      *((_QWORD *)v20 + 2) = v19;
      *((_QWORD *)v20 + 3) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v20, *(__int128 **)(v7 + v12 + 88), *(__int128 **)(v7 + v12 + 96));
      v21 = *(_QWORD *)(v7 + v12 + 1848);
      *(_QWORD *)&v11[v12 + 1853] = *(_QWORD *)(v7 + v12 + 1853);
      *(_QWORD *)&v11[v12 + 1848] = v21;
      v12 += 1864;
    }
    while (v13 + 1864 != v8);
    __p[1] = &v11[v12];
  }
  v59 = *(_OWORD *)(a1 + 96);
  v60 = *(_QWORD *)(a1 + 112);
  v61 = *(_OWORD *)(a1 + 120);
  v62 = *(_QWORD *)(a1 + 136);
  v63 = *(_OWORD *)(a1 + 144);
  v64 = *(_QWORD *)(a1 + 160);
  v65 = *(_QWORD *)(a1 + 168);
  v22 = *(_QWORD *)(a1 + 184);
  v23 = *(_QWORD *)(a1 + 192);
  v66 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)&v67 = v22;
  *((_QWORD *)&v67 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_QWORD *)(a1 + 200);
  v68 = v26;
  v70 = 0;
  v27 = operator new(0xB0uLL);
  v28 = v27;
  *v27 = &off_1E42D96C8;
  if (v56)
  {
    if (v56 == buf)
    {
      v27[4] = v27 + 1;
      (*(void (**)(uint8_t *))(*(_QWORD *)buf + 24))(buf);
      v26 = v68;
    }
    else
    {
      v27[4] = v56;
      v56 = 0;
    }
  }
  else
  {
    v27[4] = 0;
  }
  *(_OWORD *)(v28 + 5) = *(_OWORD *)__p;
  v28[7] = v58;
  __p[1] = 0;
  v58 = 0;
  __p[0] = 0;
  *((_OWORD *)v28 + 4) = v59;
  v28[10] = v60;
  *(_OWORD *)(v28 + 11) = v61;
  v28[13] = v62;
  v28[16] = v64;
  *((_OWORD *)v28 + 7) = v63;
  v28[17] = v65;
  v28[18] = v66;
  *(_OWORD *)(v28 + 19) = v67;
  v67 = 0uLL;
  v28[21] = v26;
  v70 = v28;
  md::MuninSceneLogic::addPreloadViews(v5, (const void **)(a1 + 8), v69);
  v29 = v70;
  if (v70 == v69)
  {
    v30 = 4;
    v29 = v69;
    goto LABEL_31;
  }
  if (v70)
  {
    v30 = 5;
LABEL_31:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (char *)__p[0];
  if (__p[0])
  {
    v35 = (char *)__p[1];
    v36 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v37 = v35 - 1864;
        v38 = (_QWORD *)*((_QWORD *)v35 - 222);
        v39 = (_QWORD *)*((_QWORD *)v35 - 221);
        if (v38 != v39)
        {
          do
          {
            v40 = (void *)v38[31];
            if (v40 != (void *)v38[33])
              free(v40);
            v38 += 36;
          }
          while (v38 != v39);
          v38 = (_QWORD *)*((_QWORD *)v35 - 222);
        }
        if (v38 != *((_QWORD **)v35 - 220))
          free(v38);
        v35 -= 1864;
      }
      while (v37 != v34);
      v36 = __p[0];
    }
    __p[1] = v34;
    operator delete(v36);
  }
  v41 = v56;
  if (v56 == buf)
  {
    v42 = 4;
    v41 = buf;
  }
  else
  {
    if (!v56)
      goto LABEL_56;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_56:
  if (GEOGetVectorKitVKMuninLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
  v43 = (id)GEOGetVectorKitVKMuninLog_log;
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    v44 = 0x367D6E020E64C149
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 512) - *(_QWORD *)(*(_QWORD *)(a1 + 184) + 504)) >> 3);
    LODWORD(v53) = 134217984;
    *(_QWORD *)((char *)&v53 + 4) = v44;
    _os_log_impl(&dword_19F029000, v43, OS_LOG_TYPE_INFO, "Preloading %zu optional points", (uint8_t *)&v53, 0xCu);
  }

  v45 = *(_QWORD *)(a1 + 184);
  v46 = *(_QWORD *)(v45 + 504);
  v47 = *(_QWORD *)(v45 + 512);
  if (v46 != v47)
  {
    v48 = v46 + 1888;
    do
    {
      if (*(_QWORD *)v48 != *(_QWORD *)(v48 + 8))
      {
        v52 = *(_QWORD *)(a1 + 32);
        ++*(_DWORD *)(*(_QWORD *)(v52 + 520) + 16);
        *(_QWORD *)&v53 = &off_1E42D9680;
        *((_QWORD *)&v53 + 1) = v52;
        v54 = &v53;
        md::MuninSceneLogic::addPreloadViews(v52, (const void **)v48, &v53);
        v49 = v54;
        if (v54 == &v53)
        {
          v49 = &v53;
          v50 = 4;
        }
        else
        {
          if (!v54)
            goto LABEL_64;
          v50 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
      }
LABEL_64:
      v51 = v48 + 104;
      v48 += 1992;
    }
    while (v51 != v47);
  }
}

void sub_19F9D1DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char *__p, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  char *v47;
  uint64_t v48;

  v35 = *(_QWORD **)(v33 - 104);
  if (v35 == v32)
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 128);
  }
  else
  {
    if (!v35)
    {
LABEL_6:
      v37 = a32;
      if (a32)
      {
        p_shared_owners = (unint64_t *)&a32->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = __p;
      if (__p)
      {
        v41 = a18;
        v42 = __p;
        if (a18 != __p)
        {
          do
          {
            v43 = v41 - 1864;
            v44 = (_QWORD *)*((_QWORD *)v41 - 222);
            v45 = (_QWORD *)*((_QWORD *)v41 - 221);
            if (v44 != v45)
            {
              do
              {
                v46 = (void *)v44[31];
                if (v46 != (void *)v44[33])
                  free(v46);
                v44 += 36;
              }
              while (v44 != v45);
              v44 = (_QWORD *)*((_QWORD *)v41 - 222);
            }
            if (v44 != *((_QWORD **)v41 - 220))
              free(v44);
            v41 -= 1864;
          }
          while (v43 != v40);
          v42 = __p;
        }
        a18 = v40;
        operator delete(v42);
      }
      v47 = a16;
      if (a16 == &a13)
      {
        v48 = 4;
        v47 = &a13;
      }
      else
      {
        if (!a16)
          goto LABEL_30;
        v48 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_30:
      _Unwind_Resume(exception_object);
    }
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
  goto LABEL_6;
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#2},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#2},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9680;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#2},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9680;
  a2[1] = v2;
  return result;
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#2},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::operator()(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    if (GEOGetVectorKitVKMuninLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
    v5 = (id)GEOGetVectorKitVKMuninLog_log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a3 + 24);
      v7 = 134217984;
      v8 = v6;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_INFO, "Preloaded %zu views.", (uint8_t *)&v7, 0xCu);
    }

    md::MuninSceneLogic::addActiveViews(*(_QWORD *)(a1 + 8), *(uint64_t **)(a3 + 16));
  }
}

_QWORD *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = &off_1E42D96C8;
  v2 = (std::__shared_weak_count *)a1[20];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[5];
  if (v5)
  {
    v6 = a1[6];
    v7 = (void *)a1[5];
    if (v6 != v5)
    {
      do
      {
        v8 = v6 - 1864;
        v9 = *(_QWORD **)(v6 - 1776);
        v10 = *(_QWORD **)(v6 - 1768);
        if (v9 != v10)
        {
          do
          {
            v11 = (void *)v9[31];
            if (v11 != (void *)v9[33])
              free(v11);
            v9 += 36;
          }
          while (v9 != v10);
          v9 = *(_QWORD **)(v6 - 1776);
        }
        if (v9 != *(_QWORD **)(v6 - 1760))
          free(v9);
        v6 -= 1864;
      }
      while (v8 != v5);
      v7 = (void *)a1[5];
    }
    a1[6] = v5;
    operator delete(v7);
  }
  v12 = (_QWORD *)a1[4];
  if (v12 == a1 + 1)
  {
    v13 = 4;
    v12 = a1 + 1;
    goto LABEL_24;
  }
  if (v12)
  {
    v13 = 5;
LABEL_24:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::~__func(_QWORD *a1)
{
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &off_1E42D96C8;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, v3);
LABEL_6:
  std::vector<md::mun::CollectionPoint>::vector((_QWORD *)v2 + 5, (uint64_t *)(a1 + 40));
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *((_OWORD *)v2 + 7) = *(_OWORD *)(a1 + 112);
  *((_QWORD *)v2 + 16) = *(_QWORD *)(a1 + 128);
  *((_QWORD *)v2 + 17) = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  *((_QWORD *)v2 + 18) = *(_QWORD *)(a1 + 144);
  *((_QWORD *)v2 + 19) = v5;
  *((_QWORD *)v2 + 20) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *((_QWORD *)v2 + 21) = *(_QWORD *)(a1 + 168);
  return v2;
}

void sub_19F9D2328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a2 = &off_1E42D96C8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = a2 + 8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2 + 8);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  result = std::vector<md::mun::CollectionPoint>::vector((_QWORD *)(a2 + 40), (uint64_t *)(a1 + 40));
  v6 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v7;
  v8 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v8;
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 160) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  return result;
}

void sub_19F9D2468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::operator()(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  void *v17[2];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    if (GEOGetVectorKitVKMuninLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKMuninLog_onceToken, &__block_literal_global_10_11776);
    v13 = (id)GEOGetVectorKitVKMuninLog_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = *(void **)(a3 + 24);
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = v14;
      _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_INFO, "Finished loading required views (n: %zu) - start animation", (uint8_t *)__p, 0xCu);
    }

    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, a1 + 40, a3);
      return;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
    __break(1u);
    return;
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v17 = 0u;
  v18 = 1065353216;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v4 + 48))(v4, a1 + 40, __p);
  v5 = v17[0];
  if (v17[0])
  {
    while (1)
    {
      v7 = *(_BYTE **)v5;
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 17);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
          break;
      }
      if (v5[112])
        goto LABEL_12;
LABEL_13:
      v11 = (void *)*((_QWORD *)v5 + 4);
      if (v11 != *((void **)v5 + 6))
        free(v11);
      operator delete(v5);
      v5 = v7;
      if (!v7)
        goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5[112])
      goto LABEL_13;
LABEL_12:
    v5[112] = 0;
    goto LABEL_13;
  }
LABEL_4:
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
}

void sub_19F9D26A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F9D26B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p)
{
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = *(void **)v12;
      v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 17);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (*((_BYTE *)v12 + 112))
        *((_BYTE *)v12 + 112) = 0;
      v17 = (void *)*((_QWORD *)v12 + 4);
      if (v17 != *((void **)v12 + 6))
        free(v17);
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (!a9)
    _Unwind_Resume(exception_object);
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(void)::{lambda(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)#1},std::allocator<gdc::RequestCompletionStatus>,void ()($_1,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)>::destroy[abi:nn180100](uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = (_QWORD *)a1;
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)v1[4];
    if (!v5)
      goto LABEL_19;
  }
  else
  {
LABEL_5:
    v5 = *(char **)(a1 + 32);
    if (!v5)
      goto LABEL_19;
  }
  v6 = (char *)v1[5];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = v6 - 1864;
      v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      v10 = (_QWORD *)*((_QWORD *)v6 - 221);
      if (v9 != v10)
      {
        do
        {
          v11 = (void *)v9[31];
          if (v11 != (void *)v9[33])
            free(v11);
          v9 += 36;
        }
        while (v9 != v10);
        v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      }
      if (v9 != *((_QWORD **)v6 - 220))
        free(v9);
      v6 -= 1864;
    }
    while (v8 != v5);
    v7 = (char *)v1[4];
  }
  v1[5] = v5;
  operator delete(v7);
LABEL_19:
  v12 = (_QWORD *)v1[3];
  if (v12 == v1)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      return;
    v13 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v13))(v1);
}

_QWORD *std::vector<md::mun::CollectionPoint>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x63FB9AEB1FDCD759 * (v5 >> 3);
    if (v6 >= 0x2328A701194539)
      abort();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[1864 * v6];
    do
    {
      v9 = v3 + v8;
      v10 = &v7[v8];
      *(_QWORD *)v10 = *(_QWORD *)(v3 + v8);
      v11 = *(_OWORD *)(v3 + v8 + 8);
      *((_QWORD *)v10 + 3) = *(_QWORD *)(v3 + v8 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      v12 = *(_QWORD *)(v3 + v8 + 32);
      *((_DWORD *)v10 + 10) = *(_DWORD *)(v3 + v8 + 40);
      *((_QWORD *)v10 + 4) = v12;
      *(_QWORD *)(v10 + 44) = *(_QWORD *)(v3 + v8 + 44);
      v13 = *(_OWORD *)(v3 + v8 + 56);
      v14 = *(_OWORD *)(v3 + v8 + 72);
      v15 = (uint64_t)&v7[v8 + 120];
      *((_QWORD *)v10 + 11) = v15;
      v16 = &v7[v8 + 88];
      *((_OWORD *)v16 - 2) = v13;
      *((_OWORD *)v16 - 1) = v14;
      *((_QWORD *)v16 + 1) = v15;
      *((_QWORD *)v16 + 2) = v15;
      *((_QWORD *)v16 + 3) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v16, *(__int128 **)(v3 + v8 + 88), *(__int128 **)(v3 + v8 + 96));
      v17 = *(_QWORD *)(v3 + v8 + 1848);
      *(_QWORD *)&v7[v8 + 1853] = *(_QWORD *)(v3 + v8 + 1853);
      *(_QWORD *)&v7[v8 + 1848] = v17;
      v8 += 1864;
    }
    while (v9 + 1864 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_19F9D29D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = (char *)operator new(v6);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[8 * (v6 >> 3)];
    v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
    memcpy(v7, v5, v8);
    *(_QWORD *)(a1 + 8) = &v7[v8];
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 56);
  if (!v9)
    goto LABEL_7;
  if (v9 != a2 + 32)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_7:
    *(_QWORD *)(a1 + 56) = v9;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
LABEL_9:
  std::vector<md::mun::CollectionPoint>::vector((_QWORD *)(a1 + 64), (uint64_t *)(a2 + 64));
  v10 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  v11 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v11;
  v12 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v13 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

void sub_19F9D2B54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (!*(_QWORD *)v1)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

uint64_t geo::_retain_ptr<VKQuickDynamicAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5030;

  return a1;
}

void geo::_retain_ptr<VKQuickDynamicAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5030;

  JUMPOUT(0x1A1AF4E00);
}

void geo::ConstantStepSimpleSpline<`anonymous namespace'::PathCurve>::position(_QWORD *a1, double a2)
{
  double v2;
  double *v3;
  double *v4;
  unint64_t v5;
  double *v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  double v15;
  int v16;
  uint64_t v17;
  int v18;
  float v19;
  std::__shared_weak_count *v20;
  double v21;
  int v22;

  v2 = 0.0;
  if (a2 > 0.0)
  {
    v2 = 1.0;
    if (a2 < 1.0)
    {
      v3 = (double *)a1[7];
      v4 = (double *)a1[8];
      if (v4 != v3)
      {
        v5 = v4 - v3;
        v6 = (double *)a1[7];
        do
        {
          v7 = v5 >> 1;
          v8 = &v6[v5 >> 1];
          v10 = *v8;
          v9 = v8 + 1;
          v5 += ~(v5 >> 1);
          if (v10 > a2)
            v5 = v7;
          else
            v6 = v9;
        }
        while (v5);
        if (v4 != v6)
        {
          v11 = v6 - v3;
          if (v11 <= 1)
            v11 = 1;
          v12 = v11;
          v13 = (a2 - v3[v12 - 1]) / (v3[v12] - v3[v12 - 1]);
          v2 = fmax(fmin(*(double *)(a1[10] + v12 * 8 - 8)+ (*(double *)(a1[10] + v12 * 8) - *(double *)(a1[10] + v12 * 8 - 8)) * v13, 1.0), 0.0);
        }
      }
    }
  }
  v14 = a1[5];
  v15 = (double)v14;
  v16 = (int)(v2 * (double)v14);
  v17 = a1[3];
  v18 = v14 - 1;
  if (v18 >= v16)
    v18 = v16;
  v19 = (v2 - (double)v18 / v15) / ((double)(v18 + 1) / v15 - (double)v18 / v15);
  v22 = v18;
  v21 = v19;
  if (v17)
  {
    (*(void (**)(uint64_t, int *, double *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

void std::__shared_ptr_pointer<`anonymous namespace'::PathAnimator *,std::shared_ptr<`anonymous namespace'::PathAnimator>::__shared_ptr_default_delete<`anonymous namespace'::PathAnimator,`anonymous namespace'::PathAnimator>,std::allocator<`anonymous namespace'::PathAnimator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

id *std::__shared_ptr_pointer<`anonymous namespace'::PathAnimator *,std::shared_ptr<`anonymous namespace'::PathAnimator>::__shared_ptr_default_delete<`anonymous namespace'::PathAnimator,`anonymous namespace'::PathAnimator>,std::allocator<`anonymous namespace'::PathAnimator>>::__on_zero_shared(uint64_t a1)
{
  id *result;

  result = *(id **)(a1 + 24);
  if (result)
  {
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void `anonymous namespace'::polynomialFit(_anonymous_namespace_ *this, double *a2, float64x2_t *a3, unsigned int a4, uint64_t a5, float64x2_t *a6, float64x2_t *a7, float64x2_t *a8)
{
  size_t v13;
  double v14;
  void *v15;
  double *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  double *v24;
  double *v25;
  size_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t *v38;
  double v39;
  char *v40;
  BOOL v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  double v49;
  uint64_t v50;
  float64x2_t *v51;
  uint64_t v52;
  float64x2_t v53;
  size_t v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  double *v61;
  double v62;
  double *v63;
  double *v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  const double *v73;
  float64x2_t *v74;
  unsigned int v75;
  double *v76;
  unint64_t v77;
  double v78;
  char *v79;
  double *v80;
  unint64_t v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  unint64_t v92;
  unint64_t v93;
  double *v94;
  double *v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  BOOL v102;
  BOOL v103;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t *v107;
  float64x2_t *v108;
  unint64_t v109;
  unint64_t v110;
  double *v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  signed int v116;
  uint64_t v117;
  char *v118;
  double *v119;
  unint64_t v120;
  unint64_t v121;
  double *v122;
  const double *v123;
  int v124;
  double v125;
  double v126;
  double v127;
  BOOL v128;
  BOOL v129;
  float64x2_t v131;
  float64x2_t v132;
  unsigned int v133;
  float64x2_t *v134;
  unint64_t v135;
  float64x2_t *v136;
  unint64_t v137;
  double *v138;
  int v139;
  double v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  float64x2_t v146;
  float64x2_t v147;
  unsigned int v148;
  float64x2_t *v149;
  float64x2_t *v150;
  unint64_t v151;
  float64x2_t *v152;
  uint64_t v153;
  size_t v154;
  uint64_t v155;
  double *v156;
  double *v157;
  double v158;
  uint64_t v159;
  double *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  double *v166;
  double v167;
  uint64_t i;
  double *v169;
  double v170;
  uint64_t v171;
  double *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  double v179;
  double *v180;
  uint64_t v181;
  double *v182;
  double *v183;
  double v184;
  double *v185;
  uint64_t v186;
  double v187;
  double v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  double *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  uint64_t v199;
  double *v200;
  float64x2_t *v201;
  uint64_t v202;
  double *v203;
  float64x2_t *v204;
  float64x2_t v205;
  float64x2_t *v206;
  float64x2_t *v207;
  uint64_t v208;
  float64x2_t v209;
  double v210;
  double *v211;
  double *v212;
  uint64_t v213;
  double v214;
  double v215;
  double v216;
  float64x2_t *v217;
  float64x2_t *v218;
  uint64_t v219;
  float64x2_t v220;
  size_t v222;
  void *v223;
  const double *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  int v230;

  v222 = 8 * a5 + 16;
  v223 = operator new(v222);
  bzero(v223, v222);
  v225 = a5;
  v13 = (a5 + 1);
  v14 = *a2;
  v15 = malloc_type_calloc((v13 * v13), 8uLL, 0x100004000313F17uLL);
  v226 = malloc_type_malloc(8 * (((a5 + 2) * v13) >> 1), 0x100004000313F17uLL);
  v227 = 8 * v13;
  v16 = (double *)malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
  v17 = (float64x2_t *)malloc_type_calloc(v13, 8uLL, 0x100004000313F17uLL);
  v18 = (float64x2_t *)malloc_type_calloc(v13, 8uLL, 0x100004000313F17uLL);
  v230 = a4 << (a7 != 0);
  v19 = (float64x2_t *)malloc_type_calloc(v230 * (int)v13, 8uLL, 0x100004000313F17uLL);
  v20 = v19;
  if ((int)a4 >= 1)
  {
    v21 = 0;
    v22 = 8 * v230;
    v23 = (char *)&v19->f64[a4 + (unint64_t)v22 / 8];
    v24 = (double *)v19;
    do
    {
      v20->f64[v21] = 1.0;
      v25 = v24;
      v26 = v13 - 1;
      do
      {
        v27 = (a2[v21] - v14) * *v25;
        v25 = (double *)((char *)v25 + v22);
        *v25 = v27;
        --v26;
      }
      while (v26);
      if (a7)
      {
        v28 = 0;
        v20->f64[v21 + a4] = 0.0;
        v29 = 1;
        do
        {
          *(double *)&v23[v28] = *(double *)((char *)v24 + v28) * (double)(int)v29++;
          v28 += v22;
        }
        while (v13 != v29);
      }
      if (a6)
      {
        v30 = v24;
        v31 = v13;
        do
        {
          *v30 = *v30 * a6->f64[v21];
          v30 = (double *)((char *)v30 + v22);
          --v31;
        }
        while (v31);
        if (a7)
        {
          v32 = 8 * a4;
          v33 = v13;
          do
          {
            *(double *)((char *)v24 + v32) = *(double *)((char *)v24 + v32) * a8->f64[v21];
            v32 += v22;
            --v33;
          }
          while (v33);
        }
      }
      ++v21;
      ++v24;
      v23 += 8;
    }
    while (v21 != a4);
    v34 = 0;
    v35 = 0;
    if (v230 <= 1)
      v36 = 1;
    else
      v36 = v230;
    v37 = 8 * v230;
    v38 = v20 + 1;
    while (1)
    {
      v39 = v18->f64[v35];
      if (v36 >= 4
        && ((v40 = (char *)&v18->f64[v35], v40 < (char *)&v20->f64[v36] + v37 * v35)
          ? (v41 = (char *)v20 + v37 * v35 >= v40 + 8)
          : (v41 = 1),
            v41))
      {
        v42 = 0uLL;
        v43 = (float64x2_t)*(unint64_t *)&v18->f64[v35];
        v44 = v38;
        v45 = v36 & 0x7FFFFFFC;
        do
        {
          v43 = vmlaq_f64(v43, v44[-1], v44[-1]);
          v42 = vmlaq_f64(v42, *v44, *v44);
          v44 += 2;
          v45 -= 4;
        }
        while (v45);
        v39 = vaddvq_f64(vaddq_f64(v42, v43));
        v18->f64[v35] = v39;
        v46 = v36 & 0x7FFFFFFC;
        if (v46 == v36)
          goto LABEL_20;
      }
      else
      {
        v46 = 0;
      }
      v47 = v36 - v46;
      v48 = &v20->f64[v46 + v34];
      do
      {
        v49 = *v48++;
        v39 = v39 + v49 * v49;
        v18->f64[v35] = v39;
        --v47;
      }
      while (v47);
LABEL_20:
      v18->f64[v35++] = sqrt(v39);
      v38 = (float64x2_t *)((char *)v38 + v37);
      v34 += v230;
      if (v35 == v13)
        goto LABEL_42;
    }
  }
  if (v225 <= 2)
  {
    v50 = 0;
LABEL_40:
    v54 = v13 - v50;
    v55 = &v18->f64[v50];
    do
    {
      *v55 = sqrt(*v55);
      ++v55;
      --v54;
    }
    while (v54);
    goto LABEL_42;
  }
  v50 = v13 & 0xFFFFFFFC;
  v51 = v18 + 1;
  v52 = v50;
  do
  {
    v53 = vsqrtq_f64(*v51);
    v51[-1] = vsqrtq_f64(v51[-1]);
    *v51 = v53;
    v51 += 2;
    v52 -= 4;
  }
  while (v52);
  if (v50 != v13)
    goto LABEL_40;
LABEL_42:
  if ((int)a4 <= 0)
  {
    bzero(v15, 8 * v225 + 8 + (8 * v225 + 8) * v225);
    if (v225 > 2
      && (v17 >= (float64x2_t *)((char *)v18 + v227) || v18 >= (float64x2_t *)((char *)v17 + v227)))
    {
      v153 = v13 & 0xFFFFFFFC;
      v217 = v18 + 1;
      v218 = v17 + 1;
      v219 = v153;
      do
      {
        v220 = vdivq_f64(*v218, *v217);
        v218[-1] = vdivq_f64(v218[-1], v217[-1]);
        *v218 = v220;
        v217 += 2;
        v218 += 2;
        v219 -= 4;
      }
      while (v219);
      if (v153 == v13)
        goto LABEL_158;
    }
    else
    {
      v153 = 0;
    }
    v154 = v13 - v153;
    v155 = v153;
    v156 = &v18->f64[v153];
    v157 = &v17->f64[v155];
    do
    {
      v158 = *v156++;
      *v157 = *v157 / v158;
      ++v157;
      --v154;
    }
    while (v154);
  }
  else
  {
    if (v230 <= 1)
      v56 = 1;
    else
      v56 = v230;
    v57 = 8 * v230;
    if (v56 >= 4)
    {
      v199 = 0;
      v200 = (double *)((char *)v20->f64 + ((8 * v56) & 0x7FFFFFFE0));
      v201 = v20 + 1;
      do
      {
        v202 = 0;
        v203 = (double *)((char *)v20->f64 + ((8 * v56) & 0x7FFFFFFE0));
        v204 = v20 + 1;
        do
        {
          v205 = 0uLL;
          v206 = v204;
          v207 = v201;
          v208 = v56 & 0x7FFFFFFC;
          v209 = 0uLL;
          do
          {
            v205 = vmlaq_f64(v205, v206[-1], v207[-1]);
            v209 = vmlaq_f64(v209, *v206, *v207);
            v207 += 2;
            v206 += 2;
            v208 -= 4;
          }
          while (v208);
          v210 = vaddvq_f64(vaddq_f64(v209, v205));
          if (v56 != (v56 & 0x7FFFFFFC))
          {
            v211 = v203;
            v212 = v200;
            v213 = v56 - (v56 & 0x7FFFFFFC);
            do
            {
              v214 = *v211++;
              v215 = v214;
              v216 = *v212++;
              v210 = v210 + v216 * v215;
              --v213;
            }
            while (v213);
          }
          *((double *)v15 + v202 + v199 * v13) = v210 / (v18->f64[v199] * v18->f64[v202]);
          ++v202;
          v204 = (float64x2_t *)((char *)v204 + v57);
          v203 = (double *)((char *)v203 + v57);
        }
        while (v202 != v13);
        ++v199;
        v201 = (float64x2_t *)((char *)v201 + v57);
        v200 = (double *)((char *)v200 + v57);
      }
      while (v199 != v13);
    }
    else
    {
      v58 = 0;
      v59 = (double *)v20;
      do
      {
        v60 = 0;
        v61 = (double *)v20;
        do
        {
          v62 = 0.0;
          v63 = v61;
          v64 = v59;
          v65 = v56;
          do
          {
            v66 = *v63++;
            v67 = v66;
            v68 = *v64++;
            v62 = v62 + v68 * v67;
            --v65;
          }
          while (v65);
          *((double *)v15 + v60 + v58 * v13) = v62 / (v18->f64[v58] * v18->f64[v60]);
          ++v60;
          v61 = (double *)((char *)v61 + v57);
        }
        while (v60 != v13);
        ++v58;
        v59 = (double *)((char *)v59 + v57);
      }
      while (v58 != v13);
    }
    v69 = 0;
    v70 = 0;
    v71 = a4 - 1;
    v72 = a4;
    v224 = &a7->f64[v72];
    v73 = &a3->f64[v72];
    v74 = v20 + 1;
    v75 = a4;
    do
    {
      v76 = &v17->f64[v70];
      v77 = (unint64_t)(v76 + 1);
      v78 = *v76;
      v79 = (char *)v20 + v57 * v70;
      v80 = (double *)((char *)&v20->f64[v72] + v57 * v70);
      v81 = 0;
      if (a6)
      {
        if (a4 <= 7uLL)
          goto LABEL_79;
        v82 = v76 < v73 && v77 > (unint64_t)a3;
        v83 = v82;
        v84 = v76 < &a6->f64[v72] && v77 > (unint64_t)a6;
        v85 = v84;
        if ((unint64_t)v79 < v77 && v76 < v80)
          goto LABEL_79;
        if (v83)
          goto LABEL_79;
        if (v85)
          goto LABEL_79;
        v87 = 0uLL;
        v88 = (float64x2_t)*(unint64_t *)v76;
        v89 = v74;
        v90 = a3 + 1;
        v91 = a6 + 1;
        v92 = a4 - (unint64_t)(a4 & 3);
        do
        {
          v88 = vmlaq_f64(v88, v91[-1], vmulq_f64(v90[-1], v89[-1]));
          v87 = vmlaq_f64(v87, *v91, vmulq_f64(*v90, *v89));
          v91 += 2;
          v90 += 2;
          v89 += 2;
          v92 -= 4;
        }
        while (v92);
        v78 = vaddvq_f64(vaddq_f64(v87, v88));
        v17->f64[v70] = v78;
        v81 = a4 - (unint64_t)(a4 & 3);
        if ((a4 & 3) != 0)
        {
LABEL_79:
          v93 = a4 - v81;
          v94 = &a6->f64[v81];
          v95 = &a3->f64[v81];
          v96 = &v20->f64[v81 + v69];
          do
          {
            v97 = *v96++;
            v98 = v97;
            v99 = *v95++;
            v100 = v99 * v98;
            v101 = *v94++;
            v78 = v78 + v100 * v101;
            v17->f64[v70] = v78;
            --v93;
          }
          while (v93);
        }
      }
      else
      {
        if (a4 <= 7uLL)
          goto LABEL_98;
        v102 = v76 < v73 && v77 > (unint64_t)a3;
        v103 = v102;
        if ((unint64_t)v79 < v77 && v76 < v80)
          goto LABEL_98;
        if (v103)
          goto LABEL_98;
        v105 = 0uLL;
        v106 = (float64x2_t)*(unint64_t *)v76;
        v107 = v74;
        v108 = a3 + 1;
        v109 = a4 - (unint64_t)(a4 & 3);
        do
        {
          v106 = vmlaq_f64(v106, v107[-1], v108[-1]);
          v105 = vmlaq_f64(v105, *v107, *v108);
          v108 += 2;
          v107 += 2;
          v109 -= 4;
        }
        while (v109);
        v78 = vaddvq_f64(vaddq_f64(v105, v106));
        v17->f64[v70] = v78;
        v81 = a4 - (unint64_t)(a4 & 3);
        if ((a4 & 3) != 0)
        {
LABEL_98:
          v110 = a4 - v81;
          v111 = &a3->f64[v81];
          v112 = &v20->f64[v81 + v69];
          do
          {
            v113 = *v112++;
            v114 = v113;
            v115 = *v111++;
            v78 = v78 + v115 * v114;
            v17->f64[v70] = v78;
            --v110;
          }
          while (v110);
        }
      }
      if (a7)
      {
        v116 = a4 + v70 * v230;
        v117 = v116;
        v118 = (char *)v20 + v117 * 8;
        v119 = &v20->f64[v72 + v117];
        v120 = 0;
        if (a6)
        {
          if (a4 <= 0xBuLL || (int)(v116 + a4 - 1) < v116 || HIDWORD(v71))
            goto LABEL_103;
          v120 = 0;
          v141 = v76 < &a8->f64[v72] && v77 > (unint64_t)a8;
          v142 = v141;
          v143 = v76 >= v119 || (unint64_t)v118 >= v77;
          v144 = !v143;
          if (v77 > (unint64_t)a7 && v76 < v224)
            goto LABEL_103;
          if (v142)
            goto LABEL_103;
          if (v144)
            goto LABEL_103;
          v146 = 0uLL;
          v147 = (float64x2_t)*(unint64_t *)&v78;
          v148 = v75;
          v149 = a7 + 1;
          v150 = a8 + 1;
          v151 = a4 - (unint64_t)(a4 & 3);
          do
          {
            v152 = (float64x2_t *)((char *)v20 + 8 * (int)v148);
            v147 = vmlaq_f64(v147, v150[-1], vmulq_f64(v149[-1], *v152));
            v146 = vmlaq_f64(v146, *v150, vmulq_f64(*v149, v152[1]));
            v150 += 2;
            v149 += 2;
            v148 += 4;
            v151 -= 4;
          }
          while (v151);
          v78 = vaddvq_f64(vaddq_f64(v146, v147));
          v17->f64[v70] = v78;
          v120 = a4 - (unint64_t)(a4 & 3);
          if ((a4 & 3) != 0)
          {
LABEL_103:
            v121 = a4 - v120;
            v122 = &a8->f64[v120];
            v123 = &a7->f64[v120];
            v124 = v75 + v120;
            do
            {
              v125 = *v123++;
              v126 = v125;
              v127 = *v122++;
              v78 = v78 + v126 * v20->f64[v124] * v127;
              v17->f64[v70] = v78;
              ++v124;
              --v121;
            }
            while (v121);
          }
        }
        else
        {
          if (a4 <= 0xBuLL || (int)(v116 + a4 - 1) < v116 || HIDWORD(v71))
            goto LABEL_124;
          v120 = 0;
          v128 = v76 >= v119 || (unint64_t)v118 >= v77;
          v129 = !v128;
          if (v77 > (unint64_t)a7 && v76 < v224)
            goto LABEL_124;
          if (v129)
            goto LABEL_124;
          v131 = 0uLL;
          v132 = (float64x2_t)*(unint64_t *)&v78;
          v133 = v75;
          v134 = a7 + 1;
          v135 = a4 - (unint64_t)(a4 & 3);
          do
          {
            v136 = (float64x2_t *)((char *)v20 + 8 * (int)v133);
            v132 = vmlaq_f64(v132, *v136, v134[-1]);
            v131 = vmlaq_f64(v131, v136[1], *v134);
            v134 += 2;
            v133 += 4;
            v135 -= 4;
          }
          while (v135);
          v78 = vaddvq_f64(vaddq_f64(v131, v132));
          v17->f64[v70] = v78;
          v120 = a4 - (unint64_t)(a4 & 3);
          if ((a4 & 3) != 0)
          {
LABEL_124:
            v137 = a4 - v120;
            v138 = &a7->f64[v120];
            v139 = v75 + v120;
            do
            {
              v140 = *v138++;
              v78 = v78 + v140 * v20->f64[v139];
              v17->f64[v70] = v78;
              ++v139;
              --v137;
            }
            while (v137);
          }
        }
      }
      v17->f64[v70] = v78 / v18->f64[v70];
      ++v70;
      v74 = (float64x2_t *)((char *)v74 + v57);
      v69 += v230;
      v75 += v230;
    }
    while (v70 != v13);
  }
LABEL_158:
  v159 = 0;
  v160 = (double *)v226;
  v161 = (char *)(v226 + 1);
  v162 = 1;
  v163 = 8;
  v164 = 16;
  v165 = v226;
  v166 = (double *)v15;
  do
  {
    v167 = *v166;
    *v160 = *v166;
    if (v159)
    {
      for (i = 0; i != v159; ++i)
      {
        v167 = v167 - *(double *)&v165[i] * *(double *)&v165[i];
        *v160 = v167;
      }
    }
    v170 = *v166;
    v169 = v166 + 1;
    *v160 = sqrt(fmax(v167, v170 * 0.000000001));
    v171 = v159 + 1;
    if (v159 + 1 < v13)
    {
      v172 = &v160[v159 + 1];
      v173 = v161;
      v174 = v164;
      v175 = v162;
      v176 = v162;
      if (v159)
      {
        do
        {
          v177 = 0;
          v178 = *v169;
          *v172 = *v169;
          do
          {
            v178 = v178 - *(double *)&v165[v177] * *(double *)&v173[8 * v177];
            *v172 = v178;
            ++v177;
          }
          while (v159 != v177);
          *v172 = v178 / *v160;
          v172 += ++v175;
          ++v169;
          v173 += v174;
          v174 += 8;
        }
        while (v175 != v13);
      }
      else
      {
        do
        {
          v179 = *v169++;
          *v172 = v179;
          *v172 = v179 / *v160;
          v172 += ++v176;
        }
        while (v13 != v176);
      }
    }
    v166 = &v169[v171];
    v160 += v159 + 2;
    ++v162;
    v165 = (_QWORD *)((char *)v165 + v163);
    v163 += 8;
    v161 += v164;
    v164 += 8;
    ++v159;
  }
  while (v171 != v13);
  v180 = (double *)malloc_type_calloc(v13, 8uLL, 0x100004000313F17uLL);
  v181 = 0;
  v182 = (double *)v226;
  do
  {
    v184 = v17->f64[v181];
    v180[v181] = v184;
    if (v181)
    {
      v185 = v180;
      v186 = v181;
      v183 = v182;
      do
      {
        v187 = *v183++;
        v188 = v187;
        v189 = *v185++;
        v184 = v184 - v189 * v188;
        v180[v181] = v184;
        --v186;
      }
      while (v186);
    }
    else
    {
      v183 = v182;
    }
    v182 = v183 + 1;
    v180[v181++] = v184 / *v183;
  }
  while (v181 != v13);
  v190 = 0;
  v191 = v13;
  do
  {
    v192 = (v191 - 1);
    v193 = v180[v192];
    v16[v192] = v193;
    if (v191 < (uint64_t)v13)
    {
      v194 = &v183[v191];
      v195 = v190;
      do
      {
        v193 = v193 - v16[v13 + v195] * *v194;
        v16[v192] = v193;
        v194 += v13 + v195++ + 1;
      }
      while ((_DWORD)v195);
    }
    v16[v192] = v193 / *v183;
    v183 -= v191;
    --v190;
    v82 = v191-- <= 1;
  }
  while (!v82);
  free(v180);
  v196 = 0;
  *((double *)v223 + v13) = v14;
  do
  {
    *((double *)v223 + v196) = v16[v196] / v18->f64[v196];
    ++v196;
  }
  while (v13 != v196);
  free(v15);
  free(v226);
  free(v16);
  free(v17);
  free(v18);
  free(v20);
  v197 = (char *)operator new(v222);
  memcpy(v197, v223, v222);
  *((_QWORD *)this + 3) = 0;
  v198 = operator new(0x28uLL);
  *v198 = &off_1E42C82D0;
  v198[1] = v197;
  v198[2] = &v197[v222];
  v198[3] = &v197[v222];
  v198[4] = v225;
  *((_QWORD *)this + 3) = v198;
  operator delete(v223);
}

void sub_19F9D3AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  void *v15;

  operator delete(v15);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void geo::refine<gm::Matrix<double,3,1>>(_QWORD **a1)
{
  _QWORD *v2;
  double *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  double *v20;
  BOOL v22;
  const double *v23;
  unint64_t v24;
  const double *v25;
  const double *v26;
  const double *v27;
  double *v28;
  uint64_t v29;
  double *v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  _QWORD *v35;
  __int128 v36;
  float64x2x3_t v37;
  float64x2x3_t v38;
  float64x2x3_t v39;

  v35 = 0;
  v36 = 0uLL;
  std::vector<gm::Matrix<double,3,1>>::__append((void **)&v35, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  v2 = v35;
  v3 = (double *)*a1;
  v4 = (char *)a1[1] - (char *)*a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  *v35 = **a1;
  v2[1] = *((_QWORD *)v3 + 1);
  v2[2] = *((_QWORD *)v3 + 2);
  v6 = 3 * (v5 - 1);
  v7 = &v3[v6];
  v8 = &v2[v6];
  *v8 = *(_QWORD *)v7;
  v8[1] = *((_QWORD *)v7 + 1);
  v8[2] = *((_QWORD *)v7 + 2);
  if (v5 - 1 >= 2)
  {
    v9 = v5 - 2;
    __asm { FMOV            V0.2D, #0.5 }
    if (v5 - 2 <= 5)
      goto LABEL_3;
    v15 = !is_mul_ok(v5 - 3, 0x18uLL);
    v16 = 3 * (v5 - 3);
    v17 = (unint64_t)&v2[v16 + 4];
    v18 = (unint64_t)&v2[v16 + 5];
    v19 = (double *)(v2 + 3);
    v20 = (double *)&v2[v16 + 3];
    v14 = 1;
    v22 = v18 >= (unint64_t)(v2 + 5) && v17 >= (unint64_t)(v2 + 4) && v20 >= v19;
    if (!v22 || v15)
      goto LABEL_19;
    if (v19 < (double *)((char *)v3 + v4) && v3 < (double *)((char *)v2 + v4 - 24))
    {
LABEL_3:
      v14 = 1;
      goto LABEL_19;
    }
    v23 = v3 + 3;
    v24 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v25 = v3 + 3;
    do
    {
      v26 = v23 - 3;
      v27 = v23 + 3;
      v37 = vld3q_f64(v25);
      v25 += 6;
      v38 = vld3q_f64(v26);
      v39 = vld3q_f64(v27);
      v37.val[0] = vmlaq_f64(v37.val[0], _Q0, vmlaq_f64(vnegq_f64(v37.val[0]), _Q0, vaddq_f64(v39.val[0], v38.val[0])));
      v37.val[1] = vmlaq_f64(v37.val[1], _Q0, vmlaq_f64(vnegq_f64(v37.val[1]), _Q0, vaddq_f64(v39.val[1], v38.val[1])));
      v37.val[2] = vmlaq_f64(v37.val[2], _Q0, vmlaq_f64(vnegq_f64(v37.val[2]), _Q0, vaddq_f64(v39.val[2], v38.val[2])));
      vst3q_f64(v19, v37);
      v19 += 6;
      v23 = v25;
      v24 -= 2;
    }
    while (v24);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
    {
      v14 = v9 | 1;
LABEL_19:
      v28 = (double *)&v2[3 * v14 + 2];
      v29 = ~v14 - 0x5555555555555555 * (v4 >> 3);
      v30 = &v3[3 * v14];
      do
      {
        v31 = v30[2] + -(v30[2] - (v30[5] + *(v30 - 1)) * 0.5) * 0.5;
        v32 = *(float64x2_t *)v30;
        v33 = *(float64x2_t *)(v30 - 3);
        v34 = *(float64x2_t *)(v30 + 3);
        v30 += 3;
        *((float64x2_t *)v28 - 1) = vmlaq_f64(v32, _Q0, vmlaq_f64(vnegq_f64(v32), _Q0, vaddq_f64(v34, v33)));
        *v28 = v31;
        v28 += 3;
        --v29;
      }
      while (v29);
    }
  }
  *a1 = v2;
  *(_OWORD *)(a1 + 1) = v36;
  operator delete(v3);
}

void sub_19F9D3CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void geo::ConstantStepSimpleSpline<`anonymous namespace'::PathCurve>::tangent(_QWORD *a1, double a2)
{
  double v3;
  double *v4;
  double *v5;
  unint64_t v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  double v16;
  int v17;
  int v18;
  int v19;
  float v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  int v26;

  v3 = 0.0;
  if (a2 > 0.0)
  {
    v3 = 1.0;
    if (a2 < 1.0)
    {
      v4 = (double *)a1[7];
      v5 = (double *)a1[8];
      if (v5 != v4)
      {
        v6 = v5 - v4;
        v7 = (double *)a1[7];
        do
        {
          v8 = v6 >> 1;
          v9 = &v7[v6 >> 1];
          v11 = *v9;
          v10 = v9 + 1;
          v6 += ~(v6 >> 1);
          if (v11 > a2)
            v6 = v8;
          else
            v7 = v10;
        }
        while (v6);
        if (v5 != v7)
        {
          v12 = v7 - v4;
          if (v12 <= 1)
            v12 = 1;
          v13 = v12;
          v14 = (a2 - v4[v13 - 1]) / (v4[v13] - v4[v13 - 1]);
          v3 = fmax(fmin(*(double *)(a1[10] + v13 * 8 - 8)+ (*(double *)(a1[10] + v13 * 8) - *(double *)(a1[10] + v13 * 8 - 8)) * v14, 1.0), 0.0);
        }
      }
    }
  }
  v15 = a1[5];
  v16 = (double)v15;
  v17 = (int)(v3 * (double)v15);
  v18 = v15 - 1;
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = (v3 - (double)v19 / v16) / ((double)(v19 + 1) / v16 - (double)v19 / v16);
  v21 = v20;
  v22 = v20 + 0.001;
  v23 = a1[3];
  if (v22 >= 1.0)
  {
    v26 = v19;
    v25 = v21;
    if (v23)
    {
      (*(void (**)(uint64_t, int *, double *))(*(_QWORD *)v23 + 48))(v23, &v26, &v25);
      v24 = a1[3];
      v26 = v19;
      v25 = v21 + -0.001;
      if (v24)
        goto LABEL_22;
    }
  }
  else
  {
    v26 = v19;
    v25 = v22;
    if (v23)
    {
      (*(void (**)(uint64_t, int *, double *))(*(_QWORD *)v23 + 48))(v23, &v26, &v25);
      v24 = a1[3];
      v26 = v19;
      v25 = v21;
      if (v24)
      {
LABEL_22:
        (*(void (**)(uint64_t, int *, double *))(*(_QWORD *)v24 + 48))(v24, &v26, &v25);
        return;
      }
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
}

_QWORD *`anonymous namespace'::AngleCurve::AngleCurve(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  float64x2_t *v4;
  size_t v5;
  char *v6;
  float64x2_t *v7;
  char *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  char *v11;
  float64x2_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  float64x2_t *v27;
  unint64_t v28;
  float64x2_t *v29;
  float64_t v30;
  float64x2_t *v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  float64x2_t *__p;
  unint64_t v50;
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  a1[3] = 0;
  v2 = *(_QWORD **)a2;
  v51 = *(_QWORD **)(a2 + 8);
  v3 = (uint64_t)v51 - *(_QWORD *)a2;
  if (v3 < 0)
    abort();
  v4 = (float64x2_t *)operator new((unint64_t)v3 >> 1);
  v5 = 8 * (v3 >> 4);
  memset_pattern16(v4, &xmmword_19FFB63A0, v5);
  v4->f64[v5 / 8 - 1] = 1000.0;
  __p = v4;
  v4->f64[0] = 1000.0;
  v6 = (char *)operator new((unint64_t)v3 >> 1);
  v7 = (float64x2_t *)operator new((unint64_t)v3 >> 1);
  v8 = &v6[v5];
  v9 = (float64x2_t *)((char *)v7 + v5);
  v10 = v7;
  v11 = v6;
  do
  {
    if (v6 < v8)
    {
      *(_QWORD *)v6 = *v2;
      v6 += 8;
      if (v7 < v9)
        goto LABEL_3;
      goto LABEL_25;
    }
    v13 = (v6 - v11) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    if ((v8 - v11) >> 2 > v14)
      v14 = (v8 - v11) >> 2;
    if ((unint64_t)(v8 - v11) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v50 = (unint64_t)v9;
    if (v15)
    {
      if (v15 >> 61)
        goto LABEL_80;
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v13];
    *(_QWORD *)v17 = *v2;
    v18 = v17 + 8;
    if (v6 != v11)
    {
      v19 = v6 - 8 - v11;
      if (v19 < 0x168)
      {
        v20 = v6;
        goto LABEL_21;
      }
      if (&v16[v6 - v11 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v6 - v11 - 8])
      {
        v20 = v6;
        do
        {
LABEL_21:
          v21 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v20 != v11);
        goto LABEL_22;
      }
      if (&v6[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        v20 = v6;
        goto LABEL_21;
      }
      if ((unint64_t)(v11 - v16) < 0x20)
      {
        v20 = v6;
        goto LABEL_21;
      }
      v37 = (v19 >> 3) + 1;
      v20 = &v6[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
      v38 = &v16[8 * v13 - 16];
      v39 = (__int128 *)(v6 - 16);
      v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v39;
        *(v38 - 1) = *(v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 2;
        v40 -= 4;
      }
      while (v40);
      v17 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
    }
LABEL_22:
    v8 = &v16[8 * v15];
    if (v11)
      operator delete(v11);
    v11 = v17;
    v6 = v18;
    v9 = (float64x2_t *)v50;
    if ((unint64_t)v7 < v50)
    {
LABEL_3:
      v7->f64[0] = (float64_t)v2[1];
      v12 = (float64x2_t *)&v7->f64[1];
      goto LABEL_4;
    }
LABEL_25:
    v22 = ((char *)v7 - (char *)v10) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      abort();
    if (((char *)v9 - (char *)v10) >> 2 > v23)
      v23 = ((char *)v9 - (char *)v10) >> 2;
    if ((unint64_t)((char *)v9 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
    {
      if (v24 >> 61)
LABEL_80:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v25 = v24;
      v26 = operator new(8 * v24);
      v24 = v25;
    }
    else
    {
      v26 = 0;
    }
    v27 = (float64x2_t *)&v26[8 * v22];
    v27->f64[0] = (float64_t)v2[1];
    v12 = (float64x2_t *)&v27->f64[1];
    if (v7 == v10)
    {
      v9 = (float64x2_t *)&v26[8 * v24];
      if (!v10)
        goto LABEL_41;
LABEL_40:
      v31 = v9;
      operator delete(v10);
      v9 = v31;
      goto LABEL_41;
    }
    v28 = (char *)&v7[-1].f64[1] - (char *)v10;
    if (v28 < 0x168
      || &v26[(char *)v7 - (char *)v10 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v26[(char *)v7 - (char *)v10 - 8]
      || (char *)&v7[-1].f64[1] - (v28 & 0xFFFFFFFFFFFFFFF8) > (char *)&v7[-1].f64[1]
      || (unint64_t)((char *)v10 - v26) < 0x20)
    {
      v29 = v7;
      do
      {
LABEL_38:
        v30 = v29[-1].f64[1];
        v29 = (float64x2_t *)((char *)v29 - 8);
        v27[-1].f64[1] = v30;
        v27 = (float64x2_t *)((char *)v27 - 8);
      }
      while (v29 != v10);
      goto LABEL_39;
    }
    v32 = (v28 >> 3) + 1;
    v29 = (float64x2_t *)((char *)v7 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL));
    v33 = &v26[8 * v22 - 16];
    v34 = (__int128 *)&v7[-1];
    v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 2;
      v35 -= 4;
    }
    while (v35);
    v27 = (float64x2_t *)((char *)v27 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL));
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_38;
LABEL_39:
    v9 = (float64x2_t *)&v26[8 * v24];
    if (v10)
      goto LABEL_40;
LABEL_41:
    v10 = v27;
LABEL_4:
    v2 += 2;
    v7 = v12;
  }
  while (v2 != v51);
  v42 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v42 == a1)
  {
    v43 = 4;
    v42 = a1;
LABEL_65:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
  else if (v42)
  {
    v43 = 5;
    goto LABEL_65;
  }
  if (v53)
  {
    if (v53 != v52)
    {
      a1[3] = v53;
      goto LABEL_75;
    }
    a1[3] = a1;
    (*(void (**)(_QWORD *, _QWORD *))(v52[0] + 24))(v52, a1);
    v44 = v53;
    if (v53 == v52)
    {
      v45 = 4;
      v44 = v52;
LABEL_74:
      (*(void (**)(void))(*v44 + 8 * v45))();
    }
    else if (v53)
    {
      v45 = 5;
      goto LABEL_74;
    }
  }
  else
  {
    a1[3] = 0;
  }
LABEL_75:
  if (v10)
    operator delete(v10);
  if (v11)
    operator delete(v11);
  operator delete(__p);
  return a1;
}

void sub_19F9D4418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void *__p)
{
  void *v11;
  void *v12;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  if (v12)
    operator delete(v12);
  if (v11)
    operator delete(v11);
  operator delete(__p);
  v14 = (_QWORD *)a10[3];
  if (v14 == a10)
  {
    v15 = a10;
    v16 = 4;
  }
  else
  {
    if (!v14)
      goto LABEL_10;
    v16 = 5;
    v15 = (_QWORD *)a10[3];
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_10:
  _Unwind_Resume(a1);
}

void std::deque<`anonymous namespace'::PathAnimator::_pickRequiredPoints(BOOL *)::Path,std::allocator<`anonymous namespace'::PathAnimator::_pickRequiredPoints(BOOL *)::Path>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_103:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)a1;
  v17 = *(char **)(a1 + 8);
  v20 = *(char **)(a1 + 16);
  v19 = *(char **)(a1 + 24);
  v21 = v20 - v17;
  v22 = (v20 - v17) >> 3;
  v23 = (uint64_t)&v19[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v17 != v18)
    {
      v43 = v17;
      goto LABEL_85;
    }
    v68 = (v19 - v17) >> 2;
    if (v20 == v17)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_103;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v20 != v17)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v17;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v17;
        if ((unint64_t)(v76 - v17) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v17 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v17);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_103;
            }
            goto LABEL_5;
          }
          v75 = &v17[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v17)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v19 == v18)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_103;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v20 == v17)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        goto LABEL_103;
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v17 = *(char **)(a1 + 8);
      v20 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v20 != v17)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v20 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      goto LABEL_103;
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_19F9D4A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<`anonymous namespace'::PathAnimator::_pickRequiredPoints(BOOL *)::Path,std::allocator<`anonymous namespace'::PathAnimator::_pickRequiredPoints(BOOL *)::Path>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZN12_GLOBAL__N_112PathAnimatorC2EPN2md13MapDataAccessERKN3geo14RigidTransformIddEEONSt3__16vectorINS1_3mun15CollectionPointENS9_9allocatorISC_EEEERKNS4_10GeocentricIdEERKNS1_13MuninSettingsEhbb_block_invoke(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float *v12;
  float *v13;
  unint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  BOOL v18;
  unint64_t v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  BOOL v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BYTE v43[3984];
  uint64_t v44;
  std::__shared_weak_count *v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(double *)(v2 + 616);
  v4 = *(double *)(v2 + 640);
  v5 = *(double *)(v2 + 648);
  if (v4 - v3 * v4 <= v5)
  {
    v9 = (v5 / v4 + v3 + -1.0) / (v5 / v4);
    v10 = fmax(*(double *)(v2 + 632) - v9 * v9 * *(double *)(v2 + 632) * v9, 0.2);
    *(double *)(v2 + 624) = v10;
    v7 = fmin(v10 * a2 / v4 + v3, 1.0);
    *(double *)(v2 + 616) = v7;
  }
  else
  {
    v6 = *(double *)(v2 + 624);
    v7 = v3 + v6 * a2 / v4;
    *(double *)(v2 + 616) = v7;
    v8 = v6 + *(double *)(a1 + 40) * a2;
    *(double *)(v2 + 624) = v8;
    *(double *)(v2 + 632) = v8;
  }
  v11 = v7;
  v12 = *(float **)(v2 + 304);
  v13 = (float *)(v2 + 312);
  if (v12 != (float *)(v2 + 312))
  {
    v14 = 0;
    v15 = *(float **)(v2 + 304);
    do
    {
      v16 = (float *)*((_QWORD *)v15 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(float **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (float *)*((_QWORD *)v15 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v18);
      }
      ++v14;
      v15 = v17;
    }
    while (v17 != v13);
    do
    {
      v19 = v14 >> 1;
      v20 = v12;
      if (v14 != 1)
      {
        v22 = v14 >> 1;
        v23 = v12;
        do
        {
          v24 = (float *)*((_QWORD *)v23 + 1);
          if (v24)
          {
            do
            {
              v20 = v24;
              v24 = *(float **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v20 = (float *)*((_QWORD *)v23 + 2);
              v18 = *(_QWORD *)v20 == (_QWORD)v23;
              v23 = v20;
            }
            while (!v18);
          }
          v23 = v20;
          v27 = v22-- <= 1;
        }
        while (!v27);
      }
      if (v20[9] <= v11)
      {
        v21 = (float *)*((_QWORD *)v20 + 1);
        if (v21)
        {
          do
          {
            v12 = v21;
            v21 = *(float **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v12 = (float *)*((_QWORD *)v20 + 2);
            v18 = *(_QWORD *)v12 == (_QWORD)v20;
            v20 = v12;
          }
          while (!v18);
        }
        v19 = v14 + ~v19;
      }
      v14 = v19;
    }
    while (v19);
  }
  if (v12 == v13 || ((v25 = v12[8], v26 = v12[9], v25 <= v11) ? (v27 = v26 <= v11) : (v27 = 1), v27))
  {
    v28 = *(_QWORD *)(v2 + 320) - 1;
    v29 = 1.0;
  }
  else
  {
    v28 = *((_QWORD *)v12 + 5);
    v29 = 0.0;
    if (v25 != v26)
      v29 = (float)(fminf(v26, v11) - v25) / (float)(v26 - v25);
  }
  v30 = *(_QWORD *)(v2 + 208);
  if (v28 != v30)
    *(_QWORD *)(v2 + 208) = v28;
  v31 = *(std::__shared_weak_count **)(v2 + 8);
  v44 = *(_QWORD *)v2;
  if (!v31 || (v32 = std::__shared_weak_count::lock(v31), (v45 = v32) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    goto LABEL_59;
  }
  v33 = v32;
  v34 = *(double *)(v2 + 616);
  v35 = *(_QWORD *)(v2 + 552);
  v48 = v28;
  v49 = v2;
  v46 = v34;
  v47 = v29;
  if (!v35)
    goto LABEL_59;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t *, float *, float *))(*(_QWORD *)v35 + 48))(v35, &v49, v43, &v48, &v47, &v46);
  if (v28 == v30)
    goto LABEL_48;
  v36 = *(_QWORD *)(v2 + 504) + 1992 * *(_QWORD *)(v2 + 208);
  v37 = *(_QWORD *)(v2 + 584);
  v48 = *(_QWORD *)(v2 + 208);
  v49 = v2;
  if (!v37)
  {
LABEL_59:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *, _BYTE *))(*(_QWORD *)v37 + 48))(v37, &v49, &v48, v43);
LABEL_48:
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v44 = 0;
  v45 = 0;
  do
    v39 = __ldaxr(p_shared_owners);
  while (__stlxr(v39 - 1, p_shared_owners));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  v40 = v45;
  if (v45)
  {
    v41 = (unint64_t *)&v45->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_19F9D4EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::PointSegment *`anonymous namespace'::PointSegment::PointSegment(_anonymous_namespace_::PointSegment *this, const md::mun::PointView *a2, const md::mun::PointView *a3)
{
  md::mun::PointView *v5;

  v5 = md::mun::PointView::PointView(this, a2);
  md::mun::PointView::PointView((md::mun::PointView *)((char *)v5 + 1992), a3);
  return this;
}

void sub_19F9D4F58(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v3 = (void *)v1[239];
  if (v3 == (void *)v1[241])
  {
    v4 = (void *)v1[236];
    if (!v4)
      goto LABEL_3;
  }
  else
  {
    free(v3);
    v4 = (void *)v1[236];
    if (!v4)
    {
LABEL_3:
      v5 = (void *)v1[233];
      if (!v5)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v1[237] = v4;
  operator delete(v4);
  v5 = (void *)v1[233];
  if (!v5)
  {
LABEL_5:
    v6 = (_QWORD *)v1[11];
    v7 = (_QWORD *)v1[12];
    if (v6 != v7)
    {
      do
      {
        v8 = (void *)v6[31];
        if (v8 != (void *)v6[33])
          free(v8);
        v6 += 36;
      }
      while (v6 != v7);
      v6 = (_QWORD *)v1[11];
    }
    if (v6 != (_QWORD *)v1[13])
      free(v6);
    _Unwind_Resume(exception_object);
  }
LABEL_4:
  v1[234] = v5;
  operator delete(v5);
  goto LABEL_5;
}

md::mun::PointView *md::mun::PointView::PointView(md::mun::PointView *this, const md::mun::PointView *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  size_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v4;
  v5 = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_QWORD *)this + 4) = v5;
  *(_QWORD *)((char *)this + 44) = *(_QWORD *)((char *)a2 + 44);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  *((_QWORD *)this + 11) = (char *)this + 120;
  v8 = (_QWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 72) = v7;
  *((_QWORD *)this + 12) = (char *)this + 120;
  *((_QWORD *)this + 13) = (char *)this + 120;
  *((_QWORD *)this + 14) = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)this + 88, *((__int128 **)a2 + 11), *((__int128 **)a2 + 12));
  v9 = *((_QWORD *)a2 + 231);
  *(_QWORD *)((char *)v8 + 1765) = *(_QWORD *)((char *)a2 + 1853);
  v8[220] = v9;
  v8[222] = 0;
  v8[224] = 0;
  v8[223] = 0;
  v10 = (_BYTE *)*((_QWORD *)a2 + 233);
  v11 = (_BYTE *)*((_QWORD *)a2 + 234);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) > 0xAAAAAAAAAAAAAAALL)
      abort();
    v13 = (char *)operator new(v12);
    *((_QWORD *)this + 233) = v13;
    *((_QWORD *)this + 234) = v13;
    *((_QWORD *)this + 235) = &v13[8 * (v12 >> 3)];
    v14 = 24 * ((v12 - 24) / 0x18uLL) + 24;
    memcpy(v13, v10, v14);
    *((_QWORD *)this + 234) = &v13[v14];
  }
  *((_QWORD *)this + 238) = 0;
  *((_OWORD *)this + 118) = 0u;
  v15 = (_BYTE *)*((_QWORD *)a2 + 236);
  v16 = (_BYTE *)*((_QWORD *)a2 + 237);
  v17 = v16 - v15;
  if (v16 != v15)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 3) > 0xAAAAAAAAAAAAAAALL)
      abort();
    v18 = (char *)operator new(v17);
    *((_QWORD *)this + 236) = v18;
    *((_QWORD *)this + 237) = v18;
    *((_QWORD *)this + 238) = &v18[8 * (v17 >> 3)];
    v19 = 24 * ((v17 - 24) / 0x18uLL) + 24;
    memcpy(v18, v15, v19);
    *((_QWORD *)this + 237) = &v18[v19];
  }
  v20 = (char *)this + 1944;
  *((_QWORD *)this + 239) = (char *)this + 1944;
  *((_QWORD *)this + 240) = (char *)this + 1944;
  *((_QWORD *)this + 241) = (char *)this + 1944;
  *((_QWORD *)this + 242) = 6;
  v21 = (uint64_t *)*((_QWORD *)a2 + 239);
  v22 = (char *)*((_QWORD *)a2 + 240);
  v23 = v22 - (char *)v21;
  v24 = (v22 - (char *)v21) >> 3;
  if ((unint64_t)(v22 - (char *)v21) >= 0x31)
  {
    if (v24 <= 8)
      v25 = 8;
    else
      v25 = (v22 - (char *)v21) >> 3;
    v20 = (char *)malloc_type_malloc(8 * v25, 0x100004087EB8081uLL);
    v26 = (uint64_t *)*((_QWORD *)this + 239);
    v27 = (char *)*((_QWORD *)this + 240);
    if (v26 == (uint64_t *)v27)
      goto LABEL_20;
    v28 = v27 - (char *)v26 - 8;
    if (v28 < 0x18)
    {
      v29 = v20;
    }
    else
    {
      v29 = v20;
      if ((unint64_t)(v20 - (char *)v26) >= 0x20)
      {
        v30 = (v28 >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v20[v31];
        v32 = (__int128 *)(v26 + 2);
        v33 = v20 + 16;
        v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_20;
        v26 = (uint64_t *)((char *)v26 + v31);
      }
    }
    do
    {
      v36 = *v26++;
      *(_QWORD *)v29 = v36;
      v29 += 8;
    }
    while (v26 != (uint64_t *)v27);
LABEL_20:
    *((_QWORD *)this + 239) = v20;
    *((_QWORD *)this + 240) = v20;
    *((_QWORD *)this + 242) = v25;
  }
  if (v21 != (uint64_t *)v22)
  {
    if ((unint64_t)(v23 - 8) < 0x18)
    {
      v39 = v20;
    }
    else if ((unint64_t)(v20 - (char *)v21) < 0x20)
    {
      v39 = v20;
    }
    else
    {
      v37 = ((unint64_t)(v23 - 8) >> 3) + 1;
      v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v39 = &v20[v38];
      v40 = (__int128 *)(v21 + 2);
      v41 = v20 + 16;
      v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v40;
        *(v41 - 1) = *(v40 - 1);
        *v41 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_31;
      v21 = (uint64_t *)((char *)v21 + v38);
    }
    do
    {
      v44 = *v21++;
      *(_QWORD *)v39 = v44;
      v39 += 8;
    }
    while (v21 != (uint64_t *)v22);
LABEL_31:
    v20 = (char *)*((_QWORD *)this + 240);
  }
  *((_QWORD *)this + 240) = &v20[8 * v24];
  return this;
}

void sub_19F9D534C(_Unwind_Exception *a1)
{
  md::mun::CollectionPoint *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 237) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v2 + 1776);
  if (v6)
  {
    *((_QWORD *)v1 + 234) = v6;
    operator delete(v6);
  }
  md::mun::CollectionPoint::~CollectionPoint(v1);
  _Unwind_Resume(a1);
}

uint64_t md::mun::PointView::PointView(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  *(_QWORD *)result = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 44) = *(_QWORD *)(a2 + 44);
  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 56) = v4;
  v5 = result + 120;
  *(_QWORD *)(result + 88) = result + 120;
  v6 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(result + 104) = result + 120;
  v7 = *(__int128 **)(a2 + 104);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 96) = result + 120;
  if (v6 != v7)
  {
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(result + 88) = v6;
    *(_QWORD *)(result + 96) = v8;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    goto LABEL_3;
  }
  *(_QWORD *)(result + 96) = v5 + *(_QWORD *)(a2 + 96) - (_QWORD)v6;
  v12 = *(__int128 **)(a2 + 96);
  if (v6 != v12)
  {
    v13 = 0;
    v14 = (_OWORD *)(result + 416);
    v15 = result + 400;
    do
    {
      v17 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v17;
      v18 = *((_QWORD *)v6 + 3);
      *(_DWORD *)(v5 + 32) = *((_DWORD *)v6 + 8);
      *(_QWORD *)(v5 + 24) = v18;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)((char *)v6 + 36);
      v19 = *(__int128 *)((char *)v6 + 44);
      v20 = *(__int128 *)((char *)v6 + 60);
      v21 = *(__int128 *)((char *)v6 + 76);
      *(_OWORD *)(v5 + 92) = *(__int128 *)((char *)v6 + 92);
      *(_OWORD *)(v5 + 76) = v21;
      *(_OWORD *)(v5 + 60) = v20;
      *(_OWORD *)(v5 + 44) = v19;
      v22 = *(__int128 *)((char *)v6 + 108);
      v23 = *(__int128 *)((char *)v6 + 124);
      v24 = *(__int128 *)((char *)v6 + 140);
      *(_OWORD *)(v5 + 156) = *(__int128 *)((char *)v6 + 156);
      *(_OWORD *)(v5 + 140) = v24;
      *(_OWORD *)(v5 + 124) = v23;
      *(_OWORD *)(v5 + 108) = v22;
      v25 = *(__int128 *)((char *)v6 + 172);
      v26 = *(__int128 *)((char *)v6 + 188);
      v27 = *(__int128 *)((char *)v6 + 204);
      *(_OWORD *)(v5 + 220) = *(__int128 *)((char *)v6 + 220);
      *(_OWORD *)(v5 + 204) = v27;
      *(_OWORD *)(v5 + 188) = v26;
      *(_OWORD *)(v5 + 172) = v25;
      v28 = (_BYTE *)(v5 + 280);
      *(_QWORD *)(v5 + 248) = v5 + 280;
      v29 = (char *)*((_QWORD *)v6 + 31);
      *(_BYTE *)(v5 + 240) = *((_BYTE *)v6 + 240);
      *(_QWORD *)(v5 + 264) = v5 + 280;
      v30 = (char *)*((_QWORD *)v6 + 33);
      *(_QWORD *)(v5 + 272) = *((_QWORD *)v6 + 34);
      *(_DWORD *)(v5 + 236) = *((_DWORD *)v6 + 59);
      *(_QWORD *)(v5 + 256) = v5 + 280;
      if (v29 == v30)
      {
        *(_QWORD *)(v5 + 256) = &v28[*((_QWORD *)v6 + 32) - (_QWORD)v29];
        v31 = (char *)*((_QWORD *)v6 + 32);
        if (v29 != v31)
        {
          v32 = v31 - v29;
          if ((unint64_t)(v31 - v29) >= 8 && (unint64_t)(result + 400 + 288 * v13 - (_QWORD)v29) >= 0x20)
          {
            if (v32 < 0x20)
            {
              v33 = 0;
              goto LABEL_19;
            }
            v33 = v32 & 0xFFFFFFFFFFFFFFE0;
            v34 = (__int128 *)(v29 + 16);
            v35 = v14;
            v36 = v32 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v37 = *v34;
              *(v35 - 1) = *(v34 - 1);
              *v35 = v37;
              v34 += 2;
              v35 += 2;
              v36 -= 32;
            }
            while (v36);
            if (v32 == v33)
              goto LABEL_8;
            if ((v32 & 0x18) != 0)
            {
LABEL_19:
              v38 = v32 & 0xFFFFFFFFFFFFFFF8;
              v28 += v32 & 0xFFFFFFFFFFFFFFF8;
              v39 = v33 - (v32 & 0xFFFFFFFFFFFFFFF8);
              v40 = (uint64_t *)&v29[v33];
              v41 = (_QWORD *)(v15 + v33);
              do
              {
                v42 = *v40++;
                *v41++ = v42;
                v39 += 8;
              }
              while (v39);
              if (v32 == v38)
                goto LABEL_8;
              v29 += v38;
            }
            else
            {
              v29 += v33;
              v28 += v33;
            }
          }
          do
          {
            v43 = *v29++;
            *v28++ = v43;
          }
          while (v29 != v31);
        }
      }
      else
      {
        v16 = *((_QWORD *)v6 + 32);
        *(_QWORD *)(v5 + 248) = v29;
        *(_QWORD *)(v5 + 256) = v16;
        *(__int128 *)((char *)v6 + 248) = 0uLL;
        *(__int128 *)((char *)v6 + 264) = 0uLL;
      }
LABEL_8:
      v5 += 288;
      v6 += 18;
      ++v13;
      v14 += 18;
      v15 += 288;
    }
    while (v6 != v12);
  }
LABEL_3:
  v9 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(result + 1853) = *(_QWORD *)(a2 + 1853);
  *(_QWORD *)(result + 1848) = v9;
  *(_QWORD *)(result + 1864) = 0;
  *(_OWORD *)(result + 1872) = 0u;
  *(_QWORD *)(result + 1864) = *(_QWORD *)(a2 + 1864);
  *(_QWORD *)(result + 1872) = *(_QWORD *)(a2 + 1872);
  *(_QWORD *)(result + 1880) = *(_QWORD *)(a2 + 1880);
  *(_QWORD *)(a2 + 1880) = 0;
  *(_OWORD *)(a2 + 1864) = 0u;
  *(_QWORD *)(result + 1904) = 0;
  *(_OWORD *)(result + 1888) = 0u;
  *(_OWORD *)(result + 1888) = *(_OWORD *)(a2 + 1888);
  *(_QWORD *)(result + 1904) = *(_QWORD *)(a2 + 1904);
  *(_QWORD *)(a2 + 1904) = 0;
  *(_OWORD *)(a2 + 1888) = 0u;
  v10 = (_QWORD *)(result + 1944);
  *(_QWORD *)(result + 1912) = result + 1944;
  *(_QWORD *)(result + 1920) = result + 1944;
  *(_QWORD *)(result + 1928) = result + 1944;
  *(_QWORD *)(result + 1936) = *(_QWORD *)(a2 + 1936);
  v11 = *(uint64_t **)(a2 + 1912);
  if (v11 != *(uint64_t **)(a2 + 1928))
  {
    *(_QWORD *)(result + 1912) = v11;
    *(_QWORD *)(result + 1920) = *(_QWORD *)(a2 + 1920);
    *(_OWORD *)(a2 + 1912) = 0uLL;
    *(_OWORD *)(a2 + 1928) = 0uLL;
    return result;
  }
  *(_QWORD *)(result + 1920) = (char *)v10 + *(_QWORD *)(a2 + 1920) - (_QWORD)v11;
  v44 = *(char **)(a2 + 1920);
  if (v11 != (uint64_t *)v44)
  {
    v45 = v44 - (char *)v11 - 8;
    if (v45 < 0x28 || (unint64_t)(result - (_QWORD)v11 + 1944) < 0x20)
      goto LABEL_33;
    v46 = (v45 >> 3) + 1;
    v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)((char *)v10 + v47);
    v48 = (__int128 *)(v11 + 2);
    v49 = (_OWORD *)(result + 1960);
    v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 4;
    }
    while (v50);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v11 = (uint64_t *)((char *)v11 + v47);
      do
      {
LABEL_33:
        v52 = *v11++;
        *v10++ = v52;
      }
      while (v11 != (uint64_t *)v44);
    }
  }
  return result;
}

_QWORD *std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42C8438;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42C8438;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  size_t v7;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E42C8438;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = (char *)operator new(v5);
    v2[1] = v6;
    v2[3] = &v6[8 * (v5 >> 3)];
    v7 = 24 * ((v5 - 24) / 0x18uLL) + 24;
    memcpy(v6, v4, v7);
    v2[2] = &v6[v7];
  }
  return v2;
}

void sub_19F9D5890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  size_t v7;

  *a2 = &off_1E42C8438;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = (char *)operator new(v4);
    a2[1] = v6;
    a2[2] = v6;
    a2[3] = &v6[8 * (v4 >> 3)];
    v7 = 24 * ((v4 - 24) / 0x18uLL) + 24;
    result = memcpy(v6, v3, v7);
    a2[2] = &v6[v7];
  }
  return result;
}

void std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#2}>,gm::Matrix<double,3,1> ()(int,double)>::operator()(uint64_t a1, int *a2, double *a3)
{
  uint64_t v3;
  int v4;
  double v5;
  int v6;
  double v7;
  double v8;
  double *v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  if (*a2 <= 1)
    v6 = 1;
  else
    v6 = *a2;
  v7 = *(double *)(v3 + 24 * (v6 - 1));
  v8 = *(double *)(v3 + 24 * v4);
  v9 = (double *)(v3 + 24 * (v4 + 1));
  v10 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 16) - v3) >> 3) - 1;
  v11 = v4 + 2;
  if (v11 < v10)
    v10 = v11;
  v5 = *a3;
  return (-(v5 - v5 * v5 * (2.0 - v5)) * v7
        + v8 * ((v5 * 3.0 + -5.0) * (v5 * v5) + 2.0)
        + *v9 * (v5 + (4.0 - v5 * 3.0) * (v5 * v5))
        + *(double *)(v3 + 24 * v10) * -(v5 * v5 - v5 * (v5 * v5)))
       * 0.5;
}

_QWORD *std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E42C8480;
  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[10];
  if (v5 == a1 + 7)
  {
    v6 = 4;
    v5 = a1 + 7;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E42C8480;
  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[10];
  if (v5 == a1 + 7)
  {
    v6 = 4;
    v5 = a1 + 7;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v2 = &off_1E42C8480;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  v3 = v2 + 56;
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 56)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    *((_QWORD *)v2 + 10) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 10) = v3;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, v3);
LABEL_6:
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 136);
  if (v5)
  {
    if (v5 == a1 + 112)
    {
      *((_QWORD *)v2 + 17) = v2 + 112;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      goto LABEL_11;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  *((_QWORD *)v2 + 17) = v5;
LABEL_11:
  *((_OWORD *)v2 + 9) = *(_OWORD *)(a1 + 144);
  *((_QWORD *)v2 + 20) = *(_QWORD *)(a1 + 160);
  return v2;
}

void sub_19F9D5CB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)v1[10];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[10];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C8480;
  v4 = *(_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 8) = v4;
  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
  {
    if (v6 == a1 + 56)
    {
      *(_QWORD *)(a2 + 80) = a2 + 56;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2 + 56);
    }
    else
    {
      *(_QWORD *)(a2 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 80) = 0;
  }
  v7 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v7;
  v8 = *(_QWORD *)(a1 + 136);
  if (v8)
  {
    if (v8 == a1 + 112)
    {
      *(_QWORD *)(a2 + 136) = a2 + 112;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
      goto LABEL_11;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  *(_QWORD *)(a2 + 136) = v8;
LABEL_11:
  result = *(__n128 *)(a1 + 144);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 160);
  *(__n128 *)(a2 + 144) = result;
  return result;
}

void sub_19F9D5DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 80);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 80);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = (_QWORD *)a1[10];
  if (result == a1 + 7)
  {
    v6 = 4;
    result = a1 + 7;
  }
  else
  {
    if (!result)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::destroy_deallocate(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (char *)(__p + 14);
  v3 = (char *)__p[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)__p[10];
  if (v5 == __p + 7)
  {
    v6 = 4;
    v5 = __p + 7;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  operator delete(__p);
}

void std::__function::__func<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1},std::allocator<`anonymous namespace'::PathCurve::PathCurve(std::vector<gm::Matrix<double,3,1>> const&)::{lambda(int,double)#1}>,gm::Matrix<double,3,1> ()(int,double)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a3;
  v7 = *a3;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5
    && ((*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v7),
        v7 = v4,
        (v6 = *(_QWORD *)(a1 + 136)) != 0))
  {
    (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

_QWORD *std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42C8360;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42C8360;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E42C8360;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[3] = &v6[16 * (v5 >> 4)];
    v7 = v5 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v6, v4, v7);
    v2[2] = &v6[v7];
  }
  return v2;
}

void sub_19F9D6114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  char *v6;
  size_t v7;

  *a2 = &off_1E42C8360;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    a2[3] = &v6[16 * (v4 >> 4)];
    v7 = v4 & 0xFFFFFFFFFFFFFFF0;
    result = memcpy(v6, v3, v7);
    a2[2] = &v6[v7];
  }
  return result;
}

void std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double std::__function::__func<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0,std::allocator<`anonymous namespace'::linearInterpolation(std::vector<gm::Matrix<double,2,1>> const&)::$_0>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if (!v3)
    return 0.0;
  v4 = 0;
  v5 = *a2;
  v6 = (v3 >> 4) - 1;
  v7 = (double *)(v2 + 16);
  while (v6 != v4)
  {
    v8 = v4++;
    v9 = *v7;
    v7 += 2;
    v10 = v9;
    if (v9 >= v5)
      return (v5 - *(double *)(v2 + 16 * v8))
           * (*(double *)(v2 + 16 * v4 + 8) - *(double *)(v2 + 16 * v8 + 8))
           / (v10 - *(double *)(v2 + 16 * v8))
           + *(double *)(v2 + 16 * v8 + 8);
  }
  return *(double *)(v2 + 16 * v6 + 8);
}

_QWORD *std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42C8318;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42C8318;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E42C8318;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, v3);
LABEL_6:
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    if (v5 == a1 + 40)
    {
      *((_QWORD *)v2 + 8) = v2 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      goto LABEL_11;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  *((_QWORD *)v2 + 8) = v5;
LABEL_11:
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  return v2;
}

void sub_19F9D645C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)v1[4];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[4];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C8318;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = a2 + 8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2 + 8);
      v5 = *(_QWORD *)(a1 + 64);
      if (!v5)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v5 = *(_QWORD *)(a1 + 64);
      if (!v5)
        goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    v5 = *(_QWORD *)(a1 + 64);
    if (!v5)
      goto LABEL_10;
  }
  if (v5 == a1 + 40)
  {
    *(_QWORD *)(a2 + 64) = a2 + 40;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    goto LABEL_12;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_10:
  *(_QWORD *)(a2 + 64) = v5;
LABEL_12:
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_19F9D6580(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = __p + 40;
  v4 = (char *)*((_QWORD *)__p + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void std::__function::__func<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0,std::allocator<`anonymous namespace'::multiPolynomialFit(std::vector<gm::Matrix<double,2,1>> const&,double)::$_0>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;

  v3 = *a2;
  v4 = *(double *)(a1 + 72);
  if (v4 > *a2)
  {
    v10 = *a2;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
LABEL_6:
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v5 + 48))(v5, &v10);
    return;
  }
  v6 = *(double *)(a1 + 80);
  if (v6 >= v3)
  {
    v10 = *a2;
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      (*(void (**)(uint64_t, double *))(*(_QWORD *)v7 + 48))(v7, &v10);
      v10 = v3;
      v8 = *(_QWORD *)(a1 + 64);
      if (v8)
      {
        (*(void (**)(uint64_t, double *))(*(_QWORD *)v8 + 48))(v8, &v10);
        v9 = (v3 - v4) / (v6 - v4);
        cos(v9 * 3.14159265);
        return;
      }
    }
  }
  else
  {
    v10 = *a2;
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      goto LABEL_6;
  }
LABEL_10:
  std::__throw_bad_function_call[abi:nn180100]();
}

_QWORD *std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42C82D0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42C82D0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E42C82D0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = (_BYTE *)a1[1];
  v3 = (_BYTE *)a1[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v2[4] = a1[4];
  return v2;
}

void sub_19F9D68E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::__clone(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *a2 = &off_1E42C82D0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    a2[1] = v7;
    a2[2] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a2[3] = v8;
    result = memcpy(v7, v5, v6);
    a2[2] = v8;
  }
  a2[4] = v3[4];
  return result;
}

void std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double std::__function::__func<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0,std::allocator<`anonymous namespace'::polynomialFit(double const*,double const*,unsigned long,unsigned long,double const*,double const*,double const*)::$_0>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  int v2;
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  double result;
  double v8;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 < 0)
    return 0.0;
  v3 = *(double **)(a1 + 8);
  v4 = (v2 + 1);
  v5 = *a2 - v3[(int)v4];
  v6 = 1.0;
  result = 0.0;
  do
  {
    v8 = *v3++;
    result = result + v8 * v6;
    v6 = v6 * v5;
    --v4;
  }
  while (v4);
  return result;
}

void std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_0,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_0,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8240;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_0,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8240;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::preparePath(`anonymous namespace'::TapDescription const&,md::MapDataAccess *,md::MuninSceneLogic *,CGSize,std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_0,std::allocator<std::function<void ()(`anonymous namespace'::PathAnimationDescription const&,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 1;
  v2 = atomic_load((unsigned __int8 *)(v1 + 960));
  return v2 & 1;
}

void sub_19F9D6CC4(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  objc_destroyWeak(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F9D6DE8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19F9D7448(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;

  objc_destroyWeak(v1);

  _Block_object_dispose(&STACK[0x828], 8);
  v5 = STACK[0x868];
  if (STACK[0x868])
  {
    do
    {
      v7 = *(_QWORD *)v5;
      v8 = *(std::__shared_weak_count **)(v5 + 136);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (*(_BYTE *)(v5 + 112))
        *(_BYTE *)(v5 + 112) = 0;
      v11 = *(void **)(v5 + 32);
      if (v11 != *(void **)(v5 + 48))
        free(v11);
      operator delete((void *)v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = (void *)STACK[0x858];
  STACK[0x858] = 0;
  if (v6)
    operator delete(v6);
  _Block_object_dispose(&STACK[0x880], 8);
  v12 = (std::__shared_weak_count *)STACK[0x928];
  if (STACK[0x928])
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = STACK[0x8B0];
  if (STACK[0x8B0])
  {
    v16 = STACK[0x8B8];
    v17 = (void *)STACK[0x8B0];
    if (STACK[0x8B8] != v15)
    {
      do
      {
        v18 = v16 - 1864;
        v19 = *(_QWORD **)(v16 - 1776);
        v20 = *(_QWORD **)(v16 - 1768);
        if (v19 != v20)
        {
          do
          {
            v21 = (void *)v19[31];
            if (v21 != (void *)v19[33])
              free(v21);
            v19 += 36;
          }
          while (v19 != v20);
          v19 = *(_QWORD **)(v16 - 1776);
        }
        if (v19 != *(_QWORD **)(v16 - 1760))
          free(v19);
        v16 -= 1864;
      }
      while (v18 != v15);
      v17 = (void *)STACK[0x8B0];
    }
    STACK[0x8B8] = v15;
    operator delete(v17);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__262(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v2 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v2;
  v3 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v3;
  v4 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  return result;
}

void __Block_byref_object_dispose__263(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = (std::__shared_weak_count *)a1[21];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[6];
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[6];
    if (!v5)
      return;
  }
  v6 = (char *)a1[7];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = v6 - 1864;
      v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      v10 = (_QWORD *)*((_QWORD *)v6 - 221);
      if (v9 != v10)
      {
        do
        {
          v11 = (void *)v9[31];
          if (v11 != (void *)v9[33])
            free(v11);
          v9 += 36;
        }
        while (v9 != v10);
        v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      }
      if (v9 != *((_QWORD **)v6 - 220))
        free(v9);
      v6 -= 1864;
    }
    while (v8 != v5);
    v7 = (char *)a1[6];
  }
  a1[7] = v5;
  operator delete(v7);
}

uint64_t __Block_byref_object_copy__265(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__266(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = *(_BYTE **)(a1 + 64);
  if (v2)
  {
    while (1)
    {
      v4 = *(_BYTE **)v2;
      v5 = (std::__shared_weak_count *)*((_QWORD *)v2 + 17);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      if (v2[112])
        goto LABEL_10;
LABEL_11:
      v8 = (void *)*((_QWORD *)v2 + 4);
      if (v8 != *((void **)v2 + 6))
        free(v8);
      operator delete(v2);
      v2 = v4;
      if (!v4)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v2[112])
      goto LABEL_11;
LABEL_10:
    v2[112] = 0;
    goto LABEL_11;
  }
LABEL_2:
  v3 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    operator delete(v3);
}

uint64_t std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t ***v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  size_t v20;
  const void *v21;
  uint64_t *v22;
  uint64_t *v23;
  size_t v24;
  const void *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(*(_QWORD *)(a2 + 8));
      v6 = *(int8x8_t *)(a1 + 8);
      v7 = prime >= *(_QWORD *)&v6;
      if (prime > *(_QWORD *)&v6)
        goto LABEL_17;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (prime)
        goto LABEL_17;
    }
    if (v7)
      goto LABEL_18;
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime >= *(_QWORD *)&v6)
      goto LABEL_18;
    goto LABEL_17;
  }
  prime = 2;
LABEL_17:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (!v11)
    return a1;
  v12 = (_QWORD *)(a1 + 16);
LABEL_20:
  while (2)
  {
    v13 = v11[15];
    v14 = *(_QWORD *)(a1 + 8);
    if (v14)
    {
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v2 = v11[15];
        if (v13 >= v14)
          v2 = v13 % v14;
      }
      else
      {
        v2 = (v14 - 1) & v13;
      }
      v16 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
      if (v16)
      {
        v17 = *v16;
        if (*v16)
        {
          if (v15.u32[0] < 2uLL)
          {
            while (1)
            {
              v22 = v17[1];
              if (v22 == (uint64_t *)v13)
              {
                if (*((unsigned __int8 *)v17 + 16) == *((unsigned __int8 *)v11 + 16)
                  && *((unsigned __int16 *)v17 + 12) == *((unsigned __int16 *)v11 + 12)
                  && v17[12] == (uint64_t *)v11[12])
                {
                  v23 = v17[4];
                  v24 = (char *)v17[5] - (char *)v23;
                  v25 = (const void *)v11[4];
                  if (v24 == v11[5] - (_QWORD)v25 && !memcmp(v23, v25, v24))
                    goto LABEL_48;
                }
              }
              else if (((unint64_t)v22 & (v14 - 1)) != v2)
              {
                goto LABEL_50;
              }
              v17 = (uint64_t **)*v17;
              if (!v17)
                goto LABEL_50;
            }
          }
          do
          {
            v18 = (unint64_t)v17[1];
            if (v18 == v13)
            {
              if (*((unsigned __int8 *)v17 + 16) == *((unsigned __int8 *)v11 + 16)
                && *((unsigned __int16 *)v17 + 12) == *((unsigned __int16 *)v11 + 12)
                && v17[12] == (uint64_t *)v11[12])
              {
                v19 = v17[4];
                v20 = (char *)v17[5] - (char *)v19;
                v21 = (const void *)v11[4];
                if (v20 == v11[5] - (_QWORD)v21 && !memcmp(v19, v21, v20))
                {
LABEL_48:
                  v11 = (uint64_t *)*v11;
                  if (!v11)
                    return a1;
                  goto LABEL_20;
                }
              }
            }
            else
            {
              if (v18 >= v14)
                v18 %= v14;
              if (v18 != v2)
                break;
            }
            v17 = (uint64_t **)*v17;
          }
          while (v17);
        }
      }
    }
LABEL_50:
    v26 = operator new(0x90uLL);
    *v26 = 0;
    v26[1] = v13;
    *((_BYTE *)v26 + 16) = *((_BYTE *)v11 + 16);
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 3), (uint64_t)(v11 + 3));
    *((_BYTE *)v26 + 112) = 0;
    if (*((_BYTE *)v11 + 112))
    {
      *((_DWORD *)v26 + 29) = *((_DWORD *)v11 + 29);
      *((_BYTE *)v26 + 112) = 1;
    }
    v26[15] = v11[15];
    v26[16] = v11[16];
    v27 = v11[17];
    v26[17] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v31 = *(float *)(a1 + 32);
    if (!v14 || (float)(v31 * (float)v14) < v30)
    {
      v32 = (v14 & (v14 - 1)) != 0;
      if (v14 < 3)
        v32 = 1;
      v33 = v32 | (2 * v14);
      v34 = vcvtps_u32_f32(v30 / v31);
      if (v33 <= v34)
        v35 = v34;
      else
        v35 = v33;
      if (v35 == 1)
      {
        v35 = 2;
      }
      else if ((v35 & (v35 - 1)) != 0)
      {
        v35 = std::__next_prime(v35);
      }
      v36 = *(int8x8_t *)(a1 + 8);
      if (v35 > *(_QWORD *)&v36)
        goto LABEL_67;
      if (v35 < *(_QWORD *)&v36)
      {
        v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
        {
          v37 = std::__next_prime(v37);
        }
        else
        {
          v39 = 1 << -(char)__clz(v37 - 1);
          if (v37 >= 2)
            v37 = v39;
        }
        if (v35 <= v37)
          v35 = v37;
        if (v35 < *(_QWORD *)&v36)
LABEL_67:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v35);
      }
      v14 = *(_QWORD *)(a1 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v13 >= v14)
          v2 = v13 % v14;
        else
          v2 = v13;
      }
      else
      {
        v2 = (v14 - 1) & v13;
      }
    }
    v40 = *(_QWORD *)a1;
    v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v41)
    {
      *v26 = *v41;
      goto LABEL_91;
    }
    *v26 = *v12;
    *v12 = v26;
    *(_QWORD *)(v40 + 8 * v2) = v12;
    if (*v26)
    {
      v42 = *(_QWORD *)(*v26 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v42 >= v14)
          v42 %= v14;
      }
      else
      {
        v42 &= v14 - 1;
      }
      v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
LABEL_91:
      *v41 = v26;
    }
    ++*(_QWORD *)(a1 + 24);
    v11 = (uint64_t *)*v11;
    if (v11)
      continue;
    return a1;
  }
}

void sub_19F9D7D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void ___ZZ38__VKMuninCameraController_tapAtPoint__ENK4__13clERKN12_GLOBAL__N_124PathAnimationDescriptionEONSt3__113unordered_mapIN3gdc19LayerDataRequestKeyENS4_10shared_ptrINS6_9LayerDataEEENS6_23LayerDataRequestKeyHashENS4_8equal_toIS7_EENS4_9allocatorINS4_4pairIKS7_SA_EEEEEE_block_invoke(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _BYTE *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *__p[2];
  void *v53;
  _OWORD v54[6];
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE v67[1728];
  _QWORD v68[2];
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
    goto LABEL_51;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0x63FB9AEB1FDCD759 * (v6 >> 3);
    if (v7 >= 0x2328A701194539)
      abort();
    v8 = (char *)operator new(v6);
    v9 = 0;
    v75 = v8;
    v76 = v8;
    v77 = &v8[1864 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      *(_QWORD *)v11 = *(_QWORD *)(v4 + v9);
      v12 = *(_OWORD *)(v4 + v9 + 8);
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v4 + v9 + 24);
      *(_OWORD *)(v11 + 8) = v12;
      v13 = *(_QWORD *)(v4 + v9 + 32);
      *((_DWORD *)v11 + 10) = *(_DWORD *)(v4 + v9 + 40);
      *((_QWORD *)v11 + 4) = v13;
      *(_QWORD *)(v11 + 44) = *(_QWORD *)(v4 + v9 + 44);
      v14 = *(_OWORD *)(v4 + v9 + 56);
      v15 = *(_OWORD *)(v4 + v9 + 72);
      v16 = (uint64_t)&v8[v9 + 120];
      *((_QWORD *)v11 + 11) = v16;
      v17 = &v8[v9 + 88];
      *((_OWORD *)v17 - 2) = v14;
      *((_OWORD *)v17 - 1) = v15;
      *((_QWORD *)v17 + 1) = v16;
      *((_QWORD *)v17 + 2) = v16;
      *((_QWORD *)v17 + 3) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v17, *(__int128 **)(v4 + v9 + 88), *(__int128 **)(v4 + v9 + 96));
      v18 = *(_QWORD *)(v4 + v9 + 1848);
      *(_QWORD *)&v8[v9 + 1853] = *(_QWORD *)(v4 + v9 + 1853);
      *(_QWORD *)&v8[v9 + 1848] = v18;
      v9 += 1864;
    }
    while (v10 + 1864 != v5);
    v76 = &v8[v9];
  }
  v78 = *(_OWORD *)(v3 + 72);
  v79 = *(_QWORD *)(v3 + 88);
  v80 = *(_OWORD *)(v3 + 96);
  v19 = *(_QWORD *)(v3 + 112);
  v82 = *(_OWORD *)(v3 + 120);
  v20 = *(_QWORD *)(v3 + 136);
  v81 = v19;
  v83 = v20;
  v84 = *(_QWORD *)(v3 + 144);
  v21 = *(_QWORD *)(v3 + 160);
  v22 = *(std::__shared_weak_count **)(v3 + 168);
  v85 = *(_QWORD *)(v3 + 152);
  v86 = v21;
  v87 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(_QWORD *)(v3 + 176);
  v26 = *(_OWORD *)(a1 + 104);
  v54[2] = *(_OWORD *)(a1 + 88);
  v54[3] = v26;
  v27 = *(_OWORD *)(a1 + 136);
  v54[4] = *(_OWORD *)(a1 + 120);
  v54[5] = v27;
  v28 = *(_OWORD *)(a1 + 72);
  v54[0] = *(_OWORD *)(a1 + 56);
  v54[1] = v28;
  v56 = *(_OWORD *)(a1 + 160);
  v60 = *(_QWORD *)(a1 + 196);
  v29 = *(_OWORD *)(a1 + 208);
  v62 = *(_OWORD *)(a1 + 224);
  v88 = v25;
  v30 = *(_QWORD *)(a1 + 176);
  v31 = *(_QWORD *)(a1 + 184);
  v55 = *(_QWORD *)(a1 + 152);
  v57 = v30;
  v58 = v31;
  v59 = *(_DWORD *)(a1 + 192);
  v61 = v29;
  v63 = v67;
  v64 = v67;
  v65 = v67;
  v66 = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v63, *(__int128 **)(a1 + 240), *(__int128 **)(a1 + 248));
  *(_QWORD *)((char *)v68 + 5) = *(_QWORD *)(a1 + 2005);
  v68[0] = *(_QWORD *)(a1 + 2000);
  v69 = *(_OWORD *)(a1 + 2016);
  v70 = *(_QWORD *)(a1 + 2032);
  v72 = *(_QWORD *)(a1 + 2056);
  v71 = *(_OWORD *)(a1 + 2040);
  v73 = *(_QWORD *)(a1 + 2064);
  v74 = *(_QWORD *)(a1 + 2072);
  std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>>::unordered_map((uint64_t)__p, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  objc_msgSend(WeakRetained, "pathAnimationPrepared:tap:preloadedViews:", &v75, v54, __p);
  v32 = v53;
  if (v53)
  {
    while (1)
    {
      v36 = *(_BYTE **)v32;
      v37 = (std::__shared_weak_count *)*((_QWORD *)v32 + 17);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
          break;
      }
      if (v32[112])
        goto LABEL_21;
LABEL_22:
      v40 = (void *)*((_QWORD *)v32 + 4);
      if (v40 != *((void **)v32 + 6))
        free(v40);
      operator delete(v32);
      v32 = v36;
      if (!v36)
        goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v32[112])
      goto LABEL_22;
LABEL_21:
    v32[112] = 0;
    goto LABEL_22;
  }
LABEL_11:
  v33 = __p[0];
  __p[0] = 0;
  if (v33)
    operator delete(v33);
  v34 = v63;
  v35 = v64;
  if (v63 != v64)
  {
    do
    {
      v41 = (void *)v34[31];
      if (v41 != (void *)v34[33])
        free(v41);
      v34 += 36;
    }
    while (v34 != v35);
    v34 = v63;
  }
  if (v34 != (_QWORD *)v65)
    free(v34);
  v42 = v87;
  if (v87)
  {
    v43 = (unint64_t *)&v87->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v75;
  if (v75)
  {
    v46 = v76;
    v47 = v75;
    if (v76 != v75)
    {
      do
      {
        v48 = v46 - 1864;
        v49 = (_QWORD *)*((_QWORD *)v46 - 222);
        v50 = (_QWORD *)*((_QWORD *)v46 - 221);
        if (v49 != v50)
        {
          do
          {
            v51 = (void *)v49[31];
            if (v51 != (void *)v49[33])
              free(v51);
            v49 += 36;
          }
          while (v49 != v50);
          v49 = (_QWORD *)*((_QWORD *)v46 - 222);
        }
        if (v49 != *((_QWORD **)v46 - 220))
          free(v49);
        v46 -= 1864;
      }
      while (v48 != v45);
      v47 = v75;
    }
    v76 = v45;
    operator delete(v47);
  }
LABEL_51:

}

void sub_19F9D81EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>>::~unordered_map[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_56c36_ZTSN12_GLOBAL__N_114TapDescriptionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double result;

  v3 = a2 + 56;
  v4 = a1 + 56;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v9;
  v10 = *(_QWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v10;
  *(_QWORD *)(a1 + 196) = *(_QWORD *)(a2 + 196);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = a1 + 272;
  v13 = a1 + 240;
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 248) = a1 + 272;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_QWORD *)(a1 + 264) = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a1 + 240, *(__int128 **)(a2 + 240), *(__int128 **)(a2 + 248));
  v14 = *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(v13 + 1765) = *(_QWORD *)(a2 + 2005);
  *(_QWORD *)(v13 + 1760) = v14;
  v15 = *(_OWORD *)(a2 + 2016);
  *(_QWORD *)(v13 + 1792) = *(_QWORD *)(a2 + 2032);
  *(_OWORD *)(v13 + 1776) = v15;
  v16 = *(_OWORD *)(v3 + 1984);
  *(_QWORD *)(v13 + 1816) = *(_QWORD *)(a2 + 2056);
  *(_OWORD *)(v4 + 1984) = v16;
  result = *(double *)(a2 + 2064);
  *(double *)(v13 + 1824) = result;
  *(_QWORD *)(v13 + 1832) = *(_QWORD *)(a2 + 2072);
  return result;
}

void __destroy_helper_block_ea8_56c36_ZTSN12_GLOBAL__N_114TapDescriptionE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)a1[30];
  v3 = (_QWORD *)a1[31];
  if (v2 != v3)
  {
    do
    {
      v4 = (void *)v2[31];
      if (v4 != (void *)v2[33])
        free(v4);
      v2 += 36;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[30];
  }
  if (v2 != (_QWORD *)a1[32])
    free(v2);
}

uint64_t std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = *(_BYTE **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(_BYTE **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 17);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      if (v2[112])
        goto LABEL_11;
LABEL_12:
      v9 = (void *)*((_QWORD *)v2 + 4);
      if (v9 != *((void **)v2 + 6))
        free(v9);
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v2[112])
      goto LABEL_12;
LABEL_11:
    v2[112] = 0;
    goto LABEL_12;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void `anonymous namespace'::PathAnimationDescription::~PathAnimationDescription(_anonymous_namespace_::PathAnimationDescription *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
  }
  v6 = (char *)*((_QWORD *)this + 1);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = v6 - 1864;
      v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      v10 = (_QWORD *)*((_QWORD *)v6 - 221);
      if (v9 != v10)
      {
        do
        {
          v11 = (void *)v9[31];
          if (v11 != (void *)v9[33])
            free(v11);
          v9 += 36;
        }
        while (v9 != v10);
        v9 = (_QWORD *)*((_QWORD *)v6 - 222);
      }
      if (v9 != *((_QWORD **)v6 - 220))
        free(v9);
      v6 -= 1864;
    }
    while (v8 != v5);
    v7 = *(char **)this;
  }
  *((_QWORD *)this + 1) = v5;
  operator delete(v7);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 136);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (*(_BYTE *)(v2 + 112))
        *(_BYTE *)(v2 + 112) = 0;
      v6 = *(void **)(v2 + 32);
      if (v6 != *(void **)(v2 + 48))
        free(v6);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19F9D8920(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  id *v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  objc_destroyWeak(v3);
  v5 = (_QWORD *)v1[23];
  v6 = (_QWORD *)v1[24];
  if (v5 != v6)
  {
    do
    {
      v7 = (void *)v5[31];
      if (v7 != (void *)v5[33])
        free(v7);
      v5 += 36;
    }
    while (v5 != v6);
    v5 = *v2;
  }
  if (v5 != (_QWORD *)v1[25])
    free(v5);
  _Unwind_Resume(a1);
}

void sub_19F9D89C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c36_ZTSN12_GLOBAL__N_114TapDescriptionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double result;

  v3 = a2 + 40;
  v4 = a1 + 40;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 180) = *(_QWORD *)(a2 + 180);
  v11 = *(_OWORD *)(a2 + 192);
  v12 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = a1 + 256;
  v13 = a1 + 224;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(_QWORD *)(a1 + 232) = a1 + 256;
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_QWORD *)(a1 + 248) = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a1 + 224, *(__int128 **)(a2 + 224), *(__int128 **)(a2 + 232));
  v14 = *(_QWORD *)(a2 + 1984);
  *(_QWORD *)(v13 + 1765) = *(_QWORD *)(a2 + 1989);
  *(_QWORD *)(v13 + 1760) = v14;
  v15 = *(_OWORD *)(a2 + 2000);
  *(_QWORD *)(v13 + 1792) = *(_QWORD *)(a2 + 2016);
  *(_OWORD *)(v13 + 1776) = v15;
  v16 = *(_OWORD *)(v3 + 1984);
  *(_QWORD *)(v13 + 1816) = *(_QWORD *)(a2 + 2040);
  *(_OWORD *)(v4 + 1984) = v16;
  result = *(double *)(a2 + 2048);
  *(double *)(v13 + 1824) = result;
  *(_QWORD *)(v13 + 1832) = *(_QWORD *)(a2 + 2056);
  return result;
}

void __destroy_helper_block_ea8_40c36_ZTSN12_GLOBAL__N_114TapDescriptionE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)a1[28];
  v3 = (_QWORD *)a1[29];
  if (v2 != v3)
  {
    do
    {
      v4 = (void *)v2[31];
      if (v4 != (void *)v2[33])
        free(v4);
      v2 += 36;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[28];
  }
  if (v2 != (_QWORD *)a1[30])
    free(v2);
}

uint64_t ___ZN12_GLOBAL__N_112BumpAnimatorC2EN2gm6MatrixIdLi3ELi1EEERKS3_dddddNSt3__18functionIFvRKN3geo10GeocentricIdEEEEENS7_IFvvEEENS7_IFvbEEE_block_invoke(_QWORD *a1, __n128 a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2.n128_f32[0];
  a2.n128_u64[0] = a1[7];
  if (a2.n128_f64[0] <= v3)
  {
    v5 = a1[6];
    if (!*(_BYTE *)(v5 + 48))
    {
      *(_BYTE *)(v5 + 48) = 1;
      v6 = *(_QWORD *)(v5 + 136);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
        a2.n128_u64[0] = a1[7];
      }
    }
    a2.n128_f64[0] = (v3 - a2.n128_f64[0]) / (1.0 - a2.n128_f64[0]);
    a2.n128_f32[0] = a2.n128_f64[0];
    v4 = a1[5];
  }
  else
  {
    a2.n128_f64[0] = v3 / a2.n128_f64[0];
    a2.n128_f32[0] = a2.n128_f64[0];
    v4 = a1[4];
    a2.n128_f32[0] = 1.0 - a2.n128_f32[0];
  }
  return (*(uint64_t (**)(__n128))(v4 + 16))(a2);
}

uint64_t ___ZN12_GLOBAL__N_112BumpAnimatorC2EN2gm6MatrixIdLi3ELi1EEERKS3_dddddNSt3__18functionIFvRKN3geo10GeocentricIdEEEEENS7_IFvvEEENS7_IFvbEEE_block_invoke_2(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)(v2 + 104);
  if (result)
  {
    v4 = 1.0 - a2;
    v5 = *(double *)(v2 + 16) + (*(double *)(v2 + 40) - *(double *)(v2 + 16)) * v4;
    v6 = vmlaq_n_f64(*(float64x2_t *)v2, vsubq_f64(*(float64x2_t *)(v2 + 24), *(float64x2_t *)v2), v4);
    v7 = v5;
    return (*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)result + 48))(result, &v6);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112BumpAnimatorC2EN2gm6MatrixIdLi3ELi1EEERKS3_dddddNSt3__18functionIFvRKN3geo10GeocentricIdEEEEENS7_IFvvEEENS7_IFvbEEE_block_invoke_3(uint64_t a1, char a2)
{
  uint64_t result;
  char v3;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168);
  if (result)
  {
    v3 = a2;
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

void ___ZZ74__VKMuninCameraController_runBumpAnimation_targetPoint_completionHandler__ENK4__12clEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 48));
    objc_msgSend(WeakRetained, "endRegionChange");
  }

}

void sub_19F9D8F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZZ74__VKMuninCameraController_runBumpAnimation_targetPoint_completionHandler__ENK4__11clEv_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "cameraDelegate");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "mapLayerWasUnableToAnimate");

    WeakRetained = v3;
  }

}

void sub_19F9D913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F9D9368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::PathAnimator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DABE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::PathAnimator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DABE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<`anonymous namespace'::PathAnimator>::__on_zero_shared(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__13529(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 72);
  if (v2)
  {
    if (v2 == a2 + 48)
    {
      *(_QWORD *)(result + 72) = result + 48;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72), result + 48);
    }
    else
    {
      *(_QWORD *)(result + 72) = v2;
      *(_QWORD *)(a2 + 72) = 0;
    }
  }
  else
  {
    *(_QWORD *)(result + 72) = 0;
  }
  return result;
}

_QWORD *__Block_byref_object_dispose__13530(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

md::mun::PointView *__Block_byref_object_copy__238(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__239(uint64_t a1)
{
}

uint64_t ___ZN12_GLOBAL__N_112PathAnimator21setCompletionCallbackENSt3__18functionIFvPS0_bONS_12PointSegmentEEEE_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v6;
  char v7;
  uint64_t v8;

  v2 = a1[6];
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 72);
  v8 = v2;
  v7 = a2;
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t *, char *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, v3 + 48);
  std::__throw_bad_function_call[abi:nn180100]();
  return -[VKMuninCameraController animatePath:animator:preloadedRequiredViews:prePruneData:completionHandler:]::$_4::~$_4(v6);
}

void sub_19F9D9850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  md::MuninSceneEvent::~MuninSceneEvent((md::MuninSceneEvent *)&a9);

  _Unwind_Resume(a1);
}

void sub_19F9D9A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9D9DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

md::mun::PointView *`anonymous namespace'::PointSegment::PointSegment(md::mun::PointView *a1, uint64_t a2)
{
  md::mun::PointView *v4;

  v4 = md::mun::PointView::PointView(a1, (const md::mun::PointView *)a2);
  md::mun::PointView::PointView((md::mun::PointView *)((char *)v4 + 1992), (const md::mun::PointView *)(a2 + 1992));
  return a1;
}

void sub_19F9D9E38(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v3 = (void *)v1[239];
  if (v3 == (void *)v1[241])
  {
    v4 = (void *)v1[236];
    if (!v4)
      goto LABEL_3;
  }
  else
  {
    free(v3);
    v4 = (void *)v1[236];
    if (!v4)
    {
LABEL_3:
      v5 = (void *)v1[233];
      if (!v5)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v1[237] = v4;
  operator delete(v4);
  v5 = (void *)v1[233];
  if (!v5)
  {
LABEL_5:
    v6 = (_QWORD *)v1[11];
    v7 = (_QWORD *)v1[12];
    if (v6 != v7)
    {
      do
      {
        v8 = (void *)v6[31];
        if (v8 != (void *)v6[33])
          free(v8);
        v6 += 36;
      }
      while (v6 != v7);
      v6 = (_QWORD *)v1[11];
    }
    if (v6 != (_QWORD *)v1[13])
      free(v6);
    _Unwind_Resume(exception_object);
  }
LABEL_4:
  v1[234] = v5;
  operator delete(v5);
  goto LABEL_5;
}

void sub_19F9DA620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,void *__p)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (v38)
    operator delete(v38);

  _Unwind_Resume(a1);
}

void sub_19F9DAA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (v10)
    operator delete(v10);

  _Unwind_Resume(a1);
}

void sub_19F9DAD0C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  objc_destroyWeak(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F9DAD78(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19F9DB398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,void *__p,uint64_t a52)
{
  void *v52;

  if (v52)
    operator delete(v52);

  _Unwind_Resume(a1);
}

uint64_t md::mun::PointView::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t *v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (a1 != a2)
  {
    v4 = (_QWORD **)(a1 + 88);
    v5 = a1 + 120;
    v6 = *(_QWORD **)(a1 + 88);
    v7 = *(_QWORD **)(a1 + 96);
    if (v6 != v7)
    {
      do
      {
        v8 = (void *)v6[31];
        if (v8 != (void *)v6[33])
          free(v8);
        v6 += 36;
      }
      while (v6 != v7);
      v6 = *v4;
    }
    if (v6 != *(_QWORD **)(a1 + 104))
      free(v6);
    *(_QWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a1 + 96) = v5;
    *(_QWORD *)(a1 + 104) = v5;
    *(_QWORD *)(a1 + 112) = 6;
    geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a1 + 88, *(__int128 **)(a2 + 88), *(__int128 **)(a2 + 96));
    v9 = *(_QWORD *)(a2 + 1848);
    *(_QWORD *)(a1 + 1853) = *(_QWORD *)(a2 + 1853);
    *(_QWORD *)(a1 + 1848) = v9;
    std::vector<std::pair<md::mun::ViewId,unsigned int>>::__assign_with_size[abi:nn180100]<std::pair<md::mun::ViewId,unsigned int>*,std::pair<md::mun::ViewId,unsigned int>*>((_QWORD *)(a1 + 1864), *(char **)(a2 + 1864), *(char **)(a2 + 1872), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 1872) - *(_QWORD *)(a2 + 1864)) >> 3));
    std::vector<std::pair<md::mun::ViewId,unsigned int>>::__assign_with_size[abi:nn180100]<std::pair<md::mun::ViewId,unsigned int>*,std::pair<md::mun::ViewId,unsigned int>*>((_QWORD *)(a1 + 1888), *(char **)(a2 + 1888), *(char **)(a2 + 1896), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 1896) - *(_QWORD *)(a2 + 1888)) >> 3));
    v10 = (char *)(a1 + 1944);
    v11 = *(void **)(a1 + 1912);
    if (v11 != *(void **)(a1 + 1928))
      free(v11);
    *(_QWORD *)(a1 + 1928) = v10;
    *(_QWORD *)(a1 + 1912) = v10;
    *(_QWORD *)(a1 + 1920) = v10;
    *(_QWORD *)(a1 + 1936) = 6;
    v12 = *(uint64_t **)(a2 + 1912);
    v13 = *(char **)(a2 + 1920);
    v14 = v13 - (char *)v12;
    v15 = (v13 - (char *)v12) >> 3;
    if ((unint64_t)(v13 - (char *)v12) < 0x31)
    {
LABEL_26:
      if (v12 == (uint64_t *)v13)
      {
LABEL_37:
        *(_QWORD *)(a1 + 1920) = &v10[8 * v15];
        return a1;
      }
      if ((unint64_t)(v14 - 8) < 0x18)
      {
        v31 = v10;
      }
      else if ((unint64_t)(v10 - (char *)v12) < 0x20)
      {
        v31 = v10;
      }
      else
      {
        v29 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = &v10[v30];
        v32 = (__int128 *)(v12 + 2);
        v33 = v10 + 16;
        v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_36;
        v12 = (uint64_t *)((char *)v12 + v30);
      }
      do
      {
        v36 = *v12++;
        *(_QWORD *)v31 = v36;
        v31 += 8;
      }
      while (v12 != (uint64_t *)v13);
LABEL_36:
      v10 = *(char **)(a1 + 1920);
      goto LABEL_37;
    }
    if (v15 <= 8)
      v16 = 8;
    else
      v16 = (v13 - (char *)v12) >> 3;
    v17 = (char *)malloc_type_malloc(8 * v16, 0x100004087EB8081uLL);
    v10 = v17;
    v18 = *(uint64_t **)(a1 + 1912);
    v19 = *(char **)(a1 + 1920);
    if (v18 != (uint64_t *)v19)
    {
      v20 = v19 - (char *)v18 - 8;
      if (v20 < 0x18)
      {
        v21 = v17;
      }
      else
      {
        v21 = v17;
        if ((unint64_t)(v17 - (char *)v18) >= 0x20)
        {
          v22 = (v20 >> 3) + 1;
          v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          v21 = &v17[v23];
          v24 = (__int128 *)(v18 + 2);
          v25 = v17 + 16;
          v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *v24;
            *(v25 - 1) = *(v24 - 1);
            *v25 = v27;
            v24 += 2;
            v25 += 2;
            v26 -= 4;
          }
          while (v26);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_25;
          v18 = (uint64_t *)((char *)v18 + v23);
        }
      }
      do
      {
        v28 = *v18++;
        *(_QWORD *)v21 = v28;
        v21 += 8;
      }
      while (v18 != (uint64_t *)v19);
    }
LABEL_25:
    *(_QWORD *)(a1 + 1912) = v17;
    *(_QWORD *)(a1 + 1920) = v17;
    *(_QWORD *)(a1 + 1936) = v16;
    goto LABEL_26;
  }
  return a1;
}

_QWORD *std::vector<std::pair<md::mun::ViewId,unsigned int>>::__assign_with_size[abi:nn180100]<std::pair<md::mun::ViewId,unsigned int>*,std::pair<md::mun::ViewId,unsigned int>*>(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (_QWORD *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) >= __sz)
  {
    v16 = (_QWORD **)(result + 1);
    v17 = (_QWORD *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * (v17 - v9) >= __sz)
    {
      v22 = *result;
      if (a2 != a3)
      {
        do
        {
          v23 = *(_QWORD *)v6;
          *(_DWORD *)(v22 + 7) = *(_DWORD *)(v6 + 7);
          *(_QWORD *)v22 = v23;
          *(_DWORD *)(v22 + 16) = *((_DWORD *)v6 + 4);
          v22 += 24;
          v6 += 24;
        }
        while (v6 != a3);
      }
      v15 = v22 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[8 * (v17 - v9)];
      if (v17 != v9)
      {
        do
        {
          v19 = *(_QWORD *)v6;
          *(_DWORD *)((char *)v9 + 7) = *(_DWORD *)(v6 + 7);
          *v9 = v19;
          *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
          v6 += 24;
          v9 += 3;
        }
        while (v6 != v18);
        v9 = *v16;
      }
      v20 = (char *)v9;
      if (v18 != a3)
      {
        v20 = (char *)v9;
        do
        {
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v20 = v21;
          v20 += 24;
          v18 += 24;
        }
        while (v18 != a3);
      }
      v15 = v20 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      abort();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v14 = (char *)&v9[3 * ((a3 - v6 - 24) / 0x18uLL) + 3];
    }
    v15 = v14 - (char *)v9;
    v16 = (_QWORD **)(v7 + 1);
  }
  *v16 = (_QWORD *)((char *)v9 + v15);
  return result;
}

void sub_19F9DBBB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F9DC0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;

  v36 = *(_QWORD **)(v33 + 1960);
  if (v36 == (_QWORD *)(v34 - 120))
  {
    v37 = 4;
    v36 = (_QWORD *)(v34 - 120);
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:

  v38 = a22;
  v39 = (uint64_t)a23;
  if (a22 != a23)
  {
    do
    {
      v40 = (void *)v38[31];
      if (v40 != (void *)v38[33])
        free(v40);
      v38 += 36;
    }
    while (v38 != (_QWORD *)v39);
    v38 = a22;
  }
  if (v38 != a24)
    free(v38);
  objc_destroyWeak(&location);
  MEMORY[0x1A1AF4E00](v32, 0x10A0C401B67C7C3);

  _Unwind_Resume(a1);
}

void sub_19F9DC3B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F9DC72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33,_QWORD *a34,uint64_t a35,uint64_t a36,char a37,void *__p,uint64_t a39)
{
  void *v39;
  void *v41;
  _QWORD *v42;

  if (a37 && __p)
    operator delete(__p);
  if (a32)
  {
    v41 = a33;
    if (a33)
    {
      v42 = a34;
      if (a34 != a33)
      {
        do
        {
          v42 -= 249;
          std::__destroy_at[abi:nn180100]<md::mun::PointView,0>(v42);
        }
        while (v42 != a33);
        v41 = a33;
      }
      operator delete(v41);
    }
  }

  _Unwind_Resume(a1);
}

void ___ZZZ88__VKMuninCameraController_moveToPoint_withHeading_withPitch_animated_completionHandler__EN3__3clEN3gdc23RequestCompletionStatusEONSt3__113unordered_mapINS0_19LayerDataRequestKeyENS2_10shared_ptrINS0_9LayerDataEEENS0_23LayerDataRequestKeyHashENS2_8equal_toIS4_EENS2_9allocatorINS2_4pairIKS4_S7_EEEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "endRegionChange");

}

void sub_19F9DC7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F9DC8E8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19F9DC9D8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19F9DCA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double *geo::Geocentric<double>::Geocentric<geo::Radians,double>(double *a1, double *a2)
{
  double v3;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  __double2 v8;

  v3 = a2[1];
  v4 = a2[2];
  v5 = __sincos_stret(*a2);
  v6 = 6378137.0 / sqrt(v5.__sinval * v5.__sinval * -0.00669437999 + 1.0);
  v7 = (v6 + v4) * v5.__cosval;
  v8 = __sincos_stret(v3);
  *a1 = v7 * v8.__cosval;
  a1[1] = v7 * v8.__sinval;
  a1[2] = (v4 + v6 * 0.99330562) * v5.__sinval;
  return a1;
}

double `anonymous namespace'::panDuration(double a1, double a2, double a3, double a4)
{
  long double v6;
  double v7;
  long double v8;

  v6 = fmod(a1 + 3.14159265 - a2, 6.28318531);
  v7 = fabs(fmod(v6 + 6.28318531, 6.28318531) * 0.159154943 + -0.5);
  v8 = fmod(a3 + 3.14159265 - a4, 6.28318531);
  return fmax(v7, fabs(fmod(v8 + 6.28318531, 6.28318531) * 0.318309886 + -1.0)) * 1.9 + 0.1;
}

void sub_19F9DCCD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F9DCE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE48c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE56c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE64c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  result = *(double *)(a2 + 64);
  *(double *)(a1 + 64) = result;
  return result;
}

void md::mun::PointView::~PointView(md::mun::PointView *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 239);
  if (v2 != *((void **)this + 241))
    free(v2);
  v3 = (void *)*((_QWORD *)this + 236);
  if (v3)
  {
    *((_QWORD *)this + 237) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 233);
  if (v4)
  {
    *((_QWORD *)this + 234) = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  if (v5 != v6)
  {
    do
    {
      v7 = (void *)v5[31];
      if (v7 != (void *)v5[33])
        free(v7);
      v5 += 36;
    }
    while (v5 != v6);
    v5 = (_QWORD *)*((_QWORD *)this + 11);
  }
  if (v5 != *((_QWORD **)this + 13))
    free(v5);
}

void sub_19F9DD348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F9DD474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void gdc::Spring<double,1,(gdc::SpringType)1>::update(double *a1, double a2)
{
  double v4;
  long double v5;
  long double v6;
  double v7;
  double v8;
  long double v9;
  double v10;
  long double v11;
  long double v12;
  long double v13;
  long double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  long double v20;
  double v21;
  double v22;
  long double v24;

  v4 = a1[3];
  v21 = *a1;
  v22 = a1[2];
  v5 = fmod(3.14159265 - *a1 + v22, 6.28318531);
  v6 = fmod(v5 + 6.28318531, 6.28318531);
  v7 = a1[4];
  v8 = a1[1];
  v20 = -(v8 * v7 - (v6 + -3.14159265) * v4);
  v24 = v8 + a2 * 0.5 * v20;
  v9 = fmod(3.14159265 - (v21 + a2 * 0.5 * v8) + v22, 6.28318531);
  v10 = v7;
  v19 = -(v24 * v7 - (fmod(v9 + 6.28318531, 6.28318531) + -3.14159265) * v4);
  v11 = v21 + a2 * 0.5 * v24;
  v12 = v8 + a2 * 0.5 * v19;
  v13 = fmod(3.14159265 - v11 + v22, 6.28318531);
  v18 = -(v12 * v7 - (fmod(v13 + 6.28318531, 6.28318531) + -3.14159265) * v4);
  v14 = v8 + v18 * a2;
  v15 = fmod(3.14159265 - (v21 + v12 * a2) + v22, 6.28318531);
  v16 = v14 * v10 + (3.14159265 - fmod(v15 + 6.28318531, 6.28318531)) * v4;
  v17 = fmod(v21 + (v14 + v8 + (v12 + v24) * 2.0) * (a2 * 0.166666667), 6.28318531);
  *a1 = fmod(v17 + 6.28318531, 6.28318531);
  a1[1] = v8 + (v20 + (v18 + v19) * 2.0 - v16) * (a2 * 0.166666667);
}

void md::COverlayRenderLayer::layout(md::COverlayRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ggl::CommandBuffer *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _OWORD *v177;
  __int128 *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _OWORD *v205;
  __int128 *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  _QWORD *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _OWORD *v232;
  __int128 *v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  _QWORD *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  md::COverlayRenderLayer *v269;
  ggl::CommandBuffer *v270;
  unint64_t v271;
  _QWORD *v272;
  unsigned __int16 *v273;
  unsigned __int16 *v274;
  unsigned __int16 *v275;
  unsigned __int16 *v276;
  unsigned __int16 *v277;
  unsigned __int16 *v278;
  unsigned __int16 *v279;
  unsigned __int16 *v280;
  int v281;
  unsigned __int16 *v283;
  int v284;
  BOOL v285;
  void *v286;
  double v287;
  int v288;
  BOOL v289;
  uint64_t v290;
  float v291;
  float v292;
  float v293;
  void *v294;
  float v295;
  BOOL v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *i;
  char *v303;
  _DWORD *v304;
  unint64_t v305;
  int8x8_t v306;
  uint8x8_t v307;
  unint64_t v308;
  uint64_t **v309;
  uint64_t *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  int v314;
  double v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  _BYTE *v322;
  char *v323;
  unint64_t v324;
  char *v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  uint64_t v334;
  _OWORD *v335;
  char *v336;
  uint64_t v337;
  __int128 v338;
  char *v339;
  unint64_t v340;
  char *v341;
  int v342;
  unint64_t v343;
  unint64_t v344;
  uint8x8_t v345;
  unint64_t v346;
  uint64_t **v347;
  uint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  VKTimedAnimation *v352;
  double v353;
  unint64_t v354;
  uint8x8_t v355;
  uint64_t **v356;
  uint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  double v360;
  VKAnimation *p_super;
  float v362;
  float v363;
  _BOOL8 v364;
  unint64_t v365;
  unint64_t v366;
  size_t prime;
  void *v368;
  void *v369;
  uint64_t v370;
  _QWORD *v371;
  size_t v372;
  size_t v373;
  size_t v374;
  _QWORD *v375;
  size_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint8x8_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  size_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  double v388;
  unint64_t v389;
  VKTimedAnimation *v390;
  void *v391;
  uint64_t v392;
  _OWORD *v393;
  char *v394;
  uint64_t v395;
  __int128 v396;
  float v397;
  char *v398;
  id v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  std::mutex *v403;
  id *v404;
  id *v405;
  id *v406;
  id *v407;
  id *v408;
  void (**v409)(id *);
  void *v410;
  BOOL v411;
  void *v412;
  _QWORD *v413;
  char *v414;
  id v415;
  int8x8_t v416;
  unint64_t v417;
  uint8x8_t v418;
  _QWORD *v419;
  uint64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t *v427;
  char *v428;
  uint64_t *v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  char **v434;
  int v435;
  _QWORD *v440;
  int8x8_t v441;
  uint8x8_t v442;
  uint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  _QWORD *v453;
  unint64_t v454;
  _QWORD *v455;
  unint64_t v456;
  double *v457;
  int v458;
  double v459;
  double v460;
  int v461;
  double v462;
  double v463;
  float32x2_t v464;
  float32x2_t v465;
  float32x2_t v466;
  float32x2_t v467;
  float32x2_t v468;
  float32x2_t v469;
  float32x2_t v470;
  _QWORD *v471;
  unint64_t v472;
  float32x2_t *v473;
  float32_t v474;
  geo::read_write_lock *v475;
  const char *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  unint64_t v480;
  _DWORD *v481;
  _DWORD *v482;
  unint64_t v483;
  uint64_t v484;
  md::OverlayTileData::OverlayTileResource::RasterTile **v485;
  md::OverlayTileData::OverlayTileResource::RasterTile *v486;
  md::OverlayTileData::OverlayTileResource::RasterTile *v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  int8x8_t v492;
  uint8x8_t v493;
  uint64_t v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  double v503;
  double v504;
  double v505;
  float32x2_t v506;
  float32x2_t v507;
  float32x2_t v508;
  float32x2_t v509;
  float32x2_t v510;
  float32x2_t v511;
  float32x2_t v512;
  _QWORD *v513;
  unint64_t v514;
  float32x2_t *v515;
  _QWORD *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  __n128 *v521;
  float v522;
  uint64_t v523;
  unint64_t v524;
  geo::read_write_lock *v525;
  const char *v526;
  _QWORD *v527;
  int8x8_t v528;
  uint8x8_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unsigned __int16 *v533;
  float *v534;
  float *v535;
  _QWORD *v536;
  _QWORD *v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  BOOL v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  float64_t v552;
  float64_t v553;
  float64_t v554;
  uint64_t v555;
  uint64_t v556;
  _QWORD *v557;
  unsigned int *v558;
  unsigned int *v559;
  unint64_t v560;
  int8x8_t v561;
  uint8x8_t v562;
  unint64_t v563;
  int8x8_t v564;
  uint8x8_t v565;
  unint64_t v566;
  uint64_t **v567;
  uint64_t *v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t **v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  _BOOL4 v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t *v588;
  unint64_t v589;
  std::__shared_weak_count *v590;
  unint64_t *p_shared_owners;
  unint64_t v592;
  int v593;
  int v594;
  _QWORD *v595;
  char *v596;
  char *v597;
  __int128 v598;
  uint64_t v599;
  int v600;
  BOOL v601;
  unsigned int v602;
  double v603;
  uint64_t **v604;
  char **v605;
  __int16 v606;
  pthread_rwlock_t *v607;
  char *v608;
  VKTimedAnimation *v609;
  char **v610;
  md::OverlayTileData *v611;
  _BOOL4 v612;
  md::OverlayTileData *v613;
  int v614[2];
  int v615;
  unsigned int v616;
  ggl::CommandBuffer *v617;
  char *__p;
  char *__pa;
  md::COverlayRenderLayer *v620;
  uint64_t v621;
  char *v622;
  char *v623;
  char *v624;
  _OWORD v626[2];
  int v627;
  _BYTE v628[68];
  int v629;
  int v630;
  BOOL v631;
  uint64_t v632;
  int v633;
  char v634;
  uint64_t v635;
  char v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  __int16 v639;
  int v640;
  int v641;
  char *v642;
  void *v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  uint64_t v648;
  double v649;
  uint64_t v650;
  double v651;
  double v652;
  __int128 v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  char v662;
  _QWORD v663[3];
  _QWORD *v664;
  _QWORD v665[3];
  _QWORD *v666;
  _QWORD v667[3];
  _QWORD *v668;
  _QWORD v669[3];
  _QWORD *v670;
  uint64_t v671;

  v671 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*((_QWORD *)a2 + 1);
  v3 = (int8x8_t)v2[1];
  if (!*(_QWORD *)&v3)
    return;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xADE8F13E6C18D970;
    if (*(_QWORD *)&v3 <= 0xADE8F13E6C18D970)
      v6 = 0xADE8F13E6C18D970 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & 0xADE8F13E6C18D970;
  }
  v7 = *v2;
  v8 = *(_QWORD **)(*v2 + 8 * v6);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0xADE8F13E6C18D970)
      {
        if (v9[2] == 0xADE8F13E6C18D970)
          goto LABEL_22;
      }
      else if ((v11 & (*(_QWORD *)&v3 - 1)) != v6)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0xADE8F13E6C18D970)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v6)
      goto LABEL_25;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0xADE8F13E6C18D970)
    goto LABEL_11;
LABEL_22:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0xADE8F13E6C18D970)
  {
    v13 = *(_QWORD *)(v12 + 32);
    if (!*(_BYTE *)(v13 + 177))
      return;
    goto LABEL_26;
  }
LABEL_25:
  v13 = 0;
  if (!MEMORY[0xB1])
    return;
LABEL_26:
  if (v5.u32[0] > 1uLL)
  {
    v14 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v3 <= 0x8BD499FBD96FBB9ELL)
      v14 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v3;
  }
  else
  {
    v14 = (*(_QWORD *)&v3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v15 = *(_QWORD **)(v7 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x8BD499FBD96FBB9ELL)
      {
        if (v16[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v18 & (*(_QWORD *)&v3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0x8BD499FBD96FBB9ELL)
    {
      if (v17 >= *(_QWORD *)&v3)
        v17 %= *(_QWORD *)&v3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v599 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v599 = 0;
LABEL_49:
  if (v5.u32[0] >= 2uLL)
  {
    v22 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v3 <= 0x1AF456233693CD46uLL)
      v22 = 0x1AF456233693CD46uLL % *(_QWORD *)&v3;
    v21 = **(_QWORD ***)(v7 + 8 * v22);
    v20 = *(_QWORD *)&v3 - 1;
    while (v21[1] != 0x1AF456233693CD46 || v21[2] != 0x1AF456233693CD46)
      v21 = (_QWORD *)*v21;
  }
  else
  {
    v20 = *(_QWORD *)&v3 - 1;
    v21 = *(_QWORD **)(v7 + 8 * ((*(_QWORD *)&v3 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v21 = (_QWORD *)*v21;
      while (v21[1] != 0x1AF456233693CD46);
    }
    while (v21[2] != 0x1AF456233693CD46);
  }
  v23 = *(_QWORD *)(v21[5] + 32);
  v24 = *(double *)(v23 + 40);
  v616 = *(unsigned __int8 *)(v23 + 3776) - 1;
  if (v616 <= 2)
  {
    if (v5.u32[0] > 1uLL)
    {
      v25 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v3 <= 0x3070CB6B3C7F21D3uLL)
        v25 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v25 = (*(_QWORD *)&v3 - 1) & 0x3070CB6B3C7F21D3;
    }
    v26 = *(_QWORD **)(*v2 + 8 * v25);
    if (!v26)
      return;
    v27 = (_QWORD *)*v26;
    if (!v27)
      return;
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        v28 = v27[1];
        if (v28 == 0x3070CB6B3C7F21D3)
        {
          if (v27[2] == 0x3070CB6B3C7F21D3)
            goto LABEL_81;
        }
        else if ((v28 & v20) != v25)
        {
          return;
        }
        v27 = (_QWORD *)*v27;
        if (!v27)
          return;
      }
    }
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x3070CB6B3C7F21D3)
      {
        if (v27[2] == 0x3070CB6B3C7F21D3)
        {
LABEL_81:
          v30 = v27[5];
          if (*(_QWORD *)(v30 + 8) == 0x3070CB6B3C7F21D3)
          {
            v31 = *(_QWORD *)(v30 + 32);
            if (v31)
            {
              v32 = *((_QWORD *)this + 45);
              if (!*(_QWORD *)(v32 + 80))
              {
                v584 = v31 + 48;
                v585 = 16;
                if (*(unsigned __int8 *)(v31 + 320) - 1 >= 3)
                  v584 = v31 + 16;
                else
                  v585 = 48;
                v586 = *(_QWORD *)(v31 + v585);
                v587 = *(_QWORD *)(v584 + 8);
                if (v587)
                {
                  v588 = (unint64_t *)(v587 + 8);
                  do
                    v589 = __ldxr(v588);
                  while (__stxr(v589 + 1, v588));
                }
                v590 = *(std::__shared_weak_count **)(v32 + 88);
                *(_QWORD *)(v32 + 80) = v586;
                *(_QWORD *)(v32 + 88) = v587;
                if (v590)
                {
                  p_shared_owners = (unint64_t *)&v590->__shared_owners_;
                  do
                    v592 = __ldaxr(p_shared_owners);
                  while (__stlxr(v592 - 1, p_shared_owners));
                  if (!v592)
                  {
                    ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
                    std::__shared_weak_count::__release_weak(v590);
                  }
                }
              }
              break;
            }
          }
          return;
        }
      }
      else
      {
        if (v29 >= *(_QWORD *)&v3)
          v29 %= *(_QWORD *)&v3;
        if (v29 != v25)
          return;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        return;
    }
  }
  v620 = this;
  v667[0] = &off_1E42CFBC0;
  v667[1] = a2;
  v668 = v667;
  v665[0] = &off_1E42CFC08;
  v665[1] = a2;
  v666 = v665;
  v670 = v669;
  v669[0] = &off_1E42CFC08;
  v669[1] = a2;
  std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v667);
  v33 = v666;
  if (v666 == v665)
  {
    v34 = 4;
    v33 = v665;
LABEL_88:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v666)
  {
    v34 = 5;
    goto LABEL_88;
  }
  v35 = v668;
  if (v668 == v667)
  {
    v36 = 4;
    v35 = v667;
LABEL_93:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v668)
  {
    v36 = 5;
    goto LABEL_93;
  }
  v37 = 234;
  if (!*((_DWORD *)this + 87))
    v37 = 200;
  v38 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v39 = v38[3];
  v40 = v38[4];
  v41 = v40 - v39;
  if (v40 == v39)
    goto LABEL_103;
  v42 = 0;
  v43 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 47) + 8) + v37);
  v44 = v43;
  v45 = v43 >> 8;
  v46 = v41 >> 3;
  while (1)
  {
    v47 = *(unsigned __int8 **)(v39 + 8 * v42);
    if (*v47 == v44)
    {
      v48 = *((_QWORD *)v47 + 1);
      v49 = v38[15];
      if (v48 < (v38[16] - v49) >> 3)
        break;
    }
    if (++v42 >= v46)
      goto LABEL_103;
  }
  v50 = *(_QWORD *)(v49 + 8 * v48);
  if (!v50)
LABEL_103:
    v51 = 0;
  else
    v51 = *(ggl::CommandBuffer **)(*(_QWORD *)(v50 + 24) + 8 * v45);
  v621 = v23;
  v52 = *((_QWORD *)v51 + 9);
  if (*((_QWORD *)v51 + 10) != v52)
    *((_QWORD *)v51 + 10) = v52;
  v617 = v51;
  *((_QWORD *)v51 + 4) = 0;
  v53 = *((_QWORD *)this + 45);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v53 + 312));
  v54 = *(uint64_t **)(v53 + 272);
  v55 = (uint64_t *)v54[4];
  v56 = (uint64_t *)v54[5];
  if (v55 != v56)
  {
    v57 = (_QWORD *)v54[1];
    while (1)
    {
      v58 = *v55;
      v59 = v54[2];
      if ((unint64_t)v57 >= v59)
        break;
      if (v57)
        *v57 = v58;
      ++v57;
LABEL_109:
      v54[1] = (uint64_t)v57;
      if (++v55 == v56)
      {
        v79 = v54[4];
        if (v79 != v54[5])
          v54[5] = v79;
        goto LABEL_138;
      }
    }
    v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
LABEL_947:
      abort();
    v61 = v59 - *v54;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
    {
      v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 16))(v54[3], 8 * v63, 8);
      v65 = (_QWORD *)(v64 + 8 * v60);
      v66 = v64 + 8 * v63;
      if (v64)
        *v65 = v58;
    }
    else
    {
      v66 = 0;
      v65 = (_QWORD *)(8 * v60);
    }
    v68 = *v54;
    v67 = v54[1];
    v69 = v67 - *v54;
    if (v67 == *v54)
    {
      v71 = v65;
      goto LABEL_134;
    }
    v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      v71 = v65;
    }
    else
    {
      v71 = v65;
      if ((unint64_t)(v67 - (_QWORD)v65) >= 0x20)
      {
        v72 = (v70 >> 3) + 1;
        v73 = v65 - 2;
        v74 = (__int128 *)(v67 - 16);
        v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v76 = *v74;
          *(v73 - 1) = *(v74 - 1);
          *v73 = v76;
          v73 -= 2;
          v74 -= 2;
          v75 -= 4;
        }
        while (v75);
        v71 = &v65[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
        v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_133;
      }
    }
    do
    {
      v77 = *(_QWORD *)(v67 - 8);
      v67 -= 8;
      *--v71 = v77;
    }
    while (v67 != v68);
LABEL_133:
    v67 = *v54;
LABEL_134:
    v57 = v65 + 1;
    *v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v65 + 1);
    v78 = v54[2];
    v54[2] = v66;
    if (v67)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 40))(v54[3], v67, v78 - v67);
    goto LABEL_109;
  }
LABEL_138:
  v80 = *(uint64_t **)(v53 + 280);
  v81 = (uint64_t *)v80[4];
  v82 = (uint64_t *)v80[5];
  if (v81 == v82)
    goto LABEL_170;
  v83 = (_QWORD *)v80[1];
  do
  {
    v84 = *v81;
    v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83)
        *v83 = v84;
      ++v83;
      goto LABEL_141;
    }
    v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_947;
    v87 = v85 - *v80;
    v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1))
      v88 = v86 + 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
    {
      v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v89, 8);
      v91 = (_QWORD *)(v90 + 8 * v86);
      v92 = v90 + 8 * v89;
      if (v90)
        *v91 = v84;
    }
    else
    {
      v92 = 0;
      v91 = (_QWORD *)(8 * v86);
    }
    v94 = *v80;
    v93 = v80[1];
    v95 = v93 - *v80;
    if (v93 == *v80)
    {
      v97 = v91;
      goto LABEL_166;
    }
    v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      v97 = v91;
    }
    else
    {
      v97 = v91;
      if ((unint64_t)(v93 - (_QWORD)v91) >= 0x20)
      {
        v98 = (v96 >> 3) + 1;
        v99 = v91 - 2;
        v100 = (__int128 *)(v93 - 16);
        v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v102 = *v100;
          *(v99 - 1) = *(v100 - 1);
          *v99 = v102;
          v99 -= 2;
          v100 -= 2;
          v101 -= 4;
        }
        while (v101);
        v97 = &v91[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
        v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
        if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_165;
      }
    }
    do
    {
      v103 = *(_QWORD *)(v93 - 8);
      v93 -= 8;
      *--v97 = v103;
    }
    while (v93 != v94);
LABEL_165:
    v93 = *v80;
LABEL_166:
    v83 = v91 + 1;
    *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v91 + 1);
    v104 = v80[2];
    v80[2] = v92;
    if (v93)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v93, v104 - v93);
LABEL_141:
    v80[1] = (uint64_t)v83;
    ++v81;
  }
  while (v81 != v82);
  v105 = v80[4];
  if (v105 != v80[5])
    v80[5] = v105;
LABEL_170:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v53 + 136));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v53 + 128));
  v106 = *(uint64_t **)(v53 + 264);
  v107 = (uint64_t *)v106[4];
  v108 = (uint64_t *)v106[5];
  if (v107 == v108)
    goto LABEL_202;
  v109 = (_QWORD *)v106[1];
  while (2)
  {
    v110 = *v107;
    v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109)
        *v109 = v110;
      ++v109;
      goto LABEL_173;
    }
    v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61)
      goto LABEL_947;
    v113 = v111 - *v106;
    v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1))
      v114 = v112 + 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
    {
      v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v117 = (_QWORD *)(v116 + 8 * v112);
      v118 = v116 + 8 * v115;
      if (v116)
        *v117 = v110;
    }
    else
    {
      v118 = 0;
      v117 = (_QWORD *)(8 * v112);
    }
    v120 = *v106;
    v119 = v106[1];
    v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v117;
      goto LABEL_198;
    }
    v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v117;
      do
      {
LABEL_196:
        v129 = *(_QWORD *)(v119 - 8);
        v119 -= 8;
        *--v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_197;
    }
    v123 = v117;
    if ((unint64_t)(v119 - (_QWORD)v117) < 0x20)
      goto LABEL_196;
    v124 = (v122 >> 3) + 1;
    v125 = v117 - 2;
    v126 = (__int128 *)(v119 - 16);
    v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    v123 = &v117[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_196;
LABEL_197:
    v119 = *v106;
LABEL_198:
    v109 = v117 + 1;
    *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v117 + 1);
    v130 = v106[2];
    v106[2] = v118;
    if (v119)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v119, v130 - v119);
LABEL_173:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108)
      continue;
    break;
  }
  v131 = v106[4];
  if (v131 != v106[5])
    v106[5] = v131;
LABEL_202:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v53 + 160));
  v132 = *(uint64_t **)(v53 + 408);
  v133 = (uint64_t *)v132[4];
  v134 = (uint64_t *)v132[5];
  if (v133 == v134)
    goto LABEL_234;
  v135 = (_QWORD *)v132[1];
  while (2)
  {
    v136 = *v133;
    v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135)
        *v135 = v136;
      ++v135;
      goto LABEL_205;
    }
    v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61)
      goto LABEL_947;
    v139 = v137 - *v132;
    v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1))
      v140 = v138 + 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
    {
      v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 16))(v132[3], 8 * v141, 8);
      v143 = (_QWORD *)(v142 + 8 * v138);
      v144 = v142 + 8 * v141;
      if (v142)
        *v143 = v136;
    }
    else
    {
      v144 = 0;
      v143 = (_QWORD *)(8 * v138);
    }
    v146 = *v132;
    v145 = v132[1];
    v147 = v145 - *v132;
    if (v145 == *v132)
    {
      v149 = v143;
      goto LABEL_230;
    }
    v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      v149 = v143;
      do
      {
LABEL_228:
        v155 = *(_QWORD *)(v145 - 8);
        v145 -= 8;
        *--v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_229;
    }
    v149 = v143;
    if ((unint64_t)(v145 - (_QWORD)v143) < 0x20)
      goto LABEL_228;
    v150 = (v148 >> 3) + 1;
    v151 = v143 - 2;
    v152 = (__int128 *)(v145 - 16);
    v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    v149 = &v143[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_228;
LABEL_229:
    v145 = *v132;
LABEL_230:
    v135 = v143 + 1;
    *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v143 + 1);
    v156 = v132[2];
    v132[2] = v144;
    if (v145)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 40))(v132[3], v145, v156 - v145);
LABEL_205:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134)
      continue;
    break;
  }
  v157 = v132[4];
  if (v157 != v132[5])
    v132[5] = v157;
LABEL_234:
  v158 = *(uint64_t **)(v53 + 416);
  v159 = (uint64_t *)v158[4];
  v160 = (uint64_t *)v158[5];
  if (v159 == v160)
    goto LABEL_266;
  v161 = (_QWORD *)v158[1];
  while (2)
  {
    v162 = *v159;
    v163 = v158[2];
    if ((unint64_t)v161 < v163)
    {
      if (v161)
        *v161 = v162;
      ++v161;
      goto LABEL_237;
    }
    v164 = ((uint64_t)v161 - *v158) >> 3;
    if ((unint64_t)(v164 + 1) >> 61)
      goto LABEL_947;
    v165 = v163 - *v158;
    v166 = v165 >> 2;
    if (v165 >> 2 <= (unint64_t)(v164 + 1))
      v166 = v164 + 1;
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
      v167 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v167 = v166;
    if (v167)
    {
      v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 16))(v158[3], 8 * v167, 8);
      v169 = (_QWORD *)(v168 + 8 * v164);
      v170 = v168 + 8 * v167;
      if (v168)
        *v169 = v162;
    }
    else
    {
      v170 = 0;
      v169 = (_QWORD *)(8 * v164);
    }
    v172 = *v158;
    v171 = v158[1];
    v173 = v171 - *v158;
    if (v171 == *v158)
    {
      v175 = v169;
      goto LABEL_262;
    }
    v174 = v173 - 8;
    if ((unint64_t)(v173 - 8) < 0x38)
    {
      v175 = v169;
      do
      {
LABEL_260:
        v181 = *(_QWORD *)(v171 - 8);
        v171 -= 8;
        *--v175 = v181;
      }
      while (v171 != v172);
      goto LABEL_261;
    }
    v175 = v169;
    if ((unint64_t)(v171 - (_QWORD)v169) < 0x20)
      goto LABEL_260;
    v176 = (v174 >> 3) + 1;
    v177 = v169 - 2;
    v178 = (__int128 *)(v171 - 16);
    v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v180 = *v178;
      *(v177 - 1) = *(v178 - 1);
      *v177 = v180;
      v177 -= 2;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    v175 = &v169[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_260;
LABEL_261:
    v171 = *v158;
LABEL_262:
    v161 = v169 + 1;
    *v158 = (uint64_t)v175;
    v158[1] = (uint64_t)(v169 + 1);
    v182 = v158[2];
    v158[2] = v170;
    if (v171)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 40))(v158[3], v171, v182 - v171);
LABEL_237:
    v158[1] = (uint64_t)v161;
    if (++v159 != v160)
      continue;
    break;
  }
  v183 = v158[4];
  if (v183 != v158[5])
    v158[5] = v183;
LABEL_266:
  v184 = *(uint64_t **)(v53 + 296);
  v185 = *v184;
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*v184 + 48));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v185 + 56));
  v186 = *(uint64_t **)(v185 + 64);
  v187 = (uint64_t *)v186[4];
  v188 = (uint64_t *)v186[5];
  if (v187 == v188)
    goto LABEL_298;
  v189 = (_QWORD *)v186[1];
  while (2)
  {
    v190 = *v187;
    v191 = v186[2];
    if ((unint64_t)v189 < v191)
    {
      if (v189)
        *v189 = v190;
      ++v189;
      goto LABEL_269;
    }
    v192 = ((uint64_t)v189 - *v186) >> 3;
    if ((unint64_t)(v192 + 1) >> 61)
      goto LABEL_947;
    v193 = v191 - *v186;
    v194 = v193 >> 2;
    if (v193 >> 2 <= (unint64_t)(v192 + 1))
      v194 = v192 + 1;
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8)
      v195 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v195 = v194;
    if (v195)
    {
      v196 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v186[3] + 16))(v186[3], 8 * v195, 8);
      v197 = (_QWORD *)(v196 + 8 * v192);
      v198 = v196 + 8 * v195;
      if (v196)
        *v197 = v190;
    }
    else
    {
      v198 = 0;
      v197 = (_QWORD *)(8 * v192);
    }
    v200 = *v186;
    v199 = v186[1];
    v201 = v199 - *v186;
    if (v199 == *v186)
    {
      v203 = v197;
      goto LABEL_294;
    }
    v202 = v201 - 8;
    if ((unint64_t)(v201 - 8) < 0x38)
    {
      v203 = v197;
      do
      {
LABEL_292:
        v209 = *(_QWORD *)(v199 - 8);
        v199 -= 8;
        *--v203 = v209;
      }
      while (v199 != v200);
      goto LABEL_293;
    }
    v203 = v197;
    if ((unint64_t)(v199 - (_QWORD)v197) < 0x20)
      goto LABEL_292;
    v204 = (v202 >> 3) + 1;
    v205 = v197 - 2;
    v206 = (__int128 *)(v199 - 16);
    v207 = v204 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v208 = *v206;
      *(v205 - 1) = *(v206 - 1);
      *v205 = v208;
      v205 -= 2;
      v206 -= 2;
      v207 -= 4;
    }
    while (v207);
    v203 = &v197[-(v204 & 0x3FFFFFFFFFFFFFFCLL)];
    v199 -= 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
    if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_292;
LABEL_293:
    v199 = *v186;
LABEL_294:
    v189 = v197 + 1;
    *v186 = (uint64_t)v203;
    v186[1] = (uint64_t)(v197 + 1);
    v210 = v186[2];
    v186[2] = v198;
    if (v199)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v186[3] + 40))(v186[3], v199, v210 - v199);
LABEL_269:
    v186[1] = (uint64_t)v189;
    if (++v187 != v188)
      continue;
    break;
  }
  v211 = v186[4];
  if (v211 != v186[5])
    v186[5] = v211;
LABEL_298:
  md::PolylineOverlaySharedResources::resetPools(*(_QWORD **)(*(_QWORD *)(v53 + 296) + 16));
  v212 = *(_QWORD *)(v53 + 304);
  v213 = *(uint64_t **)(v212 + 48);
  v214 = (uint64_t *)v213[4];
  v215 = (uint64_t *)v213[5];
  if (v214 == v215)
    goto LABEL_330;
  v216 = (_QWORD *)v213[1];
  while (2)
  {
    v217 = *v214;
    v218 = v213[2];
    if ((unint64_t)v216 < v218)
    {
      if (v216)
        *v216 = v217;
      ++v216;
      goto LABEL_301;
    }
    v219 = ((uint64_t)v216 - *v213) >> 3;
    if ((unint64_t)(v219 + 1) >> 61)
      goto LABEL_947;
    v220 = v218 - *v213;
    v221 = v220 >> 2;
    if (v220 >> 2 <= (unint64_t)(v219 + 1))
      v221 = v219 + 1;
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8)
      v222 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v222 = v221;
    if (v222)
    {
      v223 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213[3] + 16))(v213[3], 8 * v222, 8);
      v224 = (_QWORD *)(v223 + 8 * v219);
      v225 = v223 + 8 * v222;
      if (v223)
        *v224 = v217;
    }
    else
    {
      v225 = 0;
      v224 = (_QWORD *)(8 * v219);
    }
    v227 = *v213;
    v226 = v213[1];
    v228 = v226 - *v213;
    if (v226 == *v213)
    {
      v230 = v224;
      goto LABEL_326;
    }
    v229 = v228 - 8;
    if ((unint64_t)(v228 - 8) < 0x38)
    {
      v230 = v224;
      do
      {
LABEL_324:
        v236 = *(_QWORD *)(v226 - 8);
        v226 -= 8;
        *--v230 = v236;
      }
      while (v226 != v227);
      goto LABEL_325;
    }
    v230 = v224;
    if ((unint64_t)(v226 - (_QWORD)v224) < 0x20)
      goto LABEL_324;
    v231 = (v229 >> 3) + 1;
    v232 = v224 - 2;
    v233 = (__int128 *)(v226 - 16);
    v234 = v231 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v235 = *v233;
      *(v232 - 1) = *(v233 - 1);
      *v232 = v235;
      v232 -= 2;
      v233 -= 2;
      v234 -= 4;
    }
    while (v234);
    v230 = &v224[-(v231 & 0x3FFFFFFFFFFFFFFCLL)];
    v226 -= 8 * (v231 & 0x3FFFFFFFFFFFFFFCLL);
    if (v231 != (v231 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_324;
LABEL_325:
    v226 = *v213;
LABEL_326:
    v216 = v224 + 1;
    *v213 = (uint64_t)v230;
    v213[1] = (uint64_t)(v224 + 1);
    v237 = v213[2];
    v213[2] = v225;
    if (v226)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213[3] + 40))(v213[3], v226, v237 - v226);
LABEL_301:
    v213[1] = (uint64_t)v216;
    if (++v214 != v215)
      continue;
    break;
  }
  v238 = v213[4];
  if (v238 != v213[5])
    v213[5] = v238;
LABEL_330:
  v239 = *(uint64_t **)(v212 + 80);
  v240 = (uint64_t *)v239[4];
  v241 = (uint64_t *)v239[5];
  if (v240 == v241)
    goto LABEL_362;
  v242 = (_QWORD *)v239[1];
  while (2)
  {
    v243 = *v240;
    v244 = v239[2];
    if ((unint64_t)v242 < v244)
    {
      if (v242)
        *v242 = v243;
      ++v242;
      goto LABEL_333;
    }
    v245 = ((uint64_t)v242 - *v239) >> 3;
    if ((unint64_t)(v245 + 1) >> 61)
      goto LABEL_947;
    v246 = v244 - *v239;
    v247 = v246 >> 2;
    if (v246 >> 2 <= (unint64_t)(v245 + 1))
      v247 = v245 + 1;
    if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8)
      v248 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v248 = v247;
    if (v248)
    {
      v249 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v239[3] + 16))(v239[3], 8 * v248, 8);
      v250 = (_QWORD *)(v249 + 8 * v245);
      v251 = v249 + 8 * v248;
      if (v249)
        *v250 = v243;
    }
    else
    {
      v251 = 0;
      v250 = (_QWORD *)(8 * v245);
    }
    v253 = *v239;
    v252 = v239[1];
    v254 = v252 - *v239;
    if (v252 == *v239)
    {
      v256 = v250;
      goto LABEL_358;
    }
    v255 = v254 - 8;
    if ((unint64_t)(v254 - 8) < 0x38)
    {
      v256 = v250;
      do
      {
LABEL_356:
        v262 = *(_QWORD *)(v252 - 8);
        v252 -= 8;
        *--v256 = v262;
      }
      while (v252 != v253);
      goto LABEL_357;
    }
    v256 = v250;
    if ((unint64_t)(v252 - (_QWORD)v250) < 0x20)
      goto LABEL_356;
    v257 = (v255 >> 3) + 1;
    v258 = v250 - 2;
    v259 = (__int128 *)(v252 - 16);
    v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v261 = *v259;
      *(v258 - 1) = *(v259 - 1);
      *v258 = v261;
      v258 -= 2;
      v259 -= 2;
      v260 -= 4;
    }
    while (v260);
    v256 = &v250[-(v257 & 0x3FFFFFFFFFFFFFFCLL)];
    v252 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
    if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_356;
LABEL_357:
    v252 = *v239;
LABEL_358:
    v242 = v250 + 1;
    *v239 = (uint64_t)v256;
    v239[1] = (uint64_t)(v250 + 1);
    v263 = v239[2];
    v239[2] = v251;
    if (v252)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v239[3] + 40))(v239[3], v252, v263 - v252);
LABEL_333:
    v239[1] = (uint64_t)v242;
    if (++v240 != v241)
      continue;
    break;
  }
  v264 = v239[4];
  if (v264 != v239[5])
    v239[5] = v264;
LABEL_362:
  md::PolylineOverlaySharedResources::resetPools(*((_QWORD **)v620 + 46));
  v265 = (_QWORD *)*((_QWORD *)a2 + 1);
  v266 = v265[1];
  if ((v266 & (v266 - 1)) != 0)
  {
    v271 = 0x99BED48DEFBBD82BLL;
    v268 = v621;
    if (v266 <= 0x99BED48DEFBBD82BLL)
      v271 = 0x99BED48DEFBBD82BLL % v266;
    v267 = *(_QWORD **)(*v265 + 8 * v271);
    v269 = v620;
    v270 = v617;
    do
    {
      do
        v267 = (_QWORD *)*v267;
      while (v267[1] != 0x99BED48DEFBBD82BLL);
    }
    while (v267[2] != 0x99BED48DEFBBD82BLL);
  }
  else
  {
    v267 = **(_QWORD ***)(*v265 + 8 * ((v266 - 1) & 0x99BED48DEFBBD82BLL));
    v268 = v621;
    while (v267[1] != 0x99BED48DEFBBD82BLL || v267[2] != 0x99BED48DEFBBD82BLL)
      v267 = (_QWORD *)*v267;
    v269 = v620;
    v270 = v617;
  }
  v272 = **(_QWORD ***)(v267[5] + 32);
  v273 = (unsigned __int16 *)v272[23];
  v274 = (unsigned __int16 *)v272[24];
  if (v273 == v274)
  {
LABEL_382:
    v277 = (unsigned __int16 *)v272[26];
    v278 = (unsigned __int16 *)v272[27];
    if (v277 == v278)
    {
      v284 = *((unsigned __int8 *)v269 + 48);
    }
    else
    {
      v280 = (unsigned __int16 *)v272[14];
      v279 = (unsigned __int16 *)v272[15];
      do
      {
        v283 = v280;
        if (v280 != v279)
        {
          v283 = v280;
          while (*v283 != *v277)
          {
            v283 += 56;
            if (v283 == v279)
            {
              v283 = v279;
              break;
            }
          }
        }
        v281 = *((unsigned __int8 *)v283 + 8);
        ++v277;
        if (v281)
          _ZF = v277 == v278;
        else
          _ZF = 1;
      }
      while (!_ZF);
      v284 = *((unsigned __int8 *)v269 + 48);
      if (!v281)
        goto LABEL_396;
    }
    v285 = v284 != *((unsigned __int8 *)v269 + 49);
  }
  else
  {
    v275 = (unsigned __int16 *)v272[15];
    while (1)
    {
      v276 = (unsigned __int16 *)v272[14];
      if (v276 != v275)
      {
        v276 = (unsigned __int16 *)v272[14];
        while (*v276 != *v273)
        {
          v276 += 56;
          if (v276 == v275)
          {
            v276 = (unsigned __int16 *)v272[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v276 + 8))
        break;
      if (++v273 == v274)
        goto LABEL_382;
    }
    v284 = *((unsigned __int8 *)v269 + 48);
LABEL_396:
    v285 = 1;
  }
  *((_BYTE *)v269 + 393) = v285;
  v593 = *((_DWORD *)v269 + 99);
  v594 = v284;
  *((_QWORD *)v270 + 4) = *(_QWORD *)(*((_QWORD *)v269 + 45) + 72);
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v628, a2);
  v632 = 0;
  v633 = 1065353216;
  v634 = 0;
  v637 = 0;
  v638 = 0;
  v635 = 0;
  v636 = 0;
  v639 = 255;
  v641 = 0;
  v640 = 0;
  v628[56] = *((_BYTE *)v269 + 393);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v286 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v286, "ribbonCrispness");
  v287 = fabs(v24);
  v629 = v288;

  v289 = 0;
  v290 = *((_QWORD *)v620 + 46);
  v630 = *(_DWORD *)(*(_QWORD *)(v290 + 256) + 8);
  v632 = v290;
  v628[57] = 0;
  if (v287 > 0.0001)
  {
    md::LayoutContext::zoomAtCentrePoint(*((int8x8_t **)a2 + 1));
    v289 = v291 > 13.5;
  }
  BYTE4(v635) = v289;
  v292 = *(float *)(v268 + 3076);
  v293 = *(float *)(v268 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v294, "daVinciGlobeSplinedMaxZoom");
  v296 = fmaxf(v293 + v292, 1.0) <= v295 && *(unsigned __int8 *)(v268 + 3776) - 1 < 3;

  v631 = v296;
  v297 = *((_QWORD *)v620 + 34);
  *(_QWORD *)v614 = *((_QWORD *)v620 + 35);
  if (v297 != *(_QWORD *)v614)
  {
    v298 = 0;
    v608 = 0;
    v611 = 0;
    v597 = 0;
    __p = 0;
    v299 = 0;
    v595 = (_QWORD *)((char *)v620 + 456);
    while (1)
    {
      v300 = *(_QWORD *)(*(_QWORD *)v297 + 384);
      v301 = (_QWORD *)(v300 + 752);
      for (i = *(_QWORD **)(v300 + 760); i != v301; i = (_QWORD *)i[1])
      {
        if (!i[13])
          continue;
        v304 = (_DWORD *)i[16];
        if (i[17] - (_QWORD)v304 != 4)
          continue;
        v305 = *v304;
        LODWORD(v642) = *v304;
        v306 = *(int8x8_t *)(v13 + 120);
        if (!*(_QWORD *)&v306)
          goto LABEL_408;
        v307 = (uint8x8_t)vcnt_s8(v306);
        v307.i16[0] = vaddlv_u8(v307);
        if (v307.u32[0] > 1uLL)
        {
          v308 = v305;
          if (*(_QWORD *)&v306 <= v305)
            v308 = v305 % *(_QWORD *)&v306;
        }
        else
        {
          v308 = (v306.i32[0] - 1) & v305;
        }
        v309 = *(uint64_t ***)(*(_QWORD *)(v13 + 112) + 8 * v308);
        if (!v309 || (v310 = *v309) == 0)
        {
LABEL_408:
          v303 = v299;
          goto LABEL_409;
        }
        if (v307.u32[0] < 2uLL)
        {
          v311 = *(_QWORD *)&v306 - 1;
          while (1)
          {
            v313 = v310[1];
            if (v313 == v305)
            {
              if (*((_DWORD *)v310 + 4) == (_DWORD)v305)
                goto LABEL_435;
            }
            else if ((v313 & v311) != v308)
            {
              goto LABEL_408;
            }
            v310 = (uint64_t *)*v310;
            if (!v310)
              goto LABEL_408;
          }
        }
        while (1)
        {
          v312 = v310[1];
          if (v312 == v305)
            break;
          if (v312 >= *(_QWORD *)&v306)
            v312 %= *(_QWORD *)&v306;
          if (v312 != v308)
            goto LABEL_408;
LABEL_424:
          v310 = (uint64_t *)*v310;
          if (!v310)
            goto LABEL_408;
        }
        if (*((_DWORD *)v310 + 4) != (_DWORD)v305)
          goto LABEL_424;
LABEL_435:
        v602 = *((unsigned __int16 *)v310 + 12);
        LODWORD(v626[0]) = *(_DWORD *)((char *)v310 + 26);
        WORD2(v626[0]) = *((_WORD *)v310 + 15);
        v314 = *((unsigned __int8 *)v310 + 42);
        if (*((_BYTE *)v310 + 42))
          v606 = *((_WORD *)v310 + 22);
        v315 = *((double *)v310 + 4);
        v600 = *((unsigned __int8 *)v310 + 40);
        if (v299 < (char *)v611)
        {
          v316 = v297;
          *(_DWORD *)v299 = v305;
          v303 = v299 + 4;
          v317 = __p;
          goto LABEL_455;
        }
        v318 = (v299 - __p) >> 2;
        v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 62)
          abort();
        if ((v611 - (md::OverlayTileData *)__p) >> 1 > v319)
          v319 = (v611 - (md::OverlayTileData *)__p) >> 1;
        if ((unint64_t)(v611 - (md::OverlayTileData *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
          v320 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v320 = v319;
        if (v320)
        {
          if (!(v320 >> 62))
          {
            v316 = v297;
            v321 = v320;
            v322 = operator new(4 * v320);
            v320 = v321;
            goto LABEL_449;
          }
LABEL_948:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v316 = v297;
        v322 = 0;
LABEL_449:
        v317 = &v322[4 * v318];
        *(_DWORD *)v317 = v305;
        v303 = v317 + 4;
        v323 = __p;
        if (v299 != __p)
        {
          v324 = v299 - 4 - __p;
          if (v324 < 0xBC
            || &v322[v299 - __p - 4 - (v324 & 0xFFFFFFFFFFFFFFFCLL)] > &v322[v299 - __p - 4]
            || &v299[-(v324 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v299 - 4
            || (unint64_t)(__p - v322) < 0x20)
          {
            v325 = v299;
            v323 = __p;
          }
          else
          {
            v334 = (v324 >> 2) + 1;
            v325 = &v299[-4 * (v334 & 0x7FFFFFFFFFFFFFF8)];
            v335 = &v322[4 * ((v299 - __p) >> 2) - 16];
            v336 = v299 - 16;
            v337 = v334 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v338 = *(_OWORD *)v336;
              *(v335 - 1) = *((_OWORD *)v336 - 1);
              *v335 = v338;
              v335 -= 2;
              v336 -= 32;
              v337 -= 8;
            }
            while (v337);
            v317 -= 4 * (v334 & 0x7FFFFFFFFFFFFFF8);
            v323 = __p;
            if (v334 == (v334 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_453;
          }
          do
          {
            v326 = *((_DWORD *)v325 - 1);
            v325 -= 4;
            *((_DWORD *)v317 - 1) = v326;
            v317 -= 4;
          }
          while (v325 != v323);
        }
LABEL_453:
        v611 = (md::OverlayTileData *)&v322[4 * v320];
        if (v323)
          operator delete(v323);
LABEL_455:
        __p = v317;
        if (v314)
        {
          if (v606 == -1)
            LOWORD(v327) = 0;
          else
            v327 = (unsigned __int16)(v606 + 1) % v602;
          v297 = v316;
          v329 = std::__hash_table<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v620 + 100, v642, &v642);
          *((_WORD *)v329 + 10) = v606;
          *((_WORD *)v329 + 11) = v327;
          *((_DWORD *)v329 + 6) = 0;
          goto LABEL_409;
        }
        if (v608 < v597)
        {
          *(_DWORD *)v608 = (_DWORD)v642;
          v596 = v608 + 4;
          v297 = v316;
          v328 = v602;
          goto LABEL_491;
        }
        v305 = v608 - v298;
        v330 = (v608 - v298) >> 2;
        v331 = v330 + 1;
        v622 = v298;
        if ((unint64_t)(v330 + 1) >> 62)
          abort();
        if ((v597 - v298) >> 1 > v331)
          v331 = (v597 - v298) >> 1;
        if ((unint64_t)(v597 - v298) >= 0x7FFFFFFFFFFFFFFCLL)
          v332 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v332 = v331;
        if (v332)
        {
          if (v332 >> 62)
            goto LABEL_948;
          v333 = operator new(4 * v332);
        }
        else
        {
          v333 = 0;
        }
        v298 = &v333[4 * v330];
        *(_DWORD *)v298 = (_DWORD)v642;
        v596 = v298 + 4;
        v339 = v622;
        v328 = v602;
        if (v608 == v622)
        {
          v297 = v316;
        }
        else
        {
          v340 = v608 - 4 - v622;
          if (v340 < 0xBC)
          {
            v341 = v608;
            goto LABEL_487;
          }
          if (&v333[v305 - 4 - (v340 & 0xFFFFFFFFFFFFFFFCLL)] <= &v333[v305 - 4]
            && &v608[-(v340 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v608 - 4
            && (unint64_t)(v608 - &v333[v305]) >= 0x20)
          {
            v392 = (v340 >> 2) + 1;
            v341 = &v608[-4 * (v392 & 0x7FFFFFFFFFFFFFF8)];
            v393 = &v333[4 * v330 - 16];
            v394 = v608 - 16;
            v395 = v392 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v396 = *(_OWORD *)v394;
              *(v393 - 1) = *((_OWORD *)v394 - 1);
              *v393 = v396;
              v393 -= 2;
              v394 -= 32;
              v395 -= 8;
            }
            while (v395);
            v298 -= 4 * (v392 & 0x7FFFFFFFFFFFFFF8);
            v339 = v622;
            v297 = v316;
            if (v392 != (v392 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_488;
          }
          else
          {
            v341 = v608;
LABEL_487:
            v339 = v622;
            v297 = v316;
            do
            {
LABEL_488:
              v342 = *((_DWORD *)v341 - 1);
              v341 -= 4;
              *((_DWORD *)v298 - 1) = v342;
              v298 -= 4;
            }
            while (v341 != v339);
          }
        }
        v597 = &v333[4 * v332];
        if (v339)
          operator delete(v339);
LABEL_491:
        v343 = v642;
        v344 = *((_QWORD *)v620 + 56);
        if (v344)
        {
          v345 = (uint8x8_t)vcnt_s8((int8x8_t)v344);
          v345.i16[0] = vaddlv_u8(v345);
          if (v345.u32[0] > 1uLL)
          {
            v346 = v642;
            if (v344 <= v642)
              v346 = v642 % v344;
          }
          else
          {
            v346 = ((_DWORD)v344 - 1) & v642;
          }
          v347 = *(uint64_t ***)(*((_QWORD *)v620 + 55) + 8 * v346);
          if (v347)
          {
            v348 = *v347;
            if (v348)
            {
              if (v345.u32[0] < 2uLL)
              {
                v349 = v344 - 1;
                while (1)
                {
                  v351 = v348[1];
                  if (v351 == v642)
                  {
                    if (*((_DWORD *)v348 + 4) == (_DWORD)v642)
                      goto LABEL_595;
                  }
                  else if ((v351 & v349) != v346)
                  {
                    goto LABEL_511;
                  }
                  v348 = (uint64_t *)*v348;
                  if (!v348)
                    goto LABEL_511;
                }
              }
              do
              {
                v350 = v348[1];
                if (v350 == v642)
                {
                  if (*((_DWORD *)v348 + 4) == (_DWORD)v642)
                  {
LABEL_595:
                    v608 = v596;
                    goto LABEL_409;
                  }
                }
                else
                {
                  if (v350 >= v344)
                    v350 %= v344;
                  if (v350 != v346)
                    break;
                }
                v348 = (uint64_t *)*v348;
              }
              while (v348);
            }
          }
        }
LABEL_511:
        v623 = v298;
        v352 = objc_alloc_init(VKTimedAnimation);
        -[VKTimedAnimation setDuration:](v352, "setDuration:", v315);
        -[VKTimedAnimation setTimingFunction:](v352, "setTimingFunction:", VKAnimationCurveLinear);
        if (!v600)
        {
          v353 = (double)v328 / v315;
          *(float *)&v353 = v353;
          -[VKAnimation setFrequency:](v352, "setFrequency:", v353);
        }
        -[VKAnimation setRunsForever:](v352, "setRunsForever:", 1);
        *(_QWORD *)&v654.f64[0] = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v654.f64[1] = 3321888768;
        *(_QWORD *)&v655.f64[0] = ___ZN2md19COverlayRenderLayer24updateKeyframeAnimationsERKNSt3__16vectorIPNS_21MapTileDataRenderableINS_15OverlayTileDataEEENS1_9allocatorIS6_EEEEPKNS_15OverlaysContextE_block_invoke;
        *(_QWORD *)&v655.f64[1] = &__block_descriptor_71_ea8_40c55_ZTSN2md15OverlaysContext27KeyframeAnimationParametersE_e8_v12__0f8l;
        *(_QWORD *)&v656.f64[0] = v620;
        WORD2(v658.f64[0]) = v328;
        LOWORD(v656.f64[1]) = v328;
        *(_DWORD *)((char *)&v656.f64[1] + 2) = v626[0];
        HIWORD(v656.f64[1]) = WORD2(v626[0]);
        v657.f64[0] = v315;
        LOBYTE(v657.f64[1]) = v600;
        BYTE2(v657.f64[1]) = 0;
        BYTE6(v658.f64[0]) = v600;
        LODWORD(v658.f64[0]) = v343;
        -[VKTimedAnimation setStepHandler:](v352, "setStepHandler:", &v654);
        v609 = v352;
        v354 = *((_QWORD *)v620 + 56);
        if (!v354)
          goto LABEL_533;
        v355 = (uint8x8_t)vcnt_s8((int8x8_t)v354);
        v355.i16[0] = vaddlv_u8(v355);
        if (v355.u32[0] > 1uLL)
        {
          v305 = v343;
          if (v354 <= v343)
            v305 = v343 % v354;
        }
        else
        {
          v305 = ((_DWORD)v354 - 1) & v343;
        }
        v356 = *(uint64_t ***)(*((_QWORD *)v620 + 55) + 8 * v305);
        if (!v356 || (v357 = *v356) == 0)
        {
LABEL_533:
          v360 = COERCE_DOUBLE(operator new(0x30uLL));
          *(double *)&v643 = v360;
          *(_QWORD *)&v644 = (char *)v620 + 456;
          **(_QWORD **)&v360 = 0;
          *(_QWORD *)(*(_QWORD *)&v360 + 8) = v343;
          *(_DWORD *)(*(_QWORD *)&v360 + 16) = v343;
          *(_QWORD *)(*(_QWORD *)&v360 + 24) = &off_1E42B49F0;
          v603 = v360;
          *(_QWORD *)(*(_QWORD *)&v360 + 32) = 0;
          objc_storeStrong((id *)(*(_QWORD *)&v360 + 32), v352);
          p_super = &v609->super;

          v362 = (float)(unint64_t)(*((_QWORD *)v620 + 58) + 1);
          BYTE8(v644) = 1;
          v363 = *((float *)v620 + 118);
          if ((((float)(v363 * (float)v354) >= v362) & ~(v354 == 0)) == 0)
          {
            v364 = (v354 & (v354 - 1)) != 0;
            if (v354 < 3)
              v364 = 1;
            v365 = v364 | (2 * v354);
            v366 = vcvtps_u32_f32(v362 / v363);
            if (v365 <= v366)
              prime = v366;
            else
              prime = v365;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v354 = *((_QWORD *)v620 + 56);
            if (prime > v354)
            {
LABEL_544:
              if (prime >> 61)
                goto LABEL_948;
              v368 = operator new(8 * prime);
              v369 = (void *)*((_QWORD *)v620 + 55);
              *((_QWORD *)v620 + 55) = v368;
              if (v369)
                operator delete(v369);
              v370 = 0;
              *((_QWORD *)v620 + 56) = prime;
              do
                *(_QWORD *)(*((_QWORD *)v620 + 55) + 8 * v370++) = 0;
              while (prime != v370);
              v371 = (_QWORD *)*v595;
              if (!*v595)
                goto LABEL_567;
              v372 = v371[1];
              v373 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                v374 = v372 & v373;
                *(_QWORD *)(*((_QWORD *)v620 + 55) + 8 * v374) = v595;
                while (1)
                {
                  v375 = (_QWORD *)*v371;
                  if (!*v371)
                    break;
                  v376 = v375[1] & v373;
                  if (v376 == v374)
                  {
                    v371 = (_QWORD *)*v371;
                  }
                  else
                  {
                    v377 = *((_QWORD *)v620 + 55);
                    if (*(_QWORD *)(v377 + 8 * v376))
                    {
                      *v371 = *v375;
                      v378 = 8 * v376;
                      *v375 = **(_QWORD **)(*((_QWORD *)v620 + 55) + v378);
                      **(_QWORD **)(*((_QWORD *)v620 + 55) + v378) = v375;
                    }
                    else
                    {
                      *(_QWORD *)(v377 + 8 * v376) = v371;
                      v371 = v375;
                      v374 = v376;
                    }
                  }
                }
                goto LABEL_567;
              }
              if (v372 >= prime)
                v372 %= prime;
              *(_QWORD *)(*((_QWORD *)v620 + 55) + 8 * v372) = v595;
              v382 = (_QWORD *)*v371;
              if (!*v371)
              {
LABEL_567:
                v354 = prime;
                goto LABEL_568;
              }
              while (2)
              {
                v384 = v382[1];
                if (v384 >= prime)
                  v384 %= prime;
                if (v384 != v372)
                {
                  v385 = *((_QWORD *)v620 + 55);
                  if (!*(_QWORD *)(v385 + 8 * v384))
                  {
                    *(_QWORD *)(v385 + 8 * v384) = v371;
LABEL_573:
                    v371 = v382;
                    v382 = (_QWORD *)*v382;
                    v372 = v384;
                    if (!v382)
                      goto LABEL_567;
                    continue;
                  }
                  *v371 = *v382;
                  v383 = 8 * v384;
                  *v382 = **(_QWORD **)(*((_QWORD *)v620 + 55) + v383);
                  **(_QWORD **)(*((_QWORD *)v620 + 55) + v383) = v382;
                  v382 = v371;
                }
                break;
              }
              v384 = v372;
              goto LABEL_573;
            }
            if (prime >= v354)
              goto LABEL_568;
            v379 = vcvtps_u32_f32((float)*((unint64_t *)v620 + 58) / *((float *)v620 + 118));
            if (v354 < 3
              || (v380 = (uint8x8_t)vcnt_s8((int8x8_t)v354), v380.i16[0] = vaddlv_u8(v380), v380.u32[0] > 1uLL))
            {
              v379 = std::__next_prime(v379);
            }
            else
            {
              v381 = 1 << -(char)__clz(v379 - 1);
              if (v379 >= 2)
                v379 = v381;
            }
            if (prime <= v379)
              prime = v379;
            if (prime >= v354)
            {
              v354 = *((_QWORD *)v620 + 56);
LABEL_568:
              p_super = &v609->super;
            }
            else
            {
              if (prime)
                goto LABEL_544;
              v391 = (void *)*((_QWORD *)v620 + 55);
              *((_QWORD *)v620 + 55) = 0;
              p_super = &v609->super;
              if (v391)
                operator delete(v391);
              v354 = 0;
              *((_QWORD *)v620 + 56) = 0;
            }
            if ((v354 & (v354 - 1)) != 0)
            {
              if (v354 <= v343)
                v305 = v343 % v354;
              else
                v305 = v343;
            }
            else
            {
              v305 = ((_DWORD)v354 - 1) & v343;
            }
          }
          v386 = *((_QWORD *)v620 + 55);
          v387 = *(_QWORD **)(v386 + 8 * v305);
          if (v387)
          {
            **(_QWORD **)&v603 = *v387;
            v388 = v603;
            goto LABEL_590;
          }
          **(_QWORD **)&v603 = *v595;
          *(double *)v595 = v603;
          *(_QWORD *)(v386 + 8 * v305) = v595;
          if (**(_QWORD **)&v603)
          {
            v389 = *(_QWORD *)(**(_QWORD **)&v603 + 8);
            if ((v354 & (v354 - 1)) != 0)
            {
              if (v389 >= v354)
                v389 %= v354;
            }
            else
            {
              v389 &= v354 - 1;
            }
            v387 = (_QWORD *)(*((_QWORD *)v620 + 55) + 8 * v389);
            v388 = v603;
LABEL_590:
            *(double *)v387 = v388;
          }
          v390 = 0;
          ++*((_QWORD *)v620 + 58);
          goto LABEL_592;
        }
        if (v355.u32[0] < 2uLL)
        {
          while (1)
          {
            v359 = v357[1];
            if (v359 == v343)
            {
              if (*((_DWORD *)v357 + 4) == (_DWORD)v343)
                goto LABEL_596;
            }
            else if ((v359 & (v354 - 1)) != v305)
            {
              goto LABEL_533;
            }
            v357 = (uint64_t *)*v357;
            if (!v357)
              goto LABEL_533;
          }
        }
        while (2)
        {
          v358 = v357[1];
          if (v358 != v343)
          {
            if (v358 >= v354)
              v358 %= v354;
            if (v358 != v305)
              goto LABEL_533;
LABEL_523:
            v357 = (uint64_t *)*v357;
            if (!v357)
              goto LABEL_533;
            continue;
          }
          break;
        }
        if (*((_DWORD *)v357 + 4) != (_DWORD)v343)
          goto LABEL_523;
LABEL_596:
        p_super = &v609->super;
        v390 = v609;
LABEL_592:

        md::AnimationRunner::runAnimation(*((md::MapEngine ***)v620 + 44), p_super);
        if (BYTE2(v657.f64[1]))
          BYTE2(v657.f64[1]) = 0;

        v608 = v596;
        v298 = v623;
LABEL_409:
        v299 = v303;
      }
      v297 += 8;
      if (v297 == *(_QWORD *)v614)
        goto LABEL_611;
    }
  }
  v299 = 0;
  __p = 0;
  v608 = 0;
  v298 = 0;
LABEL_611:
  v624 = v298;
  v615 = v593 - v594;
  v397 = v24;
  v612 = *((_DWORD *)v620 + 87) != 0;
  v398 = (char *)v620 + 416;
  v604 = (uint64_t **)((char *)v620 + 416);
  v607 = (pthread_rwlock_t *)((char *)v620 + 400);
  while (2)
  {
    v398 = *(char **)v398;
    if (v398)
    {
      v400 = *((_DWORD *)v398 + 4);
      v401 = *((unsigned __int16 *)v398 + 10);
      v402 = *(_QWORD *)(v13 + 160);
      v403 = (std::mutex *)(v402 + 232);
      std::mutex::lock((std::mutex *)(v402 + 232));
      *(double *)&v643 = 0.0;
      v644 = 0uLL;
      std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v643, *(_QWORD *)(v402 + 24 * v612 + 160), *(_QWORD *)(v402 + 24 * v612 + 168), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v402 + 24 * v612 + 168) - *(_QWORD *)(v402 + 24 * v612 + 160)) >> 3));
      v404 = (id *)v643;
      v405 = (id *)v644;
      v406 = (id *)v643;
      if (v643 == (void *)v644)
      {
        if (*(double *)&v643 != 0.0)
        {
          v399 = 0;
          goto LABEL_627;
        }
        std::mutex::unlock(v403);
        v399 = 0;
      }
      else
      {
        while (1)
        {
          v399 = v406[1];
          if (objc_msgSend(v399, "identifier") == v400)
            break;

          v406 += 3;
          if (v406 == v405)
          {
            v399 = 0;
            break;
          }
        }
        if (v404)
        {
          if (v404 != v405)
          {
            v407 = v405 - 3;
            v408 = v405 - 3;
            do
            {
              v409 = (void (**)(id *))*v408;
              v408 -= 3;
              (*v409)(v407);
              _ZF = v407 == v404;
              v407 = v408;
            }
            while (!_ZF);
            v404 = (id *)v643;
          }
LABEL_627:
          operator delete(v404);
        }
        std::mutex::unlock(v403);
        if (v399)
        {
          objc_msgSend(v399, "rasterTileProvider");
          v410 = (void *)objc_claimAutoreleasedReturnValue();
          v411 = objc_msgSend(v410, "visibleKeyframeIndex") == (_DWORD)v401;

          if (!v411)
          {
            objc_msgSend(v399, "rasterTileProvider");
            v412 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v412, "setVisibleKeyframeIndex:", v401);

          }
        }
      }

      continue;
    }
    break;
  }
  v413 = (_QWORD *)*((_QWORD *)v620 + 57);
  if (v413)
  {
    while (1)
    {
LABEL_635:
      v414 = v608;
      if (v624 != v608)
      {
        v414 = v624;
        while (*(_DWORD *)v414 != *((_DWORD *)v413 + 4))
        {
          v414 += 4;
          if (v414 == v608)
          {
            v414 = v608;
            break;
          }
        }
      }
      if (v414 == v608)
        break;
      v413 = (_QWORD *)*v413;
      if (!v413)
        goto LABEL_667;
    }
    v415 = (id)v413[4];
    objc_msgSend(v415, "stop");

    v416 = *(int8x8_t *)((char *)v620 + 448);
    v417 = v413[1];
    v418 = (uint8x8_t)vcnt_s8(v416);
    v418.i16[0] = vaddlv_u8(v418);
    if (v418.u32[0] > 1uLL)
    {
      if (v417 >= *(_QWORD *)&v416)
        v417 %= *(_QWORD *)&v416;
    }
    else
    {
      v417 &= *(_QWORD *)&v416 - 1;
    }
    v419 = (_QWORD *)*v413;
    v420 = *((_QWORD *)v620 + 55);
    v421 = *(_QWORD **)(v420 + 8 * v417);
    do
    {
      v422 = v421;
      v421 = (_QWORD *)*v421;
    }
    while (v421 != v413);
    if (v422 == (_QWORD *)((char *)v620 + 456))
      goto LABEL_954;
    v423 = v422[1];
    if (v418.u32[0] > 1uLL)
    {
      if (v423 >= *(_QWORD *)&v416)
        v423 %= *(_QWORD *)&v416;
    }
    else
    {
      v423 &= *(_QWORD *)&v416 - 1;
    }
    v424 = *v413;
    if (v423 == v417)
    {
LABEL_659:
      if (v424)
        goto LABEL_660;
    }
    else
    {
LABEL_954:
      if (!v419)
        goto LABEL_658;
      v425 = v419[1];
      if (v418.u32[0] > 1uLL)
      {
        if (v425 >= *(_QWORD *)&v416)
          v425 %= *(_QWORD *)&v416;
      }
      else
      {
        v425 &= *(_QWORD *)&v416 - 1;
      }
      v424 = *v413;
      if (v425 != v417)
      {
LABEL_658:
        *(_QWORD *)(v420 + 8 * v417) = 0;
        v424 = *v413;
        goto LABEL_659;
      }
LABEL_660:
      v426 = *(_QWORD *)(v424 + 8);
      if (v418.u32[0] > 1uLL)
      {
        if (v426 >= *(_QWORD *)&v416)
          v426 %= *(_QWORD *)&v416;
      }
      else
      {
        v426 &= *(_QWORD *)&v416 - 1;
      }
      if (v426 != v417)
      {
        *(_QWORD *)(*((_QWORD *)v620 + 55) + 8 * v426) = v422;
        v424 = *v413;
      }
    }
    *v422 = v424;
    *v413 = 0;
    --*((_QWORD *)v620 + 58);
    v413[3] = &off_1E42B49F0;

    operator delete(v413);
    v413 = v419;
    if (!v419)
      goto LABEL_667;
    goto LABEL_635;
  }
LABEL_667:
  v427 = *v604;
  if (*v604)
  {
    if (__p == v299)
    {
      do
      {
        v433 = v427;
        v427 = (uint64_t *)*v427;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v643, v607, v433);
        if (*(double *)&v643 != 0.0)
          operator delete(v643);
      }
      while (v427);
    }
    else
    {
      do
      {
        while (1)
        {
          v428 = __p;
          while (*(_DWORD *)v428 != *((_DWORD *)v427 + 4))
          {
            v428 += 4;
            if (v428 == v299)
            {
              v428 = v299;
              break;
            }
          }
          if (v428 == v299)
            break;
          v427 = (uint64_t *)*v427;
          if (!v427)
            goto LABEL_679;
        }
        v429 = (uint64_t *)*v427;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v643, v607, v427);
        if (*(double *)&v643 != 0.0)
          operator delete(v643);
        v427 = v429;
      }
      while (v429);
    }
  }
LABEL_679:
  if (__p)
    operator delete(__p);
  if (v624)
    operator delete(v624);
  memset(v626, 0, sizeof(v626));
  v627 = 1065353216;
  v430 = *(_QWORD *)(v13 + 152);
  v663[0] = &off_1E42CFC50;
  v664 = v663;
  geo::TaskQueue::barrierSync(v430, v663);
  v431 = v664;
  if (v664 == v663)
  {
    v432 = 4;
    v431 = v663;
LABEL_690:
    (*(void (**)(void))(*v431 + 8 * v432))();
  }
  else if (v664)
  {
    v432 = 5;
    goto LABEL_690;
  }
  v434 = (char **)*((_QWORD *)v620 + 34);
  v605 = (char **)*((_QWORD *)v620 + 35);
  if (v434 != v605)
  {
    v435 = *((_DWORD *)v620 + 87);
    __asm { FMOV            V0.4S, #1.0 }
    v598 = _Q0;
    while (1)
    {
      __pa = *v434;
      v610 = v434;
      v613 = (md::OverlayTileData *)*((_QWORD *)*v434 + 48);
      if (*((_QWORD *)v613 + 96))
        break;
LABEL_693:
      v434 = v610 + 1;
      if (v610 + 1 == v605)
        goto LABEL_924;
    }
    v440 = (_QWORD *)*((_QWORD *)a2 + 1);
    v441 = (int8x8_t)v440[1];
    if (!*(_QWORD *)&v441)
      goto LABEL_720;
    v442 = (uint8x8_t)vcnt_s8(v441);
    v442.i16[0] = vaddlv_u8(v442);
    if (v442.u32[0] > 1uLL)
    {
      v443 = 0x44B2D9808992962CLL;
      if (*(_QWORD *)&v441 <= 0x44B2D9808992962CuLL)
        v443 = 0x44B2D9808992962CuLL % *(_QWORD *)&v441;
    }
    else
    {
      v443 = (*(_QWORD *)&v441 - 1) & 0x44B2D9808992962CLL;
    }
    v444 = *(_QWORD **)(*v440 + 8 * v443);
    if (!v444)
      goto LABEL_720;
    v445 = (_QWORD *)*v444;
    if (!v445)
      goto LABEL_720;
    if (v442.u32[0] < 2uLL)
    {
      v446 = *(_QWORD *)&v441 - 1;
      while (1)
      {
        v448 = v445[1];
        if (v448 == 0x44B2D9808992962CLL)
        {
          if (v445[2] == 0x44B2D9808992962CLL)
            goto LABEL_716;
        }
        else if ((v448 & v446) != v443)
        {
          goto LABEL_720;
        }
        v445 = (_QWORD *)*v445;
        if (!v445)
          goto LABEL_720;
      }
    }
    while (2)
    {
      v447 = v445[1];
      if (v447 != 0x44B2D9808992962CLL)
      {
        if (v447 >= *(_QWORD *)&v441)
          v447 %= *(_QWORD *)&v441;
        if (v447 != v443)
          goto LABEL_720;
        goto LABEL_705;
      }
      if (v445[2] != 0x44B2D9808992962CLL)
      {
LABEL_705:
        v445 = (_QWORD *)*v445;
        if (!v445)
          goto LABEL_720;
        continue;
      }
      break;
    }
LABEL_716:
    v449 = v445[5];
    if (*(_QWORD *)(v449 + 8) == 0x44B2D9808992962CLL)
    {
      v450 = *(_QWORD *)(v449 + 32);
      if (v450)
      {
        v451 = std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((_QWORD *)(v450 + 8), (unsigned __int8 *)v613 + 168);
        if (v451)
          v452 = v451[5];
        else
          v452 = v450 + 48;
        v542 = v287 > 0.0001 && v452 != v450 + 48;
        v601 = v542;
        goto LABEL_721;
      }
    }
LABEL_720:
    v601 = 0;
LABEL_721:
    md::BaseMapTileDataRenderable::adjustZScale((uint64_t)__pa, *(float *)(v599 + 16), *(float *)(v599 + 20));
    v453 = (_QWORD *)*((_QWORD *)a2 + 1);
    v454 = v453[1];
    if ((v454 & (v454 - 1)) != 0)
    {
      v456 = 0x1AF456233693CD46;
      if (v454 <= 0x1AF456233693CD46)
        v456 = 0x1AF456233693CD46 % v454;
      v455 = *(_QWORD **)(*v453 + 8 * v456);
      do
      {
        do
          v455 = (_QWORD *)*v455;
        while (v455[1] != 0x1AF456233693CD46);
      }
      while (v455[2] != 0x1AF456233693CD46);
    }
    else
    {
      v455 = *(_QWORD **)(*v453 + 8 * ((v454 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v455 = (_QWORD *)*v455;
        while (v455[1] != 0x1AF456233693CD46);
      }
      while (v455[2] != 0x1AF456233693CD46);
    }
    v457 = *(double **)(v455[5] + 32);
    v458 = 1 << *((_BYTE *)v613 + 169);
    v459 = 1.0 / (double)v458;
    v460 = (double)*((int *)v613 + 44);
    v461 = __pa[48];
    v462 = v459 * (double)(v458 + ~*((_DWORD *)v613 + 43));
    if (__pa[48])
      v463 = (double)v461;
    else
      v463 = -0.0;
    v650 = 0;
    v647 = 0u;
    v648 = 0;
    v645 = 0u;
    v646 = 0u;
    v644 = 0u;
    *(double *)&v643 = 1.0 / (double)v458;
    *(double *)&v646 = *(double *)&v643;
    v649 = *(double *)&v643;
    v651 = v463 + v459 * v460;
    v652 = v462;
    v653 = xmmword_19FFB33A0;
    gm::operator*<double,4,4,4>(v654.f64, v457 + 101, (double *)&v643);
    v464 = vcvt_f32_f64(v655);
    v465 = vcvt_f32_f64(v656);
    v466 = vcvt_f32_f64(v657);
    v467 = vcvt_f32_f64(v658);
    v468 = vcvt_f32_f64(v659);
    v469 = vcvt_f32_f64(v660);
    v470 = vcvt_f32_f64(v661);
    v471 = (_QWORD *)*((_QWORD *)v613 + 90);
    v472 = v471[1];
    v473 = (float32x2_t *)v471[9];
    *v473 = vcvt_f32_f64(v654);
    v473[1] = v464;
    v473[2] = v465;
    v473[3] = v466;
    v473[4] = v467;
    v473[5] = v468;
    v473[6] = v469;
    v473[7] = v470;
    v474 = v457[471] * v457[173] / (v457[171] * v459);
    v473[8].f32[0] = v474;
    if (v471[8] > v472)
      v472 = v471[8];
    v471[7] = 0;
    v471[8] = v472;
    v642 = (char *)v613 + 872;
    v475 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)v613 + 872));
    if ((_DWORD)v475)
      geo::read_write_lock::logFailure(v475, (uint64_t)"write lock", v476);
    v477 = (_QWORD *)((char *)v613 + 752);
    v478 = (_QWORD *)*((_QWORD *)v613 + 95);
LABEL_744:
    if (v478 != v477)
    {
      v484 = v478[2];
      if (v484)
      {
        v479 = *(_QWORD **)(v484 + 56);
        v480 = v479[1];
        v481 = (_DWORD *)v479[9];
        v482 = *(_DWORD **)(v484 + 40);
        *v481 = *v482;
        v481[1] = v482[1];
      }
      else
      {
        v485 = (md::OverlayTileData::OverlayTileResource::RasterTile **)v478[13];
        if (v485)
        {
          v487 = *v485;
          v486 = v485[1];
          if (*v485 != v486)
          {
            do
            {
              md::OverlayTileData::OverlayTileResource::RasterTile::updateWithContext(v487, *((int8x8_t **)a2 + 1), v461);
              v487 = (md::OverlayTileData::OverlayTileResource::RasterTile *)((char *)v487 + 136);
            }
            while (v487 != v486);
          }
          goto LABEL_743;
        }
        v488 = (uint64_t *)v478[14];
        if (v488)
        {
          v489 = *v488;
          v490 = v488[1];
          if (*v488 == v490)
            goto LABEL_743;
          v491 = (_QWORD *)*((_QWORD *)a2 + 1);
          while (1)
          {
            v492 = (int8x8_t)v491[1];
            if (!*(_QWORD *)&v492)
              goto LABEL_776;
            v493 = (uint8x8_t)vcnt_s8(v492);
            v493.i16[0] = vaddlv_u8(v493);
            if (v493.u32[0] > 1uLL)
            {
              v494 = 0x1AF456233693CD46;
              if (*(_QWORD *)&v492 <= 0x1AF456233693CD46uLL)
                v494 = 0x1AF456233693CD46uLL % *(_QWORD *)&v492;
            }
            else
            {
              v494 = (*(_QWORD *)&v492 - 1) & 0x1AF456233693CD46;
            }
            v495 = *(_QWORD **)(*v491 + 8 * v494);
            if (!v495)
              goto LABEL_776;
            v496 = (_QWORD *)*v495;
            if (!v496)
              goto LABEL_776;
            if (v493.u32[0] < 2uLL)
            {
              v497 = *(_QWORD *)&v492 - 1;
              while (1)
              {
                v499 = v496[1];
                if (v499 == 0x1AF456233693CD46)
                {
                  if (v496[2] == 0x1AF456233693CD46)
                    goto LABEL_774;
                }
                else if ((v499 & v497) != v494)
                {
                  goto LABEL_776;
                }
                v496 = (_QWORD *)*v496;
                if (!v496)
                  goto LABEL_776;
              }
            }
            while (1)
            {
              v498 = v496[1];
              if (v498 == 0x1AF456233693CD46)
                break;
              if (v498 >= *(_QWORD *)&v492)
                v498 %= *(_QWORD *)&v492;
              if (v498 != v494)
                goto LABEL_776;
LABEL_763:
              v496 = (_QWORD *)*v496;
              if (!v496)
                goto LABEL_776;
            }
            if (v496[2] != 0x1AF456233693CD46)
              goto LABEL_763;
LABEL_774:
            v500 = v496[5];
            if (*(_QWORD *)(v500 + 8) == 0x1AF456233693CD46)
            {
              v501 = *(_QWORD *)(v500 + 32);
              goto LABEL_777;
            }
LABEL_776:
            v501 = 0;
LABEL_777:
            v502 = 1 << *(_BYTE *)(v489 + 1);
            v503 = 1.0 / (double)v502;
            v504 = (double)(v502 + ~*(_DWORD *)(v489 + 4));
            v505 = v463 + v503 * (double)*(int *)(v489 + 8);
            v650 = 0;
            v647 = 0u;
            v648 = 0;
            v645 = 0u;
            v646 = 0u;
            v644 = 0u;
            *(double *)&v643 = v503;
            *(double *)&v646 = v503;
            v649 = v503;
            v651 = v505;
            v652 = v503 * v504;
            v653 = xmmword_19FFB33A0;
            gm::operator*<double,4,4,4>(v654.f64, (double *)(v501 + 808), (double *)&v643);
            v506 = vcvt_f32_f64(v655);
            v507 = vcvt_f32_f64(v656);
            v508 = vcvt_f32_f64(v657);
            v509 = vcvt_f32_f64(v658);
            v510 = vcvt_f32_f64(v659);
            v511 = vcvt_f32_f64(v660);
            v512 = vcvt_f32_f64(v661);
            v513 = *(_QWORD **)(v489 + 56);
            v514 = v513[1];
            v515 = (float32x2_t *)v513[9];
            *v515 = vcvt_f32_f64(v654);
            v515[1] = v506;
            v515[2] = v507;
            v515[3] = v508;
            v515[4] = v509;
            v515[5] = v510;
            v515[6] = v511;
            v515[7] = v512;
            if (v513[8] > v514)
              v514 = v513[8];
            v513[7] = 0;
            v513[8] = v514;
            v516 = *(_QWORD **)(v489 + 104);
            v517 = v516[1];
            v518 = v516[9];
            v519 = *(_QWORD *)(v489 + 88);
            *(float *)v518 = *(float *)(v489 + 120) * *(float *)v519;
            *(_DWORD *)(v518 + 4) = *(_DWORD *)(v519 + 4);
            if (v516[8] > v517)
              v517 = v516[8];
            v516[7] = 0;
            v516[8] = v517;
            v489 += 136;
            if (v489 == v490)
            {
LABEL_743:
              v478 = (_QWORD *)v478[1];
              goto LABEL_744;
            }
          }
        }
        v520 = v478[11];
        if (!v520)
        {
          v520 = v478[12];
          if (!v520)
            goto LABEL_743;
        }
        v479 = *(_QWORD **)(v520 + 8);
        v480 = v479[1];
        if (v480)
          v521 = (__n128 *)v479[9];
        else
          v521 = 0;
        v522 = *((float *)v613 + 156);
        v523 = *((_QWORD *)__pa + 29);
        if ((*(_BYTE *)(v523 + 16) & 2) == 0)
        {
          v524 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
          if (v524 != -1)
          {
            *(_QWORD *)&v654.f64[0] = &v662;
            *(double *)&v643 = COERCE_DOUBLE(&v654);
            std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v643, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
          }
        }
        ggl::Tile::Transform::operator=(v521, *(__n128 **)(v523 + 72));
        v521[21].n128_f32[0] = computeRouteZOffset(*((int8x8_t **)a2 + 1)) * v522;
        if (!v521 || !v480)
          goto LABEL_743;
      }
      v483 = v479[8];
      if (v483 <= v480)
        v483 = v480;
      v479[7] = 0;
      v479[8] = v483;
      goto LABEL_743;
    }
    v525 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)((char *)v613 + 872));
    if ((_DWORD)v525)
      geo::read_write_lock::logFailure(v525, (uint64_t)"unlock", v526);
    if (!*(_BYTE *)(v13 + 209))
    {
      if (v613
        && md::OverlayTileData::hasTileData(v613)
        && *((unsigned __int16 *)v613 + 12) - 71 >= 2)
      {
        v531 = *((_QWORD *)v620 + 34);
        v532 = *((_QWORD *)v620 + 35);
        while (v531 != v532)
        {
          v533 = *(unsigned __int16 **)(*(_QWORD *)v531 + 384);
          if (v533)
          {
            if (v533[12] - 71 <= 1)
            {
              v534 = (float *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v533 + 32))(v533);
              v535 = (float *)(*(uint64_t (**)(md::OverlayTileData *))(*(_QWORD *)v613 + 32))(v613);
              if (*v535 >= *v534
                && v535[3] <= v534[3]
                && v535[1] >= v534[1]
                && v535[4] <= v534[4]
                && v535[2] >= v534[2]
                && v535[5] <= v534[5])
              {
                goto LABEL_856;
              }
            }
          }
          v531 += 8;
        }
      }
      if (!v601)
      {
        if (*((_BYTE *)v620 + 393))
        {
          v527 = (_QWORD *)*((_QWORD *)a2 + 1);
          v528 = (int8x8_t)v527[1];
          if (v528)
          {
            v529 = (uint8x8_t)vcnt_s8(v528);
            v529.i16[0] = vaddlv_u8(v529);
            if (v529.u32[0] > 1uLL)
            {
              v530 = 0x3070CB6B3C7F21D3;
              if (*(_QWORD *)&v528 <= 0x3070CB6B3C7F21D3uLL)
                v530 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v528;
            }
            else
            {
              v530 = (*(_QWORD *)&v528 - 1) & 0x3070CB6B3C7F21D3;
            }
            v536 = *(_QWORD **)(*v527 + 8 * v530);
            if (v536)
            {
              v537 = (_QWORD *)*v536;
              if (v537)
              {
                if (v529.u32[0] < 2uLL)
                {
                  v538 = *(_QWORD *)&v528 - 1;
                  while (1)
                  {
                    v540 = v537[1];
                    if (v540 == 0x3070CB6B3C7F21D3)
                    {
                      if (v537[2] == 0x3070CB6B3C7F21D3)
                        goto LABEL_843;
                    }
                    else if ((v540 & v538) != v530)
                    {
                      goto LABEL_856;
                    }
                    v537 = (_QWORD *)*v537;
                    if (!v537)
                      goto LABEL_856;
                  }
                }
                do
                {
                  v539 = v537[1];
                  if (v539 == 0x3070CB6B3C7F21D3)
                  {
                    if (v537[2] == 0x3070CB6B3C7F21D3)
                    {
LABEL_843:
                      v543 = v537[5];
                      if (*(_QWORD *)(v543 + 8) == 0x3070CB6B3C7F21D3)
                      {
                        v544 = *(_QWORD *)(v543 + 32);
                        if (v544)
                        {
                          v545 = *(unsigned __int8 *)(*((_QWORD *)__pa + 48) + 169);
                          v546 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)v620 + 45) + 136));
                          v547 = 128;
                          if (v616 < 3)
                            v547 = 160;
                          v548 = (uint64_t *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)v620 + 45)
                                                                                                + v547));
                          ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData((_QWORD *)v548[8], (_QWORD *)v548[20], *((_QWORD *)__pa + 27), *((_QWORD *)__pa + 28));
                          ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(v548[8], v548[20], *((_QWORD *)__pa + 29), *((_QWORD *)__pa + 30));
                          v549 = *((_QWORD *)v620 + 45);
                          v550 = v549 + 144;
                          v551 = 112;
                          if (v616 >= 3)
                            v550 = v549 + 112;
                          else
                            v551 = 144;
                          ggl::Flyover::FlyoverPipelineSetup::setState((ggl::PipelineSetup *)v548, *(_QWORD *)(v549 + v551), *(std::__shared_weak_count **)(v550 + 8));
                          v552 = *(double *)(v548[8] + 32);
                          *(_QWORD *)&v646 = 0;
                          *(double *)&v643 = 0.0;
                          *(_QWORD *)&v644 = 0;
                          v553 = *(double *)(*(_QWORD *)&v552 + 8);
                          v654.f64[0] = 0.0;
                          v654.f64[1] = v552;
                          v655.f64[0] = 0.0;
                          v655.f64[1] = v553;
                          LOWORD(v656.f64[0]) = 1;
                          if (v553 == 0.0)
                            v554 = 0.0;
                          else
                            v554 = *(double *)(*(_QWORD *)&v552 + 72);
                          v656.f64[1] = v554;
                          ggl::BufferMemory::operator=((uint64_t *)&v643, (uint64_t)&v654);
                          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v654);
                          v555 = v646;
                          *(_OWORD *)v646 = v598;
                          *(_OWORD *)(v555 + 16) = xmmword_19FFB3480;
                          *(_QWORD *)(v546 + 24) = *(_QWORD *)(*((_QWORD *)v620 + 45) + 104);
                          v556 = 128;
                          if (*(unsigned __int8 *)(v544 + 320) - 1 < 3)
                            v556 = 144;
                          *(_QWORD *)(v546 + 64) = *(_QWORD *)(v544 + v556);
                          *(_QWORD *)(v546 + 32) = v548;
                          *(_QWORD *)(v546 + 48) = 0;
                          *(_DWORD *)(v546 + 40) = v615 + v545;
                          ggl::CommandBuffer::pushRenderItem((uint64_t)v617, (ggl::RenderItem *)v546);
                          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v643);
                        }
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v539 >= *(_QWORD *)&v528)
                      v539 %= *(_QWORD *)&v528;
                    if (v539 != v530)
                      break;
                  }
                  v537 = (_QWORD *)*v537;
                }
                while (v537);
              }
            }
          }
        }
      }
    }
LABEL_856:
    v557 = (_QWORD *)*((_QWORD *)v613 + 95);
    while (2)
    {
      if (v557 == v477)
        goto LABEL_693;
      v559 = (unsigned int *)v557[16];
      v558 = (unsigned int *)v557[17];
      if (v558 != v559)
      {
        do
        {
          v560 = *v559;
          if (v435 == 1)
          {
            v564 = *(int8x8_t *)(v13 + 48);
            if (v564)
            {
              v565 = (uint8x8_t)vcnt_s8(v564);
              v565.i16[0] = vaddlv_u8(v565);
              if (v565.u32[0] > 1uLL)
              {
                v566 = *v559;
                if (*(_QWORD *)&v564 <= v560)
                  v566 = v560 % *(_QWORD *)&v564;
              }
              else
              {
                v566 = (v564.i32[0] - 1) & v560;
              }
              v572 = *(uint64_t ***)(*(_QWORD *)(v13 + 40) + 8 * v566);
              if (v572)
              {
                v568 = *v572;
                if (v568)
                {
                  if (v565.u32[0] < 2uLL)
                  {
                    v573 = *(_QWORD *)&v564 - 1;
                    while (1)
                    {
                      v575 = v568[1];
                      if (v575 == v560)
                      {
                        if (*((_DWORD *)v568 + 4) == (_DWORD)v560)
                          goto LABEL_906;
                      }
                      else if ((v575 & v573) != v566)
                      {
                        goto LABEL_862;
                      }
                      v568 = (uint64_t *)*v568;
                      if (!v568)
                        goto LABEL_862;
                    }
                  }
                  do
                  {
                    v574 = v568[1];
                    if (v574 == v560)
                    {
                      if (*((_DWORD *)v568 + 4) == (_DWORD)v560)
                      {
LABEL_906:
                        v576 = *((unsigned int *)v568 + 5);
                        goto LABEL_908;
                      }
                    }
                    else
                    {
                      if (v574 >= *(_QWORD *)&v564)
                        v574 %= *(_QWORD *)&v564;
                      if (v574 != v566)
                        break;
                    }
                    v568 = (uint64_t *)*v568;
                  }
                  while (v568);
                }
              }
            }
          }
          else
          {
            v561 = *(int8x8_t *)(v13 + 8);
            if (v561)
            {
              v562 = (uint8x8_t)vcnt_s8(v561);
              v562.i16[0] = vaddlv_u8(v562);
              if (v562.u32[0] > 1uLL)
              {
                v563 = *v559;
                if (*(_QWORD *)&v561 <= v560)
                  v563 = v560 % *(_QWORD *)&v561;
              }
              else
              {
                v563 = (v561.i32[0] - 1) & v560;
              }
              v567 = *(uint64_t ***)(*(_QWORD *)v13 + 8 * v563);
              if (v567)
              {
                v568 = *v567;
                if (v568)
                {
                  if (v562.u32[0] < 2uLL)
                  {
                    v569 = *(_QWORD *)&v561 - 1;
                    while (1)
                    {
                      v571 = v568[1];
                      if (v571 == v560)
                      {
                        if (*((_DWORD *)v568 + 4) == (_DWORD)v560)
                          goto LABEL_906;
                      }
                      else if ((v571 & v569) != v563)
                      {
                        goto LABEL_862;
                      }
                      v568 = (uint64_t *)*v568;
                      if (!v568)
                        goto LABEL_862;
                    }
                  }
                  do
                  {
                    v570 = v568[1];
                    if (v570 == v560)
                    {
                      if (*((_DWORD *)v568 + 4) == (_DWORD)v560)
                        goto LABEL_906;
                    }
                    else
                    {
                      if (v570 >= *(_QWORD *)&v561)
                        v570 %= *(_QWORD *)&v561;
                      if (v570 != v563)
                        break;
                    }
                    v568 = (uint64_t *)*v568;
                  }
                  while (v568);
                }
              }
            }
          }
LABEL_862:
          ++v559;
        }
        while (v559 != v558);
        v576 = 0;
LABEL_908:
        v577 = (4 * v576) | 1;
        if (v616 > 2)
          md::COverlayRenderLayer::layoutResource((uint64_t)v620, v557 + 2, (uint64_t)__pa, (uint64_t)v617, a2, (_QWORD **)v13, (uint64_t)v628, v615, v397, v577, (uint64_t *)v626, 0);
        else
          md::COverlayRenderLayer::layoutResourceForGlobe((uint64_t)v620, v557 + 2, (uint64_t)__pa, (uint64_t)v617, a2, (_QWORD **)v13, (uint64_t)v628, v615, v577, 0);
        if (v557[3] || v557[4] || v557[11])
        {
          v578 = 1;
          if (v287 > 0.0001)
            goto LABEL_915;
        }
        else
        {
          v578 = v557[12] != 0;
          if (v287 > 0.0001)
          {
LABEL_915:
            if (v435 != 1)
              v578 = 1;
            if (*((_BYTE *)v620 + 394) && v578 && *(_BYTE *)(v13 + 176))
            {
              if (v616 > 2)
                md::COverlayRenderLayer::layoutResource((uint64_t)v620, v557 + 2, (uint64_t)__pa, (uint64_t)v617, a2, (_QWORD **)v13, (uint64_t)v628, v615, v397, v577, (uint64_t *)v626, 1u);
              else
                md::COverlayRenderLayer::layoutResourceForGlobe((uint64_t)v620, v557 + 2, (uint64_t)__pa, (uint64_t)v617, a2, (_QWORD **)v13, (uint64_t)v628, v615, v577, 1u);
            }
          }
        }
      }
      v557 = (_QWORD *)v557[1];
      continue;
    }
  }
LABEL_924:
  ggl::CommandBuffer::stableSortRenderItems(*((__n128 **)v617 + 9), *((char **)v617 + 10));
  std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::~__hash_table((uint64_t)v626);
  v579 = v638;
  if (v638)
  {
    v580 = (unint64_t *)&v638->__shared_owners_;
    do
      v581 = __ldaxr(v580);
    while (__stlxr(v581 - 1, v580));
    if (!v581)
    {
      ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
      std::__shared_weak_count::__release_weak(v579);
    }
  }
  if (!v670)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v670 + 48))(v670);
  v582 = v670;
  if (v670 == v669)
  {
    v583 = 4;
    v582 = v669;
  }
  else
  {
    if (!v670)
      return;
    v583 = 5;
  }
  (*(void (**)(void))(*v582 + 8 * v583))();
}

void sub_19F9E0B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __int16 a71;
  uint64_t v71;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a71);
  std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::~__hash_table((uint64_t)&a37);
  md::PolylineOverlayLayoutContext::~PolylineOverlayLayoutContext((md::PolylineOverlayLayoutContext *)&a43);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v71 - 176));
  _Unwind_Resume(a1);
}

uint64_t md::COverlayRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 *v4;
  int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 360) + 72);
  *(_BYTE *)(v2 + 28) = 127;
  *(_DWORD *)(v2 + 32) = 0;
  v3 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
  v4 = *(unsigned __int8 **)(a2 + 24);
  v5 = *v4;
  if (v5 + v3 > v4[1])
  {
    *(_BYTE *)(v2 + 28) = v4[32];
    *(_DWORD *)(v2 + 32) = *((_DWORD *)v4 + 9);
    v4[1] = v4[2];
    v5 = 1;
  }
  *v4 = v5 + v3;
  *(_DWORD *)(result + 396) = v5;
  return result;
}

uint64_t md::COverlayRenderLayer::layoutWithoutStyles(md::COverlayRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::COverlayRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

void std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "OverlayLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::COverlayRenderLayer::layoutResourceForGlobe(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, md::LayoutContext *this, _QWORD **a6, uint64_t a7, int a8, uint64_t a9, unsigned __int8 a10)
{
  md::LayoutContext *v12;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  float *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t TileScalar;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  ggl::RenderItem *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  int32x2_t v127;
  __int32 v128;
  _QWORD *v129;
  unint64_t v130;
  float32x4_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  float v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  uint64_t *v168;
  uint64_t v169;
  unsigned int v170;
  _QWORD **v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  __int128 *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  __int128 *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  ggl::PipelineSetup *v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int32x2_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  float32x2_t *v251;
  uint64x2_t v252;
  int32x2_t v253;
  float64x2_t v259;
  float64x2_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  QuadTile *v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  float64x2_t v308;
  QuadTile *v309[2];
  _QWORD *v310;
  uint64_t v311;
  int v312;
  float64x2_t v313;
  uint64_t v314;
  QuadTile *v315[2];
  md::LayoutContext *v316;
  int v317[4];
  int v318;
  QuadTile *v319[2];
  uint64_t v320;
  uint64_t v321;
  float64x2_t v322;
  ggl::CommandBuffer *v323;
  ggl::CommandBuffer *v324;
  int v325[4];
  int v326;
  uint64_t v327[2];
  uint64_t v328;
  std::__shared_weak_count *v329;
  _OWORD v330[8];
  _BYTE v331[24];
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;

  v12 = this;
  v17 = *(_QWORD *)(a3 + 384);
  v326 = *(unsigned __int8 *)(v17 + 169) + a8;
  md::LayoutContext::frameState(this);
  a2[18] = *(_QWORD *)(v18 + 624);
  if (!*a2)
  {
    v311 = v17;
    if (a2[11])
    {
      v303 = (QuadTile *)(v17 + 168);
      LODWORD(v328) = *(_DWORD *)a2[14];
      v24 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)(a1 + 400), v328, &v328);
      v25 = (uint64_t *)a2[11];
      v27 = *v25;
      v26 = v25[1];
      if (*v25 == v26)
        return;
      v28 = *((unsigned __int16 *)v24 + 10);
      v318 = *((unsigned __int16 *)v24 + 11);
      v29 = v24[6];
      v304 = a1;
      v323 = (ggl::CommandBuffer *)a4;
      v316 = v12;
      v314 = v25[1];
      v312 = v28;
      while (1)
      {
        v32 = *(unsigned __int16 *)(v27 + 56);
        v33 = 1.0 - v29;
        v34 = a9;
        if (v32 != v28)
        {
          if (v32 != v318)
            goto LABEL_13;
          v33 = v29;
          v34 = a9 + 1;
          if (v29 <= 0.0)
            goto LABEL_13;
        }
        md::OverlayTileData::OverlayTileResource::RasterTile::setAlphaMultiplier(v27, v33);
        md::OverlayTileData::OverlayTileResource::RasterTile::updateWithContext((md::OverlayTileData::OverlayTileResource::RasterTile *)v27, *((int8x8_t **)v12 + 1), *(char *)(a3 + 48));
        v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 312));
        if (!*(_QWORD *)v27)
        {
          v89 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 96);
          v90 = *(_QWORD *)(v27 + 120);
          *(_QWORD *)v331 = *(_QWORD *)(v27 + 112);
          *(_QWORD *)&v331[8] = v90;
          if (v90)
          {
            v91 = (unint64_t *)(v90 + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = *(std::__shared_weak_count **)(v27 + 24);
          *(_QWORD *)&v330[0] = *(_QWORD *)(v27 + 16);
          *((_QWORD *)&v330[0] + 1) = v93;
          if (v93)
          {
            p_shared_owners = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldxr(p_shared_owners);
            while (__stxr(v95 + 1, p_shared_owners));
          }
          md::COverlayRenderLayer::drapeOnTerrainIfNecessary(a1, *((_QWORD **)v12 + 1), a9, a10, v326, v303, (const QuadTile *)(v27 + 32), v35, v89, (uint64_t *)v331, v330, (uint64_t *)(a3 + 216), (uint64_t *)(a3 + 232), 1);
          if (v93)
          {
            v96 = (unint64_t *)&v93->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v98 = *(std::__shared_weak_count **)&v331[8];
          if (*(_QWORD *)&v331[8])
          {
            v99 = (unint64_t *)(*(_QWORD *)&v331[8] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v35);
          goto LABEL_12;
        }
        v321 = v34;
        v36 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 280));
        v37 = v36;
        v38 = *(_QWORD *)(v27 + 112);
        v39 = *(std::__shared_weak_count **)(v27 + 120);
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = *(_QWORD *)(v27 + 16);
        v43 = *(std::__shared_weak_count **)(v27 + 24);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = *(_QWORD *)(a1 + 360);
        v47 = *(_QWORD *)(v46 + 232);
        v48 = *(std::__shared_weak_count **)(v46 + 240);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = *(_QWORD **)(v36 + 64);
        v51[1] = 0;
        v52 = *(_QWORD *)(a3 + 216);
        *v51 = v52;
        v53 = *(_QWORD **)(v36 + 160);
        v54 = *(_QWORD *)(a3 + 224);
        if (v54)
        {
          v55 = (unint64_t *)(v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v57 = (std::__shared_weak_count *)v53[1];
        *v53 = v52;
        v53[1] = v54;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            v306 = v47;
            v60 = v43;
            v61 = v42;
            v62 = v38;
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            v38 = v62;
            v42 = v61;
            v43 = v60;
            v47 = v306;
            a1 = v304;
          }
        }
        v63 = *(_QWORD *)(v37 + 64);
        *(_QWORD *)(v63 + 24) = 0;
        v64 = *(_QWORD *)(a3 + 232);
        *(_QWORD *)(v63 + 16) = v64;
        v65 = *(_QWORD *)(v37 + 160);
        v66 = *(_QWORD *)(a3 + 240);
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = *(std::__shared_weak_count **)(v65 + 24);
        *(_QWORD *)(v65 + 16) = v64;
        *(_QWORD *)(v65 + 24) = v66;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            v307 = v47;
            v72 = v43;
            v73 = v42;
            v74 = v38;
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
            v38 = v74;
            v42 = v73;
            v43 = v72;
            v47 = v307;
            a1 = v304;
          }
        }
        v75 = *(_QWORD *)(v37 + 64);
        *(_QWORD *)(v75 + 48) = v38;
        *(_QWORD *)(v75 + 56) = 0;
        v76 = *(_QWORD *)(v37 + 160);
        if (v39)
        {
          v77 = (unint64_t *)&v39->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v79 = *(std::__shared_weak_count **)(v76 + 56);
        *(_QWORD *)(v76 + 48) = v38;
        *(_QWORD *)(v76 + 56) = v39;
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            v82 = v47;
            v83 = v43;
            v84 = v42;
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
            v42 = v84;
            v43 = v83;
            v47 = v82;
            a1 = v304;
          }
        }
        **(_QWORD **)(v37 + 96) = v42;
        if (v48)
        {
          v85 = (unint64_t *)&v48->__shared_owners_;
          v28 = v312;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
          ggl::Flyover::FlyoverPipelineSetup::setState((ggl::PipelineSetup *)v37, v47, v48);
          v87 = (unint64_t *)&v48->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        else
        {
          ggl::Flyover::FlyoverPipelineSetup::setState((ggl::PipelineSetup *)v37, v47, 0);
          v28 = v312;
        }
        if (!*(_BYTE *)(a1 + 394))
          goto LABEL_83;
        v101 = 168;
        if (a10)
          v101 = 176;
        v102 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + v101);
        v103 = *(_QWORD *)(v37 + 64);
        *(_QWORD *)(v103 + 64) = v102;
        *(_QWORD *)(v103 + 72) = 0;
        v104 = *(_QWORD *)(v37 + 160);
        v105 = *(std::__shared_weak_count **)(v104 + 72);
        *(_QWORD *)(v104 + 64) = 0;
        *(_QWORD *)(v104 + 72) = 0;
        if (!v105)
          goto LABEL_83;
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
          v12 = v316;
          if (!v48)
            goto LABEL_87;
        }
        else
        {
LABEL_83:
          v12 = v316;
          if (!v48)
            goto LABEL_87;
        }
        v108 = (unint64_t *)&v48->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (v109)
        {
LABEL_87:
          v26 = v314;
          if (v43)
            goto LABEL_88;
          goto LABEL_93;
        }
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
        v26 = v314;
        if (v43)
        {
LABEL_88:
          v110 = (unint64_t *)&v43->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
LABEL_93:
        if (v39)
        {
          v112 = (unint64_t *)&v39->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        *(_QWORD *)(*(_QWORD *)(v37 + 96) + 8) = *(_QWORD *)v27;
        TileScalar = md::COverlayRenderLayer::getTileScalar(*(md::COverlayRenderLayer **)(*(_QWORD *)(a1 + 360) + 416), (const QuadTile *)(a3 + 24), (const QuadTile *)(v27 + 32));
        v115 = *(_QWORD *)(v37 + 64);
        *(_QWORD *)(v115 + 32) = TileScalar;
        *(_QWORD *)(v115 + 40) = 0;
        v116 = *(_QWORD *)(v37 + 160);
        v117 = *(std::__shared_weak_count **)(v116 + 40);
        *(_QWORD *)(v116 + 32) = 0;
        *(_QWORD *)(v116 + 40) = 0;
        a4 = (uint64_t)v323;
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        v30 = *(_QWORD *)(a1 + 360);
        v31 = *(_QWORD *)(v30 + 96);
        *(_QWORD *)(v35 + 64) = *(_QWORD *)(v30 + 80);
        *(_QWORD *)(v35 + 24) = v31;
        *(_QWORD *)(v35 + 32) = v37;
        *(_QWORD *)(v35 + 48) = v321;
        *(_DWORD *)(v35 + 40) = v326;
LABEL_12:
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v35);
LABEL_13:
        v27 += 136;
        if (v27 == v26)
          return;
      }
    }
    v324 = (ggl::CommandBuffer *)a4;
    v168 = (uint64_t *)a2[12];
    v169 = v17;
    if (!v168)
      return;
    v170 = *(unsigned __int16 *)(v17 + 24);
    if (v170 > 0x46)
    {
      if (v170 == 71)
      {
        v171 = a6 + 11;
      }
      else
      {
        if (v170 != 72)
          return;
        v171 = a6 + 13;
      }
    }
    else if (v170 == 11)
    {
      v171 = a6 + 10;
    }
    else
    {
      if (v170 != 12)
        return;
      v171 = a6 + 12;
    }
    v209 = *v171;
    if (!*v171)
      return;
    v210 = *v168;
    if (v168[1] == *v168)
      return;
    v211 = 0;
    v305 = a2;
    v310 = *v171;
    while (1)
    {
      v212 = *(_DWORD *)(a2[14] + 4 * v211);
      *(_WORD *)v331 = *(_WORD *)(v169 + 168);
      *(_QWORD *)&v331[4] = *(_QWORD *)(v169 + 172);
      LODWORD(v332) = v212;
      v213 = std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::find<md::SurfaceKey>(v209, v331);
      if (v213)
      {
        v214 = (_QWORD *)v213[8];
        if (v214)
          break;
      }
LABEL_210:
      ++v211;
      v210 = *v168;
      v169 = v311;
      if (v211 >= 0xF0F0F0F0F0F0F0F1 * ((v168[1] - *v168) >> 3))
        return;
    }
    v215 = 0;
    v320 = v210 + 136 * v211;
    while (v215 != *(_QWORD *)(v320 + 24))
    {
LABEL_215:
      ++v215;
      v214 = (_QWORD *)*v214;
      if (!v214)
      {
        a2 = v305;
        v168 = (uint64_t *)v305[12];
        v209 = v310;
        goto LABEL_210;
      }
    }
    v216 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 312));
    v217 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 272));
    *(_QWORD *)&v330[0] = *(_QWORD *)(v320 + 104);
    v218 = *(_QWORD *)(v320 + 112);
    *((_QWORD *)&v330[0] + 1) = v218;
    if (v218)
    {
      v219 = (unint64_t *)(v218 + 8);
      do
        v220 = __ldxr(v219);
      while (__stxr(v220 + 1, v219));
    }
    v221 = (std::__shared_weak_count *)v214[4];
    v328 = v214[3];
    v329 = v221;
    if (v221)
    {
      v222 = (unint64_t *)&v221->__shared_owners_;
      do
        v223 = __ldxr(v222);
      while (__stxr(v223 + 1, v222));
    }
    v224 = *(_QWORD *)(a1 + 360);
    v225 = *(std::__shared_weak_count **)(v224 + 208);
    v327[0] = *(_QWORD *)(v224 + 200);
    v327[1] = (uint64_t)v225;
    if (v225)
    {
      v226 = (unint64_t *)&v225->__shared_owners_;
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
    }
    md::COverlayRenderLayer::setTexturePipeline<ggl::Textured::SRGBBlendPos4DUVPipelineSetup,ggl::Textured::SRGBBlendPos4DUVPipelineState>(a1, v217, *(_QWORD *)(a3 + 216), *(_QWORD *)(a3 + 224), (uint64_t *)(a3 + 232), (uint64_t *)v330, &v328, a10, v327);
    if (!v225)
      goto LABEL_230;
    v228 = (unint64_t *)&v225->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
      v230 = v329;
      if (v329)
        goto LABEL_231;
    }
    else
    {
LABEL_230:
      v230 = v329;
      if (v329)
      {
LABEL_231:
        v231 = (unint64_t *)&v230->__shared_owners_;
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
    }
    v233 = (std::__shared_weak_count *)*((_QWORD *)&v330[0] + 1);
    if (*((_QWORD *)&v330[0] + 1))
    {
      v234 = (unint64_t *)(*((_QWORD *)&v330[0] + 1) + 8);
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
        std::__shared_weak_count::__release_weak(v233);
      }
    }
    v236 = *(_QWORD *)(a1 + 360);
    v237 = *(_QWORD *)(v236 + 96);
    *(_QWORD *)(v216 + 64) = *(_QWORD *)(v236 + 80);
    *(_QWORD *)(v216 + 24) = v237;
    *(_QWORD *)(v216 + 32) = v217;
    *(_QWORD *)(v216 + 48) = a9;
    *(_DWORD *)(v216 + 40) = v326;
    v238 = md::COverlayRenderLayer::getTileScalar(*(md::COverlayRenderLayer **)(v236 + 416), (const QuadTile *)(a3 + 24), (const QuadTile *)v320);
    v239 = *((_QWORD *)v217 + 8);
    *(_QWORD *)(v239 + 32) = v238;
    *(_QWORD *)(v239 + 40) = 0;
    v240 = *((_QWORD *)v217 + 20);
    v241 = *(std::__shared_weak_count **)(v240 + 40);
    *(_QWORD *)(v240 + 32) = 0;
    *(_QWORD *)(v240 + 40) = 0;
    if (v241)
    {
      v242 = (unint64_t *)&v241->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    ggl::CommandBuffer::pushRenderItem((uint64_t)v324, (ggl::RenderItem *)v216);
    goto LABEL_215;
  }
  if (*(unsigned __int8 *)(v17 + 168) != 255)
  {
    v19 = (_QWORD *)*((_QWORD *)v12 + 1);
    v20 = v19[1];
    if ((v20 & (v20 - 1)) != 0)
    {
      v124 = 0x1AF456233693CD46;
      if (v20 <= 0x1AF456233693CD46)
        v124 = 0x1AF456233693CD46 % v20;
      v22 = a2;
      v23 = a4;
      v21 = *(_QWORD **)(*v19 + 8 * v124);
      do
      {
        do
          v21 = (_QWORD *)*v21;
        while (v21[1] != 0x1AF456233693CD46);
      }
      while (v21[2] != 0x1AF456233693CD46);
    }
    else
    {
      v21 = *(_QWORD **)(*v19 + 8 * ((v20 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v21 = (_QWORD *)*v21;
        while (v21[1] != 0x1AF456233693CD46);
      }
      while (v21[2] != 0x1AF456233693CD46);
      v22 = a2;
      v23 = a4;
    }
    v125 = *(_QWORD *)(v21[5] + 32);
    v126 = *(_BYTE *)(a3 + 25);
    v127 = *(int32x2_t *)(a3 + 28);
    v128 = *(unsigned __int8 *)(a3 + 24);
    v129 = *(_QWORD **)(*(_QWORD *)(a1 + 360) + 328);
    v130 = v129[1];
    v131 = (float32x4_t *)v129[9];
    *v131 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v125 + 552)), *(float64x2_t *)(v125 + 568));
    v131[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v125 + 584)), *(float64x2_t *)(v125 + 600));
    v131[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v125 + 616)), *(float64x2_t *)(v125 + 632));
    v131[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v125 + 648)), *(float64x2_t *)(v125 + 664));
    v132 = v129[8];
    if (v132 <= v130)
      v132 = v130;
    v129[7] = 0;
    v129[8] = v132;
    v133 = (uint64_t *)**((_QWORD **)v12 + 2);
    if (v133 != *(uint64_t **)(*((_QWORD *)v12 + 2) + 8) && *v133 != 0xE72A6B9E738C2197)
    {
      v134 = v133 + 5;
      do
      {
        v135 = *v134;
        v134 += 5;
      }
      while (v135 != 0xE72A6B9E738C2197);
      v133 = v134 - 5;
    }
    v137 = v133[3];
    v136 = (std::__shared_weak_count *)v133[4];
    if (v136)
    {
      v138 = (unint64_t *)&v136->__shared_owners_;
      do
        v139 = __ldxr(v138);
      while (__stxr(v139 + 1, v138));
      do
        v140 = __ldaxr(v138);
      while (__stlxr(v140 - 1, v138));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v141 = *(uint64_t **)(a1 + 360);
    v142 = (_QWORD *)v141[43];
    v143 = v142[1];
    v144 = v142[9];
    v145 = -*(float *)(v137 + 80);
    *(_DWORD *)(v144 + 8) = 1065353216;
    *(_QWORD *)v144 = 0;
    *(float *)(v144 + 12) = v145;
    if (v142[8] > v143)
      v143 = v142[8];
    v142[7] = 0;
    v142[8] = v143;
    v146 = (_QWORD *)v141[45];
    v147 = v146[1];
    v148 = v146[9];
    *(_QWORD *)v148 = 0;
    *(_DWORD *)(v148 + 8) = -1082130432;
    *(float *)(v148 + 12) = v145;
    if (v146[8] > v147)
      v147 = v146[8];
    v146[7] = 0;
    v146[8] = v147;
    v149 = (_QWORD *)v141[47];
    v150 = v149[1];
    *(_OWORD *)v149[9] = xmmword_19FFB3480;
    if (v149[8] > v150)
      v150 = v149[8];
    v149[7] = 0;
    v149[8] = v150;
    v334 = 0;
    v336 = 0;
    v339 = 0uLL;
    v338 = 0uLL;
    v335 = 0uLL;
    v332 = 0uLL;
    *(_OWORD *)&v331[8] = 0uLL;
    *(_QWORD *)v331 = 0x415854A640000000;
    v333 = 0x415854A640000000;
    v340 = 0x3FF0000000000000;
    v337 = 0x41583FC4141C97D0;
    gm::operator*<double,4,4,4>((double *)v330, (double *)(v125 + 3160), (double *)v331);
    *(_OWORD *)v325 = v330[0];
    *(_OWORD *)v319 = v330[2];
    v322 = (float64x2_t)v330[1];
    *(_OWORD *)v315 = v330[4];
    *(_OWORD *)v317 = v330[3];
    *(_OWORD *)v309 = v330[6];
    v313 = (float64x2_t)v330[5];
    v308 = (float64x2_t)v330[7];
    v151 = ggl::FragmentedPool<ggl::RenderItem>::pop(v141[39]);
    v152 = *(_QWORD **)(a1 + 360);
    *(_QWORD *)(v151 + 24) = v152[12];
    *(_QWORD *)(v151 + 64) = v152[40];
    v153 = v152[51];
    v154 = *(_QWORD *)(v153 + 8);
    if (v154 == *(_QWORD *)v153)
    {
      v165 = *(_QWORD *)(v153 + 88);
      if (!v165)
      {
LABEL_322:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_323:
        abort();
      }
      v155 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 48))(v165);
      v156 = *(uint64_t **)(v153 + 40);
      v166 = *(_QWORD *)(v153 + 48);
      if ((unint64_t)v156 >= v166)
      {
        v173 = *(_QWORD *)(v153 + 32);
        v174 = ((uint64_t)v156 - v173) >> 3;
        v160 = v174 + 1;
        if ((unint64_t)(v174 + 1) >> 61)
          goto LABEL_323;
        v175 = v166 - v173;
        if (v175 >> 2 > v160)
          v160 = v175 >> 2;
        if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        if (v160)
        {
          v176 = 8 * v160;
          v177 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v153 + 56) + 16))(*(_QWORD *)(v153 + 56), 8 * v160, 8);
          v164 = (uint64_t *)(v177 + 8 * v174);
          v160 = v177 + v176;
          if (v177)
            *v164 = v155;
        }
        else
        {
          v164 = (uint64_t *)(8 * v174);
        }
        v167 = v164 + 1;
        v200 = *(_QWORD *)(v153 + 32);
        v178 = *(_QWORD *)(v153 + 40);
        if (v178 == v200)
          goto LABEL_250;
        v201 = v178 - v200 - 8;
        if (v201 < 0x38)
        {
          v203 = *(_QWORD *)(v153 + 40);
        }
        else if ((unint64_t)(v178 - (_QWORD)v164) < 0x20)
        {
          v203 = *(_QWORD *)(v153 + 40);
        }
        else
        {
          v202 = (v201 >> 3) + 1;
          v203 = v178 - 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
          v204 = v164 - 2;
          v205 = (__int128 *)(v178 - 16);
          v206 = v202 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v207 = *v205;
            *((_OWORD *)v204 - 1) = *(v205 - 1);
            *(_OWORD *)v204 = v207;
            v204 -= 4;
            v205 -= 2;
            v206 -= 4;
          }
          while (v206);
          v164 -= v202 & 0x3FFFFFFFFFFFFFFCLL;
          if (v202 == (v202 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_249;
        }
        do
        {
          v244 = *(_QWORD *)(v203 - 8);
          v203 -= 8;
          *--v164 = v244;
        }
        while (v203 != v200);
        goto LABEL_249;
      }
    }
    else
    {
      v155 = *(_QWORD *)(v154 - 8);
      *(_QWORD *)(v153 + 8) = v154 - 8;
      v156 = *(uint64_t **)(v153 + 40);
      v157 = *(_QWORD *)(v153 + 48);
      if ((unint64_t)v156 >= v157)
      {
        v158 = *(_QWORD *)(v153 + 32);
        v159 = ((uint64_t)v156 - v158) >> 3;
        v160 = v159 + 1;
        if ((unint64_t)(v159 + 1) >> 61)
          goto LABEL_323;
        v161 = v157 - v158;
        if (v161 >> 2 > v160)
          v160 = v161 >> 2;
        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        if (v160)
        {
          v162 = 8 * v160;
          v163 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v153 + 56) + 16))(*(_QWORD *)(v153 + 56), 8 * v160, 8);
          v164 = (uint64_t *)(v163 + 8 * v159);
          v160 = v163 + v162;
          if (v163)
            *v164 = v155;
        }
        else
        {
          v164 = (uint64_t *)(8 * v159);
        }
        v167 = v164 + 1;
        v179 = *(_QWORD *)(v153 + 32);
        v178 = *(_QWORD *)(v153 + 40);
        if (v178 == v179)
          goto LABEL_250;
        v180 = v178 - v179 - 8;
        if (v180 < 0x38)
        {
          v182 = *(_QWORD *)(v153 + 40);
        }
        else if ((unint64_t)(v178 - (_QWORD)v164) < 0x20)
        {
          v182 = *(_QWORD *)(v153 + 40);
        }
        else
        {
          v181 = (v180 >> 3) + 1;
          v182 = v178 - 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
          v183 = v164 - 2;
          v184 = (__int128 *)(v178 - 16);
          v185 = v181 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v186 = *v184;
            *((_OWORD *)v183 - 1) = *(v184 - 1);
            *(_OWORD *)v183 = v186;
            v183 -= 4;
            v184 -= 2;
            v185 -= 4;
          }
          while (v185);
          v164 -= v181 & 0x3FFFFFFFFFFFFFFCLL;
          if (v181 == (v181 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_249;
        }
        do
        {
          v208 = *(_QWORD *)(v182 - 8);
          v182 -= 8;
          *--v164 = v208;
        }
        while (v182 != v179);
LABEL_249:
        v178 = *(_QWORD *)(v153 + 32);
LABEL_250:
        *(_QWORD *)(v153 + 32) = v164;
        *(_QWORD *)(v153 + 40) = v167;
        v245 = *(_QWORD *)(v153 + 48);
        *(_QWORD *)(v153 + 48) = v160;
        if (v178)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v153 + 56) + 40))(*(_QWORD *)(v153 + 56), v178, v245 - v178);
        goto LABEL_252;
      }
    }
    if (v156)
      *v156 = v155;
    v167 = v156 + 1;
LABEL_252:
    *(_QWORD *)(v153 + 40) = v167;
    *(_QWORD *)&v330[0] = v155;
    v246 = *(_QWORD *)(v153 + 120);
    if (v246)
    {
      v247 = vrev64_s32(v127);
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v246 + 48))(v246, v330);
      v248 = *(_QWORD **)(v155 + 64);
      v249 = (_QWORD *)v248[2];
      v250 = v249[1];
      v251 = (float32x2_t *)v249[9];
      v251[10].i32[0] = v128;
      *v251 = vcvt_f32_f64(*(float64x2_t *)v325);
      v251[1] = vcvt_f32_f64(v322);
      v251[2] = vcvt_f32_f64(*(float64x2_t *)v319);
      v251[3] = vcvt_f32_f64(*(float64x2_t *)v317);
      v251[4] = vcvt_f32_f64(*(float64x2_t *)v315);
      v251[5] = vcvt_f32_f64(v313);
      v251[6] = vcvt_f32_f64(*(float64x2_t *)v309);
      v251[7] = vcvt_f32_f64(v308);
      v252.i64[0] = v247.u32[0];
      v252.i64[1] = v247.u32[1];
      v253 = vadd_s32(v247, (int32x2_t)0x100000001);
      __asm { FMOV            V3.2D, #1.0 }
      v259 = vdivq_f64(_Q3, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(1 << v126)), 0));
      v260 = vmulq_f64(vcvtq_f64_u64(v252), v259);
      v252.i64[0] = v253.u32[0];
      v252.i64[1] = v253.u32[1];
      *(float32x2_t *)&v260.f64[0] = vcvt_f32_f64(v260);
      v251[8] = vsub_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v252), v259)), *(float32x2_t *)&v260.f64[0]);
      v251[9] = *(float32x2_t *)&v260.f64[0];
      if (v249[8] > v250)
        v250 = v249[8];
      v249[7] = 0;
      v249[8] = v250;
      if (v128 == 5)
      {
        v261 = (uint64_t *)(*(_QWORD *)(a1 + 360) + 360);
      }
      else if (v128 == 2)
      {
        v261 = (uint64_t *)(*(_QWORD *)(a1 + 360) + 344);
      }
      else
      {
        v261 = (uint64_t *)(*(_QWORD *)(a1 + 360) + 376);
      }
      v248[5] = 0;
      v262 = *v261;
      v248[4] = *v261;
      v263 = *(_QWORD *)(v155 + 160);
      v264 = v261[1];
      if (v264)
      {
        v265 = (unint64_t *)(v264 + 8);
        do
          v266 = __ldxr(v265);
        while (__stxr(v266 + 1, v265));
      }
      v267 = *(std::__shared_weak_count **)(v263 + 40);
      *(_QWORD *)(v263 + 32) = v262;
      *(_QWORD *)(v263 + 40) = v264;
      if (v267)
      {
        v268 = (unint64_t *)&v267->__shared_owners_;
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
        }
      }
      v270 = *(_QWORD *)(*v22 + 24);
      v271 = *(std::__shared_weak_count **)(*v22 + 32);
      if (v271)
      {
        v272 = (unint64_t *)&v271->__shared_owners_;
        do
          v273 = __ldxr(v272);
        while (__stxr(v273 + 1, v272));
        **(_QWORD **)(v155 + 96) = v270;
        do
          v274 = __ldaxr(v272);
        while (__stlxr(v274 - 1, v272));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v271);
        }
      }
      else
      {
        **(_QWORD **)(v155 + 96) = v270;
      }
      v275 = *(_QWORD *)(a1 + 360);
      v277 = *(_QWORD *)(v275 + 392);
      v276 = *(std::__shared_weak_count **)(v275 + 400);
      if (v276)
      {
        v278 = (unint64_t *)&v276->__shared_owners_;
        do
          v279 = __ldxr(v278);
        while (__stxr(v279 + 1, v278));
      }
      if (v277 && **(_QWORD **)(v277 + 40) == *(_QWORD *)(v155 + 8))
      {
        v284 = *(_QWORD *)(v155 + 16);
        if (v284 && v284 != v277)
          ggl::PipelineSetup::resetData(v155);
        if (v276)
        {
          v285 = (unint64_t *)&v276->__shared_owners_;
          do
            v286 = __ldxr(v285);
          while (__stxr(v286 + 1, v285));
        }
        v280 = *(std::__shared_weak_count **)(v155 + 24);
        *(_QWORD *)(v155 + 16) = v277;
        *(_QWORD *)(v155 + 24) = v276;
        v281 = v23;
        if (!v280)
          goto LABEL_296;
        v287 = (unint64_t *)&v280->__shared_owners_;
        do
          v283 = __ldaxr(v287);
        while (__stlxr(v283 - 1, v287));
      }
      else
      {
        v280 = *(std::__shared_weak_count **)(v155 + 24);
        *(_QWORD *)(v155 + 16) = 0;
        *(_QWORD *)(v155 + 24) = 0;
        v281 = v23;
        if (!v280)
        {
LABEL_296:
          if (v276)
          {
            v288 = (unint64_t *)&v276->__shared_owners_;
            do
              v289 = __ldaxr(v288);
            while (__stlxr(v289 - 1, v288));
            if (!v289)
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          v290 = *(_QWORD *)(*v22 + 56);
          v291 = *(std::__shared_weak_count **)(*v22 + 64);
          if (v291)
          {
            v292 = (unint64_t *)&v291->__shared_owners_;
            do
              v293 = __ldxr(v292);
            while (__stxr(v293 + 1, v292));
          }
          v294 = *(_QWORD *)(v155 + 64);
          *(_QWORD *)(v294 + 48) = v290;
          *(_QWORD *)(v294 + 56) = 0;
          v295 = *(_QWORD *)(v155 + 160);
          v296 = *(std::__shared_weak_count **)(v295 + 56);
          *(_QWORD *)(v295 + 48) = 0;
          *(_QWORD *)(v295 + 56) = 0;
          if (v296)
          {
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
          if (v291)
          {
            v299 = (unint64_t *)&v291->__shared_owners_;
            do
              v300 = __ldaxr(v299);
            while (__stlxr(v300 - 1, v299));
            if (!v300)
            {
              ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
              std::__shared_weak_count::__release_weak(v291);
            }
          }
          *(_QWORD *)(v151 + 32) = v155;
          *(_DWORD *)(v151 + 40) = v326;
          *(_QWORD *)(v151 + 48) = a9;
          if (*(_QWORD *)(v155 + 72) != *(_QWORD *)(v155 + 64))
          {
            v301 = 0;
            do
            {
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v155 + 16))(v155, v301++);
              v155 = *(_QWORD *)(v151 + 32);
            }
            while (v301 < (uint64_t)(*(_QWORD *)(v155 + 72) - *(_QWORD *)(v155 + 64)) >> 4);
          }
          if (*(_QWORD *)(v155 + 104) != *(_QWORD *)(v155 + 96))
          {
            v302 = 0;
            do
            {
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v155 + 24))(v155, v302++);
              v155 = *(_QWORD *)(v151 + 32);
            }
            while (v302 < (uint64_t)(*(_QWORD *)(v155 + 104) - *(_QWORD *)(v155 + 96)) >> 3);
          }
          ggl::CommandBuffer::pushRenderItem(v281, (ggl::RenderItem *)v151);
          return;
        }
        v282 = (unint64_t *)&v280->__shared_owners_;
        do
          v283 = __ldaxr(v282);
        while (__stlxr(v283 - 1, v282));
      }
      if (!v283)
      {
        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
        std::__shared_weak_count::__release_weak(v280);
      }
      goto LABEL_296;
    }
    goto LABEL_322;
  }
  v120 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 312));
  v121 = *(_QWORD *)(a1 + 360);
  if (a10)
  {
    v122 = *a2;
    v123 = (uint64_t *)(v121 + 8 * *(unsigned __int8 *)(*a2 + 72) + 48);
  }
  else
  {
    if (*(_BYTE *)(a7 + 132))
      v172 = 2 * (*(_DWORD *)(a1 + 348) == 0);
    else
      v172 = 0;
    v122 = *a2;
    v123 = (uint64_t *)(v121 + 16 * v172 + 8 * *(unsigned __int8 *)(*a2 + 72));
  }
  v187 = *v123;
  v188 = *(_QWORD *)(v122 + 64);
  *(_QWORD *)v331 = *(_QWORD *)(v122 + 56);
  *(_QWORD *)&v331[8] = v188;
  v189 = v122;
  if (v188)
  {
    v190 = (unint64_t *)(v188 + 8);
    do
      v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
    v189 = *a2;
  }
  v192 = *(std::__shared_weak_count **)(v189 + 32);
  *(_QWORD *)&v330[0] = *(_QWORD *)(v189 + 24);
  *((_QWORD *)&v330[0] + 1) = v192;
  if (v192)
  {
    v193 = (unint64_t *)&v192->__shared_owners_;
    do
      v194 = __ldxr(v193);
    while (__stxr(v194 + 1, v193));
  }
  md::COverlayRenderLayer::drapeOnTerrainIfNecessary(a1, *((_QWORD **)v12 + 1), a9, a10, v326, (QuadTile *)(v17 + 168), (const QuadTile *)v122, (uint64_t)v120, v187, (uint64_t *)v331, v330, (uint64_t *)(a3 + 216), (uint64_t *)(a3 + 232), 1);
  if (v192)
  {
    v195 = (unint64_t *)&v192->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v197 = *(std::__shared_weak_count **)&v331[8];
  if (*(_QWORD *)&v331[8])
  {
    v198 = (unint64_t *)(*(_QWORD *)&v331[8] + 8);
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  ggl::CommandBuffer::pushRenderItem(a4, v120);
}

void sub_19F9E2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void md::COverlayRenderLayer::layoutResource(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, md::LayoutContext *this, _QWORD **a6, uint64_t a7, int a8, float a9, uint64_t a10, uint64_t *a11, unsigned __int8 a12)
{
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  ggl::RenderItem *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  float *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  float v38;
  int v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  ggl::PipelineSetup *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _BOOL8 v117;
  uint64_t *v118;
  unsigned int v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  __int128 *v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  __int128 *v145;
  char v146;
  uint64_t v147;
  char v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  ggl::RenderItem *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t *v180;
  _QWORD *v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t *v184;
  _QWORD *v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t *v191;
  unint64_t v192;
  signed __int8 v193;
  unsigned int v194;
  unsigned int v195;
  unsigned __int8 *v196;
  _QWORD *v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  __n128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  md::MaskingOverlayRenderable *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t *v224;
  int v225;
  uint64_t v226;
  int v228;
  unsigned __int8 *v229;
  QuadTile *v231;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235[2];
  __int128 v236;
  int v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  _QWORD *v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  _QWORD v245[3];
  _QWORD *v246;
  _QWORD v247[3];
  _QWORD *v248;
  _QWORD v249[3];
  _QWORD *v250;
  uint64_t v251;

  v18 = a12;
  v20 = a10;
  v19 = a11;
  v251 = *MEMORY[0x1E0C80C00];
  v244 = a4;
  v21 = *(_QWORD *)(a3 + 384);
  v231 = (QuadTile *)(v21 + 168);
  v22 = *(unsigned __int8 *)(v21 + 169);
  md::LayoutContext::frameState(this);
  a2[18] = *(_QWORD *)(v23 + 624);
  if (*(_BYTE *)(a1 + 394))
  {
    v24 = 1.0;
    v25 = (float)(a9 * -1.25) + 1.0;
    if (a9 > 0.4)
      v25 = 0.5;
    if (v18)
      v24 = v25;
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 176);
    v27 = *(_QWORD *)(v26 + 8);
    **(float **)(v26 + 72) = v24;
    if (*(_QWORD *)(v26 + 64) > v27)
      v27 = *(_QWORD *)(v26 + 64);
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = v27;
  }
  v233 = v22 + a8;
  *(_BYTE *)(a7 + 133) = v18;
  if (*a2)
  {
    v28 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 312));
    v29 = *(_QWORD *)(a1 + 360);
    if (v18)
    {
      v30 = *a2;
      v31 = (uint64_t *)(v29 + 8 * *(unsigned __int8 *)(*a2 + 72) + 48);
      v32 = v20;
    }
    else
    {
      v32 = v20;
      if (*(_BYTE *)(a7 + 132))
        v117 = *(_DWORD *)(a1 + 348) == 0;
      else
        v117 = 0;
      v30 = *a2;
      v31 = (uint64_t *)(v29 + 16 * v117 + 8 * *(unsigned __int8 *)(*a2 + 72));
    }
    v121 = *v31;
    v122 = *(_QWORD *)(v30 + 64);
    v242 = *(_QWORD **)(v30 + 56);
    v243 = (std::__shared_weak_count *)v122;
    v123 = v30;
    if (v122)
    {
      v124 = (unint64_t *)(v122 + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
      v123 = *a2;
    }
    v126 = *(std::__shared_weak_count **)(v123 + 32);
    *(_QWORD *)&v236 = *(_QWORD *)(v123 + 24);
    *((_QWORD *)&v236 + 1) = v126;
    if (v126)
    {
      p_shared_owners = (unint64_t *)&v126->__shared_owners_;
      do
        v128 = __ldxr(p_shared_owners);
      while (__stxr(v128 + 1, p_shared_owners));
    }
    md::COverlayRenderLayer::drapeOnTerrainIfNecessary(a1, *((_QWORD **)this + 1), v32, v18, v233, v231, (const QuadTile *)v30, (uint64_t)v28, v121, (uint64_t *)&v242, &v236, (uint64_t *)(a3 + 216), (uint64_t *)(a3 + 232), 0);
    if (v126)
    {
      v129 = (unint64_t *)&v126->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v131 = v243;
    if (v243)
    {
      v132 = (unint64_t *)&v243->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    ggl::CommandBuffer::pushRenderItem(v244, v28);
    return;
  }
  v234 = v18;
  if (a2[11])
  {
    LODWORD(v235[0]) = *(_DWORD *)a2[14];
    v33 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)(a1 + 400), v235[0], v235);
    v34 = (uint64_t *)a2[11];
    v36 = *v34;
    v35 = v34[1];
    if (*v34 == v35)
      return;
    v37 = *((unsigned __int16 *)v33 + 10);
    v228 = *((unsigned __int16 *)v33 + 11);
    v38 = v33[6];
    v226 = v34[1];
    v225 = v37;
    while (1)
    {
      v39 = *(unsigned __int16 *)(v36 + 56);
      if (v39 == v37)
      {
        v40 = a10;
        v41 = 1.0 - v38;
      }
      else
      {
        if (v39 != v228 || v38 <= 0.0)
          goto LABEL_17;
        v40 = a10 + 1;
        v41 = v38;
      }
      md::OverlayTileData::OverlayTileResource::RasterTile::setAlphaMultiplier(v36, v41);
      v42 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 312));
      v43 = *(_QWORD *)(a1 + 360);
      if (v234)
        v44 = (uint64_t *)(v43 + 8 * *(unsigned __int8 *)(v36 + 132) + 48);
      else
        v44 = (uint64_t *)(v43 + 16 * *(unsigned __int8 *)(a7 + 132) + 8 * *(unsigned __int8 *)(v36 + 132));
      v45 = *v44;
      if (!*(_QWORD *)v36)
      {
        gdc::Tiled::Tiled((gdc::Tiled *)&v242, (const QuadTile *)(v36 + 32), 0.0, 0.0);
        v59 = *(_QWORD *)(v36 + 120);
        *(_QWORD *)&v236 = *(_QWORD *)(v36 + 112);
        *((_QWORD *)&v236 + 1) = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = *(std::__shared_weak_count **)(v36 + 24);
        v240 = *(_QWORD *)(v36 + 16);
        v241 = v62;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v65 = *(std::__shared_weak_count **)(v36 + 72);
        v238 = *(_QWORD *)(v36 + 64);
        v239 = v65;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        md::COverlayRenderLayer::drapeOnTerrainIfNecessary(a1, *((_QWORD **)this + 1), v40, v234, v233, v231, (const QuadTile *)(v36 + 32), v42, v45, (uint64_t *)&v236, &v240, &v238, (uint64_t *)(v36 + 80), 0);
        if (v65)
        {
          v68 = (unint64_t *)&v65->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v70 = v241;
        if (v241)
        {
          v71 = (unint64_t *)&v241->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
        if (*((_QWORD *)&v236 + 1))
        {
          v74 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        goto LABEL_16;
      }
      v46 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v43 + 280));
      v47 = (ggl::PipelineSetup *)v46;
      v48 = *(_QWORD *)(v36 + 64);
      v49 = *(std::__shared_weak_count **)(v36 + 72);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        v53 = (uint64_t *)(v46 + 64);
        v52 = *(_QWORD **)(v46 + 64);
        *v52 = v48;
        v52[1] = 0;
        v55 = v46 + 160;
        v54 = *(_QWORD **)(v46 + 160);
        v56 = (unint64_t *)&v49->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        v58 = v40;
      }
      else
      {
        v58 = v40;
        v53 = (uint64_t *)(v46 + 64);
        v76 = *(_QWORD **)(v46 + 64);
        *v76 = v48;
        v76[1] = 0;
        v55 = v46 + 160;
        v54 = *(_QWORD **)(v46 + 160);
      }
      v77 = (std::__shared_weak_count *)v54[1];
      *v54 = v48;
      v54[1] = v49;
      if (!v77)
        goto LABEL_62;
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        if (!v49)
          goto LABEL_68;
      }
      else
      {
LABEL_62:
        if (!v49)
          goto LABEL_68;
      }
      v80 = (unint64_t *)&v49->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
LABEL_68:
      v82 = *v53;
      *(_QWORD *)(v82 + 24) = 0;
      v83 = *(_QWORD *)(v36 + 80);
      *(_QWORD *)(v82 + 16) = v83;
      v84 = *(_QWORD *)v55;
      v85 = *(_QWORD *)(v36 + 88);
      if (v85)
      {
        v86 = (unint64_t *)(v85 + 8);
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v88 = *(std::__shared_weak_count **)(v84 + 24);
      *(_QWORD *)(v84 + 16) = v83;
      *(_QWORD *)(v84 + 24) = v85;
      if (!v88)
        goto LABEL_75;
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
        v91 = *(_QWORD *)(v36 + 112);
        v92 = *(std::__shared_weak_count **)(v36 + 120);
        if (!v92)
        {
LABEL_82:
          v99 = *v53;
          *(_QWORD *)(v99 + 48) = v91;
          *(_QWORD *)(v99 + 56) = 0;
          v96 = *(_QWORD *)v55;
          goto LABEL_83;
        }
      }
      else
      {
LABEL_75:
        v91 = *(_QWORD *)(v36 + 112);
        v92 = *(std::__shared_weak_count **)(v36 + 120);
        if (!v92)
          goto LABEL_82;
      }
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      v95 = *v53;
      *(_QWORD *)(v95 + 48) = v91;
      *(_QWORD *)(v95 + 56) = 0;
      v96 = *(_QWORD *)v55;
      v97 = (unint64_t *)&v92->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
LABEL_83:
      v100 = *(std::__shared_weak_count **)(v96 + 56);
      *(_QWORD *)(v96 + 48) = v91;
      *(_QWORD *)(v96 + 56) = v92;
      if (!v100)
        goto LABEL_87;
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
        if (v92)
        {
LABEL_88:
          v103 = (unint64_t *)&v92->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      else
      {
LABEL_87:
        if (v92)
          goto LABEL_88;
      }
      v105 = *(_QWORD *)(v36 + 16);
      v106 = *(std::__shared_weak_count **)(v36 + 24);
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
        **((_QWORD **)v47 + 12) = v105;
        do
          v109 = __ldaxr(v107);
        while (__stlxr(v109 - 1, v107));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      else
      {
        **((_QWORD **)v47 + 12) = v105;
      }
      *(_QWORD *)(*((_QWORD *)v47 + 12) + 8) = *(_QWORD *)v36;
      ggl::Flyover::FlyoverPipelineSetup::setState(v47, *(_QWORD *)(*(_QWORD *)(a1 + 360) + 216), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 360) + 224));
      if (*(_BYTE *)(a1 + 394))
      {
        v110 = 168;
        if (v234)
          v110 = 176;
        v111 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + v110);
        v112 = *v53;
        *(_QWORD *)(v112 + 64) = v111;
        *(_QWORD *)(v112 + 72) = 0;
        v113 = *(_QWORD *)v55;
        v114 = *(std::__shared_weak_count **)(*(_QWORD *)v55 + 72);
        *(_QWORD *)(v113 + 64) = 0;
        *(_QWORD *)(v113 + 72) = 0;
        if (v114)
        {
          v115 = (unint64_t *)&v114->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
      }
      *(_QWORD *)(v42 + 64) = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 64);
      *(_QWORD *)(v42 + 24) = v45;
      *(_QWORD *)(v42 + 32) = v47;
      *(_QWORD *)(v42 + 48) = v58;
      *(_DWORD *)(v42 + 40) = v233;
      v35 = v226;
      v37 = v225;
LABEL_16:
      ggl::CommandBuffer::pushRenderItem(v244, (ggl::RenderItem *)v42);
LABEL_17:
      v36 += 136;
      if (v36 == v35)
        return;
    }
  }
  v118 = (uint64_t *)a2[12];
  if (!v118)
  {
    v134 = a2 + 1;
    if (a2[1])
    {
      v135 = *(_QWORD *)(a1 + 368);
      LOBYTE(a10) = v18 ^ 1;
      v136 = a4;
      v137 = (__int128 *)a7;
      v138 = v233;
      v139 = v20;
      v140 = 0;
      v141 = 0;
LABEL_138:
      md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(v135, v134, v136, v137, v138, v139, v140, v141, a10);
      return;
    }
    v142 = a2 + 2;
    if (a2[2])
    {
      v143 = *(_QWORD *)(a1 + 368);
      LOBYTE(a10) = v18 ^ 1;
      v144 = a4;
      v145 = (__int128 *)a7;
      v146 = v233;
      v147 = v20;
      v148 = 0;
      v149 = 0;
LABEL_144:
      md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(v143, v142, v144, v145, v146, v147, v148, v149, a10);
      return;
    }
    v180 = (uint64_t *)a2[9];
    if (v180)
    {
      v181 = (_QWORD *)*((_QWORD *)this + 1);
      v182 = md::LayoutContext::get<md::ElevationContext>(v181);
      v183 = *(_DWORD *)(md::LayoutContext::get<md::StyleLogicContext>(v181) + 88) - 3;
      v141 = *(float *)(v182 + 16) <= 0.01 && *(_BYTE *)(v182 + 3) != 0;
      v140 = v183 < 0xFFFFFFFE;
      v135 = *(_QWORD *)(a1 + 368);
      LOBYTE(a10) = v18 ^ 1;
      v134 = v180;
      v136 = a4;
      v137 = (__int128 *)a7;
      v138 = v233;
      v139 = v20;
      goto LABEL_138;
    }
    v184 = (uint64_t *)a2[10];
    if (v184)
    {
      v185 = (_QWORD *)*((_QWORD *)this + 1);
      v186 = md::LayoutContext::get<md::ElevationContext>(v185);
      v187 = *(_DWORD *)(md::LayoutContext::get<md::StyleLogicContext>(v185) + 88) - 3;
      v149 = *(float *)(v186 + 16) <= 0.01 && *(_BYTE *)(v186 + 3) != 0;
      v148 = v187 < 0xFFFFFFFE;
      v143 = *(_QWORD *)(a1 + 368);
      LOBYTE(a10) = v18 ^ 1;
      v142 = v184;
      v144 = a4;
      v145 = (__int128 *)a7;
      v146 = v233;
      v147 = v20;
      goto LABEL_144;
    }
    v188 = a2[3];
    if (v188)
    {
      v189 = *(_QWORD *)(v188 + 8);
      v242 = *(_QWORD **)v188;
      v243 = (std::__shared_weak_count *)v189;
      v190 = v19;
      if (v189)
      {
        v191 = (unint64_t *)(v189 + 8);
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
        v188 = a2[3];
      }
      v193 = *(_BYTE *)(v188 + 16) + *(_BYTE *)(a3 + 48);
      if (v234)
        v194 = 256;
      else
        v194 = 0;
      v195 = v194 >> 8;
      LOWORD(v236) = v194 & 0xFF00 | v193;
      v196 = std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::__emplace_unique_key_args<std::pair<signed char,BOOL>,std::piecewise_construct_t const&,std::tuple<std::pair<signed char,BOOL> const&>,std::tuple<>>(v19, v193, BYTE1(v194), &v236);
      v197 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)v196 + 3, (unint64_t)v242);
      std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::__emplace_unique_key_args<std::pair<signed char,BOOL>,std::piecewise_construct_t const&,std::tuple<std::pair<signed char,BOOL> const&>,std::tuple<>>(v190, v193, v195, &v236);
      if (v197)
        goto LABEL_237;
      v198 = std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::__emplace_unique_key_args<std::pair<signed char,BOOL>,std::piecewise_construct_t const&,std::tuple<std::pair<signed char,BOOL> const&>,std::tuple<>>(v190, v193, v195, &v236);
      std::__hash_table<std::shared_ptr<md::CircleOverlayRenderable>,std::hash<std::shared_ptr<md::CircleOverlayRenderable>>,std::equal_to<std::shared_ptr<md::CircleOverlayRenderable>>,std::allocator<std::shared_ptr<md::CircleOverlayRenderable>>>::__emplace_unique_key_args<std::shared_ptr<md::CircleOverlayRenderable>,std::shared_ptr<md::CircleOverlayRenderable> const&>((uint64_t *)v198 + 3, (unint64_t)v242, (uint64_t)v242, (uint64_t)v243);
      md::CircleOverlayRenderable::setSharedResources(v242, *(uint64_t **)(*(_QWORD *)(a1 + 360) + 288));
      v199 = v242;
      *((_DWORD *)v242 + 12) = a8;
      v200 = 168;
      if (v234)
        v200 = 176;
      md::CircleOverlayRenderable::updateWithContext((uint64_t)v199, *((_QWORD **)this + 1), v193, *(_DWORD *)(a1 + 348) == 0, v234, *(_QWORD *)(*(_QWORD *)(a1 + 360) + v200));
      v249[0] = &off_1E4279F00;
      v249[1] = &a10;
      v249[2] = &v244;
      v250 = v249;
      md::CircleOverlayRenderable::collectRenderItems((uint64_t)v242, v193, v234, (uint64_t)v249);
      v201 = v250;
      if (v250 == v249)
      {
        v202 = 4;
        v201 = v249;
      }
      else
      {
        if (!v250)
        {
LABEL_237:
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v242);
          return;
        }
        v202 = 5;
      }
      (*(void (**)(void))(*v201 + 8 * v202))();
      goto LABEL_237;
    }
    v203 = (uint64_t *)a2[4];
    v204 = (uint64_t *)a2[5];
    if (v203 == v204)
      return;
    do
    {
      v207 = *v203;
      v208 = *(_QWORD *)(a1 + 360);
      v209 = *(_QWORD *)(v208 + 296);
      *(_QWORD *)(v207 + 88) = v209;
      v210 = *(_QWORD *)(v207 + 40);
      if (v210)
      {
        if (v209)
          v209 = *(_QWORD *)(v209 + 16);
        *(_QWORD *)(v210 + 224) = v209;
      }
      v211 = *v203;
      v212 = *(_QWORD *)(*v203 + 304);
      if (v212)
      {
        *(_QWORD *)(v212 + 24) = *(_QWORD *)(v208 + 304);
        v211 = *v203;
      }
      *(_DWORD *)(v211 + 80) = v233;
      if (v18)
        v205 = 176;
      else
        v205 = 168;
      md::PolygonOverlayRenderable::updateWithContext((__int128 *)v211, this, *(_DWORD *)(a1 + 348) == 0, v18, *(_QWORD *)(v208 + v205));
      ++v203;
    }
    while (v203 != v204);
    v213 = (md::MaskingOverlayRenderable *)a2[7];
    if (v213)
    {
      *((_QWORD *)v213 + 3) = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 304);
      md::MaskingOverlayRenderable::layoutFill(v213, this, v233);
    }
    v214 = a2[4];
    if (a2[5] == v214)
    {
LABEL_231:
      v219 = (_QWORD *)a2[7];
      if (!v219)
        return;
      v245[0] = &off_1E4279F90;
      v245[1] = &a10;
      v245[2] = &v244;
      v246 = v245;
      md::MaskingOverlayRenderable::collectRenderItems(v219, 0, (uint64_t)v245);
      v220 = v246;
      if (v246 == v245)
      {
        v221 = 4;
        v220 = v245;
      }
      else
      {
        if (!v246)
          return;
        v221 = 5;
      }
      (*(void (**)(void))(*v220 + 8 * v221))();
      return;
    }
    v215 = 0;
    while (1)
    {
      v218 = *(_QWORD *)(v214 + 8 * v215);
      v247[0] = &off_1E4279F48;
      v247[1] = &a10;
      v247[2] = &v244;
      v248 = v247;
      md::PolygonOverlayRenderable::collectRenderItems(v218, v18 ^ 1, (uint64_t)v247, v206);
      v216 = v248;
      if (v248 == v247)
      {
        v216 = v247;
        v217 = 4;
      }
      else
      {
        if (!v248)
          goto LABEL_227;
        v217 = 5;
      }
      (*(void (**)(void))(*v216 + 8 * v217))();
LABEL_227:
      ++v215;
      v214 = a2[4];
      if (v215 >= (a2[5] - v214) >> 3)
        goto LABEL_231;
    }
  }
  v119 = *(unsigned __int16 *)(v21 + 24);
  if (v119 > 0x46)
  {
    if (v119 == 71)
    {
      v120 = a6 + 11;
    }
    else
    {
      if (v119 != 72)
        return;
      v120 = a6 + 13;
    }
  }
  else if (v119 == 11)
  {
    v120 = a6 + 10;
  }
  else
  {
    if (v119 != 12)
      return;
    v120 = a6 + 12;
  }
  v150 = *v120;
  if (*v120)
  {
    v151 = *v118;
    if (v118[1] != *v118)
    {
      v152 = 0;
      v223 = v21;
      v224 = a2;
      v222 = *v120;
      while (1)
      {
        v153 = *(_DWORD *)(a2[14] + 4 * v152);
        LOWORD(v236) = *(_WORD *)(v21 + 168);
        *(_QWORD *)((char *)&v236 + 4) = *(_QWORD *)(v21 + 172);
        v237 = v153;
        v154 = std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::find<md::SurfaceKey>(v150, (unsigned __int8 *)&v236);
        if (v154)
        {
          v155 = (_QWORD *)v154[8];
          if (v155)
            break;
        }
LABEL_151:
        ++v152;
        v151 = *v118;
        if (v152 >= 0xF0F0F0F0F0F0F0F1 * ((v118[1] - *v118) >> 3))
          return;
      }
      v156 = 0;
      v157 = v151 + 136 * v152;
      v229 = (unsigned __int8 *)(v157 + 124);
      while (v156 != *(_QWORD *)(v157 + 24))
      {
LABEL_156:
        ++v156;
        v155 = (_QWORD *)*v155;
        if (!v155)
        {
          v21 = v223;
          a2 = v224;
          v118 = (uint64_t *)v224[12];
          v150 = v222;
          goto LABEL_151;
        }
      }
      v158 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 312));
      v159 = *(_QWORD *)(a1 + 360);
      if (v234)
        v160 = (uint64_t *)(v159 + 8 * *v229 + 48);
      else
        v160 = (uint64_t *)(v159 + 16 * *(unsigned __int8 *)(a7 + 132) + 8 * *v229);
      v161 = *v160;
      gdc::Tiled::Tiled((gdc::Tiled *)&v242, (const QuadTile *)v157, 0.0, 0.0);
      v162 = a10;
      v240 = *(_QWORD *)(v157 + 104);
      v163 = *(std::__shared_weak_count **)(v157 + 112);
      v241 = v163;
      if (v163)
      {
        v164 = (unint64_t *)&v163->__shared_owners_;
        do
          v165 = __ldxr(v164);
        while (__stxr(v165 + 1, v164));
      }
      v166 = (std::__shared_weak_count *)v155[4];
      v238 = v155[3];
      v239 = v166;
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v235[0] = *(_QWORD *)(v157 + 56);
      v169 = *(std::__shared_weak_count **)(v157 + 64);
      v235[1] = (uint64_t)v169;
      if (v169)
      {
        v170 = (unint64_t *)&v169->__shared_owners_;
        do
          v171 = __ldxr(v170);
        while (__stxr(v171 + 1, v170));
      }
      md::COverlayRenderLayer::drapeOnTerrainIfNecessary(a1, *((_QWORD **)this + 1), v162, v234, v233, v231, (const QuadTile *)v157, (uint64_t)v158, v161, &v240, &v238, v235, (uint64_t *)(v157 + 72), 0);
      if (!v169)
        goto LABEL_174;
      v172 = (unint64_t *)&v169->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
        v174 = v239;
        if (v239)
          goto LABEL_175;
      }
      else
      {
LABEL_174:
        v174 = v239;
        if (v239)
        {
LABEL_175:
          v175 = (unint64_t *)&v174->__shared_owners_;
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
      }
      v177 = v241;
      if (v241)
      {
        v178 = (unint64_t *)&v241->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      ggl::CommandBuffer::pushRenderItem(v244, v158);
      goto LABEL_156;
    }
  }
}

void sub_19F9E3524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;

  v41 = *(_QWORD **)(v39 - 184);
  if (v41 == v38)
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 208);
  }
  else
  {
    if (!v41)
      _Unwind_Resume(exception_object);
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      while (v6)
      {
        v8 = v6;
        v6 = (_QWORD *)*v6;
        v9 = (std::__shared_weak_count *)v8[3];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        operator delete(v8);
      }
      v7 = (void *)v2[3];
      v2[3] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void md::PolylineOverlayLayoutContext::~PolylineOverlayLayoutContext(md::PolylineOverlayLayoutContext *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::COverlayRenderLayer::drapeOnTerrainIfNecessary(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5, QuadTile *a6, const QuadTile *a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11, uint64_t *a12, uint64_t *a13, char a14)
{
  int8x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t DrapeTileScalar;
  ggl::PipelineSetup *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t TileScalar;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v17 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v17)
    goto LABEL_39;
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = 0x44B2D9808992962CLL;
    if (*(_QWORD *)&v17 <= 0x44B2D9808992962CuLL)
      v19 = 0x44B2D9808992962CuLL % *(_QWORD *)&v17;
  }
  else
  {
    v19 = (*(_QWORD *)&v17 - 1) & 0x44B2D9808992962CLL;
  }
  v20 = *(_QWORD **)(*a2 + 8 * v19);
  if (!v20)
    goto LABEL_39;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_39;
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v17 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x44B2D9808992962CLL)
      {
        if (v21[2] == 0x44B2D9808992962CLL)
          goto LABEL_22;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_39;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_39;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x44B2D9808992962CLL)
      break;
    if (v23 >= *(_QWORD *)&v17)
      v23 %= *(_QWORD *)&v17;
    if (v23 != v19)
      goto LABEL_39;
LABEL_11:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_39;
  }
  if (v21[2] != 0x44B2D9808992962CLL)
    goto LABEL_11;
LABEL_22:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) != 0x44B2D9808992962CLL
    || (v26 = *(_QWORD *)(v25 + 32)) == 0
    || (v27 = std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((_QWORD *)(v26 + 8), &a6->_type)) == 0|| (v28 = v27[5], v28 == v26 + 48))
  {
LABEL_39:
    v38 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 272));
    v39 = *(_QWORD *)(a1 + 360);
    v40 = v39 + 200;
    v41 = 184;
    if (a14)
      v41 = 200;
    else
      v40 = v39 + 184;
    v42 = *(std::__shared_weak_count **)(v40 + 8);
    v65 = *(_QWORD *)(v39 + v41);
    v66 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(p_shared_owners);
      while (__stxr(v44 + 1, p_shared_owners));
    }
    md::COverlayRenderLayer::setTexturePipeline<ggl::Textured::SRGBBlendPos4DUVPipelineSetup,ggl::Textured::SRGBBlendPos4DUVPipelineState>(a1, v38, *a12, a12[1], a13, a10, a11, a4, &v65);
    if (v42)
    {
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (!*(_BYTE *)(a1 + 394))
      goto LABEL_57;
    v47 = 168;
    if (a4)
      v47 = 176;
    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + v47);
    v49 = *((_QWORD *)v38 + 8);
    *(_QWORD *)(v49 + 64) = v48;
    *(_QWORD *)(v49 + 72) = 0;
    v50 = *((_QWORD *)v38 + 20);
    v51 = *(std::__shared_weak_count **)(v50 + 72);
    *(_QWORD *)(v50 + 64) = 0;
    *(_QWORD *)(v50 + 72) = 0;
    if (!v51)
      goto LABEL_57;
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      v54 = *(_QWORD *)(a1 + 360);
      if ((a14 & 1) != 0)
      {
LABEL_58:
        *(_QWORD *)(a8 + 64) = *(_QWORD *)(v54 + 80);
        *(_QWORD *)(a8 + 24) = a9;
        *(_QWORD *)(a8 + 32) = v38;
        *(_QWORD *)(a8 + 48) = a3;
        *(_DWORD *)(a8 + 40) = a5;
        TileScalar = md::COverlayRenderLayer::getTileScalar(*(md::COverlayRenderLayer **)(v54 + 416), a6, a7);
        v56 = *((_QWORD *)v38 + 8);
        *(_QWORD *)(v56 + 32) = TileScalar;
        *(_QWORD *)(v56 + 40) = 0;
        v57 = *((_QWORD *)v38 + 20);
        v58 = *(std::__shared_weak_count **)(v57 + 40);
        *(_QWORD *)(v57 + 32) = 0;
        *(_QWORD *)(v57 + 40) = 0;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        return;
      }
    }
    else
    {
LABEL_57:
      v54 = *(_QWORD *)(a1 + 360);
      if ((a14 & 1) != 0)
        goto LABEL_58;
    }
    *(_QWORD *)(a8 + 64) = *(_QWORD *)(v54 + 64);
    *(_QWORD *)(a8 + 24) = a9;
    *(_QWORD *)(a8 + 32) = v38;
    *(_QWORD *)(a8 + 48) = a3;
    *(_DWORD *)(a8 + 40) = a5;
    return;
  }
  v29 = (uint64_t *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 264));
  v30 = *(_QWORD *)(a1 + 360);
  v31 = *(std::__shared_weak_count **)(v30 + 256);
  v65 = *(_QWORD *)(v30 + 248);
  v66 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  md::COverlayRenderLayer::setTexturePipeline<ggl::Textured::SRGBBlendPos4DUVPipelineSetup,ggl::Textured::SRGBBlendPos4DUVPipelineState>(a1, (ggl::PipelineSetup *)v29, *a12, a12[1], a13, a10, a11, a4, &v65);
  if (v31)
  {
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (*(_BYTE *)(a1 + 394))
  {
    v36 = 168;
    if (a4)
      v36 = 176;
    ggl::Textured::SRGBBlendPos4DUVPipelineSetup::setAlphaTintConstantData(v29[8], v29[20], *(_QWORD *)(*(_QWORD *)(a1 + 360) + v36));
  }
  *(_QWORD *)(a8 + 64) = *(_QWORD *)(v28 + 40);
  *(_QWORD *)(a8 + 24) = a9;
  *(_QWORD *)(a8 + 32) = v29;
  *(_QWORD *)(a8 + 48) = a3;
  *(_DWORD *)(a8 + 40) = a5;
  DrapeTileScalar = md::COverlayRenderLayer::getDrapeTileScalar(*(md::COverlayRenderLayer **)(*(_QWORD *)(a1 + 360) + 416), a6, a7);
  ggl::Textured::SRGBBlendPos4DUVPipelineSetup::setTileScalarConstantData(v29[8], v29[20], DrapeTileScalar);
}

void sub_19F9E3BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::COverlayRenderLayer::KeyframeState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_QWORD *)((char *)v10 + 20) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_72;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_59;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v6] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19F9E4038(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::find<md::SurfaceKey>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = *((unsigned int *)a2 + 6);
  v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(_QWORD *)&v2)
      v13 = v11 % *(_QWORD *)&v2;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v2 - 1);
  }
  v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v18 = result[1];
        if (v11 == v18)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && *((_DWORD *)result + 10) == (_DWORD)v10)
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = result[1];
      if (v11 == v17)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && *((_DWORD *)result + 10) == (_DWORD)v10)
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(_QWORD *)&v2)
          v17 %= *(_QWORD *)&v2;
        if (v17 != v13)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, char a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  void (***v45)(void);
  void (**v46)(void);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char ***v50;
  char ***v51;
  _QWORD *v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[25];
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int16 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  _QWORD *v78;
  _QWORD v79[3];
  _QWORD *v80;
  _QWORD v81[3];
  _QWORD *v82;
  _BYTE v83[24];
  _BYTE *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v75 = a6;
  v76 = a3;
  v10 = *(_QWORD *)(*a2 + 224);
  if (v10)
    v11 = v10 == a1;
  else
    v11 = 0;
  if (!v11)
    *(_QWORD *)(*a2 + 224) = a1;
  *((_BYTE *)a4 + 57) = a5;
  v12 = a4[5];
  v65 = a4[4];
  v66 = v12;
  v13 = a4[1];
  v61 = *a4;
  v62 = v13;
  v14 = a4[3];
  v63 = a4[2];
  v64 = v14;
  v15 = a4[7];
  v67 = a4[6];
  *(_OWORD *)v68 = v15;
  *(_OWORD *)&v68[9] = *(__int128 *)((char *)a4 + 121);
  v16 = (std::__shared_weak_count *)*((_QWORD *)a4 + 19);
  v69 = *((_QWORD *)a4 + 18);
  v70 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v71 = *((_WORD *)a4 + 80);
  v72 = *(_QWORD *)((char *)a4 + 164);
  v73 = *(__int128 *)((char *)a4 + 184);
  v74 = *(__int128 *)((char *)a4 + 200);
  v68[22] = a7;
  v68[23] = a8;
  v19 = v68[21] | a7;
  v68[21] |= a7;
  *(_DWORD *)&v68[8] = 1065353216;
  md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::layout(*a2, (uint64_t)&v61);
  if (v68[24])
    v28 = 255;
  else
    v28 = 15;
  if (v19)
    v29 = v28 | 0x300;
  else
    v29 = v28;
  v30 = *a2;
  if ((a9 & 1) == 0)
  {
    v77[0] = &off_1E42CFB30;
    v77[1] = &v75;
    v77[2] = &v76;
    v78 = v77;
    v50 = *(char ****)(v30 + 8);
    v51 = *(char ****)(v30 + 16);
    if (v50 == v51)
    {
      v56 = v77;
      goto LABEL_73;
    }
    while (1)
    {
      v54 = *v50;
      v55 = (uint64_t)v78;
      if (!v78)
        goto LABEL_61;
      if (v78 != v77)
        break;
      v84 = v83;
      v27.n128_f64[0] = (*(double (**)(_QWORD *, _BYTE *))(v77[0] + 24))(v77, v83);
LABEL_63:
      md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v54, v29, (uint64_t)v83, v27);
      v52 = v84;
      if (v84 == v83)
      {
        v52 = v83;
        v53 = 4;
      }
      else
      {
        if (!v84)
          goto LABEL_57;
        v53 = 5;
      }
      (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_57:
      if (++v50 == v51)
      {
        v56 = v78;
        if (v78 != v77)
          goto LABEL_69;
        v57 = 4;
        v56 = v77;
        goto LABEL_75;
      }
    }
    v55 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v78 + 16))(v78, v20, v21, v22, v23, v24, v25, v26, v61, *((_QWORD *)&v61 + 1), v62, *((_QWORD *)&v62 + 1), v63, *((_QWORD *)&v63 + 1), v64);
LABEL_61:
    v84 = (_BYTE *)v55;
    goto LABEL_63;
  }
  v79[0] = &off_1E42CFB30;
  v79[1] = &v75;
  v79[2] = &v76;
  v80 = v79;
  v31 = *(uint64_t **)(v30 + 8);
  v32 = *(uint64_t **)(v30 + 16);
  if (v31 == v32)
  {
    v56 = v79;
LABEL_73:
    v57 = 4;
LABEL_75:
    (*(void (**)(void))(*v56 + 8 * v57))();
    goto LABEL_76;
  }
  do
  {
    v35 = *v31;
    v36 = (uint64_t)v80;
    if (!v80)
      goto LABEL_24;
    if (v80 != v79)
    {
      v36 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v80 + 16))(v80, v20, v21, v22, v23, v24, v25, v26, v61, *((_QWORD *)&v61 + 1), v62, *((_QWORD *)&v62 + 1), v63, *((_QWORD *)&v63 + 1), v64);
LABEL_24:
      v82 = (_QWORD *)v36;
      goto LABEL_26;
    }
    v82 = v81;
    (*(void (**)(_QWORD *, _QWORD *))(v79[0] + 24))(v79, v81);
LABEL_26:
    if (!*(_BYTE *)(v35 + 1424))
      goto LABEL_50;
    v37 = *(_QWORD *)(v35 + 1328);
    v38 = *(_QWORD *)(v35 + 1320);
    if (v37 != v38)
    {
      v39 = *(_QWORD *)(v35 + 1328);
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v38);
    }
    *(_QWORD *)(v35 + 1328) = v38;
    *(_QWORD *)(v35 + 1304) = *(_QWORD *)(v35 + 1296);
    v42 = *(_QWORD **)(v35 + 1376);
    if (v42)
    {
      do
      {
        if (v42[1])
        {
          v44 = 0;
          v45 = (void (***)(void))(v42 + 2);
          do
          {
            v46 = *v45;
            v45 += 15;
            (*v46)();
            ++v44;
          }
          while (v44 < v42[1]);
        }
        v42[1] = 0;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
      v43 = *(_QWORD *)(v35 + 1376);
    }
    else
    {
      v43 = 0;
    }
    *(_QWORD *)(v35 + 1384) = v43;
    v47 = (uint64_t)v82;
    if (!v82)
      goto LABEL_43;
    if (v82 != v81)
    {
      v47 = (*(uint64_t (**)(void))(*v82 + 16))();
LABEL_43:
      v84 = (_BYTE *)v47;
      goto LABEL_45;
    }
    v84 = v83;
    v27.n128_f64[0] = (*(double (**)(_QWORD *, _BYTE *))(v81[0] + 24))(v81, v83);
LABEL_45:
    md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset((char **)v35, v29, (uint64_t)v83, v27);
    v48 = v84;
    if (v84 == v83)
    {
      v48 = v83;
      v49 = 4;
    }
    else
    {
      if (!v84)
        goto LABEL_50;
      v49 = 5;
    }
    (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_50:
    v33 = v82;
    if (v82 == v81)
    {
      v33 = v81;
      v34 = 4;
LABEL_19:
      (*(void (**)(void))(*v33 + 8 * v34))();
      goto LABEL_20;
    }
    if (v82)
    {
      v34 = 5;
      goto LABEL_19;
    }
LABEL_20:
    ++v31;
  }
  while (v31 != v32);
  v56 = v80;
  if (v80 == v79)
  {
    v57 = 4;
    v56 = v79;
    goto LABEL_75;
  }
LABEL_69:
  if (v56)
  {
    v57 = 5;
    goto LABEL_75;
  }
LABEL_76:
  v58 = v70;
  if (v70)
  {
    v59 = (unint64_t *)&v70->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_19F9E4664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  md::PolylineOverlayLayoutContext::~PolylineOverlayLayoutContext((md::PolylineOverlayLayoutContext *)&a9);
  _Unwind_Resume(a1);
}

void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, char a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  void (***v45)(void);
  void (**v46)(void);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char ***v50;
  char ***v51;
  _QWORD *v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[25];
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int16 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  _QWORD *v78;
  _QWORD v79[3];
  _QWORD *v80;
  _QWORD v81[3];
  _QWORD *v82;
  _BYTE v83[24];
  _BYTE *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v75 = a6;
  v76 = a3;
  v10 = *(_QWORD *)(*a2 + 224);
  if (v10)
    v11 = v10 == a1;
  else
    v11 = 0;
  if (!v11)
    *(_QWORD *)(*a2 + 224) = a1;
  *((_BYTE *)a4 + 57) = a5;
  v12 = a4[5];
  v65 = a4[4];
  v66 = v12;
  v13 = a4[1];
  v61 = *a4;
  v62 = v13;
  v14 = a4[3];
  v63 = a4[2];
  v64 = v14;
  v15 = a4[7];
  v67 = a4[6];
  *(_OWORD *)v68 = v15;
  *(_OWORD *)&v68[9] = *(__int128 *)((char *)a4 + 121);
  v16 = (std::__shared_weak_count *)*((_QWORD *)a4 + 19);
  v69 = *((_QWORD *)a4 + 18);
  v70 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v71 = *((_WORD *)a4 + 80);
  v72 = *(_QWORD *)((char *)a4 + 164);
  v73 = *(__int128 *)((char *)a4 + 184);
  v74 = *(__int128 *)((char *)a4 + 200);
  v68[22] = a7;
  v68[23] = a8;
  v19 = v68[21] | a7;
  v68[21] |= a7;
  *(_DWORD *)&v68[8] = 1065353216;
  md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::layout(*a2, (unsigned __int8 *)&v61);
  if (v68[24])
    v28 = 255;
  else
    v28 = 15;
  if (v19)
    v29 = v28 | 0x300;
  else
    v29 = v28;
  v30 = *a2;
  if ((a9 & 1) == 0)
  {
    v77[0] = &unk_1E42CFB78;
    v77[1] = &v75;
    v77[2] = &v76;
    v78 = v77;
    v50 = *(char ****)(v30 + 8);
    v51 = *(char ****)(v30 + 16);
    if (v50 == v51)
    {
      v56 = v77;
      goto LABEL_73;
    }
    while (1)
    {
      v54 = *v50;
      v55 = (uint64_t)v78;
      if (!v78)
        goto LABEL_61;
      if (v78 != v77)
        break;
      v84 = v83;
      v27.n128_f64[0] = (*(double (**)(_QWORD *, _BYTE *))(v77[0] + 24))(v77, v83);
LABEL_63:
      md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v54, v29, (uint64_t)v83, v27);
      v52 = v84;
      if (v84 == v83)
      {
        v52 = v83;
        v53 = 4;
      }
      else
      {
        if (!v84)
          goto LABEL_57;
        v53 = 5;
      }
      (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_57:
      if (++v50 == v51)
      {
        v56 = v78;
        if (v78 != v77)
          goto LABEL_69;
        v57 = 4;
        v56 = v77;
        goto LABEL_75;
      }
    }
    v55 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v78 + 16))(v78, v20, v21, v22, v23, v24, v25, v26, v61, *((_QWORD *)&v61 + 1), v62, *((_QWORD *)&v62 + 1), v63, *((_QWORD *)&v63 + 1), v64);
LABEL_61:
    v84 = (_BYTE *)v55;
    goto LABEL_63;
  }
  v79[0] = &unk_1E42CFB78;
  v79[1] = &v75;
  v79[2] = &v76;
  v80 = v79;
  v31 = *(uint64_t **)(v30 + 8);
  v32 = *(uint64_t **)(v30 + 16);
  if (v31 == v32)
  {
    v56 = v79;
LABEL_73:
    v57 = 4;
LABEL_75:
    (*(void (**)(void))(*v56 + 8 * v57))();
    goto LABEL_76;
  }
  do
  {
    v35 = *v31;
    v36 = (uint64_t)v80;
    if (!v80)
      goto LABEL_24;
    if (v80 != v79)
    {
      v36 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v80 + 16))(v80, v20, v21, v22, v23, v24, v25, v26, v61, *((_QWORD *)&v61 + 1), v62, *((_QWORD *)&v62 + 1), v63, *((_QWORD *)&v63 + 1), v64);
LABEL_24:
      v82 = (_QWORD *)v36;
      goto LABEL_26;
    }
    v82 = v81;
    (*(void (**)(_QWORD *, _QWORD *))(v79[0] + 24))(v79, v81);
LABEL_26:
    if (!*(_BYTE *)(v35 + 1424))
      goto LABEL_50;
    v37 = *(_QWORD *)(v35 + 1328);
    v38 = *(_QWORD *)(v35 + 1320);
    if (v37 != v38)
    {
      v39 = *(_QWORD *)(v35 + 1328);
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v38);
    }
    *(_QWORD *)(v35 + 1328) = v38;
    *(_QWORD *)(v35 + 1304) = *(_QWORD *)(v35 + 1296);
    v42 = *(_QWORD **)(v35 + 1376);
    if (v42)
    {
      do
      {
        if (v42[1])
        {
          v44 = 0;
          v45 = (void (***)(void))(v42 + 2);
          do
          {
            v46 = *v45;
            v45 += 15;
            (*v46)();
            ++v44;
          }
          while (v44 < v42[1]);
        }
        v42[1] = 0;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
      v43 = *(_QWORD *)(v35 + 1376);
    }
    else
    {
      v43 = 0;
    }
    *(_QWORD *)(v35 + 1384) = v43;
    v47 = (uint64_t)v82;
    if (!v82)
      goto LABEL_43;
    if (v82 != v81)
    {
      v47 = (*(uint64_t (**)(void))(*v82 + 16))();
LABEL_43:
      v84 = (_BYTE *)v47;
      goto LABEL_45;
    }
    v84 = v83;
    v27.n128_f64[0] = (*(double (**)(_QWORD *, _BYTE *))(v81[0] + 24))(v81, v83);
LABEL_45:
    md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset((char **)v35, v29, (uint64_t)v83, v27);
    v48 = v84;
    if (v84 == v83)
    {
      v48 = v83;
      v49 = 4;
    }
    else
    {
      if (!v84)
        goto LABEL_50;
      v49 = 5;
    }
    (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_50:
    v33 = v82;
    if (v82 == v81)
    {
      v33 = v81;
      v34 = 4;
LABEL_19:
      (*(void (**)(void))(*v33 + 8 * v34))();
      goto LABEL_20;
    }
    if (v82)
    {
      v34 = 5;
      goto LABEL_19;
    }
LABEL_20:
    ++v31;
  }
  while (v31 != v32);
  v56 = v80;
  if (v80 == v79)
  {
    v57 = 4;
    v56 = v79;
    goto LABEL_75;
  }
LABEL_69:
  if (v56)
  {
    v57 = 5;
    goto LABEL_75;
  }
LABEL_76:
  v58 = v70;
  if (v70)
  {
    v59 = (unint64_t *)&v70->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_19F9E4BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  md::PolylineOverlayLayoutContext::~PolylineOverlayLayoutContext((md::PolylineOverlayLayoutContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LayoutContext::get<md::ElevationContext>(_QWORD *a1)
{
  int8x8_t v1;
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v1)
    return 0;
  v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v1 <= 0x8BD499FBD96FBB9ELL)
      v3 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v1;
  }
  else
  {
    v3 = (*(_QWORD *)&v1 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v4 = *(_QWORD **)(*a1 + 8 * v3);
  if (!v4)
    return 0;
  v5 = (_QWORD *)*v4;
  if (!v5)
    return 0;
  if (v2.u32[0] < 2uLL)
  {
    v6 = *(_QWORD *)&v1 - 1;
    while (1)
    {
      v8 = v5[1];
      if (v8 == 0x8BD499FBD96FBB9ELL)
      {
        if (v5[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_22;
      }
      else if ((v8 & v6) != v3)
      {
        return 0;
      }
      v5 = (_QWORD *)*v5;
      if (!v5)
        return 0;
    }
  }
  while (1)
  {
    v7 = v5[1];
    if (v7 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v7 >= *(_QWORD *)&v1)
      v7 %= *(_QWORD *)&v1;
    if (v7 != v3)
      return 0;
LABEL_11:
    v5 = (_QWORD *)*v5;
    if (!v5)
      return 0;
  }
  if (v5[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_11;
LABEL_22:
  v9 = v5[5];
  if (*(_QWORD *)(v9 + 8) == 0x8BD499FBD96FBB9ELL)
    return *(_QWORD *)(v9 + 32);
  return 0;
}

uint64_t md::LayoutContext::get<md::StyleLogicContext>(_QWORD *a1)
{
  int8x8_t v1;
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v1)
    return 0;
  v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v1 <= 0xE42D19AFCA302E68)
      v3 = 0xE42D19AFCA302E68 % *(_QWORD *)&v1;
  }
  else
  {
    v3 = (*(_QWORD *)&v1 - 1) & 0xE42D19AFCA302E68;
  }
  v4 = *(_QWORD **)(*a1 + 8 * v3);
  if (!v4)
    return 0;
  v5 = (_QWORD *)*v4;
  if (!v5)
    return 0;
  if (v2.u32[0] < 2uLL)
  {
    v6 = *(_QWORD *)&v1 - 1;
    while (1)
    {
      v8 = v5[1];
      if (v8 == 0xE42D19AFCA302E68)
      {
        if (v5[2] == 0xE42D19AFCA302E68)
          goto LABEL_22;
      }
      else if ((v8 & v6) != v3)
      {
        return 0;
      }
      v5 = (_QWORD *)*v5;
      if (!v5)
        return 0;
    }
  }
  while (1)
  {
    v7 = v5[1];
    if (v7 == 0xE42D19AFCA302E68)
      break;
    if (v7 >= *(_QWORD *)&v1)
      v7 %= *(_QWORD *)&v1;
    if (v7 != v3)
      return 0;
LABEL_11:
    v5 = (_QWORD *)*v5;
    if (!v5)
      return 0;
  }
  if (v5[2] != 0xE42D19AFCA302E68)
    goto LABEL_11;
LABEL_22:
  v9 = v5[5];
  if (*(_QWORD *)(v9 + 8) == 0xE42D19AFCA302E68)
    return *(_QWORD *)(v9 + 32);
  return 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::__unordered_map_hasher<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,true>,std::__unordered_map_equal<std::pair<signed char,BOOL>,std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,std::equal_to<std::pair<signed char,BOOL>>,md::RenderedCirclePairHash,true>,std::allocator<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>>::__emplace_unique_key_args<std::pair<signed char,BOOL>,std::piecewise_construct_t const&,std::tuple<std::pair<signed char,BOOL> const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 a2, unsigned __int8 a3, _WORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  unsigned __int8 *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;

  v7 = (((uint64_t)(char)a2 << 6) + ((unint64_t)(char)a2 >> 2) + a3 - 0x61C8864680B583EBLL) ^ (char)a2;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = (((uint64_t)(char)a2 << 6) + ((unint64_t)(char)a2 >> 2) + a3 - 0x61C8864680B583EBLL) ^ (char)a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      v11 = (unsigned __int8 *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v11 + 1);
            if (v15 == v7)
            {
              if (v11[16] == a2 && v11[17] == a3)
                return v11;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = *(unsigned __int8 **)v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = *((_QWORD *)v11 + 1);
          if (v13 == v7)
          {
            if (v11[16] == a2 && v11[17] == a3)
              return v11;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = a1 + 2;
  v11 = (unsigned __int8 *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_WORD *)v11 + 8) = *a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = a1[1];
    }
    if (prime <= v8)
    {
      if (prime >= v8)
        goto LABEL_65;
      v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime >= v8)
      {
        v8 = a1[1];
LABEL_65:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v4 = v7 % v8;
          else
            v4 = v7;
        }
        else
        {
          v4 = (v8 - 1) & v7;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v43 = (void *)*a1;
        *a1 = 0;
        if (v43)
          operator delete(v43);
        v8 = 0;
        a1[1] = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = (void *)*a1;
    *a1 = (uint64_t)v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v25++) = 0;
    while (prime != v25);
    v26 = (_QWORD *)*v16;
    if (!*v16)
    {
LABEL_64:
      v8 = prime;
      goto LABEL_65;
    }
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*a1 + 8 * v29) = v16;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v31))
        {
          *v26 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*a1 + v32);
          **(_QWORD **)(*a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v31) = v26;
          v26 = i;
          v29 = v31;
        }
      }
      goto LABEL_64;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*a1 + 8 * v27) = v16;
    v36 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_64;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*a1 + 8 * v38))
        {
          *(_QWORD *)(*a1 + 8 * v38) = v26;
          goto LABEL_69;
        }
        *v26 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*a1 + v37);
        **(_QWORD **)(*a1 + v37) = v36;
        v36 = v26;
      }
      v38 = v27;
LABEL_69:
      v26 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_64;
    }
  }
LABEL_78:
  v39 = *a1;
  v40 = *(_QWORD **)(*a1 + 8 * v4);
  if (v40)
  {
    *(_QWORD *)v11 = *v40;
LABEL_86:
    *v40 = v11;
    goto LABEL_87;
  }
  *(_QWORD *)v11 = *v16;
  *v16 = v11;
  *(_QWORD *)(v39 + 8 * v4) = v16;
  if (*(_QWORD *)v11)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v41 >= v8)
        v41 %= v8;
    }
    else
    {
      v41 &= v8 - 1;
    }
    v40 = (_QWORD *)(*a1 + 8 * v41);
    goto LABEL_86;
  }
LABEL_87:
  ++a1[3];
  return v11;
}

void sub_19F9E53C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<md::CircleOverlayRenderable>,std::hash<std::shared_ptr<md::CircleOverlayRenderable>>,std::equal_to<std::shared_ptr<md::CircleOverlayRenderable>>,std::allocator<std::shared_ptr<md::CircleOverlayRenderable>>>::__emplace_unique_key_args<std::shared_ptr<md::CircleOverlayRenderable>,std::shared_ptr<md::CircleOverlayRenderable> const&>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  void *v47;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = v9 ^ (v9 >> 47);
  v11 = 0x9DDFEA08EB382D69 * v10;
  v12 = a1[1];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD **)(*a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2)
                return;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_22;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2)
              return;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  v18 = a1 + 2;
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v11;
  v19[2] = a3;
  v19[3] = a4;
  if (a4)
  {
    v20 = (unint64_t *)(a4 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (float)(unint64_t)(a1[3] + 1);
  v23 = *((float *)a1 + 8);
  if (!v12 || (float)(v23 * (float)v12) < v22)
  {
    v24 = 1;
    if (v12 >= 3)
      v24 = (v12 & (v12 - 1)) != 0;
    v25 = v24 | (2 * v12);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v12 = a1[1];
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_62;
      v38 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v12)
      {
        v12 = a1[1];
LABEL_62:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v4 = v11 % v12;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v12 - 1) & v11;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        v47 = (void *)*a1;
        *a1 = 0;
        if (v47)
          operator delete(v47);
        v12 = 0;
        a1[1] = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = (void *)*a1;
    *a1 = (uint64_t)v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v30++) = 0;
    while (prime != v30);
    v31 = (_QWORD *)*v18;
    if (!*v18)
    {
LABEL_61:
      v12 = prime;
      goto LABEL_62;
    }
    v32 = v31[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*a1 + 8 * v34) = v18;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v31 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v36))
        {
          *v31 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*a1 + v37);
          **(_QWORD **)(*a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v36) = v31;
          v31 = i;
          v34 = v36;
        }
      }
      goto LABEL_61;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*a1 + 8 * v32) = v18;
    v41 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_61;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*a1 + 8 * v43))
        {
          *(_QWORD *)(*a1 + 8 * v43) = v31;
          goto LABEL_66;
        }
        *v31 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*a1 + v42);
        **(_QWORD **)(*a1 + v42) = v41;
        v41 = v31;
      }
      v43 = v32;
LABEL_66:
      v31 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_61;
    }
  }
LABEL_75:
  v44 = *a1;
  v45 = *(_QWORD **)(*a1 + 8 * v4);
  if (v45)
  {
    *v19 = *v45;
LABEL_83:
    *v45 = v19;
    goto LABEL_84;
  }
  *v19 = *v18;
  *v18 = v19;
  *(_QWORD *)(v44 + 8 * v4) = v18;
  if (*v19)
  {
    v46 = *(_QWORD *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v46 >= v12)
        v46 %= v12;
    }
    else
    {
      v46 &= v12 - 1;
    }
    v45 = (_QWORD *)(*a1 + 8 * v46);
    goto LABEL_83;
  }
LABEL_84:
  ++a1[3];
}

void sub_19F9E5888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3>,void ()(ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4279F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4279F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_3>,void ()(ggl::RenderItem *)>::operator()(uint64_t a1, ggl::RenderItem **a2)
{
  ggl::RenderItem *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  *((_QWORD *)v2 + 6) = v3 + 8;
  return ggl::CommandBuffer::pushRenderItem(v4, v2);
}

void std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2>,void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2>,void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4279F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2>,void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4279F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_2>,void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>::operator()(uint64_t result, unsigned __int8 *a2, ggl::RenderItem **a3)
{
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  ggl::RenderItem *v6;
  uint64_t v7;

  v3 = *a2;
  v5 = *(uint64_t **)(result + 8);
  v4 = *(uint64_t **)(result + 16);
  v6 = *a3;
  switch(v3)
  {
    case 0:
    case 1:
    case 12:
      v7 = *v5;
      goto LABEL_10;
    case 2:
      v7 = *v5 + 1;
      goto LABEL_10;
    case 3:
    case 10:
      v7 = *v5 + 2;
      goto LABEL_10;
    case 4:
    case 5:
    case 11:
      v7 = *v5 + 3;
      goto LABEL_10;
    case 6:
      v7 = *v5 + 4;
      goto LABEL_10;
    case 7:
      v7 = *v5 + 5;
      goto LABEL_10;
    case 8:
    case 9:
      v7 = *v5 + 6;
      goto LABEL_10;
    case 13:
      v7 = *v5 + 7;
LABEL_10:
      *((_QWORD *)v6 + 6) = v7;
      result = ggl::CommandBuffer::pushRenderItem(*v4, v6);
      break;
    default:
      return result;
  }
  return result;
}

void std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1>,void ()(ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4279F00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4279F00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1,std::allocator<md::COverlayRenderLayer::layoutResource(md::OverlayTileData::OverlayTileResource const&,md::MapTileDataRenderable<md::OverlayTileData> const*,ggl::CommandBuffer *,md::LayoutContext const&,md::OverlaysContext const*,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,std::unordered_map<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>,md::RenderedCirclePairHash,std::equal_to<std::pair<signed char,BOOL>>,std::allocator<std::pair<std::pair<signed char,BOOL> const,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>>> &,float,float,BOOL)::$_1>,void ()(ggl::RenderItem *)>::operator()(uint64_t a1, ggl::RenderItem **a2)
{
  ggl::RenderItem *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  *((_QWORD *)v2 + 6) = v3;
  return ggl::CommandBuffer::pushRenderItem(v4, v2);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<signed char,BOOL>,std::unordered_set<std::shared_ptr<md::CircleOverlayRenderable>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      while (v3)
      {
        v6 = v3;
        v3 = (_QWORD *)*v3;
        v7 = (std::__shared_weak_count *)v6[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v6);
      }
      v4 = (void *)v2[3];
      v2[3] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

char **md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(char **result, __int16 a2, uint64_t a3, __n128 a4)
{
  char **v5;
  uint64_t v6;
  _BOOL4 v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char **v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  char *v127;
  char *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char **v165;
  char *v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  char *v171;
  char *v172;
  char *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  char *v185;
  char *v186;
  char *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  char *v213;
  char *v214;
  char *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  char *v227;
  char *v228;
  char *v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  char *v241;
  char *v242;
  char *v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  char *v255;
  char *v256;
  char *v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  char *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  char *v269;
  char *v270;
  char *v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  char *v283;
  char *v284;
  char *v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  char *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  char *v297;
  char *v298;
  char *v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  char *v304;
  uint64_t v305;
  __int128 *v306;
  __int128 *v307;
  __int128 *v308;
  __int128 *v309;
  __int128 *v310;
  __int128 *v311;
  __int128 *v312;
  __int128 *v313;
  __int128 *v314;
  __int128 *v315;
  char v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;

  if (!*((_BYTE *)result + 1424))
    return result;
  v5 = result;
  if ((a2 & 1) != 0 && *((_BYTE *)result + 136))
  {
    v6 = *((_QWORD *)result[1] + 7);
    result[5] = (char *)v6;
    v7 = *(unsigned __int8 *)(v6 + 58) == 1;
    if ((a2 & 2) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = 0;
    if ((a2 & 2) == 0)
      goto LABEL_10;
  }
  if (*((_BYTE *)result + 264))
  {
    v8 = (char *)*((_QWORD *)result[1] + 8);
    result[21] = v8;
    if (v8[58] == 1)
      v7 = 1;
  }
LABEL_10:
  if ((a2 & 4) != 0)
  {
    if (*((_BYTE *)result + 392))
    {
      v9 = (char *)*((_QWORD *)result[1] + 9);
      result[37] = v9;
      if (v9[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 8) != 0)
  {
    if (*((_BYTE *)result + 520))
    {
      v10 = (char *)*((_QWORD *)result[1] + 10);
      result[53] = v10;
      if (v10[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 0x10) != 0)
  {
    if (*((_BYTE *)result + 648))
    {
      v11 = (char *)*((_QWORD *)result[1] + 11);
      result[69] = v11;
      if (v11[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 0x20) != 0)
  {
    if (*((_BYTE *)result + 776))
    {
      v12 = (char *)*((_QWORD *)result[1] + 12);
      result[85] = v12;
      if (v12[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    if (*((_BYTE *)result + 904))
    {
      v13 = (char *)*((_QWORD *)result[1] + 13);
      result[101] = v13;
      if (v13[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 0x80) != 0)
  {
    if (*((_BYTE *)result + 1032))
    {
      v14 = (char *)*((_QWORD *)result[1] + 14);
      result[117] = v14;
      if (v14[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 0x100) != 0)
  {
    if (*((_BYTE *)result + 1160))
    {
      v15 = (char *)*((_QWORD *)result[1] + 15);
      result[133] = v15;
      if (v15[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 0x200) != 0)
  {
    if (*((_BYTE *)result + 1288))
    {
      v16 = (char *)*((_QWORD *)result[1] + 16);
      result[149] = v16;
      if (v16[58] == 1)
        v7 = 1;
    }
  }
  v17 = result[175];
  v18 = result[176];
  if (v17 != v18)
  {
    v19 = 0;
    v314 = (__int128 *)(result + 21);
    v315 = (__int128 *)(result + 5);
    v312 = (__int128 *)(result + 53);
    v313 = (__int128 *)(result + 37);
    v310 = (__int128 *)(result + 85);
    v311 = (__int128 *)(result + 69);
    v308 = (__int128 *)(result + 117);
    v309 = (__int128 *)(result + 101);
    v306 = (__int128 *)(result + 149);
    v307 = (__int128 *)(result + 133);
    while (1)
    {
      v20 = *(_QWORD *)v17;
      if (*(_BYTE *)(*(_QWORD *)v17 + 48))
      {
        if (*(_QWORD *)(v20 + 88) != v19)
        {
          if (v19)
          {
            v21 = ggl::Batcher::commit((__int128 **)v5 + 162, 0xC8u, a4);
            if (v21[1] != *v21)
            {
              v22 = v21;
              if ((a2 & 1) != 0 && *((_BYTE *)v5 + 136))
              {
                v24 = v5[3];
                v23 = v5[4];
                v25 = v315[3];
                v320 = v315[2];
                v321 = v25;
                v26 = v315[5];
                v322 = v315[4];
                v323 = v26;
                v27 = v315[1];
                v318 = *v315;
                v319 = v27;
                v28 = v5[173];
                v29 = (char *)*((_QWORD *)v28 + 1);
                if (v29 == v5[174])
                {
                  v28 = *(char **)v28;
                  if (!v28)
                  {
                    v28 = (char *)malloc_type_malloc(120 * (_QWORD)v29 + 16, 0xB644C221uLL);
                    *(_QWORD *)v28 = 0;
                    *((_QWORD *)v28 + 1) = 0;
                    *(_QWORD *)v5[173] = v28;
                  }
                  v5[173] = v28;
                  v29 = (char *)*((_QWORD *)v28 + 1);
                }
                v30 = &v28[120 * (_QWORD)v29];
                *((_QWORD *)v28 + 1) = v29 + 1;
                *((_QWORD *)v30 + 2) = &off_1E42B59B0;
                *((_QWORD *)v30 + 3) = v24;
                v30 += 16;
                *((_QWORD *)v30 + 2) = v23;
                v31 = v322;
                v32 = v323;
                v33 = v321;
                *(_OWORD *)(v30 + 56) = v320;
                v34 = v318;
                *(_OWORD *)(v30 + 40) = v319;
                *(_OWORD *)(v30 + 24) = v34;
                *(_OWORD *)(v30 + 104) = v32;
                *(_OWORD *)(v30 + 88) = v31;
                *(_OWORD *)(v30 + 72) = v33;
                *((_QWORD *)v30 + 8) = v19;
                v35 = *v22;
                *((_QWORD *)v30 + 11) = *v22;
                *((_QWORD *)v30 + 12) = (v22[1] - v35) >> 4;
                v317 = 0;
                *(_QWORD *)&v318 = v30;
                v36 = *(_QWORD *)(a3 + 24);
                if (!v36)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v36 + 48))(v36, &v317, &v318);
              }
              if ((a2 & 2) != 0 && *((_BYTE *)v5 + 264))
              {
                v37 = v5[19];
                v38 = v5[20];
                v39 = v314[3];
                v320 = v314[2];
                v321 = v39;
                v40 = v314[5];
                v322 = v314[4];
                v323 = v40;
                v41 = v314[1];
                v318 = *v314;
                v319 = v41;
                v42 = v5[173];
                v43 = (char *)*((_QWORD *)v42 + 1);
                if (v43 == v5[174])
                {
                  v42 = *(char **)v42;
                  if (!v42)
                  {
                    v42 = (char *)malloc_type_malloc(120 * (_QWORD)v43 + 16, 0xB644C221uLL);
                    *(_QWORD *)v42 = 0;
                    *((_QWORD *)v42 + 1) = 0;
                    *(_QWORD *)v5[173] = v42;
                  }
                  v5[173] = v42;
                  v43 = (char *)*((_QWORD *)v42 + 1);
                }
                v44 = &v42[120 * (_QWORD)v43];
                *((_QWORD *)v42 + 1) = v43 + 1;
                *((_QWORD *)v44 + 2) = &off_1E42B59B0;
                *((_QWORD *)v44 + 3) = v37;
                v44 += 16;
                *((_QWORD *)v44 + 2) = v38;
                v45 = v322;
                v46 = v323;
                v47 = v321;
                *(_OWORD *)(v44 + 56) = v320;
                v48 = v318;
                *(_OWORD *)(v44 + 40) = v319;
                *(_OWORD *)(v44 + 24) = v48;
                *(_OWORD *)(v44 + 104) = v46;
                *(_OWORD *)(v44 + 88) = v45;
                *(_OWORD *)(v44 + 72) = v47;
                *((_QWORD *)v44 + 8) = v19;
                v49 = *v22;
                *((_QWORD *)v44 + 11) = *v22;
                *((_QWORD *)v44 + 12) = (v22[1] - v49) >> 4;
                v317 = 1;
                *(_QWORD *)&v318 = v44;
                v50 = *(_QWORD *)(a3 + 24);
                if (!v50)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v50 + 48))(v50, &v317, &v318);
              }
              if ((a2 & 4) != 0 && *((_BYTE *)v5 + 392))
              {
                v51 = v5[35];
                v52 = v5[36];
                v53 = v313[3];
                v320 = v313[2];
                v321 = v53;
                v54 = v313[5];
                v322 = v313[4];
                v323 = v54;
                v55 = v313[1];
                v318 = *v313;
                v319 = v55;
                v56 = v5[173];
                v57 = (char *)*((_QWORD *)v56 + 1);
                if (v57 == v5[174])
                {
                  v56 = *(char **)v56;
                  if (!v56)
                  {
                    v56 = (char *)malloc_type_malloc(120 * (_QWORD)v57 + 16, 0xB644C221uLL);
                    *(_QWORD *)v56 = 0;
                    *((_QWORD *)v56 + 1) = 0;
                    *(_QWORD *)v5[173] = v56;
                  }
                  v5[173] = v56;
                  v57 = (char *)*((_QWORD *)v56 + 1);
                }
                v58 = &v56[120 * (_QWORD)v57];
                *((_QWORD *)v56 + 1) = v57 + 1;
                *((_QWORD *)v58 + 2) = &off_1E42B59B0;
                *((_QWORD *)v58 + 3) = v51;
                v58 += 16;
                *((_QWORD *)v58 + 2) = v52;
                v59 = v322;
                v60 = v323;
                v61 = v321;
                *(_OWORD *)(v58 + 56) = v320;
                v62 = v318;
                *(_OWORD *)(v58 + 40) = v319;
                *(_OWORD *)(v58 + 24) = v62;
                *(_OWORD *)(v58 + 104) = v60;
                *(_OWORD *)(v58 + 88) = v59;
                *(_OWORD *)(v58 + 72) = v61;
                *((_QWORD *)v58 + 8) = v19;
                v63 = *v22;
                *((_QWORD *)v58 + 11) = *v22;
                *((_QWORD *)v58 + 12) = (v22[1] - v63) >> 4;
                v317 = 2;
                *(_QWORD *)&v318 = v58;
                v64 = *(_QWORD *)(a3 + 24);
                if (!v64)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v64 + 48))(v64, &v317, &v318);
              }
              if ((a2 & 8) != 0 && *((_BYTE *)v5 + 520))
              {
                v65 = v5[51];
                v66 = v5[52];
                v67 = v312[3];
                v320 = v312[2];
                v321 = v67;
                v68 = v312[5];
                v322 = v312[4];
                v323 = v68;
                v69 = v312[1];
                v318 = *v312;
                v319 = v69;
                v70 = v5[173];
                v71 = (char *)*((_QWORD *)v70 + 1);
                if (v71 == v5[174])
                {
                  v70 = *(char **)v70;
                  if (!v70)
                  {
                    v70 = (char *)malloc_type_malloc(120 * (_QWORD)v71 + 16, 0xB644C221uLL);
                    *(_QWORD *)v70 = 0;
                    *((_QWORD *)v70 + 1) = 0;
                    *(_QWORD *)v5[173] = v70;
                  }
                  v5[173] = v70;
                  v71 = (char *)*((_QWORD *)v70 + 1);
                }
                v72 = &v70[120 * (_QWORD)v71];
                *((_QWORD *)v70 + 1) = v71 + 1;
                *((_QWORD *)v72 + 2) = &off_1E42B59B0;
                *((_QWORD *)v72 + 3) = v65;
                v72 += 16;
                *((_QWORD *)v72 + 2) = v66;
                v73 = v322;
                v74 = v323;
                v75 = v321;
                *(_OWORD *)(v72 + 56) = v320;
                v76 = v318;
                *(_OWORD *)(v72 + 40) = v319;
                *(_OWORD *)(v72 + 24) = v76;
                *(_OWORD *)(v72 + 104) = v74;
                *(_OWORD *)(v72 + 88) = v73;
                *(_OWORD *)(v72 + 72) = v75;
                *((_QWORD *)v72 + 8) = v19;
                v77 = *v22;
                *((_QWORD *)v72 + 11) = *v22;
                *((_QWORD *)v72 + 12) = (v22[1] - v77) >> 4;
                v317 = 3;
                *(_QWORD *)&v318 = v72;
                v78 = *(_QWORD *)(a3 + 24);
                if (!v78)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v317, &v318);
              }
              if ((a2 & 0x10) != 0 && *((_BYTE *)v5 + 648))
              {
                v79 = v5[67];
                v80 = v5[68];
                v81 = v311[3];
                v320 = v311[2];
                v321 = v81;
                v82 = v311[5];
                v322 = v311[4];
                v323 = v82;
                v83 = v311[1];
                v318 = *v311;
                v319 = v83;
                v84 = v5[173];
                v85 = (char *)*((_QWORD *)v84 + 1);
                if (v85 == v5[174])
                {
                  v84 = *(char **)v84;
                  if (!v84)
                  {
                    v84 = (char *)malloc_type_malloc(120 * (_QWORD)v85 + 16, 0xB644C221uLL);
                    *(_QWORD *)v84 = 0;
                    *((_QWORD *)v84 + 1) = 0;
                    *(_QWORD *)v5[173] = v84;
                  }
                  v5[173] = v84;
                  v85 = (char *)*((_QWORD *)v84 + 1);
                }
                v86 = &v84[120 * (_QWORD)v85];
                *((_QWORD *)v84 + 1) = v85 + 1;
                *((_QWORD *)v86 + 2) = &off_1E42B59B0;
                *((_QWORD *)v86 + 3) = v79;
                v86 += 16;
                *((_QWORD *)v86 + 2) = v80;
                v87 = v322;
                v88 = v323;
                v89 = v321;
                *(_OWORD *)(v86 + 56) = v320;
                v90 = v318;
                *(_OWORD *)(v86 + 40) = v319;
                *(_OWORD *)(v86 + 24) = v90;
                *(_OWORD *)(v86 + 104) = v88;
                *(_OWORD *)(v86 + 88) = v87;
                *(_OWORD *)(v86 + 72) = v89;
                *((_QWORD *)v86 + 8) = v19;
                v91 = *v22;
                *((_QWORD *)v86 + 11) = *v22;
                *((_QWORD *)v86 + 12) = (v22[1] - v91) >> 4;
                v317 = 4;
                *(_QWORD *)&v318 = v86;
                v92 = *(_QWORD *)(a3 + 24);
                if (!v92)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v92 + 48))(v92, &v317, &v318);
              }
              if ((a2 & 0x20) != 0 && *((_BYTE *)v5 + 776))
              {
                v93 = v5[83];
                v94 = v5[84];
                v95 = v310[3];
                v320 = v310[2];
                v321 = v95;
                v96 = v310[5];
                v322 = v310[4];
                v323 = v96;
                v97 = v310[1];
                v318 = *v310;
                v319 = v97;
                v98 = v5[173];
                v99 = (char *)*((_QWORD *)v98 + 1);
                if (v99 == v5[174])
                {
                  v98 = *(char **)v98;
                  if (!v98)
                  {
                    v98 = (char *)malloc_type_malloc(120 * (_QWORD)v99 + 16, 0xB644C221uLL);
                    *(_QWORD *)v98 = 0;
                    *((_QWORD *)v98 + 1) = 0;
                    *(_QWORD *)v5[173] = v98;
                  }
                  v5[173] = v98;
                  v99 = (char *)*((_QWORD *)v98 + 1);
                }
                v100 = &v98[120 * (_QWORD)v99];
                *((_QWORD *)v98 + 1) = v99 + 1;
                *((_QWORD *)v100 + 2) = &off_1E42B59B0;
                *((_QWORD *)v100 + 3) = v93;
                v100 += 16;
                *((_QWORD *)v100 + 2) = v94;
                v101 = v322;
                v102 = v323;
                v103 = v321;
                *(_OWORD *)(v100 + 56) = v320;
                v104 = v318;
                *(_OWORD *)(v100 + 40) = v319;
                *(_OWORD *)(v100 + 24) = v104;
                *(_OWORD *)(v100 + 104) = v102;
                *(_OWORD *)(v100 + 88) = v101;
                *(_OWORD *)(v100 + 72) = v103;
                *((_QWORD *)v100 + 8) = v19;
                v105 = *v22;
                *((_QWORD *)v100 + 11) = *v22;
                *((_QWORD *)v100 + 12) = (v22[1] - v105) >> 4;
                v317 = 5;
                *(_QWORD *)&v318 = v100;
                v106 = *(_QWORD *)(a3 + 24);
                if (!v106)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v106 + 48))(v106, &v317, &v318);
              }
              if ((a2 & 0x40) != 0 && *((_BYTE *)v5 + 904))
              {
                v107 = v5[99];
                v108 = v5[100];
                v109 = v309[3];
                v320 = v309[2];
                v321 = v109;
                v110 = v309[5];
                v322 = v309[4];
                v323 = v110;
                v111 = v309[1];
                v318 = *v309;
                v319 = v111;
                v112 = v5[173];
                v113 = (char *)*((_QWORD *)v112 + 1);
                if (v113 == v5[174])
                {
                  v112 = *(char **)v112;
                  if (!v112)
                  {
                    v112 = (char *)malloc_type_malloc(120 * (_QWORD)v113 + 16, 0xB644C221uLL);
                    *(_QWORD *)v112 = 0;
                    *((_QWORD *)v112 + 1) = 0;
                    *(_QWORD *)v5[173] = v112;
                  }
                  v5[173] = v112;
                  v113 = (char *)*((_QWORD *)v112 + 1);
                }
                v114 = &v112[120 * (_QWORD)v113];
                *((_QWORD *)v112 + 1) = v113 + 1;
                *((_QWORD *)v114 + 2) = &off_1E42B59B0;
                *((_QWORD *)v114 + 3) = v107;
                v114 += 16;
                *((_QWORD *)v114 + 2) = v108;
                v115 = v322;
                v116 = v323;
                v117 = v321;
                *(_OWORD *)(v114 + 56) = v320;
                v118 = v318;
                *(_OWORD *)(v114 + 40) = v319;
                *(_OWORD *)(v114 + 24) = v118;
                *(_OWORD *)(v114 + 104) = v116;
                *(_OWORD *)(v114 + 88) = v115;
                *(_OWORD *)(v114 + 72) = v117;
                *((_QWORD *)v114 + 8) = v19;
                v119 = *v22;
                *((_QWORD *)v114 + 11) = *v22;
                *((_QWORD *)v114 + 12) = (v22[1] - v119) >> 4;
                v317 = 6;
                *(_QWORD *)&v318 = v114;
                v120 = *(_QWORD *)(a3 + 24);
                if (!v120)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v120 + 48))(v120, &v317, &v318);
              }
              if ((a2 & 0x80) != 0 && *((_BYTE *)v5 + 1032))
              {
                v121 = v5[115];
                v122 = v5[116];
                v123 = v308[3];
                v320 = v308[2];
                v321 = v123;
                v124 = v308[5];
                v322 = v308[4];
                v323 = v124;
                v125 = v308[1];
                v318 = *v308;
                v319 = v125;
                v126 = v5[173];
                v127 = (char *)*((_QWORD *)v126 + 1);
                if (v127 == v5[174])
                {
                  v126 = *(char **)v126;
                  if (!v126)
                  {
                    v126 = (char *)malloc_type_malloc(120 * (_QWORD)v127 + 16, 0xB644C221uLL);
                    *(_QWORD *)v126 = 0;
                    *((_QWORD *)v126 + 1) = 0;
                    *(_QWORD *)v5[173] = v126;
                  }
                  v5[173] = v126;
                  v127 = (char *)*((_QWORD *)v126 + 1);
                }
                v128 = &v126[120 * (_QWORD)v127];
                *((_QWORD *)v126 + 1) = v127 + 1;
                *((_QWORD *)v128 + 2) = &off_1E42B59B0;
                *((_QWORD *)v128 + 3) = v121;
                v128 += 16;
                *((_QWORD *)v128 + 2) = v122;
                v129 = v322;
                v130 = v323;
                v131 = v321;
                *(_OWORD *)(v128 + 56) = v320;
                v132 = v318;
                *(_OWORD *)(v128 + 40) = v319;
                *(_OWORD *)(v128 + 24) = v132;
                *(_OWORD *)(v128 + 104) = v130;
                *(_OWORD *)(v128 + 88) = v129;
                *(_OWORD *)(v128 + 72) = v131;
                *((_QWORD *)v128 + 8) = v19;
                v133 = *v22;
                *((_QWORD *)v128 + 11) = *v22;
                *((_QWORD *)v128 + 12) = (v22[1] - v133) >> 4;
                v317 = 7;
                *(_QWORD *)&v318 = v128;
                v134 = *(_QWORD *)(a3 + 24);
                if (!v134)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v317, &v318);
              }
              if ((a2 & 0x100) != 0 && *((_BYTE *)v5 + 1160))
              {
                v135 = v5[131];
                v136 = v5[132];
                v137 = v307[3];
                v320 = v307[2];
                v321 = v137;
                v138 = v307[5];
                v322 = v307[4];
                v323 = v138;
                v139 = v307[1];
                v318 = *v307;
                v319 = v139;
                v140 = v5[173];
                v141 = (char *)*((_QWORD *)v140 + 1);
                if (v141 == v5[174])
                {
                  v140 = *(char **)v140;
                  if (!v140)
                  {
                    v140 = (char *)malloc_type_malloc(120 * (_QWORD)v141 + 16, 0xB644C221uLL);
                    *(_QWORD *)v140 = 0;
                    *((_QWORD *)v140 + 1) = 0;
                    *(_QWORD *)v5[173] = v140;
                  }
                  v5[173] = v140;
                  v141 = (char *)*((_QWORD *)v140 + 1);
                }
                v142 = &v140[120 * (_QWORD)v141];
                *((_QWORD *)v140 + 1) = v141 + 1;
                *((_QWORD *)v142 + 2) = &off_1E42B59B0;
                *((_QWORD *)v142 + 3) = v135;
                v142 += 16;
                *((_QWORD *)v142 + 2) = v136;
                v143 = v322;
                v144 = v323;
                v145 = v321;
                *(_OWORD *)(v142 + 56) = v320;
                v146 = v318;
                *(_OWORD *)(v142 + 40) = v319;
                *(_OWORD *)(v142 + 24) = v146;
                *(_OWORD *)(v142 + 104) = v144;
                *(_OWORD *)(v142 + 88) = v143;
                *(_OWORD *)(v142 + 72) = v145;
                *((_QWORD *)v142 + 8) = v19;
                v147 = *v22;
                *((_QWORD *)v142 + 11) = *v22;
                *((_QWORD *)v142 + 12) = (v22[1] - v147) >> 4;
                v317 = 8;
                *(_QWORD *)&v318 = v142;
                v148 = *(_QWORD *)(a3 + 24);
                if (!v148)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v148 + 48))(v148, &v317, &v318);
              }
              if ((a2 & 0x200) != 0 && *((_BYTE *)v5 + 1288))
              {
                v149 = v5[147];
                v150 = v5[148];
                v151 = v306[3];
                v320 = v306[2];
                v321 = v151;
                v152 = v306[5];
                v322 = v306[4];
                v323 = v152;
                v153 = v306[1];
                v318 = *v306;
                v319 = v153;
                v154 = v5[173];
                v155 = (char *)*((_QWORD *)v154 + 1);
                if (v155 == v5[174])
                {
                  v154 = *(char **)v154;
                  if (!v154)
                  {
                    v154 = (char *)malloc_type_malloc(120 * (_QWORD)v155 + 16, 0xB644C221uLL);
                    *(_QWORD *)v154 = 0;
                    *((_QWORD *)v154 + 1) = 0;
                    *(_QWORD *)v5[173] = v154;
                  }
                  v5[173] = v154;
                  v155 = (char *)*((_QWORD *)v154 + 1);
                }
                v156 = &v154[120 * (_QWORD)v155];
                *((_QWORD *)v154 + 1) = v155 + 1;
                *((_QWORD *)v156 + 2) = &off_1E42B59B0;
                *((_QWORD *)v156 + 3) = v149;
                v156 += 16;
                *((_QWORD *)v156 + 2) = v150;
                v157 = v322;
                v158 = v323;
                v159 = v321;
                *(_OWORD *)(v156 + 56) = v320;
                v160 = v318;
                *(_OWORD *)(v156 + 40) = v319;
                *(_OWORD *)(v156 + 24) = v160;
                *(_OWORD *)(v156 + 104) = v158;
                *(_OWORD *)(v156 + 88) = v157;
                *(_OWORD *)(v156 + 72) = v159;
                *((_QWORD *)v156 + 8) = v19;
                v161 = *v22;
                *((_QWORD *)v156 + 11) = *v22;
                *((_QWORD *)v156 + 12) = (v22[1] - v161) >> 4;
                v317 = 9;
                *(_QWORD *)&v318 = v156;
                v162 = *(_QWORD *)(a3 + 24);
                if (!v162)
                  goto LABEL_218;
                (*(void (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v162 + 48))(v162, &v317, &v318);
              }
            }
          }
          v20 = *(_QWORD *)v17;
          v19 = *(_QWORD *)(*(_QWORD *)v17 + 88);
        }
        v163 = 16;
        if (v7)
        {
          v163 = 32;
          v164 = v20 + 32;
        }
        else
        {
          v164 = v20 + 16;
        }
        if (*(_QWORD *)(v164 + 8) != *(_QWORD *)(v20 + v163))
          gm::MultiRange<unsigned long>::push_back(v5 + 162, (_OWORD *)v164);
      }
      v17 += 8;
      if (v17 == v18)
        goto LABEL_136;
    }
  }
  v19 = 0;
LABEL_136:
  result = ggl::Batcher::commit((__int128 **)v5 + 162, 0xC8u, a4);
  if (result[1] != *result)
  {
    v165 = result;
    if ((a2 & 1) != 0 && *((_BYTE *)v5 + 136))
    {
      v166 = v5[3];
      v167 = v5[4];
      v168 = *(_OWORD *)(v5 + 11);
      v320 = *(_OWORD *)(v5 + 9);
      v321 = v168;
      v169 = *(_OWORD *)(v5 + 15);
      v322 = *(_OWORD *)(v5 + 13);
      v323 = v169;
      v170 = *(_OWORD *)(v5 + 7);
      v318 = *(_OWORD *)(v5 + 5);
      v319 = v170;
      v171 = v5[173];
      v172 = (char *)*((_QWORD *)v171 + 1);
      if (v172 == v5[174])
      {
        v171 = *(char **)v171;
        if (!v171)
        {
          v171 = (char *)malloc_type_malloc(120 * (_QWORD)v172 + 16, 0xB644C221uLL);
          *(_QWORD *)v171 = 0;
          *((_QWORD *)v171 + 1) = 0;
          *(_QWORD *)v5[173] = v171;
        }
        v5[173] = v171;
        v172 = (char *)*((_QWORD *)v171 + 1);
      }
      v173 = &v171[120 * (_QWORD)v172];
      *((_QWORD *)v171 + 1) = v172 + 1;
      *((_QWORD *)v173 + 2) = &off_1E42B59B0;
      *((_QWORD *)v173 + 3) = v166;
      v173 += 16;
      *((_QWORD *)v173 + 2) = v167;
      v174 = v322;
      v175 = v323;
      v176 = v321;
      *(_OWORD *)(v173 + 56) = v320;
      v177 = v318;
      *(_OWORD *)(v173 + 40) = v319;
      *(_OWORD *)(v173 + 24) = v177;
      *(_OWORD *)(v173 + 104) = v175;
      *(_OWORD *)(v173 + 88) = v174;
      *(_OWORD *)(v173 + 72) = v176;
      *((_QWORD *)v173 + 8) = v19;
      v178 = *v165;
      *((_QWORD *)v173 + 11) = *v165;
      *((_QWORD *)v173 + 12) = (v165[1] - v178) >> 4;
      v317 = 0;
      *(_QWORD *)&v318 = v173;
      v179 = *(_QWORD *)(a3 + 24);
      if (!v179)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v179 + 48))(v179, &v317, &v318);
    }
    if ((a2 & 2) != 0 && *((_BYTE *)v5 + 264))
    {
      v180 = v5[19];
      v181 = v5[20];
      v182 = *(_OWORD *)(v5 + 27);
      v320 = *(_OWORD *)(v5 + 25);
      v321 = v182;
      v183 = *(_OWORD *)(v5 + 31);
      v322 = *(_OWORD *)(v5 + 29);
      v323 = v183;
      v184 = *(_OWORD *)(v5 + 23);
      v318 = *(_OWORD *)(v5 + 21);
      v319 = v184;
      v185 = v5[173];
      v186 = (char *)*((_QWORD *)v185 + 1);
      if (v186 == v5[174])
      {
        v185 = *(char **)v185;
        if (!v185)
        {
          v185 = (char *)malloc_type_malloc(120 * (_QWORD)v186 + 16, 0xB644C221uLL);
          *(_QWORD *)v185 = 0;
          *((_QWORD *)v185 + 1) = 0;
          *(_QWORD *)v5[173] = v185;
        }
        v5[173] = v185;
        v186 = (char *)*((_QWORD *)v185 + 1);
      }
      v187 = &v185[120 * (_QWORD)v186];
      *((_QWORD *)v185 + 1) = v186 + 1;
      *((_QWORD *)v187 + 2) = &off_1E42B59B0;
      *((_QWORD *)v187 + 3) = v180;
      v187 += 16;
      *((_QWORD *)v187 + 2) = v181;
      v188 = v322;
      v189 = v323;
      v190 = v321;
      *(_OWORD *)(v187 + 56) = v320;
      v191 = v318;
      *(_OWORD *)(v187 + 40) = v319;
      *(_OWORD *)(v187 + 24) = v191;
      *(_OWORD *)(v187 + 104) = v189;
      *(_OWORD *)(v187 + 88) = v188;
      *(_OWORD *)(v187 + 72) = v190;
      *((_QWORD *)v187 + 8) = v19;
      v192 = *v165;
      *((_QWORD *)v187 + 11) = *v165;
      *((_QWORD *)v187 + 12) = (v165[1] - v192) >> 4;
      v317 = 1;
      *(_QWORD *)&v318 = v187;
      v193 = *(_QWORD *)(a3 + 24);
      if (!v193)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v193 + 48))(v193, &v317, &v318);
    }
    if ((a2 & 4) != 0 && *((_BYTE *)v5 + 392))
    {
      v194 = v5[35];
      v195 = v5[36];
      v196 = *(_OWORD *)(v5 + 43);
      v320 = *(_OWORD *)(v5 + 41);
      v321 = v196;
      v197 = *(_OWORD *)(v5 + 47);
      v322 = *(_OWORD *)(v5 + 45);
      v323 = v197;
      v198 = *(_OWORD *)(v5 + 39);
      v318 = *(_OWORD *)(v5 + 37);
      v319 = v198;
      v199 = v5[173];
      v200 = (char *)*((_QWORD *)v199 + 1);
      if (v200 == v5[174])
      {
        v199 = *(char **)v199;
        if (!v199)
        {
          v199 = (char *)malloc_type_malloc(120 * (_QWORD)v200 + 16, 0xB644C221uLL);
          *(_QWORD *)v199 = 0;
          *((_QWORD *)v199 + 1) = 0;
          *(_QWORD *)v5[173] = v199;
        }
        v5[173] = v199;
        v200 = (char *)*((_QWORD *)v199 + 1);
      }
      v201 = &v199[120 * (_QWORD)v200];
      *((_QWORD *)v199 + 1) = v200 + 1;
      *((_QWORD *)v201 + 2) = &off_1E42B59B0;
      *((_QWORD *)v201 + 3) = v194;
      v201 += 16;
      *((_QWORD *)v201 + 2) = v195;
      v202 = v322;
      v203 = v323;
      v204 = v321;
      *(_OWORD *)(v201 + 56) = v320;
      v205 = v318;
      *(_OWORD *)(v201 + 40) = v319;
      *(_OWORD *)(v201 + 24) = v205;
      *(_OWORD *)(v201 + 104) = v203;
      *(_OWORD *)(v201 + 88) = v202;
      *(_OWORD *)(v201 + 72) = v204;
      *((_QWORD *)v201 + 8) = v19;
      v206 = *v165;
      *((_QWORD *)v201 + 11) = *v165;
      *((_QWORD *)v201 + 12) = (v165[1] - v206) >> 4;
      v317 = 2;
      *(_QWORD *)&v318 = v201;
      v207 = *(_QWORD *)(a3 + 24);
      if (!v207)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v207 + 48))(v207, &v317, &v318);
    }
    if ((a2 & 8) != 0 && *((_BYTE *)v5 + 520))
    {
      v208 = v5[51];
      v209 = v5[52];
      v210 = *(_OWORD *)(v5 + 59);
      v320 = *(_OWORD *)(v5 + 57);
      v321 = v210;
      v211 = *(_OWORD *)(v5 + 63);
      v322 = *(_OWORD *)(v5 + 61);
      v323 = v211;
      v212 = *(_OWORD *)(v5 + 55);
      v318 = *(_OWORD *)(v5 + 53);
      v319 = v212;
      v213 = v5[173];
      v214 = (char *)*((_QWORD *)v213 + 1);
      if (v214 == v5[174])
      {
        v213 = *(char **)v213;
        if (!v213)
        {
          v213 = (char *)malloc_type_malloc(120 * (_QWORD)v214 + 16, 0xB644C221uLL);
          *(_QWORD *)v213 = 0;
          *((_QWORD *)v213 + 1) = 0;
          *(_QWORD *)v5[173] = v213;
        }
        v5[173] = v213;
        v214 = (char *)*((_QWORD *)v213 + 1);
      }
      v215 = &v213[120 * (_QWORD)v214];
      *((_QWORD *)v213 + 1) = v214 + 1;
      *((_QWORD *)v215 + 2) = &off_1E42B59B0;
      *((_QWORD *)v215 + 3) = v208;
      v215 += 16;
      *((_QWORD *)v215 + 2) = v209;
      v216 = v322;
      v217 = v323;
      v218 = v321;
      *(_OWORD *)(v215 + 56) = v320;
      v219 = v318;
      *(_OWORD *)(v215 + 40) = v319;
      *(_OWORD *)(v215 + 24) = v219;
      *(_OWORD *)(v215 + 104) = v217;
      *(_OWORD *)(v215 + 88) = v216;
      *(_OWORD *)(v215 + 72) = v218;
      *((_QWORD *)v215 + 8) = v19;
      v220 = *v165;
      *((_QWORD *)v215 + 11) = *v165;
      *((_QWORD *)v215 + 12) = (v165[1] - v220) >> 4;
      v317 = 3;
      *(_QWORD *)&v318 = v215;
      v221 = *(_QWORD *)(a3 + 24);
      if (!v221)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v221 + 48))(v221, &v317, &v318);
    }
    if ((a2 & 0x10) != 0 && *((_BYTE *)v5 + 648))
    {
      v222 = v5[67];
      v223 = v5[68];
      v224 = *(_OWORD *)(v5 + 75);
      v320 = *(_OWORD *)(v5 + 73);
      v321 = v224;
      v225 = *(_OWORD *)(v5 + 79);
      v322 = *(_OWORD *)(v5 + 77);
      v323 = v225;
      v226 = *(_OWORD *)(v5 + 71);
      v318 = *(_OWORD *)(v5 + 69);
      v319 = v226;
      v227 = v5[173];
      v228 = (char *)*((_QWORD *)v227 + 1);
      if (v228 == v5[174])
      {
        v227 = *(char **)v227;
        if (!v227)
        {
          v227 = (char *)malloc_type_malloc(120 * (_QWORD)v228 + 16, 0xB644C221uLL);
          *(_QWORD *)v227 = 0;
          *((_QWORD *)v227 + 1) = 0;
          *(_QWORD *)v5[173] = v227;
        }
        v5[173] = v227;
        v228 = (char *)*((_QWORD *)v227 + 1);
      }
      v229 = &v227[120 * (_QWORD)v228];
      *((_QWORD *)v227 + 1) = v228 + 1;
      *((_QWORD *)v229 + 2) = &off_1E42B59B0;
      *((_QWORD *)v229 + 3) = v222;
      v229 += 16;
      *((_QWORD *)v229 + 2) = v223;
      v230 = v322;
      v231 = v323;
      v232 = v321;
      *(_OWORD *)(v229 + 56) = v320;
      v233 = v318;
      *(_OWORD *)(v229 + 40) = v319;
      *(_OWORD *)(v229 + 24) = v233;
      *(_OWORD *)(v229 + 104) = v231;
      *(_OWORD *)(v229 + 88) = v230;
      *(_OWORD *)(v229 + 72) = v232;
      *((_QWORD *)v229 + 8) = v19;
      v234 = *v165;
      *((_QWORD *)v229 + 11) = *v165;
      *((_QWORD *)v229 + 12) = (v165[1] - v234) >> 4;
      v317 = 4;
      *(_QWORD *)&v318 = v229;
      v235 = *(_QWORD *)(a3 + 24);
      if (!v235)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v235 + 48))(v235, &v317, &v318);
    }
    if ((a2 & 0x20) != 0 && *((_BYTE *)v5 + 776))
    {
      v236 = v5[83];
      v237 = v5[84];
      v238 = *(_OWORD *)(v5 + 91);
      v320 = *(_OWORD *)(v5 + 89);
      v321 = v238;
      v239 = *(_OWORD *)(v5 + 95);
      v322 = *(_OWORD *)(v5 + 93);
      v323 = v239;
      v240 = *(_OWORD *)(v5 + 87);
      v318 = *(_OWORD *)(v5 + 85);
      v319 = v240;
      v241 = v5[173];
      v242 = (char *)*((_QWORD *)v241 + 1);
      if (v242 == v5[174])
      {
        v241 = *(char **)v241;
        if (!v241)
        {
          v241 = (char *)malloc_type_malloc(120 * (_QWORD)v242 + 16, 0xB644C221uLL);
          *(_QWORD *)v241 = 0;
          *((_QWORD *)v241 + 1) = 0;
          *(_QWORD *)v5[173] = v241;
        }
        v5[173] = v241;
        v242 = (char *)*((_QWORD *)v241 + 1);
      }
      v243 = &v241[120 * (_QWORD)v242];
      *((_QWORD *)v241 + 1) = v242 + 1;
      *((_QWORD *)v243 + 2) = &off_1E42B59B0;
      *((_QWORD *)v243 + 3) = v236;
      v243 += 16;
      *((_QWORD *)v243 + 2) = v237;
      v244 = v322;
      v245 = v323;
      v246 = v321;
      *(_OWORD *)(v243 + 56) = v320;
      v247 = v318;
      *(_OWORD *)(v243 + 40) = v319;
      *(_OWORD *)(v243 + 24) = v247;
      *(_OWORD *)(v243 + 104) = v245;
      *(_OWORD *)(v243 + 88) = v244;
      *(_OWORD *)(v243 + 72) = v246;
      *((_QWORD *)v243 + 8) = v19;
      v248 = *v165;
      *((_QWORD *)v243 + 11) = *v165;
      *((_QWORD *)v243 + 12) = (v165[1] - v248) >> 4;
      v317 = 5;
      *(_QWORD *)&v318 = v243;
      v249 = *(_QWORD *)(a3 + 24);
      if (!v249)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v249 + 48))(v249, &v317, &v318);
    }
    if ((a2 & 0x40) != 0 && *((_BYTE *)v5 + 904))
    {
      v250 = v5[99];
      v251 = v5[100];
      v252 = *(_OWORD *)(v5 + 107);
      v320 = *(_OWORD *)(v5 + 105);
      v321 = v252;
      v253 = *(_OWORD *)(v5 + 111);
      v322 = *(_OWORD *)(v5 + 109);
      v323 = v253;
      v254 = *(_OWORD *)(v5 + 103);
      v318 = *(_OWORD *)(v5 + 101);
      v319 = v254;
      v255 = v5[173];
      v256 = (char *)*((_QWORD *)v255 + 1);
      if (v256 == v5[174])
      {
        v255 = *(char **)v255;
        if (!v255)
        {
          v255 = (char *)malloc_type_malloc(120 * (_QWORD)v256 + 16, 0xB644C221uLL);
          *(_QWORD *)v255 = 0;
          *((_QWORD *)v255 + 1) = 0;
          *(_QWORD *)v5[173] = v255;
        }
        v5[173] = v255;
        v256 = (char *)*((_QWORD *)v255 + 1);
      }
      v257 = &v255[120 * (_QWORD)v256];
      *((_QWORD *)v255 + 1) = v256 + 1;
      *((_QWORD *)v257 + 2) = &off_1E42B59B0;
      *((_QWORD *)v257 + 3) = v250;
      v257 += 16;
      *((_QWORD *)v257 + 2) = v251;
      v258 = v322;
      v259 = v323;
      v260 = v321;
      *(_OWORD *)(v257 + 56) = v320;
      v261 = v318;
      *(_OWORD *)(v257 + 40) = v319;
      *(_OWORD *)(v257 + 24) = v261;
      *(_OWORD *)(v257 + 104) = v259;
      *(_OWORD *)(v257 + 88) = v258;
      *(_OWORD *)(v257 + 72) = v260;
      *((_QWORD *)v257 + 8) = v19;
      v262 = *v165;
      *((_QWORD *)v257 + 11) = *v165;
      *((_QWORD *)v257 + 12) = (v165[1] - v262) >> 4;
      v317 = 6;
      *(_QWORD *)&v318 = v257;
      v263 = *(_QWORD *)(a3 + 24);
      if (!v263)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v263 + 48))(v263, &v317, &v318);
    }
    if ((a2 & 0x80) != 0 && *((_BYTE *)v5 + 1032))
    {
      v264 = v5[115];
      v265 = v5[116];
      v266 = *(_OWORD *)(v5 + 123);
      v320 = *(_OWORD *)(v5 + 121);
      v321 = v266;
      v267 = *(_OWORD *)(v5 + 127);
      v322 = *(_OWORD *)(v5 + 125);
      v323 = v267;
      v268 = *(_OWORD *)(v5 + 119);
      v318 = *(_OWORD *)(v5 + 117);
      v319 = v268;
      v269 = v5[173];
      v270 = (char *)*((_QWORD *)v269 + 1);
      if (v270 == v5[174])
      {
        v269 = *(char **)v269;
        if (!v269)
        {
          v269 = (char *)malloc_type_malloc(120 * (_QWORD)v270 + 16, 0xB644C221uLL);
          *(_QWORD *)v269 = 0;
          *((_QWORD *)v269 + 1) = 0;
          *(_QWORD *)v5[173] = v269;
        }
        v5[173] = v269;
        v270 = (char *)*((_QWORD *)v269 + 1);
      }
      v271 = &v269[120 * (_QWORD)v270];
      *((_QWORD *)v269 + 1) = v270 + 1;
      *((_QWORD *)v271 + 2) = &off_1E42B59B0;
      *((_QWORD *)v271 + 3) = v264;
      v271 += 16;
      *((_QWORD *)v271 + 2) = v265;
      v272 = v322;
      v273 = v323;
      v274 = v321;
      *(_OWORD *)(v271 + 56) = v320;
      v275 = v318;
      *(_OWORD *)(v271 + 40) = v319;
      *(_OWORD *)(v271 + 24) = v275;
      *(_OWORD *)(v271 + 104) = v273;
      *(_OWORD *)(v271 + 88) = v272;
      *(_OWORD *)(v271 + 72) = v274;
      *((_QWORD *)v271 + 8) = v19;
      v276 = *v165;
      *((_QWORD *)v271 + 11) = *v165;
      *((_QWORD *)v271 + 12) = (v165[1] - v276) >> 4;
      v317 = 7;
      *(_QWORD *)&v318 = v271;
      v277 = *(_QWORD *)(a3 + 24);
      if (!v277)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v277 + 48))(v277, &v317, &v318);
    }
    if ((a2 & 0x100) != 0 && *((_BYTE *)v5 + 1160))
    {
      v278 = v5[131];
      v279 = v5[132];
      v280 = *(_OWORD *)(v5 + 139);
      v320 = *(_OWORD *)(v5 + 137);
      v321 = v280;
      v281 = *(_OWORD *)(v5 + 143);
      v322 = *(_OWORD *)(v5 + 141);
      v323 = v281;
      v282 = *(_OWORD *)(v5 + 135);
      v318 = *(_OWORD *)(v5 + 133);
      v319 = v282;
      v283 = v5[173];
      v284 = (char *)*((_QWORD *)v283 + 1);
      if (v284 == v5[174])
      {
        v283 = *(char **)v283;
        if (!v283)
        {
          v283 = (char *)malloc_type_malloc(120 * (_QWORD)v284 + 16, 0xB644C221uLL);
          *(_QWORD *)v283 = 0;
          *((_QWORD *)v283 + 1) = 0;
          *(_QWORD *)v5[173] = v283;
        }
        v5[173] = v283;
        v284 = (char *)*((_QWORD *)v283 + 1);
      }
      v285 = &v283[120 * (_QWORD)v284];
      *((_QWORD *)v283 + 1) = v284 + 1;
      *((_QWORD *)v285 + 2) = &off_1E42B59B0;
      *((_QWORD *)v285 + 3) = v278;
      v285 += 16;
      *((_QWORD *)v285 + 2) = v279;
      v286 = v322;
      v287 = v323;
      v288 = v321;
      *(_OWORD *)(v285 + 56) = v320;
      v289 = v318;
      *(_OWORD *)(v285 + 40) = v319;
      *(_OWORD *)(v285 + 24) = v289;
      *(_OWORD *)(v285 + 104) = v287;
      *(_OWORD *)(v285 + 88) = v286;
      *(_OWORD *)(v285 + 72) = v288;
      *((_QWORD *)v285 + 8) = v19;
      v290 = *v165;
      *((_QWORD *)v285 + 11) = *v165;
      *((_QWORD *)v285 + 12) = (v165[1] - v290) >> 4;
      v317 = 8;
      *(_QWORD *)&v318 = v285;
      v291 = *(_QWORD *)(a3 + 24);
      if (!v291)
        goto LABEL_218;
      result = (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v291 + 48))(v291, &v317, &v318);
    }
    if ((a2 & 0x200) != 0 && *((_BYTE *)v5 + 1288))
    {
      v292 = v5[147];
      v293 = v5[148];
      v294 = *(_OWORD *)(v5 + 155);
      v320 = *(_OWORD *)(v5 + 153);
      v321 = v294;
      v295 = *(_OWORD *)(v5 + 159);
      v322 = *(_OWORD *)(v5 + 157);
      v323 = v295;
      v296 = *(_OWORD *)(v5 + 151);
      v318 = *(_OWORD *)(v5 + 149);
      v319 = v296;
      v297 = v5[173];
      v298 = (char *)*((_QWORD *)v297 + 1);
      if (v298 == v5[174])
      {
        v297 = *(char **)v297;
        if (!v297)
        {
          v297 = (char *)malloc_type_malloc(120 * (_QWORD)v298 + 16, 0xB644C221uLL);
          *(_QWORD *)v297 = 0;
          *((_QWORD *)v297 + 1) = 0;
          *(_QWORD *)v5[173] = v297;
        }
        v5[173] = v297;
        v298 = (char *)*((_QWORD *)v297 + 1);
      }
      v299 = &v297[120 * (_QWORD)v298];
      *((_QWORD *)v297 + 1) = v298 + 1;
      *((_QWORD *)v299 + 2) = &off_1E42B59B0;
      *((_QWORD *)v299 + 3) = v292;
      v299 += 16;
      *((_QWORD *)v299 + 2) = v293;
      v300 = v322;
      v301 = v323;
      v302 = v321;
      *(_OWORD *)(v299 + 56) = v320;
      v303 = v318;
      *(_OWORD *)(v299 + 40) = v319;
      *(_OWORD *)(v299 + 24) = v303;
      *(_OWORD *)(v299 + 104) = v301;
      *(_OWORD *)(v299 + 88) = v300;
      *(_OWORD *)(v299 + 72) = v302;
      *((_QWORD *)v299 + 8) = v19;
      v304 = *v165;
      *((_QWORD *)v299 + 11) = *v165;
      *((_QWORD *)v299 + 12) = (v165[1] - v304) >> 4;
      v317 = 9;
      *(_QWORD *)&v318 = v299;
      v305 = *(_QWORD *)(a3 + 24);
      if (v305)
        return (char **)(*(uint64_t (**)(uint64_t, char *, __int128 *))(*(_QWORD *)v305 + 48))(v305, &v317, &v318);
LABEL_218:
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x19F9E72C8);
    }
  }
  return result;
}

void std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42CFB78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42CFB78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t result, unsigned __int8 *a2, ggl::RenderItem **a3)
{
  int v3;
  ggl::RenderItem *v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  switch(v3)
  {
    case 0:
      v5 = **(_QWORD **)(result + 8);
      goto LABEL_9;
    case 1:
    case 8:
      v5 = **(_QWORD **)(result + 8) + 1;
      goto LABEL_9;
    case 2:
    case 3:
      v5 = **(_QWORD **)(result + 8) + 2;
      goto LABEL_9;
    case 4:
      v5 = **(_QWORD **)(result + 8) + 3;
      goto LABEL_9;
    case 5:
      v5 = **(_QWORD **)(result + 8) + 4;
      goto LABEL_9;
    case 6:
    case 7:
      v5 = **(_QWORD **)(result + 8) + 5;
      goto LABEL_9;
    case 9:
      v5 = **(_QWORD **)(result + 8) + 6;
LABEL_9:
      *((_QWORD *)v4 + 6) = v5;
      return ggl::CommandBuffer::pushRenderItem(**(_QWORD **)(result + 16), v4);
    case 10:
      return result;
    default:
      return ggl::CommandBuffer::pushRenderItem(**(_QWORD **)(result + 16), v4);
  }
}

void std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CFB30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CFB30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<void md::COverlayRenderLayer::layoutRibbon<md::Ribbons::PolylineOverlayRibbonDescriptor>(std::unique_ptr<md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,ggl::CommandBuffer *,md::PolylineOverlayLayoutContext &,unsigned int,unsigned long long,BOOL,BOOL,BOOL,float)::{lambda(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t result, unsigned __int8 *a2, ggl::RenderItem **a3)
{
  int v3;
  ggl::RenderItem *v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  switch(v3)
  {
    case 0:
      v5 = **(_QWORD **)(result + 8);
      goto LABEL_9;
    case 1:
    case 8:
      v5 = **(_QWORD **)(result + 8) + 1;
      goto LABEL_9;
    case 2:
    case 3:
      v5 = **(_QWORD **)(result + 8) + 2;
      goto LABEL_9;
    case 4:
      v5 = **(_QWORD **)(result + 8) + 3;
      goto LABEL_9;
    case 5:
      v5 = **(_QWORD **)(result + 8) + 4;
      goto LABEL_9;
    case 6:
    case 7:
      v5 = **(_QWORD **)(result + 8) + 5;
      goto LABEL_9;
    case 9:
      v5 = **(_QWORD **)(result + 8) + 6;
LABEL_9:
      *((_QWORD *)v4 + 6) = v5;
      return ggl::CommandBuffer::pushRenderItem(**(_QWORD **)(result + 16), v4);
    case 10:
      return result;
    default:
      return ggl::CommandBuffer::pushRenderItem(**(_QWORD **)(result + 16), v4);
  }
}

void md::COverlayRenderLayer::setTexturePipeline<ggl::Textured::SRGBBlendPos4DUVPipelineSetup,ggl::Textured::SRGBBlendPos4DUVPipelineState>(uint64_t a1, ggl::PipelineSetup *this, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, int a8, uint64_t *a9)
{
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;

  v15 = (_QWORD *)*((_QWORD *)this + 8);
  *v15 = a3;
  v15[1] = 0;
  v16 = (_QWORD *)*((_QWORD *)this + 20);
  if (a4)
  {
    v17 = (unint64_t *)(a4 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = a3;
  v16[1] = a4;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *((_QWORD *)this + 8);
  v23 = *a5;
  v24 = a5[1];
  *(_QWORD *)(v22 + 16) = *a5;
  *(_QWORD *)(v22 + 24) = 0;
  v25 = *((_QWORD *)this + 20);
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v25 + 24);
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v24;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *((_QWORD *)this + 8);
  v32 = *a6;
  v33 = a6[1];
  *(_QWORD *)(v31 + 48) = *a6;
  *(_QWORD *)(v31 + 56) = 0;
  v34 = *((_QWORD *)this + 20);
  if (v33)
  {
    v35 = (unint64_t *)(v33 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(std::__shared_weak_count **)(v34 + 56);
  *(_QWORD *)(v34 + 48) = v32;
  *(_QWORD *)(v34 + 56) = v33;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  **((_QWORD **)this + 12) = *a7;
  v41 = *a9;
  v40 = (std::__shared_weak_count *)a9[1];
  if (v40)
  {
    v42 = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldxr(v42);
    while (__stxr(v44 + 1, v42));
  }
  if (v41 && **(_QWORD **)(v41 + 40) == *((_QWORD *)this + 1))
  {
    v48 = *((_QWORD *)this + 2);
    if (v48 && v48 != v41)
      ggl::PipelineSetup::resetData((uint64_t)this);
    if (v40)
    {
      v49 = (unint64_t *)&v40->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = v41;
    *((_QWORD *)this + 3) = v40;
    if (!v45)
      goto LABEL_45;
    v51 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v51);
    while (__stlxr(v47 - 1, v51));
  }
  else
  {
    v45 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (!v45)
      goto LABEL_45;
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
  }
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!v40)
      goto LABEL_52;
    goto LABEL_46;
  }
LABEL_45:
  if (!v40)
    goto LABEL_52;
LABEL_46:
  v52 = (unint64_t *)&v40->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  do
    v54 = __ldaxr(v52);
  while (__stlxr(v54 - 1, v52));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (!*(_BYTE *)(a1 + 394))
      return;
    goto LABEL_53;
  }
LABEL_52:
  if (!*(_BYTE *)(a1 + 394))
    return;
LABEL_53:
  v55 = 168;
  if (a8)
    v55 = 176;
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + v55);
  v57 = *((_QWORD *)this + 8);
  *(_QWORD *)(v57 + 64) = v56;
  *(_QWORD *)(v57 + 72) = 0;
  v58 = *((_QWORD *)this + 20);
  v59 = *(std::__shared_weak_count **)(v58 + 72);
  *(_QWORD *)(v58 + 64) = 0;
  *(_QWORD *)(v58 + 72) = 0;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

uint64_t md::COverlayRenderLayer::getDrapeTileScalar(md::COverlayRenderLayer *this, const QuadTile *a2, const QuadTile *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  int xIdx;
  int v12;
  int v13;
  unint64_t v19;

  v5 = ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this);
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 8);
  if (v7)
    v8 = *(_QWORD *)(v5 + 72);
  else
    v8 = 0;
  if (a2->_level >= a3->_level)
  {
    *(_WORD *)(v8 + 4) = 15360;
    *(_DWORD *)v8 = 15360;
    *(_WORD *)(v8 + 6) = 0;
    if (!v8)
      return v6;
  }
  else
  {
    __powidf2();
    v10 = (int)_D0;
    xIdx = a3->_xIdx;
    v12 = a2->_xIdx;
    v13 = a3->_yIdx + ~a2->_yIdx * (int)_D0 + 1;
    *(float *)&_D0 = (float)(int)_D0;
    __asm { FCVT            H0, S0 }
    *(_WORD *)v8 = LOWORD(_D0);
    _S1 = (float)(v12 * v10 - xIdx);
    __asm { FCVT            H1, S1 }
    *(_WORD *)(v8 + 2) = LOWORD(_S1);
    *(_WORD *)(v8 + 4) = LOWORD(_D0);
    *(float *)&_D0 = (float)v13;
    __asm { FCVT            H0, S0 }
    *(_WORD *)(v8 + 6) = LOWORD(_D0);
    if (!v8)
      return v6;
  }
  if (v7)
  {
    v19 = *(_QWORD *)(v6 + 64);
    if (v19 <= v7)
      v19 = v7;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = v19;
  }
  return v6;
}

uint64_t md::COverlayRenderLayer::getTileScalar(md::COverlayRenderLayer *this, const QuadTile *a2, const QuadTile *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  int xIdx;
  int v12;
  int v13;
  unint64_t v20;

  v5 = ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this);
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 8);
  if (v7)
    v8 = *(_QWORD *)(v5 + 72);
  else
    v8 = 0;
  if (a2->_level >= a3->_level)
  {
    *(_WORD *)(v8 + 4) = 15360;
    *(_DWORD *)v8 = 15360;
    *(_WORD *)(v8 + 6) = 0;
    if (!v8)
      return v6;
  }
  else
  {
    __powidf2();
    v10 = (int)_D0;
    *(float *)&_D0 = 1.0 / (float)(int)_D0;
    xIdx = a3->_xIdx;
    v12 = a2->_xIdx;
    v13 = ~a3->_yIdx + v10 + a2->_yIdx * v10;
    __asm { FCVT            H1, S0 }
    *(_WORD *)v8 = _H1;
    _S2 = *(float *)&_D0 * (float)(xIdx - v12 * v10);
    __asm { FCVT            H2, S2 }
    *(_WORD *)(v8 + 2) = LOWORD(_S2);
    *(_WORD *)(v8 + 4) = _H1;
    *(float *)&_D0 = *(float *)&_D0 * (float)v13;
    __asm { FCVT            H0, S0 }
    *(_WORD *)(v8 + 6) = LOWORD(_D0);
    if (!v8)
      return v6;
  }
  if (v7)
  {
    v20 = *(_QWORD *)(v6 + 64);
    if (v20 <= v7)
      v20 = v7;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = v20;
  }
  return v6;
}

void std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CFC50;
  return result;
}

void std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CFC50;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 24) = &off_1E42B49F0;

    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_40c55_ZTSN2md15OverlaysContext27KeyframeAnimationParametersE(uint64_t result, uint64_t a2)
{
  __int128 v2;

  v2 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(result + 40) = v2;
  *(_BYTE *)(result + 58) = 0;
  if (*(_BYTE *)(a2 + 58))
  {
    *(_WORD *)(result + 60) = *(_WORD *)(a2 + 60);
    *(_BYTE *)(result + 58) = 1;
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c55_ZTSN2md15OverlaysContext27KeyframeAnimationParametersE(uint64_t result)
{
  if (*(_BYTE *)(result + 58))
    *(_BYTE *)(result + 58) = 0;
  return result;
}

void std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFC08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFC08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "OverlayLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFBC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::COverlayRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFBC0;
  a2[1] = v2;
  return result;
}

void md::MaskingOverlayRenderable::SharedResources::~SharedResources(md::MaskingOverlayRenderable::SharedResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    v3 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40D234DDC7);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    v9 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C40D234DDC7);
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v12)
    goto LABEL_20;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v15)
      return;
  }
  else
  {
LABEL_20:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v15)
      return;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

md::COverlayRenderResources *md::COverlayRenderResources::COverlayRenderResources(md::COverlayRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count_vtbl *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t *v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  __int128 *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (**v176)();
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  __int128 v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t (**v190)();
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t (**v204)();
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  _QWORD *v208;
  __int128 v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  __int128 v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t (**v232)();
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  _QWORD *v236;
  __int128 v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  md::CircleOverlayRenderable::SharedResources *v245;
  md::CircleOverlayRenderable::SharedResources *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t (**v254)();
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  _QWORD *v258;
  __int128 v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t (**v268)();
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _QWORD *v272;
  __int128 v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t (**v282)();
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  _QWORD *v286;
  __int128 v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t (**v296)();
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  _QWORD *v300;
  __int128 v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t (**v310)();
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  __int128 v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _QWORD *v328;
  __int128 v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  md::CircleOverlayRenderable::SharedResources *v337;
  md::CircleOverlayRenderable::SharedResources *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t (**v346)();
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  _QWORD *v350;
  __int128 v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t *v356;
  md::PolygonOverlayRenderResources **v357;
  uint64_t v358;
  VKSharedResources *v359;
  uint64_t v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  __int128 v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  _QWORD *v379;
  __int128 v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  _QWORD *v392;
  __int128 v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  _QWORD *v405;
  __int128 v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  _QWORD *v418;
  __int128 v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t *v424;
  unint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  __int128 *v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  unint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t (***v437)();
  uint64_t v438;
  uint64_t *v439;
  unsigned __int8 v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _OWORD *v456;
  __int128 *v457;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _OWORD *v474;
  __int128 *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  int v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  md::PolylineOverlaySharedResources *v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  md::PolygonOverlayRenderResources **v514;
  md::PolylineOverlaySharedResources *v515;
  md::PolygonOverlayRenderResources *v516;
  uint64_t v517;
  VKSharedResources *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  char *v527;
  __int128 v528;
  unsigned __int8 v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t v532;
  __int128 v533;
  unint64_t *v534;
  unint64_t v535;
  int8x16_t v536;
  int16x8_t v537;
  int32x4_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int16x8_t v541;
  int32x4_t v542;
  int8x16_t v543;
  int32x4_t v544;
  int8x16_t v545;
  int32x4_t v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  int8x16_t v555;
  int16x8_t v556;
  int32x4_t v557;
  int8x16_t v558;
  int16x8_t v559;
  int32x4_t v560;
  int8x16_t v561;
  int32x4_t v562;
  int8x16_t v563;
  int32x4_t v564;
  int8x16_t v565;
  int8x16_t v566;
  int8x16_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int16x8_t v579;
  int32x4_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int16x8_t v583;
  int32x4_t v584;
  int8x16_t v585;
  int16x8_t v586;
  int32x4_t v587;
  int8x16_t v588;
  int16x8_t v589;
  int32x4_t v590;
  int8x16_t v591;
  int32x4_t v592;
  int8x16_t v593;
  int32x4_t v594;
  int8x16_t v595;
  int32x4_t v596;
  int8x16_t v597;
  int32x4_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  unint64_t *v610;
  unint64_t v611;
  uint64_t *v612;
  unsigned __int8 v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  _OWORD *v629;
  __int128 *v630;
  uint64_t v631;
  __int128 v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  _OWORD *v647;
  __int128 *v648;
  uint64_t v649;
  __int128 v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t (***v655)();
  uint64_t v656;
  __int128 *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  std::__shared_weak_count *v663;
  __int32 v664;
  unint64_t *v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  std::__shared_weak_count *v669;
  unint64_t *v670;
  unint64_t v671;
  int v672;
  char *v673;
  int32x2_t v674;
  int32x2_t v675;
  int8x8_t v676;
  __int128 v677;
  unsigned __int8 v678;
  int8x8_t v679;
  unint64_t *v680;
  unint64_t v681;
  unint64_t v682;
  __int128 v683;
  VKSharedResources *v684;
  unint64_t *v685;
  unint64_t v686;
  int8x16_t v687;
  int16x8_t v688;
  int32x4_t v689;
  int8x16_t v690;
  int8x16_t v691;
  int16x8_t v692;
  int32x4_t v693;
  int8x16_t v694;
  int32x4_t v695;
  int8x16_t v696;
  int32x4_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int16x8_t v704;
  int32x4_t v705;
  int8x16_t v706;
  int16x8_t v707;
  int32x4_t v708;
  int8x16_t v709;
  int32x4_t v710;
  int8x16_t v711;
  int32x4_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int16x8_t v726;
  int32x4_t v727;
  int16x8_t v728;
  int32x4_t v729;
  int32x4_t v730;
  int32x4_t v731;
  int8x16_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int16x8_t v741;
  int32x4_t v742;
  int16x8_t v743;
  int32x4_t v744;
  int32x4_t v745;
  int32x4_t v746;
  int8x16_t v747;
  int8x16_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int8x16_t v751;
  int8x16_t v752;
  int8x16_t v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  unint64_t *v757;
  unint64_t v758;
  uint64_t *v759;
  unsigned __int8 v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  unint64_t v772;
  unint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _OWORD *v776;
  __int128 *v777;
  uint64_t v778;
  __int128 v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  _OWORD *v794;
  __int128 *v795;
  uint64_t v796;
  __int128 v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  _QWORD *v802;
  uint64_t v803;
  _QWORD *v804;
  uint64_t v805;
  _QWORD *v806;
  ggl::CommonMesh::Pos2UVMesh *v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  uint64_t v822;
  std::__shared_weak_count_vtbl *v823;
  uint64_t v824;
  unint64_t v825;
  unint64_t v826;
  std::__shared_weak_count *v827;
  unint64_t *v828;
  unint64_t v829;
  unint64_t v830;
  unint64_t shared_weak_owners;
  unint64_t v832;
  unint64_t v833;
  md::MaskingOverlayRenderable::SharedResources *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  _QWORD *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t (**v865)();
  std::__shared_weak_count *v866;
  unint64_t *v867;
  unint64_t v868;
  _QWORD *v869;
  __int128 v870;
  uint64_t v871;
  std::__shared_weak_count *v872;
  unint64_t *v873;
  unint64_t v874;
  std::__shared_weak_count *v875;
  unint64_t *v876;
  unint64_t v877;
  unint64_t *v878;
  uint64_t v879;
  uint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  _QWORD *v883;
  uint64_t v884;
  unint64_t *v885;
  uint64_t v886;
  uint64_t v887;
  _QWORD *v888;
  uint64_t v889;
  _QWORD *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t (**v893)();
  std::__shared_weak_count *v894;
  unint64_t *v895;
  unint64_t v896;
  _QWORD *v897;
  __int128 v898;
  uint64_t v899;
  std::__shared_weak_count *v900;
  unint64_t *v901;
  unint64_t v902;
  std::__shared_weak_count *v903;
  unint64_t *v904;
  unint64_t v905;
  unint64_t *v906;
  uint64_t v907;
  uint64_t v908;
  _QWORD *v909;
  uint64_t v910;
  _QWORD *v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  int8x16_t v915;
  uint64_t v916;
  __int128 v917;
  uint64_t v918;
  uint64_t v919;
  __int16 v920;
  __int16 v921;
  __int16 v922;
  __int16 v923;
  __int16 v924;
  __int16 v925;
  __int16 v926;
  __int16 v927;
  __int16 v928;
  __int16 v929;
  __int16 v930;
  __int16 v931;
  __int16 v932;
  __int16 v933;
  __int16 v934;
  __int16 v935;
  uint64_t v936;
  unsigned __int8 v937;
  uint64_t **v938;
  unsigned __int8 v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  unint64_t v944;
  unint64_t v945;
  uint64_t v946;
  std::__shared_weak_count *v947;
  unint64_t *v948;
  unint64_t v949;
  unsigned __int8 v950;
  uint64_t v951;
  uint64_t v952;
  __int128 v953;
  unsigned __int8 v954;
  uint64_t *v955;
  std::__shared_weak_count *v956;
  unint64_t *v957;
  unint64_t v958;
  __int128 v959;
  unint64_t *v960;
  unint64_t v961;
  unint64_t v962;
  std::__shared_weak_count *v963;
  unint64_t *v964;
  unint64_t v965;
  unint64_t *v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  uint64_t v971;
  unint64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  float v981;
  unint64_t v982;
  unint64_t v983;
  _QWORD *v984;
  int v985;
  int v986;
  unint64_t v987;
  unint64_t v988;
  std::__shared_weak_count *v989;
  unint64_t *v990;
  unint64_t v991;
  uint64_t v992;
  _QWORD *v993;
  uint64_t v994;
  std::__shared_weak_count *v995;
  unint64_t *v996;
  unint64_t v997;
  _QWORD *v998;
  uint64_t v999;
  std::__shared_weak_count *v1000;
  unint64_t *v1001;
  unint64_t v1002;
  _QWORD *v1003;
  uint64_t v1004;
  std::__shared_weak_count *v1005;
  unint64_t *v1006;
  unint64_t v1007;
  _QWORD *v1008;
  uint64_t v1009;
  std::__shared_weak_count *v1010;
  unint64_t *v1011;
  unint64_t v1012;
  uint64_t *v1013;
  unsigned __int8 v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  unint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  _OWORD *v1030;
  __int128 *v1031;
  uint64_t v1032;
  __int128 v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  _OWORD *v1048;
  __int128 *v1049;
  uint64_t v1050;
  __int128 v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  _QWORD *v1056;
  uint64_t v1057;
  _QWORD *v1058;
  uint64_t v1059;
  uint64_t *v1060;
  unsigned __int8 v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  _OWORD *v1077;
  __int128 *v1078;
  uint64_t v1079;
  __int128 v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  _OWORD *v1095;
  __int128 *v1096;
  uint64_t v1097;
  __int128 v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  _QWORD *v1103;
  uint64_t v1104;
  _QWORD *v1105;
  uint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  _QWORD *v1109;
  int v1110;
  int v1111;
  unint64_t v1112;
  unint64_t v1113;
  std::__shared_weak_count *v1114;
  unint64_t *v1115;
  unint64_t v1116;
  __int128 v1117;
  _QWORD *v1118;
  int v1119;
  int v1120;
  unint64_t v1121;
  unint64_t v1122;
  std::__shared_weak_count *v1123;
  unint64_t *v1124;
  unint64_t v1125;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  geo::read_write_lock *v1134;
  const char *v1135;
  malloc_zone_t *zone;
  uint64_t v1137;
  geo::read_write_lock *v1138;
  const char *v1139;
  malloc_zone_t *v1140;
  ggl::MaskingOverlayMaskingShader *v1141;
  unsigned __int8 v1142;
  unsigned __int8 v1143;
  unsigned __int8 v1144;
  uint64_t v1145;
  geo::read_write_lock *v1146;
  const char *v1147;
  malloc_zone_t *v1148;
  uint64_t v1149;
  geo::read_write_lock *v1150;
  const char *v1151;
  malloc_zone_t *v1152;
  ggl::MaskingOverlayFillShader *v1153;
  unsigned __int8 v1154;
  unsigned __int8 v1155;
  unsigned __int8 v1156;
  uint64_t v1157;
  geo::read_write_lock *v1158;
  const char *v1159;
  malloc_zone_t *v1160;
  uint64_t v1161;
  geo::read_write_lock *v1162;
  const char *v1163;
  malloc_zone_t *v1164;
  unsigned __int8 v1165;
  uint64_t v1166;
  geo::read_write_lock *v1167;
  const char *v1168;
  malloc_zone_t *v1169;
  uint64_t v1170;
  geo::read_write_lock *v1171;
  const char *v1172;
  malloc_zone_t *v1173;
  uint64_t v1174;
  geo::read_write_lock *v1175;
  const char *v1176;
  malloc_zone_t *v1177;
  int v1178;
  uint64_t v1179;
  geo::read_write_lock *v1180;
  const char *v1181;
  malloc_zone_t *v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  unsigned __int8 v1187;
  unsigned __int8 v1188;
  unsigned __int8 v1189;
  unsigned __int8 v1190;
  unsigned __int8 v1191;
  unsigned __int8 v1192;
  uint64_t v1193;
  uint64_t v1194;
  int8x8_t v1195;
  uint64_t *v1197;
  uint64_t *v1198;
  uint64_t *v1199;
  uint64_t *v1200;
  uint64_t *v1201;
  md::MaskingOverlayRenderable::SharedResources **v1202;
  md::PolygonOverlayRenderResources ***v1203;
  md::CircleOverlayRenderable::SharedResources **v1204;
  uint64_t *v1205;
  uint64_t *v1206;
  uint64_t *v1207;
  uint64_t *v1208;
  VKSharedResources *v1209;
  VKSharedResources *v1210;
  VKSharedResources *v1211;
  uint64_t v1213[2];
  uint64_t v1214;
  std::__shared_weak_count *v1215;
  __int128 v1216;
  unint64_t v1217;
  uint64_t v1218;
  __int16 v1219;
  std::__shared_weak_count_vtbl *v1220;
  uint64_t v1221;
  std::__shared_weak_count *v1222;
  __int128 v1223;
  __int128 v1224;
  __int16 v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  _QWORD v1229[3];
  _QWORD *v1230;
  _QWORD v1231[3];
  _QWORD *v1232;
  _QWORD v1233[3];
  _QWORD *v1234;
  _QWORD v1235[3];
  _QWORD *v1236;
  _QWORD v1237[3];
  _QWORD *v1238;
  _QWORD v1239[3];
  _QWORD *v1240;
  _QWORD v1241[3];
  _QWORD *v1242;
  _QWORD v1243[3];
  _QWORD *v1244;
  _QWORD v1245[3];
  _QWORD *v1246;
  _QWORD v1247[3];
  _QWORD *v1248;
  _QWORD v1249[3];
  _QWORD *v1250;
  _QWORD v1251[3];
  _QWORD *v1252;
  _QWORD v1253[3];
  _QWORD *v1254;
  _QWORD v1255[3];
  _QWORD *v1256;
  _QWORD v1257[3];
  _QWORD *v1258;
  _QWORD v1259[3];
  _QWORD *v1260;
  _QWORD v1261[3];
  _QWORD *v1262;
  _QWORD v1263[3];
  _QWORD *v1264;
  _QWORD v1265[3];
  _QWORD *v1266;
  _QWORD v1267[3];
  _QWORD *v1268;
  _BYTE v1269[48];
  _QWORD v1270[3];
  _QWORD *v1271;
  uint64_t (**v1272)();
  std::__shared_weak_count *v1273;
  uint64_t (***v1274)();
  __int128 v1275;
  __int128 v1276;
  uint64_t v1277;

  v1277 = *MEMORY[0x1E0C80C00];
  v1211 = a2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v1201 = (uint64_t *)((char *)this + 128);
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  v1199 = (uint64_t *)((char *)this + 160);
  v1200 = (uint64_t *)((char *)this + 136);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v1205 = (uint64_t *)((char *)this + 264);
  v1207 = (uint64_t *)((char *)this + 272);
  v1206 = (uint64_t *)((char *)this + 280);
  v1204 = (md::CircleOverlayRenderable::SharedResources **)((char *)this + 288);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v1203 = (md::PolygonOverlayRenderResources ***)((char *)this + 296);
  v1202 = (md::MaskingOverlayRenderable::SharedResources **)((char *)this + 304);
  *((_OWORD *)this + 4) = 0u;
  v1208 = (uint64_t *)((char *)this + 312);
  v1198 = (uint64_t *)((char *)this + 408);
  *((_OWORD *)this + 6) = 0u;
  v1197 = (uint64_t *)((char *)this + 416);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_QWORD *)this + 52) = 0;
  v5 = operator new(0xF8uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E42DF1E8;
  v6 = ggl::BufferData::BufferData((uint64_t)(v5 + 3), 2, 1, 0, 6, 6);
  *((_DWORD *)v5 + 60) = 0;
  v5[3] = &off_1E42B6B88;
  v5[4] = 2;
  v5[28] = &unk_1E42B6BA8;
  v5[29] = "index data";
  v1227 = v6;
  v1228 = (uint64_t)v5;
  v1223 = 0uLL;
  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = v6;
  v8 = v5[12];
  v1223 = v7;
  v1224 = xmmword_19FFB3400;
  v1226 = v8;
  v1225 = 1;
  *(_QWORD *)v8 = 0x200010000;
  *(_DWORD *)(v8 + 8) = 196610;
  v9 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF920;
  v10 = ggl::BufferData::BufferData((uint64_t)&v9[1], 16, 0, 0, 6, 4);
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7560;
  v9[9].__shared_weak_owners_ = (uint64_t)"vertex data";
  v9[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2UVReflection;
  v9[9].__shared_owners_ = (uint64_t)&unk_1E42B7580;
  v1221 = v10;
  v1222 = v9;
  v1216 = 0uLL;
  v11 = 4 * v9[1].__shared_owners_;
  *(_QWORD *)&v12 = 0;
  *((_QWORD *)&v12 + 1) = v10;
  v13 = v9[4].__vftable;
  v1216 = v12;
  v1217 = 0;
  v1218 = v11;
  v1220 = v13;
  v1219 = 1;
  *(_OWORD *)&v13->~__shared_weak_count = xmmword_19FFB34C0;
  *(_OWORD *)&v13->__on_zero_shared = xmmword_19FFB4810;
  *(_OWORD *)&v13->__on_zero_shared_weak = xmmword_19FFB39B0;
  *(_OWORD *)&v13[1].~__shared_weak_count_0 = xmmword_19FFB3980;
  v14 = operator new();
  v1214 = v1221;
  v1215 = v1222;
  if (v1222)
  {
    p_shared_owners = (unint64_t *)&v1222->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)v1228;
  v1213[0] = v1227;
  v1213[1] = v1228;
  if (v1228)
  {
    v18 = (unint64_t *)(v1228 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh(v14, (uint64_t)"UnitQuad", &v1214, v1213);
  v21 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v24 = v1215;
  if (v1215)
  {
    v25 = (unint64_t *)&v1215->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (unint64_t *)operator new();
  v1263[0] = &off_1E42D1900;
  v1264 = v1263;
  v1261[0] = &off_1E42D60C8;
  v1262 = v1261;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v27, (uint64_t)v1263, (uint64_t)v1261);
  v28 = *v1208;
  *v1208 = (uint64_t)v27;
  if (v28)
  {
    v29 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v28);
    MEMORY[0x1A1AF4E00](v29, 0x10A0C40D234DDC7);
  }
  v30 = v1262;
  if (v1262 == v1261)
  {
    v31 = 4;
    v30 = v1261;
  }
  else
  {
    if (!v1262)
      goto LABEL_26;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_26:
  v32 = v1264;
  if (v1264 == v1263)
  {
    v33 = 4;
    v32 = v1263;
    goto LABEL_30;
  }
  if (v1264)
  {
    v33 = 5;
LABEL_30:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  v34 = (uint64_t *)operator new();
  v1259[0] = &off_1E42D1948;
  v1260 = v1259;
  v1257[0] = &off_1E42D7C10;
  v1258 = v1257;
  v34[1] = 0;
  v34[2] = 0;
  *v34 = 0;
  {
    v1127 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1127, "GeoGL", 0xA3D02C1100000005);
  }
  v36 = ggl::Allocator::instance(void)::alloc;
  v34[4] = 0;
  v34[3] = v36;
  v34[5] = 0;
  v34[6] = 0;
  {
    v1128 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1128, "GeoGL", 0xA3D02C1100000005);
  }
  v34[7] = ggl::Allocator::instance(void)::alloc;
  v37 = (uint64_t)v1260;
  if (!v1260)
    goto LABEL_36;
  if (v1260 != v1259)
  {
    v37 = (*(uint64_t (**)(void))(*v1260 + 16))();
LABEL_36:
    v34[11] = v37;
    goto LABEL_38;
  }
  v34[11] = (uint64_t)(v34 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1259[0] + 24))((uint64_t)v1259, v34 + 8);
LABEL_38:
  v38 = (uint64_t)v1258;
  if (!v1258)
  {
LABEL_41:
    v34[15] = v38;
    goto LABEL_43;
  }
  if (v1258 != v1257)
  {
    v38 = (*(uint64_t (**)(void))(*v1258 + 16))();
    goto LABEL_41;
  }
  v34[15] = (uint64_t)(v34 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1257[0] + 24))((uint64_t)v1257, v34 + 12);
LABEL_43:
  v34[16] = 2000;
  v39 = *v34;
  if ((unint64_t)(v34[2] - *v34) > 0x31F)
    goto LABEL_56;
  v40 = v34[1];
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34[3] + 16))(v34[3], 800, 8);
  v42 = v40 - v39;
  v43 = v41 + ((v40 - v39) & 0xFFFFFFFFFFFFFFF8);
  v45 = *v34;
  v44 = v34[1];
  v46 = v44 - *v34;
  if (v44 == *v34)
  {
    v48 = v41 + ((v40 - v39) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_54;
  }
  v47 = v46 - 8;
  if ((unint64_t)(v46 - 8) >= 0x58)
  {
    v48 = v41 + ((v40 - v39) & 0xFFFFFFFFFFFFFFF8);
    if (v44 - ((v42 & 0xFFFFFFFFFFFFFFF8) + v41) >= 0x20)
    {
      v49 = v42 >> 3;
      v50 = (v47 >> 3) + 1;
      v51 = (_OWORD *)(v41 + 8 * v49 - 16);
      v52 = (__int128 *)(v44 - 16);
      v53 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      v48 = v43 - 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      v44 -= 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_53;
    }
  }
  else
  {
    v48 = v41 + ((v40 - v39) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v55 = *(_QWORD *)(v44 - 8);
    v44 -= 8;
    *(_QWORD *)(v48 - 8) = v55;
    v48 -= 8;
  }
  while (v44 != v45);
LABEL_53:
  v44 = *v34;
LABEL_54:
  *v34 = v48;
  v34[1] = v43;
  v56 = v34[2];
  v34[2] = v41 + 800;
  if (v44)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34[3] + 40))(v34[3], v44, v56 - v44);
LABEL_56:
  v57 = v34[4];
  if ((unint64_t)(v34[6] - v57) > 0x31F)
    goto LABEL_69;
  v58 = v34[5];
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34[7] + 16))(v34[7], 800, 8);
  v60 = v58 - v57;
  v61 = v59 + ((v58 - v57) & 0xFFFFFFFFFFFFFFF8);
  v63 = v34[4];
  v62 = v34[5];
  v64 = v62 - v63;
  if (v62 == v63)
  {
    v66 = v59 + ((v58 - v57) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_67;
  }
  v65 = v64 - 8;
  if ((unint64_t)(v64 - 8) >= 0x58)
  {
    v66 = v59 + ((v58 - v57) & 0xFFFFFFFFFFFFFFF8);
    if (v62 - (v60 & 0xFFFFFFFFFFFFFFF8) - v59 >= 0x20)
    {
      v67 = v60 >> 3;
      v68 = (v65 >> 3) + 1;
      v69 = (_OWORD *)(v59 + 8 * v67 - 16);
      v70 = (__int128 *)(v62 - 16);
      v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v72 = *v70;
        *(v69 - 1) = *(v70 - 1);
        *v69 = v72;
        v69 -= 2;
        v70 -= 2;
        v71 -= 4;
      }
      while (v71);
      v66 = v61 - 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
      v62 -= 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
      if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_66;
    }
  }
  else
  {
    v66 = v59 + ((v58 - v57) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v73 = *(_QWORD *)(v62 - 8);
    v62 -= 8;
    *(_QWORD *)(v66 - 8) = v73;
    v66 -= 8;
  }
  while (v62 != v63);
LABEL_66:
  v62 = v34[4];
LABEL_67:
  v34[4] = v66;
  v34[5] = v61;
  v74 = v34[6];
  v34[6] = v59 + 800;
  if (v62)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34[7] + 40))(v34[7], v62, v74 - v62);
LABEL_69:
  v75 = *v1207;
  *v1207 = (uint64_t)v34;
  if (v75)
  {
    v76 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v75);
    MEMORY[0x1A1AF4E00](v76, 0x10A0C40D234DDC7);
  }
  v77 = v1258;
  if (v1258 == v1257)
  {
    v78 = 4;
    v77 = v1257;
  }
  else
  {
    if (!v1258)
      goto LABEL_76;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_76:
  v79 = v1260;
  if (v1260 == v1259)
  {
    v80 = 4;
    v79 = v1259;
    goto LABEL_80;
  }
  if (v1260)
  {
    v80 = 5;
LABEL_80:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  v81 = (uint64_t *)operator new();
  v1255[0] = &off_1E42D1990;
  v1256 = v1255;
  v1253[0] = &off_1E42D7CA0;
  v1254 = v1253;
  v81[1] = 0;
  v81[2] = 0;
  *v81 = 0;
  {
    v1129 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1129, "GeoGL", 0xA3D02C1100000005);
  }
  v83 = ggl::Allocator::instance(void)::alloc;
  v81[4] = 0;
  v81[3] = v83;
  v81[5] = 0;
  v81[6] = 0;
  {
    v1130 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1130, "GeoGL", 0xA3D02C1100000005);
  }
  v81[7] = ggl::Allocator::instance(void)::alloc;
  v84 = (uint64_t)v1256;
  if (!v1256)
    goto LABEL_86;
  if (v1256 != v1255)
  {
    v84 = (*(uint64_t (**)(void))(*v1256 + 16))();
LABEL_86:
    v81[11] = v84;
    goto LABEL_88;
  }
  v81[11] = (uint64_t)(v81 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1255[0] + 24))((uint64_t)v1255, v81 + 8);
LABEL_88:
  v85 = (uint64_t)v1254;
  if (!v1254)
  {
LABEL_91:
    v81[15] = v85;
    goto LABEL_93;
  }
  if (v1254 != v1253)
  {
    v85 = (*(uint64_t (**)(void))(*v1254 + 16))();
    goto LABEL_91;
  }
  v81[15] = (uint64_t)(v81 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1253[0] + 24))((uint64_t)v1253, v81 + 12);
LABEL_93:
  v81[16] = 2000;
  v86 = *v81;
  if ((unint64_t)(v81[2] - *v81) > 0x31F)
    goto LABEL_106;
  v87 = v81[1];
  v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[3] + 16))(v81[3], 800, 8);
  v89 = v87 - v86;
  v90 = v88 + ((v87 - v86) & 0xFFFFFFFFFFFFFFF8);
  v92 = *v81;
  v91 = v81[1];
  v93 = v91 - *v81;
  if (v91 == *v81)
  {
    v95 = v88 + ((v87 - v86) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_104;
  }
  v94 = v93 - 8;
  if ((unint64_t)(v93 - 8) >= 0x58)
  {
    v95 = v88 + ((v87 - v86) & 0xFFFFFFFFFFFFFFF8);
    if (v91 - (v89 & 0xFFFFFFFFFFFFFFF8) - v88 >= 0x20)
    {
      v96 = v89 >> 3;
      v97 = (v94 >> 3) + 1;
      v98 = (_OWORD *)(v88 + 8 * v96 - 16);
      v99 = (__int128 *)(v91 - 16);
      v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *v99;
        *(v98 - 1) = *(v99 - 1);
        *v98 = v101;
        v98 -= 2;
        v99 -= 2;
        v100 -= 4;
      }
      while (v100);
      v95 = v90 - 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      v91 -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_103;
    }
  }
  else
  {
    v95 = v88 + ((v87 - v86) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v102 = *(_QWORD *)(v91 - 8);
    v91 -= 8;
    *(_QWORD *)(v95 - 8) = v102;
    v95 -= 8;
  }
  while (v91 != v92);
LABEL_103:
  v91 = *v81;
LABEL_104:
  *v81 = v95;
  v81[1] = v90;
  v103 = v81[2];
  v81[2] = v88 + 800;
  if (v91)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[3] + 40))(v81[3], v91, v103 - v91);
LABEL_106:
  v104 = v81[4];
  if ((unint64_t)(v81[6] - v104) > 0x31F)
    goto LABEL_119;
  v105 = v81[5];
  v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[7] + 16))(v81[7], 800, 8);
  v107 = v105 - v104;
  v108 = v106 + ((v105 - v104) & 0xFFFFFFFFFFFFFFF8);
  v110 = v81[4];
  v109 = v81[5];
  v111 = v109 - v110;
  if (v109 == v110)
  {
    v113 = v106 + ((v105 - v104) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_117;
  }
  v112 = v111 - 8;
  if ((unint64_t)(v111 - 8) >= 0x58)
  {
    v113 = v106 + ((v105 - v104) & 0xFFFFFFFFFFFFFFF8);
    if (v109 - (v107 & 0xFFFFFFFFFFFFFFF8) - v106 >= 0x20)
    {
      v114 = v107 >> 3;
      v115 = (v112 >> 3) + 1;
      v116 = (_OWORD *)(v106 + 8 * v114 - 16);
      v117 = (__int128 *)(v109 - 16);
      v118 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v119 = *v117;
        *(v116 - 1) = *(v117 - 1);
        *v116 = v119;
        v116 -= 2;
        v117 -= 2;
        v118 -= 4;
      }
      while (v118);
      v113 = v108 - 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      v109 -= 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_116;
    }
  }
  else
  {
    v113 = v106 + ((v105 - v104) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v120 = *(_QWORD *)(v109 - 8);
    v109 -= 8;
    *(_QWORD *)(v113 - 8) = v120;
    v113 -= 8;
  }
  while (v109 != v110);
LABEL_116:
  v109 = v81[4];
LABEL_117:
  v81[4] = v113;
  v81[5] = v108;
  v121 = v81[6];
  v81[6] = v106 + 800;
  if (v109)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[7] + 40))(v81[7], v109, v121 - v109);
LABEL_119:
  v122 = *v1206;
  *v1206 = (uint64_t)v81;
  if (v122)
  {
    v123 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v122);
    MEMORY[0x1A1AF4E00](v123, 0x10A0C40D234DDC7);
  }
  v124 = v1254;
  if (v1254 == v1253)
  {
    v125 = 4;
    v124 = v1253;
  }
  else
  {
    if (!v1254)
      goto LABEL_126;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_126:
  v126 = v1256;
  if (v1256 == v1255)
  {
    v127 = 4;
    v126 = v1255;
    goto LABEL_130;
  }
  if (v1256)
  {
    v127 = 5;
LABEL_130:
    (*(void (**)(void))(*v126 + 8 * v127))();
  }
  v128 = (uint64_t *)operator new();
  v1251[0] = &off_1E427A848;
  v1252 = v1251;
  v1249[0] = &off_1E427D470;
  v1250 = v1249;
  v128[1] = 0;
  v128[2] = 0;
  *v128 = 0;
  {
    v1131 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1131, "GeoGL", 0xA3D02C1100000005);
  }
  v130 = ggl::Allocator::instance(void)::alloc;
  v128[4] = 0;
  v128[3] = v130;
  v128[5] = 0;
  v128[6] = 0;
  {
    v1132 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1132, "GeoGL", 0xA3D02C1100000005);
  }
  v128[7] = ggl::Allocator::instance(void)::alloc;
  v131 = (uint64_t)v1252;
  if (!v1252)
    goto LABEL_136;
  if (v1252 != v1251)
  {
    v131 = (*(uint64_t (**)(void))(*v1252 + 16))();
LABEL_136:
    v128[11] = v131;
    goto LABEL_138;
  }
  v128[11] = (uint64_t)(v128 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1251[0] + 24))((uint64_t)v1251, v128 + 8);
LABEL_138:
  v132 = (uint64_t)v1250;
  if (!v1250)
  {
LABEL_141:
    v128[15] = v132;
    goto LABEL_143;
  }
  if (v1250 != v1249)
  {
    v132 = (*(uint64_t (**)(void))(*v1250 + 16))();
    goto LABEL_141;
  }
  v128[15] = (uint64_t)(v128 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1249[0] + 24))((uint64_t)v1249, v128 + 12);
LABEL_143:
  v128[16] = 2000;
  v133 = *v128;
  if ((unint64_t)(v128[2] - *v128) > 0x31F)
    goto LABEL_156;
  v134 = v128[1];
  v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[3] + 16))(v128[3], 800, 8);
  v136 = v134 - v133;
  v137 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
  v139 = *v128;
  v138 = v128[1];
  v140 = v138 - *v128;
  if (v138 == *v128)
  {
    v142 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_154;
  }
  v141 = v140 - 8;
  if ((unint64_t)(v140 - 8) >= 0x58)
  {
    v142 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
    if (v138 - (v136 & 0xFFFFFFFFFFFFFFF8) - v135 >= 0x20)
    {
      v143 = v136 >> 3;
      v144 = (v141 >> 3) + 1;
      v145 = (_OWORD *)(v135 + 8 * v143 - 16);
      v146 = (__int128 *)(v138 - 16);
      v147 = v144 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v148 = *v146;
        *(v145 - 1) = *(v146 - 1);
        *v145 = v148;
        v145 -= 2;
        v146 -= 2;
        v147 -= 4;
      }
      while (v147);
      v142 = v137 - 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
      v138 -= 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
      if (v144 == (v144 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_153;
    }
  }
  else
  {
    v142 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v149 = *(_QWORD *)(v138 - 8);
    v138 -= 8;
    *(_QWORD *)(v142 - 8) = v149;
    v142 -= 8;
  }
  while (v138 != v139);
LABEL_153:
  v138 = *v128;
LABEL_154:
  *v128 = v142;
  v128[1] = v137;
  v150 = v128[2];
  v128[2] = v135 + 800;
  if (v138)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[3] + 40))(v128[3], v138, v150 - v138);
LABEL_156:
  v151 = v128[4];
  if ((unint64_t)(v128[6] - v151) > 0x31F)
    goto LABEL_169;
  v152 = v128[5];
  v153 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[7] + 16))(v128[7], 800, 8);
  v154 = v152 - v151;
  v155 = v153 + ((v152 - v151) & 0xFFFFFFFFFFFFFFF8);
  v157 = v128[4];
  v156 = v128[5];
  v158 = v156 - v157;
  if (v156 == v157)
  {
    v160 = v153 + ((v152 - v151) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_167;
  }
  v159 = v158 - 8;
  if ((unint64_t)(v158 - 8) >= 0x58)
  {
    v160 = v153 + ((v152 - v151) & 0xFFFFFFFFFFFFFFF8);
    if (v156 - (v154 & 0xFFFFFFFFFFFFFFF8) - v153 >= 0x20)
    {
      v161 = v154 >> 3;
      v162 = (v159 >> 3) + 1;
      v163 = (_OWORD *)(v153 + 8 * v161 - 16);
      v164 = (__int128 *)(v156 - 16);
      v165 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v164;
        *(v163 - 1) = *(v164 - 1);
        *v163 = v166;
        v163 -= 2;
        v164 -= 2;
        v165 -= 4;
      }
      while (v165);
      v160 = v155 - 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      v156 -= 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_166;
    }
  }
  else
  {
    v160 = v153 + ((v152 - v151) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v167 = *(_QWORD *)(v156 - 8);
    v156 -= 8;
    *(_QWORD *)(v160 - 8) = v167;
    v160 -= 8;
  }
  while (v156 != v157);
LABEL_166:
  v156 = v128[4];
LABEL_167:
  v128[4] = v160;
  v128[5] = v155;
  v168 = v128[6];
  v128[6] = v153 + 800;
  if (v156)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[7] + 40))(v128[7], v156, v168 - v156);
LABEL_169:
  v169 = *v1205;
  *v1205 = (uint64_t)v128;
  if (v169)
  {
    v170 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v169);
    MEMORY[0x1A1AF4E00](v170, 0x10A0C40D234DDC7);
  }
  v171 = v1250;
  if (v1250 == v1249)
  {
    v172 = 4;
    v171 = v1249;
  }
  else
  {
    if (!v1250)
      goto LABEL_176;
    v172 = 5;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_176:
  v173 = v1252;
  if (v1252 == v1251)
  {
    v174 = 4;
    v173 = v1251;
  }
  else
  {
    if (!v1252)
      goto LABEL_181;
    v174 = 5;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_181:
  if (*(_BYTE *)(-[VKSharedResources gglDevice](v1211, "gglDevice") + 20))
  {
    v175 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v176 = *(uint64_t (***)())(v175 + 2816);
    v177 = *(std::__shared_weak_count **)(v175 + 2824);
    v1272 = v176;
    v1273 = v177;
    if (v177)
    {
      v178 = (unint64_t *)&v177->__shared_owners_;
      do
        v179 = __ldxr(v178);
      while (__stxr(v179 + 1, v178));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v180 = operator new(0x198uLL);
    v180[1] = 0;
    v180[2] = 0;
    *v180 = &off_1E42E5068;
    v181 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v181;
    v182 = ggl::Textured::SRGBBlendPos2DUVPipelineState::SRGBBlendPos2DUVPipelineState((uint64_t)(v180 + 3), &v1272, (uint64_t)v1269, &v1275, 1, 0, 0);
    v183 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 23) = v182;
    *((_QWORD *)this + 24) = v180;
    if (v183)
    {
      v184 = (unint64_t *)&v183->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    v186 = v1273;
    if (v1273)
    {
      v187 = (unint64_t *)&v1273->__shared_owners_;
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    v189 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v190 = *(uint64_t (***)())(v189 + 2816);
    v191 = *(std::__shared_weak_count **)(v189 + 2824);
    v1272 = v190;
    v1273 = v191;
    if (v191)
    {
      v192 = (unint64_t *)&v191->__shared_owners_;
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v194 = operator new(0x198uLL);
    v194[1] = 0;
    v194[2] = 0;
    *v194 = &off_1E42E5068;
    v195 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v195;
    v196 = ggl::Textured::SRGBBlendPos2DUVPipelineState::SRGBBlendPos2DUVPipelineState((uint64_t)(v194 + 3), &v1272, (uint64_t)v1269, &v1275, 1, 1, 1);
    v197 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    *((_QWORD *)this + 25) = v196;
    *((_QWORD *)this + 26) = v194;
    if (v197)
    {
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    v200 = v1273;
    if (v1273)
    {
      v201 = (unint64_t *)&v1273->__shared_owners_;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    v203 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v204 = *(uint64_t (***)())(v203 + 2840);
    v205 = *(std::__shared_weak_count **)(v203 + 2848);
    v1272 = v204;
    v1273 = v205;
    if (v205)
    {
      v206 = (unint64_t *)&v205->__shared_owners_;
      do
        v207 = __ldxr(v206);
      while (__stxr(v207 + 1, v206));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v208 = operator new(0x198uLL);
    v208[1] = 0;
    v208[2] = 0;
    *v208 = &off_1E42E50D8;
    v209 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v209;
    v210 = ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::SRGBBlendColormappedPos2DUVPipelineState((uint64_t)(v208 + 3), &v1272, (uint64_t)v1269, &v1275, 1, 0, 0);
    v211 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 27) = v210;
    *((_QWORD *)this + 28) = v208;
    if (v211)
    {
      v212 = (unint64_t *)&v211->__shared_owners_;
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    v214 = v1273;
    if (v1273)
    {
      v215 = (unint64_t *)&v1273->__shared_owners_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
    v217 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v218 = *(uint64_t (***)())(v217 + 2840);
    v219 = *(std::__shared_weak_count **)(v217 + 2848);
    v1272 = v218;
    v1273 = v219;
    if (v219)
    {
      v220 = (unint64_t *)&v219->__shared_owners_;
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v222 = operator new(0x198uLL);
    v222[1] = 0;
    v222[2] = 0;
    *v222 = &off_1E42E50D8;
    v223 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v223;
    v224 = ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::SRGBBlendColormappedPos2DUVPipelineState((uint64_t)(v222 + 3), &v1272, (uint64_t)v1269, &v1275, 1, 1, 1);
    v225 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 29) = v224;
    *((_QWORD *)this + 30) = v222;
    if (v225)
    {
      v226 = (unint64_t *)&v225->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    v228 = v1273;
    if (v1273)
    {
      v229 = (unint64_t *)&v1273->__shared_owners_;
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    v231 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v232 = *(uint64_t (***)())(v231 + 2792);
    v233 = *(std::__shared_weak_count **)(v231 + 2800);
    v1272 = v232;
    v1273 = v233;
    if (v233)
    {
      v234 = (unint64_t *)&v233->__shared_owners_;
      do
        v235 = __ldxr(v234);
      while (__stxr(v235 + 1, v234));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v236 = operator new(0x198uLL);
    v236[1] = 0;
    v236[2] = 0;
    *v236 = &off_1E428A2C8;
    v237 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v237;
    v238 = ggl::Textured::SRGBBlendPos4DUVPipelineState::SRGBBlendPos4DUVPipelineState((uint64_t)(v236 + 3), &v1272, (uint64_t)v1269, &v1275, 1);
    v239 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    *((_QWORD *)this + 31) = v238;
    *((_QWORD *)this + 32) = v236;
    if (v239)
    {
      v240 = (unint64_t *)&v239->__shared_owners_;
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
    v242 = v1273;
    if (v1273)
    {
      v243 = (unint64_t *)&v1273->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    v245 = (md::CircleOverlayRenderable::SharedResources *)operator new();
    md::CircleOverlayRenderable::SharedResources::SharedResources(v245, (const ggl::StandardLibrary *)-[VKSharedResources shaderLibrary](v1211, "shaderLibrary"), a3, 1);
    v246 = *v1204;
    *v1204 = v245;
    if (v246)
    {
      v247 = *((_QWORD *)v246 + 4);
      *((_QWORD *)v246 + 4) = 0;
      if (v247)
        (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
      v248 = *((_QWORD *)v246 + 3);
      *((_QWORD *)v246 + 3) = 0;
      if (v248)
        (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
      v249 = *((_QWORD *)v246 + 2);
      *((_QWORD *)v246 + 2) = 0;
      if (v249)
        (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
      v250 = (std::__shared_weak_count *)*((_QWORD *)v246 + 1);
      if (v250)
      {
        v251 = (unint64_t *)&v250->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
      }
      MEMORY[0x1A1AF4E00](v246, 0x20C40769AC3DALL);
    }
    v253 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v254 = *(uint64_t (***)())(v253 + 2936);
    v255 = *(std::__shared_weak_count **)(v253 + 2944);
    v1272 = v254;
    v1273 = v255;
    if (v255)
    {
      v256 = (unint64_t *)&v255->__shared_owners_;
      do
        v257 = __ldxr(v256);
      while (__stxr(v257 + 1, v256));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v258 = operator new(0x198uLL);
    v258[1] = 0;
    v258[2] = 0;
    *v258 = &off_1E428A300;
    v259 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v259;
    v260 = ggl::Textured::PoleTexturedBlendPipelineState::PoleTexturedBlendPipelineState((uint64_t)(v258 + 3), &v1272, (uint64_t)v1269, &v1275, 1);
    v261 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 49) = v260;
    *((_QWORD *)this + 50) = v258;
    if (v261)
    {
      v262 = (unint64_t *)&v261->__shared_owners_;
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 - 1, v262));
      if (!v263)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
    v264 = v1273;
    if (v1273)
    {
      v265 = (unint64_t *)&v1273->__shared_owners_;
      do
        v266 = __ldaxr(v265);
      while (__stlxr(v266 - 1, v265));
      goto LABEL_361;
    }
  }
  else
  {
    v267 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v268 = *(uint64_t (***)())(v267 + 2816);
    v269 = *(std::__shared_weak_count **)(v267 + 2824);
    v1272 = v268;
    v1273 = v269;
    if (v269)
    {
      v270 = (unint64_t *)&v269->__shared_owners_;
      do
        v271 = __ldxr(v270);
      while (__stxr(v271 + 1, v270));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35D0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v272 = operator new(0x198uLL);
    v272[1] = 0;
    v272[2] = 0;
    *v272 = &off_1E42E5068;
    v273 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v273;
    v274 = ggl::Textured::SRGBBlendPos2DUVPipelineState::SRGBBlendPos2DUVPipelineState((uint64_t)(v272 + 3), &v1272, (uint64_t)v1269, &v1275, 0, 0, 0);
    v275 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 23) = v274;
    *((_QWORD *)this + 24) = v272;
    if (v275)
    {
      v276 = (unint64_t *)&v275->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v278 = v1273;
    if (v1273)
    {
      v279 = (unint64_t *)&v1273->__shared_owners_;
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
    v281 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v282 = *(uint64_t (***)())(v281 + 2816);
    v283 = *(std::__shared_weak_count **)(v281 + 2824);
    v1272 = v282;
    v1273 = v283;
    if (v283)
    {
      v284 = (unint64_t *)&v283->__shared_owners_;
      do
        v285 = __ldxr(v284);
      while (__stxr(v285 + 1, v284));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35D0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v286 = operator new(0x198uLL);
    v286[1] = 0;
    v286[2] = 0;
    *v286 = &off_1E42E5068;
    v287 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v287;
    v288 = ggl::Textured::SRGBBlendPos2DUVPipelineState::SRGBBlendPos2DUVPipelineState((uint64_t)(v286 + 3), &v1272, (uint64_t)v1269, &v1275, 0, 1, 1);
    v289 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    *((_QWORD *)this + 25) = v288;
    *((_QWORD *)this + 26) = v286;
    if (v289)
    {
      v290 = (unint64_t *)&v289->__shared_owners_;
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    v292 = v1273;
    if (v1273)
    {
      v293 = (unint64_t *)&v1273->__shared_owners_;
      do
        v294 = __ldaxr(v293);
      while (__stlxr(v294 - 1, v293));
      if (!v294)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
    }
    v295 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v296 = *(uint64_t (***)())(v295 + 2840);
    v297 = *(std::__shared_weak_count **)(v295 + 2848);
    v1272 = v296;
    v1273 = v297;
    if (v297)
    {
      v298 = (unint64_t *)&v297->__shared_owners_;
      do
        v299 = __ldxr(v298);
      while (__stxr(v299 + 1, v298));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35D0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v300 = operator new(0x198uLL);
    v300[1] = 0;
    v300[2] = 0;
    *v300 = &off_1E42E50D8;
    v301 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v301;
    v302 = ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::SRGBBlendColormappedPos2DUVPipelineState((uint64_t)(v300 + 3), &v1272, (uint64_t)v1269, &v1275, 0, 0, 0);
    v303 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 27) = v302;
    *((_QWORD *)this + 28) = v300;
    if (v303)
    {
      v304 = (unint64_t *)&v303->__shared_owners_;
      do
        v305 = __ldaxr(v304);
      while (__stlxr(v305 - 1, v304));
      if (!v305)
      {
        ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
        std::__shared_weak_count::__release_weak(v303);
      }
    }
    v306 = v1273;
    if (v1273)
    {
      v307 = (unint64_t *)&v1273->__shared_owners_;
      do
        v308 = __ldaxr(v307);
      while (__stlxr(v308 - 1, v307));
      if (!v308)
      {
        ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
        std::__shared_weak_count::__release_weak(v306);
      }
    }
    v309 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v310 = *(uint64_t (***)())(v309 + 2840);
    v311 = *(std::__shared_weak_count **)(v309 + 2848);
    v1272 = v310;
    v1273 = v311;
    if (v311)
    {
      v312 = (unint64_t *)&v311->__shared_owners_;
      do
        v313 = __ldxr(v312);
      while (__stxr(v313 + 1, v312));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35D0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v314 = operator new(0x198uLL);
    v314[1] = 0;
    v314[2] = 0;
    *v314 = &off_1E42E50D8;
    v315 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v315;
    v316 = ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::SRGBBlendColormappedPos2DUVPipelineState((uint64_t)(v314 + 3), &v1272, (uint64_t)v1269, &v1275, 0, 1, 1);
    v317 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 29) = v316;
    *((_QWORD *)this + 30) = v314;
    if (v317)
    {
      v318 = (unint64_t *)&v317->__shared_owners_;
      do
        v319 = __ldaxr(v318);
      while (__stlxr(v319 - 1, v318));
      if (!v319)
      {
        ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
        std::__shared_weak_count::__release_weak(v317);
      }
    }
    v320 = v1273;
    if (v1273)
    {
      v321 = (unint64_t *)&v1273->__shared_owners_;
      do
        v322 = __ldaxr(v321);
      while (__stlxr(v322 - 1, v321));
      if (!v322)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    v323 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v324 = *(uint64_t (***)())(v323 + 2792);
    v325 = *(std::__shared_weak_count **)(v323 + 2800);
    v1272 = v324;
    v1273 = v325;
    if (v325)
    {
      v326 = (unint64_t *)&v325->__shared_owners_;
      do
        v327 = __ldxr(v326);
      while (__stxr(v327 + 1, v326));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35D0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v328 = operator new(0x198uLL);
    v328[1] = 0;
    v328[2] = 0;
    *v328 = &off_1E428A2C8;
    v329 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v329;
    v330 = ggl::Textured::SRGBBlendPos4DUVPipelineState::SRGBBlendPos4DUVPipelineState((uint64_t)(v328 + 3), &v1272, (uint64_t)v1269, &v1275, 0);
    v331 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    *((_QWORD *)this + 31) = v330;
    *((_QWORD *)this + 32) = v328;
    if (v331)
    {
      v332 = (unint64_t *)&v331->__shared_owners_;
      do
        v333 = __ldaxr(v332);
      while (__stlxr(v333 - 1, v332));
      if (!v333)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
    }
    v334 = v1273;
    if (v1273)
    {
      v335 = (unint64_t *)&v1273->__shared_owners_;
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 - 1, v335));
      if (!v336)
      {
        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
        std::__shared_weak_count::__release_weak(v334);
      }
    }
    v337 = (md::CircleOverlayRenderable::SharedResources *)operator new();
    md::CircleOverlayRenderable::SharedResources::SharedResources(v337, (const ggl::StandardLibrary *)-[VKSharedResources shaderLibrary](v1211, "shaderLibrary"), a3, 0);
    v338 = *v1204;
    *v1204 = v337;
    if (v338)
    {
      v339 = *((_QWORD *)v338 + 4);
      *((_QWORD *)v338 + 4) = 0;
      if (v339)
        (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
      v340 = *((_QWORD *)v338 + 3);
      *((_QWORD *)v338 + 3) = 0;
      if (v340)
        (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
      v341 = *((_QWORD *)v338 + 2);
      *((_QWORD *)v338 + 2) = 0;
      if (v341)
        (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
      v342 = (std::__shared_weak_count *)*((_QWORD *)v338 + 1);
      if (v342)
      {
        v343 = (unint64_t *)&v342->__shared_owners_;
        do
          v344 = __ldaxr(v343);
        while (__stlxr(v344 - 1, v343));
        if (!v344)
        {
          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
          std::__shared_weak_count::__release_weak(v342);
        }
      }
      MEMORY[0x1A1AF4E00](v338, 0x20C40769AC3DALL);
    }
    v345 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1211, "shaderLibrary") + 80);
    v346 = *(uint64_t (***)())(v345 + 2936);
    v347 = *(std::__shared_weak_count **)(v345 + 2944);
    v1272 = v346;
    v1273 = v347;
    if (v347)
    {
      v348 = (unint64_t *)&v347->__shared_owners_;
      do
        v349 = __ldxr(v348);
      while (__stxr(v349 + 1, v348));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35D0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v350 = operator new(0x198uLL);
    v350[1] = 0;
    v350[2] = 0;
    *v350 = &off_1E428A300;
    v351 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v351;
    v352 = ggl::Textured::PoleTexturedBlendPipelineState::PoleTexturedBlendPipelineState((uint64_t)(v350 + 3), &v1272, (uint64_t)v1269, &v1275, 0);
    v353 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 49) = v352;
    *((_QWORD *)this + 50) = v350;
    if (v353)
    {
      v354 = (unint64_t *)&v353->__shared_owners_;
      do
        v355 = __ldaxr(v354);
      while (__stlxr(v355 - 1, v354));
      if (!v355)
      {
        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
        std::__shared_weak_count::__release_weak(v353);
      }
    }
    v264 = v1273;
    if (v1273)
    {
      v356 = (unint64_t *)&v1273->__shared_owners_;
      do
        v266 = __ldaxr(v356);
      while (__stlxr(v266 - 1, v356));
LABEL_361:
      if (!v266)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
    }
  }
  v357 = (md::PolygonOverlayRenderResources **)operator new();
  v1209 = v1211;
  v358 = operator new();
  v359 = v1209;
  *(_OWORD *)v358 = 0u;
  *(_OWORD *)(v358 + 16) = 0u;
  *(_OWORD *)(v358 + 32) = 0u;
  *(_OWORD *)(v358 + 48) = 0u;
  *(_OWORD *)(v358 + 64) = 0u;
  *(_OWORD *)(v358 + 80) = 0u;
  *(_OWORD *)(v358 + 96) = 0u;
  *(_OWORD *)(v358 + 112) = 0u;
  *(_QWORD *)(v358 + 128) = 0;
  v360 = -[VKSharedResources shaderLibrary](v359, "shaderLibrary");
  v361 = *(_QWORD *)(v360 + 80);
  v362 = *(std::__shared_weak_count **)(v361 + 1480);
  v1272 = *(uint64_t (***)())(v361 + 1472);
  v1273 = v362;
  if (v362)
  {
    v363 = (unint64_t *)&v362->__shared_owners_;
    do
      v364 = __ldxr(v363);
    while (__stxr(v364 + 1, v363));
  }
  memset(&v1269[20], 0, 24);
  v1269[0] = 0;
  *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
  v1269[44] = 15;
  v365 = -[VKSharedResources gglDevice](v359, "gglDevice");
  v366 = operator new(0x198uLL);
  v366[1] = 0;
  v366[2] = 0;
  *v366 = &off_1E42DF2C8;
  v367 = *(_OWORD *)&a3->colorFormatsCount;
  v1275 = *(_OWORD *)a3->colorFormats;
  v1276 = v367;
  v368 = ggl::PolygonOverlay::FillPipelineState::FillPipelineState((uint64_t)(v366 + 3), &v1272, (uint64_t)v1269, &v1275, *(_BYTE *)(v365 + 20));
  v369 = *(std::__shared_weak_count **)(v358 + 8);
  *(_QWORD *)v358 = v368;
  *(_QWORD *)(v358 + 8) = v366;
  if (v369)
  {
    v370 = (unint64_t *)&v369->__shared_owners_;
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  v372 = v1273;
  if (v1273)
  {
    v373 = (unint64_t *)&v1273->__shared_owners_;
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  if (*(_BYTE *)(-[VKSharedResources gglDevice](v359, "gglDevice") + 20))
  {
    v375 = *(_QWORD *)(v360 + 80);
    v376 = *(std::__shared_weak_count **)(v375 + 1480);
    v1272 = *(uint64_t (***)())(v375 + 1472);
    v1273 = v376;
    if (v376)
    {
      v377 = (unint64_t *)&v376->__shared_owners_;
      do
        v378 = __ldxr(v377);
      while (__stxr(v378 + 1, v377));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v379 = operator new(0x198uLL);
    v379[1] = 0;
    v379[2] = 0;
    *v379 = &off_1E42DF2C8;
    v380 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v380;
    v381 = ggl::PolygonOverlay::FillPipelineState::FillPipelineState((uint64_t)(v379 + 3), &v1272, (uint64_t)v1269, &v1275, 1);
    v382 = *(std::__shared_weak_count **)(v358 + 24);
    *(_QWORD *)(v358 + 16) = v381;
    *(_QWORD *)(v358 + 24) = v379;
    if (v382)
    {
      v383 = (unint64_t *)&v382->__shared_owners_;
      do
        v384 = __ldaxr(v383);
      while (__stlxr(v384 - 1, v383));
      if (!v384)
      {
        ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
        std::__shared_weak_count::__release_weak(v382);
      }
    }
    v385 = v1273;
    if (v1273)
    {
      v386 = (unint64_t *)&v1273->__shared_owners_;
      do
        v387 = __ldaxr(v386);
      while (__stlxr(v387 - 1, v386));
      if (!v387)
      {
        ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
        std::__shared_weak_count::__release_weak(v385);
      }
    }
    v388 = *(_QWORD *)(v360 + 80);
    v389 = *(std::__shared_weak_count **)(v388 + 1504);
    v1272 = *(uint64_t (***)())(v388 + 1496);
    v1273 = v389;
    if (v389)
    {
      v390 = (unint64_t *)&v389->__shared_owners_;
      do
        v391 = __ldxr(v390);
      while (__stxr(v391 + 1, v390));
    }
    memset(&v1269[20], 0, 24);
    v1269[0] = 0;
    *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
    v1269[44] = 15;
    v392 = operator new(0x198uLL);
    v392[1] = 0;
    v392[2] = 0;
    *v392 = &off_1E42DF300;
    v393 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v393;
    v394 = ggl::PolygonOverlay::AntialiasPipelineState::AntialiasPipelineState((uint64_t)(v392 + 3), &v1272, (uint64_t)v1269, &v1275, 1);
    v395 = *(std::__shared_weak_count **)(v358 + 40);
    *(_QWORD *)(v358 + 32) = v394;
    *(_QWORD *)(v358 + 40) = v392;
    if (v395)
    {
      v396 = (unint64_t *)&v395->__shared_owners_;
      do
        v397 = __ldaxr(v396);
      while (__stlxr(v397 - 1, v396));
      if (!v397)
      {
        ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
        std::__shared_weak_count::__release_weak(v395);
      }
    }
    v398 = v1273;
    if (v1273)
    {
      v399 = (unint64_t *)&v1273->__shared_owners_;
      do
        v400 = __ldaxr(v399);
      while (__stlxr(v400 - 1, v399));
      goto LABEL_426;
    }
  }
  else
  {
    v401 = *(_QWORD *)(v360 + 80);
    v402 = *(std::__shared_weak_count **)(v401 + 1480);
    v1272 = *(uint64_t (***)())(v401 + 1472);
    v1273 = v402;
    if (v402)
    {
      v403 = (unint64_t *)&v402->__shared_owners_;
      do
        v404 = __ldxr(v403);
      while (__stxr(v404 + 1, v403));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v405 = operator new(0x198uLL);
    v405[1] = 0;
    v405[2] = 0;
    *v405 = &off_1E42DF2C8;
    v406 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v406;
    v407 = ggl::PolygonOverlay::FillPipelineState::FillPipelineState((uint64_t)(v405 + 3), &v1272, (uint64_t)v1269, &v1275, 0);
    v408 = *(std::__shared_weak_count **)(v358 + 24);
    *(_QWORD *)(v358 + 16) = v407;
    *(_QWORD *)(v358 + 24) = v405;
    if (v408)
    {
      v409 = (unint64_t *)&v408->__shared_owners_;
      do
        v410 = __ldaxr(v409);
      while (__stlxr(v410 - 1, v409));
      if (!v410)
      {
        ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
        std::__shared_weak_count::__release_weak(v408);
      }
    }
    v411 = v1273;
    if (v1273)
    {
      v412 = (unint64_t *)&v1273->__shared_owners_;
      do
        v413 = __ldaxr(v412);
      while (__stlxr(v413 - 1, v412));
      if (!v413)
      {
        ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
        std::__shared_weak_count::__release_weak(v411);
      }
    }
    v414 = *(_QWORD *)(v360 + 80);
    v415 = *(std::__shared_weak_count **)(v414 + 1504);
    v1272 = *(uint64_t (***)())(v414 + 1496);
    v1273 = v415;
    if (v415)
    {
      v416 = (unint64_t *)&v415->__shared_owners_;
      do
        v417 = __ldxr(v416);
      while (__stxr(v417 + 1, v416));
    }
    memset(&v1269[24], 0, 20);
    v1269[0] = 1;
    *(_OWORD *)&v1269[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1269[20] = 7;
    v1269[44] = 15;
    v418 = operator new(0x198uLL);
    v418[1] = 0;
    v418[2] = 0;
    *v418 = &off_1E42DF300;
    v419 = *(_OWORD *)&a3->colorFormatsCount;
    v1275 = *(_OWORD *)a3->colorFormats;
    v1276 = v419;
    v420 = ggl::PolygonOverlay::AntialiasPipelineState::AntialiasPipelineState((uint64_t)(v418 + 3), &v1272, (uint64_t)v1269, &v1275, 0);
    v421 = *(std::__shared_weak_count **)(v358 + 40);
    *(_QWORD *)(v358 + 32) = v420;
    *(_QWORD *)(v358 + 40) = v418;
    if (v421)
    {
      v422 = (unint64_t *)&v421->__shared_owners_;
      do
        v423 = __ldaxr(v422);
      while (__stlxr(v423 - 1, v422));
      if (!v423)
      {
        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
        std::__shared_weak_count::__release_weak(v421);
      }
    }
    v398 = v1273;
    if (v1273)
    {
      v424 = (unint64_t *)&v1273->__shared_owners_;
      do
        v400 = __ldaxr(v424);
      while (__stlxr(v400 - 1, v424));
LABEL_426:
      if (!v400)
      {
        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
        std::__shared_weak_count::__release_weak(v398);
      }
    }
  }
  v425 = (unint64_t *)operator new();
  *(_QWORD *)v1269 = &off_1E42D35F8;
  *(_QWORD *)&v1269[8] = v358;
  *(_QWORD *)&v1269[24] = v1269;
  *(_QWORD *)&v1275 = &off_1E42D63E0;
  *((_QWORD *)&v1276 + 1) = &v1275;
  ggl::FragmentedPool<ggl::PolygonOverlay::FillPipelineSetup>::FragmentedPool(v425, (uint64_t)v1269, (uint64_t)&v1275);
  v426 = *(_QWORD *)(v358 + 48);
  *(_QWORD *)(v358 + 48) = v425;
  if (v426)
  {
    v427 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v426);
    MEMORY[0x1A1AF4E00](v427, 0x10A0C40D234DDC7);
  }
  v428 = (__int128 *)*((_QWORD *)&v1276 + 1);
  if (*((__int128 **)&v1276 + 1) == &v1275)
  {
    v429 = 4;
    v428 = &v1275;
  }
  else
  {
    if (!*((_QWORD *)&v1276 + 1))
      goto LABEL_435;
    v429 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v428 + 8 * v429))();
LABEL_435:
  v430 = *(_QWORD **)&v1269[24];
  if (*(_BYTE **)&v1269[24] == v1269)
  {
    v431 = 4;
    v430 = v1269;
  }
  else
  {
    if (!*(_QWORD *)&v1269[24])
      goto LABEL_440;
    v431 = 5;
  }
  (*(void (**)(void))(*v430 + 8 * v431))();
LABEL_440:
  v432 = (unint64_t *)operator new();
  v1272 = &off_1E42D3640;
  v1273 = (std::__shared_weak_count *)v358;
  v1274 = &v1272;
  v1270[0] = &off_1E42D63E0;
  v1271 = v1270;
  ggl::FragmentedPool<ggl::PolygonOverlay::FillPipelineSetup>::FragmentedPool(v432, (uint64_t)&v1272, (uint64_t)v1270);
  v433 = *(_QWORD *)(v358 + 56);
  *(_QWORD *)(v358 + 56) = v432;
  if (v433)
  {
    v434 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v433);
    MEMORY[0x1A1AF4E00](v434, 0x10A0C40D234DDC7);
  }
  v435 = v1271;
  if (v1271 == v1270)
  {
    v436 = 4;
    v435 = v1270;
  }
  else
  {
    if (!v1271)
      goto LABEL_447;
    v436 = 5;
  }
  (*(void (**)(void))(*v435 + 8 * v436))();
LABEL_447:
  v437 = v1274;
  if (v1274 == &v1272)
  {
    v438 = 4;
    v437 = &v1272;
    goto LABEL_451;
  }
  if (v1274)
  {
    v438 = 5;
LABEL_451:
    (*v437)[v438]();
  }
  v439 = (uint64_t *)operator new();
  v1267[0] = &off_1E42D3688;
  v1267[1] = v358;
  v1268 = v1267;
  v1265[0] = &off_1E42D6428;
  v1266 = v1265;
  v439[1] = 0;
  v439[2] = 0;
  *v439 = 0;
  {
    v1133 = operator new();
    *(_QWORD *)(v1133 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1133 + 24) = "GeoGL";
    *(_OWORD *)(v1133 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1133 = &off_1E42B5668;
    *(_QWORD *)(v1133 + 8) = "GeoGL";
    *(_OWORD *)(v1133 + 72) = 0u;
    *(_OWORD *)(v1133 + 88) = 0u;
    *(_OWORD *)(v1133 + 104) = 0u;
    *(_OWORD *)(v1133 + 120) = 0u;
    *(_OWORD *)(v1133 + 136) = 0u;
    *(_OWORD *)(v1133 + 152) = 0u;
    *(_OWORD *)(v1133 + 168) = 0u;
    *(_OWORD *)(v1133 + 184) = 0u;
    *(_OWORD *)(v1133 + 200) = 0u;
    *(_OWORD *)(v1133 + 216) = 0u;
    *(_OWORD *)(v1133 + 232) = 0u;
    *(_QWORD *)(v1133 + 248) = 0;
    *(_OWORD *)(v1133 + 56) = 0u;
    v1134 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1133 + 56), 0);
    if ((_DWORD)v1134)
      geo::read_write_lock::logFailure(v1134, (uint64_t)"initialization", v1135);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v1133 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v1133 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1133;
  }
  v441 = ggl::Allocator::instance(void)::alloc;
  v439[4] = 0;
  v439[3] = v441;
  v439[5] = 0;
  v439[6] = 0;
  {
    v1137 = operator new();
    *(_QWORD *)(v1137 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1137 + 24) = "GeoGL";
    *(_OWORD *)(v1137 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1137 = &off_1E42B5668;
    *(_QWORD *)(v1137 + 8) = "GeoGL";
    *(_OWORD *)(v1137 + 72) = 0u;
    *(_OWORD *)(v1137 + 88) = 0u;
    *(_OWORD *)(v1137 + 104) = 0u;
    *(_OWORD *)(v1137 + 120) = 0u;
    *(_OWORD *)(v1137 + 136) = 0u;
    *(_OWORD *)(v1137 + 152) = 0u;
    *(_OWORD *)(v1137 + 168) = 0u;
    *(_OWORD *)(v1137 + 184) = 0u;
    *(_OWORD *)(v1137 + 200) = 0u;
    *(_OWORD *)(v1137 + 216) = 0u;
    *(_OWORD *)(v1137 + 232) = 0u;
    *(_QWORD *)(v1137 + 248) = 0;
    *(_OWORD *)(v1137 + 56) = 0u;
    v1138 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1137 + 56), 0);
    if ((_DWORD)v1138)
      geo::read_write_lock::logFailure(v1138, (uint64_t)"initialization", v1139);
    v1140 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1137 + 48) = v1140;
    malloc_set_zone_name(v1140, "GeoGL");
    *(_QWORD *)(v1137 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1137;
  }
  v439[7] = ggl::Allocator::instance(void)::alloc;
  v442 = (uint64_t)v1268;
  if (!v1268)
    goto LABEL_457;
  if (v1268 != v1267)
  {
    v442 = (*(uint64_t (**)(void))(*v1268 + 16))();
LABEL_457:
    v439[11] = v442;
    goto LABEL_459;
  }
  v439[11] = (uint64_t)(v439 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1267[0] + 24))((uint64_t)v1267, v439 + 8);
LABEL_459:
  v443 = (uint64_t)v1266;
  if (!v1266)
  {
LABEL_462:
    v439[15] = v443;
    goto LABEL_464;
  }
  if (v1266 != v1265)
  {
    v443 = (*(uint64_t (**)(void))(*v1266 + 16))();
    goto LABEL_462;
  }
  v439[15] = (uint64_t)(v439 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1265[0] + 24))((uint64_t)v1265, v439 + 12);
LABEL_464:
  v439[16] = 2000;
  v444 = *v439;
  if ((unint64_t)(v439[2] - *v439) > 0x31F)
    goto LABEL_477;
  v445 = v439[1];
  v446 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v439[3] + 16))(v439[3], 800, 8);
  v447 = v445 - v444;
  v448 = v446 + ((v445 - v444) & 0xFFFFFFFFFFFFFFF8);
  v450 = *v439;
  v449 = v439[1];
  v451 = v449 - *v439;
  if (v449 == *v439)
  {
    v453 = v446 + ((v445 - v444) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_475;
  }
  v452 = v451 - 8;
  if ((unint64_t)(v451 - 8) >= 0x58)
  {
    v453 = v446 + ((v445 - v444) & 0xFFFFFFFFFFFFFFF8);
    if (v449 - (v447 & 0xFFFFFFFFFFFFFFF8) - v446 >= 0x20)
    {
      v454 = v447 >> 3;
      v455 = (v452 >> 3) + 1;
      v456 = (_OWORD *)(v446 + 8 * v454 - 16);
      v457 = (__int128 *)(v449 - 16);
      v458 = v455 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v459 = *v457;
        *(v456 - 1) = *(v457 - 1);
        *v456 = v459;
        v456 -= 2;
        v457 -= 2;
        v458 -= 4;
      }
      while (v458);
      v453 = v448 - 8 * (v455 & 0x3FFFFFFFFFFFFFFCLL);
      v449 -= 8 * (v455 & 0x3FFFFFFFFFFFFFFCLL);
      if (v455 == (v455 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_474;
    }
  }
  else
  {
    v453 = v446 + ((v445 - v444) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v460 = *(_QWORD *)(v449 - 8);
    v449 -= 8;
    *(_QWORD *)(v453 - 8) = v460;
    v453 -= 8;
  }
  while (v449 != v450);
LABEL_474:
  v449 = *v439;
LABEL_475:
  *v439 = v453;
  v439[1] = v448;
  v461 = v439[2];
  v439[2] = v446 + 800;
  if (v449)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v439[3] + 40))(v439[3], v449, v461 - v449);
LABEL_477:
  v462 = v439[4];
  if ((unint64_t)(v439[6] - v462) > 0x31F)
    goto LABEL_490;
  v463 = v439[5];
  v464 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v439[7] + 16))(v439[7], 800, 8);
  v465 = v463 - v462;
  v466 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
  v468 = v439[4];
  v467 = v439[5];
  v469 = v467 - v468;
  if (v467 == v468)
  {
    v471 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_488;
  }
  v470 = v469 - 8;
  if ((unint64_t)(v469 - 8) >= 0x58)
  {
    v471 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
    if (v467 - (v465 & 0xFFFFFFFFFFFFFFF8) - v464 >= 0x20)
    {
      v472 = v465 >> 3;
      v473 = (v470 >> 3) + 1;
      v474 = (_OWORD *)(v464 + 8 * v472 - 16);
      v475 = (__int128 *)(v467 - 16);
      v476 = v473 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v477 = *v475;
        *(v474 - 1) = *(v475 - 1);
        *v474 = v477;
        v474 -= 2;
        v475 -= 2;
        v476 -= 4;
      }
      while (v476);
      v471 = v466 - 8 * (v473 & 0x3FFFFFFFFFFFFFFCLL);
      v467 -= 8 * (v473 & 0x3FFFFFFFFFFFFFFCLL);
      if (v473 == (v473 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_487;
    }
  }
  else
  {
    v471 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v478 = *(_QWORD *)(v467 - 8);
    v467 -= 8;
    *(_QWORD *)(v471 - 8) = v478;
    v471 -= 8;
  }
  while (v467 != v468);
LABEL_487:
  v467 = v439[4];
LABEL_488:
  v439[4] = v471;
  v439[5] = v466;
  v479 = v439[6];
  v439[6] = v464 + 800;
  if (v467)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v439[7] + 40))(v439[7], v467, v479 - v467);
LABEL_490:
  v480 = *(_QWORD *)(v358 + 64);
  *(_QWORD *)(v358 + 64) = v439;
  if (v480)
  {
    v481 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v480);
    MEMORY[0x1A1AF4E00](v481, 0x10A0C40D234DDC7);
  }
  v482 = v1266;
  if (v1266 == v1265)
  {
    v483 = 4;
    v482 = v1265;
  }
  else
  {
    if (!v1266)
      goto LABEL_497;
    v483 = 5;
  }
  (*(void (**)(void))(*v482 + 8 * v483))();
LABEL_497:
  v484 = v1268;
  if (v1268 == v1267)
  {
    v485 = 4;
    v484 = v1267;
  }
  else
  {
    if (!v1268)
      goto LABEL_502;
    v485 = 5;
  }
  (*(void (**)(void))(*v484 + 8 * v485))();
LABEL_502:
  v486 = operator new();
  *(_DWORD *)(v486 + 32) = 0;
  *(_QWORD *)(v486 + 16) = 0;
  *(_QWORD *)(v486 + 24) = 0;
  *(_QWORD *)v486 = &off_1E42B5DE8;
  *(_QWORD *)(v486 + 8) = 0;
  *(_QWORD *)(v486 + 36) = 66305;
  *(_DWORD *)(v486 + 44) = 0;
  *(_QWORD *)(v486 + 48) = 0x7F0000000600;
  *(_WORD *)(v486 + 56) = 0;
  *(_BYTE *)(v486 + 58) = 3;
  *(_QWORD *)(v486 + 67) = 0;
  *(_QWORD *)(v486 + 59) = 0;
  *(_BYTE *)(v486 + 75) = 0;
  *(_QWORD *)(v486 + 132) = 0;
  *(_QWORD *)(v486 + 124) = 0;
  *(_WORD *)(v486 + 188) = 257;
  *(_QWORD *)(v486 + 192) = 0;
  *(_QWORD *)(v486 + 200) = 0;
  *(_BYTE *)(v486 + 208) = 0;
  v487 = *(_QWORD *)(v358 + 72);
  *(_QWORD *)(v358 + 72) = v486;
  if (v487)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v487 + 8))(v487);
    v486 = *(_QWORD *)(v358 + 72);
  }
  *(_BYTE *)(v486 + 208) = 1;
  *(_BYTE *)(v486 + 58) = 3;
  *(_BYTE *)(v486 + 56) = 1;
  v488 = operator new();
  *(_DWORD *)(v488 + 32) = 0;
  *(_QWORD *)(v488 + 16) = 0;
  *(_QWORD *)(v488 + 24) = 0;
  *(_QWORD *)v488 = &off_1E42B5DE8;
  *(_QWORD *)(v488 + 8) = 0;
  *(_QWORD *)(v488 + 36) = 66304;
  *(_DWORD *)(v488 + 44) = 0;
  *(_QWORD *)(v488 + 48) = 0x7F0000000600;
  *(_WORD *)(v488 + 56) = 0;
  *(_BYTE *)(v488 + 58) = 3;
  *(_QWORD *)(v488 + 67) = 0;
  *(_QWORD *)(v488 + 59) = 0;
  *(_BYTE *)(v488 + 75) = 0;
  *(_QWORD *)(v488 + 132) = 0;
  *(_QWORD *)(v488 + 124) = 0;
  *(_WORD *)(v488 + 188) = 257;
  *(_QWORD *)(v488 + 192) = 0;
  *(_QWORD *)(v488 + 200) = 0;
  *(_BYTE *)(v488 + 208) = 0;
  v489 = *(_QWORD *)(v358 + 80);
  *(_QWORD *)(v358 + 80) = v488;
  if (v489)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v489 + 8))(v489);
    v488 = *(_QWORD *)(v358 + 80);
  }
  *(_BYTE *)(v488 + 208) = 1;
  *(_BYTE *)(v488 + 58) = 3;
  *(_BYTE *)(v488 + 56) = 1;
  v490 = operator new();
  *(_DWORD *)(v490 + 32) = 0;
  *(_QWORD *)(v490 + 16) = 0;
  *(_QWORD *)(v490 + 24) = 0;
  *(_QWORD *)v490 = &off_1E42B5DE8;
  *(_QWORD *)(v490 + 8) = 0;
  *(_QWORD *)(v490 + 36) = 66305;
  *(_DWORD *)(v490 + 44) = 0;
  *(_QWORD *)(v490 + 48) = 0x7F0200000600;
  *(_WORD *)(v490 + 56) = 0;
  *(_BYTE *)(v490 + 58) = 3;
  *(_QWORD *)(v490 + 67) = 0;
  *(_QWORD *)(v490 + 59) = 0;
  *(_BYTE *)(v490 + 75) = 0;
  *(_QWORD *)(v490 + 132) = 0;
  *(_QWORD *)(v490 + 124) = 0;
  *(_WORD *)(v490 + 188) = 257;
  *(_QWORD *)(v490 + 192) = 0;
  *(_QWORD *)(v490 + 200) = 0;
  *(_BYTE *)(v490 + 208) = 0;
  v491 = *(_QWORD *)(v358 + 88);
  *(_QWORD *)(v358 + 88) = v490;
  if (v491)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v491 + 8))(v491);
    v490 = *(_QWORD *)(v358 + 88);
  }
  *(_BYTE *)(v490 + 208) = 1;
  *(_BYTE *)(v490 + 58) = 3;
  *(_BYTE *)(v490 + 56) = 1;
  v492 = operator new();
  *(_DWORD *)(v492 + 32) = 0;
  *(_QWORD *)(v492 + 16) = 0;
  *(_QWORD *)(v492 + 24) = 0;
  *(_QWORD *)v492 = &off_1E42B5DE8;
  *(_QWORD *)(v492 + 8) = 0;
  *(_QWORD *)(v492 + 36) = 66304;
  *(_DWORD *)(v492 + 44) = 0;
  *(_QWORD *)(v492 + 48) = 0x7F0200000600;
  *(_WORD *)(v492 + 56) = 0;
  *(_BYTE *)(v492 + 58) = 3;
  *(_QWORD *)(v492 + 67) = 0;
  *(_QWORD *)(v492 + 59) = 0;
  *(_BYTE *)(v492 + 75) = 0;
  *(_QWORD *)(v492 + 132) = 0;
  *(_QWORD *)(v492 + 124) = 0;
  *(_WORD *)(v492 + 188) = 257;
  *(_QWORD *)(v492 + 192) = 0;
  *(_QWORD *)(v492 + 200) = 0;
  *(_BYTE *)(v492 + 208) = 0;
  v493 = *(_QWORD *)(v358 + 96);
  *(_QWORD *)(v358 + 96) = v492;
  if (v493)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v493 + 8))(v493);
    v492 = *(_QWORD *)(v358 + 96);
  }
  *(_BYTE *)(v492 + 208) = 1;
  *(_BYTE *)(v492 + 58) = 3;
  *(_BYTE *)(v492 + 56) = 1;
  v494 = operator new();
  *(_DWORD *)(v494 + 32) = 0;
  *(_QWORD *)(v494 + 16) = 0;
  *(_QWORD *)(v494 + 24) = 0;
  *(_QWORD *)v494 = &off_1E42B5DE8;
  *(_QWORD *)(v494 + 8) = 0;
  *(_QWORD *)(v494 + 36) = 66305;
  *(_DWORD *)(v494 + 44) = 0;
  *(_QWORD *)(v494 + 48) = 0x7F0000000600;
  *(_WORD *)(v494 + 56) = 0;
  *(_BYTE *)(v494 + 58) = 3;
  *(_QWORD *)(v494 + 67) = 0;
  *(_QWORD *)(v494 + 59) = 0;
  *(_BYTE *)(v494 + 75) = 0;
  *(_QWORD *)(v494 + 132) = 0;
  *(_QWORD *)(v494 + 124) = 0;
  *(_WORD *)(v494 + 188) = 257;
  *(_QWORD *)(v494 + 192) = 0;
  *(_QWORD *)(v494 + 200) = 0;
  *(_BYTE *)(v494 + 208) = 0;
  v495 = *(_QWORD *)(v358 + 104);
  *(_QWORD *)(v358 + 104) = v494;
  if (v495)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v495 + 8))(v495);
    v494 = *(_QWORD *)(v358 + 104);
  }
  *(_BYTE *)(v494 + 208) = 1;
  *(_BYTE *)(v494 + 58) = 3;
  *(_BYTE *)(v494 + 56) = 0;
  v496 = operator new();
  *(_DWORD *)(v496 + 32) = 0;
  *(_QWORD *)(v496 + 16) = 0;
  *(_QWORD *)(v496 + 24) = 0;
  *(_QWORD *)v496 = &off_1E42B5DE8;
  *(_QWORD *)(v496 + 8) = 0;
  *(_QWORD *)(v496 + 36) = 66305;
  *(_DWORD *)(v496 + 44) = 0;
  *(_QWORD *)(v496 + 48) = 0x7F0000000600;
  *(_WORD *)(v496 + 56) = 0;
  *(_BYTE *)(v496 + 58) = 3;
  *(_QWORD *)(v496 + 67) = 0;
  *(_QWORD *)(v496 + 59) = 0;
  *(_BYTE *)(v496 + 75) = 0;
  *(_QWORD *)(v496 + 132) = 0;
  *(_QWORD *)(v496 + 124) = 0;
  *(_WORD *)(v496 + 188) = 257;
  *(_QWORD *)(v496 + 192) = 0;
  *(_QWORD *)(v496 + 200) = 0;
  *(_BYTE *)(v496 + 208) = 0;
  v497 = *(_QWORD *)(v358 + 112);
  *(_QWORD *)(v358 + 112) = v496;
  if (v497)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v497 + 8))(v497);
    v496 = *(_QWORD *)(v358 + 112);
  }
  *(_BYTE *)(v496 + 208) = 1;
  *(_BYTE *)(v496 + 58) = 3;
  *(_BYTE *)(v496 + 56) = 0;
  v498 = operator new();
  *(_DWORD *)(v498 + 32) = 0;
  *(_QWORD *)(v498 + 16) = 0;
  *(_QWORD *)(v498 + 24) = 0;
  *(_QWORD *)v498 = &off_1E42B5DE8;
  *(_QWORD *)(v498 + 8) = 0;
  *(_QWORD *)(v498 + 36) = 66560;
  *(_DWORD *)(v498 + 44) = 1056964608;
  *(_QWORD *)(v498 + 48) = 0x7F0000000600;
  *(_WORD *)(v498 + 56) = 0;
  *(_BYTE *)(v498 + 58) = 3;
  *(_QWORD *)(v498 + 67) = 0;
  *(_QWORD *)(v498 + 59) = 0;
  *(_BYTE *)(v498 + 75) = 0;
  *(_QWORD *)(v498 + 132) = 0;
  *(_QWORD *)(v498 + 124) = 0;
  *(_WORD *)(v498 + 188) = 257;
  *(_QWORD *)(v498 + 192) = 0;
  *(_QWORD *)(v498 + 200) = 0;
  *(_BYTE *)(v498 + 208) = 0;
  v499 = *(_QWORD *)(v358 + 120);
  *(_QWORD *)(v358 + 120) = v498;
  if (v499)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
    v498 = *(_QWORD *)(v358 + 120);
  }
  *(_BYTE *)(v498 + 208) = 1;
  v500 = operator new();
  *(_DWORD *)(v500 + 32) = 0;
  *(_QWORD *)(v500 + 16) = 0;
  *(_QWORD *)(v500 + 24) = 0;
  *(_QWORD *)v500 = &off_1E42B5DE8;
  *(_QWORD *)(v500 + 8) = 0;
  *(_QWORD *)(v500 + 36) = 66560;
  *(_DWORD *)(v500 + 44) = 1056964608;
  *(_QWORD *)(v500 + 48) = 0x7F0200000600;
  *(_WORD *)(v500 + 56) = 0;
  *(_BYTE *)(v500 + 58) = 3;
  *(_QWORD *)(v500 + 67) = 0;
  *(_QWORD *)(v500 + 59) = 0;
  *(_BYTE *)(v500 + 75) = 0;
  *(_QWORD *)(v500 + 132) = 0;
  *(_QWORD *)(v500 + 124) = 0;
  *(_WORD *)(v500 + 188) = 257;
  *(_QWORD *)(v500 + 192) = 0;
  *(_QWORD *)(v500 + 200) = 0;
  *(_BYTE *)(v500 + 208) = 0;
  v501 = *(_QWORD *)(v358 + 128);
  *(_QWORD *)(v358 + 128) = v500;
  if (v501)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v501 + 8))(v501);
    v500 = *(_QWORD *)(v358 + 128);
  }
  *(_BYTE *)(v500 + 208) = 1;

  *v357 = (md::PolygonOverlayRenderResources *)v358;
  v357[1] = *(md::PolygonOverlayRenderResources **)(-[VKSharedResources alphaAtlas](v359, "alphaAtlas") + 24);
  v357[2] = 0;
  if (v359)
  {
    -[VKSharedResources standardCommandBufferSelector](v359, "standardCommandBufferSelector");
    v502 = *(std::__shared_weak_count **)&v1269[8];
    v503 = *(unsigned __int8 *)(*(_QWORD *)v1269 + 56);
    if (*(_QWORD *)&v1269[8])
    {
      v504 = (unint64_t *)(*(_QWORD *)&v1269[8] + 8);
      do
        v505 = __ldaxr(v504);
      while (__stlxr(v505 - 1, v504));
      if (!v505)
      {
        ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
        std::__shared_weak_count::__release_weak(v502);
      }
    }
  }
  else
  {
    v503 = MEMORY[0x38];
  }
  v506 = (uint64_t *)operator new();
  v507 = -[VKSharedResources shaderLibrary](v359, "shaderLibrary");
  v508 = -[VKSharedResources highInflationAlphaAtlas](v359, "highInflationAlphaAtlas");
  v509 = -[VKSharedResources distanceAtlas](v359, "distanceAtlas");
  if (v359)
    -[VKSharedResources textureManager](v359, "textureManager");
  else
    *(_OWORD *)v1269 = 0uLL;
  md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(v506, v507, v508, v509, (uint64_t *)v1269, (__int128 *)a3->colorFormats, v503 != 0);
  v510 = v357[2];
  v357[2] = (md::PolygonOverlayRenderResources *)v506;
  if (v510)
  {
    md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v510);
    MEMORY[0x1A1AF4E00]();
  }
  v511 = *(std::__shared_weak_count **)&v1269[8];
  if (*(_QWORD *)&v1269[8])
  {
    v512 = (unint64_t *)(*(_QWORD *)&v1269[8] + 8);
    do
      v513 = __ldaxr(v512);
    while (__stlxr(v513 - 1, v512));
    if (!v513)
    {
      ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
      std::__shared_weak_count::__release_weak(v511);
    }
  }

  v514 = *v1203;
  *v1203 = v357;
  if (v514)
  {
    v515 = v514[2];
    v514[2] = 0;
    if (v515)
    {
      md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v515);
      MEMORY[0x1A1AF4E00]();
    }
    v516 = *v514;
    *v514 = 0;
    if (v516)
    {
      md::PolygonOverlayRenderResources::~PolygonOverlayRenderResources(v516);
      MEMORY[0x1A1AF4E00]();
    }
    MEMORY[0x1A1AF4E00](v514, 0x20C40960023A9);
  }
  v517 = operator new();
  v518 = v359;
  *(_OWORD *)v517 = 0u;
  *(_OWORD *)(v517 + 16) = 0u;
  *(_OWORD *)(v517 + 32) = 0u;
  *(_OWORD *)(v517 + 48) = 0u;
  *(_OWORD *)(v517 + 64) = 0u;
  *(_QWORD *)(v517 + 80) = 0;
  v1210 = v518;
  v519 = -[VKSharedResources shaderLibrary](v518, "shaderLibrary");
  v520 = operator new();
  *(_DWORD *)(v520 + 32) = 0;
  *(_QWORD *)(v520 + 16) = 0;
  *(_QWORD *)(v520 + 24) = 0;
  *(_QWORD *)v520 = &off_1E42B5DE8;
  *(_QWORD *)(v520 + 8) = 0;
  *(_QWORD *)(v520 + 36) = 65537;
  *(_DWORD *)(v520 + 44) = 0;
  *(_QWORD *)(v520 + 48) = 0x7FFF0200000100;
  *(_WORD *)(v520 + 56) = 0;
  *(_BYTE *)(v520 + 58) = 3;
  *(_QWORD *)(v520 + 67) = 0;
  *(_QWORD *)(v520 + 59) = 0;
  *(_BYTE *)(v520 + 75) = 0;
  *(_QWORD *)(v520 + 132) = 0;
  *(_QWORD *)(v520 + 124) = 0;
  *(_WORD *)(v520 + 188) = 257;
  *(_QWORD *)(v520 + 192) = 0;
  *(_QWORD *)(v520 + 200) = 0;
  *(_BYTE *)(v520 + 208) = 0;
  v521 = *(_QWORD *)(v517 + 72);
  *(_QWORD *)(v517 + 72) = v520;
  if (v521)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
    v520 = *(_QWORD *)(v517 + 72);
  }
  *(_BYTE *)(v520 + 208) = 1;
  v522 = *(_QWORD *)(v519 + 80);
  v523 = *(_QWORD *)(v522 + 1544);
  v524 = *(std::__shared_weak_count **)(v522 + 1552);
  if (v524)
  {
    v525 = (unint64_t *)&v524->__shared_owners_;
    do
      v526 = __ldxr(v525);
    while (__stxr(v526 + 1, v525));
  }
  *(_QWORD *)&v1275 = 0;
  v527 = (char *)operator new(0x198uLL);
  *((_QWORD *)v527 + 1) = 0;
  *((_QWORD *)v527 + 2) = 0;
  *(_QWORD *)v527 = &off_1E42DF258;
  v528 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v1269 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v1269[16] = v528;
  if ((v529 & 1) == 0)
  {
    if ((_DWORD)v1141)
    {
      if ((v1142 & 1) == 0)
      {
        if ((_DWORD)v1141)
        {
          if ((v1187 & 1) == 0
          {
            if ((v1191 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::MaskingOverlay::MaskingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57BD00 = &ggl::MaskingOverlay::pipelineDataMaskingPipelineDeviceStructs(void)::ref;
          qword_1EE57BD08 = 0;
          if ((v1188 & 1) == 0
          {
            ggl::MaskingOverlay::pipelineDataMaskingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57BDA8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57BDB0 = (uint64_t)ggl::MaskingOverlay::Fill::reflection(void)::reflection;
          }
          qword_1EE57BD10 = (uint64_t)&ggl::MaskingOverlay::pipelineDataMaskingPipelineConstantStructs(void)::ref;
          unk_1EE57BD18 = xmmword_19FFB3410;
        }
      }
      ggl::MaskingOverlay::MaskingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::MaskingOverlay::MaskingPipelineSetup::typedReflection(void)::ref;
      ggl::MaskingOverlayMaskingShader::typedReflection(v1141);
      qword_1EE57BD38 = (uint64_t)&ggl::MaskingOverlayMaskingShader::typedReflection(void)::ref;
      if ((v1143 & 1) == 0
      {
        ggl::MaskingOverlay::pipelineStateMaskingPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57BF18 = 0;
        qword_1EE57BF20 = (uint64_t)"";
        dword_1EE57BF28 = 0;
        qword_1EE57BF30 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57BF38 = 1;
      }
      qword_1EE57BD40 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57BD48 = 1;
      qword_1EE57BD50 = 0;
      unk_1EE57BD58 = 0;
      qword_1EE57BD60 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineDeviceStructBinding(void)::ref;
      unk_1EE57BD68 = 0;
      if ((v1144 & 1) == 0
      {
        ggl::MaskingOverlay::pipelineStateMaskingPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57BE88 = 0;
        qword_1EE57BE90 = (uint64_t)"view";
        dword_1EE57BE98 = 3;
        qword_1EE57BEA0 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57BEA8 = xmmword_19FFB35A0;
        qword_1EE57BEB8 = 1;
        unk_1EE57BEC0 = "transform";
        dword_1EE57BEC8 = 3;
        qword_1EE57BED0 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57BED8 = xmmword_19FFB3660;
        qword_1EE57BEE8 = 2;
        unk_1EE57BEF0 = "fill";
        dword_1EE57BEF8 = 3;
        qword_1EE57BF00 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineConstantFillBinding(void)::reflection;
        unk_1EE57BF08 = 4;
      }
      qword_1EE57BD70 = (uint64_t)&ggl::MaskingOverlay::pipelineStateMaskingPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE57BD78 = 3;
    }
  }
  if (v524)
  {
    v530 = (unint64_t *)&v524->__shared_owners_;
    do
      v531 = __ldxr(v530);
    while (__stxr(v531 + 1, v530));
    *((_DWORD *)v527 + 14) = 0;
    *((_QWORD *)v527 + 5) = 0;
    *((_QWORD *)v527 + 6) = 0;
    *((_QWORD *)v527 + 3) = &off_1E42B6760;
    *((_QWORD *)v527 + 4) = 0;
    *((_QWORD *)v527 + 8) = &ggl::MaskingOverlay::MaskingPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v527 + 9) = v523;
    *((_QWORD *)v527 + 10) = v524;
    do
      v532 = __ldxr(v530);
    while (__stxr(v532 + 1, v530));
  }
  else
  {
    *((_DWORD *)v527 + 14) = 0;
    *((_QWORD *)v527 + 5) = 0;
    *((_QWORD *)v527 + 6) = 0;
    *((_QWORD *)v527 + 3) = &off_1E42B6760;
    *((_QWORD *)v527 + 4) = 0;
    *((_QWORD *)v527 + 8) = &ggl::MaskingOverlay::MaskingPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v527 + 9) = v523;
    *((_QWORD *)v527 + 10) = 0;
  }
  v527[136] = 0;
  *(_OWORD *)(v527 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v527 + 156) = 0;
  *(_QWORD *)(v527 + 172) = 0;
  *(_QWORD *)(v527 + 164) = 0;
  v527[184] = 0;
  *(_OWORD *)(v527 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v527 + 204) = 0;
  *(_QWORD *)(v527 + 220) = 0;
  *(_QWORD *)(v527 + 212) = 0;
  v527[232] = 0;
  *(_OWORD *)(v527 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v527 + 252) = 0;
  *(_QWORD *)(v527 + 268) = 0;
  *(_QWORD *)(v527 + 260) = 0;
  v533 = *(_OWORD *)&v1269[16];
  *(_OWORD *)(v527 + 280) = *(_OWORD *)v1269;
  *(_OWORD *)(v527 + 296) = v533;
  v527[312] = 0;
  *((_QWORD *)v527 + 48) = 0;
  *((_OWORD *)v527 + 22) = 0u;
  *((_OWORD *)v527 + 23) = 0u;
  *((_OWORD *)v527 + 20) = 0u;
  *((_OWORD *)v527 + 21) = 0u;
  *((_QWORD *)v527 + 49) = 0x100000001;
  v527[400] = 0;
  v527[88] = 0;
  *(_WORD *)(v527 + 89) = (_WORD)v1272;
  v527[91] = BYTE2(v1272);
  *(_OWORD *)(v527 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v527 + 108) = v1275;
  *(_QWORD *)(v527 + 124) = 0;
  *(_QWORD *)(v527 + 116) = 0;
  v527[132] = 0;
  if (v524)
  {
    v534 = (unint64_t *)&v524->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
      std::__shared_weak_count::__release_weak(v524);
    }
  }
  *((_WORD *)v527 + 164) = 0;
  v536 = vceqzq_s8(*(int8x16_t *)(v527 + 328));
  v537 = vmovl_high_s8(v536);
  v538 = vmovl_s16(*(int16x4_t *)v537.i8);
  v539.i64[0] = v538.u32[0];
  v539.i64[1] = v538.u32[1];
  v540 = v539;
  v541 = vmovl_s8(*(int8x8_t *)v536.i8);
  v542 = vmovl_s16(*(int16x4_t *)v541.i8);
  v539.i64[0] = v542.u32[0];
  v539.i64[1] = v542.u32[1];
  v543 = v539;
  v544 = vmovl_high_s16(v537);
  v539.i64[0] = v544.u32[0];
  v539.i64[1] = v544.u32[1];
  v545 = v539;
  v546 = vmovl_high_s16(v541);
  v539.i64[0] = v546.u32[0];
  v539.i64[1] = v546.u32[1];
  v547 = v539;
  v539.i64[0] = v538.u32[2];
  v539.i64[1] = v538.u32[3];
  v548 = v539;
  v539.i64[0] = v542.u32[2];
  v539.i64[1] = v542.u32[3];
  v549 = v539;
  v539.i64[0] = v544.u32[2];
  v539.i64[1] = v544.u32[3];
  v550 = v539;
  v539.i64[0] = v546.u32[2];
  v539.i64[1] = v546.u32[3];
  v551 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v539);
  v552 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v550);
  v553 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v549);
  v554 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v545);
  v555 = vceqzq_s8(*(int8x16_t *)(v527 + 344));
  v556 = vmovl_high_s8(v555);
  v557 = vmovl_s16(*(int16x4_t *)v556.i8);
  v539.i64[0] = v557.u32[0];
  v539.i64[1] = v557.u32[1];
  v558 = v539;
  v559 = vmovl_s8(*(int8x8_t *)v555.i8);
  v560 = vmovl_s16(*(int16x4_t *)v559.i8);
  v539.i64[0] = v560.u32[0];
  v539.i64[1] = v560.u32[1];
  v561 = v539;
  v562 = vmovl_high_s16(v556);
  v539.i64[0] = v562.u32[0];
  v539.i64[1] = v562.u32[1];
  v563 = v539;
  v564 = vmovl_high_s16(v559);
  v539.i64[0] = v564.u32[0];
  v539.i64[1] = v564.u32[1];
  v565 = v539;
  v539.i64[0] = v557.u32[2];
  v539.i64[1] = v557.u32[3];
  v566 = v539;
  v539.i64[0] = v560.u32[2];
  v539.i64[1] = v560.u32[3];
  v567 = v539;
  v539.i64[0] = v562.u32[2];
  v539.i64[1] = v562.u32[3];
  v568 = v539;
  v539.i64[0] = v564.u32[2];
  v539.i64[1] = v564.u32[3];
  v569 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v568);
  v570 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v558), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v540));
  v571 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v561), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v543));
  v572 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v563), v554);
  v573 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v565), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v547));
  v574 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v566), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v548));
  v575 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v567), v553);
  v576 = vorrq_s8(v569, v552);
  v577 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v539), v551);
  v578 = vceqzq_s8(*(int8x16_t *)(v527 + 360));
  v579 = vmovl_high_s8(v578);
  v580 = vmovl_s16(*(int16x4_t *)v579.i8);
  v539.i64[0] = v580.i32[0];
  v539.i64[1] = v580.i32[1];
  v581 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v539);
  v582 = vceqzq_s8(*(int8x16_t *)(v527 + 376));
  v583 = vmovl_high_s8(v582);
  v584 = vmovl_s16(*(int16x4_t *)v583.i8);
  v539.i64[0] = v584.i32[0];
  v539.i64[1] = v584.i32[1];
  v585 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v539), v581), v570);
  v586 = vmovl_s8(*(int8x8_t *)v578.i8);
  v587 = vmovl_s16(*(int16x4_t *)v586.i8);
  v539.i64[0] = v587.i32[0];
  v539.i64[1] = v587.i32[1];
  v588 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v539);
  v589 = vmovl_s8(*(int8x8_t *)v582.i8);
  v590 = vmovl_s16(*(int16x4_t *)v589.i8);
  v539.i64[0] = v590.i32[0];
  v539.i64[1] = v590.i32[1];
  v591 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v539), v588), v571);
  v592 = vmovl_high_s16(v579);
  v539.i64[0] = v592.i32[0];
  v539.i64[1] = v592.i32[1];
  v593 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v539);
  v594 = vmovl_high_s16(v583);
  v539.i64[0] = v594.i32[0];
  v539.i64[1] = v594.i32[1];
  v595 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v539), v593), v572);
  v596 = vmovl_high_s16(v586);
  v539.i64[0] = v596.i32[0];
  v539.i64[1] = v596.i32[1];
  v597 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v539);
  v598 = vmovl_high_s16(v589);
  v539.i64[0] = v598.i32[0];
  v539.i64[1] = v598.i32[1];
  v599 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v539), v597), v573);
  v539.i64[0] = v580.i32[2];
  v539.i64[1] = v580.i32[3];
  v600 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v539);
  v539.i64[0] = v584.i32[2];
  v539.i64[1] = v584.i32[3];
  v601 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v539), v600), v574);
  v539.i64[0] = v587.i32[2];
  v539.i64[1] = v587.i32[3];
  v602 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v539);
  v539.i64[0] = v590.i32[2];
  v539.i64[1] = v590.i32[3];
  v603 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v539), v602), v575);
  v539.i64[0] = v592.i32[2];
  v539.i64[1] = v592.i32[3];
  v604 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v539);
  v539.i64[0] = v594.i32[2];
  v539.i64[1] = v594.i32[3];
  v605 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v539), v604), v576);
  v539.i64[0] = v596.i32[2];
  v539.i64[1] = v596.i32[3];
  v606 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v539);
  v539.i64[0] = v598.i32[2];
  v539.i64[1] = v598.i32[3];
  *((_QWORD *)v527 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v591, v585), vorrq_s8(v599, v595)), (int64x2_t)vorrq_s8(vorrq_s8(v603, v601), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v539), v606), v577), v605))));
  *((_QWORD *)v527 + 3) = &off_1E42B6C48;
  v527[312] = 1;
  v607 = *(std::__shared_weak_count **)(v517 + 64);
  *(_QWORD *)(v517 + 56) = v527 + 24;
  *(_QWORD *)(v517 + 64) = v527;
  if (v607)
  {
    v608 = (unint64_t *)&v607->__shared_owners_;
    do
      v609 = __ldaxr(v608);
    while (__stlxr(v609 - 1, v608));
    if (!v609)
    {
      ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
      std::__shared_weak_count::__release_weak(v607);
    }
  }
  if (v524)
  {
    v610 = (unint64_t *)&v524->__shared_owners_;
    do
      v611 = __ldaxr(v610);
    while (__stlxr(v611 - 1, v610));
    if (!v611)
    {
      ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
      std::__shared_weak_count::__release_weak(v524);
    }
  }
  v612 = (uint64_t *)operator new();
  *(_QWORD *)&v1275 = &off_1E42D2200;
  *((_QWORD *)&v1275 + 1) = v517;
  *((_QWORD *)&v1276 + 1) = &v1275;
  v1272 = &off_1E42D6398;
  v1274 = &v1272;
  v612[1] = 0;
  v612[2] = 0;
  *v612 = 0;
  {
    v1145 = operator new();
    *(_QWORD *)(v1145 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1145 + 24) = "GeoGL";
    *(_OWORD *)(v1145 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1145 = &off_1E42B5668;
    *(_QWORD *)(v1145 + 8) = "GeoGL";
    *(_OWORD *)(v1145 + 72) = 0u;
    *(_OWORD *)(v1145 + 88) = 0u;
    *(_OWORD *)(v1145 + 104) = 0u;
    *(_OWORD *)(v1145 + 120) = 0u;
    *(_OWORD *)(v1145 + 136) = 0u;
    *(_OWORD *)(v1145 + 152) = 0u;
    *(_OWORD *)(v1145 + 168) = 0u;
    *(_OWORD *)(v1145 + 184) = 0u;
    *(_OWORD *)(v1145 + 200) = 0u;
    *(_OWORD *)(v1145 + 216) = 0u;
    *(_OWORD *)(v1145 + 232) = 0u;
    *(_QWORD *)(v1145 + 248) = 0;
    *(_OWORD *)(v1145 + 56) = 0u;
    v1146 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1145 + 56), 0);
    if ((_DWORD)v1146)
      geo::read_write_lock::logFailure(v1146, (uint64_t)"initialization", v1147);
    v1148 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1145 + 48) = v1148;
    malloc_set_zone_name(v1148, "GeoGL");
    *(_QWORD *)(v1145 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1145;
  }
  v614 = ggl::Allocator::instance(void)::alloc;
  v612[4] = 0;
  v612[3] = v614;
  v612[5] = 0;
  v612[6] = 0;
  {
    v1149 = operator new();
    *(_QWORD *)(v1149 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1149 + 24) = "GeoGL";
    *(_OWORD *)(v1149 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1149 = &off_1E42B5668;
    *(_QWORD *)(v1149 + 8) = "GeoGL";
    *(_OWORD *)(v1149 + 72) = 0u;
    *(_OWORD *)(v1149 + 88) = 0u;
    *(_OWORD *)(v1149 + 104) = 0u;
    *(_OWORD *)(v1149 + 120) = 0u;
    *(_OWORD *)(v1149 + 136) = 0u;
    *(_OWORD *)(v1149 + 152) = 0u;
    *(_OWORD *)(v1149 + 168) = 0u;
    *(_OWORD *)(v1149 + 184) = 0u;
    *(_OWORD *)(v1149 + 200) = 0u;
    *(_OWORD *)(v1149 + 216) = 0u;
    *(_OWORD *)(v1149 + 232) = 0u;
    *(_QWORD *)(v1149 + 248) = 0;
    *(_OWORD *)(v1149 + 56) = 0u;
    v1150 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1149 + 56), 0);
    if ((_DWORD)v1150)
      geo::read_write_lock::logFailure(v1150, (uint64_t)"initialization", v1151);
    v1152 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1149 + 48) = v1152;
    malloc_set_zone_name(v1152, "GeoGL");
    *(_QWORD *)(v1149 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1149;
  }
  v612[7] = ggl::Allocator::instance(void)::alloc;
  v615 = *((_QWORD *)&v1276 + 1);
  if (!*((_QWORD *)&v1276 + 1))
    goto LABEL_574;
  if (*((__int128 **)&v1276 + 1) != &v1275)
  {
    v615 = (*(uint64_t (**)(void))(**((_QWORD **)&v1276 + 1) + 16))();
LABEL_574:
    v612[11] = v615;
    goto LABEL_576;
  }
  v612[11] = (uint64_t)(v612 + 8);
  (*(void (**)(__int128 *, uint64_t *))(v1275 + 24))(&v1275, v612 + 8);
LABEL_576:
  v616 = (uint64_t)v1274;
  if (!v1274)
  {
LABEL_579:
    v612[15] = v616;
    goto LABEL_581;
  }
  if (v1274 != &v1272)
  {
    v616 = (*v1274)[2]();
    goto LABEL_579;
  }
  v612[15] = (uint64_t)(v612 + 12);
  ((void (*)(uint64_t, _QWORD *))v1272[3])((uint64_t)&v1272, v612 + 12);
LABEL_581:
  v612[16] = 2000;
  v617 = *v612;
  if ((unint64_t)(v612[2] - *v612) > 0x31F)
    goto LABEL_594;
  v618 = v612[1];
  v619 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v612[3] + 16))(v612[3], 800, 8);
  v620 = v618 - v617;
  v621 = v619 + ((v618 - v617) & 0xFFFFFFFFFFFFFFF8);
  v623 = *v612;
  v622 = v612[1];
  v624 = v622 - *v612;
  if (v622 == *v612)
  {
    v626 = v619 + ((v618 - v617) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_592;
  }
  v625 = v624 - 8;
  if ((unint64_t)(v624 - 8) >= 0x58)
  {
    v626 = v619 + ((v618 - v617) & 0xFFFFFFFFFFFFFFF8);
    if (v622 - (v620 & 0xFFFFFFFFFFFFFFF8) - v619 >= 0x20)
    {
      v627 = v620 >> 3;
      v628 = (v625 >> 3) + 1;
      v629 = (_OWORD *)(v619 + 8 * v627 - 16);
      v630 = (__int128 *)(v622 - 16);
      v631 = v628 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v632 = *v630;
        *(v629 - 1) = *(v630 - 1);
        *v629 = v632;
        v629 -= 2;
        v630 -= 2;
        v631 -= 4;
      }
      while (v631);
      v626 = v621 - 8 * (v628 & 0x3FFFFFFFFFFFFFFCLL);
      v622 -= 8 * (v628 & 0x3FFFFFFFFFFFFFFCLL);
      if (v628 == (v628 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_591;
    }
  }
  else
  {
    v626 = v619 + ((v618 - v617) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v633 = *(_QWORD *)(v622 - 8);
    v622 -= 8;
    *(_QWORD *)(v626 - 8) = v633;
    v626 -= 8;
  }
  while (v622 != v623);
LABEL_591:
  v622 = *v612;
LABEL_592:
  *v612 = v626;
  v612[1] = v621;
  v634 = v612[2];
  v612[2] = v619 + 800;
  if (v622)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v612[3] + 40))(v612[3], v622, v634 - v622);
LABEL_594:
  v635 = v612[4];
  if ((unint64_t)(v612[6] - v635) > 0x31F)
    goto LABEL_607;
  v636 = v612[5];
  v637 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v612[7] + 16))(v612[7], 800, 8);
  v638 = v636 - v635;
  v639 = v637 + ((v636 - v635) & 0xFFFFFFFFFFFFFFF8);
  v641 = v612[4];
  v640 = v612[5];
  v642 = v640 - v641;
  if (v640 == v641)
  {
    v644 = v637 + ((v636 - v635) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_605;
  }
  v643 = v642 - 8;
  if ((unint64_t)(v642 - 8) >= 0x58)
  {
    v644 = v637 + ((v636 - v635) & 0xFFFFFFFFFFFFFFF8);
    if (v640 - (v638 & 0xFFFFFFFFFFFFFFF8) - v637 >= 0x20)
    {
      v645 = v638 >> 3;
      v646 = (v643 >> 3) + 1;
      v647 = (_OWORD *)(v637 + 8 * v645 - 16);
      v648 = (__int128 *)(v640 - 16);
      v649 = v646 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v650 = *v648;
        *(v647 - 1) = *(v648 - 1);
        *v647 = v650;
        v647 -= 2;
        v648 -= 2;
        v649 -= 4;
      }
      while (v649);
      v644 = v639 - 8 * (v646 & 0x3FFFFFFFFFFFFFFCLL);
      v640 -= 8 * (v646 & 0x3FFFFFFFFFFFFFFCLL);
      if (v646 == (v646 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_604;
    }
  }
  else
  {
    v644 = v637 + ((v636 - v635) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v651 = *(_QWORD *)(v640 - 8);
    v640 -= 8;
    *(_QWORD *)(v644 - 8) = v651;
    v644 -= 8;
  }
  while (v640 != v641);
LABEL_604:
  v640 = v612[4];
LABEL_605:
  v612[4] = v644;
  v612[5] = v639;
  v652 = v612[6];
  v612[6] = v637 + 800;
  if (v640)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v612[7] + 40))(v612[7], v640, v652 - v640);
LABEL_607:
  v653 = *(_QWORD *)(v517 + 80);
  *(_QWORD *)(v517 + 80) = v612;
  if (v653)
  {
    v654 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v653);
    MEMORY[0x1A1AF4E00](v654, 0x10A0C40D234DDC7);
  }
  v655 = v1274;
  if (v1274 == &v1272)
  {
    v656 = 4;
    v655 = &v1272;
  }
  else
  {
    if (!v1274)
      goto LABEL_614;
    v656 = 5;
  }
  (*v655)[v656]();
LABEL_614:
  v657 = (__int128 *)*((_QWORD *)&v1276 + 1);
  if (*((__int128 **)&v1276 + 1) == &v1275)
  {
    v658 = 4;
    v657 = &v1275;
  }
  else
  {
    if (!*((_QWORD *)&v1276 + 1))
      goto LABEL_619;
    v658 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v657 + 8 * v658))();
LABEL_619:
  v659 = operator new();
  *(_DWORD *)(v659 + 32) = 0;
  *(_QWORD *)(v659 + 16) = 0;
  *(_QWORD *)(v659 + 24) = 0;
  *(_QWORD *)v659 = &off_1E42B5DE8;
  *(_QWORD *)(v659 + 8) = 0;
  *(_QWORD *)(v659 + 36) = 65537;
  *(_DWORD *)(v659 + 44) = 0;
  *(_QWORD *)(v659 + 48) = 0x7FFF0000020600;
  *(_WORD *)(v659 + 56) = 0;
  *(_BYTE *)(v659 + 58) = 3;
  *(_QWORD *)(v659 + 67) = 0;
  *(_QWORD *)(v659 + 59) = 0;
  *(_BYTE *)(v659 + 75) = 0;
  *(_QWORD *)(v659 + 132) = 0;
  *(_QWORD *)(v659 + 124) = 0;
  *(_WORD *)(v659 + 188) = 257;
  *(_QWORD *)(v659 + 192) = 0;
  *(_QWORD *)(v659 + 200) = 0;
  *(_BYTE *)(v659 + 208) = 0;
  v660 = *(_QWORD *)(v517 + 32);
  *(_QWORD *)(v517 + 32) = v659;
  if (v660)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v660 + 8))(v660);
    v659 = *(_QWORD *)(v517 + 32);
  }
  *(_BYTE *)(v659 + 208) = 1;
  v661 = operator new();
  *(_DWORD *)(v661 + 32) = 0;
  *(_QWORD *)(v661 + 16) = 0;
  *(_QWORD *)(v661 + 24) = 0;
  *(_QWORD *)v661 = &off_1E42B5DE8;
  *(_QWORD *)(v661 + 8) = 0;
  *(_QWORD *)(v661 + 36) = 65537;
  *(_DWORD *)(v661 + 44) = 0;
  *(_QWORD *)(v661 + 48) = 0x7F7F0200000200;
  *(_WORD *)(v661 + 56) = 0;
  *(_BYTE *)(v661 + 58) = 3;
  *(_QWORD *)(v661 + 67) = 0;
  *(_QWORD *)(v661 + 59) = 0;
  *(_BYTE *)(v661 + 75) = 0;
  *(_QWORD *)(v661 + 132) = 0;
  *(_QWORD *)(v661 + 124) = 0;
  *(_WORD *)(v661 + 188) = 257;
  *(_QWORD *)(v661 + 192) = 0;
  *(_QWORD *)(v661 + 200) = 0;
  *(_BYTE *)(v661 + 208) = 0;
  v662 = *(_QWORD *)(v517 + 40);
  *(_QWORD *)(v517 + 40) = v661;
  if (v662)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v662 + 8))(v662);
    v661 = *(_QWORD *)(v517 + 40);
  }
  *(_BYTE *)(v661 + 208) = 1;
  if (v359)
  {
    -[VKSharedResources standardCommandBufferSelector](v1210, "standardCommandBufferSelector");
    v663 = *(std::__shared_weak_count **)&v1269[8];
    v664 = *(unsigned __int8 *)(*(_QWORD *)v1269 + 56);
    if (*(_QWORD *)&v1269[8])
    {
      v665 = (unint64_t *)(*(_QWORD *)&v1269[8] + 8);
      do
        v666 = __ldaxr(v665);
      while (__stlxr(v666 - 1, v665));
      if (!v666)
      {
        ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
        std::__shared_weak_count::__release_weak(v663);
      }
    }
  }
  else
  {
    v664 = MEMORY[0x38];
  }
  v667 = *(_QWORD *)(v519 + 80);
  v668 = *(_QWORD *)(v667 + 1520);
  v669 = *(std::__shared_weak_count **)(v667 + 1528);
  if (v669)
  {
    v670 = (unint64_t *)&v669->__shared_owners_;
    do
      v671 = __ldxr(v670);
    while (__stxr(v671 + 1, v670));
  }
  if (v664)
    v672 = 0;
  else
    v672 = 7;
  v673 = (char *)operator new(0x198uLL);
  v674.i32[0] = 0;
  v675.i32[0] = v664;
  v676 = (int8x8_t)vdup_lane_s32(vceq_s32(v675, v674), 0);
  *((_QWORD *)v673 + 1) = 0;
  *((_QWORD *)v673 + 2) = 0;
  *(_QWORD *)v673 = &off_1E42DF220;
  v677 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v1269 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v1269[16] = v677;
  if ((v678 & 1) == 0)
  {
    v1194 = 1;
    v1195 = v676;
    v1193 = 0x700000006;
    v676 = v1195;
    if ((_DWORD)v1153)
    {
      if ((v1154 & 1) == 0)
      {
        if ((_DWORD)v1153)
        {
          if ((v1189 & 1) == 0
          {
            if ((v1192 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::MaskingOverlay::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1EE57BC70 = &ggl::MaskingOverlay::pipelineDataFillPipelineDeviceStructs(void)::ref;
          qword_1EE57BC78 = 0;
          if ((v1190 & 1) == 0
          {
            ggl::MaskingOverlay::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57BD88 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57BD90 = (uint64_t)ggl::MaskingOverlay::Fill::reflection(void)::reflection;
          }
          qword_1EE57BC80 = (uint64_t)&ggl::MaskingOverlay::pipelineDataFillPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57BC88 = xmmword_19FFB35E0;
        }
      }
      ggl::MaskingOverlay::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::MaskingOverlay::FillPipelineSetup::typedReflection(void)::ref;
      ggl::MaskingOverlayFillShader::typedReflection(v1153);
      qword_1EE57BCA8 = (uint64_t)&ggl::MaskingOverlayFillShader::typedReflection(void)::ref;
      if ((v1155 & 1) == 0
      {
        ggl::MaskingOverlay::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57BE58 = 0;
        qword_1EE57BE60 = (uint64_t)"";
        dword_1EE57BE68 = 0;
        qword_1EE57BE70 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1EE57BE78 = 2;
      }
      qword_1EE57BCB0 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57BCB8 = 1;
      qword_1EE57BCC0 = 0;
      unk_1EE57BCC8 = 1;
      qword_1EE57BCD0 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1EE57BCD8 = 0;
      if ((v1156 & 1) == 0
      {
        ggl::MaskingOverlay::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57BDC8 = 0;
        qword_1EE57BDD0 = (uint64_t)"view";
        dword_1EE57BDD8 = 3;
        qword_1EE57BDE0 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        unk_1EE57BDE8 = xmmword_19FFB35A0;
        qword_1EE57BDF8 = 1;
        unk_1EE57BE00 = "transform";
        dword_1EE57BE08 = 3;
        qword_1EE57BE10 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57BE18 = xmmword_19FFB3660;
        qword_1EE57BE28 = 2;
        unk_1EE57BE30 = "fill";
        dword_1EE57BE38 = 3;
        qword_1EE57BE40 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineConstantFillBinding(void)::reflection;
        unk_1EE57BE48 = 4;
      }
      qword_1EE57BCE0 = (uint64_t)&ggl::MaskingOverlay::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1EE57BCE8 = 3;
      v676 = v1195;
    }
  }
  v679 = vbsl_s8(v676, (int8x8_t)0x700000006, (int8x8_t)1);
  if (v669)
  {
    v680 = (unint64_t *)&v669->__shared_owners_;
    do
      v681 = __ldxr(v680);
    while (__stxr(v681 + 1, v680));
    *((_DWORD *)v673 + 14) = 0;
    *((_QWORD *)v673 + 5) = 0;
    *((_QWORD *)v673 + 6) = 0;
    *((_QWORD *)v673 + 3) = &off_1E42B6760;
    *((_QWORD *)v673 + 4) = 0;
    *((_QWORD *)v673 + 8) = &ggl::MaskingOverlay::FillPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v673 + 9) = v668;
    *((_QWORD *)v673 + 10) = v669;
    do
      v682 = __ldxr(v680);
    while (__stxr(v682 + 1, v680));
  }
  else
  {
    *((_DWORD *)v673 + 14) = 0;
    *((_QWORD *)v673 + 5) = 0;
    *((_QWORD *)v673 + 6) = 0;
    *((_QWORD *)v673 + 3) = &off_1E42B6760;
    *((_QWORD *)v673 + 4) = 0;
    *((_QWORD *)v673 + 8) = &ggl::MaskingOverlay::FillPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v673 + 9) = v668;
    *((_QWORD *)v673 + 10) = 0;
  }
  v673[136] = 0;
  *(_OWORD *)(v673 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 156) = 0;
  *(_QWORD *)(v673 + 172) = 0;
  *(_QWORD *)(v673 + 164) = 0;
  v673[184] = 0;
  *(_OWORD *)(v673 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 204) = 0;
  *(_QWORD *)(v673 + 220) = 0;
  *(_QWORD *)(v673 + 212) = 0;
  v673[232] = 0;
  *(_OWORD *)(v673 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 252) = 0;
  *(_QWORD *)(v673 + 268) = 0;
  *(_QWORD *)(v673 + 260) = 0;
  v683 = *(_OWORD *)&v1269[16];
  *(_OWORD *)(v673 + 280) = *(_OWORD *)v1269;
  *(_OWORD *)(v673 + 296) = v683;
  v673[312] = 0;
  *((_QWORD *)v673 + 48) = 0;
  *((_OWORD *)v673 + 22) = 0u;
  *((_OWORD *)v673 + 23) = 0u;
  *((_OWORD *)v673 + 20) = 0u;
  *((_OWORD *)v673 + 21) = 0u;
  *((_QWORD *)v673 + 49) = 0x100000001;
  v673[400] = 0;
  v673[88] = v664 ^ 1;
  v673[91] = BYTE2(v1270[0]);
  *(_WORD *)(v673 + 89) = v1270[0];
  *(int8x8_t *)(v673 + 92) = v679;
  *(_QWORD *)(v673 + 100) = 0x100000000;
  *((_DWORD *)v673 + 27) = v672;
  *((_QWORD *)v673 + 14) = 0;
  *((_QWORD *)v673 + 15) = 0;
  *((_DWORD *)v673 + 32) = 0;
  v673[132] = 15;
  v684 = v1210;
  if (v669)
  {
    v685 = (unint64_t *)&v669->__shared_owners_;
    do
      v686 = __ldaxr(v685);
    while (__stlxr(v686 - 1, v685));
    if (!v686)
    {
      ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
      std::__shared_weak_count::__release_weak(v669);
    }
  }
  v673[328] = v664;
  v673[329] = 0;
  v687 = vceqzq_s8(*(int8x16_t *)(v673 + 328));
  v688 = vmovl_s8(*(int8x8_t *)v687.i8);
  v689 = vmovl_high_s16(v688);
  v690.i64[0] = v689.u32[2];
  v690.i64[1] = v689.u32[3];
  v691 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v690);
  v692 = vmovl_high_s8(v687);
  v693 = vmovl_high_s16(v692);
  v690.i64[0] = v693.u32[2];
  v690.i64[1] = v693.u32[3];
  v694 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v690);
  v695 = vmovl_s16(*(int16x4_t *)v688.i8);
  v690.i64[0] = v695.u32[2];
  v690.i64[1] = v695.u32[3];
  v696 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v690);
  v697 = vmovl_s16(*(int16x4_t *)v692.i8);
  v690.i64[0] = v697.u32[2];
  v690.i64[1] = v697.u32[3];
  v698 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v690);
  v690.i64[0] = v689.u32[0];
  v690.i64[1] = v689.u32[1];
  v699 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v690);
  v690.i64[0] = v693.u32[0];
  v690.i64[1] = v693.u32[1];
  v700 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v690);
  v690.i64[0] = v695.u32[0];
  v690.i64[1] = v695.u32[1];
  v701 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v690);
  v690.i64[0] = v697.u32[0];
  v690.i64[1] = v697.u32[1];
  v702 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v690);
  v703 = vceqzq_s8(*(int8x16_t *)(v673 + 344));
  v704 = vmovl_s8(*(int8x8_t *)v703.i8);
  v705 = vmovl_high_s16(v704);
  v690.i64[0] = v705.u32[2];
  v690.i64[1] = v705.u32[3];
  v706 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v690);
  v707 = vmovl_high_s8(v703);
  v708 = vmovl_high_s16(v707);
  v690.i64[0] = v708.u32[2];
  v690.i64[1] = v708.u32[3];
  v709 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v690);
  v710 = vmovl_s16(*(int16x4_t *)v704.i8);
  v690.i64[0] = v710.u32[2];
  v690.i64[1] = v710.u32[3];
  v711 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v690);
  v712 = vmovl_s16(*(int16x4_t *)v707.i8);
  v690.i64[0] = v712.u32[2];
  v690.i64[1] = v712.u32[3];
  v713 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v690);
  v690.i64[0] = v705.u32[0];
  v690.i64[1] = v705.u32[1];
  v714 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v690);
  v690.i64[0] = v708.u32[0];
  v690.i64[1] = v708.u32[1];
  v715 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v690);
  v690.i64[0] = v710.u32[0];
  v690.i64[1] = v710.u32[1];
  v716 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v690);
  v690.i64[0] = v712.u32[0];
  v690.i64[1] = v712.u32[1];
  v717 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v690), v702);
  v718 = vorrq_s8(v716, v701);
  v719 = vorrq_s8(v715, v700);
  v720 = vorrq_s8(v714, v699);
  v721 = vorrq_s8(v713, v698);
  v722 = vorrq_s8(v711, v696);
  v723 = vorrq_s8(v709, v694);
  v724 = vorrq_s8(v706, v691);
  v725 = vceqzq_s8(*(int8x16_t *)(v673 + 360));
  v726 = vmovl_s8(*(int8x8_t *)v725.i8);
  v727 = vmovl_high_s16(v726);
  v728 = vmovl_high_s8(v725);
  v729 = vmovl_high_s16(v728);
  v730 = vmovl_s16(*(int16x4_t *)v726.i8);
  v731 = vmovl_s16(*(int16x4_t *)v728.i8);
  v690.i64[0] = v731.i32[0];
  v690.i64[1] = v731.i32[1];
  v732 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v690);
  v690.i64[0] = v730.i32[0];
  v690.i64[1] = v730.i32[1];
  v733 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v690);
  v690.i64[0] = v729.i32[0];
  v690.i64[1] = v729.i32[1];
  v734 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v690);
  v690.i64[0] = v727.i32[0];
  v690.i64[1] = v727.i32[1];
  v735 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v690);
  v690.i64[0] = v727.i32[2];
  v690.i64[1] = v727.i32[3];
  v736 = v690;
  v690.i64[0] = v729.i32[2];
  v690.i64[1] = v729.i32[3];
  v737 = v690;
  v690.i64[0] = v730.i32[2];
  v690.i64[1] = v730.i32[3];
  v738 = v690;
  v690.i64[0] = v731.i32[2];
  v690.i64[1] = v731.i32[3];
  v739 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v690);
  v740 = vceqzq_s8(*(int8x16_t *)(v673 + 376));
  v741 = vmovl_high_s8(v740);
  v742 = vmovl_s16(*(int16x4_t *)v741.i8);
  v743 = vmovl_s8(*(int8x8_t *)v740.i8);
  v744 = vmovl_s16(*(int16x4_t *)v743.i8);
  v745 = vmovl_high_s16(v741);
  v746 = vmovl_high_s16(v743);
  v690.i64[0] = v746.i32[2];
  v690.i64[1] = v746.i32[3];
  v747 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v690);
  v690.i64[0] = v745.i32[2];
  v690.i64[1] = v745.i32[3];
  v748 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v690);
  v690.i64[0] = v744.i32[2];
  v690.i64[1] = v744.i32[3];
  v749 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v690);
  v690.i64[0] = v742.i32[2];
  v690.i64[1] = v742.i32[3];
  v750 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v690);
  v690.i64[0] = v746.i32[0];
  v690.i64[1] = v746.i32[1];
  v751 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v690);
  v690.i64[0] = v745.i32[0];
  v690.i64[1] = v745.i32[1];
  v752 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v690);
  v690.i64[0] = v744.i32[0];
  v690.i64[1] = v744.i32[1];
  v753 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v690);
  v690.i64[0] = v742.i32[0];
  v690.i64[1] = v742.i32[1];
  *((_QWORD *)v673 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v753, v733), v718), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v690), v732), v717)), vorrq_s8(vorrq_s8(vorrq_s8(v751, v735), v720), vorrq_s8(vorrq_s8(v752, v734), v719))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v749, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v738)), v722), vorrq_s8(vorrq_s8(v750, v739), v721)), vorrq_s8(vorrq_s8(vorrq_s8(v747, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v736)),
                                                v724),
                                              vorrq_s8(vorrq_s8(v748, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v737)), v723)))));
  *((_QWORD *)v673 + 3) = &off_1E42B6BF8;
  v673[312] = 1;
  v754 = *(std::__shared_weak_count **)(v517 + 24);
  *(_QWORD *)(v517 + 16) = v673 + 24;
  *(_QWORD *)(v517 + 24) = v673;
  if (v754)
  {
    v755 = (unint64_t *)&v754->__shared_owners_;
    do
      v756 = __ldaxr(v755);
    while (__stlxr(v756 - 1, v755));
    if (!v756)
    {
      ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
      std::__shared_weak_count::__release_weak(v754);
    }
  }
  if (v669)
  {
    v757 = (unint64_t *)&v669->__shared_owners_;
    do
      v758 = __ldaxr(v757);
    while (__stlxr(v758 - 1, v757));
    if (!v758)
    {
      ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
      std::__shared_weak_count::__release_weak(v669);
    }
  }
  v759 = (uint64_t *)operator new();
  *(_QWORD *)v1269 = &off_1E42D2248;
  *(_QWORD *)&v1269[8] = v517;
  *(_QWORD *)&v1269[24] = v1269;
  v1270[0] = &off_1E42D6350;
  v1271 = v1270;
  v759[1] = 0;
  v759[2] = 0;
  *v759 = 0;
  {
    v1157 = operator new();
    *(_QWORD *)(v1157 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1157 + 24) = "GeoGL";
    *(_OWORD *)(v1157 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1157 = &off_1E42B5668;
    *(_QWORD *)(v1157 + 8) = "GeoGL";
    *(_OWORD *)(v1157 + 72) = 0u;
    *(_OWORD *)(v1157 + 88) = 0u;
    *(_OWORD *)(v1157 + 104) = 0u;
    *(_OWORD *)(v1157 + 120) = 0u;
    *(_OWORD *)(v1157 + 136) = 0u;
    *(_OWORD *)(v1157 + 152) = 0u;
    *(_OWORD *)(v1157 + 168) = 0u;
    *(_OWORD *)(v1157 + 184) = 0u;
    *(_OWORD *)(v1157 + 200) = 0u;
    *(_OWORD *)(v1157 + 216) = 0u;
    *(_OWORD *)(v1157 + 232) = 0u;
    *(_QWORD *)(v1157 + 248) = 0;
    *(_OWORD *)(v1157 + 56) = 0u;
    v1158 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1157 + 56), 0);
    if ((_DWORD)v1158)
      geo::read_write_lock::logFailure(v1158, (uint64_t)"initialization", v1159);
    v1160 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1157 + 48) = v1160;
    malloc_set_zone_name(v1160, "GeoGL");
    *(_QWORD *)(v1157 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1157;
    v684 = v1210;
  }
  v761 = ggl::Allocator::instance(void)::alloc;
  v759[4] = 0;
  v759[3] = v761;
  v759[5] = 0;
  v759[6] = 0;
  {
    v1161 = operator new();
    *(_QWORD *)(v1161 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1161 + 24) = "GeoGL";
    *(_OWORD *)(v1161 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1161 = &off_1E42B5668;
    *(_QWORD *)(v1161 + 8) = "GeoGL";
    *(_OWORD *)(v1161 + 72) = 0u;
    *(_OWORD *)(v1161 + 88) = 0u;
    *(_OWORD *)(v1161 + 104) = 0u;
    *(_OWORD *)(v1161 + 120) = 0u;
    *(_OWORD *)(v1161 + 136) = 0u;
    *(_OWORD *)(v1161 + 152) = 0u;
    *(_OWORD *)(v1161 + 168) = 0u;
    *(_OWORD *)(v1161 + 184) = 0u;
    *(_OWORD *)(v1161 + 200) = 0u;
    *(_OWORD *)(v1161 + 216) = 0u;
    *(_OWORD *)(v1161 + 232) = 0u;
    *(_QWORD *)(v1161 + 248) = 0;
    *(_OWORD *)(v1161 + 56) = 0u;
    v1162 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1161 + 56), 0);
    if ((_DWORD)v1162)
      geo::read_write_lock::logFailure(v1162, (uint64_t)"initialization", v1163);
    v1164 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1161 + 48) = v1164;
    malloc_set_zone_name(v1164, "GeoGL");
    *(_QWORD *)(v1161 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1161;
    v684 = v1210;
  }
  v759[7] = ggl::Allocator::instance(void)::alloc;
  v762 = *(_QWORD *)&v1269[24];
  if (!*(_QWORD *)&v1269[24])
    goto LABEL_664;
  if (*(_BYTE **)&v1269[24] != v1269)
  {
    v762 = (*(uint64_t (**)(void))(**(_QWORD **)&v1269[24] + 16))();
LABEL_664:
    v759[11] = v762;
    goto LABEL_666;
  }
  v759[11] = (uint64_t)(v759 + 8);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1269 + 24))((uint64_t)v1269, v759 + 8);
LABEL_666:
  v763 = (uint64_t)v1271;
  if (!v1271)
  {
LABEL_669:
    v759[15] = v763;
    goto LABEL_671;
  }
  if (v1271 != v1270)
  {
    v763 = (*(uint64_t (**)(void))(*v1271 + 16))();
    goto LABEL_669;
  }
  v759[15] = (uint64_t)(v759 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1270[0] + 24))((uint64_t)v1270, v759 + 12);
LABEL_671:
  v759[16] = 2000;
  v764 = *v759;
  if ((unint64_t)(v759[2] - *v759) > 0x31F)
    goto LABEL_684;
  v765 = v759[1];
  v766 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759[3] + 16))(v759[3], 800, 8);
  v767 = v765 - v764;
  v768 = v766 + ((v765 - v764) & 0xFFFFFFFFFFFFFFF8);
  v770 = *v759;
  v769 = v759[1];
  v771 = v769 - *v759;
  if (v769 == *v759)
  {
    v773 = v766 + ((v765 - v764) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_682;
  }
  v772 = v771 - 8;
  if ((unint64_t)(v771 - 8) >= 0x58)
  {
    v773 = v766 + ((v765 - v764) & 0xFFFFFFFFFFFFFFF8);
    if (v769 - (v767 & 0xFFFFFFFFFFFFFFF8) - v766 >= 0x20)
    {
      v774 = v767 >> 3;
      v775 = (v772 >> 3) + 1;
      v776 = (_OWORD *)(v766 + 8 * v774 - 16);
      v777 = (__int128 *)(v769 - 16);
      v778 = v775 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v779 = *v777;
        *(v776 - 1) = *(v777 - 1);
        *v776 = v779;
        v776 -= 2;
        v777 -= 2;
        v778 -= 4;
      }
      while (v778);
      v773 = v768 - 8 * (v775 & 0x3FFFFFFFFFFFFFFCLL);
      v769 -= 8 * (v775 & 0x3FFFFFFFFFFFFFFCLL);
      if (v775 == (v775 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_681;
    }
  }
  else
  {
    v773 = v766 + ((v765 - v764) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v780 = *(_QWORD *)(v769 - 8);
    v769 -= 8;
    *(_QWORD *)(v773 - 8) = v780;
    v773 -= 8;
  }
  while (v769 != v770);
LABEL_681:
  v769 = *v759;
LABEL_682:
  *v759 = v773;
  v759[1] = v768;
  v781 = v759[2];
  v759[2] = v766 + 800;
  if (v769)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759[3] + 40))(v759[3], v769, v781 - v769);
LABEL_684:
  v782 = v759[4];
  if ((unint64_t)(v759[6] - v782) > 0x31F)
    goto LABEL_697;
  v783 = v759[5];
  v784 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759[7] + 16))(v759[7], 800, 8);
  v785 = v783 - v782;
  v786 = v784 + ((v783 - v782) & 0xFFFFFFFFFFFFFFF8);
  v788 = v759[4];
  v787 = v759[5];
  v789 = v787 - v788;
  if (v787 == v788)
  {
    v791 = v784 + ((v783 - v782) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_695;
  }
  v790 = v789 - 8;
  if ((unint64_t)(v789 - 8) >= 0x58)
  {
    v791 = v784 + ((v783 - v782) & 0xFFFFFFFFFFFFFFF8);
    if (v787 - (v785 & 0xFFFFFFFFFFFFFFF8) - v784 >= 0x20)
    {
      v792 = v785 >> 3;
      v793 = (v790 >> 3) + 1;
      v794 = (_OWORD *)(v784 + 8 * v792 - 16);
      v795 = (__int128 *)(v787 - 16);
      v796 = v793 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v797 = *v795;
        *(v794 - 1) = *(v795 - 1);
        *v794 = v797;
        v794 -= 2;
        v795 -= 2;
        v796 -= 4;
      }
      while (v796);
      v791 = v786 - 8 * (v793 & 0x3FFFFFFFFFFFFFFCLL);
      v787 -= 8 * (v793 & 0x3FFFFFFFFFFFFFFCLL);
      if (v793 == (v793 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_694;
    }
  }
  else
  {
    v791 = v784 + ((v783 - v782) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v798 = *(_QWORD *)(v787 - 8);
    v787 -= 8;
    *(_QWORD *)(v791 - 8) = v798;
    v791 -= 8;
  }
  while (v787 != v788);
LABEL_694:
  v787 = v759[4];
LABEL_695:
  v759[4] = v791;
  v759[5] = v786;
  v799 = v759[6];
  v759[6] = v784 + 800;
  if (v787)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759[7] + 40))(v759[7], v787, v799 - v787);
LABEL_697:
  v800 = *(_QWORD *)(v517 + 48);
  *(_QWORD *)(v517 + 48) = v759;
  if (v800)
  {
    v801 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v800);
    MEMORY[0x1A1AF4E00](v801, 0x10A0C40D234DDC7);
  }
  v802 = v1271;
  if (v1271 == v1270)
  {
    v803 = 4;
    v802 = v1270;
  }
  else
  {
    if (!v1271)
      goto LABEL_704;
    v803 = 5;
  }
  (*(void (**)(void))(*v802 + 8 * v803))();
LABEL_704:
  v804 = *(_QWORD **)&v1269[24];
  if (*(_BYTE **)&v1269[24] == v1269)
  {
    v805 = 4;
    v804 = v1269;
    goto LABEL_708;
  }
  if (*(_QWORD *)&v1269[24])
  {
    v805 = 5;
LABEL_708:
    (*(void (**)(void))(*v804 + 8 * v805))();
  }
  v806 = operator new(0xA8uLL);
  v806[1] = 0;
  v806[2] = 0;
  *v806 = &off_1E42DE538;
  v807 = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v806 + 3), "/MaskingOverlay/FillMask");
  v808 = *(std::__shared_weak_count **)(v517 + 8);
  *(_QWORD *)v517 = v807;
  *(_QWORD *)(v517 + 8) = v806;
  if (v808)
  {
    v809 = (unint64_t *)&v808->__shared_owners_;
    do
      v810 = __ldaxr(v809);
    while (__stlxr(v810 - 1, v809));
    if (!v810)
    {
      ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
      std::__shared_weak_count::__release_weak(v808);
    }
  }
  v811 = **(_QWORD **)(*(_QWORD *)v517 + 64);
  v812 = 4 * *(_QWORD *)(v811 + 8);
  v813 = *(_QWORD *)(v811 + 72);
  v814 = *(_QWORD *)(v811 + 80) - v813;
  if (v812 != v814)
  {
    if (v812 <= v814)
    {
      if (v812 < v814)
        *(_QWORD *)(v811 + 80) = v813 + v812;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v811 + 72, v812 - v814);
    }
    v815 = *(std::__shared_weak_count **)(v811 + 32);
    *(_QWORD *)(v811 + 24) = 0;
    *(_QWORD *)(v811 + 32) = 0;
    if (v815)
    {
      v816 = (unint64_t *)&v815->__shared_owners_;
      do
        v817 = __ldaxr(v816);
      while (__stlxr(v817 - 1, v816));
      if (!v817)
      {
        ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
        std::__shared_weak_count::__release_weak(v815);
      }
    }
    *(_QWORD *)(v811 + 120) = 0;
    *(_DWORD *)(v811 + 112) = 0;
    v818 = *(_QWORD *)(v811 + 80) - *(_QWORD *)(v811 + 72);
    *(_QWORD *)(v811 + 40) = 0;
    *(_QWORD *)(v811 + 48) = v818;
    *(_QWORD *)(v811 + 56) = 0;
    *(_QWORD *)(v811 + 64) = v818;
    v811 = **(_QWORD **)(*(_QWORD *)v517 + 64);
    v812 = 4 * *(_QWORD *)(v811 + 8);
  }
  v819 = *(_QWORD *)(v811 + 72);
  *(_OWORD *)v819 = xmmword_19FFB39B0;
  *(_QWORD *)(v819 + 16) = 0x3F80000000000000;
  *(_QWORD *)(v819 + 24) = 0;
  *(_QWORD *)(v819 + 32) = 0;
  *(_DWORD *)(v819 + 40) = 0;
  *(_OWORD *)(v819 + 44) = xmmword_19FFB3950;
  *(_DWORD *)(v819 + 60) = 1065353216;
  v820 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v820->__shared_owners_ = 0;
  v821 = (unint64_t *)&v820->__shared_owners_;
  v820->__shared_weak_owners_ = 0;
  v820->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v822 = ggl::BufferData::BufferData((uint64_t)&v820[1], 2, 1, 0, 6, 6);
  LODWORD(v820[10].__vftable) = 0;
  v820[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v820[1].__shared_owners_ = 2;
  v820[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v820[9].__shared_weak_owners_ = (uint64_t)"/MaskingOverlay/IndexData";
  v823 = v820[4].__vftable;
  v823->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x1000100000003;
  LODWORD(v823->~__shared_weak_count_0) = 196610;
  v824 = *(_QWORD *)v517;
  do
    v825 = __ldxr(v821);
  while (__stxr(v825 + 1, v821));
  do
    v826 = __ldxr(v821);
  while (__stxr(v826 + 1, v821));
  v827 = *(std::__shared_weak_count **)(v824 + 104);
  *(_QWORD *)(v824 + 96) = v822;
  *(_QWORD *)(v824 + 104) = v820;
  if (v827)
  {
    v828 = (unint64_t *)&v827->__shared_owners_;
    do
      v829 = __ldaxr(v828);
    while (__stlxr(v829 - 1, v828));
    if (!v829)
    {
      ((void (*)(std::__shared_weak_count *))v827->__on_zero_shared)(v827);
      std::__shared_weak_count::__release_weak(v827);
    }
  }
  do
    v830 = __ldaxr(v821);
  while (__stlxr(v830 - 1, v821));
  if (!v830)
  {
    ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
    std::__shared_weak_count::__release_weak(v820);
  }
  shared_weak_owners = v820[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC)
    shared_weak_owners = 12;
  v820[3].__shared_owners_ = 0;
  v820[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v832 = __ldaxr(v821);
  while (__stlxr(v832 - 1, v821));
  if (!v832)
  {
    ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
    std::__shared_weak_count::__release_weak(v820);
  }
  v833 = *(_QWORD *)(v811 + 64);
  if (v833 <= v812)
    v833 = v812;
  *(_QWORD *)(v811 + 56) = 0;
  *(_QWORD *)(v811 + 64) = v833;

  v834 = *v1202;
  *v1202 = (md::MaskingOverlayRenderable::SharedResources *)v517;
  if (v834)
  {
    md::MaskingOverlayRenderable::SharedResources::~SharedResources(v834);
    MEMORY[0x1A1AF4E00]();
  }
  v835 = operator new();
  *(_DWORD *)(v835 + 32) = 0;
  *(_QWORD *)(v835 + 16) = 0;
  *(_QWORD *)(v835 + 24) = 0;
  *(_QWORD *)v835 = &off_1E42B5DE8;
  *(_QWORD *)(v835 + 8) = 0;
  *(_QWORD *)(v835 + 36) = 65537;
  *(_DWORD *)(v835 + 44) = 0;
  *(_QWORD *)(v835 + 48) = 0x7F7F0200000600;
  *(_WORD *)(v835 + 56) = 0;
  *(_BYTE *)(v835 + 58) = 3;
  *(_QWORD *)(v835 + 67) = 0;
  *(_QWORD *)(v835 + 59) = 0;
  *(_BYTE *)(v835 + 75) = 0;
  *(_QWORD *)(v835 + 132) = 0;
  *(_QWORD *)(v835 + 124) = 0;
  *(_WORD *)(v835 + 188) = 257;
  *(_QWORD *)(v835 + 192) = 0;
  *(_QWORD *)(v835 + 200) = 0;
  *(_BYTE *)(v835 + 208) = 0;
  v836 = *(_QWORD *)this;
  *(_QWORD *)this = v835;
  if (v836)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v836 + 8))(v836);
    v835 = *(_QWORD *)this;
  }
  *(_BYTE *)(v835 + 208) = 1;
  *(_BYTE *)(v835 + 56) = 1;
  v837 = operator new();
  *(_DWORD *)(v837 + 32) = 0;
  *(_QWORD *)(v837 + 16) = 0;
  *(_QWORD *)(v837 + 24) = 0;
  *(_QWORD *)v837 = &off_1E42B5DE8;
  *(_QWORD *)(v837 + 8) = 0;
  *(_QWORD *)(v837 + 36) = 65537;
  *(_DWORD *)(v837 + 44) = 0;
  *(_QWORD *)(v837 + 48) = 0xFF7F0200000600;
  *(_WORD *)(v837 + 56) = 0;
  *(_BYTE *)(v837 + 58) = 3;
  *(_QWORD *)(v837 + 67) = 0;
  *(_QWORD *)(v837 + 59) = 0;
  *(_BYTE *)(v837 + 75) = 0;
  *(_QWORD *)(v837 + 132) = 0;
  *(_QWORD *)(v837 + 124) = 0;
  *(_WORD *)(v837 + 188) = 257;
  *(_QWORD *)(v837 + 192) = 0;
  *(_QWORD *)(v837 + 200) = 0;
  *(_BYTE *)(v837 + 208) = 0;
  v838 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v837;
  if (v838)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v838 + 8))(v838);
    v837 = *((_QWORD *)this + 1);
  }
  *(_BYTE *)(v837 + 208) = 1;
  *(_BYTE *)(v837 + 56) = 1;
  v839 = operator new();
  *(_DWORD *)(v839 + 32) = 0;
  *(_QWORD *)(v839 + 16) = 0;
  *(_QWORD *)(v839 + 24) = 0;
  *(_QWORD *)v839 = &off_1E42B5DE8;
  *(_QWORD *)(v839 + 8) = 0;
  *(_QWORD *)(v839 + 36) = 0x3F80000000010300;
  *(_DWORD *)(v839 + 44) = 1065353216;
  *(_QWORD *)(v839 + 48) = 0x7F7F0200000600;
  *(_WORD *)(v839 + 56) = 0;
  *(_BYTE *)(v839 + 58) = 3;
  *(_QWORD *)(v839 + 67) = 0;
  *(_QWORD *)(v839 + 59) = 0;
  *(_BYTE *)(v839 + 75) = 0;
  *(_QWORD *)(v839 + 132) = 0;
  *(_QWORD *)(v839 + 124) = 0;
  *(_WORD *)(v839 + 188) = 257;
  *(_QWORD *)(v839 + 192) = 0;
  *(_QWORD *)(v839 + 200) = 0;
  *(_BYTE *)(v839 + 208) = 0;
  v840 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v839;
  if (v840)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v840 + 8))(v840);
    v839 = *((_QWORD *)this + 2);
  }
  *(_BYTE *)(v839 + 208) = 1;
  *(_BYTE *)(v839 + 56) = 1;
  v841 = operator new();
  *(_DWORD *)(v841 + 32) = 0;
  *(_QWORD *)(v841 + 16) = 0;
  *(_QWORD *)(v841 + 24) = 0;
  *(_QWORD *)v841 = &off_1E42B5DE8;
  *(_QWORD *)(v841 + 8) = 0;
  *(_QWORD *)(v841 + 36) = 0x3F80000000010300;
  *(_DWORD *)(v841 + 44) = 1065353216;
  *(_QWORD *)(v841 + 48) = 0xFF7F0200000600;
  *(_WORD *)(v841 + 56) = 0;
  *(_BYTE *)(v841 + 58) = 3;
  *(_QWORD *)(v841 + 67) = 0;
  *(_QWORD *)(v841 + 59) = 0;
  *(_BYTE *)(v841 + 75) = 0;
  *(_QWORD *)(v841 + 132) = 0;
  *(_QWORD *)(v841 + 124) = 0;
  *(_WORD *)(v841 + 188) = 257;
  *(_QWORD *)(v841 + 192) = 0;
  *(_QWORD *)(v841 + 200) = 0;
  *(_BYTE *)(v841 + 208) = 0;
  v842 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v841;
  if (v842)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v842 + 8))(v842);
    v841 = *((_QWORD *)this + 3);
  }
  *(_BYTE *)(v841 + 208) = 1;
  *(_BYTE *)(v841 + 56) = 1;
  v843 = operator new();
  *(_DWORD *)(v843 + 32) = 0;
  *(_QWORD *)(v843 + 16) = 0;
  *(_QWORD *)(v843 + 24) = 0;
  *(_QWORD *)v843 = &off_1E42B5DE8;
  *(_QWORD *)(v843 + 8) = 0;
  *(_QWORD *)(v843 + 36) = 0xC61C400000010300;
  *(_DWORD *)(v843 + 44) = -1046478848;
  *(_QWORD *)(v843 + 48) = 0x7F7F0200000600;
  *(_WORD *)(v843 + 56) = 0;
  *(_BYTE *)(v843 + 58) = 3;
  *(_QWORD *)(v843 + 67) = 0;
  *(_QWORD *)(v843 + 59) = 0;
  *(_BYTE *)(v843 + 75) = 0;
  *(_QWORD *)(v843 + 132) = 0;
  *(_QWORD *)(v843 + 124) = 0;
  *(_WORD *)(v843 + 188) = 257;
  *(_QWORD *)(v843 + 192) = 0;
  *(_QWORD *)(v843 + 200) = 0;
  *(_BYTE *)(v843 + 208) = 0;
  v844 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v843;
  if (v844)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v844 + 8))(v844);
    v843 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v843 + 208) = 1;
  *(_BYTE *)(v843 + 56) = 1;
  v845 = operator new();
  *(_DWORD *)(v845 + 32) = 0;
  *(_QWORD *)(v845 + 16) = 0;
  *(_QWORD *)(v845 + 24) = 0;
  *(_QWORD *)v845 = &off_1E42B5DE8;
  *(_QWORD *)(v845 + 8) = 0;
  *(_QWORD *)(v845 + 36) = 0xC61C400000010300;
  *(_DWORD *)(v845 + 44) = -1046478848;
  *(_QWORD *)(v845 + 48) = 0xFF7F0200000600;
  *(_WORD *)(v845 + 56) = 0;
  *(_BYTE *)(v845 + 58) = 3;
  *(_QWORD *)(v845 + 67) = 0;
  *(_QWORD *)(v845 + 59) = 0;
  *(_BYTE *)(v845 + 75) = 0;
  *(_QWORD *)(v845 + 132) = 0;
  *(_QWORD *)(v845 + 124) = 0;
  *(_WORD *)(v845 + 188) = 257;
  *(_QWORD *)(v845 + 192) = 0;
  *(_QWORD *)(v845 + 200) = 0;
  *(_BYTE *)(v845 + 208) = 0;
  v846 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v845;
  if (v846)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v846 + 8))(v846);
    v845 = *((_QWORD *)this + 5);
  }
  *(_BYTE *)(v845 + 208) = 1;
  *(_BYTE *)(v845 + 56) = 1;
  v847 = operator new();
  *(_DWORD *)(v847 + 32) = 0;
  *(_QWORD *)(v847 + 16) = 0;
  *(_QWORD *)(v847 + 24) = 0;
  *(_QWORD *)v847 = &off_1E42B5DE8;
  *(_QWORD *)(v847 + 8) = 0;
  *(_QWORD *)(v847 + 36) = 65537;
  *(_DWORD *)(v847 + 44) = 0;
  *(_QWORD *)(v847 + 48) = 0x7F7F0200000600;
  *(_WORD *)(v847 + 56) = 0;
  *(_BYTE *)(v847 + 58) = 3;
  *(_QWORD *)(v847 + 67) = 0;
  *(_QWORD *)(v847 + 59) = 0;
  *(_BYTE *)(v847 + 75) = 0;
  *(_QWORD *)(v847 + 132) = 0;
  *(_QWORD *)(v847 + 124) = 0;
  *(_WORD *)(v847 + 188) = 257;
  *(_QWORD *)(v847 + 192) = 0;
  *(_QWORD *)(v847 + 200) = 0;
  *(_BYTE *)(v847 + 208) = 0;
  v848 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v847;
  if (v848)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v848 + 8))(v848);
    v847 = *((_QWORD *)this + 12);
  }
  *(_BYTE *)(v847 + 208) = 1;
  *(_BYTE *)(v847 + 56) = 1;
  if (a4)
  {
    v849 = operator new();
    *(_DWORD *)(v849 + 32) = 0;
    *(_QWORD *)(v849 + 16) = 0;
    *(_QWORD *)(v849 + 24) = 0;
    *(_QWORD *)v849 = &off_1E42B5DE8;
    *(_QWORD *)(v849 + 8) = 0;
    *(_DWORD *)(v849 + 44) = 1056964608;
    *(_QWORD *)(v849 + 36) = 66560;
    *(_QWORD *)(v849 + 48) = 0x7F7F0200000600;
    *(_WORD *)(v849 + 56) = 0;
    *(_BYTE *)(v849 + 58) = 3;
    *(_QWORD *)(v849 + 67) = 0;
    *(_QWORD *)(v849 + 59) = 0;
    *(_BYTE *)(v849 + 75) = 0;
    *(_QWORD *)(v849 + 132) = 0;
    *(_QWORD *)(v849 + 124) = 0;
    *(_WORD *)(v849 + 188) = 257;
    *(_BYTE *)(v849 + 208) = 0;
    *(_QWORD *)(v849 + 192) = 0;
    *(_QWORD *)(v849 + 200) = 0;
    v850 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v849;
    if (v850)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v850 + 8))(v850);
      v849 = *((_QWORD *)this + 6);
    }
    *(_BYTE *)(v849 + 208) = 1;
    *(_BYTE *)(v849 + 56) = 1;
    v851 = operator new();
    *(_DWORD *)(v851 + 32) = 0;
    *(_QWORD *)(v851 + 16) = 0;
    *(_QWORD *)(v851 + 24) = 0;
    *(_QWORD *)v851 = &off_1E42B5DE8;
    *(_QWORD *)(v851 + 8) = 0;
    *(_DWORD *)(v851 + 44) = 1056964608;
    *(_QWORD *)(v851 + 36) = 66560;
    *(_QWORD *)(v851 + 48) = 0xFF7F0200000600;
    *(_WORD *)(v851 + 56) = 0;
    *(_BYTE *)(v851 + 58) = 3;
    *(_QWORD *)(v851 + 67) = 0;
    *(_QWORD *)(v851 + 59) = 0;
    *(_BYTE *)(v851 + 75) = 0;
    *(_QWORD *)(v851 + 132) = 0;
    *(_QWORD *)(v851 + 124) = 0;
    *(_WORD *)(v851 + 188) = 257;
    *(_BYTE *)(v851 + 208) = 0;
    *(_QWORD *)(v851 + 192) = 0;
    *(_QWORD *)(v851 + 200) = 0;
    v852 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v851;
    if (v852)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v852 + 8))(v852);
      v851 = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v851 + 208) = 1;
    *(_BYTE *)(v851 + 56) = 1;
    v853 = operator new();
    v854 = ggl::BufferData::BufferData(v853, qword_1EE562718, 2, 1, 6, 1);
    *(_QWORD *)(v854 + 200) = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    *(_QWORD *)v854 = &off_1E42B92B0;
    v855 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v854;
    if (v855)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v855 + 8))(v855);
      v854 = *((_QWORD *)this + 21);
    }
    v856 = *(_QWORD *)(v854 + 8);
    **(_DWORD **)(v854 + 72) = 1065353216;
    if (*(_QWORD *)(v854 + 64) > v856)
      v856 = *(_QWORD *)(v854 + 64);
    *(_QWORD *)(v854 + 56) = 0;
    *(_QWORD *)(v854 + 64) = v856;
    v857 = operator new();
    v858 = (_QWORD *)ggl::BufferData::BufferData(v857, qword_1EE562718, 2, 1, 6, 1);
    v858[25] = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    *v858 = &off_1E42B92B0;
    v859 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v858;
    if (v859)
      (*(void (**)(uint64_t))(*(_QWORD *)v859 + 8))(v859);
  }
  v860 = operator new();
  *(_BYTE *)v860 = 0;
  *(_QWORD *)(v860 + 12) = 0;
  *(_QWORD *)(v860 + 4) = 0;
  *(_BYTE *)(v860 + 20) = 0;
  *(_DWORD *)(v860 + 24) = 1065353216;
  *(_BYTE *)(v860 + 28) = 0;
  *(_DWORD *)(v860 + 32) = 0;
  v861 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v860;
  if (v861)
  {
    MEMORY[0x1A1AF4E00](v861, 0x1000C4049ECCB0CLL);
    v860 = *((_QWORD *)this + 9);
  }
  *(_BYTE *)(v860 + 28) = 127;
  *(_DWORD *)(v860 + 32) = 0;
  v862 = operator new();
  *(_DWORD *)(v862 + 32) = 0;
  *(_QWORD *)(v862 + 16) = 0;
  *(_QWORD *)(v862 + 24) = 0;
  *(_QWORD *)v862 = &off_1E42B5DE8;
  *(_QWORD *)(v862 + 8) = 0;
  *(_QWORD *)(v862 + 36) = 65537;
  *(_DWORD *)(v862 + 44) = 0;
  *(_QWORD *)(v862 + 48) = 0x7F7F0200000600;
  *(_WORD *)(v862 + 56) = 0;
  *(_BYTE *)(v862 + 58) = 3;
  *(_QWORD *)(v862 + 67) = 0;
  *(_QWORD *)(v862 + 59) = 0;
  *(_BYTE *)(v862 + 75) = 0;
  *(_QWORD *)(v862 + 132) = 0;
  *(_QWORD *)(v862 + 124) = 0;
  *(_WORD *)(v862 + 188) = 257;
  *(_QWORD *)(v862 + 192) = 0;
  *(_QWORD *)(v862 + 200) = 0;
  *(_BYTE *)(v862 + 208) = 0;
  v863 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v862;
  if (v863)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v863 + 8))(v863);
    v862 = *((_QWORD *)this + 13);
  }
  *(_BYTE *)(v862 + 208) = 1;
  v864 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v684, "shaderLibrary", v1193, v1194, *(_QWORD *)&v1195, (char *)this + 144, (char *)this + 112, (char *)this + 80)+ 80);
  v865 = *(uint64_t (***)())(v864 + 1712);
  v866 = *(std::__shared_weak_count **)(v864 + 1720);
  v1272 = v865;
  v1273 = v866;
  if (v866)
  {
    v867 = (unint64_t *)&v866->__shared_owners_;
    do
      v868 = __ldxr(v867);
    while (__stxr(v868 + 1, v867));
  }
  memset(&v1269[20], 0, 25);
  v1269[0] = 0;
  *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
  v869 = operator new(0x198uLL);
  v869[1] = 0;
  v869[2] = 0;
  *v869 = &off_1E42E0C28;
  v870 = *(_OWORD *)&a3->colorFormatsCount;
  v1275 = *(_OWORD *)a3->colorFormats;
  v1276 = v870;
  v871 = ggl::PolygonSolidFill::MeshPipelineState::MeshPipelineState((uint64_t)(v869 + 3), &v1272, (uint64_t)v1269, &v1275, 0);
  v872 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = v871;
  *((_QWORD *)this + 15) = v869;
  if (v872)
  {
    v873 = (unint64_t *)&v872->__shared_owners_;
    do
      v874 = __ldaxr(v873);
    while (__stlxr(v874 - 1, v873));
    if (!v874)
    {
      ((void (*)(std::__shared_weak_count *))v872->__on_zero_shared)(v872);
      std::__shared_weak_count::__release_weak(v872);
    }
  }
  v875 = v1273;
  if (v1273)
  {
    v876 = (unint64_t *)&v1273->__shared_owners_;
    do
      v877 = __ldaxr(v876);
    while (__stlxr(v877 - 1, v876));
    if (!v877)
    {
      ((void (*)(std::__shared_weak_count *))v875->__on_zero_shared)(v875);
      std::__shared_weak_count::__release_weak(v875);
    }
  }
  v878 = (unint64_t *)operator new();
  v1247[0] = &off_1E427A890;
  v1247[1] = this;
  v1248 = v1247;
  v1245[0] = &off_1E42D65D8;
  v1246 = v1245;
  ggl::FragmentedPool<ggl::PolygonSolidFill::MeshPipelineSetup>::FragmentedPool(v878, (uint64_t)v1247, (uint64_t)v1245, 0x64uLL, 0x7D0uLL);
  v879 = *v1201;
  *v1201 = (uint64_t)v878;
  if (v879)
  {
    v880 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v879);
    MEMORY[0x1A1AF4E00](v880, 0x10A0C40D234DDC7);
  }
  v881 = v1246;
  if (v1246 == v1245)
  {
    v882 = 4;
    v881 = v1245;
  }
  else
  {
    if (!v1246)
      goto LABEL_795;
    v882 = 5;
  }
  (*(void (**)(void))(*v881 + 8 * v882))();
LABEL_795:
  v883 = v1248;
  if (v1248 == v1247)
  {
    v884 = 4;
    v883 = v1247;
  }
  else
  {
    if (!v1248)
      goto LABEL_800;
    v884 = 5;
  }
  (*(void (**)(void))(*v883 + 8 * v884))();
LABEL_800:
  v885 = (unint64_t *)operator new();
  v1243[0] = &off_1E427A8D8;
  v1244 = v1243;
  v1241[0] = &off_1E42D60C8;
  v1242 = v1241;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v885, (uint64_t)v1243, (uint64_t)v1241);
  v886 = *v1200;
  *v1200 = (uint64_t)v885;
  if (v886)
  {
    v887 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v886);
    MEMORY[0x1A1AF4E00](v887, 0x10A0C40D234DDC7);
  }
  v888 = v1242;
  if (v1242 == v1241)
  {
    v889 = 4;
    v888 = v1241;
  }
  else
  {
    if (!v1242)
      goto LABEL_807;
    v889 = 5;
  }
  (*(void (**)(void))(*v888 + 8 * v889))();
LABEL_807:
  v890 = v1244;
  if (v1244 == v1243)
  {
    v891 = 4;
    v890 = v1243;
  }
  else
  {
    if (!v1244)
      goto LABEL_812;
    v891 = 5;
  }
  (*(void (**)(void))(*v890 + 8 * v891))();
LABEL_812:
  v892 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v684, "shaderLibrary") + 80);
  v893 = *(uint64_t (***)())(v892 + 1712);
  v894 = *(std::__shared_weak_count **)(v892 + 1720);
  v1272 = v893;
  v1273 = v894;
  if (v894)
  {
    v895 = (unint64_t *)&v894->__shared_owners_;
    do
      v896 = __ldxr(v895);
    while (__stxr(v896 + 1, v895));
  }
  memset(&v1269[20], 0, 25);
  v1269[0] = 0;
  *(_OWORD *)&v1269[4] = xmmword_19FFB3060;
  v897 = operator new(0x198uLL);
  v897[1] = 0;
  v897[2] = 0;
  *v897 = &off_1E42E0C28;
  v898 = *(_OWORD *)&a3->colorFormatsCount;
  v1275 = *(_OWORD *)a3->colorFormats;
  v1276 = v898;
  v899 = ggl::PolygonSolidFill::MeshPipelineState::MeshPipelineState((uint64_t)(v897 + 3), &v1272, (uint64_t)v1269, &v1275, 1);
  v900 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = v899;
  *((_QWORD *)this + 19) = v897;
  if (v900)
  {
    v901 = (unint64_t *)&v900->__shared_owners_;
    do
      v902 = __ldaxr(v901);
    while (__stlxr(v902 - 1, v901));
    if (!v902)
    {
      ((void (*)(std::__shared_weak_count *))v900->__on_zero_shared)(v900);
      std::__shared_weak_count::__release_weak(v900);
    }
  }
  v903 = v1273;
  if (v1273)
  {
    v904 = (unint64_t *)&v1273->__shared_owners_;
    do
      v905 = __ldaxr(v904);
    while (__stlxr(v905 - 1, v904));
    if (!v905)
    {
      ((void (*)(std::__shared_weak_count *))v903->__on_zero_shared)(v903);
      std::__shared_weak_count::__release_weak(v903);
    }
  }
  v906 = (unint64_t *)operator new();
  v1239[0] = &off_1E427A920;
  v1239[1] = this;
  v1240 = v1239;
  v1237[0] = &off_1E42D65D8;
  v1238 = v1237;
  ggl::FragmentedPool<ggl::PolygonSolidFill::MeshPipelineSetup>::FragmentedPool(v906, (uint64_t)v1239, (uint64_t)v1237, 0x64uLL, 0x7D0uLL);
  v907 = *v1199;
  *v1199 = (uint64_t)v906;
  if (v907)
  {
    v908 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v907);
    MEMORY[0x1A1AF4E00](v908, 0x10A0C40D234DDC7);
  }
  v909 = v1238;
  if (v1238 == v1237)
  {
    v910 = 4;
    v909 = v1237;
  }
  else
  {
    if (!v1238)
      goto LABEL_832;
    v910 = 5;
  }
  (*(void (**)(void))(*v909 + 8 * v910))();
LABEL_832:
  v911 = v1240;
  if (v1240 == v1239)
  {
    v912 = 4;
    v911 = v1239;
    goto LABEL_836;
  }
  if (v1240)
  {
    v912 = 5;
LABEL_836:
    (*(void (**)(void))(*v911 + 8 * v912))();
  }
  v913 = operator new(0xF8uLL);
  v913[2] = 0;
  *v913 = &off_1E42DF1E8;
  v913[1] = 0;
  v914 = ggl::BufferData::BufferData((uint64_t)(v913 + 3), 2, 1, 0, 6, 726);
  v916 = 0;
  *((_DWORD *)v913 + 60) = 0;
  v913[3] = &off_1E42B6B88;
  v913[4] = 2;
  v913[28] = &unk_1E42B6BA8;
  v913[29] = "index data";
  *(_QWORD *)&v1275 = v914;
  *((_QWORD *)&v1275 + 1) = v913;
  *(_OWORD *)v1269 = 0uLL;
  *(_QWORD *)&v917 = 0;
  *((_QWORD *)&v917 + 1) = v914;
  v918 = v913[12];
  *(_OWORD *)v1269 = v917;
  *(_OWORD *)&v1269[16] = xmmword_19FFB4F30;
  *(_QWORD *)&v1269[40] = v918;
  *(_WORD *)&v1269[32] = 1;
  v919 = v918 + 58;
  do
  {
    *(_WORD *)(v919 - 58) = 12 * v916;
    v920 = (12 * v916) | 1;
    *(_WORD *)(v919 - 56) = v920;
    v921 = 12 * v916 + 12;
    *(_WORD *)(v919 - 54) = v921;
    *(_WORD *)(v919 - 52) = v921;
    *(_WORD *)(v919 - 50) = v920;
    v922 = 12 * v916 + 13;
    *(_WORD *)(v919 - 48) = v922;
    *(_WORD *)(v919 - 46) = v920;
    v923 = (12 * v916) | 2;
    *(_WORD *)(v919 - 44) = v923;
    *(_WORD *)(v919 - 42) = v922;
    *(_WORD *)(v919 - 40) = v922;
    *(_WORD *)(v919 - 38) = v923;
    *(_WORD *)(v919 - 36) = 12 * v916 + 14;
    *(_WORD *)(v919 - 34) = v923;
    v924 = (12 * v916) | 3;
    *(_WORD *)(v919 - 32) = v924;
    *(_WORD *)(v919 - 30) = 12 * v916 + 14;
    *(_WORD *)(v919 - 28) = 12 * v916 + 14;
    *(_WORD *)(v919 - 26) = v924;
    v925 = 12 * v916 + 15;
    *(_WORD *)(v919 - 24) = v925;
    *(_WORD *)(v919 - 22) = v924;
    v926 = 12 * v916 + 4;
    *(_WORD *)(v919 - 20) = v926;
    *(_WORD *)(v919 - 18) = v925;
    *(_WORD *)(v919 - 16) = v925;
    *(_WORD *)(v919 - 14) = v926;
    v927 = 12 * v916 + 16;
    *(_WORD *)(v919 - 12) = v927;
    *(_WORD *)(v919 - 10) = v926;
    v928 = 12 * v916 + 5;
    *(_WORD *)(v919 - 8) = v928;
    *(_WORD *)(v919 - 6) = v927;
    *(_WORD *)(v919 - 4) = v927;
    *(_WORD *)(v919 - 2) = v928;
    v929 = 12 * v916 + 17;
    *(_WORD *)v919 = v929;
    *(_WORD *)(v919 + 2) = v928;
    v930 = 12 * v916 + 6;
    *(_WORD *)(v919 + 4) = v930;
    *(_WORD *)(v919 + 6) = v929;
    *(_WORD *)(v919 + 8) = v929;
    *(_WORD *)(v919 + 10) = v930;
    v931 = 12 * v916 + 18;
    *(_WORD *)(v919 + 12) = v931;
    *(_WORD *)(v919 + 14) = v930;
    v932 = 12 * v916 + 7;
    *(_WORD *)(v919 + 16) = v932;
    *(_WORD *)(v919 + 18) = v931;
    *(_WORD *)(v919 + 20) = v931;
    *(_WORD *)(v919 + 22) = v932;
    v933 = 12 * v916 + 19;
    *(_WORD *)(v919 + 24) = v933;
    *(_WORD *)(v919 + 26) = v932;
    v934 = 12 * v916 + 8;
    *(_WORD *)(v919 + 28) = v934;
    *(_WORD *)(v919 + 30) = v933;
    *(_WORD *)(v919 + 32) = v933;
    *(_WORD *)(v919 + 34) = v934;
    v935 = 12 * v916 + 20;
    *(_WORD *)(v919 + 36) = v935;
    *(_WORD *)(v919 + 38) = v934;
    *(_WORD *)(v919 + 40) = 12 * v916 + 9;
    *(_WORD *)(v919 + 42) = v935;
    *(_WORD *)(v919 + 44) = v935;
    *(_WORD *)(v919 + 46) = 12 * v916 + 9;
    *(_WORD *)(v919 + 48) = 12 * v916 + 21;
    *(_WORD *)(v919 + 50) = 12 * v916 + 9;
    *(_WORD *)(v919 + 54) = 12 * v916 + 21;
    *(_WORD *)(v919 + 56) = 12 * v916 + 21;
    *(int16x4_t *)v915.i8 = vadd_s16(vdup_n_s16(12 * (int)v916++), (int16x4_t)0x17000B0016000ALL);
    *(_WORD *)(v919 + 52) = v915.i16[0];
    *(int8x16_t *)(v919 + 58) = vqtbl1q_s8(v915, (int8x16_t)xmmword_19FFB3830);
    v919 += 132;
  }
  while (v916 != 11);
  v936 = operator new();
  if ((v937 & 1) == 0
  {
    if ((v1165 & 1) == 0
    {
      ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r = (uint64_t)&ggl::Textured::poleTexturedReflection;
    }
    ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r;
    unk_1EE578660 = 1;
  }
  *(_QWORD *)(v936 + 32) = 0;
  *(_QWORD *)(v936 + 40) = 0;
  *(_DWORD *)(v936 + 48) = 0;
  *(_QWORD *)v936 = &off_1E42BBC08;
  *(_QWORD *)(v936 + 8) = "QuadGrid";
  *(_QWORD *)(v936 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v936 + 24) = 0;
  *(_QWORD *)(v936 + 56) = &ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r;
  *(_QWORD *)(v936 + 64) = 0;
  v938 = (uint64_t **)(v936 + 64);
  *(_QWORD *)(v936 + 72) = 0;
  *(_QWORD *)(v936 + 80) = 0;
  {
    v1166 = operator new();
    *(_QWORD *)(v1166 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1166 + 24) = "GeoGL";
    *(_OWORD *)(v1166 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1166 = &off_1E42B5668;
    *(_QWORD *)(v1166 + 8) = "GeoGL";
    *(_OWORD *)(v1166 + 72) = 0u;
    *(_OWORD *)(v1166 + 88) = 0u;
    *(_OWORD *)(v1166 + 104) = 0u;
    *(_OWORD *)(v1166 + 120) = 0u;
    *(_OWORD *)(v1166 + 136) = 0u;
    *(_OWORD *)(v1166 + 152) = 0u;
    *(_OWORD *)(v1166 + 168) = 0u;
    *(_OWORD *)(v1166 + 184) = 0u;
    *(_OWORD *)(v1166 + 200) = 0u;
    *(_OWORD *)(v1166 + 216) = 0u;
    *(_OWORD *)(v1166 + 232) = 0u;
    *(_QWORD *)(v1166 + 248) = 0;
    *(_OWORD *)(v1166 + 56) = 0u;
    v1167 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1166 + 56), 0);
    if ((_DWORD)v1167)
      geo::read_write_lock::logFailure(v1167, (uint64_t)"initialization", v1168);
    v1169 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1166 + 48) = v1169;
    malloc_set_zone_name(v1169, "GeoGL");
    *(_QWORD *)(v1166 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1166;
  }
  v940 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v936 + 120) = 0;
  *(_QWORD *)(v936 + 96) = 0;
  *(_QWORD *)(v936 + 104) = 0;
  *(_QWORD *)(v936 + 88) = v940;
  {
    v1170 = operator new();
    *(_QWORD *)(v1170 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1170 + 24) = "GeoGL";
    *(_OWORD *)(v1170 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1170 = &off_1E42B5668;
    *(_QWORD *)(v1170 + 8) = "GeoGL";
    *(_OWORD *)(v1170 + 72) = 0u;
    *(_OWORD *)(v1170 + 88) = 0u;
    *(_OWORD *)(v1170 + 104) = 0u;
    *(_OWORD *)(v1170 + 120) = 0u;
    *(_OWORD *)(v1170 + 136) = 0u;
    *(_OWORD *)(v1170 + 152) = 0u;
    *(_OWORD *)(v1170 + 168) = 0u;
    *(_OWORD *)(v1170 + 184) = 0u;
    *(_OWORD *)(v1170 + 200) = 0u;
    *(_OWORD *)(v1170 + 216) = 0u;
    *(_OWORD *)(v1170 + 232) = 0u;
    *(_QWORD *)(v1170 + 248) = 0;
    *(_OWORD *)(v1170 + 56) = 0u;
    v1171 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1170 + 56), 0);
    if ((_DWORD)v1171)
      geo::read_write_lock::logFailure(v1171, (uint64_t)"initialization", v1172);
    v1173 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1170 + 48) = v1173;
    malloc_set_zone_name(v1173, "GeoGL");
    *(_QWORD *)(v1170 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1170;
  }
  *(_QWORD *)(v936 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v936 + 136) = 0;
  *(_QWORD *)(v936 + 112) = v936 + 120;
  *(_QWORD *)v936 = &off_1E42749B8;
  *(_QWORD *)(v936 + 16) = &unk_1E42749D8;
  v941 = *(_QWORD *)(v936 + 64);
  v942 = *(_QWORD *)(*(_QWORD *)(v936 + 56) + 8);
  v943 = *(_QWORD *)(v936 + 72);
  v944 = (v943 - v941) >> 4;
  v945 = v942 - v944;
  if (v942 <= v944)
  {
    if (v942 < v944)
    {
      v946 = v941 + 16 * v942;
      while (v943 != v946)
      {
        v947 = *(std::__shared_weak_count **)(v943 - 8);
        if (v947)
        {
          v948 = (unint64_t *)&v947->__shared_owners_;
          do
            v949 = __ldaxr(v948);
          while (__stlxr(v949 - 1, v948));
          if (!v949)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v947->__on_zero_shared)(v947, v945);
            std::__shared_weak_count::__release_weak(v947);
          }
        }
        v943 -= 16;
      }
      *(_QWORD *)(v936 + 72) = v946;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v936 + 64, v945);
  }
  *(_QWORD *)v936 = &off_1E4274898;
  *(_QWORD *)(v936 + 16) = &unk_1E42748B8;
  {
    v1174 = operator new();
    *(_QWORD *)(v1174 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1174 + 24) = "GeoGL";
    *(_OWORD *)(v1174 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1174 = &off_1E42B5668;
    *(_QWORD *)(v1174 + 8) = "GeoGL";
    *(_OWORD *)(v1174 + 72) = 0u;
    *(_OWORD *)(v1174 + 88) = 0u;
    *(_OWORD *)(v1174 + 104) = 0u;
    *(_OWORD *)(v1174 + 120) = 0u;
    *(_OWORD *)(v1174 + 136) = 0u;
    *(_OWORD *)(v1174 + 152) = 0u;
    *(_OWORD *)(v1174 + 168) = 0u;
    *(_OWORD *)(v1174 + 184) = 0u;
    *(_OWORD *)(v1174 + 200) = 0u;
    *(_OWORD *)(v1174 + 216) = 0u;
    *(_OWORD *)(v1174 + 232) = 0u;
    *(_QWORD *)(v1174 + 248) = 0;
    *(_OWORD *)(v1174 + 56) = 0u;
    v1175 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1174 + 56), 0);
    if ((_DWORD)v1175)
      geo::read_write_lock::logFailure(v1175, (uint64_t)"initialization", v1176);
    v1177 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1174 + 48) = v1177;
    malloc_set_zone_name(v1177, "GeoGL");
    *(_QWORD *)(v1174 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1174;
  }
  v951 = ggl::Allocator::instance(void)::alloc;
  v952 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v952 = &off_1E428A1E8;
  *(_QWORD *)(v952 + 8) = 0;
  *(_QWORD *)(v952 + 16) = 0;
  *(_QWORD *)(v952 + 24) = v951;
  *(_QWORD *)(v952 + 32) = &off_1E42B5748;
  *(_QWORD *)(v952 + 40) = 8;
  *(_DWORD *)(v952 + 48) = 6;
  v953 = 0uLL;
  *(_OWORD *)(v952 + 56) = 0u;
  *(_OWORD *)(v952 + 72) = 0u;
  *(_OWORD *)(v952 + 88) = 0u;
  *(_OWORD *)(v952 + 104) = 0u;
  *(_QWORD *)(v952 + 120) = 0;
  if ((v954 & 1) == 0)
  {
    v953 = 0uLL;
    if (v1178)
    {
      v1179 = operator new();
      *(_QWORD *)(v1179 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1179 + 24) = "GeoGL";
      *(_OWORD *)(v1179 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1179 = &off_1E42B5668;
      *(_QWORD *)(v1179 + 8) = "GeoGL";
      *(_OWORD *)(v1179 + 72) = 0u;
      *(_OWORD *)(v1179 + 88) = 0u;
      *(_OWORD *)(v1179 + 104) = 0u;
      *(_OWORD *)(v1179 + 120) = 0u;
      *(_OWORD *)(v1179 + 136) = 0u;
      *(_OWORD *)(v1179 + 152) = 0u;
      *(_OWORD *)(v1179 + 168) = 0u;
      *(_OWORD *)(v1179 + 184) = 0u;
      *(_OWORD *)(v1179 + 200) = 0u;
      *(_OWORD *)(v1179 + 216) = 0u;
      *(_OWORD *)(v1179 + 232) = 0u;
      *(_QWORD *)(v1179 + 248) = 0;
      *(_OWORD *)(v1179 + 56) = 0u;
      v1180 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1179 + 56), 0);
      if ((_DWORD)v1180)
        geo::read_write_lock::logFailure(v1180, (uint64_t)"initialization", v1181);
      v1182 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1179 + 48) = v1182;
      malloc_set_zone_name(v1182, "GeoGL");
      *(_QWORD *)(v1179 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v1179;
      v953 = 0uLL;
    }
  }
  *(_QWORD *)(v952 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v952 + 136) = 0;
  *(_OWORD *)(v952 + 200) = v953;
  *(_OWORD *)(v952 + 184) = v953;
  *(_OWORD *)(v952 + 168) = v953;
  *(_QWORD *)(v952 + 216) = 0;
  *(_QWORD *)(v952 + 224) = -1;
  *(_OWORD *)(v952 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v952 + 144) = 0;
  *(_QWORD *)(v952 + 240) = "QuadGrid";
  *(_QWORD *)(v952 + 248) = &ggl::Textured::poleTexturedReflection;
  *(_QWORD *)(v952 + 32) = &off_1E4274748;
  *(_QWORD *)(v952 + 232) = &unk_1E4274768;
  v955 = *v938;
  v956 = (std::__shared_weak_count *)(*v938)[1];
  *v955 = v952 + 32;
  v955[1] = v952;
  if (v956)
  {
    v957 = (unint64_t *)&v956->__shared_owners_;
    do
      v958 = __ldaxr(v957);
    while (__stlxr(v958 - 1, v957));
    if (!v958)
    {
      ((void (*)(std::__shared_weak_count *))v956->__on_zero_shared)(v956);
      std::__shared_weak_count::__release_weak(v956);
    }
  }
  v959 = v1275;
  if (*((_QWORD *)&v1275 + 1))
  {
    v960 = (unint64_t *)(*((_QWORD *)&v1275 + 1) + 8);
    do
      v961 = __ldxr(v960);
    while (__stxr(v961 + 1, v960));
    do
      v962 = __ldxr(v960);
    while (__stxr(v962 + 1, v960));
  }
  v963 = *(std::__shared_weak_count **)(v936 + 104);
  *(_OWORD *)(v936 + 96) = v959;
  if (v963)
  {
    v964 = (unint64_t *)&v963->__shared_owners_;
    do
      v965 = __ldaxr(v964);
    while (__stlxr(v965 - 1, v964));
    if (!v965)
    {
      ((void (*)(std::__shared_weak_count *))v963->__on_zero_shared)(v963);
      std::__shared_weak_count::__release_weak(v963);
    }
  }
  if (*((_QWORD *)&v959 + 1))
  {
    v966 = (unint64_t *)(*((_QWORD *)&v959 + 1) + 8);
    do
      v967 = __ldaxr(v966);
    while (__stlxr(v967 - 1, v966));
    if (!v967)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v959 + 1) + 16))(*((_QWORD *)&v959 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v959 + 1));
    }
  }
  v968 = **v938;
  v969 = *(_QWORD *)(v968 + 8);
  v970 = 144 * v969;
  v971 = *(_QWORD *)(v968 + 72);
  v972 = *(_QWORD *)(v968 + 80) - v971;
  if (144 * v969 != v972)
  {
    if (144 * v969 <= v972)
    {
      if (v970 < v972)
        *(_QWORD *)(v968 + 80) = v971 + v970;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v968 + 72, 144 * v969 - v972);
    }
    v973 = *(std::__shared_weak_count **)(v968 + 32);
    *(_QWORD *)(v968 + 24) = 0;
    *(_QWORD *)(v968 + 32) = 0;
    if (v973)
    {
      v974 = (unint64_t *)&v973->__shared_owners_;
      do
        v975 = __ldaxr(v974);
      while (__stlxr(v975 - 1, v974));
      if (!v975)
      {
        ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
        std::__shared_weak_count::__release_weak(v973);
      }
    }
    *(_QWORD *)(v968 + 120) = 0;
    *(_DWORD *)(v968 + 112) = 0;
    v976 = *(_QWORD *)(v968 + 80) - *(_QWORD *)(v968 + 72);
    *(_QWORD *)(v968 + 40) = 0;
    *(_QWORD *)(v968 + 48) = v976;
    *(_QWORD *)(v968 + 56) = 0;
    *(_QWORD *)(v968 + 64) = v976;
    v968 = **v938;
    v969 = *(_QWORD *)(v968 + 8);
  }
  v977 = 4 * v969;
  if (v977)
    v978 = *(_QWORD *)(v968 + 72);
  else
    v978 = 0;
  v979 = 0;
  v980 = v978 + 48;
  do
  {
    v981 = (float)v979 * 0.090909;
    *(_DWORD *)(v980 - 48) = 0;
    *(float *)(v980 - 44) = v981;
    *(_DWORD *)(v980 - 40) = 1035611788;
    *(float *)(v980 - 36) = v981;
    *(_DWORD *)(v980 - 32) = 1044000396;
    *(float *)(v980 - 28) = v981;
    *(_DWORD *)(v980 - 24) = 1049338601;
    *(float *)(v980 - 20) = v981;
    *(_DWORD *)(v980 - 16) = 1052389004;
    *(float *)(v980 - 12) = v981;
    *(_DWORD *)(v980 - 8) = 1055439407;
    *(float *)(v980 - 4) = v981;
    *(_DWORD *)v980 = 1057727209;
    *(float *)(v980 + 4) = v981;
    *(_DWORD *)(v980 + 8) = 1059252410;
    *(float *)(v980 + 12) = v981;
    *(_DWORD *)(v980 + 16) = 1060777612;
    *(float *)(v980 + 20) = v981;
    *(_DWORD *)(v980 + 24) = 1062302814;
    *(float *)(v980 + 28) = v981;
    *(_DWORD *)(v980 + 32) = 1063828015;
    *(float *)(v980 + 36) = v981;
    *(_DWORD *)(v980 + 40) = 1065353216;
    *(float *)(v980 + 44) = v981;
    ++v979;
    v980 += 96;
  }
  while (v979 != 12);
  if (v978 && v977)
  {
    if (*(_QWORD *)(v968 + 64) > v977)
      v977 = *(_QWORD *)(v968 + 64);
    *(_QWORD *)(v968 + 56) = 0;
    *(_QWORD *)(v968 + 64) = v977;
  }
  if (*(_QWORD *)&v1269[40])
  {
    v982 = *(_QWORD *)&v1269[16];
    v983 = *(_QWORD *)&v1269[24];
    if (*(_QWORD *)&v1269[24] != *(_QWORD *)&v1269[16])
    {
      v984 = *(_QWORD **)&v1269[8];
      v985 = v1269[32];
      v986 = v1269[33];
      if (*(_QWORD *)v1269 && *(_BYTE *)(*(_QWORD *)&v1269[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v1269 + 64))();
      if (v985 && !v986)
      {
        v988 = v984[7];
        v987 = v984[8];
        if (v987 == v988)
          v988 = v984[10] - v984[9];
        if (v982 < v988)
          v988 = v982;
        if (v987 <= v983)
          v987 = v983;
        if (v987 == v988)
          v987 = v988 + v984[10] - v984[9];
        v984[7] = v988;
        v984[8] = v987;
      }
    }
  }
  v989 = (std::__shared_weak_count *)*((_QWORD *)&v1275 + 1);
  if (*((_QWORD *)&v1275 + 1))
  {
    v990 = (unint64_t *)(*((_QWORD *)&v1275 + 1) + 8);
    do
      v991 = __ldaxr(v990);
    while (__stlxr(v991 - 1, v990));
    if (!v991)
    {
      ((void (*)(std::__shared_weak_count *))v989->__on_zero_shared)(v989);
      std::__shared_weak_count::__release_weak(v989);
    }
  }
  v992 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = v936;
  if (v992)
    (*(void (**)(uint64_t))(*(_QWORD *)v992 + 8))(v992);
  v993 = operator new(0xE8uLL);
  v993[1] = 0;
  v993[2] = 0;
  *v993 = &off_1E42E12F0;
  v994 = ggl::BufferData::BufferData((uint64_t)(v993 + 3), qword_1EE550A58, 2, 1, 6, 1);
  v993[28] = ggl::FlyoverCommon::Shared::reflection(void)::reflection;
  v993[3] = &off_1E42B8E50;
  v995 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 41) = v994;
  *((_QWORD *)this + 42) = v993;
  if (v995)
  {
    v996 = (unint64_t *)&v995->__shared_owners_;
    do
      v997 = __ldaxr(v996);
    while (__stlxr(v997 - 1, v996));
    if (!v997)
    {
      ((void (*)(std::__shared_weak_count *))v995->__on_zero_shared)(v995);
      std::__shared_weak_count::__release_weak(v995);
    }
  }
  v998 = operator new(0xE8uLL);
  v998[1] = 0;
  v998[2] = 0;
  *v998 = &off_1E42E12B8;
  v999 = ggl::BufferData::BufferData((uint64_t)(v998 + 3), qword_1EE550C18, 2, 1, 6, 1);
  v998[28] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v998[3] = &off_1E42B8E30;
  v1000 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 43) = v999;
  *((_QWORD *)this + 44) = v998;
  if (v1000)
  {
    v1001 = (unint64_t *)&v1000->__shared_owners_;
    do
      v1002 = __ldaxr(v1001);
    while (__stlxr(v1002 - 1, v1001));
    if (!v1002)
    {
      ((void (*)(std::__shared_weak_count *))v1000->__on_zero_shared)(v1000);
      std::__shared_weak_count::__release_weak(v1000);
    }
  }
  v1003 = operator new(0xE8uLL);
  v1003[1] = 0;
  v1003[2] = 0;
  *v1003 = &off_1E42E12B8;
  v1004 = ggl::BufferData::BufferData((uint64_t)(v1003 + 3), qword_1EE550C18, 2, 1, 6, 1);
  v1003[28] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v1003[3] = &off_1E42B8E30;
  v1005 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 45) = v1004;
  *((_QWORD *)this + 46) = v1003;
  if (v1005)
  {
    v1006 = (unint64_t *)&v1005->__shared_owners_;
    do
      v1007 = __ldaxr(v1006);
    while (__stlxr(v1007 - 1, v1006));
    if (!v1007)
    {
      ((void (*)(std::__shared_weak_count *))v1005->__on_zero_shared)(v1005);
      std::__shared_weak_count::__release_weak(v1005);
    }
  }
  v1008 = operator new(0xE8uLL);
  v1008[1] = 0;
  v1008[2] = 0;
  *v1008 = &off_1E42E12B8;
  v1009 = ggl::BufferData::BufferData((uint64_t)(v1008 + 3), qword_1EE550C18, 2, 1, 6, 1);
  v1008[28] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v1008[3] = &off_1E42B8E30;
  v1010 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 47) = v1009;
  *((_QWORD *)this + 48) = v1008;
  if (v1010)
  {
    v1011 = (unint64_t *)&v1010->__shared_owners_;
    do
      v1012 = __ldaxr(v1011);
    while (__stlxr(v1012 - 1, v1011));
    if (!v1012)
    {
      ((void (*)(std::__shared_weak_count *))v1010->__on_zero_shared)(v1010);
      std::__shared_weak_count::__release_weak(v1010);
    }
  }
  v1013 = (uint64_t *)operator new();
  v1235[0] = &off_1E427A968;
  v1235[1] = this;
  v1236 = v1235;
  v1233[0] = &off_1E427D4B8;
  v1234 = v1233;
  v1013[1] = 0;
  v1013[2] = 0;
  *v1013 = 0;
  {
    v1183 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1183, "GeoGL", 0xA3D02C1100000005);
  }
  v1015 = ggl::Allocator::instance(void)::alloc;
  v1013[4] = 0;
  v1013[3] = v1015;
  v1013[5] = 0;
  v1013[6] = 0;
  {
    v1184 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1184, "GeoGL", 0xA3D02C1100000005);
  }
  v1013[7] = ggl::Allocator::instance(void)::alloc;
  v1016 = (uint64_t)v1236;
  if (!v1236)
    goto LABEL_944;
  if (v1236 != v1235)
  {
    v1016 = (*(uint64_t (**)(void))(*v1236 + 16))();
LABEL_944:
    v1013[11] = v1016;
    goto LABEL_946;
  }
  v1013[11] = (uint64_t)(v1013 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1235[0] + 24))((uint64_t)v1235, v1013 + 8);
LABEL_946:
  v1017 = (uint64_t)v1234;
  if (!v1234)
  {
LABEL_949:
    v1013[15] = v1017;
    goto LABEL_951;
  }
  if (v1234 != v1233)
  {
    v1017 = (*(uint64_t (**)(void))(*v1234 + 16))();
    goto LABEL_949;
  }
  v1013[15] = (uint64_t)(v1013 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1233[0] + 24))((uint64_t)v1233, v1013 + 12);
LABEL_951:
  v1013[16] = 2000;
  v1018 = *v1013;
  if ((unint64_t)(v1013[2] - *v1013) > 0x31F)
    goto LABEL_964;
  v1019 = v1013[1];
  v1020 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1013[3] + 16))(v1013[3], 800, 8);
  v1021 = v1019 - v1018;
  v1022 = v1020 + ((v1019 - v1018) & 0xFFFFFFFFFFFFFFF8);
  v1024 = *v1013;
  v1023 = v1013[1];
  v1025 = v1023 - *v1013;
  if (v1023 == *v1013)
  {
    v1027 = v1020 + ((v1019 - v1018) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_962;
  }
  v1026 = v1025 - 8;
  if ((unint64_t)(v1025 - 8) >= 0x58)
  {
    v1027 = v1020 + ((v1019 - v1018) & 0xFFFFFFFFFFFFFFF8);
    if (v1023 - (v1021 & 0xFFFFFFFFFFFFFFF8) - v1020 >= 0x20)
    {
      v1028 = v1021 >> 3;
      v1029 = (v1026 >> 3) + 1;
      v1030 = (_OWORD *)(v1020 + 8 * v1028 - 16);
      v1031 = (__int128 *)(v1023 - 16);
      v1032 = v1029 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1033 = *v1031;
        *(v1030 - 1) = *(v1031 - 1);
        *v1030 = v1033;
        v1030 -= 2;
        v1031 -= 2;
        v1032 -= 4;
      }
      while (v1032);
      v1027 = v1022 - 8 * (v1029 & 0x3FFFFFFFFFFFFFFCLL);
      v1023 -= 8 * (v1029 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1029 == (v1029 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_961;
    }
  }
  else
  {
    v1027 = v1020 + ((v1019 - v1018) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1034 = *(_QWORD *)(v1023 - 8);
    v1023 -= 8;
    *(_QWORD *)(v1027 - 8) = v1034;
    v1027 -= 8;
  }
  while (v1023 != v1024);
LABEL_961:
  v1023 = *v1013;
LABEL_962:
  *v1013 = v1027;
  v1013[1] = v1022;
  v1035 = v1013[2];
  v1013[2] = v1020 + 800;
  if (v1023)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1013[3] + 40))(v1013[3], v1023, v1035 - v1023);
LABEL_964:
  v1036 = v1013[4];
  if ((unint64_t)(v1013[6] - v1036) > 0x31F)
    goto LABEL_977;
  v1037 = v1013[5];
  v1038 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1013[7] + 16))(v1013[7], 800, 8);
  v1039 = v1037 - v1036;
  v1040 = v1038 + ((v1037 - v1036) & 0xFFFFFFFFFFFFFFF8);
  v1042 = v1013[4];
  v1041 = v1013[5];
  v1043 = v1041 - v1042;
  if (v1041 == v1042)
  {
    v1045 = v1038 + ((v1037 - v1036) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_975;
  }
  v1044 = v1043 - 8;
  if ((unint64_t)(v1043 - 8) >= 0x58)
  {
    v1045 = v1038 + ((v1037 - v1036) & 0xFFFFFFFFFFFFFFF8);
    if (v1041 - (v1039 & 0xFFFFFFFFFFFFFFF8) - v1038 >= 0x20)
    {
      v1046 = v1039 >> 3;
      v1047 = (v1044 >> 3) + 1;
      v1048 = (_OWORD *)(v1038 + 8 * v1046 - 16);
      v1049 = (__int128 *)(v1041 - 16);
      v1050 = v1047 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1051 = *v1049;
        *(v1048 - 1) = *(v1049 - 1);
        *v1048 = v1051;
        v1048 -= 2;
        v1049 -= 2;
        v1050 -= 4;
      }
      while (v1050);
      v1045 = v1040 - 8 * (v1047 & 0x3FFFFFFFFFFFFFFCLL);
      v1041 -= 8 * (v1047 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1047 == (v1047 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_974;
    }
  }
  else
  {
    v1045 = v1038 + ((v1037 - v1036) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1052 = *(_QWORD *)(v1041 - 8);
    v1041 -= 8;
    *(_QWORD *)(v1045 - 8) = v1052;
    v1045 -= 8;
  }
  while (v1041 != v1042);
LABEL_974:
  v1041 = v1013[4];
LABEL_975:
  v1013[4] = v1045;
  v1013[5] = v1040;
  v1053 = v1013[6];
  v1013[6] = v1038 + 800;
  if (v1041)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1013[7] + 40))(v1013[7], v1041, v1053 - v1041);
LABEL_977:
  v1054 = *v1198;
  *v1198 = (uint64_t)v1013;
  if (v1054)
  {
    v1055 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1054);
    MEMORY[0x1A1AF4E00](v1055, 0x10A0C40D234DDC7);
  }
  v1056 = v1234;
  if (v1234 == v1233)
  {
    v1057 = 4;
    v1056 = v1233;
  }
  else
  {
    if (!v1234)
      goto LABEL_984;
    v1057 = 5;
  }
  (*(void (**)(void))(*v1056 + 8 * v1057))();
LABEL_984:
  v1058 = v1236;
  if (v1236 == v1235)
  {
    v1059 = 4;
    v1058 = v1235;
    goto LABEL_988;
  }
  if (v1236)
  {
    v1059 = 5;
LABEL_988:
    (*(void (**)(void))(*v1058 + 8 * v1059))();
  }
  v1060 = (uint64_t *)operator new();
  v1231[0] = &off_1E427A9B0;
  v1232 = v1231;
  v1229[0] = &off_1E427D3E0;
  v1230 = v1229;
  v1060[1] = 0;
  v1060[2] = 0;
  *v1060 = 0;
  {
    v1185 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1185, "GeoGL", 0xA3D02C1100000005);
  }
  v1062 = ggl::Allocator::instance(void)::alloc;
  v1060[4] = 0;
  v1060[3] = v1062;
  v1060[5] = 0;
  v1060[6] = 0;
  {
    v1186 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1186, "GeoGL", 0xA3D02C1100000005);
  }
  v1060[7] = ggl::Allocator::instance(void)::alloc;
  v1063 = (uint64_t)v1232;
  if (!v1232)
    goto LABEL_994;
  if (v1232 != v1231)
  {
    v1063 = (*(uint64_t (**)(void))(*v1232 + 16))();
LABEL_994:
    v1060[11] = v1063;
    goto LABEL_996;
  }
  v1060[11] = (uint64_t)(v1060 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1231[0] + 24))((uint64_t)v1231, v1060 + 8);
LABEL_996:
  v1064 = (uint64_t)v1230;
  if (!v1230)
  {
LABEL_999:
    v1060[15] = v1064;
    goto LABEL_1001;
  }
  if (v1230 != v1229)
  {
    v1064 = (*(uint64_t (**)(void))(*v1230 + 16))();
    goto LABEL_999;
  }
  v1060[15] = (uint64_t)(v1060 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1229[0] + 24))((uint64_t)v1229, v1060 + 12);
LABEL_1001:
  v1060[16] = 2000;
  v1065 = *v1060;
  if ((unint64_t)(v1060[2] - *v1060) > 0x31F)
    goto LABEL_1014;
  v1066 = v1060[1];
  v1067 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1060[3] + 16))(v1060[3], 800, 8);
  v1068 = v1066 - v1065;
  v1069 = v1067 + ((v1066 - v1065) & 0xFFFFFFFFFFFFFFF8);
  v1071 = *v1060;
  v1070 = v1060[1];
  v1072 = v1070 - *v1060;
  if (v1070 == *v1060)
  {
    v1074 = v1067 + ((v1066 - v1065) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1012;
  }
  v1073 = v1072 - 8;
  if ((unint64_t)(v1072 - 8) >= 0x58)
  {
    v1074 = v1067 + ((v1066 - v1065) & 0xFFFFFFFFFFFFFFF8);
    if (v1070 - (v1068 & 0xFFFFFFFFFFFFFFF8) - v1067 >= 0x20)
    {
      v1075 = v1068 >> 3;
      v1076 = (v1073 >> 3) + 1;
      v1077 = (_OWORD *)(v1067 + 8 * v1075 - 16);
      v1078 = (__int128 *)(v1070 - 16);
      v1079 = v1076 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1080 = *v1078;
        *(v1077 - 1) = *(v1078 - 1);
        *v1077 = v1080;
        v1077 -= 2;
        v1078 -= 2;
        v1079 -= 4;
      }
      while (v1079);
      v1074 = v1069 - 8 * (v1076 & 0x3FFFFFFFFFFFFFFCLL);
      v1070 -= 8 * (v1076 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1076 == (v1076 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1011;
    }
  }
  else
  {
    v1074 = v1067 + ((v1066 - v1065) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1081 = *(_QWORD *)(v1070 - 8);
    v1070 -= 8;
    *(_QWORD *)(v1074 - 8) = v1081;
    v1074 -= 8;
  }
  while (v1070 != v1071);
LABEL_1011:
  v1070 = *v1060;
LABEL_1012:
  *v1060 = v1074;
  v1060[1] = v1069;
  v1082 = v1060[2];
  v1060[2] = v1067 + 800;
  if (v1070)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1060[3] + 40))(v1060[3], v1070, v1082 - v1070);
LABEL_1014:
  v1083 = v1060[4];
  if ((unint64_t)(v1060[6] - v1083) > 0x31F)
    goto LABEL_1027;
  v1084 = v1060[5];
  v1085 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1060[7] + 16))(v1060[7], 800, 8);
  v1086 = v1084 - v1083;
  v1087 = v1085 + ((v1084 - v1083) & 0xFFFFFFFFFFFFFFF8);
  v1089 = v1060[4];
  v1088 = v1060[5];
  v1090 = v1088 - v1089;
  if (v1088 == v1089)
  {
    v1092 = v1085 + ((v1084 - v1083) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1025;
  }
  v1091 = v1090 - 8;
  if ((unint64_t)(v1090 - 8) >= 0x58)
  {
    v1092 = v1085 + ((v1084 - v1083) & 0xFFFFFFFFFFFFFFF8);
    if (v1088 - (v1086 & 0xFFFFFFFFFFFFFFF8) - v1085 >= 0x20)
    {
      v1093 = v1086 >> 3;
      v1094 = (v1091 >> 3) + 1;
      v1095 = (_OWORD *)(v1085 + 8 * v1093 - 16);
      v1096 = (__int128 *)(v1088 - 16);
      v1097 = v1094 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1098 = *v1096;
        *(v1095 - 1) = *(v1096 - 1);
        *v1095 = v1098;
        v1095 -= 2;
        v1096 -= 2;
        v1097 -= 4;
      }
      while (v1097);
      v1092 = v1087 - 8 * (v1094 & 0x3FFFFFFFFFFFFFFCLL);
      v1088 -= 8 * (v1094 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1094 == (v1094 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1024;
    }
  }
  else
  {
    v1092 = v1085 + ((v1084 - v1083) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1099 = *(_QWORD *)(v1088 - 8);
    v1088 -= 8;
    *(_QWORD *)(v1092 - 8) = v1099;
    v1092 -= 8;
  }
  while (v1088 != v1089);
LABEL_1024:
  v1088 = v1060[4];
LABEL_1025:
  v1060[4] = v1092;
  v1060[5] = v1087;
  v1100 = v1060[6];
  v1060[6] = v1085 + 800;
  if (v1088)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1060[7] + 40))(v1060[7], v1088, v1100 - v1088);
LABEL_1027:
  v1101 = *v1197;
  *v1197 = (uint64_t)v1060;
  if (v1101)
  {
    v1102 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1101);
    MEMORY[0x1A1AF4E00](v1102, 0x10A0C40D234DDC7);
  }
  v1103 = v1230;
  if (v1230 == v1229)
  {
    v1104 = 4;
    v1103 = v1229;
  }
  else
  {
    if (!v1230)
      goto LABEL_1034;
    v1104 = 5;
  }
  (*(void (**)(void))(*v1103 + 8 * v1104))();
LABEL_1034:
  v1105 = v1232;
  if (v1232 == v1231)
  {
    v1106 = 4;
    v1105 = v1231;
    goto LABEL_1038;
  }
  if (v1232)
  {
    v1106 = 5;
LABEL_1038:
    (*(void (**)(void))(*v1105 + 8 * v1106))();
  }
  if (v1220)
  {
    v1107 = v1217;
    v1108 = v1218;
    if (v1218 != v1217)
    {
      v1109 = (_QWORD *)*((_QWORD *)&v1216 + 1);
      v1110 = v1219;
      v1111 = HIBYTE(v1219);
      if ((_QWORD)v1216 && *(_BYTE *)(*((_QWORD *)&v1216 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v1216 + 64))();
      if (v1110 && !v1111)
      {
        v1113 = v1109[7];
        v1112 = v1109[8];
        if (v1112 == v1113)
          v1113 = v1109[10] - v1109[9];
        if (v1107 < v1113)
          v1113 = v1107;
        if (v1112 <= v1108)
          v1112 = v1108;
        if (v1112 == v1113)
          v1112 = v1113 + v1109[10] - v1109[9];
        v1109[7] = v1113;
        v1109[8] = v1112;
      }
    }
  }
  v1114 = v1222;
  if (v1222)
  {
    v1115 = (unint64_t *)&v1222->__shared_owners_;
    do
      v1116 = __ldaxr(v1115);
    while (__stlxr(v1116 - 1, v1115));
    if (!v1116)
    {
      ((void (*)(std::__shared_weak_count *))v1114->__on_zero_shared)(v1114);
      std::__shared_weak_count::__release_weak(v1114);
    }
  }
  if (v1226)
  {
    v1117 = v1224;
    if (*((_QWORD *)&v1224 + 1) != (_QWORD)v1224)
    {
      v1118 = (_QWORD *)*((_QWORD *)&v1223 + 1);
      v1119 = v1225;
      v1120 = HIBYTE(v1225);
      if ((_QWORD)v1223 && *(_BYTE *)(*((_QWORD *)&v1223 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v1223 + 64))();
      if (v1119 && !v1120)
      {
        v1122 = v1118[7];
        v1121 = v1118[8];
        if (v1121 == v1122)
          v1122 = v1118[10] - v1118[9];
        if ((unint64_t)v1117 < v1122)
          v1122 = v1117;
        if (v1121 <= *((_QWORD *)&v1117 + 1))
          v1121 = *((_QWORD *)&v1117 + 1);
        if (v1121 == v1122)
          v1121 = v1122 + v1118[10] - v1118[9];
        v1118[7] = v1122;
        v1118[8] = v1121;
      }
    }
  }
  v1123 = (std::__shared_weak_count *)v1228;
  if (v1228)
  {
    v1124 = (unint64_t *)(v1228 + 8);
    do
      v1125 = __ldaxr(v1124);
    while (__stlxr(v1125 - 1, v1124));
    if (!v1125)
    {
      ((void (*)(std::__shared_weak_count *))v1123->__on_zero_shared)(v1123);
      std::__shared_weak_count::__release_weak(v1123);
    }
  }

  return this;
}

void sub_19F9EF708(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  void *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  STACK[0x2C0] = a1;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v21 = v15[16];
  v15[16] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v15[15];
  v15[15] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v15[14];
  v15[14] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v15[13];
  v15[13] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v15[12];
  v15[12] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v15[11];
  v15[11] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v15[10];
  v15[10] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v15[9];
  v15[9] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v15[8];
  v15[8] = 0;
  if (v29)
  {
    v30 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v29);
    MEMORY[0x1A1AF4E00](v30, 0x10A0C40D234DDC7);
  }
  v31 = v15[7];
  v15[7] = 0;
  if (v31)
  {
    v32 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v31);
    MEMORY[0x1A1AF4E00](v32, 0x10A0C40D234DDC7);
  }
  v33 = v15[6];
  v15[6] = 0;
  if (v33)
  {
    v34 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v33);
    MEMORY[0x1A1AF4E00](v34, 0x10A0C40D234DDC7);
  }
  v35 = (std::__shared_weak_count *)v15[5];
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)v15[3];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)v15[1];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  MEMORY[0x1A1AF4E00](v15, 0x20C40A3A67D38);
  MEMORY[0x1A1AF4E00](v18, 0x20C40960023A9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x300]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x330]);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x340]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x370]);
  STACK[0x2D8] = (unint64_t)(v14 + 23);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x258]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x260]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 49));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 47));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 45));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 43));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 41));
  v44 = v14[40];
  v14[40] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x2B0]);
  std::unique_ptr<md::MaskingOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100]((md::MaskingOverlayRenderable::SharedResources **)STACK[0x280]);
  std::unique_ptr<md::PolygonOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100]((md::PolygonOverlayRenderResources ***)STACK[0x288]);
  std::unique_ptr<md::CircleOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100]((_QWORD *)STACK[0x290]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x2A0]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x2A8]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x298]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 31));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 29));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 27));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 25));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2D8]);
  v45 = v14[22];
  v14[22] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = v14[21];
  v14[21] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x268]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x270]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x278]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  v47 = v14[13];
  v14[13] = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v14[12];
  v14[12] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  v49 = v14[9];
  v14[9] = 0;
  if (v49)
    MEMORY[0x1A1AF4E00](v49, 0x1000C4049ECCB0CLL);
  v50 = v14[8];
  v14[8] = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = v14[7];
  v14[7] = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = v14[6];
  v14[6] = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = v14[5];
  v14[5] = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = v14[4];
  v14[4] = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = v14[3];
  v14[3] = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = v14[2];
  v14[2] = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = v14[1];
  v14[1] = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v14;
  *v14 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);

  _Unwind_Resume((_Unwind_Exception *)STACK[0x2C0]);
}

unint64_t *ggl::FragmentedPool<ggl::PolygonSolidFill::MeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v52 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v52, "GeoGL", 0xA3D02C1100000005);
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v11;
  a1[5] = 0;
  a1[6] = 0;
  {
    v53 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v13 = *(_QWORD *)(a2 + 24);
  if (!v13)
    goto LABEL_6;
  if (v13 != a2)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
LABEL_6:
    a1[11] = v13;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v14 = *(_QWORD *)(a3 + 24);
  if (!v14)
  {
LABEL_11:
    a1[15] = v14;
    goto LABEL_13;
  }
  if (v14 != a3)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = a5;
  v15 = *a1;
  if (a4 <= (uint64_t)(a1[2] - *a1) >> 3)
    goto LABEL_26;
  v16 = a1[1];
  v17 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 8 * a4, 8);
  v18 = v16 - v15;
  v19 = v17 + ((v16 - v15) & 0xFFFFFFFFFFFFFFF8);
  v21 = *a1;
  v20 = a1[1];
  v22 = v20 - *a1;
  if (v20 == *a1)
  {
    v24 = v17 + ((v16 - v15) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v23 = v22 - 8;
  if (v22 - 8 >= 0x58)
  {
    v24 = v17 + ((v16 - v15) & 0xFFFFFFFFFFFFFFF8);
    if (v20 - (v18 & 0xFFFFFFFFFFFFFFF8) - v17 >= 0x20)
    {
      v25 = v18 >> 3;
      v26 = (v23 >> 3) + 1;
      v27 = (_OWORD *)(v17 + 8 * v25 - 16);
      v28 = (__int128 *)(v20 - 16);
      v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *v28;
        *(v27 - 1) = *(v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 2;
        v29 -= 4;
      }
      while (v29);
      v24 = v19 - 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v20 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v24 = v17 + ((v16 - v15) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v31 = *(_QWORD *)(v20 - 8);
    v20 -= 8;
    *(_QWORD *)(v24 - 8) = v31;
    v24 -= 8;
  }
  while (v20 != v21);
LABEL_23:
  v20 = *a1;
LABEL_24:
  *a1 = v24;
  a1[1] = v19;
  v32 = a1[2];
  a1[2] = v17 + 8 * a4;
  if (v20)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v32 - v20);
LABEL_26:
  v33 = a1[4];
  if (a4 <= (uint64_t)(a1[6] - v33) >> 3)
    return a1;
  v34 = a1[5];
  v35 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 8 * a4, 8);
  v36 = v34 - v33;
  v37 = v35 + ((v34 - v33) & 0xFFFFFFFFFFFFFFF8);
  v39 = a1[4];
  v38 = a1[5];
  v40 = v38 - v39;
  if (v38 == v39)
  {
    v42 = v35 + ((v34 - v33) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v41 = v40 - 8;
  if (v40 - 8 >= 0x58)
  {
    v42 = v35 + ((v34 - v33) & 0xFFFFFFFFFFFFFFF8);
    if (v38 - (v36 & 0xFFFFFFFFFFFFFFF8) - v35 >= 0x20)
    {
      v43 = v36 >> 3;
      v44 = (v41 >> 3) + 1;
      v45 = (_OWORD *)(v35 + 8 * v43 - 16);
      v46 = (__int128 *)(v38 - 16);
      v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *v46;
        *(v45 - 1) = *(v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 2;
        v47 -= 4;
      }
      while (v47);
      v42 = v37 - 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      v38 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v42 = v35 + ((v34 - v33) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v49 = *(_QWORD *)(v38 - 8);
    v38 -= 8;
    *(_QWORD *)(v42 - 8) = v49;
    v42 -= 8;
  }
  while (v38 != v39);
LABEL_36:
  v38 = a1[4];
LABEL_37:
  a1[4] = v42;
  a1[5] = v37;
  v50 = a1[6];
  a1[6] = v35 + 8 * a4;
  if (v38)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v38, v50 - v38);
  return a1;
}

void sub_19F9F0F9C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

md::MaskingOverlayRenderable::SharedResources **std::unique_ptr<md::MaskingOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100](md::MaskingOverlayRenderable::SharedResources **a1)
{
  md::MaskingOverlayRenderable::SharedResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::MaskingOverlayRenderable::SharedResources::~SharedResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::PolygonOverlayRenderResources ***std::unique_ptr<md::PolygonOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100](md::PolygonOverlayRenderResources ***a1)
{
  md::PolygonOverlayRenderResources **v2;
  md::PolylineOverlaySharedResources *v3;
  md::PolygonOverlayRenderResources *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[2];
    v2[2] = 0;
    if (v3)
    {
      md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v3);
      MEMORY[0x1A1AF4E00]();
    }
    v4 = *v2;
    *v2 = 0;
    if (v4)
    {
      md::PolygonOverlayRenderResources::~PolygonOverlayRenderResources(v4);
      MEMORY[0x1A1AF4E00]();
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

_QWORD *std::unique_ptr<md::CircleOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[4];
    v2[4] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v2[3];
    v2[3] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v2[2];
    v2[2] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40769AC3DALL);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Textured10TileScalarEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Textured10TileScalarEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D3E0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Textured10TileScalarEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D3E0;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8>,ggl::ConstantDataTyped<ggl::Textured::TileScalar> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8>,ggl::ConstantDataTyped<ggl::Textured::TileScalar> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A9B0;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8>,ggl::ConstantDataTyped<ggl::Textured::TileScalar> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A9B0;
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8>,ggl::ConstantDataTyped<ggl::Textured::TileScalar> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE562C50, 2, 1, 6, 1);
  result[25] = ggl::Textured::TileScalar::reflection(void)::reflection;
  *result = &off_1E42B9F10;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured30PoleTexturedBlendPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured30PoleTexturedBlendPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D4B8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured30PoleTexturedBlendPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D4B8;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7>,ggl::Textured::PoleTexturedBlendPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7>,ggl::Textured::PoleTexturedBlendPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A968;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7>,ggl::Textured::PoleTexturedBlendPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A968;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7>,ggl::Textured::PoleTexturedBlendPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  if ((v3 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      if ((v31 & 1) == 0
      {
        ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r = (uint64_t)&ggl::Textured::poleTexturedReflection;
      }
      ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r;
      unk_1EE578660 = 1;
    }
    ggl::Textured::PoleTexturedBlendPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE577FE8 = &ggl::Textured::pipelineDataPoleTexturedBlendPipelineDeviceStructs(void)::ref;
    qword_1EE577FF0 = 0;
    if ((v30 & 1) == 0
    {
      ggl::Textured::pipelineDataPoleTexturedBlendPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      *(_QWORD *)algn_1EE578048 = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
      qword_1EE578050 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
      unk_1EE578058 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
    }
    qword_1EE577FF8 = (uint64_t)&ggl::Textured::pipelineDataPoleTexturedBlendPipelineConstantStructs(void)::ref;
    unk_1EE578000 = xmmword_19FFB48D0;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v2, (uint64_t)&ggl::Textured::PoleTexturedBlendPipelineSetup::typedReflection(void)::ref);
  *v2 = &off_1E4274928;
  v4 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A220;
  v6 = ggl::BufferData::BufferData((uint64_t)&v4[1], qword_1EE550B38, 2, 1, 6, 1);
  v4[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4274788;
  v7 = v2[8];
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  v8 = v2[20];
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v4;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (_QWORD *)v2[8];
  v14 = *(_QWORD *)(v1 + 328);
  v15 = *(_QWORD *)(v1 + 336);
  *v13 = v14;
  v13[1] = 0;
  v16 = (_QWORD *)v2[20];
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = v14;
  v16[1] = v15;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v2[8];
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v2[20];
  v24 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v2;
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A920;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A920;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_6>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v4 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v21 = v4;
  v22 = v3;
  v5 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v6 = ggl::BufferData::BufferData((uint64_t)&v5[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v5[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v19 = v6;
  v20 = v5;
  v7 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v9 = ggl::BufferData::BufferData((uint64_t)&v7[1], qword_1EE55CC40, 2, 1, 6, 1);
  v7[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  v18[0] = v9;
  v18[1] = (uint64_t)v7;
  ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v2, *(_QWORD *)(v1 + 144), *(std::__shared_weak_count **)(v1 + 152), &v21, &v19, v18);
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v2;
}

void sub_19F9F1AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  MEMORY[0x1A1AF4E00](v14, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonSolidFill::SolidFill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonSolidFill::SolidFill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonSolidFill::SolidFill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonSolidFill::SolidFill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonSolidFill::SolidFill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A8D8;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A8D8;
}

int64x2_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "OverlayTileStencil";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D65D8;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A890;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A890;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v4 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v21 = v4;
  v22 = v3;
  v5 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v6 = ggl::BufferData::BufferData((uint64_t)&v5[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v5[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v19 = v6;
  v20 = v5;
  v7 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v9 = ggl::BufferData::BufferData((uint64_t)&v7[1], qword_1EE55CC40, 2, 1, 6, 1);
  v7[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  v18[0] = v9;
  v18[1] = (uint64_t)v7;
  ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v2, *(_QWORD *)(v1 + 112), *(std::__shared_weak_count **)(v1 + 120), &v21, &v19, v18);
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v2;
}

void sub_19F9F205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  MEMORY[0x1A1AF4E00](v14, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::Textured::PoleTexturedBlendPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::PoleTexturedBlendPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::PoleTexturedBlendPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Textured::SRGBBlendPos4DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::SRGBBlendPos4DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::SRGBBlendPos4DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E50D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E50D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Textured::SRGBBlendPos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::SRGBBlendPos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos4DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos4DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D470;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos4DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D470;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Textured::SRGBBlendPos4DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Textured::SRGBBlendPos4DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A848;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Textured::SRGBBlendPos4DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A848;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Textured::SRGBBlendPos4DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE585510 = 1;
    }
    ggl::Textured::SRGBBlendPos4DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE577FB8 = &ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineDeviceStructs(void)::ref;
    qword_1EE577FC0 = 0;
    if ((v4 & 1) == 0
    {
      ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EE578020 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE578028 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
      unk_1EE578030 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
      qword_1EE578038 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    }
    qword_1EE577FC8 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1EE577FD0 = xmmword_19FFB3030;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::Textured::SRGBBlendPos4DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42748D8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured40SRGBBlendColormappedPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured40SRGBBlendColormappedPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7CA0;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1990;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE32CF8 = &ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineDeviceStructs(void)::ref;
    qword_1ECE32D00 = 0;
    if ((v4 & 1) == 0
    {
      ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE32D30 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE32D38 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
      unk_1ECE32D40 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
      qword_1ECE32D48 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    }
    qword_1ECE32D08 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineConstantStructs(void)::ref;
    unk_1ECE32D10 = xmmword_19FFB3020;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BCF28;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7C10;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::Textured::SRGBBlendPos2DUVPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::Textured::SRGBBlendPos2DUVPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1948;
  return result;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::Textured::SRGBBlendPos2DUVPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::Textured::SRGBBlendPos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE3C048 = &ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineDeviceStructs(void)::ref;
    qword_1ECE3C050 = 0;
    if ((v4 & 1) == 0
    {
      ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE3C080 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE3C088 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
      unk_1ECE3C090 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
      qword_1ECE3C098 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    }
    qword_1ECE3C058 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineConstantStructs(void)::ref;
    unk_1ECE3C060 = xmmword_19FFB3030;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::Textured::SRGBBlendPos2DUVPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BCE88;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1900;
  return result;
}

int64x2_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "RasterTile";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C6BA0;
  return result;
}

void std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C6BA0;
}

BOOL std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a3 + 384) + 169);
}

uint64_t md::COverlayRenderLayer::COverlayRenderLayer(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  VKSharedResources *v9;
  char v10;
  char v11;
  _WORD *v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  _WORD *v16;
  _WORD *v17;
  __int128 **v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  md::COverlayRenderResources *v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  md::PolylineOverlaySharedResources *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v45;
  RenderTargetFormat v46;
  __int128 v47;
  __int128 *v48;
  _QWORD v49[4];

  v49[3] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  if (a4 == 1)
    v10 = 42;
  else
    v10 = 0;
  if (a4)
    v11 = v10;
  else
    v11 = 41;
  if (a4 == 1)
  {
    v12 = operator new(6uLL);
    v13 = (char *)(v12 + 3);
    v12[2] = 81;
    *(_DWORD *)v12 = 4718604;
  }
  else if (a4)
  {
    v12 = operator new(2uLL);
    *v12 = 0;
    v13 = (char *)(v12 + 1);
  }
  else
  {
    v12 = operator new(4uLL);
    *(_DWORD *)v12 = 4653067;
    v13 = (char *)(v12 + 2);
  }
  -[VKSharedResources standardCommandBufferSelector](v9, "standardCommandBufferSelector", v12, v13);
  v14 = 234;
  if (!a4)
    v14 = 200;
  v15 = *(_WORD *)(*(_QWORD *)(v47 + 8) + v14);
  v16 = operator new(2uLL);
  *v16 = v15;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v17 = operator new(2uLL);
  *(_QWORD *)a1 = off_1E42A4FB8;
  *(_QWORD *)(a1 + 8) = v17;
  *v17++ = *v16;
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = v17;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = v11;
  *(_QWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  v18 = (__int128 **)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = v45;
  *(_QWORD *)(a1 + 336) = v13;
  *(_DWORD *)(a1 + 344) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  operator delete(v16);
  if (*((_QWORD *)&v47 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v47 + 1) + 16))(*((_QWORD *)&v47 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
    }
  }
  *(_QWORD *)a1 = &off_1E4296A18;
  *(_DWORD *)(a1 + 348) = a4;
  *(_QWORD *)(a1 + 352) = a5;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_BYTE *)(a1 + 392) = 13;
  v21 = *(unsigned __int8 *)(-[VKSharedResources gglDevice](v9, "gglDevice") + 20);
  *(_BYTE *)(a1 + 394) = v21;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_QWORD *)(a1 + 428) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  v22 = *(void **)(a2 + 104);
  if (v21)
    v23 = (_OWORD *)objc_msgSend(v22, "format");
  else
    v23 = (_OWORD *)objc_msgSend(v22, "linearFormat");
  v24 = v23[1];
  *(_OWORD *)v46.colorFormats = *v23;
  *(_OWORD *)&v46.colorFormatsCount = v24;
  v25 = (md::COverlayRenderResources *)operator new();
  md::COverlayRenderResources::COverlayRenderResources(v25, v9, &v46, *(unsigned __int8 *)(a1 + 394));
  *(_QWORD *)(a1 + 360) = v25;
  v26 = (__int128 *)(a1 + 56);
  v27 = &v47;
  *(_QWORD *)&v47 = &off_1E42C6BA0;
  v48 = &v47;
  if ((__int128 *)(a1 + 56) == &v47)
  {
    v28 = 4;
LABEL_31:
    (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
    goto LABEL_32;
  }
  if (*v18 == v26)
  {
    std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::__clone((uint64_t)&v47, v49);
    v48 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 24))(a1 + 56, &v47);
    (*(void (**)(__int128 *))(*(_QWORD *)*v18 + 32))(*v18);
    *v18 = 0;
    v48 = &v47;
    (*(void (**)(_QWORD *, uint64_t))(v49[0] + 24))(v49, a1 + 56);
    (*(void (**)(_QWORD *))(v49[0] + 32))(v49);
    *v18 = v26;
    v27 = v48;
  }
  else
  {
    std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::__clone((uint64_t)&v47, (_QWORD *)(a1 + 56));
    v27 = *v18;
    v48 = *v18;
    *v18 = v26;
  }
  if (v27 == &v47)
  {
    v28 = 4;
    v27 = &v47;
    goto LABEL_31;
  }
  if (v27)
  {
    v28 = 5;
    goto LABEL_31;
  }
LABEL_32:
  -[VKSharedResources standardCommandBufferSelector](v9, "standardCommandBufferSelector");
  v29 = v47;
  v47 = 0uLL;
  v30 = *(std::__shared_weak_count **)(a1 + 384);
  *(_OWORD *)(a1 + 376) = v29;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (uint64_t *)operator new();
  v37 = -[VKSharedResources shaderLibrary](v9, "shaderLibrary");
  v38 = -[VKSharedResources highInflationAlphaAtlas](v9, "highInflationAlphaAtlas");
  v39 = -[VKSharedResources distanceAtlas](v9, "distanceAtlas");
  -[VKSharedResources textureManager](v9, "textureManager");
  md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(v36, v37, v38, v39, (uint64_t *)&v47, (__int128 *)v46.colorFormats, *(unsigned __int8 *)(a1 + 394));
  v40 = *(md::PolylineOverlaySharedResources **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v36;
  if (v40)
  {
    md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v40);
    MEMORY[0x1A1AF4E00]();
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  return a1;
}

void sub_19F9F2FF8(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  md::PolylineOverlaySharedResources *v14;

  v5 = (void *)v2[57];
  if (v5)
  {
    do
    {
      v6 = *(void **)v5;
      *((_QWORD *)v5 + 3) = &off_1E42B49F0;

      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)v2[52];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)v2[50];
  v2[50] = 0;
  if (v10)
    operator delete(v10);
  v11 = (std::__shared_weak_count *)v2[48];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (md::PolylineOverlaySharedResources *)v2[46];
  v2[46] = 0;
  if (v14)
  {
    md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v14);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::~CartographicTiledRenderLayer((uint64_t)v2);

  _Unwind_Resume(a1);
}

void ggl::DaVinci::RibbonPipelineState::~RibbonPipelineState(ggl::DaVinci::RibbonPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::RibbonPipelineSetup::~RibbonPipelineSetup(ggl::DaVinci::RibbonPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::RibbonPipelineSetup::constantDataIsEnabled(ggl::DaVinci::RibbonPipelineSetup *this, unint64_t a2)
{
  int v3;

  if (a2 > 0xA)
    return 0;
  if (((1 << a2) & 0x3BF) != 0)
    return 1;
  if (a2 == 6)
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
  else
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
  return v3 != 0;
}

BOOL ggl::DaVinci::RibbonPipelineSetup::textureIsEnabled(ggl::DaVinci::RibbonPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 3:
      return result;
    case 1:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_5;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282408;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282408;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3540);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282450;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282450;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::MaterialPendingProcessing>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3630);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282498;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282498;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::RenderablePendingProcessing>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3720);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282138;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282138;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::CanEnableTexture>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3810);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282210;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282210;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::ShouldSkipRender>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3900);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42824E0;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42824E0;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::InView>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F39F0);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42821C8;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42821C8;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemUpdate>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3AE0);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42F1410;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42F1410;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3BD0);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42823C0;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42823C0;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F3CC0);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42F1398;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42F1398;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _Unwind_Exception *v20;
  _Unwind_Exception *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = 0x30A3530A3A347BD0;
  v3 = (uint64_t *)(a2 + 120);
  v4 = *(int8x8_t *)(a2 + 128);
  if (!*(_QWORD *)&v4)
    goto LABEL_21;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x30A3530A3A347BD0;
    if (*(_QWORD *)&v4 <= 0x30A3530A3A347BD0uLL)
      v6 = 0x30A3530A3A347BD0uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x30A3530A3A347BD0;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7 || (v8 = (_QWORD *)*v7) == 0)
  {
LABEL_21:
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = "md::ls::SliceAssignmentT<md::SliceType::CulledDepthPeeled>]";
    *(_QWORD *)(v12 + 24) = 58;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_DWORD *)(v12 + 144) = 1065353216;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_QWORD *)(v12 + 184) = 0;
    *(_DWORD *)(v12 + 192) = 1065353216;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_QWORD *)(v12 + 232) = 0;
    *(_DWORD *)(v12 + 240) = 1065353216;
    *(_QWORD *)v12 = &off_1E42F13E0;
    *(_QWORD *)(v12 + 8) = 0x30A3530A3A347BD0;
    *(_QWORD *)(v12 + 248) = a2;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 0x30A3530A3A347BD0uLL, &v25);
    v14 = v13[3];
    v13[3] = v12;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v22 = 0x30A3530A3A347BD0;
    v23 = "md::ls::SliceAssignmentT<md::SliceType::CulledDepthPeeled>]";
    v24 = 58;
    gdc::Registry::_registerStorageDataSignals(a2, 0x30A3530A3A347BD0, (uint64_t)&v22, (uint64_t *)(v12 + 104));
    if (*(_QWORD *)(v12 + 232))
      goto LABEL_24;
    goto LABEL_28;
  }
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x30A3530A3A347BD0)
      {
        if (v8[2] == 0x30A3530A3A347BD0)
          goto LABEL_29;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x30A3530A3A347BD0)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_21;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_21;
  }
  if (v8[2] != 0x30A3530A3A347BD0)
    goto LABEL_11;
LABEL_29:
  v12 = v8[3];
  if (!*(_QWORD *)(v12 + 232))
    goto LABEL_28;
LABEL_24:
  v15 = *(_QWORD **)(v12 + 224);
  if (v15)
  {
    v16 = *(_QWORD *)(v12 + 248);
    v17 = *(_QWORD *)(v12 + 56);
    v18 = (*(_QWORD *)(v12 + 64) - v17) >> 3;
    do
    {
      v22 = v17;
      v23 = (char *)v18;
      v25 = v16;
      v19 = v15[6];
      if (!v19)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        v21 = v20;
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        _Unwind_Resume(v21);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v25, &v22);
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
LABEL_28:
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v12 + 88) = *(_QWORD *)(v12 + 80);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)6>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)6>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)6>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)6>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42F1350;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42F1350;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F41FCLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282378;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282378;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F42ECLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282330;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282330;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)3>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F43DCLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42822E8;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42822E8;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F44CCLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42822A0;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42822A0;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F45BCLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E4282258;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E4282258;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F46ACLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42820F0;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42820F0;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::ItemsPrepared>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F479CLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42820A8;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42820A8;
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = (_QWORD *)gdc::Registry::storage<md::ls::EnteringView>(a2);
  v3 = result;
  if (result[29])
  {
    v4 = (_QWORD *)result[28];
    if (v4)
    {
      v5 = result[31];
      v6 = result[7];
      v7 = (result[8] - v6) >> 3;
      do
      {
        v10[0] = v6;
        v10[1] = v7;
        v9 = v5;
        v8 = v4[6];
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F9F488CLL);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v9, v10);
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  v3[8] = v3[7];
  v3[11] = v3[10];
  return result;
}

void std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2>,void ()(md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2>,void ()(md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E427C4F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2>,void ()(md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E427C4F8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_2>,void ()(md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&)>::operator()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;
  char v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v5[0] = &off_1E42828D0;
  v5[1] = v0;
  v6 = v5;
  v7[0] = &off_1E42828D0;
  v7[3] = v7;
  v7[1] = v0;
  v8 = 1;
  ecs2::Runtime::queueCommand(v1, (uint64_t)v7);
  if (v8 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v8])(&v4, v7);
  v8 = -1;
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42828D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42828D0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,std::type_identity<md::ls::PendingProcessingDepthPrePass>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(a2);
  return gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1>,void ()(md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1>,void ()(md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427C4B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1>,void ()(md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427C4B0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_1>,void ()(md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&)>::operator()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;
  char v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v5[0] = &off_1E42827F8;
  v5[1] = v0;
  v6 = v5;
  v7[0] = &off_1E42827F8;
  v7[3] = v7;
  v7[1] = v0;
  v8 = 1;
  ecs2::Runtime::queueCommand(v1, (uint64_t)v7);
  if (v8 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v8])(&v4, v7);
  v8 = -1;
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42827F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42827F8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessingShadow>(gdc::Entity,std::type_identity<md::ls::PendingProcessingShadow>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(a2);
  return gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0>,void ()(md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0>,void ()(md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427C468;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0>,void ()(md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427C468;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0,std::allocator<md::ita::UpdateProcessedStatusRenderables::operator()(ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>,ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>,ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>)::$_0>,void ()(md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&)>::operator()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;
  char v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v5[0] = &off_1E42826D8;
  v5[1] = v0;
  v6 = v5;
  v7[0] = &off_1E42826D8;
  v7[3] = v7;
  v7[1] = v0;
  v8 = 1;
  ecs2::Runtime::queueCommand(v1, (uint64_t)v7);
  if (v8 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v8])(&v4, v7);
  v8 = -1;
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42826D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42826D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::PendingProcessing>(gdc::Entity,std::type_identity<md::ls::PendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessing>(a2);
  return gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1>,void ()(md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1>,void ()(md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427B808;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1>,void ()(md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427B808;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_1>,void ()(md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*)>::operator()(uint64_t a1, _QWORD *a2, unsigned __int16 *a3, _WORD *a4, uint64_t a5, unsigned __int8 **a6, _QWORD **a7, uint64_t *a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  int64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  BOOL v26;
  _QWORD *v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  float v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  int64_t v122;
  char *v123;
  char *v124;
  unint64_t **v125;
  unint64_t *v126;
  unint64_t *v127;
  BOOL v128;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  BOOL v132;
  char v133;
  unsigned __int16 *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int16 v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t (***v142)();
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t (***v148)();
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t *v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v157;
  uint64_t *v158;
  _QWORD **v159;
  unsigned __int16 *v160;
  char v161;
  unsigned __int8 *v162;
  uint64_t v163;
  char v164;
  __int128 v165;
  int v166;
  __int128 v167;
  __int16 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t (**v171)();
  uint64_t v172;
  int v173;
  uint64_t (***v174)();
  uint64_t v175;

  v9 = a1;
  v175 = *MEMORY[0x1E0C80C00];
  v10 = *a6;
  v11 = *a7;
  v159 = *(_QWORD ***)(a1 + 48);
  v12 = **(_QWORD ***)(a1 + 8);
  v13 = v12[1232];
  v155 = *a8;
  if (*a2 < (unint64_t)((v12[1233] - v13) >> 3)
    && (v14 = *(_QWORD *)(v13 + 8 * *a2)) != 0
    && HIDWORD(*a2) == HIDWORD(v14)
    && ((v15 = v12[1235], v16 = (uint64_t *)(v15 + 8 * v14), v16 != (uint64_t *)v12[1236])
      ? (v17 = v15 == 0)
      : (v17 = 1),
        !v17))
  {
    v36 = *v16;
  }
  else
  {
    v36 = 0;
  }
  v18 = md::MeshRenderableContext::renderablesForRegistry(**(_QWORD ***)(a1 + 16), v36);
  v160 = a3;
  v163 = v9;
  if (v10 && v11)
  {
    v19 = **(int64_t ***)(v9 + 24);
    if (v19)
    {
      v20 = **(_QWORD ***)(v9 + 8);
      v21 = *v11;
      v22 = v20[1254];
      if (v21 < (v20[1255] - v22) >> 3
        && (v23 = *(_QWORD *)(v22 + 8 * v21)) != 0
        && HIDWORD(*v11) == HIDWORD(v23)
        && ((v24 = v20[1257], v25 = (uint64_t *)(v24 + 8 * v23), v25 != (uint64_t *)v20[1258])
          ? (v26 = v24 == 0)
          : (v26 = 1),
            !v26))
      {
        v61 = *v25;
      }
      else
      {
        v61 = 0;
      }
      v27 = (_QWORD *)v19[3];
      v28 = *(unsigned __int8 *)(v61 + 48);
      v157 = v18;
      if (v27
        && (LOWORD(v165) = *(_WORD *)v10,
            *(_QWORD *)((char *)&v165 + 4) = *(_QWORD *)(v10 + 4),
            v167 = *(_OWORD *)(v10 + 24),
            LOBYTE(v168) = v28,
            (v29 = std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>(v27, (unsigned __int8 *)&v165)) != 0))
      {
        v30 = v29;
        v31 = v29[11];
        v32 = v29[12];
        if (v31 != v32)
        {
          do
          {
            v33 = v19[1];
            LOWORD(v165) = *(_WORD *)v10;
            *(_QWORD *)((char *)&v165 + 4) = *(_QWORD *)(v10 + 4);
            v167 = *(_OWORD *)(v10 + 24);
            v168 = *(_WORD *)v31;
            v169 = *(_QWORD *)(v31 + 4);
            v170 = *(_OWORD *)(v31 + 24);
            v34 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((_QWORD *)(v33 + 24), (unsigned __int8 *)&v165);
            if (v34)
              *((_QWORD *)v34 + 12) = geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed((char *)v33, *((char **)v34 + 12));
            v31 += 40;
          }
          while (v31 != v32);
          v19 = **(int64_t ***)(v9 + 24);
          v28 = *(unsigned __int8 *)(v61 + 48);
        }
        v35 = v30 + 8;
      }
      else
      {
        v35 = (uint64_t *)&md::FlyoverCompleteTileDataContext::getDynamicRenderables(md::FlyoverOctile const&,signed char)const::kEmpty;
      }
      v152 = v35;
      v37 = (_QWORD *)v19[4];
      if (v37)
      {
        v38 = *(_QWORD *)(v10 + 28);
        v39 = v38 & 0xFF00000000;
        if ((v38 & 0xFF00000000) != 0)
          v40 = 2 * *(_QWORD *)(v10 + 28);
        else
          v40 = 0;
        v41 = (int8x8_t)v37[1];
        if (v41)
        {
          v42 = v10[1];
          v43 = *v10;
          v44 = *(_QWORD *)(v10 + 4);
          v45 = *((unsigned int *)v10 + 9);
          v46 = (v42
               - 0x61C8864680B583EBLL
               + ((v43 - 0x61C8864680B583EBLL) << 6)
               + ((unint64_t)(v43 - 0x61C8864680B583EBLL) >> 2)) ^ (v43 - 0x61C8864680B583EBLL);
          v47 = HIDWORD(v44);
          v48 = v44;
          v49 = ((int)v44 - 0x61C8864680B583EBLL + (v46 << 6) + (v46 >> 2)) ^ v46;
          v50 = (v40 | (v45 << 33)) ^ v49 ^ (SHIDWORD(v44) - 0x61C8864680B583EBLL + (v49 << 6) + (v49 >> 2));
          v51 = ((char)v28 - 0x61C8864680B583EBLL + (v50 << 6) + (v50 >> 2)) ^ v50;
          v52 = (uint8x8_t)vcnt_s8(v41);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            v53 = v51;
            if (v51 >= *(_QWORD *)&v41)
              v53 = v51 % *(_QWORD *)&v41;
          }
          else
          {
            v53 = v51 & (*(_QWORD *)&v41 - 1);
          }
          v54 = *(uint64_t ***)(*v37 + 8 * v53);
          if (v54)
          {
            v55 = *v54;
            if (v55)
            {
              v56 = v10[24];
              if (v52.u32[0] <= 1uLL)
              {
                v57 = *(_QWORD *)&v41 - 1;
                if (!v39)
                {
                  while (1)
                  {
                    v60 = v55[1];
                    if (v60 == v51)
                    {
                      if (*((unsigned __int8 *)v55 + 40) == v56
                        && __PAIR64__(*((unsigned __int8 *)v55 + 17), *((unsigned __int8 *)v55 + 16)) == __PAIR64__(v42, v43)
                        && *((_DWORD *)v55 + 5) == v48
                        && *((_DWORD *)v55 + 6) == v47
                        && *((_DWORD *)v55 + 13) == (_DWORD)v45
                        && !*((_BYTE *)v55 + 48)
                        && *((unsigned __int8 *)v55 + 56) == v28)
                      {
                        goto LABEL_71;
                      }
                    }
                    else if ((v60 & v57) != v53)
                    {
                      goto LABEL_101;
                    }
                    v59 = 0;
                    v55 = (uint64_t *)*v55;
                    if (!v55)
                      goto LABEL_102;
                  }
                }
                while (1)
                {
                  v58 = v55[1];
                  if (v58 == v51)
                  {
                    if (*((unsigned __int8 *)v55 + 40) == v56
                      && __PAIR64__(*((unsigned __int8 *)v55 + 17), *((unsigned __int8 *)v55 + 16)) == __PAIR64__(v42, v43)
                      && *((_DWORD *)v55 + 5) == v48
                      && *((_DWORD *)v55 + 6) == v47
                      && *((_DWORD *)v55 + 13) == (_DWORD)v45
                      && *((_BYTE *)v55 + 48)
                      && *((_DWORD *)v55 + 11) == (_DWORD)v38
                      && *((unsigned __int8 *)v55 + 56) == v28)
                    {
                      goto LABEL_71;
                    }
                  }
                  else if ((v58 & v57) != v53)
                  {
                    goto LABEL_101;
                  }
                  v55 = (uint64_t *)*v55;
                  if (!v55)
                    goto LABEL_101;
                }
              }
              if (!v39)
              {
                while (1)
                {
                  v63 = v55[1];
                  if (v63 == v51)
                  {
                    if (*((unsigned __int8 *)v55 + 40) == v56
                      && __PAIR64__(*((unsigned __int8 *)v55 + 17), *((unsigned __int8 *)v55 + 16)) == __PAIR64__(v42, v43)
                      && *((_DWORD *)v55 + 5) == v48
                      && *((_DWORD *)v55 + 6) == v47
                      && *((_DWORD *)v55 + 13) == (_DWORD)v45
                      && !*((_BYTE *)v55 + 48)
                      && *((unsigned __int8 *)v55 + 56) == v28)
                    {
                      goto LABEL_71;
                    }
                  }
                  else
                  {
                    if (v63 >= *(_QWORD *)&v41)
                      v63 %= *(_QWORD *)&v41;
                    if (v63 != v53)
                      goto LABEL_101;
                  }
                  v59 = 0;
                  v55 = (uint64_t *)*v55;
                  if (!v55)
                    goto LABEL_102;
                }
              }
              do
              {
                v62 = v55[1];
                if (v62 == v51)
                {
                  if (*((unsigned __int8 *)v55 + 40) == v56
                    && __PAIR64__(*((unsigned __int8 *)v55 + 17), *((unsigned __int8 *)v55 + 16)) == __PAIR64__(v42, v43)
                    && *((_DWORD *)v55 + 5) == v48
                    && *((_DWORD *)v55 + 6) == v47
                    && *((_DWORD *)v55 + 13) == (_DWORD)v45
                    && *((_BYTE *)v55 + 48)
                    && *((_DWORD *)v55 + 11) == (_DWORD)v38
                    && *((unsigned __int8 *)v55 + 56) == v28)
                  {
LABEL_71:
                    v59 = v55;
                    goto LABEL_102;
                  }
                }
                else
                {
                  if (v62 >= *(_QWORD *)&v41)
                    v62 %= *(_QWORD *)&v41;
                  if (v62 != v53)
                    break;
                }
                v55 = (uint64_t *)*v55;
              }
              while (v55);
            }
          }
        }
LABEL_101:
        v59 = 0;
LABEL_102:
        v151 = v59 != 0;
      }
      else
      {
        v151 = 0;
      }
      md::FlyoverCompleteTileDataContext::getOctileInstances((int64_t *)&v165, v19, (__int16 *)v10, v28);
      v64 = (unsigned __int8 *)*((_QWORD *)&v165 + 1);
      v153 = (void *)v165;
      if ((_QWORD)v165 != *((_QWORD *)&v165 + 1))
      {
        v162 = (unsigned __int8 *)*((_QWORD *)&v165 + 1);
        v65 = (unsigned __int8 *)v165;
        do
        {
          v67 = *(_QWORD *)(v9 + 32);
          v68 = (v65[1]
               - 0x61C8864680B583EBLL
               + ((*v65 - 0x61C8864680B583EBLL) << 6)
               + (((unint64_t)*v65 - 0x61C8864680B583EBLL) >> 2)) ^ (*v65 - 0x61C8864680B583EBLL);
          v69 = (*((int *)v65 + 1) - 0x61C8864680B583EBLL + (v68 << 6) + (v68 >> 2)) ^ v68;
          if ((*(_QWORD *)(v65 + 28) & 0xFF00000000) != 0)
            v71 = 2 * *(_QWORD *)(v65 + 28);
          else
            v71 = 0;
          v72 = v71 | ((unint64_t)*((unsigned int *)v65 + 9) << 33);
          v70 = *((int *)v65 + 2) - 0x61C8864680B583EBLL + (v69 << 6) + (v69 >> 2);
          v73 = (v65[152] - 0x61C8864680B583EBLL + ((v72 ^ v69 ^ v70) << 6) + ((v72 ^ v69 ^ v70) >> 2)) ^ v72 ^ v69 ^ v70;
          v74 = *((float *)v65 + 39);
          v75 = LODWORD(v74) - 0x61C8864680B583EBLL;
          if (v74 == 0.0)
            v75 = 0x9E3779B97F4A7C15;
          v76 = (v75 + (v73 << 6) + (v73 >> 2)) ^ v73;
          v77 = (v65[160] - 0x61C8864680B583EBLL + (v76 << 6) + (v76 >> 2)) ^ v76;
          v79 = *(uint64_t **)(v67 + 8);
          v78 = *(_QWORD *)(v67 + 16);
          if ((unint64_t)v79 < v78)
          {
            *v79 = v77;
            v66 = v79 + 1;
          }
          else
          {
            v80 = *(uint64_t **)v67;
            v81 = (uint64_t)v79 - *(_QWORD *)v67;
            v82 = v81 >> 3;
            v83 = (v81 >> 3) + 1;
            if (v83 >> 61)
              abort();
            v84 = v78 - (_QWORD)v80;
            if (v84 >> 2 > v83)
              v83 = v84 >> 2;
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
              v85 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v85 = v83;
            if (v85)
            {
              if (v85 >> 61)
LABEL_212:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v86 = operator new(8 * v85);
            }
            else
            {
              v86 = 0;
            }
            v87 = (uint64_t *)&v86[8 * v82];
            *v87 = v77;
            v66 = v87 + 1;
            if (v79 != v80)
            {
              v88 = (char *)(v79 - 1) - (char *)v80;
              if (v88 < 0x58)
                goto LABEL_217;
              if ((unint64_t)((char *)v79 - &v86[v81]) < 0x20)
                goto LABEL_217;
              v89 = (v88 >> 3) + 1;
              v90 = &v86[8 * v82 - 16];
              v91 = v79 - 2;
              v92 = v89 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v93 = *(_OWORD *)v91;
                *(v90 - 1) = *((_OWORD *)v91 - 1);
                *v90 = v93;
                v90 -= 2;
                v91 -= 4;
                v92 -= 4;
              }
              while (v92);
              v87 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
              v79 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
              if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_217:
                do
                {
                  v94 = *--v79;
                  *--v87 = v94;
                }
                while (v79 != v80);
              }
            }
            *(_QWORD *)v67 = v87;
            *(_QWORD *)(v67 + 8) = v66;
            *(_QWORD *)(v67 + 16) = &v86[8 * v85];
            if (v80)
              operator delete(v80);
            v64 = v162;
            v9 = v163;
          }
          *(_QWORD *)(v67 + 8) = v66;
          v65 += 168;
        }
        while (v65 != v64);
      }
      v95 = v152[1];
      v96 = v151;
      if (*v152 != v95)
        v96 = 1;
      v161 = v96;
      v18 = v157;
      if (*v152 != v95)
        v18 = v152;
      if (v153)
        operator delete(v153);
      a3 = v160;
    }
    else
    {
      v161 = 0;
    }
  }
  else
  {
    v161 = 0;
  }
  v154 = *a3;
  v97 = (_QWORD *)*v18;
  v98 = (_QWORD *)v18[1];
  v158 = v18;
  while (v97 != v98)
  {
    v100 = *(_QWORD *)(v9 + 32);
    v101 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v97 + 24))(*v97);
    v102 = v101;
    v104 = *(uint64_t **)(v100 + 8);
    v103 = *(_QWORD *)(v100 + 16);
    if ((unint64_t)v104 < v103)
    {
      *v104 = v101;
      v99 = v104 + 1;
    }
    else
    {
      v105 = *(uint64_t **)v100;
      v106 = (uint64_t)v104 - *(_QWORD *)v100;
      v107 = v106 >> 3;
      v108 = (v106 >> 3) + 1;
      if (v108 >> 61)
        abort();
      v109 = v103 - (_QWORD)v105;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v110 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 >> 61)
          goto LABEL_212;
        v111 = operator new(8 * v110);
      }
      else
      {
        v111 = 0;
      }
      v112 = (uint64_t *)&v111[8 * v107];
      *v112 = v102;
      v99 = v112 + 1;
      if (v104 != v105)
      {
        v113 = (char *)(v104 - 1) - (char *)v105;
        if (v113 < 0x58)
          goto LABEL_218;
        if ((unint64_t)((char *)v104 - &v111[v106]) < 0x20)
          goto LABEL_218;
        v114 = (v113 >> 3) + 1;
        v115 = &v111[8 * v107 - 16];
        v116 = v104 - 2;
        v117 = v114 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v118 = *(_OWORD *)v116;
          *(v115 - 1) = *((_OWORD *)v116 - 1);
          *v115 = v118;
          v115 -= 2;
          v116 -= 4;
          v117 -= 4;
        }
        while (v117);
        v112 -= v114 & 0x3FFFFFFFFFFFFFFCLL;
        v104 -= v114 & 0x3FFFFFFFFFFFFFFCLL;
        if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_218:
          do
          {
            v119 = *--v104;
            *--v112 = v119;
          }
          while (v104 != v105);
        }
      }
      *(_QWORD *)v100 = v112;
      *(_QWORD *)(v100 + 8) = v99;
      *(_QWORD *)(v100 + 16) = &v111[8 * v110];
      if (v105)
        operator delete(v105);
      v9 = v163;
    }
    *(_QWORD *)(v100 + 8) = v99;
    ++v97;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v121 = (_BYTE *)*((_QWORD *)v160 + 1);
  v120 = (_BYTE *)*((_QWORD *)v160 + 2);
  v122 = v120 - v121;
  if (v120 == v121)
  {
    v123 = 0;
    v124 = 0;
  }
  else
  {
    if (v122 < 0)
      abort();
    v123 = (char *)operator new(v120 - v121);
    v124 = &v123[8 * (v122 >> 3)];
    memcpy(v123, v121, v122);
  }
  v125 = *(unint64_t ***)(v9 + 32);
  v127 = *v125;
  v126 = v125[1];
  if (v124 - v123 == (char *)v126 - (char *)*v125)
  {
    v128 = v127 == v126;
    if (v123 != v124 && v127 != v126)
    {
      v129 = v123 + 8;
      v130 = *v125;
      while (1)
      {
        v131 = *((_QWORD *)v129 - 1);
        if (*v130 < v131)
          break;
        v130 += v131 >= *v130;
        v128 = v130 == v126;
        v132 = v130 == v126 || v129 == v124;
        v129 += 8;
        if (v132)
          goto LABEL_183;
      }
      v128 = 0;
    }
LABEL_183:
    v133 = !v128 | v161;
    v134 = v160;
    if (v121)
      goto LABEL_184;
  }
  else
  {
    v133 = 1;
    v134 = v160;
    if (v121)
    {
LABEL_184:
      *((_QWORD *)v134 + 2) = v121;
      operator delete(v121);
      *((_QWORD *)v160 + 1) = 0;
      *((_QWORD *)v160 + 2) = 0;
      *((_QWORD *)v160 + 3) = 0;
      v127 = *v125;
      v126 = v125[1];
    }
  }
  *((_QWORD *)v134 + 1) = v127;
  *((_QWORD *)v134 + 2) = v126;
  *((_QWORD *)v134 + 3) = v125[2];
  *v125 = 0;
  v125[1] = 0;
  v125[2] = 0;
  v136 = *v158;
  v135 = v158[1];
  if (**(_BYTE **)(v9 + 40) | v133)
  {
    v137 = 0;
    v138 = v135 - v136;
LABEL_188:
    *v134 = (unint64_t)v138 >> 3;
    v134[1] = v137;
    v139 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v140 = *v159;
    v171 = &off_1E427DA10;
    v172 = v141 | (v139 << 32);
    v173 = HIDWORD(v139);
    v174 = &v171;
    *(_QWORD *)&v167 = &v165;
    *(_QWORD *)&v165 = &off_1E427DA10;
    *((_QWORD *)&v165 + 1) = v172;
    v166 = HIDWORD(v139);
    goto LABEL_189;
  }
  v138 = v135 - v136;
  v137 = v154;
  if (v154 < v138 >> 3)
    goto LABEL_188;
  if (!v155)
    goto LABEL_196;
  v150 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v140 = *v159;
  v171 = &off_1E427DA10;
  v172 = v150 << 32;
  v173 = HIDWORD(v150);
  v174 = &v171;
  *(_QWORD *)&v167 = &v165;
  *(_QWORD *)&v165 = &off_1E427DA10;
  *((_QWORD *)&v165 + 1) = v150 << 32;
  v166 = HIDWORD(v150);
LABEL_189:
  DWORD2(v167) = 0;
  ecs2::Runtime::queueCommand(v140, (uint64_t)&v165);
  if (DWORD2(v167) != -1)
    ((void (*)(char *, __int128 *))off_1E42FB340[DWORD2(v167)])(&v164, &v165);
  DWORD2(v167) = -1;
  v142 = v174;
  if (v174 == &v171)
  {
    v143 = 4;
    v142 = &v171;
  }
  else
  {
    if (!v174)
      goto LABEL_196;
    v143 = 5;
  }
  (*v142)[v143]();
LABEL_196:
  if (*a4 == 62)
  {
    v144 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v145 = *v159;
    v171 = &off_1E427DA10;
    v172 = (v144 << 32) | 1;
    v173 = HIDWORD(v144);
    v174 = &v171;
    *(_QWORD *)&v167 = &v165;
    *(_QWORD *)&v165 = &off_1E427DA10;
    *((_QWORD *)&v165 + 1) = v172;
    v166 = HIDWORD(v144);
    DWORD2(v167) = 0;
  }
  else
  {
    v146 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v171 = &off_1E42825B8;
    v172 = v146;
    v174 = &v171;
    *(_QWORD *)&v167 = &v165;
    *(_QWORD *)&v165 = &off_1E42825B8;
    *((_QWORD *)&v165 + 1) = v146;
    DWORD2(v167) = 1;
    v145 = v147;
  }
  ecs2::Runtime::queueCommand(v145, (uint64_t)&v165);
  if (DWORD2(v167) != -1)
    ((void (*)(char *, __int128 *))off_1E42FB340[DWORD2(v167)])(&v164, &v165);
  DWORD2(v167) = -1;
  v148 = v174;
  if (v174 == &v171)
  {
    v149 = 4;
    v148 = &v171;
  }
  else
  {
    if (!v174)
      goto LABEL_206;
    v149 = 5;
  }
  (*v148)[v149]();
LABEL_206:
  if (v123)
    operator delete(v123);
}

void sub_19F9F5BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42825B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42825B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::WillEnterView>(gdc::Entity,std::type_identity<md::ls::WillEnterView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::WillEnterView>(a2);
  return gdc::ComponentStorageWrapper<md::ls::WillEnterView>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::EnteringView>(gdc::Entity,md::ls::EnteringView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::EnteringView>(gdc::Entity,md::ls::EnteringView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DA10;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::EnteringView>(gdc::Entity,md::ls::EnteringView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DA10;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::EnteringView>(gdc::Entity,md::ls::EnteringView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::EnteringView>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B7C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B7C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0,std::allocator<md::ita::CheckIfReadyToProcess::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>)::$_0>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  if (*a2 <= 5u)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

void std::__function::__func<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427C540;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C540;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t **std::__function::__func<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  int v15;
  uint64_t **v16;
  uint64_t (**v17)();
  uint64_t v18;
  int v19;
  uint64_t (***v20)();
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD ***)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v17 = (uint64_t (**)())v4;
  v18 = v5;
  v6 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v3 + 29, (uint64_t *)&v17);
  if (!v6
    || !v6[4]
    || **(_BYTE **)(a1 + 16)
    || (result = md::MaterialResourceStore::canDeleteMaterial(v3, v4, v5), (_DWORD)result))
  {
    v8 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v9 = HIDWORD(*v8);
    v10 = *v8 << 32;
    v14[0] = &off_1E427E280;
    v14[1] = v10;
    v15 = v9;
    v16 = (uint64_t **)v14;
    v17 = &off_1E427E280;
    v20 = &v17;
    v18 = v10;
    v19 = v9;
    v21 = 0;
    ecs2::Runtime::queueCommand(v11, (uint64_t)&v17);
    if (v21 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v21])(&v13, &v17);
    v21 = -1;
    result = v16;
    if (v16 == v14)
    {
      v12 = 4;
      result = (uint64_t **)v14;
    }
    else
    {
      if (!v16)
        return result;
      v12 = 5;
    }
    return (uint64_t **)((uint64_t (*)(void))(*result)[v12])();
  }
  return result;
}

void std::__function::__func<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BFE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BFE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0,std::allocator<md::ita::CheckIfShouldDeleteRenderable::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&)>::operator()(uint64_t (***result)(), uint64_t a2, _QWORD *a3))()
{
  uint64_t (**v3)();
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t (**v21)();
  uint64_t v22;
  int v23;
  uint64_t (***v24)();
  uint64_t (**v25)();
  uint64_t v26;
  int v27;
  uint64_t (***v28)();
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = result[2];
  v4 = *result[1];
  v5 = *a3;
  v6 = v4[1276];
  if (v5 < (v4[1277] - v6) >> 3)
  {
    v7 = *(_QWORD *)(v6 + 8 * v5);
    if (v7 && HIDWORD(*a3) == HIDWORD(v7))
    {
      v18 = v4[1279];
      if (v18 + 56 * v7 != v4[1280] && v18 != 0)
        return result;
    }
  }
  v9 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v10 = HIDWORD(*v9);
  v11 = *v9 << 32;
  v21 = &off_1E427E280;
  v22 = v11;
  v23 = v10;
  v24 = &v21;
  v25 = &off_1E427E280;
  v28 = &v25;
  v26 = v11;
  v27 = v10;
  v29 = 0;
  ecs2::Runtime::queueCommand(v12, (uint64_t)&v25);
  if (v29 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v29])(&v20, &v25);
  v29 = -1;
  v13 = v24;
  if (v24 == &v21)
  {
    v14 = 4;
    v13 = &v21;
    goto LABEL_12;
  }
  if (v24)
  {
    v14 = 5;
LABEL_12:
    (*v13)[v14]();
  }
  v15 = *v3;
  v16 = *v9;
  v21 = &off_1E4282648;
  v22 = v16;
  v24 = &v21;
  v25 = &off_1E4282648;
  v28 = &v25;
  v26 = v16;
  v29 = 1;
  ecs2::Runtime::queueCommand(v15, (uint64_t)&v25);
  if (v29 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v29])(&v20, &v25);
  v29 = -1;
  result = v24;
  if (v24 == &v21)
  {
    v17 = 4;
    result = &v21;
  }
  else
  {
    if (!v24)
      return result;
    v17 = 5;
  }
  return (uint64_t (***)())(*result)[v17]();
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282648;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::MeshRenderableID>(gdc::Entity,std::type_identity<md::ls::MeshRenderableID>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(a2);
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2>,void ()(md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2>,void ()(md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2>,void ()(md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_2>,void ()(md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = ***(_QWORD ***)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v8 = 0;
  }
  else
  {
    v8 = v6[3];
    v9 = (std::__shared_weak_count *)v6[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  result = md::VKMRenderResourcesStore::getColorRampData(v8, *a3);
  if (result)
  {
    v14 = result;
    if (*(_BYTE *)(result + 32))
    {
      (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 16) + 56))(**(_QWORD **)(a1 + 16), *(_QWORD *)(result + 16));
      return (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 16) + 56))(**(_QWORD **)(a1 + 16), *(_QWORD *)(v14 + 24));
    }
  }
  return result;
}

void std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1>,void ()(md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1>,void ()(md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B6A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1>,void ()(md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B6A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_1>,void ()(md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v5 = result;
    do
    {
      v6 = *v3++;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v5 + 8) + 56))(**(_QWORD **)(v5 + 8), v6);
    }
    while (v3 != v4);
  }
  return result;
}

void std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B970;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B970;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture *)> md::ita::disconnect_components<mre::GGLResourceStore,md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>(mre::GGLResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture*,md::ls::TextureHandleForType<Flyover::NightTexture>*,md::ls::TextureHandleForType<Flyover::DiffuseTexture>*,md::ls::UniqueMaterialAlbedoTexture*,md::ls::UniqueMaterialEmissiveTexture*,md::ls::UniqueMaterialDiffuseTexture*)>::operator()(_QWORD *result, uint64_t a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, unint64_t **a6, unint64_t **a7, unint64_t **a8)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *a8;
  v14 = result[1];
  if (*a3)
  {
    v17 = *(_QWORD *)(v8 + 16);
    v16 = (unint64_t *)(v8 + 16);
    v15 = v17;
    v18 = v17;
    v19 = *(_QWORD *)(v14 + 504);
    if (v17 < (unint64_t)((*(_QWORD *)(v14 + 512) - v19) >> 3))
    {
      v20 = *(_QWORD *)(v19 + 8 * v18);
      v21 = v20 && HIDWORD(v15) == HIDWORD(v20);
      if (v21 && *(_QWORD *)(v14 + 528) + 40 * v20 != *(_QWORD *)(v14 + 536))
      {
        std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), v15, v16);
        result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), *v16, v16);
        --result[4];
      }
    }
  }
  if (v9)
  {
    v22 = *v9;
    v23 = *v9;
    v24 = *(_QWORD *)(v14 + 504);
    if (v23 < (*(_QWORD *)(v14 + 512) - v24) >> 3)
    {
      v25 = *(_QWORD *)(v24 + 8 * v23);
      v26 = v25 && HIDWORD(v22) == HIDWORD(v25);
      if (v26 && *(_QWORD *)(v14 + 528) + 40 * v25 != *(_QWORD *)(v14 + 536))
      {
        std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), v22, v9);
        result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), *v9, v9);
        --result[4];
      }
    }
  }
  if (v10)
  {
    v27 = *v10;
    v28 = *v10;
    v29 = *(_QWORD *)(v14 + 504);
    if (v28 < (*(_QWORD *)(v14 + 512) - v29) >> 3)
    {
      v30 = *(_QWORD *)(v29 + 8 * v28);
      v31 = v30 && HIDWORD(v27) == HIDWORD(v30);
      if (v31 && *(_QWORD *)(v14 + 528) + 40 * v30 != *(_QWORD *)(v14 + 536))
      {
        std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), v27, v10);
        result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), *v10, v10);
        --result[4];
      }
    }
  }
  if (v11)
  {
    v32 = *v11;
    v33 = *v11;
    v34 = *(_QWORD *)(v14 + 504);
    if (v33 < (*(_QWORD *)(v14 + 512) - v34) >> 3)
    {
      v35 = *(_QWORD *)(v34 + 8 * v33);
      v36 = v35 && HIDWORD(v32) == HIDWORD(v35);
      if (v36 && *(_QWORD *)(v14 + 528) + 40 * v35 != *(_QWORD *)(v14 + 536))
      {
        std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), v32, v11);
        result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), *v11, v11);
        --result[4];
      }
    }
  }
  if (v12)
  {
    v37 = *v12;
    v38 = *v12;
    v39 = *(_QWORD *)(v14 + 504);
    if (v38 < (*(_QWORD *)(v14 + 512) - v39) >> 3)
    {
      v40 = *(_QWORD *)(v39 + 8 * v38);
      v41 = v40 && HIDWORD(v37) == HIDWORD(v40);
      if (v41 && *(_QWORD *)(v14 + 528) + 40 * v40 != *(_QWORD *)(v14 + 536))
      {
        std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), v37, v12);
        result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), *v12, v12);
        --result[4];
      }
    }
  }
  if (v13)
  {
    v42 = *v13;
    v43 = *v13;
    v44 = *(_QWORD *)(v14 + 504);
    if (v43 < (*(_QWORD *)(v14 + 512) - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v43);
      if (v45)
        v46 = HIDWORD(v42) == HIDWORD(v45);
      else
        v46 = 0;
      if (v46 && *(_QWORD *)(v14 + 528) + 40 * v45 != *(_QWORD *)(v14 + 536))
      {
        std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), v42, v13);
        result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v14 + 440), *v13, v13);
        --result[4];
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_59;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19F9F6F1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427BA00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427BA00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint *)> md::ita::disconnect_components<md::VKMRenderResourcesStore,md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(md::VKMRenderResourcesStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle*,md::ls::StyleRouteLineMaskConstantDataHandle*,md::ls::StyleConstantHandle*,md::ls::LandCoverSettingsConstantDataHandle*,md::ls::StyleGroundOcclusionConstantDataHandle*,md::ls::ColorRampDataHandle*,md::ls::NormalsHandle*,md::ls::UVsHandle*,md::ls::ElevationHandle*,md::ls::InstanceTransformHandle*,md::ls::UniqueStyleEmissiveDataKeyHandle*,md::ls::NeedsClimateTint*)>::operator()(uint64_t a1, uint64_t a2, unint64_t **a3, unint64_t **a4, unint64_t **a5, unint64_t **a6, unint64_t **a7, unint64_t **a8, unint64_t **a9, unint64_t **a10, unint64_t **a11, unint64_t **a12, unint64_t **a13, unint64_t **a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  int8x8_t *v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  unint64_t v81;
  uint8x8_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x8_t v91;
  unint64_t v92;
  uint8x8_t v93;
  unint64_t v94;
  int8x8_t v95;
  int8x8_t **v96;
  int8x8_t *v97;
  uint64_t v98;
  int8x8_t v99;
  unint64_t v100;
  int8x8_t *v101;
  int8x8_t *v102;
  int8x8_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int8x8_t v107;
  unint64_t v108;

  v14 = *a3;
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  v18 = *a7;
  v19 = *a8;
  v20 = *a9;
  v21 = *a10;
  v22 = *a11;
  v23 = *a12;
  v24 = *a13;
  v25 = *a14;
  v26 = *(int8x8_t **)(a1 + 8);
  if (*a3)
  {
    if (!*((_BYTE *)v14 + 8))
    {
      v31 = v26[704];
      if (v31)
      {
        v32 = *v14;
        v33 = (uint8x8_t)vcnt_s8(v31);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          v34 = v32;
          if (*(_QWORD *)&v31 <= v32)
            v34 = v32 % *(_QWORD *)&v31;
        }
        else
        {
          v34 = (*(_QWORD *)&v31 - 1) & v32;
        }
        v40 = *(_QWORD **)(*(_QWORD *)&v26[703] + 8 * v34);
        if (v40)
        {
          v41 = (_QWORD *)*v40;
          if (v41)
          {
            if (v33.u32[0] < 2uLL)
            {
              v42 = *(_QWORD *)&v31 - 1;
              while (1)
              {
                v44 = v41[1];
                if (v44 == v32)
                {
                  if (v41[2] == v32)
                    goto LABEL_190;
                }
                else if ((v44 & v42) != v34)
                {
                  goto LABEL_3;
                }
                v41 = (_QWORD *)*v41;
                if (!v41)
                  goto LABEL_3;
              }
            }
            do
            {
              v43 = v41[1];
              if (v43 == v32)
              {
                if (v41[2] == v32)
                {
LABEL_190:
                  v104 = v41[4];
                  if (!v104 || (v105 = v104 - 1, (v41[4] = v105) == 0))
                    v41[3] = 0;
                  break;
                }
              }
              else
              {
                if (v43 >= *(_QWORD *)&v31)
                  v43 %= *(_QWORD *)&v31;
                if (v43 != v34)
                  break;
              }
              v41 = (_QWORD *)*v41;
            }
            while (v41);
          }
        }
      }
    }
  }
LABEL_3:
  if (v15)
  {
    v27 = v26[225];
    if (v27)
    {
      v28 = *v15;
      v29 = (uint8x8_t)vcnt_s8(v27);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        v30 = v28;
        if (*(_QWORD *)&v27 <= v28)
          v30 = v28 % *(_QWORD *)&v27;
      }
      else
      {
        v30 = (*(_QWORD *)&v27 - 1) & v28;
      }
      v35 = *(_QWORD **)(*(_QWORD *)&v26[224] + 8 * v30);
      if (v35)
      {
        v36 = (_QWORD *)*v35;
        if (v36)
        {
          if (v29.u32[0] < 2uLL)
          {
            v37 = *(_QWORD *)&v27 - 1;
            while (1)
            {
              v39 = v36[1];
              if (v39 == v28)
              {
                if (v36[2] == v28)
                  goto LABEL_46;
              }
              else if ((v39 & v37) != v30)
              {
                goto LABEL_49;
              }
              v36 = (_QWORD *)*v36;
              if (!v36)
                goto LABEL_49;
            }
          }
          do
          {
            v38 = v36[1];
            if (v38 == v28)
            {
              if (v36[2] == v28)
              {
LABEL_46:
                v45 = v36[4];
                if (!v45 || (v46 = v45 - 1, (v36[4] = v46) == 0))
                  v36[3] = 0;
                break;
              }
            }
            else
            {
              if (v38 >= *(_QWORD *)&v27)
                v38 %= *(_QWORD *)&v27;
              if (v38 != v30)
                break;
            }
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
      }
    }
  }
LABEL_49:
  if (v16)
  {
    v47 = v26[151];
    if (v47)
    {
      v48 = *v16;
      v49 = (uint8x8_t)vcnt_s8(v47);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        v50 = v48;
        if (*(_QWORD *)&v47 <= v48)
          v50 = v48 % *(_QWORD *)&v47;
      }
      else
      {
        v50 = (*(_QWORD *)&v47 - 1) & v48;
      }
      v51 = *(_QWORD **)(*(_QWORD *)&v26[150] + 8 * v50);
      if (v51)
      {
        v52 = (_QWORD *)*v51;
        if (v52)
        {
          if (v49.u32[0] < 2uLL)
          {
            v53 = *(_QWORD *)&v47 - 1;
            while (1)
            {
              v55 = v52[1];
              if (v55 == v48)
              {
                if (v52[2] == v48)
                  goto LABEL_71;
              }
              else if ((v55 & v53) != v50)
              {
                goto LABEL_74;
              }
              v52 = (_QWORD *)*v52;
              if (!v52)
                goto LABEL_74;
            }
          }
          do
          {
            v54 = v52[1];
            if (v54 == v48)
            {
              if (v52[2] == v48)
              {
LABEL_71:
                v56 = v52[4];
                if (!v56 || (v57 = v56 - 1, (v52[4] = v57) == 0))
                  v52[3] = 0;
                break;
              }
            }
            else
            {
              if (v54 >= *(_QWORD *)&v47)
                v54 %= *(_QWORD *)&v47;
              if (v54 != v50)
                break;
            }
            v52 = (_QWORD *)*v52;
          }
          while (v52);
        }
      }
    }
  }
LABEL_74:
  if (v17)
  {
    v58 = v26[373];
    if (v58)
    {
      v59 = *v17;
      v60 = (uint8x8_t)vcnt_s8(v58);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL)
      {
        v61 = v59;
        if (*(_QWORD *)&v58 <= v59)
          v61 = v59 % *(_QWORD *)&v58;
      }
      else
      {
        v61 = (*(_QWORD *)&v58 - 1) & v59;
      }
      v62 = *(_QWORD **)(*(_QWORD *)&v26[372] + 8 * v61);
      if (v62)
      {
        v63 = (_QWORD *)*v62;
        if (v63)
        {
          if (v60.u32[0] < 2uLL)
          {
            v64 = *(_QWORD *)&v58 - 1;
            while (1)
            {
              v66 = v63[1];
              if (v66 == v59)
              {
                if (v63[2] == v59)
                  goto LABEL_96;
              }
              else if ((v66 & v64) != v61)
              {
                goto LABEL_99;
              }
              v63 = (_QWORD *)*v63;
              if (!v63)
                goto LABEL_99;
            }
          }
          do
          {
            v65 = v63[1];
            if (v65 == v59)
            {
              if (v63[2] == v59)
              {
LABEL_96:
                v67 = v63[4];
                if (!v67 || (v68 = v67 - 1, (v63[4] = v68) == 0))
                  v63[3] = 0;
                break;
              }
            }
            else
            {
              if (v65 >= *(_QWORD *)&v58)
                v65 %= *(_QWORD *)&v58;
              if (v65 != v61)
                break;
            }
            v63 = (_QWORD *)*v63;
          }
          while (v63);
        }
      }
    }
  }
LABEL_99:
  if (v18)
  {
    v69 = v26[886];
    if (v69)
    {
      v70 = *v18;
      v71 = (uint8x8_t)vcnt_s8(v69);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v70;
        if (*(_QWORD *)&v69 <= v70)
          v72 = v70 % *(_QWORD *)&v69;
      }
      else
      {
        v72 = (*(_QWORD *)&v69 - 1) & v70;
      }
      v73 = *(_QWORD **)(*(_QWORD *)&v26[885] + 8 * v72);
      if (v73)
      {
        v74 = (_QWORD *)*v73;
        if (v74)
        {
          if (v71.u32[0] < 2uLL)
          {
            v75 = *(_QWORD *)&v69 - 1;
            while (1)
            {
              v77 = v74[1];
              if (v77 == v70)
              {
                if (v74[2] == v70)
                  goto LABEL_121;
              }
              else if ((v77 & v75) != v72)
              {
                goto LABEL_124;
              }
              v74 = (_QWORD *)*v74;
              if (!v74)
                goto LABEL_124;
            }
          }
          do
          {
            v76 = v74[1];
            if (v76 == v70)
            {
              if (v74[2] == v70)
              {
LABEL_121:
                v78 = v74[4];
                if (!v78 || (v79 = v78 - 1, (v74[4] = v79) == 0))
                  v74[3] = 0;
                break;
              }
            }
            else
            {
              if (v76 >= *(_QWORD *)&v69)
                v76 %= *(_QWORD *)&v69;
              if (v76 != v72)
                break;
            }
            v74 = (_QWORD *)*v74;
          }
          while (v74);
        }
      }
    }
  }
LABEL_124:
  if (v19)
  {
    v80 = v26[1203];
    if (v80)
    {
      v81 = *v19;
      v82 = (uint8x8_t)vcnt_s8(v80);
      v82.i16[0] = vaddlv_u8(v82);
      if (v82.u32[0] > 1uLL)
      {
        v83 = v81;
        if (*(_QWORD *)&v80 <= v81)
          v83 = v81 % *(_QWORD *)&v80;
      }
      else
      {
        v83 = (*(_QWORD *)&v80 - 1) & v81;
      }
      v84 = *(_QWORD **)(*(_QWORD *)&v26[1202] + 8 * v83);
      if (v84)
      {
        v85 = (_QWORD *)*v84;
        if (v85)
        {
          if (v82.u32[0] < 2uLL)
          {
            v86 = *(_QWORD *)&v80 - 1;
            while (1)
            {
              v88 = v85[1];
              if (v88 == v81)
              {
                if (v85[2] == v81)
                  goto LABEL_146;
              }
              else if ((v88 & v86) != v83)
              {
                goto LABEL_149;
              }
              v85 = (_QWORD *)*v85;
              if (!v85)
                goto LABEL_149;
            }
          }
          do
          {
            v87 = v85[1];
            if (v87 == v81)
            {
              if (v85[2] == v81)
              {
LABEL_146:
                v89 = v85[4];
                if (!v89 || (v90 = v89 - 1, (v85[4] = v90) == 0))
                  v85[3] = 0;
                break;
              }
            }
            else
            {
              if (v87 >= *(_QWORD *)&v80)
                v87 %= *(_QWORD *)&v80;
              if (v87 != v83)
                break;
            }
            v85 = (_QWORD *)*v85;
          }
          while (v85);
        }
      }
    }
  }
LABEL_149:
  if (v20)
    md::VKMRenderResourcesStore::disconnect<geo::handle<md::DeviceDataResource>>(v26, *v20);
  if (v21)
    md::VKMRenderResourcesStore::disconnect<geo::handle<md::DeviceDataResource>>(v26, *v21);
  if (v22)
    md::VKMRenderResourcesStore::disconnect<geo::handle<md::DeviceDataResource>>(v26, *v22);
  if (v23)
    md::VKMRenderResourcesStore::disconnect<geo::handle<md::DeviceDataResource>>(v26, *v23);
  if (v24)
    md::VKMRenderResourcesStore::disconnect<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>(v26, *v24);
  if (v25)
  {
    v91 = v26[1286];
    if (v91)
    {
      v92 = *v25;
      v93 = (uint8x8_t)vcnt_s8(v91);
      v93.i16[0] = vaddlv_u8(v93);
      if (v93.u32[0] > 1uLL)
      {
        v94 = *v25;
        if (v92 >= *(_QWORD *)&v91)
          v94 = v92 % *(_QWORD *)&v91;
      }
      else
      {
        v94 = (*(_QWORD *)&v91 - 1) & v92;
      }
      v95 = v26[1285];
      v96 = *(int8x8_t ***)(*(_QWORD *)&v95 + 8 * v94);
      if (v96)
      {
        v97 = *v96;
        if (*v96)
        {
          v98 = *(_QWORD *)&v91 - 1;
          if (v93.u32[0] < 2uLL)
          {
            while (1)
            {
              v99 = v97[1];
              if (*(_QWORD *)&v99 == v92)
              {
                if (*(_QWORD *)&v97[2] == v92)
                  goto LABEL_181;
              }
              else if ((*(_QWORD *)&v99 & v98) != v94)
              {
                return;
              }
              v97 = (int8x8_t *)*v97;
              if (!v97)
                return;
            }
          }
          do
          {
            v100 = (unint64_t)v97[1];
            if (v100 == v92)
            {
              if (*(_QWORD *)&v97[2] == v92)
              {
LABEL_181:
                if (v93.u32[0] > 1uLL)
                {
                  if (v92 >= *(_QWORD *)&v91)
                    v92 %= *(_QWORD *)&v91;
                }
                else
                {
                  v92 &= v98;
                }
                v101 = *(int8x8_t **)(*(_QWORD *)&v95 + 8 * v92);
                do
                {
                  v102 = v101;
                  v101 = (int8x8_t *)*v101;
                }
                while (v101 != v97);
                if (v102 == &v26[1287])
                  goto LABEL_201;
                v103 = v102[1];
                if (v93.u32[0] > 1uLL)
                {
                  if (*(_QWORD *)&v103 >= *(_QWORD *)&v91)
                    *(_QWORD *)&v103 %= *(_QWORD *)&v91;
                }
                else
                {
                  *(_QWORD *)&v103 &= v98;
                }
                if (*(_QWORD *)&v103 != v92)
                {
LABEL_201:
                  if (!*(_QWORD *)v97)
                    goto LABEL_202;
                  v106 = *(_QWORD *)(*(_QWORD *)v97 + 8);
                  if (v93.u32[0] > 1uLL)
                  {
                    if (v106 >= *(_QWORD *)&v91)
                      v106 %= *(_QWORD *)&v91;
                  }
                  else
                  {
                    v106 &= v98;
                  }
                  if (v106 != v92)
LABEL_202:
                    *(_QWORD *)(*(_QWORD *)&v95 + 8 * v92) = 0;
                }
                v107 = *v97;
                if (*v97)
                {
                  v108 = *(_QWORD *)(*(_QWORD *)&v107 + 8);
                  if (v93.u32[0] > 1uLL)
                  {
                    if (v108 >= *(_QWORD *)&v91)
                      v108 %= *(_QWORD *)&v91;
                  }
                  else
                  {
                    v108 &= v98;
                  }
                  if (v108 != v92)
                  {
                    *(_QWORD *)(*(_QWORD *)&v26[1285] + 8 * v108) = v102;
                    v107 = *v97;
                  }
                }
                *v102 = v107;
                *v97 = 0;
                --*(_QWORD *)&v26[1288];
                operator delete(v97);
                return;
              }
            }
            else
            {
              if (v100 >= *(_QWORD *)&v91)
                v100 %= *(_QWORD *)&v91;
              if (v100 != v94)
                return;
            }
            v97 = (int8x8_t *)*v97;
          }
          while (v97);
        }
      }
    }
  }
}

void std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B9B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B9B8;
  a2[1] = v2;
  return result;
}

int8x8_t *std::__function::__func<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1},std::allocator<std::function<void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle *)> md::ita::disconnect_components<md::MaterialResourceStore,md::ls::RenderableMaterialData,md::ls::RampMaterialData,md::ls::ColorDataHandle,md::ls::UniqueMaterialVisibilityOptionsHandle,md::ls::UniqueMaterialZIndexHandle,md::ls::UniqueColorDataHandle>(md::MaterialResourceStore *)::{lambda(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)#1}>,void ()(md::ls::PendingDeletion const&,md::ls::RenderableMaterialData*,md::ls::RampMaterialData*,md::ls::ColorDataHandle*,md::ls::UniqueMaterialVisibilityOptionsHandle*,md::ls::UniqueMaterialZIndexHandle*,md::ls::UniqueColorDataHandle*)>::operator()(int8x8_t *result, uint64_t a2, unint64_t **a3, unint64_t **a4, unint64_t **a5, unint64_t **a6, unint64_t **a7, unint64_t **a8)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  int8x8_t *v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v11 = *a7;
  v12 = *a8;
  v13 = (int8x8_t *)result[1];
  if (*a3)
    result = md::MaterialResourceStore::disconnect<geo::handle<md::MaterialIDStorage>>(*(int8x8_t **)&result[1], **a3);
  if (v8)
    result = md::MaterialResourceStore::disconnect<geo::handle<md::MaterialIDStorage>>(v13, *v8);
  if (v9)
    result = md::MaterialResourceStore::disconnect<geo::handle<md::ls::ColorData>>(v13, *v9);
  if (v10)
  {
    v14 = v13[45];
    if (v14)
    {
      v15 = *v10;
      v16 = (uint8x8_t)vcnt_s8(v14);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = *v10;
        if (*(_QWORD *)&v14 <= v15)
          v17 = v15 % *(_QWORD *)&v14;
      }
      else
      {
        v17 = (*(_QWORD *)&v14 - 1) & v15;
      }
      v18 = *(_QWORD **)(*(_QWORD *)&v13[44] + 8 * v17);
      if (v18)
      {
        v19 = (_QWORD *)*v18;
        if (v19)
        {
          if (v16.u32[0] < 2uLL)
          {
            v20 = *(_QWORD *)&v14 - 1;
            while (1)
            {
              v22 = v19[1];
              if (v22 == v15)
              {
                if (v19[2] == v15)
                  goto LABEL_29;
              }
              else if ((v22 & v20) != v17)
              {
                goto LABEL_32;
              }
              v19 = (_QWORD *)*v19;
              if (!v19)
                goto LABEL_32;
            }
          }
          do
          {
            v21 = v19[1];
            if (v21 == v15)
            {
              if (v19[2] == v15)
              {
LABEL_29:
                v23 = v19[4];
                if (!v23 || (v24 = v23 - 1, (v19[4] = v24) == 0))
                  v19[3] = 0;
                break;
              }
            }
            else
            {
              if (v21 >= *(_QWORD *)&v14)
                v21 %= *(_QWORD *)&v14;
              if (v21 != v17)
                break;
            }
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
      }
    }
  }
LABEL_32:
  if (v11)
  {
    v25 = v13[82];
    if (v25)
    {
      v26 = *v11;
      v27 = (uint8x8_t)vcnt_s8(v25);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v28 = *v11;
        if (*(_QWORD *)&v25 <= v26)
          v28 = v26 % *(_QWORD *)&v25;
      }
      else
      {
        v28 = (*(_QWORD *)&v25 - 1) & v26;
      }
      v29 = *(_QWORD **)(*(_QWORD *)&v13[81] + 8 * v28);
      if (v29)
      {
        v30 = (_QWORD *)*v29;
        if (v30)
        {
          if (v27.u32[0] < 2uLL)
          {
            v31 = *(_QWORD *)&v25 - 1;
            while (1)
            {
              v33 = v30[1];
              if (v33 == v26)
              {
                if (v30[2] == v26)
                  goto LABEL_54;
              }
              else if ((v33 & v31) != v28)
              {
                goto LABEL_57;
              }
              v30 = (_QWORD *)*v30;
              if (!v30)
                goto LABEL_57;
            }
          }
          do
          {
            v32 = v30[1];
            if (v32 == v26)
            {
              if (v30[2] == v26)
              {
LABEL_54:
                v34 = v30[4];
                if (!v34 || (v35 = v34 - 1, (v30[4] = v35) == 0))
                  v30[3] = 0;
                break;
              }
            }
            else
            {
              if (v32 >= *(_QWORD *)&v25)
                v32 %= *(_QWORD *)&v25;
              if (v32 != v28)
                break;
            }
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
      }
    }
  }
LABEL_57:
  if (v12)
    return md::MaterialResourceStore::disconnect<geo::handle<md::ls::ColorData>>(v13, *v12);
  return result;
}

void std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0>,void ()(md::ls::RequestReset const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0>,void ()(md::ls::RequestReset const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B658;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0>,void ()(md::ls::RequestReset const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B658;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0>,void ()(md::ls::RequestReset const&)>::operator()()
{
  uint64_t v0;
  _QWORD **v1;
  _QWORD *v2;
  char v3;
  _QWORD v4[4];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v2 = *v1;
  v4[0] = v0;
  v5 = 2;
  ecs2::Runtime::queueCommand(v2, (uint64_t)v4);
  if (v5 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v5])(&v3, v4);
}

void std::__function::__func<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0,std::allocator<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0>,void ()(md::ls::PendingDeletion const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0,std::allocator<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0>,void ()(md::ls::PendingDeletion const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0,std::allocator<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0>,void ()(md::ls::PendingDeletion const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B850;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0,std::allocator<md::ita::DeletePendingDeletion::operator()(ecs2::Query<md::ls::PendingDeletion const&>)::$_0>,void ()(md::ls::PendingDeletion const&)>::operator()()
{
  uint64_t v0;
  _QWORD **v1;
  _QWORD *v2;
  char v3;
  _QWORD v4[4];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v2 = *v1;
  v4[0] = v0;
  v5 = 2;
  ecs2::Runtime::queueCommand(v2, (uint64_t)v4);
  if (v5 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v5])(&v3, v4);
}

void std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1>,void ()(md::ls::UniqueMaterialData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1>,void ()(md::ls::UniqueMaterialData &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BE80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1>,void ()(md::ls::UniqueMaterialData &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BE80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t **std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_1>,void ()(md::ls::UniqueMaterialData &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  int v10;
  uint64_t **v11;
  _QWORD v12[2];
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = md::MaterialResourceStore::canDeleteMaterial(**(_QWORD ***)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    v3 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v4 = HIDWORD(*v3);
    v5 = *v3 << 32;
    v9[0] = &off_1E427E280;
    v9[1] = v5;
    v10 = v4;
    v11 = (uint64_t **)v9;
    v12[0] = &off_1E427E280;
    v14 = v12;
    v12[1] = v5;
    v13 = v4;
    v15 = 0;
    ecs2::Runtime::queueCommand(v6, (uint64_t)v12);
    if (v15 != -1)
      ((void (*)(char *, _QWORD *))off_1E42FB340[v15])(&v8, v12);
    v15 = -1;
    result = v11;
    if (v11 == v9)
    {
      v7 = 4;
      result = (uint64_t **)v9;
    }
    else
    {
      if (!v11)
        return result;
      v7 = 5;
    }
    return (uint64_t **)((uint64_t (*)(void))(*result)[v7])();
  }
  return result;
}

void std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0>,void ()(md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0>,void ()(md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BE38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0>,void ()(md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BE38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0,std::allocator<md::ita::UpdateResourcesAfterRebuild::operator()(ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>,ecs2::Query<md::ls::UniqueMaterialData &>)::$_0>,void ()(md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&)>::operator()(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t *a4)
{
  _QWORD **v4;
  uint64_t AssociationItemStorage;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *j;
  _QWORD *v15;
  _QWORD *i;
  char v19;
  _QWORD v20[2];
  int v21;
  _QWORD *v22;
  _QWORD v23[2];
  int v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*a3)
  {
    v4 = *(_QWORD ***)(a1 + 16);
    AssociationItemStorage = md::VKMRenderResourcesStore::getAssociationItemStorage(**(_QWORD **)(a1 + 8), *a4, 1);
    v6 = *(_QWORD **)(AssociationItemStorage + 32);
    v7 = *(_QWORD **)(AssociationItemStorage + 40);
    for (i = (_QWORD *)AssociationItemStorage; v6 != v7; ++v6)
    {
      v10 = *v4;
      v11 = HIDWORD(*v6);
      v12 = *v6 << 32;
      v20[0] = &off_1E427E280;
      v20[1] = v12;
      v21 = v11;
      v22 = v20;
      v23[0] = &off_1E427E280;
      v25 = v23;
      v23[1] = v12;
      v24 = v11;
      v26 = 0;
      ecs2::Runtime::queueCommand(v10, (uint64_t)v23);
      if (v26 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v26])(&v19, v23);
      v26 = -1;
      v8 = v22;
      if (v22 == v20)
      {
        v8 = v20;
        v9 = 4;
      }
      else
      {
        if (!v22)
          continue;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
    }
    v13 = (_QWORD *)i[1];
    for (j = (_QWORD *)i[2]; v13 != j; ++v13)
    {
      v15 = *v4;
      v23[0] = *v13;
      v26 = 2;
      ecs2::Runtime::queueCommand(v15, (uint64_t)v23);
      if (v26 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E42FB340[v26])(v20, v23);
    }
    md::VKMRenderResourcesStore::clearRenderItemGroup(**(_QWORD ***)(a1 + 8), a4, 0);
    i[2] = i[1];
    i[5] = i[4];
  }
}

void _registerStateCaptureCallbacks_13697()
{
  if (_registerStateCaptureCallbacks_onceToken_13698[0] != -1)
    dispatch_once(_registerStateCaptureCallbacks_onceToken_13698, &__block_literal_global_3_13699);
}

uint64_t ___registerStateCaptureCallbacks_block_invoke_13700()
{
  _stateCaptureCallbackRegistration_13696 = 1;
  return _GEOConfigRegisterStateCaptureFunctions();
}

void *_getConfigStoreStringKeysForStateCapture_13701()
{
  return &unk_1E4347EC0;
}

void ggl::StandardPostchain::CompositePipelineSetup::~CompositePipelineSetup(ggl::StandardPostchain::CompositePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::CompositePipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::CompositePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::CompositePipelineSetup::textureIsEnabled(ggl::StandardPostchain::CompositePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::StandardPostchain::DepthSplitPipelineSetup::~DepthSplitPipelineSetup(ggl::StandardPostchain::DepthSplitPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::DepthSplitPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::DepthSplitPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::DepthSplitPipelineSetup::textureIsEnabled(ggl::StandardPostchain::DepthSplitPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::StandardPostchain::DownsampleCoCPipelineSetup::~DownsampleCoCPipelineSetup(ggl::StandardPostchain::DownsampleCoCPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::StandardPostchain::DownsampleCoCPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::DownsampleCoCPipelineSetup *this)
{
  return 0;
}

BOOL ggl::StandardPostchain::DownsampleCoCPipelineSetup::textureIsEnabled(ggl::StandardPostchain::DownsampleCoCPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::StandardPostchain::FGBlurPipelineSetup::~FGBlurPipelineSetup(ggl::StandardPostchain::FGBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::FGBlurPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::FGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::FGBlurPipelineSetup::textureIsEnabled(ggl::StandardPostchain::FGBlurPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::StandardPostchain::BGBlurPipelineSetup::~BGBlurPipelineSetup(ggl::StandardPostchain::BGBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::BGBlurPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::BGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::BGBlurPipelineSetup::textureIsEnabled(ggl::StandardPostchain::BGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::StandardPostchain::TentBlurPipelineState::TentBlurPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v89;
    if (v90)
    {
      if ((v91 & 1) == 0
      {
        if ((v94 & 1) == 0
        {
          if ((v97 & 1) == 0
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1ECE43AC8 = 1;
        }
        ggl::StandardPostchain::TentBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        unk_1EE57D9D0 = &ggl::StandardPostchain::pipelineDataTentBlurPipelineDeviceStructs(void)::ref;
        qword_1EE57D9D8 = 0;
        unk_1EE57D9E0 = &ggl::StandardPostchain::pipelineDataTentBlurPipelineConstantStructs(void)::ref;
        xmmword_1EE57D9E8 = xmmword_19FFB2E40;
      }
      ggl::StandardPostchain::TentBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::TentBlurPipelineSetup::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainTentBlurShader";
        if ((v95 & 1) == 0
        {
          v98 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
          qword_1ECE35588 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1ECE35590 = ggl::standardPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35598 = 1;
          unk_1ECE355A0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE355A8 = 0;
          unk_1ECE355B0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE355B8 = 0;
          unk_1ECE355C0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v98;
          *(_DWORD *)algn_1ECE35584 = 0;
          qword_1ECE355C8 = 0;
          unk_1ECE355D0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE355E0 = 0;
          unk_1ECE355E8 = 0;
          qword_1ECE355D8 = 0;
        }
        qword_1ECE34868 = (uint64_t)&ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE34870 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
        if ((v96 & 1) == 0
        {
          ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x11C5A8EEELL;
          qword_1ECE358C0 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1ECE358C8 = 0;
          qword_1ECE358D0 = 0;
          unk_1ECE358D8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE358E0 = 0;
          unk_1ECE358E8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE358F0 = 0;
          unk_1ECE358F8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35900 = 1;
          unk_1ECE35908 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35918 = 0;
          unk_1ECE35920 = 0;
          qword_1ECE35910 = 1;
        }
        qword_1ECE34878 = (uint64_t)&ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE34880 = 475696878;
        qword_1ECE34888 = (uint64_t)&ggl::standardPostchainTentBlurShaderShaderConstants(void)::ref;
        unk_1ECE34890 = 0;
        qword_1ECE34898 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderTextures(void)::ref;
        unk_1ECE348A0 = 1;
        qword_1ECE348A8 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderSamplers(void)::ref;
        unk_1ECE348B0 = 1;
      }
      qword_1EE57DA08 = (uint64_t)&ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57DF50 = 0;
        qword_1EE57DF58 = (uint64_t)"";
        dword_1EE57DF60 = 0;
        qword_1EE57DF68 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE57DF70 = 2;
      }
      qword_1EE57DA10 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57DA18 = 1;
      qword_1EE57DA20 = 0;
      unk_1EE57DA28 = 1;
      qword_1EE57DA30 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE57DA38 = 0;
      qword_1EE57DA40 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineConstantStructBinding(void)::ref;
      unk_1EE57DA48 = 0;
      a4 = v89;
      a2 = v99;
      a3 = v100;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::StandardPostchain::TentBlurPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BA360;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::StandardPostchain::TentBlurPipelineSetup::~TentBlurPipelineSetup(ggl::StandardPostchain::TentBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::StandardPostchain::TentBlurPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::TentBlurPipelineSetup *this)
{
  return 0;
}

BOOL ggl::StandardPostchain::TentBlurPipelineSetup::textureIsEnabled(ggl::StandardPostchain::TentBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::StandardPostchain::DownsampleDepthPipelineSetup::~DownsampleDepthPipelineSetup(ggl::StandardPostchain::DownsampleDepthPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::StandardPostchain::DownsampleDepthPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::DownsampleDepthPipelineSetup *this)
{
  return 0;
}

BOOL ggl::StandardPostchain::DownsampleDepthPipelineSetup::textureIsEnabled(ggl::StandardPostchain::DownsampleDepthPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::StandardPostchain::SSAOBlurPipelineState::SSAOBlurPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  int v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v103 = a2;
    v104 = a3;
    a2 = v103;
    a3 = v104;
    a4 = v91;
    if (v92)
    {
      if ((v93 & 1) == 0
      {
        if ((v97 & 1) == 0
        {
          if ((v101 & 1) == 0
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1ECE43AC8 = 1;
        }
        ggl::StandardPostchain::SSAOBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        unk_1EE57D940 = &ggl::StandardPostchain::pipelineDataSSAOBlurPipelineDeviceStructs(void)::ref;
        qword_1EE57D948 = 0;
        if ((v98 & 1) == 0
        {
          ggl::StandardPostchain::pipelineDataSSAOBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::SsaoBlurParam::reflection(void)::reflection;
        }
        qword_1EE57D950 = (uint64_t)&ggl::StandardPostchain::pipelineDataSSAOBlurPipelineConstantStructs(void)::ref;
        unk_1EE57D958 = xmmword_19FFB2DB0;
      }
      ggl::StandardPostchain::SSAOBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::SSAOBlurPipelineSetup::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOBlurShader";
        if ((v99 & 1) == 0
        {
          v102 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
          qword_1ECE35518 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1ECE35520 = ggl::standardPostchainSSAOBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35528 = 1;
          unk_1ECE35530 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35538 = 0;
          unk_1ECE35540 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35548 = 0;
          unk_1ECE35550 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref = v102;
          *(_DWORD *)algn_1ECE35514 = 0;
          qword_1ECE35558 = 0;
          unk_1ECE35560 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35570 = 0;
          unk_1ECE35578 = 0;
          qword_1ECE35568 = 0;
        }
        qword_1ECE34808 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE34810 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
        if ((v100 & 1) == 0
        {
          ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1AAC07444;
          qword_1ECE357D0 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1ECE357D8 = 0;
          qword_1ECE357E0 = 0;
          unk_1ECE357E8 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE357F0 = 1;
          unk_1ECE357F8 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35800 = 0;
          unk_1ECE35808 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35810 = 2;
          unk_1ECE35818 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35828 = 0;
          unk_1ECE35830 = 0;
          qword_1ECE35820 = 2;
        }
        qword_1ECE34818 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE34820 = -1430227900;
        qword_1ECE34828 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderConstants(void)::ref;
        unk_1ECE34830 = 1;
        qword_1ECE34838 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderTextures(void)::ref;
        unk_1ECE34840 = 2;
        qword_1ECE34848 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderSamplers(void)::ref;
        unk_1ECE34850 = 2;
      }
      qword_1EE57D978 = (uint64_t)&ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref;
      if ((v95 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateSSAOBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57DF20 = 0;
        qword_1EE57DF28 = (uint64_t)"";
        dword_1EE57DF30 = 0;
        qword_1EE57DF38 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE57DF40 = 2;
      }
      qword_1EE57D980 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57D988 = 1;
      qword_1EE57D990 = 0;
      unk_1EE57D998 = 2;
      qword_1EE57D9A0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE57D9A8 = 0;
      if ((v96 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateSSAOBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57DEB0 = 0;
        qword_1EE57DEB8 = (uint64_t)"ssaoBlurParam";
        dword_1EE57DEC0 = 3;
        qword_1EE57DEC8 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineConstantSsaoBlurParamBinding(void)::reflection;
        unk_1EE57DED0 = 4;
      }
      qword_1EE57D9B0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineConstantStructBinding(void)::ref;
      unk_1EE57D9B8 = 1;
      a4 = v91;
      a2 = v103;
      a3 = v104;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v107 = *(_OWORD *)a3;
  *(_OWORD *)&v107[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v105 = *a4;
  v106 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::StandardPostchain::SSAOBlurPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v105;
  *(_OWORD *)(a1 + 272) = v106;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v107;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v107[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 305) = (a5 & 2) != 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  *(_QWORD *)a1 = &off_1E42BA310;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::StandardPostchain::SSAOBlurPipelineSetup::~SSAOBlurPipelineSetup(ggl::StandardPostchain::SSAOBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::SSAOBlurPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::SSAOBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::SSAOBlurPipelineSetup::textureIsEnabled(ggl::StandardPostchain::SSAOBlurPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::StandardPostchain::SSAOUpsamplePipelineSetup::~SSAOUpsamplePipelineSetup(ggl::StandardPostchain::SSAOUpsamplePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::SSAOUpsamplePipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::SSAOUpsamplePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::SSAOUpsamplePipelineSetup::textureIsEnabled(ggl::StandardPostchain::SSAOUpsamplePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::TrafficBase::BaseMesh::~BaseMesh(ggl::TrafficBase::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TrafficBase::BaseMesh::~BaseMesh(ggl::TrafficBase::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TrafficBase::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::TrafficBase::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::TrafficBase::BaseMesh::BaseMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TrafficBase::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43B40 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BD438;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD458;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42B5F78;
  *(_QWORD *)(a1 + 16) = &unk_1E42B5F98;
  return a1;
}

void md::LabelTransitSupport::setRouteLine(md::LabelTransitSupport *this, VKRouteLine *a2)
{
  VKRouteLine *v3;
  VKRouteLine *v4;
  uint64_t v5;
  VKRouteLine *v6;
  BOOL v7;
  int v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  VKRouteLine *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  VKRouteLineObserver *v31;
  void *v32;
  char *v33;
  char *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *__p;
  char *v40;
  uint64_t v41;

  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)this + 43);
  if (v5)
  {
    v6 = (VKRouteLine *)*(id *)(v5 + 32);
    if (v6 == v4)
      goto LABEL_58;
  }
  else
  {
    v6 = 0;
    if (!v3)
      goto LABEL_58;
  }
  if (v4)
    v7 = v6 == 0;
  else
    v7 = 1;
  v8 = !v7;
  v9 = (void *)*((_QWORD *)this + 39);
  if (v9)
  {
    *((_QWORD *)this + 39) = 0;

  }
  if (v8)
  {
    *((_BYTE *)this + 114) = 1;
    *(_BYTE *)(*((_QWORD *)this + 2) + 3329) = 1;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  __p = 0;
  v40 = 0;
  v41 = 0;
  md::LabelTransitSupport::setExternalTransitShieldFeatures((uint64_t)this, (uint64_t **)&__p);
  v13 = (char *)__p;
  if (__p)
  {
    v14 = v40;
    v15 = __p;
    if (v40 != __p)
    {
      do
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = __p;
    }
    v40 = v13;
    operator delete(v15);
  }
  if (v4 && !v6)
    goto LABEL_42;
  v19 = *((_QWORD *)this + 30);
  for (i = *((_QWORD *)this + 31); i != v19; i -= 16)
  {
    v21 = *(std::__shared_weak_count **)(i - 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  *((_QWORD *)this + 31) = v19;
  std::__tree<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,std::__map_value_compare<std::shared_ptr<md::LabelExternalRoadFeature>,std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,md::LabelExternalRoadFeatureLess,true>,geo::StdAllocator<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,mdm::Allocator>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
LABEL_42:
    v24 = operator new(0x48uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = &off_1E42DC778;
    v25 = v4;
    -[VKRouteLine overlay](v25, "overlay");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "composedRoute");
    v27 = objc_claimAutoreleasedReturnValue();
    v24[3] = &off_1E42B4C30;
    v24[4] = v27;

    v24[6] = &off_1E42B4A30;
    v24[7] = v25;
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    *((_QWORD *)this + 43) = v24 + 3;
    *((_QWORD *)this + 44) = v24;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = -[VKRouteLineObserver initWithTransitSupport:andRouteLine:]([VKRouteLineObserver alloc], "initWithTransitSupport:andRouteLine:", this, v25);
    v32 = (void *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = v31;

    __p = 0;
    v40 = 0;
    v41 = 0;
    md::LabelTransitRouteLine::generateTransitShieldFeatures(*((_QWORD *)this + 43), *((_QWORD *)this + 2), (uint64_t)&__p);
    md::LabelTransitSupport::setExternalTransitShieldFeatures((uint64_t)this, (uint64_t **)&__p);
    v33 = (char *)__p;
    if (__p)
    {
      v34 = v40;
      v35 = __p;
      if (v40 != __p)
      {
        do
        {
          v36 = (std::__shared_weak_count *)*((_QWORD *)v34 - 1);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v34 -= 16;
        }
        while (v34 != v33);
        v35 = __p;
      }
      v40 = v33;
      operator delete(v35);
    }
  }
LABEL_58:

}

void sub_19F9FA5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v7;

  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v7);

  _Unwind_Resume(a1);
}

float md::LabelTransitSupport::baseTransitLineColor@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>, unsigned int a4@<S0>, unsigned int a5@<S1>)
{
  uint64_t **v7;
  _BOOL4 ColorOverrideForAttributes;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float result;
  uint64_t v18[3];
  uint64_t v19;
  _DWORD v20[4];

  v7 = *(uint64_t ***)(a1 + 24);
  if (!v7)
    goto LABEL_6;
  md::createFeatureAttributeSet((gss::Allocator *)v18, (uint64_t *)(a2 + 24));
  ColorOverrideForAttributes = md::DataOverrideManager::getColorOverrideForAttributes(v7, v18, v20);
  if (v18[0])
  {
    v18[1] = v18[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v18[0], v18[2] - v18[0]);
  }
  if (ColorOverrideForAttributes)
  {
    v9 = *(float *)v20;
    v10 = *(float *)&v20[1];
    v11 = *(float *)&v20[2];
    v12 = (int)(float)(*(float *)&v20[3] * 255.0);
  }
  else
  {
LABEL_6:
    LOBYTE(v12) = *(_BYTE *)(a2 + 83);
    LOBYTE(a4) = *(_BYTE *)(a2 + 80);
    v13 = (float)a4;
    LOBYTE(a5) = *(_BYTE *)(a2 + 81);
    v14 = (float)a5;
    LOBYTE(a5) = *(_BYTE *)(a2 + 82);
    v15 = (float)a5;
    if ((float)(v13 * 0.0039216) >= 0.04045)
      v9 = powf((float)(v13 * 0.0037171) + 0.052133, 2.4);
    else
      v9 = v13 * 0.00030353;
    if ((float)(v14 * 0.0039216) >= 0.04045)
      v10 = powf((float)(v14 * 0.0037171) + 0.052133, 2.4);
    else
      v10 = v14 * 0.00030353;
    if ((float)(v15 * 0.0039216) >= 0.04045)
      v11 = powf((float)(v15 * 0.0037171) + 0.052133, 2.4);
    else
      v11 = v15 * 0.00030353;
  }
  v16 = (int)(float)(v11 * 255.0);
  result = v9 * 255.0;
  *a3 = (int)(float)(v9 * 255.0);
  a3[1] = (int)(float)(v10 * 255.0);
  a3[2] = v16;
  a3[3] = v12;
  return result;
}

void sub_19F9FA840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
  _Unwind_Resume(exception_object);
}

void md::LabelTransitSupport::findColorForTransitLine(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  const FeatureStyleAttributes *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  __n128 v52;
  uint8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned __int8 v58;
  unint64_t v60;
  uint64_t v62;
  float v63;
  float v64;
  _BOOL8 v65;
  unint64_t v66;
  unint64_t v67;
  size_t prime;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  size_t v76;
  _QWORD *i;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;

  v9 = *(_QWORD *)(a2 + 40);
  v10 = a4;
  v11 = v9 ^ a4;
  v12 = *(int8x8_t *)(a1 + 376);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = v9 ^ a4;
      if (v11 >= *(_QWORD *)&v12)
        v14 = v11 % *(_QWORD *)&v12;
    }
    else
    {
      v14 = (*(_QWORD *)&v12 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)(a1 + 368) + 8 * v14);
    if (v15)
    {
      v16 = *v15;
      if (v16)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v16[1];
            if (v20 == v11)
            {
              if (v16[2] == v9 && *((unsigned __int8 *)v16 + 24) == a4)
                goto LABEL_179;
            }
            else if ((v20 & (*(_QWORD *)&v12 - 1)) != v14)
            {
              goto LABEL_27;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_27;
          }
        }
        do
        {
          v18 = v16[1];
          if (v18 == v11)
          {
            if (v16[2] == v9 && *((unsigned __int8 *)v16 + 24) == a4)
            {
LABEL_179:
              *a3 = *((_BYTE *)v16 + 32);
              a3[1] = *((_BYTE *)v16 + 33);
              a3[2] = *((_BYTE *)v16 + 34);
              a3[3] = *((_BYTE *)v16 + 35);
              return;
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
            if (v18 != v14)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_27:
  if (*(_QWORD *)(a1 + 408) >= 0x7D0uLL)
  {
    v21 = *(_QWORD **)(a1 + 392);
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 40))(*(_QWORD *)(a1 + 400));
        v21 = v22;
      }
      while (v22);
      v12 = *(int8x8_t *)(a1 + 376);
    }
    *(_QWORD *)(a1 + 392) = 0;
    if (v12)
    {
      v23 = 0;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v23++) = 0;
      while (*(_QWORD *)&v12 != v23);
    }
    *(_QWORD *)(a1 + 408) = 0;
  }
  v103 = 0uLL;
  if (a4)
  {
    v94 = v10;
    v24 = *(const FeatureStyleAttributes **)(a2 + 24);
    v25 = (std::__shared_weak_count *)operator new(0x40uLL);
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)&v25[1], v24);
    *(_QWORD *)&v102 = v25 + 1;
    *((_QWORD *)&v102 + 1) = v25;
    v27 = BYTE1(v25[2].__shared_owners_);
    v28 = v25[1].__vftable;
    if (BYTE1(v25[2].__shared_owners_))
    {
      if (v27 >= 0x20)
      {
        v29 = 0;
        v39 = v25[1].__vftable;
        while (1)
        {
          v40 = (int)v39->~__shared_weak_count;
          v39 = (std::__shared_weak_count_vtbl *)((char *)v39 + 8);
          if (v40 == 65538)
            break;
          if (v27 == ++v29)
            goto LABEL_55;
        }
      }
      else
      {
        v29 = 0;
        v30 = v25[1].__vftable;
        while (1)
        {
          v31 = (int)v30->~__shared_weak_count;
          v30 = (std::__shared_weak_count_vtbl *)((char *)v30 + 8);
          if (v31 == 65538)
            break;
          if (v27 == ++v29)
            goto LABEL_41;
        }
      }
      *((_DWORD *)&v28->~__shared_weak_count + 2 * v29 + 1) = 1;
    }
    else
    {
LABEL_41:
      *((_QWORD *)&v28->~__shared_weak_count + v27) = 0x100010002;
      v32 = BYTE1(v25[2].__shared_owners_) + 1;
      BYTE1(v25[2].__shared_owners_) = v32;
      qsort(v25[1].__vftable, v32, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_55:
    v41 = *(_QWORD *)(a1 + 16);
    v100[0] = (uint64_t)&v25[1];
    v100[1] = (uint64_t)v25;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
    v4 = *(_QWORD *)(v41 + 336);
    md::createFeatureAttributeSet((gss::Allocator *)&v95, v100);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v101, (uint64_t *)(v4 + 184), &v95, 0);
    if (v95)
    {
      v96 = v95;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98 + 40))(v98, v95, v97 - v95);
    }
    v43 = v101;
    v101 = 0uLL;
    v103 = v43;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    v10 = v94;
    if (*((_QWORD *)&v102 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    v34 = v103;
    v102 = v103;
    if (!*((_QWORD *)&v103 + 1))
      goto LABEL_69;
  }
  else
  {
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 336);
    md::createFeatureAttributeSet((gss::Allocator *)&v95, (uint64_t *)(a2 + 24));
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v102, (uint64_t *)(v33 + 184), &v95, 0);
    if (v95)
    {
      v96 = v95;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98 + 40))(v98, v95, v97 - v95);
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    v34 = v102;
    v103 = v102;
    if (!*((_QWORD *)&v102 + 1))
    {
LABEL_69:
      v96 = 0;
      goto LABEL_70;
    }
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v96 = (uint64_t)v35;
  do
    v38 = __ldxr(v36);
  while (__stxr(v38 + 1, v36));
LABEL_70:
  v97 = 0;
  v98 = 0;
  v95 = v34;
  v99 = 0;
  if (v34)
    LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v97);
  v99 = v34;
  if (v35)
  {
    v48 = (unint64_t *)&v35->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    LODWORD(v34) = v99;
  }
  if (!(_DWORD)v34)
    goto LABEL_87;
  v50 = *(_QWORD *)(v95 + 24);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 432) + 28) >= 0x17u)
    v4 = 23;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 432) + 28);
  v51 = *(unsigned __int8 *)(v50 + 12);
  if (v51 != 2)
  {
LABEL_85:
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v50, 0x5Cu, v4, v51))
      goto LABEL_86;
LABEL_87:
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v102, a1, a2);
    v53.i32[0] = v102;
    v52 = (__n128)vmovl_u8(v53);
    goto LABEL_88;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v95 + 24), 0x5Cu, v4, 0) & 1) == 0)
  {
    v51 = 1;
    goto LABEL_85;
  }
LABEL_86:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v102, v50, 0x5Cu, v4, 1u, 0);
  v52 = (__n128)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v102)), (float32x4_t)vdupq_n_s32(0x3B7F00FFu)));
  v52.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v52);
  v53.i32[0] = vmovn_s16((int16x8_t)v52).u32[0];
LABEL_88:
  *(_DWORD *)a3 = v53.i32[0];
  v54 = *(_QWORD *)(a1 + 376);
  if (v54)
  {
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v54)
        v4 = v11 % v54;
    }
    else
    {
      v4 = (v54 - 1) & v11;
    }
    v56 = *(uint64_t **)(*(_QWORD *)(a1 + 368) + 8 * v4);
    if (v56)
    {
      v57 = *v56;
      if (*v56)
      {
        v58 = v52.n128_u8[0];
        if (v55.u32[0] < 2uLL)
        {
          while (1)
          {
            v62 = *(_QWORD *)(v57 + 8);
            if (v62 == v11)
            {
              if (*(_QWORD *)(v57 + 16) == v9 && *(unsigned __int8 *)(v57 + 24) == a4)
                goto LABEL_174;
            }
            else if ((v62 & (v54 - 1)) != v4)
            {
              goto LABEL_115;
            }
            v57 = *(_QWORD *)v57;
            if (!v57)
              goto LABEL_115;
          }
        }
        do
        {
          v60 = *(_QWORD *)(v57 + 8);
          if (v60 == v11)
          {
            if (*(_QWORD *)(v57 + 16) == v9 && *(unsigned __int8 *)(v57 + 24) == a4)
              goto LABEL_174;
          }
          else
          {
            if (v60 >= v54)
              v60 %= v54;
            if (v60 != v4)
              break;
          }
          v57 = *(_QWORD *)v57;
        }
        while (v57);
      }
    }
  }
LABEL_115:
  v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400), 40, 8, v52);
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = v11;
  *(_QWORD *)(v57 + 16) = v9;
  *(_QWORD *)(v57 + 24) = v10;
  v63 = (float)(unint64_t)(*(_QWORD *)(a1 + 408) + 1);
  v64 = *(float *)(a1 + 416);
  if (!v54 || (float)(v64 * (float)v54) < v63)
  {
    v65 = 1;
    if (v54 >= 3)
      v65 = (v54 & (v54 - 1)) != 0;
    v66 = v65 | (2 * v54);
    v67 = vcvtps_u32_f32(v63 / v64);
    if (v66 <= v67)
      prime = v67;
    else
      prime = v66;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v54 = *(_QWORD *)(a1 + 376);
    if (prime <= v54)
    {
      if (prime >= v54)
        goto LABEL_151;
      v81 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 408) / *(float *)(a1 + 416));
      if (v54 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v54), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (prime <= v81)
        prime = v81;
      if (prime >= v54)
      {
        v54 = *(_QWORD *)(a1 + 376);
LABEL_151:
        if ((v54 & (v54 - 1)) != 0)
        {
          if (v11 >= v54)
            v4 = v11 % v54;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v54 - 1) & v11;
        }
        goto LABEL_164;
      }
      if (!prime)
      {
        v93 = *(_QWORD *)(a1 + 368);
        *(_QWORD *)(a1 + 368) = 0;
        if (v93)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 384) + 40))(*(_QWORD *)(a1 + 384), v93, 8 * *(_QWORD *)(a1 + 376));
        v54 = 0;
        *(_QWORD *)(a1 + 376) = 0;
        goto LABEL_151;
      }
    }
    v69 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 384) + 16))(*(_QWORD *)(a1 + 384), 8 * prime, 8);
    v70 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v69;
    if (v70)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 384) + 40))(*(_QWORD *)(a1 + 384), v70, 8 * *(_QWORD *)(a1 + 376));
    v71 = 0;
    *(_QWORD *)(a1 + 376) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v71++) = 0;
    while (prime != v71);
    v72 = *(_QWORD **)(a1 + 392);
    if (!v72)
    {
LABEL_150:
      v54 = prime;
      goto LABEL_151;
    }
    v73 = a1 + 392;
    v74 = v72[1];
    v75 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v76 = v74 & v75;
      *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v76) = v73;
      for (i = (_QWORD *)*v72; *v72; i = (_QWORD *)*v72)
      {
        v78 = i[1] & v75;
        if (v78 == v76)
        {
          v72 = i;
        }
        else
        {
          v79 = *(_QWORD *)(a1 + 368);
          if (*(_QWORD *)(v79 + 8 * v78))
          {
            *v72 = *i;
            v80 = 8 * v78;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 368) + v80);
            **(_QWORD **)(*(_QWORD *)(a1 + 368) + v80) = i;
          }
          else
          {
            *(_QWORD *)(v79 + 8 * v78) = v72;
            v72 = i;
            v76 = v78;
          }
        }
      }
      goto LABEL_150;
    }
    if (v74 >= prime)
      v74 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v74) = v73;
    v84 = (_QWORD *)*v72;
    if (!*v72)
      goto LABEL_150;
    while (1)
    {
      v86 = v84[1];
      if (v86 >= prime)
        v86 %= prime;
      if (v86 != v74)
      {
        v87 = *(_QWORD *)(a1 + 368);
        if (!*(_QWORD *)(v87 + 8 * v86))
        {
          *(_QWORD *)(v87 + 8 * v86) = v72;
          goto LABEL_155;
        }
        *v72 = *v84;
        v85 = 8 * v86;
        *v84 = **(_QWORD **)(*(_QWORD *)(a1 + 368) + v85);
        **(_QWORD **)(*(_QWORD *)(a1 + 368) + v85) = v84;
        v84 = v72;
      }
      v86 = v74;
LABEL_155:
      v72 = v84;
      v84 = (_QWORD *)*v84;
      v74 = v86;
      if (!v84)
        goto LABEL_150;
    }
  }
LABEL_164:
  v88 = *(uint64_t **)(*(_QWORD *)(a1 + 368) + 8 * v4);
  if (v88)
  {
    *(_QWORD *)v57 = *v88;
  }
  else
  {
    *(_QWORD *)v57 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v57;
    *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v4) = a1 + 392;
    if (!*(_QWORD *)v57)
      goto LABEL_173;
    v89 = *(_QWORD *)(*(_QWORD *)v57 + 8);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v89 >= v54)
        v89 %= v54;
    }
    else
    {
      v89 &= v54 - 1;
    }
    v88 = (uint64_t *)(*(_QWORD *)(a1 + 368) + 8 * v89);
  }
  *v88 = v57;
LABEL_173:
  ++*(_QWORD *)(a1 + 408);
  v58 = *a3;
LABEL_174:
  *(_BYTE *)(v57 + 32) = v58;
  *(_BYTE *)(v57 + 33) = a3[1];
  *(_BYTE *)(v57 + 34) = a3[2];
  *(_BYTE *)(v57 + 35) = a3[3];
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v95);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_19F9FB25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::LabelTransitSupport::~LabelTransitSupport(md::LabelTransitSupport *this)
{
  md::LabelTransitSupport::~LabelTransitSupport(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  *((_QWORD *)this + 1) = &unk_1E4297410;
  v2 = (char *)this + 8;
  *(_QWORD *)this = &off_1E42973C8;
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 168);
  v4 = *(_QWORD **)(v3 + 8);
  v5 = *(_QWORD **)v3;
  if (*(_QWORD **)v3 != v4)
  {
    while ((char *)*v5 != v2)
    {
      if (++v5 == v4)
      {
        v5 = *(_QWORD **)(v3 + 8);
        break;
      }
    }
  }
  v6 = v5 + 1;
  if (v5 == v4 || v6 == v4)
  {
    if (v5 != v4)
LABEL_16:
      *(_QWORD *)(v3 + 8) = v5;
  }
  else
  {
    do
    {
      if ((char *)*v6 != v2)
        *v5++ = *v6;
      ++v6;
    }
    while (v6 != v4);
    if (v5 != *(_QWORD **)(v3 + 8))
      goto LABEL_16;
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 168) + 56) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 168)
                                                                             + 96);
  md::LabelTransitSupport::reset((std::__shared_weak_count **)this);
  v8 = (_QWORD *)*((_QWORD *)this + 49);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 50) + 40))(*((_QWORD *)this + 50));
      v8 = v9;
    }
    while (v9);
  }
  v10 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 48) + 40))(*((_QWORD *)this + 48), v10, 8 * *((_QWORD *)this + 47));
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *((_QWORD *)this + 38) = &off_1E42B4E30;

  std::__tree<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,std::__map_value_compare<std::shared_ptr<md::LabelExternalRoadFeature>,std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,md::LabelExternalRoadFeatureLess,true>,geo::StdAllocator<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,mdm::Allocator>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  v17 = *((_QWORD *)this + 30);
  if (v17)
  {
    v18 = *((_QWORD *)this + 31);
    v19 = *((_QWORD *)this + 30);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v20->__on_zero_shared)(v20, v19);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = *((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v17;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 33) + 40))(*((_QWORD *)this + 33), v19, *((_QWORD *)this + 32) - v19);
  }
  v23 = *((_QWORD *)this + 27);
  if (v23)
  {
    v24 = *((_QWORD *)this + 28);
    v25 = (void *)*((_QWORD *)this + 27);
    if (v24 != v23)
    {
      do
      {
        v26 = *(std::__shared_weak_count **)(v24 - 8);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 28) = v23;
    operator delete(v25);
  }
  v29 = (_QWORD *)*((_QWORD *)this + 23);
  if (v29)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24));
      v29 = v30;
    }
    while (v30);
  }
  v31 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v31)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), v31, 8 * *((_QWORD *)this + 21));
  v32 = *((_QWORD *)this + 16);
  if (v32)
  {
    v33 = *((_QWORD *)this + 17);
    v34 = *((_QWORD *)this + 16);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v35->__on_zero_shared)(v35, v34);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v32;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v34, *((_QWORD *)this + 18) - v34);
  }
  *((_QWORD *)this + 11) = &off_1E42B5210;

  *((_QWORD *)this + 8) = &off_1E42B4B90;
  *((_QWORD *)this + 5) = &off_1E42B4B90;

  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19F9FB7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::pair<unsigned long long,BOOL>,geo::Color<unsigned char,4,(geo::ColorSpace)0>,md::LabelTransitSupport::TransitLineColorKeyHash,std::equal_to<std::pair<unsigned long long,BOOL>>,geo::StdAllocator<std::pair<std::pair<unsigned long long,BOOL> const,geo::Color<unsigned char,4,(geo::ColorSpace)0>>,mdm::Allocator>>::~unordered_map[abi:nn180100]((uint64_t *)(v1 + 368));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 344);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 328);
  *(_QWORD *)(v1 + 304) = &off_1E42B4E30;

  std::__tree<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,std::__map_value_compare<std::shared_ptr<md::LabelExternalRoadFeature>,std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,md::LabelExternalRoadFeatureLess,true>,geo::StdAllocator<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,mdm::Allocator>>::destroy(v1 + 272, *(_QWORD **)(v1 + 280));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 240));
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 216));
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)(v1 + 160));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 128));
  *(_QWORD *)(v1 + 88) = &off_1E42B5210;

  *(_QWORD *)(v1 + 64) = &off_1E42B4B90;
  *(_QWORD *)(v1 + 40) = &off_1E42B4B90;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

uint64_t md::LabelTransitSupport::reset(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *i;

  ((void (*)(std::__shared_weak_count **, _QWORD))(*this)->__shared_owners_)(this, 0);
  v2 = this[42];
  this[41] = 0;
  this[42] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_DWORD *)this + 90);
  if ((v5 + 1) > 1)
    v6 = v5 + 1;
  else
    v6 = 1;
  *((_DWORD *)this + 90) = v6;
  result = ((uint64_t (*)(std::__shared_weak_count **, _QWORD))(*this)->__vftable)(this, 0);
  if (this[51])
  {
    v8 = this[49];
    if (v8)
    {
      do
      {
        v9 = v8->__vftable;
        result = ((uint64_t (*)(std::__shared_weak_count *))this[50]->__vftable[1].~__shared_weak_count)(this[50]);
        v8 = (std::__shared_weak_count *)v9;
      }
      while (v9);
    }
    this[49] = 0;
    v10 = this[47];
    if (v10)
    {
      for (i = 0; i != v10; i = (std::__shared_weak_count *)((char *)i + 1))
        *((_QWORD *)&this[46]->__vftable + (_QWORD)i) = 0;
    }
    this[51] = 0;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,std::__map_value_compare<std::shared_ptr<md::LabelExternalRoadFeature>,std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,md::LabelExternalRoadFeatureLess,true>,geo::StdAllocator<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,std::__map_value_compare<std::shared_ptr<md::LabelExternalRoadFeature>,std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,md::LabelExternalRoadFeatureLess,true>,geo::StdAllocator<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,std::__map_value_compare<std::shared_ptr<md::LabelExternalRoadFeature>,std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,md::LabelExternalRoadFeatureLess,true>,geo::StdAllocator<std::__value_type<std::shared_ptr<md::LabelExternalRoadFeature>,std::shared_ptr<md::LabelFeature>>,mdm::Allocator>>::destroy(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)a2[5];
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t *std::unordered_map<std::pair<unsigned long long,BOOL>,geo::Color<unsigned char,4,(geo::ColorSpace)0>,md::LabelTransitSupport::TransitLineColorKeyHash,std::equal_to<std::pair<unsigned long long,BOOL>>,geo::StdAllocator<std::pair<std::pair<unsigned long long,BOOL> const,geo::Color<unsigned char,4,(geo::ColorSpace)0>>,mdm::Allocator>>::~unordered_map[abi:nn180100](uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4]);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  return a1;
}

uint64_t geo::_retain_ptr<VKRouteContextObserverThunk * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5210;

  return a1;
}

void geo::_retain_ptr<VKRouteContextObserverThunk * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5210;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKRouteLineObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E30;

  return a1;
}

void geo::_retain_ptr<VKRouteLineObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E30;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelTransitSupport::setExternalTransitNodeFeatures(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t j;
  unsigned __int8 v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  int *v25;
  int v26;
  std::__shared_weak_count *v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  _OWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  geo::read_write_lock *v65;
  const char *v66;
  malloc_zone_t *zone;
  uint64_t v68;
  geo::read_write_lock *v69;
  const char *v70;
  malloc_zone_t *v71;
  uint64_t v72;
  geo::read_write_lock *v73;
  const char *v74;
  malloc_zone_t *v75;
  uint64_t v76;
  geo::read_write_lock *v77;
  const char *v78;
  malloc_zone_t *v79;
  uint64_t v80;
  geo::read_write_lock *v81;
  const char *v82;
  malloc_zone_t *v83;
  uint64_t v84;
  geo::read_write_lock *v85;
  const char *v86;
  malloc_zone_t *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _OWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  _OWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  int v145;
  uint64_t **v146;
  __int128 v147;
  uint64_t v148;
  std::__shared_weak_count *v149;

  v5 = *(_QWORD *)(a1 + 128);
  v146 = (uint64_t **)(a1 + 128);
  for (i = *(_QWORD *)(a1 + 136); i != v5; i -= 16)
  {
    v7 = *(std::__shared_weak_count **)(i - 8);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  *(_QWORD *)(a1 + 136) = v5;
  if (*(_QWORD *)(a1 + 200))
  {
    v10 = *(_QWORD **)(a1 + 184);
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192));
        v10 = v11;
      }
      while (v11);
    }
    *(_QWORD *)(a1 + 184) = 0;
    v12 = *(_QWORD *)(a1 + 168);
    if (v12)
    {
      for (j = 0; j != v12; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 200) = 0;
  }
  v14 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 3392));
  v15 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    v17 = v14 & 1;
    v145 = v17;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)*v15 + 16))(*v15);
      v18 = *(_QWORD *)(*v15 + 32);
      v19 = *(std::__shared_weak_count **)(*v15 + 40);
      v148 = v18;
      v149 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      if (v18)
      {
        v22 = *(unsigned __int8 *)(v18 + 33);
        if (*(_BYTE *)(v18 + 33))
        {
          v23 = *(_DWORD **)v18;
          if (*v23 == 42)
          {
            v24 = 0;
LABEL_26:
            if (LOWORD(v23[2 * v24 + 1]))
            {
              *(_QWORD *)&v147 = *(_QWORD *)(*v15 + 16);
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(a1 + 160, v147, &v147);
            }
          }
          else
          {
            v24 = 0;
            v25 = v23 + 2;
            while (v22 - 1 != v24)
            {
              v26 = *v25;
              v25 += 2;
              ++v24;
              if (v26 == 42)
              {
                if (v24 < v22)
                  goto LABEL_26;
                break;
              }
            }
          }
        }
      }
      v27 = (std::__shared_weak_count *)operator new(0x3B0uLL);
      v27->__shared_owners_ = 0;
      v27->__shared_weak_owners_ = 0;
      v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE40;
      md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)&v27[1], v15, v17, *(_QWORD *)(a1 + 16));
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E429FD10;
      v27[29].__vftable = 0;
      v27[29].__shared_weak_owners_ = 0;
      v27[29].__shared_owners_ = 0;
      {
        v64 = operator new();
        *(_QWORD *)(v64 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v64 + 24) = "VectorKitLabels";
        *(_OWORD *)(v64 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v64 = &off_1E42B5668;
        *(_QWORD *)(v64 + 8) = "VectorKitLabels";
        *(_OWORD *)(v64 + 72) = 0u;
        *(_OWORD *)(v64 + 88) = 0u;
        *(_OWORD *)(v64 + 104) = 0u;
        *(_OWORD *)(v64 + 120) = 0u;
        *(_OWORD *)(v64 + 136) = 0u;
        *(_OWORD *)(v64 + 152) = 0u;
        *(_OWORD *)(v64 + 168) = 0u;
        *(_OWORD *)(v64 + 184) = 0u;
        *(_OWORD *)(v64 + 200) = 0u;
        *(_OWORD *)(v64 + 216) = 0u;
        *(_OWORD *)(v64 + 232) = 0u;
        *(_QWORD *)(v64 + 248) = 0;
        *(_OWORD *)(v64 + 56) = 0u;
        v65 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v64 + 56), 0);
        if ((_DWORD)v65)
          geo::read_write_lock::logFailure(v65, (uint64_t)"initialization", v66);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v64 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v64 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v64;
        v17 = v145;
      }
      v27[30].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
      v27[30].__shared_owners_ = 0;
      v27[31].__vftable = 0;
      v27[30].__shared_weak_owners_ = 0;
      {
        v68 = operator new();
        *(_QWORD *)(v68 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v68 + 24) = "VectorKitLabels";
        *(_OWORD *)(v68 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v68 = &off_1E42B5668;
        *(_QWORD *)(v68 + 8) = "VectorKitLabels";
        *(_OWORD *)(v68 + 72) = 0u;
        *(_OWORD *)(v68 + 88) = 0u;
        *(_OWORD *)(v68 + 104) = 0u;
        *(_OWORD *)(v68 + 120) = 0u;
        *(_OWORD *)(v68 + 136) = 0u;
        *(_OWORD *)(v68 + 152) = 0u;
        *(_OWORD *)(v68 + 168) = 0u;
        *(_OWORD *)(v68 + 184) = 0u;
        *(_OWORD *)(v68 + 200) = 0u;
        *(_OWORD *)(v68 + 216) = 0u;
        *(_OWORD *)(v68 + 232) = 0u;
        *(_QWORD *)(v68 + 248) = 0;
        *(_OWORD *)(v68 + 56) = 0u;
        v69 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v68 + 56), 0);
        if ((_DWORD)v69)
          geo::read_write_lock::logFailure(v69, (uint64_t)"initialization", v70);
        v71 = malloc_create_zone(0, 0);
        *(_QWORD *)(v68 + 48) = v71;
        malloc_set_zone_name(v71, "VectorKitLabels");
        *(_QWORD *)(v68 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v68;
        v17 = v145;
      }
      v27[31].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
      v27[31].__shared_weak_owners_ = 0;
      v27[32].__shared_owners_ = 0;
      v27[32].__vftable = 0;
      {
        v72 = operator new();
        *(_QWORD *)(v72 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v72 + 24) = "VectorKitLabels";
        *(_OWORD *)(v72 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v72 = &off_1E42B5668;
        *(_QWORD *)(v72 + 8) = "VectorKitLabels";
        *(_OWORD *)(v72 + 72) = 0u;
        *(_OWORD *)(v72 + 88) = 0u;
        *(_OWORD *)(v72 + 104) = 0u;
        *(_OWORD *)(v72 + 120) = 0u;
        *(_OWORD *)(v72 + 136) = 0u;
        *(_OWORD *)(v72 + 152) = 0u;
        *(_OWORD *)(v72 + 168) = 0u;
        *(_OWORD *)(v72 + 184) = 0u;
        *(_OWORD *)(v72 + 200) = 0u;
        *(_OWORD *)(v72 + 216) = 0u;
        *(_OWORD *)(v72 + 232) = 0u;
        *(_QWORD *)(v72 + 248) = 0;
        *(_OWORD *)(v72 + 56) = 0u;
        v73 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v72 + 56), 0);
        if ((_DWORD)v73)
          geo::read_write_lock::logFailure(v73, (uint64_t)"initialization", v74);
        v75 = malloc_create_zone(0, 0);
        *(_QWORD *)(v72 + 48) = v75;
        malloc_set_zone_name(v75, "VectorKitLabels");
        *(_QWORD *)(v72 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v72;
        v17 = v145;
      }
      v27[32].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
      v27[33].__vftable = 0;
      v27[33].__shared_weak_owners_ = 0;
      v27[33].__shared_owners_ = 0;
      {
        v76 = operator new();
        *(_QWORD *)(v76 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v76 + 24) = "VectorKitLabels";
        *(_OWORD *)(v76 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v76 = &off_1E42B5668;
        *(_QWORD *)(v76 + 8) = "VectorKitLabels";
        *(_OWORD *)(v76 + 72) = 0u;
        *(_OWORD *)(v76 + 88) = 0u;
        *(_OWORD *)(v76 + 104) = 0u;
        *(_OWORD *)(v76 + 120) = 0u;
        *(_OWORD *)(v76 + 136) = 0u;
        *(_OWORD *)(v76 + 152) = 0u;
        *(_OWORD *)(v76 + 168) = 0u;
        *(_OWORD *)(v76 + 184) = 0u;
        *(_OWORD *)(v76 + 200) = 0u;
        *(_OWORD *)(v76 + 216) = 0u;
        *(_OWORD *)(v76 + 232) = 0u;
        *(_QWORD *)(v76 + 248) = 0;
        *(_OWORD *)(v76 + 56) = 0u;
        v77 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v76 + 56), 0);
        if ((_DWORD)v77)
          geo::read_write_lock::logFailure(v77, (uint64_t)"initialization", v78);
        v79 = malloc_create_zone(0, 0);
        *(_QWORD *)(v76 + 48) = v79;
        malloc_set_zone_name(v79, "VectorKitLabels");
        *(_QWORD *)(v76 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v76;
        v17 = v145;
      }
      v27[34].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
      v27[34].__shared_owners_ = 0;
      v27[35].__vftable = 0;
      v27[34].__shared_weak_owners_ = 0;
      {
        v80 = operator new();
        *(_QWORD *)(v80 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v80 + 24) = "VectorKitLabels";
        *(_OWORD *)(v80 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v80 = &off_1E42B5668;
        *(_QWORD *)(v80 + 8) = "VectorKitLabels";
        *(_OWORD *)(v80 + 72) = 0u;
        *(_OWORD *)(v80 + 88) = 0u;
        *(_OWORD *)(v80 + 104) = 0u;
        *(_OWORD *)(v80 + 120) = 0u;
        *(_OWORD *)(v80 + 136) = 0u;
        *(_OWORD *)(v80 + 152) = 0u;
        *(_OWORD *)(v80 + 168) = 0u;
        *(_OWORD *)(v80 + 184) = 0u;
        *(_OWORD *)(v80 + 200) = 0u;
        *(_OWORD *)(v80 + 216) = 0u;
        *(_OWORD *)(v80 + 232) = 0u;
        *(_QWORD *)(v80 + 248) = 0;
        *(_OWORD *)(v80 + 56) = 0u;
        v81 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v80 + 56), 0);
        if ((_DWORD)v81)
          geo::read_write_lock::logFailure(v81, (uint64_t)"initialization", v82);
        v83 = malloc_create_zone(0, 0);
        *(_QWORD *)(v80 + 48) = v83;
        malloc_set_zone_name(v83, "VectorKitLabels");
        *(_QWORD *)(v80 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v80;
        v17 = v145;
      }
      v27[35].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
      v27[35].__shared_weak_owners_ = 0;
      v27[36].__shared_owners_ = 0;
      v27[36].__vftable = 0;
      {
        v84 = operator new();
        *(_QWORD *)(v84 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v84 + 24) = "VectorKitLabels";
        *(_OWORD *)(v84 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v84 = &off_1E42B5668;
        *(_QWORD *)(v84 + 8) = "VectorKitLabels";
        *(_OWORD *)(v84 + 72) = 0u;
        *(_OWORD *)(v84 + 88) = 0u;
        *(_OWORD *)(v84 + 104) = 0u;
        *(_OWORD *)(v84 + 120) = 0u;
        *(_OWORD *)(v84 + 136) = 0u;
        *(_OWORD *)(v84 + 152) = 0u;
        *(_OWORD *)(v84 + 168) = 0u;
        *(_OWORD *)(v84 + 184) = 0u;
        *(_OWORD *)(v84 + 200) = 0u;
        *(_OWORD *)(v84 + 216) = 0u;
        *(_OWORD *)(v84 + 232) = 0u;
        *(_QWORD *)(v84 + 248) = 0;
        *(_OWORD *)(v84 + 56) = 0u;
        v85 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v84 + 56), 0);
        if ((_DWORD)v85)
          geo::read_write_lock::logFailure(v85, (uint64_t)"initialization", v86);
        v87 = malloc_create_zone(0, 0);
        *(_QWORD *)(v84 + 48) = v87;
        malloc_set_zone_name(v87, "VectorKitLabels");
        *(_QWORD *)(v84 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v84;
        v17 = v145;
      }
      v27[36].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
      v27[37].__vftable = *(std::__shared_weak_count_vtbl **)(*v15 + 16);
      v27[37].__shared_owners_ = 0xCFF0000FF000000;
      BYTE1(v27[37].__shared_weak_owners_) = 5;
      v27[38].std::__shared_count = 0u;
      *(_OWORD *)&v27[38].__shared_weak_owners_ = 0u;
      v34 = *v15;
      LODWORD(v27[16].__shared_owners_) = *(_DWORD *)(*v15 + 80);
      LOBYTE(v27[37].__shared_weak_owners_) = *(_BYTE *)(v34 + 236);
      v35 = *(_BYTE **)(v34 + 400);
      v36 = *(_BYTE **)(v34 + 408);
      if (v35 != v36)
      {
        while (*v35 != 1)
        {
          v35 += 5;
          if (v35 == v36)
            goto LABEL_43;
        }
        LOBYTE(v27[37].__shared_owners_) = v35[1];
        BYTE1(v27[37].__shared_owners_) = v35[2];
        BYTE2(v27[37].__shared_owners_) = v35[3];
        BYTE3(v27[37].__shared_owners_) = v35[4];
      }
LABEL_43:
      *(_QWORD *)&v147 = v27 + 1;
      *((_QWORD *)&v147 + 1) = v27;
      v37 = *(char **)(a1 + 136);
      v38 = *(_QWORD *)(a1 + 144);
      if ((unint64_t)v37 < v38)
      {
        if (v37)
        {
          *(_QWORD *)v37 = v27 + 1;
          *((_QWORD *)v37 + 1) = v27;
          v147 = 0uLL;
          v27 = 0;
        }
        *(_QWORD *)(a1 + 136) = v37 + 16;
        if (!v27)
          goto LABEL_75;
LABEL_71:
        v55 = (unint64_t *)&v27->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        goto LABEL_75;
      }
      v39 = (v37 - (char *)*v146) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        abort();
      v41 = v38 - (_QWORD)*v146;
      if (v41 >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152), 16 * v42, 8);
        v44 = (_OWORD *)(v43 + 16 * v39);
        v45 = v43 + 16 * v42;
        if (v43)
        {
          *v44 = v147;
          v147 = 0uLL;
        }
      }
      else
      {
        v45 = 0;
        v44 = (_OWORD *)(16 * v39);
      }
      v46 = v44 + 1;
      v47 = *(_QWORD **)(a1 + 128);
      v48 = *(_QWORD **)(a1 + 136);
      if (v48 == v47)
      {
        *(_QWORD *)(a1 + 128) = v44;
        *(_QWORD *)(a1 + 136) = v46;
        v51 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v45;
        if (v48)
          goto LABEL_69;
      }
      else
      {
        do
        {
          v49 = *((_OWORD *)v48 - 1);
          v48 -= 2;
          *--v44 = v49;
          *v48 = 0;
          v48[1] = 0;
        }
        while (v48 != v47);
        v48 = *(_QWORD **)(a1 + 128);
        v50 = *(_QWORD **)(a1 + 136);
        *(_QWORD *)(a1 + 128) = v44;
        *(_QWORD *)(a1 + 136) = v46;
        v51 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v45;
        while (v50 != v48)
        {
          v52 = (std::__shared_weak_count *)*(v50 - 1);
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v50 -= 2;
        }
        v17 = v145;
        if (v48)
LABEL_69:
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v48, v51 - (_QWORD)v48);
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
      *(_QWORD *)(a1 + 136) = v46;
      if (v27)
        goto LABEL_71;
LABEL_75:
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + 136) - 16);
      v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 680);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 + 1;
      }
      while (__stlxr(v60, v58));
      *(_QWORD *)(v57 + 72) = v60;
      v61 = v149;
      if (v149)
      {
        v62 = (unint64_t *)&v149->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v15 += 2;
    }
    while (v15 != v16);
  }
  v89 = *(_QWORD **)a3;
  v88 = *(_QWORD **)(a3 + 8);
  v90 = (uint64_t)v88 - *(_QWORD *)a3;
  if (v90 >= 1)
  {
    v91 = v90 >> 4;
    v93 = *(_QWORD *)(a1 + 128);
    v92 = *(_QWORD *)(a1 + 136);
    v94 = v92 - v93;
    v95 = v93 + ((v92 - v93) & 0xFFFFFFFFFFFFFFF0);
    v96 = *(_QWORD *)(a1 + 144);
    if (v91 > (uint64_t)(v96 - v92) >> 4)
    {
      v97 = v94 >> 4;
      v98 = (v94 >> 4) + v91;
      if (v98 >> 60)
        abort();
      v99 = v96 - v93;
      v100 = (v96 - v93) >> 3;
      if (v100 > v98)
        v98 = v100;
      if (v99 >= 0x7FFFFFFFFFFFFFF0)
        v101 = 0xFFFFFFFFFFFFFFFLL;
      else
        v101 = v98;
      if (v101)
        v102 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152), 16 * v101, 8);
      else
        v102 = 0;
      v110 = (_QWORD *)(v102 + 16 * v97);
      v111 = &v110[2 * v91];
      v112 = v110;
      do
      {
        if (v112)
        {
          *v112 = *v89;
          v113 = v89[1];
          v112[1] = v113;
          if (v113)
          {
            v114 = (unint64_t *)(v113 + 8);
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
        }
        v112 += 2;
        v89 += 2;
      }
      while (v112 != (_QWORD *)v111);
      v116 = *v146;
      if (*v146 != (uint64_t *)v95)
      {
        v117 = (uint64_t *)v95;
        do
        {
          v118 = *((_OWORD *)v117 - 1);
          v117 -= 2;
          *((_OWORD *)v110 - 1) = v118;
          v110 -= 2;
          *v117 = 0;
          v117[1] = 0;
        }
        while (v117 != v116);
      }
      v119 = v102 + 16 * v101;
      v120 = *(_QWORD *)(a1 + 136);
      if (v120 != v95)
      {
        do
        {
          *v111++ = *(_OWORD *)v95;
          *(_QWORD *)v95 = 0;
          *(_QWORD *)(v95 + 8) = 0;
          v95 += 16;
        }
        while (v95 != v120);
        v95 = *(_QWORD *)(a1 + 136);
      }
      v121 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v110;
      *(_QWORD *)(a1 + 136) = v111;
      v122 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v119;
      while (v95 != v121)
      {
        v123 = *(std::__shared_weak_count **)(v95 - 8);
        if (v123)
        {
          v124 = (unint64_t *)&v123->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        v95 -= 16;
      }
      if (v121)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v121, v122 - v121);
      goto LABEL_161;
    }
    v103 = (uint64_t)(v92 - v95) >> 4;
    if (v103 >= v91)
    {
      v104 = &v89[2 * v91];
      v106 = *(_QWORD **)(a1 + 136);
LABEL_154:
      v126 = &v106[-2 * v91];
      v127 = v106;
      if ((unint64_t)v126 < v92)
      {
        v128 = &v106[-2 * v91];
        v127 = v106;
        do
        {
          if (v127)
          {
            *v127 = *(_OWORD *)v128;
            *v128 = 0;
            v128[1] = 0;
          }
          v128 += 2;
          ++v127;
        }
        while ((unint64_t)v128 < v92);
      }
      *(_QWORD *)(a1 + 136) = v127;
      if (v106 != (_QWORD *)(v95 + 16 * v91))
      {
        do
        {
          v133 = *((_OWORD *)v126 - 1);
          v126 -= 2;
          *v126 = 0;
          v126[1] = 0;
          v134 = (std::__shared_weak_count *)*(v106 - 1);
          *((_OWORD *)v106 - 1) = v133;
          v106 -= 2;
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
        }
        while (v126 != (_QWORD *)v95);
      }
      for (; v89 != v104; v95 += 16)
      {
        v138 = *v89;
        v137 = v89[1];
        if (v137)
        {
          v139 = (unint64_t *)(v137 + 8);
          do
            v140 = __ldxr(v139);
          while (__stxr(v140 + 1, v139));
        }
        v141 = *(std::__shared_weak_count **)(v95 + 8);
        *(_QWORD *)v95 = v138;
        *(_QWORD *)(v95 + 8) = v137;
        if (v141)
        {
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v89 += 2;
      }
      goto LABEL_161;
    }
    v104 = &v89[2 * v103];
    if (v104 == v88)
    {
      v106 = *(_QWORD **)(a1 + 136);
    }
    else
    {
      v105 = &v89[2 * v103];
      v106 = *(_QWORD **)(a1 + 136);
      do
      {
        if (v106)
        {
          *v106 = *v105;
          v107 = v105[1];
          v106[1] = v107;
          if (v107)
          {
            v108 = (unint64_t *)(v107 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
        }
        v105 += 2;
        v106 += 2;
      }
      while (v105 != v88);
    }
    *(_QWORD *)(a1 + 136) = v106;
    if ((uint64_t)(v92 - v95) >= 1)
      goto LABEL_154;
  }
LABEL_161:
  if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)(a1 + 16) + 296), v146);
  v129 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v129 + 3041) = 1;
  v130 = atomic_load((unsigned __int8 *)(v129 + 3058));
  if ((v130 & 1) != 0)
  {
    v131 = *(_QWORD *)(v129 + 136);
    if (v131)
    {
      v132 = *(_QWORD *)(v131 + 56);
      if (v132)
      {
        v148 = v129;
        LOBYTE(v147) = 9;
        (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v132 + 48))(v132, &v148, &v147);
      }
    }
  }
}

void sub_19F9FCA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelTransitRoute>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTransitRoute>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelTransitRoute>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 336);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 344);
    v4 = *(_QWORD *)(a1 + 336);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 336);
    }
    *(_QWORD *)(a1 + 344) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 360) + 40))(*(_QWORD *)(a1 + 360), v4, *(_QWORD *)(a1 + 352) - v4);
  }
  v8 = *(uint64_t **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v8)
    std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v8);
  v9 = *(_QWORD *)(a1 + 296);
  if (v9)
  {
    *(_QWORD *)(a1 + 304) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 320) + 40))(*(_QWORD *)(a1 + 320), v9, *(_QWORD *)(a1 + 312) - v9);
  }
  v10 = *(_QWORD *)(a1 + 264);
  if (v10)
  {
    *(_QWORD *)(a1 + 272) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 288) + 40))(*(_QWORD *)(a1 + 288), v10, *(_QWORD *)(a1 + 280) - v10);
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(a1 + 176, *(_QWORD **)(a1 + 184));
  v11 = *(void ***)(a1 + 112);
  if (v11)
  {
    v12 = *(void ***)(a1 + 120);
    v13 = *(_QWORD *)(a1 + 112);
    if (v12 != v11)
    {
      do
        v12 = geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(v12 - 1);
      while (v12 != v11);
      v13 = *(_QWORD *)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136), v13, *(_QWORD *)(a1 + 128) - v13);
  }
  v14 = *(_QWORD *)(a1 + 80);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 88);
    v16 = *(_QWORD *)(a1 + 80);
    if (v15 != v14)
    {
      v17 = *(_QWORD *)(a1 + 88);
      do
      {
        v19 = *(_QWORD *)(v17 - 8);
        v17 -= 8;
        v18 = v19;
        if (v19)
        {
          if ((*(_QWORD *)v18)-- == 1)
          {
            *(_QWORD *)(v18 + 8) = &off_1E42B4FF0;

            operator delete(*(void **)(v15 - 8));
            *(_QWORD *)(v15 - 8) = 0;
          }
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *(_QWORD *)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), v16, *(_QWORD *)(a1 + 96) - v16);
  }
  *(_QWORD *)(a1 + 48) = &off_1E42B4C30;

  *(_QWORD *)(a1 + 24) = &off_1E42B4B90;
}

void sub_19F9FCD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F9FCE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKRouteContextObserverThunk;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F9FCED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0,std::allocator<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0,std::allocator<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFE00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0,std::allocator<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFE00;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0,std::allocator<md::LabelTransitSupport::routeContextStateDidChange(void)::$_0>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = result[1];
  *(_BYTE *)(v1 + 112) = 1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 3045) = 1;
  *(_BYTE *)(v2 + 3047) = 1;
  v3 = atomic_load((unsigned __int8 *)(v2 + 3058));
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 136);
    if (v4)
    {
      result = *(_QWORD **)(v4 + 56);
      if (result)
      {
        v6 = v2;
        v5 = 9;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, char *))(*result + 48))(result, &v6, &v5);
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<md::TransitNodeLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitNodeLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::LabelTransitSupport::setExternalTransitShieldFeatures(uint64_t a1, uint64_t **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 v46;
  uint64_t **v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  malloc_zone_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  size_t v71;
  uint64_t v72;
  size_t v73;
  size_t v74;
  int v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v79;
  size_t v80;
  int v81;
  unsigned int v82;
  _QWORD *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t **v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  _OWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t **v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t **v125;
  uint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  __int128 v133;
  unsigned __int8 v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t *v137;
  __int128 v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  geo::read_write_lock *v153;
  const char *v154;
  uint64_t v155;
  geo::read_write_lock *v156;
  const char *v157;
  malloc_zone_t *zone;
  int v159;
  uint64_t v160;
  geo::read_write_lock *v161;
  const char *v162;
  malloc_zone_t *v163;
  uint64_t v164;
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t result;
  uint64_t *v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  int64x2_t v174;
  int64x2_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t *v178;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  char v195[9];

  v2 = (_QWORD *)a1;
  v3 = a1 + 216;
  if ((uint64_t **)(a1 + 216) != a2)
  {
    v5 = *a2;
    v4 = a2[1];
    v6 = (char *)v4 - (char *)*a2;
    v7 = v6 >> 4;
    v8 = *(_QWORD *)(a1 + 232);
    v9 = *(char **)(a1 + 216);
    if (v6 >> 4 <= (unint64_t)((v8 - (uint64_t)v9) >> 4))
    {
      v15 = *(char **)(a1 + 224);
      v16 = (v15 - v9) >> 4;
      if (v16 >= v7)
      {
        if (v5 == v4)
        {
          v2 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v26 = *v5;
            v25 = v5[1];
            if (v25)
            {
              v27 = (unint64_t *)(v25 + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
            v29 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
            *(_QWORD *)v9 = v26;
            *((_QWORD *)v9 + 1) = v25;
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldaxr(p_shared_owners);
              while (__stlxr(v31 - 1, p_shared_owners));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v5 += 2;
            v9 += 16;
          }
          while (v5 != v4);
          v2 = (_QWORD *)a1;
          v15 = *(char **)(a1 + 224);
        }
        while (v15 != v9)
        {
          v43 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v15 -= 16;
        }
        v2[28] = v9;
      }
      else
      {
        v17 = &v5[2 * v16];
        if (v15 == v9)
        {
          v2 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v19 = *v5;
            v18 = v5[1];
            if (v18)
            {
              v20 = (unint64_t *)(v18 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
            *(_QWORD *)v9 = v19;
            *((_QWORD *)v9 + 1) = v18;
            if (v22)
            {
              v23 = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v5 += 2;
            v9 += 16;
          }
          while (v5 != v17);
          v2 = (_QWORD *)a1;
          v9 = *(char **)(a1 + 224);
        }
        v39 = v9;
        if (v17 != v4)
        {
          v39 = v9;
          do
          {
            *(_QWORD *)v39 = *v17;
            v40 = v17[1];
            *((_QWORD *)v39 + 1) = v40;
            if (v40)
            {
              v41 = (unint64_t *)(v40 + 8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v17 += 2;
            v39 += 16;
          }
          while (v17 != v4);
        }
        v2[28] = v39;
      }
    }
    else
    {
      if (v9)
      {
        v10 = *(char **)(a1 + 224);
        v11 = *(void **)(a1 + 216);
        if (v10 != v9)
        {
          do
          {
            v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
            if (v12)
            {
              v13 = (unint64_t *)&v12->__shared_owners_;
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 - 1, v13));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            v10 -= 16;
          }
          while (v10 != v9);
          v11 = *(void **)v3;
        }
        *(_QWORD *)(a1 + 224) = v9;
        operator delete(v11);
        v8 = 0;
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = 0;
      }
      if (v6 < 0)
        goto LABEL_262;
      v32 = v8 >> 3;
      if (v8 >> 3 <= v7)
        v32 = v6 >> 4;
      v58 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
      v33 = 0xFFFFFFFFFFFFFFFLL;
      if (!v58)
        v33 = v32;
      if (v33 >> 60)
LABEL_262:
        abort();
      v34 = 2 * v33;
      v35 = operator new(16 * v33);
      *(_QWORD *)(a1 + 216) = v35;
      *(_QWORD *)(a1 + 224) = v35;
      *(_QWORD *)(a1 + 232) = &v35[v34];
      while (v5 != v4)
      {
        *v35 = *v5;
        v36 = v5[1];
        v35[1] = v36;
        if (v36)
        {
          v37 = (unint64_t *)(v36 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v5 += 2;
        v35 += 2;
      }
      v2 = (_QWORD *)a1;
      *(_QWORD *)(a1 + 224) = v35;
    }
  }
  v191 = 0;
  v192 = 0;
  v193 = 0;
  {
    v50 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v50, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v194 = mdm::Allocator::instance(void)::alloc;
  v47 = &v188;
  v188 = 0;
  {
    v51 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v51, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v189 = mdm::Allocator::instance(void)::alloc;
  v190 = 0;
  v187 = &v188;
  if (v2[27] != v2[28])
  {
    v49 = atomic_load((unsigned __int8 *)(v2[2] + 3392));
    v182 = (uint64_t *)v2[27];
    v178 = (uint64_t *)v2[28];
    if (v182 != v178)
    {
      v180 = v2 + 35;
      v176 = (uint64_t)(v2 + 30);
      v177 = v49 & 1;
      v175 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v174 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        v53 = (_QWORD *)*v180;
        if (!*v180)
          goto LABEL_138;
        v54 = (_QWORD *)*v182;
        v55 = *(_QWORD *)(*v182 + 16);
        v185 = v180;
        v183 = v55;
        v181 = (_QWORD *)*v182;
        do
        {
          v56 = (_QWORD *)v53[4];
          v57 = v56[2];
          v58 = v57 >= v55;
          if (v57 == v55)
          {
            v60 = v56[23];
            v59 = v56[24];
            v61 = (v59 - v60) >> 4;
            v62 = v54[23];
            v63 = (v54[24] - v62) >> 4;
            v58 = v61 >= v63;
            if (v61 == v63)
            {
              if (v59 != v60)
              {
                v64 = 0;
                if (v61 <= 1)
                  v65 = 1;
                else
                  v65 = (v59 - v60) >> 4;
                v184 = v62;
                while (1)
                {
                  v66 = *(_QWORD *)(v60 + 16 * v64);
                  v67 = *(_QWORD *)(v66 + 48);
                  v68 = *(_QWORD *)(v62 + 16 * v64);
                  v69 = *(_QWORD *)(v68 + 48);
                  if (v67 != v69)
                  {
                    v47 = &v188;
                    v54 = v181;
                    if (v67 < v69)
                      goto LABEL_114;
                    goto LABEL_84;
                  }
                  v70 = (_QWORD *)(v66 + 8);
                  v71 = *(_QWORD *)(v66 + 16);
                  v72 = *(unsigned __int8 *)(v66 + 31);
                  if (*(char *)(v66 + 31) >= 0)
                    v73 = *(unsigned __int8 *)(v66 + 31);
                  else
                    v73 = *(_QWORD *)(v66 + 16);
                  v74 = *(unsigned __int8 *)(v68 + 31);
                  v75 = (char)v74;
                  if ((v74 & 0x80u) != 0)
                    v74 = *(_QWORD *)(v68 + 16);
                  if (v75 >= 0)
                    v76 = (unsigned __int8 *)(v68 + 8);
                  else
                    v76 = *(unsigned __int8 **)(v68 + 8);
                  if (v73 != v74)
                  {
                    if ((v72 & 0x80) != 0)
                      v70 = (_QWORD *)*v70;
                    v71 = v74;
                    goto LABEL_116;
                  }
                  if ((v72 & 0x80) != 0)
                  {
                    v70 = (_QWORD *)*v70;
                    v79 = memcmp(v70, v76, *(_QWORD *)(v66 + 16));
                    v55 = v183;
                    v62 = v184;
                    if (v79)
                      goto LABEL_116;
                  }
                  else if (*(_BYTE *)(v66 + 31))
                  {
                    v77 = v76;
                    v78 = (unsigned __int8 *)(v66 + 8);
                    while (*v78 == *v77)
                    {
                      ++v78;
                      ++v77;
                      if (!--v72)
                        goto LABEL_110;
                    }
                    v71 = v73;
LABEL_116:
                    v47 = &v188;
                    v54 = v181;
                    if (v71 >= v73)
                      v80 = v73;
                    else
                      v80 = v71;
                    v81 = memcmp(v70, v76, v80);
                    if (v81)
                    {
                      v55 = v183;
                      if ((v81 & 0x80000000) == 0)
                        goto LABEL_84;
                    }
                    else
                    {
                      v55 = v183;
                      if (v73 >= v71)
                        goto LABEL_84;
                    }
                    goto LABEL_114;
                  }
LABEL_110:
                  if (*(_DWORD *)(v66 + 56) != *(_DWORD *)(v68 + 56))
                    break;
                  if (++v64 == v65)
                    goto LABEL_134;
                }
                if (*(unsigned __int8 *)(v66 + 56) >= *(unsigned __int8 *)(v68 + 56))
                {
LABEL_134:
                  v185 = v53;
                  v47 = &v188;
                  v54 = v181;
                  goto LABEL_85;
                }
                v54 = v181;
                if (*(unsigned __int8 *)(v66 + 57) >= *(unsigned __int8 *)(v68 + 57)
                  || *(unsigned __int8 *)(v66 + 58) >= *(unsigned __int8 *)(v68 + 58))
                {
                  v185 = v53;
                  v47 = &v188;
                  goto LABEL_85;
                }
                v82 = *(unsigned __int8 *)(v68 + 59);
                v47 = &v188;
                if (*(unsigned __int8 *)(v66 + 59) < v82)
                  goto LABEL_114;
              }
LABEL_84:
              v185 = v53;
              goto LABEL_85;
            }
          }
          if (v58)
            goto LABEL_84;
LABEL_114:
          ++v53;
LABEL_85:
          v53 = (_QWORD *)*v53;
        }
        while (v53);
        if (v185 == v180 || (md::LabelExternalRoadFeatureLess::operator()(v54, (_QWORD *)v185[4]) & 1) != 0)
        {
LABEL_138:
          v83 = operator new(0x208uLL);
          v83[2] = 0;
          *v83 = &off_1E42DC2A8;
          v83[1] = 0;
          v2 = (_QWORD *)a1;
          *(_QWORD *)&v186 = md::UniLineLabelFeature::UniLineLabelFeature(v83 + 3, v182, 5, v177);
          *((_QWORD *)&v186 + 1) = v83;
          v84 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 680);
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 + 1;
          }
          while (__stlxr(v86, v84));
          v83[12] = v86;
          v87 = (uint64_t **)v180;
          v88 = (uint64_t *)*v180;
          v89 = (uint64_t **)v180;
          if (*v180)
          {
            v90 = (_QWORD *)*v182;
            while (1)
            {
              while (1)
              {
                v87 = (uint64_t **)v88;
                v91 = (_QWORD *)v88[4];
                if (!md::LabelExternalRoadFeatureLess::operator()(v90, v91))
                  break;
                v88 = *v87;
                v89 = v87;
                if (!*v87)
                  goto LABEL_146;
              }
              if (!md::LabelExternalRoadFeatureLess::operator()(v91, v90))
                break;
              v89 = v87 + 1;
              v88 = v87[1];
              if (!v88)
                goto LABEL_146;
            }
          }
          else
          {
LABEL_146:
            v92 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 288) + 16))(*(_QWORD *)(a1 + 288), 64, 8);
            v93 = v92;
            v92[4] = *v182;
            v94 = v182[1];
            v92[5] = v94;
            if (v94)
            {
              v95 = (unint64_t *)(v94 + 8);
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            v97 = *((_QWORD *)&v186 + 1);
            v92[6] = v186;
            v92[7] = v97;
            if (v97)
            {
              v98 = (unint64_t *)(v97 + 8);
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            *v92 = 0;
            v92[1] = 0;
            v92[2] = (uint64_t)v87;
            *v89 = v92;
            v100 = **(_QWORD **)(a1 + 272);
            if (v100)
            {
              *(_QWORD *)(a1 + 272) = v100;
              v93 = *v89;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v93);
            ++*(_QWORD *)(a1 + 296);
          }
          v101 = *(_QWORD **)(a1 + 248);
          if ((unint64_t)v101 >= *(_QWORD *)(a1 + 256))
          {
            v105 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v176, &v186);
          }
          else
          {
            if (v101)
            {
              *v101 = v186;
              v102 = *((_QWORD *)&v186 + 1);
              v101[1] = *((_QWORD *)&v186 + 1);
              if (v102)
              {
                v103 = (unint64_t *)(v102 + 8);
                do
                  v104 = __ldxr(v103);
                while (__stxr(v104 + 1, v103));
              }
            }
            v105 = v101 + 2;
          }
          *(_QWORD *)(a1 + 248) = v105;
          v106 = v192;
          if ((unint64_t)v192 >= v193)
          {
            v112 = v191;
            v113 = ((char *)v192 - (char *)v191) >> 4;
            v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 60)
              abort();
            v115 = v193 - (_QWORD)v191;
            if ((uint64_t)(v193 - (_QWORD)v191) >> 3 > v114)
              v114 = v115 >> 3;
            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0)
              v116 = 0xFFFFFFFFFFFFFFFLL;
            else
              v116 = v114;
            if (v116)
            {
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v194 + 16))(v194, 16 * v116, 8);
              v118 = (uint64_t *)(v117 + 16 * v113);
              v119 = v117 + 16 * v116;
              if (v117)
              {
                v120 = *((_QWORD *)&v186 + 1);
                *(_OWORD *)v118 = v186;
                if (v120)
                {
                  v121 = (unint64_t *)(v120 + 8);
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                  v106 = v192;
                }
              }
            }
            else
            {
              v119 = 0;
              v118 = (uint64_t *)(16 * v113);
            }
            v110 = v118 + 2;
            if (v106 == v112)
            {
              v139 = v193;
              v191 = v118;
              v193 = v119;
            }
            else
            {
              v137 = v106;
              do
              {
                v138 = *((_OWORD *)v137 - 1);
                v137 -= 2;
                *((_OWORD *)v118 - 1) = v138;
                v118 -= 2;
                *v137 = 0;
                v137[1] = 0;
              }
              while (v137 != v112);
              v191 = v118;
              v192 = v110;
              v139 = v193;
              v193 = v119;
              do
              {
                v140 = (std::__shared_weak_count *)*(v106 - 1);
                if (v140)
                {
                  v141 = (unint64_t *)&v140->__shared_owners_;
                  do
                    v142 = __ldaxr(v141);
                  while (__stlxr(v142 - 1, v141));
                  if (!v142)
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                }
                v106 -= 2;
              }
              while (v106 != v112);
            }
            v111 = &v188;
            if (v112)
              (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v194 + 40))(v194, v112, v139 - (_QWORD)v112);
          }
          else
          {
            if (v192)
            {
              *v192 = v186;
              v107 = *((_QWORD *)&v186 + 1);
              v106[1] = *((_QWORD *)&v186 + 1);
              if (v107)
              {
                v108 = (unint64_t *)(v107 + 8);
                do
                  v109 = __ldxr(v108);
                while (__stxr(v109 + 1, v108));
              }
            }
            v110 = v106 + 2;
            v111 = &v188;
          }
          v192 = v110;
          v143 = v186;
          v144 = &v188;
          v145 = v188;
          if (v188)
          {
            while (1)
            {
              while (1)
              {
                v111 = (uint64_t **)v145;
                v146 = v145[4];
                if ((unint64_t)v186 >= v146)
                  break;
                v145 = *v111;
                v144 = v111;
                if (!*v111)
                  goto LABEL_222;
              }
              if (v146 >= (unint64_t)v186)
                break;
              v145 = v111[1];
              if (!v145)
              {
                v144 = v111 + 1;
                goto LABEL_222;
              }
            }
          }
          else
          {
LABEL_222:
            v147 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, 40, 8);
            v147[4] = v143;
            *v147 = 0;
            v147[1] = 0;
            v147[2] = (uint64_t)v111;
            *v144 = v147;
            if (*v187)
            {
              v187 = (uint64_t **)*v187;
              v147 = *v144;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v188, v147);
            ++v190;
          }
          v148 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v47 = &v188;
          if (*((_QWORD *)&v186 + 1))
          {
            v149 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
        }
        else
        {
          v123 = v185[6];
          v124 = v188;
          v125 = &v188;
          v2 = (_QWORD *)a1;
          if (v188)
          {
            v126 = v188;
            v47 = &v188;
            do
            {
              v127 = v126[4];
              if (v123 >= v127)
              {
                if (v127 >= v123)
                  goto LABEL_80;
                ++v126;
              }
              v126 = (uint64_t *)*v126;
            }
            while (v126);
            while (1)
            {
              while (1)
              {
                v125 = (uint64_t **)v124;
                v128 = v124[4];
                if (v123 >= v128)
                  break;
                v124 = *v125;
                v47 = v125;
                if (!*v125)
                  goto LABEL_192;
              }
              if (v128 >= v123)
                break;
              v124 = v125[1];
              if (!v124)
              {
                v47 = v125 + 1;
                goto LABEL_192;
              }
            }
          }
          else
          {
LABEL_192:
            v129 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, 40, 8);
            v129[4] = v123;
            *v129 = 0;
            v129[1] = 0;
            v129[2] = (uint64_t)v125;
            *v47 = v129;
            if (*v187)
            {
              v187 = (uint64_t **)*v187;
              v129 = *v47;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v188, v129);
            ++v190;
          }
          v130 = *(_QWORD *)(v123 + 192);
          {
            v155 = operator new();
            *(_QWORD *)(v155 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v155 + 24) = "VectorKitLabels";
            *(_OWORD *)(v155 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v155 = &off_1E42B5668;
            *(_QWORD *)(v155 + 8) = "VectorKitLabels";
            *(_OWORD *)(v155 + 72) = 0u;
            *(_OWORD *)(v155 + 88) = 0u;
            *(_OWORD *)(v155 + 104) = 0u;
            *(_OWORD *)(v155 + 120) = 0u;
            *(_OWORD *)(v155 + 136) = 0u;
            *(_OWORD *)(v155 + 152) = 0u;
            *(_OWORD *)(v155 + 168) = 0u;
            *(_OWORD *)(v155 + 184) = 0u;
            *(_OWORD *)(v155 + 200) = 0u;
            *(_OWORD *)(v155 + 216) = 0u;
            *(_OWORD *)(v155 + 232) = 0u;
            *(_QWORD *)(v155 + 248) = 0;
            *(_OWORD *)(v155 + 56) = 0u;
            v156 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v155 + 56), 0);
            if ((_DWORD)v156)
              geo::read_write_lock::logFailure(v156, (uint64_t)"initialization", v157);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v155 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v155 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v155;
            v2 = (_QWORD *)a1;
          }
          v47 = &v188;
          v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
          *(_DWORD *)v132 = 4;
          v133 = 0uLL;
          *(_OWORD *)(v132 + 8) = 0u;
          *(_OWORD *)(v132 + 24) = 0u;
          *(_OWORD *)(v132 + 40) = 0u;
          *(_OWORD *)(v132 + 56) = 0u;
          *(_OWORD *)(v132 + 72) = 0u;
          *(_QWORD *)(v132 + 88) = 0;
          if ((v134 & 1) == 0)
          {
            v133 = 0uLL;
            if (v159)
            {
              v160 = operator new();
              *(_QWORD *)(v160 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v160 + 24) = "VectorKitLabels";
              *(_OWORD *)(v160 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v160 = &off_1E42B5668;
              *(_QWORD *)(v160 + 8) = "VectorKitLabels";
              *(_OWORD *)(v160 + 72) = 0u;
              *(_OWORD *)(v160 + 88) = 0u;
              *(_OWORD *)(v160 + 104) = 0u;
              *(_OWORD *)(v160 + 120) = 0u;
              *(_OWORD *)(v160 + 136) = 0u;
              *(_OWORD *)(v160 + 152) = 0u;
              *(_OWORD *)(v160 + 168) = 0u;
              *(_OWORD *)(v160 + 184) = 0u;
              *(_OWORD *)(v160 + 200) = 0u;
              *(_OWORD *)(v160 + 216) = 0u;
              *(_OWORD *)(v160 + 232) = 0u;
              *(_QWORD *)(v160 + 248) = 0;
              *(_OWORD *)(v160 + 56) = 0u;
              v161 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v160 + 56), 0);
              if ((_DWORD)v161)
                geo::read_write_lock::logFailure(v161, (uint64_t)"initialization", v162);
              v163 = malloc_create_zone(0, 0);
              *(_QWORD *)(v160 + 48) = v163;
              malloc_set_zone_name(v163, "VectorKitLabels");
              *(_QWORD *)(v160 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v160;
              v2 = (_QWORD *)a1;
              v47 = &v188;
              v133 = 0uLL;
            }
          }
          *(_QWORD *)(v132 + 96) = mdm::Allocator::instance(void)::alloc;
          *(_OWORD *)(v132 + 104) = v133;
          *(_OWORD *)(v132 + 120) = v133;
          *(_QWORD *)(v132 + 136) = 0;
          *(_WORD *)(v132 + 144) = 255;
          *(_DWORD *)(v132 + 148) = 0;
          *(_DWORD *)(v132 + 152) = 0;
          *(_QWORD *)(v132 + 168) = 0;
          *(_QWORD *)(v132 + 176) = 0;
          *(int64x2_t *)(v132 + 184) = v175;
          *(int64x2_t *)(v132 + 200) = v174;
          *(_BYTE *)(v132 + 216) = 0;
          *(_DWORD *)(v132 + 220) = 0;
          *(_WORD *)(v132 + 224) = 256;
          *(_BYTE *)(v132 + 226) = 0;
          *(_QWORD *)(v132 + 232) = 0;
          *(_QWORD *)(v132 + 240) = 0;
          *(_QWORD *)&v186 = v132;
          std::mutex::lock((std::mutex *)(v130 + 16));
          v135 = *(uint64_t **)(v130 + 96);
          if ((unint64_t)v135 >= *(_QWORD *)(v130 + 104))
          {
            v136 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(v130 + 88, (uint64_t *)&v186);
            v132 = v186;
          }
          else
          {
            if (v135)
            {
              *(_QWORD *)&v186 = 0;
              *v135 = v132;
              v132 = 0;
            }
            v136 = v135 + 1;
          }
          *(_QWORD *)(v130 + 96) = v136;
          atomic_store(1u, (unsigned __int8 *)(v130 + 80));
          std::mutex::unlock((std::mutex *)(v130 + 16));
          *(_QWORD *)&v186 = 0;
          if (v132)
          {
            md::LabelLineStore::WorkUnit::~WorkUnit((md::LabelLineStore::WorkUnit *)v132);
            {
              v152 = operator new();
              *(_QWORD *)(v152 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v152 + 24) = "VectorKitLabels";
              *(_OWORD *)(v152 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v152 = &off_1E42B5668;
              *(_QWORD *)(v152 + 8) = "VectorKitLabels";
              *(_OWORD *)(v152 + 72) = 0u;
              *(_OWORD *)(v152 + 88) = 0u;
              *(_OWORD *)(v152 + 104) = 0u;
              *(_OWORD *)(v152 + 120) = 0u;
              *(_OWORD *)(v152 + 136) = 0u;
              *(_OWORD *)(v152 + 152) = 0u;
              *(_OWORD *)(v152 + 168) = 0u;
              *(_OWORD *)(v152 + 184) = 0u;
              *(_OWORD *)(v152 + 200) = 0u;
              *(_OWORD *)(v152 + 216) = 0u;
              *(_OWORD *)(v152 + 232) = 0u;
              *(_QWORD *)(v152 + 248) = 0;
              *(_OWORD *)(v152 + 56) = 0u;
              v153 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v152 + 56), 0);
              if ((_DWORD)v153)
                geo::read_write_lock::logFailure(v153, (uint64_t)"initialization", v154);
              v52 = malloc_create_zone(0, 0);
              *(_QWORD *)(v152 + 48) = v52;
              malloc_set_zone_name(v52, "VectorKitLabels");
              *(_QWORD *)(v152 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v152;
              v2 = (_QWORD *)a1;
              v47 = &v188;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v132, 248);
          }
LABEL_80:
          md::LabelLineStore::addExternalRoadFeature(*(_QWORD *)(v123 + 192), v182);
        }
        v182 += 2;
      }
      while (v182 != v178);
    }
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v2[2] + 296), &v191);
  }
  v164 = v2[2];
  *(_BYTE *)(v164 + 3041) = 1;
  v165 = atomic_load((unsigned __int8 *)(v164 + 3058));
  if ((v165 & 1) != 0)
  {
    v166 = *(_QWORD *)(v164 + 136);
    if (v166)
    {
      v167 = *(_QWORD *)(v166 + 56);
      if (v167)
      {
        *(_QWORD *)&v186 = v164;
        v195[0] = 9;
        (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v167 + 48))(v167, &v186, v195);
      }
    }
  }
  result = std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v187, v188);
  v169 = v191;
  if (v191)
  {
    v170 = v192;
    if (v192 != v191)
    {
      do
      {
        v171 = (std::__shared_weak_count *)*(v170 - 1);
        if (v171)
        {
          v172 = (unint64_t *)&v171->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v170 -= 2;
      }
      while (v170 != v169);
      v169 = v191;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v194 + 40))(v194, v169, v193 - (_QWORD)v169);
  }
  return result;
}

void sub_19F9FE178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,_QWORD *a30)
{
  uint64_t v30;

  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a29, a30);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v30 - 128));
  _Unwind_Resume(a1);
}

void sub_19F9FE288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F9FE300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKRouteLineObserver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F9FE3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFDB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFDB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelTransitSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 344);
  if (v2)
  {
    v10 = 0;
    v11 = 0;
    __p = 0;
    md::LabelTransitRouteLine::generateTransitShieldFeatures(v2, *(_QWORD *)(v1 + 16), (uint64_t)&__p);
    md::LabelTransitSupport::setExternalTransitShieldFeatures(v1, (uint64_t **)&__p);
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v10;
      v5 = __p;
      if (v10 != __p)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v10 = v3;
      operator delete(v5);
    }
  }
}

void sub_19F9FE548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11)
{
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::LabelTransitRouteLine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTransitRouteLine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelTransitRouteLine>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = &off_1E42B4A30;

  *(_QWORD *)(a1 + 24) = &off_1E42B4C30;
}

uint64_t md::LabelExternalRoadFeatureLess::operator()(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t result;
  size_t v26;
  int v27;

  v2 = a1[2];
  v3 = a2[2];
  v4 = v2 >= v3;
  if (v2 != v3)
    return !v4;
  v6 = a1[23];
  v5 = a1[24];
  v7 = (v5 - v6) >> 4;
  v8 = a2[23];
  v9 = (a2[24] - v8) >> 4;
  v4 = v7 >= v9;
  if (v7 != v9)
    return !v4;
  if (v5 == v6)
    return 0;
  v10 = 0;
  if (v7 <= 1)
    v11 = 1;
  else
    v11 = (v5 - v6) >> 4;
  while (1)
  {
    v12 = *(_QWORD *)(v6 + 16 * v10);
    v13 = *(_QWORD *)(v12 + 48);
    v14 = *(_QWORD *)(v8 + 16 * v10);
    v15 = *(_QWORD *)(v14 + 48);
    v4 = v13 >= v15;
    if (v13 != v15)
      return !v4;
    v16 = (_QWORD *)(v12 + 8);
    v17 = *(_QWORD *)(v12 + 16);
    v18 = *(unsigned __int8 *)(v12 + 31);
    if (*(char *)(v12 + 31) >= 0)
      v19 = *(unsigned __int8 *)(v12 + 31);
    else
      v19 = *(_QWORD *)(v12 + 16);
    v20 = *(unsigned __int8 *)(v14 + 31);
    v21 = (char)v20;
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(v14 + 16);
    if (v21 >= 0)
      v22 = (unsigned __int8 *)(v14 + 8);
    else
      v22 = *(unsigned __int8 **)(v14 + 8);
    if (v19 != v20)
    {
      if ((v18 & 0x80) != 0)
        v16 = (_QWORD *)*v16;
      v17 = v20;
LABEL_28:
      if (v17 >= v19)
        v26 = v19;
      else
        v26 = v17;
      v27 = memcmp(v16, v22, v26);
      if (v27)
      {
        if ((v27 & 0x80000000) == 0)
          return 0;
      }
      else if (v19 >= v17)
      {
        return 0;
      }
      return 1;
    }
    if ((v18 & 0x80) != 0)
    {
      v16 = (_QWORD *)*v16;
      if (memcmp(v16, v22, *(_QWORD *)(v12 + 16)))
        goto LABEL_28;
    }
    else if (*(_BYTE *)(v12 + 31))
    {
      v23 = v22;
      v24 = (unsigned __int8 *)(v12 + 8);
      while (*v24 == *v23)
      {
        ++v24;
        ++v23;
        if (!--v18)
          goto LABEL_24;
      }
      v17 = v19;
      goto LABEL_28;
    }
LABEL_24:
    if (*(_DWORD *)(v12 + 56) != *(_DWORD *)(v14 + 56))
      break;
    result = 0;
    if (++v10 == v11)
      return result;
  }
  if (*(unsigned __int8 *)(v12 + 56) < *(unsigned __int8 *)(v14 + 56)
    && *(unsigned __int8 *)(v12 + 57) < *(unsigned __int8 *)(v14 + 57)
    && *(unsigned __int8 *)(v12 + 58) < *(unsigned __int8 *)(v14 + 58))
  {
    v4 = *(unsigned __int8 *)(v12 + 59) >= *(unsigned __int8 *)(v14 + 59);
    return !v4;
  }
  return 0;
}

void std::__shared_ptr_emplace<md::UniLineLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::UniLineLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::UniLineLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::LabelTransitSupport::setInTransitMode(md::LabelTransitSupport *this, int a2)
{
  void *v3;
  void *v4;

  if (*((unsigned __int8 *)this + 113) != a2)
  {
    if (*((_BYTE *)this + 113))
    {
      v3 = (void *)*((_QWORD *)this + 6);
      if (v3)
        objc_storeStrong((id *)this + 9, v3);
      md::LabelTransitSupport::reset((std::__shared_weak_count **)this);
      *((_BYTE *)this + 113) = 0;
    }
    else
    {
      *((_BYTE *)this + 113) = 1;
      if (*((_QWORD *)this + 9))
      {
        (*(void (**)(md::LabelTransitSupport *))(*(_QWORD *)this + 8))(this);
        v4 = (void *)*((_QWORD *)this + 9);
        if (v4)
        {
          *((_QWORD *)this + 9) = 0;

        }
      }
    }
  }
}

void md::MuninMapEngineMode::~MuninMapEngineMode(md::MuninMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a2 + 1128);
  v4 = *v3;
  v5 = v3[1];
  if (v4 != v5)
  {
    while (*(_BYTE *)v4 != 9)
    {
      v4 += 16;
      if (v4 == v5)
        return;
    }
  }
  if (v4 != v5)
  {
    if (*(_QWORD *)(v4 + 8))
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 3u);
  }
}

md::MuninMapEngineMode *md::MuninMapEngineMode::MuninMapEngineMode(md::MuninMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 18);
  *(_QWORD *)v2 = &off_1E4294E00;
  *(_BYTE *)(v2 + 49) = 1;
  *(_DWORD *)(v2 + 52) = 21;
  *(_WORD *)(v2 + 224) = 515;
  *(_QWORD *)(v2 + 56) = 0x3FF4F1A6C638D03FLL;
  v3 = v2 + 144;
  LOBYTE(v17) = 1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v2 + 144, 1u, &v17)+ 17) = 0;
  LOBYTE(v17) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v3, 2u, &v17)+ 17) = 0;
  LOBYTE(v17) = 3;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v3, 3u, &v17)+ 17) = 0;
  LOBYTE(v17) = 4;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v3, 4u, &v17)+ 17) = 0;
  *(_QWORD *)&v11 = 0x8E629317B3523E63;
  *((_QWORD *)&v11 + 1) = "md::CameraLogic]";
  v12 = 15;
  *(_QWORD *)&v8 = 0x1AF456233693CD46;
  *((_QWORD *)&v8 + 1) = "md::CameraContext]";
  *(_QWORD *)&v9 = 17;
  BYTE8(v9) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = xmmword_1E42F8820;
  *(_QWORD *)&v19 = 20;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v11, &v8, 0, (uint64_t)&v17, (uint64_t)&v14);
  v14 = 0x17767EADC5B287BLL;
  v15 = "md::ElevationLogic]";
  v16 = 18;
  *(_QWORD *)&v17 = &v18;
  *(_QWORD *)&v11 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v11 + 1) = "md::ElevationContext]";
  v12 = 20;
  v13 = 1;
  *((_QWORD *)&v17 + 1) = 2;
  v18 = xmmword_1E42F88C8;
  v19 = unk_1E42F88D8;
  v20 = xmmword_1E42F88E8;
  *(_QWORD *)&v8 = &v9;
  *((_QWORD *)&v8 + 1) = 1;
  v9 = xmmword_1E42F88F8;
  v10 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v14, &v11, 0, (uint64_t)&v17, (uint64_t)&v8);
  *(_QWORD *)&v8 = 0x701C95861FC50076;
  *((_QWORD *)&v8 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v9 = 17;
  *(_QWORD *)&v17 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v17 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v18 = 19;
  BYTE8(v18) = 1;
  *(_QWORD *)&v11 = &v12;
  *((_QWORD *)&v11 + 1) = 0;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v8, &v17, 0, (uint64_t)&v11, (uint64_t)&v14);
  v14 = 0x4AC7AB7561675F6;
  v15 = "md::GridLogic]";
  v16 = 13;
  *(_QWORD *)&v11 = 0x336A901A15BB7353;
  *((_QWORD *)&v11 + 1) = "md::GridContext]";
  v12 = 15;
  v13 = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = xmmword_1E42F8C28;
  *(_QWORD *)&v19 = 21;
  *(_QWORD *)&v8 = &v9;
  *((_QWORD *)&v8 + 1) = 1;
  v9 = xmmword_1E42F8B38;
  v10 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v14, &v11, 0, (uint64_t)&v17, (uint64_t)&v8);
  v14 = 0x20A1ED17D78F322BLL;
  v15 = "md::LabelsLogic]";
  v16 = 15;
  *(_QWORD *)&v17 = &v18;
  *(_QWORD *)&v11 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v11 + 1) = "md::LabelsContext]";
  v12 = 17;
  v13 = 1;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = xmmword_1E42F8C28;
  *(_QWORD *)&v19 = 21;
  *(_QWORD *)&v8 = &v9;
  *((_QWORD *)&v8 + 1) = 1;
  v9 = xmmword_1E42F8C40;
  v10 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v14, &v11, 0, (uint64_t)&v17, (uint64_t)&v8);
  *(_QWORD *)&v11 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v11 + 1) = "md::MapZoomLevelStyleLogic]";
  v12 = 26;
  *(_QWORD *)&v8 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v8 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v9 = 33;
  BYTE8(v9) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 2;
  v18 = xmmword_1E42F8898;
  v19 = unk_1E42F88A8;
  v20 = xmmword_1E42F88B8;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v11, &v8, 0, (uint64_t)&v17, (uint64_t)&v14);
  *(_QWORD *)&v8 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v8 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v9 = 18;
  *(_QWORD *)&v17 = 0x7851AF310F49C988;
  *((_QWORD *)&v17 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v18 = 25;
  BYTE8(v18) = 1;
  *(_QWORD *)&v11 = &v12;
  *((_QWORD *)&v11 + 1) = 0;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v8, &v17, 0, (uint64_t)&v11, (uint64_t)&v14);
  *(_QWORD *)&v11 = 0x669A8EDAC04FCBF1;
  *((_QWORD *)&v11 + 1) = "md::MuninSceneLogic]";
  v12 = 19;
  *(_QWORD *)&v8 = 0xC83717EF586624DCLL;
  *((_QWORD *)&v8 + 1) = "md::MuninSceneContext]";
  *(_QWORD *)&v9 = 21;
  BYTE8(v9) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 3;
  v20 = xmmword_1E42F26C8;
  v21 = unk_1E42F26D8;
  v22 = 25;
  v18 = xmmword_1E42F26A8;
  v19 = unk_1E42F26B8;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v11, &v8, 0, (uint64_t)&v17, (uint64_t)&v14);
  *(_QWORD *)&v8 = 0xD2443A61CED86C69;
  *((_QWORD *)&v8 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v9 = 17;
  *(_QWORD *)&v17 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v17 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v18 = 19;
  BYTE8(v18) = 1;
  *(_QWORD *)&v11 = &v12;
  *((_QWORD *)&v11 + 1) = 0;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v8, &v17, 0, (uint64_t)&v11, (uint64_t)&v14);
  *(_QWORD *)&v8 = 0x3F812BA5755E8568;
  *((_QWORD *)&v8 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v9 = 24;
  *(_QWORD *)&v17 = 0xA60DDA5A69582425;
  *((_QWORD *)&v17 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v18 = 26;
  BYTE8(v18) = 1;
  *(_QWORD *)&v11 = &v12;
  *((_QWORD *)&v11 + 1) = 0;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v8, &v17, 0, (uint64_t)&v11, (uint64_t)&v14);
  *(_QWORD *)&v8 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v8 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v9 = 14;
  *(_QWORD *)&v17 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v17 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v18 = 21;
  BYTE8(v18) = 1;
  *(_QWORD *)&v11 = &v12;
  *((_QWORD *)&v11 + 1) = 0;
  v14 = (unint64_t)&v16;
  v15 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v8, &v17, 0, (uint64_t)&v11, (uint64_t)&v14);
  LODWORD(v17) = 36;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x24u, &v17)+ 18) = 0;
  v17 = xmmword_19FFB4F40;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x23u, &v17)+ 18) = 1;
  v4 = WORD3(v17);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v17), (_WORD *)&v17 + 2)+ 18) = (v4 << 16) | 1;
  v5 = WORD5(v17);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v17), (_WORD *)&v17 + 4)+ 18) = (v5 << 16) | 1;
  v6 = HIWORD(v17);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v17), (_WORD *)((unint64_t)&v17 | 0xC))+ 18) = (v6 << 16) | 1;
  return this;
}

void sub_19F9FF120(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void sub_19F9FF274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9FF638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F9FF64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9FF9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F9FF9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F9FFB80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA00A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 - 232);
  _Unwind_Resume(a1);
}

void sub_19FA00F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA00F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19FA01070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FA010F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA011E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA013AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA015D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c39_ZTSN3geo12Coordinate3DINS_7RadiansEdEE88c44_ZTSN3geo4UnitINS_20MeterUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

__n128 __copy_helper_block_ea8_56c39_ZTSN3geo12Coordinate3DINS_7RadiansEdEE(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[1] = a2[3].n128_u64[1];
  result = a2[4];
  a1[4] = result;
  return result;
}

uint64_t ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeStars::StarVertex>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::GlobeStars::StarsMesh::~StarsMesh(ggl::GlobeStars::StarsMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::GlobeStars::StarsMesh::~StarsMesh(ggl::GlobeStars::StarsMesh *this)
{
  ggl::Mesh::~Mesh((ggl::GlobeStars::StarsMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::GlobeStars::StarsMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::GlobeStars::StarVertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::GlobeStars::StarVertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GlobeStars::StarsPipelineSetup::~StarsPipelineSetup(ggl::GlobeStars::StarsPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::GlobeStars::StarsPipelineSetup::constantDataIsEnabled(ggl::GlobeStars::StarsPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::GlobeStars::StarsPipelineSetup::textureIsEnabled(ggl::GlobeStars::StarsPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::GlobeStars::StarsPipelineSetup::StarsPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42B58A8;
  v11 = (uint64_t *)a1[8];
  v12 = *a4;
  v13 = a4[1];
  *v11 = *a4;
  v11[1] = 0;
  v14 = (_QWORD *)a1[20];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v14[1];
  *v14 = v12;
  v14[1] = v13;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void md::FrameGraph::~FrameGraph(md::FrameGraph *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  v2 = (_QWORD *)*((_QWORD *)this + 18);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 19);
    v4 = (void *)*((_QWORD *)this + 18);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 16);
    v9 = (void *)*((_QWORD *)this + 15);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v7;
    operator delete(v9);
  }
  v12 = (void *)*((_QWORD *)this + 12);
  if (v12)
  {
    *((_QWORD *)this + 13) = v12;
    operator delete(v12);
  }
  v13 = (_QWORD *)*((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 10);
    v15 = (void *)*((_QWORD *)this + 9);
    if (v14 != v13)
    {
      do
      {
        v17 = *--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v13;
    operator delete(v15);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 6);
  if (v18)
  {
    v19 = (_QWORD *)*((_QWORD *)this + 7);
    v20 = (void *)*((_QWORD *)this + 6);
    if (v19 != v18)
    {
      do
      {
        v22 = *--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v21 + 72));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v21 + 48));
          MEMORY[0x1A1AF4E00](v21, 0x1070C4044CBF76DLL);
        }
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v18;
    operator delete(v20);
  }
  v23 = (_QWORD *)*((_QWORD *)this + 3);
  if (v23)
  {
    v24 = (_QWORD *)*((_QWORD *)this + 4);
    v25 = (void *)*((_QWORD *)this + 3);
    if (v24 != v23)
    {
      do
      {
        v27 = *--v24;
        v26 = v27;
        *v24 = 0;
        if (v27)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v26 + 112));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v26 + 88));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v26 + 64));
          if (*(char *)(v26 + 47) < 0)
            operator delete(*(void **)(v26 + 24));
          MEMORY[0x1A1AF4E00](v26, 0x1032C4041C7693DLL);
        }
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v23;
    operator delete(v25);
  }
  v28 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v28;
    operator delete(v28);
  }
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282BE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282BE8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282C30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282C30;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x17922920A08D336CLL;
  v2[1] = "md::erq::RenderQueueToSubmit]";
  *(_QWORD *)&result = 28;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4F50;
  v2[4] = "md::erq::RenderTargetToSubmit]";
  v2[5] = 29;
  v2[6] = 0x3D9415B0404B6523;
  v2[7] = "md::erq::GPUWorkCallbacks]";
  v2[8] = 25;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>,std::allocator<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>,std::allocator<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275E98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>,std::allocator<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275E98;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>,std::allocator<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *p_shared_weak_owners;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  os_signpost_id_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD v144[3];
  _QWORD *v145;
  _QWORD v146[3];
  _QWORD *v147;
  _QWORD v148[3];
  _QWORD *v149;
  _BYTE v150[24];
  _BYTE *v151;
  _BYTE v152[24];
  _BYTE *v153;
  uint8_t buf[24];
  uint8_t *v155;
  uint64_t v156;

  v2 = a1;
  v156 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::erq::RenderQueueToSubmit>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::erq::RenderTargetToSubmit>(v3);
  v6 = gdc::Registry::storage<md::erq::GPUWorkCallbacks>(v3);
  v7 = (_QWORD *)v6;
  v8 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v8 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v139 = v8;
  v140 = v4;
  v141 = v5;
  v142 = (_QWORD *)v6;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v143 = v10;
  v136 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v139))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v143 = v11;
      if (v11 == v136)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v139);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v136 != v10)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v134 = v4;
    v135 = v2;
    v132 = v7;
    v133 = v5;
    v131 = result;
    while (1)
    {
      *result = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v4[4];
      if (v17 < (v4[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v4[7],
            v21 = v4[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = (uint64_t *)(v4[10] + 8 * v20);
      }
      else
      {
        v25 = (uint64_t *)v4[11];
      }
      v26 = v5[4];
      if (v17 < (v5[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            v30 = v5[7],
            v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
      {
        v33 = v5[10] + 8 * v28;
      }
      else
      {
        v33 = v5[11];
      }
      v137 = (uint64_t *)v33;
      v34 = v7[4];
      if (v17 < (v7[5] - v34) >> 3
        && (v35 = *(_QWORD *)(v34 + 8 * v17)) != 0
        && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v15) & 0x7F)),
            v38 = v7[7],
            v37 = v7[8],
            v36 < (v37 - v38) >> 3)
        && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v16) : (v40 = 0), v40))
      {
        v41 = v7[11];
        v42 = v7[10] + 24 * v36;
      }
      else
      {
        v41 = v7[11];
        v42 = v41;
      }
      if (v42 == v41)
        v43 = 0;
      else
        v43 = (_QWORD *)v42;
      v44 = **(_QWORD **)(v2 + 8);
      v45 = *(_QWORD **)v44;
      v46 = *(_QWORD **)(v44 + 8);
      if (v45 != v46)
      {
        while (*v45 != 0x4987A5FEEF8688ACLL)
        {
          v45 += 5;
          if (v45 == v46)
            goto LABEL_53;
        }
      }
      if (v45 == v46)
      {
LABEL_53:
        v48 = 0;
      }
      else
      {
        v48 = v45[3];
        v47 = (std::__shared_weak_count *)v45[4];
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v50 = __ldxr(p_shared_owners);
          while (__stxr(v50 + 1, p_shared_owners));
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      v52 = **(_QWORD **)(v2 + 8);
      v53 = *(_QWORD **)v52;
      v54 = *(_QWORD **)(v52 + 8);
      if (v53 != v54)
      {
        while (*v53 != 0xCFC5133F599B8248)
        {
          v53 += 5;
          if (v53 == v54)
            goto LABEL_65;
        }
      }
      if (v53 == v54)
      {
LABEL_65:
        v56 = 0;
      }
      else
      {
        v56 = v53[3];
        v55 = (std::__shared_weak_count *)v53[4];
        if (v55)
        {
          v57 = (unint64_t *)&v55->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
          do
            v59 = __ldaxr(v57);
          while (__stlxr(v59 - 1, v57));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 40))(v56, *v43);
      v60 = *v43;
      v61 = **(_QWORD **)(v2 + 8);
      v62 = *(_QWORD **)v61;
      v63 = *(_QWORD **)(v61 + 8);
      if (v62 != v63)
      {
        while (*v62 != 0xCFC5133F599B8248)
        {
          v62 += 5;
          if (v62 == v63)
            goto LABEL_79;
        }
      }
      if (v62 == v63)
        break;
      v65 = v62[3];
      v64 = (std::__shared_weak_count *)v62[4];
      if (!v64)
        goto LABEL_80;
      v66 = v64;
      v67 = (unint64_t *)&v64->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      p_shared_weak_owners = (unint64_t *)&v66->__shared_weak_owners_;
      do
        v70 = __ldxr(p_shared_weak_owners);
      while (__stxr(v70 + 1, p_shared_weak_owners));
      do
        v71 = __ldaxr(v67);
      while (__stlxr(v71 - 1, v67));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
LABEL_81:
      v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      v138 = v43;
      v73 = v43[1];
      v74 = (**(uint64_t (***)(uint64_t))v48)(v48);
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 64))(v74);
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v75 = GEOGetVectorKitPerformanceLog_log;
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      if ((unint64_t)(v76 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v77 = v76;
        if (os_signpost_enabled(v75))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_19F029000, v75, OS_SIGNPOST_INTERVAL_BEGIN, v77, "SubmitCommands", (const char *)&unk_1A0189141, buf, 2u);
        }
      }
      v78 = *v137;
      v79 = *v25;
      v80 = operator new(0x20uLL);
      *v80 = &off_1E427B190;
      v80[1] = v72;
      v80[2] = v73;
      v80[3] = v56;
      v149 = v80;
      if (v66)
      {
        v81 = (unint64_t *)&v66->__shared_weak_owners_;
        v2 = v135;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
        v83 = v149;
      }
      else
      {
        v83 = v80;
        v2 = v135;
      }
      v84 = operator new(0x20uLL);
      *v84 = &off_1E427B148;
      v84[1] = v60;
      v84[2] = v65;
      v84[3] = v66;
      v147 = v84;
      v145 = 0;
      if (v83)
      {
        if (v83 == v148)
        {
          v155 = buf;
          (*(void (**)(_QWORD *, uint8_t *))(v148[0] + 24))(v148, buf);
          v85 = v147;
          if (!v147)
          {
LABEL_99:
            v153 = 0;
            v86 = v145;
            if (!v145)
              goto LABEL_100;
            goto LABEL_96;
          }
        }
        else
        {
          v155 = (uint8_t *)(*(uint64_t (**)(_QWORD *))(*v83 + 16))(v83);
          v85 = v147;
          if (!v147)
            goto LABEL_99;
        }
      }
      else
      {
        v155 = 0;
        v85 = v147;
        if (!v147)
          goto LABEL_99;
      }
      if (v85 == v146)
      {
        v153 = v152;
        (*(void (**)(_QWORD *, _BYTE *))(v146[0] + 24))(v146, v152);
        v86 = v145;
        if (!v145)
        {
LABEL_100:
          v151 = 0;
          goto LABEL_106;
        }
      }
      else
      {
        v153 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v85 + 16))(v85);
        v86 = v145;
        if (!v145)
          goto LABEL_100;
      }
LABEL_96:
      if (v86 == v144)
      {
        v151 = v150;
        (*(void (**)(_QWORD *, _BYTE *))(v144[0] + 24))(v144, v150);
      }
      else
      {
        v151 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v86 + 16))(v86);
      }
LABEL_106:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *, _BYTE *, _BYTE *))(*(_QWORD *)v74 + 80))(v74, v78, v79, buf, v152, v150);
      v87 = v151;
      if (v151 == v150)
      {
        v87 = v150;
        v88 = 4;
        v5 = v133;
      }
      else
      {
        v5 = v133;
        if (!v151)
          goto LABEL_111;
        v88 = 5;
      }
      (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_111:
      v89 = v153;
      if (v153 == v152)
      {
        v89 = v152;
        v90 = 4;
      }
      else
      {
        if (!v153)
          goto LABEL_116;
        v90 = 5;
      }
      (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_116:
      v91 = v155;
      if (v155 == buf)
      {
        v91 = buf;
        v92 = 4;
      }
      else
      {
        if (!v155)
          goto LABEL_121;
        v92 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v91 + 8 * v92))();
LABEL_121:
      v93 = v145;
      if (v145 == v144)
      {
        v93 = v144;
        v94 = 4;
      }
      else
      {
        if (!v145)
          goto LABEL_126;
        v94 = 5;
      }
      (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_126:
      v95 = v147;
      if (v147 == v146)
      {
        v95 = v146;
        v96 = 4;
      }
      else
      {
        if (!v147)
          goto LABEL_131;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_131:
      v97 = v149;
      if (v149 == v148)
      {
        v97 = v148;
        v98 = 4;
      }
      else
      {
        if (!v149)
          goto LABEL_136;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_136:
      v99 = ***(uint64_t ****)(v2 + 8);
      if (v99 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v99 != 0xCFC5133F599B8248)
      {
        v100 = v99 + 5;
        do
        {
          v101 = *v100;
          v100 += 5;
        }
        while (v101 != 0xCFC5133F599B8248);
        v99 = v100 - 5;
      }
      v103 = v99[3];
      v102 = (std::__shared_weak_count *)v99[4];
      if (v102)
      {
        v104 = (unint64_t *)&v102->__shared_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
        do
          v106 = __ldaxr(v104);
        while (__stlxr(v106 - 1, v104));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 56))(v103, v138[2]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 72))(v74, 1);
      if (v66)
        std::__shared_weak_count::__release_weak(v66);
      v10 = (_QWORD *)v139[4];
      v14 = v143 + 1;
      v143 = v14;
      v4 = v134;
      result = v131;
      v7 = v132;
      if (v14 != v10)
      {
        v107 = v140[4];
        while (1)
        {
          v108 = *((unsigned int *)v14 + 1);
          v109 = v108 >> 7;
          if (v108 >> 7 < (v140[5] - v107) >> 3)
          {
            v110 = *(_QWORD *)(v107 + 8 * v109);
            if (v110)
            {
              v111 = v108 & 0x7F;
              v112 = *(unsigned __int16 *)(v110 + 2 * v111);
              v113 = v140[7];
              v114 = v140[8];
              if (v112 < (v114 - v113) >> 3)
              {
                v115 = v113 + 8 * v112;
                if (v115 != v114 && *(_DWORD *)(v115 + 4) == (_DWORD)v108)
                {
                  v117 = v141[4];
                  if (v109 < (v141[5] - v117) >> 3)
                  {
                    v118 = *(_QWORD *)(v117 + 8 * v109);
                    if (v118)
                    {
                      v119 = *(unsigned __int16 *)(v118 + 2 * v111);
                      v120 = v141[7];
                      v121 = v141[8];
                      if (v119 < (v121 - v120) >> 3)
                      {
                        v122 = v120 + 8 * v119;
                        if (v122 != v121 && *(_DWORD *)(v122 + 4) == (_DWORD)v108)
                        {
                          v124 = v142[4];
                          if (v109 < (v142[5] - v124) >> 3)
                          {
                            v125 = *(_QWORD *)(v124 + 8 * v109);
                            if (v125)
                            {
                              v126 = *(unsigned __int16 *)(v125 + 2 * v111);
                              v128 = v142[7];
                              v127 = v142[8];
                              if (v126 < (v127 - v128) >> 3)
                              {
                                v129 = v128 + 8 * v126;
                                if (*(_DWORD *)(v129 + 4) == (_DWORD)v108 && v129 != v127)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            v14 = v10;
            goto LABEL_13;
          }
        }
        v10 = v14;
LABEL_13:
        v143 = v14;
      }
      if (v136 == v10)
        goto LABEL_180;
    }
LABEL_79:
    v65 = 0;
LABEL_80:
    v66 = 0;
    goto LABEL_81;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_180:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::erq::GPUWorkCallbacks>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3D9415B0404B6523;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3D9415B0404B6523;
      if (*(_QWORD *)&v3 <= 0x3D9415B0404B6523uLL)
        v5 = 0x3D9415B0404B6523uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3D9415B0404B6523;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3D9415B0404B6523)
            {
              if (v7[2] == 0x3D9415B0404B6523)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3D9415B0404B6523)
          {
            if (v7[2] == 0x3D9415B0404B6523)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::erq::GPUWorkCallbacks]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42744A8;
  *(_QWORD *)(v11 + 8) = 0x3D9415B0404B6523;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3D9415B0404B6523uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3D9415B0404B6523;
  v15[1] = "md::erq::GPUWorkCallbacks]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3D9415B0404B6523, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void gdc::ComponentStorageWrapper<md::erq::GPUWorkCallbacks>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::erq::GPUWorkCallbacks>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::erq::GPUWorkCallbacks>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::erq::GPUWorkCallbacks>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

BOOL gdc::ComponentStorageWrapper<md::erq::RenderTargetToSubmit>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::erq::RenderTargetToSubmit>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::erq::RenderTargetToSubmit>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

BOOL gdc::ComponentStorageWrapper<md::erq::RenderQueueToSubmit>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::erq::RenderQueueToSubmit>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::erq::RenderQueueToSubmit>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::FlyoverMetaLayerDataSource::~FlyoverMetaLayerDataSource(md::FlyoverMetaLayerDataSource *this)
{
  *(_QWORD *)this = &off_1E42A3190;
  *((_QWORD *)this + 73) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
}

{
  *(_QWORD *)this = &off_1E42A3190;
  *((_QWORD *)this + 73) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverMetaLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v19[2];
  __int16 v20;
  int v21;
  void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26[32];
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  if (a2 != a3)
  {
    v3 = a2;
    do
    {
      v4 = *v3;
      if (*(_BYTE *)(*v3 + 96))
        v5 = *(_DWORD *)(v4 + 100);
      else
        v5 = 2147483646;
      v6 = *(int **)(v4 + 16);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = v6[4];
      v12 = *(_QWORD *)(v4 + 112);
      v19[0] = *(_BYTE *)v4;
      v20 = 49;
      v21 = v5;
      v22 = v26;
      v23 = v26;
      v24 = v26;
      v25 = 32;
      v27 = 0;
      v29 = v7;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v22, v26, (char *)&v29, (char *)&v30);
      v29 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v22, v23, (char *)&v29, (char *)&v30);
      v29 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v22, v23, (char *)&v29, (char *)&v30);
      v29 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v22, v23, (char *)&v29, (char *)&v30);
      v29 = v11;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v22, v23, (char *)&v29, (char *)&v30);
      v13 = (unsigned __int8 *)v22;
      v14 = v23 - (_BYTE *)v22;
      if (v23 == v22)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        if (v14 <= 1)
          v14 = 1;
        do
        {
          v16 = *v13++;
          v15 ^= (v15 << 6) + (v15 >> 2) - 0x61C8864680B583EBLL + v16;
          --v14;
        }
        while (v14);
      }
      v27 = v15;
      v28 = v12;
      v17 = *v3;
      v3 += 2;
      gdc::LayerDataRequest::request(v17, (uint64_t)v19, 0);
      if (v22 != v24)
        free(v22);
    }
    while (v3 != a3);
  }
}

void md::FlyoverMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 49)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_19;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_19:
    v8 = 0;
LABEL_20:
    if (v8)
      v16 = v8 - 8;
    else
      v16 = 0;
    v26 = 0;
    if (!v16)
      goto LABEL_30;
    goto LABEL_24;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(v7 + 112);
  v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  if (v8)
    v12 = v8 - 8;
  else
    v12 = 0;
  v25 = v12;
  v26 = v9;
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
    v16 = v25;
    if (!v25)
      goto LABEL_30;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v16 = v25;
    if (!v25)
      goto LABEL_30;
  }
LABEL_24:
  if (!*(_QWORD *)(v16 + 152))
  {
LABEL_30:
    v17 = (char *)operator new(0x2F8uLL);
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = &off_1E42DC0E8;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v27 = 0;
    v28 = 0;
    v18 = md::MapTileData::MapTileData((uint64_t)(v17 + 24), a1, (uint64_t)&v29, (uint64_t)&v27, 1);
    *((_QWORD *)v17 + 3) = &off_1E42970D0;
    *((_QWORD *)v17 + 82) = &unk_1E4297110;
    *(_OWORD *)(v17 + 744) = 0u;
    goto LABEL_31;
  }
  v17 = (char *)operator new(0x2F8uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1E42DC0E8;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v27 = 0;
  v28 = 0;
  v18 = md::MapTileData::MapTileData((uint64_t)(v17 + 24), a1, (uint64_t)&v29, (uint64_t)&v27, 1);
  v20 = *(_QWORD *)(v16 + 152);
  v19 = *(_QWORD *)(v16 + 160);
  *((_QWORD *)v17 + 3) = &off_1E42970D0;
  *((_QWORD *)v17 + 82) = &unk_1E4297110;
  *((_QWORD *)v17 + 93) = v20;
  *((_QWORD *)v17 + 94) = v19;
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
LABEL_31:
  *a3 = v18;
  a3[1] = (uint64_t)v17;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19FA03438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  void *v12;

  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverMetaLayerDataSource::updateRequest()
{
  return 1;
}

void std::__shared_ptr_emplace<md::FlyoverMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FlyoverMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::FlyoverMetaTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v45;

  v6 = (unint64_t)a2 >> 16;
  v7 = ((unint64_t)a2 >> 18) + (unsigned __int16)a2 + (v6 << 6) - 0x61C8864680B583EBLL;
  v8 = v7 ^ v6;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7 ^ v6;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = HIWORD(a2);
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v12[1];
            if (v17 == v8)
            {
              if (*((unsigned __int16 *)v12 + 8) == (unsigned __int16)a2 && *((unsigned __int16 *)v12 + 9) == v13)
                return v12;
            }
            else if ((v17 & (v9 - 1)) != v3)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v15 = v12[1];
          if (v15 == v8)
          {
            if (*((unsigned __int16 *)v12 + 8) == (unsigned __int16)a2 && *((unsigned __int16 *)v12 + 9) == v13)
              return v12;
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = 0;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_65;
      v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_65:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v45 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v45)
          operator delete(v45);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = operator new(8 * prime);
    v25 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v24;
    if (v25)
      operator delete(v25);
    v26 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
    while (prime != v26);
    v28 = (uint64_t *)(a1 + 4);
    v27 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v27)
    {
LABEL_64:
      v9 = prime;
      goto LABEL_65;
    }
    v29 = v27[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v27 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
        {
          *v27 = *i;
          v34 = 8 * v33;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v34);
          **(_QWORD **)(*(_QWORD *)a1 + v34) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
          v27 = i;
          v31 = v33;
        }
      }
      goto LABEL_64;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
    v38 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_64;
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 != v29)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v27;
          goto LABEL_69;
        }
        *v27 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*(_QWORD *)a1 + v39);
        **(_QWORD **)(*(_QWORD *)a1 + v39) = v38;
        v38 = v27;
      }
      v40 = v29;
LABEL_69:
      v27 = v38;
      v38 = (_QWORD *)*v38;
      v29 = v40;
      if (!v38)
        goto LABEL_64;
    }
  }
LABEL_78:
  v41 = *(_QWORD **)a1;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v42)
  {
    *v12 = *v42;
LABEL_86:
    *v42 = v12;
    goto LABEL_87;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v41[v3] = a1 + 4;
  if (*v12)
  {
    v43 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_86;
  }
LABEL_87:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void md::SkyLogic::~SkyLogic(md::SkyLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42AF668;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42AF668;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x7C7EC6C7C111B0D0 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__2NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 _ZNKSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__2NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D47B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__2NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D47B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__1NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4768;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4720;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4720;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46)
      v3 = 0x1AF456233693CD46 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x1AF456233693CD46;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x1AF456233693CD46)
      {
        if (v6[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x1AF456233693CD46)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x1AF456233693CD46)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68)
      v11 = 0xE42D19AFCA302E68 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0xE42D19AFCA302E68)
      {
        if (v13[2] == 0xE42D19AFCA302E68)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0xE42D19AFCA302E68)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0xE42D19AFCA302E68)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0xE42D19AFCA302E68)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::SkyLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0D98;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AACD1071);
  return a1;
}

void gdc::ManagedObjectHolder<md::SkyLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0D98;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C40AACD1071);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::SkyLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void geo::TaskQueue::~TaskQueue(geo::TaskQueue *this)
{
  unsigned int v2;
  unsigned int v3;

  if (*((_BYTE *)this + 58))
  {
    if (*((_QWORD *)this + 9))
    {
      if (*((_BYTE *)this + 88))
      {
        v2 = 0;
        do
        {
          dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 9), 0xFFFFFFFFFFFFFFFFLL);
          ++v2;
        }
        while (v2 < *((unsigned __int8 *)this + 88));
        if (*((_BYTE *)this + 88))
        {
          v3 = 0;
          do
          {
            dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 9));
            ++v3;
          }
          while (v3 < *((unsigned __int8 *)this + 88));
        }
      }
    }
  }
  *((_QWORD *)this + 8) = &off_1E42B5550;

  *((_QWORD *)this + 4) = &off_1E42B5530;
  *((_QWORD *)this + 1) = &off_1E42B5530;

}

geo::TaskQueue **std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](geo::TaskQueue **a1)
{
  geo::TaskQueue *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::TaskQueue::~TaskQueue(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5530;

  return a1;
}

void geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5530;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5550;

  return a1;
}

void geo::_retain_ptr<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5550;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TaskContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TaskContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TaskContext>::__on_zero_shared(_QWORD *a1)
{
  id *v2;
  NSObject *v3;
  geo::TaskQueue *v4;
  geo::TaskQueue *v5;
  geo::TaskQueue *v6;
  geo::TaskQueue *v7;
  geo::TaskQueue *v8;
  geo::TaskQueue *v9;
  geo::TaskQueue *v10;
  geo::TaskQueue *v11;
  geo::TaskQueue *v12;
  geo::TaskQueue *v13;
  geo::TaskQueue *v14;
  geo::TaskQueue *v15;
  geo::TaskQueue *v16;
  geo::TaskQueue *v17;
  geo::TaskQueue *v18;
  geo::TaskQueue *v19;
  geo::TaskQueue *v20;
  int v21;
  id *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 3);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v3 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v21 = 134217984;
    v22 = v2;
    _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_INFO, "Destroy TaskContext:%p", (uint8_t *)&v21, 0xCu);
  }

  v4 = (geo::TaskQueue *)a1[20];
  a1[20] = 0;
  if (v4)
  {
    geo::TaskQueue::~TaskQueue(v4);
    MEMORY[0x1A1AF4E00]();
  }
  v5 = (geo::TaskQueue *)a1[19];
  a1[19] = 0;
  if (v5)
  {
    geo::TaskQueue::~TaskQueue(v5);
    MEMORY[0x1A1AF4E00]();
  }
  v6 = (geo::TaskQueue *)a1[18];
  a1[18] = 0;
  if (v6)
  {
    geo::TaskQueue::~TaskQueue(v6);
    MEMORY[0x1A1AF4E00]();
  }
  v7 = (geo::TaskQueue *)a1[17];
  a1[17] = 0;
  if (v7)
  {
    geo::TaskQueue::~TaskQueue(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = (geo::TaskQueue *)a1[16];
  a1[16] = 0;
  if (v8)
  {
    geo::TaskQueue::~TaskQueue(v8);
    MEMORY[0x1A1AF4E00]();
  }
  v9 = (geo::TaskQueue *)a1[15];
  a1[15] = 0;
  if (v9)
  {
    geo::TaskQueue::~TaskQueue(v9);
    MEMORY[0x1A1AF4E00]();
  }
  v10 = (geo::TaskQueue *)a1[14];
  a1[14] = 0;
  if (v10)
  {
    geo::TaskQueue::~TaskQueue(v10);
    MEMORY[0x1A1AF4E00]();
  }
  v11 = (geo::TaskQueue *)a1[13];
  a1[13] = 0;
  if (v11)
  {
    geo::TaskQueue::~TaskQueue(v11);
    MEMORY[0x1A1AF4E00]();
  }
  v12 = (geo::TaskQueue *)a1[12];
  a1[12] = 0;
  if (v12)
  {
    geo::TaskQueue::~TaskQueue(v12);
    MEMORY[0x1A1AF4E00]();
  }
  v13 = (geo::TaskQueue *)a1[11];
  a1[11] = 0;
  if (v13)
  {
    geo::TaskQueue::~TaskQueue(v13);
    MEMORY[0x1A1AF4E00]();
  }
  v14 = (geo::TaskQueue *)a1[10];
  a1[10] = 0;
  if (v14)
  {
    geo::TaskQueue::~TaskQueue(v14);
    MEMORY[0x1A1AF4E00]();
  }
  v15 = (geo::TaskQueue *)a1[9];
  a1[9] = 0;
  if (v15)
  {
    geo::TaskQueue::~TaskQueue(v15);
    MEMORY[0x1A1AF4E00]();
  }
  v16 = (geo::TaskQueue *)a1[8];
  a1[8] = 0;
  if (v16)
  {
    geo::TaskQueue::~TaskQueue(v16);
    MEMORY[0x1A1AF4E00]();
  }
  v17 = (geo::TaskQueue *)a1[7];
  a1[7] = 0;
  if (v17)
  {
    geo::TaskQueue::~TaskQueue(v17);
    MEMORY[0x1A1AF4E00]();
  }
  v18 = (geo::TaskQueue *)a1[6];
  a1[6] = 0;
  if (v18)
  {
    geo::TaskQueue::~TaskQueue(v18);
    MEMORY[0x1A1AF4E00]();
  }
  v19 = (geo::TaskQueue *)a1[5];
  a1[5] = 0;
  if (v19)
  {
    geo::TaskQueue::~TaskQueue(v19);
    MEMORY[0x1A1AF4E00]();
  }
  v20 = (geo::TaskQueue *)a1[4];
  a1[4] = 0;
  if (v20)
  {
    geo::TaskQueue::~TaskQueue(v20);
    MEMORY[0x1A1AF4E00]();
  }

}

void md::TaskContext::flushTileDecodeQueues(md::TaskContext *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t v16[8];
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "flushTileDecodeQueues Start", v16, 2u);
  }

  v3 = *((_QWORD *)this + 3);
  v23[0] = &off_1E42C8EA0;
  v24 = v23;
  geo::TaskQueue::barrierSync(v3, v23);
  v4 = v24;
  if (v24 == v23)
  {
    v5 = 4;
    v4 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = *((_QWORD *)this + 14);
  v21[0] = &off_1E42C8EE8;
  v22 = v21;
  geo::TaskQueue::barrierSync(v6, v21);
  v7 = v22;
  if (v22 == v21)
  {
    v8 = 4;
    v7 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v9 = *((_QWORD *)this + 5);
  v19[0] = &off_1E42C8F30;
  v20 = v19;
  geo::TaskQueue::barrierSync(v9, v19);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_20;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_20:
  v12 = *((_QWORD *)this + 16);
  v17[0] = &off_1E42C8F78;
  v18 = v17;
  geo::TaskQueue::barrierSync(v12, v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_25;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_25:
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v15 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_INFO, "flushTileDecodeQueues Finish", v16, 2u);
  }

}

void sub_19FA04760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_3,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_3,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_3>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8F78;
  return result;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_3,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_3>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8F78;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_2,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_2,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_2>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8F30;
  return result;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_2,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_2>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8F30;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_1,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_1,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8EE8;
  return result;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_1,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8EE8;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_0,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_0,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8EA0;
  return result;
}

void std::__function::__func<md::TaskContext::flushTileDecodeQueues(void)::$_0,std::allocator<md::TaskContext::flushTileDecodeQueues(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8EA0;
}

void altitude::util::computeBounds(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  const char **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float32x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  const char **v31;
  char v32;
  char **v33;
  char *v34;

  v8 = *(uint64_t **)(a2 + 216);
  v9 = *v8;
  v10 = *(const char ***)(*v8 + 8);
  v11 = *(_QWORD *)(*v8 + 16);
  v31 = v10;
  if (v11)
  {
    v12 = 0;
    v13 = -1;
    do
    {
      v14 = *v10;
      v10 += 4;
      if (!strcmp(v14, "position"))
        v13 = v12;
      ++v12;
    }
    while (v11 != v12);
    v15 = v13;
  }
  else
  {
    v15 = -1;
  }
  v16 = (int8x16_t)xmmword_19FFB2E00;
  *(int64x2_t *)a1 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 16) = xmmword_19FFB2E00;
  *(int64x2_t *)(a1 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v17 = *(_QWORD *)(v9 + 24);
  v18 = *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40);
  v19 = v18 % *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a2 + 16) & 2) == 0)
  {
    v20 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v20 != -1)
    {
      v34 = &v32;
      v33 = &v34;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      v16 = (int8x16_t)xmmword_19FFB2E00;
    }
  }
  if (v18 == v19)
  {
    if (!a4)
      return;
    v21 = v31[4 * v15 + 3];
  }
  else
  {
    if (!a4)
      return;
    v21 = &v31[4 * v15 + 3][*(_QWORD *)(a2 + 72)];
  }
  v22 = 0;
  v23 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v24 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    v25 = (float32x2_t *)&v21[v17 * *(unsigned __int16 *)(a3 + 2 * v22)];
    v26 = vcvtq_f64_f32(*v25);
    v24 = vminnmq_f64(v24, v26);
    v27 = (float64x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
    v28.f64[1] = v27.f64[1];
    *(_QWORD *)&v29.f64[1] = v16.i64[1];
    *(_QWORD *)&v28.f64[0] = v16.i64[0];
    v29.f64[0] = v25[1].f32[0];
    v30 = (int8x16_t)vcgtq_f64(v28, v29);
    v29.f64[1] = v27.f64[1];
    v16 = vbslq_s8(v30, (int8x16_t)v29, v16);
    v27.f64[1] = v29.f64[0];
    v23 = vmaxnmq_f64(v23, v27);
    ++v22;
  }
  while (a4 > v22);
  *(float64x2_t *)a1 = v24;
  *(int8x16_t *)(a1 + 16) = v16;
  *(float64x2_t *)(a1 + 32) = v23;
}

void altitude::util::computeBounds(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v12;
  uint64_t v13;
  BOOL v14;
  __n128 v15;
  char v16;
  char **v17;
  char *v18;

  v4 = a2;
  v5 = a1;
  v6 = *a3;
  v7 = *(_QWORD *)(*a3 + 48) - *(_QWORD *)(*a3 + 40);
  v8 = v7 % *(_QWORD *)(*a3 + 8);
  if ((*(_BYTE *)(*a3 + 16) & 2) == 0)
  {
    v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v9 != -1)
    {
      v18 = &v16;
      v17 = &v18;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      v4 = a2;
      v5 = a1;
    }
  }
  v12.n128_u64[0] = 0;
  if (v7 == v8)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v6 + 72);
  v12.n128_u64[1] = v6;
  v15 = v12;
  altitude::util::computeBounds(v5, *v4, v13, (*(_QWORD *)(*a3 + 48) - *(_QWORD *)(*a3 + 40)) / *(_QWORD *)(*a3 + 8));
  if (v13)
  {
    v14 = v7 == v8 || v15.n128_u64[0] == 0;
    if (!v14 && *(_BYTE *)(v15.n128_u64[1] + 17) != 2)
      (*(void (**)(__n128))(*(_QWORD *)v15.n128_u64[0] + 64))(v15);
  }
}

void sub_19FA04D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::VertexData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::util::createAtmosphereLookupTexture()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int shared_owners_high;
  int shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int8x16x4_t v30;

  v0 = (std::__shared_weak_count *)operator new(0x58uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v0[1].__shared_weak_owners_ = 0;
  v0[2].__vftable = 0;
  v0[1].__shared_owners_ = 0;
  LODWORD(v0[2].__shared_owners_) = 0;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v0[2].__shared_owners_ + 4) = v2;
  *(std::__shared_weak_count_vtbl **)((char *)&v0[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v0[3].__shared_owners_) = 0;
  v3 = (std::__shared_weak_count *)operator new(0x60uLL);
  v3->__shared_owners_ = 0;
  v4 = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  ggl::TextureData2D::TextureData2D((uint64_t)&v3[1], 1024, 1, 1u, 2, 0);
  v5 = operator new();
  v6 = v5;
  do
    v7 = __ldxr(v4);
  while (__stxr(v7 + 1, v4));
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 56) = 0x100000001;
  shared_owners = v3[1].__shared_owners_;
  shared_owners_high = HIDWORD(v3[1].__shared_owners_);
  *(_DWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 68) = shared_owners_high;
  *(_QWORD *)(v5 + 72) = 0x100000001;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)v5 = &off_1E42BE438;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v5 + 48) = "";
  *(_DWORD *)(v5 + 104) = shared_owners;
  *(_QWORD *)(v5 + 112) = v3 + 1;
  *(_QWORD *)(v5 + 120) = v3;
  do
    v10 = __ldxr(v4);
  while (__stxr(v10 + 1, v4));
  *(_WORD *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 130) = 1;
  *(_QWORD *)(v5 + 136) = v0 + 1;
  *(_QWORD *)(v5 + 144) = v0;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  *(_QWORD *)(v5 + 80) = v3[1].__shared_weak_owners_;
  do
    v12 = __ldaxr(v4);
  while (__stlxr(v12 - 1, v4));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  v13 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 112) + 16))(*(_QWORD *)(v6 + 112), 0);
  v14 = 0;
  v15 = (__n128)xmmword_19FFB4F80;
  v16 = (__n128)xmmword_19FFB4F90;
  v17 = (__n128)xmmword_19FFB4FA0;
  v18 = (__n128)xmmword_19FFB2E90;
  v19 = (float32x4_t)vdupq_n_s32(0x397F7FB0u);
  v20.i64[0] = 0x1000000010;
  v20.i64[1] = 0x1000000010;
  do
  {
    v21 = vcvtq_f32_u32((uint32x4_t)v15);
    v22 = vcvtq_f32_u32((uint32x4_t)v16);
    v23 = vcvtq_f32_u32((uint32x4_t)v17);
    v24 = vcvtq_f32_u32((uint32x4_t)v18);
    v30.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmulq_f32(v24, v24), v19));
    v30.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmulq_f32(v23, v23), v19));
    v30.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmulq_f32(v22, v22), v19));
    v30.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmulq_f32(v21, v21), v19));
    *(int8x16_t *)(v13 + v14) = vqtbl4q_s8(v30, (int8x16_t)xmmword_19FFB4E00);
    v14 += 16;
    v18 = (__n128)vaddq_s32((int32x4_t)v18, v20);
    v17 = (__n128)vaddq_s32((int32x4_t)v17, v20);
    v16 = (__n128)vaddq_s32((int32x4_t)v16, v20);
    v15 = (__n128)vaddq_s32((int32x4_t)v15, v20);
  }
  while (v14 != 1024);
  if (v3)
  {
    v25 = (unint64_t *)&v3->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128))v3->__on_zero_shared)(v3, v15, v16, v17, v18);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v0)
  {
    v27 = (unint64_t *)&v0->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128))v0->__on_zero_shared)(v0, v15, v16, v17, v18);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  return v6;
}

void sub_19FA05058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void altitude::util::loadTextureFromBundle(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  pwin_jpg *MemFile;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  int shared_owners_high;
  int shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  const void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  void *v62;
  void *__p;
  std::__shared_weak_count *v64;
  char v65;
  int v66;
  void (**v67)(karo::media::Image *__hidden);
  uint64_t v68;
  unsigned int v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  _DWORD v77[3];

  v77[0] = 0;
  MemFile = (pwin_jpg *)karo::Loader::getMemFile(a2, a3, v77);
  if (!MemFile)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VectorKit"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(char *)(a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *(_QWORD *)a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "lastPathComponent");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = a1;
    objc_msgSend(v12, "stringByDeletingPathExtension");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "pathExtension");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringByDeletingLastPathComponent");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "pathForResource:ofType:inDirectory:", v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16
      || (objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"),
          v17 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v17, "pathForResource:ofType:inDirectory:", v13, v14, v15),
          v16 = (void *)objc_claimAutoreleasedReturnValue(),
          v17,
          v16))
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v16);
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      MemFile = (pwin_jpg *)objc_msgSend(v18, "bytes");
      v77[0] = objc_msgSend(v18, "length");

    }
    else
    {
      MemFile = 0;
    }

    a1 = v61;
  }
  v67 = &off_1E42C3568;
  v68 = 0;
  v69 = 29;
  v70 = 0;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0;
  v66 = 1;
  v19 = (unsigned __int8 *)v77[0];
  karo::util::Path::getFileSuffix((uint64_t)&__p, a3);
  karo::media::ImageLoader::loadFromChunk(&v66, MemFile, v19, (unsigned __int16 *)&__p, (uint64_t)&v67);
  if (v65 < 0)
  {
    operator delete(__p);
    v20 = v68;
    if (a4)
      goto LABEL_11;
  }
  else
  {
    v20 = v68;
    if (a4)
    {
LABEL_11:
      if (!v20)
        goto LABEL_14;
      if (*(_QWORD *)(v20 + 24) - *(_QWORD *)(v20 + 16) == 16)
      {
        karo::media::Image::mipmapAndCompress((uint64_t)&v67, v69);
        v20 = v68;
        if (!v68)
          goto LABEL_14;
      }
LABEL_17:
      v22 = *(_DWORD *)v20;
      v21 = *(_DWORD *)(v20 + 4);
      v23 = (*(_QWORD *)(v20 + 24) - *(_QWORD *)(v20 + 16)) >> 4;
      goto LABEL_18;
    }
  }
  if (v20)
    goto LABEL_17;
LABEL_14:
  v21 = 0;
  v22 = 0;
  LODWORD(v23) = 0;
LABEL_18:
  v24 = (std::__shared_weak_count *)operator new(0x60uLL);
  v24->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  ggl::TextureData2D::TextureData2D((uint64_t)&v24[1], v22, v21, v23, 12, 0);
  __p = &v24[1];
  v64 = v24;
  v26 = operator new(0xB0uLL);
  v27 = v26;
  v26[1] = 0;
  v26[2] = 0;
  *v26 = &off_1E42E53B0;
  v28 = (char *)(v26 + 3);
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  v26[13] = 0;
  v26[5] = 0;
  v26[6] = 0;
  *((_DWORD *)v26 + 14) = 0;
  v26[10] = 0x100000001;
  shared_owners = v24[1].__shared_owners_;
  shared_owners_high = HIDWORD(v24[1].__shared_owners_);
  *((_DWORD *)v26 + 22) = 0;
  *((_DWORD *)v26 + 23) = shared_owners_high;
  v26[12] = 0x100000001;
  v26[14] = 0;
  v26[15] = 0;
  v26[3] = &off_1E42BE438;
  v26[4] = 0;
  v26[8] = &unk_1E42BE458;
  v26[9] = "";
  *((_DWORD *)v26 + 32) = shared_owners;
  v26[17] = v24 + 1;
  v26[18] = v24;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  *((_WORD *)v26 + 76) = 0;
  *((_BYTE *)v26 + 154) = 1;
  v33 = a5[1];
  v26[20] = *a5;
  v26[21] = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v26[13] = v24[1].__shared_weak_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *a1 = v28;
  a1[1] = v27;
  v37 = v68;
  if (v68)
  {
    v38 = 0;
    do
    {
      v39 = v38;
      if (v38 >= (unint64_t)((uint64_t)(*(_QWORD *)(v37 + 24) - *(_QWORD *)(v37 + 16)) >> 4))
        break;
      v40 = (void *)(*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)__p + 16))(__p, v38);
      v41 = (uint64_t *)(*(_QWORD *)(v68 + 16) + 16 * v39);
      v42 = *v41;
      v43 = (std::__shared_weak_count *)v41[1];
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v46 = (uint64_t *)(*(_QWORD *)(v68 + 16) + 16 * v39);
        v47 = *v46;
        v48 = (std::__shared_weak_count *)v46[1];
        v49 = *(const void **)(v42 + 8);
        if (v48)
        {
          v50 = (unint64_t *)&v48->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          memcpy(v40, v49, *(_QWORD *)(v47 + 16));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        else
        {
          memcpy(v40, v49, *(_QWORD *)(v47 + 16));
        }
        do
          v53 = __ldaxr(v44);
        while (__stlxr(v53 - 1, v44));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      else
      {
        memcpy(v40, *(const void **)(v42 + 8), *(_QWORD *)(v42 + 16));
      }
      if (!v68)
        break;
      v54 = *(std::__shared_weak_count **)(*(_QWORD *)(v68 + 16) + 16 * v39 + 8);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        do
          v57 = __ldaxr(v55);
        while (__stlxr(v57 - 1, v55));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v37 = v68;
      v38 = v39 + 1;
    }
    while (v68);
  }
  v58 = v64;
  if (v64)
  {
    v59 = (unint64_t *)&v64->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  karo::media::Image::~Image((karo::media::Image *)&v67);
}

void sub_19FA055CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19FA05644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  karo::media::Image::~Image((karo::media::Image *)va1);
  _Unwind_Resume(a1);
}

_QWORD *altitude::util::createMeshIndexData(_QWORD *this, karo::media::C3mMesh *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;

  v3 = this[10];
  v2 = this[11];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = (uint64_t)this;
    v6 = operator new(0xF8uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1E42DF1E8;
    v7 = (v4 >> 1);
    v8 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), 2, 1, 0, 7, v7);
    *((_DWORD *)v6 + 60) = 0;
    v6[3] = &off_1E42B6B88;
    v6[4] = 2;
    v6[28] = &unk_1E42B6BA8;
    v6[29] = "/render/tilebasic/indexdata";
    v9 = *(std::__shared_weak_count **)(v5 + 72);
    *(_QWORD *)(v5 + 64) = v8;
    *(_QWORD *)(v5 + 72) = v6;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD **)(v5 + 64);
    v13 = v12[1] * v7;
    if (v13)
    {
      v14 = (void *)v12[9];
      this = memcpy(v14, *(const void **)(v5 + 80), 2 * v7);
      if (v14)
      {
        v15 = v12[8];
        if (v15 <= v13)
          v15 = v13;
        v12[7] = 0;
        v12[8] = v15;
      }
    }
    else
    {
      return memcpy(0, *(const void **)(v5 + 80), 2 * v7);
    }
  }
  return this;
}

float altitude::util::computeLocalClipPlanes(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, double a5, int8x16_t a6, double a7, double a8, int8x16_t a9, int8x16_t a10)
{
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  int8x16_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int8x16_t v29;
  float v30;
  float v31;
  float result;

  a4.i64[0] = *(_QWORD *)(a1 + 8);
  v14 = *(double *)(a1 + 16);
  *(double *)a10.i64 = *(double *)(a1 + 24) - *(double *)a1;
  v15 = *(double *)(a1 + 32) - *(double *)a4.i64;
  v16 = *(double *)(a1 + 40) - v14;
  *(double *)v10.i64 = fmax(*(double *)a10.i64, 0.0) * a3;
  *(double *)v11.i64 = fmax(v15, 0.0) * a3;
  *(double *)a4.i64 = *(double *)a4.i64 + (v15 - *(double *)v11.i64) * 0.5;
  v17 = fmax(v16, 0.0) * a3;
  v18 = v14 + (v16 - v17) * 0.5;
  *(double *)a9.i64 = v18 + v17;
  *(float *)&v16 = *(double *)a4.i64;
  *(float *)&v17 = v18;
  *(float *)v11.i32 = *(double *)a4.i64 + *(double *)v11.i64;
  *(float *)&v18 = *(double *)a9.i64;
  *(float *)a4.i32 = *(float *)v11.i32 - *(float *)&v16;
  v19 = (float)(*(float *)&v18 - *(float *)&v17) * (float)(*(float *)&v18 - *(float *)&v17);
  *(double *)a6.i64 = *(double *)a1 + (*(double *)a10.i64 - *(double *)v10.i64) * 0.5;
  *(double *)v10.i64 = *(double *)a6.i64 + *(double *)v10.i64;
  v20 = *(double *)a6.i64;
  a6.i32[0] = 1.0;
  v21.i64[0] = 0x8000000080000000;
  v21.i64[1] = 0x8000000080000000;
  v22 = *(float *)vbslq_s8(v21, a6, a4).i32;
  *(float *)a10.i32 = (float)((float)(*(float *)&v18 - *(float *)&v17) * v22)
                    / sqrtf(v19 + (float)(*(float *)a4.i32 * *(float *)a4.i32));
  v23 = *(float *)vbslq_s8(v21, a6, a10).i32;
  *(float *)a2 = v23;
  *(_QWORD *)(a2 + 4) = 0;
  *(float *)(a2 + 12) = -(float)(v20 * v23);
  *(float *)v10.i32 = *(double *)v10.i64;
  *(float *)v12.i32 = *(float *)v10.i32 - v20;
  v24 = *(float *)vbslq_s8(v21, a6, v12).i32;
  *(float *)v13.i32 = (float)-(float)(v24 * (float)(*(float *)&v18 - *(float *)&v17))
                    / sqrtf(v19 + (float)(*(float *)v12.i32 * *(float *)v12.i32));
  v25 = *(float *)vbslq_s8(v21, a6, v13).i32;
  v26 = -(float)(*(float *)v11.i32 * v25);
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v25;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)v11.i32 = *(float *)&v16 - *(float *)v11.i32;
  *(float *)v11.i32 = (float)((float)(*(float *)&v18 - *(float *)&v17) * *(float *)vbslq_s8(v21, a6, v11).i32)
                    / sqrtf(v19 + (float)(*(float *)v11.i32 * *(float *)v11.i32));
  v27 = *(float *)vbslq_s8(v21, a6, v11).i32;
  *(float *)(a2 + 28) = v26;
  *(float *)(a2 + 32) = v27;
  *(_QWORD *)(a2 + 36) = 0;
  *(float *)(a2 + 44) = -(float)(*(float *)v10.i32 * v27);
  *(float *)v10.i32 = v20 - *(float *)v10.i32;
  v28 = sqrtf(v19 + (float)(*(float *)v10.i32 * *(float *)v10.i32));
  *(float *)v10.i32 = -*(float *)v10.i32;
  v29 = vbslq_s8(v21, a6, v10);
  *(float *)v29.i32 = (float)(*(float *)v29.i32 * (float)(*(float *)&v18 - *(float *)&v17)) / v28;
  v29.i32[0] = vbslq_s8(v21, a6, v29).i32[0];
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = v29.i32[0];
  *(_DWORD *)(a2 + 56) = 0;
  *(float *)(a2 + 60) = -(float)(*(float *)&v16 * *(float *)v29.i32);
  *(float *)&v16 = 1.0
                 / sqrtf((float)(*(float *)a4.i32 * *(float *)a4.i32) + (float)(*(float *)v12.i32 * *(float *)v12.i32));
  *(float *)a9.i32 = (float)-(float)(*(float *)v12.i32 * v22) * *(float *)&v16;
  v30 = *(float *)vbslq_s8(v21, a6, a9).i32;
  *(_QWORD *)(a2 + 64) = 0;
  *(float *)(a2 + 72) = v30;
  *(float *)(a2 + 76) = -(float)(*(float *)&v18 * v30);
  *(float *)a4.i32 = (float)(*(float *)a4.i32 * v24) * *(float *)&v16;
  v31 = *(float *)vbslq_s8(v21, a6, a4).i32;
  *(_QWORD *)(a2 + 80) = 0;
  result = -(float)(*(float *)&v17 * v31);
  *(float *)(a2 + 88) = v31;
  *(float *)(a2 + 92) = result;
  return result;
}

void altitude::util::createFallbackElement(_QWORD *a1, uint64_t *a2, double *a3)
{
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string::value_type *v12;
  std::string::size_type size;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  altitude::Renderable *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  ggl::Flyover::FlyoverPipelineSetup *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  altitude::Renderable *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  unsigned __int8 v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _DWORD *v151;
  altitude::Renderable *v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  ggl::FlyoverNight::FlyoverPipelineSetup *v159;
  _QWORD *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  _DWORD *v214;
  altitude::Renderable *v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  ggl::FlyoverBorder::FlyoverBorderPipelineSetup *v222;
  _QWORD *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  _DWORD *v277;
  _QWORD *v278;
  unint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _DWORD *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  _DWORD *v287;
  _QWORD *v288;
  unint64_t v289;
  _DWORD *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  _DWORD *v298;
  _QWORD *v299;
  unint64_t v300;
  _DWORD *v301;
  unint64_t v302;
  uint64_t v303;
  void (**v304)(altitude::FlyoverNightRenderable *__hidden);
  _QWORD *v305;
  unint64_t v306;
  _DWORD *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _DWORD *v311;
  _QWORD *v312;
  unint64_t v313;
  _DWORD *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  _DWORD *v322;
  _QWORD *v323;
  unint64_t v324;
  _DWORD *v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  _DWORD *v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _DWORD *v333;
  _QWORD *v334;
  unint64_t v335;
  _DWORD *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  _DWORD *v344;
  _QWORD *v345;
  unint64_t v346;
  _DWORD *v347;
  unint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  _DWORD *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _DWORD *v355;
  _QWORD *v356;
  unint64_t v357;
  _DWORD *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  _DWORD *v366;
  _QWORD *v367;
  unint64_t v368;
  _DWORD *v369;
  unint64_t v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  float v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  float v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  float v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  float v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  float v434;
  double v435;
  double v436;
  double v437;
  double v438;
  unsigned __int8 v439;
  unsigned __int8 v440;
  unsigned __int8 v441;
  std::string __dst;
  char v444;
  std::string *v445;

  v5 = (const char *)(*a2 + 8);
  if (*(char *)(*a2 + 31) < 0)
    v5 = *(const char **)v5;
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, "/ClippedElement", 0xFuLL);
  v12 = (std::string::value_type *)v11->__r_.__value_.__r.__words[0];
  size = v11->__r_.__value_.__l.__size_;
  LODWORD(v445) = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v445 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v15 = (char *)operator new(0xA8uLL);
  v16 = v15;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E42E6140;
  *((_QWORD *)v15 + 3) = off_1E42BE278;
  v17 = v15 + 24;
  if (v14 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v15 + 32), v12, size);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v12;
    *((_QWORD *)v15 + 5) = size;
    *((_DWORD *)v15 + 12) = (_DWORD)v445;
    *(_DWORD *)(v15 + 51) = *(_DWORD *)((char *)&v445 + 3);
    v15[55] = v14;
  }
  *((_QWORD *)v16 + 3) = &off_1E42C4580;
  *((_QWORD *)v16 + 7) = 0;
  v16[64] = 1;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *((_QWORD *)v16 + 17) = 0;
  v16[144] = 1;
  *((_QWORD *)v16 + 19) = 0;
  *((_QWORD *)v16 + 20) = 0;
  *a1 = v17;
  a1[1] = v16;
  if (v14 < 0)
  {
    operator delete(v12);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_16:
  v18 = *a2;
  if (v16 + 24 != (char *)*a2)
  {
    std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__assign_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>((uint64_t)(v16 + 120), *(uint64_t **)(v18 + 96), *(uint64_t **)(v18 + 104), (uint64_t)(*(_QWORD *)(v18 + 104) - *(_QWORD *)(v18 + 96)) >> 4);
    v18 = *a2;
  }
  if (v16 + 24 != (char *)v18)
  {
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)(v16 + 96), *(uint64_t **)(v18 + 72), *(uint64_t **)(v18 + 80), (uint64_t)(*(_QWORD *)(v18 + 80) - *(_QWORD *)(v18 + 72)) >> 4);
    v18 = *a2;
  }
  v20 = v18 + 48;
  v19 = *(_QWORD *)(v18 + 48);
  if (*(_QWORD *)(v20 + 8) != v19)
  {
    v21 = 0;
    while (2)
    {
      v22 = *(_QWORD *)(v19 + 8 * v21);
      v23 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      switch(*(_DWORD *)(v22 + 160))
      {
        case 0:
        case 4:
        case 5:
        case 6:
          goto LABEL_23;
        case 1:
          v24 = operator new();
          v25 = altitude::Renderable::Renderable((altitude::Renderable *)v24, (const altitude::Renderable *)v22);
          *(_QWORD *)v25 = &off_1E42C5B58;
          *((_QWORD *)v25 + 35) = *(_QWORD *)(v22 + 280);
          v26 = *(_QWORD *)(v22 + 288);
          *((_QWORD *)v25 + 36) = v26;
          if (v26)
          {
            v27 = (unint64_t *)(v26 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          *(_QWORD *)(v24 + 296) = *(_QWORD *)(v22 + 296);
          v29 = *(_QWORD *)(v22 + 304);
          *(_QWORD *)(v24 + 304) = v29;
          if (v29)
          {
            v30 = (unint64_t *)(v29 + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          *(_BYTE *)(v24 + 312) = *(_BYTE *)(v22 + 312);
          v32 = (ggl::Flyover::FlyoverPipelineSetup *)operator new();
          ggl::Flyover::FlyoverPipelineSetup::FlyoverPipelineSetup(v32);
          v33 = (_QWORD *)operator new();
          *v33 = &off_1E42E7D08;
          v33[1] = 0;
          v33[2] = 0;
          v33[3] = v32;
          v34 = *(std::__shared_weak_count **)(v24 + 200);
          *(_QWORD *)(v24 + 192) = v32;
          *(_QWORD *)(v24 + 200) = v33;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v37 = *(_QWORD *)(v22 + 192);
          v38 = *(_QWORD *)(v24 + 192);
          v39 = *(_QWORD **)(v38 + 64);
          *v39 = **(_QWORD **)(v37 + 64);
          v39[1] = 0;
          v40 = *(_QWORD **)(v38 + 160);
          v41 = (std::__shared_weak_count *)v40[1];
          *v40 = 0;
          v40[1] = 0;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v44->__shared_owners_ = 0;
          v45 = (unint64_t *)&v44->__shared_owners_;
          v44->__shared_weak_owners_ = 0;
          v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
          v46 = ggl::BufferData::BufferData((uint64_t)&v44[1], qword_1EE550AB8, 2, 1, 6, 1);
          v44[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
          v44[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
          v47 = *(_QWORD *)(v38 + 64);
          *(_QWORD *)(v47 + 16) = v46;
          *(_QWORD *)(v47 + 24) = 0;
          v48 = *(_QWORD *)(v38 + 160);
          do
            v49 = __ldxr(v45);
          while (__stxr(v49 + 1, v45));
          v50 = *(std::__shared_weak_count **)(v48 + 24);
          *(_QWORD *)(v48 + 16) = v46;
          *(_QWORD *)(v48 + 24) = v44;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          do
            v53 = __ldaxr(v45);
          while (__stlxr(v53 - 1, v45));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          v54 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v54->__shared_owners_ = 0;
          v55 = (unint64_t *)&v54->__shared_owners_;
          v54->__shared_weak_owners_ = 0;
          v54->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
          v56 = ggl::BufferData::BufferData((uint64_t)&v54[1], qword_1EE550C18, 2, 1, 6, 1);
          v54[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
          v54[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
          v57 = *(_QWORD *)(v38 + 64);
          *(_QWORD *)(v57 + 32) = v56;
          *(_QWORD *)(v57 + 40) = 0;
          v58 = *(_QWORD *)(v38 + 160);
          do
            v59 = __ldxr(v55);
          while (__stxr(v59 + 1, v55));
          v60 = *(std::__shared_weak_count **)(v58 + 40);
          *(_QWORD *)(v58 + 32) = v56;
          *(_QWORD *)(v58 + 40) = v54;
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          do
            v63 = __ldaxr(v55);
          while (__stlxr(v63 - 1, v55));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
          v64 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v64->__shared_owners_ = 0;
          v65 = (unint64_t *)&v64->__shared_owners_;
          v64->__shared_weak_owners_ = 0;
          v64->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
          v66 = ggl::BufferData::BufferData((uint64_t)&v64[1], qword_1EE550B78, 2, 1, 6, 1);
          v64[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
          v64[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
          v67 = *(_QWORD *)(v38 + 64);
          *(_QWORD *)(v67 + 48) = v66;
          *(_QWORD *)(v67 + 56) = 0;
          v68 = *(_QWORD *)(v38 + 160);
          do
            v69 = __ldxr(v65);
          while (__stxr(v69 + 1, v65));
          v70 = *(std::__shared_weak_count **)(v68 + 56);
          *(_QWORD *)(v68 + 48) = v66;
          *(_QWORD *)(v68 + 56) = v64;
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          do
            v73 = __ldaxr(v65);
          while (__stlxr(v73 - 1, v65));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          v74 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v74->__shared_owners_ = 0;
          v75 = (unint64_t *)&v74->__shared_owners_;
          v74->__shared_weak_owners_ = 0;
          v74->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
          v76 = ggl::BufferData::BufferData((uint64_t)&v74[1], qword_1EE550BD8, 2, 1, 6, 1);
          v74[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          v74[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
          v77 = *(_QWORD *)(v38 + 64);
          *(_QWORD *)(v77 + 64) = v76;
          *(_QWORD *)(v77 + 72) = 0;
          v78 = *(_QWORD *)(v38 + 160);
          do
            v79 = __ldxr(v75);
          while (__stxr(v79 + 1, v75));
          v80 = *(std::__shared_weak_count **)(v78 + 72);
          *(_QWORD *)(v78 + 64) = v76;
          *(_QWORD *)(v78 + 72) = v74;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          do
            v83 = __ldaxr(v75);
          while (__stlxr(v83 - 1, v75));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
          **(_QWORD **)(v38 + 96) = **(_QWORD **)(v37 + 96);
          v84 = *(_QWORD *)(*(_QWORD *)(v37 + 64) + 16);
          v85 = *(_QWORD *)(v84 + 8);
          if ((*(_BYTE *)(v84 + 16) & 2) == 0)
          {
            v86 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v86 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v85)
            v87 = *(_DWORD **)(v84 + 72);
          else
            v87 = 0;
          v281 = *(_QWORD **)(*(_QWORD *)(v38 + 64) + 16);
          v282 = v281[1];
          if (v282)
            v283 = (_DWORD *)v281[9];
          else
            v283 = 0;
          *v283 = *v87;
          v283[1] = v87[1];
          v283[2] = v87[2];
          v283[3] = v87[3];
          v283[4] = v87[4];
          v283[5] = v87[5];
          v283[6] = v87[6];
          v283[7] = v87[7];
          v283[8] = v87[8];
          v283[9] = v87[9];
          v283[10] = v87[10];
          v283[11] = v87[11];
          v283[12] = v87[12];
          v283[13] = v87[13];
          v283[14] = v87[14];
          v283[15] = v87[15];
          v283[16] = v87[16];
          v283[17] = v87[17];
          v283[18] = v87[18];
          v283[19] = v87[19];
          v283[20] = v87[20];
          v283[21] = v87[21];
          v283[22] = v87[22];
          v283[23] = v87[23];
          v283[24] = v87[24];
          v283[25] = v87[25];
          v283[26] = v87[26];
          v283[27] = v87[27];
          v283[28] = v87[28];
          v283[29] = v87[29];
          v283[30] = v87[30];
          v283[31] = v87[31];
          if (v283 && v282)
          {
            if (v281[8] > v282)
              v282 = v281[8];
            v281[7] = 0;
            v281[8] = v282;
          }
          v284 = *(_QWORD *)(*(_QWORD *)(v37 + 64) + 32);
          v285 = *(_QWORD *)(v284 + 8);
          if ((*(_BYTE *)(v284 + 16) & 2) == 0)
          {
            v286 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v286 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v285)
            v287 = *(_DWORD **)(v284 + 72);
          else
            v287 = 0;
          v288 = *(_QWORD **)(*(_QWORD *)(v38 + 64) + 32);
          v289 = v288[1];
          if (v289)
            v290 = (_DWORD *)v288[9];
          else
            v290 = 0;
          *v290 = *v287;
          v290[1] = v287[1];
          v290[2] = v287[2];
          v290[3] = v287[3];
          v290[4] = v287[4];
          v290[5] = v287[5];
          v290[6] = v287[6];
          v290[7] = v287[7];
          v290[8] = v287[8];
          v290[9] = v287[9];
          v290[10] = v287[10];
          v290[11] = v287[11];
          v290[12] = v287[12];
          v290[13] = v287[13];
          v290[14] = v287[14];
          v290[15] = v287[15];
          v290[16] = v287[16];
          v290[17] = v287[17];
          v290[18] = v287[18];
          v290[19] = v287[19];
          v290[20] = v287[20];
          v290[21] = v287[21];
          v290[22] = v287[22];
          v290[23] = v287[23];
          if (v290 && v289)
          {
            if (v288[8] > v289)
              v289 = v288[8];
            v288[7] = 0;
            v288[8] = v289;
          }
          v291 = *(_QWORD *)(*(_QWORD *)(v37 + 64) + 48);
          if ((*(_BYTE *)(v291 + 16) & 2) == 0)
          {
            v292 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v292 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v293 = *(_QWORD *)(*(_QWORD *)(v38 + 64) + 48);
          v294 = *(_QWORD *)(v293 + 8);
          **(_DWORD **)(v293 + 72) = **(_DWORD **)(v291 + 72);
          v295 = *(_QWORD *)(v293 + 64);
          if (v295 <= v294)
            v295 = v294;
          *(_QWORD *)(v293 + 56) = 0;
          *(_QWORD *)(v293 + 64) = v295;
          v296 = *(_QWORD *)(*(_QWORD *)(v37 + 64) + 64);
          if ((*(_BYTE *)(v296 + 16) & 2) == 0)
          {
            v297 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v297 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v298 = *(_DWORD **)(v296 + 72);
          v299 = *(_QWORD **)(*(_QWORD *)(v38 + 64) + 64);
          v300 = v299[1];
          v301 = (_DWORD *)v299[9];
          *v301 = *v298;
          v301[1] = v298[1];
          v301[2] = v298[2];
          v301[3] = v298[3];
          v302 = v299[8];
          if (v302 <= v300)
            v302 = v300;
          v299[7] = 0;
          v299[8] = v302;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 64) = *(_QWORD *)(v24 + 216);
          v303 = *(_QWORD *)(v24 + 192);
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 32) = v303;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 24) = *(_QWORD *)(v24 + 208);
          v304 = &off_1E42C4E60;
          goto LABEL_408;
        case 2:
          v24 = operator new();
          v152 = altitude::Renderable::Renderable((altitude::Renderable *)v24, (const altitude::Renderable *)v22);
          *(_QWORD *)v152 = &off_1E42C5C08;
          *((_QWORD *)v152 + 35) = *(_QWORD *)(v22 + 280);
          v153 = *(_QWORD *)(v22 + 288);
          *((_QWORD *)v152 + 36) = v153;
          if (v153)
          {
            v154 = (unint64_t *)(v153 + 8);
            do
              v155 = __ldxr(v154);
            while (__stxr(v155 + 1, v154));
          }
          *(_QWORD *)(v24 + 296) = *(_QWORD *)(v22 + 296);
          v156 = *(_QWORD *)(v22 + 304);
          *(_QWORD *)(v24 + 304) = v156;
          if (v156)
          {
            v157 = (unint64_t *)(v156 + 8);
            do
              v158 = __ldxr(v157);
            while (__stxr(v158 + 1, v157));
          }
          *(_BYTE *)(v24 + 312) = *(_BYTE *)(v22 + 312);
          v159 = (ggl::FlyoverNight::FlyoverPipelineSetup *)operator new();
          ggl::FlyoverNight::FlyoverPipelineSetup::FlyoverPipelineSetup(v159);
          v160 = (_QWORD *)operator new();
          *v160 = &off_1E42E7720;
          v160[1] = 0;
          v160[2] = 0;
          v160[3] = v159;
          v161 = *(std::__shared_weak_count **)(v24 + 200);
          *(_QWORD *)(v24 + 192) = v159;
          *(_QWORD *)(v24 + 200) = v160;
          if (v161)
          {
            v162 = (unint64_t *)&v161->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          v164 = *(_QWORD *)(v22 + 192);
          v165 = *(_QWORD *)(v24 + 192);
          v166 = *(_QWORD **)(v165 + 64);
          *v166 = **(_QWORD **)(v164 + 64);
          v166[1] = 0;
          v167 = *(_QWORD **)(v165 + 160);
          v168 = (std::__shared_weak_count *)v167[1];
          *v167 = 0;
          v167[1] = 0;
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          v171 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v171->__shared_owners_ = 0;
          v172 = (unint64_t *)&v171->__shared_owners_;
          v171->__shared_weak_owners_ = 0;
          v171->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
          v173 = ggl::BufferData::BufferData((uint64_t)&v171[1], qword_1EE550AB8, 2, 1, 6, 1);
          v171[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
          v171[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
          v174 = *(_QWORD *)(v165 + 64);
          *(_QWORD *)(v174 + 16) = v173;
          *(_QWORD *)(v174 + 24) = 0;
          v175 = *(_QWORD *)(v165 + 160);
          do
            v176 = __ldxr(v172);
          while (__stxr(v176 + 1, v172));
          v177 = *(std::__shared_weak_count **)(v175 + 24);
          *(_QWORD *)(v175 + 16) = v173;
          *(_QWORD *)(v175 + 24) = v171;
          if (v177)
          {
            v178 = (unint64_t *)&v177->__shared_owners_;
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          do
            v180 = __ldaxr(v172);
          while (__stlxr(v180 - 1, v172));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
          v181 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v181->__shared_owners_ = 0;
          v182 = (unint64_t *)&v181->__shared_owners_;
          v181->__shared_weak_owners_ = 0;
          v181->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
          v183 = ggl::BufferData::BufferData((uint64_t)&v181[1], qword_1EE550C18, 2, 1, 6, 1);
          v181[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
          v181[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
          v184 = *(_QWORD *)(v165 + 64);
          *(_QWORD *)(v184 + 32) = v183;
          *(_QWORD *)(v184 + 40) = 0;
          v185 = *(_QWORD *)(v165 + 160);
          do
            v186 = __ldxr(v182);
          while (__stxr(v186 + 1, v182));
          v187 = *(std::__shared_weak_count **)(v185 + 40);
          *(_QWORD *)(v185 + 32) = v183;
          *(_QWORD *)(v185 + 40) = v181;
          if (v187)
          {
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          do
            v190 = __ldaxr(v182);
          while (__stlxr(v190 - 1, v182));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
          v191 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v191->__shared_owners_ = 0;
          v192 = (unint64_t *)&v191->__shared_owners_;
          v191->__shared_weak_owners_ = 0;
          v191->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
          v193 = ggl::BufferData::BufferData((uint64_t)&v191[1], qword_1EE550B78, 2, 1, 6, 1);
          v191[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
          v191[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
          v194 = *(_QWORD *)(v165 + 64);
          *(_QWORD *)(v194 + 48) = v193;
          *(_QWORD *)(v194 + 56) = 0;
          v195 = *(_QWORD *)(v165 + 160);
          do
            v196 = __ldxr(v192);
          while (__stxr(v196 + 1, v192));
          v197 = *(std::__shared_weak_count **)(v195 + 56);
          *(_QWORD *)(v195 + 48) = v193;
          *(_QWORD *)(v195 + 56) = v191;
          if (v197)
          {
            v198 = (unint64_t *)&v197->__shared_owners_;
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
              std::__shared_weak_count::__release_weak(v197);
            }
          }
          do
            v200 = __ldaxr(v192);
          while (__stlxr(v200 - 1, v192));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
          v201 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v201->__shared_owners_ = 0;
          v202 = (unint64_t *)&v201->__shared_owners_;
          v201->__shared_weak_owners_ = 0;
          v201->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
          v203 = ggl::BufferData::BufferData((uint64_t)&v201[1], qword_1EE550BD8, 2, 1, 6, 1);
          v201[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          v201[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
          v204 = *(_QWORD *)(v165 + 64);
          *(_QWORD *)(v204 + 64) = v203;
          *(_QWORD *)(v204 + 72) = 0;
          v205 = *(_QWORD *)(v165 + 160);
          do
            v206 = __ldxr(v202);
          while (__stxr(v206 + 1, v202));
          v207 = *(std::__shared_weak_count **)(v205 + 72);
          *(_QWORD *)(v205 + 64) = v203;
          *(_QWORD *)(v205 + 72) = v201;
          if (v207)
          {
            v208 = (unint64_t *)&v207->__shared_owners_;
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
          do
            v210 = __ldaxr(v202);
          while (__stlxr(v210 - 1, v202));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
          **(_QWORD **)(v165 + 96) = **(_QWORD **)(v164 + 96);
          v211 = *(_QWORD *)(*(_QWORD *)(v164 + 64) + 16);
          v212 = *(_QWORD *)(v211 + 8);
          if ((*(_BYTE *)(v211 + 16) & 2) == 0)
          {
            v213 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v213 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v212)
            v214 = *(_DWORD **)(v211 + 72);
          else
            v214 = 0;
          v327 = *(_QWORD **)(*(_QWORD *)(v165 + 64) + 16);
          v328 = v327[1];
          if (v328)
            v329 = (_DWORD *)v327[9];
          else
            v329 = 0;
          *v329 = *v214;
          v329[1] = v214[1];
          v329[2] = v214[2];
          v329[3] = v214[3];
          v329[4] = v214[4];
          v329[5] = v214[5];
          v329[6] = v214[6];
          v329[7] = v214[7];
          v329[8] = v214[8];
          v329[9] = v214[9];
          v329[10] = v214[10];
          v329[11] = v214[11];
          v329[12] = v214[12];
          v329[13] = v214[13];
          v329[14] = v214[14];
          v329[15] = v214[15];
          v329[16] = v214[16];
          v329[17] = v214[17];
          v329[18] = v214[18];
          v329[19] = v214[19];
          v329[20] = v214[20];
          v329[21] = v214[21];
          v329[22] = v214[22];
          v329[23] = v214[23];
          v329[24] = v214[24];
          v329[25] = v214[25];
          v329[26] = v214[26];
          v329[27] = v214[27];
          v329[28] = v214[28];
          v329[29] = v214[29];
          v329[30] = v214[30];
          v329[31] = v214[31];
          if (v329 && v328)
          {
            if (v327[8] > v328)
              v328 = v327[8];
            v327[7] = 0;
            v327[8] = v328;
          }
          v330 = *(_QWORD *)(*(_QWORD *)(v164 + 64) + 32);
          v331 = *(_QWORD *)(v330 + 8);
          if ((*(_BYTE *)(v330 + 16) & 2) == 0)
          {
            v332 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v332 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v331)
            v333 = *(_DWORD **)(v330 + 72);
          else
            v333 = 0;
          v334 = *(_QWORD **)(*(_QWORD *)(v165 + 64) + 32);
          v335 = v334[1];
          if (v335)
            v336 = (_DWORD *)v334[9];
          else
            v336 = 0;
          *v336 = *v333;
          v336[1] = v333[1];
          v336[2] = v333[2];
          v336[3] = v333[3];
          v336[4] = v333[4];
          v336[5] = v333[5];
          v336[6] = v333[6];
          v336[7] = v333[7];
          v336[8] = v333[8];
          v336[9] = v333[9];
          v336[10] = v333[10];
          v336[11] = v333[11];
          v336[12] = v333[12];
          v336[13] = v333[13];
          v336[14] = v333[14];
          v336[15] = v333[15];
          v336[16] = v333[16];
          v336[17] = v333[17];
          v336[18] = v333[18];
          v336[19] = v333[19];
          v336[20] = v333[20];
          v336[21] = v333[21];
          v336[22] = v333[22];
          v336[23] = v333[23];
          if (v336 && v335)
          {
            if (v334[8] > v335)
              v335 = v334[8];
            v334[7] = 0;
            v334[8] = v335;
          }
          v337 = *(_QWORD *)(*(_QWORD *)(v164 + 64) + 48);
          if ((*(_BYTE *)(v337 + 16) & 2) == 0)
          {
            v338 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v338 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v339 = *(_QWORD *)(*(_QWORD *)(v165 + 64) + 48);
          v340 = *(_QWORD *)(v339 + 8);
          **(_DWORD **)(v339 + 72) = **(_DWORD **)(v337 + 72);
          v341 = *(_QWORD *)(v339 + 64);
          if (v341 <= v340)
            v341 = v340;
          *(_QWORD *)(v339 + 56) = 0;
          *(_QWORD *)(v339 + 64) = v341;
          v342 = *(_QWORD *)(*(_QWORD *)(v164 + 64) + 64);
          if ((*(_BYTE *)(v342 + 16) & 2) == 0)
          {
            v343 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v343 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v344 = *(_DWORD **)(v342 + 72);
          v345 = *(_QWORD **)(*(_QWORD *)(v165 + 64) + 64);
          v346 = v345[1];
          v347 = (_DWORD *)v345[9];
          *v347 = *v344;
          v347[1] = v344[1];
          v347[2] = v344[2];
          v347[3] = v344[3];
          v348 = v345[8];
          if (v348 <= v346)
            v348 = v346;
          v345[7] = 0;
          v345[8] = v348;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 64) = *(_QWORD *)(v24 + 216);
          v303 = *(_QWORD *)(v24 + 192);
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 32) = v303;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 24) = *(_QWORD *)(v24 + 208);
          v304 = &off_1E42C5ED8;
          goto LABEL_408;
        case 3:
          v24 = operator new();
          v215 = altitude::Renderable::Renderable((altitude::Renderable *)v24, (const altitude::Renderable *)v22);
          *(_QWORD *)v215 = &off_1E42C5C60;
          *((_QWORD *)v215 + 35) = *(_QWORD *)(v22 + 280);
          v216 = *(_QWORD *)(v22 + 288);
          *((_QWORD *)v215 + 36) = v216;
          if (v216)
          {
            v217 = (unint64_t *)(v216 + 8);
            do
              v218 = __ldxr(v217);
            while (__stxr(v218 + 1, v217));
          }
          *(_QWORD *)(v24 + 296) = *(_QWORD *)(v22 + 296);
          v219 = *(_QWORD *)(v22 + 304);
          *(_QWORD *)(v24 + 304) = v219;
          if (v219)
          {
            v220 = (unint64_t *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          *(_BYTE *)(v24 + 312) = *(_BYTE *)(v22 + 312);
          v222 = (ggl::FlyoverBorder::FlyoverBorderPipelineSetup *)operator new();
          ggl::FlyoverBorder::FlyoverBorderPipelineSetup::FlyoverBorderPipelineSetup(v222);
          v223 = (_QWORD *)operator new();
          *v223 = &off_1E42E7838;
          v223[1] = 0;
          v223[2] = 0;
          v223[3] = v222;
          v224 = *(std::__shared_weak_count **)(v24 + 200);
          *(_QWORD *)(v24 + 192) = v222;
          *(_QWORD *)(v24 + 200) = v223;
          if (v224)
          {
            v225 = (unint64_t *)&v224->__shared_owners_;
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
          v227 = *(_QWORD *)(v22 + 192);
          v228 = *(_QWORD *)(v24 + 192);
          v229 = *(_QWORD **)(v228 + 64);
          *v229 = **(_QWORD **)(v227 + 64);
          v229[1] = 0;
          v230 = *(_QWORD **)(v228 + 160);
          v231 = (std::__shared_weak_count *)v230[1];
          *v230 = 0;
          v230[1] = 0;
          if (v231)
          {
            v232 = (unint64_t *)&v231->__shared_owners_;
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
            if (!v233)
            {
              ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
              std::__shared_weak_count::__release_weak(v231);
            }
          }
          v234 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v234->__shared_owners_ = 0;
          v235 = (unint64_t *)&v234->__shared_owners_;
          v234->__shared_weak_owners_ = 0;
          v234->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
          v236 = ggl::BufferData::BufferData((uint64_t)&v234[1], qword_1EE550AB8, 2, 1, 6, 1);
          v234[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
          v234[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
          v237 = *(_QWORD *)(v228 + 64);
          *(_QWORD *)(v237 + 16) = v236;
          *(_QWORD *)(v237 + 24) = 0;
          v238 = *(_QWORD *)(v228 + 160);
          do
            v239 = __ldxr(v235);
          while (__stxr(v239 + 1, v235));
          v240 = *(std::__shared_weak_count **)(v238 + 24);
          *(_QWORD *)(v238 + 16) = v236;
          *(_QWORD *)(v238 + 24) = v234;
          if (v240)
          {
            v241 = (unint64_t *)&v240->__shared_owners_;
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
              std::__shared_weak_count::__release_weak(v240);
            }
          }
          do
            v243 = __ldaxr(v235);
          while (__stlxr(v243 - 1, v235));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
            std::__shared_weak_count::__release_weak(v234);
          }
          v244 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v244->__shared_owners_ = 0;
          v245 = (unint64_t *)&v244->__shared_owners_;
          v244->__shared_weak_owners_ = 0;
          v244->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
          v246 = ggl::BufferData::BufferData((uint64_t)&v244[1], qword_1EE550C18, 2, 1, 6, 1);
          v244[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
          v244[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
          v247 = *(_QWORD *)(v228 + 64);
          *(_QWORD *)(v247 + 32) = v246;
          *(_QWORD *)(v247 + 40) = 0;
          v248 = *(_QWORD *)(v228 + 160);
          do
            v249 = __ldxr(v245);
          while (__stxr(v249 + 1, v245));
          v250 = *(std::__shared_weak_count **)(v248 + 40);
          *(_QWORD *)(v248 + 32) = v246;
          *(_QWORD *)(v248 + 40) = v244;
          if (v250)
          {
            v251 = (unint64_t *)&v250->__shared_owners_;
            do
              v252 = __ldaxr(v251);
            while (__stlxr(v252 - 1, v251));
            if (!v252)
            {
              ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
              std::__shared_weak_count::__release_weak(v250);
            }
          }
          do
            v253 = __ldaxr(v245);
          while (__stlxr(v253 - 1, v245));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
          v254 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v254->__shared_owners_ = 0;
          v255 = (unint64_t *)&v254->__shared_owners_;
          v254->__shared_weak_owners_ = 0;
          v254->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
          v256 = ggl::BufferData::BufferData((uint64_t)&v254[1], qword_1EE550B78, 2, 1, 6, 1);
          v254[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
          v254[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
          v257 = *(_QWORD *)(v228 + 64);
          *(_QWORD *)(v257 + 48) = v256;
          *(_QWORD *)(v257 + 56) = 0;
          v258 = *(_QWORD *)(v228 + 160);
          do
            v259 = __ldxr(v255);
          while (__stxr(v259 + 1, v255));
          v260 = *(std::__shared_weak_count **)(v258 + 56);
          *(_QWORD *)(v258 + 48) = v256;
          *(_QWORD *)(v258 + 56) = v254;
          if (v260)
          {
            v261 = (unint64_t *)&v260->__shared_owners_;
            do
              v262 = __ldaxr(v261);
            while (__stlxr(v262 - 1, v261));
            if (!v262)
            {
              ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
              std::__shared_weak_count::__release_weak(v260);
            }
          }
          do
            v263 = __ldaxr(v255);
          while (__stlxr(v263 - 1, v255));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
          v264 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v264->__shared_owners_ = 0;
          v265 = (unint64_t *)&v264->__shared_owners_;
          v264->__shared_weak_owners_ = 0;
          v264->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
          v266 = ggl::BufferData::BufferData((uint64_t)&v264[1], qword_1EE550BD8, 2, 1, 6, 1);
          v264[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          v264[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
          v267 = *(_QWORD *)(v228 + 64);
          *(_QWORD *)(v267 + 64) = v266;
          *(_QWORD *)(v267 + 72) = 0;
          v268 = *(_QWORD *)(v228 + 160);
          do
            v269 = __ldxr(v265);
          while (__stxr(v269 + 1, v265));
          v270 = *(std::__shared_weak_count **)(v268 + 72);
          *(_QWORD *)(v268 + 64) = v266;
          *(_QWORD *)(v268 + 72) = v264;
          if (v270)
          {
            v271 = (unint64_t *)&v270->__shared_owners_;
            do
              v272 = __ldaxr(v271);
            while (__stlxr(v272 - 1, v271));
            if (!v272)
            {
              ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
              std::__shared_weak_count::__release_weak(v270);
            }
          }
          do
            v273 = __ldaxr(v265);
          while (__stlxr(v273 - 1, v265));
          if (!v273)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
          **(_QWORD **)(v228 + 96) = **(_QWORD **)(v227 + 96);
          v274 = *(_QWORD *)(*(_QWORD *)(v227 + 64) + 16);
          v275 = *(_QWORD *)(v274 + 8);
          if ((*(_BYTE *)(v274 + 16) & 2) == 0)
          {
            v276 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v276 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v275)
            v277 = *(_DWORD **)(v274 + 72);
          else
            v277 = 0;
          v349 = *(_QWORD **)(*(_QWORD *)(v228 + 64) + 16);
          v350 = v349[1];
          if (v350)
            v351 = (_DWORD *)v349[9];
          else
            v351 = 0;
          *v351 = *v277;
          v351[1] = v277[1];
          v351[2] = v277[2];
          v351[3] = v277[3];
          v351[4] = v277[4];
          v351[5] = v277[5];
          v351[6] = v277[6];
          v351[7] = v277[7];
          v351[8] = v277[8];
          v351[9] = v277[9];
          v351[10] = v277[10];
          v351[11] = v277[11];
          v351[12] = v277[12];
          v351[13] = v277[13];
          v351[14] = v277[14];
          v351[15] = v277[15];
          v351[16] = v277[16];
          v351[17] = v277[17];
          v351[18] = v277[18];
          v351[19] = v277[19];
          v351[20] = v277[20];
          v351[21] = v277[21];
          v351[22] = v277[22];
          v351[23] = v277[23];
          v351[24] = v277[24];
          v351[25] = v277[25];
          v351[26] = v277[26];
          v351[27] = v277[27];
          v351[28] = v277[28];
          v351[29] = v277[29];
          v351[30] = v277[30];
          v351[31] = v277[31];
          if (v351 && v350)
          {
            if (v349[8] > v350)
              v350 = v349[8];
            v349[7] = 0;
            v349[8] = v350;
          }
          v352 = *(_QWORD *)(*(_QWORD *)(v227 + 64) + 32);
          v353 = *(_QWORD *)(v352 + 8);
          if ((*(_BYTE *)(v352 + 16) & 2) == 0)
          {
            v354 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v354 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v353)
            v355 = *(_DWORD **)(v352 + 72);
          else
            v355 = 0;
          v356 = *(_QWORD **)(*(_QWORD *)(v228 + 64) + 32);
          v357 = v356[1];
          if (v357)
            v358 = (_DWORD *)v356[9];
          else
            v358 = 0;
          *v358 = *v355;
          v358[1] = v355[1];
          v358[2] = v355[2];
          v358[3] = v355[3];
          v358[4] = v355[4];
          v358[5] = v355[5];
          v358[6] = v355[6];
          v358[7] = v355[7];
          v358[8] = v355[8];
          v358[9] = v355[9];
          v358[10] = v355[10];
          v358[11] = v355[11];
          v358[12] = v355[12];
          v358[13] = v355[13];
          v358[14] = v355[14];
          v358[15] = v355[15];
          v358[16] = v355[16];
          v358[17] = v355[17];
          v358[18] = v355[18];
          v358[19] = v355[19];
          v358[20] = v355[20];
          v358[21] = v355[21];
          v358[22] = v355[22];
          v358[23] = v355[23];
          if (v358 && v357)
          {
            if (v356[8] > v357)
              v357 = v356[8];
            v356[7] = 0;
            v356[8] = v357;
          }
          v359 = *(_QWORD *)(*(_QWORD *)(v227 + 64) + 48);
          if ((*(_BYTE *)(v359 + 16) & 2) == 0)
          {
            v360 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v360 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v361 = *(_QWORD *)(*(_QWORD *)(v228 + 64) + 48);
          v362 = *(_QWORD *)(v361 + 8);
          **(_DWORD **)(v361 + 72) = **(_DWORD **)(v359 + 72);
          v363 = *(_QWORD *)(v361 + 64);
          if (v363 <= v362)
            v363 = v362;
          *(_QWORD *)(v361 + 56) = 0;
          *(_QWORD *)(v361 + 64) = v363;
          v364 = *(_QWORD *)(*(_QWORD *)(v227 + 64) + 64);
          if ((*(_BYTE *)(v364 + 16) & 2) == 0)
          {
            v365 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v365 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v366 = *(_DWORD **)(v364 + 72);
          v367 = *(_QWORD **)(*(_QWORD *)(v228 + 64) + 64);
          v368 = v367[1];
          v369 = (_DWORD *)v367[9];
          *v369 = *v366;
          v369[1] = v366[1];
          v369[2] = v366[2];
          v369[3] = v366[3];
          v370 = v367[8];
          if (v370 <= v368)
            v370 = v368;
          v367[7] = 0;
          v367[8] = v370;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 64) = *(_QWORD *)(v24 + 216);
          v303 = *(_QWORD *)(v24 + 192);
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 32) = v303;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 24) = *(_QWORD *)(v24 + 208);
          v304 = &off_1E42C6100;
          goto LABEL_408;
        case 7:
          v24 = operator new();
          v88 = altitude::Renderable::Renderable((altitude::Renderable *)v24, (const altitude::Renderable *)v22);
          *(_QWORD *)v88 = &off_1E42C5CB8;
          *((_QWORD *)v88 + 35) = *(_QWORD *)(v22 + 280);
          v89 = *(_QWORD *)(v22 + 288);
          *((_QWORD *)v88 + 36) = v89;
          if (v89)
          {
            v90 = (unint64_t *)(v89 + 8);
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
          }
          *(_QWORD *)(v24 + 296) = *(_QWORD *)(v22 + 296);
          v92 = *(_QWORD *)(v22 + 304);
          *(_QWORD *)(v24 + 304) = v92;
          if (v92)
          {
            v93 = (unint64_t *)(v92 + 8);
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
          *(_BYTE *)(v24 + 312) = *(_BYTE *)(v22 + 312);
          v95 = (_QWORD *)operator new();
          if ((v96 & 1) == 0
          {
            if ((v439 & 1) == 0
            {
              if ((v441 & 1) == 0
              {
                ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
              }
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
              *(_QWORD *)algn_1EE585510 = 1;
            }
            ggl::FlyoverMasked::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
            unk_1EE575F10 = &ggl::FlyoverMasked::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
            qword_1EE575F18 = 0;
            if ((v440 & 1) == 0
            {
              ggl::FlyoverMasked::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
              *(_QWORD *)algn_1EE575F48 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
              qword_1EE575F50 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
              unk_1EE575F58 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
              qword_1EE575F60 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            }
            qword_1EE575F20 = (uint64_t)&ggl::FlyoverMasked::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
            *(_OWORD *)algn_1EE575F28 = xmmword_19FFB38C0;
          }
          ggl::PipelineSetup::PipelineSetup((uint64_t)v95, (uint64_t)&ggl::FlyoverMasked::FlyoverPipelineSetup::typedReflection(void)::ref);
          *v95 = &off_1E42B6540;
          v97 = (_QWORD *)operator new();
          *v97 = &off_1E42E7870;
          v97[1] = 0;
          v97[2] = 0;
          v97[3] = v95;
          v98 = *(std::__shared_weak_count **)(v24 + 200);
          *(_QWORD *)(v24 + 192) = v95;
          *(_QWORD *)(v24 + 200) = v97;
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = *(_QWORD *)(v22 + 192);
          v102 = *(_QWORD *)(v24 + 192);
          v103 = *(_QWORD **)(v102 + 64);
          *v103 = **(_QWORD **)(v101 + 64);
          v103[1] = 0;
          v104 = *(_QWORD **)(v102 + 160);
          v105 = (std::__shared_weak_count *)v104[1];
          *v104 = 0;
          v104[1] = 0;
          if (v105)
          {
            v106 = (unint64_t *)&v105->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          v108 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v108->__shared_owners_ = 0;
          v109 = (unint64_t *)&v108->__shared_owners_;
          v108->__shared_weak_owners_ = 0;
          v108->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
          v110 = ggl::BufferData::BufferData((uint64_t)&v108[1], qword_1EE550AB8, 2, 1, 6, 1);
          v108[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
          v108[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
          v111 = *(_QWORD *)(v102 + 64);
          *(_QWORD *)(v111 + 16) = v110;
          *(_QWORD *)(v111 + 24) = 0;
          v112 = *(_QWORD *)(v102 + 160);
          do
            v113 = __ldxr(v109);
          while (__stxr(v113 + 1, v109));
          v114 = *(std::__shared_weak_count **)(v112 + 24);
          *(_QWORD *)(v112 + 16) = v110;
          *(_QWORD *)(v112 + 24) = v108;
          if (v114)
          {
            v115 = (unint64_t *)&v114->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          do
            v117 = __ldaxr(v109);
          while (__stlxr(v117 - 1, v109));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
          v118 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v118->__shared_owners_ = 0;
          v119 = (unint64_t *)&v118->__shared_owners_;
          v118->__shared_weak_owners_ = 0;
          v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
          v120 = ggl::BufferData::BufferData((uint64_t)&v118[1], qword_1EE550C18, 2, 1, 6, 1);
          v118[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
          v118[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
          v121 = *(_QWORD *)(v102 + 64);
          *(_QWORD *)(v121 + 32) = v120;
          *(_QWORD *)(v121 + 40) = 0;
          v122 = *(_QWORD *)(v102 + 160);
          do
            v123 = __ldxr(v119);
          while (__stxr(v123 + 1, v119));
          v124 = *(std::__shared_weak_count **)(v122 + 40);
          *(_QWORD *)(v122 + 32) = v120;
          *(_QWORD *)(v122 + 40) = v118;
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          do
            v127 = __ldaxr(v119);
          while (__stlxr(v127 - 1, v119));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
          v128 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v128->__shared_owners_ = 0;
          v129 = (unint64_t *)&v128->__shared_owners_;
          v128->__shared_weak_owners_ = 0;
          v128->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
          v130 = ggl::BufferData::BufferData((uint64_t)&v128[1], qword_1EE550B78, 2, 1, 6, 1);
          v128[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
          v128[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
          v131 = *(_QWORD *)(v102 + 64);
          *(_QWORD *)(v131 + 48) = v130;
          *(_QWORD *)(v131 + 56) = 0;
          v132 = *(_QWORD *)(v102 + 160);
          do
            v133 = __ldxr(v129);
          while (__stxr(v133 + 1, v129));
          v134 = *(std::__shared_weak_count **)(v132 + 56);
          *(_QWORD *)(v132 + 48) = v130;
          *(_QWORD *)(v132 + 56) = v128;
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          do
            v137 = __ldaxr(v129);
          while (__stlxr(v137 - 1, v129));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
          v138 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v138->__shared_owners_ = 0;
          v139 = (unint64_t *)&v138->__shared_owners_;
          v138->__shared_weak_owners_ = 0;
          v138->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
          v140 = ggl::BufferData::BufferData((uint64_t)&v138[1], qword_1EE550BD8, 2, 1, 6, 1);
          v138[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          v138[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
          v141 = *(_QWORD *)(v102 + 64);
          *(_QWORD *)(v141 + 64) = v140;
          *(_QWORD *)(v141 + 72) = 0;
          v142 = *(_QWORD *)(v102 + 160);
          do
            v143 = __ldxr(v139);
          while (__stxr(v143 + 1, v139));
          v144 = *(std::__shared_weak_count **)(v142 + 72);
          *(_QWORD *)(v142 + 64) = v140;
          *(_QWORD *)(v142 + 72) = v138;
          if (v144)
          {
            v145 = (unint64_t *)&v144->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          do
            v147 = __ldaxr(v139);
          while (__stlxr(v147 - 1, v139));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
          **(_QWORD **)(v102 + 96) = **(_QWORD **)(v101 + 96);
          v148 = *(_QWORD *)(*(_QWORD *)(v101 + 64) + 16);
          v149 = *(_QWORD *)(v148 + 8);
          if ((*(_BYTE *)(v148 + 16) & 2) == 0)
          {
            v150 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v150 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v149)
            v151 = *(_DWORD **)(v148 + 72);
          else
            v151 = 0;
          v305 = *(_QWORD **)(*(_QWORD *)(v102 + 64) + 16);
          v306 = v305[1];
          if (v306)
            v307 = (_DWORD *)v305[9];
          else
            v307 = 0;
          *v307 = *v151;
          v307[1] = v151[1];
          v307[2] = v151[2];
          v307[3] = v151[3];
          v307[4] = v151[4];
          v307[5] = v151[5];
          v307[6] = v151[6];
          v307[7] = v151[7];
          v307[8] = v151[8];
          v307[9] = v151[9];
          v307[10] = v151[10];
          v307[11] = v151[11];
          v307[12] = v151[12];
          v307[13] = v151[13];
          v307[14] = v151[14];
          v307[15] = v151[15];
          v307[16] = v151[16];
          v307[17] = v151[17];
          v307[18] = v151[18];
          v307[19] = v151[19];
          v307[20] = v151[20];
          v307[21] = v151[21];
          v307[22] = v151[22];
          v307[23] = v151[23];
          v307[24] = v151[24];
          v307[25] = v151[25];
          v307[26] = v151[26];
          v307[27] = v151[27];
          v307[28] = v151[28];
          v307[29] = v151[29];
          v307[30] = v151[30];
          v307[31] = v151[31];
          if (v307 && v306)
          {
            if (v305[8] > v306)
              v306 = v305[8];
            v305[7] = 0;
            v305[8] = v306;
          }
          v308 = *(_QWORD *)(*(_QWORD *)(v101 + 64) + 32);
          v309 = *(_QWORD *)(v308 + 8);
          if ((*(_BYTE *)(v308 + 16) & 2) == 0)
          {
            v310 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v310 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v309)
            v311 = *(_DWORD **)(v308 + 72);
          else
            v311 = 0;
          v312 = *(_QWORD **)(*(_QWORD *)(v102 + 64) + 32);
          v313 = v312[1];
          if (v313)
            v314 = (_DWORD *)v312[9];
          else
            v314 = 0;
          *v314 = *v311;
          v314[1] = v311[1];
          v314[2] = v311[2];
          v314[3] = v311[3];
          v314[4] = v311[4];
          v314[5] = v311[5];
          v314[6] = v311[6];
          v314[7] = v311[7];
          v314[8] = v311[8];
          v314[9] = v311[9];
          v314[10] = v311[10];
          v314[11] = v311[11];
          v314[12] = v311[12];
          v314[13] = v311[13];
          v314[14] = v311[14];
          v314[15] = v311[15];
          v314[16] = v311[16];
          v314[17] = v311[17];
          v314[18] = v311[18];
          v314[19] = v311[19];
          v314[20] = v311[20];
          v314[21] = v311[21];
          v314[22] = v311[22];
          v314[23] = v311[23];
          if (v314 && v313)
          {
            if (v312[8] > v313)
              v313 = v312[8];
            v312[7] = 0;
            v312[8] = v313;
          }
          v315 = *(_QWORD *)(*(_QWORD *)(v101 + 64) + 48);
          if ((*(_BYTE *)(v315 + 16) & 2) == 0)
          {
            v316 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v316 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v317 = *(_QWORD *)(*(_QWORD *)(v102 + 64) + 48);
          v318 = *(_QWORD *)(v317 + 8);
          **(_DWORD **)(v317 + 72) = **(_DWORD **)(v315 + 72);
          v319 = *(_QWORD *)(v317 + 64);
          if (v319 <= v318)
            v319 = v318;
          *(_QWORD *)(v317 + 56) = 0;
          *(_QWORD *)(v317 + 64) = v319;
          v320 = *(_QWORD *)(*(_QWORD *)(v101 + 64) + 64);
          if ((*(_BYTE *)(v320 + 16) & 2) == 0)
          {
            v321 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v321 != -1)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
              v445 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v445, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v322 = *(_DWORD **)(v320 + 72);
          v323 = *(_QWORD **)(*(_QWORD *)(v102 + 64) + 64);
          v324 = v323[1];
          v325 = (_DWORD *)v323[9];
          *v325 = *v322;
          v325[1] = v322[1];
          v325[2] = v322[2];
          v325[3] = v322[3];
          v326 = v323[8];
          if (v326 <= v324)
            v326 = v324;
          v323[7] = 0;
          v323[8] = v326;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 64) = *(_QWORD *)(v24 + 216);
          v303 = *(_QWORD *)(v24 + 192);
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 32) = v303;
          *(_QWORD *)(*(_QWORD *)(v24 + 184) + 24) = *(_QWORD *)(v24 + 208);
          v304 = &off_1E42C6158;
LABEL_408:
          *(_QWORD *)v24 = v304;
          v278 = *(_QWORD **)(*(_QWORD *)(v303 + 64) + 32);
          v279 = v278[1];
          if (v279)
            goto LABEL_409;
          goto LABEL_271;
        default:
          v24 = 0;
          v278 = 0;
          v279 = MEMORY[8];
          if (MEMORY[8])
LABEL_409:
            v280 = v278[9];
          else
LABEL_271:
            v280 = 0;
          v371 = v23[4];
          v372 = v23[5];
          v373 = v23[6];
          v374 = v371 + v371;
          v375 = (v371 + v371) * v371;
          v376 = (v372 + v372) * v372;
          v377 = 1.0 - (v375 + v376);
          v378 = v23[2];
          v379 = v23[3];
          v380 = (v379 + v379) * v371;
          v381 = (v372 + v372) * v373;
          v382 = v380 - v381;
          v383 = v372 * (v379 + v379);
          v384 = v373 * (v371 + v371);
          v385 = v384 + v383;
          v386 = v381 + v380;
          v387 = 1.0 - (v379 + v379) * v379;
          v388 = v387 - v376;
          v389 = v374 * v372;
          v390 = v373 * (v379 + v379);
          v391 = v389 - v390;
          v392 = v383 - v384;
          v393 = v390 + v389;
          v394 = v387 - v375;
          v396 = *v23;
          v395 = v23[1];
          v397 = a3[1];
          v398 = a3[2];
          v399 = *a3 * v382 + v397 * v388 + v398 * v393;
          v400 = *a3 * v385 + v397 * v391 + v398 * v394;
          v401 = a3[3] + *a3 * *v23 + v397 * v395 + v398 * v378;
          *(float *)&v397 = *a3 * v377 + v397 * v386 + v398 * v392;
          *(float *)&v398 = v399;
          v402 = v400;
          *(float *)&v401 = v401;
          *(_DWORD *)v280 = LODWORD(v397);
          *(_DWORD *)(v280 + 4) = LODWORD(v398);
          *(float *)(v280 + 8) = v402;
          *(_DWORD *)(v280 + 12) = LODWORD(v401);
          v403 = a3[4];
          v404 = a3[5];
          v405 = a3[6];
          v406 = v403 * v377 + v404 * v386 + v405 * v392;
          v407 = v403 * v382 + v404 * v388 + v405 * v393;
          v408 = v403 * v385 + v404 * v391 + v405 * v394;
          v409 = a3[7] + v403 * v396 + v404 * v395 + v405 * v378;
          *(float *)&v404 = v406;
          *(float *)&v405 = v407;
          v410 = v408;
          *(float *)&v409 = v409;
          *(_DWORD *)(v280 + 16) = LODWORD(v404);
          *(_DWORD *)(v280 + 20) = LODWORD(v405);
          *(float *)(v280 + 24) = v410;
          *(_DWORD *)(v280 + 28) = LODWORD(v409);
          v411 = a3[8];
          v412 = a3[9];
          v413 = a3[10];
          v414 = v411 * v377 + v412 * v386 + v413 * v392;
          v415 = v411 * v382 + v412 * v388 + v413 * v393;
          v416 = v411 * v385 + v412 * v391 + v413 * v394;
          v417 = a3[11] + v411 * v396 + v412 * v395 + v413 * v378;
          *(float *)&v412 = v414;
          *(float *)&v413 = v415;
          v418 = v416;
          *(float *)&v417 = v417;
          *(_DWORD *)(v280 + 32) = LODWORD(v412);
          *(_DWORD *)(v280 + 36) = LODWORD(v413);
          *(float *)(v280 + 40) = v418;
          *(_DWORD *)(v280 + 44) = LODWORD(v417);
          v419 = a3[12];
          v420 = a3[13];
          v421 = a3[14];
          v422 = v419 * v377 + v420 * v386 + v421 * v392;
          v423 = v419 * v382 + v420 * v388 + v421 * v393;
          v424 = v419 * v385 + v420 * v391 + v421 * v394;
          v425 = a3[15] + v419 * v396 + v420 * v395 + v421 * v378;
          *(float *)&v420 = v422;
          *(float *)&v421 = v423;
          v426 = v424;
          *(float *)&v425 = v425;
          *(_DWORD *)(v280 + 48) = LODWORD(v420);
          *(_DWORD *)(v280 + 52) = LODWORD(v421);
          *(float *)(v280 + 56) = v426;
          *(_DWORD *)(v280 + 60) = LODWORD(v425);
          v427 = a3[16];
          v428 = a3[17];
          v429 = a3[18];
          v430 = v427 * v377 + v428 * v386 + v429 * v392;
          v431 = v427 * v382 + v428 * v388 + v429 * v393;
          v432 = v427 * v385 + v428 * v391 + v429 * v394;
          v433 = a3[19] + v427 * v396 + v428 * v395 + v429 * v378;
          *(float *)&v428 = v430;
          *(float *)&v429 = v431;
          v434 = v432;
          *(float *)&v433 = v433;
          *(_DWORD *)(v280 + 64) = LODWORD(v428);
          *(_DWORD *)(v280 + 68) = LODWORD(v429);
          *(float *)(v280 + 72) = v434;
          *(_DWORD *)(v280 + 76) = LODWORD(v433);
          v435 = a3[20];
          v436 = a3[21];
          v437 = a3[22];
          v438 = a3[23] + v435 * v396 + v436 * v395 + v437 * v378;
          *(float *)&v377 = v435 * v377 + v436 * v386 + v437 * v392;
          *(float *)&v382 = v435 * v382 + v436 * v388 + v437 * v393;
          *(float *)&v385 = v435 * v385 + v436 * v391 + v437 * v394;
          *(_DWORD *)(v280 + 80) = LODWORD(v377);
          *(_DWORD *)(v280 + 84) = LODWORD(v382);
          *(float *)&v377 = v438;
          *(_DWORD *)(v280 + 88) = LODWORD(v385);
          *(_DWORD *)(v280 + 92) = LODWORD(v377);
          if (v280 && v279)
          {
            if (v278[8] > v279)
              v279 = v278[8];
            v278[7] = 0;
            v278[8] = v279;
          }
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v24);
LABEL_23:
          ++v21;
          v19 = *(_QWORD *)(*a2 + 48);
          if (v21 < (*(_QWORD *)(*a2 + 56) - v19) >> 3)
            continue;
          return;
      }
    }
  }
}

void sub_19FA08330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v15;
  void *v16;

  if (v15 < 0)
    operator delete(v16);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__assign_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (a4 <= (v8 - *(_QWORD *)a1) >> 4)
  {
    v15 = *(char **)(a1 + 8);
    v16 = (v15 - v9) >> 4;
    if (v16 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          v26 = *v6;
          v25 = v6[1];
          if (v25)
          {
            v27 = (unint64_t *)(v25 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v26;
          *((_QWORD *)v9 + 1) = v25;
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != a3);
        v15 = *(char **)(a1 + 8);
      }
      while (v15 != v9)
      {
        v52 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v15 -= 16;
      }
      *(_QWORD *)(a1 + 8) = v9;
    }
    else
    {
      v17 = &a2[2 * v16];
      if (v15 != v9)
      {
        do
        {
          v19 = *v6;
          v18 = v6[1];
          if (v18)
          {
            v20 = (unint64_t *)(v18 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v19;
          *((_QWORD *)v9 + 1) = v18;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != v17);
        v9 = *(char **)(a1 + 8);
      }
      v44 = v9;
      if (v17 != a3)
      {
        v44 = v9;
        do
        {
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = 0;
          v45 = *v17;
          v46 = v17[1];
          if (v46)
          {
            v47 = (unint64_t *)(v46 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            v49 = (std::__shared_weak_count *)*((_QWORD *)v44 + 1);
            *(_QWORD *)v44 = v45;
            *((_QWORD *)v44 + 1) = v46;
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
          }
          else
          {
            *(_QWORD *)v44 = v45;
            *((_QWORD *)v44 + 1) = 0;
          }
          v17 += 2;
          v44 += 16;
        }
        while (v17 != a3);
      }
      *(_QWORD *)(a1 + 8) = v44;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 60)
      goto LABEL_78;
    v32 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v32 = a4;
    v33 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v34 = 0xFFFFFFFFFFFFFFFLL;
    if (!v33)
      v34 = v32;
    if (v34 >> 60)
LABEL_78:
      abort();
    v35 = 2 * v34;
    v36 = operator new(16 * v34);
    *(_QWORD *)a1 = v36;
    *(_QWORD *)(a1 + 8) = v36;
    *(_QWORD *)(a1 + 16) = &v36[v35];
    while (v6 != a3)
    {
      *v36 = 0;
      v36[1] = 0;
      v37 = *v6;
      v38 = v6[1];
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v41 = (std::__shared_weak_count *)v36[1];
        *v36 = v37;
        v36[1] = v38;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      else
      {
        *v36 = v37;
        v36[1] = 0;
      }
      v6 += 2;
      v36 += 2;
    }
    *(_QWORD *)(a1 + 8) = v36;
  }
}

void altitude::FlyoverMaskedRenderable::~FlyoverMaskedRenderable(altitude::FlyoverMaskedRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5CB8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5CB8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMaskedRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5CB8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5CB8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::FlyoverMasked::FlyoverPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMasked::FlyoverPipelineSetup>,std::allocator<ggl::FlyoverMasked::FlyoverPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMasked::FlyoverPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMasked::FlyoverPipelineSetup>,std::allocator<ggl::FlyoverMasked::FlyoverPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::FlyoverRenderable::~FlyoverRenderable(altitude::FlyoverRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5B58;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5B58;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5B58;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5B58;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::Flyover::FlyoverPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::Flyover::FlyoverPipelineSetup>,std::allocator<ggl::Flyover::FlyoverPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Flyover::FlyoverPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::Flyover::FlyoverPipelineSetup>,std::allocator<ggl::Flyover::FlyoverPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::MuninRoadNetworkData::~MuninRoadNetworkData(md::MuninRoadNetworkData *this)
{
  md::MuninRoadNetworkData::~MuninRoadNetworkData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;

  *(_QWORD *)this = &off_1E42994D0;
  *((_QWORD *)this + 79) = &unk_1E4299510;
  v2 = (_QWORD *)*((_QWORD *)this + 108);
  if (v2)
  {
    do
    {
      v13 = (_QWORD *)*v2;
      v14 = (void *)v2[3];
      if (v14)
      {
        v2[4] = v14;
        operator delete(v14);
      }
      operator delete(v2);
      v2 = v13;
    }
    while (v13);
  }
  v3 = (void *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 103);
  if (v4)
  {
    *((_QWORD *)this + 104) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 100);
  if (v5)
  {
    *((_QWORD *)this + 101) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 97);
  if (v6)
  {
    *((_QWORD *)this + 98) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 94);
  if (v7)
  {
    *((_QWORD *)this + 95) = v7;
    operator delete(v7);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v11)
  {
    geo::Pool<md::MuninRoadEdge>::disposeElements(v11);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v11 + 8));
    MEMORY[0x1A1AF4E00](v11, 0x1020C407A7143E5);
  }
  v12 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v12)
  {
    geo::Pool<md::MuninJunction>::disposeElements(v12);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v12 + 8));
    MEMORY[0x1A1AF4E00](v12, 0x1020C407A7143E5);
  }
  md::MapTileData::~MapTileData(this);
}

void sub_19FA08FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void geo::Pool<md::MuninRoadEdge>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_48;
    goto LABEL_50;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = v16 + 120 * v15;
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < v17)
          v20 = (uint64_t *)v21;
        if (v17 < v20[4])
        {
LABEL_28:
          if (*(char *)(v17 + 39) < 0)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v17 + 40) + 40))(*(_QWORD *)(v17 + 40), *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 32) & 0x7FFFFFFFFFFFFFFFLL);
            v9 = *(_QWORD *)(a1 + 24);
          }
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_50:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_48:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19FA09260(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::Pool<md::MuninJunction>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 72 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19FA094D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::__unordered_map_hasher<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::hash<std::bitset<4ul>>,std::equal_to<std::bitset<4ul>>,true>,std::__unordered_map_equal<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::equal_to<std::bitset<4ul>>,std::hash<std::bitset<4ul>>,true>,std::allocator<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>>>::__emplace_unique_key_args<std::bitset<4ul>,std::piecewise_construct_t const&,std::tuple<std::bitset<4ul> const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (((*((_DWORD *)v10 + 4) ^ a2) & 0xFLL) == 0)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (((*((_DWORD *)v10 + 4) ^ a2) & 0xFLL) == 0)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19FA09958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0::operator()(int8x8_t **a1, unint64_t a2)
{
  int8x8_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  geo::codec::VectorTile **v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unsigned int *v25;
  _QWORD *v26;
  _QWORD *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  unsigned int *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int8x8_t *v55;
  unint64_t v56;
  uint8x8_t v57;
  _QWORD **v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  size_t prime;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  int8x8_t *v72;
  size_t v73;
  size_t v74;
  size_t v75;
  _QWORD *v76;
  size_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  size_t v84;
  void *v85;
  int8x8_t v86;
  _QWORD *v87;
  unint64_t v88;
  float64_t v90;
  float64_t v91;
  float64_t v92;
  float64_t v93;
  uint64_t v94;
  _QWORD v95[3];

  v95[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  v7 = v6 ^ (v6 >> 47);
  v8 = 0x9DDFEA08EB382D69 * v7;
  v9 = (*a1)[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = 0x9DDFEA08EB382D69 * v7;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = v8 & (*(_QWORD *)&v9 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)*a1 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == a2)
                return v13[3];
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_21;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_21;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v8)
          {
            if (v13[2] == a2)
              return v13[3];
          }
          else
          {
            if (v15 >= *(_QWORD *)&v9)
              v15 %= *(_QWORD *)&v9;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_21:
  v17 = v4[90];
  v18 = (geo::codec::VectorTile **)a1[2];
  v19 = *(_QWORD *)(*(_QWORD *)&v17 + 40);
  if (!v19)
  {
    geo::Pool<md::MuninJunction>::allocateSlab(*(uint64_t ***)&v4[90]);
    v19 = *(_QWORD *)(*(_QWORD *)&v17 + 40);
  }
  *(_QWORD *)(*(_QWORD *)&v17 + 40) = *(_QWORD *)v19;
  *(_QWORD *)v19 = &off_1E428E0C8;
  *(_QWORD *)(v19 + 8) = a2;
  geo::codec::VectorTile::key(*v18);
  v95[0] = GEOTileKeyMake();
  v95[1] = v20;
  GEOMapRectForGEOTileKey();
  v92 = v22;
  v93 = v21;
  v90 = v24;
  v91 = v23;
  v25 = (unsigned int *)(geo::codec::VectorTile::pointsOnRoad(*v18) + 16 * *(unsigned int *)(a2 + 4));
  v26 = (_QWORD *)(geo::codec::VectorTile::lines(*v18) + 168 * v25[1]);
  v94 = 0;
  v27 = geo::codec::multiSectionFeaturePoints(v26, v25[2], &v94);
  v28 = *(float64x2_t *)(MEMORY[0x1E0D266E8] + 16);
  v29.f64[0] = v92;
  v30.f64[0] = v93;
  v29.f64[1] = v90;
  v30.f64[1] = v91;
  v31 = vdivq_f64(vaddq_f64(v29, v30), v28);
  v32 = 1.0 - v31.f64[1];
  v33 = vdivq_f64(v30, v28);
  v34 = vsubq_f64(v31, v33);
  v33.f64[1] = v32;
  *(float64x2_t *)(v19 + 16) = vmlaq_f64(v33, vcvtq_f64_f32((float32x2_t)v27[v25[3]]), v34);
  v35 = (unsigned int *)(geo::codec::VectorTile::pointsOnRoad(*v18) + 16 * *(unsigned int *)(a2 + 4));
  v36 = (_QWORD *)(geo::codec::VectorTile::lines(*v18) + 168 * v35[1]);
  v95[0] = 0;
  *(_QWORD *)(v19 + 32) = geo::codec::multiSectionFeaturePoints(v36, v35[2], v95)[v35[3]];
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 62) = 0;
  v37 = (char *)v4[98];
  v38 = (unint64_t)v4[99];
  if ((unint64_t)v37 >= v38)
  {
    v40 = (char *)v4[97];
    v41 = (v37 - v40) >> 3;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
      abort();
    v43 = v38 - (_QWORD)v40;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        goto LABEL_136;
      v45 = operator new(8 * v44);
    }
    else
    {
      v45 = 0;
    }
    v46 = &v45[8 * v41];
    v47 = &v45[8 * v44];
    *v46 = v19;
    v39 = (unint64_t)(v46 + 1);
    if (v37 == v40)
    {
      v40 = v37;
    }
    else
    {
      v48 = v37 - v40 - 8;
      if (v48 < 0x58)
        goto LABEL_140;
      if ((unint64_t)(v40 - v45) < 0x20)
        goto LABEL_140;
      v49 = (v48 >> 3) + 1;
      v50 = &v45[8 * v41 - 16];
      v51 = v37 - 16;
      v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v53 = *(_OWORD *)v51;
        *(v50 - 1) = *((_OWORD *)v51 - 1);
        *v50 = v53;
        v50 -= 2;
        v51 -= 32;
        v52 -= 4;
      }
      while (v52);
      v46 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
      v37 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
      if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_140:
        do
        {
          v54 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v46 = v54;
        }
        while (v37 != v40);
        v40 = (char *)v4[97];
      }
    }
    v4[97] = (int8x8_t)v46;
    v4[98] = (int8x8_t)v39;
    v4[99] = (int8x8_t)v47;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *(_QWORD *)v37 = v19;
    v39 = (unint64_t)(v37 + 8);
  }
  v4[98] = (int8x8_t)v39;
  v55 = *a1;
  v56 = (unint64_t)(*a1)[1];
  if (v56)
  {
    v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
    v57.i16[0] = vaddlv_u8(v57);
    if (v57.u32[0] > 1uLL)
    {
      v39 = v8;
      if (v8 >= v56)
        v39 = v8 % v56;
    }
    else
    {
      v39 = v8 & (v56 - 1);
    }
    v58 = *(_QWORD ***)(*(_QWORD *)v55 + 8 * v39);
    if (v58)
    {
      v59 = *v58;
      if (*v58)
      {
        if (v57.u32[0] < 2uLL)
        {
          while (1)
          {
            v61 = v59[1];
            if (v61 == v8)
            {
              if (v59[2] == a2)
                goto LABEL_134;
            }
            else if ((v61 & (v56 - 1)) != v39)
            {
              goto LABEL_67;
            }
            v59 = (_QWORD *)*v59;
            if (!v59)
              goto LABEL_67;
          }
        }
        do
        {
          v60 = v59[1];
          if (v60 == v8)
          {
            if (v59[2] == a2)
              goto LABEL_134;
          }
          else
          {
            if (v60 >= v56)
              v60 %= v56;
            if (v60 != v39)
              break;
          }
          v59 = (_QWORD *)*v59;
        }
        while (v59);
      }
    }
  }
LABEL_67:
  v59 = operator new(0x20uLL);
  *v59 = 0;
  v59[1] = v8;
  v59[2] = a2;
  v59[3] = 0;
  v62 = (float)(unint64_t)(*(_QWORD *)&v55[3] + 1);
  v63 = *(float *)v55[4].i32;
  if ((((float)(v63 * (float)v56) >= v62) & ~(v56 == 0)) == 0)
  {
    v64 = 1;
    if (v56 >= 3)
      v64 = (v56 & (v56 - 1)) != 0;
    v65 = v64 | (2 * v56);
    v66 = vcvtps_u32_f32(v62 / v63);
    if (v65 <= v66)
      prime = v66;
    else
      prime = v65;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v56 = (unint64_t)v55[1];
    }
    if (prime <= v56)
    {
      if (prime >= v56)
        goto LABEL_119;
      v79 = vcvtps_u32_f32((float)(unint64_t)v55[3] / *(float *)v55[4].i32);
      if (v56 < 3 || (v80 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
      {
        v79 = std::__next_prime(v79);
      }
      else
      {
        v81 = 1 << -(char)__clz(v79 - 1);
        if (v79 >= 2)
          v79 = v81;
      }
      if (prime <= v79)
        prime = v79;
      if (prime >= v56)
        goto LABEL_119;
      if (!prime)
      {
        v85 = (void *)*v55;
        *v55 = 0;
        if (v85)
          operator delete(v85);
        v55[1] = 0;
        goto LABEL_119;
      }
    }
    if (!(prime >> 61))
    {
      v68 = operator new(8 * prime);
      v69 = (void *)*v55;
      *v55 = (int8x8_t)v68;
      if (v69)
        operator delete(v69);
      v70 = 0;
      v55[1] = (int8x8_t)prime;
      do
        *(_QWORD *)(*(_QWORD *)v55 + 8 * v70++) = 0;
      while (prime != v70);
      v72 = v55 + 2;
      v71 = (_QWORD *)v55[2];
      if (!v71)
        goto LABEL_119;
      v73 = v71[1];
      v74 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v75 = v73 & v74;
        *(_QWORD *)(*(_QWORD *)v55 + 8 * v75) = v72;
        while (1)
        {
          v76 = (_QWORD *)*v71;
          if (!*v71)
            break;
          v77 = v76[1] & v74;
          if (v77 == v75)
          {
            v71 = (_QWORD *)*v71;
          }
          else if (*(_QWORD *)(*(_QWORD *)v55 + 8 * v77))
          {
            *v71 = *v76;
            v78 = 8 * v77;
            *v76 = **(_QWORD **)(*(_QWORD *)v55 + v78);
            **(_QWORD **)(*(_QWORD *)v55 + v78) = v76;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v55 + 8 * v77) = v71;
            v71 = v76;
            v75 = v77;
          }
        }
LABEL_119:
        v56 = (unint64_t)v55[1];
        if ((v56 & (v56 - 1)) != 0)
        {
          if (v8 >= v56)
            v39 = v8 % v56;
          else
            v39 = v8;
        }
        else
        {
          v39 = (v56 - 1) & v8;
        }
        goto LABEL_124;
      }
      if (v73 >= prime)
        v73 %= prime;
      *(_QWORD *)(*(_QWORD *)v55 + 8 * v73) = v72;
      v82 = (_QWORD *)*v71;
      if (!*v71)
        goto LABEL_119;
      while (1)
      {
        v84 = v82[1];
        if (v84 >= prime)
          v84 %= prime;
        if (v84 != v73)
        {
          if (!*(_QWORD *)(*(_QWORD *)v55 + 8 * v84))
          {
            *(_QWORD *)(*(_QWORD *)v55 + 8 * v84) = v71;
            goto LABEL_104;
          }
          *v71 = *v82;
          v83 = 8 * v84;
          *v82 = **(_QWORD **)(*(_QWORD *)v55 + v83);
          **(_QWORD **)(*(_QWORD *)v55 + v83) = v82;
          v82 = v71;
        }
        v84 = v73;
LABEL_104:
        v71 = v82;
        v82 = (_QWORD *)*v82;
        v73 = v84;
        if (!v82)
          goto LABEL_119;
      }
    }
LABEL_136:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_124:
  v86 = *v55;
  v87 = *(_QWORD **)(*(_QWORD *)v55 + 8 * v39);
  if (v87)
  {
    *v59 = *v87;
  }
  else
  {
    *v59 = v55[2];
    v55[2] = (int8x8_t)v59;
    *(_QWORD *)(*(_QWORD *)&v86 + 8 * v39) = v55 + 2;
    if (!*v59)
      goto LABEL_133;
    v88 = *(_QWORD *)(*v59 + 8);
    if ((v56 & (v56 - 1)) != 0)
    {
      if (v88 >= v56)
        v88 %= v56;
    }
    else
    {
      v88 &= v56 - 1;
    }
    v87 = (_QWORD *)(*(_QWORD *)v55 + 8 * v88);
  }
  *v87 = v59;
LABEL_133:
  ++*(_QWORD *)&v55[3];
LABEL_134:
  v59[3] = v19;
  return v19;
}

void sub_19FA0A1A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(GeoCodecsRoadFeature const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(GeoCodecsRoadFeature const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42F2788;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(GeoCodecsRoadFeature const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42F2788;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(GeoCodecsRoadFeature const*)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  float *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float *v16;
  double v17;
  float v18;
  float v19;
  double v20;
  float *v21;
  float v22;
  float v23;
  double v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  md::MuninJunction *v30;
  md::MuninJunction *v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  md::MuninJunction **v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  md::MuninJunction *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  md::MuninJunction **v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  md::MuninJunction **v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  md::MuninJunction **v66;
  uint64_t v67;
  __int128 v68;
  md::MuninJunction *v69;
  char *v70;
  unint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  md::MuninJunction **v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  md::MuninJunction *v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  md::MuninJunction **v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  md::MuninJunction **v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  md::MuninJunction **v104;
  uint64_t v105;
  __int128 v106;
  md::MuninJunction *v107;
  geo::codec::VectorTile **v108;
  _QWORD *v109;
  const float *v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  unint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  const float *v133;
  unint64_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  unint64_t v145;
  float *v146;
  double v147;
  double v148;
  uint64_t v149;
  const md::MuninRoadEdge *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  const md::MuninRoadEdge **v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  const md::MuninRoadEdge *v169;
  unint64_t v170;
  unint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  __int128 v177;
  double v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x4x2_t v183;

  v182 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v175 = v3;
  v4 = *(_QWORD *)(a1 + 32);
  result = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)(a1 + 8), (unint64_t)v3);
  if (!result)
  {
    v174 = 0;
    v6 = (float *)geo::codec::multiSectionFeaturePoints(v3, 0, &v174);
    v180 = 0;
    v181 = 0;
    geo::codec::VectorTile::key(**(geo::codec::VectorTile ***)(a1 + 16));
    v180 = GEOTileKeyMake();
    v181 = v7;
    GEOMapRectForGEOTileKey();
    v8 = *(double *)(MEMORY[0x1E0D266E8] + 16);
    v9 = *(double *)(MEMORY[0x1E0D266E8] + 24);
    v11 = v10 / v8;
    v14 = (v13 + v12) / v9;
    v16 = &v6[2 * v174];
    v17 = (v15 + v10) / v8 - v10 / v8;
    v19 = *v6;
    v18 = v6[1];
    v20 = v14 - v12 / v9;
    *(double *)&v173 = v11 + v17 * *v6;
    *((double *)&v173 + 1) = 1.0 - v14 + v20 * v18;
    v22 = *(v16 - 2);
    v21 = v16 - 2;
    v23 = v22;
    v24 = v11 + v17 * v22;
    v25 = v21[1];
    *(double *)&v172 = v24;
    *((double *)&v172 + 1) = 1.0 - v14 + v20 * v25;
    if (v19 >= 0.001)
    {
      if (v19 <= 0.999)
        v26 = 0;
      else
        v26 = 2;
    }
    else
    {
      v26 = 1;
    }
    if (v18 >= 0.001)
    {
      if (v18 > 0.999)
        v26 |= 4uLL;
    }
    else
    {
      v26 |= 8uLL;
    }
    v171 = v26;
    if (v23 >= 0.001)
    {
      if (v23 <= 0.999)
        v27 = 0;
      else
        v27 = 2;
    }
    else
    {
      v27 = 1;
    }
    if (v25 >= 0.001)
    {
      if (v25 > 0.999)
        v27 |= 4uLL;
    }
    else
    {
      v27 |= 8uLL;
    }
    v170 = v27;
    if (v26)
      v28 = 2;
    else
      v28 = 1;
    if (v27)
      v29 = 2;
    else
      v29 = 1;
    v30 = (md::MuninJunction *)md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1::operator()(**(_QWORD **)(a1 + 24), &v173, (uint64_t *)v6, v28);
    v31 = (md::MuninJunction *)md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1::operator()(**(_QWORD **)(a1 + 24), &v172, (uint64_t *)v21, v29);
    if (v26)
    {
      v32 = *(char **)(v4 + 832);
      v33 = *(_QWORD *)(v4 + 840);
      if ((unint64_t)v32 >= v33)
      {
        v35 = *(char **)(v4 + 824);
        v36 = (v32 - v35) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          abort();
        v38 = v33 - (_QWORD)v35;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          if (v39 >> 61)
            goto LABEL_159;
          v40 = operator new(8 * v39);
        }
        else
        {
          v40 = 0;
        }
        v41 = (md::MuninJunction **)&v40[8 * v36];
        v42 = &v40[8 * v39];
        *v41 = v30;
        v34 = v41 + 1;
        if (v32 == v35)
        {
          v35 = v32;
        }
        else
        {
          v43 = v32 - v35 - 8;
          if (v43 < 0x58)
            goto LABEL_167;
          if ((unint64_t)(v35 - v40) < 0x20)
            goto LABEL_167;
          v44 = (v43 >> 3) + 1;
          v45 = &v40[8 * v36 - 16];
          v46 = v32 - 16;
          v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v41 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
          v32 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_167:
            do
            {
              v49 = (md::MuninJunction *)*((_QWORD *)v32 - 1);
              v32 -= 8;
              *--v41 = v49;
            }
            while (v32 != v35);
            v35 = *(char **)(v4 + 824);
          }
        }
        *(_QWORD *)(v4 + 824) = v41;
        *(_QWORD *)(v4 + 832) = v34;
        *(_QWORD *)(v4 + 840) = v42;
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v32 = v30;
        v34 = v32 + 8;
      }
      *(_QWORD *)(v4 + 832) = v34;
      v50 = std::__hash_table<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::__unordered_map_hasher<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::hash<std::bitset<4ul>>,std::equal_to<std::bitset<4ul>>,true>,std::__unordered_map_equal<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::equal_to<std::bitset<4ul>>,std::hash<std::bitset<4ul>>,true>,std::allocator<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>>>::__emplace_unique_key_args<std::bitset<4ul>,std::piecewise_construct_t const&,std::tuple<std::bitset<4ul> const&>,std::tuple<>>((uint64_t *)(v4 + 848), v171, &v171);
      v51 = v50;
      v53 = (md::MuninJunction **)v50[4];
      v52 = v50[5];
      if ((unint64_t)v53 >= v52)
      {
        v55 = (char *)v50[3];
        v56 = ((char *)v53 - v55) >> 3;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          abort();
        v58 = v52 - (_QWORD)v55;
        if (v58 >> 2 > v57)
          v57 = v58 >> 2;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 >> 61)
            goto LABEL_159;
          v60 = (char *)operator new(8 * v59);
        }
        else
        {
          v60 = 0;
        }
        v61 = (md::MuninJunction **)&v60[8 * v56];
        v62 = &v60[8 * v59];
        *v61 = v30;
        v54 = v61 + 1;
        if (v53 != (md::MuninJunction **)v55)
        {
          v63 = (char *)v53 - v55 - 8;
          if (v63 < 0x58)
            goto LABEL_168;
          if ((unint64_t)(v55 - v60) < 0x20)
            goto LABEL_168;
          v64 = (v63 >> 3) + 1;
          v65 = &v60[8 * v56 - 16];
          v66 = v53 - 2;
          v67 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *(_OWORD *)v66;
            *((_OWORD *)v65 - 1) = *((_OWORD *)v66 - 1);
            *(_OWORD *)v65 = v68;
            v65 -= 32;
            v66 -= 4;
            v67 -= 4;
          }
          while (v67);
          v61 -= v64 & 0x3FFFFFFFFFFFFFFCLL;
          v53 -= v64 & 0x3FFFFFFFFFFFFFFCLL;
          if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_168:
            do
            {
              v69 = *--v53;
              *--v61 = v69;
            }
            while (v53 != (md::MuninJunction **)v55);
          }
          v53 = (md::MuninJunction **)v51[3];
        }
        v51[3] = v61;
        v51[4] = v54;
        v51[5] = v62;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *v53 = v30;
        v54 = v53 + 1;
      }
      v51[4] = v54;
      v27 = v170;
    }
    if ((v27 & 0xF) != 0)
    {
      v70 = *(char **)(v4 + 832);
      v71 = *(_QWORD *)(v4 + 840);
      if ((unint64_t)v70 >= v71)
      {
        v73 = *(char **)(v4 + 824);
        v74 = (v70 - v73) >> 3;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61)
          abort();
        v76 = v71 - (_QWORD)v73;
        if (v76 >> 2 > v75)
          v75 = v76 >> 2;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          if (v77 >> 61)
            goto LABEL_159;
          v78 = operator new(8 * v77);
        }
        else
        {
          v78 = 0;
        }
        v79 = (md::MuninJunction **)&v78[8 * v74];
        v80 = &v78[8 * v77];
        *v79 = v31;
        v72 = v79 + 1;
        if (v70 == v73)
        {
          v73 = v70;
        }
        else
        {
          v81 = v70 - v73 - 8;
          if (v81 < 0x58)
            goto LABEL_169;
          if ((unint64_t)(v73 - v78) < 0x20)
            goto LABEL_169;
          v82 = (v81 >> 3) + 1;
          v83 = &v78[8 * v74 - 16];
          v84 = v70 - 16;
          v85 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v86 = *(_OWORD *)v84;
            *(v83 - 1) = *((_OWORD *)v84 - 1);
            *v83 = v86;
            v83 -= 2;
            v84 -= 32;
            v85 -= 4;
          }
          while (v85);
          v79 -= v82 & 0x3FFFFFFFFFFFFFFCLL;
          v70 -= 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
          if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_169:
            do
            {
              v87 = (md::MuninJunction *)*((_QWORD *)v70 - 1);
              v70 -= 8;
              *--v79 = v87;
            }
            while (v70 != v73);
            v73 = *(char **)(v4 + 824);
          }
        }
        *(_QWORD *)(v4 + 824) = v79;
        *(_QWORD *)(v4 + 832) = v72;
        *(_QWORD *)(v4 + 840) = v80;
        if (v73)
        {
          operator delete(v73);
          v27 = v170;
        }
      }
      else
      {
        *(_QWORD *)v70 = v31;
        v72 = v70 + 8;
      }
      *(_QWORD *)(v4 + 832) = v72;
      v88 = std::__hash_table<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::__unordered_map_hasher<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::hash<std::bitset<4ul>>,std::equal_to<std::bitset<4ul>>,true>,std::__unordered_map_equal<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::equal_to<std::bitset<4ul>>,std::hash<std::bitset<4ul>>,true>,std::allocator<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>>>::__emplace_unique_key_args<std::bitset<4ul>,std::piecewise_construct_t const&,std::tuple<std::bitset<4ul> const&>,std::tuple<>>((uint64_t *)(v4 + 848), v27, &v170);
      v89 = v88;
      v91 = (md::MuninJunction **)v88[4];
      v90 = v88[5];
      if ((unint64_t)v91 >= v90)
      {
        v93 = (char *)v88[3];
        v94 = ((char *)v91 - v93) >> 3;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61)
          abort();
        v96 = v90 - (_QWORD)v93;
        if (v96 >> 2 > v95)
          v95 = v96 >> 2;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          if (v97 >> 61)
            goto LABEL_159;
          v98 = (char *)operator new(8 * v97);
        }
        else
        {
          v98 = 0;
        }
        v99 = (md::MuninJunction **)&v98[8 * v94];
        v100 = &v98[8 * v97];
        *v99 = v31;
        v92 = v99 + 1;
        if (v91 != (md::MuninJunction **)v93)
        {
          v101 = (char *)v91 - v93 - 8;
          if (v101 < 0x58)
            goto LABEL_170;
          if ((unint64_t)(v93 - v98) < 0x20)
            goto LABEL_170;
          v102 = (v101 >> 3) + 1;
          v103 = &v98[8 * v94 - 16];
          v104 = v91 - 2;
          v105 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v106 = *(_OWORD *)v104;
            *((_OWORD *)v103 - 1) = *((_OWORD *)v104 - 1);
            *(_OWORD *)v103 = v106;
            v103 -= 32;
            v104 -= 4;
            v105 -= 4;
          }
          while (v105);
          v99 -= v102 & 0x3FFFFFFFFFFFFFFCLL;
          v91 -= v102 & 0x3FFFFFFFFFFFFFFCLL;
          if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_170:
            do
            {
              v107 = *--v91;
              *--v99 = v107;
            }
            while (v91 != (md::MuninJunction **)v93);
          }
          v91 = (md::MuninJunction **)v89[3];
        }
        v89[3] = v99;
        v89[4] = v92;
        v89[5] = v100;
        if (v91)
          operator delete(v91);
      }
      else
      {
        *v91 = v31;
        v92 = v91 + 1;
      }
      v89[4] = v92;
    }
    v108 = *(geo::codec::VectorTile ***)(a1 + 16);
    v109 = v175;
    v176 = 0;
    v110 = (const float *)geo::codec::multiSectionFeaturePoints(v175, 0, &v176);
    geo::codec::VectorTile::key(*v108);
    *(_QWORD *)&v177 = GEOTileKeyMake();
    *((_QWORD *)&v177 + 1) = v111;
    GEOMapRectForGEOTileKey();
    if (v176)
    {
      v116 = *(double *)(MEMORY[0x1E0D266E8] + 16);
      v117 = *(double *)(MEMORY[0x1E0D266E8] + 24);
      v118 = v112 / v116;
      v119 = (v115 + v113) / v117;
      v120 = 1.0 - v119;
      v121 = (v114 + v112) / v116 - v112 / v116;
      v122 = v119 - v113 / v117;
      if (v176 >= 4)
      {
        v123 = v176 & 0xFFFFFFFFFFFFFFFCLL;
        v128 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v121, 0);
        v129 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v118, 0);
        v130 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v122, 0);
        v131 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v132 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v133 = v110;
        v134 = v176 & 0xFFFFFFFFFFFFFFFCLL;
        v135 = v132;
        v136 = v132;
        v137 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120, 0);
        v138 = v132;
        v139 = v131;
        v140 = v131;
        v141 = v131;
        do
        {
          v183 = vld2q_f32(v133);
          v133 += 8;
          v142 = vmlaq_f64(v129, vcvtq_f64_f32(*(float32x2_t *)v183.val[0].f32), v128);
          v143 = vmlaq_f64(v129, vcvt_hight_f64_f32(v183.val[0]), v128);
          v144 = vcvt_hight_f64_f32(v183.val[1]);
          v183.val[1] = (float32x4_t)vmlaq_f64(v137, vcvtq_f64_f32(*(float32x2_t *)v183.val[1].f32), v130);
          v183.val[0] = (float32x4_t)vmlaq_f64(v137, v144, v130);
          v141 = vminnmq_f64(v143, v141);
          v140 = vminnmq_f64(v142, v140);
          v138 = vmaxnmq_f64(v138, v143);
          v136 = vmaxnmq_f64(v136, v142);
          v139 = vminnmq_f64((float64x2_t)v183.val[0], v139);
          v131 = vminnmq_f64((float64x2_t)v183.val[1], v131);
          v135 = vmaxnmq_f64(v135, (float64x2_t)v183.val[0]);
          v132 = vmaxnmq_f64(v132, (float64x2_t)v183.val[1]);
          v134 -= 4;
        }
        while (v134);
        v127 = vminnmvq_f64(vminnmq_f64(v140, v141));
        v124 = vminnmvq_f64(vminnmq_f64(v131, v139));
        v126 = vmaxnmvq_f64(vmaxnmq_f64(v136, v138));
        v125 = vmaxnmvq_f64(vmaxnmq_f64(v132, v135));
        if (v176 == v123)
          goto LABEL_129;
      }
      else
      {
        v123 = 0;
        v124 = 1.79769313e308;
        v125 = -1.79769313e308;
        v126 = -1.79769313e308;
        v127 = 1.79769313e308;
      }
      v145 = v176 - v123;
      v146 = (float *)&v110[2 * v123 + 1];
      do
      {
        v147 = v118 + v121 * *(v146 - 1);
        v148 = v120 + v122 * *v146;
        v127 = fmin(v147, v127);
        v126 = fmax(v126, v147);
        v124 = fmin(v148, v124);
        v125 = fmax(v125, v148);
        v146 += 2;
        --v145;
      }
      while (v145);
    }
    else
    {
      v126 = -1.79769313e308;
      v127 = 1.79769313e308;
      v124 = 1.79769313e308;
      v125 = -1.79769313e308;
    }
LABEL_129:
    *(double *)&v177 = v127;
    *((double *)&v177 + 1) = v124;
    v178 = v126;
    v179 = v125;
    v149 = *(_QWORD *)(v4 + 728);
    v150 = *(const md::MuninRoadEdge **)(v149 + 40);
    if (!v150)
    {
      geo::Pool<md::MuninRoadEdge>::allocateSlab(*(uint64_t ***)(v4 + 728));
      v150 = *(const md::MuninRoadEdge **)(v149 + 40);
    }
    *(_QWORD *)(v149 + 40) = *(_QWORD *)v150;
    v176 = 0;
    geo::codec::multiSectionFeaturePoints(v109, 0, &v176);
    if (v176)
      v151 = v176 - 1;
    else
      v151 = 0;
    md::MuninRoadEdge::MuninRoadEdge(v150, (uint64_t)v109, &v177, 0, v151, v30, v31);
    v152 = *(char **)(v4 + 760);
    v153 = *(_QWORD *)(v4 + 768);
    if ((unint64_t)v152 < v153)
    {
      *(_QWORD *)v152 = v150;
      v154 = v152 + 8;
LABEL_157:
      *(_QWORD *)(v4 + 760) = v154;
      result = std::__hash_table<std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::__unordered_map_hasher<GeoCodecsRoadFeature const*,std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::hash<GeoCodecsRoadFeature const*>,std::equal_to<GeoCodecsRoadFeature const*>,true>,std::__unordered_map_equal<GeoCodecsRoadFeature const*,std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::equal_to<GeoCodecsRoadFeature const*>,std::hash<GeoCodecsRoadFeature const*>,true>,std::allocator<std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>>>::__emplace_unique_key_args<GeoCodecsRoadFeature const*,std::piecewise_construct_t const&,std::tuple<GeoCodecsRoadFeature const* const&>,std::tuple<>>(*(float **)(a1 + 8), (unint64_t)v175, &v175);
      result[3] = v150;
      return result;
    }
    v155 = *(char **)(v4 + 752);
    v156 = (v152 - v155) >> 3;
    v157 = v156 + 1;
    if ((unint64_t)(v156 + 1) >> 61)
      abort();
    v158 = v153 - (_QWORD)v155;
    if (v158 >> 2 > v157)
      v157 = v158 >> 2;
    if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
      v159 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v159 = v157;
    if (!v159)
    {
      v160 = 0;
      goto LABEL_146;
    }
    if (!(v159 >> 61))
    {
      v160 = operator new(8 * v159);
LABEL_146:
      v161 = (const md::MuninRoadEdge **)&v160[8 * v156];
      v162 = &v160[8 * v159];
      *v161 = v150;
      v154 = v161 + 1;
      if (v152 == v155)
      {
        v155 = v152;
      }
      else
      {
        v163 = v152 - v155 - 8;
        if (v163 < 0x58)
          goto LABEL_171;
        if ((unint64_t)(v155 - v160) < 0x20)
          goto LABEL_171;
        v164 = (v163 >> 3) + 1;
        v165 = &v160[8 * v156 - 16];
        v166 = v152 - 16;
        v167 = v164 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v168 = *(_OWORD *)v166;
          *(v165 - 1) = *((_OWORD *)v166 - 1);
          *v165 = v168;
          v165 -= 2;
          v166 -= 32;
          v167 -= 4;
        }
        while (v167);
        v161 -= v164 & 0x3FFFFFFFFFFFFFFCLL;
        v152 -= 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
        if (v164 != (v164 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_171:
          do
          {
            v169 = (const md::MuninRoadEdge *)*((_QWORD *)v152 - 1);
            v152 -= 8;
            *--v161 = v169;
          }
          while (v152 != v155);
          v155 = *(char **)(v4 + 752);
        }
      }
      *(_QWORD *)(v4 + 752) = v161;
      *(_QWORD *)(v4 + 760) = v154;
      *(_QWORD *)(v4 + 768) = v162;
      if (v155)
        operator delete(v155);
      goto LABEL_157;
    }
LABEL_159:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return result;
}

uint64_t md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1::operator()(uint64_t a1, _OWORD *a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v8 = *(_QWORD *)(a1 + 720);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    geo::Pool<md::MuninJunction>::allocateSlab(*(uint64_t ***)(a1 + 720));
    v9 = *(_QWORD *)(v8 + 40);
  }
  *(_QWORD *)(v8 + 40) = *(_QWORD *)v9;
  *(_QWORD *)v9 = &off_1E428E0C8;
  *(_QWORD *)(v9 + 8) = 0;
  *(_OWORD *)(v9 + 16) = *a2;
  v10 = *a3;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 64) = a4;
  *(_WORD *)(v9 + 68) = 0;
  v11 = *(char **)(a1 + 808);
  v12 = *(_QWORD *)(a1 + 816);
  if ((unint64_t)v11 >= v12)
  {
    v14 = *(char **)(a1 + 800);
    v15 = (v11 - v14) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v12 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 == v14)
    {
      v14 = v11;
    }
    else
    {
      v22 = v11 - v14 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v14 - v19) < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = &v19[8 * v15 - 16];
      v25 = v11 - 16;
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v28 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v20 = v28;
        }
        while (v11 != v14);
        v14 = *(char **)(a1 + 800);
      }
    }
    *(_QWORD *)(a1 + 800) = v20;
    *(_QWORD *)(a1 + 808) = v13;
    *(_QWORD *)(a1 + 816) = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v11 = v9;
    v13 = v11 + 8;
  }
  *(_QWORD *)(a1 + 808) = v13;
  return v9;
}

char *geo::Pool<md::MuninRoadEdge>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 120 * (_QWORD)a1[3] - 120;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    v14 = &v3[v12];
    do
    {
      *(_QWORD *)v14 = v11;
      v14 -= 120;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 120);
  }
  a1[5] = v11;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::__unordered_map_hasher<GeoCodecsRoadFeature const*,std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::hash<GeoCodecsRoadFeature const*>,std::equal_to<GeoCodecsRoadFeature const*>,true>,std::__unordered_map_equal<GeoCodecsRoadFeature const*,std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::equal_to<GeoCodecsRoadFeature const*>,std::hash<GeoCodecsRoadFeature const*>,true>,std::allocator<std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>>>::__emplace_unique_key_args<GeoCodecsRoadFeature const*,std::piecewise_construct_t const&,std::tuple<GeoCodecsRoadFeature const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FA0B4AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *geo::Pool<md::MuninJunction>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 72 * (_QWORD)a1[3] - 72;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    v14 = &v3[v12];
    do
    {
      *(_QWORD *)v14 = v11;
      v14 -= 72;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 72);
  }
  a1[5] = v11;
  return result;
}

void std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(GeoCodecsRoadEdge *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42D05E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D05E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(GeoCodecsRoadEdge *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  _QWORD *v19;
  md::MuninJunction *v20;
  _QWORD *result;
  unint64_t v22;
  md::MuninJunction *v23;
  _QWORD *v24;
  std::__shared_weak_count **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  md::MuninJunction **v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  md::MuninJunction *v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  md::MuninJunction **v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  md::MuninJunction **v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  md::MuninJunction **v73;
  uint64_t v74;
  __int128 v75;
  md::MuninJunction *v76;
  geo::codec::VectorTile **v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  const float *v107;
  float64x2_t v108;
  unint64_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float *v120;
  double v121;
  double v122;
  uint64_t v123;
  const md::MuninRoadEdge *v124;
  char *v125;
  unint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  const md::MuninRoadEdge **v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  const md::MuninRoadEdge *v142;
  md::MuninJunction *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  __int128 v149;
  double v150;
  double v151;
  uint64_t v152;
  float32x4x2_t v153;

  v152 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 40);
  if ((*a2)[5] == (*a2)[6])
    goto LABEL_19;
  *(_QWORD *)&v149 = 0;
  v5 = geo::codec::multiSectionFeaturePoints((_QWORD *)*v3, 0, &v149);
  v6 = v149 - 1;
  v8 = v3[1];
  v7 = v3[2];
  v9 = !v8 || v8 == v6;
  v10 = v9 || v7 == 0;
  if (v10 || v7 == v6)
  {
    if (v6 < v8)
      v8 = v149 - 1;
    v12 = (float *)&v5[v8];
    if (v6 >= v7)
      v6 = v3[2];
    v13 = (float *)&v5[v6];
    if (*v12 >= 0.001)
    {
      if (*v12 <= 0.999)
        v14 = 0;
      else
        v14 = 2;
    }
    else
    {
      v14 = 1;
    }
    v16 = v12[1];
    if (v16 >= 0.001)
    {
      if (v16 > 0.999)
        v14 |= 4uLL;
    }
    else
    {
      v14 |= 8uLL;
    }
    if (*v13 >= 0.001)
    {
      if (*v13 <= 0.999)
        v17 = 0;
      else
        v17 = 2;
    }
    else
    {
      v17 = 1;
    }
    v18 = v13[1];
    if (v18 >= 0.001)
    {
      if (v18 > 0.999)
        v17 |= 4uLL;
    }
    else
    {
      v17 |= 8uLL;
    }
    v15 = v17 | v14;
  }
  else
  {
LABEL_19:
    v15 = 0;
  }
  v19 = (_QWORD *)*v3;
  v147 = v19;
  v148 = v15;
  v20 = **(md::MuninJunction ***)(a1 + 8);
  result = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)(a1 + 16), (unint64_t)v19);
  if (!result)
  {
    v143 = v20;
    v22 = v3[6];
    if (v22)
    {
      v23 = (md::MuninJunction *)md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0::operator()(*(int8x8_t ***)(a1 + 24), v22);
      if (v23)
        goto LABEL_100;
      v19 = (_QWORD *)*v3;
    }
    v146 = 0;
    v24 = geo::codec::multiSectionFeaturePoints(v19, 0, &v146);
    v149 = 0uLL;
    v25 = (std::__shared_weak_count **)*v3;
    v26 = *(std::__shared_weak_count **)(*v3 + 8);
    if (v26)
    {
      v26 = std::__shared_weak_count::lock(v26);
      v27 = v26;
      if (v26)
        v26 = *v25;
    }
    else
    {
      v27 = 0;
    }
    geo::codec::VectorTile::key((geo::codec::VectorTile *)v26);
    *(_QWORD *)&v149 = GEOTileKeyMake();
    *((_QWORD *)&v149 + 1) = v28;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    GEOMapRectForGEOTileKey();
    v31 = *(double *)(MEMORY[0x1E0D266E8] + 16);
    v32 = *(double *)(MEMORY[0x1E0D266E8] + 24);
    v145 = v24[v3[2]];
    *(double *)&v144 = v33 / v31 + ((v36 + v33) / v31 - v33 / v31) * *(float *)&v145;
    *((double *)&v144 + 1) = 1.0 - (v35 + v34) / v32 + ((v35 + v34) / v32 - v34 / v32) * *((float *)&v145 + 1);
    v37 = (v148 & 0xF) == 0;
    if ((v148 & 0xF) != 0)
      v38 = 2;
    else
      v38 = 1;
    v39 = md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1::operator()(**(_QWORD **)(a1 + 32), &v144, &v145, v38);
    v23 = (md::MuninJunction *)v39;
    if (!v37)
    {
      v40 = *(uint64_t **)(v4 + 832);
      v41 = *(_QWORD *)(v4 + 840);
      if ((unint64_t)v40 >= v41)
      {
        v43 = *(uint64_t **)(v4 + 824);
        v44 = v40 - v43;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          abort();
        v46 = v41 - (_QWORD)v43;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 >> 61)
            goto LABEL_150;
          v48 = operator new(8 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = (md::MuninJunction **)&v48[8 * v44];
        *v49 = v23;
        v42 = v49 + 1;
        if (v40 == v43)
        {
          v43 = v40;
        }
        else
        {
          v50 = (char *)v40 - (char *)v43 - 8;
          if (v50 < 0x58)
            goto LABEL_156;
          if ((unint64_t)((char *)v43 - v48) < 0x20)
            goto LABEL_156;
          v51 = (v50 >> 3) + 1;
          v52 = &v48[8 * v44 - 16];
          v53 = v40 - 2;
          v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *v52 = v55;
            v52 -= 2;
            v53 -= 4;
            v54 -= 4;
          }
          while (v54);
          v49 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
          v40 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
          if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_156:
            do
            {
              v56 = (md::MuninJunction *)*--v40;
              *--v49 = v56;
            }
            while (v40 != v43);
            v43 = *(uint64_t **)(v4 + 824);
          }
        }
        *(_QWORD *)(v4 + 824) = v49;
        *(_QWORD *)(v4 + 832) = v42;
        *(_QWORD *)(v4 + 840) = &v48[8 * v47];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v40 = v39;
        v42 = v40 + 1;
      }
      *(_QWORD *)(v4 + 832) = v42;
      v57 = std::__hash_table<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::__unordered_map_hasher<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::hash<std::bitset<4ul>>,std::equal_to<std::bitset<4ul>>,true>,std::__unordered_map_equal<std::bitset<4ul>,std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>,std::equal_to<std::bitset<4ul>>,std::hash<std::bitset<4ul>>,true>,std::allocator<std::__hash_value_type<std::bitset<4ul>,std::vector<md::MuninJunction const*>>>>::__emplace_unique_key_args<std::bitset<4ul>,std::piecewise_construct_t const&,std::tuple<std::bitset<4ul> const&>,std::tuple<>>((uint64_t *)(v4 + 848), v148, &v148);
      v58 = v57;
      v60 = (md::MuninJunction **)v57[4];
      v59 = v57[5];
      if ((unint64_t)v60 >= v59)
      {
        v62 = (char *)v57[3];
        v63 = ((char *)v60 - v62) >> 3;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          abort();
        v65 = v59 - (_QWORD)v62;
        if (v65 >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          if (v66 >> 61)
            goto LABEL_150;
          v67 = (char *)operator new(8 * v66);
        }
        else
        {
          v67 = 0;
        }
        v68 = (md::MuninJunction **)&v67[8 * v63];
        v69 = &v67[8 * v66];
        *v68 = v23;
        v61 = v68 + 1;
        if (v60 != (md::MuninJunction **)v62)
        {
          v70 = (char *)v60 - v62 - 8;
          if (v70 < 0x58)
            goto LABEL_157;
          if ((unint64_t)(v62 - v67) < 0x20)
            goto LABEL_157;
          v71 = (v70 >> 3) + 1;
          v72 = &v67[8 * v63 - 16];
          v73 = v60 - 2;
          v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *(_OWORD *)v73;
            *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
            *(_OWORD *)v72 = v75;
            v72 -= 32;
            v73 -= 4;
            v74 -= 4;
          }
          while (v74);
          v68 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
          v60 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
          if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_157:
            do
            {
              v76 = *--v60;
              *--v68 = v76;
            }
            while (v60 != (md::MuninJunction **)v62);
          }
          v60 = (md::MuninJunction **)v58[3];
        }
        v58[3] = v68;
        v58[4] = v61;
        v58[5] = v69;
        if (v60)
          operator delete(v60);
      }
      else
      {
        *v60 = v23;
        v61 = v60 + 1;
      }
      v58[4] = v61;
    }
LABEL_100:
    v77 = *(geo::codec::VectorTile ***)(a1 + 48);
    *(_QWORD *)&v144 = 0;
    v78 = geo::codec::multiSectionFeaturePoints((_QWORD *)*v3, 0, &v144);
    v80 = v3[1];
    v79 = v3[2];
    if (v79 >= v80)
      v81 = v3[1];
    else
      v81 = v3[2];
    if (v80 > v79)
      v79 = v3[1];
    if ((uint64_t)v144 - 1 >= v81)
      v82 = v81;
    else
      v82 = v144 - 1;
    if ((uint64_t)v144 - 1 >= v79)
      v83 = v79;
    else
      v83 = v144 - 1;
    geo::codec::VectorTile::key(*v77);
    *(_QWORD *)&v149 = GEOTileKeyMake();
    *((_QWORD *)&v149 + 1) = v84;
    GEOMapRectForGEOTileKey();
    if (v82 <= v83)
    {
      v93 = *(double *)(MEMORY[0x1E0D266E8] + 16);
      v94 = *(double *)(MEMORY[0x1E0D266E8] + 24);
      v95 = v85 / v93;
      v96 = (v88 + v86) / v94;
      v97 = 1.0 - v96;
      v98 = (v87 + v85) / v93 - v85 / v93;
      v99 = v96 - v86 / v94;
      v100 = v82 + 1;
      if (v82 + 1 <= v83 + 1)
        v100 = v83 + 1;
      v101 = v100 - v82;
      if (v101 >= 4)
      {
        v102 = v101 & 0xFFFFFFFFFFFFFFFCLL;
        v103 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v98, 0);
        v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v95, 0);
        v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99, 0);
        v106 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v97, 0);
        v107 = (const float *)&v78[v82];
        v108 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v109 = v101 & 0xFFFFFFFFFFFFFFFCLL;
        v110 = v108;
        v111 = v108;
        v112 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v113 = v108;
        v114 = v112;
        v115 = v112;
        v116 = v112;
        do
        {
          v153 = vld2q_f32(v107);
          v107 += 8;
          v117 = vmlaq_f64(v104, vcvtq_f64_f32(*(float32x2_t *)v153.val[0].f32), v103);
          v118 = vmlaq_f64(v104, vcvt_hight_f64_f32(v153.val[0]), v103);
          v119 = vcvt_hight_f64_f32(v153.val[1]);
          v153.val[1] = (float32x4_t)vmlaq_f64(v106, vcvtq_f64_f32(*(float32x2_t *)v153.val[1].f32), v105);
          v153.val[0] = (float32x4_t)vmlaq_f64(v106, v119, v105);
          v116 = vminnmq_f64(v118, v116);
          v115 = vminnmq_f64(v117, v115);
          v113 = vmaxnmq_f64(v113, v118);
          v111 = vmaxnmq_f64(v111, v117);
          v114 = vminnmq_f64((float64x2_t)v153.val[0], v114);
          v112 = vminnmq_f64((float64x2_t)v153.val[1], v112);
          v110 = vmaxnmq_f64(v110, (float64x2_t)v153.val[0]);
          v108 = vmaxnmq_f64(v108, (float64x2_t)v153.val[1]);
          v109 -= 4;
        }
        while (v109);
        v90 = vminnmvq_f64(vminnmq_f64(v115, v116));
        v91 = vminnmvq_f64(vminnmq_f64(v112, v114));
        v89 = vmaxnmvq_f64(vmaxnmq_f64(v111, v113));
        v92 = vmaxnmvq_f64(vmaxnmq_f64(v108, v110));
        if (v101 == v102)
          goto LABEL_123;
        v82 += v102;
      }
      else
      {
        v91 = 1.79769313e308;
        v92 = -1.79769313e308;
        v89 = -1.79769313e308;
        v90 = 1.79769313e308;
      }
      v120 = (float *)&v78[v82] + 1;
      do
      {
        v121 = v95 + v98 * *(v120 - 1);
        v122 = v97 + v99 * *v120;
        v90 = fmin(v121, v90);
        v89 = fmax(v89, v121);
        v91 = fmin(v122, v91);
        v92 = fmax(v92, v122);
        ++v82;
        v120 += 2;
      }
      while (v82 <= v83);
    }
    else
    {
      v89 = -1.79769313e308;
      v90 = 1.79769313e308;
      v91 = 1.79769313e308;
      v92 = -1.79769313e308;
    }
LABEL_123:
    *(double *)&v149 = v90;
    *((double *)&v149 + 1) = v91;
    v150 = v89;
    v151 = v92;
    v123 = *(_QWORD *)(v4 + 728);
    v124 = *(const md::MuninRoadEdge **)(v123 + 40);
    if (!v124)
    {
      geo::Pool<md::MuninRoadEdge>::allocateSlab(*(uint64_t ***)(v4 + 728));
      v124 = *(const md::MuninRoadEdge **)(v123 + 40);
    }
    *(_QWORD *)(v123 + 40) = *(_QWORD *)v124;
    md::MuninRoadEdge::MuninRoadEdge(v124, *v3, &v149, v3[1], v3[2], v143, v23);
    v125 = *(char **)(v4 + 760);
    v126 = *(_QWORD *)(v4 + 768);
    if ((unint64_t)v125 < v126)
    {
      *(_QWORD *)v125 = v124;
      v127 = v125 + 8;
LABEL_148:
      *(_QWORD *)(v4 + 760) = v127;
      result = std::__hash_table<std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::__unordered_map_hasher<GeoCodecsRoadFeature const*,std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::hash<GeoCodecsRoadFeature const*>,std::equal_to<GeoCodecsRoadFeature const*>,true>,std::__unordered_map_equal<GeoCodecsRoadFeature const*,std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>,std::equal_to<GeoCodecsRoadFeature const*>,std::hash<GeoCodecsRoadFeature const*>,true>,std::allocator<std::__hash_value_type<GeoCodecsRoadFeature const*,md::MuninRoadEdge *>>>::__emplace_unique_key_args<GeoCodecsRoadFeature const*,std::piecewise_construct_t const&,std::tuple<GeoCodecsRoadFeature const* const&>,std::tuple<>>(*(float **)(a1 + 16), (unint64_t)v147, &v147);
      result[3] = v124;
      return result;
    }
    v128 = *(char **)(v4 + 752);
    v129 = (v125 - v128) >> 3;
    v130 = v129 + 1;
    if ((unint64_t)(v129 + 1) >> 61)
      abort();
    v131 = v126 - (_QWORD)v128;
    if (v131 >> 2 > v130)
      v130 = v131 >> 2;
    if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
      v132 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v132 = v130;
    if (!v132)
    {
      v133 = 0;
      goto LABEL_137;
    }
    if (!(v132 >> 61))
    {
      v133 = operator new(8 * v132);
LABEL_137:
      v134 = (const md::MuninRoadEdge **)&v133[8 * v129];
      v135 = &v133[8 * v132];
      *v134 = v124;
      v127 = v134 + 1;
      if (v125 == v128)
      {
        v128 = v125;
      }
      else
      {
        v136 = v125 - v128 - 8;
        if (v136 < 0x58)
          goto LABEL_158;
        if ((unint64_t)(v128 - v133) < 0x20)
          goto LABEL_158;
        v137 = (v136 >> 3) + 1;
        v138 = &v133[8 * v129 - 16];
        v139 = v125 - 16;
        v140 = v137 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v141 = *(_OWORD *)v139;
          *(v138 - 1) = *((_OWORD *)v139 - 1);
          *v138 = v141;
          v138 -= 2;
          v139 -= 32;
          v140 -= 4;
        }
        while (v140);
        v134 -= v137 & 0x3FFFFFFFFFFFFFFCLL;
        v125 -= 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
        if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            v142 = (const md::MuninRoadEdge *)*((_QWORD *)v125 - 1);
            v125 -= 8;
            *--v134 = v142;
          }
          while (v125 != v128);
          v128 = *(char **)(v4 + 752);
        }
      }
      *(_QWORD *)(v4 + 752) = v134;
      *(_QWORD *)(v4 + 760) = v127;
      *(_QWORD *)(v4 + 768) = v135;
      if (v128)
        operator delete(v128);
      goto LABEL_148;
    }
LABEL_150:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return result;
}

void sub_19FA0BFCC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *md::MuninRoadNetworkData::junctionsOnTileEdge(int8x8_t *a1, _QWORD *a2)
{
  unsigned __int8 v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  int8x8_t *v15;

  if ((v2 & 1) == 0)
  {
    v14 = a2;
    v15 = a1;
    a2 = v14;
    a1 = v15;
    if (v13)
    {
      __cxa_atexit((void (*)(void *))std::vector<md::MuninJunction const*>::~vector[abi:nn180100], &md::MuninRoadNetworkData::junctionsOnTileEdge(std::bitset<4ul> const&)const::kSentinel, &dword_19F029000);
      a2 = v14;
      a1 = v15;
    }
  }
  v3 = a1[107];
  if (v3)
  {
    v4 = *a2;
    v5 = (uint8x8_t)vcnt_s8(v3);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = *a2;
      if (v4 >= *(_QWORD *)&v3)
        v6 = v4 % *(_QWORD *)&v3;
    }
    else
    {
      v6 = (*(_QWORD *)&v3 - 1) & v4;
    }
    v7 = *(uint64_t ***)(*(_QWORD *)&a1[106] + 8 * v6);
    if (v7)
    {
      v8 = *v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v3 - 1;
          result = (uint64_t *)&md::MuninRoadNetworkData::junctionsOnTileEdge(std::bitset<4ul> const&)const::kSentinel;
          while (1)
          {
            v11 = v8[1];
            if (v4 == v11)
            {
              if (((*((_DWORD *)v8 + 4) ^ v4) & 0xFLL) == 0)
                return v8 + 3;
            }
            else if ((v11 & v9) != v6)
            {
              return result;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              return result;
          }
        }
        result = (uint64_t *)&md::MuninRoadNetworkData::junctionsOnTileEdge(std::bitset<4ul> const&)const::kSentinel;
        while (1)
        {
          v12 = v8[1];
          if (v4 == v12)
          {
            if (((*((_DWORD *)v8 + 4) ^ v4) & 0xFLL) == 0)
              return v8 + 3;
          }
          else
          {
            if (v12 >= *(_QWORD *)&v3)
              v12 %= *(_QWORD *)&v3;
            if (v12 != v6)
              return result;
          }
          v8 = (uint64_t *)*v8;
          if (!v8)
            return result;
        }
      }
    }
  }
  return (uint64_t *)&md::MuninRoadNetworkData::junctionsOnTileEdge(std::bitset<4ul> const&)const::kSentinel;
}

uint64_t std::vector<md::MuninJunction const*>::~vector[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0,std::allocator<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0,std::allocator<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427B898;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0,std::allocator<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B898;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0,std::allocator<md::ita::PrepareRenderableData::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &)>::operator()(_QWORD *result, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t RenderableData;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x2_t v63;
  float32x2_t v68;
  float v69;
  float v70;
  __int128 v71;
  __int128 v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  double v79;
  __int128 v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[8];
  char v115;
  _QWORD v116[2];
  int v117;
  _QWORD *v118;
  _QWORD v119[2];
  int v120;
  _QWORD *v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)result[1];
  v6 = *a2;
  v79 = *(double *)&v6;
  v7 = v5[1166];
  if (v6 < (unint64_t)((v5[1167] - v7) >> 3))
  {
    v8 = *(_QWORD *)(v7 + 8 * v6);
    if (v8 && HIDWORD(v6) == HIDWORD(v8))
    {
      v10 = v5[1169] + ((unint64_t)*(_QWORD *)(v7 + 8 * v6) << 8);
      if (v10 != v5[1170] && v10 != 0)
      {
        v14 = result;
        v15 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v5 + 1158), v6, &v79);
        ++v15[3];
        v16 = *(_QWORD **)v14[1];
        v17 = *a2;
        v79 = *(double *)&v17;
        v18 = v16[1166];
        if (v17 < (unint64_t)((v16[1167] - v18) >> 3)
          && ((v19 = *(_QWORD *)(v18 + 8 * v17)) != 0 ? (v20 = HIDWORD(v17) == HIDWORD(v19)) : (v20 = 0),
              v20))
        {
          v22 = v16[1169] + ((unint64_t)*(_QWORD *)(v18 + 8 * v17) << 8);
          v21 = v16[1170];
        }
        else
        {
          v21 = v16[1170];
          v22 = v21;
        }
        if (v22 == v21)
          v23 = 0;
        else
          v23 = (_OWORD *)v22;
        if (v23)
        {
          v24 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v16 + 1158), v17, &v79);
          ++v24[3];
          v16 = *(_QWORD **)v14[1];
        }
        v25 = v23[5];
        v114[4] = v23[4];
        v114[5] = v25;
        v26 = v23[7];
        v114[6] = v23[6];
        v114[7] = v26;
        v27 = v23[1];
        v114[0] = *v23;
        v114[1] = v27;
        v28 = v23[3];
        v114[2] = v23[2];
        v114[3] = v28;
        RenderableData = md::VKMRenderResourcesStore::getRenderableData((uint64_t)v16, *a4);
        gm::operator*<double,4,4,4>(&v79, (double *)v14[3], (double *)v114);
        *(float *)&v30 = v79;
        *(float *)&v31 = *(double *)&v80;
        *(_QWORD *)&v110 = __PAIR64__(v31, v30);
        *(float *)&v32 = *((double *)&v80 + 1);
        *(float *)&v33 = v81;
        *((_QWORD *)&v110 + 1) = __PAIR64__(v33, v32);
        *(float *)&v34 = v82;
        *(float *)&v35 = v83;
        *(_QWORD *)&v111 = __PAIR64__(v35, v34);
        *(float *)&v36 = v84;
        *(float *)&v37 = v85;
        *((_QWORD *)&v111 + 1) = __PAIR64__(v37, v36);
        *(float *)&v38 = v86;
        *(float *)&v39 = v87;
        *(_QWORD *)&v112 = __PAIR64__(v39, v38);
        *(float *)&v40 = v88;
        *(float *)&v41 = v89;
        *((_QWORD *)&v112 + 1) = __PAIR64__(v41, v40);
        *(float *)&v42 = v90;
        *(float *)&v43 = v91;
        *(_QWORD *)&v113 = __PAIR64__(v43, v42);
        *(float *)&v44 = v92;
        *(float *)&v45 = v93;
        *((_QWORD *)&v113 + 1) = __PAIR64__(v45, v44);
        v46 = *(float *)&v33 + *(float *)&v30;
        v47 = *(float *)&v37 + *(float *)&v34;
        v48 = *(float *)&v41 + *(float *)&v38;
        v49 = *(float *)&v45 + *(float *)&v42;
        v50 = *(float *)&v33 - *(float *)&v30;
        v51 = *(float *)&v37 - *(float *)&v34;
        v52 = *(float *)&v41 - *(float *)&v38;
        v53 = *(float *)&v45 - *(float *)&v42;
        v54 = *(float *)&v33 + *(float *)&v31;
        v55 = *(float *)&v37 + *(float *)&v35;
        v56 = *(float *)&v41 + *(float *)&v39;
        v57 = sqrtf((float)((float)(v54 * v54) + (float)(v55 * v55)) + (float)(v56 * v56));
        v58 = *(float *)&v33 - *(float *)&v31;
        v59 = *(float *)&v37 - *(float *)&v35;
        v60 = *(float *)&v41 - *(float *)&v39;
        v61 = *(float *)&v37 - *(float *)&v36;
        v62 = *(float *)&v41 - *(float *)&v40;
        v63.i32[0] = v32;
        v63.f32[1] = *(float *)&v33 - *(float *)&v32;
        __asm { FMOV            V9.2S, #1.0 }
        v68 = vdiv_f32(_D9, vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v63, v63), (float32x2_t)__PAIR64__(LODWORD(v61), v36), (float32x2_t)__PAIR64__(LODWORD(v61), v36)), (float32x2_t)__PAIR64__(LODWORD(v62), v40), (float32x2_t)__PAIR64__(LODWORD(v62), v40))));
        *(float *)&v79 = *(float *)&v32 * v68.f32[0];
        *((float *)&v79 + 1) = *(float *)&v36 * v68.f32[0];
        *(float *)&v80 = *(float *)&v40 * v68.f32[0];
        v63.i32[0] = v44;
        *(float32x2_t *)((char *)&v80 + 4) = vmul_f32(v68, v63);
        HIDWORD(v80) = vmuls_lane_f32(v61, v68, 1);
        v81 = COERCE_DOUBLE(__PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(*(float *)&v45 - *(float *)&v44, v68, 1)), COERCE_UNSIGNED_INT(vmuls_lane_f32(v62, v68, 1))));
        *(float *)&v82 = (float)(1.0 / v57) * v54;
        *((float *)&v82 + 1) = (float)(1.0 / v57) * v55;
        *(float *)&v83 = (float)(1.0 / v57) * v56;
        v68.f32[0] = 1.0 / sqrtf((float)((float)(v58 * v58) + (float)(v59 * v59)) + (float)(v60 * v60));
        *((float *)&v83 + 1) = (float)(*(float *)&v45 + *(float *)&v43) * (float)(1.0 / v57);
        *(float *)&v84 = v68.f32[0] * v58;
        *((float *)&v84 + 1) = v68.f32[0] * v59;
        *(float *)&v85 = v68.f32[0] * v60;
        v69 = 1.0 / sqrtf((float)((float)(v46 * v46) + (float)(v47 * v47)) + (float)(v48 * v48));
        *((float *)&v85 + 1) = (float)(*(float *)&v45 - *(float *)&v43) * v68.f32[0];
        *(float *)&v86 = v69 * v46;
        *((float *)&v86 + 1) = v69 * v47;
        *(float *)&v87 = v69 * v48;
        v70 = 1.0 / sqrtf((float)((float)(v50 * v50) + (float)(v51 * v51)) + (float)(v52 * v52));
        *((float *)&v87 + 1) = v49 * v69;
        *(float *)&v88 = v70 * v50;
        *((float *)&v88 + 1) = v70 * v51;
        *(float *)&v89 = v70 * v52;
        *((float *)&v89 + 1) = v53 * v70;
        geo::Frustum<float>::calculateCorners((float *)&v79, (float *)&v110);
        *(double *)RenderableData = v79;
        *(_OWORD *)(RenderableData + 8) = v80;
        *(double *)(RenderableData + 24) = v81;
        *(double *)(RenderableData + 32) = v82;
        *(double *)(RenderableData + 40) = v83;
        *(double *)(RenderableData + 48) = v84;
        *(double *)(RenderableData + 56) = v85;
        *(double *)(RenderableData + 64) = v86;
        *(double *)(RenderableData + 72) = v87;
        *(double *)(RenderableData + 80) = v88;
        *(double *)(RenderableData + 88) = v89;
        *(double *)(RenderableData + 96) = v90;
        *(double *)(RenderableData + 104) = v91;
        *(double *)(RenderableData + 112) = v92;
        *(double *)(RenderableData + 120) = v93;
        *(_DWORD *)(RenderableData + 128) = v94;
        *(_DWORD *)(RenderableData + 132) = v95;
        *(_DWORD *)(RenderableData + 136) = v96;
        *(_DWORD *)(RenderableData + 140) = v97;
        *(_DWORD *)(RenderableData + 144) = v98;
        *(_DWORD *)(RenderableData + 148) = v99;
        *(_DWORD *)(RenderableData + 152) = v100;
        *(_DWORD *)(RenderableData + 156) = v101;
        *(_DWORD *)(RenderableData + 160) = v102;
        *(_DWORD *)(RenderableData + 164) = v103;
        *(_DWORD *)(RenderableData + 168) = v104;
        *(_DWORD *)(RenderableData + 172) = v105;
        *(_DWORD *)(RenderableData + 176) = v106;
        *(_DWORD *)(RenderableData + 180) = v107;
        *(_DWORD *)(RenderableData + 184) = v108;
        *(_DWORD *)(RenderableData + 188) = v109;
        v71 = v111;
        *(_OWORD *)(RenderableData + 192) = v110;
        *(_OWORD *)(RenderableData + 208) = v71;
        v72 = v113;
        *(_OWORD *)(RenderableData + 224) = v112;
        *(_OWORD *)(RenderableData + 240) = v72;
        v73 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
        v74 = HIDWORD(*v73);
        v75 = *v73 << 32;
        v116[0] = &off_1E427D8A8;
        v116[1] = v75;
        v117 = v74;
        v118 = v116;
        v119[0] = &off_1E427D8A8;
        v121 = v119;
        v119[1] = v75;
        v120 = v74;
        v122 = 0;
        ecs2::Runtime::queueCommand(v76, (uint64_t)v119);
        if (v122 != -1)
          ((void (*)(char *, _QWORD *))off_1E42FB340[v122])(&v115, v119);
        v122 = -1;
        result = v118;
        if (v118 == v116)
        {
          v77 = 4;
          result = v116;
        }
        else
        {
          if (!v118)
          {
LABEL_29:
            *(_BYTE *)(a3 + 24) = 0;
            v78 = *(_QWORD **)v14[2];
            *(_QWORD *)a3 = v78[62];
            *(_QWORD *)(a3 + 8) = v78[63];
            *(_QWORD *)(a3 + 16) = v78[64];
            return result;
          }
          v77 = 5;
        }
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v77))();
        goto LABEL_29;
      }
    }
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,md::ls::NeedsUpdate<ggl::Tile::View> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,md::ls::NeedsUpdate<ggl::Tile::View> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D8A8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,md::ls::NeedsUpdate<ggl::Tile::View> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D8A8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,md::ls::NeedsUpdate<ggl::Tile::View> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsUpdate<ggl::Tile::View>>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void ggl::FlyoverRoadFillTextured::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverRoadFillTextured::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoadFillTextured::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoadFillTextured::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoadFillTextured::DefaultPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::DefaultPipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, (uint64_t)a3);
    v17 = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, 0);
  }
  *(_QWORD *)a1 = &off_1E42BB150;
  v19 = *(uint64_t **)(a1 + 64);
  v20 = *a4;
  v21 = a4[1];
  *v19 = *a4;
  v19[1] = 0;
  v22 = *(_QWORD **)(a1 + 160);
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)v22[1];
  *v22 = v20;
  v22[1] = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(_QWORD *)(a1 + 64);
  v29 = *a5;
  v30 = a5[1];
  *(_QWORD *)(v28 + 16) = *a5;
  *(_QWORD *)(v28 + 24) = 0;
  v31 = *(_QWORD *)(a1 + 160);
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(v31 + 24);
  *(_QWORD *)(v31 + 16) = v29;
  *(_QWORD *)(v31 + 24) = v30;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(_QWORD *)(a1 + 64);
  v38 = *a6;
  v39 = a6[1];
  *(_QWORD *)(v37 + 32) = *a6;
  *(_QWORD *)(v37 + 40) = 0;
  v40 = *(_QWORD *)(a1 + 160);
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(v40 + 40);
  *(_QWORD *)(v40 + 32) = v38;
  *(_QWORD *)(v40 + 40) = v39;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(_QWORD *)(a1 + 64);
  v47 = *a7;
  v48 = a7[1];
  *(_QWORD *)(v46 + 48) = *a7;
  *(_QWORD *)(v46 + 56) = 0;
  v49 = *(_QWORD *)(a1 + 160);
  if (v48)
  {
    v50 = (unint64_t *)(v48 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(std::__shared_weak_count **)(v49 + 56);
  *(_QWORD *)(v49 + 48) = v47;
  *(_QWORD *)(v49 + 56) = v48;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  **(_QWORD **)(a1 + 96) = a8;
  return a1;
}

uint64_t ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v101 = a2;
    v102 = a3;
    a2 = v101;
    a3 = v102;
    a4 = v89;
    if (v90)
    {
      if ((v91 & 1) == 0
      {
        if ((v95 & 1) == 0
        {
          if ((v99 & 1) == 0
          {
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
          }
          ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
          unk_1ECE43B18 = 1;
        }
        ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
        unk_1EE57FCA0 = &ggl::FoggedDiffuseBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
        qword_1EE57FCA8 = 0;
        if ((v96 & 1) == 0
        {
          ggl::FoggedDiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          *(_QWORD *)algn_1EE57FCD8 = ggl::Tile::View::reflection(void)::reflection;
          qword_1EE57FCE0 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1EE57FCE8 = ggl::Building::Style::reflection(void)::reflection;
          qword_1EE57FCF0 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1EE57FCF8 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1EE57FD00 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1EE57FCB0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
        unk_1EE57FCB8 = xmmword_19FFB37A0;
      }
      ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseBuildingTopShader";
        if ((v97 & 1) == 0
        {
          v100 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
          qword_1ECE42578 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1ECE42580 = ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42588 = 1;
          unk_1ECE42590 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42598 = 6;
          unk_1ECE425A0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE425A8 = 0;
          unk_1ECE425B0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v100;
          *(_DWORD *)algn_1ECE42574 = 0;
          qword_1ECE425B8 = 0;
          unk_1ECE425C0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE425D0 = 0;
          unk_1ECE425D8 = 0;
          qword_1ECE425C8 = 0;
        }
        qword_1ECE3B9E8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3B9F0 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
        if ((v98 & 1) == 0
        {
          ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x1AC1081B8;
          qword_1ECE42D40 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1ECE42D48 = 0;
          qword_1ECE42D50 = 0;
          unk_1ECE42D58 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42D60 = 3;
          unk_1ECE42D68 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42D70 = 0;
          unk_1ECE42D78 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42D80 = 0;
          unk_1ECE42D88 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42D98 = 0;
          unk_1ECE42DA0 = 0;
          qword_1ECE42D90 = 0;
        }
        qword_1ECE3B9F8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BA00 = -1408204360;
        qword_1ECE3BA08 = (uint64_t)ggl::foggedDiffuseBuildingTopShaderShaderConstants(void)::ref;
        unk_1ECE3BA10 = 7;
        qword_1ECE3BA18 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderTextures(void)::ref;
        unk_1ECE3BA20 = 0;
        qword_1ECE3BA28 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderSamplers(void)::ref;
        unk_1ECE3BA30 = 0;
      }
      qword_1ECE31C78 = (uint64_t)&ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57FE68 = 0;
        qword_1EE57FE70 = (uint64_t)"";
        dword_1EE57FE78 = 0;
        qword_1EE57FE80 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57FE88 = 1;
      }
      qword_1ECE31C80 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31C88 = 1;
      qword_1ECE31C90 = 0;
      unk_1ECE31C98 = 0;
      qword_1ECE31CA0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31CA8 = 0;
      if ((v94 & 1) == 0
      {
        ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57FD18 = 0;
        qword_1EE57FD20 = (uint64_t)"skyfog";
        dword_1EE57FD28 = 3;
        qword_1EE57FD30 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57FD38 = xmmword_19FFB3720;
        qword_1EE57FD48 = 1;
        unk_1EE57FD50 = "view";
        dword_1EE57FD58 = 3;
        qword_1EE57FD60 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57FD68 = vdupq_n_s64(2uLL);
        qword_1EE57FD78 = 2;
        unk_1EE57FD80 = "scale";
        dword_1EE57FD88 = 3;
        qword_1EE57FD90 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57FD98 = xmmword_19FFB3730;
        qword_1EE57FDA8 = 3;
        unk_1EE57FDB0 = "style";
        dword_1EE57FDB8 = 3;
        qword_1EE57FDC0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57FDC8 = xmmword_19FFB3740;
        qword_1EE57FDD8 = 4;
        unk_1EE57FDE0 = "gradient";
        dword_1EE57FDE8 = 3;
        qword_1EE57FDF0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57FDF8 = xmmword_19FFB3670;
        qword_1EE57FE08 = 5;
        unk_1EE57FE10 = "lightConfig";
        dword_1EE57FE18 = 3;
        qword_1EE57FE20 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57FE28 = xmmword_19FFB3750;
        qword_1EE57FE38 = 6;
        unk_1EE57FE40 = "fade";
        dword_1EE57FE48 = 3;
        qword_1EE57FE50 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57FE58 = 2;
      }
      qword_1ECE31CB0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31CB8 = 7;
      a4 = v89;
      a2 = v101;
      a3 = v102;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v105 = *(_OWORD *)a3;
  *(_OWORD *)&v105[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v103 = *a4;
  v104 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v103;
  *(_OWORD *)(a1 + 272) = v104;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v105;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v105[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BB2C0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

uint64_t ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

void sub_19FA0DE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA0E1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA0E23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKRoadSignArtwork;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FA0E8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::mutex *v18;
  std::__shared_weak_count *v19;
  void *v20;
  void *v21;
  void *v22;

  if (a12)
    std::__shared_weak_count::__release_weak(a12);

  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

VKImage *VKCreateRoadSignImageWithSignType(const RoadSignMetrics *a1, const RoadSignPartMetrics *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t type;
  CGColorSpace *v10;
  double width;
  double height;
  CGContext *v13;
  CGContext *v14;
  CGColor *v15;
  CGColor *v16;
  double scale;
  double contentScale;
  char v20;
  double v21;
  char v22;
  CGFloat x;
  CGFloat y;
  CGFloat v25;
  double v26;
  CGFloat MidX;
  double MidY;
  const CGFloat *v29;
  CGGradient *v30;
  double v31;
  CGImage *Image;
  VKImage *v33;
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  VKImage *v38;
  CGColor *color;
  CGColor *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  CGSize v43;
  CGPoint v44;
  CGPoint v45;
  CGRect v46;
  CGRect PathBoundingBox;
  CGRect v48;

  type = a2->_type;
  if (type <= 0x10 && ((0x10001u >> type) & 1) != 0)
    goto LABEL_42;
  v10 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  if (!v10)
    goto LABEL_42;
  width = a2->_imageSize.width;
  height = a2->_imageSize.height;
  v13 = CGBitmapContextCreate(0, (unint64_t)width, (unint64_t)height, 8uLL, 0, v10, 0x2002u);
  v14 = v13;
  if (!v13)
  {
    CGColorSpaceRelease(v10);
    return (VKImage *)0;
  }
  v46.origin.x = 0.0;
  v46.origin.y = 0.0;
  v46.size.width = width;
  v46.size.height = height;
  CGContextClearRect(v13, v46);
  if (*(_BYTE *)a3)
  {
    v40 = CGColorCreate(v10, (const CGFloat *)(a3 + 8));
    if (*(_BYTE *)(a3 + 3))
      goto LABEL_10;
  }
  else
  {
    v40 = 0;
    if (*(_BYTE *)(a3 + 3))
    {
LABEL_10:
      v15 = CGColorCreate(v10, (const CGFloat *)(a3 + 104));
      if (*(_BYTE *)(a3 + 4))
        goto LABEL_11;
LABEL_16:
      v16 = 0;
      if (!*(_BYTE *)(a3 + 5))
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  v15 = 0;
  if (!*(_BYTE *)(a3 + 4))
    goto LABEL_16;
LABEL_11:
  v16 = CGColorCreate(v10, (const CGFloat *)(a3 + 136));
  if (!*(_BYTE *)(a3 + 5))
  {
LABEL_20:
    v20 = 0;
    color = 0;
    if (!v15)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  color = CGColorCreate(v10, (const CGFloat *)(a3 + 168));
  if (!color)
    goto LABEL_20;
  CGContextSaveGState(v14);
  scale = a1->_scale;
  contentScale = a1->_contentScale;
  v43.width = round(contentScale * scale * a1->_shadowOffset.width);
  v43.height = round(contentScale * scale * a1->_shadowOffset.height);
  CGContextSetShadowWithColor(v14, v43, round(scale * a1->_shadowRadius * contentScale), color);
  generateRoadSignPath(v14, a1, a2);
  CGContextFillPath(v14);
  CGContextRestoreGState(v14);
  v20 = 1;
  if (v15)
  {
LABEL_21:
    CGContextSaveGState(v14);
    v21 = round(a1->_scale * a1->_strokeWeight * a1->_contentScale);
    CGContextSetLineWidth(v14, v21 + v21);
    CGContextSetStrokeColorWithColor(v14, v15);
    generateRoadSignPath(v14, a1, a2);
    CGContextStrokePath(v14);
    CGContextRestoreGState(v14);
  }
LABEL_22:
  if (v40)
  {
    CGContextSaveGState(v14);
    CGContextSetFillColorWithColor(v14, v40);
    v22 = v20 ^ 1;
    if (v15)
      v22 = 0;
    if ((v22 & 1) == 0)
      CGContextSetBlendMode(v14, kCGBlendModeCopy);
    generateRoadSignPath(v14, a1, a2);
    CGContextFillPath(v14);
    CGContextRestoreGState(v14);
  }
  if (*(_BYTE *)(a3 + 1))
  {
    CGContextSaveGState(v14);
    generateRoadSignPath(v14, a1, a2);
    PathBoundingBox = CGContextGetPathBoundingBox(v14);
    x = PathBoundingBox.origin.x;
    y = PathBoundingBox.origin.y;
    v25 = PathBoundingBox.size.width;
    v26 = PathBoundingBox.size.height;
    MidX = CGRectGetMidX(PathBoundingBox);
    v48.origin.x = x;
    v48.origin.y = y;
    v48.size.width = v25;
    v48.size.height = v26;
    MidY = CGRectGetMidY(v48);
    CGContextClip(v14);
    if (*(_BYTE *)(a3 + 1))
      v29 = (const CGFloat *)(a3 + 40);
    else
      v29 = 0;
    v30 = CGGradientCreateWithColorComponents(v10, v29, 0, 2uLL);
    v44.y = v26 * 0.5 + MidY;
    v45.y = MidY - v26 * 0.5;
    v44.x = MidX;
    v45.x = MidX;
    CGContextDrawLinearGradient(v14, v30, v44, v45, 0);
    CFRelease(v30);
    CGContextRestoreGState(v14);
  }
  if (v16)
  {
    CGContextSaveGState(v14);
    CGContextSetBlendMode(v14, kCGBlendModeNormal);
    v31 = round(a1->_scale * a1->_innerStrokeWeight * a1->_contentScale);
    CGContextSetLineWidth(v14, v31 + v31);
    CGContextSetStrokeColorWithColor(v14, v16);
    CGContextResetClip(v14);
    generateRoadSignPath(v14, a1, a2);
    CGContextClip(v14);
    generateRoadSignPath(v14, a1, a2);
    CGContextStrokePath(v14);
    CGContextResetClip(v14);
    CGContextRestoreGState(v14);
  }
  Image = CGBitmapContextCreateImage(v14);
  CGColorSpaceRelease(v10);
  CGContextRelease(v14);
  CGColorRelease(v40);
  CGColorRelease(v15);
  CGColorRelease(color);
  CGColorRelease(v16);
  if (Image)
  {
    v33 = [VKImage alloc];
    v34 = a1->_contentScale;
    v35 = (std::__shared_weak_count *)a4[1];
    v41 = *a4;
    v42 = v35;
    if (v35)
    {
      p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
    }
    v38 = -[VKImage initWithCGImage:scale:resourceStore:](v33, "initWithCGImage:scale:resourceStore:", Image, &v41, v34, color);
    if (v42)
      std::__shared_weak_count::__release_weak(v42);
    CGImageRelease(Image);
    -[VKImage size](v38, "size");
    return v38;
  }
LABEL_42:
  v38 = 0;
  return v38;
}

void sub_19FA0F960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CGColorSpaceRef ___ZL11_colorSpacev_block_invoke()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  _colorSpace(void)::colorspace = (uint64_t)result;
  return result;
}

void md::RegistryLogic::~RegistryLogic(md::RegistryLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428E560;
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*((_QWORD **)this + 18));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428E560;
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*((_QWORD **)this + 18));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::RegistryLogic::didBecomeInactive(md::RegistryLogic *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 144);
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*((_QWORD **)this + 18));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::RegistryLogic::debugConsoleString@<X0>(_QWORD *a1@<X0>, md::LayoutContext *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t i;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  const std::locale::facet *v25;
  char *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  size_t v30;
  std::locale::__imp *p_b;
  uint64_t v32;
  uint64_t v33;
  void *locale;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  int v41;
  const std::locale::facet *v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  size_t v47;
  void *v48;
  unint64_t v49;
  const void **v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  void *v55;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  unint64_t v64;
  void *__p[2];
  __int128 v66;
  int v67;
  uint64_t v68[19];
  std::locale v69;
  std::locale __b;
  size_t v71;
  int64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _OWORD v82[8];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v68[0] = MEMORY[0x1E0DE4FE0] + 64;
  v60 = v6;
  *(uint64_t *)((char *)&v60 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v60 + *(_QWORD *)(v60 - 24));
  std::ios_base::init(v8, &v61);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v60 = v4 + 24;
  v68[0] = v5;
  std::streambuf::basic_streambuf();
  v61 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v66 = 0u;
  v67 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n=== RegistryLogic ===\n", 23);
  v9 = (_QWORD *)a1[15];
  if (v9[48] != v9[49])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Active:", 7);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    _ZN2md15DebugOutputUtil14printContainerINSt3__16vectorIPN3gdc8RegistryENS2_9allocatorIS6_EEEEZNKS_13RegistryLogic18debugConsoleStringERKNS_13LayoutContextERKNS_17LogicDependenciesIJNS4_8TypeListIJNS_12SceneContextEEEENSF_IJEEEEE20ResolvedDependenciesERNS_15RegistryContextEE3__0EEvRNS2_19basic_ostringstreamIcNS2_11char_traitsIcEENS7_IcEEEERKT_T0_jj(&v60, *(_QWORD *)(a1[15] + 384), *(_QWORD *)(a1[15] + 392));
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
    v9 = (_QWORD *)a1[15];
  }
  if (v9[60] != v9[61])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Cached:", 7);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    _ZN2md15DebugOutputUtil14printContainerINSt3__16vectorIPN3gdc8RegistryENS2_9allocatorIS6_EEEEZNKS_13RegistryLogic18debugConsoleStringERKNS_13LayoutContextERKNS_17LogicDependenciesIJNS4_8TypeListIJNS_12SceneContextEEEENSF_IJEEEEE20ResolvedDependenciesERNS_15RegistryContextEE3__0EEvRNS2_19basic_ostringstreamIcNS2_11char_traitsIcEENS7_IcEEEERKT_T0_jj(&v60, *(_QWORD *)(a1[15] + 480), *(_QWORD *)(a1[15] + 488));
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
  }
  if (a1[19])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Recently Destroyed(<=30s):", 26);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"{\n", 2);
    v13 = (_QWORD *)a1[17];
    v58 = a1 + 18;
    if (v13 != a1 + 18)
    {
      while (1)
      {
        md::LayoutContext::frameState(a2);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  ", 2);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
        v16 = v13[5];
        v15 = v13[6];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"[", 1);
        v17 = (char *)&v60 + *(_QWORD *)(v60 - 24);
        if ((v17[32] & 5) != 0)
        {
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v92 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5)
                                                                                           + 32))(&v84, *((_QWORD *)v17 + 5), 0, 1, 16);
        }
        if (v16 != v15)
          break;
LABEL_65:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
        v44 = (_QWORD *)v13[1];
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = (_QWORD *)v13[2];
            v46 = *v45 == (_QWORD)v13;
            v13 = v45;
          }
          while (!v46);
        }
        v13 = v45;
        if (v45 == v58)
          goto LABEL_71;
      }
      for (i = v16 + 8; ; i += 8)
      {
        v19 = (char *)&v60 + *(_QWORD *)(v60 - 24);
        if ((v19[32] & 5) != 0)
        {
          memset(v82, 0, sizeof(v82));
          v83 = -1;
        }
        else
        {
          (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v19 + 5) + 32))(v82, *((_QWORD *)v19 + 5), 0, 1, 16);
        }
        std::ostream::operator<<();
        v20 = (char *)&v60 + *(_QWORD *)(v60 - 24);
        if ((v20[32] & 5) != 0)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v81 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v20 + 5)
                                                                                           + 32))(&v73, *((_QWORD *)v20 + 5), 0, 1, 16);
        }
        if (i == v15)
          goto LABEL_65;
        if (v81 > v83)
          break;
LABEL_15:
        ;
      }
      MEMORY[0x1A1AF49E0](&v69, &v60);
      if (!LOBYTE(v69.__locale_))
      {
LABEL_54:
        MEMORY[0x1A1AF49EC](&v69);
        if (v81 - v92 >= 41)
        {
          MEMORY[0x1A1AF49E0](&__b, &v60);
          if (LOBYTE(__b.__locale_))
          {
            v38 = (char *)&v60 + *(_QWORD *)(v60 - 24);
            v39 = *((_QWORD *)v38 + 5);
            v40 = *((_DWORD *)v38 + 2);
            v41 = *((_DWORD *)v38 + 36);
            if (v41 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&v60 + *(_QWORD *)(v60 - 24)));
              v42 = std::locale::use_facet(&v69, MEMORY[0x1E0DE4A90]);
              v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 32);
              std::locale::~locale(&v69);
              *((_DWORD *)v38 + 36) = v41;
            }
            if ((v40 & 0xB0) == 0x20)
              v43 = "";
            else
              v43 = "\n";
            if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"\n", (uint64_t)v43, (uint64_t)"", (uint64_t)v38, (char)v41))std::ios_base::clear((std::ios_base *)((char *)&v60 + *(_QWORD *)(v60 - 24)), *(_DWORD *)((char *)&v62[1] + *(_QWORD *)(v60 - 24)) | 5);
          }
          MEMORY[0x1A1AF49EC](&__b);
          HIBYTE(v72) = 3;
          LODWORD(__b.__locale_) = 2105376;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)&__b, 3);
          if (SHIBYTE(v72) < 0)
            operator delete(__b.__locale_);
          v90 = v79;
          v91 = v80;
          v92 = v81;
          v86 = v75;
          v87 = v76;
          v88 = v77;
          v89 = v78;
          v84 = v73;
          v85 = v74;
        }
        goto LABEL_15;
      }
      v21 = (char *)&v60 + *(_QWORD *)(v60 - 24);
      v22 = *((_QWORD *)v21 + 5);
      v23 = *((_DWORD *)v21 + 2);
      v24 = *((_DWORD *)v21 + 36);
      if (v24 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v60 + *(_QWORD *)(v60 - 24)));
        v25 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v21 + 36) = v24;
      }
      if ((v23 & 0xB0) == 0x20)
        v26 = "";
      else
        v26 = ",";
      if (v22)
      {
        v27 = *((_QWORD *)v21 + 3);
        v28 = v27 <= 1;
        v29 = v27 - 1;
        v30 = v28 ? 0 : v29;
        if (v26 - "," < 1
          || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v22 + 96))(v22, ",", v26 - ",") == v26 - ",")
        {
          if ((uint64_t)v30 < 1)
            goto LABEL_50;
          if (v30 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v30 >= 0x17)
          {
            v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17)
              v32 = v30 | 7;
            v33 = v32 + 1;
            p_b = (std::locale::__imp *)operator new(v32 + 1);
            v71 = v30;
            v72 = v33 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v72) = v30;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v24, v30);
          *((_BYTE *)p_b + v30) = 0;
          if (v72 >= 0)
            locale = &__b;
          else
            locale = __b.__locale_;
          v35 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v22 + 96))(v22, locale, v30);
          v36 = v35;
          if ((SHIBYTE(v72) & 0x80000000) == 0)
          {
            if (v35 != v30)
              goto LABEL_53;
LABEL_50:
            v37 = "," - v26 + 1;
            if (v37 < 1
              || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v22 + 96))(v22, v26, "," - v26 + 1) == v37)
            {
              *((_QWORD *)v21 + 3) = 0;
              goto LABEL_54;
            }
            goto LABEL_53;
          }
          operator delete(__b.__locale_);
          if (v36 == v30)
            goto LABEL_50;
        }
      }
LABEL_53:
      std::ios_base::clear((std::ios_base *)((char *)&v60 + *(_QWORD *)(v60 - 24)), *(_DWORD *)((char *)&v62[1] + *(_QWORD *)(v60 - 24)) | 5);
      goto LABEL_54;
    }
LABEL_71:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"}\n", 2);
  }
  if ((v67 & 0x10) != 0)
  {
    v49 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) < v64)
    {
      *((_QWORD *)&v66 + 1) = v64;
      v49 = v64;
    }
    v50 = (const void **)&v63;
  }
  else
  {
    if ((v67 & 8) == 0)
    {
      v47 = 0;
      v48 = a3;
      *((_BYTE *)a3 + 23) = 0;
      goto LABEL_87;
    }
    v50 = (const void **)v62;
    v49 = v62[2];
  }
  v51 = *v50;
  v47 = v49 - (_QWORD)*v50;
  if (v47 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v47 >= 0x17)
  {
    v52 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v52 = v47 | 7;
    v53 = v52 + 1;
    v48 = operator new(v52 + 1);
    a3[1] = v47;
    a3[2] = v53 | 0x8000000000000000;
    *a3 = v48;
    goto LABEL_86;
  }
  v48 = a3;
  *((_BYTE *)a3 + 23) = v47;
  if (v47)
  {
LABEL_86:
    v54 = v51;
    v55 = v48;
    memmove(v48, v54, v47);
    v48 = v55;
  }
LABEL_87:
  *((_BYTE *)v48 + v47) = 0;
  v60 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v60 + *(_QWORD *)(v60 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v61 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v66) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v68);
}

void sub_19FA10568(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FA10598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::locale a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *_ZN2md15DebugOutputUtil14printContainerINSt3__16vectorIPN3gdc8RegistryENS2_9allocatorIS6_EEEEZNKS_13RegistryLogic18debugConsoleStringERKNS_13LayoutContextERKNS_17LogicDependenciesIJNS4_8TypeListIJNS_12SceneContextEEEENSF_IJEEEEE20ResolvedDependenciesERNS_15RegistryContextEE3__0EEvRNS2_19basic_ostringstreamIcNS2_11char_traitsIcEENS7_IcEEEERKT_T0_jj(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t i;
  char *v9;
  char *v10;
  void *__p[2];
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[16];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v33 = -1;
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(&v25, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  if (a2 != a3)
  {
    for (i = a2 + 8; ; i += 8)
    {
      v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      if ((v9[32] & 5) != 0)
      {
        memset(v23, 0, sizeof(v23));
        v24 = -1;
      }
      else
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5) + 32))(v23, *((_QWORD *)v9 + 5), 0, 1, 16);
      }
      std::ostream::operator<<();
      v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      if ((v10[32] & 5) != 0)
      {
        v21 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v14 = 0u;
        v22 = -1;
      }
      else
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v10 + 5) + 32))(&v14, *((_QWORD *)v10 + 5), 0, 1, 16);
      }
      if (i == a3)
        break;
      if (v22 > v24)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        if (v22 - v33 >= 41)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
          v13 = 2;
          strcpy((char *)__p, "  ");
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__p, 2);
          if (v13 < 0)
            operator delete(__p[0]);
          v31 = v20;
          v32 = v21;
          v33 = v22;
          v27 = v16;
          v28 = v17;
          v29 = v18;
          v30 = v19;
          v25 = v14;
          v26 = v15;
        }
      }
    }
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
}

void sub_19FA108C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__1NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB9F0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB9A8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB9A8;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::RegistryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0D48;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x60C4044C4A2DFLL);
  return a1;
}

void gdc::ManagedObjectHolder<md::RegistryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0D48;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x60C4044C4A2DFLL);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::RegistryContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::RegistryManager::~RegistryManager(md::RegistryManager *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  gdc::Registry *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  gdc::Registry *v18;
  gdc::Registry *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;

  v2 = (void *)*((_QWORD *)this + 114);
  if (v2)
  {
    *((_QWORD *)this + 115) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 111);
  if (v3)
  {
    *((_QWORD *)this + 112) = v3;
    operator delete(v3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 109));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 106));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 103));
  md::RegistryManager::LayerDataSets::{unnamed type#1}::~LayerDataSets((uint64_t)this + 696);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 85));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 82));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 79));
  md::RegistryManager::LayerDataSets::{unnamed type#1}::~LayerDataSets((uint64_t)this + 504);
  v4 = (void *)*((_QWORD *)this + 60);
  if (v4)
  {
    *((_QWORD *)this + 61) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 57);
  if (v5)
  {
    *((_QWORD *)this + 58) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 54);
  if (v6)
  {
    *((_QWORD *)this + 55) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 51);
  if (v7)
  {
    *((_QWORD *)this + 52) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 48);
  if (v8)
  {
    *((_QWORD *)this + 49) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 44);
  if (v9)
  {
    v10 = *((_QWORD *)this + 45);
    v11 = (void *)*((_QWORD *)this + 44);
    if (v10 != v9)
    {
      do
      {
        v12 = *(gdc::Registry **)(v10 - 8);
        *(_QWORD *)(v10 - 8) = 0;
        if (v12)
        {
          gdc::Registry::~Registry(v12);
          MEMORY[0x1A1AF4E00]();
        }
        v13 = v10 - 112;
        v14 = *(unsigned int *)(v10 - 16);
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, uint64_t))off_1E42FA3C0[v14])(&v32, v10 - 112);
        *(_DWORD *)(v10 - 16) = -1;
        v10 -= 112;
      }
      while (v13 != v9);
      v11 = (void *)*((_QWORD *)this + 44);
    }
    *((_QWORD *)this + 45) = v9;
    operator delete(v11);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 41);
  if (v15)
  {
    v16 = (_QWORD *)*((_QWORD *)this + 42);
    v17 = (void *)*((_QWORD *)this + 41);
    if (v16 != v15)
    {
      do
      {
        v19 = (gdc::Registry *)*--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
        {
          gdc::Registry::~Registry(v18);
          MEMORY[0x1A1AF4E00]();
        }
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 41);
    }
    *((_QWORD *)this + 42) = v15;
    operator delete(v17);
  }
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*((unsigned int **)this + 39));
  std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(*((_QWORD **)this + 36));
  std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(*((_QWORD **)this + 33));
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*((unsigned int **)this + 30));
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*((unsigned int **)this + 27));
  std::mutex::~mutex((std::mutex *)((char *)this + 144));
  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  v20 = (_QWORD *)*((_QWORD *)this + 7);
  if (v20)
  {
    do
    {
      v25 = (_QWORD *)*v20;
      v26 = v20[3];
      if (v26)
      {
        v27 = v20[4];
        v24 = (void *)v20[3];
        if (v27 != v26)
        {
          do
          {
            v28 = *(_QWORD *)(v27 - 8);
            *(_QWORD *)(v27 - 8) = 0;
            if (v28)
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            v27 -= 24;
          }
          while (v27 != v26);
          v24 = (void *)v20[3];
        }
        v20[4] = v26;
        operator delete(v24);
      }
      operator delete(v20);
      v20 = v25;
    }
    while (v25);
  }
  v21 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
    operator delete(v21);
  v22 = (_QWORD *)*((_QWORD *)this + 2);
  if (v22)
  {
    do
    {
      v31 = (_QWORD *)*v22;
      v29 = (_QWORD *)v22[7];
      if (v29 == v22 + 4)
      {
        v29 = v22 + 4;
        v30 = 4;
      }
      else
      {
        if (!v29)
          goto LABEL_51;
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_51:
      operator delete(v22);
      v22 = v31;
    }
    while (v31);
  }
  v23 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v23)
    operator delete(v23);
}

void std::__shared_ptr_pointer<md::RegistryManager *,std::shared_ptr<md::RegistryManager>::__shared_ptr_default_delete<md::RegistryManager,md::RegistryManager>,std::allocator<md::RegistryManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::RegistryManager *std::__shared_ptr_pointer<md::RegistryManager *,std::shared_ptr<md::RegistryManager>::__shared_ptr_default_delete<md::RegistryManager,md::RegistryManager>,std::allocator<md::RegistryManager>>::__on_zero_shared(uint64_t a1)
{
  md::RegistryManager *result;

  result = *(md::RegistryManager **)(a1 + 24);
  if (result)
  {
    md::RegistryManager::~RegistryManager(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::TileAdjustmentHelpers::adjustTileForSize(unsigned int a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *i;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char **v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  int32x2_t v37;
  char v38;
  unint64_t v39;
  char *v40;
  char *j;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  char v56;
  char v57;

  i = a4;
  LOBYTE(v5) = 0;
  if (!a1 || !a2)
    goto LABEL_40;
  v6 = a1;
  v7 = a2;
  if (a2 >= a1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      ++v5;
      v7 *= 2;
    }
    while (v7 < a1);
  }
  while (v7 > v6)
  {
    --v5;
    v6 *= 2;
  }
  if (v5 >= 1)
  {
    v8 = *(_BYTE *)a3;
    v9 = v5;
    v10 = *(_BYTE *)(a3 + 1) + v5;
    v11 = *(_DWORD *)(a3 + 4) << v5;
    v12 = *(_DWORD *)(a3 + 8) << v5;
    if (v5 <= 0x1Eu)
      v13 = *(_BYTE *)a3;
    else
      v13 = -1;
    if (v5 <= 0x1Eu)
      v14 = *(_BYTE *)(a3 + 1) + v5;
    else
      v14 = 0;
    if (v5 <= 0x1Eu)
      v15 = *(_DWORD *)(a3 + 4) << v5;
    else
      v15 = 0;
    if (v5 <= 0x1Eu)
      v16 = *(_DWORD *)(a3 + 8) << v5;
    else
      v16 = 0;
    v17 = 1 << v5;
    v18 = 1 << v9;
    v19 = v18 << v9;
    if (v19)
    {
      v20 = 0;
      v21 = (char *)a4[1];
      v56 = v10;
      v57 = *(_BYTE *)a3;
      v54 = v12;
      v55 = v11;
      v52 = v19;
      v53 = v17;
      do
      {
        v22 = i[2];
        if ((unint64_t)v21 < v22)
        {
          *v21 = v13;
          v21[1] = v14;
          *((_DWORD *)v21 + 1) = v15;
          *((_DWORD *)v21 + 2) = v16;
          v21 += 24;
        }
        else
        {
          v23 = (char **)i;
          v24 = (char *)*i;
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*i] >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_60;
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v24) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v26;
          if (v28 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_61;
          v29 = 24 * v28;
          v30 = (char *)operator new(24 * v28);
          v31 = &v30[24 * v25];
          *v31 = v13;
          v31[1] = v14;
          *((_DWORD *)v31 + 1) = v15;
          *((_DWORD *)v31 + 2) = v16;
          v32 = v31;
          for (i = v23; v21 != v24; *(_QWORD *)(v32 + 4) = *(_QWORD *)(v21 + 4))
          {
            v33 = *((_WORD *)v21 - 12);
            v21 -= 24;
            *((_WORD *)v32 - 12) = v33;
            v32 -= 24;
          }
          v21 = v31 + 24;
          *v23 = v32;
          v23[1] = v31 + 24;
          v23[2] = &v30[v29];
          if (v24)
            operator delete(v24);
          v10 = v56;
          v8 = v57;
          v12 = v54;
          v11 = v55;
          v19 = v52;
          v18 = v53;
        }
        v15 = v11 + ++v20 / v18;
        i[1] = v21;
        v16 = v12 + v20 % v18;
        v14 = v10;
        v13 = v8;
      }
      while (v20 != v19);
    }
  }
  else
  {
LABEL_40:
    v34 = *(unsigned __int8 *)(a3 + 1);
    if (*(_BYTE *)(a3 + 1))
    {
      v35 = -(char)v5;
      if (v34 < v35)
        v35 = *(unsigned __int8 *)(a3 + 1);
      v36 = v34 - v35;
      v37 = vshl_s32(*(int32x2_t *)(a3 + 4), vneg_s32(vdup_n_s32(v35)));
    }
    else
    {
      v36 = 0;
      v37 = *(int32x2_t *)(a3 + 4);
    }
    v38 = *(_BYTE *)a3;
    v40 = (char *)a4[1];
    v39 = a4[2];
    if ((unint64_t)v40 >= v39)
    {
      v42 = (char *)*a4;
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v40[-*a4] >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_60:
        abort();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v42) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v44;
      if (v46 > 0xAAAAAAAAAAAAAAALL)
LABEL_61:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v47 = 24 * v46;
      v48 = (char *)operator new(24 * v46);
      v49 = &v48[24 * v43];
      *v49 = v38;
      v50 = &v48[v47];
      v49[1] = v36;
      *(int32x2_t *)(v49 + 4) = v37;
      for (j = v49 + 24; v40 != v42; *(_QWORD *)(v49 + 4) = *(_QWORD *)(v40 + 4))
      {
        v51 = *((_WORD *)v40 - 12);
        v40 -= 24;
        *((_WORD *)v49 - 12) = v51;
        v49 -= 24;
      }
      *i = v49;
      i[1] = j;
      i[2] = v50;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *v40 = v38;
      v40[1] = v36;
      j = v40 + 24;
      *(int32x2_t *)(v40 + 4) = v37;
    }
    i[1] = j;
  }
}

void std::__function::__func<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&),std::allocator<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&)>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&),std::allocator<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&)>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C6F00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&),std::allocator<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&)>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C6F00;
  a2[1] = v2;
  return result;
}

void altitude::TrafficTileComponent::~TrafficTileComponent(altitude::TrafficTileComponent *this)
{
  altitude::TrafficTileComponent::~TrafficTileComponent(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E42C59E0;
  if (*((_QWORD *)this + 11))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::TrafficTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                           + 424)
                                                                             + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      if (*((_QWORD *)this + 11))
        (*(void (**)(_QWORD, _QWORD, altitude::TrafficTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                               + 424)
                                                                                 + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)this = off_1E42C4248;
  v8 = (_QWORD *)*((_QWORD *)this + 6);
  v9 = (_QWORD *)*((_QWORD *)this + 7);
  if (v8 == v9)
  {
    if (v8)
    {
LABEL_16:
      *((_QWORD *)this + 7) = v8;
      operator delete(v8);
    }
  }
  else
  {
    do
    {
      v10 = v8[1];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v8 += 2;
    }
    while (v8 != v9);
    v8 = (_QWORD *)*((_QWORD *)this + 6);
    if (v8)
      goto LABEL_16;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
}

BOOL altitude::TrafficTileComponent::hasLoadedData(altitude::TrafficTileComponent *this)
{
  return !*((_BYTE *)this + 80) || *((_QWORD *)this + 11) != 0;
}

uint64_t altitude::TrafficTileComponent::hasLoadedFallbackData(altitude::TrafficTileComponent *this)
{
  return 0;
}

uint64_t altitude::TrafficTileComponent::needsFallbackData(altitude::TrafficTileComponent *this)
{
  return 0;
}

void altitude::TrafficTileComponent::willBeDrawn(altitude::TrafficTileComponent *this, const md::LayoutContext *a2, altitude::View *a3, karo::graphics::Viewport *a4, uint64_t a5, altitude::StencilManager *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (!*((_BYTE *)this + 81))
    return;
  v6 = *((_QWORD *)this + 11);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(_DWORD *)(v6 + 32);
  v9 = *(_DWORD *)(v7 + 120);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v11 = 0;
  }
  else
  {
    LODWORD(v11) = 0;
    v12 = *(_DWORD *)(v6 + 24);
    v13 = *(_DWORD *)(v6 + 28) - (*(_DWORD *)(v7 + 116) << v10);
    v14 = v12 - (*(_DWORD *)(v7 + 112) << v10);
    v15 = ~v9 + v8;
    v16 = 2 * v15;
    do
    {
      v11 = (v14 >> v15 << v16) + (_DWORD)v11 + (2 << v16) * (v13 >> v15);
      v14 -= v14 >> v15 << v15;
      v13 -= v13 >> v15 << v15;
      --v15;
      v16 -= 2;
    }
    while (v15 != -1);
  }
  if (*(_QWORD *)(v7 + 96) != a5)
  {
    *(_QWORD *)(v7 + 96) = a5;
    v26 = *(_QWORD *)(v7 + 88);
    if (!v26)
      return;
    v37 = 0;
    md::FlyoverTrafficLayer::willBeDrawn(*(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)a3, (uint64_t)&v37);
    v17 = *(_QWORD *)(v7 + 88);
    v27 = *(_QWORD *)(v17 + 8);
    v28 = *(_QWORD *)(v17 + 16);
    while (1)
    {
      if (v27 == v28)
        goto LABEL_10;
      v29 = *(char **)(*(_QWORD *)v27 + 248);
      v30 = *(char **)(*(_QWORD *)v27 + 256);
      if (v29 != v30)
      {
        v31 = v30 - v29 - 8;
        if (v31 <= 7)
          goto LABEL_29;
        v32 = (v31 >> 3) + 1;
        v33 = (uint64_t *)(v29 + 8);
        v34 = v32 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v35 = *v33;
          *(_BYTE *)(*(v33 - 1) + 48) = 0;
          *(_BYTE *)(v35 + 48) = 0;
          v33 += 2;
          v34 -= 2;
        }
        while (v34);
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFELL))
          break;
      }
LABEL_21:
      v27 += 8;
    }
    v29 += 8 * (v32 & 0x3FFFFFFFFFFFFFFELL);
    do
    {
LABEL_29:
      v36 = *(_QWORD *)v29;
      v29 += 8;
      *(_BYTE *)(v36 + 48) = 0;
    }
    while (v29 != v30);
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(v7 + 88);
LABEL_10:
  if (v17)
  {
    v19 = *(char **)(v17 + 8);
    v18 = *(char **)(v17 + 16);
    if (v19 != v18)
    {
      v20 = v18 - v19 - 8;
      if (v20 < 8)
        goto LABEL_17;
      v21 = (v20 >> 3) + 1;
      v22 = v19 + 8;
      v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(*v22 + 248) + 8 * v11);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(v22 - 1) + 248) + 8 * v11) + 48) = 1;
        *(_BYTE *)(v24 + 48) = 1;
        v22 += 2;
        v23 -= 2;
      }
      while (v23);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
      {
        v19 += 8 * (v21 & 0x3FFFFFFFFFFFFFFELL);
        do
        {
LABEL_17:
          v25 = *(_QWORD *)v19;
          v19 += 8;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 248) + 8 * v11) + 48) = 1;
        }
        while (v19 != v18);
      }
    }
  }
}

_QWORD *altitude::TrafficTileComponent::collectRenderItems(_QWORD *result, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((a6 & 4) != 0)
  {
    if (*((_BYTE *)result + 81))
    {
      v7 = result[11];
      if (v7)
      {
        v8 = *(_QWORD **)(a4 + 8);
        v10 = v8[3];
        v9 = v8[4];
        v11 = v9 - v10;
        if (v9 == v10)
          goto LABEL_11;
        v12 = 0;
        v13 = *(_QWORD *)(a7 + 8);
        v14 = v11 >> 3;
        while (1)
        {
          v15 = *(unsigned __int8 **)(v10 + 8 * v12);
          if (*v15 == *(unsigned __int8 *)(v13 + 24))
          {
            v16 = *((_QWORD *)v15 + 1);
            v17 = v8[15];
            if (v16 < (v8[16] - v17) >> 3)
              break;
          }
          if (++v12 >= v14)
            goto LABEL_11;
        }
        v18 = *(_QWORD *)(v17 + 8 * v16);
        if (!v18)
LABEL_11:
          v19 = 0;
        else
          v19 = *(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * *(unsigned __int8 *)(v13 + 25));
        v20 = *(_QWORD *)(v7 + 40);
        if (*(_QWORD *)(v20 + 104) != a5)
        {
          *(_QWORD *)(v20 + 104) = a5;
          v21 = *(_QWORD *)(v20 + 88);
          v23[0] = &off_1E42D4378;
          v23[1] = v19;
          v24 = v23;
          md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(*(_QWORD **)(v21 + 8), *(_QWORD **)(v21 + 16), v23, 0, a2);
          result = v24;
          if (v24 == v23)
          {
            v22 = 4;
            result = v23;
          }
          else
          {
            if (!v24)
              return result;
            v22 = 5;
          }
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
        }
      }
    }
  }
  return result;
}

uint64_t altitude::TrafficTileComponent::setSuccess(uint64_t this, char a2)
{
  *(_BYTE *)(this + 80) = a2;
  return this;
}

BOOL altitude::TrafficTileComponent::needsDataRefresh(altitude::TrafficTileComponent *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  return v2 && *(_DWORD *)(v2 + 8) < a2;
}

double md::SceneContext::renderData(md::SceneContext *this, uint64_t a2, int a3)
{
  unsigned int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  __int128 i;
  uint64_t v11;

  v5 = 0;
  v6 = *(unsigned __int16 **)(a2 + 112);
  v7 = *(unsigned __int16 **)(a2 + 120);
  while (1)
  {
    v8 = v6;
    if (v6 != v7)
    {
      v8 = v6;
      while (*v8 != v5)
      {
        v8 += 56;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
    gdc::LayerDataCollector::data(this, *(unsigned __int16 **)(*((_QWORD *)v8 + 13) + 24), *(unsigned __int16 **)(*((_QWORD *)v8 + 13) + 32), a3);
    v9 = 0;
    for (i = *(_OWORD *)this; (_QWORD)i != *((_QWORD *)this + 2); *(_QWORD *)&i = v11)
    {
      v11 = i + 144;
      if ((_QWORD)i + 144 != *((_QWORD *)&i + 1))
      {
        while (!*(_QWORD *)(v11 + 112))
        {
          v11 += 144;
          if (v11 == *((_QWORD *)&i + 1))
          {
            v11 = *((_QWORD *)this + 1);
            break;
          }
        }
      }
      ++v9;
    }
    if (v9)
      return *(double *)&i;
    if (v5++ > 7)
    {
      *(_QWORD *)&i = gdc::LayerDataCollector::data(this, (unsigned __int16 *)*(_QWORD *)(*((_QWORD *)v6 + 13) + 24), (unsigned __int16 *)*(_QWORD *)(*((_QWORD *)v6 + 13) + 32), a3).n128_u64[0];
      return *(double *)&i;
    }
  }
}

uint64_t *md::SceneContext::layerDataInView(md::SceneContext *this, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t *result;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)this;
  if ((v3 & 1) == 0)
  {
    v10 = a2;
    v9 = *(_QWORD *)this;
    v2 = v9;
    a2 = v10;
    if (v8)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      v2 = v9;
      a2 = v10;
    }
  }
  v4 = *(unsigned __int16 **)(v2 + 48);
  v5 = *(unsigned __int16 **)(v2 + 56);
  result = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v4 != v5)
  {
    v7 = v4;
    while (*v7 != a2)
    {
      v7 += 16;
      if (v7 == v5)
        return result;
    }
    if (v7 == v5)
    {
      return &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v4 != a2)
      {
        v4 += 16;
        if (v4 == v5)
        {
          v4 = v5;
          return (uint64_t *)(v4 + 4);
        }
      }
      return (uint64_t *)(v4 + 4);
    }
  }
  return result;
}

uint64_t *md::SceneContext::subtileClipMask(int8x8_t *a1, unint64_t a2, unsigned __int8 a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t *v13;

  v3 = a1[10];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = ((a2 << 6) + (a2 >> 2) + (char)a3 - 0x61C8864680B583EBLL) ^ a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = ((a2 << 6) + (a2 >> 2) + (char)a3 - 0x61C8864680B583EBLL) ^ a2;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ****)(*(_QWORD *)&a1[9] + 8 * v6);
  if (!v7)
    return 0;
  v8 = *v7;
  if (!v8)
    return 0;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v13 = v8[1];
      if ((uint64_t *)v4 == v13)
      {
        if (*((unsigned __int8 *)v8 + 32) == a3 && v8[2] == (uint64_t *)a2)
          return v8[5];
      }
      else if (((unint64_t)v13 & v9) != v6)
      {
        return 0;
      }
      v8 = (uint64_t **)*v8;
      if (!v8)
        return 0;
    }
  }
  while (1)
  {
    v11 = (unint64_t)v8[1];
    if (v4 == v11)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v6)
      return 0;
LABEL_14:
    v8 = (uint64_t **)*v8;
    if (!v8)
      return 0;
  }
  if (*((unsigned __int8 *)v8 + 32) != a3 || v8[2] != (uint64_t *)a2)
    goto LABEL_14;
  return v8[5];
}

BOOL md::SceneContext::isFinishedLoadingRequiredLayers(md::SceneContext *this)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  _BOOL8 result;
  BOOL v11;
  unsigned __int16 *v12;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 23);
  v2 = (unsigned __int16 *)*((_QWORD *)this + 24);
  if (v1 == v2)
  {
LABEL_10:
    v5 = (unsigned __int16 *)*((_QWORD *)this + 26);
    v6 = (unsigned __int16 *)*((_QWORD *)this + 27);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = (unsigned __int16 *)*((_QWORD *)this + 14);
      v8 = (unsigned __int16 *)*((_QWORD *)this + 15);
      do
      {
        v12 = v7;
        if (v7 != v8)
        {
          v12 = v7;
          while (*v12 != *v5)
          {
            v12 += 56;
            if (v12 == v8)
            {
              v12 = v8;
              break;
            }
          }
        }
        v9 = *((unsigned __int8 *)v12 + 8);
        result = v9 != 0;
        ++v5;
        if (v9)
          v11 = v5 == v6;
        else
          v11 = 1;
      }
      while (!v11);
    }
  }
  else
  {
    v3 = (unsigned __int16 *)*((_QWORD *)this + 15);
    while (1)
    {
      v4 = (unsigned __int16 *)*((_QWORD *)this + 14);
      if (v4 != v3)
      {
        v4 = (unsigned __int16 *)*((_QWORD *)this + 14);
        while (*v4 != *v1)
        {
          v4 += 56;
          if (v4 == v3)
          {
            v4 = (unsigned __int16 *)*((_QWORD *)this + 15);
            break;
          }
        }
      }
      if (!*((_BYTE *)v4 + 8))
        return 0;
      if (++v1 == v2)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t md::SceneContext::sceneStatus(md::SceneContext *this)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 23);
  v2 = (unsigned __int16 *)*((_QWORD *)this + 24);
  if (v1 != v2)
  {
    v3 = (unsigned __int16 *)*((_QWORD *)this + 14);
    v4 = (unsigned __int16 *)*((_QWORD *)this + 15);
    v5 = (unsigned __int16 *)*((_QWORD *)this + 23);
    do
    {
      v6 = (unsigned __int16 *)*((_QWORD *)this + 14);
      if (v3 != v4)
      {
        v6 = (unsigned __int16 *)*((_QWORD *)this + 14);
        while (*v6 != *v5)
        {
          v6 += 56;
          if (v6 == v4)
          {
            v6 = (unsigned __int16 *)*((_QWORD *)this + 15);
            break;
          }
        }
      }
      if (!*((_BYTE *)v6 + 9))
        goto LABEL_45;
      ++v5;
    }
    while (v5 != v2);
  }
  v7 = (unsigned __int16 *)*((_QWORD *)this + 26);
  v8 = (unsigned __int16 *)*((_QWORD *)this + 27);
  if (v7 == v8)
  {
LABEL_19:
    if (v1 != v2)
    {
      v11 = (unsigned __int16 *)*((_QWORD *)this + 14);
      v12 = (unsigned __int16 *)*((_QWORD *)this + 15);
      v13 = (unsigned __int16 *)*((_QWORD *)this + 23);
      do
      {
        v14 = (unsigned __int16 *)*((_QWORD *)this + 14);
        if (v11 != v12)
        {
          v14 = (unsigned __int16 *)*((_QWORD *)this + 14);
          while (*v13 != *v14)
          {
            v14 += 56;
            if (v14 == v12)
            {
              v14 = (unsigned __int16 *)*((_QWORD *)this + 15);
              break;
            }
          }
        }
        if (*((_BYTE *)v14 + 10))
          goto LABEL_57;
        ++v13;
      }
      while (v13 != v2);
    }
    if (v7 == v8)
    {
      return 2;
    }
    else
    {
      v11 = (unsigned __int16 *)*((_QWORD *)this + 14);
      v12 = (unsigned __int16 *)*((_QWORD *)this + 15);
      v15 = (unsigned __int16 *)*((_QWORD *)this + 26);
      while (1)
      {
        v16 = (unsigned __int16 *)*((_QWORD *)this + 14);
        if (v11 != v12)
        {
          v16 = (unsigned __int16 *)*((_QWORD *)this + 14);
          while (*v15 != *v16)
          {
            v16 += 56;
            if (v16 == v12)
            {
              v16 = (unsigned __int16 *)*((_QWORD *)this + 15);
              break;
            }
          }
        }
        if (*((_BYTE *)v16 + 10))
          break;
        if (++v15 == v8)
          return 2;
      }
LABEL_57:
      while (v1 != v2)
      {
        v22 = v12;
        if (v11 != v12)
        {
          v22 = v11;
          while (*v22 != *v1)
          {
            v22 += 56;
            if (v22 == v12)
            {
              v22 = v12;
              break;
            }
          }
        }
        if (!*((_BYTE *)v22 + 8))
          return 3;
        ++v1;
      }
      if (v7 == v8)
        return 4;
      while (1)
      {
        v23 = v12;
        if (v11 != v12)
        {
          v23 = v11;
          while (*v23 != *v7)
          {
            v23 += 56;
            if (v23 == v12)
            {
              v23 = v12;
              break;
            }
          }
        }
        if (!*((_BYTE *)v23 + 8))
          return 3;
        if (++v7 == v8)
          return 4;
      }
    }
  }
  else
  {
    v3 = (unsigned __int16 *)*((_QWORD *)this + 14);
    v4 = (unsigned __int16 *)*((_QWORD *)this + 15);
    v9 = (unsigned __int16 *)*((_QWORD *)this + 26);
    while (1)
    {
      v10 = (unsigned __int16 *)*((_QWORD *)this + 14);
      if (v3 != v4)
      {
        v10 = (unsigned __int16 *)*((_QWORD *)this + 14);
        while (*v10 != *v9)
        {
          v10 += 56;
          if (v10 == v4)
          {
            v10 = (unsigned __int16 *)*((_QWORD *)this + 15);
            break;
          }
        }
      }
      if (!*((_BYTE *)v10 + 9))
        break;
      if (++v9 == v8)
        goto LABEL_19;
    }
LABEL_45:
    while (v1 != v2)
    {
      v18 = v4;
      if (v3 != v4)
      {
        v18 = v3;
        while (*v18 != *v1)
        {
          v18 += 56;
          if (v18 == v4)
          {
            v18 = v4;
            break;
          }
        }
      }
      if (!*((_BYTE *)v18 + 8))
        return 0;
      ++v1;
    }
    v19 = (unsigned __int16 *)*((_QWORD *)this + 26);
    v20 = (unsigned __int16 *)*((_QWORD *)this + 27);
    if (v19 == v20)
      return 1;
    while (1)
    {
      v21 = v4;
      if (v3 != v4)
      {
        v21 = v3;
        while (*v21 != *v19)
        {
          v21 += 56;
          if (v21 == v4)
          {
            v21 = v4;
            break;
          }
        }
      }
      if (!*((_BYTE *)v21 + 8))
        return 0;
      if (++v19 == v20)
        return 1;
    }
  }
}

void sub_19FA11E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FA11F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA12D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;

  _Unwind_Resume(a1);
}

void sub_19FA144B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v71;

  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&STACK[0x378], STACK[0x380]);
  if (__p)
    operator delete(__p);
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy((_QWORD *)STACK[0x210]);
  std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::less<GEOComposedRouteSection * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>>>::destroy((_QWORD *)STACK[0x228]);
  _Unwind_Resume(a1);
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(__n128 *a1, double *a2, double *a3, unint64_t *a4, __n128 result)
{
  double v5;
  double v6;

  v5 = *a2;
  v6 = *a3;
  if (*a2 >= a1->n128_f64[0])
  {
    if (v6 < v5)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < a1->n128_f64[0])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *(__n128 *)a2;
    *(__n128 *)a2 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < a1->n128_f64[0])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  double v9;
  double v10;
  __n128 v11;
  __n128 *v12;
  double v13;
  __n128 *v14;
  double v15;
  double v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  double v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  double v41;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (a2[-1].n128_f64[0] < a1->n128_f64[0])
        goto LABEL_6;
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a1[1].n128_f64[0];
      v7 = a2 - 1;
      v10 = a2[-1].n128_f64[0];
      if (v9 >= a1->n128_f64[0])
      {
        if (v10 < v9)
        {
          v27 = *v8;
          *v8 = *v7;
          *v7 = v27;
          if (a1[1].n128_f64[0] < a1->n128_f64[0])
          {
            v28 = *a1;
            *a1 = *v8;
            *v8 = v28;
          }
        }
      }
      else if (v10 >= v9)
      {
        v31 = *a1;
        *a1 = *v8;
        *v8 = v31;
        if (v7->n128_f64[0] < a1[1].n128_f64[0])
        {
          v32 = *v8;
          *v8 = *v7;
          *v7 = v32;
        }
      }
      else
      {
LABEL_6:
        v11 = *a1;
        *a1 = *v7;
        *v7 = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(a1, a1[1].n128_f64, a1[2].n128_f64, a2[-1].n128_u64, a3);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(a1, a1[1].n128_f64, a1[2].n128_f64, a1[3].n128_u64, a3);
      v22 = a2[-1].n128_f64[0];
      v21 = a2 - 1;
      if (v22 < a1[3].n128_f64[0])
      {
        v23 = *v20;
        *v20 = *v21;
        *v21 = v23;
        if (v20->n128_f64[0] < v19->n128_f64[0])
        {
          v24 = *v19;
          *v19 = *v20;
          *v20 = v24;
          if (v19->n128_f64[0] < v18->n128_f64[0])
          {
            v25 = *v18;
            *v18 = *v19;
            *v19 = v25;
            if (a1[1].n128_f64[0] < a1->n128_f64[0])
            {
              v26 = *a1;
              *a1 = *v18;
              *v18 = v26;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2].n128_f64[0];
      v14 = a1 + 1;
      v15 = a1[1].n128_f64[0];
      v16 = a1->n128_f64[0];
      if (v15 >= a1->n128_f64[0])
      {
        if (v13 < v15)
        {
          v29 = *v14;
          *v14 = *v12;
          *v12 = v29;
          if (v14->n128_f64[0] < v16)
          {
            v30 = *a1;
            *a1 = *v14;
            *v14 = v30;
          }
        }
      }
      else
      {
        if (v13 >= v15)
        {
          v33 = *a1;
          *a1 = *v14;
          *v14 = v33;
          if (v13 >= a1[1].n128_f64[0])
            goto LABEL_27;
          v17 = *v14;
          *v14 = *v12;
        }
        else
        {
          v17 = *a1;
          *a1 = *v12;
        }
        *v12 = v17;
      }
LABEL_27:
      v34 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      break;
  }
  while (1)
  {
    v38 = v34->n128_f64[0];
    if (v34->n128_f64[0] < v12->n128_f64[0])
    {
      v39 = v34->n128_u64[1];
      v40 = v35;
      do
      {
        *(__n128 *)((char *)a1 + v40 + 48) = *(__n128 *)((char *)a1 + v40 + 32);
        if (v40 == -32)
        {
          v37 = (uint64_t)a1;
          goto LABEL_30;
        }
        v41 = *(double *)((char *)a1[1].n128_f64 + v40);
        v40 -= 16;
      }
      while (v38 < v41);
      v37 = (uint64_t)&a1[3] + v40;
LABEL_30:
      *(double *)v37 = v38;
      *(_QWORD *)(v37 + 8) = v39;
      if (++v36 == 8)
        return &v34[1] == a2;
    }
    v12 = v34;
    v35 += 16;
    if (++v34 == a2)
      return 1;
  }
}

void md::LabelManager::~LabelManager(md::LabelManager *this)
{
  md::LabelManager::~LabelManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  NSObject *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  md::FontGlyphCache *v35;
  md::VenueLogicContext *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  md::OcclusionManager *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  md::LabelStyleCache *v48;
  md::LabelRenderer *v49;
  md::FontTrackingCache *v50;
  uint64_t v51;
  uint64_t v52;
  md::LabelFeaturePool *v53;
  md::LabelGlyphImageLoader *v54;
  std::mutex **v55;
  md::LabelImageLoader *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  md::LabelsState *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __CFNotificationCenter *LocalCenter;
  std::__shared_weak_count *v80;
  int v81;
  md::LabelManager *v82;
  __int16 v83;
  const char *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E428CE88;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 29) + 16);
    if (v3 > 6)
      v4 = "<Invalid>";
    else
      v4 = off_1E42FB0E0[v3];
    v81 = 134218242;
    v82 = this;
    v83 = 2080;
    v84 = v4;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "MDL:Destroy LabelManager:%p type=%s", (uint8_t *)&v81, 0x16u);
  }

  v5 = *((_QWORD *)this + 430);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v6 = *((_QWORD *)this + 431);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  md::LabelManager::deselectLabelMarkerImpl(this);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 200))(*((_QWORD *)this + 30));
  *(_QWORD *)(*((_QWORD *)this + 21) + 72) = *(_QWORD *)(*((_QWORD *)this + 21) + 120);
  v7 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  do
  {
    v8 = __ldaxr(md::LabelManager::_labelManagerInstanceCount);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, md::LabelManager::_labelManagerInstanceCount));
  if (!v9)
    md::LabelManager::clearSystemCaches(this);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 484);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 481);
  *((_QWORD *)this + 481) = 0;
  if (v13)
  {
    v14 = md::Monitorable<md::ConfigValue<GEOConfigKeyString,std::string>>::~Monitorable(v13);
    MEMORY[0x1A1AF4E00](v14, 0x10B2C40F4174BB0);
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 3768);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 3688);

  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 448);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *((_QWORD *)this + 440) = &off_1E42B4B90;

  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 439);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 437);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *((_QWORD *)this + 433) = &off_1E42B5110;

  v24 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 426);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *((_QWORD *)this + 405);
  if (v29)
  {
    v30 = *((_QWORD *)this + 406);
    v31 = *((_QWORD *)this + 405);
    if (v30 != v29)
    {
      do
      {
        v32 = *(std::__shared_weak_count **)(v30 - 8);
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v32->__on_zero_shared)(v32, v31);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v30 -= 16;
      }
      while (v30 != v29);
      v31 = *((_QWORD *)this + 405);
    }
    *((_QWORD *)this + 406) = v29;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 408) + 40))(*((_QWORD *)this + 408), v31, *((_QWORD *)this + 407) - v31);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 3176));
  v35 = (md::FontGlyphCache *)*((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v35)
  {
    md::FontGlyphCache::~FontGlyphCache(v35);
    MEMORY[0x1A1AF4E00]();
  }
  v36 = (md::VenueLogicContext *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v36)
  {
    md::VenueLogicContext::~VenueLogicContext(v36);
    MEMORY[0x1A1AF4E00]();
  }
  v37 = (void *)*((_QWORD *)this + 367);
  if (v37)
  {
    *((_QWORD *)this + 368) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 360);
  if (v38)
  {
    *((_QWORD *)this + 361) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 206);
  if (v39)
  {
    *((_QWORD *)this + 207) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 199);
  if (v40)
  {
    *((_QWORD *)this + 200) = v40;
    operator delete(v40);
  }
  v41 = (_QWORD *)*((_QWORD *)this + 50);
  while (v41)
  {
    v65 = v41;
    v41 = (_QWORD *)*v41;
    v66 = (std::__shared_weak_count *)v65[3];
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 51) + 40))(*((_QWORD *)this + 51), v65, 32);
  }
  v42 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v42)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 49) + 40))(*((_QWORD *)this + 49), v42, 8 * *((_QWORD *)this + 48));
  v43 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v43)
    MEMORY[0x1A1AF4E00](v43, 0x1000C40A86A77D5);
  v44 = (md::OcclusionManager *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v44)
  {
    md::OcclusionManager::~OcclusionManager(v44);
    MEMORY[0x1A1AF4E00]();
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (md::LabelStyleCache *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v48)
  {
    md::LabelStyleCache::~LabelStyleCache(v48);
    MEMORY[0x1A1AF4E00]();
  }
  v49 = (md::LabelRenderer *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v49)
  {
    md::LabelRenderer::~LabelRenderer(v49);
    MEMORY[0x1A1AF4E00]();
  }
  std::unique_ptr<md::LabelCollider>::reset[abi:nn180100]((uint64_t *)this + 40);
  v50 = (md::FontTrackingCache *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v50)
  {
    md::FontTrackingCache::~FontTrackingCache(v50);
    MEMORY[0x1A1AF4E00]();
  }
  v51 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v52)
    MEMORY[0x1A1AF4E00](v52, 0x1020C405AF6BDC9);
  v53 = (md::LabelFeaturePool *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v53)
  {
    md::LabelFeaturePool::~LabelFeaturePool(v53);
    MEMORY[0x1A1AF4E00]();
  }
  v54 = (md::LabelGlyphImageLoader *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v54)
  {
    md::LabelGlyphImageLoader::~LabelGlyphImageLoader(v54);
    MEMORY[0x1A1AF4E00]();
  }
  v55 = (std::mutex **)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v55)
  {
    md::LabelTextDataLoader::~LabelTextDataLoader(v55);
    MEMORY[0x1A1AF4E00]();
  }
  v56 = (md::LabelImageLoader *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v56)
  {
    md::LabelImageLoader::~LabelImageLoader(v56);
    MEMORY[0x1A1AF4E00]();
  }
  v57 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v60)
  {
    v61 = *(_QWORD *)(*(_QWORD *)(v60 + 8) + 168);
    v62 = *(_QWORD **)(v61 + 8);
    v63 = *(_QWORD **)v61;
    if (*(_QWORD **)v61 != v62)
    {
      while (*v63 != v60)
      {
        if (++v63 == v62)
        {
          v63 = *(_QWORD **)(v61 + 8);
          break;
        }
      }
    }
    if (v63 != v62)
    {
      v64 = v63 + 1;
      if (v63 + 1 != v62)
      {
        do
        {
          if (*v64 != v60)
            *v63++ = *v64;
          ++v64;
        }
        while (v64 != v62);
        v62 = *(_QWORD **)(v61 + 8);
      }
    }
    if (v63 != v62)
      *(_QWORD *)(v61 + 8) = v63;
    MEMORY[0x1A1AF4E00](v60, 0x10A1C4066F3BFFFLL);
  }
  *((_QWORD *)this + 26) = &off_1E42B5550;

  v69 = (md::LabelsState *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v69)
  {
    md::LabelsState::~LabelsState(v69);
    MEMORY[0x1A1AF4E00]();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  *((_QWORD *)this + 11) = &off_1E42B4D50;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24));
  *(_QWORD *)this = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
  v80 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
}

void sub_19FA15EC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFNotificationCenter *LocalCenter;
  std::__shared_weak_count *v12;

  md::LabelDebugSettings::~LabelDebugSettings((md::LabelDebugSettings *)(v1 + 451));

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 447));
  md::LabelManager::{unnamed type#2}::~LabelManager((uint64_t)(v1 + 436));
  v1[433] = &off_1E42B5110;

  v3 = v1[431];
  v1[431] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[430];
  v1[430] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 425));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](v1 + 405);
  std::mutex::~mutex((std::mutex *)(v1 + 397));
  std::unique_ptr<md::FontGlyphCache>::~unique_ptr[abi:nn180100]((md::FontGlyphCache **)v1 + 393);
  md::LabelLayoutContextRetainedStorage::~LabelLayoutContextRetainedStorage((md::VenueLogicContext **)v1 + 377);
  md::LabelLayoutContext::~LabelLayoutContext((md::LabelLayoutContext *)(v1 + 216));
  md::LabelLayoutContext::~LabelLayoutContext((md::LabelLayoutContext *)(v1 + 55));
  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](v1 + 47);
  v5 = v1[46];
  v1[46] = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C40A86A77D5);
  std::unique_ptr<md::OcclusionManager>::~unique_ptr[abi:nn180100]((md::OcclusionManager **)v1 + 45);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 43));
  std::unique_ptr<md::LabelStyleCache>::~unique_ptr[abi:nn180100]((md::LabelStyleCache **)v1 + 42);
  std::unique_ptr<md::LabelRenderer>::~unique_ptr[abi:nn180100]((md::LabelRenderer **)v1 + 41);
  std::unique_ptr<md::LabelCollider>::reset[abi:nn180100](v1 + 40);
  std::unique_ptr<md::FontTrackingCache>::~unique_ptr[abi:nn180100]((md::FontTrackingCache **)v1 + 39);
  v6 = v1[38];
  v1[38] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[37];
  v1[37] = 0;
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1020C405AF6BDC9);
  std::unique_ptr<md::LabelFeaturePool>::~unique_ptr[abi:nn180100]((md::LabelFeaturePool **)v1 + 36);
  std::unique_ptr<md::LabelGlyphImageLoader>::~unique_ptr[abi:nn180100]((md::LabelGlyphImageLoader **)v1 + 35);
  std::unique_ptr<md::LabelTextDataLoader>::~unique_ptr[abi:nn180100]((std::mutex ***)v1 + 34);
  std::unique_ptr<md::LabelImageLoader>::~unique_ptr[abi:nn180100]((md::LabelImageLoader **)v1 + 33);
  v8 = v1[32];
  v1[32] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[31];
  v1[31] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[30];
  v1[30] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::unique_ptr<md::LabelWorldTraits>::~unique_ptr[abi:nn180100](v1 + 29);
  v1[26] = &off_1E42B5550;

  std::unique_ptr<md::LabelsState>::~unique_ptr[abi:nn180100]((md::LabelsState **)v1 + 21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 19));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 17));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 14));
  v1[11] = &off_1E42B4D50;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v1 + 3));
  *v1 = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, v1);
  v12 = (std::__shared_weak_count *)v1[2];
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::LabelManager::clearSystemCaches(md::LabelManager *this)
{
  NSObject *v2;
  int v4;
  md::LabelManager *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "MDL:LabelManager:%p Clearing System Caches", (uint8_t *)&v4, 0xCu);
  }

  CTFontRemoveFromCaches();
  CGFontDBGetLocal();
  CGFontDBPurgeAllFonts();
  CGFontCacheGetLocalCache();
  return CGFontCacheReset();
}

uint64_t *std::unique_ptr<md::LabelCollider>::reset[abi:nn180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    free(*(void **)(v1 + 152));
    *(_QWORD *)(v1 + 136) = 0;
    *(_QWORD *)(v1 + 144) = 0;
    *(_QWORD *)(v1 + 152) = 0;
    free(*(void **)(v1 + 128));
    *(_QWORD *)(v1 + 112) = 0;
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
    v2 = *(_QWORD *)(v1 + 56);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 64);
      v4 = *(_QWORD *)(v1 + 56);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(v1 + 64);
        do
        {
          free(*(void **)(v3 - 8));
          *(_QWORD *)(v5 - 24) = 0;
          *(_QWORD *)(v5 - 16) = 0;
          v5 -= 24;
          *(_QWORD *)(v3 - 8) = 0;
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(_QWORD *)(v1 + 56);
      }
      *(_QWORD *)(v1 + 64) = v2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 80) + 40))(*(_QWORD *)(v1 + 80), v4, *(_QWORD *)(v1 + 72) - v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::FontTrackingCache::~FontTrackingCache(md::FontTrackingCache *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v2 = (uint64_t *)*((_QWORD *)this + 11);
  if (v2)
  {
    do
    {
      v6 = (uint64_t *)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v2, 176);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v3, 8 * *((_QWORD *)this + 9));
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  if (v4)
  {
    do
    {
      v7 = (uint64_t *)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete((void *)v4[2]);
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v4, 176);
      v4 = v7;
    }
    while (v7);
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v5, 8 * *((_QWORD *)this + 2));
}

void md::LabelFeaturePool::~LabelFeaturePool(md::LabelFeaturePool *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;

  v2 = *((_QWORD *)this + 80);
  if (v2)
  {
    v3 = *((_QWORD *)this + 81);
    v4 = *((_QWORD *)this + 80);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 80);
    }
    *((_QWORD *)this + 81) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 83) + 40))(*((_QWORD *)this + 83), v4, *((_QWORD *)this + 82) - v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 568));
  v8 = (_QWORD *)*((_QWORD *)this + 67);
  if (v8)
  {
    do
    {
      v34 = (_QWORD *)*v8;
      v35 = (void *)v8[4];
      if (v35 != (void *)v8[6])
        free(v35);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 68) + 40))(*((_QWORD *)this + 68), v8, 80);
      v8 = v34;
    }
    while (v34);
  }
  v9 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v9)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 66) + 40))(*((_QWORD *)this + 66), v9, 8 * *((_QWORD *)this + 65));
  v10 = (_QWORD *)*((_QWORD *)this + 60);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)(v10 + 3));
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 61) + 40))(*((_QWORD *)this + 61), v10, 440);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v12)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 59) + 40))(*((_QWORD *)this + 59), v12, 8 * *((_QWORD *)this + 58));
  v13 = (_QWORD *)*((_QWORD *)this + 53);
  if (v13)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(v13 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 54) + 40))(*((_QWORD *)this + 54), v13, 24);
      v13 = v14;
    }
    while (v14);
  }
  v15 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v15)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 52) + 40))(*((_QWORD *)this + 52), v15, 8 * *((_QWORD *)this + 51));
  v16 = (_QWORD *)*((_QWORD *)this + 46);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v16 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 47) + 40))(*((_QWORD *)this + 47), v16, 24);
      v16 = v17;
    }
    while (v17);
  }
  v18 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v18)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 45) + 40))(*((_QWORD *)this + 45), v18, 8 * *((_QWORD *)this + 44));
  v19 = (_QWORD *)*((_QWORD *)this + 39);
  if (v19)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(v19 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40), v19, 24);
      v19 = v20;
    }
    while (v20);
  }
  v21 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v21)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 38) + 40))(*((_QWORD *)this + 38), v21, 8 * *((_QWORD *)this + 37));
  v22 = (_QWORD *)*((_QWORD *)this + 32);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v22 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 33) + 40))(*((_QWORD *)this + 33), v22, 24);
      v22 = v23;
    }
    while (v23);
  }
  v24 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v24)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 31) + 40))(*((_QWORD *)this + 31), v24, 8 * *((_QWORD *)this + 30));
  v25 = (_QWORD *)*((_QWORD *)this + 25);
  if (v25)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v25 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v25, 24);
      v25 = v26;
    }
    while (v26);
  }
  v27 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v27)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), v27, 8 * *((_QWORD *)this + 23));
  v28 = (_QWORD *)*((_QWORD *)this + 18);
  if (v28)
  {
    do
    {
      v29 = (_QWORD *)*v28;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v28 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v28, 24);
      v28 = v29;
    }
    while (v29);
  }
  v30 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v30)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), v30, 8 * *((_QWORD *)this + 16));
  v31 = (_QWORD *)*((_QWORD *)this + 11);
  if (v31)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v31 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v31, 24);
      v31 = v32;
    }
    while (v32);
  }
  v33 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v33)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v33, 8 * *((_QWORD *)this + 9));
  std::mutex::~mutex((std::mutex *)this);
}

void md::LabelDebugSettings::~LabelDebugSettings(md::LabelDebugSettings *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v5)
  {
    v6 = md::Monitorable<md::ConfigValue<GEOConfigKeyString,std::string>>::~Monitorable(v5);
    MEMORY[0x1A1AF4E00](v6, 0x10B2C40F4174BB0);
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 160);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 80);
}

uint64_t md::LabelManager::{unnamed type#2}::~LabelManager(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 32) = &off_1E42B4B90;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void md::LabelLayoutContextRetainedStorage::~LabelLayoutContextRetainedStorage(md::VenueLogicContext **this)
{
  md::VenueLogicContext *v2;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    md::VenueLogicContext::~VenueLogicContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
}

void md::LabelLayoutContext::~LabelLayoutContext(md::LabelLayoutContext *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 151);
  if (v2)
  {
    *((_QWORD *)this + 152) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 144);
  if (v3)
  {
    *((_QWORD *)this + 145) = v3;
    operator delete(v3);
  }
}

md::OcclusionManager **std::unique_ptr<md::OcclusionManager>::~unique_ptr[abi:nn180100](md::OcclusionManager **a1)
{
  md::OcclusionManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::OcclusionManager::~OcclusionManager(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelStyleCache **std::unique_ptr<md::LabelStyleCache>::~unique_ptr[abi:nn180100](md::LabelStyleCache **a1)
{
  md::LabelStyleCache *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelStyleCache::~LabelStyleCache(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelRenderer **std::unique_ptr<md::LabelRenderer>::~unique_ptr[abi:nn180100](md::LabelRenderer **a1)
{
  md::LabelRenderer *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelRenderer::~LabelRenderer(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::FontTrackingCache **std::unique_ptr<md::FontTrackingCache>::~unique_ptr[abi:nn180100](md::FontTrackingCache **a1)
{
  md::FontTrackingCache *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::FontTrackingCache::~FontTrackingCache(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelFeaturePool **std::unique_ptr<md::LabelFeaturePool>::~unique_ptr[abi:nn180100](md::LabelFeaturePool **a1)
{
  md::LabelFeaturePool *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelFeaturePool::~LabelFeaturePool(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelGlyphImageLoader **std::unique_ptr<md::LabelGlyphImageLoader>::~unique_ptr[abi:nn180100](md::LabelGlyphImageLoader **a1)
{
  md::LabelGlyphImageLoader *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelGlyphImageLoader::~LabelGlyphImageLoader(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

std::mutex ***std::unique_ptr<md::LabelTextDataLoader>::~unique_ptr[abi:nn180100](std::mutex ***a1)
{
  std::mutex **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelTextDataLoader::~LabelTextDataLoader(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelImageLoader **std::unique_ptr<md::LabelImageLoader>::~unique_ptr[abi:nn180100](md::LabelImageLoader **a1)
{
  md::LabelImageLoader *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelImageLoader::~LabelImageLoader(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t *std::unique_ptr<md::LabelWorldTraits>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 168);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = *(_QWORD **)v3;
    if (*(_QWORD **)v3 != v4)
    {
      while (*v5 != v2)
      {
        if (++v5 == v4)
        {
          v5 = *(_QWORD **)(v3 + 8);
          break;
        }
      }
    }
    v6 = v5 + 1;
    if (v5 == v4 || v6 == v4)
    {
      if (v5 == v4)
        goto LABEL_18;
    }
    else
    {
      do
      {
        if (*v6 != v2)
          *v5++ = *v6;
        ++v6;
      }
      while (v6 != v4);
      if (v5 == *(_QWORD **)(v3 + 8))
        goto LABEL_18;
    }
    *(_QWORD *)(v3 + 8) = v5;
LABEL_18:
    MEMORY[0x1A1AF4E00](v2, 0x10A1C4066F3BFFFLL);
  }
  return a1;
}

md::LabelsState **std::unique_ptr<md::LabelsState>::~unique_ptr[abi:nn180100](md::LabelsState **a1)
{
  md::LabelsState *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelsState::~LabelsState(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo(md::LabelFeaturePoolTileInfo *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 45);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 45);
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(v5 + 2);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v5, 24);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v7)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 44) + 40))(*((_QWORD *)this + 44), v7, 8 * *((_QWORD *)this + 43));
  v8 = (_QWORD *)*((_QWORD *)this + 38);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v8 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 39) + 40))(*((_QWORD *)this + 39), v8, 24);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 37) + 40))(*((_QWORD *)this + 37), v10, 8 * *((_QWORD *)this + 36));
  v11 = (_QWORD *)*((_QWORD *)this + 31);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(v11 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32), v11, 24);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v13)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 30) + 40))(*((_QWORD *)this + 30), v13, 8 * *((_QWORD *)this + 29));
  v14 = (_QWORD *)*((_QWORD *)this + 24);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v14 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25), v14, 24);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v16, 8 * *((_QWORD *)this + 22));
  v17 = (_QWORD *)*((_QWORD *)this + 17);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v17 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18), v17, 24);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v19)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v19, 8 * *((_QWORD *)this + 15));
  v20 = (_QWORD *)*((_QWORD *)this + 10);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v20 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v20, 24);
      v20 = v21;
    }
    while (v21);
  }
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v22)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v22, 8 * *((_QWORD *)this + 8));
  v23 = (_QWORD *)*((_QWORD *)this + 3);
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v23 + 2);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v23, 24);
      v23 = v24;
    }
    while (v24);
  }
  v25 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v25)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v25, 8 * *((_QWORD *)this + 1));
}

_QWORD *geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *result;
  if (*result)
  {
    if ((*(_QWORD *)v1)-- == 1)
    {
      v3 = result;
      *(_QWORD *)(v1 + 8) = &off_1E4292B28;
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 40);
        v9 = *(_QWORD *)(v1 + 32);
        if (v8 != v7)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(_QWORD *)(v1 + 32);
        }
        *(_QWORD *)(v1 + 40) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v9, *(_QWORD *)(v1 + 48) - v9);
      }
      v13 = *(std::__shared_weak_count **)(v1 + 24);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v16 & 1) == 0)
      {
        {
          v17 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *v3, 104);
      *v3 = 0;
    }
  }
  return result;
}

_QWORD *geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *result;
  if (*result)
  {
    if ((*(_QWORD *)v1)-- == 1)
    {
      v3 = result;
      *(_QWORD *)(v1 + 8) = &off_1E4292A38;
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 40);
        v9 = *(_QWORD *)(v1 + 32);
        if (v8 != v7)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(_QWORD *)(v1 + 32);
        }
        *(_QWORD *)(v1 + 40) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v9, *(_QWORD *)(v1 + 48) - v9);
      }
      v13 = *(std::__shared_weak_count **)(v1 + 24);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v16 & 1) == 0)
      {
        {
          v17 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *v3, 104);
      *v3 = 0;
    }
  }
  return result;
}

_QWORD *geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *result;
  if (*result)
  {
    if ((*(_QWORD *)v1)-- == 1)
    {
      v3 = result;
      *(_QWORD *)(v1 + 8) = &off_1E4292AF8;
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 40);
        v9 = *(_QWORD *)(v1 + 32);
        if (v8 != v7)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(_QWORD *)(v1 + 32);
        }
        *(_QWORD *)(v1 + 40) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v9, *(_QWORD *)(v1 + 48) - v9);
      }
      v13 = *(std::__shared_weak_count **)(v1 + 24);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v16 & 1) == 0)
      {
        {
          v17 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *v3, 104);
      *v3 = 0;
    }
  }
  return result;
}

_QWORD *geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *result;
  if (*result)
  {
    if ((*(_QWORD *)v1)-- == 1)
    {
      v3 = result;
      *(_QWORD *)(v1 + 8) = &off_1E4292AC8;
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 40);
        v9 = *(_QWORD *)(v1 + 32);
        if (v8 != v7)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(_QWORD *)(v1 + 32);
        }
        *(_QWORD *)(v1 + 40) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v9, *(_QWORD *)(v1 + 48) - v9);
      }
      v13 = *(std::__shared_weak_count **)(v1 + 24);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v16 & 1) == 0)
      {
        {
          v17 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *v3, 104);
      *v3 = 0;
    }
  }
  return result;
}

_QWORD *geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *result;
  if (*result)
  {
    if ((*(_QWORD *)v1)-- == 1)
    {
      v3 = result;
      *(_QWORD *)(v1 + 8) = &off_1E4292A98;
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 40);
        v9 = *(_QWORD *)(v1 + 32);
        if (v8 != v7)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(_QWORD *)(v1 + 32);
        }
        *(_QWORD *)(v1 + 40) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v9, *(_QWORD *)(v1 + 48) - v9);
      }
      v13 = *(std::__shared_weak_count **)(v1 + 24);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v16 & 1) == 0)
      {
        {
          v17 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *v3, 104);
      *v3 = 0;
    }
  }
  return result;
}

_QWORD *geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *result;
  if (*result)
  {
    if ((*(_QWORD *)v1)-- == 1)
    {
      v3 = result;
      *(_QWORD *)(v1 + 8) = &off_1E4292A68;
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 40);
        v9 = *(_QWORD *)(v1 + 32);
        if (v8 != v7)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(_QWORD *)(v1 + 32);
        }
        *(_QWORD *)(v1 + 40) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v9, *(_QWORD *)(v1 + 48) - v9);
      }
      v13 = *(std::__shared_weak_count **)(v1 + 24);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v16 & 1) == 0)
      {
        {
          v17 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *v3, 104);
      *v3 = 0;
    }
  }
  return result;
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292A68;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292A68;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::geoObjectWithRetainingTile(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = a1[8];
  v3 = a1[9];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1[7];
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::enumerateGEOVectorObjects(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(result + 24);
  v3 = *(uint64_t **)(result + 32);
  if (v2 != v3)
  {
    while (1)
    {
      v6 = *v2;
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v6);
      v2 += 3;
      if (v2 == v3)
        return result;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk();
  }
  return result;
}

uint64_t md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292A98;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292A98;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::geoObjectWithRetainingTile(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = a1[8];
  v3 = a1[9];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1[7];
}

uint64_t md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::enumerateGEOVectorObjects(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(result + 24);
  v3 = *(uint64_t **)(result + 32);
  if (v2 != v3)
  {
    while (1)
    {
      v6 = *v2;
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v6);
      v2 += 3;
      if (v2 == v3)
        return result;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk();
  }
  return result;
}

uint64_t md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292AC8;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292AC8;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::geoObjectWithRetainingTile(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = a1[8];
  v3 = a1[9];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1[7];
}

uint64_t md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292AF8;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292AF8;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::geoObjectWithRetainingTile()
{
  return 0;
}

uint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292A38;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292A38;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::geoObjectWithRetainingTile(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = a1[8];
  v3 = a1[9];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1[7];
}

uint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::enumerateGEOVectorObjects(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(result + 24);
  v3 = *(uint64_t **)(result + 32);
  if (v2 != v3)
  {
    while (1)
    {
      v6 = *v2;
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v6);
      v2 += 3;
      if (v2 == v3)
        return result;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk();
  }
  return result;
}

uint64_t md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292B28;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E4292B28;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 24);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 40) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::geoObjectWithRetainingTile(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = a1[8];
  v3 = a1[9];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1[7];
}

void std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA718;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA6D0;
  result[1] = v3;
  return result;
}

void md::LabelManager::arWalkingElevationRequestFailure(md::LabelManager *this, VKARWalkingElevationRequestFailureInfo *a2)
{
  VKARWalkingElevationRequestFailureInfo *v3;
  VKARWalkingElevationRequestFailureInfo *v4;
  uint64_t v5;
  uint64_t v6;
  VKARWalkingElevationRequestFailureInfo *v7;

  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)this + 17);
  if (!v5 || !*(_QWORD *)(v5 + 312))
    goto LABEL_5;
  v7 = v3;
  v6 = *(_QWORD *)(v5 + 312);
  if (v6)
  {
    (*(void (**)(uint64_t, VKARWalkingElevationRequestFailureInfo **))(*(_QWORD *)v6 + 48))(v6, &v7);

LABEL_5:
    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FA18D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::LabelManager::willShutdown(md::LabelManager *this)
{
  NSObject *v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  std::mutex *v6;
  std::mutex **v7;
  std::mutex *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int updated;
  NSObject *v13;
  int v14;
  md::LabelManager *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v14 = 134217984;
    v15 = this;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "MDL:WillShutdown LabelManager:%p", (uint8_t *)&v14, 0xCu);
  }

  atomic_store(1u, (unsigned __int8 *)this + 3393);
  v3 = *((_QWORD *)this + 33);
  v4 = *(std::mutex **)(v3 + 120);
  if (v4)
  {
    std::mutex::lock(*(std::mutex **)(v3 + 120));
    v4[1].__m_.__sig = 0;
    std::mutex::unlock(v4);
  }
  v5 = *((_QWORD *)this + 35);
  v6 = *(std::mutex **)(v5 + 8);
  if (v6)
  {
    std::mutex::lock(*(std::mutex **)(v5 + 8));
    v6[1].__m_.__sig = 0;
    std::mutex::unlock(v6);
  }
  v7 = (std::mutex **)*((_QWORD *)this + 34);
  v8 = *v7;
  if (*v7)
  {
    std::mutex::lock(*v7);
    v8[1].__m_.__sig = 0;
    std::mutex::unlock(v8);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  updated = md::LabelManager::tryWaitForBkgdUpdateComplete(this, 0x3E8u);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v13 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = 134218240;
    v15 = this;
    v16 = 1024;
    v17 = updated;
    _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_INFO, "WillShutdown-End LabelManager:%p didBkgdTaskFinish:%i", (uint8_t *)&v14, 0x12u);
  }

}

void std::__function::__func<md::LabelManager::setNeedsOcclusionClear(void)::$_0,std::allocator<md::LabelManager::setNeedsOcclusionClear(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setNeedsOcclusionClear(void)::$_0,std::allocator<md::LabelManager::setNeedsOcclusionClear(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C9F38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setNeedsOcclusionClear(void)::$_0,std::allocator<md::LabelManager::setNeedsOcclusionClear(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C9F38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setNeedsOcclusionClear(void)::$_0,std::allocator<md::LabelManager::setNeedsOcclusionClear(void)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 3052) = 1;
  return result;
}

void md::LabelManager::layout(uint64_t a1, md::LayoutContext *a2, uint64_t a3)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  int v31;
  BOOL v32;
  unsigned __int16 *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int8x8_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  float *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _BYTE *v99;
  float32x2_t *v100;
  _QWORD *v101;
  int8x8_t v102;
  uint8x8_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  double v113;
  double v114;
  double v115;
  double v116;
  float32_t v117;
  float32_t v118;
  id v119;
  double v120;
  float32x2_t v121;
  float32x2_t v122;
  int32x2_t v123;
  _BOOL4 v124;
  float32x2_t v125;
  float32x2_t *v126;
  float32x2_t v127;
  float32x2_t v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  md::LayoutContext *v136;
  float v137;
  float v138;
  uint64_t v139;
  unsigned __int8 v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  double v150;
  long double v151;
  long double v152;
  long double v153;
  double v154;
  long double v155;
  double v156;
  long double v157;
  double v158;
  uint64_t v159;
  double v160;
  BOOL v161;
  float v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  uint64_t v175;
  _BOOL4 v176;
  unsigned __int8 *v177;
  int v178;
  float v179;
  float v180;
  float v181;
  float v182;
  __float2 v183;
  float v184;
  BOOL v185;
  double v186;
  _BOOL4 v187;
  double v188;
  float v189;
  _BOOL4 v190;
  int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  int v196;
  int v197;
  char v198;
  float v199;
  float sinval;
  float cosval;
  __float2 v202;
  int v203;
  double v204;
  BOOL v205;
  long double v206;
  id v207;
  double v208;
  double v209;
  double v210;
  double v211;
  __int128 v212;
  float64x2_t v213;
  double v214;
  char v215;
  char v216;
  int v217;
  int v218;
  float v219;
  float v220;
  uint64_t v221;
  _QWORD *v222;
  int8x8_t v223;
  uint8x8_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  unint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  char *v244;
  char *v245;
  char *v246;
  unsigned __int8 *v247;
  unsigned __int8 *v248;
  double *v249;
  double *v250;
  float v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  double *v258;
  double v259;
  double v260;
  long double v261;
  double v262;
  double v263;
  _QWORD *v264;
  int8x8_t v265;
  uint8x8_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  double v270;
  int v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  double v288;
  double v289;
  int v290;
  double v291;
  long double v292;
  long double v293;
  double v294;
  long double v295;
  double v296;
  __double2 v297;
  double v298;
  double v299;
  __double2 v300;
  float v301;
  float v302;
  float v303;
  __float2 v304;
  float v305;
  float v306;
  __float2 v307;
  float v308;
  float v309;
  float v310;
  float v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  __double2 v322;
  double v323;
  double v324;
  double v325;
  double v326;
  __double2 v327;
  double v328;
  double v329;
  double v330;
  double v331;
  uint64_t *v332;
  int8x8_t v333;
  uint8x8_t v334;
  unint64_t v335;
  float v336;
  float v337;
  double v338;
  double v339;
  double v340;
  __double2 v341;
  double v342;
  __double2 v343;
  double v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  uint64_t v348;
  unint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  int8x8_t *v355;
  float v356;
  void *v357;
  void *v358;
  int v359;
  float v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  double v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t *v367;
  int v368;
  uint64_t v369;
  uint64_t *v370;
  _BOOL4 v371;
  char v372;
  uint64_t v373;
  uint64_t v374;
  BOOL v375;
  uint64_t v376;
  char v377;
  unsigned int *v378;
  unsigned int *v379;
  char v380;
  unsigned int v381;
  uint64_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  uint64_t *v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  md::LayoutContext *v401;
  float v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  _QWORD *v432;
  unint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *p_shared_owners;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  BOOL v447;
  _QWORD *v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  char v469;
  uint64_t v470;
  std::__shared_weak_count_vtbl *v471;
  float32x2_t v472;
  std::__shared_weak_count_vtbl *v473;
  unint64_t *v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  int v482;
  uint64_t v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  float v487;
  unsigned __int8 v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int32x2_t v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  _QWORD *v502;
  char *v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  _QWORD *v515;
  _QWORD *v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  __int128 v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  _QWORD *v526;
  int8x8_t v527;
  uint8x8_t v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  _QWORD *v535;
  _QWORD *v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  int v544;
  int v545;
  _BOOL4 v546;
  std::__shared_weak_count *v547;
  std::__shared_weak_count_vtbl *v548;
  std::__shared_weak_count *v549;
  std::__shared_weak_count *v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  uint64_t v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  unint64_t v580;
  char *v581;
  __int128 v582;
  char *v583;
  _BYTE *v584;
  size_t v585;
  unint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  unint64_t v590;
  char *v591;
  int v592;
  int v593;
  _BYTE *v594;
  unint64_t v595;
  char *v596;
  void *v597;
  char *v598;
  unsigned __int8 *v599;
  unsigned __int8 v600;
  int v601;
  uint64_t v602;
  int v603;
  int v604;
  char *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  md::VenueLogicContext *v609;
  char v610;
  uint64_t v611;
  unint64_t *v612;
  unint64_t v613;
  _QWORD *v614;
  uint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  uint64_t v627;
  unsigned int v628;
  NSObject *v629;
  std::__shared_weak_count_vtbl **v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  float v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  unsigned __int8 v642;
  uint64_t v643;
  uint64_t v644;
  std::__shared_weak_count *v645;
  unsigned int *v646;
  unsigned int v647;
  uint64_t v648;
  std::__shared_weak_count_vtbl *v649;
  void (__cdecl **v650)(std::__shared_weak_count *__hidden);
  void (__cdecl **v651)(std::__shared_weak_count *__hidden);
  uint64_t v652;
  uint64_t v653;
  std::__shared_weak_count_vtbl *v654;
  void (__cdecl *v655)(std::__shared_weak_count *__hidden);
  unint64_t *v656;
  unint64_t v657;
  uint64_t (**v658)();
  std::__shared_weak_count *v659;
  unint64_t *v660;
  unint64_t v661;
  std::__shared_weak_count *v662;
  std::__shared_weak_count_vtbl *v663;
  unint64_t *v664;
  unint64_t v665;
  std::__shared_weak_count_vtbl **v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count_vtbl **v670;
  uint64_t v671;
  std::__shared_weak_count *v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  std::__shared_weak_count *v684;
  unint64_t *v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  std::__shared_weak_count *v690;
  unint64_t *v691;
  unint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  int v696;
  int v697;
  int v698;
  _QWORD *v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  uint64_t v709;
  _QWORD *v710;
  _QWORD *v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  _QWORD *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  _QWORD *v725;
  uint64_t v726;
  _OWORD *v727;
  __int128 *v728;
  uint64_t v729;
  __int128 v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t *v735;
  uint64_t *v736;
  uint64_t v737;
  uint64_t (***v738)(_QWORD);
  std::__shared_weak_count *v739;
  unint64_t *v740;
  unint64_t v741;
  unint64_t v742;
  _QWORD *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  unsigned __int8 *v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  _QWORD *v755;
  uint64_t *v756;
  uint64_t v757;
  uint64_t (***v758)(_QWORD);
  std::__shared_weak_count *v759;
  unint64_t *v760;
  unint64_t v761;
  unint64_t v762;
  void **v763;
  void **v764;
  unint64_t v765;
  uint64_t v766;
  void **v767;
  char *v768;
  _QWORD *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  unint64_t v777;
  uint64_t v778;
  unint64_t v779;
  _QWORD *v780;
  uint64_t v781;
  uint64_t v782;
  char *v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  float v787;
  float v788;
  float v789;
  float v790;
  float v791;
  float v792;
  float v793;
  float v794;
  float v795;
  float v796;
  float v797;
  float v798;
  float v799;
  float v800;
  float v801;
  float v802;
  _QWORD *v803;
  unint64_t v804;
  float *v805;
  _QWORD *v806;
  unint64_t v807;
  float *v808;
  long double v809;
  long double v810;
  long double v811;
  long double v812;
  long double v813;
  long double v814;
  long double v815;
  double v816;
  long double v817;
  unint64_t v818;
  uint64_t v819;
  unsigned __int8 ***v820;
  unsigned __int8 **v821;
  unsigned __int8 *v822;
  unsigned __int8 *v823;
  unint64_t v824;
  unint64_t v825;
  unsigned __int8 *v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  uint64_t v832;
  unsigned __int8 *v833;
  uint64_t v834;
  uint64_t v835;
  int v836;
  uint64_t v837;
  unsigned int *v838;
  unsigned int *v839;
  unsigned int v840;
  uint64_t v841;
  char *v842;
  char *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  unint64_t v847;
  unint64_t v848;
  char *v849;
  uint64_t v850;
  char *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  char *v855;
  int64_t v856;
  char *v857;
  _QWORD *v858;
  uint64_t v859;
  char *v860;
  char *v861;
  void *v862;
  char *v863;
  char *v864;
  char *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  char *v869;
  int64_t v870;
  char *v871;
  unint64_t v872;
  char *v873;
  void *v874;
  char *v875;
  char *v876;
  unint64_t v877;
  unint64_t v878;
  _BYTE *v879;
  unint64_t v880;
  char *v881;
  int64_t v882;
  unint64_t v883;
  char *v884;
  void *v885;
  char *v886;
  char *v887;
  unint64_t v888;
  void *v889;
  char *v890;
  void *v891;
  char *v892;
  char *v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  unint64_t v897;
  char *v898;
  unint64_t v899;
  int64_t v900;
  unint64_t v901;
  char *v902;
  char *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  __int128 *v907;
  char *v908;
  uint64_t v909;
  __int128 v910;
  uint64_t v911;
  unint64_t v912;
  _BYTE *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  char *v917;
  unint64_t v918;
  _BYTE *v919;
  unint64_t v920;
  char *v921;
  int64_t v922;
  unint64_t v923;
  char *v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  __int128 *v929;
  _OWORD *v930;
  uint64_t v931;
  __int128 v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  char *v937;
  unint64_t v938;
  char *v939;
  char *v940;
  uint64_t v941;
  unint64_t v942;
  char *v943;
  char *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  __int128 *v948;
  char *v949;
  uint64_t v950;
  __int128 v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  __int128 *v956;
  _OWORD *v957;
  uint64_t v958;
  __int128 v959;
  uint64_t v960;
  _QWORD *v961;
  uint64_t v962;
  unint64_t *v963;
  unint64_t v964;
  uint64_t v965;
  char *v966;
  char *v967;
  uint64_t v968;
  char *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  char *v973;
  size_t v974;
  char *v975;
  unint64_t v976;
  _BYTE *v977;
  unint64_t v978;
  char *v979;
  int64_t v980;
  unint64_t v981;
  char *v982;
  uint64_t v983;
  unint64_t v984;
  uint64_t v985;
  uint64_t v986;
  __int128 *v987;
  _OWORD *v988;
  uint64_t v989;
  __int128 v990;
  uint64_t v991;
  _QWORD *v992;
  unint64_t v993;
  uint64_t v994;
  unint64_t *v995;
  unint64_t v996;
  _QWORD *v997;
  uint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  _OWORD *v1004;
  uint64_t v1005;
  __int128 v1006;
  unint64_t *v1007;
  unint64_t v1008;
  _QWORD *v1009;
  _QWORD *v1010;
  __int128 v1011;
  _QWORD *v1012;
  uint64_t v1013;
  uint64_t v1014;
  std::__shared_weak_count *v1015;
  unint64_t *v1016;
  unint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  std::__shared_weak_count *v1020;
  unint64_t *v1021;
  unint64_t v1022;
  uint64_t v1023;
  unint64_t v1024;
  uint64_t v1025;
  void **v1026;
  uint64_t v1027;
  uint64_t v1028;
  std::__shared_weak_count *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t i;
  std::__shared_weak_count *v1036;
  unint64_t *v1037;
  unint64_t v1038;
  uint64_t v1039;
  int v1040;
  unsigned int v1041;
  unint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t **v1046;
  uint64_t **v1047;
  uint64_t v1048;
  uint64_t *v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  uint64_t v1055;
  unint64_t v1056;
  _QWORD *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t **v1060;
  std::__shared_weak_count *v1061;
  unint64_t *v1062;
  unint64_t v1063;
  _QWORD *v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  unsigned __int8 *v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  _QWORD *v1074;
  void **v1075;
  void **v1076;
  unint64_t v1077;
  void **v1078;
  char *v1079;
  uint64_t v1080;
  _QWORD *v1081;
  uint64_t v1082;
  char *v1083;
  void **v1084;
  uint64_t v1085;
  char *v1086;
  std::__shared_weak_count *v1087;
  unint64_t *v1088;
  unint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  NSObject *v1094;
  std::__shared_weak_count_vtbl **v1095;
  uint64_t v1096;
  uint64_t (***v1097)();
  uint64_t v1098;
  uint64_t v1099;
  NSObject *v1100;
  std::__shared_weak_count_vtbl **v1101;
  uint64_t v1102;
  _QWORD *v1103;
  uint64_t v1104;
  _QWORD *v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  _OWORD *v1109;
  unsigned __int16 v1110;
  unsigned __int16 v1111;
  gdc::Registry *v1112;
  uint64_t v1113;
  float v1114;
  int v1115;
  char v1116;
  uint64_t *v1117;
  int8x8_t v1118;
  uint8x8_t v1119;
  unint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  _QWORD *v1123;
  _QWORD *v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  md::SceneContext **v1128;
  _QWORD *v1129;
  unint64_t v1130;
  float v1131;
  float *v1132;
  float v1133;
  float v1134;
  float v1135;
  float v1136;
  int v1137;
  __int128 v1138;
  uint64_t v1139;
  float v1140;
  float v1141;
  float v1142;
  float v1143;
  float v1144;
  float v1145;
  float v1146;
  float v1147;
  float v1148;
  uint64_t v1149;
  float v1150;
  float v1151;
  float v1152;
  int v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  std::__shared_weak_count_vtbl **v1159;
  uint64_t v1160;
  char v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  _QWORD *v1166;
  uint64_t v1167;
  uint64_t v1168;
  int v1169;
  int v1170;
  uint64_t v1174;
  uint64_t v1175;
  unsigned __int8 v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  NSObject *v1180;
  grl::IconManager *v1181;
  grl::IconManager *v1182;
  uint64_t v1183;
  unint64_t *v1184;
  unint64_t v1185;
  uint64_t v1186;
  float32x2_t *v1187;
  _BOOL4 v1189;
  char v1190;
  int v1191;
  float32x2_t *v1192;
  unsigned int v1193;
  BOOL v1194;
  int v1195;
  int v1196;
  char v1197;
  uint64_t v1198;
  BOOL v1199;
  uint64_t v1200;
  float32x2_t v1201;
  uint64_t v1202;
  std::__shared_weak_count *v1203;
  unint64_t *v1204;
  unint64_t v1205;
  uint64_t v1206;
  std::__shared_weak_count *v1207;
  double v1208;
  unint64_t *v1209;
  unint64_t v1210;
  char v1211;
  float v1212;
  int v1213;
  float v1214;
  unint64_t *v1215;
  unint64_t v1216;
  unint64_t *v1217;
  unint64_t v1218;
  void *v1219;
  void *v1220;
  int v1221;
  int v1222;
  unint64_t v1223;
  _QWORD *v1224;
  int8x8_t v1225;
  uint8x8_t v1226;
  unint64_t v1227;
  uint64_t v1229;
  uint64_t v1230;
  _QWORD *v1231;
  _QWORD *v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  char v1238;
  uint64_t v1239;
  _QWORD *v1240;
  _BYTE *v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  const __CFString *v1245;
  _BYTE *v1247;
  char *v1248;
  double *v1249;
  unsigned __int8 *j;
  uint64_t v1251;
  const __CFString *v1252;
  const __CFString *v1253;
  const __CFString *v1254;
  uint64_t v1255;
  uint64_t v1256;
  void *v1257;
  _BYTE *v1258;
  void *v1259;
  void *v1260;
  _BYTE *v1261;
  void *v1262;
  uint64_t v1263;
  __n128 v1264;
  int v1265;
  int v1266;
  float v1267;
  float v1268;
  uint64_t v1269;
  _QWORD *v1270;
  _QWORD *v1271;
  std::__shared_weak_count *v1272;
  uint64_t v1273;
  unint64_t *v1274;
  unint64_t v1275;
  unint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  float v1280;
  float v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  BOOL v1285;
  uint64_t *v1286;
  uint64_t *v1287;
  float v1288;
  float v1289;
  float v1290;
  float v1291;
  float v1293;
  float v1294;
  void *v1295;
  _BYTE *v1296;
  void *v1297;
  void *v1298;
  uint64_t v1299;
  float v1300;
  float v1301;
  float v1302;
  float v1303;
  float v1304;
  float v1305;
  float v1306;
  float v1307;
  uint64_t v1308;
  std::__shared_weak_count *v1309;
  float v1310;
  unint64_t *v1311;
  unint64_t v1312;
  uint64_t v1313;
  std::__shared_weak_count *v1314;
  double v1315;
  unint64_t *v1316;
  unint64_t v1317;
  char v1318;
  float v1319;
  int v1320;
  float v1321;
  unint64_t *v1322;
  unint64_t v1323;
  unint64_t *v1324;
  unint64_t v1325;
  float32_t v1326;
  int8x16_t *v1327;
  size_t v1328;
  double v1329;
  int32x2_t v1330;
  _QWORD *v1331;
  _QWORD *v1332;
  uint64_t v1333;
  _QWORD *v1334;
  unint64_t v1335;
  uint64_t v1336;
  unint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  unsigned __int8 ***v1342;
  _OWORD *v1343;
  unint64_t v1344;
  std::recursive_mutex *v1345;
  uint64_t v1346;
  uint64_t v1348;
  _OWORD *v1349;
  unsigned __int8 **v1350;
  double v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  double v1355;
  int v1356;
  unsigned __int8 *v1357;
  md::LayoutContext *v1358;
  double v1359;
  BOOL v1360;
  unsigned int *v1361;
  uint64_t *v1362;
  uint64_t v1363;
  unsigned __int8 *v1364;
  _QWORD *v1366;
  _QWORD *v1367;
  uint64_t v1368;
  uint64_t v1369;
  _QWORD *v1370;
  char v1371;
  __int16 v1372;
  uint8_t v1373[16];
  _BYTE __p[32];
  double v1375;
  double v1376;
  double v1377;
  uint64_t v1378;
  double v1379;
  double v1380;
  double v1381;
  double v1382;
  double v1383;
  double v1384;
  double v1385;
  double v1386;
  _OWORD v1387[2];
  __int128 v1388;
  __int128 v1389;
  __int128 v1390;
  __int128 v1391;
  uint64_t v1392;
  uint64_t v1393;
  __int128 v1394;
  std::__shared_weak_count_vtbl *v1395;
  std::__shared_weak_count *v1396;
  std::__shared_weak_count_vtbl **v1397;
  uint64_t (**v1398)();
  std::__shared_weak_count *v1399;
  uint64_t (***v1400)();
  std::__shared_weak_count_vtbl *buf;
  std::__shared_weak_count *v1402;
  std::__shared_weak_count_vtbl **p_buf;
  std::__shared_weak_count_vtbl *v1404;
  float32x2_t v1405[2];
  std::__shared_weak_count_vtbl **v1406;
  uint64_t v1407;

  v1407 = *MEMORY[0x1E0C80C00];
  v1345 = (std::recursive_mutex *)(a1 + 24);
  v1346 = mach_absolute_time();
  std::recursive_mutex::lock(v1345);
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  if (*(_BYTE *)(a1 + 3044))
  {
    md::LayoutContext::frameState(a2);
    v16 = *(double *)(a1 + 3288);
    v17 = fmax(*(double *)(v15 + 88), v16);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 20))
      v18 = fmax(fabs((*(double *)(a1 + 3096)+ *(double *)(a1 + 3088)+ *(double *)(a1 + 3104)+ *(double *)(a1 + 3112)+ *(double *)(a1 + 3120))* 0.2)* 25.0, 1.0);
    else
      v18 = 1.0;
    v20 = v17 - v16;
    v19 = v18 * v20;
  }
  else
  {
    v19 = 0.0;
  }
  v1358 = a2;
  md::LayoutContext::frameState(a2);
  *(_QWORD *)(a1 + 3288) = *(_QWORD *)(v21 + 88);
  ++*(_DWORD *)(a1 + 3272);
  *(_BYTE *)(a1 + 3304) = 1;
  *(_DWORD *)(a1 + 3396) = 0;
  if (v14)
  {
    v22 = *(_QWORD **)v14;
    v23 = *(unsigned __int16 **)(*(_QWORD *)v14 + 184);
    v24 = *(unsigned __int16 **)(*(_QWORD *)v14 + 192);
    if (v23 != v24)
    {
      v25 = (unsigned __int16 *)v22[15];
      do
      {
        v26 = (unsigned __int16 *)v22[14];
        if (v26 != v25)
        {
          v26 = (unsigned __int16 *)v22[14];
          while (*v26 != *v23)
          {
            v26 += 56;
            if (v26 == v25)
            {
              v26 = (unsigned __int16 *)v22[15];
              break;
            }
          }
        }
        if (!*((_BYTE *)v26 + 8))
          goto LABEL_52;
        ++v23;
      }
      while (v23 != v24);
    }
    v27 = (unsigned __int16 *)v22[26];
    v28 = (unsigned __int16 *)v22[27];
    if (v27 == v28)
    {
      v32 = 1;
    }
    else
    {
      v30 = (unsigned __int16 *)v22[14];
      v29 = (unsigned __int16 *)v22[15];
      do
      {
        v34 = v30;
        if (v30 != v29)
        {
          v34 = v30;
          while (*v34 != *v27)
          {
            v34 += 56;
            if (v34 == v29)
            {
              v34 = v29;
              break;
            }
          }
        }
        v31 = *((unsigned __int8 *)v34 + 8);
        _ZF = v31 == 0;
        v32 = v31 != 0;
        ++v27;
        _ZF = _ZF || v27 == v28;
      }
      while (!_ZF);
    }
  }
  else
  {
LABEL_52:
    v32 = 0;
  }
  *(_BYTE *)(a1 + 3386) = v32;
  if (*(_BYTE *)(a1 + 3388))
  {
    *(_BYTE *)(a1 + 3388) = 0;
    v35 = *(_QWORD **)(a1 + 168);
    v36 = (_QWORD *)*v35;
    v37 = (_QWORD *)v35[1];
    if ((_QWORD *)*v35 != v37)
    {
      do
      {
        (**(void (***)(_QWORD))*v36)(*v36);
        ++v36;
      }
      while (v36 != v37);
    }
  }
  v38 = *(_QWORD *)(a1 + 3448);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
  v39 = a1;
  atomic_store(0, (unsigned __int8 *)(a1 + 3048));
  v40 = (uint64_t *)*((_QWORD *)a2 + 1);
  v41 = (int8x8_t)v40[1];
  if (!*(_QWORD *)&v41)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v1366 = (_QWORD *)(a1 + 1544);
    v1354 = a1 + 440;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 1544);
LABEL_228:
    v97 = 0;
    *(_WORD *)(v39 + 451) = 0;
    *(_BYTE *)(v39 + 453) = 0;
    goto LABEL_229;
  }
  v42 = (uint8x8_t)vcnt_s8(v41);
  v42.i16[0] = vaddlv_u8(v42);
  if (v42.u32[0] > 1uLL)
  {
    v43 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v41 <= 0x1AF456233693CD46uLL)
      v43 = 0x1AF456233693CD46uLL % *(_QWORD *)&v41;
  }
  else
  {
    v43 = (*(_QWORD *)&v41 - 1) & 0x1AF456233693CD46;
  }
  v50 = *(_QWORD **)(*v40 + 8 * v43);
  if (!v50 || (v51 = (_QWORD *)*v50) == 0)
  {
    v44 = 0;
    v54 = (_QWORD *)(a1 + 1544);
    v1354 = a1 + 440;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 1544);
    goto LABEL_86;
  }
  if (v42.u32[0] < 2uLL)
  {
    while (1)
    {
      v53 = v51[1];
      if (v53 == 0x1AF456233693CD46)
      {
        if (v51[2] == 0x1AF456233693CD46)
          goto LABEL_82;
      }
      else if ((v53 & (*(_QWORD *)&v41 - 1)) != v43)
      {
        goto LABEL_84;
      }
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_84;
    }
  }
  while (2)
  {
    v52 = v51[1];
    if (v52 != 0x1AF456233693CD46)
    {
      if (v52 >= *(_QWORD *)&v41)
        v52 %= *(_QWORD *)&v41;
      if (v52 != v43)
        goto LABEL_84;
      goto LABEL_70;
    }
    if (v51[2] != 0x1AF456233693CD46)
    {
LABEL_70:
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_84;
      continue;
    }
    break;
  }
LABEL_82:
  v55 = v51[5];
  if (*(_QWORD *)(v55 + 8) == 0x1AF456233693CD46)
  {
    v44 = *(_QWORD *)(v55 + 32);
    goto LABEL_85;
  }
LABEL_84:
  v44 = 0;
LABEL_85:
  v54 = (_QWORD *)(a1 + 1544);
  v1354 = a1 + 440;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 1544);
LABEL_86:
  v56 = (uint8x8_t)vcnt_s8(v41);
  v56.i16[0] = vaddlv_u8(v56);
  if (v56.u32[0] > 1uLL)
  {
    v57 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v41 <= 0xE42D19AFCA302E68)
      v57 = 0xE42D19AFCA302E68 % *(_QWORD *)&v41;
  }
  else
  {
    v57 = (*(_QWORD *)&v41 - 1) & 0xE42D19AFCA302E68;
  }
  v58 = *v40;
  v47 = *(uint64_t **)(*v40 + 8 * v57);
  if (!v47 || (v47 = (uint64_t *)*v47) == 0)
  {
LABEL_108:
    if (v56.u32[0] > 1uLL)
      goto LABEL_111;
    goto LABEL_109;
  }
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      v60 = v47[1];
      if (v60 == 0xE42D19AFCA302E68)
      {
        if (v47[2] == 0xE42D19AFCA302E68)
          goto LABEL_106;
      }
      else if ((v60 & (*(_QWORD *)&v41 - 1)) != v57)
      {
        goto LABEL_110;
      }
      v47 = (uint64_t *)*v47;
      if (!v47)
        goto LABEL_108;
    }
  }
  while (1)
  {
    v59 = v47[1];
    if (v59 == 0xE42D19AFCA302E68)
      break;
    if (v59 >= *(_QWORD *)&v41)
      v59 %= *(_QWORD *)&v41;
    if (v59 != v57)
      goto LABEL_110;
LABEL_95:
    v47 = (uint64_t *)*v47;
    if (!v47)
      goto LABEL_108;
  }
  if (v47[2] != 0xE42D19AFCA302E68)
    goto LABEL_95;
LABEL_106:
  v61 = v47[5];
  if (*(_QWORD *)(v61 + 8) == 0xE42D19AFCA302E68)
  {
    v47 = *(uint64_t **)(v61 + 32);
    goto LABEL_108;
  }
LABEL_110:
  v47 = 0;
  if (v56.u32[0] <= 1uLL)
  {
LABEL_109:
    v62 = (*(_QWORD *)&v41 - 1) & 0x1AF456233693CD46;
    goto LABEL_113;
  }
LABEL_111:
  v62 = 0x1AF456233693CD46;
  if (*(_QWORD *)&v41 <= 0x1AF456233693CD46uLL)
    v62 = 0x1AF456233693CD46uLL % *(_QWORD *)&v41;
LABEL_113:
  v63 = *(_QWORD **)(v58 + 8 * v62);
  if (!v63)
    goto LABEL_131;
  v64 = (_QWORD *)*v63;
  if (!v64)
    goto LABEL_131;
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      v66 = v64[1];
      if (v66 == 0x1AF456233693CD46)
      {
        if (v64[2] == 0x1AF456233693CD46)
          goto LABEL_129;
      }
      else if ((v66 & (*(_QWORD *)&v41 - 1)) != v62)
      {
        goto LABEL_131;
      }
      v64 = (_QWORD *)*v64;
      if (!v64)
        goto LABEL_131;
    }
  }
  while (2)
  {
    v65 = v64[1];
    if (v65 != 0x1AF456233693CD46)
    {
      if (v65 >= *(_QWORD *)&v41)
        v65 %= *(_QWORD *)&v41;
      if (v65 != v62)
        goto LABEL_131;
      goto LABEL_118;
    }
    if (v64[2] != 0x1AF456233693CD46)
    {
LABEL_118:
      v64 = (_QWORD *)*v64;
      if (!v64)
        goto LABEL_131;
      continue;
    }
    break;
  }
LABEL_129:
  v67 = v64[5];
  if (*(_QWORD *)(v67 + 8) == 0x1AF456233693CD46)
  {
    v46 = *(_QWORD *)(v67 + 32);
    goto LABEL_132;
  }
LABEL_131:
  v46 = 0;
LABEL_132:
  if (v56.u32[0] > 1uLL)
  {
    v68 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v41 <= 0x8BD499FBD96FBB9ELL)
      v68 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v41;
  }
  else
  {
    v68 = (*(_QWORD *)&v41 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v69 = *(_QWORD **)(v58 + 8 * v68);
  if (!v69)
    goto LABEL_156;
  v70 = (_QWORD *)*v69;
  if (!v70)
    goto LABEL_156;
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      v72 = v70[1];
      if (v72 == 0x8BD499FBD96FBB9ELL)
      {
        if (v70[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_152;
      }
      else if ((v72 & (*(_QWORD *)&v41 - 1)) != v68)
      {
        goto LABEL_156;
      }
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_156;
    }
  }
  while (1)
  {
    v71 = v70[1];
    if (v71 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v71 >= *(_QWORD *)&v41)
      v71 %= *(_QWORD *)&v41;
    if (v71 != v68)
      goto LABEL_156;
LABEL_141:
    v70 = (_QWORD *)*v70;
    if (!v70)
      goto LABEL_156;
  }
  if (v70[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_141;
LABEL_152:
  v73 = v70[5];
  if (*(_QWORD *)(v73 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_156:
    v48 = 0;
    if (v56.u32[0] > 1uLL)
      goto LABEL_154;
    goto LABEL_157;
  }
  v48 = *(float **)(v73 + 32);
  if (v56.u32[0] <= 1uLL)
  {
LABEL_157:
    v74 = (*(_QWORD *)&v41 - 1) & 0x1B8B241A8D896A1DLL;
    goto LABEL_158;
  }
LABEL_154:
  v74 = 0x1B8B241A8D896A1DLL;
  if (*(_QWORD *)&v41 <= 0x1B8B241A8D896A1DuLL)
    v74 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v41;
LABEL_158:
  v75 = *(_QWORD **)(v58 + 8 * v74);
  v1366 = v54;
  if (!v75)
    goto LABEL_176;
  v76 = (_QWORD *)*v75;
  if (!v76)
    goto LABEL_176;
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      v78 = v76[1];
      if (v78 == 0x1B8B241A8D896A1DLL)
      {
        if (v76[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_174;
      }
      else if ((v78 & (*(_QWORD *)&v41 - 1)) != v74)
      {
        goto LABEL_176;
      }
      v76 = (_QWORD *)*v76;
      if (!v76)
        goto LABEL_176;
    }
  }
  while (2)
  {
    v77 = v76[1];
    if (v77 != 0x1B8B241A8D896A1DLL)
    {
      if (v77 >= *(_QWORD *)&v41)
        v77 %= *(_QWORD *)&v41;
      if (v77 != v74)
        goto LABEL_176;
      goto LABEL_163;
    }
    if (v76[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_163:
      v76 = (_QWORD *)*v76;
      if (!v76)
        goto LABEL_176;
      continue;
    }
    break;
  }
LABEL_174:
  v79 = v76[5];
  if (*(_QWORD *)(v79 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v45 = *(_QWORD *)(v79 + 32);
    goto LABEL_177;
  }
LABEL_176:
  v45 = 0;
LABEL_177:
  if (v56.u32[0] > 1uLL)
  {
    v80 = 0x92F3DC114CADB853;
    if (*(_QWORD *)&v41 <= 0x92F3DC114CADB853)
      v80 = 0x92F3DC114CADB853 % *(_QWORD *)&v41;
  }
  else
  {
    v80 = (*(_QWORD *)&v41 - 1) & 0x92F3DC114CADB853;
  }
  v81 = *(_QWORD **)(v58 + 8 * v80);
  if (!v81)
    goto LABEL_199;
  v82 = (_QWORD *)*v81;
  if (!v82)
    goto LABEL_199;
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      v84 = v82[1];
      if (v84 == 0x92F3DC114CADB853)
      {
        if (v82[2] == 0x92F3DC114CADB853)
          goto LABEL_197;
      }
      else if ((v84 & (*(_QWORD *)&v41 - 1)) != v80)
      {
        goto LABEL_199;
      }
      v82 = (_QWORD *)*v82;
      if (!v82)
        goto LABEL_199;
    }
  }
  while (2)
  {
    v83 = v82[1];
    if (v83 != 0x92F3DC114CADB853)
    {
      if (v83 >= *(_QWORD *)&v41)
        v83 %= *(_QWORD *)&v41;
      if (v83 != v80)
        goto LABEL_199;
      goto LABEL_186;
    }
    if (v82[2] != 0x92F3DC114CADB853)
    {
LABEL_186:
      v82 = (_QWORD *)*v82;
      if (!v82)
        goto LABEL_199;
      continue;
    }
    break;
  }
LABEL_197:
  v85 = v82[5];
  if (*(_QWORD *)(v85 + 8) == 0x92F3DC114CADB853)
  {
    v49 = *(_QWORD *)(v85 + 32);
    goto LABEL_200;
  }
LABEL_199:
  v49 = 0;
LABEL_200:
  if (v56.u32[0] > 1uLL)
  {
    v86 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v41 <= 0xC97B9E962ADF4AD4)
      v86 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v41;
  }
  else
  {
    v86 = (*(_QWORD *)&v41 - 1) & 0xC97B9E962ADF4AD4;
  }
  v87 = *(_QWORD **)(v58 + 8 * v86);
  if (!v87)
    goto LABEL_227;
  v88 = (_QWORD *)*v87;
  if (!v88)
    goto LABEL_227;
  if (v56.u32[0] < 2uLL)
  {
    v89 = *(_QWORD *)&v41 - 1;
    while (1)
    {
      v91 = v88[1];
      if (v91 == 0xC97B9E962ADF4AD4)
      {
        if (v88[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_220;
      }
      else if ((v91 & v89) != v86)
      {
        goto LABEL_227;
      }
      v88 = (_QWORD *)*v88;
      if (!v88)
        goto LABEL_227;
    }
  }
  while (1)
  {
    v90 = v88[1];
    if (v90 == 0xC97B9E962ADF4AD4)
      break;
    if (v90 >= *(_QWORD *)&v41)
      v90 %= *(_QWORD *)&v41;
    if (v90 != v86)
      goto LABEL_227;
LABEL_209:
    v88 = (_QWORD *)*v88;
    if (!v88)
      goto LABEL_227;
  }
  if (v88[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_209;
LABEL_220:
  v92 = v88[5];
  if (*(_QWORD *)(v92 + 8) != 0xC97B9E962ADF4AD4 || (v93 = *(uint64_t **)(v92 + 32)) == 0)
  {
LABEL_227:
    v39 = a1;
    goto LABEL_228;
  }
  v94 = *v93;
  v95 = v93[1];
  v96 = v94;
  if (v94 != v95)
  {
    v96 = v94;
    while (*(_BYTE *)v96 != 21)
    {
      v96 += 16;
      if (v96 == v95)
        goto LABEL_1647;
    }
  }
  if (v96 == v95)
  {
LABEL_1647:
    *(_BYTE *)(a1 + 451) = 0;
  }
  else
  {
    v1198 = *(_QWORD *)(v96 + 8);
    *(_BYTE *)(a1 + 451) = v1198 != 0;
    if (v1198)
    {
      v1199 = 1;
LABEL_1726:
      *(_BYTE *)(a1 + 452) = v1199;
      goto LABEL_1728;
    }
  }
  if (v94 == v95)
  {
    *(_BYTE *)(a1 + 452) = 0;
    v1236 = v94;
  }
  else
  {
    v1200 = v94;
    while (*(_BYTE *)v1200 != 25)
    {
      v1200 += 16;
      if (v1200 == v95)
        goto LABEL_1727;
    }
    if (v1200 != v95)
    {
      v1199 = *(_QWORD *)(v1200 + 8) != 0;
      goto LABEL_1726;
    }
LABEL_1727:
    *(_BYTE *)(a1 + 452) = 0;
LABEL_1728:
    v1236 = v94;
    if (v94 != v95)
    {
      v1236 = v94;
      while (*(_BYTE *)v1236 != 34)
      {
        v1236 += 16;
        if (v1236 == v95)
          goto LABEL_1735;
      }
    }
  }
  if (v1236 == v95)
LABEL_1735:
    v1237 = 0;
  else
    v1237 = *(_QWORD *)(v1236 + 8);
  *(_BYTE *)(a1 + 453) = v1237 != 0;
  if (v94 != v95)
  {
    while (*(_BYTE *)v94 != 33)
    {
      v94 += 16;
      if (v94 == v95)
        goto LABEL_1742;
    }
  }
  if (v94 == v95)
LABEL_1742:
    v97 = 0;
  else
    v97 = *(_QWORD *)(v94 + 8);
  v39 = a1;
LABEL_229:
  *(_BYTE *)(v39 + 454) = v97 != 0;
  if (v47)
  {
    v98 = *((_DWORD *)v47 + 22);
    v99 = (_BYTE *)*((_QWORD *)v1358 + 9);
    if (v99)
      goto LABEL_231;
  }
  else
  {
    v98 = 0;
    v99 = (_BYTE *)*((_QWORD *)v1358 + 9);
    if (v99)
LABEL_231:
      LOBYTE(v99) = *v99 != 0;
  }
  v100 = (float32x2_t *)a1;
  *(_BYTE *)(a1 + 455) = (_BYTE)v99;
  *(_BYTE *)(a1 + 456) = v98 == 9;
  if (v98 != 9)
  {
    *(_BYTE *)(a1 + 457) = 0;
    goto LABEL_263;
  }
  v101 = (_QWORD *)*((_QWORD *)v1358 + 1);
  v102 = (int8x8_t)v101[1];
  if (!*(_QWORD *)&v102)
    goto LABEL_261;
  v103 = (uint8x8_t)vcnt_s8(v102);
  v103.i16[0] = vaddlv_u8(v103);
  if (v103.u32[0] > 1uLL)
  {
    v104 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v102 <= 0x37F8C546A65FE3EEuLL)
      v104 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v102;
  }
  else
  {
    v104 = (*(_QWORD *)&v102 - 1) & 0x37F8C546A65FE3EELL;
  }
  v105 = *(_QWORD **)(*v101 + 8 * v104);
  if (!v105)
    goto LABEL_261;
  v106 = (_QWORD *)*v105;
  if (!v106)
    goto LABEL_261;
  if (v103.u32[0] < 2uLL)
  {
    v107 = *(_QWORD *)&v102 - 1;
    while (1)
    {
      v109 = v106[1];
      if (v109 == 0x37F8C546A65FE3EELL)
      {
        if (v106[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_257;
      }
      else if ((v109 & v107) != v104)
      {
        goto LABEL_261;
      }
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_261;
    }
  }
  while (2)
  {
    v108 = v106[1];
    if (v108 != 0x37F8C546A65FE3EELL)
    {
      if (v108 >= *(_QWORD *)&v102)
        v108 %= *(_QWORD *)&v102;
      if (v108 != v104)
        goto LABEL_261;
      goto LABEL_246;
    }
    if (v106[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_246:
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_261;
      continue;
    }
    break;
  }
LABEL_257:
  v110 = v106[5];
  if (*(_QWORD *)(v110 + 8) == 0x37F8C546A65FE3EELL)
  {
    v111 = *(_QWORD *)(v110 + 32);
    if (!v111)
      goto LABEL_262;
    if (*(_BYTE *)(v111 + 64) == 2)
    {
      LOBYTE(v111) = *(_BYTE *)(v111 + 16) == 3;
      goto LABEL_262;
    }
  }
LABEL_261:
  LOBYTE(v111) = 0;
LABEL_262:
  v100 = (float32x2_t *)a1;
  *(_BYTE *)(a1 + 457) = v111;
LABEL_263:
  v100[58].i8[2] = *((_BYTE *)v47 + 97);
  v100[108].i32[1] = *((_DWORD *)v47 + 25);
  v100[60].f32[1] = 1.0 / *((float *)v47 + 26);
  v112 = *(id *)v1358;
  objc_msgSend(v112, "sizeInPixels");
  v114 = v113;
  v116 = v115;

  v117 = v114;
  v118 = v116;
  v100[188].f32[0] = v117;
  v100[188].f32[1] = v118;
  v119 = *(id *)v1358;
  objc_msgSend(v119, "contentScale");
  *(float *)&v120 = v120;
  v100[60].i32[0] = LODWORD(v120);

  v121 = v100[188];
  v122 = 0;
  v100[189] = 0;
  v100[190] = v121;
  v123.i32[0] = v100[60].i32[0];
  v124 = v121.f32[0] < 0.0;
  if (v121.f32[1] < 0.0)
    v124 = 1;
  if (v124)
  {
    v100[191] = 0;
    v100[192] = v121;
    v125 = v121;
  }
  else
  {
    v126 = (float32x2_t *)v100[55];
    v127 = vrnd_f32(vmul_n_f32(v126[9], *(float *)v123.i32));
    v100[191] = vneg_f32(v127);
    v100[192] = vadd_f32(v127, v121);
    v128 = vrnd_f32(vmul_n_f32(v126[8], *(float *)v123.i32));
    v122 = vneg_f32(v128);
    v125 = vadd_f32(v128, v121);
  }
  v100[193] = v122;
  v100[194] = v125;
  *(float *)v123.i32 = truncf(*(float *)v123.i32 * 50.0);
  if (v124)
    *(float *)v123.i32 = 0.0;
  v100[195].i32[0] = v123.i32[0];
  v100[195].i32[1] = v123.i32[0];
  v100[196] = vsub_f32(v121, (float32x2_t)vdup_lane_s32(v123, 0));
  md::LayoutContext::frameState(v1358);
  v130 = *(float *)(a1 + 1520);
  v131 = *(float *)(a1 + 1512);
  if (v130 >= v131)
  {
    v137 = *(float *)(a1 + 1524);
    v138 = *(float *)(a1 + 1516);
    v136 = v1358;
    if (v137 >= v138)
    {
      v133 = v131 + v129[1];
      v134 = v138 + v129[2];
      v132 = v130 - v129[3];
      v135 = v137 - *v129;
    }
    else
    {
      v132 = -3.4028e38;
      v133 = 3.4028e38;
      v134 = 3.4028e38;
      v135 = -3.4028e38;
    }
  }
  else
  {
    v132 = -3.4028e38;
    v133 = 3.4028e38;
    v134 = 3.4028e38;
    v135 = -3.4028e38;
    v136 = v1358;
  }
  v139 = a1;
  *(float *)(a1 + 1576) = v133;
  *(float *)(a1 + 1580) = v134;
  *(float *)(a1 + 1584) = v132;
  *(float *)(a1 + 1588) = v135;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 440) + 29))
  {
    v140 = 0;
    *(_BYTE *)(a1 + 464) = 1;
    *(_DWORD *)(a1 + 488) = 1065353216;
    goto LABEL_283;
  }
  if (v48)
  {
    v141 = *(unsigned __int8 *)v48;
    v139 = a1;
    *(_BYTE *)(a1 + 464) = v141;
    if (v141 || *(_BYTE *)(a1 + 456))
    {
      *(float *)(a1 + 488) = v48[5] * v48[4];
      v140 = *((_BYTE *)v48 + 2);
      goto LABEL_283;
    }
  }
  else
  {
    v139 = a1;
    *(_BYTE *)(a1 + 464) = 0;
  }
  v140 = 0;
  *(_DWORD *)(v139 + 488) = 0;
LABEL_283:
  *(_BYTE *)(v139 + 465) = v140;
  if (v45)
    v142 = *(_DWORD *)(v45 + 88);
  else
    v142 = 0;
  *(_DWORD *)(a1 + 492) = v142;
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(v46 + 3760);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(v46 + 5240);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(v46 + 4760);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(v46 + 4768);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(v46 + 5576);
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(v46 + 4280);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(v46 + 5248);
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(v46 + 5256);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(v46 + 5264);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(v46 + 5272);
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(v46 + 5280);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(v46 + 5288);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(v46 + 5296);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(v46 + 5304);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(v46 + 5312);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(v46 + 5320);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(v46 + 5328);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(v46 + 5336);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(v46 + 5344);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(v46 + 5352);
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(v46 + 5360);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(v46 + 5368);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(v46 + 4344);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(v46 + 4352);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(v46 + 4360);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(v46 + 4368);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(v46 + 4376);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(v46 + 4384);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(v46 + 4392);
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(v46 + 4400);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(v46 + 4408);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(v46 + 4416);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(v46 + 4424);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(v46 + 4432);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(v46 + 4440);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(v46 + 4448);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(v46 + 4456);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(v46 + 4464);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(v46 + 4600);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(v46 + 4608);
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)(v46 + 4616);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(v46 + 4624);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(v46 + 4632);
  *(_QWORD *)(a1 + 1216) = *(_QWORD *)(v46 + 4640);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(v46 + 4648);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(v46 + 4656);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(v46 + 4664);
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(v46 + 4672);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(v46 + 4680);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(v46 + 4688);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(v46 + 4696);
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)(v46 + 4704);
  *(_QWORD *)(a1 + 1288) = *(_QWORD *)(v46 + 4712);
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(v46 + 4720);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(v46 + 5376);
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)(v46 + 5384);
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(v46 + 5392);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(v46 + 5400);
  *(_QWORD *)(a1 + 1336) = *(_QWORD *)(v46 + 5408);
  *(_QWORD *)(a1 + 1344) = *(_QWORD *)(v46 + 5416);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(v46 + 5424);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(v46 + 5432);
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(v46 + 5440);
  *(_QWORD *)(a1 + 1376) = *(_QWORD *)(v46 + 5448);
  *(_QWORD *)(a1 + 1384) = *(_QWORD *)(v46 + 5456);
  *(_QWORD *)(a1 + 1392) = *(_QWORD *)(v46 + 5464);
  *(_QWORD *)(a1 + 1400) = *(_QWORD *)(v46 + 5472);
  *(_QWORD *)(a1 + 1408) = *(_QWORD *)(v46 + 5480);
  *(_QWORD *)(a1 + 1416) = *(_QWORD *)(v46 + 5488);
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(v46 + 5496);
  v143 = *(_QWORD *)(v46 + 4288);
  v144 = *(_QWORD *)(v46 + 4296);
  v145 = *(double *)(v46 + 4304);
  *(_QWORD *)(a1 + 576) = v143;
  *(_QWORD *)(a1 + 584) = v144;
  *(double *)(a1 + 592) = v145;
  if (!*(_BYTE *)(a1 + 462))
  {
    *(_QWORD *)(a1 + 552) = v143;
    *(_QWORD *)(a1 + 560) = v144;
    *(double *)(a1 + 568) = v145;
  }
  v146 = *(double *)(v46 + 5224);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(v46 + 5208);
  *(double *)(a1 + 616) = v146;
  v147 = *(_QWORD *)(v46 + 5200);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(v46 + 5184);
  *(_QWORD *)(a1 + 640) = v147;
  v148 = *(_QWORD *)(v46 + 5176);
  v1349 = (_OWORD *)(a1 + 584);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(v46 + 5160);
  *(_QWORD *)(a1 + 664) = v148;
  *(float *)&v148 = *(double *)(v46 + 3840);
  *(float *)&v148 = *(float *)&v148 + 1.57079633;
  v149 = fmodf(*(float *)&v148 + 3.1416, 6.2832);
  *(float *)(a1 + 860) = fmodf(v149 + 6.2832, 6.2832) + -3.1416;
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(v46 + 5232);
  if (*(_BYTE *)(a1 + 448))
  {
    md::LabelLayoutContext::coordinateEyePos((md::LabelLayoutContext *)v1387, v1354);
    v150 = *(double *)v1387;
    v151 = cos(*(double *)v1387 * 0.034906585) * -559.82 + 111132.92;
    v152 = v151 + cos(v150 * 0.0698131701) * 1.175;
    v153 = v152 + cos(v150 * 0.104719755) * -0.0023;
    v154 = v150 * 0.00872664626;
    v155 = tan(v150 * 0.00872664626 + 0.78103484);
    v156 = log(v155);
    v157 = tan(v154 + 0.789761487);
    v158 = fabs((log(v157) - v156) * 0.159154943) / v153;
    *(double *)(a1 + 784) = v158;
    v159 = *(_QWORD *)(a1 + 440);
    if (*(_BYTE *)(v159 + 96))
    {
      v160 = v158 * *(double *)(v159 + 88);
      goto LABEL_293;
    }
LABEL_295:
    v165 = 5544;
    if (*(_BYTE *)(v46 + 3784) == 1)
      v165 = 5520;
    v166 = 5536;
    if (*(_BYTE *)(v46 + 3784) == 1)
      v166 = 5512;
    v167 = 5552;
    if (*(_BYTE *)(v46 + 3784) == 1)
      v167 = 5528;
    v168 = *(_QWORD *)(v46 + v167);
    v169 = *(_QWORD *)(v46 + v165);
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(v46 + v166);
    *(_QWORD *)(a1 + 680) = v169;
    *(_QWORD *)(a1 + 688) = v168;
    *(_QWORD *)(a1 + 696) = *(_QWORD *)(v46 + 5560);
    if (!*(_BYTE *)(v159 + 84))
      goto LABEL_302;
LABEL_294:
    v161 = 0;
    v162 = *(float *)(v159 + 80);
    v163 = a1;
    *(float *)(a1 + 472) = v162;
    *(float *)(a1 + 476) = v162;
    v164 = (int)v162;
  }
  else
  {
    *(_QWORD *)(a1 + 784) = 0x3FF0000000000000;
    v159 = *(_QWORD *)(a1 + 440);
    if (!*(_BYTE *)(v159 + 96))
      goto LABEL_295;
    v160 = *(double *)(v159 + 88);
LABEL_293:
    *(double *)(a1 + 696) = v160;
    *(float64x2_t *)(a1 + 672) = vmlaq_n_f64(*(float64x2_t *)(a1 + 576), *(float64x2_t *)(a1 + 600), v160);
    *(double *)(a1 + 688) = v145 + v146 * v160;
    if (*(_BYTE *)(v159 + 84))
      goto LABEL_294;
LABEL_302:
    md::LayoutContext::frameState(v136);
    v171 = floor((float)(*(float *)(v170 + 112) * 1000.0) + 0.5) * 0.001;
    *(float *)(a1 + 472) = v171;
    md::LayoutContext::frameState(v1358);
    *(_DWORD *)(a1 + 476) = *(_DWORD *)(v172 + 112);
    md::LayoutContext::frameState(v1358);
    v174 = floor((float)(*(float *)(v173 + 112) * 1000.0) + 0.5) * 0.001;
    v164 = (int)v174;
    if ((int)v174 >= 23)
      LOBYTE(v164) = 23;
    v159 = *(_QWORD *)v1354;
    v161 = *(_BYTE *)(*(_QWORD *)v1354 + 32) != 0;
    v163 = a1;
    v136 = v1358;
  }
  *(_BYTE *)(v163 + 468) = v164;
  *(_BYTE *)(v163 + 467) = v161;
  if (v48 && *(_BYTE *)v48)
  {
    v175 = a1;
    *(_BYTE *)(a1 + 460) = *(float *)(a1 + 472) >= *(float *)(v159 + 36);
    *(_BYTE *)(a1 + 461) = 0;
    v176 = 1;
  }
  else
  {
    v177 = (unsigned __int8 *)*((_QWORD *)v136 + 92);
    v178 = *v177;
    *(_BYTE *)(a1 + 460) = v178;
    *(_BYTE *)(a1 + 461) = v177[1];
    v176 = ((v98 - 1) >= 0xA || ((0x20Fu >> (v98 - 1)) & 1) == 0) && v178 != 0;
    v175 = a1;
  }
  *(_BYTE *)(v175 + 459) = v176;
  v179 = *(float *)(v175 + 860);
  v180 = 1.57079633 - v179;
  v181 = v180 * 0.159154943;
  *(_BYTE *)(v175 + 912) = vcvts_n_s32_f32(v181 - floorf(v181), 8uLL);
  v1343 = (_OWORD *)(v163 + 872);
  *(float32x4_t *)(v163 + 872) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 624)), *(float64x2_t *)(a1 + 640));
  *(float32x2_t *)(v175 + 888) = vcvt_f32_f64(*(float64x2_t *)(v175 + 656));
  v182 = *(double *)(v46 + 3840);
  v183 = __sincosf_stret(v182);
  *(float *)(v175 + 896) = v183.__cosval;
  *(float *)(v175 + 900) = -v183.__sinval;
  if (v176)
  {
    if (*(_BYTE *)(v175 + 463))
      v184 = 30.0;
    else
      v184 = 20.0;
    v185 = *(float *)(v175 + 864) < v184;
  }
  else
  {
    v185 = 1;
  }
  *(_BYTE *)(a1 + 463) = v185;
  v186 = *(double *)(a1 + 576);
  v187 = vabdd_f64(*(double *)(a1 + 792), v186) < 0.00000001
      && vabdd_f64(*(double *)(a1 + 800), *(double *)(a1 + 584)) < 0.00000001
      && vabdd_f64(*(double *)(a1 + 808), *(double *)(a1 + 592)) < 0.00000001;
  v188 = *(double *)(a1 + 600);
  if (vabdd_f64(*(double *)(a1 + 816), v188) >= 0.00000001
    || vabdd_f64(*(double *)(a1 + 824), *(double *)(a1 + 608)) >= 0.00000001
    || vabdd_f64(*(double *)(a1 + 832), *(double *)(a1 + 616)) >= 0.00000001)
  {
    v191 = 1;
  }
  else
  {
    v189 = *(float *)(a1 + 840);
    if ((v189 >= -3.1416 && v189 <= 3.1416 || fabsf(v189 + 3.1416) <= 0.000001 || fabsf(v189 + -3.1416) <= 0.000001)
      && (v179 >= -3.1416 && v179 <= 3.1416 || fabsf(v179 + 3.1416) <= 0.000001 || fabsf(v179 + -3.1416) <= 0.000001))
    {
      v190 = vabds_f32(v189, v179) <= 0.000001
          || fabsf((float)(-6.2832 - fminf(v189, v179)) + fmaxf(v189, v179)) <= 0.000001;
    }
    else
    {
      v190 = 0;
    }
    v191 = !v190;
  }
  v192 = *(float *)(a1 + 864);
  v193 = vabds_f32(*(float *)(a1 + 844), v192);
  v194 = *(float *)(a1 + 472);
  v195 = vabds_f32(*(float *)(a1 + 848), v194);
  v196 = !v187 | v191;
  if (v193 > 0.000001)
    v196 = 1;
  if (v195 > 0.000001)
    v197 = 1;
  else
    v197 = v196;
  if (v197 == 1)
  {
    *(double *)(a1 + 792) = v186;
    *(_OWORD *)(a1 + 800) = *v1349;
    *(double *)(a1 + 816) = v188;
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a1 + 608);
    *(float *)(a1 + 840) = v179;
    *(float *)(a1 + 844) = v192;
    *(float *)(a1 + 848) = v194;
  }
  v198 = *(_BYTE *)(a1 + 455);
  if (v198)
  {
    v199 = *(double *)(v46 + 3848);
    v202 = __sincosf_stret(v199);
    cosval = v202.__cosval;
    sinval = v202.__sinval;
    v198 = fabsf(v202.__cosval + -1.0) > 0.000001;
  }
  else
  {
    sinval = 0.0;
    cosval = 1.0;
  }
  *(float *)(a1 + 904) = cosval;
  *(float *)(a1 + 908) = sinval;
  *(_BYTE *)(a1 + 458) = v198;
  if (*(_BYTE *)(a1 + 456))
  {
    v203 = *(unsigned __int8 *)(v159 + 18);
    *(_WORD *)(a1 + 449) = 0;
    v204 = 0.0;
    if (!v203)
      goto LABEL_358;
LABEL_357:
    *(double *)(a1 + 728) = v204;
    goto LABEL_358;
  }
  if (!*(_BYTE *)(a1 + 448) && !*(_BYTE *)(v159 + 18))
  {
    *(_WORD *)(a1 + 449) = 0;
    goto LABEL_358;
  }
  *(_BYTE *)(a1 + 449) = v192 < 1.0;
  v205 = v192 < 20.0;
  if (v194 < 15.0)
    v205 = 1;
  *(_BYTE *)(a1 + 450) = v205;
  if (*(_BYTE *)(v159 + 18))
  {
    v204 = 0.0;
    if (v192 < 1.0)
    {
      v206 = asin(213678.089/ sqrt(*(double *)(a1 + 576) * *(double *)(a1 + 576)+ *(double *)(a1 + 584) * *(double *)(a1 + 584)+ *(double *)(a1 + 592) * *(double *)(a1 + 592)));
      v204 = cos(1.22173048 - v206) * -6378137.0;
    }
    goto LABEL_357;
  }
LABEL_358:
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(v46 + 2984);
  if (a1 + 1592 != v46 + 2960)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1592, *(_QWORD *)(v46 + 2960), *(char **)(v46 + 2968), (uint64_t)(*(_QWORD *)(v46 + 2968) - *(_QWORD *)(v46 + 2960)) >> 4);
  v207 = *(id *)v1358;
  objc_msgSend(v207, "sizeInPixels");
  *(float *)&v208 = v208;
  *(_DWORD *)(a1 + 916) = LODWORD(v208);

  v209 = *(float *)(a1 + 916);
  v210 = (*(double *)(a1 + 752) + *(double *)(a1 + 752)) / v209;
  *(double *)(a1 + 760) = v210;
  v211 = -*(double *)(a1 + 616);
  v212 = *(_OWORD *)(a1 + 640);
  *(_OWORD *)(a1 + 1432) = *(_OWORD *)(a1 + 624);
  *(_OWORD *)(a1 + 1448) = v212;
  v213 = vnegq_f64(*(float64x2_t *)(a1 + 600));
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a1 + 656);
  *(float64x2_t *)(a1 + 1480) = v213;
  *(double *)(a1 + 1496) = v211;
  v214 = *(double *)(a1 + 696);
  if (v214 == 0.0)
  {
    *(double *)(a1 + 768) = *(double *)(a1 + 744) / v209;
    if (!v197)
      goto LABEL_371;
LABEL_362:
    ++*(_DWORD *)(a1 + 1620);
    if (*(_BYTE *)(a1 + 448))
      v215 = v191;
    else
      v215 = 1;
    if ((v215 & 1) != 0 || v193 > 0.000001 || v195 > 0.000001)
    {
LABEL_376:
      v217 = *(_DWORD *)(a1 + 1616);
      if ((v217 + 1) > 1)
        v218 = v217 + 1;
      else
        v218 = 1;
      *(_DWORD *)(a1 + 1616) = v218;
    }
    else if (!v187)
    {
      goto LABEL_375;
    }
  }
  else
  {
    *(double *)(a1 + 768) = v214 * v210;
    if (v197)
      goto LABEL_362;
LABEL_371:
    if (*(_BYTE *)(a1 + 448))
      v216 = v187;
    else
      v216 = 1;
    if ((v216 & 1) == 0)
    {
LABEL_375:
      if (*(float *)(a1 + 864) > 0.0)
        goto LABEL_376;
    }
  }
  v219 = 1.0;
  v220 = 1.0;
  if (v48)
    v220 = v48[5];
  *(float *)(a1 + 1624) = v220;
  if (v49)
    v219 = *(float *)(v49 + 4);
  *(float *)(a1 + 504) = v219;
  md::LayoutContext::frameState(v1358);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(v221 + 88);
  v222 = (_QWORD *)*((_QWORD *)v1358 + 1);
  v223 = (int8x8_t)v222[1];
  if (!*(_QWORD *)&v223)
    goto LABEL_409;
  v224 = (uint8x8_t)vcnt_s8(v223);
  v224.i16[0] = vaddlv_u8(v224);
  if (v224.u32[0] > 1uLL)
  {
    v225 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v223 <= 0x4927EB92E562CC46uLL)
      v225 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v223;
  }
  else
  {
    v225 = (*(_QWORD *)&v223 - 1) & 0x4927EB92E562CC46;
  }
  v226 = *(_QWORD **)(*v222 + 8 * v225);
  if (!v226)
    goto LABEL_409;
  v227 = (_QWORD *)*v226;
  if (!v227)
    goto LABEL_409;
  if (v224.u32[0] < 2uLL)
  {
    while (1)
    {
      v229 = v227[1];
      if (v229 == 0x4927EB92E562CC46)
      {
        if (v227[2] == 0x4927EB92E562CC46)
          goto LABEL_407;
      }
      else if ((v229 & (*(_QWORD *)&v223 - 1)) != v225)
      {
        goto LABEL_409;
      }
      v227 = (_QWORD *)*v227;
      if (!v227)
        goto LABEL_409;
    }
  }
  while (2)
  {
    v228 = v227[1];
    if (v228 != 0x4927EB92E562CC46)
    {
      if (v228 >= *(_QWORD *)&v223)
        v228 %= *(_QWORD *)&v223;
      if (v228 != v225)
        goto LABEL_409;
      goto LABEL_394;
    }
    if (v227[2] != 0x4927EB92E562CC46)
    {
LABEL_394:
      v227 = (_QWORD *)*v227;
      if (!v227)
        goto LABEL_409;
      continue;
    }
    break;
  }
LABEL_407:
  v230 = v227[5];
  if (*(_QWORD *)(v230 + 8) == 0x4927EB92E562CC46)
  {
    v231 = *(_QWORD *)(v230 + 32);
    goto LABEL_410;
  }
LABEL_409:
  v231 = 0;
LABEL_410:
  *(_QWORD *)(a1 + 1672) = v231;
  if (*(_BYTE *)(a1 + 456))
  {
    if (!*(_QWORD *)&v223)
      goto LABEL_438;
LABEL_414:
    *(int8x8_t *)&v232 = vcnt_s8(v223);
    LOWORD(v232) = vaddlv_u8(*(uint8x8_t *)&v232);
    if (v232 > 1uLL)
    {
      v233 = 0xDFC317497CF9A4BFLL;
      if (*(_QWORD *)&v223 <= 0xDFC317497CF9A4BFLL)
        v233 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v223;
    }
    else
    {
      v233 = (*(_QWORD *)&v223 - 1) & 0xDFC317497CF9A4BFLL;
    }
    v234 = *(_QWORD **)(*v222 + 8 * v233);
    if (!v234)
      goto LABEL_438;
    v235 = (_QWORD *)*v234;
    if (!v235)
      goto LABEL_438;
    if (v232 < 2uLL)
    {
      v236 = *(_QWORD *)&v223 - 1;
      while (1)
      {
        v238 = v235[1];
        if (v238 == 0xDFC317497CF9A4BFLL)
        {
          if (v235[2] == 0xDFC317497CF9A4BFLL)
            goto LABEL_434;
        }
        else if ((v238 & v236) != v233)
        {
          goto LABEL_438;
        }
        v235 = (_QWORD *)*v235;
        if (!v235)
          goto LABEL_438;
      }
    }
    while (1)
    {
      v237 = v235[1];
      if (v237 == 0xDFC317497CF9A4BFLL)
      {
        if (v235[2] == 0xDFC317497CF9A4BFLL)
        {
LABEL_434:
          v239 = v235[5];
          if (*(_QWORD *)(v239 + 8) != 0xDFC317497CF9A4BFLL)
            goto LABEL_438;
          v240 = *(_QWORD **)(v239 + 32);
          if (!v240)
            goto LABEL_438;
          v243 = (_QWORD *)*v240;
          v241 = v240 + 1;
          v242 = v243;
          if (v243 == v241)
            goto LABEL_438;
          v244 = 0;
          v245 = 0;
          v246 = 0;
          while (2)
          {
            v268 = v44;
            v269 = *((_BYTE *)v242 + 28);
            if (v269)
            {
              LODWORD(v232) = *((_DWORD *)v242 + 9);
              v270 = (double)(unint64_t)v232;
              if (v245 < v246)
                goto LABEL_464;
LABEL_467:
              v273 = (v245 - v244) >> 4;
              v274 = v273 + 1;
              if ((unint64_t)(v273 + 1) >> 60)
                abort();
              if ((v246 - v244) >> 3 > v274)
                v274 = (v246 - v244) >> 3;
              if ((unint64_t)(v246 - v244) >= 0x7FFFFFFFFFFFFFF0)
                v275 = 0xFFFFFFFFFFFFFFFLL;
              else
                v275 = v274;
              if (v275)
              {
                if (v275 >> 60)
                  goto LABEL_1897;
                v276 = (char *)operator new(16 * v275);
              }
              else
              {
                v276 = 0;
              }
              v277 = &v276[16 * v273];
              *v277 = v269;
              *((double *)v277 + 1) = v270;
              if (v245 == v244)
              {
                v279 = &v276[16 * v273];
                v44 = v268;
              }
              else
              {
                v278 = &v276[16 * v273];
                v44 = v268;
                do
                {
                  v232 = *((_OWORD *)v245 - 1);
                  v279 = v278 - 16;
                  *((_OWORD *)v278 - 1) = v232;
                  v245 -= 16;
                  v278 -= 16;
                }
                while (v245 != v244);
              }
              v246 = &v276[16 * v275];
              v245 = v277 + 16;
              if (v244)
                operator delete(v244);
              v244 = v279;
              v272 = (_QWORD *)v242[1];
              if (v272)
                goto LABEL_485;
              do
              {
LABEL_487:
                v280 = (_QWORD *)v242[2];
                _ZF = *v280 == (_QWORD)v242;
                v242 = v280;
              }
              while (!_ZF);
            }
            else
            {
              v270 = 1.79769313e308;
              if (v245 >= v246)
                goto LABEL_467;
LABEL_464:
              *v245 = v269;
              v271 = v1387[0];
              *((_DWORD *)v245 + 1) = *(_DWORD *)((char *)v1387 + 3);
              *(_DWORD *)(v245 + 1) = v271;
              *((double *)v245 + 1) = v270;
              v245 += 16;
              v44 = v268;
              v272 = (_QWORD *)v242[1];
              if (!v272)
                goto LABEL_487;
              do
              {
LABEL_485:
                v280 = v272;
                v272 = (_QWORD *)*v272;
              }
              while (v272);
            }
            v242 = v280;
            if (v280 == v241)
              goto LABEL_439;
            continue;
          }
        }
      }
      else
      {
        if (v237 >= *(_QWORD *)&v223)
          v237 %= *(_QWORD *)&v223;
        if (v237 != v233)
          goto LABEL_438;
      }
      v235 = (_QWORD *)*v235;
      if (!v235)
        goto LABEL_438;
    }
  }
  *(_DWORD *)(a1 + 1628) = 1114636288;
  *(_BYTE *)(a1 + 1632) = 1;
  v222 = (_QWORD *)*((_QWORD *)v1358 + 1);
  v223 = (int8x8_t)v222[1];
  if (v223)
    goto LABEL_414;
LABEL_438:
  v246 = 0;
  v245 = 0;
  v244 = 0;
LABEL_439:
  v247 = *(unsigned __int8 **)(a1 + 1656);
  v248 = *(unsigned __int8 **)(a1 + 1648);
  if (v247 - v248 == v245 - v244)
  {
    if (v248 != v247)
    {
      v249 = (double *)v244;
      v250 = *(double **)(a1 + 1648);
      while (*(unsigned __int8 *)v250 == *(unsigned __int8 *)v249 && v250[1] == v249[1])
      {
        v250 += 2;
        v249 += 2;
        if (v250 == (double *)v247)
          goto LABEL_448;
      }
      goto LABEL_450;
    }
LABEL_448:
    *(_BYTE *)(a1 + 1636) = 0;
    if (v244)
      operator delete(v244);
  }
  else
  {
LABEL_450:
    ++*(_BYTE *)(a1 + 1637);
    *(_BYTE *)(a1 + 1636) = 1;
    if (v248)
    {
      *(_QWORD *)(a1 + 1656) = v248;
      operator delete(v248);
      *(_QWORD *)(a1 + 1648) = 0;
      *(_QWORD *)(a1 + 1656) = 0;
      *(_QWORD *)(a1 + 1664) = 0;
    }
    *(_QWORD *)(a1 + 1648) = v244;
    *(_QWORD *)(a1 + 1656) = v245;
    *(_QWORD *)(a1 + 1664) = v246;
    *(_QWORD *)(a1 + 1640) = 0;
    if ((unint64_t)(v245 - v244) >= 0x11)
      *(double *)(a1 + 1640) = sqrt(*((double *)v245 - 3));
  }
  v252 = md::LayoutContext::frameState(v1358);
  if (*(_BYTE *)(v253 + 84) == 2)
  {
    md::LayoutContext::frameState(v1358);
    v255 = *(_DWORD *)(v254 + 80);
  }
  else
  {
    v256 = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(*(_QWORD *)(a1 + 168) + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 32), v252);
    v255 = 0;
    if (v256)
      v255 = *(_DWORD *)(a1 + 3364);
  }
  *(_DWORD *)(a1 + 1680) = v255;
  md::LayoutContext::frameState(v1358);
  *(_BYTE *)(a1 + 1712) = *(_BYTE *)(v257 + 84);
  md::LayoutContext::frameState(v1358);
  v259 = v258[8];
  v260 = v258[9];
  v261 = tan(v258[7] * 0.5 + 0.785398163);
  v262 = log(v261);
  v263 = v260 * *(float *)(a1 + 488);
  v264 = (_QWORD *)*((_QWORD *)v1358 + 1);
  v265 = (int8x8_t)v264[1];
  if (v265)
  {
    v266 = (uint8x8_t)vcnt_s8(v265);
    v266.i16[0] = vaddlv_u8(v266);
    if (v266.u32[0] > 1uLL)
    {
      v267 = 0x1B8B241A8D896A1DLL;
      if (*(_QWORD *)&v265 <= 0x1B8B241A8D896A1DuLL)
        v267 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v265;
    }
    else
    {
      v267 = (*(_QWORD *)&v265 - 1) & 0x1B8B241A8D896A1DLL;
    }
    v281 = *(_QWORD **)(*v264 + 8 * v267);
    if (v281)
    {
      v282 = (_QWORD *)*v281;
      if (v282)
      {
        if (v266.u32[0] < 2uLL)
        {
          v283 = *(_QWORD *)&v265 - 1;
          while (1)
          {
            v285 = v282[1];
            if (v285 == 0x1B8B241A8D896A1DLL)
            {
              if (v282[2] == 0x1B8B241A8D896A1DLL)
                goto LABEL_508;
            }
            else if ((v285 & v283) != v267)
            {
              goto LABEL_511;
            }
            v282 = (_QWORD *)*v282;
            if (!v282)
              goto LABEL_511;
          }
        }
        do
        {
          v284 = v282[1];
          if (v284 == 0x1B8B241A8D896A1DLL)
          {
            if (v282[2] == 0x1B8B241A8D896A1DLL)
            {
LABEL_508:
              v286 = v282[5];
              if (*(_QWORD *)(v286 + 8) == 0x1B8B241A8D896A1DLL)
              {
                v287 = *(_QWORD *)(v286 + 32);
                if (v287)
                  v263 = v263 + *(float *)(v287 + 88);
              }
              break;
            }
          }
          else
          {
            if (v284 >= *(_QWORD *)&v265)
              v284 %= *(_QWORD *)&v265;
            if (v284 != v267)
              break;
          }
          v282 = (_QWORD *)*v282;
        }
        while (v282);
      }
    }
  }
LABEL_511:
  v288 = v259 * 0.159154943 + 0.5;
  v289 = v262 * 0.159154943 + 0.5;
  v290 = *(unsigned __int8 *)(a1 + 448);
  if (*(_BYTE *)(a1 + 448))
  {
    v291 = *(double *)(*(_QWORD *)(a1 + 232) + 56) * v263;
  }
  else
  {
    v292 = v288 * 6.28318531;
    v293 = exp(v289 * 6.28318531 + -3.14159265);
    v294 = atan(v293) * 2.0 + -1.57079633;
    v295 = fmod(v292, 6.28318531);
    v296 = fmod(v295 + 6.28318531, 6.28318531) + -3.14159265;
    v297 = __sincos_stret(v294);
    v298 = 6378137.0 / sqrt(v297.__sinval * v297.__sinval * -0.00669437999 + 1.0);
    v299 = (v298 + v263) * v297.__cosval;
    v300 = __sincos_stret(v296);
    v288 = v299 * v300.__cosval;
    v289 = v299 * v300.__sinval;
    v291 = (v263 + v298 * 0.99330562) * v297.__sinval;
  }
  *(double *)(a1 + 1688) = v288;
  *(double *)(a1 + 1696) = v289;
  *(double *)(a1 + 1704) = v291;
  v301 = *(float *)(a1 + 496);
  v302 = *(float *)(a1 + 860);
  if (vabds_f32(v301, v302) > 0.0959931128)
  {
    v301 = round(v302 * 6.36619755) * 0.157079637;
    *(float *)(a1 + 496) = v301;
  }
  v303 = v301 + -0.07854;
  v304 = __sincosf_stret((float)(v301 + -0.07854) - v302);
  *(float *)(a1 + 508) = -v304.__sinval;
  *(float *)(a1 + 512) = v304.__cosval;
  *(float *)(a1 + 516) = v304.__cosval;
  *(float *)(a1 + 520) = v304.__sinval;
  if (v290)
  {
    v307 = __sincosf_stret(v303);
    v306 = v307.__cosval;
    v305 = v307.__sinval;
    v308 = -v307.__cosval;
    v309 = 0.0;
    v310 = v307.__sinval;
    v311 = 0.0;
  }
  else
  {
    v312 = *(double *)(a1 + 576);
    v313 = *(double *)(a1 + 584);
    v314 = *(double *)(a1 + 592);
    v315 = 1.0 / sqrt(v312 * v312 + v313 * v313 + v314 * v314);
    v316 = v315 * v312;
    v317 = v315 * v313;
    v318 = v315 * v314;
    v1355 = v315 * v314;
    v319 = 1.0 / sqrt(v317 * v317 + v316 * v316);
    v1359 = v19;
    v320 = -(v315 * v313 * v319);
    v321 = v319 * v316;
    v1351 = v303 * 0.5;
    v322 = __sincos_stret(v1351);
    v323 = v318 * v322.__sinval;
    v324 = v318 * v322.__sinval * -2.0 * v321;
    v325 = (v320 + v320) * (v318 * v322.__sinval);
    v326 = -(v320 * (v317 * v322.__sinval) - v321 * (v316 * v322.__sinval))
         - (v320 * (v317 * v322.__sinval)
          - v321 * (v316 * v322.__sinval));
    v306 = v320 + v324 * v322.__cosval - v325 * (v318 * v322.__sinval) + v326 * (v317 * v322.__sinval);
    v305 = v321 + v324 * v323 + v325 * v322.__cosval - v326 * (v316 * v322.__sinval);
    v309 = v326 * v322.__cosval - (v324 * (v317 * v322.__sinval) - v325 * (v316 * v322.__sinval));
    v327 = __sincos_stret(v1351 + -0.785398163);
    v328 = v1355 * v327.__sinval * -2.0 * v321;
    v329 = (v320 + v320) * (v1355 * v327.__sinval);
    v330 = -(v320 * (v317 * v327.__sinval) - v321 * (v316 * v327.__sinval))
         - (v320 * (v317 * v327.__sinval)
          - v321 * (v316 * v327.__sinval));
    v331 = v321 + v328 * (v1355 * v327.__sinval);
    v19 = v1359;
    v310 = v320 + v328 * v327.__cosval - v329 * (v1355 * v327.__sinval) + v330 * (v317 * v327.__sinval);
    v308 = v331 + v329 * v327.__cosval - v330 * (v316 * v327.__sinval);
    v311 = v330 * v327.__cosval - (v328 * (v317 * v327.__sinval) - v329 * (v316 * v327.__sinval));
  }
  *(float *)(a1 + 524) = v306;
  *(float *)(a1 + 528) = v305;
  *(float *)(a1 + 532) = v309;
  *(float *)(a1 + 536) = v310;
  *(float *)(a1 + 540) = v308;
  *(float *)(a1 + 544) = v311;
  if (!*(_BYTE *)(a1 + 464))
  {
    v336 = 0.0;
    goto LABEL_569;
  }
  v332 = (uint64_t *)*((_QWORD *)v1358 + 1);
  v333 = (int8x8_t)v332[1];
  if (!*(_QWORD *)&v333)
  {
    v337 = MEMORY[0x14];
    v338 = MEMORY[0x200];
    if (!v290)
      goto LABEL_525;
    goto LABEL_567;
  }
  v334 = (uint8x8_t)vcnt_s8(v333);
  v334.i16[0] = vaddlv_u8(v334);
  if (v334.u32[0] > 1uLL)
  {
    v335 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v333 <= 0x8BD499FBD96FBB9ELL)
      v335 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v333;
  }
  else
  {
    v335 = (*(_QWORD *)&v333 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v345 = *v332;
  v346 = *(_QWORD **)(v345 + 8 * v335);
  if (v346 && (v347 = (_QWORD *)*v346) != 0)
  {
    if (v334.u32[0] >= 2uLL)
    {
      while (v347[1] != 0x8BD499FBD96FBB9ELL || v347[2] != 0x8BD499FBD96FBB9ELL)
        v347 = (_QWORD *)*v347;
    }
    else
    {
      while (v347[1] != 0x8BD499FBD96FBB9ELL || v347[2] != 0x8BD499FBD96FBB9ELL)
        v347 = (_QWORD *)*v347;
    }
    v348 = *(_QWORD *)(v347[5] + 32) + 20;
    if (v334.u32[0] > 1uLL)
      goto LABEL_540;
LABEL_543:
    v349 = (*(_QWORD *)&v333 - 1) & 0x1AF456233693CD46;
  }
  else
  {
    v348 = 20;
    if (v334.u32[0] <= 1uLL)
      goto LABEL_543;
LABEL_540:
    v349 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v333 <= 0x1AF456233693CD46uLL)
      v349 = 0x1AF456233693CD46uLL % *(_QWORD *)&v333;
  }
  v337 = *(float *)v348;
  v350 = *(_QWORD **)(v345 + 8 * v349);
  if (!v350)
    goto LABEL_566;
  v351 = (_QWORD *)*v350;
  if (!v351)
    goto LABEL_566;
  if (v334.u32[0] < 2uLL)
  {
    v352 = *(_QWORD *)&v333 - 1;
    while (1)
    {
      v354 = v351[1];
      if (v354 == 0x1AF456233693CD46)
      {
        if (v351[2] == 0x1AF456233693CD46)
          goto LABEL_563;
      }
      else if ((v354 & v352) != v349)
      {
        goto LABEL_566;
      }
      v351 = (_QWORD *)*v351;
      if (!v351)
        goto LABEL_566;
    }
  }
  while (1)
  {
    v353 = v351[1];
    if (v353 == 0x1AF456233693CD46)
      break;
    if (v353 >= *(_QWORD *)&v333)
      v353 %= *(_QWORD *)&v333;
    if (v353 != v349)
      goto LABEL_566;
LABEL_549:
    v351 = (_QWORD *)*v351;
    if (!v351)
      goto LABEL_566;
  }
  if (v351[2] != 0x1AF456233693CD46)
    goto LABEL_549;
LABEL_563:
  v355 = (int8x8_t *)v351[5];
  if (*(_QWORD *)&v355[1] != 0x1AF456233693CD46)
  {
LABEL_566:
    v333 = 0;
    v338 = MEMORY[0x200];
    if (!v290)
      goto LABEL_525;
    goto LABEL_567;
  }
  v333 = v355[4];
  v338 = *(double *)(*(_QWORD *)&v333 + 512);
  if (!v290)
  {
LABEL_525:
    v339 = sqrt(*(double *)(*(_QWORD *)&v333 + 504) * *(double *)(*(_QWORD *)&v333 + 504)+ *(double *)(*(_QWORD *)&v333 + 496) * *(double *)(*(_QWORD *)&v333 + 496));
    v340 = atan2(v338, v339 * 0.996647189);
    v341 = __sincos_stret(v340);
    v342 = atan2(v338 + v341.__sinval * v341.__sinval * 42841.3115 * v341.__sinval, v339 + v341.__cosval * v341.__cosval * -42697.6727 * v341.__cosval);
    v343 = __sincos_stret(v342);
    v344 = v339 / v343.__cosval + -6378137.0 / sqrt(v343.__sinval * v343.__sinval * -0.00669437999 + 1.0);
    goto LABEL_568;
  }
LABEL_567:
  v344 = v338 * 40075017.0;
LABEL_568:
  v356 = v344;
  v336 = fmaxf(v356 * 0.002, 1.0) * v337;
LABEL_569:
  *(float *)(a1 + 500) = v336;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v357 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 1713) = objc_msgSend(v357, "enableDOF");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v358 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "dofStrength");
  *(_DWORD *)(a1 + 1716) = v359;

  if (*(_BYTE *)(a1 + 3656) && fmod(*(long double *)(a1 + 776), 6.0) > 3.0)
  {
    v360 = *(float *)(a1 + 472) + 0.2;
    *(float *)(a1 + 472) = v360;
    *(_BYTE *)(a1 + 468) = (int)v360;
  }
  if (*(_BYTE *)(a1 + 1636))
  {
    *(_QWORD *)&v1387[0] = &off_1E42C9D88;
    *((_QWORD *)&v1387[0] + 1) = a1;
    *((_QWORD *)&v1387[1] + 1) = v1387;
    md::LabelManager::queueCommand((md::LabelManager *)a1, 65, 0, v1387);
    v361 = (_QWORD *)*((_QWORD *)&v1387[1] + 1);
    if (*((_OWORD **)&v1387[1] + 1) == v1387)
    {
      v362 = 4;
      v361 = v1387;
LABEL_577:
      (*(void (**)(void))(*v361 + 8 * v362))();
    }
    else if (*((_QWORD *)&v1387[1] + 1))
    {
      v362 = 5;
      goto LABEL_577;
    }
  }
  if (*(_QWORD *)__p != *v1366 || *(_QWORD *)&__p[8] != *(_QWORD *)(a1 + 1552))
    *(_BYTE *)(a1 + 3049) = 1;
  md::LayoutContext::frameState(v1358);
  *(_BYTE *)(a1 + 3028) = *(_BYTE *)(v363 + 48);
  v364 = *(double *)(v44 + 5560);
  if (v364 == 0.0)
    v364 = *(double *)(a1 + 3128);
  v365 = *(int *)(a1 + 3136);
  *(double *)(a1 + 8 * v365 + 3088) = 1.0 - *(double *)(a1 + 3128) / v364;
  *(_DWORD *)(a1 + 3136) = ((int)v365 + 1) % 5;
  *(double *)(a1 + 3128) = v364;
  HIBYTE(v1372) = *(_BYTE *)(a1 + 3608);
  LOBYTE(v1372) = *(_BYTE *)(a1 + 3656);
  v366 = *(_QWORD **)(a1 + 360);
  v367 = (uint64_t *)v366[12];
  v1362 = (uint64_t *)v366[13];
  if (v367 == v1362)
  {
    LOBYTE(v368) = 0;
    goto LABEL_644;
  }
  v368 = 0;
  v369 = (uint64_t)(v366 + 16);
  v1367 = *(_QWORD **)(a1 + 360);
  while (2)
  {
    v370 = (uint64_t *)*v367;
    if (*(_BYTE *)(*v367 + 285))
    {
      v371 = 0;
      *((_BYTE *)v370 + 285) = 0;
      v372 = 4;
      goto LABEL_589;
    }
    if (*((_BYTE *)v370 + 282) != 2)
    {
      v371 = 0;
      goto LABEL_626;
    }
    v374 = *v370;
    v373 = v370[1];
    if (*v370 == v373)
    {
LABEL_620:
      v385 = 2;
      goto LABEL_621;
    }
    v375 = 1;
    v1356 = v368;
    v1352 = v370[1];
    while (*(_BYTE *)(v374 + 238))
    {
      if (*(_BYTE *)(v374 + 238) == 1)
      {
        v376 = (*(_QWORD *)(v374 + 16) - *(_QWORD *)(v374 + 8)) >> 3;
        v377 = 1;
      }
      else
      {
        v377 = 0;
        LOBYTE(v376) = 0;
      }
LABEL_616:
      *(_BYTE *)(v374 + 244) = ((*(_DWORD *)(v374 + 16) - *(_DWORD *)(v374 + 8)) >> 3) - v376;
      *(_BYTE *)(v374 + 241) = v377 & 1;
      if (*(_BYTE *)(v374 + 242))
      {
LABEL_624:
        *((_BYTE *)v370 + 282) = 5;
        v371 = 1;
        goto LABEL_626;
      }
      if (v375)
      {
        v384 = *(unsigned __int8 *)(v374 + 241);
        v375 = *(_BYTE *)(v374 + 241) != 0;
        v374 += 248;
        if (v374 == v373)
        {
          if (v384)
            goto LABEL_620;
LABEL_637:
          v385 = 1;
LABEL_621:
          v386 = *((unsigned __int8 *)v370 + 280);
          v371 = v385 != v386;
          *((_BYTE *)v370 + 281) = v386;
          *((_BYTE *)v370 + 280) = v385;
          v372 = 3;
LABEL_589:
          *((_BYTE *)v370 + 282) = v372;
          goto LABEL_626;
        }
      }
      else
      {
        v375 = 0;
        v374 += 248;
        if (v374 == v373)
          goto LABEL_637;
      }
    }
    v1360 = v375;
    v379 = *(unsigned int **)(v374 + 8);
    v378 = *(unsigned int **)(v374 + 16);
    if (v379 == v378)
    {
      v380 = 0;
      v377 = 0;
      LOBYTE(v376) = 0;
LABEL_609:
      v383 = *(unsigned __int8 *)(v374 + 237);
      v373 = v1352;
      v375 = v1360;
      if (*(_BYTE *)(v374 + 237))
      {
        if (v383 == 2)
        {
          v377 = *(unsigned __int8 *)(v374 + 240) <= v376;
        }
        else if (v383 == 1)
        {
          v377 = v380 ^ 1;
        }
        else
        {
          v377 = 0;
        }
      }
      *(_BYTE *)(v374 + 243) = v376;
      v368 = v1356;
      goto LABEL_616;
    }
    LOBYTE(v376) = 0;
    v377 = 0;
    v380 = 0;
    while (1)
    {
      v381 = *v379;
      md::OcclusionQueryResource::initialize((md::OcclusionQueryResource *)(v366[28] + 24 * *v379));
      v366 = v1367;
      if (*((_BYTE *)v379 + 4) == 1)
        goto LABEL_599;
      if (*((_BYTE *)v379 + 4))
        goto LABEL_606;
      v382 = *(_QWORD *)(v1367[28] + 24 * v381);
      if (*(_BYTE *)(v382 + 136) == 2)
      {
        *(_BYTE *)(v374 + 242) = 1;
        v368 = v1356;
        goto LABEL_624;
      }
      if (!*(_BYTE *)(v382 + 129))
        break;
      if (!*(_DWORD *)(v382 + 132))
      {
LABEL_606:
        v380 = 1;
        goto LABEL_600;
      }
LABEL_599:
      LOBYTE(v376) = v376 + 1;
      v377 = 1;
LABEL_600:
      v379 += 2;
      if (v379 == v378)
        goto LABEL_609;
    }
    v371 = 0;
    v368 = v1356;
LABEL_626:
    v387 = (uint64_t *)*v367;
    v388 = *(unsigned __int8 *)(*v367 + 282);
    if (v388 >= 3)
    {
      v389 = *v387;
      v390 = v387[1];
      if (*v387 != v390)
      {
        do
        {
          md::OcclusionTest::checkinResources(*(md::OcclusionTest **)(v389 + 8), *(md::OcclusionContext **)(v389 + 16), v369);
          v389 += 248;
        }
        while (v389 != v390);
        v392 = *v387;
        v391 = v387[1];
        v366 = v1367;
        if (*v387 != v391)
        {
          v393 = v391 - v392 - 248;
          v394 = *v387;
          if (v393 < 0xF8)
            goto LABEL_1914;
          v395 = v393 / 0xF8 + 1;
          v394 = v392 + 248 * (v395 & 0x3FFFFFFFFFFFFFELL);
          v396 = (_QWORD *)(v392 + 264);
          v397 = v395 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            v398 = *(v396 - 1);
            *(v396 - 31) = *(v396 - 32);
            *v396 = v398;
            v396 += 62;
            v397 -= 2;
          }
          while (v397);
          if (v395 != (v395 & 0x3FFFFFFFFFFFFFELL))
          {
LABEL_1914:
            do
            {
              *(_QWORD *)(v394 + 16) = *(_QWORD *)(v394 + 8);
              v394 += 248;
            }
            while (v394 != v391);
          }
        }
      }
      if (v388 == 5)
      {
        *((_BYTE *)v387 + 281) = *((_BYTE *)v387 + 280);
        *((_BYTE *)v387 + 280) = 0;
      }
      *((_BYTE *)v387 + 282) = 0;
      atomic_store(1u, (unsigned __int8 *)v387 + 286);
    }
    v368 |= v371;
    v367 += 2;
    if (v367 != v1362)
      continue;
    break;
  }
  v399 = (_QWORD *)v366[12];
  v400 = (_QWORD *)v366[13];
  if (v399 == v400)
  {
LABEL_644:
    v401 = v1358;
    goto LABEL_645;
  }
  v401 = v1358;
  while (*(_BYTE *)(*v399 + 282))
  {
    v399 += 2;
    if (v399 == v400)
      goto LABEL_645;
  }
  if (v399 == v400 || (v435 = v399 + 2, v399 + 2 == v400))
  {
    v436 = v399;
    if (v399 != v400)
      goto LABEL_714;
  }
  else
  {
    v436 = v399;
    do
    {
      v437 = v435;
      v438 = v399[2];
      if (*(_BYTE *)(v438 + 282))
      {
        v439 = v399[3];
        *v437 = 0;
        v437[1] = 0;
        v440 = (std::__shared_weak_count *)v436[1];
        *v436 = v438;
        v436[1] = v439;
        if (v440)
        {
          p_shared_owners = (unint64_t *)&v440->__shared_owners_;
          do
            v442 = __ldaxr(p_shared_owners);
          while (__stlxr(v442 - 1, p_shared_owners));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
            std::__shared_weak_count::__release_weak(v440);
            v366 = v1367;
          }
        }
        v436 += 2;
      }
      v435 = v437 + 2;
      v399 = v437;
    }
    while (v437 + 2 != v400);
    v400 = (_QWORD *)v366[13];
    if (v436 != v400)
    {
LABEL_714:
      while (v400 != v436)
      {
        v450 = (std::__shared_weak_count *)*(v400 - 1);
        if (v450)
        {
          v451 = (unint64_t *)&v450->__shared_owners_;
          do
            v452 = __ldaxr(v451);
          while (__stlxr(v452 - 1, v451));
          if (!v452)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
            v366 = v1367;
          }
        }
        v400 -= 2;
      }
      v366[13] = v436;
    }
  }
LABEL_645:
  v402 = v19;
  HIBYTE(v1372) |= v368 & 1;
  (*(void (**)(_QWORD, md::LayoutContext *, float))(**(_QWORD **)(a1 + 240) + 24))(*(_QWORD *)(a1 + 240), v401, v402);
  v403 = a1;
  if (*(_BYTE *)(a1 + 3381))
  {
    *(_BYTE *)(a1 + 3381) = 0;
    md::LabelManager::tryWaitForBkgdUpdateComplete((md::LabelManager *)a1, 0x1F4u);
  }
  v404 = a1 + 1672;
  if (*(_BYTE *)(a1 + 3385))
    goto LABEL_925;
  *(_BYTE *)(a1 + 3383) = *(_BYTE *)(a1 + 3382) ^ 1;
  *(_QWORD *)(a1 + 432) = v1354;
  md::LabelManager::updateDebugSettings((md::LabelManager *)a1);
  v405 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 184);
  if (v405)
  {
    v406 = *(_QWORD *)(v405 + 520);
    v407 = *(std::__shared_weak_count **)(v405 + 528);
    if (!v407)
      goto LABEL_654;
    v408 = (unint64_t *)&v407->__shared_owners_;
    do
      v409 = __ldxr(v408);
    while (__stxr(v409 + 1, v408));
    do
      v410 = __ldaxr(v408);
    while (__stlxr(v410 - 1, v408));
    if (!v410)
    {
      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
      std::__shared_weak_count::__release_weak(v407);
      if (v406)
        goto LABEL_655;
    }
    else
    {
LABEL_654:
      if (v406)
        goto LABEL_655;
    }
    v470 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 184);
    v471 = (std::__shared_weak_count_vtbl *)operator new();
    gss::ClientStyleState<gss::PropertyID>::ClientStyleState((uint64_t)v471);
    std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::shared_ptr[abi:nn180100]<gss::ClientStyleState<gss::PropertyID>,void>(&v1404, v471);
    v473 = v1404;
    v472 = v1405[0];
    if (v1405[0])
    {
      v474 = (unint64_t *)(*(_QWORD *)v1405 + 8);
      do
        v475 = __ldxr(v474);
      while (__stxr(v475 + 1, v474));
    }
    *(_QWORD *)(v470 + 520) = v473;
    v476 = *(std::__shared_weak_count **)(v470 + 528);
    *(float32x2_t *)(v470 + 528) = v472;
    if (v476)
    {
      v477 = (unint64_t *)&v476->__shared_owners_;
      do
        v478 = __ldaxr(v477);
      while (__stlxr(v478 - 1, v477));
      if (!v478)
      {
        ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
        std::__shared_weak_count::__release_weak(v476);
      }
    }
    v479 = (std::__shared_weak_count *)v1405[0];
    if (v1405[0])
    {
      v480 = (unint64_t *)(*(_QWORD *)v1405 + 8);
      do
        v481 = __ldaxr(v480);
      while (__stlxr(v481 - 1, v480));
      if (!v481)
      {
        ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
        std::__shared_weak_count::__release_weak(v479);
      }
    }
LABEL_655:
    v411 = *(_QWORD *)(a1 + 3488);
    if (v411)
    {
      v412 = *(_QWORD *)(v411 + 520);
      v413 = *(std::__shared_weak_count **)(v411 + 528);
      if (v413)
      {
        v414 = (unint64_t *)&v413->__shared_owners_;
        do
          v415 = __ldxr(v414);
        while (__stxr(v415 + 1, v414));
        do
          v416 = __ldaxr(v414);
        while (__stlxr(v416 - 1, v414));
        if (!v416)
        {
          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
          std::__shared_weak_count::__release_weak(v413);
        }
      }
      if (v412)
      {
        v417 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 184);
        v418 = *(_QWORD *)(v417 + 520);
        v419 = *(_QWORD *)(v417 + 528);
        *(_QWORD *)&v1387[0] = v418;
        *((_QWORD *)&v1387[0] + 1) = v419;
        if (v419)
        {
          v420 = (unint64_t *)(v419 + 8);
          do
            v421 = __ldxr(v420);
          while (__stxr(v421 + 1, v420));
        }
        v422 = *(_QWORD *)(a1 + 3488);
        v423 = *(_QWORD *)(v422 + 520);
        v424 = *(std::__shared_weak_count **)(v422 + 528);
        *(_QWORD *)__p = v423;
        *(_QWORD *)&__p[8] = v424;
        if (v424)
        {
          v425 = (unint64_t *)&v424->__shared_owners_;
          do
            v426 = __ldxr(v425);
          while (__stxr(v426 + 1, v425));
        }
        gss::ClientStyleState<gss::PropertyID>::setStateWithClientStyleState(v418, v423);
        if (v424)
        {
          v427 = (unint64_t *)&v424->__shared_owners_;
          do
            v428 = __ldaxr(v427);
          while (__stlxr(v428 - 1, v427));
          if (!v428)
          {
            ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
            std::__shared_weak_count::__release_weak(v424);
          }
        }
        v429 = (std::__shared_weak_count *)*((_QWORD *)&v1387[0] + 1);
        if (*((_QWORD *)&v1387[0] + 1))
        {
          v430 = (unint64_t *)(*((_QWORD *)&v1387[0] + 1) + 8);
          do
            v431 = __ldaxr(v430);
          while (__stlxr(v431 - 1, v430));
          if (!v431)
          {
            ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
            std::__shared_weak_count::__release_weak(v429);
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 3384))
  {
    *(_BYTE *)(a1 + 3384) = 0;
    md::FontTrackingCache::updateForDisplay(*(md::FontTrackingCache **)(a1 + 312));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 48))(*(_QWORD *)(a1 + 240));
  }
  md::LabelManager::flushCommands((md::LabelManager *)a1);
  v432 = (_QWORD *)*((_QWORD *)v401 + 1);
  v433 = v432[1];
  if ((v433 & (v433 - 1)) != 0)
  {
    v443 = 0xE42D19AFCA302E68;
    if (v433 <= 0xE42D19AFCA302E68)
      v443 = 0xE42D19AFCA302E68 % v433;
    v434 = *(_QWORD **)(*v432 + 8 * v443);
    do
    {
      do
        v434 = (_QWORD *)*v434;
      while (v434[1] != 0xE42D19AFCA302E68);
    }
    while (v434[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v434 = *(_QWORD **)(*v432 + 8 * ((v433 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v434 = (_QWORD *)*v434;
      while (v434[1] != 0xE42D19AFCA302E68);
    }
    while (v434[2] != 0xE42D19AFCA302E68);
  }
  v444 = *(_QWORD *)(v434[5] + 32);
  *(_BYTE *)(a1 + 3050) = *(_BYTE *)(v444 + 94) == 1;
  v445 = *(_QWORD *)(a1 + 336);
  v446 = *(unsigned __int8 *)(v444 + 83);
  if (*(_BYTE *)(v445 + 181))
    v447 = *(unsigned __int8 *)(v445 + 180) == v446;
  else
    v447 = 0;
  if (!v447)
  {
    *(_BYTE *)(v445 + 181) = 1;
    *(_BYTE *)(v445 + 180) = v446;
    std::mutex::lock((std::mutex *)v445);
    *(_QWORD *)&v1387[0] = &off_1E42CC3C8;
    *((_QWORD *)&v1387[1] + 1) = v1387;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(v445 + 264), (uint64_t)v1387);
    v448 = (_QWORD *)*((_QWORD *)&v1387[1] + 1);
    if (*((_OWORD **)&v1387[1] + 1) == v1387)
    {
      v449 = 4;
      v448 = v1387;
LABEL_722:
      (*(void (**)(void))(*v448 + 8 * v449))();
    }
    else if (*((_QWORD *)&v1387[1] + 1))
    {
      v449 = 5;
      goto LABEL_722;
    }
    *(_QWORD *)__p = &off_1E42CC3C8;
    *(_QWORD *)&__p[24] = __p;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(v445 + 376), (uint64_t)__p);
    v453 = *(_QWORD **)&__p[24];
    if (*(_BYTE **)&__p[24] == __p)
    {
      v454 = 4;
      v453 = __p;
LABEL_727:
      (*(void (**)(void))(*v453 + 8 * v454))();
    }
    else if (*(_QWORD *)&__p[24])
    {
      v454 = 5;
      goto LABEL_727;
    }
    v455 = *(_QWORD *)(v445 + 432);
    *(_BYTE *)(v455 + 136) = -1;
    *(_BYTE *)(v455 + 125) = 0;
    v456 = *(std::__shared_weak_count **)(v455 + 416);
    *(_QWORD *)(v455 + 408) = 0;
    *(_QWORD *)(v455 + 416) = 0;
    if (v456)
    {
      v457 = (unint64_t *)&v456->__shared_owners_;
      do
        v458 = __ldaxr(v457);
      while (__stlxr(v458 - 1, v457));
      if (!v458)
      {
        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
        std::__shared_weak_count::__release_weak(v456);
      }
    }
    v459 = *(std::__shared_weak_count **)(v455 + 432);
    *(_QWORD *)(v455 + 424) = 0;
    *(_QWORD *)(v455 + 432) = 0;
    if (v459)
    {
      v460 = (unint64_t *)&v459->__shared_owners_;
      do
        v461 = __ldaxr(v460);
      while (__stlxr(v461 - 1, v460));
      if (!v461)
      {
        ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
        std::__shared_weak_count::__release_weak(v459);
      }
    }
    std::mutex::unlock((std::mutex *)v445);
  }
  v462 = *(_QWORD *)(v445 + 200);
  if (*(_BYTE *)(v462 + 89))
  {
    *(_BYTE *)(v462 + 89) = 0;
    v463 = *(_QWORD *)(v462 + 56);
    *(_QWORD *)(v462 + 56) = 0;
    v464 = *(_QWORD *)(v462 + 80);
    *(_QWORD *)(v462 + 80) = v463;
    if (v464)
      MEMORY[0x1A1AF4E00](v464, 0x1000C40F5825EE8);
  }
  v465 = a1;
  v466 = a3;
  if (!*(_QWORD *)(a1 + 184))
  {
    v467 = *(_QWORD *)(a1 + 232);
    if (*(_BYTE *)(v467 + 22))
    {
      v468 = *(unsigned __int8 *)(a1 + 3612);
      *(_BYTE *)(a1 + 3051) = v468;
      if (v468 && !*(_BYTE *)(v467 + 21))
      {
        v469 = (*(uint64_t (**)(_QWORD, md::LayoutContext *, uint64_t))(**(_QWORD **)(a1 + 240) + 112))(*(_QWORD *)(a1 + 240), v401, a3);
        v465 = a1;
        *(_BYTE *)(a1 + 3051) = v469;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 3051) = 0;
    }
    md::OcclusionManager::flushQueuedQueries(*(int64x2_t **)(v465 + 360));
    v465 = a1;
    *(_BYTE *)(a1 + 3152) = *(_BYTE *)(a1 + 3571);
    v482 = *(unsigned __int8 *)(a1 + 3572);
    v466 = a3;
    if (*(unsigned __int8 *)(a1 + 3153) != v482)
    {
      *(_BYTE *)(a1 + 3153) = v482;
      if (v482)
        *(_BYTE *)(a1 + 3042) = 1;
    }
  }
  if (*(_BYTE *)(v465 + 3049))
  {
    v483 = *(_QWORD *)(v465 + 168);
    v484 = *(_QWORD **)v483;
    v485 = *(_QWORD **)(v483 + 8);
    if (*(_QWORD **)v483 != v485)
    {
      do
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v484 + 48))(*v484);
        ++v484;
      }
      while (v484 != v485);
    }
    v486 = *(_QWORD *)(a1 + 320);
    v487 = *(float *)(a1 + 176);
    {
      v1340 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1340, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v489 = mdm::Allocator::instance(void)::alloc;
    v491 = *(_QWORD *)(v486 + 56);
    v490 = *(_QWORD *)(v486 + 64);
    *(_QWORD *)(v486 + 56) = 0;
    *(_QWORD *)(v486 + 64) = 0;
    v492 = *(_QWORD *)(v486 + 72);
    *(_QWORD *)(v486 + 72) = 0;
    if (v491)
    {
      if (v490 != v491)
      {
        v493 = v490;
        do
        {
          free(*(void **)(v490 - 8));
          *(_QWORD *)(v493 - 24) = 0;
          *(_QWORD *)(v493 - 16) = 0;
          v493 -= 24;
          *(_QWORD *)(v490 - 8) = 0;
          v490 = v493;
        }
        while (v493 != v491);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v489 + 40))(v489, v491, v492 - v491);
    }
    *(_BYTE *)(v486 + 92) = 0;
    *(_DWORD *)(v486 + 12) = *(_DWORD *)(a1 + 1544);
    *(_DWORD *)(v486 + 16) = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(v486 + 20) = *(_DWORD *)(a1 + 1552);
    *(_DWORD *)(v486 + 24) = *(_DWORD *)(a1 + 1556);
    *(float *)(v486 + 28) = v487 * 100.0;
    *(float *)(v486 + 32) = 0.01 / v487;
    *(_DWORD *)(v486 + 36) = *(_DWORD *)(a1 + 1544);
    *(_DWORD *)(v486 + 40) = *(_DWORD *)(a1 + 1548);
    __asm { FMOV            V2.2S, #1.0 }
    v498 = vcvt_s32_f32(vmla_n_f32(_D2, vsub_f32(vadd_f32(*(float32x2_t *)(a1 + 1552), (float32x2_t)vdup_n_s32(0xBDCCCCCD)), *(float32x2_t *)(a1 + 1544)), 0.01 / v487));
    *(int32x2_t *)(v486 + 44) = v498;
    v499 = vmul_lane_s32(v498, v498, 1).u32[0];
    v500 = v499;
    if ((int)v499 < 1)
    {
      *(_DWORD *)(v486 + 44) = 0;
      *(_DWORD *)(v486 + 48) = 0;
    }
    else
    {
      v501 = *(_QWORD *)(v486 + 56);
      v502 = *(_QWORD **)(v486 + 64);
      v503 = (char *)v502 - v501;
      v504 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v502 - v501) >> 3);
      v505 = v499 - v504;
      if (v499 <= v504)
      {
        if (v499 < v504)
        {
          v515 = (_QWORD *)(v501 + 24 * v499);
          if (v502 != v515)
          {
            v516 = *(_QWORD **)(v486 + 64);
            do
            {
              free((void *)*(v502 - 1));
              *(v516 - 3) = 0;
              *(v516 - 2) = 0;
              v516 -= 3;
              *(v502 - 1) = 0;
              v502 = v516;
            }
            while (v516 != v515);
          }
          *(_QWORD *)(v486 + 64) = v515;
        }
      }
      else
      {
        v506 = *(_QWORD *)(v486 + 72);
        if (0xAAAAAAAAAAAAAAABLL * ((v506 - (uint64_t)v502) >> 3) >= v505)
        {
          v517 = &v502[3 * v505];
          v518 = 24 * v499 - (_QWORD)v503;
          do
          {
            if (v502)
            {
              *v502 = 0;
              v502[1] = 0;
              v502[2] = 0;
            }
            v502 += 3;
            v518 -= 24;
          }
          while (v518);
          *(_QWORD *)(v486 + 64) = v517;
        }
        else
        {
          v507 = 0xAAAAAAAAAAAAAAABLL * ((v506 - v501) >> 3);
          v508 = 2 * v507;
          if (2 * v507 <= v499)
            v508 = v499;
          if (v507 >= 0x555555555555555)
            v509 = 0xAAAAAAAAAAAAAAALL;
          else
            v509 = v508;
          v510 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v486 + 80) + 16))(*(_QWORD *)(v486 + 80), 24 * v509, 8);
          v511 = (_QWORD *)(v510 + 24 * v504);
          v512 = v510 + 24 * v500;
          v513 = 24 * v500 - (_QWORD)v503;
          v514 = v511;
          do
          {
            if (v514)
            {
              *v514 = 0;
              v514[1] = 0;
              v514[2] = 0;
            }
            v514 += 3;
            v513 -= 24;
          }
          while (v513);
          v519 = v510 + 24 * v509;
          v520 = *(_QWORD *)(v486 + 56);
          v521 = *(_QWORD *)(v486 + 64);
          if (v521 == v520)
          {
            *(_QWORD *)(v486 + 56) = v511;
            *(_QWORD *)(v486 + 64) = v512;
            v524 = *(_QWORD *)(v486 + 72);
            *(_QWORD *)(v486 + 72) = v519;
          }
          else
          {
            do
            {
              v522 = *(_OWORD *)(v521 - 24);
              *(v511 - 1) = *(_QWORD *)(v521 - 8);
              *(_OWORD *)(v511 - 3) = v522;
              v511 -= 3;
              v521 -= 24;
            }
            while (v521 != v520);
            v521 = *(_QWORD *)(v486 + 56);
            v523 = *(_QWORD *)(v486 + 64);
            *(_QWORD *)(v486 + 56) = v511;
            *(_QWORD *)(v486 + 64) = v512;
            v524 = *(_QWORD *)(v486 + 72);
            *(_QWORD *)(v486 + 72) = v519;
            if (v523 != v521)
            {
              v525 = v523;
              do
              {
                free(*(void **)(v523 - 8));
                *(_QWORD *)(v525 - 24) = 0;
                *(_QWORD *)(v525 - 16) = 0;
                v525 -= 24;
                *(_QWORD *)(v523 - 8) = 0;
                v523 = v525;
              }
              while (v525 != v521);
            }
          }
          if (v521)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v486 + 80) + 40))(*(_QWORD *)(v486 + 80), v521, v524 - v521);
        }
      }
    }
    v465 = a1;
    *(_BYTE *)(a1 + 3049) = 0;
    v466 = a3;
  }
  if (*(_QWORD *)(v465 + 416) == *(_QWORD *)(v466 + 40))
  {
    v526 = (_QWORD *)(a1 + 400);
    v527 = *(int8x8_t *)(v466 + 8);
    v528 = (uint8x8_t)vcnt_s8(v527);
    v528.i16[0] = vaddlv_u8(v528);
    v529 = *(_QWORD *)&v527 - 1;
LABEL_809:
    v526 = (_QWORD *)*v526;
    if (v526)
    {
      if (v527)
      {
        v530 = v526[2];
        v531 = 0x9DDFEA08EB382D69 * (((8 * v530) + 8) ^ HIDWORD(v530));
        v532 = 0x9DDFEA08EB382D69 * (HIDWORD(v530) ^ (v531 >> 47) ^ v531);
        v533 = 0x9DDFEA08EB382D69 * (v532 ^ (v532 >> 47));
        if (v528.u32[0] > 1uLL)
        {
          v534 = v533;
          if (v533 >= *(_QWORD *)&v527)
            v534 = v533 % *(_QWORD *)&v527;
        }
        else
        {
          v534 = v533 & v529;
        }
        v535 = *(_QWORD **)(*(_QWORD *)v466 + 8 * v534);
        if (v535)
        {
          v536 = (_QWORD *)*v535;
          if (v536)
          {
            if (v528.u32[0] < 2uLL)
            {
              while (1)
              {
                v537 = v536[1];
                if (v533 == v537)
                {
                  if (v536[2] == v530)
                    goto LABEL_809;
                }
                else if ((v537 & v529) != v534)
                {
                  goto LABEL_830;
                }
                v536 = (_QWORD *)*v536;
                if (!v536)
                  goto LABEL_830;
              }
            }
            while (1)
            {
              v538 = v536[1];
              if (v533 == v538)
              {
                if (v536[2] == v530)
                  goto LABEL_809;
              }
              else
              {
                if (v538 >= *(_QWORD *)&v527)
                  v538 %= *(_QWORD *)&v527;
                if (v538 != v534)
                  goto LABEL_830;
              }
              v536 = (_QWORD *)*v536;
              if (!v536)
                goto LABEL_830;
            }
          }
        }
      }
      goto LABEL_830;
    }
    v539 = 0;
  }
  else
  {
LABEL_830:
    if (a1 + 376 == v466)
    {
      v539 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 424) = *(_DWORD *)(v466 + 48);
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *> *>>((_QWORD *)(a1 + 376), *(_QWORD **)(v466 + 24));
      v539 = 1;
      v466 = a3;
    }
  }
  (*(void (**)(_QWORD, md::LayoutContext *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 240) + 32))(*(_QWORD *)(a1 + 240), v401, v466, v539);
  v540 = a1;
  if (*(_BYTE *)(a1 + 3376))
  {
    md::LabelManager::startStylesheetLabelAnimations((md::LabelManager *)a1);
    goto LABEL_835;
  }
  if (*(_BYTE *)(a1 + 3373) && !*(_BYTE *)(a1 + 3375))
  {
    *(_BYTE *)(a1 + 3373) = 0;
    if (*(_BYTE *)(a1 + 3374))
    {
      *(_BYTE *)(a1 + 3374) = 0;
      md::LabelStyleCache::stylesheetDidChange(*(std::mutex **)(a1 + 336));
    }
    v1033 = *(_QWORD *)(a1 + 272);
    v1034 = *(_QWORD *)(v1033 + 24);
    for (i = *(_QWORD *)(v1033 + 32); i != v1034; i -= 16)
    {
      v1036 = *(std::__shared_weak_count **)(i - 8);
      if (v1036)
      {
        v1037 = (unint64_t *)&v1036->__shared_owners_;
        do
          v1038 = __ldaxr(v1037);
        while (__stlxr(v1038 - 1, v1037));
        if (!v1038)
        {
          ((void (*)(std::__shared_weak_count *))v1036->__on_zero_shared)(v1036);
          std::__shared_weak_count::__release_weak(v1036);
        }
      }
    }
    *(_QWORD *)(v1033 + 32) = v1034;
    *(_BYTE *)(v1033 + 60) = 1;
    v1039 = *(_QWORD *)(a1 + 296);
    v1040 = *(_DWORD *)(v1039 + 12);
    _CF = __CFADD__(v1040, 1);
    v1041 = v1040 + 1;
    *(_DWORD *)(v1039 + 12) = v1041;
    if (_CF)
    {
      *(_QWORD *)(v1039 + 12) = 0x100000002;
      v1041 = 2;
    }
    atomic_store(v1041, (unsigned int *)(v1039 + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 144))(*(_QWORD *)(a1 + 240));
    md::LabelTextDataLoader::finishBatch(*(md::LabelTextDataLoader **)(a1 + 272));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 168) + 72) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 72));
    if (*(_QWORD *)(a1 + 184))
    {
      v541 = 0;
    }
    else
    {
LABEL_835:
      v541 = 1;
      HIBYTE(v1372) = 1;
    }
    v540 = a1;
    *(_WORD *)(a1 + 3046) = 257;
    if (*(_BYTE *)(a1 + 3646))
      goto LABEL_844;
LABEL_841:
    if (*(_BYTE *)(v540 + 3380) || *(_BYTE *)(v540 + 3054) || *(_QWORD *)(v540 + 184))
      goto LABEL_844;
    v542 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v540 + 240) + 80))(*(_QWORD *)(v540 + 240));
  }
  else
  {
    v541 = 0;
    if (!*(_BYTE *)(a1 + 3646))
      goto LABEL_841;
LABEL_844:
    v542 = 1;
  }
  *(_BYTE *)(a1 + 3057) = *(_BYTE *)(a1 + 3380);
  *(_BYTE *)(a1 + 3380) = 0;
  LODWORD(v1398) = 65793;
  WORD2(v1398) = 0;
  LODWORD(v1399) = *(_DWORD *)(a1 + 3272);
  v543 = mach_absolute_time();
  if (*(_BYTE *)(a1 + 3042))
    v544 = 1;
  else
    v544 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 88))(*(_QWORD *)(a1 + 240));
  v545 = *(unsigned __int8 *)(a1 + 3043);
  *(_WORD *)(a1 + 3042) = 0;
  if (*(_BYTE *)(a1 + 3041))
  {
    v546 = 1;
  }
  else if (*(_BYTE *)(a1 + 3608))
  {
    v546 = *(_BYTE *)(a1 + 3609) != 0;
  }
  else
  {
    v546 = 0;
  }
  *(_BYTE *)(a1 + 3041) = 0;
  BYTE4(v1398) = v546;
  if (*(_QWORD *)(a1 + 184))
  {
    LODWORD(v1398) = 65537;
    goto LABEL_855;
  }
  LOBYTE(v1398) = v546;
  if (!v541)
  {
    BYTE1(v1398) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 96))(*(_QWORD *)(a1 + 240)) ^ 1;
    v599 = (unsigned __int8 *)(a1 + 3378);
    do
      v600 = __ldaxr(v599);
    while (__stlxr(0, v599));
    v601 = *(unsigned __int8 *)(a1 + 3379) | v600 & 1;
    *(_BYTE *)(a1 + 3379) = v601;
    if (v542)
    {
      if ((v544 & 1) == 0 && !*(_BYTE *)(a1 + 3611))
      {
        v602 = *(_QWORD *)(a1 + 3440);
        if (v602)
        {
          if (v601 || *(_BYTE *)(a1 + 3045) || (v603 = *(unsigned __int8 *)(a1 + 3046), *(_BYTE *)(a1 + 3046)))
          {
            if (BYTE1(v1398))
            {
              v603 = *(unsigned __int8 *)(a1 + 3046);
              if (*(_BYTE *)(a1 + 3046))
              {
                v604 = 0;
                BYTE1(v1398) = 0;
                v603 = 1;
              }
              else
              {
                v604 = 1;
              }
              v1238 = 0;
              HIBYTE(v1372) = 1;
            }
            else
            {
              v604 = 0;
              v1238 = 0;
              v603 = 1;
            }
          }
          else
          {
            v604 = BYTE1(v1398);
            v1238 = 1;
          }
          *(_BYTE *)(a1 + 3045) |= (v1398 | v604) != 0;
          v593 = v603 != 0;
          if ((v1238 & 1) != 0)
          {
LABEL_1767:
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v602 + 56))(v602))
            {
              *(_QWORD *)(a1 + 3296) = v543;
              (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 3440) + 24))(*(_QWORD *)(a1 + 3440), 0, 0.1);
              v593 = 0;
              goto LABEL_1695;
            }
            if (v543 - *(_QWORD *)(a1 + 3296) < MaxCollisionIntervalInMachTime)
            {
LABEL_1769:
              v593 = 0;
              goto LABEL_1695;
            }
            goto LABEL_1692;
          }
LABEL_1631:
          if (!v593)
            goto LABEL_1695;
        }
      }
    }
    else
    {
      v1189 = *(_DWORD *)(a1 + 3280) != *(_DWORD *)(a1 + 1620) || *(_DWORD *)(a1 + 3276) != *(_DWORD *)(a1 + 3272) - 1;
      if ((_BYTE)v1398)
        v1190 = 1;
      else
        v1190 = v544;
      if ((v1190 & 1) == 0 && !BYTE1(v1398))
      {
        v602 = *(_QWORD *)(a1 + 3440);
        if (v602)
        {
          if (!v601 && !*(_BYTE *)(a1 + 3045))
          {
            v593 = *(_BYTE *)(a1 + 3046) != 0;
            if (*(_BYTE *)(a1 + 3046))
              v1189 = 0;
            if (v1189)
              goto LABEL_1767;
            goto LABEL_1631;
          }
        }
        else if (!*(_BYTE *)(a1 + 3045) && !*(_BYTE *)(a1 + 3046) && !v1189)
        {
          goto LABEL_1769;
        }
      }
    }
LABEL_1692:
    v1229 = *(_QWORD *)(a1 + 3440);
    if (v1229)
      (*(void (**)(uint64_t))(*(_QWORD *)v1229 + 40))(v1229);
    *(_WORD *)(a1 + 3045) = 0;
    *(_BYTE *)(a1 + 3379) = 0;
    v593 = 1;
LABEL_1695:
    BYTE2(v1398) = v593;
    if (v545)
    {
      v545 = 1;
      v1230 = a1;
    }
    else
    {
      v1230 = a1;
      v545 = *(_BYTE *)(a1 + 3047) != 0;
    }
    BYTE3(v1398) = v545;
    *(_BYTE *)(v1230 + 3047) = 0;
    v592 = BYTE1(v1398);
    if (!(_BYTE)v1398)
      goto LABEL_1699;
LABEL_1703:
    if (!v593)
      goto LABEL_856;
LABEL_855:
    *(_DWORD *)(a1 + 3276) = *(_DWORD *)(a1 + 3272);
    *(_DWORD *)(a1 + 3280) = *(_DWORD *)(a1 + 1620);
    goto LABEL_856;
  }
  v592 = 0;
  BYTE1(v1398) = 0;
  v593 = v546 | v544;
  BYTE2(v1398) = v546 | v544;
  BYTE3(v1398) = v545;
  HIBYTE(v1372) = 1;
  if (v546)
    goto LABEL_1703;
LABEL_1699:
  if (v592)
    goto LABEL_1703;
  if (v593)
    goto LABEL_855;
  if (!v545)
    goto LABEL_924;
LABEL_856:
  *(_DWORD *)(*(_QWORD *)(a1 + 3144) + 160) = *(_DWORD *)(a1 + 3272);
  if (v542)
  {
    md::LabelManager::layoutForStaging(a1, (uint64_t)&v1398);
    md::FontTrackingCache::updateForDisplay(*(md::FontTrackingCache **)(a1 + 312));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 48))(*(_QWORD *)(a1 + 240));
    md::OcclusionManager::flushQueuedQueries(*(int64x2_t **)(a1 + 360));
    goto LABEL_924;
  }
  v548 = *(std::__shared_weak_count_vtbl **)(a1 + 8);
  v547 = *(std::__shared_weak_count **)(a1 + 16);
  v1404 = v548;
  if (!v547)
    goto LABEL_1898;
  v549 = std::__shared_weak_count::lock(v547);
  v1405[0] = (float32x2_t)v549;
  if (!v549)
    goto LABEL_1898;
  v550 = v549;
  *(_BYTE *)(a1 + 3385) = 1;
  BYTE5(v1398) = 1;
  *(_OWORD *)(a1 + 1728) = *(_OWORD *)v1354;
  v551 = *(_OWORD *)(v1354 + 16);
  v552 = *(_OWORD *)(v1354 + 32);
  v553 = *(_OWORD *)(v1354 + 48);
  *(_DWORD *)(a1 + 1792) = *(_DWORD *)(v1354 + 64);
  *(_OWORD *)(a1 + 1776) = v553;
  *(_OWORD *)(a1 + 1760) = v552;
  *(_OWORD *)(a1 + 1744) = v551;
  v554 = *(_OWORD *)(a1 + 524);
  *(_OWORD *)(a1 + 1796) = *(_OWORD *)(a1 + 508);
  *(_OWORD *)(a1 + 1812) = v554;
  *(_QWORD *)(a1 + 1828) = *(_QWORD *)(a1 + 540);
  *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a1 + 1856) = *(_OWORD *)(a1 + 568);
  v555 = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(a1 + 1872) = *v1349;
  *(_OWORD *)(a1 + 1888) = v555;
  *(_OWORD *)(a1 + 1904) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a1 + 1920) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a1 + 1936) = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a1 + 1952) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a1 + 680);
  v556 = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(a1 + 1984) = v556;
  v557 = *(_OWORD *)(a1 + 728);
  v558 = *(_OWORD *)(a1 + 744);
  v559 = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a1 + 776);
  *(_OWORD *)(a1 + 2048) = v559;
  *(_OWORD *)(a1 + 2032) = v558;
  *(_OWORD *)(a1 + 2016) = v557;
  v560 = *(_OWORD *)(a1 + 808);
  *(_OWORD *)(a1 + 2080) = *(_OWORD *)(a1 + 792);
  *(_OWORD *)(a1 + 2096) = v560;
  *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a1 + 824);
  v561 = *(_QWORD *)(a1 + 840);
  *(_DWORD *)(a1 + 2136) = *(_DWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 2128) = v561;
  *(_OWORD *)(a1 + 2144) = *(_OWORD *)(a1 + 856);
  *(_OWORD *)(a1 + 2160) = *v1343;
  *(_OWORD *)(a1 + 2176) = *(_OWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 2192) = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 2200) = *(_QWORD *)(a1 + 912);
  v562 = *(_OWORD *)(a1 + 936);
  *(_OWORD *)(a1 + 2208) = *(_OWORD *)(a1 + 920);
  *(_OWORD *)(a1 + 2224) = v562;
  v563 = *(_OWORD *)(a1 + 968);
  *(_OWORD *)(a1 + 2240) = *(_OWORD *)(a1 + 952);
  *(_OWORD *)(a1 + 2256) = v563;
  v564 = *(_OWORD *)(a1 + 1000);
  *(_OWORD *)(a1 + 2272) = *(_OWORD *)(a1 + 984);
  *(_OWORD *)(a1 + 2288) = v564;
  v565 = *(_OWORD *)(a1 + 1032);
  *(_OWORD *)(a1 + 2304) = *(_OWORD *)(a1 + 1016);
  *(_OWORD *)(a1 + 2320) = v565;
  v566 = *(_OWORD *)(a1 + 1064);
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a1 + 1048);
  *(_OWORD *)(a1 + 2352) = v566;
  v567 = *(_OWORD *)(a1 + 1096);
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a1 + 1080);
  *(_OWORD *)(a1 + 2384) = v567;
  v568 = *(_OWORD *)(a1 + 1128);
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(a1 + 1112);
  *(_OWORD *)(a1 + 2416) = v568;
  v569 = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a1 + 1144);
  *(_OWORD *)(a1 + 2448) = v569;
  v570 = *(_OWORD *)(a1 + 1192);
  *(_OWORD *)(a1 + 2464) = *(_OWORD *)(a1 + 1176);
  *(_OWORD *)(a1 + 2480) = v570;
  v571 = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)(a1 + 2496) = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)(a1 + 2512) = v571;
  v572 = *(_OWORD *)(a1 + 1256);
  *(_OWORD *)(a1 + 2528) = *(_OWORD *)(a1 + 1240);
  *(_OWORD *)(a1 + 2544) = v572;
  v573 = *(_OWORD *)(a1 + 1288);
  *(_OWORD *)(a1 + 2560) = *(_OWORD *)(a1 + 1272);
  *(_OWORD *)(a1 + 2576) = v573;
  v574 = *(_OWORD *)(a1 + 1320);
  *(_OWORD *)(a1 + 2592) = *(_OWORD *)(a1 + 1304);
  *(_OWORD *)(a1 + 2608) = v574;
  v575 = *(_OWORD *)(a1 + 1352);
  *(_OWORD *)(a1 + 2624) = *(_OWORD *)(a1 + 1336);
  *(_OWORD *)(a1 + 2640) = v575;
  v576 = *(_OWORD *)(a1 + 1384);
  *(_OWORD *)(a1 + 2656) = *(_OWORD *)(a1 + 1368);
  *(_OWORD *)(a1 + 2672) = v576;
  v577 = *(_OWORD *)(a1 + 1416);
  *(_OWORD *)(a1 + 2688) = *(_OWORD *)(a1 + 1400);
  *(_OWORD *)(a1 + 2704) = v577;
  v578 = *(_OWORD *)(a1 + 1448);
  *(_OWORD *)(a1 + 2720) = *(_OWORD *)(a1 + 1432);
  *(_OWORD *)(a1 + 2736) = v578;
  v579 = *(_OWORD *)(a1 + 1480);
  *(_OWORD *)(a1 + 2752) = *(_OWORD *)(a1 + 1464);
  *(_OWORD *)(a1 + 2768) = v579;
  *(_QWORD *)(a1 + 2784) = *(_QWORD *)(a1 + 1496);
  *(_OWORD *)(a1 + 2792) = *(_OWORD *)(a1 + 1504);
  *(_OWORD *)(a1 + 2808) = *(_OWORD *)(a1 + 1520);
  *(_OWORD *)(a1 + 2824) = *(_OWORD *)(a1 + 1536);
  *(_OWORD *)(a1 + 2840) = *(_OWORD *)(a1 + 1552);
  *(_OWORD *)(a1 + 2856) = *(_OWORD *)(a1 + 1568);
  v580 = *(_QWORD *)(a1 + 1592);
  v581 = *(char **)(a1 + 1600);
  *(_QWORD *)(a1 + 2872) = *(_QWORD *)(a1 + 1584);
  std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 2880, v580, v581, (uint64_t)&v581[-v580] >> 4);
  v582 = *(_OWORD *)(a1 + 1632);
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a1 + 1616);
  *(_OWORD *)(a1 + 2920) = v582;
  v583 = *(char **)(a1 + 1648);
  v584 = *(_BYTE **)(a1 + 1656);
  v585 = v584 - v583;
  v586 = (v584 - v583) >> 4;
  v587 = *(_QWORD *)(a1 + 2952);
  v588 = *(char **)(a1 + 2936);
  if (v586 > (v587 - (uint64_t)v588) >> 4)
  {
    if (v588)
    {
      *(_QWORD *)(a1 + 2944) = v588;
      operator delete(v588);
      v587 = 0;
      *(_QWORD *)(a1 + 2936) = 0;
      *(_QWORD *)(a1 + 2944) = 0;
      *(_QWORD *)(a1 + 2952) = 0;
    }
    if ((v585 & 0x8000000000000000) != 0)
      goto LABEL_1910;
    v589 = v587 >> 3;
    if (v587 >> 3 <= v586)
      v589 = (v584 - v583) >> 4;
    v590 = (unint64_t)v587 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v589;
    if (v590 >> 60)
LABEL_1910:
      abort();
    v591 = (char *)operator new(16 * v590);
    v588 = v591;
    *(_QWORD *)(a1 + 2936) = v591;
    *(_QWORD *)(a1 + 2944) = v591;
    *(_QWORD *)(a1 + 2952) = &v591[16 * v590];
    if (v584 != v583)
      memcpy(v591, v583, v584 - v583);
    goto LABEL_895;
  }
  v594 = *(_BYTE **)(a1 + 2944);
  v595 = (v594 - v588) >> 4;
  if (v595 >= v586)
  {
    if (v584 == v583)
      goto LABEL_895;
    v597 = *(void **)(a1 + 2936);
    v598 = *(char **)(a1 + 1648);
    goto LABEL_894;
  }
  v596 = &v583[16 * v595];
  if (v594 != v588)
  {
    memmove(*(void **)(a1 + 2936), *(const void **)(a1 + 1648), v594 - v588);
    v588 = *(char **)(a1 + 2944);
  }
  v585 = v584 - v596;
  if (v584 != v596)
  {
    v597 = v588;
    v598 = v596;
LABEL_894:
    memmove(v597, v598, v585);
  }
LABEL_895:
  v605 = &v588[v585];
  v606 = a1;
  *(_QWORD *)(a1 + 2944) = v605;
  v607 = *(_QWORD *)v404;
  *(_QWORD *)(a1 + 2960) = *(_QWORD *)v404;
  *(_DWORD *)(a1 + 2968) = *(_DWORD *)(a1 + 1680);
  *(_OWORD *)(a1 + 2976) = *(_OWORD *)(a1 + 1688);
  *(_QWORD *)(a1 + 2992) = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 3000) = *(_QWORD *)(a1 + 1712);
  *(_DWORD *)(a1 + 3008) = *(_DWORD *)(a1 + 1720);
  v608 = *(_QWORD *)(a1 + 3016);
  if (v607)
  {
    if (!v608)
    {
      v608 = operator new();
      *(_OWORD *)v608 = 0u;
      *(_OWORD *)(v608 + 16) = 0u;
      *(_DWORD *)(v608 + 32) = 1065353216;
      *(_OWORD *)(v608 + 40) = 0u;
      *(_OWORD *)(v608 + 56) = 0u;
      *(_DWORD *)(v608 + 72) = 1065353216;
      *(_OWORD *)(v608 + 80) = 0u;
      *(_OWORD *)(v608 + 96) = 0u;
      *(_DWORD *)(v608 + 112) = 1065353216;
      *(_QWORD *)(v608 + 128) = 0;
      *(_QWORD *)(v608 + 136) = 0;
      *(_QWORD *)(v608 + 120) = 0;
      *(_QWORD *)(v608 + 272) = 0;
      *(_QWORD *)(v608 + 280) = 0;
      *(_BYTE *)(v608 + 288) = 0;
      *(_DWORD *)(v608 + 292) = 1065353216;
      *(_BYTE *)(v608 + 296) = 0;
      *(_OWORD *)(v608 + 304) = 0u;
      *(_OWORD *)(v608 + 320) = 0u;
      *(_DWORD *)(v608 + 336) = 1065353216;
      *(_QWORD *)(v608 + 344) = 0;
      *(_BYTE *)(v608 + 352) = 0;
      v609 = *(md::VenueLogicContext **)(a1 + 3016);
      *(_QWORD *)(a1 + 3016) = v608;
      if (v609)
      {
        md::VenueLogicContext::~VenueLogicContext(v609);
        MEMORY[0x1A1AF4E00]();
        v608 = *(_QWORD *)(a1 + 3016);
      }
    }
    v606 = a1;
    md::VenueLogicContext::operator=(v608, *(_QWORD *)(a1 + 2960));
    *(_QWORD *)(a1 + 2960) = *(_QWORD *)(a1 + 3016);
  }
  else
  {
    *(_QWORD *)(a1 + 3016) = 0;
    if (v608)
    {
      md::VenueLogicContext::~VenueLogicContext((md::VenueLogicContext *)v608);
      MEMORY[0x1A1AF4E00]();
    }
  }
  *(_QWORD *)(v606 + 432) = v606 + 1728;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v606 + 216), 0xFFFFFFFFFFFFFFFFLL);
  v610 = *(_BYTE *)(v606 + 3305) + 1;
  *(_BYTE *)(v606 + 3305) = v610;
  v611 = *(_QWORD *)(*(_QWORD *)(v606 + 152) + 80);
  *(_QWORD *)__p = v548;
  *(_QWORD *)&__p[8] = v550;
  v612 = (unint64_t *)&v550->__shared_owners_;
  do
    v613 = __ldxr(v612);
  while (__stxr(v613 + 1, v612));
  *(_QWORD *)&__p[16] = v1398;
  *(_DWORD *)&__p[24] = (_DWORD)v1399;
  __p[28] = v610;
  *((_QWORD *)&v1387[1] + 1) = 0;
  v614 = operator new(0x28uLL);
  *v614 = &off_1E42CA010;
  v614[1] = v548;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  v615 = *(_QWORD *)&__p[16];
  v614[2] = v550;
  v614[3] = v615;
  *(_QWORD *)((char *)v614 + 29) = *(_QWORD *)&__p[21];
  *((_QWORD *)&v1387[1] + 1) = v614;
  geo::TaskQueue::async(&buf, v611, v1387);
  v401 = v1358;
  v616 = v1402;
  if (v1402)
  {
    v617 = (unint64_t *)&v1402->__shared_owners_;
    do
      v618 = __ldaxr(v617);
    while (__stlxr(v618 - 1, v617));
    if (!v618)
    {
      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
      std::__shared_weak_count::__release_weak(v616);
    }
  }
  v619 = (_QWORD *)*((_QWORD *)&v1387[1] + 1);
  if (*((_OWORD **)&v1387[1] + 1) == v1387)
  {
    v620 = 4;
    v619 = v1387;
LABEL_913:
    (*(void (**)(void))(*v619 + 8 * v620))();
  }
  else if (*((_QWORD *)&v1387[1] + 1))
  {
    v620 = 5;
    goto LABEL_913;
  }
  v621 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v622 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v623 = __ldaxr(v622);
    while (__stlxr(v623 - 1, v622));
    if (!v623)
    {
      ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
      std::__shared_weak_count::__release_weak(v621);
    }
  }
  v624 = (std::__shared_weak_count *)v1405[0];
  if (v1405[0])
  {
    v625 = (unint64_t *)(*(_QWORD *)v1405 + 8);
    do
      v626 = __ldaxr(v625);
    while (__stlxr(v626 - 1, v625));
    if (!v626)
    {
      ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
      std::__shared_weak_count::__release_weak(v624);
    }
  }
LABEL_924:
  v403 = a1;
LABEL_925:
  v627 = *(_QWORD *)(v403 + 304);
  v628 = *(_DWORD *)(v403 + 3272);
  *(_DWORD *)(v627 + 112) = v628;
  *(_DWORD *)(v627 + 116) = 0;
  atomic_store(v628, (unsigned int *)(*(_QWORD *)(v627 + 104) + 76));
  *(_DWORD *)(*(_QWORD *)(v627 + 128) + 160) = v628;
  *(_QWORD *)__p = &off_1E42C9BD8;
  *(_QWORD *)&__p[24] = __p;
  v1404 = (std::__shared_weak_count_vtbl *)&off_1E42C9C20;
  v1406 = &v1404;
  *((_QWORD *)&v1387[1] + 1) = v1387;
  *(_QWORD *)&v1387[0] = &off_1E42C9C20;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v629 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v629))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v629, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LayoutDisplayLabels", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  v630 = v1406;
  if (v1406 == &v1404)
  {
    v631 = 4;
    v630 = &v1404;
LABEL_933:
    (*((void (**)(void))&(*v630)->~__shared_weak_count + v631))();
  }
  else if (v1406)
  {
    v631 = 5;
    goto LABEL_933;
  }
  v632 = *(_QWORD **)&__p[24];
  if (*(_BYTE **)&__p[24] == __p)
  {
    v633 = 4;
    v632 = __p;
LABEL_938:
    (*(void (**)(void))(*v632 + 8 * v633))();
  }
  else if (*(_QWORD *)&__p[24])
  {
    v633 = 5;
    goto LABEL_938;
  }
  if (*(_QWORD *)v404)
    v634 = 1.0 - *(float *)(*(_QWORD *)v404 + 280);
  else
    v634 = 1.0;
  *(float *)(a1 + 3344) = v634;
  (*(void (**)(_QWORD, md::LayoutContext *))(**(_QWORD **)(a1 + 240) + 56))(*(_QWORD *)(a1 + 240), v401);
  if (!*((_QWORD *)&v1387[1] + 1))
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_1911;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v1387[1] + 1) + 48))(*((_QWORD *)&v1387[1] + 1));
  v635 = (_QWORD *)*((_QWORD *)&v1387[1] + 1);
  if (*((_OWORD **)&v1387[1] + 1) == v1387)
  {
    v636 = 4;
    v635 = v1387;
LABEL_947:
    (*(void (**)(void))(*v635 + 8 * v636))();
  }
  else if (*((_QWORD *)&v1387[1] + 1))
  {
    v636 = 5;
    goto LABEL_947;
  }
  v637 = *(_QWORD *)(a1 + 304);
  *(_BYTE *)(v637 + 120) = 0;
  v638 = *(_QWORD **)(v637 + 104);
  if (v638[4] == v638[5])
    goto LABEL_1026;
  v639 = (std::__shared_weak_count *)v638[2];
  buf = (std::__shared_weak_count_vtbl *)v638[1];
  v1402 = v639;
  if (v639)
  {
    v640 = (unint64_t *)&v639->__shared_owners_;
    do
      v641 = __ldxr(v640);
    while (__stxr(v641 + 1, v640));
  }
  {
    v1339 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1339, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v643 = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)__p = *((_OWORD *)v638 + 2);
  v638[4] = 0;
  v638[5] = 0;
  *(_QWORD *)&__p[16] = v638[6];
  *(_QWORD *)&__p[24] = v643;
  v638[6] = 0;
  v644 = v638[3];
  v645 = *(std::__shared_weak_count **)(v644 + 16);
  v1398 = *(uint64_t (***)())(v644 + 8);
  if (!v645 || (v1399 = std::__shared_weak_count::lock(v645)) == 0)
  {
LABEL_1898:
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_1911:
    __break(1u);
    return;
  }
  v646 = (unsigned int *)(v638 + 8);
  do
    v647 = __ldaxr(v646);
  while (__stlxr(v647 + 1, v646));
  v648 = *(_QWORD *)(*(_QWORD *)(v638[3] + 152) + 88);
  v1387[0] = (unint64_t)v638;
  v1387[1] = 0uLL;
  v649 = *(std::__shared_weak_count_vtbl **)&__p[24];
  *(_QWORD *)&v1388 = *(_QWORD *)&__p[24];
  v650 = *(void (__cdecl ***)(std::__shared_weak_count *__hidden))__p;
  v651 = *(void (__cdecl ***)(std::__shared_weak_count *__hidden))&__p[8];
  v652 = *(_QWORD *)&__p[8] - *(_QWORD *)__p;
  if (*(_QWORD *)&__p[8] == *(_QWORD *)__p)
  {
    v1363 = 0;
    v654 = 0;
    v653 = 0;
  }
  else
  {
    if (v652 < 0)
      abort();
    v653 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)&__p[24] + 16))(*(_QWORD *)&__p[24], *(_QWORD *)&__p[8] - *(_QWORD *)__p, 8);
    *((_QWORD *)&v1387[0] + 1) = v653;
    v1363 = v653 + 16 * (v652 >> 4);
    *((_QWORD *)&v1387[1] + 1) = v1363;
    v654 = (std::__shared_weak_count_vtbl *)v653;
    do
    {
      if (v654)
      {
        v654->~__shared_weak_count = *v650;
        v655 = v650[1];
        v654->~__shared_weak_count_0 = v655;
        if (v655)
        {
          v656 = (unint64_t *)((char *)v655 + 8);
          do
            v657 = __ldxr(v656);
          while (__stxr(v657 + 1, v656));
        }
      }
      v650 += 2;
      v654 = (std::__shared_weak_count_vtbl *)((char *)v654 + 16);
    }
    while (v650 != v651);
    *(_QWORD *)&v1387[1] = v654;
  }
  v1368 = v648;
  v658 = v1398;
  v659 = v1399;
  *((_QWORD *)&v1388 + 1) = v1398;
  *(_QWORD *)&v1389 = v1399;
  if (v1399)
  {
    v660 = (unint64_t *)&v1399->__shared_owners_;
    do
      v661 = __ldxr(v660);
    while (__stxr(v661 + 1, v660));
  }
  v663 = buf;
  v662 = v1402;
  *((_QWORD *)&v1389 + 1) = buf;
  *(_QWORD *)&v1390 = v1402;
  if (v1402)
  {
    v664 = (unint64_t *)&v1402->__shared_owners_;
    do
      v665 = __ldxr(v664);
    while (__stxr(v665 + 1, v664));
  }
  v1406 = 0;
  v666 = (std::__shared_weak_count_vtbl **)operator new(0x50uLL);
  *v666 = (std::__shared_weak_count_vtbl *)&off_1E42D0AF0;
  v666[1] = (std::__shared_weak_count_vtbl *)v638;
  v666[2] = (std::__shared_weak_count_vtbl *)v653;
  v666[3] = v654;
  v666[4] = (std::__shared_weak_count_vtbl *)v1363;
  v666[5] = v649;
  v1387[1] = 0uLL;
  *((_QWORD *)&v1387[0] + 1) = 0;
  v666[6] = (std::__shared_weak_count_vtbl *)v658;
  v666[7] = (std::__shared_weak_count_vtbl *)v659;
  *((_QWORD *)&v1388 + 1) = 0;
  *(_QWORD *)&v1389 = 0;
  v666[8] = v663;
  v666[9] = (std::__shared_weak_count_vtbl *)v662;
  *((_QWORD *)&v1389 + 1) = 0;
  *(_QWORD *)&v1390 = 0;
  v1406 = v666;
  geo::TaskQueue::async(&v1395, v1368, &v1404);
  v667 = v1396;
  if (v1396)
  {
    v668 = (unint64_t *)&v1396->__shared_owners_;
    do
      v669 = __ldaxr(v668);
    while (__stlxr(v669 - 1, v668));
    if (!v669)
    {
      ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
      std::__shared_weak_count::__release_weak(v667);
    }
  }
  v670 = v1406;
  if (v1406 == &v1404)
  {
    v671 = 4;
    v670 = &v1404;
LABEL_983:
    (*((void (**)(void))&(*v670)->~__shared_weak_count + v671))();
  }
  else if (v1406)
  {
    v671 = 5;
    goto LABEL_983;
  }
  v672 = (std::__shared_weak_count *)v1390;
  if ((_QWORD)v1390)
  {
    v673 = (unint64_t *)(v1390 + 8);
    do
      v674 = __ldaxr(v673);
    while (__stlxr(v674 - 1, v673));
    if (!v674)
    {
      ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
      std::__shared_weak_count::__release_weak(v672);
    }
  }
  v675 = (std::__shared_weak_count *)v1389;
  if ((_QWORD)v1389)
  {
    v676 = (unint64_t *)(v1389 + 8);
    do
      v677 = __ldaxr(v676);
    while (__stlxr(v677 - 1, v676));
    if (!v677)
    {
      ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
      std::__shared_weak_count::__release_weak(v675);
    }
  }
  v678 = *((_QWORD *)&v1387[0] + 1);
  if (*((_QWORD *)&v1387[0] + 1))
  {
    v679 = *(_QWORD *)&v1387[1];
    v680 = *((_QWORD *)&v1387[0] + 1);
    if (*(_QWORD *)&v1387[1] != *((_QWORD *)&v1387[0] + 1))
    {
      do
      {
        v681 = *(std::__shared_weak_count **)(v679 - 8);
        if (v681)
        {
          v682 = (unint64_t *)&v681->__shared_owners_;
          do
            v683 = __ldaxr(v682);
          while (__stlxr(v683 - 1, v682));
          if (!v683)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v681->__on_zero_shared)(v681, v680);
            std::__shared_weak_count::__release_weak(v681);
          }
        }
        v679 -= 16;
      }
      while (v679 != v678);
      v680 = *((_QWORD *)&v1387[0] + 1);
    }
    *(_QWORD *)&v1387[1] = v678;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1388 + 40))(v1388, v680, *((_QWORD *)&v1387[1] + 1) - v680);
  }
  v684 = v1399;
  if (v1399)
  {
    v685 = (unint64_t *)&v1399->__shared_owners_;
    do
      v686 = __ldaxr(v685);
    while (__stlxr(v686 - 1, v685));
    if (!v686)
    {
      ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
      std::__shared_weak_count::__release_weak(v684);
    }
  }
  v687 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v688 = *(_QWORD *)&__p[8];
    v689 = *(_QWORD *)__p;
    if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
    {
      do
      {
        v690 = *(std::__shared_weak_count **)(v688 - 8);
        if (v690)
        {
          v691 = (unint64_t *)&v690->__shared_owners_;
          do
            v692 = __ldaxr(v691);
          while (__stlxr(v692 - 1, v691));
          if (!v692)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v690->__on_zero_shared)(v690, v689);
            std::__shared_weak_count::__release_weak(v690);
          }
        }
        v688 -= 16;
      }
      while (v688 != v687);
      v689 = *(_QWORD *)__p;
    }
    *(_QWORD *)&__p[8] = v687;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&__p[24] + 40))(*(_QWORD *)&__p[24], v689, *(_QWORD *)&__p[16] - v689);
  }
  v693 = v1402;
  if (v1402)
  {
    v694 = (unint64_t *)&v1402->__shared_owners_;
    do
      v695 = __ldaxr(v694);
    while (__stlxr(v695 - 1, v694));
    if (!v695)
    {
      ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
      std::__shared_weak_count::__release_weak(v693);
    }
  }
LABEL_1026:
  md::FontGlyphCache::finishFrame(*(_QWORD *)(v637 + 128));
  v696 = *(_DWORD *)(v637 + 96);
  if (v696 >= 257)
  {
    v697 = *(_DWORD *)(v637 + 116);
    if (v696 > (v697 + 400))
    {
      v698 = v697 + 300;
      if (v696 > v697 + 300)
      {
        while (2)
        {
          v700 = *(_QWORD *)(v637 + 80);
          if (!v700 || (*(_DWORD *)(v637 + 112) - *(_DWORD *)v700) < 0x78)
            goto LABEL_1077;
          if (v696)
          {
            v701 = *(_QWORD *)(v700 + 24);
            *(_QWORD *)(v637 + 80) = v701;
            *(_QWORD *)(v700 + 24) = 0;
            if (v701)
              *(_QWORD *)(v701 + 16) = 0;
            if (v700 == *(_QWORD *)(v637 + 88))
              *(_QWORD *)(v637 + 88) = 0;
            *(_DWORD *)(v637 + 96) = v696 - 1;
          }
          v702 = *(_QWORD *)(v700 + 8);
          v703 = (unint64_t)(float)(*(float *)(v702 + 48) * 0.0625);
          v704 = *(_QWORD *)(v637 + 136);
          if (((*(_QWORD *)(v637 + 144) - v704) >> 2) - 1 < v703)
            v703 = ((*(_QWORD *)(v637 + 144) - v704) >> 2) - 1;
          --*(_DWORD *)(v704 + 4 * v703);
          v705 = *(_QWORD *)(v700 + 32);
          if (v705)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v705 + 16))(v705);
            v706 = *(std::__shared_weak_count **)(v700 + 40);
            *(_QWORD *)(v700 + 32) = 0;
            *(_QWORD *)(v700 + 40) = 0;
            if (v706)
            {
              v707 = (unint64_t *)&v706->__shared_owners_;
              do
                v708 = __ldaxr(v707);
              while (__stlxr(v708 - 1, v707));
              if (!v708)
              {
                ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
                std::__shared_weak_count::__release_weak(v706);
              }
            }
          }
          *(_QWORD *)(v700 + 8) = 0;
          *(_QWORD *)(v702 + 96) = 0;
          v709 = *(_QWORD *)(v637 + 128);
          if (v709)
          {
            v710 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(v709 + 88), v702);
            if (v710)
              md::FontGlyphCache::eraseGlyph(v709, (float *)v710[3]);
          }
          v711 = *(_QWORD **)(v637 + 56);
          v712 = *(_QWORD *)(v637 + 64);
          if ((unint64_t)v711 < v712)
          {
            if (v711)
              *v711 = v700;
            v699 = v711 + 1;
            goto LABEL_1031;
          }
          v713 = *(_QWORD *)(v637 + 48);
          v714 = ((uint64_t)v711 - v713) >> 3;
          v715 = v714 + 1;
          if ((unint64_t)(v714 + 1) >> 61)
LABEL_1902:
            abort();
          v716 = v712 - v713;
          if (v716 >> 2 > v715)
            v715 = v716 >> 2;
          if ((unint64_t)v716 >= 0x7FFFFFFFFFFFFFF8)
            v717 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v717 = v715;
          if (v717)
          {
            v718 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v637 + 72) + 16))(*(_QWORD *)(v637 + 72), 8 * v717, 8);
            v719 = (_QWORD *)(v718 + 8 * v714);
            v720 = v718 + 8 * v717;
            if (v718)
              *v719 = v700;
          }
          else
          {
            v720 = 0;
            v719 = (_QWORD *)(8 * v714);
          }
          v722 = *(_QWORD *)(v637 + 48);
          v721 = *(_QWORD *)(v637 + 56);
          v723 = v721 - v722;
          if (v721 != v722)
          {
            v724 = v723 - 8;
            if ((unint64_t)(v723 - 8) < 0x38)
            {
              v725 = v719;
            }
            else
            {
              v725 = v719;
              if ((unint64_t)(v721 - (_QWORD)v719) >= 0x20)
              {
                v726 = (v724 >> 3) + 1;
                v727 = v719 - 2;
                v728 = (__int128 *)(v721 - 16);
                v729 = v726 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v730 = *v728;
                  *(v727 - 1) = *(v728 - 1);
                  *v727 = v730;
                  v727 -= 2;
                  v728 -= 2;
                  v729 -= 4;
                }
                while (v729);
                v725 = &v719[-(v726 & 0x3FFFFFFFFFFFFFFCLL)];
                v721 -= 8 * (v726 & 0x3FFFFFFFFFFFFFFCLL);
                if (v726 == (v726 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1074:
                  v721 = *(_QWORD *)(v637 + 48);
LABEL_1075:
                  v699 = v719 + 1;
                  *(_QWORD *)(v637 + 48) = v725;
                  *(_QWORD *)(v637 + 56) = v719 + 1;
                  v732 = *(_QWORD *)(v637 + 64);
                  *(_QWORD *)(v637 + 64) = v720;
                  if (v721)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v637 + 72) + 40))(*(_QWORD *)(v637 + 72), v721, v732 - v721);
LABEL_1031:
                  *(_QWORD *)(v637 + 56) = v699;
                  v696 = *(_DWORD *)(v637 + 96);
                  if (v696 <= v698)
                    goto LABEL_1077;
                  continue;
                }
              }
            }
            do
            {
              v731 = *(_QWORD *)(v721 - 8);
              v721 -= 8;
              *--v725 = v731;
            }
            while (v721 != v722);
            goto LABEL_1074;
          }
          break;
        }
        v725 = v719;
        goto LABEL_1075;
      }
    }
  }
LABEL_1077:
  if (*(_QWORD *)(a1 + 184))
    goto LABEL_1444;
  v733 = *(_QWORD *)(a1 + 360);
  v734 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v733 + 8) + 112) + 8);
  v735 = **(uint64_t ***)(*(_QWORD *)(v733 + 8) + 112);
  v1353 = v733;
  if (!*(_BYTE *)(a1 + 3051))
  {
    if (v735 != v734 && *v735 != 0xD369A4D92C8FFE6CLL)
    {
      v756 = v735 + 5;
      do
      {
        v757 = *v756;
        v756 += 5;
      }
      while (v757 != 0xD369A4D92C8FFE6CLL);
      v735 = v756 - 5;
    }
    v758 = (uint64_t (***)(_QWORD))v735[3];
    v759 = (std::__shared_weak_count *)v735[4];
    if (v759)
    {
      v760 = (unint64_t *)&v759->__shared_owners_;
      do
        v761 = __ldxr(v760);
      while (__stxr(v761 + 1, v760));
      do
        v762 = __ldaxr(v760);
      while (__stlxr(v762 - 1, v760));
      if (!v762)
      {
        ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
        std::__shared_weak_count::__release_weak(v759);
      }
    }
    v1369 = (**v758)(v758);
    v763 = *(void ***)(v733 + 56);
    v764 = *(void ***)(v733 + 64);
    if (v764 == v763)
    {
      v769 = (_QWORD *)(v733 + 88);
      v764 = *(void ***)(v733 + 56);
      goto LABEL_1382;
    }
    v765 = *(_QWORD *)(v733 + 80);
    v766 = v733;
    v767 = &v763[v765 >> 8];
    v768 = (char *)*v767 + 16 * v765;
    v769 = (_QWORD *)(v766 + 88);
    v770 = *(uint64_t *)((char *)v763 + (((*(_QWORD *)(v766 + 88) + v765) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(_BYTE *)(v766 + 88) + v765);
    if (v768 == (char *)v770)
    {
      v733 = v766;
      if (v764 != v763)
      {
LABEL_1353:
        v1024 = *(_QWORD *)(v733 + 80);
        v1025 = *(_QWORD *)(v733 + 88);
        v1026 = &v763[v1024 >> 8];
        v1027 = (uint64_t)*v1026 + 16 * v1024;
        v1028 = *(uint64_t *)((char *)v763 + (((v1025 + v1024) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (v1025 + v1024);
        if (v1027 == v1028)
        {
          v733 = v1353;
        }
        else
        {
          do
          {
            v1029 = *(std::__shared_weak_count **)(v1027 + 8);
            if (v1029)
            {
              v1030 = (unint64_t *)&v1029->__shared_owners_;
              do
                v1031 = __ldaxr(v1030);
              while (__stlxr(v1031 - 1, v1030));
              if (!v1031)
              {
                ((void (*)(std::__shared_weak_count *))v1029->__on_zero_shared)(v1029);
                std::__shared_weak_count::__release_weak(v1029);
              }
            }
            v1027 += 16;
            if (v1027 - (_QWORD)*v1026 == 4096)
            {
              v1032 = (uint64_t)v1026[1];
              ++v1026;
              v1027 = v1032;
            }
          }
          while (v1027 != v1028);
          v733 = v1353;
          v763 = *(void ***)(v1353 + 56);
          v764 = *(void ***)(v1353 + 64);
        }
LABEL_1382:
        *v769 = 0;
        v1042 = (char *)v764 - (char *)v763;
        if (v1042 >= 0x11)
        {
          do
          {
            operator delete(*v763);
            v1043 = *(_QWORD *)(v733 + 64);
            v763 = (void **)(*(_QWORD *)(v733 + 56) + 8);
            *(_QWORD *)(v733 + 56) = v763;
            v1042 = v1043 - (_QWORD)v763;
          }
          while (v1042 > 0x10);
        }
        if (v1042 >> 3 == 1)
        {
          v1044 = 128;
        }
        else
        {
          if (v1042 >> 3 != 2)
          {
LABEL_1389:
            v1045 = v733;
            v1046 = *(uint64_t ***)(v733 + 96);
            v1047 = *(uint64_t ***)(v733 + 104);
            if (v1046 != v1047)
            {
              v1048 = v1045 + 128;
              do
              {
                v1049 = *v1046;
                v1050 = **v1046;
                v1051 = (*v1046)[1];
                if (v1050 != v1051)
                {
                  do
                  {
                    md::OcclusionTest::checkinResources(*(md::OcclusionTest **)(v1050 + 8), *(md::OcclusionContext **)(v1050 + 16), v1048);
                    v1050 += 248;
                  }
                  while (v1050 != v1051);
                  v1053 = *v1049;
                  v1052 = v1049[1];
                  if (*v1049 != v1052)
                  {
                    v1054 = v1052 - v1053 - 248;
                    v1055 = *v1049;
                    if (v1054 < 0xF8)
                      goto LABEL_1915;
                    v1056 = v1054 / 0xF8 + 1;
                    v1055 = v1053 + 248 * (v1056 & 0x3FFFFFFFFFFFFFELL);
                    v1057 = (_QWORD *)(v1053 + 264);
                    v1058 = v1056 & 0x3FFFFFFFFFFFFFELL;
                    do
                    {
                      v1059 = *(v1057 - 1);
                      *(v1057 - 31) = *(v1057 - 32);
                      *v1057 = v1059;
                      v1057 += 62;
                      v1058 -= 2;
                    }
                    while (v1058);
                    if (v1056 != (v1056 & 0x3FFFFFFFFFFFFFELL))
                    {
LABEL_1915:
                      do
                      {
                        *(_QWORD *)(v1055 + 16) = *(_QWORD *)(v1055 + 8);
                        v1055 += 248;
                      }
                      while (v1055 != v1052);
                    }
                  }
                }
                *((_BYTE *)v1049 + 281) = *((_BYTE *)v1049 + 280);
                *((_BYTE *)v1049 + 280) = 0;
                *((_BYTE *)v1049 + 282) = 0;
                atomic_store(1u, (unsigned __int8 *)v1049 + 286);
                v1046 += 2;
              }
              while (v1046 != v1047);
              v1060 = *(uint64_t ***)(v1353 + 96);
              v1046 = *(uint64_t ***)(v1353 + 104);
              if (v1046 != v1060)
              {
                do
                {
                  v1061 = (std::__shared_weak_count *)*(v1046 - 1);
                  if (v1061)
                  {
                    v1062 = (unint64_t *)&v1061->__shared_owners_;
                    do
                      v1063 = __ldaxr(v1062);
                    while (__stlxr(v1063 - 1, v1062));
                    if (!v1063)
                    {
                      ((void (*)(std::__shared_weak_count *))v1061->__on_zero_shared)(v1061);
                      std::__shared_weak_count::__release_weak(v1061);
                    }
                  }
                  v1046 -= 2;
                }
                while (v1046 != v1060);
                v1046 = v1060;
              }
            }
            *(_QWORD *)(v1353 + 104) = v1046;
            v1064 = *(_QWORD **)(v1369 + 8);
            v1065 = v1064[3];
            v1066 = v1064[4];
            v1067 = v1066 - v1065;
            if (v1066 == v1065)
              goto LABEL_1417;
            v1068 = 0;
            v1069 = v1067 >> 3;
            while (1)
            {
              v1070 = *(unsigned __int8 **)(v1065 + 8 * v1068);
              if (*v1070 == *(unsigned __int8 *)(v1353 + 288))
              {
                v1071 = *((_QWORD *)v1070 + 1);
                v1072 = v1064[15];
                if (v1071 < (v1064[16] - v1072) >> 3)
                  break;
              }
              if (++v1068 >= v1069)
                goto LABEL_1417;
            }
            v1073 = *(_QWORD *)(v1072 + 8 * v1071);
            if (!v1073)
LABEL_1417:
              v1074 = 0;
            else
              v1074 = *(_QWORD **)(*(_QWORD *)(v1073 + 24) + 8 * *(unsigned __int8 *)(v1353 + 289));
            v1075 = (void **)v1074[34];
            v1076 = (void **)v1074[35];
            if (v1076 == v1075)
            {
              v1081 = v1074 + 38;
              v1076 = (void **)v1074[34];
            }
            else
            {
              v1077 = v1074[37];
              v1078 = &v1075[v1077 >> 8];
              v1079 = (char *)*v1078;
              v1080 = (uint64_t)*v1078 + 16 * v1077;
              v1081 = v1074 + 38;
              v1082 = *(uint64_t *)((char *)v1075 + (((v1074[38] + v1077) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (*((_BYTE *)v1074 + 304) + v1077);
              if (v1080 != v1082)
              {
                v1083 = (char *)*v1078 + 16 * v1077;
                v1084 = &v1075[v1077 >> 8];
                do
                {
                  v1085 = *(_QWORD *)v1083;
                  v1083 += 16;
                  --*(_BYTE *)(v1085 + 128);
                  if (v1083 - v1079 == 4096)
                  {
                    v1086 = (char *)v1084[1];
                    ++v1084;
                    v1079 = v1086;
                    v1083 = v1086;
                  }
                }
                while (v1083 != (char *)v1082);
                if (v1080 != v1082)
                {
                  do
                  {
                    v1087 = *(std::__shared_weak_count **)(v1080 + 8);
                    if (v1087)
                    {
                      v1088 = (unint64_t *)&v1087->__shared_owners_;
                      do
                        v1089 = __ldaxr(v1088);
                      while (__stlxr(v1089 - 1, v1088));
                      if (!v1089)
                      {
                        ((void (*)(std::__shared_weak_count *))v1087->__on_zero_shared)(v1087);
                        std::__shared_weak_count::__release_weak(v1087);
                      }
                    }
                    v1080 += 16;
                    if (v1080 - (_QWORD)*v1078 == 4096)
                    {
                      v1090 = (uint64_t)v1078[1];
                      ++v1078;
                      v1080 = v1090;
                    }
                  }
                  while (v1080 != v1082);
                  v1075 = (void **)v1074[34];
                  v1076 = (void **)v1074[35];
                }
              }
            }
            *v1081 = 0;
            v1091 = (char *)v1076 - (char *)v1075;
            if (v1091 >= 0x11)
            {
              do
              {
                operator delete(*v1075);
                v1092 = v1074[35];
                v1075 = (void **)(v1074[34] + 8);
                v1074[34] = v1075;
                v1091 = v1092 - (_QWORD)v1075;
              }
              while (v1091 > 0x10);
            }
            if (v1091 >> 3 == 1)
            {
              v1093 = 128;
            }
            else
            {
              if (v1091 >> 3 != 2)
              {
LABEL_1443:
                *(_QWORD *)(v1353 + 296) = 0;
                *(_QWORD *)(v1353 + 304) = 0;
                goto LABEL_1444;
              }
              v1093 = 256;
            }
            v1074[37] = v1093;
            goto LABEL_1443;
          }
          v1044 = 256;
        }
        *(_QWORD *)(v733 + 80) = v1044;
        goto LABEL_1389;
      }
    }
    else
    {
      v771 = v766 + 128;
      do
      {
        v772 = *(uint64_t **)v768;
        v773 = **(_QWORD **)v768;
        v774 = *(_QWORD *)(*(_QWORD *)v768 + 8);
        if (v773 != v774)
        {
          do
          {
            md::OcclusionTest::checkinResources(*(md::OcclusionTest **)(v773 + 8), *(md::OcclusionContext **)(v773 + 16), v771);
            v773 += 248;
          }
          while (v773 != v774);
          v776 = *v772;
          v775 = v772[1];
          if (*v772 != v775)
          {
            v777 = v775 - v776 - 248;
            v778 = *v772;
            if (v777 < 0xF8)
              goto LABEL_1916;
            v779 = v777 / 0xF8 + 1;
            v778 = v776 + 248 * (v779 & 0x3FFFFFFFFFFFFFELL);
            v780 = (_QWORD *)(v776 + 264);
            v781 = v779 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              v782 = *(v780 - 1);
              *(v780 - 31) = *(v780 - 32);
              *v780 = v782;
              v780 += 62;
              v781 -= 2;
            }
            while (v781);
            if (v779 != (v779 & 0x3FFFFFFFFFFFFFELL))
            {
LABEL_1916:
              do
              {
                *(_QWORD *)(v778 + 16) = *(_QWORD *)(v778 + 8);
                v778 += 248;
              }
              while (v778 != v775);
            }
          }
        }
        *((_BYTE *)v772 + 281) = *((_BYTE *)v772 + 280);
        *((_BYTE *)v772 + 280) = 0;
        *((_BYTE *)v772 + 282) = 0;
        atomic_store(1u, (unsigned __int8 *)v772 + 286);
        v768 += 16;
        if (v768 - (_BYTE *)*v767 == 4096)
        {
          v783 = (char *)v767[1];
          ++v767;
          v768 = v783;
        }
      }
      while (v768 != (char *)v770);
      v733 = v1353;
      v763 = *(void ***)(v1353 + 56);
      v764 = *(void ***)(v1353 + 64);
      if (v764 != v763)
        goto LABEL_1353;
    }
    v763 = v764;
    goto LABEL_1382;
  }
  if (v735 != v734 && *v735 != 0xD369A4D92C8FFE6CLL)
  {
    v736 = v735 + 5;
    do
    {
      v737 = *v736;
      v736 += 5;
    }
    while (v737 != 0xD369A4D92C8FFE6CLL);
    v735 = v736 - 5;
  }
  v738 = (uint64_t (***)(_QWORD))v735[3];
  v739 = (std::__shared_weak_count *)v735[4];
  if (v739)
  {
    v740 = (unint64_t *)&v739->__shared_owners_;
    do
      v741 = __ldxr(v740);
    while (__stxr(v741 + 1, v740));
    do
      v742 = __ldaxr(v740);
    while (__stlxr(v742 - 1, v740));
    if (!v742)
    {
      ((void (*)(std::__shared_weak_count *))v739->__on_zero_shared)(v739);
      std::__shared_weak_count::__release_weak(v739);
    }
  }
  v743 = *(_QWORD **)((**v738)(v738) + 8);
  v744 = v743[3];
  v745 = v743[4];
  v746 = v745 - v744;
  if (v745 == v744)
    goto LABEL_1097;
  v747 = 0;
  v748 = v746 >> 3;
  while (1)
  {
    v749 = *(unsigned __int8 **)(v744 + 8 * v747);
    if (*v749 == *(unsigned __int8 *)(v733 + 288))
    {
      v750 = *((_QWORD *)v749 + 1);
      v751 = v743[15];
      if (v750 < (v743[16] - v751) >> 3)
        break;
    }
    if (++v747 >= v748)
      goto LABEL_1097;
  }
  v752 = *(_QWORD *)(v751 + 8 * v750);
  if (!v752)
LABEL_1097:
    v753 = 0;
  else
    v753 = *(_QWORD *)(*(_QWORD *)(v752 + 24) + 8 * *(unsigned __int8 *)(v733 + 289));
  v754 = *(_QWORD *)(v753 + 304);
  *(_QWORD *)(v733 + 296) = v754;
  *(_QWORD *)(v733 + 304) = *(_QWORD *)(v753 + 352);
  if (!v754 && *(_QWORD *)(v733 + 88))
  {
    v1394 = *(_OWORD *)(a1 + 1032);
    v784 = *(_OWORD *)(a1 + 1000);
    v1390 = *(_OWORD *)(a1 + 984);
    v1391 = v784;
    v785 = *(_OWORD *)(a1 + 936);
    v1387[0] = *(_OWORD *)(a1 + 920);
    v1387[1] = v785;
    v786 = *(_OWORD *)(a1 + 968);
    v1388 = *(_OWORD *)(a1 + 952);
    v1389 = v786;
    v1392 = 0;
    v1393 = 0;
    *(_QWORD *)&v1394 = 0;
    gm::operator*<double,4,4,4>((double *)__p, (double *)(a1 + 1048), (double *)v1387);
    v787 = *(double *)__p;
    v788 = *(double *)&__p[8];
    v789 = *(double *)&__p[16];
    v790 = *(double *)&__p[24];
    v791 = v1375;
    v792 = v1376;
    v793 = v1377;
    v794 = *(double *)&v1378;
    v795 = v1379;
    v796 = v1380;
    v797 = v1381;
    v798 = v1382;
    v799 = v1383;
    v800 = v1384;
    v801 = v1385;
    v802 = v1386;
    v803 = *(_QWORD **)(v733 + 160);
    v804 = v803[1];
    v805 = (float *)v803[9];
    *v805 = v787;
    v805[1] = v788;
    v805[2] = v789;
    v805[3] = v790;
    v805[4] = v791;
    v805[5] = v792;
    v805[6] = v793;
    v805[7] = v794;
    v805[8] = v795;
    v805[9] = v796;
    v805[10] = v797;
    v805[11] = v798;
    v805[12] = v799;
    v805[13] = v800;
    v805[14] = v801;
    v805[15] = v802;
    if (v803[8] > v804)
      v804 = v803[8];
    v803[7] = 0;
    v803[8] = v804;
    v806 = *(_QWORD **)(v733 + 192);
    v807 = v806[1];
    v808 = (float *)v806[9];
    *v808 = v787;
    v808[1] = v788;
    v808[2] = v789;
    v808[3] = v790;
    v808[4] = v791;
    v808[5] = v792;
    v808[6] = v793;
    v808[7] = v794;
    v808[8] = v795;
    v808[9] = v796;
    v808[10] = v797;
    v808[11] = v798;
    v808[12] = v799;
    v808[13] = v800;
    v808[14] = v801;
    v808[15] = v802;
    if (v806[8] > v807)
      v807 = v806[8];
    v806[7] = 0;
    v806[8] = v807;
    if (!*(_BYTE *)(v733 + 156))
    {
      v809 = exp(*(double *)v1349 * 6.28318531 + -3.14159265);
      v810 = atan(v809) * 114.591559 + -90.0;
      v811 = cos(v810 * 0.034906585) * -559.82 + 111132.92;
      v812 = v811 + cos(v810 * 0.0698131701) * 1.175;
      v813 = v812 + cos(v810 * 0.104719755) * -0.0023;
      v814 = v810 * 0.00872664626;
      v815 = tan(v810 * 0.00872664626 + 0.78103484);
      v816 = log(v815);
      v817 = tan(v814 + 0.789761487);
      *(long double *)(v733 + 136) = fabs((log(v817) - v816) * 0.159154943) / v813;
    }
    if (*(_QWORD *)(v733 + 88))
    {
      v1348 = v733 + 128;
      v818 = *(_QWORD *)(v733 + 80);
      do
      {
        v819 = *(_QWORD *)(*(_QWORD *)(v733 + 56) + ((v818 >> 5) & 0x7FFFFFFFFFFFFF8));
        v820 = (unsigned __int8 ***)(v819 + 16 * v818);
        v821 = *v820;
        v823 = **v820;
        v822 = (*v820)[1];
        if (v823 == v822)
          goto LABEL_1312;
        v824 = v822 - v823 - 248;
        if (v824 >= 0xF8)
        {
          v827 = 0;
          v828 = 0;
          v829 = v824 / 0xF8 + 1;
          v830 = v823 + 264;
          v831 = v829 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            v827 += (uint64_t)(*(v830 - 31) - *(v830 - 32)) >> 3;
            v828 += (uint64_t)(*v830 - *(v830 - 1)) >> 3;
            v830 += 62;
            v831 -= 2;
          }
          while (v831);
          v825 = v828 + v827;
          if (v829 == (v829 & 0x3FFFFFFFFFFFFFELL))
            goto LABEL_1145;
          v826 = &v823[248 * (v829 & 0x3FFFFFFFFFFFFFELL)];
        }
        else
        {
          v825 = 0;
          v826 = **v820;
        }
        do
        {
          v825 += (uint64_t)(*((_QWORD *)v826 + 2) - *((_QWORD *)v826 + 1)) >> 3;
          v826 += 248;
        }
        while (v826 != v822);
LABEL_1145:
        v832 = *(_QWORD *)(v733 + 264);
        if (v825 > (v832 - *(_QWORD *)(v733 + 256)) >> 2)
          break;
        v1350 = *v820;
        v833 = **v820;
        do
        {
          v834 = *((_QWORD *)v833 + 1);
          v835 = *((_QWORD *)v833 + 2);
          if (v834 != v835)
          {
            do
            {
              *(_BYTE *)(v834 + 4) = 0;
              v836 = *(_DWORD *)(v832 - 4);
              v832 -= 4;
              *(_DWORD *)v834 = v836;
              v834 += 8;
            }
            while (v834 != v835);
            *(_QWORD *)(v733 + 264) = v832;
          }
          v833 += 248;
        }
        while (v833 != v822);
        v1341 = v819;
        v1342 = (unsigned __int8 ***)(v819 + 16 * v818);
        v1344 = v818;
        v1357 = v822;
        do
        {
          v823[238] = 0;
          v837 = *v823;
          if ((v837 - 1) <= 4)
          {
            md::OcclusionTest::_generateTestMethods[2 * v837](v823, v1350, v1348, v1354);
            if (!v823[238])
            {
              v839 = (unsigned int *)*((_QWORD *)v823 + 1);
              v838 = (unsigned int *)*((_QWORD *)v823 + 2);
              if (v839 != v838)
              {
                v1361 = (unsigned int *)*((_QWORD *)v823 + 2);
                v1364 = v823;
                while (*((_BYTE *)v839 + 4))
                {
LABEL_1158:
                  v839 += 2;
                  if (v839 == v838)
                    goto LABEL_1152;
                }
                v840 = *v839;
                md::OcclusionQueryResource::initialize((md::OcclusionQueryResource *)(*(_QWORD *)(v733 + 224)
                                                                                    + 24 * *v839));
                v1370 = (_QWORD *)(*(_QWORD *)(v733 + 224) + 24 * v840);
                v841 = *v1370;
                *(_BYTE *)(v841 + 129) = 0;
                *(_DWORD *)(v841 + 132) = 0;
                *(_BYTE *)(v841 + 136) = 0;
                ++*(_BYTE *)(v841 + 128);
                v842 = *(char **)(v753 + 280);
                v843 = *(char **)(v753 + 272);
                v844 = v842 - v843;
                if (v842 == v843)
                  v845 = 0;
                else
                  v845 = 32 * (v842 - v843) - 1;
                v847 = *(_QWORD *)(v753 + 296);
                v846 = *(_QWORD *)(v753 + 304);
                v848 = v846 + v847;
                if (v845 != v846 + v847)
                {
                  v823 = v1364;
                  v858 = v1370;
                  goto LABEL_1279;
                }
                if (v847 >= 0x100)
                {
                  *(_QWORD *)(v753 + 296) = v847 - 256;
                  v849 = v843 + 8;
                  v850 = *(_QWORD *)v843;
                  *(_QWORD *)(v753 + 272) = v843 + 8;
                  if (*(char **)(v753 + 288) != v842)
                    goto LABEL_1256;
                  v851 = *(char **)(v753 + 264);
                  if (v849 > v851)
                  {
                    v852 = (v849 - v851) >> 3;
                    if (v852 >= -1)
                      v853 = v852 + 1;
                    else
                      v853 = v852 + 2;
                    v854 = v853 >> 1;
                    v855 = &v849[-8 * (v853 >> 1)];
                    v856 = v842 - v849;
                    if (v842 == v849)
                    {
                      v857 = v842;
                    }
                    else
                    {
                      memmove(&v849[-8 * (v853 >> 1)], v843 + 8, v842 - v849);
                      v857 = *(char **)(v753 + 272);
                    }
                    v842 = &v855[v856];
                    *(_QWORD *)(v753 + 272) = &v857[-8 * v854];
                    *(_QWORD *)(v753 + 280) = &v855[v856];
                    v733 = v1353;
                    goto LABEL_1256;
                  }
                  if (v842 == v851)
                    v878 = 1;
                  else
                    v878 = (v842 - v851) >> 2;
                  if (!(v878 >> 61))
                  {
                    v879 = operator new(8 * v878);
                    v880 = v878 >> 2;
                    v881 = &v879[8 * (v878 >> 2)];
                    v882 = v842 - v849;
                    _ZF = v842 == v849;
                    v842 = v881;
                    if (!_ZF)
                    {
                      v842 = &v881[v882 & 0xFFFFFFFFFFFFFFF8];
                      v883 = v882 - 8;
                      if (v883 >= 0x38)
                      {
                        v925 = 8 * v880;
                        v926 = &v879[8 * v880] - v849;
                        v884 = &v879[8 * (v878 >> 2)];
                        if (v926 < 0x20)
                          goto LABEL_1253;
                        v927 = (v883 >> 3) + 1;
                        v928 = 8 * (v927 & 0x3FFFFFFFFFFFFFFCLL);
                        v884 = &v881[v928];
                        v929 = (__int128 *)(v843 + 24);
                        v930 = &v879[v925 + 16];
                        v931 = v927 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v932 = *v929;
                          *(v930 - 1) = *(v929 - 1);
                          *v930 = v932;
                          v929 += 2;
                          v930 += 2;
                          v931 -= 4;
                        }
                        while (v931);
                        if (v927 != (v927 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          v849 += v928;
                          goto LABEL_1253;
                        }
                      }
                      else
                      {
                        v884 = &v879[8 * (v878 >> 2)];
                        do
                        {
LABEL_1253:
                          v933 = *(_QWORD *)v849;
                          v849 += 8;
                          *(_QWORD *)v884 = v933;
                          v884 += 8;
                        }
                        while (v884 != v842);
                      }
                    }
                    *(_QWORD *)(v753 + 264) = v879;
                    *(_QWORD *)(v753 + 272) = v881;
                    *(_QWORD *)(v753 + 280) = v842;
                    *(_QWORD *)(v753 + 288) = &v879[8 * v878];
                    v733 = v1353;
                    if (v851)
                    {
                      operator delete(v851);
                      v842 = *(char **)(v753 + 280);
                    }
LABEL_1256:
                    *(_QWORD *)v842 = v850;
LABEL_1257:
                    *(_QWORD *)(v753 + 280) += 8;
LABEL_1278:
                    v843 = *(char **)(v753 + 272);
                    v846 = *(_QWORD *)(v753 + 304);
                    v848 = v846 + *(_QWORD *)(v753 + 296);
                    v858 = v1370;
                    v841 = *v1370;
                    v823 = v1364;
LABEL_1279:
                    v961 = (_QWORD *)(*(_QWORD *)&v843[(v848 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v848);
                    *v961 = v841;
                    v962 = v858[1];
                    v961[1] = v962;
                    if (v962)
                    {
                      v963 = (unint64_t *)(v962 + 8);
                      do
                        v964 = __ldxr(v963);
                      while (__stxr(v964 + 1, v963));
                      v846 = *(_QWORD *)(v753 + 304);
                    }
                    *(_QWORD *)(v753 + 304) = v846 + 1;
                    v838 = v1361;
                    goto LABEL_1158;
                  }
LABEL_1897:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v859 = v844 >> 3;
                v860 = *(char **)(v753 + 288);
                v861 = *(char **)(v753 + 264);
                if (v844 >> 3 < (unint64_t)((v860 - v861) >> 3))
                {
                  if (v860 != v842)
                  {
                    v862 = operator new(0x1000uLL);
                    v863 = *(char **)(v753 + 280);
                    if (v863 != *(char **)(v753 + 288))
                    {
LABEL_1277:
                      *(_QWORD *)v863 = v862;
                      *(_QWORD *)(v753 + 280) += 8;
                      v733 = v1353;
                      goto LABEL_1278;
                    }
                    v864 = *(char **)(v753 + 264);
                    v865 = *(char **)(v753 + 272);
                    if (v865 > v864)
                    {
                      v866 = (v865 - v864) >> 3;
                      if (v866 >= -1)
                        v867 = v866 + 1;
                      else
                        v867 = v866 + 2;
                      v868 = v867 >> 1;
                      v869 = &v865[-8 * (v867 >> 1)];
                      v870 = v863 - v865;
                      if (v863 != v865)
                      {
                        memmove(&v865[-8 * (v867 >> 1)], *(const void **)(v753 + 272), v863 - v865);
                        v863 = *(char **)(v753 + 272);
                      }
                      v871 = &v863[-8 * v868];
                      v863 = &v869[v870];
                      *(_QWORD *)(v753 + 272) = v871;
                      *(_QWORD *)(v753 + 280) = &v869[v870];
                      goto LABEL_1277;
                    }
                    if (v863 == v864)
                      v918 = 1;
                    else
                      v918 = (v863 - v864) >> 2;
                    if (v918 >> 61)
                      goto LABEL_1897;
                    v919 = operator new(8 * v918);
                    v920 = v918 >> 2;
                    v921 = &v919[8 * (v918 >> 2)];
                    v922 = v863 - v865;
                    _ZF = v863 == v865;
                    v863 = v921;
                    if (!_ZF)
                    {
                      v863 = &v921[v922 & 0xFFFFFFFFFFFFFFF8];
                      v923 = v922 - 8;
                      if (v923 >= 0x38)
                      {
                        v952 = 8 * v920;
                        v953 = &v919[8 * v920] - v865;
                        v924 = &v919[8 * (v918 >> 2)];
                        if (v953 < 0x20)
                          goto LABEL_1274;
                        v954 = (v923 >> 3) + 1;
                        v955 = 8 * (v954 & 0x3FFFFFFFFFFFFFFCLL);
                        v924 = &v921[v955];
                        v956 = (__int128 *)(v865 + 16);
                        v957 = &v919[v952 + 16];
                        v958 = v954 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v959 = *v956;
                          *(v957 - 1) = *(v956 - 1);
                          *v957 = v959;
                          v956 += 2;
                          v957 += 2;
                          v958 -= 4;
                        }
                        while (v958);
                        if (v954 != (v954 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          v865 += v955;
                          goto LABEL_1274;
                        }
                      }
                      else
                      {
                        v924 = &v919[8 * (v918 >> 2)];
                        do
                        {
LABEL_1274:
                          v960 = *(_QWORD *)v865;
                          v865 += 8;
                          *(_QWORD *)v924 = v960;
                          v924 += 8;
                        }
                        while (v924 != v863);
                      }
                    }
                    *(_QWORD *)(v753 + 264) = v919;
                    *(_QWORD *)(v753 + 272) = v921;
                    *(_QWORD *)(v753 + 280) = v863;
                    *(_QWORD *)(v753 + 288) = &v919[8 * v918];
                    if (v864)
                    {
                      operator delete(v864);
                      v863 = *(char **)(v753 + 280);
                    }
                    goto LABEL_1277;
                  }
                  v885 = operator new(0x1000uLL);
                  v886 = *(char **)(v753 + 272);
                  if (v886 != *(char **)(v753 + 264))
                  {
                    v887 = *(char **)(v753 + 272);
                    v733 = v1353;
                    goto LABEL_1287;
                  }
                  v913 = *(_BYTE **)(v753 + 280);
                  v912 = *(_QWORD *)(v753 + 288);
                  if ((unint64_t)v913 < v912)
                  {
                    v914 = (uint64_t)(v912 - (_QWORD)v913) >> 3;
                    if (v914 >= -1)
                      v915 = v914 + 1;
                    else
                      v915 = v914 + 2;
                    v916 = v915 >> 1;
                    v917 = &v913[8 * (v915 >> 1)];
                    v887 = &v917[-(v913 - v886)];
                    if (v913 != v886)
                    {
                      memmove(&v917[-(v913 - v886)], *(const void **)(v753 + 272), v913 - v886);
                      v886 = *(char **)(v753 + 280);
                    }
                    *(_QWORD *)(v753 + 272) = v887;
                    *(_QWORD *)(v753 + 280) = &v886[8 * v916];
                    v733 = v1353;
LABEL_1287:
                    *((_QWORD *)v887 - 1) = v885;
                    v967 = *(char **)(v753 + 272);
                    v966 = *(char **)(v753 + 280);
                    *(_QWORD *)(v753 + 272) = v967 - 8;
                    v968 = *((_QWORD *)v967 - 1);
                    *(_QWORD *)(v753 + 272) = v967;
                    if (v966 != *(char **)(v753 + 288))
                    {
LABEL_1288:
                      *(_QWORD *)v966 = v968;
                      goto LABEL_1257;
                    }
                    v969 = *(char **)(v753 + 264);
                    if (v967 > v969)
                    {
                      v970 = (v967 - v969) >> 3;
                      if (v970 >= -1)
                        v971 = v970 + 1;
                      else
                        v971 = v970 + 2;
                      v972 = v971 >> 1;
                      v973 = &v967[-8 * (v971 >> 1)];
                      v974 = v966 - v967;
                      if (v974)
                      {
                        memmove(&v967[-8 * (v971 >> 1)], v967, v974);
                        v967 = *(char **)(v753 + 272);
                      }
                      v975 = &v973[v974];
                      *(_QWORD *)(v753 + 272) = &v967[-8 * v972];
                      *(_QWORD *)(v753 + 280) = v975;
                      v733 = v1353;
                      *(_QWORD *)v975 = v968;
                      goto LABEL_1257;
                    }
                    if (v966 == v969)
                      v976 = 1;
                    else
                      v976 = (v966 - v969) >> 2;
                    if (v976 >> 61)
                      goto LABEL_1897;
                    v977 = operator new(8 * v976);
                    v978 = v976 >> 2;
                    v979 = &v977[8 * (v976 >> 2)];
                    v980 = v966 - v967;
                    _ZF = v966 == v967;
                    v966 = v979;
                    if (!_ZF)
                    {
                      v966 = &v979[v980 & 0xFFFFFFFFFFFFFFF8];
                      v981 = v980 - 8;
                      if (v981 >= 0x38)
                      {
                        v983 = 8 * v978;
                        v984 = &v977[8 * v978] - v967;
                        v982 = &v977[8 * (v976 >> 2)];
                        if (v984 < 0x20)
                          goto LABEL_1308;
                        v985 = (v981 >> 3) + 1;
                        v986 = 8 * (v985 & 0x3FFFFFFFFFFFFFFCLL);
                        v982 = &v979[v986];
                        v987 = (__int128 *)(v967 + 16);
                        v988 = &v977[v983 + 16];
                        v989 = v985 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v990 = *v987;
                          *(v988 - 1) = *(v987 - 1);
                          *v988 = v990;
                          v987 += 2;
                          v988 += 2;
                          v989 -= 4;
                        }
                        while (v989);
                        if (v985 != (v985 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          v967 += v986;
                          goto LABEL_1308;
                        }
                      }
                      else
                      {
                        v982 = &v977[8 * (v976 >> 2)];
                        do
                        {
LABEL_1308:
                          v991 = *(_QWORD *)v967;
                          v967 += 8;
                          *(_QWORD *)v982 = v991;
                          v982 += 8;
                        }
                        while (v982 != v966);
                      }
                    }
                    *(_QWORD *)(v753 + 264) = v977;
                    *(_QWORD *)(v753 + 272) = v979;
                    *(_QWORD *)(v753 + 280) = v966;
                    *(_QWORD *)(v753 + 288) = &v977[8 * v976];
                    v733 = v1353;
                    if (v969)
                    {
                      operator delete(v969);
                      v966 = *(char **)(v753 + 280);
                    }
                    goto LABEL_1288;
                  }
                  v934 = v912 - (_QWORD)v886;
                  _ZF = v934 == 0;
                  v935 = v934 >> 2;
                  if (_ZF)
                    v936 = 1;
                  else
                    v936 = v935;
                  if (v936 >> 61)
                    goto LABEL_1897;
                  v937 = (char *)operator new(8 * v936);
                  v938 = (v936 + 3) >> 2;
                  v887 = &v937[8 * v938];
                  v939 = &v937[8 * v936];
                  v940 = v887;
                  v941 = v913 - v886;
                  v733 = v1353;
                  if (v913 != v886)
                  {
                    v940 = &v887[v941 & 0xFFFFFFFFFFFFFFF8];
                    v942 = v941 - 8;
                    v943 = &v937[8 * v938];
                    v944 = v886;
                    if (v942 > 0x37)
                    {
                      v945 = 8 * v938;
                      v943 = &v937[8 * v938];
                      v944 = v886;
                      if ((unint64_t)(v943 - v886) >= 0x20)
                      {
                        v946 = (v942 >> 3) + 1;
                        v947 = 8 * (v946 & 0x3FFFFFFFFFFFFFFCLL);
                        v943 = &v887[v947];
                        v948 = (__int128 *)(v886 + 16);
                        v949 = &v937[v945 + 16];
                        v950 = v946 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v951 = *v948;
                          *((_OWORD *)v949 - 1) = *(v948 - 1);
                          *(_OWORD *)v949 = v951;
                          v948 += 2;
                          v949 += 32;
                          v950 -= 4;
                        }
                        while (v950);
                        if (v946 == (v946 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          *(_QWORD *)(v753 + 264) = v937;
                          *(_QWORD *)(v753 + 272) = v887;
                          *(_QWORD *)(v753 + 280) = v940;
                          *(_QWORD *)(v753 + 288) = v939;
LABEL_1286:
                          operator delete(v886);
                          v887 = *(char **)(v753 + 272);
                          goto LABEL_1287;
                        }
                        v944 = &v886[v947];
                      }
                    }
                    do
                    {
                      v965 = *(_QWORD *)v944;
                      v944 += 8;
                      *(_QWORD *)v943 = v965;
                      v943 += 8;
                    }
                    while (v943 != v940);
                  }
                  *(_QWORD *)(v753 + 264) = v937;
                  *(_QWORD *)(v753 + 272) = v887;
                  *(_QWORD *)(v753 + 280) = v940;
                  *(_QWORD *)(v753 + 288) = v939;
                  if (!v886)
                    goto LABEL_1287;
                  goto LABEL_1286;
                }
                if (v860 == v861)
                  v872 = 1;
                else
                  v872 = (v860 - v861) >> 2;
                if (v872 >> 61)
                  goto LABEL_1897;
                v873 = (char *)operator new(8 * v872);
                v874 = operator new(0x1000uLL);
                v875 = &v873[8 * v859];
                v876 = &v873[8 * v872];
                if (v859 == v872)
                {
                  if (v844 < 1)
                  {
                    if (v842 == v843)
                      v888 = 1;
                    else
                      v888 = v844 >> 2;
                    if (v888 >> 61)
                      goto LABEL_1897;
                    v889 = v874;
                    v875 = (char *)operator new(8 * v888);
                    v876 = &v875[8 * v888];
                    operator delete(v873);
                    v843 = *(char **)(v753 + 272);
                    v842 = *(char **)(v753 + 280);
                    v873 = v875;
                    v874 = v889;
                  }
                  else
                  {
                    v877 = v859 + 2;
                    if (v859 >= -1)
                      v877 = v859 + 1;
                    v875 -= 8 * (v877 >> 1);
                  }
                }
                *(_QWORD *)v875 = v874;
                v890 = v875 + 8;
                if (v842 == v843)
                {
LABEL_1207:
                  v891 = *(void **)(v753 + 264);
                  *(_QWORD *)(v753 + 264) = v873;
                  *(_QWORD *)(v753 + 272) = v875;
                  *(_QWORD *)(v753 + 280) = v890;
                  *(_QWORD *)(v753 + 288) = v876;
                  v733 = v1353;
                  if (v891)
                    operator delete(v891);
                  goto LABEL_1278;
                }
                while (2)
                {
                  if (v875 != v873)
                  {
                    v892 = v875;
                    v893 = v890;
                    goto LABEL_1210;
                  }
                  if (v890 < v876)
                  {
                    v895 = (v876 - v890) >> 3;
                    if (v895 >= -1)
                      v896 = v895 + 1;
                    else
                      v896 = v895 + 2;
                    v893 = &v890[8 * (v896 >> 1)];
                    v892 = &v875[8 * (v896 >> 1)];
                    if (v890 == v875)
                    {
                      v873 = v890;
                    }
                    else
                    {
                      memmove(&v875[8 * (v896 >> 1)], v875, v890 - v875);
                      v873 = v875;
                    }
LABEL_1210:
                    v894 = *((_QWORD *)v842 - 1);
                    v842 -= 8;
                    *((_QWORD *)v892 - 1) = v894;
                    v875 = v892 - 8;
                    v890 = v893;
                    if (v842 == *(char **)(v753 + 272))
                      goto LABEL_1207;
                    continue;
                  }
                  break;
                }
                if (v876 == v875)
                  v897 = 1;
                else
                  v897 = (v876 - v875) >> 2;
                if (v897 >> 61)
                  goto LABEL_1897;
                v898 = (char *)operator new(8 * v897);
                v873 = v898;
                v899 = (v897 + 3) >> 2;
                v892 = &v898[8 * v899];
                v893 = v892;
                v900 = v890 - v875;
                if (v890 != v875)
                {
                  v893 = &v892[v900 & 0xFFFFFFFFFFFFFFF8];
                  v901 = v900 - 8;
                  v902 = &v898[8 * v899];
                  v903 = v875;
                  if (v901 < 0x38
                    || (v904 = 8 * v899, v902 = &v898[8 * v899], v903 = v875, (unint64_t)(v902 - v875) < 0x20))
                  {
                    do
                    {
LABEL_1229:
                      v911 = *(_QWORD *)v903;
                      v903 += 8;
                      *(_QWORD *)v902 = v911;
                      v902 += 8;
                    }
                    while (v902 != v893);
                  }
                  else
                  {
                    v905 = (v901 >> 3) + 1;
                    v906 = 8 * (v905 & 0x3FFFFFFFFFFFFFFCLL);
                    v902 = &v892[v906];
                    v907 = (__int128 *)(v875 + 16);
                    v908 = &v898[v904 + 16];
                    v909 = v905 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v910 = *v907;
                      *((_OWORD *)v908 - 1) = *(v907 - 1);
                      *(_OWORD *)v908 = v910;
                      v907 += 2;
                      v908 += 32;
                      v909 -= 4;
                    }
                    while (v909);
                    if (v905 != (v905 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      v903 = &v875[v906];
                      goto LABEL_1229;
                    }
                  }
                }
                v876 = &v898[8 * v897];
                operator delete(v875);
                goto LABEL_1210;
              }
            }
          }
LABEL_1152:
          v823 += 248;
        }
        while (v823 != v1357);
        v820 = v1342;
        v818 = v1344;
        v821 = *v1342;
        v819 = v1341;
LABEL_1312:
        *((_BYTE *)v821 + 282) = 2;
        v992 = *(_QWORD **)(v733 + 104);
        v993 = *(_QWORD *)(v733 + 112);
        if ((unint64_t)v992 < v993)
        {
          if (v992)
          {
            *v992 = v821;
            v994 = *(_QWORD *)(v819 + 16 * v818 + 8);
            v992[1] = v994;
            if (v994)
            {
              v995 = (unint64_t *)(v994 + 8);
              do
                v996 = __ldxr(v995);
              while (__stxr(v996 + 1, v995));
            }
          }
          v997 = v992 + 2;
          goto LABEL_1345;
        }
        v998 = *(_QWORD *)(v733 + 96);
        v999 = ((uint64_t)v992 - v998) >> 4;
        v1000 = v999 + 1;
        if ((unint64_t)(v999 + 1) >> 60)
          goto LABEL_1902;
        v1001 = v993 - v998;
        if (v1001 >> 3 > v1000)
          v1000 = v1001 >> 3;
        if ((unint64_t)v1001 >= 0x7FFFFFFFFFFFFFF0)
          v1002 = 0xFFFFFFFFFFFFFFFLL;
        else
          v1002 = v1000;
        if (v1002)
        {
          v1003 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v733 + 120) + 16))(*(_QWORD *)(v733 + 120), 16 * v1002, 8);
          v1004 = (_OWORD *)(v1003 + 16 * v999);
          v1005 = v1003 + 16 * v1002;
          if (v1003)
          {
            v1006 = *(_OWORD *)v820;
            *v1004 = *(_OWORD *)v820;
            if (*((_QWORD *)&v1006 + 1))
            {
              v1007 = (unint64_t *)(*((_QWORD *)&v1006 + 1) + 8);
              do
                v1008 = __ldxr(v1007);
              while (__stxr(v1008 + 1, v1007));
            }
          }
        }
        else
        {
          v1005 = 0;
          v1004 = (_OWORD *)(16 * v999);
        }
        v997 = v1004 + 1;
        v1009 = *(_QWORD **)(v733 + 96);
        v1010 = *(_QWORD **)(v733 + 104);
        if (v1010 == v1009)
        {
          *(_QWORD *)(v733 + 96) = v1004;
          *(_QWORD *)(v733 + 104) = v997;
          v1018 = v733;
          v1014 = *(_QWORD *)(v733 + 112);
          *(_QWORD *)(v1018 + 112) = v1005;
        }
        else
        {
          do
          {
            v1011 = *((_OWORD *)v1010 - 1);
            v1010 -= 2;
            *--v1004 = v1011;
            *v1010 = 0;
            v1010[1] = 0;
          }
          while (v1010 != v1009);
          v1010 = *(_QWORD **)(v733 + 96);
          v1012 = *(_QWORD **)(v733 + 104);
          *(_QWORD *)(v733 + 96) = v1004;
          *(_QWORD *)(v733 + 104) = v997;
          v1013 = v733;
          v1014 = *(_QWORD *)(v733 + 112);
          *(_QWORD *)(v1013 + 112) = v1005;
          while (v1012 != v1010)
          {
            v1015 = (std::__shared_weak_count *)*(v1012 - 1);
            if (v1015)
            {
              v1016 = (unint64_t *)&v1015->__shared_owners_;
              do
                v1017 = __ldaxr(v1016);
              while (__stlxr(v1017 - 1, v1016));
              if (!v1017)
              {
                ((void (*)(std::__shared_weak_count *))v1015->__on_zero_shared)(v1015);
                std::__shared_weak_count::__release_weak(v1015);
              }
            }
            v1012 -= 2;
          }
        }
        if (v1010)
        {
          v1019 = v1014 - (_QWORD)v1010;
          v733 = v1353;
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1353 + 120) + 40))(*(_QWORD *)(v1353 + 120), v1010, v1019);
        }
        else
        {
          v733 = v1353;
        }
LABEL_1345:
        *(_QWORD *)(v733 + 104) = v997;
        v1020 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(v733 + 56)
                                                         + ((*(_QWORD *)(v733 + 80) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(_QWORD *)(v733 + 80)
                                             + 8);
        if (v1020)
        {
          v1021 = (unint64_t *)&v1020->__shared_owners_;
          do
            v1022 = __ldaxr(v1021);
          while (__stlxr(v1022 - 1, v1021));
          if (!v1022)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t, uint64_t))v1020->__on_zero_shared)(v1020, v818, v819);
            std::__shared_weak_count::__release_weak(v1020);
          }
        }
        v1023 = *(_QWORD *)(v733 + 88) - 1;
        v818 = *(_QWORD *)(v733 + 80) + 1;
        *(_QWORD *)(v733 + 80) = v818;
        *(_QWORD *)(v733 + 88) = v1023;
        if (v818 >= 0x200)
        {
          operator delete(**(void ***)(v733 + 56));
          *(_QWORD *)(v733 + 56) += 8;
          v1023 = *(_QWORD *)(v733 + 88);
          v818 = *(_QWORD *)(v733 + 80) - 256;
          *(_QWORD *)(v733 + 80) = v818;
        }
      }
      while (v1023);
    }
  }
  v755 = *(_QWORD **)(a1 + 360);
  if (v755[12] != v755[13] || v755[11])
    HIBYTE(v1372) = 1;
LABEL_1444:
  v1395 = (std::__shared_weak_count_vtbl *)&off_1E42C9440;
  v1397 = &v1395;
  v1398 = &off_1E42C93F8;
  p_buf = &buf;
  v1400 = &v1398;
  buf = (std::__shared_weak_count_vtbl *)&off_1E42C9440;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v1094 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v1094))
  {
    LOWORD(v1387[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v1094, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRender", (const char *)&unk_1A0189141, (uint8_t *)v1387, 2u);
  }

  v1095 = v1397;
  if (v1397 == &v1395)
  {
    v1096 = 4;
    v1095 = &v1395;
  }
  else
  {
    if (!v1397)
      goto LABEL_1453;
    v1096 = 5;
  }
  (*((void (**)(void))&(*v1095)->~__shared_weak_count + v1096))();
LABEL_1453:
  v1097 = v1400;
  if (v1400 == &v1398)
  {
    v1098 = 4;
    v1097 = &v1398;
  }
  else
  {
    if (!v1400)
      goto LABEL_1458;
    v1098 = 5;
  }
  (*v1097)[v1098]();
LABEL_1458:
  v1099 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)__p = &off_1E42D0E50;
  *(_QWORD *)&__p[24] = __p;
  v1404 = (std::__shared_weak_count_vtbl *)&off_1E42D0E98;
  v1406 = &v1404;
  *((_QWORD *)&v1387[1] + 1) = v1387;
  *(_QWORD *)&v1387[0] = &off_1E42D0E98;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v1100 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v1100))
  {
    *(_WORD *)v1373 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v1100, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTextureAtlasUpdate", (const char *)&unk_1A0189141, v1373, 2u);
  }

  v1101 = v1406;
  if (v1406 == &v1404)
  {
    v1102 = 4;
    v1101 = &v1404;
  }
  else
  {
    if (!v1406)
      goto LABEL_1467;
    v1102 = 5;
  }
  (*((void (**)(void))&(*v1101)->~__shared_weak_count + v1102))();
LABEL_1467:
  v1103 = *(_QWORD **)&__p[24];
  if (*(_BYTE **)&__p[24] == __p)
  {
    v1104 = 4;
    v1103 = __p;
  }
  else
  {
    if (!*(_QWORD *)&__p[24])
      goto LABEL_1472;
    v1104 = 5;
  }
  (*(void (**)(void))(*v1103 + 8 * v1104))();
LABEL_1472:
  (*(void (**)(_QWORD))(**(_QWORD **)(v1099 + 8) + 16))(*(_QWORD *)(v1099 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1099 + 16) + 16))(*(_QWORD *)(v1099 + 16));
  if (!*((_QWORD *)&v1387[1] + 1))
  {
LABEL_1900:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_1911;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v1387[1] + 1) + 48))(*((_QWORD *)&v1387[1] + 1));
  v1105 = (_QWORD *)*((_QWORD *)&v1387[1] + 1);
  if (*((_OWORD **)&v1387[1] + 1) == v1387)
  {
    v1106 = 4;
    v1105 = v1387;
  }
  else
  {
    if (!*((_QWORD *)&v1387[1] + 1))
      goto LABEL_1478;
    v1106 = 5;
  }
  (*(void (**)(void))(*v1105 + 8 * v1106))();
LABEL_1478:
  v1107 = *(_QWORD *)(a1 + 328);
  *(_BYTE *)(v1107 + 1848) = *(_BYTE *)(a1 + 192) == 2;
  v1108 = operator new();
  v1109 = (_OWORD *)(a1 + 3060);
  *(_OWORD *)(v1108 + 416) = 0u;
  *(_OWORD *)(v1108 + 432) = 0u;
  *(_OWORD *)(v1108 + 384) = 0u;
  *(_OWORD *)(v1108 + 400) = 0u;
  *(_OWORD *)(v1108 + 352) = 0u;
  *(_OWORD *)(v1108 + 368) = 0u;
  *(_OWORD *)(v1108 + 320) = 0u;
  *(_OWORD *)(v1108 + 336) = 0u;
  *(_OWORD *)(v1108 + 288) = 0u;
  *(_OWORD *)(v1108 + 304) = 0u;
  *(_OWORD *)(v1108 + 256) = 0u;
  *(_OWORD *)(v1108 + 272) = 0u;
  *(_OWORD *)(v1108 + 224) = 0u;
  *(_OWORD *)(v1108 + 240) = 0u;
  *(_OWORD *)(v1108 + 192) = 0u;
  *(_OWORD *)(v1108 + 208) = 0u;
  *(_OWORD *)(v1108 + 160) = 0u;
  *(_OWORD *)(v1108 + 176) = 0u;
  *(_OWORD *)(v1108 + 128) = 0u;
  *(_OWORD *)(v1108 + 144) = 0u;
  *(_OWORD *)(v1108 + 96) = 0u;
  *(_OWORD *)(v1108 + 112) = 0u;
  *(_OWORD *)(v1108 + 64) = 0u;
  *(_OWORD *)(v1108 + 80) = 0u;
  *(_OWORD *)(v1108 + 32) = 0u;
  *(_OWORD *)(v1108 + 48) = 0u;
  *(_DWORD *)(v1108 + 32) = 1065353216;
  *(_OWORD *)v1108 = 0u;
  *(_OWORD *)(v1108 + 16) = 0u;
  do
  {
    v1110 = __ldaxr(gdc::Registry::nextId(void)::next);
    v1111 = v1110 + 1;
  }
  while (__stlxr(v1111, gdc::Registry::nextId(void)::next));
  *(_WORD *)(v1108 + 40) = v1111;
  *(_OWORD *)(v1108 + 48) = 0u;
  *(_OWORD *)(v1108 + 64) = 0u;
  *(_OWORD *)(v1108 + 80) = 0u;
  *(_OWORD *)(v1108 + 96) = 0u;
  *(_OWORD *)(v1108 + 112) = 0u;
  *(_OWORD *)(v1108 + 128) = 0u;
  *(_QWORD *)(v1108 + 144) = 0;
  *(_DWORD *)(v1108 + 152) = 1065353216;
  *(_OWORD *)(v1108 + 160) = 0u;
  *(_OWORD *)(v1108 + 176) = 0u;
  *(_QWORD *)(v1108 + 192) = 0;
  *(_DWORD *)(v1108 + 200) = 1065353216;
  *(_OWORD *)(v1108 + 208) = 0u;
  *(_OWORD *)(v1108 + 224) = 0u;
  *(_QWORD *)(v1108 + 240) = 0;
  *(_DWORD *)(v1108 + 248) = 1065353216;
  *(_QWORD *)(v1108 + 288) = 0;
  *(_OWORD *)(v1108 + 256) = 0u;
  *(_OWORD *)(v1108 + 272) = 0u;
  *(_DWORD *)(v1108 + 296) = 1065353216;
  *(_OWORD *)(v1108 + 304) = 0u;
  *(_OWORD *)(v1108 + 320) = 0u;
  *(_QWORD *)(v1108 + 336) = 0;
  *(_DWORD *)(v1108 + 344) = 1065353216;
  *(_OWORD *)(v1108 + 352) = 0u;
  *(_OWORD *)(v1108 + 368) = 0u;
  *(_QWORD *)(v1108 + 384) = 0;
  *(_DWORD *)(v1108 + 392) = 1065353216;
  *(_OWORD *)(v1108 + 400) = 0u;
  *(_OWORD *)(v1108 + 416) = 0u;
  *(_QWORD *)(v1108 + 432) = 0;
  *(_DWORD *)(v1108 + 440) = 1065353216;
  v1112 = *(gdc::Registry **)(v1107 + 24);
  *(_QWORD *)(v1107 + 24) = v1108;
  if (v1112)
  {
    gdc::Registry::~Registry(v1112);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)(v1107 + 40) = *(_QWORD *)(v1107 + 32);
  *(_QWORD *)(v1107 + 72) = *(_QWORD *)(v1107 + 64);
  (*(void (**)(_QWORD, md::LayoutContext *, uint64_t))(**(_QWORD **)(a1 + 240) + 64))(*(_QWORD *)(a1 + 240), v1358, *(_QWORD *)(a1 + 328) + 24);
  md::LayoutContext::frameState(v1358);
  v1114 = floor((float)(*(float *)(v1113 + 112) * 1000.0) + 0.5) * 0.001;
  v1115 = (int)v1114;
  if ((int)v1114 >= 23)
    LOBYTE(v1115) = 23;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 232) + 35) > v1115)
    goto LABEL_1485;
  v1117 = (uint64_t *)*((_QWORD *)v1358 + 1);
  v1118 = (int8x8_t)v1117[1];
  v1119 = (uint8x8_t)vcnt_s8(v1118);
  v1119.i16[0] = vaddlv_u8(v1119);
  v1120 = v1119.u32[0];
  if (v1119.u32[0] > 1uLL)
  {
    v1121 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v1118;
    if (*(_QWORD *)&v1118 > 0x99BED48DEFBBD82BLL)
      v1121 = 0x99BED48DEFBBD82BLL;
  }
  else
  {
    v1121 = (*(_QWORD *)&v1118 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v1122 = *v1117;
  v1123 = *(_QWORD **)(*v1117 + 8 * v1121);
  if (!v1123 || (v1124 = (_QWORD *)*v1123) == 0)
  {
LABEL_1509:
    if (v1120 >= 2)
    {
      v1130 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v1118 <= 0x1AF456233693CD46uLL)
        v1130 = 0x1AF456233693CD46uLL % *(_QWORD *)&v1118;
      v1129 = *(_QWORD **)(v1122 + 8 * v1130);
      do
      {
        do
          v1129 = (_QWORD *)*v1129;
        while (v1129[1] != 0x1AF456233693CD46);
      }
      while (v1129[2] != 0x1AF456233693CD46);
    }
    else
    {
      v1129 = *(_QWORD **)(v1122 + 8 * ((*(_QWORD *)&v1118 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v1129 = (_QWORD *)*v1129;
        while (v1129[1] != 0x1AF456233693CD46);
      }
      while (v1129[2] != 0x1AF456233693CD46);
    }
    v1131 = *(double *)(*(_QWORD *)(v1129[5] + 32) + 3040);
    v1116 = v1131 > 1.0 || v1131 < 0.0;
    goto LABEL_1522;
  }
  if (v1119.u32[0] < 2uLL)
  {
    while (1)
    {
      v1126 = v1124[1];
      if (v1126 == 0x99BED48DEFBBD82BLL)
      {
        if (v1124[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_1506;
      }
      else if ((v1126 & (*(_QWORD *)&v1118 - 1)) != v1121)
      {
        goto LABEL_1509;
      }
      v1124 = (_QWORD *)*v1124;
      if (!v1124)
        goto LABEL_1509;
    }
  }
  while (1)
  {
    v1125 = v1124[1];
    if (v1125 == 0x99BED48DEFBBD82BLL)
      break;
    if (v1125 >= *(_QWORD *)&v1118)
      v1125 %= *(_QWORD *)&v1118;
    if (v1125 != v1121)
      goto LABEL_1509;
LABEL_1495:
    v1124 = (_QWORD *)*v1124;
    if (!v1124)
      goto LABEL_1509;
  }
  if (v1124[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_1495;
LABEL_1506:
  v1127 = v1124[5];
  if (*(_QWORD *)(v1127 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_1509;
  v1128 = *(md::SceneContext ***)(v1127 + 32);
  if (!v1128 || !md::SceneContext::isFinishedLoadingRequiredLayers(*v1128))
    goto LABEL_1509;
LABEL_1485:
  v1116 = 0;
LABEL_1522:
  md::LayoutContext::frameState(v1358);
  v1133 = *v1132;
  v1134 = v1132[1];
  v1136 = v1132[2];
  v1135 = v1132[3];
  if (v1134 > 0.0 || v1135 > 0.0 || v1136 > 0.0 || v1133 > 0.0)
  {
    v1140 = *(float *)(a1 + 480);
    v1141 = fmaxf(v1140 * v1134, 0.0);
    v1142 = fmaxf(v1140 * v1136, 0.0);
    v1143 = *(float *)(a1 + 1504);
    v1144 = v1143 - (float)(v1140 * v1135);
    if (v1143 >= v1144)
      v1143 = v1144;
    if (v1144 >= v1141)
      v1145 = v1143;
    else
      v1145 = v1141;
    v1146 = *(float *)(a1 + 1508);
    v1147 = v1146 - (float)(v1140 * v1133);
    v1148 = v1142;
    if (v1147 >= v1142)
    {
      v1148 = v1147;
      if (v1146 < v1147)
        v1148 = *(float *)(a1 + 1508);
    }
    md::LayoutContext::frameState(v1358);
    v1150 = *(float *)(v1149 + 16);
    if (v1150 <= 0.0)
    {
      v1139 = 0;
    }
    else
    {
      v1151 = *(float *)(a1 + 1508);
      v1152 = v1151 - v1148;
      *(float *)&v1139 = fmaxf((float)(v1151 - v1148) - (float)(*(float *)(a1 + 480) * v1150), 0.0);
      v1148 = v1151 - *(float *)&v1139;
      *((float *)&v1139 + 1) = v1152;
    }
    *(_QWORD *)&v1138 = v1141 | ((unint64_t)v1142 << 32);
    *((_QWORD *)&v1138 + 1) = v1145 | ((unint64_t)v1148 << 32);
    v1137 = 1;
  }
  else
  {
    v1137 = 0;
    v1138 = 0uLL;
    v1139 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 3076) == v1137)
  {
    if (*(_BYTE *)(a1 + 3076))
      *v1109 = v1138;
  }
  else if (*(_BYTE *)(a1 + 3076))
  {
    *(_BYTE *)(a1 + 3076) = 0;
  }
  else
  {
    *v1109 = v1138;
    *(_BYTE *)(a1 + 3076) = 1;
  }
  *(_QWORD *)(a1 + 3080) = v1139;
  v1153 = *(unsigned __int8 *)(a1 + 3350);
  v1154 = *(_QWORD *)(a1 + 328);
  if (!*(_BYTE *)(a1 + 3350))
    v1153 = 128;
  if (*(unsigned __int8 *)(v1154 + 1849) != v1153)
  {
    *(_BYTE *)(v1154 + 1849) = v1153;
    v1155 = *(_QWORD *)(v1154 + 1824);
    v1156 = *(_QWORD *)(v1154 + 1832);
    v1157 = *(_QWORD *)(v1154 + 1840);
    *(_BYTE *)(*(_QWORD *)(v1155 + 24) + 55) = v1153;
    *(_BYTE *)(*(_QWORD *)(v1155 + 16) + 55) = v1153;
    *(_BYTE *)(*(_QWORD *)(v1156 + 24) + 55) = v1153;
    *(_BYTE *)(*(_QWORD *)(v1156 + 16) + 55) = v1153;
    *(_BYTE *)(*(_QWORD *)(v1157 + 24) + 55) = v1153;
    *(_BYTE *)(*(_QWORD *)(v1157 + 16) + 55) = v1153;
  }
  md::LabelRenderer::endLayout(v1154, v1354, v1116, (uint64_t)v1109);
  v1158 = *(_QWORD *)(a1 + 256);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1158 + 8) + 24))(*(_QWORD *)(v1158 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1158 + 16) + 24))(*(_QWORD *)(v1158 + 16));
  if (!*(_BYTE *)(a1 + 3385))
  {
    (*(void (**)(_QWORD, md::LayoutContext *))(**(_QWORD **)(a1 + 240) + 312))(*(_QWORD *)(a1 + 240), v1358);
    if (*(_BYTE *)(a1 + 3617)
      || *(_BYTE *)(a1 + 3618)
      || *(_BYTE *)(a1 + 3620)
      || *(_BYTE *)(a1 + 3619)
      || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 296))(*(_QWORD *)(a1 + 240)) & 1) != 0
      || *(_BYTE *)(a1 + 3626)
      || *(_BYTE *)(a1 + 3657))
    {
      v1161 = 1;
      if (!*(_QWORD *)v1358)
        goto LABEL_1550;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 3371))
        goto LABEL_1550;
      v1161 = 0;
      if (!*(_QWORD *)v1358)
        goto LABEL_1550;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v1162 = objc_msgSend(*(id *)v1358, "debugConsoleForId:", 2);
      if (!*(_QWORD *)v1358)
        goto LABEL_1550;
    }
    else
    {
      v1162 = 0;
      if (!*(_QWORD *)v1358)
        goto LABEL_1550;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v1186 = objc_msgSend(*(id *)v1358, "debugConsoleForId:", 3);
      if (v1162)
      {
        v1187 = (float32x2_t *)v1186;
        if (v1186)
        {
          if ((v1161 & 1) == 0 && *(_BYTE *)(a1 + 3371))
          {
            ggl::DebugConsole::begin((ggl::DebugConsole *)v1162);
            *(_QWORD *)(v1162 + 80) = 0;
            ggl::DebugConsole::end(v1162);
            ggl::DebugConsole::begin((ggl::DebugConsole *)v1187);
            v1187[10] = 0;
            ggl::DebugConsole::end((uint64_t)v1187);
            *(_WORD *)(a1 + 3371) = 0;
            *(_BYTE *)(a1 + 3054) = 0;
            goto LABEL_1550;
          }
          *(_BYTE *)(a1 + 3054) = 1;
          v1191 = *(_DWORD *)(a1 + 196);
          if ((v1191 - 1) < 0xA && ((0x20Fu >> (v1191 - 1)) & 1) != 0)
          {
            LOBYTE(v1196) = 0;
            v1197 = -1;
            v1192 = (float32x2_t *)a1;
          }
          else
          {
            v1192 = (float32x2_t *)a1;
            v1193 = v1191 & 0xFFFFFFFD;
            v1194 = *(_BYTE *)(*(_QWORD *)(a1 + 336) + 161) == 1 || v1193 == 9;
            v1195 = !v1194;
            v1196 = v1195 << 31 >> 31;
            if (v1194)
              v1197 = -1;
            else
              v1197 = 0;
          }
          v1201 = v1192[188];
          v1202 = *((_QWORD *)v1358 + 4);
          v1203 = (std::__shared_weak_count *)*((_QWORD *)v1358 + 5);
          v1371 = v1196;
          if (v1203)
          {
            v1204 = (unint64_t *)&v1203->__shared_owners_;
            do
              v1205 = __ldxr(v1204);
            while (__stxr(v1205 + 1, v1204));
            v1206 = *((_QWORD *)v1358 + 4);
            v1207 = (std::__shared_weak_count *)*((_QWORD *)v1358 + 5);
            v1208 = *(double *)(v1202 + 64);
            if (v1207)
            {
              v1209 = (unint64_t *)&v1207->__shared_owners_;
              do
                v1210 = __ldxr(v1209);
              while (__stxr(v1210 + 1, v1209));
              v1211 = 0;
            }
            else
            {
              v1211 = 1;
            }
            v1202 = v1206;
          }
          else
          {
            v1207 = 0;
            v1208 = *(double *)(v1202 + 64);
            v1211 = 1;
          }
          v1212 = v1208;
          v1213 = *(unsigned __int8 *)(v1202 + 72);
          *(float *)v1387 = 2.0 / v1201.f32[0];
          *(_QWORD *)((char *)v1387 + 12) = 0;
          *(_QWORD *)((char *)v1387 + 4) = 0;
          *((float *)&v1387[1] + 1) = 2.0 / v1201.f32[1];
          v1214 = v1212 + -1.0;
          if (!v1213)
            v1214 = 1.0 - v1212;
          *((_QWORD *)&v1387[1] + 1) = 0;
          *(_QWORD *)&v1388 = 0;
          *((float *)&v1388 + 2) = v1214 * 0.5;
          HIDWORD(v1388) = 0;
          *(float32x2_t *)&v1389 = vdiv_f32(vneg_f32(v1201), v1201);
          *((float *)&v1389 + 2) = (float)(v1212 * 0.5) + 0.5;
          HIDWORD(v1389) = 1065353216;
          if ((v1211 & 1) == 0)
          {
            v1215 = (unint64_t *)&v1207->__shared_owners_;
            do
              v1216 = __ldaxr(v1215);
            while (__stlxr(v1216 - 1, v1215));
            if (!v1216)
            {
              ((void (*)(std::__shared_weak_count *))v1207->__on_zero_shared)(v1207);
              std::__shared_weak_count::__release_weak(v1207);
            }
          }
          if (v1203)
          {
            v1217 = (unint64_t *)&v1203->__shared_owners_;
            do
              v1218 = __ldaxr(v1217);
            while (__stlxr(v1218 - 1, v1217));
            if (!v1218)
            {
              ((void (*)(std::__shared_weak_count *))v1203->__on_zero_shared)(v1203);
              std::__shared_weak_count::__release_weak(v1203);
            }
          }
          ggl::DebugConsole::setProjection((uint64_t)v1187, v1387);
          ggl::DebugConsole::begin((ggl::DebugConsole *)v1187);
          v1187[10] = 0;
          v1187[13].f32[0] = fabsf(*(float *)(a1 + 176)) * 0.5;
          v1187[12].i8[0] = -1;
          v1187[12].i8[1] = v1197;
          v1187[12].i16[1] = -256;
          v1187[4] = vmul_n_f32((float32x2_t)0x4120000041000000, *(float *)(a1 + 176));
          objc_msgSend(MEMORY[0x1E0CB37A0], "string");
          v1219 = (void *)objc_claimAutoreleasedReturnValue();
          v1220 = v1219;
          if (!*(_BYTE *)(a1 + 3618))
            goto LABEL_1782;
          v1221 = (int)v1187[3].f32[0];
          if (v1221 <= 8)
            v1221 = 8;
          v1222 = (int)(float)((float)(*(float *)(a1 + 1504) + -50.0) / (float)v1221);
          v1223 = v1222 <= 20 ? 20 : v1222;
          v1224 = (_QWORD *)*((_QWORD *)v1358 + 1);
          v1225 = (int8x8_t)v1224[1];
          if (!*(_QWORD *)&v1225)
            goto LABEL_1782;
          v1226 = (uint8x8_t)vcnt_s8(v1225);
          v1226.i16[0] = vaddlv_u8(v1226);
          if (v1226.u32[0] > 1uLL)
          {
            v1227 = 0xE42D19AFCA302E68;
            if (*(_QWORD *)&v1225 <= 0xE42D19AFCA302E68)
              v1227 = 0xE42D19AFCA302E68 % *(_QWORD *)&v1225;
          }
          else
          {
            v1227 = (*(_QWORD *)&v1225 - 1) & 0xE42D19AFCA302E68;
          }
          v1231 = *(_QWORD **)(*v1224 + 8 * v1227);
          if (!v1231)
            goto LABEL_1782;
          v1232 = (_QWORD *)*v1231;
          if (!v1232)
            goto LABEL_1782;
          if (v1226.u32[0] < 2uLL)
          {
            v1233 = *(_QWORD *)&v1225 - 1;
            while (1)
            {
              v1235 = v1232[1];
              if (v1235 == 0xE42D19AFCA302E68)
              {
                if (v1232[2] == 0xE42D19AFCA302E68)
                  goto LABEL_1745;
              }
              else if ((v1235 & v1233) != v1227)
              {
                goto LABEL_1782;
              }
              v1232 = (_QWORD *)*v1232;
              if (!v1232)
                goto LABEL_1782;
            }
          }
          while (1)
          {
            v1234 = v1232[1];
            if (v1234 == 0xE42D19AFCA302E68)
            {
              if (v1232[2] == 0xE42D19AFCA302E68)
              {
LABEL_1745:
                v1239 = v1232[5];
                if (*(_QWORD *)(v1239 + 8) == 0xE42D19AFCA302E68)
                {
                  v1240 = *(_QWORD **)(v1239 + 32);
                  if (v1240)
                  {
                    if (v1240[15] != v1240[16])
                    {
                      objc_msgSend(v1219, "appendString:", CFSTR("Source Client Style Attributes:\n\t["));
                      gss::attributesToString((gss::Allocator *)(v1240 + 15), 0, 0, v1223, __p);
                      if (__p[23] >= 0)
                        v1241 = __p;
                      else
                        v1241 = *(_BYTE **)__p;
                      objc_msgSend(v1220, "appendFormat:", CFSTR("%s"), v1241);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      objc_msgSend(v1220, "appendString:", CFSTR("]\n"));
                    }
                    v1242 = v1240[18];
                    v1243 = v1240[19];
                    if (v1242 != v1243)
                    {
                      v1244 = v1240[15];
                      if (v1243 - v1242 == v1240[16] - v1244)
                      {
                        v1245 = CFSTR("Target Client Style Attributes: same as source\n");
                        while (*(_DWORD *)v1242 == *(_DWORD *)v1244
                             && *(unsigned __int16 *)(v1242 + 4) == *(unsigned __int16 *)(v1244 + 4))
                        {
                          v1242 += 8;
                          v1244 += 8;
                          if (v1242 == v1243)
                            goto LABEL_1781;
                        }
                      }
                      objc_msgSend(v1220, "appendString:", CFSTR("Target Client Style Attributes:\n\t["));
                      gss::attributesToString((gss::Allocator *)(v1240 + 18), 0, 0, v1223, __p);
                      if (__p[23] >= 0)
                        v1247 = __p;
                      else
                        v1247 = *(_BYTE **)__p;
                      objc_msgSend(v1220, "appendFormat:", CFSTR("%s"), v1247);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      v1245 = CFSTR("]\n");
LABEL_1781:
                      objc_msgSend(v1220, "appendString:", v1245);
                    }
                  }
                }
LABEL_1782:
                if (*(_BYTE *)(a1 + 3620))
                {
                  v1248 = *(_QWORD *)(a1 + 1648) == *(_QWORD *)(a1 + 1656) ? "NO" : "YES";
                  objc_msgSend(v1220, "appendFormat:", CFSTR("Flex Zones:%s\n"), v1248);
                  v1249 = *(double **)(a1 + 1648);
                  for (j = *(unsigned __int8 **)(a1 + 1656); v1249 != (double *)j; v1249 += 2)
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\t%hhu - %.1f\n"), *(unsigned __int8 *)v1249, sqrt(v1249[1]));
                }
                if (*(_BYTE *)(a1 + 3619))
                {
                  v1251 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32);
                  if (v1251)
                  {
                    objc_msgSend(v1220, "appendString:", CFSTR("LabelsNavState:\n"));
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1251 + 8))(v1251))
                      v1252 = CFSTR("YES");
                    else
                      v1252 = CFSTR("NO");
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\tisNavActive:%@\n"), v1252);
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1251 + 24))(v1251))
                      v1253 = CFSTR("YES");
                    else
                      v1253 = CFSTR("NO");
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\tisNavHighZoomActive:%@\n"), v1253);
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1251 + 56))(v1251))
                      v1254 = CFSTR("YES");
                    else
                      v1254 = CFSTR("NO");
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\tisNavCameraDetached:%@\n"), v1254);
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\tnavMode:%hhu\n"), (**(unsigned int (***)(uint64_t))v1251)(v1251));
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\tcurrentRouteLeg:%lu\n"), (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1251 + 48))(v1251));
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\trouteUserOffsetInMeters:%f\n"), (*(double (**)(uint64_t))(*(_QWORD *)v1251 + 72))(v1251));
                    v1255 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1251 + 64))(v1251);
                    objc_msgSend(v1220, "appendFormat:", CFSTR("\trouteUserOffset:%u,%f\n"), v1255, *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1251 + 64))(v1251) + 4));
                  }
                }
                v1256 = a1;
                (*(void (**)(_QWORD, void *, float32x2_t *))(**(_QWORD **)(a1 + 240) + 304))(*(_QWORD *)(a1 + 240), v1220, v1187);
                if (*(_BYTE *)(a1 + 3617))
                {
                  v1257 = (void *)MEMORY[0x1E0CB3940];
                  md::LabelManager::debugString((md::LabelManager *)__p, a1, 1);
                  if (__p[23] >= 0)
                    v1258 = __p;
                  else
                    v1258 = *(_BYTE **)__p;
                  objc_msgSend(v1257, "stringWithUTF8String:", v1258);
                  v1259 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v1220, "appendString:", v1259);

                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  v1256 = a1;
                }
                if (*(_BYTE *)(v1256 + 3657))
                {
                  v1260 = (void *)MEMORY[0x1E0CB3940];
                  grl::IconManager::packLogs((grl::IconManager *)objc_msgSend(*(id *)(v1256 + 96), "grlIconManager"), __p);
                  if (__p[23] >= 0)
                    v1261 = __p;
                  else
                    v1261 = *(_BYTE **)__p;
                  objc_msgSend(v1260, "stringWithUTF8String:", v1261);
                  v1262 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v1220, "appendString:", v1262);

                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  v1256 = a1;
                }
                ggl::DebugConsole::end((uint64_t)v1187);
                *(_BYTE *)(v1256 + 3371) = 1;
                v1264.n128_f32[0] = md::LayoutContext::frameState(v1358);
                v1265 = *(_DWORD *)(v1256 + 3648);
                if (v1265)
                {
                  v1266 = *(_DWORD *)(v1256 + 3652);
                  goto LABEL_1817;
                }
                v1266 = *(_DWORD *)(v1256 + 3652);
                if (v1266)
                {
LABEL_1817:
                  v1267 = (float)v1265;
                  v1268 = (float)v1266;
                }
                else
                {
                  v1268 = *(float *)(v1263 + 32) + 40.0;
                  v1264.n128_u32[0] = 10.0;
                  v1267 = *(float *)(v1263 + 36) + 10.0;
                }
                v1269 = *(_QWORD *)(a1 + 112);
                v1270 = *(_QWORD **)v1269;
                v1271 = *(_QWORD **)(v1269 + 8);
                if (v1270 != v1271)
                {
                  while (*v1270 != 0x348A0B0E758C07C2)
                  {
                    v1270 += 5;
                    if (v1270 == v1271)
                      goto LABEL_1829;
                  }
                }
                if (v1270 == v1271)
                {
LABEL_1829:
                  v1273 = 0;
                }
                else
                {
                  v1273 = v1270[3];
                  v1272 = (std::__shared_weak_count *)v1270[4];
                  if (v1272)
                  {
                    v1274 = (unint64_t *)&v1272->__shared_owners_;
                    do
                      v1275 = __ldxr(v1274);
                    while (__stxr(v1275 + 1, v1274));
                    do
                      v1276 = __ldaxr(v1274);
                    while (__stlxr(v1276 - 1, v1274));
                    if (!v1276)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v1272->__on_zero_shared)(v1272, v1264);
                      std::__shared_weak_count::__release_weak(v1272);
                    }
                  }
                }
                if (*(_BYTE *)(a1 + 3626))
                {
                  v1277 = *(unsigned __int8 *)(a1 + 3627);
                  if (v1277 <= 1)
                  {
                    v1282 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v1277 + 8);
                    v1278 = (*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v1282 + 56))(v1282, *(unsigned __int16 *)(a1 + 3628), v1264);
                  }
                  else
                  {
                    v1278 = 0;
                  }
                  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v1273 + 104));
                  v1283 = *(_QWORD *)(v1273 + 600);
                  if (v1278 < (unint64_t)((*(_QWORD *)(v1273 + 608) - v1283) >> 3)
                    && ((v1284 = *(_QWORD *)(v1283 + 8 * v1278)) != 0
                      ? (v1285 = HIDWORD(v1278) == HIDWORD(v1284))
                      : (v1285 = 0),
                        v1285))
                  {
                    v1287 = (uint64_t *)(*(_QWORD *)(v1273 + 624) + 40 * v1284);
                    v1286 = *(uint64_t **)(v1273 + 632);
                  }
                  else
                  {
                    v1286 = *(uint64_t **)(v1273 + 632);
                    v1287 = v1286;
                  }
                  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v1273 + 104));
                  v1279 = 0;
                  if (v1287 == v1286)
                    goto LABEL_1849;
                  v1280 = v1267;
                  v1281 = v1268;
                  if (!v1287)
                    goto LABEL_1850;
                  v1279 = *v1287;
                  if (!*v1287)
                  {
LABEL_1849:
                    v1280 = v1267;
                    v1281 = v1268;
                  }
                  else
                  {
                    v1288 = *(float *)(a1 + 1520) * 0.5;
                    v1289 = *(float *)(a1 + 1524) * 0.5;
                    v1290 = (float)*(unsigned int *)(v1279 + 80);
                    v1280 = v1267 + v1290;
                    v1291 = (float)*(unsigned int *)(v1279 + 84);
                    v1281 = v1268 + v1291;
                    if ((float)(v1267 + v1290) > v1288 || v1281 > v1289)
                    {
                      v1293 = 1.0 / fmaxf(v1280 / v1288, v1281 / v1289);
                      v1294 = *(float *)(a1 + 480);
                      v1280 = (float)((float)(v1293 * v1290) / v1294) + v1267;
                      v1281 = (float)((float)(v1293 * v1291) / v1294) + v1268;
                    }
                  }
LABEL_1850:
                  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
                  v1295 = (void *)objc_claimAutoreleasedReturnValue();
                  md::LabelTextureAtlasStore::debugString((md::LabelTextureAtlasStore *)__p, *(_QWORD *)(a1 + 256));
                  if (__p[23] >= 0)
                    v1296 = __p;
                  else
                    v1296 = *(_BYTE **)__p;
                  objc_msgSend(v1295, "appendFormat:", CFSTR("%s"), v1296);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  objc_msgSend(v1220, "appendString:", v1295);

                }
                else
                {
                  v1279 = 0;
                  v1280 = v1267;
                  v1281 = v1268;
                }
                objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet", v1264.n128_f64[0]);
                v1297 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v1220, "componentsSeparatedByCharactersInSet:", v1297);
                v1298 = (void *)objc_claimAutoreleasedReturnValue();
                v1299 = objc_msgSend(v1298, "count");

                if (*(_BYTE *)(a1 + 3643)
                  || (v1301 = *(float *)(v1162 + 24), v1300 = *(float *)(v1162 + 28), !objc_msgSend(v1220, "length")))
                {
                  if (*(_BYTE *)(a1 + 3372))
                  {
                    *(_BYTE *)(a1 + 3372) = 0;
                    ggl::DebugConsole::begin((ggl::DebugConsole *)v1162);
                    *(_QWORD *)(v1162 + 80) = 0;
                    ggl::DebugConsole::end(v1162);
                  }
                }
                else
                {
                  v1302 = (float)(v1301 * 75.0) + v1267;
                  v1303 = (float)(v1300 * (float)v1299) + v1281;
                  if (v1302 < v1267 || v1303 < v1281)
                  {
                    v1305 = v1281;
                    v1304 = v1267;
                  }
                  else
                  {
                    v1304 = v1267 + -10.0;
                    v1302 = v1302 + 10.0;
                    v1305 = v1281 + -10.0;
                    v1303 = v1303 + 10.0;
                  }
                  v1404 = (std::__shared_weak_count_vtbl *)__PAIR64__(LODWORD(v1305), LODWORD(v1304));
                  v1405[0] = (float32x2_t)__PAIR64__(LODWORD(v1303), LODWORD(v1302));
                  v1306 = *(float *)(a1 + 176);
                  v1307 = *(float *)(a1 + 1508);
                  v1308 = *((_QWORD *)v1358 + 4);
                  v1309 = (std::__shared_weak_count *)*((_QWORD *)v1358 + 5);
                  v1310 = *(float *)(a1 + 1504) / v1306;
                  if (v1309)
                  {
                    v1311 = (unint64_t *)&v1309->__shared_owners_;
                    do
                      v1312 = __ldxr(v1311);
                    while (__stxr(v1312 + 1, v1311));
                    v1313 = *((_QWORD *)v1358 + 4);
                    v1314 = (std::__shared_weak_count *)*((_QWORD *)v1358 + 5);
                    v1315 = *(double *)(v1308 + 64);
                    if (v1314)
                    {
                      v1316 = (unint64_t *)&v1314->__shared_owners_;
                      do
                        v1317 = __ldxr(v1316);
                      while (__stxr(v1317 + 1, v1316));
                      v1318 = 0;
                    }
                    else
                    {
                      v1318 = 1;
                    }
                    v1308 = v1313;
                  }
                  else
                  {
                    v1314 = 0;
                    v1315 = *(double *)(v1308 + 64);
                    v1318 = 1;
                  }
                  v1319 = v1315;
                  v1320 = *(unsigned __int8 *)(v1308 + 72);
                  *(float *)__p = 2.0 / v1310;
                  *(_QWORD *)&__p[12] = 0;
                  *(_QWORD *)&__p[4] = 0;
                  *(float *)&__p[20] = (float)(v1306 * -2.0) / v1307;
                  v1321 = v1319 + -1.0;
                  if (!v1320)
                    v1321 = 1.0 - v1319;
                  *(_QWORD *)&__p[24] = 0;
                  v1375 = 0.0;
                  *(_QWORD *)&v1376 = LODWORD(v1321);
                  *(float *)&v1377 = (float)-v1310 / v1310;
                  HIDWORD(v1377) = 1065353216;
                  v1378 = LODWORD(v1319) | 0x3F80000000000000;
                  if ((v1318 & 1) == 0)
                  {
                    v1322 = (unint64_t *)&v1314->__shared_owners_;
                    do
                      v1323 = __ldaxr(v1322);
                    while (__stlxr(v1323 - 1, v1322));
                    if (!v1323)
                    {
                      ((void (*)(std::__shared_weak_count *))v1314->__on_zero_shared)(v1314);
                      std::__shared_weak_count::__release_weak(v1314);
                    }
                  }
                  if (v1309)
                  {
                    v1324 = (unint64_t *)&v1309->__shared_owners_;
                    do
                      v1325 = __ldaxr(v1324);
                    while (__stlxr(v1325 - 1, v1324));
                    if (!v1325)
                    {
                      ((void (*)(std::__shared_weak_count *))v1309->__on_zero_shared)(v1309);
                      std::__shared_weak_count::__release_weak(v1309);
                    }
                  }
                  ggl::DebugConsole::setProjection(v1162, __p);
                  ggl::DebugConsole::begin((ggl::DebugConsole *)v1162);
                  *(_QWORD *)(v1162 + 80) = 0;
                  *(_BYTE *)(v1162 + 96) = v1371;
                  *(_BYTE *)(v1162 + 97) = v1371;
                  *(_BYTE *)(v1162 + 98) = v1371;
                  *(_BYTE *)(v1162 + 99) = -76;
                  v1326 = *(float *)&v1404;
                  *(_QWORD *)(v1162 + 8) = v1404;
                  ggl::DebugConsole::drawRectangleWithFill((float32x2_t *)v1162, v1405, v1326);
                  *(_BYTE *)(v1162 + 96) = v1197;
                  *(_BYTE *)(v1162 + 97) = v1197;
                  *(_BYTE *)(v1162 + 98) = v1197;
                  *(_BYTE *)(v1162 + 99) = -1;
                  *(_BYTE *)(v1162 + 100) = v1371;
                  *(_BYTE *)(v1162 + 101) = v1371;
                  *(_BYTE *)(v1162 + 102) = v1371;
                  *(_BYTE *)(v1162 + 103) = -76;
                  *(float *)(v1162 + 8) = v1267;
                  *(float *)(v1162 + 12) = v1281;
                  v1327 = (int8x16_t *)objc_msgSend(objc_retainAutorelease(v1220), "UTF8String");
                  v1328 = strlen(v1327->i8);
                  ggl::DebugConsole::drawString(v1162, v1327, v1328, v1329, v1330);
                  v1331 = *(_QWORD **)(v1162 + 64);
                  v1332 = (_QWORD *)v1331[11];
                  if (!v1332)
                    v1332 = v1331 + 9;
                  if (v1279 && v1332[1] == *v1332)
                  {
                    **(_QWORD **)(v1331[4] + 96) = v1279;
                    v1333 = *(_QWORD *)(v1162 + 64);
                    v1334 = **(_QWORD ***)(*(_QWORD *)(v1333 + 64) + 64);
                    v1335 = 4 * v1334[1];
                    v1336 = v1334[9];
                    *(float *)v1336 = v1267;
                    *(float *)(v1336 + 4) = v1268;
                    *(_QWORD *)(v1336 + 8) = 0x3F80000000000000;
                    *(float *)(v1336 + 16) = v1280;
                    *(float *)(v1336 + 20) = v1268;
                    __asm { FMOV            V0.2S, #1.0 }
                    *(_QWORD *)(v1336 + 24) = _D0;
                    *(float *)(v1336 + 32) = v1280;
                    *(float *)(v1336 + 36) = v1281;
                    *(_QWORD *)(v1336 + 40) = 1065353216;
                    *(float *)(v1336 + 48) = v1267;
                    *(float *)(v1336 + 52) = v1281;
                    *(_QWORD *)(v1336 + 56) = 0;
                    *(_OWORD *)(v1333 + 72) = xmmword_19FFB5040;
                    *(_QWORD *)(v1333 + 88) = 0;
                    *(_QWORD *)(v1333 + 96) = 1;
                    v1338 = v1334[8];
                    if (v1338 <= v1335)
                      v1338 = v1335;
                    v1334[7] = 0;
                    v1334[8] = v1338;
                  }
                  ggl::DebugConsole::end(v1162);
                  *(_BYTE *)(a1 + 3372) = 1;
                }

                break;
              }
            }
            else
            {
              if (v1234 >= *(_QWORD *)&v1225)
                v1234 %= *(_QWORD *)&v1225;
              if (v1234 != v1227)
                goto LABEL_1782;
            }
            v1232 = (_QWORD *)*v1232;
            if (!v1232)
              goto LABEL_1782;
          }
        }
      }
    }
  }
LABEL_1550:
  if (!p_buf)
    goto LABEL_1900;
  ((void (*)(std::__shared_weak_count_vtbl **))(*p_buf)[1].~__shared_weak_count_0)(p_buf);
  v1159 = p_buf;
  if (p_buf == &buf)
  {
    v1160 = 4;
    v1159 = &buf;
LABEL_1566:
    (*((void (**)(void))&(*v1159)->~__shared_weak_count + v1160))();
  }
  else if (p_buf)
  {
    v1160 = 5;
    goto LABEL_1566;
  }
  (*(void (**)(_QWORD, char *, __int16 *))(**(_QWORD **)(a1 + 240) + 72))(*(_QWORD *)(a1 + 240), (char *)&v1372 + 1, &v1372);
  v1163 = a1;
  if (*(_BYTE *)(a1 + 3416))
  {
    v1164 = *(_QWORD *)(a1 + 3400);
    if (v1164)
    {
      v1165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1164 + 448))(v1164);
      v1166 = (_QWORD *)(a1 + 3400);
      if (v1165)
        LOBYTE(v1165) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1166 + 456))(*v1166);
      v1163 = a1;
      if ((v1165 & 1) != 0 || *(double *)(a1 + 3288) - *(double *)(a1 + 3424) > 0.5)
      {
        *(_BYTE *)(a1 + 3416) = 0;
        v1167 = *(_QWORD *)(a1 + 136);
        if (v1167)
        {
          v1168 = *(_QWORD *)(v1167 + 120);
          if (v1168)
          {
            *(_QWORD *)&v1387[0] = a1;
            (*(void (**)(uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v1168 + 48))(v1168, v1387, v1166);
            v1163 = a1;
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(a1 + 3416) = 0;
    }
  }
  v1169 = HIBYTE(v1372);
  v1170 = (HIBYTE(v1372) | v1372);
  *(_BYTE *)(v1163 + 3044) = v1372 != 0;
  if (v1170)
  {
    if (v1169 || (v1179 = *(_QWORD *)(a1 + 3448)) == 0)
    {
      v1163 = a1;
      v1176 = atomic_load((unsigned __int8 *)(a1 + 3058));
      if ((v1176 & 1) == 0)
        goto LABEL_1597;
      v1177 = *(_QWORD *)(a1 + 136);
      if (!v1177)
        goto LABEL_1597;
      v1178 = *(_QWORD *)(v1177 + 56);
      if (!v1178)
        goto LABEL_1597;
      *(_QWORD *)&v1387[0] = a1;
      __p[0] = 9;
      (*(void (**)(uint64_t, _OWORD *, _BYTE *))(*(_QWORD *)v1178 + 48))(v1178, v1387, __p);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v1179 + 24))(v1179, 0, 0.0250000004);
      atomic_store(1u, (unsigned __int8 *)(a1 + 3048));
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v1180 = (id)GEOGetVectorKitPerformanceLog_log;
      if (os_signpost_enabled(v1180))
      {
        LOWORD(v1387[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_19F029000, v1180, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LabelsAnimationQueued", (const char *)&unk_1A0189141, (uint8_t *)v1387, 2u);
      }

    }
LABEL_1596:
    v1163 = a1;
    goto LABEL_1597;
  }
  if (!*(_BYTE *)(v1163 + 3385)
    && !atomic_load((unsigned int *)(*(_QWORD *)(v1163 + 264) + 140))
    && !atomic_load((unsigned int *)(*(_QWORD *)(v1163 + 272) + 56))
    && !atomic_load((unsigned int *)(*(_QWORD *)(v1163 + 280) + 64)))
  {
    v1174 = *(_QWORD *)(v1163 + 136);
    if (v1174)
    {
      v1175 = *(_QWORD *)(v1174 + 88);
      if (v1175)
      {
        *(_QWORD *)&v1387[0] = v1163;
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v1175 + 48))(v1175, v1387);
        goto LABEL_1596;
      }
    }
  }
LABEL_1597:
  if (*(_QWORD *)(v1163 + 184))
  {
    v1181 = (grl::IconManager *)objc_msgSend(*(id *)(v1163 + 96), "grlIconManager");
    v1182 = v1181;
    if (v1181)
    {
      grl::IconManager::removeAllPacks(v1181);
      grl::IconManager::clearFontCache(v1182);
    }
    grl::FontManager::clearFontCache(*(grl::FontManager **)objc_msgSend(*(id *)(a1 + 96), "grlFontManager"));
    md::LabelManager::clearScene(a1, 1);
    md::LabelManager::clearSystemCaches((md::LabelManager *)a1);
  }
  else
  {
    *(_BYTE *)(v1163 + 3382) = 1;
  }
  std::recursive_mutex::unlock(v1345);
  v1183 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v1184 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 96);
  do
    v1185 = __ldaxr(v1184);
  while (__stlxr(v1185 + v1183 - v1346, v1184));
}

void sub_19FA20CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;

  if (a34 < 0)
    operator delete(__p);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v35 - 240));
  std::recursive_mutex::unlock(a14);
  v37 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v38 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 96);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 + v37 - a15, v38));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C9440;
  return result;
}

void std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C9440;
}

void std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsRender", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C93F8;
  return result;
}

void std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C93F8;
}

void std::__function::__func<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::renderLabels(md::LayoutContext const&,BOOL &,BOOL &)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRender", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C9C20;
  return result;
}

void std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C9C20;
}

void std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LayoutDisplayLabels", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C9BD8;
  return result;
}

void std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C9BD8;
}

void std::__function::__func<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::layoutDisplayLabels(md::LayoutContext const&)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LayoutDisplayLabels", (const char *)&unk_1A0189141, v1, 2u);
  }

}

_QWORD *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CA010;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CA010;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42CA010;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  *(_QWORD *)((char *)result + 29) = *(_QWORD *)((char *)a1 + 29);
  return result;
}

_QWORD *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42CA010;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[3];
  *(_QWORD *)((char *)a2 + 29) = *(_QWORD *)((char *)result + 29);
  a2[3] = v6;
  return result;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  char v14;
  uint8_t buf[8];
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = v18;
  v16[0] = &off_1E42D9830;
  v17 = v16;
  v18[0] = &off_1E42D9878;
  v21 = v20;
  v20[0] = &off_1E42D9830;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsBgkdLayout", (const char *)&unk_1A0189141, buf, 2u);
  }

  v3 = v17;
  if (v17 == v16)
  {
    v4 = 4;
    v3 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = v19;
  if (v19 == v18)
  {
    v6 = 4;
    v5 = v18;
    goto LABEL_14;
  }
  if (v19)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  md::LabelManager::layoutForStaging(*(_QWORD *)(a1 + 8), a1 + 24);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 8) + 216));
  v7 = (std::recursive_mutex *)(*(_QWORD *)(a1 + 8) + 24);
  std::recursive_mutex::lock(v7);
  v8 = *(_QWORD *)(a1 + 8);
  if (*(unsigned __int8 *)(v8 + 3305) == *(unsigned __int8 *)(a1 + 36))
  {
    *(_WORD *)(v8 + 3384) = 1;
    v9 = atomic_load((unsigned __int8 *)(v8 + 3058));
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 136);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 56);
        if (v11)
        {
          *(_QWORD *)buf = v8;
          v14 = 9;
          (*(void (**)(uint64_t, uint8_t *, char *))(*(_QWORD *)v11 + 48))(v11, buf, &v14);
        }
      }
    }
  }
  std::recursive_mutex::unlock(v7);
  if (!v21)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19FA21934);
  }
  (*(void (**)(_QWORD *))(*v21 + 48))(v21);
  result = v21;
  if (v21 == v20)
  {
    v13 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_19FA21944(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FA21950()
{
  JUMPOUT(0x19FA21958);
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9830;
  return result;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9830;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsBgkdLayout", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9878;
  return result;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9878;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsBgkdLayout", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C9D88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C9D88;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0,std::allocator<md::LabelManager::grabStateFromContext(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = result[1];
  *(_BYTE *)(v1 + 3041) = 1;
  *(_BYTE *)(v1 + 3373) = 1;
  v2 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 136);
    if (v3)
    {
      result = *(_QWORD **)(v3 + 56);
      if (result)
      {
        v5 = v1;
        v4 = 9;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, char *))(*result + 48))(result, &v5, &v4);
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C9B48;
  return result;
}

void std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C9B48;
}

void std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsSynchWithHome", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C9B00;
  return result;
}

void std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C9B00;
}

void std::__function::__func<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0,std::allocator<md::LabelManager::synchWithHomeQueue(md::LayoutContext const*)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsSynchWithHome", (const char *)&unk_1A0189141, v1, 2u);
  }

}

uint64_t ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingFlatStroke::BuildingFlatStrokeMesh::~BuildingFlatStrokeMesh(ggl::BuildingFlatStroke::BuildingFlatStrokeMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::BuildingFlatStroke::BuildingFlatStrokeMesh::~BuildingFlatStrokeMesh(ggl::BuildingFlatStroke::BuildingFlatStrokeMesh *this)
{
  ggl::Mesh::~Mesh((ggl::BuildingFlatStroke::BuildingFlatStrokeMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::BuildingFlatStroke::BuildingFlatStrokeMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::~BuildingFlatStrokePipelineSetup(ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::constantDataIsEnabled(ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::textureIsEnabled(ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void sub_19FA22460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FA22824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::FlyoverMasked::FlyoverPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverMasked::FlyoverPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMasked::FlyoverPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphNight::MorphPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphNight::MorphPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorphNight::MorphPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEDF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEDF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverNight::FlyoverPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverNight::FlyoverPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverNight::FlyoverPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Flyover::FlyoverPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Flyover::FlyoverPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Flyover::FlyoverPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::FlyoverRenderable::FlyoverRenderable(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, _DWORD *a8, _DWORD *a9)
{
  char v13;
  uint64_t v14;
  ggl::Flyover::FlyoverPipelineSetup *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  uint64_t v68;
  int8x16_t v69;
  double v70;
  int8x16_t v71;
  double v72;
  double v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  unint64_t v91;
  _DWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v122;
  __int128 v123;
  _OWORD v128[6];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v13 = *(_BYTE *)(a7 + 96);
  v14 = operator new();
  *(_QWORD *)v14 = &off_1E42B59B0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = "";
  *(_DWORD *)(v14 + 40) = 0;
  *(_DWORD *)(v14 + 56) = 1065353216;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(int64x2_t *)(v14 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v14 + 112) = 0;
  v15 = (ggl::Flyover::FlyoverPipelineSetup *)operator new();
  ggl::Flyover::FlyoverPipelineSetup::FlyoverPipelineSetup(v15);
  v16 = (std::__shared_weak_count *)operator new();
  v17 = v16;
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7D08;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &off_1E42C3938;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFF00000001;
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = -1;
  *(_BYTE *)(a1 + 180) = 1;
  *(_QWORD *)(a1 + 184) = v14;
  *(_QWORD *)(a1 + 192) = v15;
  *(_QWORD *)(a1 + 200) = v16;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v123 = _Q0;
  *(_OWORD *)(a1 + 232) = _Q0;
  v122 = (_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(_QWORD *)a1 = &off_1E42C5B58;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_BYTE *)(a1 + 312) = v13;
  v26 = *(_QWORD *)(a1 + 192);
  v27 = *(uint64_t **)(v26 + 64);
  v27[1] = 0;
  v28 = *a2;
  *v27 = *a2;
  v29 = *(_QWORD **)(v26 + 160);
  v30 = a2[1];
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (std::__shared_weak_count *)v29[1];
  *v29 = v28;
  v29[1] = v30;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v36->__shared_owners_ = 0;
  v37 = (unint64_t *)&v36->__shared_owners_;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
  v38 = ggl::BufferData::BufferData((uint64_t)&v36[1], qword_1EE550AB8, 2, 1, 6, 1);
  v36[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
  v39 = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v39 + 16) = v38;
  *(_QWORD *)(v39 + 24) = 0;
  v40 = *(_QWORD *)(v26 + 160);
  do
    v41 = __ldxr(v37);
  while (__stxr(v41 + 1, v37));
  v42 = *(std::__shared_weak_count **)(v40 + 24);
  *(_QWORD *)(v40 + 16) = v38;
  *(_QWORD *)(v40 + 24) = v36;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  do
    v45 = __ldaxr(v37);
  while (__stlxr(v45 - 1, v37));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  v46 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v46->__shared_owners_ = 0;
  v47 = (unint64_t *)&v46->__shared_owners_;
  v46->__shared_weak_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
  v48 = ggl::BufferData::BufferData((uint64_t)&v46[1], qword_1EE550C18, 2, 1, 6, 1);
  v46[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
  v49 = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v49 + 32) = v48;
  *(_QWORD *)(v49 + 40) = 0;
  v50 = *(_QWORD *)(v26 + 160);
  do
    v51 = __ldxr(v47);
  while (__stxr(v51 + 1, v47));
  v52 = *(std::__shared_weak_count **)(v50 + 40);
  *(_QWORD *)(v50 + 32) = v48;
  *(_QWORD *)(v50 + 40) = v46;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  do
    v55 = __ldaxr(v47);
  while (__stlxr(v55 - 1, v47));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  v56 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
  v58 = ggl::BufferData::BufferData((uint64_t)&v56[1], qword_1EE550B78, 2, 1, 6, 1);
  v56[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
  v59 = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v59 + 48) = v58;
  *(_QWORD *)(v59 + 56) = 0;
  v60 = *(_QWORD *)(v26 + 160);
  do
    v61 = __ldxr(v57);
  while (__stxr(v61 + 1, v57));
  v62 = *(std::__shared_weak_count **)(v60 + 56);
  *(_QWORD *)(v60 + 48) = v58;
  *(_QWORD *)(v60 + 56) = v56;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  do
    v65 = __ldaxr(v57);
  while (__stlxr(v65 - 1, v57));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  v66 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v66->__shared_owners_ = 0;
  v67 = (unint64_t *)&v66->__shared_owners_;
  v66->__shared_weak_owners_ = 0;
  v66->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
  v68 = ggl::BufferData::BufferData((uint64_t)&v66[1], qword_1EE550BD8, 2, 1, 6, 1);
  v66[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
  v76 = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v76 + 64) = v68;
  *(_QWORD *)(v76 + 72) = 0;
  v77 = *(_QWORD *)(v26 + 160);
  do
    v78 = __ldxr(v67);
  while (__stxr(v78 + 1, v67));
  v79 = *(std::__shared_weak_count **)(v77 + 72);
  *(_QWORD *)(v77 + 64) = v68;
  *(_QWORD *)(v77 + 72) = v66;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  do
    v82 = __ldaxr(v67);
  while (__stlxr(v82 - 1, v67));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
  **(_QWORD **)(v26 + 96) = a2[32];
  altitude::util::computeLocalClipPlanes(a4, (uint64_t)v128, 1.04999995, v69, v70, v71, v72, v73, v74, v75);
  v83 = *(_QWORD *)(v26 + 64);
  v84 = *(_QWORD **)(v83 + 32);
  v85 = v84[1];
  v86 = (_OWORD *)v84[9];
  v87 = v128[1];
  *v86 = v128[0];
  v86[1] = v87;
  v88 = v128[3];
  v86[2] = v128[2];
  v86[3] = v88;
  v89 = v128[5];
  v86[4] = v128[4];
  v86[5] = v89;
  if (v84[8] > v85)
    v85 = v84[8];
  v84[7] = 0;
  v84[8] = v85;
  v90 = *(_QWORD **)(v83 + 64);
  v91 = v90[1];
  v92 = (_DWORD *)v90[9];
  *v92 = *a9;
  v92[1] = a9[1];
  v92[2] = *a8;
  v92[3] = a8[1];
  if (v90[8] > v91)
    v91 = v90[8];
  v90[7] = 0;
  v90[8] = v91;
  v93 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v93->__shared_owners_ = 0;
  v94 = (unint64_t *)&v93->__shared_owners_;
  v93->__shared_weak_owners_ = 0;
  v93->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
  v95 = v93 + 1;
  std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4UVMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::CommonMesh::Pos4UVMesh*>((uint64_t)&v93[1], (uint64_t)"/meshes/flyover", *(_QWORD *)a5, *(std::__shared_weak_count **)(a5 + 8), a6);
  do
    v96 = __ldxr(v94);
  while (__stxr(v96 + 1, v94));
  do
    v97 = __ldxr(v94);
  while (__stxr(v97 + 1, v94));
  v98 = *(std::__shared_weak_count **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v95;
  *(_QWORD *)(a1 + 224) = v93;
  if (v98)
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(_QWORD *)(a1 + 184);
  if (v101)
    *(_QWORD *)(v101 + 64) = v95;
  do
    v102 = __ldaxr(v94);
  while (__stlxr(v102 - 1, v94));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
  if (*(_BYTE *)(a1 + 312))
    v103 = a2 + 31;
  else
    v103 = a2 + 30;
  *(_QWORD *)(a1 + 208) = *v103;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
  *(_OWORD *)(a1 + 232) = v123;
  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 64) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) = *(_QWORD *)(a1 + 208);
  do
    v104 = __ldaxr(v94);
  while (__stlxr(v104 - 1, v94));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
  *(_QWORD *)a1 = &off_1E42C4E60;
  v105 = *(_QWORD **)(a1 + 256);
  v106 = *(_QWORD *)(a1 + 264) - (_QWORD)v105;
  if (v106)
  {
    if (v106 >= 9)
      *(_QWORD *)(a1 + 264) = v105 + 1;
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)v122, 1uLL);
    v105 = (_QWORD *)*v122;
  }
  *v105 = a7;
  v108 = a2[2];
  v107 = a2[3];
  if (v107)
  {
    v109 = (unint64_t *)(v107 + 8);
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v111 = *(std::__shared_weak_count **)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v108;
  *(_QWORD *)(a1 + 288) = v107;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v115 = a2[4];
  v114 = a2[5];
  if (v114)
  {
    v116 = (unint64_t *)(v114 + 8);
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
  }
  v118 = *(std::__shared_weak_count **)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v115;
  *(_QWORD *)(a1 + 304) = v114;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 192), *(_QWORD *)(a1 + 280), *(std::__shared_weak_count **)(a1 + 288));
  return a1;
}

