uint64_t gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, BOOL *a3, float a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unint64_t v44;
  unsigned int v45;
  _WORD *v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unint64_t v73;
  unsigned int v74;
  _WORD *v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  unsigned int v78;
  int *v79;
  uint64_t v80;
  unsigned __int8 v82;
  unsigned __int8 v83;

  v5 = (int)a4;
  if ((int)a4 >= 0x17)
    v6 = 23;
  else
    v6 = v5;
  if (v5 >= 0x16)
    v7 = 22;
  else
    v7 = v5;
  v8 = a1 + 16 * a2;
  v11 = *(_QWORD *)(v8 + 16);
  v10 = v8 + 16;
  v9 = v11;
  if (!v11)
  {
    if (a3)
      *a3 = 0;
    return *(unsigned int *)gss::defaultValueForKey<gss::PropertyID,unsigned int>(319);
  }
  v13 = v7 + 1;
  v14 = a1 + 16 * a2;
  v15 = *(unsigned __int16 *)(v14 + 56);
  if (!*(_WORD *)(v14 + 56))
  {
    v83 = 1;
    v82 = 1;
LABEL_126:
    v18 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 0x13Fu, v6, &v83);
LABEL_127:
    v17 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(*(_QWORD *)v10 + 72), 0x13Fu, v13, &v82);
    if (a3)
LABEL_128:
      *a3 = (v83 | v82) != 0;
    goto LABEL_129;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(uint64_t **)(v14 + 48);
  v20 = &v19[v15];
  while (2)
  {
    LOBYTE(v21) = 0;
    while (1)
    {
      v23 = *v19;
      if ((v21 & 1) != 0)
      {
        v21 = 1;
        if ((v16 & 1) != 0)
          goto LABEL_89;
        goto LABEL_67;
      }
      v24 = *(uint64_t **)(v23 + 72);
      if (!v24
        || (v25 = *((unsigned __int8 *)v24 + v6 + 16),
            v26 = *v24,
            v27 = v26 + 80 * v25,
            v28 = *(unsigned __int16 *)(v27 + 10),
            !*(_WORD *)(v27 + 10)))
      {
LABEL_31:
        v21 = 0;
        if ((v16 & 1) != 0)
          goto LABEL_89;
        goto LABEL_67;
      }
      v29 = *(unsigned __int16 **)v27;
      if (!*(_BYTE *)(v27 + 15))
      {
        v38 = 2 * v28;
        v30 = *(unsigned __int16 **)v27;
        while (*v30 != 319)
        {
          ++v30;
          v38 -= 2;
          if (!v38)
          {
            LODWORD(v30) = (_DWORD)v29 + 2 * v28;
            break;
          }
        }
LABEL_37:
        if ((unsigned __int16)(((_DWORD)v30 - (_DWORD)v29) >> 1) == (_DWORD)v28)
          goto LABEL_31;
        goto LABEL_38;
      }
      v30 = *(unsigned __int16 **)v27;
      v31 = v28;
      if (v28 >= 0x1E)
      {
        do
        {
          v34 = v31 >> 1;
          v35 = &v30[v31 >> 1];
          v37 = *v35;
          v36 = v35 + 1;
          v31 += ~(v31 >> 1);
          if (v37 < 0x13F)
            v30 = v36;
          else
            v31 = v34;
        }
        while (v31);
        if (v30 == &v29[v28] || *v30 != 319)
          goto LABEL_31;
        goto LABEL_37;
      }
      v32 = 0;
      while (1)
      {
        v33 = v29[v32];
        if (v33 >= 0x13F)
          break;
        if (v28 == ++v32)
          goto LABEL_31;
      }
      v51 = (unsigned __int16)v32;
      if (v33 != 319)
        v51 = v28;
      if (v51 == (_DWORD)v28)
        goto LABEL_31;
LABEL_38:
      v39 = v26 + 80 * v25;
      v40 = *(unsigned __int16 *)(v39 + 42);
      if (!*(_WORD *)(v39 + 42))
        goto LABEL_52;
      v41 = v26 + 80 * v25;
      v42 = *(_QWORD *)(v41 + 32);
      if (!*(_BYTE *)(v41 + 47))
      {
        v52 = 2 * v40;
        v43 = *(unsigned __int16 **)(v41 + 32);
        while (*v43 != 319)
        {
          ++v43;
          v52 -= 2;
          if (!v52)
          {
            LODWORD(v43) = v42 + 2 * v40;
            break;
          }
        }
LABEL_61:
        LODWORD(v43) = (unsigned __int16)(((_DWORD)v43 - v42) >> 1);
LABEL_64:
        v50 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if ((_DWORD)v43 != (_DWORD)v40)
          v50 = (int *)(v42 + *(unsigned __int16 *)(v26 + 80 * v25 + 40) + 4 * v43);
        goto LABEL_66;
      }
      v43 = *(unsigned __int16 **)(v41 + 32);
      v44 = v40;
      if (v40 < 0x1E)
      {
        v43 = 0;
        while (1)
        {
          v45 = *(unsigned __int16 *)(v42 + 2 * (_QWORD)v43);
          if (v45 >= 0x13F)
            break;
          v43 = (unsigned __int16 *)((char *)v43 + 1);
          if ((unsigned __int16 *)v40 == v43)
            goto LABEL_52;
        }
        LODWORD(v43) = (unsigned __int16)v43;
        if (v45 != 319)
          LODWORD(v43) = v40;
        goto LABEL_64;
      }
      do
      {
        v46 = (_WORD *)(v44 >> 1);
        v47 = &v43[v44 >> 1];
        v49 = *v47;
        v48 = v47 + 1;
        v44 += ~(v44 >> 1);
        if (v49 < 0x13F)
          v43 = v48;
        else
          v44 = (unint64_t)v46;
      }
      while (v44);
      if (v43 == (unsigned __int16 *)(v42 + 2 * v40))
      {
LABEL_52:
        v50 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        goto LABEL_66;
      }
      v50 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      if (*v43 == 319)
        goto LABEL_61;
LABEL_66:
      v18 = *v50;
      v21 = 1;
      if ((v16 & 1) != 0)
      {
LABEL_89:
        if (v21)
          goto LABEL_132;
        goto LABEL_117;
      }
LABEL_67:
      v53 = *(uint64_t **)(v23 + 72);
      if (!v53)
        goto LABEL_13;
      v54 = *((unsigned __int8 *)v53 + v13 + 16);
      v55 = *v53;
      v56 = v55 + 80 * v54;
      v57 = *(unsigned __int16 *)(v56 + 10);
      if (!*(_WORD *)(v56 + 10))
      {
        v22 = 0;
        goto LABEL_12;
      }
      v58 = *(unsigned __int16 **)v56;
      if (!*(_BYTE *)(v56 + 15))
      {
        v67 = 2 * v57;
        v59 = *(unsigned __int16 **)v56;
        while (*v59 != 319)
        {
          ++v59;
          v67 -= 2;
          if (!v67)
          {
            LODWORD(v59) = (_DWORD)v58 + 2 * v57;
            break;
          }
        }
LABEL_86:
        v22 = (unsigned __int16)(((_DWORD)v59 - (_DWORD)v58) >> 1);
        goto LABEL_12;
      }
      v59 = *(unsigned __int16 **)v56;
      v60 = v57;
      if (v57 >= 0x1E)
      {
        do
        {
          v63 = v60 >> 1;
          v64 = &v59[v60 >> 1];
          v66 = *v64;
          v65 = v64 + 1;
          v60 += ~(v60 >> 1);
          if (v66 < 0x13F)
            v59 = v65;
          else
            v60 = v63;
        }
        while (v60);
        if (v59 == &v58[v57] || *v59 != 319)
          goto LABEL_13;
        goto LABEL_86;
      }
      v61 = 0;
      while (1)
      {
        v62 = v58[v61];
        if (v62 >= 0x13F)
          break;
        if (v57 == ++v61)
          goto LABEL_13;
      }
      v22 = (unsigned __int16)v61;
      if (v62 != 319)
        v22 = v57;
LABEL_12:
      if (v22 != (_DWORD)v57)
        break;
LABEL_13:
      v16 = 0;
      if (++v19 == v20)
      {
        v83 = 1;
        v82 = 1;
        if ((v21 & 1) == 0)
          goto LABEL_126;
        goto LABEL_127;
      }
    }
    v68 = v55 + 80 * v54;
    v69 = *(unsigned __int16 *)(v68 + 42);
    if (*(_WORD *)(v68 + 42))
    {
      v70 = v55 + 80 * v54;
      v71 = *(_QWORD *)(v70 + 32);
      if (!*(_BYTE *)(v70 + 47))
      {
        v80 = 2 * v69;
        v72 = *(unsigned __int16 **)(v70 + 32);
        while (*v72 != 319)
        {
          ++v72;
          v80 -= 2;
          if (!v80)
          {
            LODWORD(v72) = v71 + 2 * v69;
            goto LABEL_111;
          }
        }
        goto LABEL_111;
      }
      v72 = *(unsigned __int16 **)(v70 + 32);
      v73 = v69;
      if (v69 < 0x1E)
      {
        v72 = 0;
        while (1)
        {
          v74 = *(unsigned __int16 *)(v71 + 2 * (_QWORD)v72);
          if (v74 >= 0x13F)
            break;
          v72 = (unsigned __int16 *)((char *)v72 + 1);
          if ((unsigned __int16 *)v69 == v72)
            goto LABEL_105;
        }
        LODWORD(v72) = (unsigned __int16)v72;
        if (v74 != 319)
          LODWORD(v72) = v69;
LABEL_114:
        v79 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if ((_DWORD)v72 != (_DWORD)v69)
          v79 = (int *)(v71 + *(unsigned __int16 *)(v55 + 80 * v54 + 40) + 4 * v72);
LABEL_116:
        v17 = *v79;
        if ((v21 & 1) != 0)
          goto LABEL_132;
        goto LABEL_117;
      }
      do
      {
        v75 = (_WORD *)(v73 >> 1);
        v76 = &v72[v73 >> 1];
        v78 = *v76;
        v77 = v76 + 1;
        v73 += ~(v73 >> 1);
        if (v78 < 0x13F)
          v72 = v77;
        else
          v73 = (unint64_t)v75;
      }
      while (v73);
      if (v72 != (unsigned __int16 *)(v71 + 2 * v69))
      {
        v79 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (*v72 != 319)
          goto LABEL_116;
LABEL_111:
        LODWORD(v72) = (unsigned __int16)(((_DWORD)v72 - v71) >> 1);
        goto LABEL_114;
      }
    }
LABEL_105:
    v17 = gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    if ((v21 & 1) != 0)
    {
LABEL_132:
      v83 = 1;
      v82 = 1;
      if (a3)
        goto LABEL_128;
      goto LABEL_129;
    }
LABEL_117:
    ++v19;
    v16 = 1;
    if (v19 != v20)
      continue;
    break;
  }
  v83 = 1;
  v82 = 1;
  v18 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 0x13Fu, v6, &v83);
  if (a3)
    goto LABEL_128;
LABEL_129:
  if ((float)(a4 - (float)v6) >= 1.0)
    return v17;
  else
    return v18;
}

void gdc::ComponentStorageWrapper<md::components::RenderableInjected>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::RenderableInjected>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::RenderableInjected>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::RenderableInjected>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5410;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISV_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5410;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEEclEOSU_(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if ((*a2 | 4) == 4)
  {
    v2 = *(_QWORD **)(a1 + 8);
    v3 = (std::__shared_weak_count *)v2[38];
    v2[37] = 0;
    v2[38] = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)v2[40];
    v2[39] = 0;
    v2[40] = 0;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 16);
  if (v2 != *(void **)(a2 + 32))
    free(v2);
}

void gdc::Registry::add<md::components::ReferencedAssetInstance,md::components::CustomRenderState,md::components::StencilBucket,md::components::IntendedSceneLayer,md::components::NonTiled,md::components::CustomZIndex,md::components::OcclusionType>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, _BYTE *a5, _BYTE *a6, _DWORD *a7, _BYTE *a8)
{
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;

  v16 = (uint64_t *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(a1);
  gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::emplace(v16, a2, a3);
  v17 = (uint64_t *)gdc::Registry::storage<md::components::CustomRenderState>(a1);
  gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(v17, a2, a4);
  v18 = (uint64_t *)gdc::Registry::storage<md::components::StencilBucket>(a1);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v18, a2, a5);
  v19 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a1);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v19, a2, a6);
  v20 = (uint64_t *)gdc::Registry::storage<md::components::NonTiled>(a1);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v20, a2);
  v21 = (uint64_t *)gdc::Registry::storage<md::components::CustomZIndex>(a1);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v21, a2, a7);
  v22 = (uint64_t *)gdc::Registry::storage<md::components::OcclusionType>(a1);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v22, a2, a8);
}

gdc::Registry **std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](gdc::Registry **a1)
{
  gdc::Registry *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::Registry::~Registry(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a2;
  else
    v4 = *(uint64_t **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v19 = v12[1];
            if (v8 == v19)
            {
              v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *((unsigned __int8 *)v12 + 39);
              else
                v21 = v12[3];
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22)
                      return v12;
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v15 = v12[1];
          if (v8 == v15)
          {
            v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v12 + 39);
            else
              v17 = v12[3];
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v7)
              v15 %= *(_QWORD *)&v7;
            if (v15 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

void ___ZL27GEOGetVectorKitPuckLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "PuckLogic");
  v1 = (void *)GEOGetVectorKitPuckLogicLog(void)::log;
  GEOGetVectorKitPuckLogicLog(void)::log = (uint64_t)v0;

}

double ___ZN2md9PuckLogic13animatePuckUpERKN3geo9Mercator3IdEE_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2;
  double v3;
  double v4;
  float64x2_t v5;
  double v6;
  float64x2_t v7;
  double result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = *(double *)(a1 + 56) + (*(double *)(a1 + 80) - *(double *)(a1 + 56)) * v3;
  v5 = vmlaq_n_f64(*(float64x2_t *)(a1 + 40), vsubq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a1 + 40)), v3);
  v6 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v5, v5)) + v4 * v4);
  v7 = vmulq_n_f64(v5, v6);
  result = v6 * v4;
  *(float64x2_t *)(v2 + 456) = v7;
  *(double *)(v2 + 472) = result;
  return result;
}

void ___ZN2md9PuckLogic13animatePuckUpERKN3geo9Mercator3IdEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 440);
  *(_QWORD *)(v1 + 440) = 0;

}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D53C8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D53C8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5380;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5380;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::PuckContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0AC8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40EA5CE5F4);
  return a1;
}

void gdc::ManagedObjectHolder<md::PuckContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0AC8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C40EA5CE5F4);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::PuckContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F5A1B4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  md::MuninRoadLabelCreationParams *v2;

  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams(v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 312);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 296);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 272);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ggl::RenderState *,std::shared_ptr<ggl::RenderState>::__shared_ptr_default_delete<ggl::RenderState,ggl::RenderState>,std::allocator<ggl::RenderState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::RenderState *,std::shared_ptr<ggl::RenderState>::__shared_ptr_default_delete<ggl::RenderState,ggl::RenderState>,std::allocator<ggl::RenderState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::SelectedRoadTileResourceFetcher::~SelectedRoadTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::SelectedRoadTileResourceFetcher::tileKey()
{
  return GEORoadSelectionTileKeyMake();
}

_QWORD *md::LabelSettings_Navigation::setDetachedCamera(md::LabelSettings_Navigation *this, unsigned int a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E42C9EF0;
  v4[1] = this;
  v4[2] = a2;
  v5 = v4;
  md::LabelManager::queueCommand(this, 22, 1, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_19F5A1D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::DaVinciCenterLineRoadsRenderLayer::renderablesWillEnterView(uint64_t a1, __n128 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  md::RoadLayer *v8;
  md::RoadLayer *v9;
  md::RoadLayer *v10;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      v7 = *(_QWORD **)(*(_QWORD *)v4 + 384);
      v8 = (md::RoadLayer *)v7[92];
      if (v8)
        a2 = md::RoadStyling::subscribeLayer((md::RoadStyling *)*(_QWORD *)(a1 + 400), v8, a2);
      v9 = (md::RoadLayer *)v7[102];
      if (v9)
        a2 = md::RoadStyling::subscribeLayer((md::RoadStyling *)*(_QWORD *)(a1 + 400), v9, a2);
      v10 = (md::RoadLayer *)v7[93];
      if (v10)
        a2 = md::RoadStyling::subscribeLayer((md::RoadStyling *)*(_QWORD *)(a1 + 400), v10, a2);
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void md::DaVinciCenterLineRoadsRenderLayer::renderablesWillLeaveView(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *(_QWORD **)(*(_QWORD *)v2 + 384);
      v6 = v5[92];
      if (v6)
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 400), v6);
      v7 = v5[102];
      if (v7)
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 400), v7);
      v8 = v5[93];
      if (v8)
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 400), v8);
      v2 += 8;
    }
    while (v2 != v3);
  }
}

void md::DaVinciCenterLineRoadsRenderLayer::updateWithContext(int a1, uint64_t **a2, md::LayoutContext *this)
{
  uint64_t v5;

  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::updateZScaleAndOffset(a2, this, 0.0);
  md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::updateWithContext(v5, a2, (uint64_t)this);
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3C70;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3C28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3C28;
  a2[1] = v2;
  return result;
}

uint64_t md::DaVinciCenterLineRoadsRenderLayer::DaVinciCenterLineRoadsRenderLayer(uint64_t a1, int a2, uint64_t a3, void *a4, float a5, float a6)
{
  VKSharedResources *v9;
  id v11;
  __int16 v12;
  id v13;
  const RenderTargetFormat *v14;
  uint64_t v15;
  VKSharedResources *v16;
  _WORD *v17;
  void *v18;
  int64_t v19;
  uint64_t v20;
  const RenderTargetFormat *v21;
  id v22;
  char *v23;
  char *v24;
  __int128 v25;
  md::CartographicTiledRenderResources *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  id v30;
  RenderTargetFormat *v31;
  VKSharedResources *v32;
  md::PatternedSharedResources *v33;
  md::PatternedSharedResources *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  md::RoadSharedResources *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  md::RoadSharedResources *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  char v58;
  id v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  LODWORD(v9) = a2;
  v11 = a4;
  v12 = a201[((_BYTE)v9 - 33)];
  v13 = *(id *)(a3 + 104);
  v59 = v11;
  v14 = (const RenderTargetFormat *)objc_msgSend(v13, "format");
  if (v11)
  {
    objc_msgSend(v11, "standardCommandBufferSelector");
    v15 = v62;
  }
  else
  {
    v15 = 0;
    v62 = 0;
    v63 = 0;
  }
  commandBufferLocationsForRenderLayerType(&v60, (int)v9, v15);
  v16 = (VKSharedResources *)v11;
  v17 = operator new(2uLL);
  *v17 = v12;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v18 = (void *)v60;
  v19 = *((_QWORD *)&v60 + 1) - v60;
  if (*((_QWORD *)&v60 + 1) != (_QWORD)v60)
  {
    v58 = (char)v9;
    if (v19 < 0)
      abort();
    v9 = v16;
    v20 = a3;
    v21 = v14;
    v22 = v13;
    v23 = (char *)operator new(*((_QWORD *)&v60 + 1) - v60);
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = v23;
    v24 = &v23[2 * (v19 >> 1)];
    *(_QWORD *)(a1 + 24) = v24;
    memcpy(v23, v18, v19);
    *(_QWORD *)(a1 + 16) = v24;
    v13 = v22;
    v14 = v21;
    a3 = v20;
    v16 = v9;
    LOBYTE(v9) = v58;
  }
  *(_QWORD *)&v25 = v17;
  *((_QWORD *)&v25 + 1) = v17 + 1;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = (_BYTE)v9;
  *(_QWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB3900;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v25;
  *(_QWORD *)(a1 + 336) = v17 + 1;
  *(_DWORD *)(a1 + 344) = 2;
  *(_QWORD *)a1 = off_1E42AA220;
  *(_QWORD *)(a1 + 352) = 0;
  v26 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v26, v16, v14);
  *(_QWORD *)(a1 + 352) = v26;

  if (v18)
  {
    *((_QWORD *)&v60 + 1) = v18;
    operator delete(v18);
  }
  v27 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  *(_QWORD *)a1 = &off_1E42A9418;
  v30 = *(id *)(a3 + 104);
  v31 = (RenderTargetFormat *)objc_msgSend(v30, "format");
  v32 = v16;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  v33 = (md::PatternedSharedResources *)operator new();
  md::PatternedSharedResources::PatternedSharedResources(v33, (const StandardLibrary *)-[VKSharedResources shaderLibrary](v32, "shaderLibrary"), v31, *(unsigned __int8 *)(-[VKSharedResources gglDevice](v32, "gglDevice") + 20), 0);
  v34 = *(md::PatternedSharedResources **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v33;
  if (v34)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v34);
    MEMORY[0x1A1AF4E00]();
  }
  v35 = (uint64_t *)operator new();
  v36 = -[VKSharedResources shaderLibrary](v32, "shaderLibrary");
  v37 = -[VKSharedResources isoAlphaAtlas](v32, "isoAlphaAtlas");
  v38 = -[VKSharedResources distanceAtlas](v32, "distanceAtlas");
  if (v59)
    -[VKSharedResources textureManager](v32, "textureManager");
  else
    v60 = 0uLL;
  md::RoadSharedResources::RoadSharedResources(v35, v36, v37, v38, (uint64_t *)&v60, (__int128 *)v31->colorFormats, 1, a5, a6);
  v39 = *(md::RoadSharedResources **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v35;
  if (v39)
  {
    md::RoadSharedResources::~RoadSharedResources(v39);
    MEMORY[0x1A1AF4E00]();
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (uint64_t *)operator new();
  v44 = -[VKSharedResources shaderLibrary](v32, "shaderLibrary");
  v45 = -[VKSharedResources isoAlphaAtlas](v32, "isoAlphaAtlas");
  v46 = -[VKSharedResources distanceAtlas](v32, "distanceAtlas");
  if (v59)
  {
    -[VKSharedResources textureManager](v32, "textureManager");
  }
  else
  {
    v62 = 0;
    v63 = 0;
  }
  md::RoadSharedResources::RoadSharedResources(v43, v44, v45, v46, &v62, (__int128 *)v31->colorFormats, 1, a5, a6);
  v47 = *(md::RoadSharedResources **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v43;
  if (v47)
  {
    md::RoadSharedResources::~RoadSharedResources(v47);
    MEMORY[0x1A1AF4E00]();
  }
  v48 = v63;
  if (v63)
  {
    v49 = (unint64_t *)&v63->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  v51 = (_QWORD *)operator new();
  *v51 = 0;
  v51[1] = 0;
  v51[2] = 0;
  v52 = (void **)(a1 + 408);
  *(_QWORD *)(a1 + 400) = v51;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  if (v59)
  {
    -[VKSharedResources standardCommandBufferSelector](v32, "standardCommandBufferSelector");
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    *(_QWORD *)(a1 + 392) = v60;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
  }
  commandBufferLocationsForRenderLayerType(&v60, *(unsigned __int8 *)(a1 + 34), *(_QWORD *)(a1 + 392));
  v56 = *v52;
  if (*v52)
  {
    *(_QWORD *)(a1 + 416) = v56;
    operator delete(v56);
    *v52 = 0;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_OWORD *)v52 = v60;
  *(_QWORD *)(a1 + 424) = v61;

  return a1;
}

void sub_19F5A2548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  _QWORD *v16;
  md::DaVinciCenterLineRoadsRenderResources *v17;
  void **v18;
  void *v20;
  void **v21;

  v20 = *v18;
  if (*v18)
  {
    v16[52] = v20;
    operator delete(v20);
  }
  v21 = (void **)v16[50];
  v16[50] = 0;
  if (v21)
    std::default_delete<md::RoadStyling>::operator()[abi:nn180100](v21);
  md::DaVinciCenterLineRoadsRenderResources::~DaVinciCenterLineRoadsRenderResources(v17);
  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(v16);

  _Unwind_Resume(a1);
}

void md::DaVinciCenterLineRoadsRenderResources::~DaVinciCenterLineRoadsRenderResources(md::DaVinciCenterLineRoadsRenderResources *this)
{
  md::RoadSharedResources *v2;
  md::RoadSharedResources *v3;
  md::PatternedSharedResources *v4;

  v2 = (md::RoadSharedResources *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    md::RoadSharedResources::~RoadSharedResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (md::RoadSharedResources *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    md::RoadSharedResources::~RoadSharedResources(v3);
    MEMORY[0x1A1AF4E00]();
  }
  v4 = *(md::PatternedSharedResources **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v4);
    MEMORY[0x1A1AF4E00]();
  }
}

void md::ScreenLabelFeature::~ScreenLabelFeature(md::ScreenLabelFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E4295F20;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  md::LabelFeature::~LabelFeature(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E4295F20;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  md::LabelFeature::~LabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ScreenLabelFeature::labelTypeAtPosition()
{
  return 15;
}

_BYTE *md::ScreenLabelFeature::newRootPart(uint64_t a1, uint64_t a2)
{
  VKImage *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  unsigned __int8 v22;
  _BYTE *v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (*(_QWORD *)(a1 + 200))
    goto LABEL_19;
  v4 = [VKImage alloc];
  v5 = objc_msgSend(*(id *)(a1 + 192), "image");
  objc_msgSend(*(id *)(a1 + 192), "scale");
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 112);
  v9 = *(_QWORD **)v8;
  v10 = *(_QWORD **)(v8 + 8);
  if (v9 != v10)
  {
    while (*v9 != 0x6F66BE14E10A8F81)
    {
      v9 += 5;
      if (v9 == v10)
        goto LABEL_15;
    }
  }
  if (v9 == v10)
  {
LABEL_15:
    v11 = 0;
  }
  else
  {
    v11 = v9[3];
    v12 = (std::__shared_weak_count *)v9[4];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v33 = v11;
      v34 = v12;
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_17;
    }
  }
  v33 = v11;
  v34 = 0;
LABEL_17:
  v18 = -[VKImage initWithCGImage:scale:resourceStore:](v4, "initWithCGImage:scale:resourceStore:", v5, &v33, v7);
  v19 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v18;

  if (v34)
    std::__shared_weak_count::__release_weak(v34);
LABEL_19:
  v20 = (char *)operator new(0xD0uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_1E428A0D0;
  v21 = *(id *)(a1 + 200);
  *((_QWORD *)v20 + 4) = &off_1E42B5430;
  *((_QWORD *)v20 + 5) = 0;
  *((_QWORD *)v20 + 7) = 0;
  *((_QWORD *)v20 + 8) = 0;
  *(_OWORD *)(v20 + 72) = xmmword_19FFB2E30;
  *(_OWORD *)(v20 + 88) = xmmword_19FFB2E30;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *((_QWORD *)v20 + 19) = 0;
  *((_QWORD *)v20 + 20) = 1065353216;
  v20[168] = 0;
  *((_QWORD *)v20 + 3) = &off_1E426F420;
  *((_QWORD *)v20 + 22) = &off_1E42B5430;
  *((_QWORD *)v20 + 23) = v21;
  v20[200] = 0;
  v31 = v20 + 24;
  v32 = (std::__shared_weak_count *)v20;
  md::LabelImageLoader::enqueueIconForRendering(*(_QWORD **)(a2 + 264), &v31);
  {
    v30 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v30, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v23 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
  v24 = md::IconLabelPart::IconLabelPart((uint64_t)v23, &v31);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v25 + 176))(v25, 3, v24);
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v23 + 816))(v23, *(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 1));
  v23[664] = 0;
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v23;
}

void sub_19F5A2B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  _Unwind_Resume(exception_object);
}

void sub_19F5A2BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::updateDynamicStyling(md::LabelFeature *this, LabelManager *a2, md::Label *a3)
{
  return 0;
}

uint64_t md::ScreenLabelFeature::isFeatureFromTileSource(md::ScreenLabelFeature *this)
{
  return 0;
}

uint64_t md::ScreenLabelFeature::labelPoint(uint64_t a1)
{
  return a1 + 216;
}

uint64_t md::ScreenLabelFeature::labelFeatureType(md::ScreenLabelFeature *this)
{
  return 6;
}

BOOL md::LabelFeature::hasIdentifier(uint64_t a1, _DWORD *a2)
{
  return *a2 != 0;
}

uint64_t md::ScreenLabelFeature::debugString@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21 = v7;
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v21 + *(_QWORD *)(v21 - 24));
  std::ios_base::init(v9, &v22);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v21 = v4 + 24;
  v29[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v22 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)"  ScreenFeature type=", 21);
  v11 = gss::to_string(**(unsigned __int8 **)(a1 + 208));
  v12 = strlen(v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)"\n", 1);
  if ((v28 & 0x10) != 0)
  {
    v14 = *((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1) < v25)
    {
      *((_QWORD *)&v27 + 1) = v25;
      v14 = v25;
    }
    v15 = (const void **)&v24;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      v13 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    v15 = (const void **)v23;
    v14 = v23[2];
  }
  v16 = *v15;
  v13 = v14 - (_QWORD)*v15;
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *((_QWORD *)a2 + 1) = v13;
    *((_QWORD *)a2 + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)a2 = v19;
    a2 = v19;
    goto LABEL_15;
  }
  a2[23] = v13;
  if (v13)
LABEL_15:
    memmove(a2, v16, v13);
LABEL_16:
  a2[v13] = 0;
  v21 = *v6;
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = v6[3];
  v22 = v10 + 16;
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v29);
}

void sub_19F5A2E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19F5A2E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::publicName(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::publicLocale(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::publicNameCount(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::ScreenLabelFeature::restyleFeature(md::ScreenLabelFeature *this, md::LabelFeatureStyler **a2)
{
  return md::LabelFeatureStyler::restyleFeature(a2[37], this);
}

void md::ScreenLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  uint64_t v16[3];
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(&v13, a1, 0);
  md::createFeatureAttributeSet((gss::Allocator *)v16, &v13);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v15, a3, v16, 0);
  if (v16[0])
  {
    v16[1] = v16[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v16[0], v16[2] - v16[0]);
  }
  v5 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    v6 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v15);
  }
  else
  {
    if (v5)
    {
      *v5 = v15;
      v15 = 0uLL;
    }
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F5A2FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::ScreenLabelFeature::styleAttributes(_QWORD *a1@<X0>, void ***a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  const FeatureStyleAttributes *v6;
  char *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  {
    v25 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 544))(a1, &v26);
  v5 = v26;
  if (v26 == v27)
  {
    v22 = a1[34];
    *a2 = (void **)a1[33];
    a2[1] = (void **)v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v6 = (const FeatureStyleAttributes *)a1[33];
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E42DAB40;
    v8 = (void **)(v7 + 24);
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), v6);
    v9 = v26;
    if (((v27 - v26) & 0x7FFFFFFF8) != 0)
    {
      v10 = 0;
      v11 = 0;
      v12 = ((unint64_t)(v27 - v26) >> 3);
      v13 = v7[57];
      while (1)
      {
        v14 = v13;
        v15 = *v8;
        if (v13)
          break;
LABEL_5:
        v15[v14] = *(_QWORD *)(v9 + 8 * v10);
        v13 = v7[57] + 1;
        v7[57] = v13;
        ++v10;
        v11 = 1;
        if (v10 == v12)
        {
          v15 = *v8;
          v14 = v13;
LABEL_26:
          qsort(v15, v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_27;
        }
      }
      if (v13 > 0x1Fu)
      {
        do
        {
          v19 = 0;
          v20 = (int *)v15;
          while (1)
          {
            v21 = *v20;
            v20 += 2;
            if (v21 == *(_DWORD *)(v9 + 8 * v10))
              break;
            if (v14 == ++v19)
              goto LABEL_16;
          }
          HIDWORD(v15[v19]) = *(_DWORD *)(v9 + 8 * v10 + 4);
LABEL_16:
          ++v10;
        }
        while (v10 != v12);
      }
      else
      {
        do
        {
          v16 = 0;
          v17 = (int *)v15;
          while (1)
          {
            v18 = *v17;
            v17 += 2;
            if (v18 == *(_DWORD *)(v9 + 8 * v10))
              break;
            if (v14 == ++v16)
              goto LABEL_5;
          }
          HIDWORD(v15[v16]) = *(_DWORD *)(v9 + 8 * v10++ + 4);
        }
        while (v10 != v12);
      }
      if ((v11 & 1) != 0)
        goto LABEL_26;
    }
LABEL_27:
    *a2 = v8;
    a2[1] = (void **)v7;
    v5 = v26;
  }
  if (v5)
  {
    v27 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v5, v28 - v5);
  }
}

void sub_19F5A3240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a11)
  {
    a12 = a11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ExternalImageLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A0D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ExternalImageLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A0D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ExternalImageLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PendingRegistryLogic::~PendingRegistryLogic(md::PendingRegistryLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A018;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A018;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x9F2276D081C2CB20;
    if (*(_QWORD *)&v5 <= 0x9F2276D081C2CB20)
      v7 = 0x9F2276D081C2CB20 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x9F2276D081C2CB20;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x9F2276D081C2CB20)
      {
        if (v9[2] == 0x9F2276D081C2CB20)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x9F2276D081C2CB20)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x9F2276D081C2CB20)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x9F2276D081C2CB20)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0670;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0628;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0628;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::PendingRegistryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B11D0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::PendingRegistryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B11D0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::PendingRegistryContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void ggl::Clut::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::Clut::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Clut::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::Clut::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::Clut::Pos2DUVPipelineSetup::textureIsEnabled(ggl::Clut::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void md::TransitNodeMissingFeature::~TransitNodeMissingFeature(md::TransitNodeMissingFeature *this)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)this = &off_1E42A2668;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      operator delete(v2);
      *((_QWORD *)this + 8) = 0;
    }
  }
  *(_QWORD *)this = &off_1E4296648;
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *((_QWORD *)this + 5);
    v6 = (void *)*((_QWORD *)this + 4);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v4;
    operator delete(v6);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)this = &off_1E42A2668;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      operator delete(v2);
      *((_QWORD *)this + 8) = 0;
    }
  }
  *(_QWORD *)this = &off_1E4296648;
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *((_QWORD *)this + 5);
    v6 = (void *)*((_QWORD *)this + 4);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v4;
    operator delete(v6);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

BOOL md::TransitNodeMissingFeature::isUsedAsMissingFeature(md::TransitNodeMissingFeature *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)this + 14);
  return v1 != 0;
}

uint64_t md::TransitNodeMissingFeature::incMissingFeatureRefCount(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 56);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

void md::TransitNodeMissingFeature::decMissingFeatureRefCount(md::TransitNodeMissingFeature *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = (unsigned int *)((char *)this + 56);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
    if (v4)
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__erase_unique<unsigned long long>((_QWORD *)(v4 + 72), *((_QWORD *)this + 1));
  }
}

void md::TransitNodeFeature::~TransitNodeFeature(md::TransitNodeFeature *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E4296648;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E4296648;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitNodeFeature::isUsedAsMissingFeature(md::TransitNodeFeature *this)
{
  return 0;
}

md::TransitNodeFeature *md::TransitNodeFeature::TransitNodeFeature(md::TransitNodeFeature *this, unint64_t a2, md::LabelExternalObjectsModerator *a3)
{
  unint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD **v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v59;
  __int128 v60;
  _QWORD *v61;
  char *v62;
  char v63;

  *(_QWORD *)this = &off_1E4296648;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  md::LabelExternalObjectsModerator::externalTransitNode((md::LabelExternalObjectsModerator *)&v60, (uint64_t)a3, a2);
  if ((_QWORD)v60)
    goto LABEL_96;
  v7 = operator new(0x38uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E42DD000;
  v7[3] = a2;
  v8 = *((_QWORD *)a3 + 3);
  v7[4] = *((_QWORD *)a3 + 2);
  v7[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_WORD *)v7 + 24) = 1280;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  *(_QWORD *)&v60 = v7 + 3;
  *((_QWORD *)&v60 + 1) = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::mutex::lock((std::mutex *)((char *)a3 + 368));
  v14 = *((_QWORD *)a3 + 32);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v14 <= a2)
        v3 = a2 % v14;
    }
    else
    {
      v3 = (v14 - 1) & a2;
    }
    v16 = *(_QWORD ***)(*((_QWORD *)a3 + 31) + 8 * v3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v17[1];
            if (v19 == a2)
            {
              if (v17[2] == a2)
                goto LABEL_90;
            }
            else if ((v19 & (v14 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v17 = (_QWORD *)*v17;
            if (!v17)
              goto LABEL_31;
          }
        }
        do
        {
          v18 = v17[1];
          if (v18 == a2)
          {
            if (v17[2] == a2)
              goto LABEL_90;
          }
          else
          {
            if (v18 >= v14)
              v18 %= v14;
            if (v18 != v3)
              break;
          }
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_31:
  v17 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a3 + 35) + 16))(*((_QWORD *)a3 + 35), 40, 8);
  v61 = v17;
  v62 = (char *)a3 + 280;
  *v17 = 0;
  v17[1] = a2;
  v17[3] = 0;
  v17[4] = 0;
  v17[2] = a2;
  v63 = 1;
  v20 = (float)(unint64_t)(*((_QWORD *)a3 + 36) + 1);
  v21 = *((float *)a3 + 74);
  if (!v14 || (float)(v21 * (float)v14) < v20)
  {
    v22 = 1;
    if (v14 >= 3)
      v22 = (v14 & (v14 - 1)) != 0;
    v23 = v22 | (2 * v14);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v14 = *((_QWORD *)a3 + 32);
    if (prime <= v14)
    {
      if (prime >= v14)
        goto LABEL_67;
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a3 + 36) / *((float *)a3 + 74));
      if (v14 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v14)
      {
        v14 = *((_QWORD *)a3 + 32);
LABEL_67:
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v14 <= a2)
            v3 = a2 % v14;
          else
            v3 = a2;
        }
        else
        {
          v3 = (v14 - 1) & a2;
        }
        goto LABEL_80;
      }
      if (!prime)
      {
        v59 = *((_QWORD *)a3 + 31);
        *((_QWORD *)a3 + 31) = 0;
        if (v59)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a3 + 33) + 40))(*((_QWORD *)a3 + 33), v59, 8 * *((_QWORD *)a3 + 32));
        v14 = 0;
        *((_QWORD *)a3 + 32) = 0;
        goto LABEL_67;
      }
    }
    v26 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)a3 + 33) + 16))(*((_QWORD *)a3 + 33), 8 * prime, 8);
    v27 = *((_QWORD *)a3 + 31);
    *((_QWORD *)a3 + 31) = v26;
    if (v27)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a3 + 33) + 40))(*((_QWORD *)a3 + 33), v27, 8 * *((_QWORD *)a3 + 32));
    v28 = 0;
    *((_QWORD *)a3 + 32) = prime;
    do
      *(_QWORD *)(*((_QWORD *)a3 + 31) + 8 * v28++) = 0;
    while (prime != v28);
    v29 = (_QWORD *)*((_QWORD *)a3 + 34);
    if (!v29)
    {
LABEL_66:
      v14 = prime;
      goto LABEL_67;
    }
    v30 = (char *)a3 + 272;
    v31 = v29[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*((_QWORD *)a3 + 31) + 8 * v33) = v30;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v29 = i;
        }
        else
        {
          v36 = *((_QWORD *)a3 + 31);
          if (*(_QWORD *)(v36 + 8 * v35))
          {
            *v29 = *i;
            v37 = 8 * v35;
            *i = **(_QWORD **)(*((_QWORD *)a3 + 31) + v37);
            **(_QWORD **)(*((_QWORD *)a3 + 31) + v37) = i;
          }
          else
          {
            *(_QWORD *)(v36 + 8 * v35) = v29;
            v29 = i;
            v33 = v35;
          }
        }
      }
      goto LABEL_66;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(*((_QWORD *)a3 + 31) + 8 * v31) = v30;
    v41 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_66;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v31)
      {
        v44 = *((_QWORD *)a3 + 31);
        if (!*(_QWORD *)(v44 + 8 * v43))
        {
          *(_QWORD *)(v44 + 8 * v43) = v29;
          goto LABEL_71;
        }
        *v29 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*((_QWORD *)a3 + 31) + v42);
        **(_QWORD **)(*((_QWORD *)a3 + 31) + v42) = v41;
        v41 = v29;
      }
      v43 = v31;
LABEL_71:
      v29 = v41;
      v41 = (_QWORD *)*v41;
      v31 = v43;
      if (!v41)
        goto LABEL_66;
    }
  }
LABEL_80:
  v45 = *(_QWORD **)(*((_QWORD *)a3 + 31) + 8 * v3);
  if (v45)
  {
    *v17 = *v45;
  }
  else
  {
    *v17 = *((_QWORD *)a3 + 34);
    *((_QWORD *)a3 + 34) = v17;
    *(_QWORD *)(*((_QWORD *)a3 + 31) + 8 * v3) = (char *)a3 + 272;
    if (!*v17)
      goto LABEL_89;
    v46 = *(_QWORD *)(*v17 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v46 >= v14)
        v46 %= v14;
    }
    else
    {
      v46 &= v14 - 1;
    }
    v45 = (_QWORD *)(*((_QWORD *)a3 + 31) + 8 * v46);
  }
  *v45 = v17;
LABEL_89:
  ++*((_QWORD *)a3 + 36);
LABEL_90:
  v47 = v60;
  if (*((_QWORD *)&v60 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 16);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = (std::__shared_weak_count *)v17[4];
  *(_OWORD *)(v17 + 3) = v47;
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  std::mutex::unlock((std::mutex *)((char *)a3 + 368));
LABEL_96:
  v51 = v60;
  v60 = 0uLL;
  v52 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_OWORD *)this + 1) = v51;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return this;
}

void sub_19F5A4320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<md::LabelExternalTransitNode>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<md::LabelExternalTransitNode>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a12);
  std::mutex::unlock(v13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v12 + 32));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  BOOL v109;
  BOOL v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  BOOL v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *p_shared_owners;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int64_t v167;
  int64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t *v198;
  __int128 v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t *v244;

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  v5 = *result;
  v6 = *(unsigned __int8 *)(*a2 + 62);
  v7 = *a3;
  v8 = *(unsigned __int8 *)(*a3 + 62);
  if (v6 >= *(unsigned __int8 *)(*result + 62))
  {
    if (v8 < v6)
    {
      *a2 = v7;
      *a3 = v4;
      v11 = a2 + 1;
      v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      v12 = *result;
      if (*(unsigned __int8 *)(*a2 + 62) < *(unsigned __int8 *)(*result + 62))
      {
        *result = *a2;
        v9 = result + 1;
        *a2 = v12;
LABEL_10:
        v14 = *v9;
        *v9 = *v11;
        *v11 = v14;
      }
    }
  }
  else
  {
    if (v8 < v6)
    {
      v9 = result + 1;
      *result = v7;
LABEL_9:
      *a3 = v5;
      v11 = a3 + 1;
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v5;
    v9 = a2 + 1;
    v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    v5 = *a2;
    if (*(unsigned __int8 *)(*a3 + 62) < *(unsigned __int8 *)(*a2 + 62))
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  v15 = *a3;
  if (*(unsigned __int8 *)(*a4 + 62) < *(unsigned __int8 *)(*a3 + 62))
  {
    *a3 = *a4;
    *a4 = v15;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a2;
    if (*(unsigned __int8 *)(*a3 + 62) < *(unsigned __int8 *)(*a2 + 62))
    {
      *a2 = *a3;
      *a3 = v17;
      v18 = a2[1];
      a2[1] = a3[1];
      a3[1] = v18;
      v19 = *result;
      if (*(unsigned __int8 *)(*a2 + 62) < *(unsigned __int8 *)(*result + 62))
      {
        *result = *a2;
        *a2 = v19;
        v20 = result[1];
        result[1] = a2[1];
        a2[1] = v20;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (*(unsigned __int8 *)(v6 + 62) < *(unsigned __int8 *)(*a1 + 62))
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *(unsigned __int8 *)(v9 + 62);
      v12 = *(unsigned __int8 *)(*a1 + 62);
      v13 = *(a2 - 2);
      v14 = *(unsigned __int8 *)(v13 + 62);
      if (v11 < v12)
      {
        if (v14 >= v11)
        {
          v15 = a1 + 3;
          v43 = a1[3];
          v44 = a1[1];
          *a1 = v9;
          a1[1] = v43;
          a1[2] = v10;
          a1[3] = v44;
          v45 = *(a2 - 2);
          if (*(unsigned __int8 *)(v45 + 62) >= v12)
            return result;
          a1[2] = v45;
        }
        else
        {
          v15 = a1 + 1;
          *a1 = v13;
        }
        *(a2 - 2) = v10;
        v37 = a2 - 1;
        goto LABEL_25;
      }
      if (v14 < v11)
      {
        a1[2] = v13;
        *(a2 - 2) = v9;
        v37 = a1 + 3;
        v36 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v36;
        v38 = a1[2];
        v39 = *a1;
        if (*(unsigned __int8 *)(v38 + 62) < *(unsigned __int8 *)(*a1 + 62))
        {
          *a1 = v38;
          a1[2] = v39;
          v15 = a1 + 1;
LABEL_25:
          v46 = *v15;
          *v15 = *v37;
          *v37 = v46;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, a1 + 2, a1 + 4, a1 + 6);
      v24 = *(a2 - 2);
      v25 = a1[6];
      if (*(unsigned __int8 *)(v24 + 62) < *(unsigned __int8 *)(v25 + 62))
      {
        a1[6] = v24;
        *(a2 - 2) = v25;
        v26 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v26;
        v27 = a1[6];
        v28 = a1[4];
        v29 = *(unsigned __int8 *)(v27 + 62);
        if (v29 < *(unsigned __int8 *)(v28 + 62))
        {
          v30 = a1[5];
          v31 = a1[7];
          a1[4] = v27;
          a1[5] = v31;
          a1[6] = v28;
          a1[7] = v30;
          v32 = a1[2];
          if (v29 < *(unsigned __int8 *)(v32 + 62))
          {
            v33 = a1[3];
            a1[2] = v27;
            a1[3] = v31;
            a1[4] = v32;
            a1[5] = v33;
            v34 = *a1;
            if (v29 < *(unsigned __int8 *)(*a1 + 62))
            {
              v35 = a1[1];
              *a1 = v27;
              a1[1] = v31;
              a1[2] = v34;
              a1[3] = v35;
            }
          }
        }
      }
      return 1;
    default:
      v16 = a1 + 4;
      v17 = a1[4];
      v18 = a1[2];
      v19 = *a1;
      v20 = *(unsigned __int8 *)(v18 + 62);
      v21 = *(unsigned __int8 *)(*a1 + 62);
      v22 = *(unsigned __int8 *)(v17 + 62);
      if (v20 < v21)
      {
        if (v22 >= v20)
        {
          v23 = a1 + 3;
          v47 = a1[3];
          v48 = a1[1];
          *a1 = v18;
          a1[1] = v47;
          a1[2] = v19;
          a1[3] = v48;
          if (v22 >= v21)
            goto LABEL_30;
          a1[2] = v17;
        }
        else
        {
          v23 = a1 + 1;
          *a1 = v17;
        }
        a1[4] = v19;
        v41 = a1 + 5;
        goto LABEL_29;
      }
      if (v22 < v20)
      {
        v41 = a1 + 3;
        v40 = a1[3];
        v42 = a1[5];
        a1[4] = v18;
        a1[5] = v40;
        a1[2] = v17;
        a1[3] = v42;
        if (v22 < v21)
        {
          *a1 = v17;
          a1[2] = v19;
          v23 = a1 + 1;
LABEL_29:
          v49 = *v23;
          *v23 = *v41;
          *v41 = v49;
        }
      }
LABEL_30:
      v50 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v51 = 0;
      while (1)
      {
        v52 = *v50;
        v53 = *v16;
        if (*(unsigned __int8 *)(*v50 + 62) < *(unsigned __int8 *)(*v16 + 62))
        {
          v54 = v50[1];
          v55 = v50;
          *v50 = 0;
          v50[1] = 0;
          while (1)
          {
            v56 = v55;
            v55 = v16;
            v57 = v16[1];
            *v55 = 0;
            v55[1] = 0;
            v58 = (std::__shared_weak_count *)v56[1];
            *v56 = v53;
            v56[1] = v57;
            if (v58)
            {
              p_shared_owners = (unint64_t *)&v58->__shared_owners_;
              do
                v60 = __ldaxr(p_shared_owners);
              while (__stlxr(v60 - 1, p_shared_owners));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            if (v55 == a1)
              break;
            v16 = v55 - 2;
            v53 = *(v55 - 2);
            if (*(unsigned __int8 *)(v52 + 62) >= *(unsigned __int8 *)(v53 + 62))
              goto LABEL_45;
          }
          v55 = a1;
LABEL_45:
          v61 = (std::__shared_weak_count *)v55[1];
          *v55 = v52;
          v55[1] = v54;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          if (++v51 == 8)
            return v50 + 2 == a2;
        }
        v16 = v50;
        v50 += 2;
        if (v50 == a2)
          return 1;
      }
  }
}

double md::LabelExternalMeshModerator::LabelExternalMeshModerator(md::LabelExternalMeshModerator *this, md::LabelManager *a2)
{
  unsigned __int8 v2;
  double result;
  int v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;
  md::LabelExternalMeshModerator *v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((v2 & 1) == 0)
  {
    v9 = this;
    this = v9;
    if (v4)
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
      this = v9;
    }
  }
  *((_QWORD *)this + 4) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 850045863;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

void md::LabelExternalMeshModerator::requestExternalMesh(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(char **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v6 >= v5)
  {
    v11 = *(char **)(a1 + 40);
    v12 = (v6 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    v14 = v5 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = (char *)operator new(16 * v15);
    v17 = &v16[16 * v12];
    v18 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v11 = *(char **)(a1 + 40);
      v6 = *(char **)(a1 + 48);
    }
    v21 = &v16[16 * v15];
    v10 = v17 + 16;
    if (v6 == v11)
    {
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = v21;
    }
    else
    {
      do
      {
        v22 = *((_OWORD *)v6 - 1);
        v6 -= 16;
        *((_OWORD *)v17 - 1) = v22;
        v17 -= 16;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
      }
      while (v6 != v11);
      v11 = *(char **)(a1 + 40);
      v23 = *(char **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = v21;
      while (v23 != v11)
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v23 -= 16;
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v6 = *(_QWORD *)a2;
    *((_QWORD *)v6 + 1) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v6 + 16;
  }
  *(_QWORD *)(a1 + 48) = v10;
  std::mutex::unlock(v4);
}

void sub_19F5A5BE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::GeometryLogic::~GeometryLogic(md::GeometryLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

double md::GeometryLogic::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x3070CB6B3C7F21D3 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void `anonymous namespace'::_createSubdividedUnitMesh(_anonymous_namespace_ *this, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t shared_weak_owners;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;

  v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E42DE538;
  *(_QWORD *)this = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v4 + 3), "/SharedUnitMeshSubdiv");
  *((_QWORD *)this + 1) = v4;
  v5 = *(_QWORD *)v4[11];
  v6 = *(_QWORD *)(v5 + 8) << 8;
  v7 = *(_QWORD *)(v5 + 72);
  v8 = *(_QWORD *)(v5 + 80) - v7;
  if (v6 != v8)
  {
    if (v6 <= v8)
    {
      if (v6 < v8)
        *(_QWORD *)(v5 + 80) = v7 + v6;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v5 + 72, v6 - v8);
    }
    v9 = *(std::__shared_weak_count **)(v5 + 32);
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *(_QWORD *)(v5 + 120) = 0;
    *(_DWORD *)(v5 + 112) = 0;
    v12 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = v12;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v12;
    v5 = *(_QWORD *)v4[11];
    v6 = *(_QWORD *)(v5 + 8) << 8;
  }
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = v5;
  if (v6)
    v14 = *(_QWORD *)(v5 + 72);
  else
    v14 = 0;
  v64 = v13;
  v65 = v6;
  v66 = v14;
  v15 = 0;
  v16 = v14 + 128;
  if ((a2 & 1) != 0)
  {
    do
    {
      v17 = (double)v15 * 0.0666666667;
      *(_DWORD *)(v16 - 128) = 0;
      v18 = v17;
      *(float *)(v16 - 124) = v18;
      *(float *)&v17 = 1.0 - v17;
      *(_DWORD *)(v16 - 120) = 0;
      *(_DWORD *)(v16 - 116) = LODWORD(v17);
      *(_DWORD *)(v16 - 112) = 1032358025;
      *(float *)(v16 - 108) = v18;
      *(_DWORD *)(v16 - 104) = 1032358025;
      *(_DWORD *)(v16 - 100) = LODWORD(v17);
      *(_DWORD *)(v16 - 96) = 1040746633;
      *(float *)(v16 - 92) = v18;
      *(_DWORD *)(v16 - 88) = 1040746633;
      *(_DWORD *)(v16 - 84) = LODWORD(v17);
      *(_DWORD *)(v16 - 80) = 1045220557;
      *(float *)(v16 - 76) = v18;
      *(_DWORD *)(v16 - 72) = 1045220557;
      *(_DWORD *)(v16 - 68) = LODWORD(v17);
      *(_DWORD *)(v16 - 64) = 1049135241;
      *(float *)(v16 - 60) = v18;
      *(_DWORD *)(v16 - 56) = 1049135241;
      *(_DWORD *)(v16 - 52) = LODWORD(v17);
      *(_DWORD *)(v16 - 48) = 1051372203;
      *(float *)(v16 - 44) = v18;
      *(_DWORD *)(v16 - 40) = 1051372203;
      *(_DWORD *)(v16 - 36) = LODWORD(v17);
      *(_DWORD *)(v16 - 32) = 1053609165;
      *(float *)(v16 - 28) = v18;
      *(_DWORD *)(v16 - 24) = 1053609165;
      *(_DWORD *)(v16 - 20) = LODWORD(v17);
      *(_DWORD *)(v16 - 16) = 1055846127;
      *(float *)(v16 - 12) = v18;
      *(_DWORD *)(v16 - 8) = 1055846127;
      *(_DWORD *)(v16 - 4) = LODWORD(v17);
      *(_DWORD *)v16 = 1057523849;
      *(float *)(v16 + 4) = v18;
      *(_DWORD *)(v16 + 8) = 1057523849;
      *(_DWORD *)(v16 + 12) = LODWORD(v17);
      *(_DWORD *)(v16 + 16) = 1058642330;
      *(float *)(v16 + 20) = v18;
      *(_DWORD *)(v16 + 24) = 1058642330;
      *(_DWORD *)(v16 + 28) = LODWORD(v17);
      *(_DWORD *)(v16 + 32) = 1059760811;
      *(float *)(v16 + 36) = v18;
      *(_DWORD *)(v16 + 40) = 1059760811;
      *(_DWORD *)(v16 + 44) = LODWORD(v17);
      *(_DWORD *)(v16 + 48) = 1060879292;
      *(float *)(v16 + 52) = v18;
      *(_DWORD *)(v16 + 56) = 1060879292;
      *(_DWORD *)(v16 + 60) = LODWORD(v17);
      *(_DWORD *)(v16 + 64) = 1061997773;
      *(float *)(v16 + 68) = v18;
      *(_DWORD *)(v16 + 72) = 1061997773;
      *(_DWORD *)(v16 + 76) = LODWORD(v17);
      *(_DWORD *)(v16 + 80) = 1063116254;
      *(float *)(v16 + 84) = v18;
      *(_DWORD *)(v16 + 88) = 1063116254;
      *(_DWORD *)(v16 + 92) = LODWORD(v17);
      *(_DWORD *)(v16 + 96) = 1064234735;
      *(float *)(v16 + 100) = v18;
      *(_DWORD *)(v16 + 104) = 1064234735;
      *(_DWORD *)(v16 + 108) = LODWORD(v17);
      *(_DWORD *)(v16 + 112) = 1065353216;
      *(float *)(v16 + 116) = v18;
      ++v15;
      *(_DWORD *)(v16 + 120) = 1065353216;
      *(_DWORD *)(v16 + 124) = LODWORD(v17);
      v16 += 256;
    }
    while (v15 != 16);
  }
  else
  {
    do
    {
      *(_DWORD *)(v16 - 128) = 0;
      v19 = (double)v15 * 0.0666666667;
      *(float *)(v16 - 124) = v19;
      *(_DWORD *)(v16 - 120) = 0;
      *(float *)(v16 - 116) = v19;
      *(_DWORD *)(v16 - 112) = 1032358025;
      *(float *)(v16 - 108) = v19;
      *(_DWORD *)(v16 - 104) = 1032358025;
      *(float *)(v16 - 100) = v19;
      *(_DWORD *)(v16 - 96) = 1040746633;
      *(float *)(v16 - 92) = v19;
      *(_DWORD *)(v16 - 88) = 1040746633;
      *(float *)(v16 - 84) = v19;
      *(_DWORD *)(v16 - 80) = 1045220557;
      *(float *)(v16 - 76) = v19;
      *(_DWORD *)(v16 - 72) = 1045220557;
      *(float *)(v16 - 68) = v19;
      *(_DWORD *)(v16 - 64) = 1049135241;
      *(float *)(v16 - 60) = v19;
      *(_DWORD *)(v16 - 56) = 1049135241;
      *(float *)(v16 - 52) = v19;
      *(_DWORD *)(v16 - 48) = 1051372203;
      *(float *)(v16 - 44) = v19;
      *(_DWORD *)(v16 - 40) = 1051372203;
      *(float *)(v16 - 36) = v19;
      *(_DWORD *)(v16 - 32) = 1053609165;
      *(float *)(v16 - 28) = v19;
      *(_DWORD *)(v16 - 24) = 1053609165;
      *(float *)(v16 - 20) = v19;
      *(_DWORD *)(v16 - 16) = 1055846127;
      *(float *)(v16 - 12) = v19;
      *(_DWORD *)(v16 - 8) = 1055846127;
      *(float *)(v16 - 4) = v19;
      *(_DWORD *)v16 = 1057523849;
      *(float *)(v16 + 4) = v19;
      *(_DWORD *)(v16 + 8) = 1057523849;
      *(float *)(v16 + 12) = v19;
      *(_DWORD *)(v16 + 16) = 1058642330;
      *(float *)(v16 + 20) = v19;
      *(_DWORD *)(v16 + 24) = 1058642330;
      *(float *)(v16 + 28) = v19;
      *(_DWORD *)(v16 + 32) = 1059760811;
      *(float *)(v16 + 36) = v19;
      *(_DWORD *)(v16 + 40) = 1059760811;
      *(float *)(v16 + 44) = v19;
      *(_DWORD *)(v16 + 48) = 1060879292;
      *(float *)(v16 + 52) = v19;
      *(_DWORD *)(v16 + 56) = 1060879292;
      *(float *)(v16 + 60) = v19;
      *(_DWORD *)(v16 + 64) = 1061997773;
      *(float *)(v16 + 68) = v19;
      *(_DWORD *)(v16 + 72) = 1061997773;
      *(float *)(v16 + 76) = v19;
      *(_DWORD *)(v16 + 80) = 1063116254;
      *(float *)(v16 + 84) = v19;
      *(_DWORD *)(v16 + 88) = 1063116254;
      *(float *)(v16 + 92) = v19;
      *(_DWORD *)(v16 + 96) = 1064234735;
      *(float *)(v16 + 100) = v19;
      *(_DWORD *)(v16 + 104) = 1064234735;
      *(float *)(v16 + 108) = v19;
      *(_DWORD *)(v16 + 112) = 1065353216;
      *(float *)(v16 + 116) = v19;
      ++v15;
      *(_DWORD *)(v16 + 120) = 1065353216;
      *(float *)(v16 + 124) = v19;
      v16 += 256;
    }
    while (v15 != 16);
  }
  v20 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v22 = ggl::BufferData::BufferData((uint64_t)&v20[1], 2, 1, 0, 6, 1350);
  v23 = 0;
  LODWORD(v20[10].__vftable) = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v20[1].__shared_owners_ = 2;
  v20[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v20[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
  v24 = (_WORD *)&v20[4].__vftable[2].~__shared_weak_count_0 + 1;
  do
  {
    v25 = 16 * v23 + 16;
    *(v24 - 45) = v25;
    v26 = (16 * v23) | 1;
    *(v24 - 44) = v26;
    v27 = 16 * v23 + 17;
    *(v24 - 43) = v27;
    *(v24 - 42) = v25;
    *(v24 - 41) = 16 * v23;
    *(v24 - 40) = v26;
    v28 = 16 * v23 + 18;
    v29 = (16 * v23) | 2;
    *(v24 - 39) = v27;
    *(v24 - 38) = v29;
    *(v24 - 37) = v28;
    *(v24 - 36) = v27;
    *(v24 - 35) = v26;
    *(v24 - 34) = v29;
    v30 = 16 * v23 + 19;
    v31 = (16 * v23) | 3;
    *(v24 - 33) = v28;
    *(v24 - 32) = v31;
    *(v24 - 31) = v30;
    *(v24 - 30) = v28;
    *(v24 - 29) = v29;
    *(v24 - 28) = v31;
    v32 = 16 * v23 + 20;
    v33 = (16 * v23) | 4;
    *(v24 - 27) = v30;
    *(v24 - 26) = v33;
    *(v24 - 25) = v32;
    *(v24 - 24) = v30;
    *(v24 - 23) = v31;
    *(v24 - 22) = v33;
    v34 = 16 * v23 + 21;
    v35 = (16 * v23) | 5;
    *(v24 - 21) = v32;
    *(v24 - 20) = v35;
    *(v24 - 19) = v34;
    *(v24 - 18) = v32;
    *(v24 - 17) = v33;
    *(v24 - 16) = v35;
    v36 = 16 * v23 + 22;
    v37 = (16 * v23) | 6;
    *(v24 - 15) = v34;
    *(v24 - 14) = v37;
    *(v24 - 13) = v36;
    *(v24 - 12) = v34;
    *(v24 - 11) = v35;
    *(v24 - 10) = v37;
    v38 = 16 * v23 + 23;
    v39 = (16 * v23) | 7;
    *(v24 - 9) = v36;
    *(v24 - 8) = v39;
    *(v24 - 7) = v38;
    *(v24 - 6) = v36;
    *(v24 - 5) = v37;
    *(v24 - 4) = v39;
    v40 = 16 * v23 + 24;
    v41 = (16 * v23) | 8;
    *(v24 - 3) = v38;
    *(v24 - 2) = v41;
    *(v24 - 1) = v40;
    *v24 = v38;
    v24[1] = v39;
    v24[2] = v41;
    v42 = 16 * v23 + 25;
    v43 = (16 * v23) | 9;
    v24[3] = v40;
    v24[4] = v43;
    v24[5] = v42;
    v24[6] = v40;
    v24[7] = v41;
    v24[8] = v43;
    v44 = 16 * v23 + 26;
    v45 = (16 * v23) | 0xA;
    v24[9] = v42;
    v24[10] = v45;
    v24[11] = v44;
    v24[12] = v42;
    v24[13] = v43;
    v24[14] = v45;
    v46 = 16 * v23 + 27;
    v47 = (16 * v23) | 0xB;
    v24[15] = v44;
    v24[16] = v47;
    v24[17] = v46;
    v24[18] = v44;
    v24[19] = v45;
    v24[20] = v47;
    v48 = 16 * v23 + 28;
    v49 = (16 * v23) | 0xC;
    v24[21] = v46;
    v24[22] = v49;
    v24[23] = v48;
    v24[24] = v46;
    v24[25] = v47;
    v24[26] = v49;
    v50 = 16 * v23 + 29;
    v24[27] = v48;
    v24[28] = (16 * v23) | 0xD;
    v24[29] = v50;
    v24[30] = v48;
    v24[31] = v49;
    v24[32] = (16 * v23) | 0xD;
    v51 = (16 * v23) | 0xE;
    v24[33] = v50;
    v24[34] = v51;
    v24[35] = 16 * v23 + 30;
    v24[36] = v50;
    v24[37] = (16 * v23) | 0xD;
    v24[38] = v51;
    v52 = (16 * v23) | 0xF;
    v24[39] = 16 * v23 + 30;
    v24[40] = v52;
    v24[41] = 16 * v23 + 31;
    v24[42] = 16 * v23++ + 30;
    v24[43] = v51;
    v24[44] = v52;
    v24 += 90;
  }
  while (v23 != 15);
  v53 = *(_QWORD *)this;
  do
    v54 = __ldxr(v21);
  while (__stxr(v54 + 1, v21));
  do
    v55 = __ldxr(v21);
  while (__stxr(v55 + 1, v21));
  v56 = *(std::__shared_weak_count **)(v53 + 104);
  *(_QWORD *)(v53 + 96) = v22;
  *(_QWORD *)(v53 + 104) = v20;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  do
    v59 = __ldaxr(v21);
  while (__stlxr(v59 - 1, v21));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  shared_weak_owners = v20[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xA8C)
    shared_weak_owners = 2700;
  v20[3].__shared_owners_ = 0;
  v20[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v61 = __ldaxr(v21);
  while (__stlxr(v61 - 1, v21));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v66 && v65)
  {
    if ((_QWORD)v64 && *(_BYTE *)(*((_QWORD *)&v64 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v64 + 64))();
    v63 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 56);
    v62 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 64);
    if (v62 == v63)
      v63 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v64 + 1) + 72);
    if (v63)
      v63 = 0;
    if (v62 <= v65)
      v62 = v65;
    if (v62 == v63)
      v62 = v63 + *(_QWORD *)(*((_QWORD *)&v64 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v64 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v64 + 1) + 56) = v63;
    *(_QWORD *)(*((_QWORD *)&v64 + 1) + 64) = v62;
  }
}

void sub_19F5A6640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonBase::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonBase::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonBase::MeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  if (a1[2])
  {
    v5 = *a1;
    v6 = (uint64_t *)a1[1];
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    a1[2] = 0;
    if (v6 != a1)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        v10 = (std::__shared_weak_count *)v6[6];
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1);
    }
  }
  return a1;
}

_QWORD *gdc::ManagedObjectHolder<md::GeometryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::GeometryContext *v2;

  *a1 = &off_1E42B0CD0;
  v2 = (md::GeometryContext *)a1[4];
  if (v2)
  {
    md::GeometryContext::~GeometryContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::GeometryContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::GeometryContext *v1;

  *a1 = &off_1E42B0CD0;
  v1 = (md::GeometryContext *)a1[4];
  if (v1)
  {
    md::GeometryContext::~GeometryContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::GeometryContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *std::list<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry>>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x40uLL);
      v8 = *(_OWORD *)(v3 + 16);
      v7[8] = *(_DWORD *)(v3 + 32);
      *((_OWORD *)v7 + 1) = v8;
      v9 = *(_QWORD *)(v3 + 48);
      *((_QWORD *)v7 + 5) = *(_QWORD *)(v3 + 40);
      *((_QWORD *)v7 + 6) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v6 = (_DWORD *)*a1;
        v5 = a1[2];
      }
      *((_QWORD *)v7 + 7) = *(_QWORD *)(v3 + 56);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = *(_QWORD *)(v3 + 8);
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_19F5A6938(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[6];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::_elementAccessed(uint64_t *a1, uint64_t *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = operator new(0x40uLL);
  v5 = v4;
  v6 = *((_OWORD *)a2 + 1);
  v4[8] = *((_DWORD *)a2 + 8);
  *((_OWORD *)v4 + 1) = v6;
  v7 = a2[6];
  *((_QWORD *)v4 + 5) = a2[5];
  *((_QWORD *)v4 + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)v4 + 7) = a2[7];
  v10 = *a1;
  *(_QWORD *)(v10 + 8) = v4;
  *a1 = (uint64_t)v4;
  *(_QWORD *)v4 = v10;
  *((_QWORD *)v4 + 1) = a1;
  v11 = a1[2];
  v12 = (uint64_t *)a1[8];
  if (v12 == a2)
  {
    v13 = (_DWORD *)a2[1];
LABEL_8:
    a1[8] = (uint64_t)v13;
    goto LABEL_9;
  }
  v13 = v4;
  if (v12 == a1)
    goto LABEL_8;
LABEL_9:
  v14 = *a2;
  *(_QWORD *)(v14 + 8) = a2[1];
  *(_QWORD *)a2[1] = v14;
  a1[2] = v11;
  v15 = (std::__shared_weak_count *)a2[6];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a2);
  return v5;
}

void geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::insert(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  float v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  size_t prime;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;

  v5 = a1 + 3;
  v6 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(a1 + 3, a2);
  if (!v6)
  {
    v18 = operator new(0x40uLL);
    v19 = v18;
    v18[1] = *(_OWORD *)a2;
    *((_DWORD *)v18 + 8) = a2[4];
    v20 = *((_QWORD *)a2 + 4);
    *((_QWORD *)v18 + 5) = *((_QWORD *)a2 + 3);
    *((_QWORD *)v18 + 6) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *((_QWORD *)v18 + 7) = *((_QWORD *)a2 + 5);
    ++a1[2];
    v23 = (uint64_t *)a1[8];
    v24 = a1[9] + *((_QWORD *)a2 + 5);
    v25 = *a1;
    *(_QWORD *)(v25 + 8) = v18;
    *a1 = (uint64_t)v18;
    *(_QWORD *)v18 = v25;
    *((_QWORD *)v18 + 1) = a1;
    a1[9] = v24;
    if (v23 == a1)
      a1[8] = (uint64_t)v18;
    v26 = *((unsigned __int8 *)a2 + 8);
    v27 = *a2;
    v28 = a2[1];
    v29 = (v27
         + ((v26 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v26 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v26 - 0x61C8864680B583EBLL);
    v30 = (v28 + (v29 << 6) + (v29 >> 2) - 0x61C8864680B583EBLL) ^ v29;
    v31 = a2[3];
    v32 = a2[4];
    v33 = (v31 + (v30 << 6) + (v30 >> 2) - 0x61C8864680B583EBLL) ^ v30;
    v34 = (v32 + (v33 << 6) + (v33 >> 2) - 0x61C8864680B583EBLL) ^ v33;
    v35 = a1[4];
    if (v35)
    {
      v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
      v36.i16[0] = vaddlv_u8(v36);
      if (v36.u32[0] > 1uLL)
      {
        v2 = (v32 + (v33 << 6) + (v33 >> 2) - 0x61C8864680B583EBLL) ^ v33;
        if (v34 >= v35)
          v2 = v34 % v35;
      }
      else
      {
        v2 = v34 & (v35 - 1);
      }
      v45 = *(uint64_t ***)(*v5 + 8 * v2);
      if (v45)
      {
        v46 = *v45;
        if (v46)
        {
          if (v36.u32[0] < 2uLL)
          {
            while (1)
            {
              v48 = v46[1];
              if (v48 == v34)
              {
                if (*((_DWORD *)v46 + 4) == (_DWORD)v27
                  && __PAIR64__(*((unsigned __int8 *)v46 + 24), *((_DWORD *)v46 + 5)) == __PAIR64__(v26, v28)
                  && *(uint64_t *)((char *)v46 + 28) == __PAIR64__(v32, v31))
                {
                  return;
                }
              }
              else if ((v48 & (v35 - 1)) != v2)
              {
                goto LABEL_49;
              }
              v46 = (uint64_t *)*v46;
              if (!v46)
                goto LABEL_49;
            }
          }
          do
          {
            v47 = v46[1];
            if (v47 == v34)
            {
              if (*((_DWORD *)v46 + 4) == (_DWORD)v27
                && __PAIR64__(*((unsigned __int8 *)v46 + 24), *((_DWORD *)v46 + 5)) == __PAIR64__(v26, v28)
                && *(uint64_t *)((char *)v46 + 28) == __PAIR64__(v32, v31))
              {
                return;
              }
            }
            else
            {
              if (v47 >= v35)
                v47 %= v35;
              if (v47 != v2)
                break;
            }
            v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
      }
    }
LABEL_49:
    v49 = operator new(0x30uLL);
    *v49 = 0;
    v49[1] = v34;
    *((_OWORD *)v49 + 1) = *(_OWORD *)a2;
    *((_DWORD *)v49 + 8) = a2[4];
    v49[5] = v19;
    v50 = (float)(unint64_t)(a1[6] + 1);
    v51 = *((float *)a1 + 14);
    if (!v35 || (float)(v51 * (float)v35) < v50)
    {
      v52 = 1;
      if (v35 >= 3)
        v52 = (v35 & (v35 - 1)) != 0;
      v53 = v52 | (2 * v35);
      v54 = vcvtps_u32_f32(v50 / v51);
      if (v53 <= v54)
        prime = v54;
      else
        prime = v53;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v35 = a1[4];
      }
      if (prime > v35)
        goto LABEL_61;
      if (prime < v35)
      {
        v56 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
        if (v35 < 3 || (v57 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
        {
          v56 = std::__next_prime(v56);
        }
        else
        {
          v58 = 1 << -(char)__clz(v56 - 1);
          if (v56 >= 2)
            v56 = v58;
        }
        if (prime <= v56)
          prime = v56;
        if (prime < v35)
LABEL_61:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v5, prime);
      }
      v35 = a1[4];
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v34 >= v35)
          v2 = v34 % v35;
        else
          v2 = v34;
      }
      else
      {
        v2 = (v35 - 1) & v34;
      }
    }
    v59 = *v5;
    v60 = *(_QWORD **)(*v5 + 8 * v2);
    if (v60)
    {
      *v49 = *v60;
    }
    else
    {
      *v49 = a1[5];
      a1[5] = (uint64_t)v49;
      *(_QWORD *)(v59 + 8 * v2) = a1 + 5;
      if (!*v49)
      {
LABEL_86:
        ++a1[6];
        return;
      }
      v61 = *(_QWORD *)(*v49 + 8);
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v61 >= v35)
          v61 %= v35;
      }
      else
      {
        v61 &= v35 - 1;
      }
      v60 = (_QWORD *)(*v5 + 8 * v61);
    }
    *v60 = v49;
    goto LABEL_86;
  }
  v7 = v6;
  v8 = (uint64_t *)v6[5];
  v9 = operator new(0x40uLL);
  v10 = v9;
  v9[1] = *(_OWORD *)a2;
  *((_DWORD *)v9 + 8) = a2[4];
  v11 = *((_QWORD *)a2 + 4);
  *((_QWORD *)v9 + 5) = *((_QWORD *)a2 + 3);
  *((_QWORD *)v9 + 6) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *((_QWORD *)v9 + 7) = *((_QWORD *)a2 + 5);
  v14 = *a1;
  *(_QWORD *)(v14 + 8) = v9;
  *a1 = (uint64_t)v9;
  *(_QWORD *)v9 = v14;
  *((_QWORD *)v9 + 1) = a1;
  v15 = a1[2];
  a1[2] = v15 + 1;
  v16 = (uint64_t *)a1[8];
  if (v16 == v8)
  {
    v17 = (_OWORD *)v8[1];
LABEL_17:
    a1[8] = (uint64_t)v17;
    goto LABEL_18;
  }
  v17 = v9;
  if (v16 == a1)
    goto LABEL_17;
LABEL_18:
  v37 = a1[9];
  v39 = (std::__shared_weak_count *)v8[6];
  v38 = v8[7];
  v40 = v37 >= v38;
  v41 = v37 - v38;
  if (!v40)
    v41 = 0;
  a1[9] = v41 + *((_QWORD *)a2 + 5);
  v42 = *v8;
  *(_QWORD *)(v42 + 8) = v8[1];
  *(_QWORD *)v8[1] = v42;
  a1[2] = v15;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v8);
  v7[5] = (uint64_t)v10;
}

void sub_19F5A6FE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

float gdc::GlobeTileUtils::createSplinePatchFromMercatorRect(uint64_t a1, double *a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  long double v12;
  float v13;
  float v14;
  long double v15;
  double v16;
  long double v17;
  long double v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  BOOL v22;
  double v23;
  char v24;
  double v25;
  double v26;
  long double v27;
  long double v28;
  __double2 v29;
  uint64_t v30;
  float *v31;
  int8x16_t v32;
  int8x16_t v33;
  double v34;
  double v35;
  float v36;
  float v37;
  float v38;
  long double v39;
  long double v40;
  __double2 v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  float v50;
  int8x16_t v51;
  float v52;
  float32x2_t v53;
  float v54;
  float v55;
  float32_t v56;
  float32x2_t v57;
  float32_t v58;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v76;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  __int128 v81;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32_t v86;
  float32_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  double v99;
  float v100;
  float v101;
  float v102;
  double v103;
  float v104;
  float v105;
  double v106;
  float v107;
  __int32 v108;
  double v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float result;
  double v151;
  double v152;
  double v153;
  double v154;
  long double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float32x2_t v175;
  float v176;
  float32x2_t v177;
  float v178;
  float32x2_t v179;
  float v180;
  float32x2_t v181;
  float v182;
  float32x2_t v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float32x2_t v191;
  float v192;
  float32x2_t v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  __int32 v199;
  float v200;
  float32x2_t v201;
  uint64_t v202;
  unsigned int v203;
  float32x4_t v204;
  float32x2_t v205;
  _BYTE v206[12];
  _DWORD v207[4];
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  __int128 __b;
  __int128 v238;
  __int128 v239;
  __int128 v240;

  gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v208, a2, a3, a4);
  v5 = v212;
  v6 = v213;
  v7 = v214;
  v8 = v211;
  v160 = v209;
  v167 = v210;
  v156 = v208;
  v158 = -(v210 * v212 - v209 * v213) - (v210 * v212 - v209 * v213);
  v169 = -(v209 * v211 - v208 * v212) - (v209 * v211 - v208 * v212);
  v170 = -(v208 * v213 - v210 * v211) - (v208 * v213 - v210 * v211);
  v165 = -(v208 * v213 - v210 * v211) * -2.0;
  v166 = -(v210 * v212 - v209 * v213) * -2.0;
  v164 = -(v209 * v211 - v208 * v212) * -2.0;
  v152 = *a2;
  v168 = a2[1];
  v9 = a2[3];
  v162 = v9;
  v10 = exp(v168 * 6.28318531 + -3.14159265);
  v155 = atan(v10) * 2.0 + -1.57079633;
  v11 = exp(v9 * 6.28318531 + -3.14159265);
  v12 = atan(v11);
  v13 = v155;
  *(float *)&v12 = v12 * 2.0 + -1.57079633;
  *(float *)&v12 = *(float *)&v12 - v13;
  v14 = v13 + (float)(*(float *)&v12 * 0.66667);
  v15 = tan((float)(v13 + (float)(*(float *)&v12 * 0.33333)) * 0.5 + 0.785398163);
  v16 = log(v15);
  v17 = tan(v14 * 0.5 + 0.785398163);
  v18 = log(v17);
  v19 = 0;
  v20 = 0;
  v21 = (0.5 - v168 + v16 * 0.159154943) / (v162 - v168);
  v163 = v162 - v168;
  *(float *)&v18 = (0.5 - v168 + v18 * 0.159154943) / v163;
  v207[0] = 0;
  *(float *)&v207[1] = v21;
  v207[2] = LODWORD(v18);
  v207[3] = 1065353216;
  v151 = a2[2] - v152;
  v22 = v218 < v215;
  if (v219 < v216)
    v22 = 1;
  v157 = v156 + v215;
  v23 = -(v160 - v158 * v6);
  v159 = v217;
  v161 = v216;
  v24 = v220 < v217 || v22;
  v153 = 1.0 / (v218 - v215);
  v154 = v23;
  v25 = 1.0 / (v219 - v216);
  v26 = 1.0 / (v220 - v217);
  do
  {
    v27 = fmod((v152 + (double)v19 * 0.333333333 * v151) * 6.28318531, 6.28318531);
    v28 = fmod(v27 + 6.28318531, 6.28318531);
    v29 = __sincos_stret(v28 + -3.14159265);
    v30 = 0;
    v31 = (float *)&v175 + 3 * v20;
    do
    {
      if ((v24 & 1) != 0)
      {
        memset_pattern16(&__b, &unk_19FFB63B0, 0x18uLL);
        v34 = *((double *)&__b + 1);
        v33.i64[0] = __b;
        v35 = *(double *)&v238;
      }
      else
      {
        v39 = exp((v168 + v163 * *(float *)&v207[v30]) * 6.28318531 + -3.14159265);
        v40 = atan(v39);
        v41 = __sincos_stret(v40 * 2.0 + -1.57079633);
        v42 = 6378137.0 / sqrt(v41.__sinval * v41.__sinval * -0.00669437999 + 1.0);
        v43 = v42 * v41.__cosval * v29.__cosval;
        v44 = v42 * v41.__cosval * v29.__sinval;
        v45 = v41.__sinval * 0.99330562 * v42;
        v46 = -(v45 * v5 - v44 * v6) - (v45 * v5 - v44 * v6);
        v47 = -(v43 * v6 - v45 * v8) - (v43 * v6 - v45 * v8);
        v48 = -(v44 * v8 - v43 * v5) - (v44 * v8 - v43 * v5);
        *(float *)v33.i32 = (v43 - v157 + (v47 + v165) * v6 + (v46 + v166) * v7 + (v169 - v48) * v5) * v153;
        *(double *)v33.i64 = *(float *)v33.i32;
        *(float *)&v44 = (v154 + v44 + v47 * v7 + v48 * v8 - (v161 + v169 * v8 + v170 * v7 + v46 * v6)) * v25;
        v34 = *(float *)&v44;
        *(float *)&v45 = (v45 - v167 + (v48 + v164) * v7 + (v46 + v166) * v5 - v159 + (v170 - v47) * v8) * v26;
        v35 = *(float *)&v45;
      }
      v36 = *(double *)v33.i64;
      v37 = v34;
      v38 = v35;
      *(v31 - 1) = v36;
      *v31 = v37;
      v31[1] = v38;
      ++v30;
      v31 += 3;
    }
    while (v30 != 4);
    v20 += 4;
    ++v19;
  }
  while (v19 != 4);
  v49 = v174;
  *(float *)a1 = v174;
  v50 = v180;
  v33.i64[0] = v202;
  v51.i64[1] = __PAIR64__(v33.u32[3], v203);
  *(_DWORD *)(a1 + 152) = v203;
  *(_QWORD *)(a1 + 144) = v33.i64[0];
  v52 = *(float *)v206;
  *(_QWORD *)(a1 + 180) = *(_QWORD *)v206;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)&v206[8];
  v53 = (float32x2_t)vdup_n_s32(0xBE97B424);
  v54 = v49 * -0.2963;
  v55 = v49 * -0.037037;
  *(int32x2_t *)v32.i8 = vdup_n_s32(0xBD17B427);
  v56 = (float)((float)(v49 * -0.2963) + (float)(v50 * -0.037037)) + v176;
  v57 = (float32x2_t)vdup_n_s32(0xBE97B427);
  v58 = (float)((float)(v49 * -0.037037) + (float)(v50 * -0.2963)) + v178;
  _D18 = (float32x2_t)vdup_n_s32(0x3EE38E39u);
  v60 = (float32x4_t)vdupq_n_s32(0x40D80003u);
  *(float *)(a1 + 12) = (float)((float)(v58 * -0.22222) + (float)(v56 * 0.44444)) * 6.75;
  v61 = v175;
  *(float32x2_t *)(a1 + 4) = v175;
  v62 = v181;
  *(float32x2_t *)(a1 + 40) = v181;
  v63 = vmul_f32(v61, v53);
  v64 = vmul_f32(v61, (float32x2_t)vdup_n_s32(0xBD17B424));
  _D19 = vmla_f32(vadd_f32(v179, v64), v57, v62);
  v66 = vmla_f32(vadd_f32(v177, v63), *(float32x2_t *)v32.i8, v62);
  v67 = (float32x2_t)vdup_n_s32(0x3E638E37u);
  v68 = (float32x2_t)vdup_lane_s32((int32x2_t)_D19, 0);
  v68.f32[0] = v58;
  v69 = (float32x2_t)vdup_n_s32(0x3EE38E37u);
  _S28 = 1055100471;
  __asm { FMLA            S12, S28, V19.S[1] }
  v76 = vmul_f32(vmla_f32(vneg_f32(vmul_f32(_D19, v67)), _D18, v66), *(float32x2_t *)v60.f32);
  _D11 = (float32x2_t)vdup_lane_s32((int32x2_t)v66, 0);
  _D11.f32[0] = v56;
  v78 = (float32x2_t)vdup_n_s32(0x3E638E39u);
  *(float32x2_t *)(a1 + 16) = v76;
  *(float32x2_t *)(a1 + 24) = vmul_f32(vmla_f32(vneg_f32(vmul_f32(_D11, v78)), v69, v68), *(float32x2_t *)v60.f32);
  *(float *)(a1 + 32) = _S12 * 6.75;
  *(float *)(a1 + 36) = v50;
  v79 = vmlas_n_f32(v54, -0.037037, *(float *)v33.i32) + v182;
  v80 = vmlas_n_f32(v55, -0.2963, *(float *)v33.i32) + v192;
  *(float *)(a1 + 48) = (float)((float)(v80 * -0.22222) + (float)(v79 * 0.44444)) * 6.75;
  *((_QWORD *)&v81 + 1) = v51.i64[1];
  *(_QWORD *)&v81 = v33.i64[0];
  v51.i64[0] = v81 >> 32;
  _D30 = vmla_f32(vadd_f32(v193, v64), v57, *(float32x2_t *)v51.i8);
  v83 = vmla_f32(vadd_f32(v183, v63), *(float32x2_t *)v32.i8, *(float32x2_t *)v51.i8);
  __asm { FMLA            S11, S28, V30.S[1] }
  *(float32x2_t *)(a1 + 52) = vmul_f32(vmla_f32(vneg_f32(vmul_f32(_D30, v67)), _D18, v83), *(float32x2_t *)v60.f32);
  v84 = (float32x2_t)vdup_lane_s32((int32x2_t)_D30, 0);
  v84.f32[0] = v80;
  v85 = (float32x2_t)vdup_lane_s32((int32x2_t)v83, 0);
  v85.f32[0] = v79;
  *(float *)(a1 + 104) = _D11.f32[0] * 6.75;
  v86 = (float)((float)(-0.037037 * v52) + (float)(v50 * -0.2963)) + v190;
  v87 = (float)((float)(-0.2963 * v52) + (float)(v50 * -0.037037)) + v200;
  *(float *)(a1 + 84) = (float)((float)(v87 * -0.22222) + (float)(v86 * 0.44444)) * 6.75;
  *(float32x2_t *)v32.i8 = vmul_f32(*(float32x2_t *)&v206[4], *(float32x2_t *)v32.i8);
  v88 = (float32x2_t)vdup_n_s32(0x3D17B424u);
  v89 = vmul_f32(*(float32x2_t *)&v206[4], v57);
  _D22 = vadd_f32(v89, vmls_f32(v201, v88, v62));
  v91 = vadd_f32(*(float32x2_t *)v32.i8, vmla_f32(v191, v53, v62));
  v92 = vmul_f32(vmla_f32(vneg_f32(vmul_f32(_D22, v67)), _D18, v91), *(float32x2_t *)v60.f32);
  __asm { FMLA            S18, S28, V22.S[1] }
  *(float32x2_t *)(a1 + 88) = v92;
  *(float32x2_t *)(a1 + 96) = vmul_f32(vmla_f32(vneg_f32(vmul_f32(v85, v78)), v69, v84), *(float32x2_t *)v60.f32);
  v93 = (float32x2_t)vdup_lane_s32((int32x2_t)_D22, 0);
  v93.f32[0] = v87;
  v94 = (float32x2_t)vdup_lane_s32((int32x2_t)v91, 0);
  v94.f32[0] = v86;
  *(float32x2_t *)(a1 + 132) = vmul_f32(vmla_f32(vneg_f32(vmul_f32(v94, v78)), v69, v93), *(float32x2_t *)v60.f32);
  *(float *)(a1 + 140) = _D18.f32[0] * 6.75;
  v95 = (float32x4_t)vextq_s8(v33, v51, 0xCuLL);
  v95.i32[0] = v33.i32[0];
  v95.i32[3] = v33.i32[0];
  v96 = (float32x4_t)vextq_s8((int8x16_t)xmmword_19FFB3A90, v32, 0xCuLL);
  v96.f32[0] = -0.037037 * v52;
  v96.f32[3] = -0.2963 * v52;
  v97 = vaddq_f32(vmlaq_f32(v96, (float32x4_t)xmmword_19FFB3A90, v95), v204);
  v98 = (float32x4_t)vextq_s8((int8x16_t)v97, vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL), 0xCuLL);
  *(float32x2_t *)&v98.i32[1] = vadd_f32(vmls_f32(v89, v88, *(float32x2_t *)v51.i8), v205);
  *(float32x4_t *)(a1 + 156) = vmulq_f32(vmlaq_f32(vmulq_f32(v98, (float32x4_t)xmmword_19FFB3AB0), (float32x4_t)xmmword_19FFB3AA0, v97), v60);
  *(float32x2_t *)(a1 + 172) = vmul_f32(vmla_f32(vneg_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL), v78)), v69, *(float32x2_t *)&v98.i32[1]), *(float32x2_t *)v60.f32);
  __b = xmmword_19FFB3AC0;
  v238 = xmmword_19FFB3AD0;
  v239 = xmmword_19FFB3AE0;
  v240 = xmmword_19FFB3AF0;
  gm::Matrix<float,4,4>::inverted<int,void>(&v221, (float *)&__b);
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  v100 = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>(a1, 0.33333, 0.33333, v99);
  v102 = v101;
  v173 = *(float *)&v103;
  v76.i32[0] = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>(a1, 0.33333, 0.66667, v103);
  v105 = v104;
  v172 = *(float *)&v106;
  v107 = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>(a1, 0.66667, 0.33333, v106);
  v68.i32[0] = v108;
  v171 = *(float *)&v109;
  v110 = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>(a1, 0.66667, 0.66667, v109);
  v111 = v221;
  v112 = v222;
  v113 = v225;
  v114 = v226;
  v115 = v229;
  v116 = v230;
  v117 = v233;
  v118 = v234;
  v119 = v223;
  v120 = v224;
  v121 = v227;
  v122 = v228;
  v123 = v184 - v100;
  v124 = v186;
  v125 = v196;
  v126 = v197 - v110;
  v127 = v231;
  *(float *)v51.i32 = v232;
  v128 = (float)((float)((float)(v221 * (float)(v184 - v100)) + (float)(v225 * (float)(v187 - v76.f32[0])))
               + (float)(v229 * (float)(v194 - v107)))
       + (float)(v233 * v126);
  v129 = (float)((float)((float)(v222 * (float)(v184 - v100)) + (float)(v226 * (float)(v187 - v76.f32[0])))
               + (float)(v230 * (float)(v194 - v107)))
       + (float)(v234 * v126);
  v130 = (float)((float)(v223 * (float)(v184 - v100)) + (float)(v227 * (float)(v187 - v76.f32[0])))
       + (float)(v231 * (float)(v194 - v107));
  v131 = (float)((float)(v224 * v123) + (float)(v228 * (float)(v187 - v76.f32[0])))
       + (float)(v232 * (float)(v194 - v107));
  v132 = v235;
  v76.f32[0] = v236;
  v133 = v130 + (float)(v235 * v126);
  v134 = v131 + (float)(v236 * v126);
  v135 = v185 - v102;
  v136 = v189;
  v137 = v188 - v105;
  v138 = v195 - v68.f32[0];
  v68.i32[0] = v199;
  v140 = v198 - v139;
  v141 = (float)(v221 * v135) + (float)(v225 * (float)(v188 - v105));
  v142 = (float)(v222 * v135) + (float)(v226 * v137);
  _D11.f32[0] = (float)((float)(v223 * v135) + (float)(v227 * v137)) + (float)(v231 * v138);
  v143 = (float)((float)(v224 * v135) + (float)(v228 * v137)) + (float)(v232 * v138);
  v144 = (float)(v141 + (float)(v229 * v138)) + (float)(v233 * v140);
  v145 = (float)(v142 + (float)(v230 * v138)) + (float)(v234 * v140);
  _D11.f32[0] = _D11.f32[0] + (float)(v235 * v140);
  v146 = v143 + (float)(v236 * v140);
  *(float *)(a1 + 60) = v128;
  *(float *)(a1 + 64) = v144;
  *(float *)(a1 + 108) = v133;
  *(_DWORD *)(a1 + 112) = _D11.i32[0];
  v148 = v68.f32[0] - v147;
  *(float *)(a1 + 68) = (float)((float)((float)(v111 * (float)(v124 - v173)) + (float)(v113 * (float)(v136 - v172)))
                              + (float)(v115 * (float)(v125 - v171)))
                      + (float)(v117 * v148);
  *(float *)(a1 + 72) = v129;
  *(float *)(a1 + 76) = v145;
  *(float *)(a1 + 80) = (float)((float)((float)(v112 * (float)(v124 - v173)) + (float)(v114 * (float)(v136 - v172)))
                              + (float)(v116 * (float)(v125 - v171)))
                      + (float)(v118 * v148);
  *(float *)(a1 + 116) = (float)((float)((float)(v119 * (float)(v124 - v173)) + (float)(v121 * (float)(v136 - v172)))
                               + (float)(v127 * (float)(v125 - v171)))
                       + (float)(v132 * v148);
  *(float *)(a1 + 120) = v134;
  result = (float)((float)((float)(v120 * (float)(v124 - v173)) + (float)(v122 * (float)(v136 - v172)))
                 + (float)(*(float *)v51.i32 * (float)(v125 - v171)))
         + (float)(v76.f32[0] * v148);
  *(float *)(a1 + 124) = v146;
  *(float *)(a1 + 128) = result;
  return result;
}

__n128 gdc::GlobeTileUtils::computeMercatorScaleCoeffs(double a1, double a2)
{
  double v4;
  float32_t v5;
  float32_t v6;
  float32_t v7;
  float32_t v8;
  float32_t v9;
  float32_t v10;
  float32_t v11;
  float32_t v12;
  float *v13;
  float *v14;
  float32x2_t *v15;
  float *v16;
  float32x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  unint64_t v24;
  float v25;
  float32_t v26;
  float32_t v27;
  float32_t v28;
  float32_t v29;
  float32_t v30;
  float32_t v31;
  float32_t v32;
  float v33;
  float32x4_t v34;
  float v35;
  unint64_t v36;
  float32_t v37;
  float32_t v38;
  float32_t v39;
  float32_t v40;
  float32_t v41;
  float32_t v42;
  float32_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float32_t v47;
  float32_t v48;
  float32_t v49;
  float32_t v50;
  float32_t v51;
  float32_t v52;
  float32_t v53;
  float v54;
  float32x4_t v55;
  uint64_t v56;
  float *v57;
  uint64_t i;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t j;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float *f32;
  float *v73;
  float v74;
  BOOL v76;
  float32x4_t v78;
  unint64_t v79;
  uint64_t v80;
  float *v81;
  float *v82;
  float v83;
  float *v84;
  float *v85;
  float v86;
  float *v87;
  uint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float32_t v103;
  float v104;
  float32_t v105;
  float32_t v106;
  float v107;
  float32_t v108;
  float32_t v109;
  __int128 v110;
  __int128 v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;

  v4 = a2 - a1;
  v5 = cosh(a1 * 6.28318531 + -3.14159265);
  v113.f32[0] = v5;
  v6 = cosh((a1 + v4 * 0.142857149) * 6.28318531 + -3.14159265);
  v113.f32[1] = v6;
  v7 = cosh((a1 + v4 * 0.285714298) * 6.28318531 + -3.14159265);
  v113.f32[2] = v7;
  v8 = cosh((a1 + v4 * 0.428571463) * 6.28318531 + -3.14159265);
  v113.f32[3] = v8;
  v9 = cosh((a1 + v4 * 0.571428597) * 6.28318531 + -3.14159265);
  v114.f32[0] = v9;
  v10 = cosh((a1 + v4 * 0.714285731) * 6.28318531 + -3.14159265);
  v114.f32[1] = v10;
  v11 = cosh((a1 + v4 * 0.857142925) * 6.28318531 + -3.14159265);
  v114.f32[2] = v11;
  v12 = cosh(a2 * 6.28318531 + -3.14159265);
  v114.f32[3] = v12;
  v13 = (float *)malloc_type_calloc(9uLL, 4uLL, 0x100004052888210uLL);
  v14 = (float *)malloc_type_malloc(0x18uLL, 0x100004052888210uLL);
  v15 = (float32x2_t *)malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
  v16 = (float *)malloc_type_calloc(3uLL, 4uLL, 0x100004052888210uLL);
  v17 = (float32x2_t *)malloc_type_calloc(3uLL, 4uLL, 0x100004052888210uLL);
  v18 = (float32x4_t *)malloc_type_malloc(0x60uLL, 0x100004052888210uLL);
  v19 = v18;
  __asm { FMOV            V0.4S, #1.0 }
  v18[2] = (float32x4_t)xmmword_19FFB3B00;
  *v18 = _Q0;
  v18[1] = _Q0;
  v18[3] = (float32x4_t)xmmword_19FFB3B20;
  v18[4] = (float32x4_t)xmmword_19FFB3B10;
  v18[5] = (float32x4_t)xmmword_19FFB3B30;
  v24 = (unint64_t)v17 + 4;
  v25 = v17->f32[0];
  if (v17 >= (float32x2_t *)&v18[2] || (unint64_t)v18 >= v24)
  {
    v34 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v25), *v18, *v18), v18[1], v18[1]);
    v33 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34));
  }
  else
  {
    v26 = v25 + (float)(v18->f32[0] * v18->f32[0]);
    v17->f32[0] = v26;
    v27 = v26 + (float)(v18->f32[1] * v18->f32[1]);
    v17->f32[0] = v27;
    v28 = v27 + (float)(v18->f32[2] * v18->f32[2]);
    v17->f32[0] = v28;
    v29 = v28 + (float)(v18->f32[3] * v18->f32[3]);
    v17->f32[0] = v29;
    v30 = v29 + (float)(v18[1].f32[0] * v18[1].f32[0]);
    v17->f32[0] = v30;
    v31 = v30 + (float)(v18[1].f32[1] * v18[1].f32[1]);
    v17->f32[0] = v31;
    v32 = v31 + (float)(v18[1].f32[2] * v18[1].f32[2]);
    v17->f32[0] = v32;
    v33 = v32 + (float)(v18[1].f32[3] * v18[1].f32[3]);
    v17->f32[0] = v33;
  }
  v17->f32[0] = sqrtf(v33);
  v35 = v17->f32[1];
  v36 = (unint64_t)&v17[1];
  if (v24 >= (unint64_t)&v18[4] || (unint64_t)&v18[2] >= v36)
  {
    v45 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v35), v18[2], v18[2]), v18[3], v18[3]);
    v44 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45));
  }
  else
  {
    v37 = v35 + (float)(v18[2].f32[0] * v18[2].f32[0]);
    v17->f32[1] = v37;
    v38 = v37 + (float)(v18[2].f32[1] * v18[2].f32[1]);
    v17->f32[1] = v38;
    v39 = v38 + (float)(v18[2].f32[2] * v18[2].f32[2]);
    v17->f32[1] = v39;
    v40 = v39 + (float)(v18[2].f32[3] * v18[2].f32[3]);
    v17->f32[1] = v40;
    v41 = v40 + (float)(v18[3].f32[0] * v18[3].f32[0]);
    v17->f32[1] = v41;
    v42 = v41 + (float)(v18[3].f32[1] * v18[3].f32[1]);
    v17->f32[1] = v42;
    v43 = v42 + (float)(v18[3].f32[2] * v18[3].f32[2]);
    v17->f32[1] = v43;
    v44 = v43 + (float)(v18[3].f32[3] * v18[3].f32[3]);
    v17->f32[1] = v44;
  }
  v17->f32[1] = sqrtf(v44);
  v46 = v17[1].f32[0];
  if (v36 >= (unint64_t)&v18[6] || &v18[4] >= (float32x4_t *)((char *)&v17[1] + 4))
  {
    v55 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v46), v18[4], v18[4]), v18[5], v18[5]);
    v54 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v55, v55));
  }
  else
  {
    v47 = v46 + (float)(v18[4].f32[0] * v18[4].f32[0]);
    v17[1].f32[0] = v47;
    v48 = v47 + (float)(v18[4].f32[1] * v18[4].f32[1]);
    v17[1].f32[0] = v48;
    v49 = v48 + (float)(v18[4].f32[2] * v18[4].f32[2]);
    v17[1].f32[0] = v49;
    v50 = v49 + (float)(v18[4].f32[3] * v18[4].f32[3]);
    v17[1].f32[0] = v50;
    v51 = v50 + (float)(v18[5].f32[0] * v18[5].f32[0]);
    v17[1].f32[0] = v51;
    v52 = v51 + (float)(v18[5].f32[1] * v18[5].f32[1]);
    v17[1].f32[0] = v52;
    v53 = v52 + (float)(v18[5].f32[2] * v18[5].f32[2]);
    v17[1].f32[0] = v53;
    v54 = v53 + (float)(v18[5].f32[3] * v18[5].f32[3]);
    v17[1].f32[0] = v54;
  }
  v56 = 0;
  v17[1].f32[0] = sqrtf(v54);
  v57 = v13 + 1;
  for (i = 1; i != 7; i += 2)
  {
    v59 = vmlaq_f32(vmulq_f32(v18[i - 1], *v18), v18[1], v18[i]);
    *(v57 - 1) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59)) / (float)(v17->f32[v56] * v17->f32[0]);
    v60 = vmlaq_f32(vmulq_f32(v18[i - 1], v18[2]), v18[3], v18[i]);
    *v57 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v60, v60)) / (float)(v17->f32[v56] * v17->f32[1]);
    v61 = vmlaq_f32(vmulq_f32(v18[i - 1], v18[4]), v18[5], v18[i]);
    v57[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v61, v61)) / (float)(v17->f32[v56] * v17[1].f32[0]);
    v57 += 3;
    ++v56;
  }
  v62 = 0;
  for (j = 0; j != 6; j += 2)
  {
    f32 = v18[j].f32;
    v73 = &v16[v62 + 1];
    v74 = v16[v62];
    v76 = &v16[v62] < (float *)&v115 && v73 > (float *)&v113;
    _CF = f32 >= v73 || &v16[v62] >= v18[j + 2].f32;
    if (!_CF || v76)
    {
      v64 = v74 + (float)(v113.f32[0] * *f32);
      v16[v62] = v64;
      v65 = v64 + (float)(v113.f32[1] * f32[1]);
      v16[v62] = v65;
      v66 = v65 + (float)(v113.f32[2] * f32[2]);
      v16[v62] = v66;
      v67 = v66 + (float)(v113.f32[3] * f32[3]);
      v16[v62] = v67;
      v68 = v67 + (float)(v114.f32[0] * f32[4]);
      v16[v62] = v68;
      v69 = v68 + (float)(v114.f32[1] * f32[5]);
      v16[v62] = v69;
      v70 = v69 + (float)(v114.f32[2] * f32[6]);
      v16[v62] = v70;
      v71 = v70 + (float)(v114.f32[3] * f32[7]);
    }
    else
    {
      v78 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v74), v18[j], v113), v18[j + 1], v114);
      v71 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v78, v78));
    }
    v16[v62] = v71;
    v16[v62] = v71 / v17->f32[v62];
    ++v62;
  }
  v79 = 0;
  v80 = 2;
  v81 = v14;
  v82 = v13;
  do
  {
    v83 = *v82;
    *v81 = *v82;
    v84 = &v81[-v79];
    if (v79)
    {
      v83 = v83 - (float)(*v84 * *v84);
      *v81 = v83;
      if (v79 != 1)
      {
        v83 = v83 - (float)(v84[1] * v84[1]);
        *v81 = v83;
      }
    }
    v86 = *v82;
    v85 = v82 + 1;
    *v81 = sqrtf(fmaxf(v83, v86 * 0.000000001));
    if (v79 <= 1)
    {
      v87 = &v81[v79 + 1];
      if (v79)
      {
        v88 = v80;
        do
        {
          v89 = *v85;
          *v87 = *v85;
          v90 = v89 - (float)(*v84 * v87[-v79]);
          *v87 = v90;
          *v87 = v90 / *v81;
          v87 += v88;
          ++v85;
          ++v88;
        }
        while (v88 != 4);
      }
      else
      {
        v91 = v80;
        do
        {
          v92 = *v85++;
          *v87 = v92;
          *v87 = v92 / *v81;
          v87 += v91++;
        }
        while (v91 != 4);
      }
    }
    v81 += v79 + 2;
    v82 = &v85[v79 + 1];
    ++v80;
    ++v79;
  }
  while (v79 != 3);
  v93 = (float *)malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
  v94 = *v16;
  *v93 = *v16;
  v95 = v94 / *v14;
  *v93 = v95;
  v96 = v16[1];
  v93[1] = v96;
  v97 = v96 - (float)(v95 * v14[1]);
  v93[1] = v97;
  v98 = v97 / v14[2];
  v93[1] = v98;
  v99 = v16[2];
  v93[2] = v99;
  v100 = v99 - (float)(v95 * v14[3]);
  v93[2] = v100;
  v101 = v100 - (float)(v98 * v14[4]);
  v93[2] = v101;
  v102 = v101 / v14[5];
  v93[2] = v102;
  v15[1].f32[0] = v102;
  v103 = v102 / v14[5];
  v15[1].f32[0] = v103;
  v104 = v93[1];
  v15->f32[1] = v104;
  v105 = v104 - (float)(v103 * v14[4]);
  v15->f32[1] = v105;
  v106 = v105 / v14[2];
  v15->f32[1] = v106;
  v107 = *v93;
  v15->f32[0] = *v93;
  v108 = v107 - (float)(v106 * v14[1]);
  v15->f32[0] = v108;
  v109 = v108 - (float)(v103 * v14[3]);
  v15->f32[0] = v109;
  v15->f32[0] = v109 / *v14;
  free(v93);
  *(float32x2_t *)&v110 = vdiv_f32(*v15, *v17);
  v112 = v110;
  free(v13);
  free(v14);
  free(v15);
  free(v16);
  free(v17);
  free(v19);
  return (__n128)v112;
}

float gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>(uint64_t a1, float32_t a2, float32_t a3, double a4)
{
  float32x2_t v4;
  float32_t v5;
  float v6;
  float v7;
  float32x2_t v9;
  float32x2_t v12;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v27;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v35;
  float result;

  v4.f32[0] = 1.0 - a3;
  v5 = (float)(1.0 - a3) * 3.0;
  v6 = v5 * (float)(a3 * a3);
  v7 = (float)(a3 * a3) * a3;
  _D17 = *(float32x2_t *)a1;
  v9 = *(float32x2_t *)(a1 + 12);
  _S6 = *(_DWORD *)(a1 + 20);
  _D22.i32[0] = vdup_lane_s32((int32x2_t)v4, 0).u32[0];
  _D22.f32[1] = a3;
  v12 = vmul_n_f32(_D22, 1.0 - a3);
  v4.f32[1] = v5;
  _D22.i32[0] = *(_QWORD *)(a1 + 48);
  _D22.i32[1] = v9.i32[1];
  _D19 = vmul_f32(v12, v4);
  v9.i32[1] = HIDWORD(*(_QWORD *)(a1 + 48));
  v14 = (float32x2_t)vrev64_s32((int32x2_t)_D19);
  v15 = vmul_f32(v9, v14);
  v9.i32[0] = *(_QWORD *)(a1 + 60);
  v9.i32[1] = HIDWORD(*(_QWORD *)a1);
  v16 = vmul_f32(v9, v14);
  _D17.i32[1] = HIDWORD(*(_QWORD *)(a1 + 60));
  v17 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 144), _D19.f32[0]), *(float32x2_t *)(a1 + 156), _D19, 1);
  v18 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 96), _D19.f32[0]), *(float32x2_t *)(a1 + 108), _D19, 1);
  v19 = vmla_f32(v15, _D19, _D17);
  v20 = vmla_f32(v16, _D19, _D22);
  _D22.i32[0] = *(_DWORD *)(a1 + 164);
  __asm { FMLA            S17, S22, V19.S[1] }
  _D22.i32[0] = *(_DWORD *)(a1 + 116);
  __asm { FMLA            S23, S22, V19.S[1] }
  _D22.i32[0] = *(_DWORD *)(a1 + 68);
  __asm { FMLA            S16, S22, V19.S[1] }
  v27 = *(float32x2_t *)(a1 + 24);
  __asm { FMLA            S7, S6, V19.S[1] }
  _D19.i32[0] = *(_QWORD *)(a1 + 72);
  _D19.i32[1] = v27.i32[1];
  v27.i32[1] = HIDWORD(*(_QWORD *)(a1 + 72));
  _D1 = vmla_n_f32(v19, v27, v6);
  v30 = *(float32x2_t *)(a1 + 36);
  v31.i32[0] = *(_QWORD *)(a1 + 84);
  v31.i32[1] = v30.i32[1];
  v30.i32[1] = HIDWORD(*(_QWORD *)(a1 + 84));
  *(float *)&a4 = 1.0 - a2;
  v32 = vmla_n_f32(vmla_n_f32(v20, _D19, v6), v31, v7);
  _D19.i32[0] = vdup_lane_s32(*(int32x2_t *)&a4, 0).u32[0];
  _S16 = (float)(_S16 + (float)(*(float *)(a1 + 80) * v6)) + (float)(*(float *)(a1 + 92) * v7);
  _D19.f32[1] = a2;
  *((float *)&a4 + 1) = (float)(1.0 - a2) * 3.0;
  _D2 = vmul_f32(vmul_n_f32(_D19, 1.0 - a2), *(float32x2_t *)&a4);
  v35 = vmla_f32(vmul_f32(v32, (float32x2_t)vrev64_s32((int32x2_t)_D2)), _D2, vmla_n_f32(_D1, v30, v7));
  __asm { FMLA            S1, S16, V2.S[1] }
  LODWORD(result) = vmla_n_f32(vmla_n_f32(v35, vmla_n_f32(vmla_n_f32(v18, *(float32x2_t *)(a1 + 120), v6), *(float32x2_t *)(a1 + 132), v7), (float)((float)(1.0 - a2) * 3.0) * (float)(a2 * a2)), vmla_n_f32(vmla_n_f32(v17, *(float32x2_t *)(a1 + 168), v6), *(float32x2_t *)(a1 + 180), v7), (float)(a2 * a2) * a2).u32[0];
  return result;
}

void md::GeometryLogic::setTransformConstantDataWithMercatorRect(_QWORD *a1, double *a2, char a3, double a4, double a5, float a6)
{
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  float *v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  unsigned __int32 v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float v45;
  double v46;
  float v47;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float v59;
  float v60;
  float v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  float v70;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  __int16 v88;
  float *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  _QWORD __b[3];

  if ((a3 & 1) != 0)
  {
    gdc::GlobeTileUtils::createSplinePatchFromMercatorRect((uint64_t)&v90, a2, a4, a5);
    v85 = 0uLL;
    v11 = a1[1];
    *(_QWORD *)&v12 = 0;
    *((_QWORD *)&v12 + 1) = a1;
    v13 = a1[9];
    v85 = v12;
    v86 = 0;
    v87 = v11;
    v89 = (float *)v13;
    v88 = 1;
    DWORD2(v12) = v91;
    *(_QWORD *)(v13 + 32) = v90;
    *(_DWORD *)(v13 + 40) = DWORD2(v12);
    *(_DWORD *)(v13 + 44) = 1065353216;
    v14 = v92;
    *(_DWORD *)(v13 + 56) = v93;
    *(_QWORD *)(v13 + 48) = v14;
    *(_DWORD *)(v13 + 60) = 1065353216;
    v15 = v94;
    v16 = v97;
    *(_DWORD *)(v13 + 72) = v95;
    *(_QWORD *)(v13 + 64) = v15;
    *(_DWORD *)(v13 + 76) = 1065353216;
    v17 = v96;
    *(_DWORD *)(v13 + 88) = v16;
    *(_QWORD *)(v13 + 80) = v17;
    *(_DWORD *)(v13 + 92) = 1065353216;
    *(_QWORD *)&v12 = v98;
    *(_DWORD *)(v13 + 104) = v99;
    *(_QWORD *)(v13 + 96) = v12;
    *(_DWORD *)(v13 + 108) = 1065353216;
    v18 = v100;
    *(_DWORD *)(v13 + 120) = v101;
    *(_QWORD *)(v13 + 112) = v18;
    *(_DWORD *)(v13 + 124) = 1065353216;
    v19 = v102;
    v20 = v105;
    *(_DWORD *)(v13 + 136) = v103;
    *(_QWORD *)(v13 + 128) = v19;
    *(_DWORD *)(v13 + 140) = 1065353216;
    v21 = v104;
    *(_DWORD *)(v13 + 152) = v20;
    *(_QWORD *)(v13 + 144) = v21;
    *(_DWORD *)(v13 + 156) = 1065353216;
    *(_QWORD *)&v12 = v106;
    *(_DWORD *)(v13 + 168) = v107;
    *(_QWORD *)(v13 + 160) = v12;
    *(_DWORD *)(v13 + 172) = 1065353216;
    v22 = v108;
    *(_DWORD *)(v13 + 184) = v109;
    *(_QWORD *)(v13 + 176) = v22;
    *(_DWORD *)(v13 + 188) = 1065353216;
    v23 = v110;
    v24 = v113;
    *(_DWORD *)(v13 + 200) = v111;
    *(_QWORD *)(v13 + 192) = v23;
    *(_DWORD *)(v13 + 204) = 1065353216;
    v25 = v112;
    *(_DWORD *)(v13 + 216) = v24;
    *(_QWORD *)(v13 + 208) = v25;
    *(_DWORD *)(v13 + 220) = 1065353216;
    *(_QWORD *)&v12 = v114;
    *(_DWORD *)(v13 + 232) = v115;
    *(_QWORD *)(v13 + 224) = v12;
    *(_DWORD *)(v13 + 236) = 1065353216;
    v26 = v116;
    *(_DWORD *)(v13 + 248) = v117;
    *(_QWORD *)(v13 + 240) = v26;
    *(_DWORD *)(v13 + 252) = 1065353216;
    v27 = v118;
    v28 = v121;
    *(_DWORD *)(v13 + 264) = v119;
    *(_QWORD *)(v13 + 256) = v27;
    *(_DWORD *)(v13 + 268) = 1065353216;
    v29 = v120;
    *(_DWORD *)(v13 + 280) = v28;
    *(_QWORD *)(v13 + 272) = v29;
    *(_DWORD *)(v13 + 284) = 1065353216;
    v30 = v89;
    *v89 = gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(a2[1], a2[3]);
    *((_DWORD *)v30 + 1) = v31;
    *((_DWORD *)v30 + 2) = v32;
    *((_DWORD *)v30 + 3) = v33;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v34, "daVinciGlobeScalingCorrection"))
    {
      v35 = gdc::GlobeTileUtils::computeMercatorScaleCoeffs(a2[1], a2[3]).n128_u32[0];
    }
    else
    {
      v36 = 0;
      v35 = 1.0;
      v37 = 0;
    }
    *((_DWORD *)v30 + 4) = v35;
    *((_DWORD *)v30 + 5) = v36;
    *((_DWORD *)v30 + 6) = v37;

    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v72, a2, a4, a5);
    v40 = v84;
    v41 = v81;
    v42 = v82;
    v43 = v79;
    v44 = v84 - v81;
    v45 = 1.0 / (v84 - v81);
    v46 = v45;
    v47 = (a5 - a4) * v46;
    v30[85] = v47;
    __asm { FMOV            V5.2S, #1.0 }
    *((_QWORD *)v30 + 43) = _D5;
    *(float *)&v46 = (a6 + a4) * v46;
    v30[84] = *(float *)&v46;
    if (v42 < v43 || v83 < v80 || v40 < v41)
    {
      memset_pattern16(__b, &unk_19FFB63B0, 0x18uLL);
      v53 = *(double *)__b;
      v54 = *(double *)&__b[1];
      v55 = *(double *)&__b[2];
    }
    else
    {
      v56 = -(v74 * v76 - v73 * v77) - (v74 * v76 - v73 * v77);
      v57 = -(v72 * v77 - v74 * v75) - (v72 * v77 - v74 * v75);
      v58 = -(v73 * v75 - v72 * v76) - (v73 * v75 - v72 * v76);
      v53 = (v58 * v76 - (v72 + v43 + v56 * v78 + v57 * v77)) / (v42 - v43);
      v54 = (v73 - v56 * v77 + v57 * v78 + v58 * v75 + v80) / (v80 - v83);
      v55 = (v57 * v75 - (v41 + v74 + v56 * v76 + v58 * v78)) / v44;
    }
    v59 = v55;
    v60 = v54;
    v61 = v53;
    v30[72] = v61;
    v30[73] = v60;
    v30[74] = v59;
    v30[75] = 1.0;
    v63 = v86;
    v62 = v87;
    if (v87 != v86)
    {
      v64 = (_QWORD *)*((_QWORD *)&v85 + 1);
      v65 = v88;
      v66 = HIBYTE(v88);
      if ((_QWORD)v85 && *(_BYTE *)(*((_QWORD *)&v85 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v85 + 64))();
      if (v65 && !v66)
      {
        v68 = v64[7];
        v67 = v64[8];
        if (v67 == v68)
          v68 = v64[10] - v64[9];
        if (v63 < v68)
          v68 = v63;
        if (v67 <= v62)
          v67 = v62;
        if (v67 == v68)
          v67 = v68 + v64[10] - v64[9];
        v64[7] = v68;
        v64[8] = v67;
      }
    }
  }
  else
  {
    v38 = a1[1];
    if (v38)
      v39 = a1[9];
    else
      v39 = 0;
    v69 = a5 - a4;
    if (a5 - a4 == 0.0)
      v69 = 1.0;
    v70 = a6 * 0.0000000249532021 / v69;
    *(float *)(v39 + 336) = v70;
    *(_DWORD *)(v39 + 348) = 1065353216;
    __asm { FMOV            V0.4S, #1.0 }
    *(_QWORD *)(v39 + 340) = _Q0;
    if (v39 && v38)
    {
      if (a1[8] > v38)
        v38 = a1[8];
      a1[7] = 0;
      a1[8] = v38;
    }
  }
}

void sub_19F5A8888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void md::GeometryLogic::tileMatrix(md::GeometryLogic *this, int a2, const QuadTile *a3, double a4, double a5)
{
  double v6;
  int v7;
  double v8;
  uint64_t xIdx;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37[12];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  uint64_t v51;

  if (a2)
  {
    v6 = fmax(a4, 0.0);
    v7 = 1 << a3->_level;
    v8 = 1.0 / (double)v7;
    xIdx = a3->_xIdx;
    v10 = v7 + ~a3->_yIdx;
    v41 = v8 * (double)xIdx;
    *(double *)&v42 = v8 * (double)v10;
    *((double *)&v42 + 1) = v8 + (double)xIdx * v8;
    *(double *)&v43 = v8 + (double)v10 * v8;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v26, &v41, 0.0, v6);
    v44 = 0u;
    v46 = 0;
    v48 = 0;
    v45 = 0u;
    v43 = 0u;
    v42 = 0u;
    v49 = v32;
    v50 = v33;
    v51 = 0x3FF0000000000000;
    v41 = v34 - *(double *)&v32;
    *(double *)&v44 = v35 - *((double *)&v32 + 1);
    v47 = v36 - v33;
    v11 = v29;
    v12 = v30;
    v13 = v11 + v11;
    v14 = (v11 + v11) * v11;
    v15 = (v12 + v12) * v12;
    v16 = v28;
    v17 = v16 + v16;
    v18 = (v16 + v16) * v29;
    v19 = (v12 + v12) * v31;
    v20 = v30 * (v16 + v16);
    v21 = 1.0 - (v16 + v16) * v16;
    v37[0] = 1.0 - (v14 + v15);
    v37[1] = v19 + v18;
    v37[4] = v18 - v19;
    v37[5] = v21 - v15;
    v37[8] = v31 * v13 + v20;
    v37[9] = v13 * v30 - v31 * v17;
    v37[2] = v20 - v31 * v13;
    v37[6] = v31 * v17 + v13 * v30;
    v37[10] = v21 - v14;
    v37[3] = 0.0;
    v37[7] = 0.0;
    v37[11] = 0.0;
    v38 = v26;
    v39 = v27;
    v40 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)this, v37, &v41);
  }
  else
  {
    v22 = 1 << a3->_level;
    v23 = 1.0 / (double)v22;
    v24 = a3->_xIdx;
    v25 = ~a3->_yIdx;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *((_QWORD *)this + 11) = 0;
    *(double *)this = v23;
    *((double *)this + 5) = v23;
    *((double *)this + 10) = v23;
    *((double *)this + 12) = v23 * (double)v24;
    *((double *)this + 13) = v23 * (double)(v22 + v25);
    *((_OWORD *)this + 7) = xmmword_19FFB33A0;
  }
}

void md::GeometryLogic::calculateGeocentricBounds(float32_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  int v28;
  float v29;
  float v30;
  double v31;
  float v32;
  float v33;
  float32x4_t v34;
  float32x2_t v35;
  __int32 v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x2_t v39;
  double v40;
  float32x4_t v41;
  float32x2_t v42;
  __int32 v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x2_t v46;
  double v47;
  float32x4_t v48;
  float32x2_t v49;
  __int32 v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  _BYTE v55[20];
  int v56;
  int v57;
  __int128 v58;
  int v59;
  int v60;
  __int128 v61;
  int v62;
  int v63;
  __int128 v64;
  int v65;
  int v66;
  __int128 v67;
  int v68;
  int v69;
  __int128 v70;
  int v71;
  int v72;
  __int128 v73;
  int v74;
  int v75;
  __int128 v76;
  int v77;
  char v78;
  _BYTE *v79;

  v8 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a2 + 16) & 2) == 0)
  {
    v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v9 != -1)
    {
      *(_QWORD *)v55 = &v78;
      v79 = v55;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v79, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v8)
    v10 = *(_QWORD *)(a2 + 72);
  else
    v10 = 0;
  v11 = *(_DWORD *)(v10 + 32);
  *(_QWORD *)&v12 = *(_QWORD *)(v10 + 36);
  v13 = *(_DWORD *)(v10 + 56);
  *((_QWORD *)&v12 + 1) = *(_QWORD *)(v10 + 48);
  *(_OWORD *)&v55[4] = v12;
  LODWORD(v12) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)&v14 = *(_QWORD *)(v10 + 68);
  v56 = v13;
  v57 = v12;
  *((_QWORD *)&v14 + 1) = *(_QWORD *)(v10 + 80);
  LODWORD(v12) = *(_DWORD *)(v10 + 88);
  v58 = v14;
  LODWORD(v14) = *(_DWORD *)(v10 + 96);
  *(_QWORD *)&v15 = *(_QWORD *)(v10 + 100);
  v59 = v12;
  v60 = v14;
  LODWORD(v14) = *(_DWORD *)(v10 + 120);
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(v10 + 112);
  v61 = v15;
  LODWORD(v12) = *(_DWORD *)(v10 + 128);
  *(_QWORD *)&v15 = *(_QWORD *)(v10 + 132);
  v62 = v14;
  v63 = v12;
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(v10 + 144);
  LODWORD(v12) = *(_DWORD *)(v10 + 152);
  v64 = v15;
  LODWORD(v14) = *(_DWORD *)(v10 + 160);
  *(_QWORD *)&v15 = *(_QWORD *)(v10 + 164);
  v65 = v12;
  v66 = v14;
  LODWORD(v14) = *(_DWORD *)(v10 + 184);
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(v10 + 176);
  v67 = v15;
  LODWORD(v12) = *(_DWORD *)(v10 + 192);
  *(_QWORD *)&v15 = *(_QWORD *)(v10 + 196);
  v68 = v14;
  v69 = v12;
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(v10 + 208);
  LODWORD(v12) = *(_DWORD *)(v10 + 216);
  v70 = v15;
  LODWORD(v14) = *(_DWORD *)(v10 + 224);
  *(_QWORD *)&v15 = *(_QWORD *)(v10 + 228);
  v71 = v12;
  v72 = v14;
  LODWORD(v14) = *(_DWORD *)(v10 + 248);
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(v10 + 240);
  v73 = v15;
  LODWORD(v12) = *(_DWORD *)(v10 + 256);
  *(_QWORD *)&v15 = *(_QWORD *)(v10 + 260);
  v74 = v14;
  v75 = v12;
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(v10 + 272);
  LODWORD(v12) = *(_DWORD *)(v10 + 280);
  v76 = v15;
  v77 = v12;
  v16 = *(float *)(v10 + 288);
  v17 = *(float *)(v10 + 292);
  v18 = *(float *)(v10 + 296);
  *(_DWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = 0;
  *(_OWORD *)a3 = xmmword_19FFB3470;
  *(_QWORD *)(a3 + 16) = 0x80000000800000;
  *(float32_t *)&v12 = *a1;
  *(float32_t *)&v14 = a1[1];
  *(float *)&v15 = *(float *)(v10 + 8) + (float)(*(float *)(v10 + 12) * *(float *)&v14);
  *(_DWORD *)v55 = v11;
  v19 = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>((uint64_t)v55, *(float32_t *)&v12, *(float *)v10+ (float)((float)(*(float *)(v10 + 4) + (float)(*(float *)&v15 * *(float *)&v14)) * *(float *)&v14), *(double *)&v14);
  *(float *)a3 = v19;
  *(float *)(a3 + 4) = v20;
  *(float *)(a3 + 8) = v21;
  v22 = v19 - v16;
  v23 = v20 - v17;
  v24 = v21 - v18;
  v25 = 1.0 / sqrtf((float)((float)(v22 * v22) + (float)(v23 * v23)) + (float)(v24 * v24));
  *(float *)a4 = v25 * v22;
  *(float *)(a4 + 4) = v25 * v23;
  *(float *)(a4 + 8) = v25 * v24;
  v26 = a1[4];
  *(float *)&v27 = *(float *)(v10 + 4)
                 + (float)((float)(*(float *)(v10 + 8) + (float)(*(float *)(v10 + 12) * v26)) * v26);
  *(float *)(a3 + 12) = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>((uint64_t)v55, a1[3], *(float *)v10 + (float)(*(float *)&v27 * v26), v27);
  *(_DWORD *)(a3 + 16) = v28;
  *(_DWORD *)(a3 + 20) = LODWORD(v31);
  v29 = a1[1];
  v30 = a1[3] - *a1;
  *(float *)&v31 = a1[4] - v29;
  if (v30 >= 0.5 || *(float *)&v31 >= 0.5)
  {
    v32 = v29 + (float)(*(float *)&v31 * 0.5);
    *(float *)&v31 = *(float *)(v10 + 4)
                   + (float)((float)(*(float *)(v10 + 8) + (float)(*(float *)(v10 + 12) * v32)) * v32);
    v33 = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>((uint64_t)v55, *a1 + (float)(v30 * 0.5), *(float *)v10 + (float)(*(float *)&v31 * v32), v31);
    v34.i32[3] = HIDWORD(*(_OWORD *)a3);
    v34.i64[0] = __PAIR64__(v35.u32[0], LODWORD(v33));
    v34.i32[2] = v36;
    v37 = *(float32x4_t *)a3;
    v37.f32[3] = v33;
    v38 = (int8x16_t)vcgtq_f32(v37, v34);
    v34.f32[3] = v33;
    v53 = vbslq_s8(v38, (int8x16_t)v34, *(int8x16_t *)a3);
    *(int8x16_t *)a3 = v53;
    v35.i32[1] = v36;
    v39 = vmaxnm_f32(*(float32x2_t *)(a3 + 16), v35);
    *(float32x2_t *)(a3 + 16) = v39;
    v35.f32[0] = a1[4];
    *(float *)&v40 = *(float *)(v10 + 4)
                   + (float)((float)(*(float *)(v10 + 8) + (float)(*(float *)(v10 + 12) * v35.f32[0])) * v35.f32[0]);
    v41.i32[0] = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>((uint64_t)v55, *a1, *(float *)v10 + (float)(*(float *)&v40 * v35.f32[0]), v40);
    v41.i32[1] = v42.i32[0];
    v41.i64[1] = __PAIR64__(v53.u32[3], v43);
    v44 = (float32x4_t)v53;
    v44.i32[3] = v41.i32[0];
    v45 = (int8x16_t)vcgtq_f32(v44, v41);
    v41.i32[3] = v41.i32[0];
    v54 = vbslq_s8(v45, (int8x16_t)v41, v53);
    v42.i32[1] = v43;
    *(int8x16_t *)a3 = v54;
    v46 = vmaxnm_f32(v39, v42);
    *(float32x2_t *)(a3 + 16) = v46;
    v42.f32[0] = a1[1];
    *(float *)&v47 = *(float *)(v10 + 4)
                   + (float)((float)(*(float *)(v10 + 8) + (float)(*(float *)(v10 + 12) * v42.f32[0])) * v42.f32[0]);
    v48.i32[0] = gm::cubicBezierPatch<gm::Matrix<float,3,1>,float>((uint64_t)v55, a1[3], *(float *)v10 + (float)(*(float *)&v47 * v42.f32[0]), v47);
    v48.i32[1] = v49.i32[0];
    v48.i64[1] = __PAIR64__(v54.u32[3], v50);
    v51 = (float32x4_t)v54;
    v51.i32[3] = v48.i32[0];
    v52 = (int8x16_t)vcgtq_f32(v51, v48);
    v48.i32[3] = v48.i32[0];
    *(int8x16_t *)a3 = vbslq_s8(v52, (int8x16_t)v48, v54);
    v49.i32[1] = v50;
    *(float32x2_t *)(a3 + 16) = vmaxnm_f32(v46, v49);
  }
}

double md::GeometryLogic::scaleGeocentricBoundsWithNormal(float32x4_t *a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t a6)
{
  unint64_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x2_t v14;
  int32x2_t v15;
  float32x4_t v16;
  float32x2_t v17;
  char v19;
  char **v20;
  char *v21;

  if ((*(_BYTE *)(a5 + 16) & 2) == 0)
  {
    v11 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v11 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v12 = a2[1];
  v12.i32[1] = a2[2].i32[1];
  *(float32x2_t *)a6.i8 = vmul_n_f32(v12, (float)(*(float *)(*(_QWORD *)(a5 + 72) + 344) * *(float *)(*(_QWORD *)(a5 + 72) + 340))* *(float *)(*(_QWORD *)(a5 + 72) + 348));
  v13 = (float32x4_t)vzip1q_s32(a6, a6);
  v13.i32[2] = a6.i32[0];
  v14 = *(float32x2_t *)(a4 + 4);
  v15 = vzip1_s32(*(int32x2_t *)a4, (int32x2_t)v14);
  *(int32x2_t *)v16.f32 = v15;
  v16.i64[1] = __PAIR64__(v15.u32[0], vdup_lane_s32((int32x2_t)v14, 1).u32[0]);
  v17 = vmla_lane_f32(*(float32x2_t *)(a3 + 16), v14, *(float32x2_t *)a6.i8, 1);
  *a1 = vmlaq_f32(*(float32x4_t *)a3, v13, v16);
  *(float32x2_t *)a1[1].f32 = v17;
  return *(double *)a6.i64;
}

void md::GeometryLogic::createBox(char **a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v56;
  int v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v106;
  int v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  int v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  char *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  _OWORD *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  int v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _BYTE *v150;
  char *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  int v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  char *v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  _OWORD *v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  int v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  _OWORD *v206;
  char *v207;
  uint64_t v208;
  __int128 v209;
  int v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  char *v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  _OWORD *v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  int v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  _BYTE *v235;
  char *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  _OWORD *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  int v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _BYTE *v252;
  char *v253;
  unint64_t v254;
  char *v255;
  uint64_t v256;
  _OWORD *v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  int v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  _BYTE *v269;
  char *v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  _OWORD *v274;
  char *v275;
  uint64_t v276;
  __int128 v277;
  int v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _BYTE *v286;
  char *v287;
  unint64_t v288;
  char *v289;
  uint64_t v290;
  _OWORD *v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  int v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  _BYTE *v303;
  char *v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  _OWORD *v308;
  char *v309;
  uint64_t v310;
  __int128 v311;
  int v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _BYTE *v320;
  char *v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  _OWORD *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  int v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _BYTE *v337;
  char *v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  _OWORD *v342;
  char *v343;
  uint64_t v344;
  __int128 v345;
  int v346;
  char *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  _BYTE *v354;
  char *v355;
  unint64_t v356;
  char *v357;
  uint64_t v358;
  _OWORD *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  int v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  _BYTE *v371;
  char *v372;
  unint64_t v373;
  char *v374;
  uint64_t v375;
  _OWORD *v376;
  char *v377;
  uint64_t v378;
  __int128 v379;
  int v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  _BYTE *v388;
  char *v389;
  unint64_t v390;
  char *v391;
  uint64_t v392;
  _OWORD *v393;
  char *v394;
  uint64_t v395;
  __int128 v396;
  int v397;
  char *v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  _BYTE *v405;
  char *v406;
  unint64_t v407;
  char *v408;
  uint64_t v409;
  _OWORD *v410;
  char *v411;
  uint64_t v412;
  __int128 v413;
  int v414;
  char *v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  _BYTE *v422;
  char *v423;
  unint64_t v424;
  char *v425;
  uint64_t v426;
  _OWORD *v427;
  char *v428;
  uint64_t v429;
  __int128 v430;
  int v431;
  char *v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  unint64_t v438;
  _BYTE *v439;
  char *v440;
  unint64_t v441;
  char *v442;
  uint64_t v443;
  _OWORD *v444;
  char *v445;
  uint64_t v446;
  __int128 v447;
  int v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  _BYTE *v456;
  char *v457;
  unint64_t v458;
  char *v459;
  uint64_t v460;
  _OWORD *v461;
  char *v462;
  uint64_t v463;
  __int128 v464;
  int v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  _BYTE *v473;
  char *v474;
  unint64_t v475;
  char *v476;
  uint64_t v477;
  _OWORD *v478;
  char *v479;
  uint64_t v480;
  __int128 v481;
  int v482;
  char *v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  _BYTE *v490;
  char *v491;
  unint64_t v492;
  char *v493;
  uint64_t v494;
  _OWORD *v495;
  char *v496;
  uint64_t v497;
  __int128 v498;
  int v499;
  char *v500;
  char *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  _BYTE *v507;
  char *v508;
  unint64_t v509;
  char *v510;
  uint64_t v511;
  _OWORD *v512;
  char *v513;
  uint64_t v514;
  __int128 v515;
  int v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  _BYTE *v524;
  char *v525;
  unint64_t v526;
  char *v527;
  uint64_t v528;
  _OWORD *v529;
  char *v530;
  uint64_t v531;
  __int128 v532;
  int v533;
  char *v534;
  char *v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  _BYTE *v541;
  char *v542;
  unint64_t v543;
  char *v544;
  uint64_t v545;
  _OWORD *v546;
  char *v547;
  uint64_t v548;
  __int128 v549;
  int v550;
  char *v551;
  char *v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  _BYTE *v558;
  char *v559;
  unint64_t v560;
  char *v561;
  uint64_t v562;
  _OWORD *v563;
  char *v564;
  uint64_t v565;
  __int128 v566;
  int v567;
  char *v568;
  char *v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  uint64_t v573;
  unint64_t v574;
  _BYTE *v575;
  char *v576;
  unint64_t v577;
  char *v578;
  uint64_t v579;
  _OWORD *v580;
  char *v581;
  uint64_t v582;
  __int128 v583;
  int v584;
  char *v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  _BYTE *v592;
  char *v593;
  unint64_t v594;
  char *v595;
  uint64_t v596;
  _OWORD *v597;
  char *v598;
  uint64_t v599;
  __int128 v600;
  int v601;
  char *v602;
  char *v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  unint64_t v608;
  _BYTE *v609;
  char *v610;
  unint64_t v611;
  char *v612;
  uint64_t v613;
  _OWORD *v614;
  char *v615;
  uint64_t v616;
  __int128 v617;
  int v618;
  char *v619;
  char *v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t v624;
  unint64_t v625;
  _BYTE *v626;
  char *v627;
  unint64_t v628;
  char *v629;
  uint64_t v630;
  _OWORD *v631;
  char *v632;
  uint64_t v633;
  __int128 v634;
  int v635;
  char *v636;
  char *v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  uint64_t v641;
  unint64_t v642;
  _BYTE *v643;
  char *v644;
  unint64_t v645;
  char *v646;
  uint64_t v647;
  _OWORD *v648;
  char *v649;
  uint64_t v650;
  __int128 v651;
  int v652;
  char *v653;
  char *v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  _BYTE *v660;
  char *v661;
  unint64_t v662;
  char *v663;
  uint64_t v664;
  _OWORD *v665;
  char *v666;
  uint64_t v667;
  __int128 v668;
  int v669;
  char *v670;
  char *v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  unint64_t v676;
  _BYTE *v677;
  char *v678;
  unint64_t v679;
  char *v680;
  uint64_t v681;
  _OWORD *v682;
  char *v683;
  uint64_t v684;
  __int128 v685;
  int v686;
  char *v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  _BYTE *v694;
  char *v695;
  unint64_t v696;
  char *v697;
  uint64_t v698;
  _OWORD *v699;
  char *v700;
  uint64_t v701;
  __int128 v702;
  int v703;
  char *v704;
  char *v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  unint64_t v710;
  _BYTE *v711;
  char *v712;
  char *v713;
  unint64_t v714;
  char *v715;
  uint64_t v716;
  _OWORD *v717;
  char *v718;
  uint64_t v719;
  __int128 v720;
  int v721;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555)
      goto LABEL_971;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        goto LABEL_972;
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[12 * v8];
    *((_DWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = 0;
    v6 = v13 + 12;
    if (v5 != v7)
    {
      do
      {
        v14 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v15 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v13 - 12) = v14;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[12 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *((_DWORD *)v5 + 2) = 0;
    v6 = v5 + 12;
    *(_QWORD *)v5 = 0;
  }
  a1[1] = v6;
  v16 = (unint64_t)a1[2];
  if ((unint64_t)v6 < v16)
  {
    *((_DWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = 1065353216;
    v17 = v6 + 12;
    goto LABEL_36;
  }
  v18 = *a1;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 2);
  v20 = v19 + 1;
  if (v19 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v18) >> 2);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0xAAAAAAAAAAAAAAALL)
    v22 = 0x1555555555555555;
  else
    v22 = v20;
  if (v22)
  {
    if (v22 > 0x1555555555555555)
      goto LABEL_972;
    v23 = (char *)operator new(12 * v22);
  }
  else
  {
    v23 = 0;
  }
  v24 = &v23[12 * v19];
  v25 = &v23[12 * v22];
  *((_DWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = 1065353216;
  v17 = v24 + 12;
  if (v6 == v18)
  {
    *a1 = v24;
    a1[1] = v17;
    a1[2] = v25;
LABEL_35:
    operator delete(v6);
    goto LABEL_36;
  }
  do
  {
    v26 = *(_QWORD *)(v6 - 12);
    v6 -= 12;
    v27 = *((_DWORD *)v6 + 2);
    *(_QWORD *)(v24 - 12) = v26;
    v24 -= 12;
    *((_DWORD *)v24 + 2) = v27;
  }
  while (v6 != v18);
  v6 = *a1;
  *a1 = v24;
  a1[1] = v17;
  a1[2] = v25;
  if (v6)
    goto LABEL_35;
LABEL_36:
  a1[1] = v17;
  v28 = (unint64_t)a1[2];
  if ((unint64_t)v17 < v28)
  {
    *((_DWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = 0x3F80000000000000;
    v29 = v17 + 12;
    goto LABEL_54;
  }
  v30 = *a1;
  v31 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a1) >> 2);
  v32 = v31 + 1;
  if (v31 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v30) >> 2);
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0xAAAAAAAAAAAAAAALL)
    v34 = 0x1555555555555555;
  else
    v34 = v32;
  if (v34)
  {
    if (v34 > 0x1555555555555555)
      goto LABEL_972;
    v35 = (char *)operator new(12 * v34);
  }
  else
  {
    v35 = 0;
  }
  v36 = &v35[12 * v31];
  v37 = &v35[12 * v34];
  *((_DWORD *)v36 + 2) = 0;
  *(_QWORD *)v36 = 0x3F80000000000000;
  v29 = v36 + 12;
  if (v17 == v30)
  {
    *a1 = v36;
    a1[1] = v29;
    a1[2] = v37;
LABEL_53:
    operator delete(v17);
    goto LABEL_54;
  }
  do
  {
    v38 = *(_QWORD *)(v17 - 12);
    v17 -= 12;
    v39 = *((_DWORD *)v17 + 2);
    *(_QWORD *)(v36 - 12) = v38;
    v36 -= 12;
    *((_DWORD *)v36 + 2) = v39;
  }
  while (v17 != v30);
  v17 = *a1;
  *a1 = v36;
  a1[1] = v29;
  a1[2] = v37;
  if (v17)
    goto LABEL_53;
LABEL_54:
  a1[1] = v29;
  v40 = (unint64_t)a1[2];
  if ((unint64_t)v29 < v40)
  {
    *((_DWORD *)v29 + 2) = 0;
    __asm { FMOV            V0.4S, #1.0 }
    *(_QWORD *)v29 = _Q0;
    v46 = v29 + 12;
    goto LABEL_72;
  }
  v47 = *a1;
  v48 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a1) >> 2);
  v49 = v48 + 1;
  if (v48 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v47) >> 2);
  if (2 * v50 > v49)
    v49 = 2 * v50;
  if (v50 >= 0xAAAAAAAAAAAAAAALL)
    v51 = 0x1555555555555555;
  else
    v51 = v49;
  if (v51)
  {
    if (v51 > 0x1555555555555555)
      goto LABEL_972;
    v52 = (char *)operator new(12 * v51);
  }
  else
  {
    v52 = 0;
  }
  v53 = &v52[12 * v48];
  v54 = &v52[12 * v51];
  *((_DWORD *)v53 + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)v53 = _Q0;
  v46 = v53 + 12;
  if (v29 == v47)
  {
    *a1 = v53;
    a1[1] = v46;
    a1[2] = v54;
LABEL_71:
    operator delete(v29);
    goto LABEL_72;
  }
  do
  {
    v56 = *(_QWORD *)(v29 - 12);
    v29 -= 12;
    v57 = *((_DWORD *)v29 + 2);
    *(_QWORD *)(v53 - 12) = v56;
    v53 -= 12;
    *((_DWORD *)v53 + 2) = v57;
  }
  while (v29 != v47);
  v29 = *a1;
  *a1 = v53;
  a1[1] = v46;
  a1[2] = v54;
  if (v29)
    goto LABEL_71;
LABEL_72:
  a1[1] = v46;
  v58 = (unint64_t)a1[2];
  if ((unint64_t)v46 < v58)
  {
    *((_DWORD *)v46 + 2) = 1065353216;
    *(_QWORD *)v46 = 0;
    v59 = v46 + 12;
    goto LABEL_90;
  }
  v60 = *a1;
  v61 = 0xAAAAAAAAAAAAAAABLL * ((v46 - *a1) >> 2);
  v62 = v61 + 1;
  if (v61 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)v60) >> 2);
  if (2 * v63 > v62)
    v62 = 2 * v63;
  if (v63 >= 0xAAAAAAAAAAAAAAALL)
    v64 = 0x1555555555555555;
  else
    v64 = v62;
  if (v64)
  {
    if (v64 > 0x1555555555555555)
      goto LABEL_972;
    v65 = (char *)operator new(12 * v64);
  }
  else
  {
    v65 = 0;
  }
  v66 = &v65[12 * v61];
  v67 = &v65[12 * v64];
  *((_DWORD *)v66 + 2) = 1065353216;
  *(_QWORD *)v66 = 0;
  v59 = v66 + 12;
  if (v46 == v60)
  {
    *a1 = v66;
    a1[1] = v59;
    a1[2] = v67;
LABEL_89:
    operator delete(v46);
    goto LABEL_90;
  }
  do
  {
    v68 = *(_QWORD *)(v46 - 12);
    v46 -= 12;
    v69 = *((_DWORD *)v46 + 2);
    *(_QWORD *)(v66 - 12) = v68;
    v66 -= 12;
    *((_DWORD *)v66 + 2) = v69;
  }
  while (v46 != v60);
  v46 = *a1;
  *a1 = v66;
  a1[1] = v59;
  a1[2] = v67;
  if (v46)
    goto LABEL_89;
LABEL_90:
  a1[1] = v59;
  v70 = (unint64_t)a1[2];
  if ((unint64_t)v59 < v70)
  {
    *((_DWORD *)v59 + 2) = 1065353216;
    *(_QWORD *)v59 = 1065353216;
    v71 = v59 + 12;
    goto LABEL_108;
  }
  v72 = *a1;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((v59 - *a1) >> 2);
  v74 = v73 + 1;
  if (v73 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v72) >> 2);
  if (2 * v75 > v74)
    v74 = 2 * v75;
  if (v75 >= 0xAAAAAAAAAAAAAAALL)
    v76 = 0x1555555555555555;
  else
    v76 = v74;
  if (v76)
  {
    if (v76 > 0x1555555555555555)
      goto LABEL_972;
    v77 = (char *)operator new(12 * v76);
  }
  else
  {
    v77 = 0;
  }
  v78 = &v77[12 * v73];
  v79 = &v77[12 * v76];
  *((_DWORD *)v78 + 2) = 1065353216;
  *(_QWORD *)v78 = 1065353216;
  v71 = v78 + 12;
  if (v59 == v72)
  {
    *a1 = v78;
    a1[1] = v71;
    a1[2] = v79;
LABEL_107:
    operator delete(v59);
    goto LABEL_108;
  }
  do
  {
    v80 = *(_QWORD *)(v59 - 12);
    v59 -= 12;
    v81 = *((_DWORD *)v59 + 2);
    *(_QWORD *)(v78 - 12) = v80;
    v78 -= 12;
    *((_DWORD *)v78 + 2) = v81;
  }
  while (v59 != v72);
  v59 = *a1;
  *a1 = v78;
  a1[1] = v71;
  a1[2] = v79;
  if (v59)
    goto LABEL_107;
LABEL_108:
  a1[1] = v71;
  v82 = (unint64_t)a1[2];
  if ((unint64_t)v71 < v82)
  {
    *((_DWORD *)v71 + 2) = 1065353216;
    *(_QWORD *)v71 = 0x3F80000000000000;
    v83 = v71 + 12;
    goto LABEL_126;
  }
  v84 = *a1;
  v85 = 0xAAAAAAAAAAAAAAABLL * ((v71 - *a1) >> 2);
  v86 = v85 + 1;
  if (v85 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (_QWORD)v84) >> 2);
  if (2 * v87 > v86)
    v86 = 2 * v87;
  if (v87 >= 0xAAAAAAAAAAAAAAALL)
    v88 = 0x1555555555555555;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 > 0x1555555555555555)
      goto LABEL_972;
    v89 = (char *)operator new(12 * v88);
  }
  else
  {
    v89 = 0;
  }
  v90 = &v89[12 * v85];
  v91 = &v89[12 * v88];
  *((_DWORD *)v90 + 2) = 1065353216;
  *(_QWORD *)v90 = 0x3F80000000000000;
  v83 = v90 + 12;
  if (v71 == v84)
  {
    *a1 = v90;
    a1[1] = v83;
    a1[2] = v91;
LABEL_125:
    operator delete(v71);
    goto LABEL_126;
  }
  do
  {
    v92 = *(_QWORD *)(v71 - 12);
    v71 -= 12;
    v93 = *((_DWORD *)v71 + 2);
    *(_QWORD *)(v90 - 12) = v92;
    v90 -= 12;
    *((_DWORD *)v90 + 2) = v93;
  }
  while (v71 != v84);
  v71 = *a1;
  *a1 = v90;
  a1[1] = v83;
  a1[2] = v91;
  if (v71)
    goto LABEL_125;
LABEL_126:
  a1[1] = v83;
  v94 = (unint64_t)a1[2];
  if ((unint64_t)v83 < v94)
  {
    *((_DWORD *)v83 + 2) = 1065353216;
    __asm { FMOV            V0.4S, #1.0 }
    *(_QWORD *)v83 = _Q0;
    v96 = v83 + 12;
    goto LABEL_144;
  }
  v97 = *a1;
  v98 = 0xAAAAAAAAAAAAAAABLL * ((v83 - *a1) >> 2);
  v99 = v98 + 1;
  if (v98 + 1 > 0x1555555555555555)
    goto LABEL_971;
  v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v97) >> 2);
  if (2 * v100 > v99)
    v99 = 2 * v100;
  if (v100 >= 0xAAAAAAAAAAAAAAALL)
    v101 = 0x1555555555555555;
  else
    v101 = v99;
  if (v101)
  {
    if (v101 > 0x1555555555555555)
      goto LABEL_972;
    v102 = (char *)operator new(12 * v101);
  }
  else
  {
    v102 = 0;
  }
  v103 = &v102[12 * v98];
  v104 = &v102[12 * v101];
  *((_DWORD *)v103 + 2) = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)v103 = _Q0;
  v96 = v103 + 12;
  if (v83 == v97)
  {
    *a1 = v103;
    a1[1] = v96;
    a1[2] = v104;
LABEL_143:
    operator delete(v83);
    goto LABEL_144;
  }
  do
  {
    v106 = *(_QWORD *)(v83 - 12);
    v83 -= 12;
    v107 = *((_DWORD *)v83 + 2);
    *(_QWORD *)(v103 - 12) = v106;
    v103 -= 12;
    *((_DWORD *)v103 + 2) = v107;
  }
  while (v83 != v97);
  v83 = *a1;
  *a1 = v103;
  a1[1] = v96;
  a1[2] = v104;
  if (v83)
    goto LABEL_143;
LABEL_144:
  a1[1] = v96;
  v109 = a2[1];
  v108 = a2[2];
  if (v109 >= v108)
  {
    v111 = *a2;
    v112 = v109 - *a2;
    v113 = v112 >> 2;
    v114 = (v112 >> 2) + 1;
    if (v114 >> 62)
      goto LABEL_971;
    v115 = v108 - v111;
    if (v115 >> 1 > v114)
      v114 = v115 >> 1;
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
      v116 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v116 = v114;
    if (v116)
    {
      if (v116 >> 62)
        goto LABEL_972;
      v117 = operator new(4 * v116);
    }
    else
    {
      v117 = 0;
    }
    v118 = &v117[4 * v113];
    v108 = &v117[4 * v116];
    *(_DWORD *)v118 = 0;
    v110 = v118 + 4;
    if (v109 != v111)
    {
      v119 = v109 - v111 - 4;
      if (v119 < 0x2C)
        goto LABEL_975;
      if ((unint64_t)(v109 - &v117[v112]) < 0x20)
        goto LABEL_975;
      v120 = (v119 >> 2) + 1;
      v121 = &v117[4 * v113 - 16];
      v122 = v109 - 16;
      v123 = v120 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        *v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 8;
      }
      while (v123);
      v118 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
      v109 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
      if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_975:
        do
        {
          v125 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *((_DWORD *)v118 - 1) = v125;
          v118 -= 4;
        }
        while (v109 != v111);
      }
    }
    *a2 = v118;
    a2[1] = v110;
    a2[2] = v108;
    if (v111)
    {
      operator delete(v111);
      v108 = a2[2];
    }
  }
  else
  {
    *(_DWORD *)v109 = 0;
    v110 = v109 + 4;
  }
  a2[1] = v110;
  if (v110 < v108)
  {
    *(_DWORD *)v110 = 1;
    v126 = v110 + 4;
    goto LABEL_188;
  }
  v127 = *a2;
  v128 = v110 - *a2;
  v129 = v128 >> 2;
  v130 = (v128 >> 2) + 1;
  if (v130 >> 62)
    goto LABEL_971;
  v131 = v108 - v127;
  if (v131 >> 1 > v130)
    v130 = v131 >> 1;
  if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
    v132 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v132 = v130;
  if (v132)
  {
    if (v132 >> 62)
      goto LABEL_972;
    v133 = operator new(4 * v132);
  }
  else
  {
    v133 = 0;
  }
  v134 = &v133[4 * v129];
  v108 = &v133[4 * v132];
  *(_DWORD *)v134 = 1;
  v126 = v134 + 4;
  if (v110 != v127)
  {
    v135 = v110 - v127 - 4;
    if (v135 < 0x2C)
    {
      v136 = v110;
      goto LABEL_185;
    }
    if ((unint64_t)(v110 - v133 - v128) < 0x20)
    {
      v136 = v110;
      do
      {
LABEL_185:
        v142 = *((_DWORD *)v136 - 1);
        v136 -= 4;
        *((_DWORD *)v134 - 1) = v142;
        v134 -= 4;
      }
      while (v136 != v127);
      goto LABEL_186;
    }
    v137 = (v135 >> 2) + 1;
    v136 = &v110[-4 * (v137 & 0x7FFFFFFFFFFFFFF8)];
    v138 = &v133[4 * v129 - 16];
    v139 = v110 - 16;
    v140 = v137 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v141 = *(_OWORD *)v139;
      *(v138 - 1) = *((_OWORD *)v139 - 1);
      *v138 = v141;
      v138 -= 2;
      v139 -= 32;
      v140 -= 8;
    }
    while (v140);
    v134 -= 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
    if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_185;
  }
LABEL_186:
  *a2 = v134;
  a2[1] = v126;
  a2[2] = v108;
  if (v127)
  {
    operator delete(v127);
    v108 = a2[2];
  }
LABEL_188:
  a2[1] = v126;
  if (v126 < v108)
  {
    *(_DWORD *)v126 = 2;
    v143 = v126 + 4;
    goto LABEL_211;
  }
  v144 = *a2;
  v145 = v126 - *a2;
  v146 = v145 >> 2;
  v147 = (v145 >> 2) + 1;
  if (v147 >> 62)
    goto LABEL_971;
  v148 = v108 - v144;
  if (v148 >> 1 > v147)
    v147 = v148 >> 1;
  if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
    v149 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v149 = v147;
  if (v149)
  {
    if (v149 >> 62)
      goto LABEL_972;
    v150 = operator new(4 * v149);
  }
  else
  {
    v150 = 0;
  }
  v151 = &v150[4 * v146];
  v108 = &v150[4 * v149];
  *(_DWORD *)v151 = 2;
  v143 = v151 + 4;
  if (v126 != v144)
  {
    v152 = v126 - v144 - 4;
    if (v152 < 0x2C)
    {
      v153 = v126;
      goto LABEL_208;
    }
    if ((unint64_t)(v126 - v150 - v145) < 0x20)
    {
      v153 = v126;
      do
      {
LABEL_208:
        v159 = *((_DWORD *)v153 - 1);
        v153 -= 4;
        *((_DWORD *)v151 - 1) = v159;
        v151 -= 4;
      }
      while (v153 != v144);
      goto LABEL_209;
    }
    v154 = (v152 >> 2) + 1;
    v153 = &v126[-4 * (v154 & 0x7FFFFFFFFFFFFFF8)];
    v155 = &v150[4 * v146 - 16];
    v156 = v126 - 16;
    v157 = v154 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v158 = *(_OWORD *)v156;
      *(v155 - 1) = *((_OWORD *)v156 - 1);
      *v155 = v158;
      v155 -= 2;
      v156 -= 32;
      v157 -= 8;
    }
    while (v157);
    v151 -= 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
    if (v154 != (v154 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_208;
  }
LABEL_209:
  *a2 = v151;
  a2[1] = v143;
  a2[2] = v108;
  if (v144)
  {
    operator delete(v144);
    v108 = a2[2];
  }
LABEL_211:
  a2[1] = v143;
  if (v143 < v108)
  {
    *(_DWORD *)v143 = 2;
    v160 = v143 + 4;
    goto LABEL_234;
  }
  v161 = *a2;
  v162 = v143 - *a2;
  v163 = v162 >> 2;
  v164 = (v162 >> 2) + 1;
  if (v164 >> 62)
    goto LABEL_971;
  v165 = v108 - v161;
  if (v165 >> 1 > v164)
    v164 = v165 >> 1;
  if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
    v166 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v166 = v164;
  if (v166)
  {
    if (v166 >> 62)
      goto LABEL_972;
    v167 = operator new(4 * v166);
  }
  else
  {
    v167 = 0;
  }
  v168 = &v167[4 * v163];
  v108 = &v167[4 * v166];
  *(_DWORD *)v168 = 2;
  v160 = v168 + 4;
  if (v143 != v161)
  {
    v169 = v143 - v161 - 4;
    if (v169 < 0x2C)
    {
      v170 = v143;
      goto LABEL_231;
    }
    if ((unint64_t)(v143 - v167 - v162) < 0x20)
    {
      v170 = v143;
      do
      {
LABEL_231:
        v176 = *((_DWORD *)v170 - 1);
        v170 -= 4;
        *((_DWORD *)v168 - 1) = v176;
        v168 -= 4;
      }
      while (v170 != v161);
      goto LABEL_232;
    }
    v171 = (v169 >> 2) + 1;
    v170 = &v143[-4 * (v171 & 0x7FFFFFFFFFFFFFF8)];
    v172 = &v167[4 * v163 - 16];
    v173 = v143 - 16;
    v174 = v171 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v175 = *(_OWORD *)v173;
      *(v172 - 1) = *((_OWORD *)v173 - 1);
      *v172 = v175;
      v172 -= 2;
      v173 -= 32;
      v174 -= 8;
    }
    while (v174);
    v168 -= 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
    if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_231;
  }
LABEL_232:
  *a2 = v168;
  a2[1] = v160;
  a2[2] = v108;
  if (v161)
  {
    operator delete(v161);
    v108 = a2[2];
  }
LABEL_234:
  a2[1] = v160;
  if (v160 < v108)
  {
    *(_DWORD *)v160 = 1;
    v177 = v160 + 4;
    goto LABEL_257;
  }
  v178 = *a2;
  v179 = v160 - *a2;
  v180 = v179 >> 2;
  v181 = (v179 >> 2) + 1;
  if (v181 >> 62)
    goto LABEL_971;
  v182 = v108 - v178;
  if (v182 >> 1 > v181)
    v181 = v182 >> 1;
  if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
    v183 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v183 = v181;
  if (v183)
  {
    if (v183 >> 62)
      goto LABEL_972;
    v184 = operator new(4 * v183);
  }
  else
  {
    v184 = 0;
  }
  v185 = &v184[4 * v180];
  v108 = &v184[4 * v183];
  *(_DWORD *)v185 = 1;
  v177 = v185 + 4;
  if (v160 != v178)
  {
    v186 = v160 - v178 - 4;
    if (v186 < 0x2C)
    {
      v187 = v160;
      goto LABEL_254;
    }
    if ((unint64_t)(v160 - v184 - v179) < 0x20)
    {
      v187 = v160;
      do
      {
LABEL_254:
        v193 = *((_DWORD *)v187 - 1);
        v187 -= 4;
        *((_DWORD *)v185 - 1) = v193;
        v185 -= 4;
      }
      while (v187 != v178);
      goto LABEL_255;
    }
    v188 = (v186 >> 2) + 1;
    v187 = &v160[-4 * (v188 & 0x7FFFFFFFFFFFFFF8)];
    v189 = &v184[4 * v180 - 16];
    v190 = v160 - 16;
    v191 = v188 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v192 = *(_OWORD *)v190;
      *(v189 - 1) = *((_OWORD *)v190 - 1);
      *v189 = v192;
      v189 -= 2;
      v190 -= 32;
      v191 -= 8;
    }
    while (v191);
    v185 -= 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
    if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_254;
  }
LABEL_255:
  *a2 = v185;
  a2[1] = v177;
  a2[2] = v108;
  if (v178)
  {
    operator delete(v178);
    v108 = a2[2];
  }
LABEL_257:
  a2[1] = v177;
  if (v177 < v108)
  {
    *(_DWORD *)v177 = 3;
    v194 = v177 + 4;
    goto LABEL_280;
  }
  v195 = *a2;
  v196 = v177 - *a2;
  v197 = v196 >> 2;
  v198 = (v196 >> 2) + 1;
  if (v198 >> 62)
    goto LABEL_971;
  v199 = v108 - v195;
  if (v199 >> 1 > v198)
    v198 = v199 >> 1;
  if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL)
    v200 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v200 = v198;
  if (v200)
  {
    if (v200 >> 62)
      goto LABEL_972;
    v201 = operator new(4 * v200);
  }
  else
  {
    v201 = 0;
  }
  v202 = &v201[4 * v197];
  v108 = &v201[4 * v200];
  *(_DWORD *)v202 = 3;
  v194 = v202 + 4;
  if (v177 != v195)
  {
    v203 = v177 - v195 - 4;
    if (v203 < 0x2C)
    {
      v204 = v177;
      goto LABEL_277;
    }
    if ((unint64_t)(v177 - v201 - v196) < 0x20)
    {
      v204 = v177;
      do
      {
LABEL_277:
        v210 = *((_DWORD *)v204 - 1);
        v204 -= 4;
        *((_DWORD *)v202 - 1) = v210;
        v202 -= 4;
      }
      while (v204 != v195);
      goto LABEL_278;
    }
    v205 = (v203 >> 2) + 1;
    v204 = &v177[-4 * (v205 & 0x7FFFFFFFFFFFFFF8)];
    v206 = &v201[4 * v197 - 16];
    v207 = v177 - 16;
    v208 = v205 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v209 = *(_OWORD *)v207;
      *(v206 - 1) = *((_OWORD *)v207 - 1);
      *v206 = v209;
      v206 -= 2;
      v207 -= 32;
      v208 -= 8;
    }
    while (v208);
    v202 -= 4 * (v205 & 0x7FFFFFFFFFFFFFF8);
    if (v205 != (v205 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_277;
  }
LABEL_278:
  *a2 = v202;
  a2[1] = v194;
  a2[2] = v108;
  if (v195)
  {
    operator delete(v195);
    v108 = a2[2];
  }
LABEL_280:
  a2[1] = v194;
  if (v194 < v108)
  {
    *(_DWORD *)v194 = 5;
    v211 = v194 + 4;
    goto LABEL_303;
  }
  v212 = *a2;
  v213 = v194 - *a2;
  v214 = v213 >> 2;
  v215 = (v213 >> 2) + 1;
  if (v215 >> 62)
    goto LABEL_971;
  v216 = v108 - v212;
  if (v216 >> 1 > v215)
    v215 = v216 >> 1;
  if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL)
    v217 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v217 = v215;
  if (v217)
  {
    if (v217 >> 62)
      goto LABEL_972;
    v218 = operator new(4 * v217);
  }
  else
  {
    v218 = 0;
  }
  v219 = &v218[4 * v214];
  v108 = &v218[4 * v217];
  *(_DWORD *)v219 = 5;
  v211 = v219 + 4;
  if (v194 != v212)
  {
    v220 = v194 - v212 - 4;
    if (v220 < 0x2C)
    {
      v221 = v194;
      goto LABEL_300;
    }
    if ((unint64_t)(v194 - v218 - v213) < 0x20)
    {
      v221 = v194;
      do
      {
LABEL_300:
        v227 = *((_DWORD *)v221 - 1);
        v221 -= 4;
        *((_DWORD *)v219 - 1) = v227;
        v219 -= 4;
      }
      while (v221 != v212);
      goto LABEL_301;
    }
    v222 = (v220 >> 2) + 1;
    v221 = &v194[-4 * (v222 & 0x7FFFFFFFFFFFFFF8)];
    v223 = &v218[4 * v214 - 16];
    v224 = v194 - 16;
    v225 = v222 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v226 = *(_OWORD *)v224;
      *(v223 - 1) = *((_OWORD *)v224 - 1);
      *v223 = v226;
      v223 -= 2;
      v224 -= 32;
      v225 -= 8;
    }
    while (v225);
    v219 -= 4 * (v222 & 0x7FFFFFFFFFFFFFF8);
    if (v222 != (v222 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_300;
  }
LABEL_301:
  *a2 = v219;
  a2[1] = v211;
  a2[2] = v108;
  if (v212)
  {
    operator delete(v212);
    v108 = a2[2];
  }
LABEL_303:
  a2[1] = v211;
  if (v211 < v108)
  {
    *(_DWORD *)v211 = 4;
    v228 = v211 + 4;
    goto LABEL_326;
  }
  v229 = *a2;
  v230 = v211 - *a2;
  v231 = v230 >> 2;
  v232 = (v230 >> 2) + 1;
  if (v232 >> 62)
    goto LABEL_971;
  v233 = v108 - v229;
  if (v233 >> 1 > v232)
    v232 = v233 >> 1;
  if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
    v234 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v234 = v232;
  if (v234)
  {
    if (v234 >> 62)
      goto LABEL_972;
    v235 = operator new(4 * v234);
  }
  else
  {
    v235 = 0;
  }
  v236 = &v235[4 * v231];
  v108 = &v235[4 * v234];
  *(_DWORD *)v236 = 4;
  v228 = v236 + 4;
  if (v211 != v229)
  {
    v237 = v211 - v229 - 4;
    if (v237 < 0x2C)
    {
      v238 = v211;
      goto LABEL_323;
    }
    if ((unint64_t)(v211 - v235 - v230) < 0x20)
    {
      v238 = v211;
      do
      {
LABEL_323:
        v244 = *((_DWORD *)v238 - 1);
        v238 -= 4;
        *((_DWORD *)v236 - 1) = v244;
        v236 -= 4;
      }
      while (v238 != v229);
      goto LABEL_324;
    }
    v239 = (v237 >> 2) + 1;
    v238 = &v211[-4 * (v239 & 0x7FFFFFFFFFFFFFF8)];
    v240 = &v235[4 * v231 - 16];
    v241 = v211 - 16;
    v242 = v239 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v243 = *(_OWORD *)v241;
      *(v240 - 1) = *((_OWORD *)v241 - 1);
      *v240 = v243;
      v240 -= 2;
      v241 -= 32;
      v242 -= 8;
    }
    while (v242);
    v236 -= 4 * (v239 & 0x7FFFFFFFFFFFFFF8);
    if (v239 != (v239 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_323;
  }
LABEL_324:
  *a2 = v236;
  a2[1] = v228;
  a2[2] = v108;
  if (v229)
  {
    operator delete(v229);
    v108 = a2[2];
  }
LABEL_326:
  a2[1] = v228;
  if (v228 < v108)
  {
    *(_DWORD *)v228 = 7;
    v245 = v228 + 4;
    goto LABEL_349;
  }
  v246 = *a2;
  v247 = v228 - *a2;
  v248 = v247 >> 2;
  v249 = (v247 >> 2) + 1;
  if (v249 >> 62)
    goto LABEL_971;
  v250 = v108 - v246;
  if (v250 >> 1 > v249)
    v249 = v250 >> 1;
  if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL)
    v251 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v251 = v249;
  if (v251)
  {
    if (v251 >> 62)
      goto LABEL_972;
    v252 = operator new(4 * v251);
  }
  else
  {
    v252 = 0;
  }
  v253 = &v252[4 * v248];
  v108 = &v252[4 * v251];
  *(_DWORD *)v253 = 7;
  v245 = v253 + 4;
  if (v228 != v246)
  {
    v254 = v228 - v246 - 4;
    if (v254 < 0x2C)
    {
      v255 = v228;
      goto LABEL_346;
    }
    if ((unint64_t)(v228 - v252 - v247) < 0x20)
    {
      v255 = v228;
      do
      {
LABEL_346:
        v261 = *((_DWORD *)v255 - 1);
        v255 -= 4;
        *((_DWORD *)v253 - 1) = v261;
        v253 -= 4;
      }
      while (v255 != v246);
      goto LABEL_347;
    }
    v256 = (v254 >> 2) + 1;
    v255 = &v228[-4 * (v256 & 0x7FFFFFFFFFFFFFF8)];
    v257 = &v252[4 * v248 - 16];
    v258 = v228 - 16;
    v259 = v256 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v260 = *(_OWORD *)v258;
      *(v257 - 1) = *((_OWORD *)v258 - 1);
      *v257 = v260;
      v257 -= 2;
      v258 -= 32;
      v259 -= 8;
    }
    while (v259);
    v253 -= 4 * (v256 & 0x7FFFFFFFFFFFFFF8);
    if (v256 != (v256 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_346;
  }
LABEL_347:
  *a2 = v253;
  a2[1] = v245;
  a2[2] = v108;
  if (v246)
  {
    operator delete(v246);
    v108 = a2[2];
  }
LABEL_349:
  a2[1] = v245;
  if (v245 < v108)
  {
    *(_DWORD *)v245 = 7;
    v262 = v245 + 4;
    goto LABEL_372;
  }
  v263 = *a2;
  v264 = v245 - *a2;
  v265 = v264 >> 2;
  v266 = (v264 >> 2) + 1;
  if (v266 >> 62)
    goto LABEL_971;
  v267 = v108 - v263;
  if (v267 >> 1 > v266)
    v266 = v267 >> 1;
  if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL)
    v268 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v268 = v266;
  if (v268)
  {
    if (v268 >> 62)
      goto LABEL_972;
    v269 = operator new(4 * v268);
  }
  else
  {
    v269 = 0;
  }
  v270 = &v269[4 * v265];
  v108 = &v269[4 * v268];
  *(_DWORD *)v270 = 7;
  v262 = v270 + 4;
  if (v245 != v263)
  {
    v271 = v245 - v263 - 4;
    if (v271 < 0x2C)
    {
      v272 = v245;
      goto LABEL_369;
    }
    if ((unint64_t)(v245 - v269 - v264) < 0x20)
    {
      v272 = v245;
      do
      {
LABEL_369:
        v278 = *((_DWORD *)v272 - 1);
        v272 -= 4;
        *((_DWORD *)v270 - 1) = v278;
        v270 -= 4;
      }
      while (v272 != v263);
      goto LABEL_370;
    }
    v273 = (v271 >> 2) + 1;
    v272 = &v245[-4 * (v273 & 0x7FFFFFFFFFFFFFF8)];
    v274 = &v269[4 * v265 - 16];
    v275 = v245 - 16;
    v276 = v273 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v277 = *(_OWORD *)v275;
      *(v274 - 1) = *((_OWORD *)v275 - 1);
      *v274 = v277;
      v274 -= 2;
      v275 -= 32;
      v276 -= 8;
    }
    while (v276);
    v270 -= 4 * (v273 & 0x7FFFFFFFFFFFFFF8);
    if (v273 != (v273 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_369;
  }
LABEL_370:
  *a2 = v270;
  a2[1] = v262;
  a2[2] = v108;
  if (v263)
  {
    operator delete(v263);
    v108 = a2[2];
  }
LABEL_372:
  a2[1] = v262;
  if (v262 < v108)
  {
    *(_DWORD *)v262 = 4;
    v279 = v262 + 4;
    goto LABEL_395;
  }
  v280 = *a2;
  v281 = v262 - *a2;
  v282 = v281 >> 2;
  v283 = (v281 >> 2) + 1;
  if (v283 >> 62)
    goto LABEL_971;
  v284 = v108 - v280;
  if (v284 >> 1 > v283)
    v283 = v284 >> 1;
  if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL)
    v285 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v285 = v283;
  if (v285)
  {
    if (v285 >> 62)
      goto LABEL_972;
    v286 = operator new(4 * v285);
  }
  else
  {
    v286 = 0;
  }
  v287 = &v286[4 * v282];
  v108 = &v286[4 * v285];
  *(_DWORD *)v287 = 4;
  v279 = v287 + 4;
  if (v262 != v280)
  {
    v288 = v262 - v280 - 4;
    if (v288 < 0x2C)
    {
      v289 = v262;
      goto LABEL_392;
    }
    if ((unint64_t)(v262 - v286 - v281) < 0x20)
    {
      v289 = v262;
      do
      {
LABEL_392:
        v295 = *((_DWORD *)v289 - 1);
        v289 -= 4;
        *((_DWORD *)v287 - 1) = v295;
        v287 -= 4;
      }
      while (v289 != v280);
      goto LABEL_393;
    }
    v290 = (v288 >> 2) + 1;
    v289 = &v262[-4 * (v290 & 0x7FFFFFFFFFFFFFF8)];
    v291 = &v286[4 * v282 - 16];
    v292 = v262 - 16;
    v293 = v290 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v294 = *(_OWORD *)v292;
      *(v291 - 1) = *((_OWORD *)v292 - 1);
      *v291 = v294;
      v291 -= 2;
      v292 -= 32;
      v293 -= 8;
    }
    while (v293);
    v287 -= 4 * (v290 & 0x7FFFFFFFFFFFFFF8);
    if (v290 != (v290 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_392;
  }
LABEL_393:
  *a2 = v287;
  a2[1] = v279;
  a2[2] = v108;
  if (v280)
  {
    operator delete(v280);
    v108 = a2[2];
  }
LABEL_395:
  a2[1] = v279;
  if (v279 < v108)
  {
    *(_DWORD *)v279 = 6;
    v296 = v279 + 4;
    goto LABEL_418;
  }
  v297 = *a2;
  v298 = v279 - *a2;
  v299 = v298 >> 2;
  v300 = (v298 >> 2) + 1;
  if (v300 >> 62)
    goto LABEL_971;
  v301 = v108 - v297;
  if (v301 >> 1 > v300)
    v300 = v301 >> 1;
  if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFFCLL)
    v302 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v302 = v300;
  if (v302)
  {
    if (v302 >> 62)
      goto LABEL_972;
    v303 = operator new(4 * v302);
  }
  else
  {
    v303 = 0;
  }
  v304 = &v303[4 * v299];
  v108 = &v303[4 * v302];
  *(_DWORD *)v304 = 6;
  v296 = v304 + 4;
  if (v279 != v297)
  {
    v305 = v279 - v297 - 4;
    if (v305 < 0x2C)
    {
      v306 = v279;
      goto LABEL_415;
    }
    if ((unint64_t)(v279 - v303 - v298) < 0x20)
    {
      v306 = v279;
      do
      {
LABEL_415:
        v312 = *((_DWORD *)v306 - 1);
        v306 -= 4;
        *((_DWORD *)v304 - 1) = v312;
        v304 -= 4;
      }
      while (v306 != v297);
      goto LABEL_416;
    }
    v307 = (v305 >> 2) + 1;
    v306 = &v279[-4 * (v307 & 0x7FFFFFFFFFFFFFF8)];
    v308 = &v303[4 * v299 - 16];
    v309 = v279 - 16;
    v310 = v307 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v311 = *(_OWORD *)v309;
      *(v308 - 1) = *((_OWORD *)v309 - 1);
      *v308 = v311;
      v308 -= 2;
      v309 -= 32;
      v310 -= 8;
    }
    while (v310);
    v304 -= 4 * (v307 & 0x7FFFFFFFFFFFFFF8);
    if (v307 != (v307 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_415;
  }
LABEL_416:
  *a2 = v304;
  a2[1] = v296;
  a2[2] = v108;
  if (v297)
  {
    operator delete(v297);
    v108 = a2[2];
  }
LABEL_418:
  a2[1] = v296;
  if (v296 < v108)
  {
    *(_DWORD *)v296 = 1;
    v313 = v296 + 4;
    goto LABEL_441;
  }
  v314 = *a2;
  v315 = v296 - *a2;
  v316 = v315 >> 2;
  v317 = (v315 >> 2) + 1;
  if (v317 >> 62)
    goto LABEL_971;
  v318 = v108 - v314;
  if (v318 >> 1 > v317)
    v317 = v318 >> 1;
  if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL)
    v319 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v319 = v317;
  if (v319)
  {
    if (v319 >> 62)
      goto LABEL_972;
    v320 = operator new(4 * v319);
  }
  else
  {
    v320 = 0;
  }
  v321 = &v320[4 * v316];
  v108 = &v320[4 * v319];
  *(_DWORD *)v321 = 1;
  v313 = v321 + 4;
  if (v296 != v314)
  {
    v322 = v296 - v314 - 4;
    if (v322 < 0x2C)
    {
      v323 = v296;
      goto LABEL_438;
    }
    if ((unint64_t)(v296 - v320 - v315) < 0x20)
    {
      v323 = v296;
      do
      {
LABEL_438:
        v329 = *((_DWORD *)v323 - 1);
        v323 -= 4;
        *((_DWORD *)v321 - 1) = v329;
        v321 -= 4;
      }
      while (v323 != v314);
      goto LABEL_439;
    }
    v324 = (v322 >> 2) + 1;
    v323 = &v296[-4 * (v324 & 0x7FFFFFFFFFFFFFF8)];
    v325 = &v320[4 * v316 - 16];
    v326 = v296 - 16;
    v327 = v324 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v328 = *(_OWORD *)v326;
      *(v325 - 1) = *((_OWORD *)v326 - 1);
      *v325 = v328;
      v325 -= 2;
      v326 -= 32;
      v327 -= 8;
    }
    while (v327);
    v321 -= 4 * (v324 & 0x7FFFFFFFFFFFFFF8);
    if (v324 != (v324 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_438;
  }
LABEL_439:
  *a2 = v321;
  a2[1] = v313;
  a2[2] = v108;
  if (v314)
  {
    operator delete(v314);
    v108 = a2[2];
  }
LABEL_441:
  a2[1] = v313;
  if (v313 < v108)
  {
    *(_DWORD *)v313 = 5;
    v330 = v313 + 4;
    goto LABEL_464;
  }
  v331 = *a2;
  v332 = v313 - *a2;
  v333 = v332 >> 2;
  v334 = (v332 >> 2) + 1;
  if (v334 >> 62)
    goto LABEL_971;
  v335 = v108 - v331;
  if (v335 >> 1 > v334)
    v334 = v335 >> 1;
  if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFFCLL)
    v336 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v336 = v334;
  if (v336)
  {
    if (v336 >> 62)
      goto LABEL_972;
    v337 = operator new(4 * v336);
  }
  else
  {
    v337 = 0;
  }
  v338 = &v337[4 * v333];
  v108 = &v337[4 * v336];
  *(_DWORD *)v338 = 5;
  v330 = v338 + 4;
  if (v313 != v331)
  {
    v339 = v313 - v331 - 4;
    if (v339 < 0x2C)
    {
      v340 = v313;
      goto LABEL_461;
    }
    if ((unint64_t)(v313 - v337 - v332) < 0x20)
    {
      v340 = v313;
      do
      {
LABEL_461:
        v346 = *((_DWORD *)v340 - 1);
        v340 -= 4;
        *((_DWORD *)v338 - 1) = v346;
        v338 -= 4;
      }
      while (v340 != v331);
      goto LABEL_462;
    }
    v341 = (v339 >> 2) + 1;
    v340 = &v313[-4 * (v341 & 0x7FFFFFFFFFFFFFF8)];
    v342 = &v337[4 * v333 - 16];
    v343 = v313 - 16;
    v344 = v341 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v345 = *(_OWORD *)v343;
      *(v342 - 1) = *((_OWORD *)v343 - 1);
      *v342 = v345;
      v342 -= 2;
      v343 -= 32;
      v344 -= 8;
    }
    while (v344);
    v338 -= 4 * (v341 & 0x7FFFFFFFFFFFFFF8);
    if (v341 != (v341 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_461;
  }
LABEL_462:
  *a2 = v338;
  a2[1] = v330;
  a2[2] = v108;
  if (v331)
  {
    operator delete(v331);
    v108 = a2[2];
  }
LABEL_464:
  a2[1] = v330;
  if (v330 < v108)
  {
    *(_DWORD *)v330 = 3;
    v347 = v330 + 4;
    goto LABEL_487;
  }
  v348 = *a2;
  v349 = v330 - *a2;
  v350 = v349 >> 2;
  v351 = (v349 >> 2) + 1;
  if (v351 >> 62)
    goto LABEL_971;
  v352 = v108 - v348;
  if (v352 >> 1 > v351)
    v351 = v352 >> 1;
  if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFFCLL)
    v353 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v353 = v351;
  if (v353)
  {
    if (v353 >> 62)
      goto LABEL_972;
    v354 = operator new(4 * v353);
  }
  else
  {
    v354 = 0;
  }
  v355 = &v354[4 * v350];
  v108 = &v354[4 * v353];
  *(_DWORD *)v355 = 3;
  v347 = v355 + 4;
  if (v330 != v348)
  {
    v356 = v330 - v348 - 4;
    if (v356 < 0x2C)
    {
      v357 = v330;
      goto LABEL_484;
    }
    if ((unint64_t)(v330 - v354 - v349) < 0x20)
    {
      v357 = v330;
      do
      {
LABEL_484:
        v363 = *((_DWORD *)v357 - 1);
        v357 -= 4;
        *((_DWORD *)v355 - 1) = v363;
        v355 -= 4;
      }
      while (v357 != v348);
      goto LABEL_485;
    }
    v358 = (v356 >> 2) + 1;
    v357 = &v330[-4 * (v358 & 0x7FFFFFFFFFFFFFF8)];
    v359 = &v354[4 * v350 - 16];
    v360 = v330 - 16;
    v361 = v358 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v362 = *(_OWORD *)v360;
      *(v359 - 1) = *((_OWORD *)v360 - 1);
      *v359 = v362;
      v359 -= 2;
      v360 -= 32;
      v361 -= 8;
    }
    while (v361);
    v355 -= 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
    if (v358 != (v358 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_484;
  }
LABEL_485:
  *a2 = v355;
  a2[1] = v347;
  a2[2] = v108;
  if (v348)
  {
    operator delete(v348);
    v108 = a2[2];
  }
LABEL_487:
  a2[1] = v347;
  if (v347 < v108)
  {
    *(_DWORD *)v347 = 3;
    v364 = v347 + 4;
    goto LABEL_510;
  }
  v365 = *a2;
  v366 = v347 - *a2;
  v367 = v366 >> 2;
  v368 = (v366 >> 2) + 1;
  if (v368 >> 62)
    goto LABEL_971;
  v369 = v108 - v365;
  if (v369 >> 1 > v368)
    v368 = v369 >> 1;
  if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFFCLL)
    v370 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v370 = v368;
  if (v370)
  {
    if (v370 >> 62)
      goto LABEL_972;
    v371 = operator new(4 * v370);
  }
  else
  {
    v371 = 0;
  }
  v372 = &v371[4 * v367];
  v108 = &v371[4 * v370];
  *(_DWORD *)v372 = 3;
  v364 = v372 + 4;
  if (v347 != v365)
  {
    v373 = v347 - v365 - 4;
    if (v373 < 0x2C)
    {
      v374 = v347;
      goto LABEL_507;
    }
    if ((unint64_t)(v347 - v371 - v366) < 0x20)
    {
      v374 = v347;
      do
      {
LABEL_507:
        v380 = *((_DWORD *)v374 - 1);
        v374 -= 4;
        *((_DWORD *)v372 - 1) = v380;
        v372 -= 4;
      }
      while (v374 != v365);
      goto LABEL_508;
    }
    v375 = (v373 >> 2) + 1;
    v374 = &v347[-4 * (v375 & 0x7FFFFFFFFFFFFFF8)];
    v376 = &v371[4 * v367 - 16];
    v377 = v347 - 16;
    v378 = v375 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v379 = *(_OWORD *)v377;
      *(v376 - 1) = *((_OWORD *)v377 - 1);
      *v376 = v379;
      v376 -= 2;
      v377 -= 32;
      v378 -= 8;
    }
    while (v378);
    v372 -= 4 * (v375 & 0x7FFFFFFFFFFFFFF8);
    if (v375 != (v375 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_507;
  }
LABEL_508:
  *a2 = v372;
  a2[1] = v364;
  a2[2] = v108;
  if (v365)
  {
    operator delete(v365);
    v108 = a2[2];
  }
LABEL_510:
  a2[1] = v364;
  if (v364 < v108)
  {
    *(_DWORD *)v364 = 5;
    v381 = v364 + 4;
    goto LABEL_533;
  }
  v382 = *a2;
  v383 = v364 - *a2;
  v384 = v383 >> 2;
  v385 = (v383 >> 2) + 1;
  if (v385 >> 62)
    goto LABEL_971;
  v386 = v108 - v382;
  if (v386 >> 1 > v385)
    v385 = v386 >> 1;
  if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFFCLL)
    v387 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v387 = v385;
  if (v387)
  {
    if (v387 >> 62)
      goto LABEL_972;
    v388 = operator new(4 * v387);
  }
  else
  {
    v388 = 0;
  }
  v389 = &v388[4 * v384];
  v108 = &v388[4 * v387];
  *(_DWORD *)v389 = 5;
  v381 = v389 + 4;
  if (v364 != v382)
  {
    v390 = v364 - v382 - 4;
    if (v390 < 0x2C)
    {
      v391 = v364;
      goto LABEL_530;
    }
    if ((unint64_t)(v364 - v388 - v383) < 0x20)
    {
      v391 = v364;
      do
      {
LABEL_530:
        v397 = *((_DWORD *)v391 - 1);
        v391 -= 4;
        *((_DWORD *)v389 - 1) = v397;
        v389 -= 4;
      }
      while (v391 != v382);
      goto LABEL_531;
    }
    v392 = (v390 >> 2) + 1;
    v391 = &v364[-4 * (v392 & 0x7FFFFFFFFFFFFFF8)];
    v393 = &v388[4 * v384 - 16];
    v394 = v364 - 16;
    v395 = v392 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v396 = *(_OWORD *)v394;
      *(v393 - 1) = *((_OWORD *)v394 - 1);
      *v393 = v396;
      v393 -= 2;
      v394 -= 32;
      v395 -= 8;
    }
    while (v395);
    v389 -= 4 * (v392 & 0x7FFFFFFFFFFFFFF8);
    if (v392 != (v392 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_530;
  }
LABEL_531:
  *a2 = v389;
  a2[1] = v381;
  a2[2] = v108;
  if (v382)
  {
    operator delete(v382);
    v108 = a2[2];
  }
LABEL_533:
  a2[1] = v381;
  if (v381 < v108)
  {
    *(_DWORD *)v381 = 7;
    v398 = v381 + 4;
    goto LABEL_556;
  }
  v399 = *a2;
  v400 = v381 - *a2;
  v401 = v400 >> 2;
  v402 = (v400 >> 2) + 1;
  if (v402 >> 62)
    goto LABEL_971;
  v403 = v108 - v399;
  if (v403 >> 1 > v402)
    v402 = v403 >> 1;
  if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFFCLL)
    v404 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v404 = v402;
  if (v404)
  {
    if (v404 >> 62)
      goto LABEL_972;
    v405 = operator new(4 * v404);
  }
  else
  {
    v405 = 0;
  }
  v406 = &v405[4 * v401];
  v108 = &v405[4 * v404];
  *(_DWORD *)v406 = 7;
  v398 = v406 + 4;
  if (v381 != v399)
  {
    v407 = v381 - v399 - 4;
    if (v407 < 0x2C)
    {
      v408 = v381;
      goto LABEL_553;
    }
    if ((unint64_t)(v381 - v405 - v400) < 0x20)
    {
      v408 = v381;
      do
      {
LABEL_553:
        v414 = *((_DWORD *)v408 - 1);
        v408 -= 4;
        *((_DWORD *)v406 - 1) = v414;
        v406 -= 4;
      }
      while (v408 != v399);
      goto LABEL_554;
    }
    v409 = (v407 >> 2) + 1;
    v408 = &v381[-4 * (v409 & 0x7FFFFFFFFFFFFFF8)];
    v410 = &v405[4 * v401 - 16];
    v411 = v381 - 16;
    v412 = v409 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v413 = *(_OWORD *)v411;
      *(v410 - 1) = *((_OWORD *)v411 - 1);
      *v410 = v413;
      v410 -= 2;
      v411 -= 32;
      v412 -= 8;
    }
    while (v412);
    v406 -= 4 * (v409 & 0x7FFFFFFFFFFFFFF8);
    if (v409 != (v409 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_553;
  }
LABEL_554:
  *a2 = v406;
  a2[1] = v398;
  a2[2] = v108;
  if (v399)
  {
    operator delete(v399);
    v108 = a2[2];
  }
LABEL_556:
  a2[1] = v398;
  if (v398 < v108)
  {
    *(_DWORD *)v398 = 4;
    v415 = v398 + 4;
    goto LABEL_579;
  }
  v416 = *a2;
  v417 = v398 - *a2;
  v418 = v417 >> 2;
  v419 = (v417 >> 2) + 1;
  if (v419 >> 62)
    goto LABEL_971;
  v420 = v108 - v416;
  if (v420 >> 1 > v419)
    v419 = v420 >> 1;
  if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL)
    v421 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v421 = v419;
  if (v421)
  {
    if (v421 >> 62)
      goto LABEL_972;
    v422 = operator new(4 * v421);
  }
  else
  {
    v422 = 0;
  }
  v423 = &v422[4 * v418];
  v108 = &v422[4 * v421];
  *(_DWORD *)v423 = 4;
  v415 = v423 + 4;
  if (v398 != v416)
  {
    v424 = v398 - v416 - 4;
    if (v424 < 0x2C)
    {
      v425 = v398;
      goto LABEL_576;
    }
    if ((unint64_t)(v398 - v422 - v417) < 0x20)
    {
      v425 = v398;
      do
      {
LABEL_576:
        v431 = *((_DWORD *)v425 - 1);
        v425 -= 4;
        *((_DWORD *)v423 - 1) = v431;
        v423 -= 4;
      }
      while (v425 != v416);
      goto LABEL_577;
    }
    v426 = (v424 >> 2) + 1;
    v425 = &v398[-4 * (v426 & 0x7FFFFFFFFFFFFFF8)];
    v427 = &v422[4 * v418 - 16];
    v428 = v398 - 16;
    v429 = v426 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v430 = *(_OWORD *)v428;
      *(v427 - 1) = *((_OWORD *)v428 - 1);
      *v427 = v430;
      v427 -= 2;
      v428 -= 32;
      v429 -= 8;
    }
    while (v429);
    v423 -= 4 * (v426 & 0x7FFFFFFFFFFFFFF8);
    if (v426 != (v426 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_576;
  }
LABEL_577:
  *a2 = v423;
  a2[1] = v415;
  a2[2] = v108;
  if (v416)
  {
    operator delete(v416);
    v108 = a2[2];
  }
LABEL_579:
  a2[1] = v415;
  if (v415 < v108)
  {
    *(_DWORD *)v415 = 0;
    v432 = v415 + 4;
    goto LABEL_602;
  }
  v433 = *a2;
  v434 = v415 - *a2;
  v435 = v434 >> 2;
  v436 = (v434 >> 2) + 1;
  if (v436 >> 62)
    goto LABEL_971;
  v437 = v108 - v433;
  if (v437 >> 1 > v436)
    v436 = v437 >> 1;
  if ((unint64_t)v437 >= 0x7FFFFFFFFFFFFFFCLL)
    v438 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v438 = v436;
  if (v438)
  {
    if (v438 >> 62)
      goto LABEL_972;
    v439 = operator new(4 * v438);
  }
  else
  {
    v439 = 0;
  }
  v440 = &v439[4 * v435];
  v108 = &v439[4 * v438];
  *(_DWORD *)v440 = 0;
  v432 = v440 + 4;
  if (v415 != v433)
  {
    v441 = v415 - v433 - 4;
    if (v441 < 0x2C)
    {
      v442 = v415;
      goto LABEL_599;
    }
    if ((unint64_t)(v415 - &v439[v434]) < 0x20)
    {
      v442 = v415;
      do
      {
LABEL_599:
        v448 = *((_DWORD *)v442 - 1);
        v442 -= 4;
        *((_DWORD *)v440 - 1) = v448;
        v440 -= 4;
      }
      while (v442 != v433);
      goto LABEL_600;
    }
    v443 = (v441 >> 2) + 1;
    v442 = &v415[-4 * (v443 & 0x7FFFFFFFFFFFFFF8)];
    v444 = &v439[4 * v435 - 16];
    v445 = v415 - 16;
    v446 = v443 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v447 = *(_OWORD *)v445;
      *(v444 - 1) = *((_OWORD *)v445 - 1);
      *v444 = v447;
      v444 -= 2;
      v445 -= 32;
      v446 -= 8;
    }
    while (v446);
    v440 -= 4 * (v443 & 0x7FFFFFFFFFFFFFF8);
    if (v443 != (v443 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_599;
  }
LABEL_600:
  *a2 = v440;
  a2[1] = v432;
  a2[2] = v108;
  if (v433)
  {
    operator delete(v433);
    v108 = a2[2];
  }
LABEL_602:
  a2[1] = v432;
  if (v432 < v108)
  {
    *(_DWORD *)v432 = 6;
    v449 = v432 + 4;
    goto LABEL_625;
  }
  v450 = *a2;
  v451 = v432 - *a2;
  v452 = v451 >> 2;
  v453 = (v451 >> 2) + 1;
  if (v453 >> 62)
    goto LABEL_971;
  v454 = v108 - v450;
  if (v454 >> 1 > v453)
    v453 = v454 >> 1;
  if ((unint64_t)v454 >= 0x7FFFFFFFFFFFFFFCLL)
    v455 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v455 = v453;
  if (v455)
  {
    if (v455 >> 62)
      goto LABEL_972;
    v456 = operator new(4 * v455);
  }
  else
  {
    v456 = 0;
  }
  v457 = &v456[4 * v452];
  v108 = &v456[4 * v455];
  *(_DWORD *)v457 = 6;
  v449 = v457 + 4;
  if (v432 != v450)
  {
    v458 = v432 - v450 - 4;
    if (v458 < 0x2C)
    {
      v459 = v432;
      goto LABEL_622;
    }
    if ((unint64_t)(v432 - v456 - v451) < 0x20)
    {
      v459 = v432;
      do
      {
LABEL_622:
        v465 = *((_DWORD *)v459 - 1);
        v459 -= 4;
        *((_DWORD *)v457 - 1) = v465;
        v457 -= 4;
      }
      while (v459 != v450);
      goto LABEL_623;
    }
    v460 = (v458 >> 2) + 1;
    v459 = &v432[-4 * (v460 & 0x7FFFFFFFFFFFFFF8)];
    v461 = &v456[4 * v452 - 16];
    v462 = v432 - 16;
    v463 = v460 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v464 = *(_OWORD *)v462;
      *(v461 - 1) = *((_OWORD *)v462 - 1);
      *v461 = v464;
      v461 -= 2;
      v462 -= 32;
      v463 -= 8;
    }
    while (v463);
    v457 -= 4 * (v460 & 0x7FFFFFFFFFFFFFF8);
    if (v460 != (v460 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_622;
  }
LABEL_623:
  *a2 = v457;
  a2[1] = v449;
  a2[2] = v108;
  if (v450)
  {
    operator delete(v450);
    v108 = a2[2];
  }
LABEL_625:
  a2[1] = v449;
  if (v449 < v108)
  {
    *(_DWORD *)v449 = 6;
    v466 = v449 + 4;
    goto LABEL_648;
  }
  v467 = *a2;
  v468 = v449 - *a2;
  v469 = v468 >> 2;
  v470 = (v468 >> 2) + 1;
  if (v470 >> 62)
    goto LABEL_971;
  v471 = v108 - v467;
  if (v471 >> 1 > v470)
    v470 = v471 >> 1;
  if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL)
    v472 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v472 = v470;
  if (v472)
  {
    if (v472 >> 62)
      goto LABEL_972;
    v473 = operator new(4 * v472);
  }
  else
  {
    v473 = 0;
  }
  v474 = &v473[4 * v469];
  v108 = &v473[4 * v472];
  *(_DWORD *)v474 = 6;
  v466 = v474 + 4;
  if (v449 != v467)
  {
    v475 = v449 - v467 - 4;
    if (v475 < 0x2C)
    {
      v476 = v449;
      goto LABEL_645;
    }
    if ((unint64_t)(v449 - v473 - v468) < 0x20)
    {
      v476 = v449;
      do
      {
LABEL_645:
        v482 = *((_DWORD *)v476 - 1);
        v476 -= 4;
        *((_DWORD *)v474 - 1) = v482;
        v474 -= 4;
      }
      while (v476 != v467);
      goto LABEL_646;
    }
    v477 = (v475 >> 2) + 1;
    v476 = &v449[-4 * (v477 & 0x7FFFFFFFFFFFFFF8)];
    v478 = &v473[4 * v469 - 16];
    v479 = v449 - 16;
    v480 = v477 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v481 = *(_OWORD *)v479;
      *(v478 - 1) = *((_OWORD *)v479 - 1);
      *v478 = v481;
      v478 -= 2;
      v479 -= 32;
      v480 -= 8;
    }
    while (v480);
    v474 -= 4 * (v477 & 0x7FFFFFFFFFFFFFF8);
    if (v477 != (v477 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_645;
  }
LABEL_646:
  *a2 = v474;
  a2[1] = v466;
  a2[2] = v108;
  if (v467)
  {
    operator delete(v467);
    v108 = a2[2];
  }
LABEL_648:
  a2[1] = v466;
  if (v466 < v108)
  {
    *(_DWORD *)v466 = 0;
    v483 = v466 + 4;
    goto LABEL_671;
  }
  v484 = *a2;
  v485 = v466 - *a2;
  v486 = v485 >> 2;
  v487 = (v485 >> 2) + 1;
  if (v487 >> 62)
    goto LABEL_971;
  v488 = v108 - v484;
  if (v488 >> 1 > v487)
    v487 = v488 >> 1;
  if ((unint64_t)v488 >= 0x7FFFFFFFFFFFFFFCLL)
    v489 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v489 = v487;
  if (v489)
  {
    if (v489 >> 62)
      goto LABEL_972;
    v490 = operator new(4 * v489);
  }
  else
  {
    v490 = 0;
  }
  v491 = &v490[4 * v486];
  v108 = &v490[4 * v489];
  *(_DWORD *)v491 = 0;
  v483 = v491 + 4;
  if (v466 != v484)
  {
    v492 = v466 - v484 - 4;
    if (v492 < 0x2C)
    {
      v493 = v466;
      goto LABEL_668;
    }
    if ((unint64_t)(v466 - &v490[v485]) < 0x20)
    {
      v493 = v466;
      do
      {
LABEL_668:
        v499 = *((_DWORD *)v493 - 1);
        v493 -= 4;
        *((_DWORD *)v491 - 1) = v499;
        v491 -= 4;
      }
      while (v493 != v484);
      goto LABEL_669;
    }
    v494 = (v492 >> 2) + 1;
    v493 = &v466[-4 * (v494 & 0x7FFFFFFFFFFFFFF8)];
    v495 = &v490[4 * v486 - 16];
    v496 = v466 - 16;
    v497 = v494 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v498 = *(_OWORD *)v496;
      *(v495 - 1) = *((_OWORD *)v496 - 1);
      *v495 = v498;
      v495 -= 2;
      v496 -= 32;
      v497 -= 8;
    }
    while (v497);
    v491 -= 4 * (v494 & 0x7FFFFFFFFFFFFFF8);
    if (v494 != (v494 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_668;
  }
LABEL_669:
  *a2 = v491;
  a2[1] = v483;
  a2[2] = v108;
  if (v484)
  {
    operator delete(v484);
    v108 = a2[2];
  }
LABEL_671:
  a2[1] = v483;
  if (v483 < v108)
  {
    *(_DWORD *)v483 = 2;
    v500 = v483 + 4;
    goto LABEL_694;
  }
  v501 = *a2;
  v502 = v483 - *a2;
  v503 = v502 >> 2;
  v504 = (v502 >> 2) + 1;
  if (v504 >> 62)
    goto LABEL_971;
  v505 = v108 - v501;
  if (v505 >> 1 > v504)
    v504 = v505 >> 1;
  if ((unint64_t)v505 >= 0x7FFFFFFFFFFFFFFCLL)
    v506 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v506 = v504;
  if (v506)
  {
    if (v506 >> 62)
      goto LABEL_972;
    v507 = operator new(4 * v506);
  }
  else
  {
    v507 = 0;
  }
  v508 = &v507[4 * v503];
  v108 = &v507[4 * v506];
  *(_DWORD *)v508 = 2;
  v500 = v508 + 4;
  if (v483 != v501)
  {
    v509 = v483 - v501 - 4;
    if (v509 < 0x2C)
    {
      v510 = v483;
      goto LABEL_691;
    }
    if ((unint64_t)(v483 - v507 - v502) < 0x20)
    {
      v510 = v483;
      do
      {
LABEL_691:
        v516 = *((_DWORD *)v510 - 1);
        v510 -= 4;
        *((_DWORD *)v508 - 1) = v516;
        v508 -= 4;
      }
      while (v510 != v501);
      goto LABEL_692;
    }
    v511 = (v509 >> 2) + 1;
    v510 = &v483[-4 * (v511 & 0x7FFFFFFFFFFFFFF8)];
    v512 = &v507[4 * v503 - 16];
    v513 = v483 - 16;
    v514 = v511 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v515 = *(_OWORD *)v513;
      *(v512 - 1) = *((_OWORD *)v513 - 1);
      *v512 = v515;
      v512 -= 2;
      v513 -= 32;
      v514 -= 8;
    }
    while (v514);
    v508 -= 4 * (v511 & 0x7FFFFFFFFFFFFFF8);
    if (v511 != (v511 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_691;
  }
LABEL_692:
  *a2 = v508;
  a2[1] = v500;
  a2[2] = v108;
  if (v501)
  {
    operator delete(v501);
    v108 = a2[2];
  }
LABEL_694:
  a2[1] = v500;
  if (v500 < v108)
  {
    *(_DWORD *)v500 = 2;
    v517 = v500 + 4;
    goto LABEL_717;
  }
  v518 = *a2;
  v519 = v500 - *a2;
  v520 = v519 >> 2;
  v521 = (v519 >> 2) + 1;
  if (v521 >> 62)
    goto LABEL_971;
  v522 = v108 - v518;
  if (v522 >> 1 > v521)
    v521 = v522 >> 1;
  if ((unint64_t)v522 >= 0x7FFFFFFFFFFFFFFCLL)
    v523 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v523 = v521;
  if (v523)
  {
    if (v523 >> 62)
      goto LABEL_972;
    v524 = operator new(4 * v523);
  }
  else
  {
    v524 = 0;
  }
  v525 = &v524[4 * v520];
  v108 = &v524[4 * v523];
  *(_DWORD *)v525 = 2;
  v517 = v525 + 4;
  if (v500 != v518)
  {
    v526 = v500 - v518 - 4;
    if (v526 < 0x2C)
    {
      v527 = v500;
      goto LABEL_714;
    }
    if ((unint64_t)(v500 - v524 - v519) < 0x20)
    {
      v527 = v500;
      do
      {
LABEL_714:
        v533 = *((_DWORD *)v527 - 1);
        v527 -= 4;
        *((_DWORD *)v525 - 1) = v533;
        v525 -= 4;
      }
      while (v527 != v518);
      goto LABEL_715;
    }
    v528 = (v526 >> 2) + 1;
    v527 = &v500[-4 * (v528 & 0x7FFFFFFFFFFFFFF8)];
    v529 = &v524[4 * v520 - 16];
    v530 = v500 - 16;
    v531 = v528 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v532 = *(_OWORD *)v530;
      *(v529 - 1) = *((_OWORD *)v530 - 1);
      *v529 = v532;
      v529 -= 2;
      v530 -= 32;
      v531 -= 8;
    }
    while (v531);
    v525 -= 4 * (v528 & 0x7FFFFFFFFFFFFFF8);
    if (v528 != (v528 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_714;
  }
LABEL_715:
  *a2 = v525;
  a2[1] = v517;
  a2[2] = v108;
  if (v518)
  {
    operator delete(v518);
    v108 = a2[2];
  }
LABEL_717:
  a2[1] = v517;
  if (v517 < v108)
  {
    *(_DWORD *)v517 = 3;
    v534 = v517 + 4;
    goto LABEL_740;
  }
  v535 = *a2;
  v536 = v517 - *a2;
  v537 = v536 >> 2;
  v538 = (v536 >> 2) + 1;
  if (v538 >> 62)
    goto LABEL_971;
  v539 = v108 - v535;
  if (v539 >> 1 > v538)
    v538 = v539 >> 1;
  if ((unint64_t)v539 >= 0x7FFFFFFFFFFFFFFCLL)
    v540 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v540 = v538;
  if (v540)
  {
    if (v540 >> 62)
      goto LABEL_972;
    v541 = operator new(4 * v540);
  }
  else
  {
    v541 = 0;
  }
  v542 = &v541[4 * v537];
  v108 = &v541[4 * v540];
  *(_DWORD *)v542 = 3;
  v534 = v542 + 4;
  if (v517 != v535)
  {
    v543 = v517 - v535 - 4;
    if (v543 < 0x2C)
    {
      v544 = v517;
      goto LABEL_737;
    }
    if ((unint64_t)(v517 - v541 - v536) < 0x20)
    {
      v544 = v517;
      do
      {
LABEL_737:
        v550 = *((_DWORD *)v544 - 1);
        v544 -= 4;
        *((_DWORD *)v542 - 1) = v550;
        v542 -= 4;
      }
      while (v544 != v535);
      goto LABEL_738;
    }
    v545 = (v543 >> 2) + 1;
    v544 = &v517[-4 * (v545 & 0x7FFFFFFFFFFFFFF8)];
    v546 = &v541[4 * v537 - 16];
    v547 = v517 - 16;
    v548 = v545 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v549 = *(_OWORD *)v547;
      *(v546 - 1) = *((_OWORD *)v547 - 1);
      *v546 = v549;
      v546 -= 2;
      v547 -= 32;
      v548 -= 8;
    }
    while (v548);
    v542 -= 4 * (v545 & 0x7FFFFFFFFFFFFFF8);
    if (v545 != (v545 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_737;
  }
LABEL_738:
  *a2 = v542;
  a2[1] = v534;
  a2[2] = v108;
  if (v535)
  {
    operator delete(v535);
    v108 = a2[2];
  }
LABEL_740:
  a2[1] = v534;
  if (v534 < v108)
  {
    *(_DWORD *)v534 = 6;
    v551 = v534 + 4;
    goto LABEL_763;
  }
  v552 = *a2;
  v553 = v534 - *a2;
  v554 = v553 >> 2;
  v555 = (v553 >> 2) + 1;
  if (v555 >> 62)
    goto LABEL_971;
  v556 = v108 - v552;
  if (v556 >> 1 > v555)
    v555 = v556 >> 1;
  if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFFCLL)
    v557 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v557 = v555;
  if (v557)
  {
    if (v557 >> 62)
      goto LABEL_972;
    v558 = operator new(4 * v557);
  }
  else
  {
    v558 = 0;
  }
  v559 = &v558[4 * v554];
  v108 = &v558[4 * v557];
  *(_DWORD *)v559 = 6;
  v551 = v559 + 4;
  if (v534 != v552)
  {
    v560 = v534 - v552 - 4;
    if (v560 < 0x2C)
    {
      v561 = v534;
      goto LABEL_760;
    }
    if ((unint64_t)(v534 - v558 - v553) < 0x20)
    {
      v561 = v534;
      do
      {
LABEL_760:
        v567 = *((_DWORD *)v561 - 1);
        v561 -= 4;
        *((_DWORD *)v559 - 1) = v567;
        v559 -= 4;
      }
      while (v561 != v552);
      goto LABEL_761;
    }
    v562 = (v560 >> 2) + 1;
    v561 = &v534[-4 * (v562 & 0x7FFFFFFFFFFFFFF8)];
    v563 = &v558[4 * v554 - 16];
    v564 = v534 - 16;
    v565 = v562 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v566 = *(_OWORD *)v564;
      *(v563 - 1) = *((_OWORD *)v564 - 1);
      *v563 = v566;
      v563 -= 2;
      v564 -= 32;
      v565 -= 8;
    }
    while (v565);
    v559 -= 4 * (v562 & 0x7FFFFFFFFFFFFFF8);
    if (v562 != (v562 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_760;
  }
LABEL_761:
  *a2 = v559;
  a2[1] = v551;
  a2[2] = v108;
  if (v552)
  {
    operator delete(v552);
    v108 = a2[2];
  }
LABEL_763:
  a2[1] = v551;
  if (v551 < v108)
  {
    *(_DWORD *)v551 = 6;
    v568 = v551 + 4;
    goto LABEL_786;
  }
  v569 = *a2;
  v570 = v551 - *a2;
  v571 = v570 >> 2;
  v572 = (v570 >> 2) + 1;
  if (v572 >> 62)
    goto LABEL_971;
  v573 = v108 - v569;
  if (v573 >> 1 > v572)
    v572 = v573 >> 1;
  if ((unint64_t)v573 >= 0x7FFFFFFFFFFFFFFCLL)
    v574 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v574 = v572;
  if (v574)
  {
    if (v574 >> 62)
      goto LABEL_972;
    v575 = operator new(4 * v574);
  }
  else
  {
    v575 = 0;
  }
  v576 = &v575[4 * v571];
  v108 = &v575[4 * v574];
  *(_DWORD *)v576 = 6;
  v568 = v576 + 4;
  if (v551 != v569)
  {
    v577 = v551 - v569 - 4;
    if (v577 < 0x2C)
    {
      v578 = v551;
      goto LABEL_783;
    }
    if ((unint64_t)(v551 - v575 - v570) < 0x20)
    {
      v578 = v551;
      do
      {
LABEL_783:
        v584 = *((_DWORD *)v578 - 1);
        v578 -= 4;
        *((_DWORD *)v576 - 1) = v584;
        v576 -= 4;
      }
      while (v578 != v569);
      goto LABEL_784;
    }
    v579 = (v577 >> 2) + 1;
    v578 = &v551[-4 * (v579 & 0x7FFFFFFFFFFFFFF8)];
    v580 = &v575[4 * v571 - 16];
    v581 = v551 - 16;
    v582 = v579 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v583 = *(_OWORD *)v581;
      *(v580 - 1) = *((_OWORD *)v581 - 1);
      *v580 = v583;
      v580 -= 2;
      v581 -= 32;
      v582 -= 8;
    }
    while (v582);
    v576 -= 4 * (v579 & 0x7FFFFFFFFFFFFFF8);
    if (v579 != (v579 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_783;
  }
LABEL_784:
  *a2 = v576;
  a2[1] = v568;
  a2[2] = v108;
  if (v569)
  {
    operator delete(v569);
    v108 = a2[2];
  }
LABEL_786:
  a2[1] = v568;
  if (v568 < v108)
  {
    *(_DWORD *)v568 = 3;
    v585 = v568 + 4;
    goto LABEL_809;
  }
  v586 = *a2;
  v587 = v568 - *a2;
  v588 = v587 >> 2;
  v589 = (v587 >> 2) + 1;
  if (v589 >> 62)
    goto LABEL_971;
  v590 = v108 - v586;
  if (v590 >> 1 > v589)
    v589 = v590 >> 1;
  if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFFCLL)
    v591 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v591 = v589;
  if (v591)
  {
    if (v591 >> 62)
      goto LABEL_972;
    v592 = operator new(4 * v591);
  }
  else
  {
    v592 = 0;
  }
  v593 = &v592[4 * v588];
  v108 = &v592[4 * v591];
  *(_DWORD *)v593 = 3;
  v585 = v593 + 4;
  if (v568 != v586)
  {
    v594 = v568 - v586 - 4;
    if (v594 < 0x2C)
    {
      v595 = v568;
      goto LABEL_806;
    }
    if ((unint64_t)(v568 - v592 - v587) < 0x20)
    {
      v595 = v568;
      do
      {
LABEL_806:
        v601 = *((_DWORD *)v595 - 1);
        v595 -= 4;
        *((_DWORD *)v593 - 1) = v601;
        v593 -= 4;
      }
      while (v595 != v586);
      goto LABEL_807;
    }
    v596 = (v594 >> 2) + 1;
    v595 = &v568[-4 * (v596 & 0x7FFFFFFFFFFFFFF8)];
    v597 = &v592[4 * v588 - 16];
    v598 = v568 - 16;
    v599 = v596 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v600 = *(_OWORD *)v598;
      *(v597 - 1) = *((_OWORD *)v598 - 1);
      *v597 = v600;
      v597 -= 2;
      v598 -= 32;
      v599 -= 8;
    }
    while (v599);
    v593 -= 4 * (v596 & 0x7FFFFFFFFFFFFFF8);
    if (v596 != (v596 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_806;
  }
LABEL_807:
  *a2 = v593;
  a2[1] = v585;
  a2[2] = v108;
  if (v586)
  {
    operator delete(v586);
    v108 = a2[2];
  }
LABEL_809:
  a2[1] = v585;
  if (v585 < v108)
  {
    *(_DWORD *)v585 = 7;
    v602 = v585 + 4;
    goto LABEL_832;
  }
  v603 = *a2;
  v604 = v585 - *a2;
  v605 = v604 >> 2;
  v606 = (v604 >> 2) + 1;
  if (v606 >> 62)
    goto LABEL_971;
  v607 = v108 - v603;
  if (v607 >> 1 > v606)
    v606 = v607 >> 1;
  if ((unint64_t)v607 >= 0x7FFFFFFFFFFFFFFCLL)
    v608 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v608 = v606;
  if (v608)
  {
    if (v608 >> 62)
      goto LABEL_972;
    v609 = operator new(4 * v608);
  }
  else
  {
    v609 = 0;
  }
  v610 = &v609[4 * v605];
  v108 = &v609[4 * v608];
  *(_DWORD *)v610 = 7;
  v602 = v610 + 4;
  if (v585 != v603)
  {
    v611 = v585 - v603 - 4;
    if (v611 < 0x2C)
    {
      v612 = v585;
      goto LABEL_829;
    }
    if ((unint64_t)(v585 - v609 - v604) < 0x20)
    {
      v612 = v585;
      do
      {
LABEL_829:
        v618 = *((_DWORD *)v612 - 1);
        v612 -= 4;
        *((_DWORD *)v610 - 1) = v618;
        v610 -= 4;
      }
      while (v612 != v603);
      goto LABEL_830;
    }
    v613 = (v611 >> 2) + 1;
    v612 = &v585[-4 * (v613 & 0x7FFFFFFFFFFFFFF8)];
    v614 = &v609[4 * v605 - 16];
    v615 = v585 - 16;
    v616 = v613 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v617 = *(_OWORD *)v615;
      *(v614 - 1) = *((_OWORD *)v615 - 1);
      *v614 = v617;
      v614 -= 2;
      v615 -= 32;
      v616 -= 8;
    }
    while (v616);
    v610 -= 4 * (v613 & 0x7FFFFFFFFFFFFFF8);
    if (v613 != (v613 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_829;
  }
LABEL_830:
  *a2 = v610;
  a2[1] = v602;
  a2[2] = v108;
  if (v603)
  {
    operator delete(v603);
    v108 = a2[2];
  }
LABEL_832:
  a2[1] = v602;
  if (v602 < v108)
  {
    *(_DWORD *)v602 = 1;
    v619 = v602 + 4;
    goto LABEL_855;
  }
  v620 = *a2;
  v621 = v602 - *a2;
  v622 = v621 >> 2;
  v623 = (v621 >> 2) + 1;
  if (v623 >> 62)
    goto LABEL_971;
  v624 = v108 - v620;
  if (v624 >> 1 > v623)
    v623 = v624 >> 1;
  if ((unint64_t)v624 >= 0x7FFFFFFFFFFFFFFCLL)
    v625 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v625 = v623;
  if (v625)
  {
    if (v625 >> 62)
      goto LABEL_972;
    v626 = operator new(4 * v625);
  }
  else
  {
    v626 = 0;
  }
  v627 = &v626[4 * v622];
  v108 = &v626[4 * v625];
  *(_DWORD *)v627 = 1;
  v619 = v627 + 4;
  if (v602 != v620)
  {
    v628 = v602 - v620 - 4;
    if (v628 < 0x2C)
    {
      v629 = v602;
      goto LABEL_852;
    }
    if ((unint64_t)(v602 - v626 - v621) < 0x20)
    {
      v629 = v602;
      do
      {
LABEL_852:
        v635 = *((_DWORD *)v629 - 1);
        v629 -= 4;
        *((_DWORD *)v627 - 1) = v635;
        v627 -= 4;
      }
      while (v629 != v620);
      goto LABEL_853;
    }
    v630 = (v628 >> 2) + 1;
    v629 = &v602[-4 * (v630 & 0x7FFFFFFFFFFFFFF8)];
    v631 = &v626[4 * v622 - 16];
    v632 = v602 - 16;
    v633 = v630 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v634 = *(_OWORD *)v632;
      *(v631 - 1) = *((_OWORD *)v632 - 1);
      *v631 = v634;
      v631 -= 2;
      v632 -= 32;
      v633 -= 8;
    }
    while (v633);
    v627 -= 4 * (v630 & 0x7FFFFFFFFFFFFFF8);
    if (v630 != (v630 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_852;
  }
LABEL_853:
  *a2 = v627;
  a2[1] = v619;
  a2[2] = v108;
  if (v620)
  {
    operator delete(v620);
    v108 = a2[2];
  }
LABEL_855:
  a2[1] = v619;
  if (v619 < v108)
  {
    *(_DWORD *)v619 = 0;
    v636 = v619 + 4;
    goto LABEL_878;
  }
  v637 = *a2;
  v638 = v619 - *a2;
  v639 = v638 >> 2;
  v640 = (v638 >> 2) + 1;
  if (v640 >> 62)
    goto LABEL_971;
  v641 = v108 - v637;
  if (v641 >> 1 > v640)
    v640 = v641 >> 1;
  if ((unint64_t)v641 >= 0x7FFFFFFFFFFFFFFCLL)
    v642 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v642 = v640;
  if (v642)
  {
    if (v642 >> 62)
      goto LABEL_972;
    v643 = operator new(4 * v642);
  }
  else
  {
    v643 = 0;
  }
  v644 = &v643[4 * v639];
  v108 = &v643[4 * v642];
  *(_DWORD *)v644 = 0;
  v636 = v644 + 4;
  if (v619 != v637)
  {
    v645 = v619 - v637 - 4;
    if (v645 < 0x2C)
    {
      v646 = v619;
      goto LABEL_875;
    }
    if ((unint64_t)(v619 - &v643[v638]) < 0x20)
    {
      v646 = v619;
      do
      {
LABEL_875:
        v652 = *((_DWORD *)v646 - 1);
        v646 -= 4;
        *((_DWORD *)v644 - 1) = v652;
        v644 -= 4;
      }
      while (v646 != v637);
      goto LABEL_876;
    }
    v647 = (v645 >> 2) + 1;
    v646 = &v619[-4 * (v647 & 0x7FFFFFFFFFFFFFF8)];
    v648 = &v643[4 * v639 - 16];
    v649 = v619 - 16;
    v650 = v647 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v651 = *(_OWORD *)v649;
      *(v648 - 1) = *((_OWORD *)v649 - 1);
      *v648 = v651;
      v648 -= 2;
      v649 -= 32;
      v650 -= 8;
    }
    while (v650);
    v644 -= 4 * (v647 & 0x7FFFFFFFFFFFFFF8);
    if (v647 != (v647 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_875;
  }
LABEL_876:
  *a2 = v644;
  a2[1] = v636;
  a2[2] = v108;
  if (v637)
  {
    operator delete(v637);
    v108 = a2[2];
  }
LABEL_878:
  a2[1] = v636;
  if (v636 < v108)
  {
    *(_DWORD *)v636 = 5;
    v653 = v636 + 4;
    goto LABEL_901;
  }
  v654 = *a2;
  v655 = v636 - *a2;
  v656 = v655 >> 2;
  v657 = (v655 >> 2) + 1;
  if (v657 >> 62)
    goto LABEL_971;
  v658 = v108 - v654;
  if (v658 >> 1 > v657)
    v657 = v658 >> 1;
  if ((unint64_t)v658 >= 0x7FFFFFFFFFFFFFFCLL)
    v659 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v659 = v657;
  if (v659)
  {
    if (v659 >> 62)
      goto LABEL_972;
    v660 = operator new(4 * v659);
  }
  else
  {
    v660 = 0;
  }
  v661 = &v660[4 * v656];
  v108 = &v660[4 * v659];
  *(_DWORD *)v661 = 5;
  v653 = v661 + 4;
  if (v636 != v654)
  {
    v662 = v636 - v654 - 4;
    if (v662 < 0x2C)
    {
      v663 = v636;
      goto LABEL_898;
    }
    if ((unint64_t)(v636 - v660 - v655) < 0x20)
    {
      v663 = v636;
      do
      {
LABEL_898:
        v669 = *((_DWORD *)v663 - 1);
        v663 -= 4;
        *((_DWORD *)v661 - 1) = v669;
        v661 -= 4;
      }
      while (v663 != v654);
      goto LABEL_899;
    }
    v664 = (v662 >> 2) + 1;
    v663 = &v636[-4 * (v664 & 0x7FFFFFFFFFFFFFF8)];
    v665 = &v660[4 * v656 - 16];
    v666 = v636 - 16;
    v667 = v664 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v668 = *(_OWORD *)v666;
      *(v665 - 1) = *((_OWORD *)v666 - 1);
      *v665 = v668;
      v665 -= 2;
      v666 -= 32;
      v667 -= 8;
    }
    while (v667);
    v661 -= 4 * (v664 & 0x7FFFFFFFFFFFFFF8);
    if (v664 != (v664 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_898;
  }
LABEL_899:
  *a2 = v661;
  a2[1] = v653;
  a2[2] = v108;
  if (v654)
  {
    operator delete(v654);
    v108 = a2[2];
  }
LABEL_901:
  a2[1] = v653;
  if (v653 < v108)
  {
    *(_DWORD *)v653 = 5;
    v670 = v653 + 4;
    goto LABEL_924;
  }
  v671 = *a2;
  v672 = v653 - *a2;
  v673 = v672 >> 2;
  v674 = (v672 >> 2) + 1;
  if (v674 >> 62)
    goto LABEL_971;
  v675 = v108 - v671;
  if (v675 >> 1 > v674)
    v674 = v675 >> 1;
  if ((unint64_t)v675 >= 0x7FFFFFFFFFFFFFFCLL)
    v676 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v676 = v674;
  if (v676)
  {
    if (v676 >> 62)
      goto LABEL_972;
    v677 = operator new(4 * v676);
  }
  else
  {
    v677 = 0;
  }
  v678 = &v677[4 * v673];
  v108 = &v677[4 * v676];
  *(_DWORD *)v678 = 5;
  v670 = v678 + 4;
  if (v653 != v671)
  {
    v679 = v653 - v671 - 4;
    if (v679 < 0x2C)
    {
      v680 = v653;
      goto LABEL_921;
    }
    if ((unint64_t)(v653 - v677 - v672) < 0x20)
    {
      v680 = v653;
      do
      {
LABEL_921:
        v686 = *((_DWORD *)v680 - 1);
        v680 -= 4;
        *((_DWORD *)v678 - 1) = v686;
        v678 -= 4;
      }
      while (v680 != v671);
      goto LABEL_922;
    }
    v681 = (v679 >> 2) + 1;
    v680 = &v653[-4 * (v681 & 0x7FFFFFFFFFFFFFF8)];
    v682 = &v677[4 * v673 - 16];
    v683 = v653 - 16;
    v684 = v681 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v685 = *(_OWORD *)v683;
      *(v682 - 1) = *((_OWORD *)v683 - 1);
      *v682 = v685;
      v682 -= 2;
      v683 -= 32;
      v684 -= 8;
    }
    while (v684);
    v678 -= 4 * (v681 & 0x7FFFFFFFFFFFFFF8);
    if (v681 != (v681 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_921;
  }
LABEL_922:
  *a2 = v678;
  a2[1] = v670;
  a2[2] = v108;
  if (v671)
  {
    operator delete(v671);
    v108 = a2[2];
  }
LABEL_924:
  a2[1] = v670;
  if (v670 < v108)
  {
    *(_DWORD *)v670 = 0;
    v687 = v670 + 4;
    goto LABEL_947;
  }
  v688 = *a2;
  v689 = v670 - *a2;
  v690 = v689 >> 2;
  v691 = (v689 >> 2) + 1;
  if (v691 >> 62)
    goto LABEL_971;
  v692 = v108 - v688;
  if (v692 >> 1 > v691)
    v691 = v692 >> 1;
  if ((unint64_t)v692 >= 0x7FFFFFFFFFFFFFFCLL)
    v693 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v693 = v691;
  if (v693)
  {
    if (v693 >> 62)
      goto LABEL_972;
    v694 = operator new(4 * v693);
  }
  else
  {
    v694 = 0;
  }
  v695 = &v694[4 * v690];
  v108 = &v694[4 * v693];
  *(_DWORD *)v695 = 0;
  v687 = v695 + 4;
  if (v670 != v688)
  {
    v696 = v670 - v688 - 4;
    if (v696 < 0x2C)
    {
      v697 = v670;
      goto LABEL_944;
    }
    if ((unint64_t)(v670 - &v694[v689]) < 0x20)
    {
      v697 = v670;
      do
      {
LABEL_944:
        v703 = *((_DWORD *)v697 - 1);
        v697 -= 4;
        *((_DWORD *)v695 - 1) = v703;
        v695 -= 4;
      }
      while (v697 != v688);
      goto LABEL_945;
    }
    v698 = (v696 >> 2) + 1;
    v697 = &v670[-4 * (v698 & 0x7FFFFFFFFFFFFFF8)];
    v699 = &v694[4 * v690 - 16];
    v700 = v670 - 16;
    v701 = v698 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v702 = *(_OWORD *)v700;
      *(v699 - 1) = *((_OWORD *)v700 - 1);
      *v699 = v702;
      v699 -= 2;
      v700 -= 32;
      v701 -= 8;
    }
    while (v701);
    v695 -= 4 * (v698 & 0x7FFFFFFFFFFFFFF8);
    if (v698 != (v698 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_944;
  }
LABEL_945:
  *a2 = v695;
  a2[1] = v687;
  a2[2] = v108;
  if (v688)
  {
    operator delete(v688);
    v108 = a2[2];
  }
LABEL_947:
  a2[1] = v687;
  if (v687 < v108)
  {
    *(_DWORD *)v687 = 4;
    v704 = v687 + 4;
    goto LABEL_970;
  }
  v705 = *a2;
  v706 = v687 - *a2;
  v707 = v706 >> 2;
  v708 = (v706 >> 2) + 1;
  if (v708 >> 62)
LABEL_971:
    abort();
  v709 = v108 - v705;
  if (v709 >> 1 > v708)
    v708 = v709 >> 1;
  if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFFCLL)
    v710 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v710 = v708;
  if (v710)
  {
    if (!(v710 >> 62))
    {
      v711 = operator new(4 * v710);
      goto LABEL_959;
    }
LABEL_972:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v711 = 0;
LABEL_959:
  v712 = &v711[4 * v707];
  v713 = &v711[4 * v710];
  *(_DWORD *)v712 = 4;
  v704 = v712 + 4;
  if (v687 == v705)
    goto LABEL_968;
  v714 = v687 - v705 - 4;
  if (v714 < 0x2C)
  {
    v715 = v687;
    goto LABEL_967;
  }
  if ((unint64_t)(v687 - v711 - v706) < 0x20)
  {
    v715 = v687;
    do
    {
LABEL_967:
      v721 = *((_DWORD *)v715 - 1);
      v715 -= 4;
      *((_DWORD *)v712 - 1) = v721;
      v712 -= 4;
    }
    while (v715 != v705);
    goto LABEL_968;
  }
  v716 = (v714 >> 2) + 1;
  v715 = &v687[-4 * (v716 & 0x7FFFFFFFFFFFFFF8)];
  v717 = &v711[4 * v707 - 16];
  v718 = v687 - 16;
  v719 = v716 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v720 = *(_OWORD *)v718;
    *(v717 - 1) = *((_OWORD *)v718 - 1);
    *v717 = v720;
    v717 -= 2;
    v718 -= 32;
    v719 -= 8;
  }
  while (v719);
  v712 -= 4 * (v716 & 0x7FFFFFFFFFFFFFF8);
  if (v716 != (v716 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_967;
LABEL_968:
  *a2 = v712;
  a2[1] = v704;
  a2[2] = v713;
  if (v705)
    operator delete(v705);
LABEL_970:
  a2[1] = v704;
}

void md::GeometryLogic::createXYPlane(char **a1, unint64_t *a2, unint64_t *a3, float a4, float a5)
{
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  const float *v34;
  float *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  _DWORD *v39;
  unint64_t v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *i;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  uint64_t v72;
  int *v73;
  unint64_t v74;
  int *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  _QWORD *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  __int128 *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  int *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  _BYTE *v148;
  char *v149;
  int64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  __int128 *v163;
  uint64_t v164;
  __int128 v165;
  int v166;
  char *v167;
  unint64_t v168;
  char *v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 *v174;
  _OWORD *v175;
  uint64_t v176;
  __int128 v177;
  int v178;
  char *v179;
  char *v180;
  size_t v181;
  unint64_t v182;
  const float *v183;
  float *v184;
  uint64_t v185;
  _BYTE __src[32];
  int v187;
  uint64_t v188;
  int v189;
  _QWORD v190[2];
  float32x4x2_t v191;
  float32x4x3_t v192;

  v190[1] = *MEMORY[0x1E0C80C00];
  *(float *)__src = a4 + -0.5;
  *(float *)&__src[4] = a5 + -0.5;
  *(_DWORD *)&__src[8] = 0;
  *(float *)&__src[12] = a4 + 0.5;
  *(float *)&__src[16] = a5 + -0.5;
  *(_DWORD *)&__src[20] = 0;
  *(float *)&__src[24] = a4 + -0.5;
  *(float *)&__src[28] = a5 + 0.5;
  v187 = 0;
  *(float *)&v188 = a4 + 0.5;
  *((float *)&v188 + 1) = a5 + 0.5;
  v189 = 0;
  v8 = *a1;
  v9 = (unint64_t)a1[1];
  v10 = v9 - (_QWORD)*a1;
  v11 = v10 / 12;
  v12 = (unint64_t)&(*a1)[12 * (v10 / 12)];
  v13 = a1[2];
  if ((uint64_t)&v13[-v9] >= 48)
  {
    v18 = v9 - v12;
    if ((uint64_t)(v9 - v12) > 47)
    {
      v23 = v190;
      v21 = (unint64_t)a1[1];
    }
    else
    {
      v19 = &__src[12 * (v18 / 12)];
      v20 = v18 / 12 - 4;
      v21 = (unint64_t)a1[1];
      do
      {
        v22 = *(_QWORD *)v19;
        *(_DWORD *)(v21 + 8) = *((_DWORD *)v19 + 2);
        *(_QWORD *)v21 = v22;
        v21 += 12;
        v19 += 12;
        v31 = __CFADD__(v20++, 1);
      }
      while (!v31);
      a1[1] = (char *)v21;
      if (v18 < 1)
        goto LABEL_55;
      v23 = &__src[12 * (v18 / 12)];
    }
    v24 = v21 - (v12 + 48);
    v25 = v21 - 48;
    v26 = v21;
    if (v21 - 48 < v9)
    {
      v27 = v21 - 48;
      v26 = v21;
      do
      {
        v28 = *(_QWORD *)v27;
        *(_DWORD *)(v26 + 8) = *(_DWORD *)(v27 + 8);
        *(_QWORD *)v26 = v28;
        v26 += 12;
        v27 += 12;
      }
      while (v27 < v9);
    }
    a1[1] = (char *)v26;
    if (v21 != v12 + 48)
    {
      if (v24 - 12 < 0xB4
        || ((v29 = (v24 - 12) / 0xC,
             v30 = (unint64_t)&v8[v24 + 12 * v11 - 12 * v29 - 12],
             v21 - 12 * v29 - 12 < v25)
          ? (v31 = v30 >= v21)
          : (v31 = 1),
            !v31))
      {
        v33 = v21;
LABEL_33:
        v37 = (_DWORD *)(v33 - 4);
        do
        {
          v38 = *(_DWORD *)(v25 - 12);
          v25 -= 12;
          *(v37 - 2) = v38;
          *(v37 - 1) = *(_DWORD *)(v25 + 4);
          *v37 = *(_DWORD *)(v25 + 8);
          v37 -= 3;
        }
        while (v25 != v12);
        goto LABEL_35;
      }
      v32 = v29 + 1;
      v33 = v21 - 12 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = (const float *)(v21 - 96);
      v35 = (float *)(v21 - 48);
      v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v192 = vld3q_f32(v34);
        vst3q_f32(v35, v192);
        v35 -= 12;
        v34 -= 12;
        v36 -= 4;
      }
      while (v36);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v25 -= 12 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        goto LABEL_33;
      }
    }
LABEL_35:
    v39 = __src;
    if (v23 == __src)
      goto LABEL_55;
    v40 = v23 - __src - 12;
    if (v40 >= 0xB4)
    {
      v51 = v40 / 0xC;
      v39 = __src;
      if (v12 >= (unint64_t)&__src[12 * v51 + 12] || &v8[12 * v11 + 12 + 12 * v51] <= __src)
      {
        v52 = v51 + 1;
        v53 = (v51 + 1) & 0x3FFFFFFFFFFFFFF8;
        v41 = (_DWORD *)(v12 + 12 * v53);
        v54 = __src;
        v55 = v53;
        do
        {
          v56 = v54[1];
          v58 = v54[4];
          v57 = v54[5];
          v59 = v54[2];
          v60 = v54[3];
          *(_OWORD *)v12 = *v54;
          *(_OWORD *)(v12 + 16) = v56;
          *(_OWORD *)(v12 + 32) = v59;
          *(_OWORD *)(v12 + 48) = v60;
          v54 += 6;
          *(_OWORD *)(v12 + 64) = v58;
          *(_OWORD *)(v12 + 80) = v57;
          v12 += 96;
          v55 -= 8;
        }
        while (v55);
        if (v52 == v53)
          goto LABEL_55;
        v39 = &__src[12 * v53];
      }
      else
      {
        v41 = (_DWORD *)v12;
      }
    }
    else
    {
      v41 = (_DWORD *)v12;
    }
    do
    {
      *v41 = *v39;
      v41[1] = v39[1];
      v41[2] = v39[2];
      v39 += 3;
      v41 += 3;
    }
    while (v39 != (_DWORD *)v23);
    goto LABEL_55;
  }
  v14 = v11 + 4;
  if ((unint64_t)(v11 + 4) > 0x1555555555555555)
    abort();
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v8) >> 2);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0xAAAAAAAAAAAAAAALL)
    v16 = 0x1555555555555555;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 > 0x1555555555555555)
      goto LABEL_172;
    v17 = (char *)operator new(12 * v16);
  }
  else
  {
    v17 = 0;
  }
  v42 = &v17[12 * v11];
  *(_QWORD *)v42 = *(_QWORD *)__src;
  *((_DWORD *)v42 + 2) = *(_DWORD *)&__src[8];
  *(_QWORD *)(v42 + 12) = *(_QWORD *)&__src[12];
  *((_DWORD *)v42 + 5) = *(_DWORD *)&__src[20];
  *((_QWORD *)v42 + 3) = *(_QWORD *)&__src[24];
  *((_DWORD *)v42 + 8) = v187;
  *((_DWORD *)v42 + 11) = v189;
  v43 = v42 + 48;
  *(_QWORD *)(v42 + 36) = v188;
  if ((unint64_t)(v10 + 11) >= 0x17)
  {
    v44 = 12 * v11;
    v45 = v8 - 12;
    do
    {
      v46 = &v17[v44];
      v47 = *(_QWORD *)&v45[v44];
      *((_DWORD *)v46 - 1) = *(_DWORD *)&v45[v44 + 8];
      *(_QWORD *)(v46 - 12) = v47;
      v44 -= 12;
    }
    while (v44);
    v42 = v17;
    v9 = (unint64_t)a1[1];
  }
  for (i = &v17[12 * v16]; v12 != v9; v12 += 12)
  {
    v49 = *(_QWORD *)v12;
    *((_DWORD *)v43 + 2) = *(_DWORD *)(v12 + 8);
    *(_QWORD *)v43 = v49;
    v43 += 12;
  }
  v50 = *a1;
  *a1 = v42;
  a1[1] = v43;
  a1[2] = i;
  if (v50)
    operator delete(v50);
LABEL_55:
  *(_OWORD *)__src = xmmword_19FFB3580;
  *(_OWORD *)&__src[16] = xmmword_19FFB3B40;
  v61 = *a2;
  v62 = a2[1];
  v63 = v62 - *a2;
  v64 = v63 >> 3;
  v65 = (char *)(*a2 + (v63 & 0xFFFFFFFFFFFFFFF8));
  v66 = a2[2];
  if ((uint64_t)(v66 - v62) >= 32)
  {
    v71 = (__int128 *)&v187;
    v72 = v62 - (_QWORD)v65;
    if ((uint64_t)(v62 - (_QWORD)v65) > 31)
    {
      v73 = &v187;
      v76 = (char *)a2[1];
      goto LABEL_95;
    }
    v73 = (int *)&__src[v72 & 0xFFFFFFFFFFFFFFF8];
    v74 = &__src[24] - &__src[v72];
    if (v74 < 0x38)
    {
      v75 = (int *)&__src[v72 & 0xFFFFFFFFFFFFFFF8];
      v76 = (char *)a2[1];
    }
    else
    {
      v75 = (int *)&__src[v72 & 0xFFFFFFFFFFFFFFF8];
      v76 = (char *)a2[1];
      if ((unint64_t)(v65 - __src) >= 0x20)
      {
        v77 = (v74 >> 3) + 1;
        v78 = 2 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v73[v78];
        v79 = (_OWORD *)(v62 + 16);
        v80 = (__int128 *)&__src[8 * (v72 >> 3) + 16];
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v80;
          *(v79 - 1) = *(v80 - 1);
          *v79 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        v76 = (char *)(v62 + v78 * 4);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_94:
          a2[1] = (unint64_t)v76;
          if (v72 < 1)
            goto LABEL_123;
LABEL_95:
          v107 = v76 - (v65 + 32);
          v108 = v76 - 32;
          v109 = v76;
          if ((unint64_t)(v76 - 32) < v62)
          {
            v110 = (v63 & 0xFFFFFFFFFFFFFFF8) + v107;
            v111 = v110 + v61 + 8;
            if (v62 > v111)
              v111 = v62;
            v112 = v111 + ~v61 - v110;
            v113 = (unint64_t)&v76[-v110 - v61];
            v114 = v112 >= 0x58 && v113 > 0x1F;
            v115 = v76 - 32;
            v109 = v76;
            if (!v114)
              goto LABEL_178;
            v116 = (v112 >> 3) + 1;
            v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
            v115 = &v108[v117];
            v118 = v76 + 16;
            v119 = (__int128 *)(8 * (v107 >> 3) + 8 * v64 + v61 + 16);
            v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v121 = *v119;
              *(v118 - 1) = *(v119 - 1);
              *v118 = v121;
              v118 += 2;
              v119 += 2;
              v120 -= 4;
            }
            while (v120);
            v109 = &v76[v117];
            if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_178:
              do
              {
                v122 = *(_QWORD *)v115;
                v115 += 8;
                *(_QWORD *)v109 = v122;
                v109 += 8;
              }
              while ((unint64_t)v115 < v62);
            }
          }
          a2[1] = (unint64_t)v109;
          if (v76 != v65 + 32)
          {
            if ((unint64_t)(v107 - 8) < 0x78
              || &v76[-(v107 & 0xFFFFFFFFFFFFFFF8)] < v108
              && v61 + v107 + (v63 & 0xFFFFFFFFFFFFFFF8) - (v107 & 0xFFFFFFFFFFFFFFF8) < (unint64_t)v76)
            {
              v123 = v76;
              goto LABEL_112;
            }
            v182 = ((unint64_t)(v107 - 8) >> 3) + 1;
            v123 = &v76[-8 * (v182 & 0x3FFFFFFFFFFFFFFCLL)];
            v183 = (const float *)(v76 - 64);
            v184 = (float *)(v76 - 32);
            v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v191 = vld2q_f32(v183);
              v183 -= 8;
              vst2q_f32(v184, v191);
              v184 -= 8;
              v185 -= 4;
            }
            while (v185);
            if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v108 -= 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_112:
              v124 = v123 - 4;
              do
              {
                v125 = *((_DWORD *)v108 - 2);
                v108 -= 8;
                *((_DWORD *)v124 - 1) = v125;
                *(_DWORD *)v124 = *((_DWORD *)v108 + 1);
                v124 -= 8;
              }
              while (v108 != v65);
            }
          }
          v126 = (int *)__src;
          if (v73 == (int *)__src)
            goto LABEL_123;
          v127 = (char *)v73 - __src - 8;
          if (v127 >= 0x78)
          {
            v126 = (int *)__src;
            if (v65 >= &__src[(v127 & 0xFFFFFFFFFFFFFFF8) + 8]
              || (v63 & 0xFFFFFFFFFFFFFFF8) + v61 + (v127 & 0xFFFFFFFFFFFFFFF8) + 8 <= (unint64_t)__src)
            {
              v128 = (v127 >> 3) + 1;
              v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFF8);
              v65 += v129;
              v130 = (_OWORD *)(v61 + 8 * v64 + 32);
              v131 = v128 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v133 = *(v71 - 2);
                v132 = *(v71 - 1);
                v135 = *v71;
                v134 = v71[1];
                v71 += 4;
                *(v130 - 2) = v133;
                *(v130 - 1) = v132;
                *v130 = v135;
                v130[1] = v134;
                v130 += 4;
                v131 -= 8;
              }
              while (v131);
              if (v128 == (v128 & 0x3FFFFFFFFFFFFFF8))
                goto LABEL_123;
              v126 = (int *)&__src[v129];
            }
          }
          do
          {
            *(_DWORD *)v65 = *v126;
            *((_DWORD *)v65 + 1) = v126[1];
            v126 += 2;
            v65 += 8;
          }
          while (v126 != v73);
          goto LABEL_123;
        }
      }
    }
    do
    {
      v106 = *(_QWORD *)v75;
      v75 += 2;
      *(_QWORD *)v76 = v106;
      v76 += 8;
    }
    while (v75 != &v187);
    goto LABEL_94;
  }
  v67 = v64 + 4;
  if ((unint64_t)(v64 + 4) >> 61)
    abort();
  v68 = v66 - v61;
  if (v68 >> 2 > v67)
    v67 = v68 >> 2;
  if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
    v69 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v69 = v67;
  if (v69)
  {
    if (v69 >> 61)
      goto LABEL_172;
    v70 = (char *)operator new(8 * v69);
  }
  else
  {
    v70 = 0;
  }
  v83 = *(_OWORD *)&__src[16];
  v84 = &v70[8 * v64];
  *(_OWORD *)v84 = *(_OWORD *)__src;
  *((_OWORD *)v84 + 1) = v83;
  v85 = v84 + 32;
  v86 = v63 - 8;
  if ((unint64_t)v63 < 8)
    goto LABEL_83;
  if (v86 < 0x68)
  {
    v87 = v65;
    goto LABEL_81;
  }
  v87 = v65;
  if ((v63 & 0xFFFFFFFFFFFFFFF8) + v61 - (unint64_t)&v70[v63 & 0xFFFFFFFFFFFFFFF8] < 0x20)
    goto LABEL_179;
  v88 = (v86 >> 3) + 1;
  v87 = &v65[-8 * (v88 & 0x3FFFFFFFFFFFFFFCLL)];
  v89 = 8 * v64 - 16;
  v90 = (__int128 *)(v61 + v89);
  v91 = &v70[v89];
  v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v93 = *v90;
    *((_OWORD *)v91 - 1) = *(v90 - 1);
    *(_OWORD *)v91 = v93;
    v90 -= 2;
    v91 -= 32;
    v92 -= 4;
  }
  while (v92);
  v84 -= 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
  if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_179:
    do
    {
LABEL_81:
      v94 = *((_QWORD *)v87 - 1);
      v87 -= 8;
      *((_QWORD *)v84 - 1) = v94;
      v84 -= 8;
    }
    while (v87 != (char *)v61);
    v62 = a2[1];
  }
LABEL_83:
  v95 = &v70[8 * v69];
  if ((char *)v62 != v65)
  {
    v96 = (char *)((v63 & 0xFFFFFFFFFFFFFFF8) + v61);
    v97 = v62 - (_QWORD)v96 - 8;
    if (v97 < 0x68)
      goto LABEL_180;
    if ((unint64_t)(&v70[v63 & 0xFFFFFFFFFFFFFFF8] - v96 + 32) < 0x20)
      goto LABEL_180;
    v98 = (v97 >> 3) + 1;
    v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    v65 += v99;
    v100 = &v70[8 * v64 + 48];
    v101 = (__int128 *)(8 * v64 + v61 + 16);
    v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v103 = *v101;
      *((_OWORD *)v100 - 1) = *(v101 - 1);
      *(_OWORD *)v100 = v103;
      v100 += 32;
      v101 += 2;
      v102 -= 4;
    }
    while (v102);
    v85 = (_QWORD *)((char *)v85 + v99);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_180:
      do
      {
        v104 = *(_QWORD *)v65;
        v65 += 8;
        *v85++ = v104;
      }
      while (v65 != (char *)v62);
    }
  }
  v105 = (void *)*a2;
  *a2 = (unint64_t)v84;
  a2[1] = (unint64_t)v85;
  a2[2] = (unint64_t)v95;
  if (v105)
    operator delete(v105);
LABEL_123:
  v136 = xmmword_19FFB8BF4;
  *(_OWORD *)__src = xmmword_19FFB8BF4;
  *(_QWORD *)&__src[16] = 0x300000001;
  v138 = *a3;
  v137 = a3[1];
  v139 = v137 - *a3;
  v140 = v139 >> 2;
  v141 = (char *)(*a3 + (v139 & 0xFFFFFFFFFFFFFFFCLL));
  v142 = a3[2];
  if ((uint64_t)(v142 - v137) < 24)
  {
    v143 = v140 + 6;
    if ((unint64_t)(v140 + 6) >> 62)
      abort();
    v144 = v142 - v138;
    if (v144 >> 1 > v143)
      v143 = v144 >> 1;
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
      v145 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v145 = v143;
    if (!v145)
    {
      v146 = 0;
LABEL_154:
      v167 = &v146[4 * v140];
      *(_OWORD *)v167 = v136;
      *((_QWORD *)v167 + 2) = 0x300000001;
      if (v138 == v137)
      {
        v170 = &v146[4 * v140];
      }
      else
      {
        v168 = v139 - 4;
        if ((unint64_t)(v139 - 4) >= 0x3C)
        {
          v171 = (v139 & 0xFFFFFFFFFFFFFFFCLL) + v138 - (_QWORD)&v146[v139 & 0xFFFFFFFFFFFFFFFCLL];
          v169 = v141;
          v170 = &v146[4 * v140];
          if (v171 >= 0x20)
          {
            v172 = (v168 >> 2) + 1;
            v169 = &v141[-4 * (v172 & 0x7FFFFFFFFFFFFFF8)];
            v173 = 4 * v140 - 16;
            v174 = (__int128 *)(v138 + v173);
            v175 = &v146[v173];
            v176 = v172 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v177 = *v174;
              *(v175 - 1) = *(v174 - 1);
              *v175 = v177;
              v174 -= 2;
              v175 -= 2;
              v176 -= 8;
            }
            while (v176);
            v170 = &v167[-4 * (v172 & 0x7FFFFFFFFFFFFFF8)];
            if (v172 == (v172 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_163;
          }
        }
        else
        {
          v169 = v141;
          v170 = &v146[4 * v140];
        }
        do
        {
          v178 = *((_DWORD *)v169 - 1);
          v169 -= 4;
          *((_DWORD *)v170 - 1) = v178;
          v170 -= 4;
        }
        while (v169 != (char *)v138);
      }
LABEL_163:
      v179 = v167 + 24;
      v180 = &v146[4 * v145];
      v181 = v137 - (_QWORD)v141;
      if (v181)
        memmove(v167 + 24, v141, v181);
      *a3 = (unint64_t)v170;
      a3[1] = (unint64_t)&v179[v181];
      a3[2] = (unint64_t)v180;
      if (v138)
        operator delete((void *)v138);
      return;
    }
    if (!(v145 >> 62))
    {
      v146 = operator new(4 * v145);
      v136 = xmmword_19FFB8BF4;
      goto LABEL_154;
    }
LABEL_172:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v147 = v137 - (_QWORD)v141;
  if ((uint64_t)(v137 - (_QWORD)v141) > 23)
  {
    v148 = &__src[24];
    v149 = (char *)a3[1];
  }
  else
  {
    v148 = &__src[v147];
    memmove((void *)a3[1], &__src[v147], 24 - v147);
    v149 = v141 + 24;
    a3[1] = (unint64_t)(v141 + 24);
    if (v147 < 1)
      return;
  }
  v150 = v149 - (v141 + 24);
  v151 = v150 >> 2;
  v152 = v149 - 24;
  v153 = v149;
  if ((unint64_t)(v149 - 24) < v137)
  {
    v154 = (v139 & 0xFFFFFFFFFFFFFFFCLL) + v150;
    v155 = (char *)(v154 + v138);
    v156 = v154 + v138 + 4;
    if (v137 > v156)
      v156 = v137;
    v157 = v156 + ~v138 - v154;
    v158 = v149 - v155;
    v159 = v157 >= 0x2C && v158 > 0x1F;
    v153 = v149;
    if (!v159)
      goto LABEL_181;
    v160 = (v157 >> 2) + 1;
    v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
    v152 += v161;
    v162 = v149 + 16;
    v163 = (__int128 *)(4 * v151 + 4 * v140 + v138 + 16);
    v164 = v160 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v165 = *v163;
      *(v162 - 1) = *(v163 - 1);
      *v162 = v165;
      v162 += 2;
      v163 += 2;
      v164 -= 8;
    }
    while (v164);
    v153 = &v149[v161];
    if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_181:
      do
      {
        v166 = *(_DWORD *)v152;
        v152 += 4;
        *(_DWORD *)v153 = v166;
        v153 += 4;
      }
      while ((unint64_t)v152 < v137);
    }
  }
  a3[1] = (unint64_t)v153;
  if (v149 != v141 + 24)
    memmove(&v149[-4 * v151], v141, v150);
  if (v148 != __src)
    memmove(v141, __src, v148 - __src);
}

void md::GeometryLogic::createIcoSphere(float **a1, void **a2, int a3)
{
  float32x4_t v4;
  float32x4_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  _DWORD *v103;
  _DWORD *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  _DWORD *v115;
  _DWORD *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  _DWORD *v127;
  _DWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  _DWORD *v139;
  _DWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  _DWORD *v151;
  _DWORD *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  _DWORD *v163;
  _DWORD *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  char *v175;
  _DWORD *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  int v185;
  unint64_t v186;
  char *v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  char *v199;
  char *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  char *v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  int v221;
  unint64_t v222;
  char *v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  char *v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  int v245;
  int v246;
  signed int *v247;
  char *v248;
  char *v249;
  signed int v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  int8x8_t v255;
  uint8x8_t v256;
  unint64_t v257;
  uint64_t **v258;
  uint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float **v269;
  float *v270;
  float *v271;
  float *v272;
  float *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  int v282;
  int v283;
  signed int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  unint64_t v288;
  uint8x8_t v289;
  unint64_t v290;
  uint64_t **v291;
  uint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float **v302;
  float *v303;
  float *v304;
  float *v305;
  float *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  char *v313;
  uint64_t v314;
  int v315;
  int v316;
  unsigned int v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  unint64_t v321;
  uint8x8_t v322;
  unint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float **v336;
  float *v337;
  float *v338;
  float *v339;
  float *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  uint64_t v348;
  int v349;
  float *v350;
  int v351;
  char *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  int v360;
  int v361;
  char *v362;
  unint64_t v363;
  unint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  int v368;
  int v369;
  int *v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  uint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  int *v380;
  uint64_t v381;
  int v382;
  void *v383;
  char *v384;
  _QWORD *v385;
  _QWORD *v386;
  void *v387;
  void **v388;
  int v390;
  float32x4_t v391;
  float32x4_t v392;
  signed int *v393;
  char *v395;
  float32x4_t v396;
  int v397;
  unint64_t v398;
  int v399;
  float **v400;
  int *v401;
  void *v402[2];
  void *__p[2];
  int v404;
  int v405;

  v405 = 0;
  *(_OWORD *)v402 = 0u;
  *(_OWORD *)__p = 0u;
  v404 = 1065353216;
  v400 = a1;
  v401 = &v405;
  v399 = 0;
  v398 = 0x3FCF1BBDBF800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 0;
  v398 = 0x3FCF1BBD3F800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 0;
  v398 = 0xBFCF1BBDBF800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 0;
  v398 = 0xBFCF1BBD3F800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 1070537661;
  v398 = 0xBF80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 1070537661;
  v398 = 0x3F80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = -1076945987;
  v398 = 0xBF80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = -1076945987;
  v398 = 0x3F80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = -1082130432;
  v398 = 1070537661;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 1065353216;
  v398 = 1070537661;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = -1082130432;
  v398 = 3218021309;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v399 = 1065353216;
  v398 = 3218021309;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  v7 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = *a2;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a2) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v9) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x1555555555555555)
        goto LABEL_578;
      v14 = (char *)operator new(12 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[12 * v10];
    *((_DWORD *)v15 + 2) = 5;
    *(_QWORD *)v15 = 0xB00000000;
    v8 = v15 + 12;
    if (v7 != v9)
    {
      do
      {
        v16 = *(_QWORD *)(v7 - 3);
        v7 -= 3;
        v17 = v7[2];
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v7 != v9);
      v7 = *a2;
    }
    *a2 = v15;
    a2[1] = v8;
    a2[2] = &v14[12 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    v7[2] = 5;
    *(_QWORD *)v7 = 0xB00000000;
    v8 = v7 + 3;
  }
  a2[1] = v8;
  v18 = (unint64_t)a2[2];
  if ((unint64_t)v8 < v18)
  {
    v8[2] = 1;
    *(_QWORD *)v8 = 0x500000000;
    v19 = v8 + 3;
    goto LABEL_36;
  }
  v20 = *a2;
  v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*a2) >> 2);
  v22 = v21 + 1;
  if (v21 + 1 > 0x1555555555555555)
    abort();
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v20) >> 2);
  if (2 * v23 > v22)
    v22 = 2 * v23;
  if (v23 >= 0xAAAAAAAAAAAAAAALL)
    v24 = 0x1555555555555555;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 > 0x1555555555555555)
      goto LABEL_578;
    v25 = (char *)operator new(12 * v24);
  }
  else
  {
    v25 = 0;
  }
  v26 = &v25[12 * v21];
  v27 = &v25[12 * v24];
  *((_DWORD *)v26 + 2) = 1;
  *(_QWORD *)v26 = 0x500000000;
  v19 = v26 + 12;
  if (v8 == v20)
  {
    *a2 = v26;
    a2[1] = v19;
    a2[2] = v27;
LABEL_35:
    operator delete(v8);
    goto LABEL_36;
  }
  do
  {
    v28 = *(_QWORD *)(v8 - 3);
    v8 -= 3;
    v29 = v8[2];
    *(_QWORD *)(v26 - 12) = v28;
    v26 -= 12;
    *((_DWORD *)v26 + 2) = v29;
  }
  while (v8 != v20);
  v8 = *a2;
  *a2 = v26;
  a2[1] = v19;
  a2[2] = v27;
  if (v8)
    goto LABEL_35;
LABEL_36:
  a2[1] = v19;
  v30 = (unint64_t)a2[2];
  if ((unint64_t)v19 < v30)
  {
    v19[2] = 7;
    *(_QWORD *)v19 = 0x100000000;
    v31 = v19 + 3;
    goto LABEL_54;
  }
  v32 = *a2;
  v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (_BYTE *)*a2) >> 2);
  v34 = v33 + 1;
  if (v33 + 1 > 0x1555555555555555)
    abort();
  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v32) >> 2);
  if (2 * v35 > v34)
    v34 = 2 * v35;
  if (v35 >= 0xAAAAAAAAAAAAAAALL)
    v36 = 0x1555555555555555;
  else
    v36 = v34;
  if (v36)
  {
    if (v36 > 0x1555555555555555)
      goto LABEL_578;
    v37 = (char *)operator new(12 * v36);
  }
  else
  {
    v37 = 0;
  }
  v38 = &v37[12 * v33];
  v39 = &v37[12 * v36];
  *((_DWORD *)v38 + 2) = 7;
  *(_QWORD *)v38 = 0x100000000;
  v31 = v38 + 12;
  if (v19 == v32)
  {
    *a2 = v38;
    a2[1] = v31;
    a2[2] = v39;
LABEL_53:
    operator delete(v19);
    goto LABEL_54;
  }
  do
  {
    v40 = *(_QWORD *)(v19 - 3);
    v19 -= 3;
    v41 = v19[2];
    *(_QWORD *)(v38 - 12) = v40;
    v38 -= 12;
    *((_DWORD *)v38 + 2) = v41;
  }
  while (v19 != v32);
  v19 = *a2;
  *a2 = v38;
  a2[1] = v31;
  a2[2] = v39;
  if (v19)
    goto LABEL_53;
LABEL_54:
  a2[1] = v31;
  v42 = (unint64_t)a2[2];
  if ((unint64_t)v31 < v42)
  {
    v31[2] = 10;
    *(_QWORD *)v31 = 0x700000000;
    v43 = v31 + 3;
    goto LABEL_72;
  }
  v44 = *a2;
  v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (_BYTE *)*a2) >> 2);
  v46 = v45 + 1;
  if (v45 + 1 > 0x1555555555555555)
    abort();
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)v44) >> 2);
  if (2 * v47 > v46)
    v46 = 2 * v47;
  if (v47 >= 0xAAAAAAAAAAAAAAALL)
    v48 = 0x1555555555555555;
  else
    v48 = v46;
  if (v48)
  {
    if (v48 > 0x1555555555555555)
      goto LABEL_578;
    v49 = (char *)operator new(12 * v48);
  }
  else
  {
    v49 = 0;
  }
  v50 = &v49[12 * v45];
  v51 = &v49[12 * v48];
  *((_DWORD *)v50 + 2) = 10;
  *(_QWORD *)v50 = 0x700000000;
  v43 = v50 + 12;
  if (v31 == v44)
  {
    *a2 = v50;
    a2[1] = v43;
    a2[2] = v51;
LABEL_71:
    operator delete(v31);
    goto LABEL_72;
  }
  do
  {
    v52 = *(_QWORD *)(v31 - 3);
    v31 -= 3;
    v53 = v31[2];
    *(_QWORD *)(v50 - 12) = v52;
    v50 -= 12;
    *((_DWORD *)v50 + 2) = v53;
  }
  while (v31 != v44);
  v31 = *a2;
  *a2 = v50;
  a2[1] = v43;
  a2[2] = v51;
  if (v31)
    goto LABEL_71;
LABEL_72:
  a2[1] = v43;
  v54 = (unint64_t)a2[2];
  if ((unint64_t)v43 < v54)
  {
    v43[2] = 11;
    *(_QWORD *)v43 = 0xA00000000;
    v55 = v43 + 3;
    goto LABEL_90;
  }
  v56 = *a2;
  v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)*a2) >> 2);
  v58 = v57 + 1;
  if (v57 + 1 > 0x1555555555555555)
    abort();
  v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - (_QWORD)v56) >> 2);
  if (2 * v59 > v58)
    v58 = 2 * v59;
  if (v59 >= 0xAAAAAAAAAAAAAAALL)
    v60 = 0x1555555555555555;
  else
    v60 = v58;
  if (v60)
  {
    if (v60 > 0x1555555555555555)
      goto LABEL_578;
    v61 = (char *)operator new(12 * v60);
  }
  else
  {
    v61 = 0;
  }
  v62 = &v61[12 * v57];
  v63 = &v61[12 * v60];
  *((_DWORD *)v62 + 2) = 11;
  *(_QWORD *)v62 = 0xA00000000;
  v55 = v62 + 12;
  if (v43 == v56)
  {
    *a2 = v62;
    a2[1] = v55;
    a2[2] = v63;
LABEL_89:
    operator delete(v43);
    goto LABEL_90;
  }
  do
  {
    v64 = *(_QWORD *)(v43 - 3);
    v43 -= 3;
    v65 = v43[2];
    *(_QWORD *)(v62 - 12) = v64;
    v62 -= 12;
    *((_DWORD *)v62 + 2) = v65;
  }
  while (v43 != v56);
  v43 = *a2;
  *a2 = v62;
  a2[1] = v55;
  a2[2] = v63;
  if (v43)
    goto LABEL_89;
LABEL_90:
  a2[1] = v55;
  v66 = (unint64_t)a2[2];
  if ((unint64_t)v55 < v66)
  {
    v55[2] = 9;
    *(_QWORD *)v55 = 0x500000001;
    v67 = v55 + 3;
    goto LABEL_108;
  }
  v68 = *a2;
  v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*a2) >> 2);
  v70 = v69 + 1;
  if (v69 + 1 > 0x1555555555555555)
    abort();
  v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)v68) >> 2);
  if (2 * v71 > v70)
    v70 = 2 * v71;
  if (v71 >= 0xAAAAAAAAAAAAAAALL)
    v72 = 0x1555555555555555;
  else
    v72 = v70;
  if (v72)
  {
    if (v72 > 0x1555555555555555)
      goto LABEL_578;
    v73 = (char *)operator new(12 * v72);
  }
  else
  {
    v73 = 0;
  }
  v74 = &v73[12 * v69];
  v75 = &v73[12 * v72];
  *((_DWORD *)v74 + 2) = 9;
  *(_QWORD *)v74 = 0x500000001;
  v67 = v74 + 12;
  if (v55 == v68)
  {
    *a2 = v74;
    a2[1] = v67;
    a2[2] = v75;
LABEL_107:
    operator delete(v55);
    goto LABEL_108;
  }
  do
  {
    v76 = *(_QWORD *)(v55 - 3);
    v55 -= 3;
    v77 = v55[2];
    *(_QWORD *)(v74 - 12) = v76;
    v74 -= 12;
    *((_DWORD *)v74 + 2) = v77;
  }
  while (v55 != v68);
  v55 = *a2;
  *a2 = v74;
  a2[1] = v67;
  a2[2] = v75;
  if (v55)
    goto LABEL_107;
LABEL_108:
  a2[1] = v67;
  v78 = (unint64_t)a2[2];
  if ((unint64_t)v67 < v78)
  {
    v67[2] = 4;
    *(_QWORD *)v67 = 0xB00000005;
    v79 = v67 + 3;
    goto LABEL_126;
  }
  v80 = *a2;
  v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (_BYTE *)*a2) >> 2);
  v82 = v81 + 1;
  if (v81 + 1 > 0x1555555555555555)
    abort();
  v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (_QWORD)v80) >> 2);
  if (2 * v83 > v82)
    v82 = 2 * v83;
  if (v83 >= 0xAAAAAAAAAAAAAAALL)
    v84 = 0x1555555555555555;
  else
    v84 = v82;
  if (v84)
  {
    if (v84 > 0x1555555555555555)
      goto LABEL_578;
    v85 = (char *)operator new(12 * v84);
  }
  else
  {
    v85 = 0;
  }
  v86 = &v85[12 * v81];
  v87 = &v85[12 * v84];
  *((_DWORD *)v86 + 2) = 4;
  *(_QWORD *)v86 = 0xB00000005;
  v79 = v86 + 12;
  if (v67 == v80)
  {
    *a2 = v86;
    a2[1] = v79;
    a2[2] = v87;
LABEL_125:
    operator delete(v67);
    goto LABEL_126;
  }
  do
  {
    v88 = *(_QWORD *)(v67 - 3);
    v67 -= 3;
    v89 = v67[2];
    *(_QWORD *)(v86 - 12) = v88;
    v86 -= 12;
    *((_DWORD *)v86 + 2) = v89;
  }
  while (v67 != v80);
  v67 = *a2;
  *a2 = v86;
  a2[1] = v79;
  a2[2] = v87;
  if (v67)
    goto LABEL_125;
LABEL_126:
  a2[1] = v79;
  v90 = (unint64_t)a2[2];
  if ((unint64_t)v79 < v90)
  {
    v79[2] = 2;
    *(_QWORD *)v79 = 0xA0000000BLL;
    v91 = v79 + 3;
    goto LABEL_144;
  }
  v92 = *a2;
  v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (_BYTE *)*a2) >> 2);
  v94 = v93 + 1;
  if (v93 + 1 > 0x1555555555555555)
    abort();
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 2);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0xAAAAAAAAAAAAAAALL)
    v96 = 0x1555555555555555;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0x1555555555555555)
      goto LABEL_578;
    v97 = (char *)operator new(12 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[12 * v93];
  v99 = &v97[12 * v96];
  *((_DWORD *)v98 + 2) = 2;
  *(_QWORD *)v98 = 0xA0000000BLL;
  v91 = v98 + 12;
  if (v79 == v92)
  {
    *a2 = v98;
    a2[1] = v91;
    a2[2] = v99;
LABEL_143:
    operator delete(v79);
    goto LABEL_144;
  }
  do
  {
    v100 = *(_QWORD *)(v79 - 3);
    v79 -= 3;
    v101 = v79[2];
    *(_QWORD *)(v98 - 12) = v100;
    v98 -= 12;
    *((_DWORD *)v98 + 2) = v101;
  }
  while (v79 != v92);
  v79 = *a2;
  *a2 = v98;
  a2[1] = v91;
  a2[2] = v99;
  if (v79)
    goto LABEL_143;
LABEL_144:
  a2[1] = v91;
  v102 = (unint64_t)a2[2];
  if ((unint64_t)v91 < v102)
  {
    v91[2] = 6;
    *(_QWORD *)v91 = 0x70000000ALL;
    v103 = v91 + 3;
    goto LABEL_162;
  }
  v104 = *a2;
  v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (_BYTE *)*a2) >> 2);
  v106 = v105 + 1;
  if (v105 + 1 > 0x1555555555555555)
    abort();
  v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - (_QWORD)v104) >> 2);
  if (2 * v107 > v106)
    v106 = 2 * v107;
  if (v107 >= 0xAAAAAAAAAAAAAAALL)
    v108 = 0x1555555555555555;
  else
    v108 = v106;
  if (v108)
  {
    if (v108 > 0x1555555555555555)
      goto LABEL_578;
    v109 = (char *)operator new(12 * v108);
  }
  else
  {
    v109 = 0;
  }
  v110 = &v109[12 * v105];
  v111 = &v109[12 * v108];
  *((_DWORD *)v110 + 2) = 6;
  *(_QWORD *)v110 = 0x70000000ALL;
  v103 = v110 + 12;
  if (v91 == v104)
  {
    *a2 = v110;
    a2[1] = v103;
    a2[2] = v111;
LABEL_161:
    operator delete(v91);
    goto LABEL_162;
  }
  do
  {
    v112 = *(_QWORD *)(v91 - 3);
    v91 -= 3;
    v113 = v91[2];
    *(_QWORD *)(v110 - 12) = v112;
    v110 -= 12;
    *((_DWORD *)v110 + 2) = v113;
  }
  while (v91 != v104);
  v91 = *a2;
  *a2 = v110;
  a2[1] = v103;
  a2[2] = v111;
  if (v91)
    goto LABEL_161;
LABEL_162:
  a2[1] = v103;
  v114 = (unint64_t)a2[2];
  if ((unint64_t)v103 < v114)
  {
    v103[2] = 8;
    *(_QWORD *)v103 = 0x100000007;
    v115 = v103 + 3;
    goto LABEL_180;
  }
  v116 = *a2;
  v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (_BYTE *)*a2) >> 2);
  v118 = v117 + 1;
  if (v117 + 1 > 0x1555555555555555)
    abort();
  v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (_QWORD)v116) >> 2);
  if (2 * v119 > v118)
    v118 = 2 * v119;
  if (v119 >= 0xAAAAAAAAAAAAAAALL)
    v120 = 0x1555555555555555;
  else
    v120 = v118;
  if (v120)
  {
    if (v120 > 0x1555555555555555)
      goto LABEL_578;
    v121 = (char *)operator new(12 * v120);
  }
  else
  {
    v121 = 0;
  }
  v122 = &v121[12 * v117];
  v123 = &v121[12 * v120];
  *((_DWORD *)v122 + 2) = 8;
  *(_QWORD *)v122 = 0x100000007;
  v115 = v122 + 12;
  if (v103 == v116)
  {
    *a2 = v122;
    a2[1] = v115;
    a2[2] = v123;
LABEL_179:
    operator delete(v103);
    goto LABEL_180;
  }
  do
  {
    v124 = *(_QWORD *)(v103 - 3);
    v103 -= 3;
    v125 = v103[2];
    *(_QWORD *)(v122 - 12) = v124;
    v122 -= 12;
    *((_DWORD *)v122 + 2) = v125;
  }
  while (v103 != v116);
  v103 = *a2;
  *a2 = v122;
  a2[1] = v115;
  a2[2] = v123;
  if (v103)
    goto LABEL_179;
LABEL_180:
  a2[1] = v115;
  v126 = (unint64_t)a2[2];
  if ((unint64_t)v115 < v126)
  {
    v115[2] = 4;
    *(_QWORD *)v115 = 0x900000003;
    v127 = v115 + 3;
    goto LABEL_198;
  }
  v128 = *a2;
  v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (_BYTE *)*a2) >> 2);
  v130 = v129 + 1;
  if (v129 + 1 > 0x1555555555555555)
    abort();
  v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - (_QWORD)v128) >> 2);
  if (2 * v131 > v130)
    v130 = 2 * v131;
  if (v131 >= 0xAAAAAAAAAAAAAAALL)
    v132 = 0x1555555555555555;
  else
    v132 = v130;
  if (v132)
  {
    if (v132 > 0x1555555555555555)
      goto LABEL_578;
    v133 = (char *)operator new(12 * v132);
  }
  else
  {
    v133 = 0;
  }
  v134 = &v133[12 * v129];
  v135 = &v133[12 * v132];
  *((_DWORD *)v134 + 2) = 4;
  *(_QWORD *)v134 = 0x900000003;
  v127 = v134 + 12;
  if (v115 == v128)
  {
    *a2 = v134;
    a2[1] = v127;
    a2[2] = v135;
LABEL_197:
    operator delete(v115);
    goto LABEL_198;
  }
  do
  {
    v136 = *(_QWORD *)(v115 - 3);
    v115 -= 3;
    v137 = v115[2];
    *(_QWORD *)(v134 - 12) = v136;
    v134 -= 12;
    *((_DWORD *)v134 + 2) = v137;
  }
  while (v115 != v128);
  v115 = *a2;
  *a2 = v134;
  a2[1] = v127;
  a2[2] = v135;
  if (v115)
    goto LABEL_197;
LABEL_198:
  a2[1] = v127;
  v138 = (unint64_t)a2[2];
  if ((unint64_t)v127 < v138)
  {
    v127[2] = 2;
    *(_QWORD *)v127 = 0x400000003;
    v139 = v127 + 3;
    goto LABEL_216;
  }
  v140 = *a2;
  v141 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - (_BYTE *)*a2) >> 2);
  v142 = v141 + 1;
  if (v141 + 1 > 0x1555555555555555)
    abort();
  v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - (_QWORD)v140) >> 2);
  if (2 * v143 > v142)
    v142 = 2 * v143;
  if (v143 >= 0xAAAAAAAAAAAAAAALL)
    v144 = 0x1555555555555555;
  else
    v144 = v142;
  if (v144)
  {
    if (v144 > 0x1555555555555555)
      goto LABEL_578;
    v145 = (char *)operator new(12 * v144);
  }
  else
  {
    v145 = 0;
  }
  v146 = &v145[12 * v141];
  v147 = &v145[12 * v144];
  *((_DWORD *)v146 + 2) = 2;
  *(_QWORD *)v146 = 0x400000003;
  v139 = v146 + 12;
  if (v127 == v140)
  {
    *a2 = v146;
    a2[1] = v139;
    a2[2] = v147;
LABEL_215:
    operator delete(v127);
    goto LABEL_216;
  }
  do
  {
    v148 = *(_QWORD *)(v127 - 3);
    v127 -= 3;
    v149 = v127[2];
    *(_QWORD *)(v146 - 12) = v148;
    v146 -= 12;
    *((_DWORD *)v146 + 2) = v149;
  }
  while (v127 != v140);
  v127 = *a2;
  *a2 = v146;
  a2[1] = v139;
  a2[2] = v147;
  if (v127)
    goto LABEL_215;
LABEL_216:
  a2[1] = v139;
  v150 = (unint64_t)a2[2];
  if ((unint64_t)v139 < v150)
  {
    v139[2] = 6;
    *(_QWORD *)v139 = 0x200000003;
    v151 = v139 + 3;
    goto LABEL_234;
  }
  v152 = *a2;
  v153 = 0xAAAAAAAAAAAAAAABLL * (((char *)v139 - (_BYTE *)*a2) >> 2);
  v154 = v153 + 1;
  if (v153 + 1 > 0x1555555555555555)
    abort();
  v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - (_QWORD)v152) >> 2);
  if (2 * v155 > v154)
    v154 = 2 * v155;
  if (v155 >= 0xAAAAAAAAAAAAAAALL)
    v156 = 0x1555555555555555;
  else
    v156 = v154;
  if (v156)
  {
    if (v156 > 0x1555555555555555)
      goto LABEL_578;
    v157 = (char *)operator new(12 * v156);
  }
  else
  {
    v157 = 0;
  }
  v158 = &v157[12 * v153];
  v159 = &v157[12 * v156];
  *((_DWORD *)v158 + 2) = 6;
  *(_QWORD *)v158 = 0x200000003;
  v151 = v158 + 12;
  if (v139 == v152)
  {
    *a2 = v158;
    a2[1] = v151;
    a2[2] = v159;
LABEL_233:
    operator delete(v139);
    goto LABEL_234;
  }
  do
  {
    v160 = *(_QWORD *)(v139 - 3);
    v139 -= 3;
    v161 = v139[2];
    *(_QWORD *)(v158 - 12) = v160;
    v158 -= 12;
    *((_DWORD *)v158 + 2) = v161;
  }
  while (v139 != v152);
  v139 = *a2;
  *a2 = v158;
  a2[1] = v151;
  a2[2] = v159;
  if (v139)
    goto LABEL_233;
LABEL_234:
  a2[1] = v151;
  v162 = (unint64_t)a2[2];
  if ((unint64_t)v151 < v162)
  {
    v151[2] = 8;
    *(_QWORD *)v151 = 0x600000003;
    v163 = v151 + 3;
    goto LABEL_252;
  }
  v164 = *a2;
  v165 = 0xAAAAAAAAAAAAAAABLL * (((char *)v151 - (_BYTE *)*a2) >> 2);
  v166 = v165 + 1;
  if (v165 + 1 > 0x1555555555555555)
    abort();
  v167 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v162 - (_QWORD)v164) >> 2);
  if (2 * v167 > v166)
    v166 = 2 * v167;
  if (v167 >= 0xAAAAAAAAAAAAAAALL)
    v168 = 0x1555555555555555;
  else
    v168 = v166;
  if (v168)
  {
    if (v168 > 0x1555555555555555)
      goto LABEL_578;
    v169 = (char *)operator new(12 * v168);
  }
  else
  {
    v169 = 0;
  }
  v170 = &v169[12 * v165];
  v171 = &v169[12 * v168];
  *((_DWORD *)v170 + 2) = 8;
  *(_QWORD *)v170 = 0x600000003;
  v163 = v170 + 12;
  if (v151 == v164)
  {
    *a2 = v170;
    a2[1] = v163;
    a2[2] = v171;
LABEL_251:
    operator delete(v151);
    goto LABEL_252;
  }
  do
  {
    v172 = *(_QWORD *)(v151 - 3);
    v151 -= 3;
    v173 = v151[2];
    *(_QWORD *)(v170 - 12) = v172;
    v170 -= 12;
    *((_DWORD *)v170 + 2) = v173;
  }
  while (v151 != v164);
  v151 = *a2;
  *a2 = v170;
  a2[1] = v163;
  a2[2] = v171;
  if (v151)
    goto LABEL_251;
LABEL_252:
  a2[1] = v163;
  v174 = (unint64_t)a2[2];
  if ((unint64_t)v163 < v174)
  {
    v163[2] = 9;
    *(_QWORD *)v163 = 0x800000003;
    v175 = v163 + 3;
    goto LABEL_270;
  }
  v176 = *a2;
  v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v163 - (_BYTE *)*a2) >> 2);
  v178 = v177 + 1;
  if (v177 + 1 > 0x1555555555555555)
    abort();
  v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - (_QWORD)v176) >> 2);
  if (2 * v179 > v178)
    v178 = 2 * v179;
  if (v179 >= 0xAAAAAAAAAAAAAAALL)
    v180 = 0x1555555555555555;
  else
    v180 = v178;
  if (v180)
  {
    if (v180 > 0x1555555555555555)
      goto LABEL_578;
    v181 = (char *)operator new(12 * v180);
  }
  else
  {
    v181 = 0;
  }
  v182 = &v181[12 * v177];
  v183 = &v181[12 * v180];
  *((_DWORD *)v182 + 2) = 9;
  *(_QWORD *)v182 = 0x800000003;
  v175 = v182 + 12;
  if (v163 == v176)
  {
    *a2 = v182;
    a2[1] = v175;
    a2[2] = v183;
LABEL_269:
    operator delete(v163);
    goto LABEL_270;
  }
  do
  {
    v184 = *(_QWORD *)(v163 - 3);
    v163 -= 3;
    v185 = v163[2];
    *(_QWORD *)(v182 - 12) = v184;
    v182 -= 12;
    *((_DWORD *)v182 + 2) = v185;
  }
  while (v163 != v176);
  v163 = *a2;
  *a2 = v182;
  a2[1] = v175;
  a2[2] = v183;
  if (v163)
    goto LABEL_269;
LABEL_270:
  a2[1] = v175;
  v186 = (unint64_t)a2[2];
  if ((unint64_t)v175 < v186)
  {
    v175[2] = 5;
    *(_QWORD *)v175 = 0x900000004;
    v187 = (char *)(v175 + 3);
    goto LABEL_288;
  }
  v188 = *a2;
  v189 = 0xAAAAAAAAAAAAAAABLL * (((char *)v175 - (_BYTE *)*a2) >> 2);
  v190 = v189 + 1;
  if (v189 + 1 > 0x1555555555555555)
    abort();
  v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v188) >> 2);
  if (2 * v191 > v190)
    v190 = 2 * v191;
  if (v191 >= 0xAAAAAAAAAAAAAAALL)
    v192 = 0x1555555555555555;
  else
    v192 = v190;
  if (v192)
  {
    if (v192 > 0x1555555555555555)
      goto LABEL_578;
    v193 = (char *)operator new(12 * v192);
  }
  else
  {
    v193 = 0;
  }
  v194 = &v193[12 * v189];
  v195 = &v193[12 * v192];
  *((_DWORD *)v194 + 2) = 5;
  *(_QWORD *)v194 = 0x900000004;
  v187 = v194 + 12;
  if (v175 == v188)
  {
    *a2 = v194;
    a2[1] = v187;
    a2[2] = v195;
LABEL_287:
    operator delete(v175);
    goto LABEL_288;
  }
  do
  {
    v196 = *(_QWORD *)(v175 - 3);
    v175 -= 3;
    v197 = v175[2];
    *(_QWORD *)(v194 - 12) = v196;
    v194 -= 12;
    *((_DWORD *)v194 + 2) = v197;
  }
  while (v175 != v188);
  v175 = *a2;
  *a2 = v194;
  a2[1] = v187;
  a2[2] = v195;
  if (v175)
    goto LABEL_287;
LABEL_288:
  a2[1] = v187;
  v198 = (unint64_t)a2[2];
  if ((unint64_t)v187 < v198)
  {
    *((_DWORD *)v187 + 2) = 11;
    *(_QWORD *)v187 = 0x400000002;
    v199 = v187 + 12;
    goto LABEL_306;
  }
  v200 = (char *)*a2;
  v201 = 0xAAAAAAAAAAAAAAABLL * ((v187 - (_BYTE *)*a2) >> 2);
  v202 = v201 + 1;
  if (v201 + 1 > 0x1555555555555555)
    abort();
  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198 - (_QWORD)v200) >> 2);
  if (2 * v203 > v202)
    v202 = 2 * v203;
  if (v203 >= 0xAAAAAAAAAAAAAAALL)
    v204 = 0x1555555555555555;
  else
    v204 = v202;
  if (v204)
  {
    if (v204 > 0x1555555555555555)
      goto LABEL_578;
    v205 = (char *)operator new(12 * v204);
  }
  else
  {
    v205 = 0;
  }
  v206 = &v205[12 * v201];
  v207 = &v205[12 * v204];
  *((_DWORD *)v206 + 2) = 11;
  *(_QWORD *)v206 = 0x400000002;
  v199 = v206 + 12;
  if (v187 == v200)
  {
    *a2 = v206;
    a2[1] = v199;
    a2[2] = v207;
LABEL_305:
    operator delete(v187);
    goto LABEL_306;
  }
  do
  {
    v208 = *(_QWORD *)(v187 - 12);
    v187 -= 12;
    v209 = *((_DWORD *)v187 + 2);
    *(_QWORD *)(v206 - 12) = v208;
    v206 -= 12;
    *((_DWORD *)v206 + 2) = v209;
  }
  while (v187 != v200);
  v187 = (char *)*a2;
  *a2 = v206;
  a2[1] = v199;
  a2[2] = v207;
  if (v187)
    goto LABEL_305;
LABEL_306:
  a2[1] = v199;
  v210 = (unint64_t)a2[2];
  if ((unint64_t)v199 < v210)
  {
    *((_DWORD *)v199 + 2) = 10;
    *(_QWORD *)v199 = 0x200000006;
    v211 = v199 + 12;
    goto LABEL_324;
  }
  v212 = (char *)*a2;
  v213 = 0xAAAAAAAAAAAAAAABLL * ((v199 - (_BYTE *)*a2) >> 2);
  v214 = v213 + 1;
  if (v213 + 1 > 0x1555555555555555)
    abort();
  v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210 - (_QWORD)v212) >> 2);
  if (2 * v215 > v214)
    v214 = 2 * v215;
  if (v215 >= 0xAAAAAAAAAAAAAAALL)
    v216 = 0x1555555555555555;
  else
    v216 = v214;
  if (v216)
  {
    if (v216 > 0x1555555555555555)
      goto LABEL_578;
    v217 = (char *)operator new(12 * v216);
  }
  else
  {
    v217 = 0;
  }
  v218 = &v217[12 * v213];
  v219 = &v217[12 * v216];
  *((_DWORD *)v218 + 2) = 10;
  *(_QWORD *)v218 = 0x200000006;
  v211 = v218 + 12;
  if (v199 == v212)
  {
    *a2 = v218;
    a2[1] = v211;
    a2[2] = v219;
LABEL_323:
    operator delete(v199);
    goto LABEL_324;
  }
  do
  {
    v220 = *(_QWORD *)(v199 - 12);
    v199 -= 12;
    v221 = *((_DWORD *)v199 + 2);
    *(_QWORD *)(v218 - 12) = v220;
    v218 -= 12;
    *((_DWORD *)v218 + 2) = v221;
  }
  while (v199 != v212);
  v199 = (char *)*a2;
  *a2 = v218;
  a2[1] = v211;
  a2[2] = v219;
  if (v199)
    goto LABEL_323;
LABEL_324:
  a2[1] = v211;
  v222 = (unint64_t)a2[2];
  if ((unint64_t)v211 < v222)
  {
    *((_DWORD *)v211 + 2) = 7;
    *(_QWORD *)v211 = 0x600000008;
    v223 = v211 + 12;
    goto LABEL_342;
  }
  v224 = (char *)*a2;
  v225 = 0xAAAAAAAAAAAAAAABLL * ((v211 - (_BYTE *)*a2) >> 2);
  v226 = v225 + 1;
  if (v225 + 1 > 0x1555555555555555)
    abort();
  v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - (_QWORD)v224) >> 2);
  if (2 * v227 > v226)
    v226 = 2 * v227;
  if (v227 >= 0xAAAAAAAAAAAAAAALL)
    v228 = 0x1555555555555555;
  else
    v228 = v226;
  if (v228)
  {
    if (v228 > 0x1555555555555555)
      goto LABEL_578;
    v229 = (char *)operator new(12 * v228);
  }
  else
  {
    v229 = 0;
  }
  v230 = &v229[12 * v225];
  v231 = &v229[12 * v228];
  *((_DWORD *)v230 + 2) = 7;
  *(_QWORD *)v230 = 0x600000008;
  v223 = v230 + 12;
  if (v211 == v224)
  {
    *a2 = v230;
    a2[1] = v223;
    a2[2] = v231;
LABEL_341:
    operator delete(v211);
    goto LABEL_342;
  }
  do
  {
    v232 = *(_QWORD *)(v211 - 12);
    v211 -= 12;
    v233 = *((_DWORD *)v211 + 2);
    *(_QWORD *)(v230 - 12) = v232;
    v230 -= 12;
    *((_DWORD *)v230 + 2) = v233;
  }
  while (v211 != v224);
  v211 = (char *)*a2;
  *a2 = v230;
  a2[1] = v223;
  a2[2] = v231;
  if (v211)
    goto LABEL_341;
LABEL_342:
  a2[1] = v223;
  v234 = (unint64_t)a2[2];
  if ((unint64_t)v223 < v234)
  {
    *((_DWORD *)v223 + 2) = 1;
    *(_QWORD *)v223 = 0x800000009;
    v235 = v223 + 12;
    goto LABEL_360;
  }
  v236 = (char *)*a2;
  v237 = 0xAAAAAAAAAAAAAAABLL * ((v223 - (_BYTE *)*a2) >> 2);
  v238 = v237 + 1;
  if (v237 + 1 > 0x1555555555555555)
    abort();
  v239 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234 - (_QWORD)v236) >> 2);
  if (2 * v239 > v238)
    v238 = 2 * v239;
  if (v239 >= 0xAAAAAAAAAAAAAAALL)
    v240 = 0x1555555555555555;
  else
    v240 = v238;
  if (v240)
  {
    if (v240 > 0x1555555555555555)
      goto LABEL_578;
    v241 = (char *)operator new(12 * v240);
  }
  else
  {
    v241 = 0;
  }
  v242 = &v241[12 * v237];
  v243 = &v241[12 * v240];
  *((_DWORD *)v242 + 2) = 1;
  *(_QWORD *)v242 = 0x800000009;
  v235 = v242 + 12;
  if (v223 == v236)
  {
    *a2 = v242;
    a2[1] = v235;
    a2[2] = v243;
LABEL_359:
    operator delete(v223);
    goto LABEL_360;
  }
  do
  {
    v244 = *(_QWORD *)(v223 - 12);
    v223 -= 12;
    v245 = *((_DWORD *)v223 + 2);
    *(_QWORD *)(v242 - 12) = v244;
    v242 -= 12;
    *((_DWORD *)v242 + 2) = v245;
  }
  while (v223 != v236);
  v223 = (char *)*a2;
  *a2 = v242;
  a2[1] = v235;
  a2[2] = v243;
  if (v223)
    goto LABEL_359;
LABEL_360:
  v246 = 0;
  a2[1] = v235;
  v247 = (signed int *)*a2;
  v388 = a2;
  while (2)
  {
    if (v247 == (signed int *)v235)
    {
      v384 = 0;
      v247 = 0;
      v383 = v235;
      v235 = 0;
      if (!v383)
        goto LABEL_361;
LABEL_572:
      a2[1] = v383;
      operator delete(v383);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      goto LABEL_361;
    }
    v390 = v246;
    v248 = 0;
    v249 = 0;
    v395 = 0;
    v393 = (signed int *)v235;
    while (2)
    {
      v250 = v247[1];
      v251 = *v247;
      if (*v247 >= v250)
        v252 = v250;
      else
        v252 = v251;
      if ((int)v251 <= v250)
        v253 = v247[1];
      else
        v253 = *v247;
      v254 = (v252 << 32) + (int)v253;
      v255 = (int8x8_t)v402[1];
      if (v402[1])
      {
        v256 = (uint8x8_t)vcnt_s8((int8x8_t)v402[1]);
        v256.i16[0] = vaddlv_u8(v256);
        if (v256.u32[0] > 1uLL)
        {
          v257 = v254;
          if ((void *)v254 >= v402[1])
            v257 = v254 % (unint64_t)v402[1];
        }
        else
        {
          v257 = v254 & ((unint64_t)v402[1] - 1);
        }
        v258 = (uint64_t **)*((_QWORD *)v402[0] + v257);
        if (v258)
        {
          v259 = *v258;
          if (v259)
          {
            if (v256.u32[0] < 2uLL)
            {
              while (1)
              {
                v261 = v259[1];
                if (v261 == v254)
                {
                  if (v259[2] == v254)
                    goto LABEL_566;
                }
                else if ((v261 & ((uint64_t)v402[1] - 1)) != v257)
                {
                  goto LABEL_392;
                }
                v259 = (uint64_t *)*v259;
                if (!v259)
                  goto LABEL_392;
              }
            }
            do
            {
              v260 = v259[1];
              if (v260 == v254)
              {
                if (v259[2] == v254)
                {
LABEL_566:
                  v397 = *((_DWORD *)v259 + 6);
                  goto LABEL_410;
                }
              }
              else
              {
                if ((void *)v260 >= v402[1])
                  v260 %= (unint64_t)v402[1];
                if (v260 != v257)
                  break;
              }
              v259 = (uint64_t *)*v259;
            }
            while (v259);
          }
        }
      }
LABEL_392:
      v262 = (uint64_t)&(*a1)[3 * v251];
      v263 = (uint64_t)&(*a1)[3 * v250];
      v4.i64[0] = *(_QWORD *)v262;
      v4.i32[2] = *(_DWORD *)(v262 + 8);
      v5.i64[0] = *(_QWORD *)v263;
      v5.i32[2] = *(_DWORD *)(v263 + 8);
      v264 = vaddq_f32(v5, v4);
      v265.i64[0] = 0x3F0000003F000000;
      v265.i64[1] = 0x3F0000003F000000;
      v266 = vmulq_f32(v264, v265);
      v267 = vmulq_f32(v266, v266);
      v268 = vmulq_n_f32(v266, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v267.f32, 1), v267), (float32x4_t)vdupq_laneq_s32((int32x4_t)v267, 2)).f32[0]));
      v269 = v400;
      v271 = v400[1];
      v270 = v400[2];
      if (v271 >= v270)
      {
        v273 = *v400;
        v274 = 0xAAAAAAAAAAAAAAABLL * (v271 - *v400);
        v275 = v274 + 1;
        if (v274 + 1 > 0x1555555555555555)
          abort();
        v276 = 0xAAAAAAAAAAAAAAABLL * (v270 - v273);
        if (2 * v276 > v275)
          v275 = 2 * v276;
        if (v276 >= 0xAAAAAAAAAAAAAAALL)
          v277 = 0x1555555555555555;
        else
          v277 = v275;
        if (v277)
        {
          if (v277 > 0x1555555555555555)
            goto LABEL_578;
          v396 = v268;
          v278 = (char *)operator new(12 * v277);
          v268 = v396;
        }
        else
        {
          v278 = 0;
        }
        v279 = &v278[12 * v274];
        *(_QWORD *)v279 = v268.i64[0];
        *((_DWORD *)v279 + 2) = v268.i32[2];
        v280 = v279;
        if (v271 != v273)
        {
          do
          {
            v281 = *(_QWORD *)(v271 - 3);
            v271 -= 3;
            v282 = *((_DWORD *)v271 + 2);
            *(_QWORD *)(v280 - 12) = v281;
            v280 -= 12;
            *((_DWORD *)v280 + 2) = v282;
          }
          while (v271 != v273);
          v271 = *v269;
        }
        v272 = (float *)(v279 + 12);
        *v269 = (float *)v280;
        v269[1] = (float *)(v279 + 12);
        v269[2] = (float *)&v278[12 * v277];
        if (v271)
          operator delete(v271);
      }
      else
      {
        v271[2] = v268.f32[2];
        *(_QWORD *)v271 = v268.i64[0];
        v272 = v271 + 3;
      }
      v269[1] = v272;
      v283 = (*v401)++;
      v397 = v283;
      std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((float *)v402, v254, v254, v283);
      v250 = v247[1];
      v255 = (int8x8_t)v402[1];
LABEL_410:
      v284 = v247[2];
      if (v250 >= v284)
        v285 = v284;
      else
        v285 = v250;
      if (v250 <= v284)
        v286 = v247[2];
      else
        v286 = v250;
      v287 = v285 << 32;
      v288 = v287 + v286;
      if (v255)
      {
        v289 = (uint8x8_t)vcnt_s8(v255);
        v289.i16[0] = vaddlv_u8(v289);
        if (v289.u32[0] > 1uLL)
        {
          v290 = v287 + v286;
          if (v288 >= *(_QWORD *)&v255)
            v290 = v288 % *(_QWORD *)&v255;
        }
        else
        {
          v290 = v288 & (*(_QWORD *)&v255 - 1);
        }
        v291 = (uint64_t **)*((_QWORD *)v402[0] + v290);
        if (v291)
        {
          v292 = *v291;
          if (v292)
          {
            if (v289.u32[0] < 2uLL)
            {
              while (1)
              {
                v294 = v292[1];
                if (v294 == v288)
                {
                  if (v292[2] == v288)
                    goto LABEL_567;
                }
                else if ((v294 & (*(_QWORD *)&v255 - 1)) != v290)
                {
                  goto LABEL_436;
                }
                v292 = (uint64_t *)*v292;
                if (!v292)
                  goto LABEL_436;
              }
            }
            do
            {
              v293 = v292[1];
              if (v293 == v288)
              {
                if (v292[2] == v288)
                {
LABEL_567:
                  v316 = *((_DWORD *)v292 + 6);
                  goto LABEL_454;
                }
              }
              else
              {
                if (v293 >= *(_QWORD *)&v255)
                  v293 %= *(_QWORD *)&v255;
                if (v293 != v290)
                  break;
              }
              v292 = (uint64_t *)*v292;
            }
            while (v292);
          }
        }
      }
LABEL_436:
      v295 = (uint64_t)&(*a1)[3 * v250];
      v296 = (uint64_t)&(*a1)[3 * v284];
      v4.i64[0] = *(_QWORD *)v295;
      v4.i32[2] = *(_DWORD *)(v295 + 8);
      v5.i64[0] = *(_QWORD *)v296;
      v5.i32[2] = *(_DWORD *)(v296 + 8);
      v297 = vaddq_f32(v5, v4);
      v298.i64[0] = 0x3F0000003F000000;
      v298.i64[1] = 0x3F0000003F000000;
      v299 = vmulq_f32(v297, v298);
      v300 = vmulq_f32(v299, v299);
      v301 = vmulq_n_f32(v299, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v300.f32, 1), v300), (float32x4_t)vdupq_laneq_s32((int32x4_t)v300, 2)).f32[0]));
      v302 = v400;
      v304 = v400[1];
      v303 = v400[2];
      if (v304 >= v303)
      {
        v306 = *v400;
        v307 = 0xAAAAAAAAAAAAAAABLL * (v304 - *v400);
        v308 = v307 + 1;
        if (v307 + 1 > 0x1555555555555555)
          abort();
        v309 = 0xAAAAAAAAAAAAAAABLL * (v303 - v306);
        if (2 * v309 > v308)
          v308 = 2 * v309;
        if (v309 >= 0xAAAAAAAAAAAAAAALL)
          v310 = 0x1555555555555555;
        else
          v310 = v308;
        if (v310)
        {
          if (v310 > 0x1555555555555555)
            goto LABEL_578;
          v391 = v301;
          v311 = (char *)operator new(12 * v310);
          v301 = v391;
        }
        else
        {
          v311 = 0;
        }
        v312 = &v311[12 * v307];
        *(_QWORD *)v312 = v301.i64[0];
        *((_DWORD *)v312 + 2) = v301.i32[2];
        v313 = v312;
        if (v304 != v306)
        {
          do
          {
            v314 = *(_QWORD *)(v304 - 3);
            v304 -= 3;
            v315 = *((_DWORD *)v304 + 2);
            *(_QWORD *)(v313 - 12) = v314;
            v313 -= 12;
            *((_DWORD *)v313 + 2) = v315;
          }
          while (v304 != v306);
          v304 = *v302;
        }
        v305 = (float *)(v312 + 12);
        *v302 = (float *)v313;
        v302[1] = (float *)(v312 + 12);
        v302[2] = (float *)&v311[12 * v310];
        if (v304)
          operator delete(v304);
      }
      else
      {
        v304[2] = v301.f32[2];
        *(_QWORD *)v304 = v301.i64[0];
        v305 = v304 + 3;
      }
      v302[1] = v305;
      v316 = (*v401)++;
      std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((float *)v402, v288, v288, v316);
      v284 = v247[2];
      v255 = (int8x8_t)v402[1];
LABEL_454:
      v317 = *v247;
      if (v284 >= *v247)
        v318 = v317;
      else
        v318 = v284;
      if (v284 <= (int)v317)
        v319 = *v247;
      else
        v319 = v284;
      v320 = v318 << 32;
      v321 = v320 + (int)v319;
      if (!*(_QWORD *)&v255)
        goto LABEL_480;
      v322 = (uint8x8_t)vcnt_s8(v255);
      v322.i16[0] = vaddlv_u8(v322);
      if (v322.u32[0] > 1uLL)
      {
        v323 = v320 + (int)v319;
        if (v321 >= *(_QWORD *)&v255)
          v323 = v321 % *(_QWORD *)&v255;
      }
      else
      {
        v323 = v321 & (*(_QWORD *)&v255 - 1);
      }
      v324 = (uint64_t **)*((_QWORD *)v402[0] + v323);
      if (!v324 || (v325 = *v324) == 0)
      {
LABEL_480:
        v329 = (uint64_t)&(*a1)[3 * v284];
        v330 = (uint64_t)&(*a1)[3 * v317];
        v4.i64[0] = *(_QWORD *)v329;
        v4.i32[2] = *(_DWORD *)(v329 + 8);
        v5.i64[0] = *(_QWORD *)v330;
        v5.i32[2] = *(_DWORD *)(v330 + 8);
        v331 = vaddq_f32(v5, v4);
        v332.i64[0] = 0x3F0000003F000000;
        v332.i64[1] = 0x3F0000003F000000;
        v333 = vmulq_f32(v331, v332);
        v334 = vmulq_f32(v333, v333);
        v335 = vmulq_n_f32(v333, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v334.f32, 1), v334), (float32x4_t)vdupq_laneq_s32((int32x4_t)v334, 2)).f32[0]));
        v336 = v400;
        v338 = v400[1];
        v337 = v400[2];
        if (v338 >= v337)
        {
          v340 = *v400;
          v341 = 0xAAAAAAAAAAAAAAABLL * (v338 - *v400);
          v342 = v341 + 1;
          if (v341 + 1 > 0x1555555555555555)
            abort();
          v343 = 0xAAAAAAAAAAAAAAABLL * (v337 - v340);
          if (2 * v343 > v342)
            v342 = 2 * v343;
          if (v343 >= 0xAAAAAAAAAAAAAAALL)
            v344 = 0x1555555555555555;
          else
            v344 = v342;
          if (v344)
          {
            if (v344 > 0x1555555555555555)
              goto LABEL_578;
            v392 = v335;
            v345 = (char *)operator new(12 * v344);
            v335 = v392;
          }
          else
          {
            v345 = 0;
          }
          v346 = &v345[12 * v341];
          *(_QWORD *)v346 = v335.i64[0];
          *((_DWORD *)v346 + 2) = v335.i32[2];
          v347 = v346;
          if (v338 != v340)
          {
            do
            {
              v348 = *(_QWORD *)(v338 - 3);
              v338 -= 3;
              v349 = *((_DWORD *)v338 + 2);
              *(_QWORD *)(v347 - 12) = v348;
              v347 -= 12;
              *((_DWORD *)v347 + 2) = v349;
            }
            while (v338 != v340);
            v338 = *v336;
          }
          v350 = (float *)&v345[12 * v344];
          v339 = (float *)(v346 + 12);
          *v336 = (float *)v347;
          v336[1] = (float *)(v346 + 12);
          v336[2] = v350;
          if (v338)
            operator delete(v338);
        }
        else
        {
          v338[2] = v335.f32[2];
          *(_QWORD *)v338 = v335.i64[0];
          v339 = v338 + 3;
        }
        v336[1] = v339;
        v351 = (*v401)++;
        std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((float *)v402, v321, v321, v351);
        v317 = *v247;
        goto LABEL_498;
      }
      if (v322.u32[0] < 2uLL)
      {
        v326 = *(_QWORD *)&v255 - 1;
        while (1)
        {
          v328 = v325[1];
          if (v328 == v321)
          {
            if (v325[2] == v321)
              goto LABEL_568;
          }
          else if ((v328 & v326) != v323)
          {
            goto LABEL_480;
          }
          v325 = (uint64_t *)*v325;
          if (!v325)
            goto LABEL_480;
        }
      }
      while (1)
      {
        v327 = v325[1];
        if (v327 == v321)
          break;
        if (v327 >= *(_QWORD *)&v255)
          v327 %= *(_QWORD *)&v255;
        if (v327 != v323)
          goto LABEL_480;
LABEL_470:
        v325 = (uint64_t *)*v325;
        if (!v325)
          goto LABEL_480;
      }
      if (v325[2] != v321)
        goto LABEL_470;
LABEL_568:
      v351 = *((_DWORD *)v325 + 6);
LABEL_498:
      if (v249 < v395)
      {
        *(_DWORD *)v249 = v317;
        *((_DWORD *)v249 + 1) = v397;
        v352 = v249 + 12;
        *((_DWORD *)v249 + 2) = v351;
        v353 = (unint64_t)v395;
        goto LABEL_516;
      }
      v354 = 0xAAAAAAAAAAAAAAABLL * ((v249 - v248) >> 2) + 1;
      if (v354 > 0x1555555555555555)
        abort();
      if (0x5555555555555556 * ((v395 - v248) >> 2) > v354)
        v354 = 0x5555555555555556 * ((v395 - v248) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v395 - v248) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v355 = 0x1555555555555555;
      else
        v355 = v354;
      if (v355)
      {
        if (v355 <= 0x1555555555555555)
        {
          v356 = (char *)operator new(12 * v355);
          goto LABEL_510;
        }
LABEL_578:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v356 = 0;
LABEL_510:
      v357 = &v356[4 * ((v249 - v248) >> 2)];
      *(_DWORD *)v357 = v317;
      *((_DWORD *)v357 + 1) = v397;
      *((_DWORD *)v357 + 2) = v351;
      v358 = v357;
      while (v249 != v248)
      {
        v359 = *(_QWORD *)(v249 - 12);
        v249 -= 12;
        v360 = *((_DWORD *)v249 + 2);
        *(_QWORD *)(v358 - 12) = v359;
        v358 -= 12;
        *((_DWORD *)v358 + 2) = v360;
      }
      v353 = (unint64_t)&v356[12 * v355];
      v352 = v357 + 12;
      if (v248)
        operator delete(v248);
      v248 = v358;
LABEL_516:
      v361 = v247[1];
      if ((unint64_t)v352 >= v353)
      {
        v363 = 0xAAAAAAAAAAAAAAABLL * ((v352 - v248) >> 2) + 1;
        if (v363 > 0x1555555555555555)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v353 - (_QWORD)v248) >> 2) > v363)
          v363 = 0x5555555555555556 * ((uint64_t)(v353 - (_QWORD)v248) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353 - (_QWORD)v248) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v364 = 0x1555555555555555;
        else
          v364 = v363;
        if (v364)
        {
          if (v364 > 0x1555555555555555)
            goto LABEL_578;
          v365 = (char *)operator new(12 * v364);
        }
        else
        {
          v365 = 0;
        }
        v366 = &v365[4 * ((v352 - v248) >> 2)];
        v353 = (unint64_t)&v365[12 * v364];
        *(_DWORD *)v366 = v361;
        *((_DWORD *)v366 + 1) = v316;
        *((_DWORD *)v366 + 2) = v397;
        v362 = v366 + 12;
        if (v352 == v248)
          goto LABEL_531;
        do
        {
          v367 = *(_QWORD *)(v352 - 12);
          v352 -= 12;
          v368 = *((_DWORD *)v352 + 2);
          *(_QWORD *)(v366 - 12) = v367;
          v366 -= 12;
          *((_DWORD *)v366 + 2) = v368;
        }
        while (v352 != v248);
        if (v248)
LABEL_531:
          operator delete(v248);
        v248 = v366;
      }
      else
      {
        *(_DWORD *)v352 = v361;
        *((_DWORD *)v352 + 1) = v316;
        v362 = v352 + 12;
        *((_DWORD *)v352 + 2) = v397;
      }
      v369 = v247[2];
      if ((unint64_t)v362 >= v353)
      {
        v371 = 0xAAAAAAAAAAAAAAABLL * ((v362 - v248) >> 2) + 1;
        if (v371 > 0x1555555555555555)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v353 - (_QWORD)v248) >> 2) > v371)
          v371 = 0x5555555555555556 * ((uint64_t)(v353 - (_QWORD)v248) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353 - (_QWORD)v248) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v372 = 0x1555555555555555;
        else
          v372 = v371;
        if (v372)
        {
          if (v372 > 0x1555555555555555)
            goto LABEL_578;
          v373 = (char *)operator new(12 * v372);
        }
        else
        {
          v373 = 0;
        }
        v374 = &v373[4 * ((v362 - v248) >> 2)];
        v353 = (unint64_t)&v373[12 * v372];
        *(_DWORD *)v374 = v369;
        *((_DWORD *)v374 + 1) = v351;
        *((_DWORD *)v374 + 2) = v316;
        v370 = (int *)(v374 + 12);
        if (v362 == v248)
          goto LABEL_549;
        do
        {
          v375 = *(_QWORD *)(v362 - 12);
          v362 -= 12;
          v376 = *((_DWORD *)v362 + 2);
          *(_QWORD *)(v374 - 12) = v375;
          v374 -= 12;
          *((_DWORD *)v374 + 2) = v376;
        }
        while (v362 != v248);
        if (v248)
LABEL_549:
          operator delete(v248);
        v248 = v374;
        if ((unint64_t)v370 < v353)
          goto LABEL_364;
LABEL_551:
        v377 = 0xAAAAAAAAAAAAAAABLL * (((char *)v370 - v248) >> 2) + 1;
        if (v377 > 0x1555555555555555)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v353 - (_QWORD)v248) >> 2) > v377)
          v377 = 0x5555555555555556 * ((uint64_t)(v353 - (_QWORD)v248) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353 - (_QWORD)v248) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v378 = 0x1555555555555555;
        else
          v378 = v377;
        if (v378)
        {
          if (v378 > 0x1555555555555555)
            goto LABEL_578;
          v379 = (char *)operator new(12 * v378);
        }
        else
        {
          v379 = 0;
        }
        v380 = (int *)&v379[4 * (((char *)v370 - v248) >> 2)];
        v395 = &v379[12 * v378];
        *v380 = v397;
        v380[1] = v316;
        v380[2] = v351;
        v249 = (char *)(v380 + 3);
        if (v370 == (int *)v248)
          goto LABEL_564;
        do
        {
          v381 = *(_QWORD *)(v370 - 3);
          v370 -= 3;
          v382 = v370[2];
          *(_QWORD *)(v380 - 3) = v381;
          v380 -= 3;
          v380[2] = v382;
        }
        while (v370 != (int *)v248);
        if (v248)
LABEL_564:
          operator delete(v248);
        v248 = (char *)v380;
      }
      else
      {
        *(_DWORD *)v362 = v369;
        *((_DWORD *)v362 + 1) = v351;
        v370 = (int *)(v362 + 12);
        *((_DWORD *)v362 + 2) = v316;
        if ((unint64_t)(v362 + 12) >= v353)
          goto LABEL_551;
LABEL_364:
        v395 = (char *)v353;
        *v370 = v397;
        v370[1] = v316;
        v249 = (char *)(v370 + 3);
        v370[2] = v351;
      }
      v247 += 3;
      if (v247 != v393)
        continue;
      break;
    }
    a2 = v388;
    v383 = *v388;
    v235 = v249;
    v247 = (signed int *)v248;
    v246 = v390;
    v384 = v395;
    if (*v388)
      goto LABEL_572;
LABEL_361:
    *a2 = v247;
    a2[1] = v235;
    a2[2] = v384;
    if (++v246 != a3)
      continue;
    break;
  }
  v385 = __p[0];
  if (__p[0])
  {
    do
    {
      v386 = (_QWORD *)*v385;
      operator delete(v385);
      v385 = v386;
    }
    while (v386);
  }
  v387 = v402[0];
  v402[0] = 0;
  if (v387)
    operator delete(v387);
}

void sub_19F5AEFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(float ***a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float **v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  uint64_t v20;
  int v21;

  v3 = a2[1];
  v4 = a2[2];
  v5 = 1.0 / sqrtf((float)((float)(*a2 * *a2) + (float)(v3 * v3)) + (float)(v4 * v4));
  v6 = v5 * *a2;
  v7 = v5 * v3;
  v8 = v5 * v4;
  v9 = *a1;
  v11 = (*a1)[1];
  v10 = (unint64_t)(*a1)[2];
  if ((unint64_t)v11 >= v10)
  {
    v13 = *v9;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v11 - *v9);
    v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555)
      abort();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v13) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = (char *)operator new(12 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (float *)&v18[12 * v14];
    *v19 = v6;
    v19[1] = v7;
    v19[2] = v8;
    v12 = v19 + 3;
    if (v11 != v13)
    {
      do
      {
        v20 = *(_QWORD *)(v11 - 3);
        v11 -= 3;
        v21 = *((_DWORD *)v11 + 2);
        *(_QWORD *)(v19 - 3) = v20;
        v19 -= 3;
        *((_DWORD *)v19 + 2) = v21;
      }
      while (v11 != v13);
      v11 = *v9;
    }
    *v9 = v19;
    v9[1] = v12;
    v9[2] = (float *)&v18[12 * v17];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v11 = v6;
    v11[1] = v7;
    v12 = v11 + 3;
    v11[2] = v8;
  }
  v9[1] = v12;
  ++*(_DWORD *)a1[1];
}

void std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>(float *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;

  v7 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = a3;
  *((_DWORD *)v15 + 6) = a4;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
    goto LABEL_72;
  }
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *((_QWORD *)a1 + 1);
  }
  if (prime > v9)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_59;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
LABEL_59:
      v9 = prime;
      goto LABEL_60;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_59;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
          goto LABEL_64;
        }
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
      }
      v38 = v27;
LABEL_64:
      v25 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_59;
    }
  }
  if (prime >= v9)
    goto LABEL_60;
  v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
  {
    v33 = std::__next_prime(v33);
  }
  else
  {
    v35 = 1 << -(char)__clz(v33 - 1);
    if (v33 >= 2)
      v33 = v35;
  }
  if (prime <= v33)
    prime = v33;
  if (prime < v9)
  {
    if (!prime)
    {
      v42 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v42)
        operator delete(v42);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v9 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v7)
      v7 %= v9;
  }
  else
  {
    v7 &= v9 - 1;
  }
LABEL_72:
  v39 = *(_QWORD **)a1;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v40)
  {
    *v15 = *v40;
LABEL_80:
    *v40 = v15;
    goto LABEL_81;
  }
  *v15 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v15;
  v39[v7] = a1 + 4;
  if (*v15)
  {
    v41 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9)
        v41 %= v9;
    }
    else
    {
      v41 &= v9 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F5AF6D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::NavigationMapEngineMode::~NavigationMapEngineMode(md::NavigationMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::NavigationMapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  md::MapEngineMode::applyMapDataTypeSettings(a1, a2, a3);
  v5 = *(uint64_t **)(a2 + 1128);
  v6 = *v5;
  v7 = v5[1];
  if (v6 != v7)
  {
    while (*(_BYTE *)v6 != 25)
    {
      v6 += 16;
      if (v6 == v7)
        return;
    }
  }
  if (v6 != v7)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 6u);
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x1Au);
    }
  }
}

void md::NavigationMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int8x8_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  md::StandardMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v5 = *(int8x8_t **)(a2 + 1120);
  v6 = v5[2];
  if (!*(_QWORD *)&v6)
    return;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v6 <= 0x2FED70A4459DFCA1uLL)
      v9 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & 0x2FED70A4459DFCA1;
  }
  v10 = *(_QWORD **)(*(_QWORD *)&v5[1] + 8 * v9);
  if (!v10)
    goto LABEL_26;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_26;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0x2FED70A4459DFCA1)
      {
        if (v11[2] == 0x2FED70A4459DFCA1)
          goto LABEL_22;
      }
      else if ((v13 & (*(_QWORD *)&v6 - 1)) != v9)
      {
        goto LABEL_24;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == 0x2FED70A4459DFCA1)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v9)
      goto LABEL_24;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_24;
  }
  if (v11[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
LABEL_22:
  v14 = v11[5];
  if (v14)
  {
    md::StyleLogic::setMapMode(v14, 3, 0.0);
    v5 = *(int8x8_t **)(a2 + 1120);
    v6 = v5[2];
  }
LABEL_24:
  if (!*(_QWORD *)&v6)
    return;
  v15 = (uint8x8_t)vcnt_s8(v6);
  v15.i16[0] = vaddlv_u8(v15);
  v8 = v15.u32[0];
LABEL_26:
  if (v8 > 1)
  {
    v16 = 0xDAD5CEE0DC5FF509;
    if (*(_QWORD *)&v6 <= 0xDAD5CEE0DC5FF509)
      v16 = 0xDAD5CEE0DC5FF509 % *(_QWORD *)&v6;
  }
  else
  {
    v16 = (*(_QWORD *)&v6 - 1) & 0xDAD5CEE0DC5FF509;
  }
  v17 = *(_QWORD **)(*(_QWORD *)&v5[1] + 8 * v16);
  if (v17)
  {
    v18 = (_QWORD *)*v17;
    if (v18)
    {
      if (v8 < 2)
      {
        v19 = *(_QWORD *)&v6 - 1;
        while (1)
        {
          v21 = v18[1];
          if (v21 == 0xDAD5CEE0DC5FF509)
          {
            if (v18[2] == 0xDAD5CEE0DC5FF509)
              goto LABEL_46;
          }
          else if ((v21 & v19) != v16)
          {
            return;
          }
          v18 = (_QWORD *)*v18;
          if (!v18)
            return;
        }
      }
      do
      {
        v20 = v18[1];
        if (v20 == 0xDAD5CEE0DC5FF509)
        {
          if (v18[2] == 0xDAD5CEE0DC5FF509)
          {
LABEL_46:
            v22 = v18[5];
            if (v22)
              *(_BYTE *)(v22 + 168) = 1;
            return;
          }
        }
        else
        {
          if (v20 >= *(_QWORD *)&v6)
            v20 %= *(_QWORD *)&v6;
          if (v20 != v16)
            return;
        }
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
  }
}

void md::NavigationMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (!*(_QWORD *)&v3)
    return;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v3 <= 0x2FED70A4459DFCA1uLL)
      v7 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  v8 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v7);
  if (!v8)
    goto LABEL_26;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x2FED70A4459DFCA1)
      {
        if (v9[2] == 0x2FED70A4459DFCA1)
          goto LABEL_22;
      }
      else if ((v11 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x2FED70A4459DFCA1)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
LABEL_22:
  v12 = v9[5];
  if (v12)
  {
    md::StyleLogic::setMapMode(v12, 0, 0.0);
    v2 = *(int8x8_t **)(a2 + 1120);
    v3 = v2[2];
  }
LABEL_24:
  if (!*(_QWORD *)&v3)
    return;
  v13 = (uint8x8_t)vcnt_s8(v3);
  v13.i16[0] = vaddlv_u8(v13);
  v6 = v13.u32[0];
LABEL_26:
  if (v6 > 1)
  {
    v14 = 0xDAD5CEE0DC5FF509;
    if (*(_QWORD *)&v3 <= 0xDAD5CEE0DC5FF509)
      v14 = 0xDAD5CEE0DC5FF509 % *(_QWORD *)&v3;
  }
  else
  {
    v14 = (*(_QWORD *)&v3 - 1) & 0xDAD5CEE0DC5FF509;
  }
  v15 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v14);
  if (v15)
  {
    v16 = (_QWORD *)*v15;
    if (v16)
    {
      if (v6 < 2)
      {
        v17 = *(_QWORD *)&v3 - 1;
        while (1)
        {
          v19 = v16[1];
          if (v19 == 0xDAD5CEE0DC5FF509)
          {
            if (v16[2] == 0xDAD5CEE0DC5FF509)
              goto LABEL_46;
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
      }
      do
      {
        v18 = v16[1];
        if (v18 == 0xDAD5CEE0DC5FF509)
        {
          if (v16[2] == 0xDAD5CEE0DC5FF509)
          {
LABEL_46:
            v20 = v16[5];
            if (v20)
              *(_BYTE *)(v20 + 168) = 0;
            return;
          }
        }
        else
        {
          if (v18 >= *(_QWORD *)&v3)
            v18 %= *(_QWORD *)&v3;
          if (v18 != v14)
            return;
        }
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
}

md::NavigationMapEngineMode *md::NavigationMapEngineMode::NavigationMapEngineMode(md::NavigationMapEngineMode *this, int a2)
{
  char IsEnabled_VKMLayout_Navigation;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  _WORD *v12;
  uint64_t v13;
  _WORD v15[2];

  IsEnabled_VKMLayout_Navigation = MapsFeature_IsEnabled_VKMLayout_Navigation();
  v5 = (_QWORD *)md::StandardMapEngineMode::StandardMapEngineMode((uint64_t)this, 5, a2, IsEnabled_VKMLayout_Navigation);
  *v5 = &off_1E429F188;
  v15[0] = 13;
  v15[1] = a2;
  v6 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(v5 + 10), 0xDu, v15);
  if (a2)
    v7 = 65537;
  else
    v7 = 1;
  *(_DWORD *)((char *)v6 + 18) = v7;
  if (a2)
  {
    v9 = (_QWORD *)((char *)this + 128);
    v8 = *((_QWORD *)this + 16);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v10 = (_QWORD *)v8;
          v11 = *(unsigned __int16 *)(v8 + 26);
          if (v11 < 9)
            break;
          v8 = *v10;
          v9 = v10;
          if (!*v10)
            goto LABEL_12;
        }
        if (v11 == 8)
          break;
        v8 = v10[1];
        if (!v8)
        {
          v9 = v10 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
      v10 = (_QWORD *)((char *)this + 128);
LABEL_12:
      v12 = operator new(0x20uLL);
      v12[13] = 8;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v9 = v12;
      v13 = **((_QWORD **)this + 15);
      if (v13)
      {
        *((_QWORD *)this + 15) = v13;
        v12 = (_WORD *)*v9;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 16), (uint64_t *)v12);
      ++*((_QWORD *)this + 17);
    }
  }
  return this;
}

void sub_19F5AFD10(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  *(_QWORD *)v1 = &off_1E42A1BF8;
  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void altitude::GeoResourceLoader::~GeoResourceLoader(altitude::GeoResourceLoader *this)
{
  *(_QWORD *)this = off_1E42C3330;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::GeoResourceLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C3330;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::GeoResourceLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  int v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != a1 + 72)
  {
    do
    {
      v6 = *(_QWORD **)(v4 + 8);
      v7 = (_QWORD *)v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = *(_QWORD *)(v4 + 64);
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), v4);
      }
      v4 = (uint64_t)v8;
    }
    while (v8 != (_QWORD *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F5AFF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 64);
  if (v4 != (_QWORD *)(a1 + 72))
  {
    while (v4[8] != a2)
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (_QWORD *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), (uint64_t)v4);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F5AFFB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

std::string *altitude::GeoResourceLoader::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string **a3@<X8>)
{
  std::string *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  int v10;
  std::string *result;

  v6 = (std::string *)operator new();
  v7 = karo::Job::Job((uint64_t)v6, *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v7 = off_1E42C2C58;
  v8 = (std::string *)(v7 + 192);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v10 = *(char *)(a2 + 23);
    v6->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E42C53E8;
    v9 = v6 + 9;
    if (v10 < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      goto LABEL_5;
    }
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v6->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E42C53E8;
    v9 = v6 + 9;
  }
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
LABEL_5:
  v6[10].__r_.__value_.__r.__words[0] = 0;
  *a3 = v6;
  result = (std::string *)operator new();
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42E8A28;
  result->__r_.__value_.__l.__size_ = 0;
  result->__r_.__value_.__r.__words[2] = 0;
  result[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  a3[1] = result;
  return result;
}

void sub_19F5B0170(_Unwind_Exception *a1)
{
  void **v1;

  karo::AsyncFileLoader::LoadJob::~LoadJob(v1);
  MEMORY[0x1A1AF4E00]();
  _Unwind_Resume(a1);
}

void sub_19F5B0198(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 32);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 36);
      v12 = *(_DWORD *)(v8 + 40);
      v13 = *(_BYTE *)(v8 + 44);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F5B0340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F5B04A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  karo::Job *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  pthread_mutex_t **v21;
  pthread_mutex_t *v22;

  v6 = (pthread_mutex_t **)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v9 = *(_QWORD **)(a1 + 72);
  v7 = (_QWORD *)(a1 + 72);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100]((uint64_t)(v8 + 4), a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    v13 = 0;
    v14 = 0;
    goto LABEL_9;
  }
  v18 = (karo::Job *)v10[8];
  v13 = (std::__shared_weak_count *)v10[9];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(*v6);
  if (v18)
  {
    karo::Job::waitToFinish(v18, a3);
    v22 = (pthread_mutex_t *)*((_QWORD *)v18 + 19);
    v21 = (pthread_mutex_t **)((char *)v18 + 152);
    pthread_mutex_lock(v22);
    v14 = (_BYTE)v21[1] & 1;
    v6 = v21;
LABEL_9:
    pthread_mutex_unlock(*v6);
    if (!v13)
      return v14;
    goto LABEL_10;
  }
  v14 = 0;
  if (!v13)
    return v14;
LABEL_10:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v14;
}

void sub_19F5B05FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD *)(a1 + 72);
  v9 = *(_QWORD **)(a1 + 72);
  if (!v9)
    goto LABEL_8;
  v10 = (_QWORD *)(a1 + 72);
  do
  {
    v11 = std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100]((uint64_t)(v9 + 4), a2);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v36, a1, a2, a3);
    v35 = v36;
    *(_OWORD *)a4 = v36;
    v13 = (char *)*v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v14 = v13;
          v15 = (uint64_t)(v13 + 32);
          if (!std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v13 + 32)))
            break;
          v13 = (char *)*v14;
          v8 = v14;
          if (!*v14)
            goto LABEL_20;
        }
        if (!std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](v15, a2))
          break;
        v8 = v14 + 1;
        v13 = (char *)v14[1];
        if (!v13)
          goto LABEL_20;
      }
      v20 = (char *)*v8;
      if (*v8)
        goto LABEL_26;
    }
    else
    {
      v14 = v8;
    }
LABEL_20:
    v20 = (char *)operator new(0x50uLL);
    v21 = (std::string *)(v20 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v20 + 6) = *(_QWORD *)(a2 + 16);
    }
    v20[56] = *(_BYTE *)(a2 + 24);
    *((_QWORD *)v20 + 8) = 0;
    *((_QWORD *)v20 + 9) = 0;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v14;
    *v8 = v20;
    v22 = **(_QWORD **)(a1 + 64);
    v23 = (uint64_t *)v20;
    if (v22)
    {
      *(_QWORD *)(a1 + 64) = v22;
      v23 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v23);
    ++*(_QWORD *)(a1 + 80);
    v35 = *(_OWORD *)a4;
LABEL_26:
    if (*((_QWORD *)&v35 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)v20 + 9);
    *((_OWORD *)v20 + 4) = v35;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = *(_QWORD *)(a1 + 48);
    if (v29)
    {
      v30 = *a4;
      v31 = (std::__shared_weak_count *)a4[1];
      *(_QWORD *)&v36 = v30;
      *((_QWORD *)&v36 + 1) = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        karo::JobManager::queueJob(v29, &v36);
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      else
      {
        karo::JobManager::queueJob(v29, &v36);
      }
    }
    return;
  }
  v17 = v10[8];
  v16 = v10[9];
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a4 = v17;
  a4[1] = v16;
}

void sub_19F5B08AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void altitude::GeoResourceLoader::requestFile(pthread_mutex_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  std::string v19;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  pthread_mutex_lock(a1[5]);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v19 = __p;
  v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, std::string *, _QWORD))&(*a1)[1].__opaque[24])(&v21, a1, &v19, 0);
  v14 = v21;
  v15 = v22;
  v21 = 0;
  v22 = 0;
  v23 = v14;
  v24 = v15;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  pthread_mutex_unlock(a1[5]);
  karo::AsyncFileLoader::requestFile((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19F5B0A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a14 < 0)
    operator delete(__p);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v25 + 40));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void altitude::GeoResourceLoader::getProtocol(uint64_t a1@<X8>)
{
  char *v3;
  int v4;
  void *__p[2];
  char v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = 11;
  strcpy((char *)__p, "georesource");
  v3 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1, (uint64_t)__p);
  v4 = v6;
  *(_QWORD *)(a1 + 8) = v3;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_19F5B0B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:nn180100](v15);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void **std::vector<std::string>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  std::string::size_type size;
  int v8;
  void *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  size_t v15;
  int v16;
  _BOOL8 v17;
  std::string v19;
  char v20;
  std::string v21;
  unsigned __int8 v22;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v21 = *(std::string *)a1;
  v22 = *(_BYTE *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  v20 = *(_BYTE *)(a2 + 24);
  v5 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  v6 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v8 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  v9 = (void *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    v10 = v19.__r_.__value_.__l.__size_;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v19;
  else
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (size != v10)
    goto LABEL_24;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    if (memcmp(v21.__r_.__value_.__l.__data_, v11, v21.__r_.__value_.__l.__size_))
      goto LABEL_24;
LABEL_37:
    v17 = v22 < v4;
    if (v8 < 0)
      goto LABEL_33;
    goto LABEL_34;
  }
  if (!*((_BYTE *)&v21.__r_.__value_.__s + 23))
    goto LABEL_37;
  v12 = &v21;
  v13 = v11;
  while (v12->__r_.__value_.__s.__data_[0] == v13->__r_.__value_.__s.__data_[0])
  {
    v12 = (std::string *)((char *)v12 + 1);
    v13 = (std::string *)((char *)v13 + 1);
    if (!--v5)
      goto LABEL_37;
  }
LABEL_24:
  if (v6 >= 0)
    v14 = &v21;
  else
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v10 >= size)
    v15 = size;
  else
    v15 = v10;
  v16 = memcmp(v14, v11, v15);
  if (v16)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_32;
  }
  else if (size >= v10)
  {
LABEL_32:
    v17 = 0;
    if ((v8 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v17 = 1;
  if (v8 < 0)
  {
LABEL_33:
    operator delete(v9);
    LOBYTE(v6) = *((_BYTE *)&v21.__r_.__value_.__s + 23);
  }
LABEL_34:
  if ((v6 & 0x80) != 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v17;
}

void sub_19F5B0E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<altitude::GeoResourceLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::GeoResourceLoadJob>,std::allocator<altitude::GeoResourceLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::GeoResourceLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::GeoResourceLoadJob>,std::allocator<altitude::GeoResourceLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::GeoResourceLoadJob::~GeoResourceLoadJob(id *this)
{
  *this = off_1E42C53E8;

  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  *this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  karo::Job::~Job((karo::Job *)this);
}

{
  *this = off_1E42C53E8;

  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  *this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  karo::Job::~Job((karo::Job *)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::GeoResourceLoadJob::jobStep(altitude::GeoResourceLoadJob *this)
{
  uint64_t v2;
  void **v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v9[24];
  void *__p[2];
  char v11;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
  {
    v9[23] = 14;
    strcpy(v9, "georesource://");
    karo::util::Path::removePrefix(__p, (uint64_t)this + 216, (uint64_t)v9);
    if (v11 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D27410], "sharedManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dataForResourceWithName:fallbackBundle:", v4, 0);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = v6;

    if (v11 < 0)
      operator delete(__p[0]);
    v2 = *((_QWORD *)this + 30);
  }
  *((_BYTE *)this + 248) = v2 != 0;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_19F5B10C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t altitude::GeoResourceLoadJob::succeeded(altitude::GeoResourceLoadJob *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t altitude::GeoResourceLoadJob::getDataSize(id *this)
{
  return objc_msgSend(this[30], "length");
}

uint64_t altitude::GeoResourceLoadJob::getData(id *this)
{
  return objc_msgSend(this[30], "bytes");
}

void std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 72);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 55) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 32));
LABEL_15:
  operator delete((void *)a2);
}

unsigned __int8 *md::RoadSignPartMetrics::RoadSignPartMetrics(unsigned __int8 *a1, unsigned int a2, double *a3)
{
  __int128 v5;
  double *v6;
  __int128 v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;
  unsigned int v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  CGFloat MidY;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  __int128 v75;
  long double v76;
  long double v77;
  long double v78;
  double v79;
  __int128 v80;
  long double v81;
  long double v82;
  long double v83;
  double v84;
  double v85;
  long double v86;
  double v87;
  double v88;
  long double v89;
  __double2 v90;
  long double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  unsigned int v95;
  __int128 v96;
  __int128 v98;
  double v99[4];

  *a1 = 0;
  *(_OWORD *)(a1 + 8) = *MEMORY[0x1E0C9D820];
  v5 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v6 = (double *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 81) = 0u;
  v7 = *MEMORY[0x1E0C9D538];
  *(_OWORD *)(a1 + 104) = *MEMORY[0x1E0C9D538];
  *(_OWORD *)(a1 + 120) = v7;
  v8 = (double *)(a1 + 136);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 152) = v7;
  *a1 = a2;
  v9 = a3[1];
  v10 = a3[2];
  v11 = v10 * v9;
  v12 = round(v10 * v9 * a3[9]);
  v13 = round(v10 * v9 * a3[10]);
  *((double *)a1 + 11) = fmax(v12, v13);
  v14 = a2 < 0x10;
  v15 = v14 & (0xFFCCu >> a2);
  a1[96] = v14 & (0xFFCCu >> a2);
  v16 = (double *)(a1 + 80);
  v17 = round(a3[7] * (v10 * v9));
  v18 = round(a3[8] * (v10 * v9));
  v19 = fmax(v12 - v17, 0.0);
  v20 = fmax(v17 + v12, 0.0);
  v21 = fmax(v18 + v12, 0.0);
  v22 = fmax(v12 - v18, 0.0);
  v23 = round(v10 * v9 * a3[14]);
  v24 = fmax(v19, v13) + v23;
  v25 = fmax(v20, v13) + v23;
  v26 = fmax(v21, v13);
  v27 = round(v10 * v9 * a3[15]);
  v28 = v26 + v27;
  v29 = fmax(v22, v13) + v27;
  v30 = 2.0;
  switch(a2)
  {
    case 1u:
      goto LABEL_16;
    case 2u:
    case 3u:
      v35 = round(v11 * a3[6]) + v23;
      v36 = round(v11 * a3[3]);
      v30 = v36 + v35 * 2.0;
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v35;
      v37 = v35 + v36;
      *((double *)a1 + 15) = v37;
      v34 = (v37 + v35) * 0.5;
      goto LABEL_22;
    case 4u:
      *v6 = v24;
      v42 = round(v11 * a3[13]);
      v43 = a3[16];
      goto LABEL_15;
    case 5u:
      *v16 = v25;
      v42 = round(v11 * a3[16]);
      v43 = a3[13];
LABEL_15:
      v30 = round(v11 * v43) + v42;
LABEL_16:
      *((double *)a1 + 5) = v30;
LABEL_24:
      *((double *)a1 + 4) = v29;
      v49 = round(v11 * a3[12]);
      *((double *)a1 + 6) = v49;
      *((double *)a1 + 8) = v29;
LABEL_28:
      v50 = v29;
LABEL_29:
      *((double *)a1 + 7) = v28;
      switch(a2)
      {
        case 2u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
          *((double *)a1 + 18) = v29;
          v52 = round(v9 * a3[4] * v10) + v29;
          goto LABEL_37;
        case 3u:
          v61 = a3[4];
          goto LABEL_36;
        case 8u:
        case 9u:
          v53 = *((_QWORD *)a1 + 3);
          MidY = CGRectGetMidY(*(CGRect *)(&v30 - 2));
          *((CGFloat *)a1 + 18) = MidY;
          v10 = a3[2];
          v9 = a3[1];
          v55 = round(v9 * a3[3] * v10) * 0.5;
          *((CGFloat *)a1 + 14) = MidY - v55;
          *((double *)a1 + 16) = v55 + MidY;
          v15 = a1[96];
          break;
        case 0xCu:
        case 0xDu:
          v56 = round(round(v11 * a3[4]) * 0.707106781);
          v57 = round(fabs(round(v11 * a3[3])) * 0.707106781);
          *((double *)a1 + 18) = v29;
          v58 = v56 + v29;
          *((double *)a1 + 14) = v58;
          v52 = v57 + v58;
          goto LABEL_38;
        case 0xEu:
        case 0xFu:
          v59 = round(round(v11 * a3[4]) * 0.707106781);
          v60 = round(fabs(round(v11 * a3[3])) * 0.707106781);
          *((double *)a1 + 18) = v59 + v49 + v29;
          *((double *)a1 + 14) = v49 + v29;
          v52 = v49 + v29 - v60;
          goto LABEL_38;
        default:
          goto LABEL_39;
      }
      goto LABEL_39;
    case 6u:
      *v6 = v24;
      goto LABEL_19;
    case 7u:
      *v16 = v25;
LABEL_19:
      v44 = round(v11 * a3[13]);
      v45 = round(v11 * a3[3]);
      v46 = round(v11 * a3[6]);
      v30 = v45 + v44 + round(v11 * a3[16]) + v46 * 2.0;
      *((double *)a1 + 5) = v30;
      v47 = v46 + v44;
      *((double *)a1 + 13) = v47;
      *((double *)a1 + 15) = v47 + v45;
      v34 = v47 + v45 * 0.5;
      goto LABEL_22;
    case 8u:
    case 9u:
      v38 = round(v11 * a3[4]);
      if (a2 != 8)
        v24 = v25;
      v39 = 80;
      if (a2 == 8)
        v39 = 72;
      *(double *)&a1[v39] = v38 + v24;
      v30 = round(v11 * a3[16]) + round(v11 * a3[13]);
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v30;
      *((double *)a1 + 15) = v30;
      v34 = v38 + v30;
      goto LABEL_22;
    case 0xAu:
    case 0xBu:
      v40 = round(v11 * a3[3]);
      v41 = fmax(round(v11 * a3[16]), v40);
      if (a2 == 10)
        *v6 = v24;
      else
        *v16 = v25;
      v30 = round(v11 * a3[13]) + round(v11 * a3[6]) + v41;
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v30 - v40;
      *((double *)a1 + 15) = v30;
      v34 = v30;
      goto LABEL_22;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      v31 = round(round(v11 * a3[4]) * 0.707106781);
      v32 = round(fabs(round(v11 * a3[3])) * 0.707106781);
      v33 = fmax(round(v11 * a3[16]), v32);
      if ((a2 | 2) != 0xE)
      {
        v24 = v25;
        v6 = (double *)(a1 + 80);
      }
      *v6 = v31 + v24;
      v30 = round(v11 * a3[13]) + round(v11 * a3[6]) + v33;
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v30 - v32;
      *((double *)a1 + 15) = v30;
      v34 = v30 + v31;
LABEL_22:
      *v8 = v34;
      switch(a2)
      {
        case 2u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
          v48 = v11 * a3[4];
          goto LABEL_26;
        case 3u:
          *((double *)a1 + 4) = v29;
          v49 = round(v11 * a3[12]);
          *((double *)a1 + 6) = v49;
          *((double *)a1 + 8) = v29;
          v61 = a3[4];
          *((double *)a1 + 7) = round(v11 * v61) + v28;
LABEL_36:
          v52 = v49 + v29;
          *((double *)a1 + 18) = round(v9 * v61 * v10) + v49 + v29;
LABEL_37:
          *((double *)a1 + 14) = v52;
LABEL_38:
          *((double *)a1 + 16) = v52;
          goto LABEL_39;
        case 8u:
        case 9u:
          goto LABEL_24;
        case 0xCu:
        case 0xDu:
          v48 = round(v11 * a3[4]) * 0.707106781;
LABEL_26:
          v50 = round(v48) + v29;
          *((double *)a1 + 4) = v50;
          v49 = round(v11 * a3[12]);
          *((double *)a1 + 6) = v49;
          *((double *)a1 + 8) = v50;
          goto LABEL_29;
        case 0xEu:
        case 0xFu:
          v51 = round(round(v11 * a3[4]) * 0.707106781);
          *((double *)a1 + 4) = v29;
          v49 = round(v11 * a3[12]);
          *((double *)a1 + 6) = v49;
          *((double *)a1 + 8) = v29;
          v28 = v51 + v28;
          goto LABEL_28;
        default:
          goto LABEL_39;
      }
    default:
LABEL_39:
      if (!v15)
        goto LABEL_58;
      v62 = *((double *)a1 + 17);
      v63 = *((double *)a1 + 18);
      v64 = round(v9 * v10 * a3[5]);
      if (v64 == 0.0)
        goto LABEL_57;
      v65 = *((double *)a1 + 13) - v62;
      v66 = *((double *)a1 + 14) - v63;
      v67 = 1.0 / sqrt(v66 * v66 + v65 * v65);
      v68 = v67 * v65;
      v69 = v67 * v66;
      v99[0] = v68;
      v99[1] = v69;
      v70 = *((double *)a1 + 15) - v62;
      v71 = *((double *)a1 + 16) - v63;
      v72 = 1.0 / sqrt(v71 * v71 + v70 * v70);
      v73 = v72 * v70;
      v74 = v72 * v71;
      *(double *)&v98 = v72 * v70;
      *((double *)&v98 + 1) = v72 * v71;
      if ((*a1 & 0xFE) == 8)
      {
        v75 = xmmword_19FFB33A0;
        if (*(_OWORD *)v99 == 0)
        {
          v79 = 0.0;
        }
        else
        {
          v76 = atan2(v69, v68);
          v77 = fmod(v76 + 1.57079633, 6.28318531);
          v78 = fmod(v77 + 6.28318531, 6.28318531);
          v75 = xmmword_19FFB33A0;
          v79 = v78 + -3.14159265;
        }
        if (v75 != 0 && v98 != 0)
        {
          v84 = atan2(v74, v73);
          v85 = 1.57079633;
LABEL_54:
          v86 = fmod(v84 + v85, 6.28318531);
          v87 = fmod(v86 + 6.28318531, 6.28318531) + -3.14159265;
          goto LABEL_56;
        }
      }
      else
      {
        v80 = xmmword_19FFB32C0;
        if (*(_OWORD *)v99 == 0)
        {
          v79 = 0.0;
        }
        else
        {
          v81 = atan2(v69, v68);
          v82 = fmod(v81 + 3.14159265, 6.28318531);
          v83 = fmod(v82 + 6.28318531, 6.28318531);
          v80 = xmmword_19FFB32C0;
          v79 = v83 + -3.14159265;
        }
        if (v80 != 0 && v98 != 0)
        {
          v84 = atan2(v74, v73);
          v85 = 3.14159265;
          goto LABEL_54;
        }
      }
      v87 = 0.0;
LABEL_56:
      v88 = (v87 + v79) * 0.5;
      v89 = v64 / asin(vabdd_f64(v79, v87) * 0.5) - v64;
      v90 = __sincos_stret(v88);
      v91 = v89 / sqrt(v90.__cosval * v90.__cosval + v90.__sinval * v90.__sinval);
      v62 = ceil(v62 + v91 * v90.__cosval);
      v63 = ceil(v63 + v91 * v90.__sinval);
LABEL_57:
      *((double *)a1 + 19) = v62;
      *((double *)a1 + 20) = v63;
LABEL_58:
      v92.f64[0] = *((float64_t *)a1 + 10);
      v93 = *(float64x2_t *)(a1 + 40);
      v92.f64[1] = *((float64_t *)a1 + 7);
      v94 = vaddq_f64(vaddq_f64(v93, (float64x2_t)vextq_s8(*((int8x16_t *)a1 + 4), *((int8x16_t *)a1 + 4), 8uLL)), v92);
      *(float64x2_t *)(a1 + 8) = v94;
      v95 = *a1;
      if (v95 <= 0xE && ((1 << v95) & 0x5550) != 0)
      {
        *((_QWORD *)a1 + 3) = *(_OWORD *)&vsubq_f64(v94, v93);
        if (v15)
        {
          v96 = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 120) = v96;
          *((double *)a1 + 13) = v94.f64[0] - *((double *)a1 + 13);
          *((double *)a1 + 15) = v94.f64[0] - *((double *)a1 + 15);
          *v8 = v94.f64[0] - *v8;
          *((double *)a1 + 19) = v94.f64[0] - *((double *)a1 + 19);
        }
      }
      return a1;
  }
}

md::RoadSignGeneratedMetrics *md::RoadSignGeneratedMetrics::RoadSignGeneratedMetrics(md::RoadSignGeneratedMetrics *this, const RoadSignMetrics *a2, const RoadSignTextMetrics *a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int orientation;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  BOOL v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  double v70;
  double v71;
  double v72;
  double width;
  double scale;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double MinY;
  double v85;
  double v86;
  double v87;
  double MinX;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  BOOL v97;
  double v98;
  double v99;
  double v100;
  int v101;
  CGFloat MaxX;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  CGFloat v107;
  CGFloat v108;
  uint64_t v109;
  CGFloat v110;
  double v111;
  CGFloat v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v134;
  double v135;
  double v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;

  *(_BYTE *)this = 0;
  v6 = MEMORY[0x1E0C9D820];
  *(_OWORD *)((char *)this + 8) = *MEMORY[0x1E0C9D820];
  v7 = (__int128 *)MEMORY[0x1E0C9D648];
  v8 = *MEMORY[0x1E0C9D648];
  v9 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)((char *)this + 40) = v9;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 81) = 0u;
  v10 = (__int128 *)MEMORY[0x1E0C9D538];
  v11 = *MEMORY[0x1E0C9D538];
  *(_OWORD *)((char *)this + 104) = *MEMORY[0x1E0C9D538];
  *(_OWORD *)((char *)this + 120) = v11;
  *(_OWORD *)((char *)this + 136) = v11;
  *(_OWORD *)((char *)this + 152) = v11;
  *((_BYTE *)this + 168) = 0;
  v12 = (char *)this + 168;
  v13 = *v7;
  v14 = v7[1];
  *((_OWORD *)this + 11) = *(_OWORD *)v6;
  *((_OWORD *)this + 12) = v8;
  *(_OWORD *)((char *)this + 249) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = v14;
  v15 = *v10;
  *((_OWORD *)this + 17) = *v10;
  *((_OWORD *)this + 18) = v15;
  v16 = *v10;
  *((_OWORD *)this + 19) = *v10;
  *((_OWORD *)this + 20) = v16;
  v17 = (char *)this + 336;
  *((_BYTE *)this + 336) = 0;
  *(_OWORD *)((char *)this + 344) = *(_OWORD *)v6;
  v18 = *v7;
  *(_OWORD *)((char *)this + 376) = v7[1];
  *(_OWORD *)((char *)this + 360) = v18;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 440) = *v10;
  *(_OWORD *)((char *)this + 456) = *v10;
  *(_OWORD *)((char *)this + 472) = *v10;
  *(_OWORD *)((char *)this + 488) = *v10;
  v19 = (char *)this + 504;
  *((_BYTE *)this + 504) = 0;
  v20 = *v7;
  v21 = v7[1];
  *((_OWORD *)this + 32) = *(_OWORD *)v6;
  *((_OWORD *)this + 33) = v20;
  *(_OWORD *)((char *)this + 585) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 34) = v21;
  v22 = *v10;
  *((_OWORD *)this + 38) = *v10;
  *((_OWORD *)this + 39) = v22;
  v23 = *v10;
  *((_OWORD *)this + 40) = *v10;
  *((_OWORD *)this + 41) = v23;
  *(_OWORD *)((char *)this + 680) = *(_OWORD *)v6;
  v24 = v7[1];
  *(_OWORD *)((char *)this + 696) = *v7;
  *(_OWORD *)((char *)this + 712) = v24;
  v25 = v7[1];
  *(_OWORD *)((char *)this + 728) = *v7;
  *(_OWORD *)((char *)this + 744) = v25;
  *((_QWORD *)this + 95) = 0;
  v26 = *v10;
  *((_OWORD *)this + 48) = *v10;
  *((_OWORD *)this + 49) = v26;
  v27 = *v7;
  v28 = v7[1];
  *((_OWORD *)this + 50) = *v10;
  *((_OWORD *)this + 51) = v27;
  v29 = *v7;
  v30 = v7[1];
  *((_OWORD *)this + 52) = v28;
  *((_OWORD *)this + 53) = v29;
  v31 = *v7;
  v32 = v7[1];
  *((_OWORD *)this + 54) = v30;
  *((_OWORD *)this + 55) = v31;
  v33 = *v7;
  v34 = v7[1];
  *((_OWORD *)this + 56) = v32;
  *((_OWORD *)this + 57) = v33;
  v35 = *v7;
  v36 = v7[1];
  *((_OWORD *)this + 58) = v34;
  *((_OWORD *)this + 59) = v35;
  v37 = *v7;
  v38 = v7[1];
  *((_OWORD *)this + 60) = v36;
  *((_OWORD *)this + 61) = v37;
  v39 = v7[1];
  *((_OWORD *)this + 63) = v13;
  *((_OWORD *)this + 64) = v39;
  *((_OWORD *)this + 62) = v38;
  orientation = a2->_orientation;
  v41 = 6;
  v42 = 5;
  v43 = 4;
  switch(orientation)
  {
    case 1u:
      goto LABEL_6;
    case 2u:
    case 3u:
    case 5u:
    case 7u:
    case 9u:
    case 0xAu:
    case 0xCu:
    case 0xDu:
      goto LABEL_2;
    case 4u:
      v41 = 8;
      goto LABEL_6;
    case 6u:
      v41 = 10;
      goto LABEL_6;
    case 8u:
      v41 = 12;
      goto LABEL_6;
    case 0xBu:
      v41 = 14;
LABEL_6:
      v45 = 0;
      v46 = 0;
      v44 = v42;
      break;
    default:
      v43 = 0;
LABEL_2:
      v41 = v43;
      v42 = 7;
      v44 = 5;
      switch(orientation)
      {
        case 2u:
          goto LABEL_6;
        case 3u:
        case 4u:
        case 6u:
        case 8u:
        case 0xAu:
        case 0xBu:
        case 0xDu:
          if (orientation <= 0xD)
            goto LABEL_4;
          goto LABEL_60;
        case 5u:
          v42 = 9;
          goto LABEL_6;
        case 7u:
          v42 = 11;
          goto LABEL_6;
        case 9u:
          v42 = 13;
          goto LABEL_6;
        case 0xCu:
          v42 = 15;
          goto LABEL_6;
        default:
          v44 = 0;
          if (orientation > 0xD)
            goto LABEL_60;
LABEL_4:
          v45 = 1;
          if (((1 << orientation) & 0x3BF0) != 0)
          {
            v42 = v44;
            goto LABEL_6;
          }
          if (orientation == 3)
          {
            v46 = 2;
          }
          else if (orientation == 10)
          {
            v46 = 3;
          }
          else
          {
LABEL_60:
            v45 = 0;
            v46 = 0;
          }
          break;
      }
      break;
  }
  *((_BYTE *)this + 672) = v45;
  if (v41)
  {
    md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, v41, (double *)&a2->_orientation);
    v47 = v146;
    *((_OWORD *)this + 8) = v145;
    *((_OWORD *)this + 9) = v47;
    *((_QWORD *)this + 20) = v147;
    v48 = v142;
    *((_OWORD *)this + 4) = v141;
    *((_OWORD *)this + 5) = v48;
    v49 = v144;
    *((_OWORD *)this + 6) = v143;
    *((_OWORD *)this + 7) = v49;
    v50 = v138;
    *(_OWORD *)this = v137;
    *((_OWORD *)this + 1) = v50;
    v51 = v140;
    *((_OWORD *)this + 2) = v139;
    *((_OWORD *)this + 3) = v51;
  }
  if (v44)
  {
    md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, v44, (double *)&a2->_orientation);
    v52 = v146;
    *((_OWORD *)v12 + 8) = v145;
    *((_OWORD *)v12 + 9) = v52;
    *((_QWORD *)v12 + 20) = v147;
    v53 = v142;
    *((_OWORD *)v12 + 4) = v141;
    *((_OWORD *)v12 + 5) = v53;
    v54 = v144;
    *((_OWORD *)v12 + 6) = v143;
    *((_OWORD *)v12 + 7) = v54;
    v55 = v138;
    *(_OWORD *)v12 = v137;
    *((_OWORD *)v12 + 1) = v55;
    v56 = v140;
    *((_OWORD *)v12 + 2) = v139;
    *((_OWORD *)v12 + 3) = v56;
  }
  v57 = 1;
  md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, 1u, (double *)&a2->_orientation);
  v58 = v146;
  *((_OWORD *)v17 + 8) = v145;
  *((_OWORD *)v17 + 9) = v58;
  *((_QWORD *)v17 + 20) = v147;
  v59 = v142;
  *((_OWORD *)v17 + 4) = v141;
  *((_OWORD *)v17 + 5) = v59;
  v60 = v144;
  *((_OWORD *)v17 + 6) = v143;
  *((_OWORD *)v17 + 7) = v60;
  v61 = v138;
  *(_OWORD *)v17 = v137;
  *((_OWORD *)v17 + 1) = v61;
  v62 = v140;
  *((_OWORD *)v17 + 2) = v139;
  *((_OWORD *)v17 + 3) = v62;
  v63 = 0.0;
  if (!*((_BYTE *)this + 672))
    goto LABEL_14;
  md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, v46, (double *)&a2->_orientation);
  v64 = v146;
  *((_OWORD *)v19 + 8) = v145;
  *((_OWORD *)v19 + 9) = v64;
  *((_QWORD *)v19 + 20) = v147;
  v65 = v142;
  *((_OWORD *)v19 + 4) = v141;
  *((_OWORD *)v19 + 5) = v65;
  v66 = v144;
  *((_OWORD *)v19 + 6) = v143;
  *((_OWORD *)v19 + 7) = v66;
  v67 = v138;
  *(_OWORD *)v19 = v137;
  *((_OWORD *)v19 + 1) = v67;
  v68 = v140;
  v69 = *((unsigned __int8 *)this + 672);
  *((_OWORD *)v19 + 2) = v139;
  *((_OWORD *)v19 + 3) = v68;
  v57 = v69 == 0;
  if (v69)
    v70 = *((double *)this + 68);
  else
LABEL_14:
    v70 = 0.0;
  v71 = *((double *)this + 5);
  v72 = v71 + v70 + *((double *)this + 26);
  width = a2->_glyphSize.width;
  if (width != *(double *)v6 || a2->_glyphSize.height != *(double *)(v6 + 8))
  {
    scale = a2->_scale;
    v75 = scale * width;
    v76 = floor(v75);
    v77 = ceil(v75);
    if (scale >= 1.0)
      v63 = v76;
    else
      v63 = v77;
  }
  v78 = fmax(v72, a3[1]._verticalMargin + v63 + round(a3->_scale * a3->_horizontalMargin * a3->_contentScale) * 2.0);
  v79 = v78 - v72;
  v80 = 0.0;
  if (v57)
  {
    v81 = 0.0;
  }
  else
  {
    v79 = ceil(fmod(v78 - v72, 2.0)) + v79;
    v81 = *((double *)this + 65);
  }
  *((double *)this + 95) = v79;
  *((double *)this + 89) = v78;
  v148.origin.x = *((CGFloat *)this + 3);
  v82 = fmax(fmax(fmax(*((double *)this + 2), *((double *)this + 23)), *((double *)this + 44)), v81);
  *((double *)this + 85) = *((double *)this + 9) + *((double *)this + 31) + v78;
  *((double *)this + 86) = v82;
  v83 = *((double *)this + 48);
  v148.origin.y = *((CGFloat *)this + 4);
  v148.size.height = *((CGFloat *)this + 6);
  v148.size.width = v71;
  CGRectGetMinX(v148);
  MinY = CGRectGetMinY(*(CGRect *)((char *)this + 24));
  CGRectGetMinX(*((CGRect *)this + 6));
  v85 = CGRectGetMinY(*((CGRect *)this + 6));
  CGRectGetMinX(*(CGRect *)((char *)this + 360));
  v86 = CGRectGetMinY(*(CGRect *)((char *)this + 360));
  if (*((_BYTE *)this + 672))
  {
    CGRectGetMinX(*(CGRect *)((char *)this + 528));
    v80 = CGRectGetMinY(*(CGRect *)((char *)this + 528));
  }
  v87 = fmax(fmax(fmax(MinY, v85), v86), v80);
  MinX = CGRectGetMinX(*(CGRect *)((char *)this + 24));
  CGRectGetMinY(*(CGRect *)((char *)this + 24));
  *((double *)this + 87) = MinX;
  *((double *)this + 88) = v87;
  *((double *)this + 90) = v83;
  if (BYTE1(a3[1]._textSize))
  {
    v89 = a3[1]._verticalMargin + MinX;
    MinX = round(a3->_scale * a3->_horizontalMargin * a3->_contentScale) * 1.5;
  }
  else
  {
    v89 = round(a3->_scale * a3->_horizontalMargin * a3->_contentScale) * 0.5;
  }
  *((double *)this + 91) = v89 + MinX;
  v90 = a2->_scale;
  v91 = a2->_glyphSize.width * v90;
  v92 = a2->_glyphSize.height * v90;
  v93 = floor(v91);
  v94 = floor(v92);
  v95 = ceil(v91);
  v96 = ceil(v92);
  v97 = v90 < 1.0;
  if (v90 >= 1.0)
  {
    v95 = v93;
    v96 = v94;
  }
  v98 = a2->_glyphVerticalOffset * v90;
  v99 = floor(v98);
  v100 = ceil(v98);
  if (!v97)
    v100 = v99;
  *((double *)this + 92) = v100 + v87 + (v83 - v96) * 0.5;
  *((double *)this + 93) = v95;
  *((double *)this + 94) = v96;
  v101 = *((unsigned __int8 *)this + 672);
  CGRectGetMinX(*(CGRect *)((char *)this + 24));
  v149.origin.y = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 24));
  v149.size.width = *((CGFloat *)this + 1);
  v149.size.height = *((CGFloat *)this + 2);
  *((_QWORD *)this + 106) = 0;
  *((double *)this + 107) = v149.origin.y;
  *((_QWORD *)this + 108) = *(_QWORD *)&v149.size.width;
  *((_QWORD *)this + 109) = *(_QWORD *)&v149.size.height;
  v149.origin.x = 0.0;
  MaxX = CGRectGetMaxX(v149);
  CGRectGetMinX(*(CGRect *)((char *)this + 360));
  v103 = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 360));
  v104 = *((double *)this + 95);
  if (v101)
  {
    v105 = v104 * 0.5;
    v106 = *((_QWORD *)this + 44);
    *((CGFloat *)this + 122) = MaxX;
    *((double *)this + 123) = v103;
    *((double *)this + 124) = v105;
    *((_QWORD *)this + 125) = v106;
    v107 = MaxX;
    v108 = CGRectGetMaxX(*(CGRect *)(&v103 - 1));
    CGRectGetMinX(*(CGRect *)((char *)this + 528));
    v150.origin.y = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 528));
    v150.size.width = *((CGFloat *)this + 64);
    v150.size.height = *((CGFloat *)this + 65);
    *((CGFloat *)this + 118) = v108;
    *((double *)this + 119) = v150.origin.y;
    *((_QWORD *)this + 120) = *(_QWORD *)&v150.size.width;
    *((_QWORD *)this + 121) = *(_QWORD *)&v150.size.height;
    v150.origin.x = v108;
    MaxX = CGRectGetMaxX(v150);
    CGRectGetMinX(*(CGRect *)((char *)this + 360));
    v103 = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 360));
    v104 = *((double *)this + 95) * 0.5;
    v109 = *((_QWORD *)this + 44);
    *((CGFloat *)this + 126) = MaxX;
    *((double *)this + 127) = v103;
    *((double *)this + 128) = v104;
    *((_QWORD *)this + 129) = v109;
  }
  else
  {
    v109 = *((_QWORD *)this + 44);
    *((CGFloat *)this + 114) = MaxX;
    *((double *)this + 115) = v103;
    *((double *)this + 116) = v104;
    *((_QWORD *)this + 117) = v109;
  }
  v110 = MaxX;
  v111 = CGRectGetMaxX(*(CGRect *)(&v103 - 1));
  CGRectGetMinX(*((CGRect *)this + 6));
  v112 = CGRectGetMinY(*((CGRect *)this + 6));
  *((double *)this + 110) = v111;
  *((double *)this + 111) = v87 - v112;
  *((_OWORD *)this + 56) = *((_OWORD *)this + 11);
  if (*((_BYTE *)this + 96))
  {
    *((_OWORD *)this + 48) = *(_OWORD *)((char *)this + 136);
    *((_OWORD *)this + 49) = *(_OWORD *)((char *)this + 152);
    goto LABEL_40;
  }
  if (*((_BYTE *)this + 264))
  {
    v113 = *((double *)this + 38);
    *((_QWORD *)this + 97) = *((_QWORD *)this + 39);
    *((double *)this + 96) = v111 + v113;
    v114 = *((double *)this + 40);
    *((_QWORD *)this + 99) = *((_QWORD *)this + 41);
    v115 = v114 + v111;
LABEL_39:
    *((double *)this + 98) = v115;
    goto LABEL_40;
  }
  if (*((_BYTE *)this + 672) && *((_BYTE *)this + 600))
  {
    v134 = *((double *)this + 80);
    *((_QWORD *)this + 97) = *((_QWORD *)this + 81);
    v135 = *((double *)this + 118);
    *((double *)this + 96) = v135 + v134;
    v136 = *((double *)this + 82);
    *((_QWORD *)this + 99) = *((_QWORD *)this + 83);
    v115 = v136 + v135;
    goto LABEL_39;
  }
LABEL_40:
  v116 = a2->_glyphSize.width;
  if (v116 != *(double *)v6 || (v117 = 0.0, a2->_glyphSize.height != *(double *)(v6 + 8)))
  {
    v118 = a2->_scale;
    v119 = v118 * v116;
    v120 = floor(v119);
    v121 = ceil(v119);
    if (v118 >= 1.0)
      v117 = v120;
    else
      v117 = v121;
  }
  v122 = a3->_contentScale * a3->_scale;
  v123 = round(v122 * a3->_horizontalMargin);
  v124 = -0.0;
  if (!BYTE1(a3[1]._textSize))
    v124 = v117;
  v125 = v123 + *((double *)this + 87) + v124;
  v126 = *((double *)this + 88);
  v127 = round(a3->_verticalMargin * v122);
  *((double *)this + 100) = v125;
  *((double *)this + 101) = v127 + v126;
  v128 = a3->_contentScale * a3->_scale;
  v129 = round(v128 * a3->_verticalMargin);
  v130 = round(a3->_horizontalMargin * v128);
  v131 = *((double *)this + 89) - v117 - (v130 + v130);
  v132 = *((double *)this + 90) + v129 * -2.0;
  *((double *)this + 102) = v125;
  *((double *)this + 103) = v129 + v126;
  *((double *)this + 104) = v131;
  *((double *)this + 105) = v132;
  return this;
}

void sub_19F5B25E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F5B2668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKARCameraController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F5B31A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F5B363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F5B3790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F5B39EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5B407C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5B43AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,id location)
{
  void *v39;
  id *v40;
  id *v41;
  uint64_t v42;

  objc_destroyWeak(v41);
  objc_destroyWeak(v40);
  _Block_object_dispose(&a35, 8);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v42 - 232), 8);

  _Unwind_Resume(a1);
}

void sub_19F5B44AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5B47F4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_19F5B4C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5B4FFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t initCMTimeGetSeconds(CMTime *a1)
{
  __int128 v3;
  CMTimeEpoch epoch;

  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_3856);
  softLinkCMTimeGetSeconds = (uint64_t (*)(CMTime *__struct_ptr))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMTimeGetSeconds");
  v3 = *(_OWORD *)&a1->value;
  epoch = a1->epoch;
  return softLinkCMTimeGetSeconds((CMTime *)&v3);
}

void ___ZL13LoadCoreMediav_block_invoke()
{
  LoadCoreMedia(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreMedia.framework/CoreMedia", 2);
  if (!LoadCoreMedia(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/CoreMedia.framework/CoreMedia"));
}

uint64_t initCMClockGetHostTimeClock(void)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_3856);
  softLinkCMClockGetHostTimeClock = (uint64_t (*)(void))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMClockGetHostTimeClock");
  return softLinkCMClockGetHostTimeClock();
}

uint64_t initCMClockGetTime(OpaqueCMClock *a1)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_3856);
  softLinkCMClockGetTime = (uint64_t (*)(OpaqueCMClock *))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMClockGetTime");
  return softLinkCMClockGetTime(a1);
}

void sub_19F5B582C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5B58AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_48c31_ZTSKN3geo14RigidTransformIddEE104c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  v3 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

double __Block_byref_object_copy__3860(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

void sub_19F5B60B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F5B6204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c46_ZTSKN3geo4UnitINS_21RadianUnitDescriptionEdEE72c46_ZTSKN3geo4UnitINS_21RadianUnitDescriptionEdEE80c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE136c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  result = *(double *)(a2 + 136);
  *(double *)(a1 + 136) = result;
  return result;
}

uint64_t initCMVideoFormatDescriptionGetDimensions(const opaqueCMFormatDescription *a1)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_3856);
  softLinkCMVideoFormatDescriptionGetDimensions[0] = (uint64_t (*)(const opaqueCMFormatDescription *))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMVideoFormatDescriptionGetDimensions");
  return softLinkCMVideoFormatDescriptionGetDimensions[0](a1);
}

uint64_t md::NavLabel::NavLabel(uint64_t a1, void *a2, _QWORD *a3, double a4, double a5, double a6)
{
  id v11;
  id v12;
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;

  v11 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E42AF5A8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 25) = 1;
  *(_BYTE *)(a1 + 27) = 0;
  v12 = objc_retainAutorelease(v11);
  v13 = (const char *)objc_msgSend(v12, "UTF8String");
  {
    v25 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v15 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  v16 = strlen(v13);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v19 + 1, 1);
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = v20 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v18;
    goto LABEL_9;
  }
  v18 = (void *)(a1 + 32);
  *(_BYTE *)(a1 + 55) = v16;
  if (v16)
LABEL_9:
    memmove(v18, v13, v17);
  *((_BYTE *)v18 + v17) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v21 = a3[1];
  *(_QWORD *)(a1 + 80) = *a3;
  *(_QWORD *)(a1 + 88) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 112) = a4;
  *(double *)(a1 + 120) = a5;
  *(double *)(a1 + 128) = a6;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_QWORD *)(a1 + 196) = 1065353216;
  *(_WORD *)(a1 + 204) = 256;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 251) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_BYTE *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 1056964608;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 314) = 0;
  *(_DWORD *)(a1 + 321) = 0;
  *(_QWORD *)(a1 + 298) = 0;
  *(_QWORD *)(a1 + 306) = 0;
  *(_BYTE *)(a1 + 325) = 1;
  *(_QWORD *)(a1 + 342) = 0;
  *(_QWORD *)(a1 + 326) = 0;
  *(_QWORD *)(a1 + 334) = 0;
  *(_WORD *)(a1 + 350) = 0;
  *(_WORD *)(a1 + 296) = 256;

  return a1;
}

void sub_19F5B6528(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void md::NavRoadSignLabelPart::~NavRoadSignLabelPart(md::NavRoadSignLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v5 = operator new();
    *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v5 + 24) = "VectorKitLabels";
    *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v5 = &off_1E42B5668;
    *(_QWORD *)(v5 + 8) = "VectorKitLabels";
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_QWORD *)(v5 + 248) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v5 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v5;
  }
  (*(void (**)(uint64_t, md::NavRoadSignLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 40))(mdm::Allocator::instance(void)::alloc, this, 848);
}

uint64_t md::NavLabelPart::layoutForStaging()
{
  return 0;
}

uint64_t md::NavLabelPart::layoutForDisplay()
{
  return 0;
}

uint64_t md::NavLabelPart::modelMatrix(md::NavLabelPart *this)
{
  return *((_QWORD *)this + 102);
}

void md::NavRoadSignLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 20;
  strcpy(a1, "NavRoadSignLabelPart");
}

float md::NavRoadSignLabelPart::updateWithNavLabelStyle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 != *(unsigned __int8 *)(a1 + 768))
  {
    *(_BYTE *)(a1 + 768) = v4;
    *(_BYTE *)(a1 + 565) = v4 != 0;
    if (!v4)
    {
      v6 = *(_QWORD *)(a1 + 776);
      *(_QWORD *)(a1 + 776) = 0;
      if (!v6)
        goto LABEL_5;
      goto LABEL_4;
    }
    v5 = operator new();
    v6 = *(_QWORD *)(a1 + 776);
    *(_QWORD *)(a1 + 776) = v5;
    if (v6)
LABEL_4:
      MEMORY[0x1A1AF4E00](v6, 0x1000C40AE2C30F4);
  }
LABEL_5:
  result = *(float *)(a2 + 4);
  *(float *)(a1 + 596) = result;
  return result;
}

void std::__shared_ptr_emplace<md::RoadSignLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB9B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RoadSignLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB9B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RoadSignLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::crc32::compute<35ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  return ggl::crc32::crc32Table[v31 ^ a1[33]] ^ ~(v31 >> 8);
}

uint64_t ggl::crc32::compute<24ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  return ggl::crc32::crc32Table[v20 ^ a1[22]] ^ ~(v20 >> 8);
}

void ggl::DaVinci::GroundShadowMapPipelineSetup::~GroundShadowMapPipelineSetup(ggl::DaVinci::GroundShadowMapPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::GroundShadowMapPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundShadowMapPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 3:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
      goto LABEL_6;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 341);
      goto LABEL_6;
    case 5:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
LABEL_6:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ggl::DaVinci::GroundShadowMapPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundShadowMapPipelineSetup *this)
{
  return 0;
}

void ggl::DaVinci::LinearDepthPipelineSetup::~LinearDepthPipelineSetup(ggl::DaVinci::LinearDepthPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::LinearDepthPipelineSetup::constantDataIsEnabled(ggl::DaVinci::LinearDepthPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 3:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
      goto LABEL_6;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 341);
      goto LABEL_6;
    case 5:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
LABEL_6:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ggl::DaVinci::LinearDepthPipelineSetup::textureIsEnabled(ggl::DaVinci::LinearDepthPipelineSetup *this)
{
  return 0;
}

void ggl::DaVinci::PackedLinearDepthPipelineState::~PackedLinearDepthPipelineState(ggl::DaVinci::PackedLinearDepthPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::PackedLinearDepthPipelineSetup::~PackedLinearDepthPipelineSetup(ggl::DaVinci::PackedLinearDepthPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::PackedLinearDepthPipelineSetup::constantDataIsEnabled(ggl::DaVinci::PackedLinearDepthPipelineSetup *this, unint64_t a2)
{
  int v3;

  if (a2 < 3)
    return 1;
  if (a2 == 4)
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
    return v3 != 0;
  }
  if (a2 == 3)
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 341);
    return v3 != 0;
  }
  return 0;
}

uint64_t ggl::DaVinci::PackedLinearDepthPipelineSetup::textureIsEnabled(ggl::DaVinci::PackedLinearDepthPipelineSetup *this)
{
  return 0;
}

void std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *zone;
  md::LabelLineStore::WorkUnit *v6;
  md::LabelLineStore::WorkUnit *v7;
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;

  std::mutex::~mutex((std::mutex *)(a1 + 192));
  if (*(_QWORD *)(a1 + 160))
  {
    std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__clear[abi:nn180100]((uint64_t **)(a1 + 160));
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 40))(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 160));
  }
  v2 = *(_QWORD **)(a1 + 120);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 120);
    if (v3 != v2)
    {
      do
      {
        v7 = (md::LabelLineStore::WorkUnit *)*--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          md::LabelLineStore::WorkUnit::~WorkUnit(v6);
          {
            v13 = v2;
            v9 = operator new();
            *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v9 + 24) = "VectorKitLabels";
            *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v9 = &off_1E42B5668;
            *(_QWORD *)(v9 + 8) = "VectorKitLabels";
            *(_OWORD *)(v9 + 72) = 0u;
            *(_OWORD *)(v9 + 88) = 0u;
            *(_OWORD *)(v9 + 104) = 0u;
            *(_OWORD *)(v9 + 120) = 0u;
            *(_OWORD *)(v9 + 136) = 0u;
            *(_OWORD *)(v9 + 152) = 0u;
            *(_OWORD *)(v9 + 168) = 0u;
            *(_OWORD *)(v9 + 184) = 0u;
            *(_OWORD *)(v9 + 200) = 0u;
            *(_OWORD *)(v9 + 216) = 0u;
            *(_OWORD *)(v9 + 232) = 0u;
            *(_QWORD *)(v9 + 248) = 0;
            *(_OWORD *)(v9 + 56) = 0u;
            v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
            if ((_DWORD)v10)
              geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v9 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v9;
            v2 = v13;
          }
          (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v6, 248);
        }
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v4, *(_QWORD *)(a1 + 136) - v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v12 = *(std::__shared_weak_count **)(a1 + 40);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

uint64_t std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 328);
}

uint64_t **std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__clear[abi:nn180100](uint64_t **result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v1 = result;
  v2 = *result;
  for (i = result[1]; i != v2; i -= 14)
  {
    v5 = (_QWORD *)*(i - 4);
    if (v5)
    {
      std::vector<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,geo::StdAllocator<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100]((uint64_t)(i - 4), v5);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*(i - 1) + 40))(*(i - 1), *(i - 4), *(i - 2) - *(i - 4));
    }
    v10 = i - 8;
    result = std::vector<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,geo::StdAllocator<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v10);
    v6 = (_QWORD *)*(i - 12);
    if (v6)
    {
      v7 = (_QWORD *)*(i - 11);
      v4 = *(i - 12);
      if (v7 != v6)
      {
        do
        {
          v9 = *--v7;
          v8 = v9;
          *v7 = 0;
          if (v9)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 8))(v8, v4);
        }
        while (v7 != v6);
        v4 = *(i - 12);
      }
      *(i - 11) = (uint64_t)v6;
      result = (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*(i - 9) + 40))(*(i - 9), v4, *(i - 10) - v4);
    }
  }
  v1[1] = v2;
  return result;
}

void md::LabelLineStore::WorkUnit::~WorkUnit(md::LabelLineStore::WorkUnit *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v8, *((_QWORD *)this + 11) - v8);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v12)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v12)
      goto LABEL_23;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_23:
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

uint64_t std::vector<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,geo::StdAllocator<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  malloc_zone_t *zone;
  _QWORD *v15;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v7 = *--v4;
    v6 = v7;
    *v4 = 0;
    if (v7)
    {
      v8 = *(_QWORD *)(v6 + 72);
      if (v8)
      {
        *(_QWORD *)(v6 + 80) = v8;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 96) + 40))(*(_QWORD *)(v6 + 96), v8, *(_QWORD *)(v6 + 88) - v8);
      }
      v9 = *(_QWORD *)(v6 + 40);
      if (v9)
      {
        *(_QWORD *)(v6 + 48) = v9;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 64) + 40))(*(_QWORD *)(v6 + 64), v9, *(_QWORD *)(v6 + 56) - v9);
      }
      v10 = *(_QWORD *)(v6 + 8);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = v10;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 32) + 40))(*(_QWORD *)(v6 + 32), v10, *(_QWORD *)(v6 + 24) - v10);
      }
      {
        v15 = v4;
        v11 = operator new();
        *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v11 + 24) = "VectorKitLabels";
        *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v11 = &off_1E42B5668;
        *(_QWORD *)(v11 + 8) = "VectorKitLabels";
        *(_OWORD *)(v11 + 72) = 0u;
        *(_OWORD *)(v11 + 88) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 152) = 0u;
        *(_OWORD *)(v11 + 168) = 0u;
        *(_OWORD *)(v11 + 184) = 0u;
        *(_OWORD *)(v11 + 200) = 0u;
        *(_OWORD *)(v11 + 216) = 0u;
        *(_OWORD *)(v11 + 232) = 0u;
        *(_QWORD *)(v11 + 248) = 0;
        *(_OWORD *)(v11 + 56) = 0u;
        v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
        if ((_DWORD)v12)
          geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v11 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v11 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v11;
        v4 = v15;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v6, 136);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t **std::vector<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,geo::StdAllocator<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](uint64_t **result)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  malloc_zone_t *zone;
  _QWORD *v16;

  v1 = *result;
  v2 = (_QWORD *)**result;
  if (v2)
  {
    v3 = (_QWORD *)v1[1];
    v4 = **result;
    v5 = *result;
    if (v3 != v2)
    {
      v6 = result;
      do
      {
        v9 = *--v3;
        v8 = v9;
        *v3 = 0;
        if (v9)
        {
          v10 = *(_QWORD *)(v8 + 24);
          if (v10)
          {
            *(_QWORD *)(v8 + 32) = v10;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 48) + 40))(*(_QWORD *)(v8 + 48), v10, *(_QWORD *)(v8 + 40) - v10);
          }
          v11 = *(std::__shared_weak_count **)(v8 + 8);
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          {
            v16 = v2;
            v12 = operator new();
            *(_QWORD *)(v12 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v12 + 24) = "VectorKitLabels";
            *(_OWORD *)(v12 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v12 = &off_1E42B5668;
            *(_QWORD *)(v12 + 8) = "VectorKitLabels";
            *(_OWORD *)(v12 + 72) = 0u;
            *(_OWORD *)(v12 + 88) = 0u;
            *(_OWORD *)(v12 + 104) = 0u;
            *(_OWORD *)(v12 + 120) = 0u;
            *(_OWORD *)(v12 + 136) = 0u;
            *(_OWORD *)(v12 + 152) = 0u;
            *(_OWORD *)(v12 + 168) = 0u;
            *(_OWORD *)(v12 + 184) = 0u;
            *(_OWORD *)(v12 + 200) = 0u;
            *(_OWORD *)(v12 + 216) = 0u;
            *(_OWORD *)(v12 + 232) = 0u;
            *(_QWORD *)(v12 + 248) = 0;
            *(_OWORD *)(v12 + 56) = 0u;
            v13 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v12 + 56), 0);
            if ((_DWORD)v13)
              geo::read_write_lock::logFailure(v13, (uint64_t)"initialization", v14);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v12 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v12 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v12;
            v2 = v16;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v8, 64);
        }
      }
      while (v3 != v2);
      v5 = *v6;
      v4 = **v6;
    }
    v1[1] = (uint64_t)v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 result)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  char v8;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  double v14;
  char v15;
  uint64_t v16;
  char v17;

  result.n128_u64[0] = *(_QWORD *)(a2 + 8);
  v4 = *(double *)(a1 + 8);
  if (result.n128_f64[0] != v4)
  {
    if (result.n128_f64[0] < v4)
      goto LABEL_11;
    goto LABEL_6;
  }
  if (*(unsigned __int8 *)(a2 + 16) != *(unsigned __int8 *)(a1 + 16))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_11;
LABEL_6:
    v5 = *(double *)(a3 + 8);
    if (v5 == result.n128_f64[0])
    {
      if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
      {
        if (*(_QWORD *)a3 >= *(_QWORD *)a2)
          return result;
      }
      else if (!*(_BYTE *)(a3 + 16))
      {
        return result;
      }
    }
    else if (v5 >= result.n128_f64[0])
    {
      return result;
    }
    result = *(__n128 *)a2;
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_BYTE *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_BYTE *)(a2 + 16) = v13;
    *(_BYTE *)(a3 + 16) = v12;
    *(__n128 *)a3 = result;
    result.n128_u64[0] = *(_QWORD *)(a2 + 8);
    v14 = *(double *)(a1 + 8);
    if (result.n128_f64[0] == v14)
    {
      if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
      {
        if (*(_QWORD *)a2 >= *(_QWORD *)a1)
          return result;
      }
      else if (!*(_BYTE *)(a2 + 16))
      {
        return result;
      }
    }
    else if (result.n128_f64[0] >= v14)
    {
      return result;
    }
    result = *(__n128 *)a1;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_BYTE *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = v17;
    *(_BYTE *)(a2 + 16) = v16;
    *(__n128 *)a2 = result;
    return result;
  }
  if (*(_QWORD *)a2 >= *(_QWORD *)a1)
    goto LABEL_6;
LABEL_11:
  v6 = *(double *)(a3 + 8);
  if (v6 != result.n128_f64[0])
  {
    if (v6 >= result.n128_f64[0])
      goto LABEL_16;
    goto LABEL_23;
  }
  if (*(unsigned __int8 *)(a3 + 16) != *(unsigned __int8 *)(a2 + 16))
  {
    if (!*(_BYTE *)(a3 + 16))
      goto LABEL_16;
LABEL_23:
    result = *(__n128 *)a1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_BYTE *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_BYTE *)(a1 + 16) = v11;
LABEL_35:
    *(_BYTE *)(a3 + 16) = v10;
    *(__n128 *)a3 = result;
    return result;
  }
  if (*(_QWORD *)a3 < *(_QWORD *)a2)
    goto LABEL_23;
LABEL_16:
  result = *(__n128 *)a1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v8;
  *(_BYTE *)(a2 + 16) = v7;
  *(__n128 *)a2 = result;
  result.n128_u64[0] = *(_QWORD *)(a3 + 8);
  v9 = *(double *)(a2 + 8);
  if (result.n128_f64[0] != v9)
  {
    if (result.n128_f64[0] >= v9)
      return result;
    goto LABEL_34;
  }
  if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
      goto LABEL_34;
  }
  else if (*(_BYTE *)(a3 + 16))
  {
LABEL_34:
    result = *(__n128 *)a2;
    v10 = *(_QWORD *)(a2 + 16);
    v15 = *(_BYTE *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_BYTE *)(a2 + 16) = v15;
    goto LABEL_35;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  __n128 result;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  uint64_t v14;
  char v15;
  double v16;
  uint64_t v17;
  char v18;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a2, a3, a5);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  v10 = *(double *)(a3 + 8);
  if (result.n128_f64[0] == v10)
  {
    if (*(unsigned __int8 *)(a4 + 16) == *(unsigned __int8 *)(a3 + 16))
    {
      if (*(_QWORD *)a4 >= *(_QWORD *)a3)
        return result;
    }
    else if (!*(_BYTE *)(a4 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v10)
  {
    return result;
  }
  result = *(__n128 *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_BYTE *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_BYTE *)(a3 + 16) = v12;
  *(_BYTE *)(a4 + 16) = v11;
  *(__n128 *)a4 = result;
  result.n128_u64[0] = *(_QWORD *)(a3 + 8);
  v13 = *(double *)(a2 + 8);
  if (result.n128_f64[0] == v13)
  {
    if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)a2)
        return result;
    }
    else if (!*(_BYTE *)(a3 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v13)
  {
    return result;
  }
  result = *(__n128 *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_BYTE *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_BYTE *)(a2 + 16) = v15;
  *(_BYTE *)(a3 + 16) = v14;
  *(__n128 *)a3 = result;
  result.n128_u64[0] = *(_QWORD *)(a2 + 8);
  v16 = *(double *)(a1 + 8);
  if (result.n128_f64[0] == v16)
  {
    if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
    {
      if (*(_QWORD *)a2 >= *(_QWORD *)a1)
        return result;
    }
    else if (!*(_BYTE *)(a2 + 16))
    {
      return result;
    }
LABEL_22:
    result = *(__n128 *)a1;
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_BYTE *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = v18;
    *(_BYTE *)(a2 + 16) = v17;
    *(__n128 *)a2 = result;
    return result;
  }
  if (result.n128_f64[0] < v16)
    goto LABEL_22;
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  __n128 result;
  double v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  char v23;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a2, a3, a4, a6);
  result.n128_u64[0] = *(_QWORD *)(a5 + 8);
  v12 = *(double *)(a4 + 8);
  if (result.n128_f64[0] == v12)
  {
    if (*(unsigned __int8 *)(a5 + 16) == *(unsigned __int8 *)(a4 + 16))
    {
      if (*(_QWORD *)a5 >= *(_QWORD *)a4)
        return result;
    }
    else if (!*(_BYTE *)(a5 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v12)
  {
    return result;
  }
  result = *(__n128 *)a4;
  v13 = *(_QWORD *)(a4 + 16);
  v14 = *(_BYTE *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_BYTE *)(a4 + 16) = v14;
  *(_BYTE *)(a5 + 16) = v13;
  *(__n128 *)a5 = result;
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  v15 = *(double *)(a3 + 8);
  if (result.n128_f64[0] == v15)
  {
    if (*(unsigned __int8 *)(a4 + 16) == *(unsigned __int8 *)(a3 + 16))
    {
      if (*(_QWORD *)a4 >= *(_QWORD *)a3)
        return result;
    }
    else if (!*(_BYTE *)(a4 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v15)
  {
    return result;
  }
  result = *(__n128 *)a3;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_BYTE *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_BYTE *)(a3 + 16) = v17;
  *(_BYTE *)(a4 + 16) = v16;
  *(__n128 *)a4 = result;
  result.n128_u64[0] = *(_QWORD *)(a3 + 8);
  v18 = *(double *)(a2 + 8);
  if (result.n128_f64[0] == v18)
  {
    if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)a2)
        return result;
    }
    else if (!*(_BYTE *)(a3 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v18)
  {
    return result;
  }
  result = *(__n128 *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_BYTE *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_BYTE *)(a2 + 16) = v20;
  *(_BYTE *)(a3 + 16) = v19;
  *(__n128 *)a3 = result;
  result.n128_u64[0] = *(_QWORD *)(a2 + 8);
  v21 = *(double *)(a1 + 8);
  if (result.n128_f64[0] == v21)
  {
    if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
    {
      if (*(_QWORD *)a2 >= *(_QWORD *)a1)
        return result;
    }
    else if (!*(_BYTE *)(a2 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v21)
  {
    return result;
  }
  result = *(__n128 *)a1;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v23;
  *(_BYTE *)(a2 + 16) = v22;
  *(__n128 *)a2 = result;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  _QWORD *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  double v22;
  uint64_t v23;
  unint64_t *v24;
  double v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_QWORD *)(a2 - 24);
      v8 = *(double *)(a2 - 16);
      v9 = *(double *)(a1 + 8);
      if (v8 == v9)
      {
        if (*(unsigned __int8 *)(a2 - 8) == *(unsigned __int8 *)(a1 + 16))
        {
          if (*v7 >= *(_QWORD *)a1)
            return result;
        }
        else if (!*(_BYTE *)(a2 - 8))
        {
          return result;
        }
      }
      else if (v8 >= v9)
      {
        return result;
      }
      v26 = *(_OWORD *)a1;
      v27 = *(_QWORD *)(a1 + 16);
      v28 = *(_BYTE *)(a2 - 8);
      *(_OWORD *)a1 = *(_OWORD *)v7;
      *(_BYTE *)(a1 + 16) = v28;
      *(_BYTE *)(a2 - 8) = v27;
      *(_OWORD *)v7 = v26;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v10 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a1 + 24, a1 + 48, a3);
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (2)
  {
    v15 = *(double *)(v11 + 8);
    v16 = *(double *)(v10 + 8);
    if (v15 == v16)
    {
      v17 = *(unsigned __int8 *)(v11 + 16);
      if (v17 == *(unsigned __int8 *)(v10 + 16))
      {
        if (*(_QWORD *)v11 >= *(_QWORD *)v10)
          goto LABEL_10;
      }
      else
      {
        if (!*(_BYTE *)(v11 + 16))
          goto LABEL_10;
        v17 = 1;
      }
    }
    else
    {
      if (v15 >= v16)
        goto LABEL_10;
      v17 = *(unsigned __int8 *)(v11 + 16);
    }
    v18 = *(_QWORD *)v11;
    *(_OWORD *)v11 = *(_OWORD *)v10;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v10 + 16);
    v14 = a1;
    if (v10 == a1)
      goto LABEL_9;
    v19 = v12;
    if (!v17)
    {
      while (1)
      {
        v23 = a1 + v19;
        v24 = (unint64_t *)(a1 + v19 + 24);
        v25 = *(double *)(a1 + v19 + 32);
        if (v15 == v25)
        {
          if (*(_BYTE *)(v23 + 40) || v18 >= *v24)
            goto LABEL_33;
        }
        else if (v15 >= v25)
        {
          goto LABEL_34;
        }
        v10 -= 24;
        *(_OWORD *)(v23 + 48) = *(_OWORD *)v24;
        *(_BYTE *)(v23 + 64) = *(_BYTE *)(a1 + v19 + 40);
        v19 -= 24;
        if (v19 == -48)
          goto LABEL_8;
      }
    }
    while (1)
    {
      v20 = a1 + v19;
      v21 = (unint64_t *)(a1 + v19 + 24);
      v22 = *(double *)(a1 + v19 + 32);
      if (v15 != v22)
        break;
      if (v17 == *(unsigned __int8 *)(v20 + 40) && v18 >= *v21)
      {
LABEL_33:
        v14 = v10;
        goto LABEL_9;
      }
LABEL_23:
      v10 -= 24;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)v21;
      *(_BYTE *)(v20 + 64) = *(_BYTE *)(a1 + v19 + 40);
      v19 -= 24;
      if (v19 == -48)
      {
LABEL_8:
        v14 = a1;
        goto LABEL_9;
      }
    }
    if (v15 < v22)
      goto LABEL_23;
LABEL_34:
    v14 = a1 + v19 + 48;
LABEL_9:
    *(_QWORD *)v14 = v18;
    *(double *)(v14 + 8) = v15;
    *(_BYTE *)(v14 + 16) = v17;
    if (++v13 == 8)
      return v11 + 24 == a2;
LABEL_10:
    v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 != a2)
      continue;
    return 1;
  }
}

int *md::FontSizeInfo::update(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, float a6)
{
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  int v17;
  float v18;
  float v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char hasValueForKeyAtZAtEnd;
  float v24;
  unint64_t v25;
  unsigned int v26;
  float v27;
  unint64_t v28;
  unsigned int v29;
  float v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  float *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  int *result;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  unsigned int v52;
  unsigned int v53;
  float v54;
  char v55;
  char v56;

  v11 = (int)a6;
  if ((int)a6 >= 0x17)
    v12 = 23;
  else
    v12 = (int)a6;
  v13 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v14 = *(unsigned __int8 *)(v13 + 12);
  if (a5)
  {
    v15 = *(unsigned __int8 *)(v13 + 12);
    if (v14 == 2)
    {
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xBFu, v12, 0))
      {
        v16 = fminf(fmaxf(a6, 0.0), 23.0);
LABEL_11:
        v17 = 1;
        v56 = 1;
        v55 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v13, 0xBFu, 0, (BOOL *)&v56, v16);
        v19 = v18;
        v20 = v13;
        v21 = 191;
LABEL_31:
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, v21, 1u, (BOOL *)&v55, v16);
        goto LABEL_47;
      }
      v15 = 1;
    }
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v13, 0xBFu, v12, v15))
    {
      v16 = fminf(fmaxf(a6, 0.0), 23.0);
      if (v14 == 2)
        goto LABEL_11;
      v28 = v13;
      v29 = 191;
      goto LABEL_35;
    }
  }
  if (v14 == 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v13, 9u, v12, 0) & 1) != 0)
    {
LABEL_22:
      v56 = 1;
      v55 = 1;
      v19 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 9u, v12, 0, &v56);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 9u, v12, 1u, &v55);
      goto LABEL_24;
    }
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v13, 9u, v12, 1u) & 1) != 0)
      goto LABEL_21;
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v13, 0x64u, v12, 0) & 1) != 0)
      goto LABEL_19;
    v22 = 1;
  }
  else
  {
    hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v13, 9u, v12, v14);
    v22 = v14;
    if ((hasValueForKeyAtZAtEnd & 1) != 0)
      goto LABEL_23;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v13, 0x64u, v12, v22) & 1) == 0)
  {
LABEL_21:
    if (v14 == 2)
      goto LABEL_22;
LABEL_23:
    v19 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 9u, v12, v14, 0);
LABEL_24:
    v25 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v14 = *(unsigned __int8 *)(v25 + 12);
    v26 = v14;
    if (v14 == 2)
    {
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xAu, v12, 0))
      {
        v16 = fminf(fmaxf(a6, 0.0), 23.0);
        goto LABEL_30;
      }
      v26 = 1;
    }
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v25, 0xAu, v12, v26))
    {
      v17 = 0;
      goto LABEL_47;
    }
    v16 = fminf(fmaxf(a6, 0.0), 23.0);
    if (v14 != 2)
    {
      v28 = v25;
      v29 = 9;
LABEL_35:
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v28, v29, v14, 0, v16);
      v19 = v30;
      v17 = 1;
      goto LABEL_47;
    }
LABEL_30:
    v17 = 1;
    v56 = 1;
    v55 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v25, 9u, 0, (BOOL *)&v56, v16);
    v19 = v27;
    v20 = v25;
    v21 = 9;
    goto LABEL_31;
  }
LABEL_19:
  if (v14 == 2)
  {
    v56 = 1;
    v55 = 1;
    v24 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 0x64u, v12, 0, &v56);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 0x64u, v12, 1u, &v55);
  }
  else
  {
    v24 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 0x64u, v12, v14, 0);
  }
  v31 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v32 = *(unsigned __int8 *)(v31 + 12);
  v33 = v32;
  if (v32 == 2)
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x65u, v12, 0))
    {
      v34 = fminf(fmaxf(a6, 0.0), 23.0);
      goto LABEL_43;
    }
    v33 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v31, 0x65u, v12, v33))
  {
    v17 = 0;
    goto LABEL_46;
  }
  v34 = fminf(fmaxf(a6, 0.0), 23.0);
  if (v32 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x64u, v32, 0, v34);
    v24 = v36;
    v17 = 1;
    goto LABEL_46;
  }
LABEL_43:
  v17 = 1;
  v56 = 1;
  v55 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x64u, 0, (BOOL *)&v56, v34);
  v24 = v35;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x64u, 1u, (BOOL *)&v55, v34);
LABEL_46:
  v19 = v24 * 1.3;
LABEL_47:
  v37 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v38 = *(unsigned __int8 *)(v37 + 12);
  if (v38 == 2)
  {
    v56 = 1;
    v55 = 1;
    v39 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v37, 0x148u, v12, 0, &v56);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v37, 0x148u, v12, 1u, &v55);
  }
  else
  {
    v39 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x148u, v12, v38, 0);
  }
  *(_BYTE *)(a1 + 10) = v39 == 1;
  if (v39 == 1)
    v40 = 1;
  else
    v40 = a4;
  *(_BYTE *)(a1 + 9) = v40;
  v41 = (float *)(a3 + 20 * v40);
  v42 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v43 = *(unsigned __int8 *)(v42 + 12);
  if (v43 == 2)
  {
    v56 = 1;
    v55 = 1;
    v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x1DEu, v12, 0, &v56);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x1DEu, v12, 1u, &v55);
  }
  else
  {
    v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1DEu, v12, v43, 0);
  }
  *(float *)(a1 + 4) = fminf(*(float *)&v44, *v41) * v19;
  *(_BYTE *)(a1 + 8) = v17;
  v45 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v46 = *(unsigned __int8 *)(v45 + 12);
  if (v46 == 2)
  {
    v56 = 1;
    v55 = 1;
    v47 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v45, 0x77u, v12, 0, &v56);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v45, 0x77u, v12, 1u, &v55);
    if (!v17)
      goto LABEL_67;
  }
  else
  {
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x77u, v12, v46, 0);
    v47 = *(float *)result;
    if (!v17)
      goto LABEL_67;
  }
  v49 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (v11 >= 0x16)
    v50 = 22;
  else
    v50 = v11;
  v51 = v50 + 1;
  v52 = *(unsigned __int8 *)(v49 + 12);
  if (v52 == 2)
  {
    v56 = 1;
    v55 = 1;
    v53 = v51;
    v54 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x77u, v51, 0, &v56);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x77u, v53, 1u, &v55);
  }
  else
  {
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x77u, v51, v52, 0);
    v54 = *(float *)result;
  }
  v47 = v47 + (float)((float)(v54 - v47) * (float)(a6 - (float)v12));
LABEL_67:
  *(float *)a1 = v47;
  return result;
}

void md::InjectedFeaturesLayerDataSource::~InjectedFeaturesLayerDataSource(md::InjectedFeaturesLayerDataSource *this)
{
  md::InjectedFeaturesLayerDataSource::~InjectedFeaturesLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42A8A18;
  v2 = (void *)*((_QWORD *)this + 92);
  if (v2)
  {
    *((_QWORD *)this + 93) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 89);
  if (v3)
  {
    *((_QWORD *)this + 90) = v3;
    operator delete(v3);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 664);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 84));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 80));
  if (*((_BYTE *)this + 608))
    *((_BYTE *)this + 608) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  gdc::LayerDataSource::~LayerDataSource(this);
}

uint64_t md::InjectedFeaturesLayerDataSource::fallbackSettings(md::InjectedFeaturesLayerDataSource *this)
{
  return *((unsigned __int16 *)this + 300) | 0x10000u;
}

void std::__shared_ptr_emplace<md::DaVinciGroundTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciGroundTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciGroundTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19F5B8A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 672));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  if (*a2)
  {
    if (*a2 != 3)
      return result;
LABEL_6:
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 16) + 24))(**(_QWORD **)(v2 + 16), 3, 0, 0);
    result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 16) + 32))(**(_QWORD **)(v2 + 16));
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(result + 2592);
    return result;
  }
  if (**(_BYTE **)(result + 8))
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(result + 16) + 24))(**(_QWORD **)(result + 16), 0, 0, 0);
    result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 16) + 32))(**(_QWORD **)(v2 + 16));
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(result + 2592);
    if (*a2 == 3)
      goto LABEL_6;
  }
  return result;
}

void std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C0C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C0C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (**(_QWORD **)(result + 8) == *a2)
  {
    v2 = result;
    result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(result + 16) + 24))(**(_QWORD **)(result + 16));
    if (result)
    {
      v3 = result;
      result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 16) + 32))(**(_QWORD **)(v2 + 16));
      *(_QWORD *)(v3 + 32) = *(_QWORD *)(result + 2608);
    }
  }
  return result;
}

void md::ARAnimationLogic::~ARAnimationLogic(md::ARAnimationLogic *this)
{
  md::ARAnimationLogic::~ARAnimationLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  id *v8;
  id *v9;
  void *v10;

  *(_QWORD *)this = &off_1E4291008;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_8;
  }
  do
  {
    v7 = (_QWORD *)*v5;
    v8 = (id *)v5[5];
    if (v8)
    {
      do
      {
        v9 = (id *)*v8;

        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = (void *)v5[3];
    v5[3] = 0;
    if (v10)
      operator delete(v10);
    operator delete(v5);
    v5 = v7;
  }
  while (v7);
LABEL_8:
  v6 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
    operator delete(v6);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

_QWORD *md::ARAnimationLogic::didBecomeInactive(md::ARAnimationLogic *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v2 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(*((_QWORD *)this + 15));
  v3 = v2[7];
  v4 = v2[8];
  if (v3 != v4)
  {
    v5 = v2[10];
    do
    {
      stopAndReleaseAnimation(*(_QWORD *)v5, *(_DWORD *)(v5 + 8), (_QWORD *)this + 16, 0);
      v3 += 8;
      v5 += 16;
    }
    while (v3 != v4);
  }
  result = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(*((_QWORD *)this + 15));
  v7 = result;
  if (result[29] && (v8 = (_QWORD *)result[28]) != 0)
  {
    v9 = result[31];
    v10 = result[7];
    v11 = (result[8] - v10) >> 3;
    while (1)
    {
      v14[0] = v10;
      v14[1] = v11;
      v13 = v9;
      v12 = v8[6];
      if (!v12)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v12 + 48))(v12, &v13, v14);
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_9;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (_QWORD *)md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_allocateContext();
  }
  else
  {
LABEL_9:
    v7[8] = v7[7];
    v7[11] = v7[10];
  }
  return result;
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARAnimationContext]";
  v4[3] = 22;
  v4[4] = result;
  *v4 = &off_1E42B0F50;
  v4[1] = 0x148CB13E59522D82;
  *a2 = v4;
  return result;
}

void sub_19F5B8E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x148CB13E59522D82)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x148CB13E59522D82)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x148CB13E59522D82)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x148CB13E59522D82)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x148CB13E59522D82 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARAnimationLogic::runBeforeLayout(_QWORD *a1, md::LayoutContext *this, uint64_t a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  _QWORD *JumpAndRotate;
  _QWORD *v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  _QWORD *v81;
  char v82;
  uint64_t v83;
  _QWORD *k;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  size_t v93;
  char *v94;
  char *v95;
  char *v96;
  _QWORD *m;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *started;
  unint64_t v102;
  float v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  char v110;
  unint64_t *v111;
  uint64_t v112;
  _QWORD *n;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  unint64_t v133;
  _QWORD *ii;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  int v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  _QWORD *v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *jj;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  __int128 v162;
  _QWORD *kk;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  _DWORD *v167;
  float v168;
  float v169;
  int v170;
  int v171;
  int v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  int8x8_t v176;
  uint8x8_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  char v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *i6;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  _DWORD *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  int8x8_t v206;
  uint8x8_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  char v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  char *v234;
  unint64_t *v235;
  uint64_t v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *i7;
  uint64_t v240;
  unint64_t v241;
  int8x8_t v242;
  uint8x8_t v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  char v253;
  _DWORD *v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  _DWORD *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  _BYTE *v266;
  _DWORD *v267;
  unint64_t v268;
  uint64_t v269;
  _OWORD *v270;
  char *v271;
  uint64_t v272;
  __int128 v273;
  int v274;
  _QWORD *i8;
  uint64_t v276;
  unint64_t v277;
  int8x8_t v278;
  uint8x8_t v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  char v289;
  unint64_t *v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t *v295;
  _QWORD *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  __int128 *v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  _QWORD *i9;
  uint64_t v312;
  uint64_t v313;
  int8x8_t v314;
  uint8x8_t v315;
  _QWORD *v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  char v325;
  uint64_t v326;
  unint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  char *v339;
  __int128 v340;
  _QWORD *i10;
  uint64_t v342;
  uint64_t v343;
  int8x8_t v344;
  uint8x8_t v345;
  _QWORD *v346;
  _QWORD *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  char v355;
  uint64_t v356;
  void *v357;
  _QWORD *v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  char *v369;
  _QWORD *v370;
  float *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int8x8_t v383;
  uint8x8_t v384;
  _QWORD *v385;
  _QWORD *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  _QWORD *v393;
  char v394;
  unint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  unint64_t v398;
  _BYTE *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  size_t v405;
  char *v406;
  char *v407;
  char *v408;
  _QWORD *i11;
  uint64_t v410;
  uint64_t v411;
  _OWORD *v412;
  char *v413;
  uint64_t v414;
  __int128 v415;
  unint64_t *v416;
  _QWORD *v417;
  uint64_t v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  float *v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t *v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  float *v469;
  float *v470;
  uint64_t *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  uint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  _QWORD *v481;
  uint64_t v482;
  _QWORD *v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  unint64_t *v492;
  unint64_t *v493;
  _QWORD *v494;
  uint64_t v495;
  _QWORD *v496;
  unint64_t *v497;
  uint64_t v498;
  _QWORD *v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t *v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  float *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  BOOL v556;
  uint64_t *v557;
  uint64_t v558;
  uint64_t i;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  BOOL v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t j;
  unint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  BOOL v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  BOOL v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v653;
  unint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  BOOL v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t *v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v670;
  uint64_t v671;
  unint64_t *v672;
  unint64_t v673;
  unint64_t v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v699;
  unint64_t v700;
  uint64_t v701;
  unint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  float *v713;
  float *v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t mm;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v747;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t *v758;
  unint64_t v759;
  _QWORD *v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  float *v767;
  float *v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t nn;
  unint64_t v772;
  unint64_t v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unint64_t v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  unint64_t *v810;
  unint64_t v811;
  _QWORD *v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  float *v819;
  float *v820;
  uint64_t *v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t *v824;
  unint64_t v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  _QWORD *v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t *v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  uint64_t v878;
  uint64_t v879;
  unint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v885;
  unint64_t v886;
  uint64_t v887;
  unint64_t v888;
  uint64_t v889;
  unint64_t *v890;
  unint64_t v891;
  _QWORD *v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t *v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  uint64_t v919;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  unint64_t v928;
  unint64_t v929;
  uint64_t v930;
  unint64_t v931;
  uint64_t v932;
  unint64_t *v933;
  unint64_t v934;
  _QWORD *v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t *v942;
  std::__shared_weak_count *v943;
  std::__shared_weak_count *v944;
  unint64_t *p_shared_owners;
  _QWORD *v946;
  unint64_t v947;
  unint64_t *p_shared_weak_owners;
  unint64_t v949;
  unint64_t v950;
  std::__shared_weak_count *v951;
  unint64_t *v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t i1;
  uint64_t v960;
  uint64_t i2;
  uint64_t v962;
  _QWORD *v963;
  _QWORD *v964;
  uint64_t v965;
  _QWORD *v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  _QWORD *v970;
  _QWORD *v971;
  uint64_t v973;
  _QWORD *v974;
  _QWORD *v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  _QWORD *v981;
  _QWORD *v982;
  uint64_t v983;
  unint64_t *v984;
  unint64_t *v985;
  _QWORD *v986;
  _QWORD *v987;
  _QWORD *v988;
  uint64_t v989;
  _QWORD *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  _QWORD *v994;
  _QWORD *v995;
  unint64_t *v996;
  unint64_t *v997;
  uint64_t v998;
  _QWORD *v999;
  uint64_t v1000;
  double v1001;
  _QWORD *v1002;
  _QWORD *v1003;
  _QWORD *v1004;
  uint64_t v1005;
  _QWORD *v1006;
  uint64_t v1007;
  uint64_t *v1008;
  unint64_t *v1009;
  _QWORD *v1010;
  _QWORD *v1011;
  uint64_t v1012;
  _QWORD *v1013;
  _QWORD *v1014;
  _QWORD *v1015;
  uint64_t v1016;
  _QWORD *v1017;
  uint64_t v1018;
  unint64_t *v1019;
  uint64_t *v1020;
  _QWORD *v1021;
  _QWORD *v1022;
  uint64_t v1023;
  int8x8_t v1024;
  uint8x8_t v1025;
  uint64_t v1026;
  unint64_t v1027;
  unint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1043;
  uint64_t *v1044;
  uint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1056;
  uint64_t v1057;
  unint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1063;
  uint64_t *v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1083;
  uint64_t *v1084;
  uint64_t v1085;
  uint64_t v1086;
  unint64_t *v1087;
  unint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1097;
  uint64_t v1098;
  unint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  unint64_t *v1108;
  unint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1118;
  uint64_t v1119;
  unint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1125;
  uint64_t v1126;
  float *v1127;
  unint64_t *v1128;
  uint64_t *v1129;
  uint64_t v1130;
  unint64_t *v1131;
  uint64_t *v1132;
  uint64_t v1133;
  unint64_t *v1134;
  uint64_t *i3;
  float *v1136;
  unint64_t *v1137;
  uint64_t *v1138;
  uint64_t v1139;
  unint64_t *v1140;
  uint64_t *v1141;
  uint64_t v1142;
  unint64_t *v1143;
  uint64_t *i4;
  _QWORD *v1145;
  _QWORD *v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  _QWORD *v1151;
  uint64_t v1152;
  _QWORD *v1153;
  _QWORD *v1154;
  uint64_t v1155;
  _QWORD *v1156;
  uint64_t v1157;
  uint64_t *v1158;
  unint64_t *v1159;
  _QWORD *v1160;
  _QWORD *v1161;
  float *v1162;
  unint64_t *v1163;
  uint64_t *v1164;
  uint64_t v1165;
  unint64_t *v1166;
  uint64_t *v1167;
  uint64_t v1168;
  uint64_t *i5;
  unint64_t *v1170;
  unint64_t *v1171;
  unint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  unint64_t v1180;
  uint64_t v1181;
  uint64_t v1183;
  uint64_t v1184;
  unint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  unint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  unint64_t v1193;
  uint64_t v1194;
  BOOL v1195;
  unint64_t *v1196;
  unint64_t v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  unint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1206;
  unint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  unint64_t v1215;
  unint64_t v1216;
  uint64_t v1217;
  unint64_t v1218;
  uint64_t v1219;
  BOOL v1220;
  unint64_t *v1221;
  unint64_t v1222;
  unint64_t v1223;
  uint64_t v1224;
  unint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  uint64_t v1231;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  unint64_t v1240;
  unint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  BOOL v1245;
  unint64_t *v1246;
  unint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1256;
  unint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  unint64_t v1262;
  uint64_t v1263;
  unint64_t v1265;
  unint64_t v1266;
  uint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  BOOL v1270;
  uint64_t v1271;
  unint64_t v1272;
  unint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  unint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  uint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  unint64_t v1298;
  unint64_t v1299;
  uint64_t v1300;
  unint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  unint64_t v1305;
  uint64_t v1306;
  unint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  unint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  unint64_t v1336;
  unint64_t v1337;
  uint64_t v1338;
  unint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  uint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  unint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  unint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  unint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  unint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  unint64_t v1393;
  uint64_t v1394;
  uint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  unint64_t v1403;
  uint64_t v1404;
  unint64_t v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  unint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1426;
  unint64_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  unint64_t v1432;
  uint64_t v1433;
  uint64_t v1435;
  uint64_t v1436;
  unint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  unint64_t v1442;
  unint64_t v1443;
  unint64_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  unint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  uint64_t v1465;
  unint64_t v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1474;
  uint64_t v1475;
  unint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  unint64_t v1481;
  unint64_t v1482;
  unint64_t v1483;
  uint64_t v1484;
  unint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  unint64_t v1493;
  unint64_t v1494;
  uint64_t v1495;
  unint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  unint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  unint64_t v1502;
  uint64_t v1503;
  uint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  unint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  unint64_t v1511;
  uint64_t v1512;
  uint64_t v1514;
  uint64_t v1515;
  unint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  unint64_t v1521;
  unint64_t v1522;
  unint64_t v1523;
  uint64_t v1524;
  unint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  unint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  unint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  unint64_t v1541;
  uint64_t v1542;
  uint64_t v1544;
  unint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  uint64_t v1553;
  unint64_t v1554;
  uint64_t v1555;
  unint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  unint64_t v1559;
  uint64_t v1560;
  unint64_t v1562;
  unint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  unint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  unint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  uint64_t v1579;
  unint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  unint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  unint64_t v1586;
  uint64_t v1587;
  uint64_t v1589;
  unint64_t v1590;
  uint64_t v1591;
  unint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  unint64_t v1595;
  uint64_t v1596;
  uint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  unint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  uint64_t v1608;
  unint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  unint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  unint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  unint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  unint64_t v1625;
  uint64_t v1626;
  uint64_t v1628;
  unint64_t v1629;
  uint64_t v1630;
  unint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  unint64_t v1634;
  uint64_t v1635;
  uint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  unint64_t v1644;
  unint64_t v1645;
  unint64_t v1646;
  uint64_t v1647;
  unint64_t v1648;
  uint64_t v1649;
  float *v1650;
  uint64_t v1651;
  unint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  unint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  unint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  unint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  uint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  unint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  uint64_t v1677;
  uint64_t v1678;
  unint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  unint64_t v1684;
  unint64_t v1685;
  unint64_t v1686;
  uint64_t v1687;
  unint64_t v1688;
  uint64_t v1689;
  float *v1690;
  uint64_t v1691;
  unint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  unint64_t v1695;
  unint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  unint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  unint64_t v1704;
  uint64_t v1705;
  uint64_t v1707;
  unint64_t v1708;
  uint64_t v1709;
  unint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  unint64_t v1713;
  uint64_t v1714;
  uint64_t v1716;
  unint64_t v1717;
  uint64_t v1718;
  unint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  unint64_t v1722;
  uint64_t v1723;
  unint64_t v1725;
  unint64_t v1726;
  unint64_t v1727;
  uint64_t v1728;
  unint64_t v1729;
  uint64_t v1730;
  float *v1731;
  uint64_t v1732;
  unint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  unint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  unint64_t v1740;
  unint64_t v1741;
  uint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  unint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  uint64_t v1752;
  unint64_t v1753;
  uint64_t v1754;
  unint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unint64_t v1758;
  uint64_t v1759;
  uint64_t v1761;
  uint64_t v1762;
  unint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  unint64_t v1768;
  unint64_t v1769;
  unint64_t v1770;
  uint64_t v1771;
  unint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  unint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  unint64_t v1780;
  unint64_t v1781;
  uint64_t v1782;
  unint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  unint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  unint64_t v1789;
  uint64_t v1790;
  uint64_t v1792;
  unint64_t v1793;
  uint64_t v1794;
  unint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  unint64_t v1798;
  uint64_t v1799;
  uint64_t v1801;
  uint64_t v1802;
  unint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  unint64_t v1808;
  unint64_t v1809;
  unint64_t v1810;
  uint64_t v1811;
  unint64_t v1812;
  uint64_t v1813;
  float *v1814;
  uint64_t v1815;
  unint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  unint64_t v1820;
  unint64_t v1821;
  uint64_t v1822;
  unint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  unint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  unint64_t v1829;
  uint64_t v1830;
  uint64_t v1832;
  unint64_t v1833;
  uint64_t v1834;
  unint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  unint64_t v1838;
  uint64_t v1839;
  uint64_t v1841;
  uint64_t v1842;
  unint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  unint64_t v1848;
  unint64_t v1849;
  unint64_t v1850;
  uint64_t v1851;
  unint64_t v1852;
  uint64_t v1853;
  float *v1854;
  uint64_t v1855;
  unint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  unint64_t v1859;
  unint64_t v1860;
  uint64_t v1861;
  unint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  unint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  unint64_t v1868;
  uint64_t v1869;
  uint64_t v1871;
  unint64_t v1872;
  uint64_t v1873;
  unint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  unint64_t v1877;
  uint64_t v1878;
  uint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  unint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  unint64_t v1886;
  uint64_t v1887;
  unint64_t v1889;
  unint64_t v1890;
  unint64_t v1891;
  uint64_t v1892;
  unint64_t v1893;
  uint64_t v1894;
  float *v1895;
  uint64_t v1896;
  unint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  unint64_t v1901;
  uint64_t v1902;
  double v1903;
  int v1904;
  _QWORD *v1905;
  _QWORD *v1906;
  char *__p;
  char *v1908;
  _QWORD *v1909;
  char *v1910;
  _DWORD *v1911;
  uint64_t v1912;
  unint64_t v1913;
  int v1914;
  unint64_t v1915;
  int v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  void *v1920;
  unint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  unint64_t v1926;
  uint64_t v1927;
  unint64_t v1928;
  uint64_t v1929;
  unint64_t v1930;
  uint64_t *v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  int v1940;
  unint64_t v1941;
  __int128 v1942;
  unint64_t v1943;
  uint64_t v1944;
  id v1945;
  unint64_t v1946;
  __int128 v1947;
  unint64_t v1948;
  __int128 v1949;
  uint64_t v1950;

  v1904 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 3776);
  md::LayoutContext::frameState(this);
  v5 = *(double *)(v4 + 88);
  v1905 = a1;
  v6 = a1[15];
  v7 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v6);
  v8 = (uint64_t *)v7[7];
  v9 = (uint64_t *)v7[8];
  if (v8 != v9)
  {
    v10 = (unint64_t *)v7[10];
    do
    {
      v11 = *v8;
      v12 = *v10;
      v13 = (unsigned __int16)*v10;
      if (*(unsigned __int16 *)(v6 + 40) != v13
        || (v14 = *(_QWORD *)(v6 + 48), HIDWORD(v12) >= (unint64_t)((*(_QWORD *)(v6 + 56) - v14) >> 3))
        || (v15 = (unsigned __int16 *)(v14 + 8 * HIDWORD(v12)), *v15 != v13)
        || v15[1] != WORD1(v12)
        || *((_DWORD *)v15 + 1) != HIDWORD(v12))
      {
        v16 = (uint64_t *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v6);
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v16, v11);
      }
      v10 += 2;
      ++v8;
    }
    while (v8 != v9);
  }
  v17 = v1905[15];
  v18 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v17);
  v19 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>(v17);
  v20 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v17);
  v21 = (_QWORD *)v20;
  v22 = v20 + 32;
  v24 = v18[7];
  v23 = v18[8];
  if (v19[8] - v19[7] >= (unint64_t)(v23 - v24))
    v25 = v18 + 4;
  else
    v25 = v19 + 4;
  if (*(_QWORD *)(v20 + 64) - *(_QWORD *)(v20 + 56) >= v25[4] - v25[3])
    v26 = v25;
  else
    v26 = (_QWORD *)(v20 + 32);
  if (v23 != v24 && v18 + 4 == v26)
  {
    v540 = (float *)(v18[10] + 8);
    do
    {
      v541 = *(unsigned int *)(v24 + 4);
      v542 = v541 >> 7;
      v543 = v19[4];
      if (v541 >> 7 < (v19[5] - v543) >> 3)
      {
        v544 = *(_QWORD *)(v543 + 8 * v542);
        if (v544)
        {
          v545 = *(unsigned __int16 *)(v544 + 2 * (v541 & 0x7F));
          v547 = v19[7];
          v546 = v19[8];
          if (v545 < (v546 - v547) >> 3)
          {
            v548 = v547 + 8 * v545;
            if (v548 != v546 && *(_DWORD *)(v548 + 4) == (_DWORD)v541)
            {
              v550 = v21[4];
              if (v542 < (v21[5] - v550) >> 3)
              {
                v551 = *(_QWORD *)(v550 + 8 * v542);
                if (v551)
                {
                  v552 = *(unsigned __int16 *)(v551 + 2 * (v541 & 0x7F));
                  v554 = v21[7];
                  v553 = v21[8];
                  if (v552 < (v553 - v554) >> 3)
                  {
                    v555 = v554 + 8 * v552;
                    v556 = v555 != v553 && *(_DWORD *)(v555 + 4) == (_DWORD)v541;
                    if (v556 && fabsf(*v540 + -1.0) <= 0.000001)
                    {
                      v1934 = *(_QWORD *)v24;
                      v557 = (uint64_t *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v17);
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v557, v1934);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v24 += 8;
      v540 += 6;
    }
    while (v24 != v23);
  }
  if (v19 + 4 == v26)
  {
    v558 = v19[7];
    for (i = v19[8]; v558 != i; v558 += 8)
    {
      v560 = *(unsigned int *)(v558 + 4);
      v561 = v560 >> 7;
      v562 = v18[4];
      v563 = (v18[5] - v562) >> 3;
      if (v560 >> 7 < v563)
      {
        v564 = *(_QWORD *)(v562 + 8 * v561);
        if (v564)
        {
          v565 = *(unsigned __int16 *)(v564 + 2 * (v560 & 0x7F));
          v567 = v18[7];
          v566 = v18[8];
          v568 = (v566 - v567) >> 3;
          if (v568 > v565)
          {
            v569 = v567 + 8 * v565;
            if (v569 != v566 && *(_DWORD *)(v569 + 4) == (_DWORD)v560)
            {
              v571 = v21[4];
              if (v561 < (v21[5] - v571) >> 3)
              {
                v572 = *(_QWORD *)(v571 + 8 * v561);
                if (v572)
                {
                  v573 = *(unsigned __int16 *)(v572 + 2 * (v560 & 0x7F));
                  v575 = v21[7];
                  v574 = v21[8];
                  if (v573 < (v574 - v575) >> 3)
                  {
                    v576 = v575 + 8 * v573;
                    if (v576 != v574 && *(_DWORD *)(v576 + 4) == (_DWORD)v560)
                    {
                      if ((v578 = *(_QWORD *)v558, v579 = *(_QWORD *)v558 >> 39, v579 < v563)
                        && (v580 = *(_QWORD *)(v562 + 8 * v579)) != 0
                        && (v581 = *(unsigned __int16 *)(v580 + 2 * (HIDWORD(v578) & 0x7F)), v568 > v581)
                        && ((v582 = v567 + 8 * v581, v582 != v566)
                          ? (v583 = *(_DWORD *)(v582 + 4) == HIDWORD(v578))
                          : (v583 = 0),
                            v583))
                      {
                        v584 = v18[10] + 24 * v581;
                      }
                      else
                      {
                        v584 = v18[11];
                      }
                      if (fabsf(*(float *)(v584 + 8) + -1.0) <= 0.000001)
                      {
                        v585 = (uint64_t *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v17);
                        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v585, v578);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_QWORD *)v22 == v26)
  {
    v586 = v21[7];
    for (j = v21[8]; v586 != j; v586 += 8)
    {
      v588 = *(unsigned int *)(v586 + 4);
      v589 = v588 >> 7;
      v590 = v18[4];
      v591 = (v18[5] - v590) >> 3;
      if (v588 >> 7 < v591)
      {
        v592 = *(_QWORD *)(v590 + 8 * v589);
        if (v592)
        {
          v593 = *(unsigned __int16 *)(v592 + 2 * (v588 & 0x7F));
          v595 = v18[7];
          v594 = v18[8];
          v596 = (v594 - v595) >> 3;
          if (v596 > v593)
          {
            v597 = v595 + 8 * v593;
            if (v597 != v594 && *(_DWORD *)(v597 + 4) == (_DWORD)v588)
            {
              v599 = v19[4];
              if (v589 < (v19[5] - v599) >> 3)
              {
                v600 = *(_QWORD *)(v599 + 8 * v589);
                if (v600)
                {
                  v601 = *(unsigned __int16 *)(v600 + 2 * (v588 & 0x7F));
                  v603 = v19[7];
                  v602 = v19[8];
                  if (v601 < (v602 - v603) >> 3)
                  {
                    v604 = v603 + 8 * v601;
                    if (v604 != v602 && *(_DWORD *)(v604 + 4) == (_DWORD)v588)
                    {
                      if ((v606 = *(_QWORD *)v586, v607 = *(_QWORD *)v586 >> 39, v607 < v591)
                        && (v608 = *(_QWORD *)(v590 + 8 * v607)) != 0
                        && (v609 = *(unsigned __int16 *)(v608 + 2 * (HIDWORD(v606) & 0x7F)), v596 > v609)
                        && ((v610 = v595 + 8 * v609, v610 != v594)
                          ? (v611 = *(_DWORD *)(v610 + 4) == HIDWORD(v606))
                          : (v611 = 0),
                            v611))
                      {
                        v612 = v18[10] + 24 * v609;
                      }
                      else
                      {
                        v612 = v18[11];
                      }
                      if (fabsf(*(float *)(v612 + 8) + -1.0) <= 0.000001)
                      {
                        v613 = (uint64_t *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v17);
                        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v613, v606);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)&v1947 = v1905[15];
  v1943 = 0;
  v1944 = 0;
  v1945 = 0;
  v28 = (_QWORD *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v1947);
  v29 = gdc::Registry::storage<arComponents::AnimationInfo>(v1947);
  v30 = (_QWORD *)v29;
  v31 = v29 + 32;
  v33 = v28[7];
  v32 = v28[8];
  if (*(_QWORD *)(v29 + 64) - *(_QWORD *)(v29 + 56) >= (unint64_t)(v32 - v33))
    v34 = v28 + 4;
  else
    v34 = (_QWORD *)(v29 + 32);
  if (v28 + 4 == v34)
  {
    *(_QWORD *)&v1949 = v1905 + 16;
    *((_QWORD *)&v1949 + 1) = &v1947;
    v1950 = (uint64_t)&v1943;
    while (v33 != v32)
    {
      v615 = *(unsigned int *)(v33 + 4);
      v616 = v30[4];
      v617 = (v30[5] - v616) >> 3;
      if (v615 >> 7 < v617)
      {
        v618 = *(_QWORD *)(v616 + 8 * (v615 >> 7));
        if (v618)
        {
          v619 = *(unsigned __int16 *)(v618 + 2 * (v615 & 0x7F));
          v621 = v30[7];
          v620 = v30[8];
          v622 = (v620 - v621) >> 3;
          if (v622 > v619)
          {
            v623 = v621 + 8 * v619;
            if (v623 != v620 && *(_DWORD *)(v623 + 4) == (_DWORD)v615)
            {
              v625 = *(_QWORD *)v33;
              v626 = *(_QWORD *)v33 >> 39;
              if (v626 < v617
                && (v627 = *(_QWORD *)(v616 + 8 * v626)) != 0
                && (v628 = *(unsigned __int16 *)(v627 + 2 * (HIDWORD(v625) & 0x7F)), v622 > v628)
                && ((v629 = v621 + 8 * v628, v629 != v620)
                  ? (v630 = *(_DWORD *)(v629 + 4) == HIDWORD(v625))
                  : (v630 = 0),
                    v630))
              {
                v614 = v30[10] + 16 * v628;
              }
              else
              {
                v614 = v30[11];
              }
              stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t)&v1949, v625, *(_QWORD *)v614, *(_QWORD *)(v614 + 8));
            }
          }
        }
      }
      v33 += 8;
    }
  }
  if ((_QWORD *)v31 == v34)
  {
    *(_QWORD *)&v1949 = v1905 + 16;
    *((_QWORD *)&v1949 + 1) = &v1947;
    v1950 = (uint64_t)&v1943;
    v631 = v30[7];
    v632 = v30[8];
    if (v631 != v632)
    {
      v633 = (uint64_t *)(v30[10] + 8);
      do
      {
        v634 = *(unsigned int *)(v631 + 4);
        v635 = v28[4];
        if (v634 >> 7 < (v28[5] - v635) >> 3)
        {
          v636 = *(_QWORD *)(v635 + 8 * (v634 >> 7));
          if (v636)
          {
            v637 = *(unsigned __int16 *)(v636 + 2 * (v634 & 0x7F));
            v639 = v28[7];
            v638 = v28[8];
            if (v637 < (v638 - v639) >> 3)
            {
              v640 = v639 + 8 * v637;
              if (v640 != v638 && *(_DWORD *)(v640 + 4) == (_DWORD)v634)
                stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t)&v1949, *(_QWORD *)v631, *(v633 - 1), *v633);
            }
          }
        }
        v631 += 8;
        v633 += 2;
      }
      while (v631 != v632);
    }
  }
  v35 = v1947;
  v36 = (unint64_t *)v1943;
  v37 = (unint64_t *)v1944;
  if (v1943 != v1944)
  {
    do
    {
      v38 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v35);
      gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(v38, *v36++);
    }
    while (v36 != v37);
    v35 = v1947;
    v36 = (unint64_t *)v1943;
    v39 = (unint64_t *)v1944;
    if (v1943 != v1944)
    {
      do
      {
        v40 = (_QWORD *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v35);
        gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::remove(v40, *v36++);
      }
      while (v36 != v39);
      v35 = v1947;
      v36 = (unint64_t *)v1943;
      v41 = (unint64_t *)v1944;
      if (v1943 != v1944)
      {
        do
        {
          v42 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v35);
          gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::remove(v42, *v36++);
        }
        while (v36 != v41);
        v36 = (unint64_t *)v1943;
        v35 = v1947;
      }
    }
  }
  v1944 = (uint64_t)v36;
  v43 = (_QWORD *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>(v35);
  v44 = gdc::Registry::storage<arComponents::AnimationInfo>(v35);
  v45 = (_QWORD *)v44;
  v46 = v44 + 32;
  v48 = v43[7];
  v47 = v43[8];
  if (*(_QWORD *)(v44 + 64) - *(_QWORD *)(v44 + 56) >= (unint64_t)(v47 - v48))
    v49 = v43 + 4;
  else
    v49 = (_QWORD *)(v44 + 32);
  if (v43 + 4 == v49)
  {
    *(_QWORD *)&v1949 = v1905 + 16;
    *((_QWORD *)&v1949 + 1) = &v1947;
    v1950 = (uint64_t)&v1943;
    while (v48 != v47)
    {
      v643 = *(unsigned int *)(v48 + 4);
      v644 = v45[4];
      v645 = (v45[5] - v644) >> 3;
      if (v643 >> 7 < v645)
      {
        v646 = *(_QWORD *)(v644 + 8 * (v643 >> 7));
        if (v646)
        {
          v647 = *(unsigned __int16 *)(v646 + 2 * (v643 & 0x7F));
          v649 = v45[7];
          v648 = v45[8];
          v650 = (v648 - v649) >> 3;
          if (v650 > v647)
          {
            v651 = v649 + 8 * v647;
            if (v651 != v648 && *(_DWORD *)(v651 + 4) == (_DWORD)v643)
            {
              v653 = *(_QWORD *)v48;
              v654 = *(_QWORD *)v48 >> 39;
              if (v654 < v645
                && (v655 = *(_QWORD *)(v644 + 8 * v654)) != 0
                && (v656 = *(unsigned __int16 *)(v655 + 2 * (HIDWORD(v653) & 0x7F)), v650 > v656)
                && ((v657 = v649 + 8 * v656, v657 != v648)
                  ? (v658 = *(_DWORD *)(v657 + 4) == HIDWORD(v653))
                  : (v658 = 0),
                    v658))
              {
                v642 = v45[10] + 16 * v656;
              }
              else
              {
                v642 = v45[11];
              }
              stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1949, v653, *(_QWORD *)v642, *(_QWORD *)(v642 + 8));
            }
          }
        }
      }
      v48 += 8;
    }
  }
  v50 = v1905;
  if ((_QWORD *)v46 == v49)
  {
    *(_QWORD *)&v1949 = v1905 + 16;
    *((_QWORD *)&v1949 + 1) = &v1947;
    v1950 = (uint64_t)&v1943;
    v659 = v45[7];
    v660 = v45[8];
    if (v659 != v660)
    {
      v661 = (uint64_t *)(v45[10] + 8);
      do
      {
        v662 = *(unsigned int *)(v659 + 4);
        v663 = v43[4];
        if (v662 >> 7 < (v43[5] - v663) >> 3)
        {
          v664 = *(_QWORD *)(v663 + 8 * (v662 >> 7));
          if (v664)
          {
            v665 = *(unsigned __int16 *)(v664 + 2 * (v662 & 0x7F));
            v667 = v43[7];
            v666 = v43[8];
            if (v665 < (v666 - v667) >> 3)
            {
              v668 = v667 + 8 * v665;
              if (v668 != v666 && *(_DWORD *)(v668 + 4) == (_DWORD)v662)
                stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1949, *(_QWORD *)v659, *(v661 - 1), *v661);
            }
          }
        }
        v659 += 8;
        v661 += 2;
      }
      while (v659 != v660);
    }
  }
  v52 = (unint64_t *)v1943;
  v51 = (unint64_t *)v1944;
  if (v1943 != v1944)
  {
    v53 = v1947;
    do
    {
      v54 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v53);
      gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(v54, *v52++);
    }
    while (v52 != v51);
    v52 = (unint64_t *)v1943;
    v55 = (unint64_t *)v1944;
    if (v1943 != v1944)
    {
      v56 = v1947;
      do
      {
        v57 = (_QWORD *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>(v56);
        gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>::remove(v57, *v52++);
      }
      while (v52 != v55);
      v52 = (unint64_t *)v1943;
      v58 = (unint64_t *)v1944;
      if (v1943 != v1944)
      {
        v59 = v1947;
        do
        {
          v60 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v59);
          gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::remove(v60, *v52++);
        }
        while (v52 != v58);
        v52 = (unint64_t *)v1943;
      }
    }
  }
  if (v52)
  {
    v1944 = (uint64_t)v52;
    operator delete(v52);
  }
  v61 = (uint64_t *)v1905[15];
  JumpAndRotate = (_QWORD *)gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>((uint64_t)v61);
  v63 = (_QWORD *)JumpAndRotate[7];
  v1906 = (_QWORD *)JumpAndRotate[8];
  if (v63 == v1906)
    goto LABEL_550;
  v1903 = v5;
  __p = 0;
  v1910 = 0;
  v64 = 0;
  v65 = (_DWORD *)JumpAndRotate[10];
  v1931 = v61 + 15;
  while (1)
  {
    v1909 = v63;
    v66 = *v63;
    v67 = v65[1];
    v1911 = v65;
    v1912 = v66;
    if ((unint64_t)v1910 < v64)
    {
      v1908 = (char *)v64;
      *(_QWORD *)v1910 = v66;
      v1910 += 8;
      goto LABEL_77;
    }
    v68 = (v1910 - __p) >> 3;
    v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 61)
      abort();
    if ((uint64_t)(v64 - (_QWORD)__p) >> 2 > v69)
      v69 = (uint64_t)(v64 - (_QWORD)__p) >> 2;
    if (v64 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v69;
    if (v70)
    {
      if (v70 >> 61)
        goto LABEL_2110;
      v71 = operator new(8 * v70);
    }
    else
    {
      v71 = 0;
    }
    v72 = &v71[8 * v68];
    *(_QWORD *)v72 = v1912;
    v73 = v72 + 8;
    v74 = __p;
    if (v1910 != __p)
    {
      v75 = v1910 - 8 - __p;
      if (v75 >= 0x168)
      {
        if (&v71[v1910 - __p - 8 - (v75 & 0xFFFFFFFFFFFFFFF8)] <= &v71[v1910 - __p - 8]
          && &v1910[-(v75 & 0xFFFFFFFFFFFFFFF8) - 8] <= v1910 - 8
          && (unint64_t)(__p - v71) >= 0x20)
        {
          v411 = (v75 >> 3) + 1;
          v76 = &v1910[-8 * (v411 & 0x3FFFFFFFFFFFFFFCLL)];
          v412 = &v71[8 * v68 - 16];
          v413 = v1910 - 16;
          v414 = v411 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v415 = *(_OWORD *)v413;
            *(v412 - 1) = *((_OWORD *)v413 - 1);
            *v412 = v415;
            v412 -= 2;
            v413 -= 32;
            v414 -= 4;
          }
          while (v414);
          v72 -= 8 * (v411 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = __p;
          if (v411 == (v411 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_74;
        }
        else
        {
          v76 = v1910;
          v74 = __p;
        }
      }
      else
      {
        v76 = v1910;
        v74 = __p;
      }
      do
      {
        v77 = *((_QWORD *)v76 - 1);
        v76 -= 8;
        *((_QWORD *)v72 - 1) = v77;
        v72 -= 8;
      }
      while (v76 != v74);
    }
LABEL_74:
    v1908 = &v71[8 * v70];
    if (v74)
      operator delete(v74);
    __p = v72;
    v1910 = v73;
    v65 = v1911;
    v66 = v1912;
LABEL_77:
    *(_QWORD *)&v1947 = v66;
    *((_QWORD *)&v1947 + 1) = 0xFFFFFFFFLL;
    LODWORD(v1949) = *v65;
    *(_QWORD *)((char *)&v1949 + 4) = 0;
    v1950 = MEMORY[0x1A1AF5730](VKAnimationCurveLinear);
    v1913 = gdc::Registry::create((gdc::Registry *)v61);
    v78 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationInfo>((uint64_t)v61);
    gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v78, v1913, &v1947);
    v79 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationDuration>((uint64_t)v61);
    gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(v79, v1913, (uint64_t *)&v1949);
    v80 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupParent>((uint64_t)v61);
    v1948 = v1913;
    v81 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v80 + 4, (uint64_t)&v1948);
    if ((v82 & 1) != 0)
    {
      v87 = (_BYTE *)v80[11];
      v86 = v80[12];
      if ((unint64_t)v87 >= v86)
      {
        v89 = (char *)v80[10];
        v90 = v87 - v89;
        v91 = v87 - v89 + 1;
        if (v91 < 0)
          abort();
        v92 = v86 - (_QWORD)v89;
        if (2 * v92 > v91)
          v91 = 2 * v92;
        if (v92 >= 0x3FFFFFFFFFFFFFFFLL)
          v93 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        if (v93)
          v94 = (char *)operator new(v93);
        else
          v94 = 0;
        v95 = &v94[v90];
        v88 = (uint64_t)&v94[v90 + 1];
        v96 = (char *)(v89 - v87);
        if (v89 == v87)
          v96 = 0;
        v80[10] = (uint64_t)&v96[(_QWORD)v95];
        v80[11] = v88;
        v80[12] = (uint64_t)&v94[v93];
        if (v89)
          operator delete(v89);
      }
      else
      {
        v88 = (uint64_t)(v87 + 1);
      }
      v80[11] = v88;
      v83 = v80[31];
    }
    else
    {
      v83 = v80[31];
      if (v80[10] + (((uint64_t)v81 - v80[7]) >> 3) != v80[11])
      {
        for (k = (_QWORD *)v80[16]; k; k = (_QWORD *)*k)
        {
          v1943 = (unint64_t)&v1948;
          v1944 = 1;
          *(_QWORD *)&v1942 = v83;
          v85 = k[6];
          if (!v85)
            goto LABEL_1456;
          (*(void (**)(uint64_t, __int128 *, unint64_t *))(*(_QWORD *)v85 + 48))(v85, &v1942, &v1943);
        }
        goto LABEL_102;
      }
    }
    for (m = (_QWORD *)v80[22]; m; m = (_QWORD *)*m)
    {
      v1943 = (unint64_t)&v1948;
      v1944 = 1;
      *(_QWORD *)&v1942 = v83;
      v98 = m[6];
      if (!v98)
        goto LABEL_1456;
      (*(void (**)(uint64_t, __int128 *, unint64_t *))(*(_QWORD *)v98 + 48))(v98, &v1942, &v1943);
    }
LABEL_102:
    v99 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v99, v1913);
    v100 = (uint64_t *)gdc::Registry::storage<arComponents::TimeBasedStart>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v100, v1913);
    started = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(started, v1913);

    *(_QWORD *)&v1947 = v1912;
    *((_QWORD *)&v1947 + 1) = 0x1FFFFFFFFLL;
    *(_QWORD *)&v1942 = v1913;
    LODWORD(v1948) = 0;
    v1949 = 0uLL;
    LODWORD(v1950) = 0;
    HIDWORD(v1950) = v67;
    v1943 = *((_QWORD *)v1911 + 1);
    LODWORD(v1944) = 0;
    v1945 = (id)MEMORY[0x1A1AF5730](VKAnimationCurveCubicEaseOut);
    v102 = gdc::Registry::create((gdc::Registry *)v61);
    gdc::Registry::add<arComponents::AnimationInfo,arComponents::AnimationGroupAssociation,arComponents::AnimationGroupProgress,arComponents::TimeBasedStart,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>,arComponents::AnimationDuration,arComponents::AnimationState<(VKAnimationState)0>>((uint64_t)v61, v102, &v1947, &v1942, &v1948, &v1949, (uint64_t *)&v1943);

    v1941 = v1913;
    *(_QWORD *)&v1942 = v1912;
    *((_QWORD *)&v1942 + 1) = 0x2FFFFFFFFLL;
    v1940 = 0;
    *(_QWORD *)&v1949 = 0;
    *((_QWORD *)&v1949 + 1) = v67;
    v1950 = 0;
    v103 = *((float *)v1911 + 2) + *((float *)v1911 + 3);
    LODWORD(v1943) = v1911[6];
    *((float *)&v1943 + 1) = v103;
    LODWORD(v1944) = 0;
    v1945 = (id)MEMORY[0x1A1AF5730](VKAnimationCurveCubicEaseOut);
    v104 = gdc::Registry::create((gdc::Registry *)v61);
    v105 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationInfo>((uint64_t)v61);
    gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v105, v104, &v1942);
    v106 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v106, v104, &v1941);
    v107 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupProgress>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v107, v104, &v1940);
    v108 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationDependencyOn>((uint64_t)v61);
    v1946 = v104;
    v109 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v108 + 4, (uint64_t)&v1946);
    if ((v110 & 1) != 0)
    {
      v116 = (char *)v108[11];
      v115 = v108[12];
      if ((unint64_t)v116 >= v115)
      {
        v118 = (char *)v108[10];
        v119 = (char *)(v116 - v118);
        v120 = (v116 - v118) >> 3;
        v121 = v120 + 1;
        if ((unint64_t)(v120 + 1) >> 61)
          abort();
        v122 = v115 - (_QWORD)v118;
        if (v122 >> 2 > v121)
          v121 = v122 >> 2;
        v123 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v121;
        if (v123)
        {
          if (v123 >> 61)
            goto LABEL_2110;
          v124 = v123;
          v125 = operator new(8 * v123);
          v123 = v124;
          v119 = (char *)(v116 - v118);
        }
        else
        {
          v125 = 0;
        }
        v126 = (unint64_t *)&v125[8 * v120];
        *v126 = v102;
        v117 = v126 + 1;
        if (v116 != v118)
        {
          v127 = v116 - v118 - 8;
          if (v127 < 0x58)
            goto LABEL_2118;
          if ((unint64_t)(v116 - v125 - (_QWORD)v119) < 0x20)
            goto LABEL_2118;
          v128 = (v127 >> 3) + 1;
          v129 = &v125[8 * v120 - 16];
          v130 = v116 - 16;
          v131 = v128 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v132 = *(_OWORD *)v130;
            *(v129 - 1) = *((_OWORD *)v130 - 1);
            *v129 = v132;
            v129 -= 2;
            v130 -= 32;
            v131 -= 4;
          }
          while (v131);
          v126 -= v128 & 0x3FFFFFFFFFFFFFFCLL;
          v116 -= 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
          if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_2118:
            do
            {
              v133 = *((_QWORD *)v116 - 1);
              v116 -= 8;
              *--v126 = v133;
            }
            while (v116 != v118);
          }
          v116 = (char *)v108[10];
        }
        v108[10] = (uint64_t)v126;
        v108[11] = (uint64_t)v117;
        v108[12] = (uint64_t)&v125[8 * v123];
        if (v116)
          operator delete(v116);
      }
      else
      {
        *(_QWORD *)v116 = v102;
        v117 = v116 + 8;
      }
      v108[11] = (uint64_t)v117;
      v112 = v108[31];
    }
    else
    {
      v111 = (_QWORD *)((char *)v109 + v108[10] - v108[7]);
      *v111 = v102;
      v112 = v108[31];
      if (v111 != (unint64_t *)v108[11])
      {
        for (n = (_QWORD *)v108[16]; n; n = (_QWORD *)*n)
        {
          *(_QWORD *)&v1947 = &v1946;
          *((_QWORD *)&v1947 + 1) = 1;
          v1948 = v112;
          v114 = n[6];
          if (!v114)
            goto LABEL_1456;
          (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v114 + 48))(v114, &v1948, &v1947);
        }
        goto LABEL_134;
      }
    }
    for (ii = (_QWORD *)v108[22]; ii; ii = (_QWORD *)*ii)
    {
      *(_QWORD *)&v1947 = &v1946;
      *((_QWORD *)&v1947 + 1) = 1;
      v1948 = v112;
      v135 = ii[6];
      if (!v135)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v135 + 48))(v135, &v1948, &v1947);
    }
LABEL_134:
    v136 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>((uint64_t)v61);
    gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v136, v104, &v1949);
    v137 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationDuration>((uint64_t)v61);
    gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(v137, v104, (uint64_t *)&v1943);
    v138 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v138, v104);

    *(_QWORD *)&v1947 = v1912;
    *((_QWORD *)&v1947 + 1) = 0x3FFFFFFFFLL;
    v1946 = v1913;
    LODWORD(v1941) = 0;
    v139 = v1911[9];
    *(_QWORD *)&v1949 = *((_QWORD *)v1911 + 5);
    DWORD2(v1949) = 0;
    v1950 = MEMORY[0x1A1AF5730](VKAnimationCurveEaseInOut);
    v140 = gdc::Registry::create((gdc::Registry *)v61);
    v141 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationInfo>((uint64_t)v61);
    gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v141, v140, &v1947);
    v142 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v142, v140, &v1946);
    v143 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupProgress>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v143, v140, &v1941);
    v144 = (uint64_t *)gdc::Registry::storage<arComponents::TimeBasedStart>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v144, v140);
    v145 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>((uint64_t)v61);
    v1948 = v140;
    v146 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v145 + 4, (uint64_t)&v1948);
    if ((v147 & 1) != 0)
    {
      v153 = (_QWORD *)v145[11];
      v152 = v145[12];
      if ((unint64_t)v153 >= v152)
      {
        v155 = (_QWORD *)v145[10];
        v156 = 0xAAAAAAAAAAAAAAABLL * (v153 - v155) + 1;
        if (v156 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v152 - (_QWORD)v155) >> 3);
        if (2 * v157 > v156)
          v156 = 2 * v157;
        v158 = v157 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v156;
        if (v158)
        {
          if (v158 > 0xAAAAAAAAAAAAAAALL)
LABEL_2110:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v159 = (char *)operator new(24 * v158);
        }
        else
        {
          v159 = 0;
        }
        v160 = &v159[8 * (v153 - v155)];
        *(_QWORD *)v160 = 0;
        *((_QWORD *)v160 + 1) = 0;
        *((_DWORD *)v160 + 4) = 0;
        *((_DWORD *)v160 + 5) = v139;
        v161 = (uint64_t)v160;
        if (v153 != v155)
        {
          do
          {
            v162 = *(_OWORD *)(v153 - 3);
            *(_QWORD *)(v161 - 8) = *(v153 - 1);
            *(_OWORD *)(v161 - 24) = v162;
            v161 -= 24;
            v153 -= 3;
          }
          while (v153 != v155);
          v153 = (_QWORD *)v145[10];
        }
        v154 = v160 + 24;
        v145[10] = v161;
        v145[11] = (uint64_t)(v160 + 24);
        v145[12] = (uint64_t)&v159[24 * v158];
        if (v153)
          operator delete(v153);
      }
      else
      {
        *v153 = 0;
        v153[1] = 0;
        *((_DWORD *)v153 + 4) = 0;
        v154 = v153 + 3;
        *((_DWORD *)v153 + 5) = v139;
      }
      v145[11] = (uint64_t)v154;
      v149 = v145[31];
    }
    else
    {
      v148 = v145[10] + 24 * (((uint64_t)v146 - v145[7]) >> 3);
      *(_QWORD *)v148 = 0;
      *(_QWORD *)(v148 + 8) = 0;
      *(_DWORD *)(v148 + 16) = 0;
      *(_DWORD *)(v148 + 20) = v139;
      v149 = v145[31];
      if (v148 != v145[11])
      {
        for (jj = (_QWORD *)v145[16]; jj; jj = (_QWORD *)*jj)
        {
          v1943 = (unint64_t)&v1948;
          v1944 = 1;
          *(_QWORD *)&v1942 = v149;
          v151 = jj[6];
          if (!v151)
            goto LABEL_1456;
          (*(void (**)(uint64_t, __int128 *, unint64_t *))(*(_QWORD *)v151 + 48))(v151, &v1942, &v1943);
        }
        goto LABEL_161;
      }
    }
    for (kk = (_QWORD *)v145[22]; kk; kk = (_QWORD *)*kk)
    {
      v1943 = (unint64_t)&v1948;
      v1944 = 1;
      *(_QWORD *)&v1942 = v149;
      v164 = kk[6];
      if (!v164)
        goto LABEL_1456;
      (*(void (**)(uint64_t, __int128 *, unint64_t *))(*(_QWORD *)v164 + 48))(v164, &v1942, &v1943);
    }
LABEL_161:
    v165 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationDuration>((uint64_t)v61);
    gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(v165, v140, (uint64_t *)&v1949);
    v166 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>((uint64_t)v61);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v166, v140);

    v167 = v1911;
    if ((int)v1911[17] >= 1)
    {
      v168 = *((float *)v1911 + 14);
      v169 = *((float *)v1911 + 15);
      v170 = v1911[13];
      *(_QWORD *)&v1947 = v1912;
      *((_QWORD *)&v1947 + 1) = 0x4FFFFFFFFLL;
      *(_QWORD *)&v1942 = v1913;
      LODWORD(v1948) = 0;
      v1949 = 0uLL;
      LODWORD(v1950) = 0;
      HIDWORD(v1950) = v170;
      v1943 = __PAIR64__(LODWORD(v169), LODWORD(v168));
      LODWORD(v1944) = 0;
      v1945 = (id)MEMORY[0x1A1AF5730](VKAnimationCurveEaseInOut);
      v1926 = gdc::Registry::create((gdc::Registry *)v61);
      gdc::Registry::add<arComponents::AnimationInfo,arComponents::AnimationGroupAssociation,arComponents::AnimationGroupProgress,arComponents::TimeBasedStart,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>,arComponents::AnimationDuration,arComponents::AnimationState<(VKAnimationState)0>>((uint64_t)v61, v1926, &v1947, &v1942, &v1948, &v1949, (uint64_t *)&v1943);

      v167 = v1911;
      if ((int)v1911[17] >= 1)
        break;
    }
LABEL_53:
    v65 = v167 + 18;
    v64 = (unint64_t)v1908;
    v63 = v1909 + 1;
    if (v1909 + 1 == v1906)
    {
      v50 = v1905;
      v5 = v1903;
      if (__p != v1910)
      {
        v416 = (unint64_t *)__p;
        do
        {
          v417 = (_QWORD *)gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>((uint64_t)v61);
          gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::remove(v417, *v416++);
        }
        while (v416 != (unint64_t *)v1910);
      }
      if (__p)
        operator delete(__p);
LABEL_550:
      v418 = v50[15];
      v419 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v418);
      v420 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>(v418);
      v421 = (_QWORD *)gdc::Registry::storage<arComponents::TimeBasedStart>(v418);
      v1932 = v418;
      v422 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v418);
      v423 = (_QWORD *)v422;
      v424 = v422 + 32;
      v425 = v419[7];
      v426 = v419[8];
      if (v420[8] - v420[7] >= (unint64_t)(v426 - v425))
        v427 = v419 + 4;
      else
        v427 = v420 + 4;
      if (v421[8] - v421[7] < v427[4] - v427[3])
        v427 = v421 + 4;
      if (*(_QWORD *)(v422 + 64) - *(_QWORD *)(v422 + 56) >= v427[4] - v427[3])
        v428 = v427;
      else
        v428 = (_QWORD *)(v422 + 32);
      if (v426 != v425 && v419 + 4 == v428)
      {
        v429 = (float *)(v419[10] + 4);
        do
        {
          v430 = *(unsigned int *)(v425 + 4);
          v431 = v430 >> 7;
          v432 = v420[4];
          v433 = (v420[5] - v432) >> 3;
          if (v430 >> 7 < v433)
          {
            v434 = *(_QWORD *)(v432 + 8 * v431);
            if (v434)
            {
              v435 = v430 & 0x7F;
              v436 = *(unsigned __int16 *)(v434 + 2 * v435);
              v438 = v420[7];
              v437 = v420[8];
              v439 = (v437 - v438) >> 3;
              if (v439 > v436)
              {
                v440 = v438 + 8 * v436;
                if (v440 != v437 && *(_DWORD *)(v440 + 4) == (_DWORD)v430)
                {
                  v442 = v421[4];
                  if (v431 < (v421[5] - v442) >> 3)
                  {
                    v443 = *(_QWORD *)(v442 + 8 * v431);
                    if (v443)
                    {
                      v444 = *(unsigned __int16 *)(v443 + 2 * v435);
                      v445 = v421[7];
                      v446 = v421[8];
                      if (v444 < (v446 - v445) >> 3)
                      {
                        v447 = v445 + 8 * v444;
                        if (v447 != v446 && *(_DWORD *)(v447 + 4) == (_DWORD)v430)
                        {
                          v449 = v423[4];
                          if (v431 < (v423[5] - v449) >> 3)
                          {
                            v450 = *(_QWORD *)(v449 + 8 * v431);
                            if (v450)
                            {
                              v451 = *(unsigned __int16 *)(v450 + 2 * v435);
                              v453 = v423[7];
                              v452 = v423[8];
                              if (v451 < (v452 - v453) >> 3)
                              {
                                v454 = v453 + 8 * v451;
                                if (v454 != v452 && *(_DWORD *)(v454 + 4) == (_DWORD)v430)
                                {
                                  v456 = *(_QWORD *)v425;
                                  v457 = *(_QWORD *)v425 >> 39;
                                  v1927 = v424;
                                  v1917 = *(_QWORD *)v425;
                                  if (v457 < v433
                                    && (v458 = *(_QWORD *)(v432 + 8 * v457)) != 0
                                    && (v459 = *(unsigned __int16 *)(v458 + 2 * (HIDWORD(v456) & 0x7F)), v439 > v459)
                                    && (v460 = v438 + 8 * v459, v460 != v437)
                                    && *(_DWORD *)(v460 + 4) == HIDWORD(v456))
                                  {
                                    v461 = (unint64_t *)(v420[10] + 8 * v459);
                                  }
                                  else
                                  {
                                    v461 = (unint64_t *)v420[11];
                                  }
                                  v1921 = *v461;
                                  v462 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1932);
                                  v463 = v462[4];
                                  if (v1921 >> 39 < (v462[5] - v463) >> 3
                                    && (v464 = *(_QWORD *)(v463 + 8 * (v1921 >> 39))) != 0
                                    && (v465 = *(unsigned __int16 *)(v464 + 2 * (HIDWORD(v1921) & 0x7F)),
                                        v467 = v462[7],
                                        v466 = v462[8],
                                        v465 < (v466 - v467) >> 3)
                                    && (v468 = v467 + 8 * v465, v468 != v466)
                                    && *(_DWORD *)(v468 + 4) == HIDWORD(v1921))
                                  {
                                    v469 = (float *)v462[11];
                                    v470 = (float *)(v462[10] + 24 * v465);
                                  }
                                  else
                                  {
                                    v469 = (float *)v462[11];
                                    v470 = v469;
                                  }
                                  v424 = v1927;
                                  if (v470 == v469)
                                    v470 = 0;
                                  if ((float)(*v470 * v470[2]) >= *v429)
                                  {
                                    v471 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v471, v1917);
                                    v424 = v1927;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v425 += 8;
          v429 += 6;
        }
        while (v425 != v426);
      }
      if (v420 + 4 == v428)
      {
        v670 = v420[7];
        v671 = v420[8];
        if (v670 != v671)
        {
          v672 = (unint64_t *)v420[10];
          do
          {
            v673 = *(unsigned int *)(v670 + 4);
            v674 = v673 >> 7;
            v675 = v419[4];
            v676 = (v419[5] - v675) >> 3;
            if (v673 >> 7 < v676)
            {
              v677 = *(_QWORD *)(v675 + 8 * v674);
              if (v677)
              {
                v678 = v673 & 0x7F;
                v679 = *(unsigned __int16 *)(v677 + 2 * v678);
                v681 = v419[7];
                v680 = v419[8];
                v682 = (v680 - v681) >> 3;
                if (v682 > v679)
                {
                  v683 = v681 + 8 * v679;
                  if (v683 != v680 && *(_DWORD *)(v683 + 4) == (_DWORD)v673)
                  {
                    v685 = v421[4];
                    if (v674 < (v421[5] - v685) >> 3)
                    {
                      v686 = *(_QWORD *)(v685 + 8 * v674);
                      if (v686)
                      {
                        v687 = *(unsigned __int16 *)(v686 + 2 * v678);
                        v688 = v421[7];
                        v689 = v421[8];
                        if (v687 < (v689 - v688) >> 3)
                        {
                          v690 = v688 + 8 * v687;
                          if (v690 != v689 && *(_DWORD *)(v690 + 4) == (_DWORD)v673)
                          {
                            v692 = v423[4];
                            if (v674 < (v423[5] - v692) >> 3)
                            {
                              v693 = *(_QWORD *)(v692 + 8 * v674);
                              if (v693)
                              {
                                v694 = *(unsigned __int16 *)(v693 + 2 * v678);
                                v696 = v423[7];
                                v695 = v423[8];
                                if (v694 < (v695 - v696) >> 3)
                                {
                                  v697 = v696 + 8 * v694;
                                  if (v697 != v695 && *(_DWORD *)(v697 + 4) == (_DWORD)v673)
                                  {
                                    v699 = *(_QWORD *)v670;
                                    v700 = *(_QWORD *)v670 >> 39;
                                    v1929 = v424;
                                    v1918 = *(_QWORD *)v670;
                                    if (v700 < v676
                                      && (v701 = *(_QWORD *)(v675 + 8 * v700)) != 0
                                      && (v702 = *(unsigned __int16 *)(v701 + 2 * (HIDWORD(v699) & 0x7F)), v682 > v702)
                                      && (v703 = v681 + 8 * v702, v703 != v680)
                                      && *(_DWORD *)(v703 + 4) == HIDWORD(v699))
                                    {
                                      v704 = v419[10] + 24 * v702;
                                    }
                                    else
                                    {
                                      v704 = v419[11];
                                    }
                                    v1923 = v704;
                                    v705 = *v672;
                                    v706 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1932);
                                    v707 = v706[4];
                                    if (v705 >> 39 < (v706[5] - v707) >> 3
                                      && (v708 = *(_QWORD *)(v707 + 8 * (v705 >> 39))) != 0
                                      && (v709 = *(unsigned __int16 *)(v708 + 2 * (HIDWORD(v705) & 0x7F)),
                                          v711 = v706[7],
                                          v710 = v706[8],
                                          v709 < (v710 - v711) >> 3)
                                      && (v712 = v711 + 8 * v709, v712 != v710)
                                      && *(_DWORD *)(v712 + 4) == HIDWORD(v705))
                                    {
                                      v713 = (float *)v706[11];
                                      v714 = (float *)(v706[10] + 24 * v709);
                                      v424 = v1929;
                                    }
                                    else
                                    {
                                      v713 = (float *)v706[11];
                                      v714 = v713;
                                      v424 = v1929;
                                    }
                                    if (v714 == v713)
                                      v714 = 0;
                                    if ((float)(*v714 * v714[2]) >= *(float *)(v1923 + 4))
                                    {
                                      v715 = v424;
                                      v716 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v716, v1918);
                                      v424 = v715;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v672;
            v670 += 8;
          }
          while (v670 != v671);
        }
      }
      if (v421 + 4 == v428)
      {
        v717 = v421[7];
        for (mm = v421[8]; v717 != mm; v717 += 8)
        {
          v719 = *(unsigned int *)(v717 + 4);
          v720 = v719 >> 7;
          v721 = v419[4];
          v722 = (v419[5] - v721) >> 3;
          if (v719 >> 7 < v722)
          {
            v723 = *(_QWORD *)(v721 + 8 * v720);
            if (v723)
            {
              v724 = v719 & 0x7F;
              v725 = *(unsigned __int16 *)(v723 + 2 * v724);
              v727 = v419[7];
              v726 = v419[8];
              v728 = (v726 - v727) >> 3;
              if (v728 > v725)
              {
                v729 = v727 + 8 * v725;
                if (v729 != v726 && *(_DWORD *)(v729 + 4) == (_DWORD)v719)
                {
                  v731 = v420[4];
                  v732 = (v420[5] - v731) >> 3;
                  if (v720 < v732)
                  {
                    v733 = *(_QWORD *)(v731 + 8 * v720);
                    if (v733)
                    {
                      v734 = *(unsigned __int16 *)(v733 + 2 * v724);
                      v736 = v420[7];
                      v735 = v420[8];
                      v737 = (v735 - v736) >> 3;
                      if (v737 > v734)
                      {
                        v738 = v736 + 8 * v734;
                        if (v738 != v735 && *(_DWORD *)(v738 + 4) == (_DWORD)v719)
                        {
                          v740 = v423[4];
                          if (v720 < (v423[5] - v740) >> 3)
                          {
                            v741 = *(_QWORD *)(v740 + 8 * v720);
                            if (v741)
                            {
                              v742 = *(unsigned __int16 *)(v741 + 2 * v724);
                              v744 = v423[7];
                              v743 = v423[8];
                              if (v742 < (v743 - v744) >> 3)
                              {
                                v745 = v744 + 8 * v742;
                                if (v745 != v743 && *(_DWORD *)(v745 + 4) == (_DWORD)v719)
                                {
                                  v747 = *(_QWORD *)v717;
                                  v748 = HIDWORD(*(_QWORD *)v717);
                                  v749 = *(_QWORD *)v717 >> 39;
                                  if (v749 < v722
                                    && (v750 = *(_QWORD *)(v721 + 8 * v749)) != 0
                                    && (v751 = *(unsigned __int16 *)(v750 + 2 * (HIDWORD(v747) & 0x7F)), v728 > v751)
                                    && (v752 = v727 + 8 * v751, v752 != v726)
                                    && *(_DWORD *)(v752 + 4) == (_DWORD)v748)
                                  {
                                    v753 = v419[10] + 24 * v751;
                                  }
                                  else
                                  {
                                    v753 = v419[11];
                                  }
                                  v1919 = *(_QWORD *)v717;
                                  v1924 = v753;
                                  if (v749 < v732
                                    && (v754 = *(_QWORD *)(v731 + 8 * v749)) != 0
                                    && (v755 = *(unsigned __int16 *)(v754 + 2 * (HIDWORD(v747) & 0x7F)), v737 > v755)
                                    && (v756 = v736 + 8 * v755, v756 != v735)
                                    && *(_DWORD *)(v756 + 4) == (_DWORD)v748)
                                  {
                                    v757 = v424;
                                    v758 = (unint64_t *)(v420[10] + 8 * v755);
                                  }
                                  else
                                  {
                                    v757 = v424;
                                    v758 = (unint64_t *)v420[11];
                                  }
                                  v759 = *v758;
                                  v760 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1932);
                                  v761 = v760[4];
                                  if (v759 >> 39 < (v760[5] - v761) >> 3
                                    && (v762 = *(_QWORD *)(v761 + 8 * (v759 >> 39))) != 0
                                    && (v763 = *(unsigned __int16 *)(v762 + 2 * (HIDWORD(v759) & 0x7F)),
                                        v765 = v760[7],
                                        v764 = v760[8],
                                        v763 < (v764 - v765) >> 3)
                                    && (v766 = v765 + 8 * v763, v766 != v764)
                                    && *(_DWORD *)(v766 + 4) == HIDWORD(v759))
                                  {
                                    v767 = (float *)v760[11];
                                    v768 = (float *)(v760[10] + 24 * v763);
                                  }
                                  else
                                  {
                                    v767 = (float *)v760[11];
                                    v768 = v767;
                                  }
                                  v424 = v757;
                                  if (v768 == v767)
                                    v768 = 0;
                                  if ((float)(*v768 * v768[2]) >= *(float *)(v1924 + 4))
                                  {
                                    v769 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v769, v1919);
                                    v424 = v757;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_QWORD *)v424 == v428)
      {
        v770 = v423[7];
        for (nn = v423[8]; v770 != nn; v770 += 8)
        {
          v772 = *(unsigned int *)(v770 + 4);
          v773 = v772 >> 7;
          v774 = v419[4];
          v775 = (v419[5] - v774) >> 3;
          if (v772 >> 7 < v775)
          {
            v776 = *(_QWORD *)(v774 + 8 * v773);
            if (v776)
            {
              v777 = v772 & 0x7F;
              v778 = *(unsigned __int16 *)(v776 + 2 * v777);
              v780 = v419[7];
              v779 = v419[8];
              v781 = (v779 - v780) >> 3;
              if (v781 > v778)
              {
                v782 = v780 + 8 * v778;
                if (v782 != v779 && *(_DWORD *)(v782 + 4) == (_DWORD)v772)
                {
                  v784 = v420[4];
                  v785 = (v420[5] - v784) >> 3;
                  if (v773 < v785)
                  {
                    v786 = *(_QWORD *)(v784 + 8 * v773);
                    if (v786)
                    {
                      v787 = *(unsigned __int16 *)(v786 + 2 * v777);
                      v789 = v420[7];
                      v788 = v420[8];
                      v790 = (v788 - v789) >> 3;
                      if (v790 > v787)
                      {
                        v791 = v789 + 8 * v787;
                        if (v791 != v788 && *(_DWORD *)(v791 + 4) == (_DWORD)v772)
                        {
                          v793 = v421[4];
                          if (v773 < (v421[5] - v793) >> 3)
                          {
                            v794 = *(_QWORD *)(v793 + 8 * v773);
                            if (v794)
                            {
                              v795 = *(unsigned __int16 *)(v794 + 2 * v777);
                              v797 = v421[7];
                              v796 = v421[8];
                              if (v795 < (v796 - v797) >> 3)
                              {
                                v798 = v797 + 8 * v795;
                                if (v798 != v796 && *(_DWORD *)(v798 + 4) == (_DWORD)v772)
                                {
                                  v800 = *(_QWORD *)v770;
                                  v801 = HIDWORD(*(_QWORD *)v770);
                                  v802 = *(_QWORD *)v770 >> 39;
                                  if (v802 < v775
                                    && (v803 = *(_QWORD *)(v774 + 8 * v802)) != 0
                                    && (v804 = *(unsigned __int16 *)(v803 + 2 * (HIDWORD(v800) & 0x7F)), v781 > v804)
                                    && (v805 = v780 + 8 * v804, v805 != v779)
                                    && *(_DWORD *)(v805 + 4) == (_DWORD)v801)
                                  {
                                    v806 = v419[10] + 24 * v804;
                                  }
                                  else
                                  {
                                    v806 = v419[11];
                                  }
                                  if (v802 < v785
                                    && (v807 = *(_QWORD *)(v784 + 8 * v802)) != 0
                                    && (v808 = *(unsigned __int16 *)(v807 + 2 * (HIDWORD(v800) & 0x7F)), v790 > v808)
                                    && (v809 = v789 + 8 * v808, v809 != v788)
                                    && *(_DWORD *)(v809 + 4) == (_DWORD)v801)
                                  {
                                    v810 = (unint64_t *)(v420[10] + 8 * v808);
                                  }
                                  else
                                  {
                                    v810 = (unint64_t *)v420[11];
                                  }
                                  v811 = *v810;
                                  v812 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1932);
                                  v813 = v812[4];
                                  if (v811 >> 39 < (v812[5] - v813) >> 3
                                    && (v814 = *(_QWORD *)(v813 + 8 * (v811 >> 39))) != 0
                                    && (v815 = *(unsigned __int16 *)(v814 + 2 * (HIDWORD(v811) & 0x7F)),
                                        v817 = v812[7],
                                        v816 = v812[8],
                                        v815 < (v816 - v817) >> 3)
                                    && (v818 = v817 + 8 * v815, v818 != v816)
                                    && *(_DWORD *)(v818 + 4) == HIDWORD(v811))
                                  {
                                    v819 = (float *)v812[11];
                                    v820 = (float *)(v812[10] + 24 * v815);
                                  }
                                  else
                                  {
                                    v819 = (float *)v812[11];
                                    v820 = v819;
                                  }
                                  if (v820 == v819)
                                    v820 = 0;
                                  if ((float)(*v820 * v820[2]) >= *(float *)(v806 + 4))
                                  {
                                    v821 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v821, v800);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v472 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1932);
      v473 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDependencyOn>(v1932);
      v474 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v1932);
      v475 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v1932);
      v476 = (_QWORD *)v475;
      v477 = v475 + 32;
      v479 = v472[7];
      v478 = v472[8];
      if (v473[8] - v473[7] >= (unint64_t)(v478 - v479))
        v480 = v472 + 4;
      else
        v480 = v473 + 4;
      if (v474[8] - v474[7] < v480[4] - v480[3])
        v480 = v474 + 4;
      if (*(_QWORD *)(v475 + 64) - *(_QWORD *)(v475 + 56) >= v480[4] - v480[3])
        v481 = v480;
      else
        v481 = (_QWORD *)(v475 + 32);
      if (v478 != v479 && v472 + 4 == v481)
      {
        do
        {
          v500 = *(unsigned int *)(v479 + 4);
          v501 = v500 >> 7;
          v502 = v473[4];
          v503 = (v473[5] - v502) >> 3;
          if (v500 >> 7 < v503)
          {
            v504 = *(_QWORD *)(v502 + 8 * v501);
            if (v504)
            {
              v505 = v500 & 0x7F;
              v506 = *(unsigned __int16 *)(v504 + 2 * v505);
              v508 = v473[7];
              v507 = v473[8];
              v509 = (v507 - v508) >> 3;
              if (v509 > v506)
              {
                v510 = v508 + 8 * v506;
                if (v510 != v507 && *(_DWORD *)(v510 + 4) == (_DWORD)v500)
                {
                  v512 = v474[4];
                  if (v501 < (v474[5] - v512) >> 3)
                  {
                    v513 = *(_QWORD *)(v512 + 8 * v501);
                    if (v513)
                    {
                      v514 = *(unsigned __int16 *)(v513 + 2 * v505);
                      v515 = v474[7];
                      v516 = v474[8];
                      if (v514 < (v516 - v515) >> 3)
                      {
                        v517 = v515 + 8 * v514;
                        if (v517 != v516 && *(_DWORD *)(v517 + 4) == (_DWORD)v500)
                        {
                          v519 = v476[4];
                          if (v501 < (v476[5] - v519) >> 3)
                          {
                            v520 = *(_QWORD *)(v519 + 8 * v501);
                            if (v520)
                            {
                              v521 = *(unsigned __int16 *)(v520 + 2 * v505);
                              v523 = v476[7];
                              v522 = v476[8];
                              if (v521 < (v522 - v523) >> 3)
                              {
                                v524 = v523 + 8 * v521;
                                if (v524 != v522 && *(_DWORD *)(v524 + 4) == (_DWORD)v500)
                                {
                                  v526 = *(_QWORD *)v479;
                                  v527 = *(_QWORD *)v479 >> 39;
                                  v1922 = *(_QWORD *)v479;
                                  if (v527 < v503
                                    && (v528 = *(_QWORD *)(v502 + 8 * v527)) != 0
                                    && (v529 = *(unsigned __int16 *)(v528 + 2 * (HIDWORD(v526) & 0x7F)), v509 > v529)
                                    && (v530 = v508 + 8 * v529, v530 != v507)
                                    && *(_DWORD *)(v530 + 4) == HIDWORD(v526))
                                  {
                                    v531 = (unint64_t *)(v473[10] + 8 * v529);
                                  }
                                  else
                                  {
                                    v531 = (unint64_t *)v473[11];
                                  }
                                  v1928 = *v531;
                                  v532 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(v1932);
                                  v533 = v532[4];
                                  if (v1928 >> 39 < (v532[5] - v533) >> 3)
                                  {
                                    v534 = *(_QWORD *)(v533 + 8 * (v1928 >> 39));
                                    if (v534)
                                    {
                                      v535 = *(unsigned __int16 *)(v534 + 2 * (HIDWORD(v1928) & 0x7F));
                                      v537 = v532[7];
                                      v536 = v532[8];
                                      if (v535 < (v536 - v537) >> 3)
                                      {
                                        v538 = v537 + 8 * v535;
                                        if (v538 != v536 && *(_DWORD *)(v538 + 4) == HIDWORD(v1928))
                                        {
                                          v539 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v539, v1922);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v479 += 8;
        }
        while (v479 != v478);
      }
      if (v473 + 4 == v481)
      {
        v822 = v473[7];
        v823 = v473[8];
        if (v822 != v823)
        {
          v824 = (unint64_t *)v473[10];
          do
          {
            v825 = *(unsigned int *)(v822 + 4);
            v826 = v825 >> 7;
            v827 = v472[4];
            if (v825 >> 7 < (v472[5] - v827) >> 3)
            {
              v828 = *(_QWORD *)(v827 + 8 * v826);
              if (v828)
              {
                v829 = v825 & 0x7F;
                v830 = *(unsigned __int16 *)(v828 + 2 * v829);
                v832 = v472[7];
                v831 = v472[8];
                if (v830 < (v831 - v832) >> 3)
                {
                  v833 = v832 + 8 * v830;
                  if (v833 != v831 && *(_DWORD *)(v833 + 4) == (_DWORD)v825)
                  {
                    v835 = v474[4];
                    if (v826 < (v474[5] - v835) >> 3)
                    {
                      v836 = *(_QWORD *)(v835 + 8 * v826);
                      if (v836)
                      {
                        v837 = *(unsigned __int16 *)(v836 + 2 * v829);
                        v839 = v474[7];
                        v838 = v474[8];
                        if (v837 < (v838 - v839) >> 3)
                        {
                          v840 = v839 + 8 * v837;
                          if (v840 != v838 && *(_DWORD *)(v840 + 4) == (_DWORD)v825)
                          {
                            v842 = v476[4];
                            if (v826 < (v476[5] - v842) >> 3)
                            {
                              v843 = *(_QWORD *)(v842 + 8 * v826);
                              if (v843)
                              {
                                v844 = *(unsigned __int16 *)(v843 + 2 * v829);
                                v846 = v476[7];
                                v845 = v476[8];
                                if (v844 < (v845 - v846) >> 3)
                                {
                                  v847 = v846 + 8 * v844;
                                  if (v847 != v845 && *(_DWORD *)(v847 + 4) == (_DWORD)v825)
                                  {
                                    v1925 = *(_QWORD *)v822;
                                    v1930 = *v824;
                                    v849 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(v1932);
                                    v850 = v849[4];
                                    if (v1930 >> 39 < (v849[5] - v850) >> 3)
                                    {
                                      v851 = *(_QWORD *)(v850 + 8 * (v1930 >> 39));
                                      if (v851)
                                      {
                                        v852 = *(unsigned __int16 *)(v851 + 2 * (HIDWORD(v1930) & 0x7F));
                                        v854 = v849[7];
                                        v853 = v849[8];
                                        if (v852 < (v853 - v854) >> 3)
                                        {
                                          v855 = v854 + 8 * v852;
                                          if (v855 != v853 && *(_DWORD *)(v855 + 4) == HIDWORD(v1930))
                                          {
                                            v856 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                            gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v856, v1925);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v824;
            v822 += 8;
          }
          while (v822 != v823);
        }
      }
      if (v474 + 4 == v481)
      {
        v857 = v474[7];
        v858 = v474[8];
        while (v857 != v858)
        {
          v859 = *(unsigned int *)(v857 + 4);
          v860 = v859 >> 7;
          v861 = v472[4];
          if (v859 >> 7 < (v472[5] - v861) >> 3)
          {
            v862 = *(_QWORD *)(v861 + 8 * v860);
            if (v862)
            {
              v863 = v859 & 0x7F;
              v864 = *(unsigned __int16 *)(v862 + 2 * v863);
              v866 = v472[7];
              v865 = v472[8];
              if (v864 < (v865 - v866) >> 3)
              {
                v867 = v866 + 8 * v864;
                if (v867 != v865 && *(_DWORD *)(v867 + 4) == (_DWORD)v859)
                {
                  v869 = v473[4];
                  v870 = (v473[5] - v869) >> 3;
                  if (v860 < v870)
                  {
                    v871 = *(_QWORD *)(v869 + 8 * v860);
                    if (v871)
                    {
                      v872 = *(unsigned __int16 *)(v871 + 2 * v863);
                      v874 = v473[7];
                      v873 = v473[8];
                      v875 = (v873 - v874) >> 3;
                      if (v875 > v872)
                      {
                        v876 = v874 + 8 * v872;
                        if (v876 != v873 && *(_DWORD *)(v876 + 4) == (_DWORD)v859)
                        {
                          v878 = v476[4];
                          if (v860 < (v476[5] - v878) >> 3)
                          {
                            v879 = *(_QWORD *)(v878 + 8 * v860);
                            if (v879)
                            {
                              v880 = *(unsigned __int16 *)(v879 + 2 * v863);
                              v882 = v476[7];
                              v881 = v476[8];
                              if (v880 < (v881 - v882) >> 3)
                              {
                                v883 = v882 + 8 * v880;
                                if (v883 != v881 && *(_DWORD *)(v883 + 4) == (_DWORD)v859)
                                {
                                  v885 = *(_QWORD *)v857;
                                  v886 = *(_QWORD *)v857 >> 39;
                                  if (v886 < v870
                                    && (v887 = *(_QWORD *)(v869 + 8 * v886)) != 0
                                    && (v888 = *(unsigned __int16 *)(v887 + 2 * (HIDWORD(v885) & 0x7F)), v875 > v888)
                                    && (v889 = v874 + 8 * v888, v889 != v873)
                                    && *(_DWORD *)(v889 + 4) == HIDWORD(v885))
                                  {
                                    v890 = (unint64_t *)(v473[10] + 8 * v888);
                                  }
                                  else
                                  {
                                    v890 = (unint64_t *)v473[11];
                                  }
                                  v891 = *v890;
                                  v892 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(v1932);
                                  v893 = v892[4];
                                  if (v891 >> 39 < (v892[5] - v893) >> 3)
                                  {
                                    v894 = *(_QWORD *)(v893 + 8 * (v891 >> 39));
                                    if (v894)
                                    {
                                      v895 = *(unsigned __int16 *)(v894 + 2 * (HIDWORD(v891) & 0x7F));
                                      v897 = v892[7];
                                      v896 = v892[8];
                                      if (v895 < (v896 - v897) >> 3)
                                      {
                                        v898 = v897 + 8 * v895;
                                        if (v898 != v896 && *(_DWORD *)(v898 + 4) == HIDWORD(v891))
                                        {
                                          v899 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v899, v885);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v857 += 8;
        }
      }
      if ((_QWORD *)v477 == v481)
      {
        v900 = v476[7];
        v901 = v476[8];
        while (v900 != v901)
        {
          v902 = *(unsigned int *)(v900 + 4);
          v903 = v902 >> 7;
          v904 = v472[4];
          if (v902 >> 7 < (v472[5] - v904) >> 3)
          {
            v905 = *(_QWORD *)(v904 + 8 * v903);
            if (v905)
            {
              v906 = v902 & 0x7F;
              v907 = *(unsigned __int16 *)(v905 + 2 * v906);
              v909 = v472[7];
              v908 = v472[8];
              if (v907 < (v908 - v909) >> 3)
              {
                v910 = v909 + 8 * v907;
                if (v910 != v908 && *(_DWORD *)(v910 + 4) == (_DWORD)v902)
                {
                  v912 = v473[4];
                  v913 = (v473[5] - v912) >> 3;
                  if (v903 < v913)
                  {
                    v914 = *(_QWORD *)(v912 + 8 * v903);
                    if (v914)
                    {
                      v915 = *(unsigned __int16 *)(v914 + 2 * v906);
                      v917 = v473[7];
                      v916 = v473[8];
                      v918 = (v916 - v917) >> 3;
                      if (v918 > v915)
                      {
                        v919 = v917 + 8 * v915;
                        if (v919 != v916 && *(_DWORD *)(v919 + 4) == (_DWORD)v902)
                        {
                          v921 = v474[4];
                          if (v903 < (v474[5] - v921) >> 3)
                          {
                            v922 = *(_QWORD *)(v921 + 8 * v903);
                            if (v922)
                            {
                              v923 = *(unsigned __int16 *)(v922 + 2 * v906);
                              v925 = v474[7];
                              v924 = v474[8];
                              if (v923 < (v924 - v925) >> 3)
                              {
                                v926 = v925 + 8 * v923;
                                if (v926 != v924 && *(_DWORD *)(v926 + 4) == (_DWORD)v902)
                                {
                                  v928 = *(_QWORD *)v900;
                                  v929 = *(_QWORD *)v900 >> 39;
                                  if (v929 < v913
                                    && (v930 = *(_QWORD *)(v912 + 8 * v929)) != 0
                                    && (v931 = *(unsigned __int16 *)(v930 + 2 * (HIDWORD(v928) & 0x7F)), v918 > v931)
                                    && (v932 = v917 + 8 * v931, v932 != v916)
                                    && *(_DWORD *)(v932 + 4) == HIDWORD(v928))
                                  {
                                    v933 = (unint64_t *)(v473[10] + 8 * v931);
                                  }
                                  else
                                  {
                                    v933 = (unint64_t *)v473[11];
                                  }
                                  v934 = *v933;
                                  v935 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(v1932);
                                  v936 = v935[4];
                                  if (v934 >> 39 < (v935[5] - v936) >> 3)
                                  {
                                    v937 = *(_QWORD *)(v936 + 8 * (v934 >> 39));
                                    if (v937)
                                    {
                                      v938 = *(unsigned __int16 *)(v937 + 2 * (HIDWORD(v934) & 0x7F));
                                      v940 = v935[7];
                                      v939 = v935[8];
                                      if (v938 < (v939 - v940) >> 3)
                                      {
                                        v941 = v940 + 8 * v938;
                                        if (v941 != v939 && *(_DWORD *)(v941 + 4) == HIDWORD(v934))
                                        {
                                          v942 = (uint64_t *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v1932);
                                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v942, v928);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v900 += 8;
        }
      }
      v1949 = 0uLL;
      v1950 = 0;
      if (!v1905[22])
      {
        v943 = (std::__shared_weak_count *)operator new(0x30uLL);
        v944 = v943;
        v943->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v943->__shared_owners_;
        v943->__shared_weak_owners_ = 0;
        v943->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB630;
        v946 = &v943[1].__vftable;
        v943[1].__shared_weak_owners_ = (uint64_t)v1905;
        do
          v947 = __ldxr(p_shared_owners);
        while (__stxr(v947 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v943->__shared_weak_owners_;
        do
          v949 = __ldxr(p_shared_weak_owners);
        while (__stxr(v949 + 1, p_shared_weak_owners));
        v943[1].__vftable = (std::__shared_weak_count_vtbl *)&v943[1];
        v943[1].__shared_owners_ = (uint64_t)v943;
        do
          v950 = __ldaxr(p_shared_owners);
        while (__stlxr(v950 - 1, p_shared_owners));
        if (!v950)
        {
          ((void (*)(std::__shared_weak_count *))v943->__on_zero_shared)(v943);
          std::__shared_weak_count::__release_weak(v944);
        }
        v951 = (std::__shared_weak_count *)v1905[23];
        v1905[22] = v946;
        v1905[23] = v944;
        if (v951)
        {
          v952 = (unint64_t *)&v951->__shared_owners_;
          do
            v953 = __ldaxr(v952);
          while (__stlxr(v953 - 1, v952));
          if (!v953)
          {
            ((void (*)(std::__shared_weak_count *))v951->__on_zero_shared)(v951);
            std::__shared_weak_count::__release_weak(v951);
          }
        }
      }
      v482 = v1905[15];
      v483 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v482);
      v484 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v482);
      v485 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v482);
      v486 = gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v482);
      v487 = (_QWORD *)v486;
      v488 = v483[7];
      v489 = v483[8];
      if (v484[8] - v484[7] >= (unint64_t)(v489 - v488))
        v490 = v483 + 4;
      else
        v490 = v484 + 4;
      if (v485[8] - v485[7] < v490[4] - v490[3])
        v490 = v485 + 4;
      v1933 = v486 + 32;
      if (*(_QWORD *)(v486 + 64) - *(_QWORD *)(v486 + 56) >= v490[4] - v490[3])
        v491 = v490;
      else
        v491 = (_QWORD *)(v486 + 32);
      if (v483 + 4 == v491)
      {
        v1943 = (unint64_t)v1905;
        v1944 = (uint64_t)&v1949;
        if (v488 != v489)
        {
          v954 = v483[10];
          do
          {
            v1272 = *(unsigned int *)(v488 + 4);
            v1273 = v1272 >> 7;
            v1274 = v484[4];
            v1275 = (v484[5] - v1274) >> 3;
            if (v1272 >> 7 < v1275)
            {
              v1276 = *(_QWORD *)(v1274 + 8 * v1273);
              if (v1276)
              {
                v1277 = v1272 & 0x7F;
                v1278 = *(unsigned __int16 *)(v1276 + 2 * v1277);
                v1280 = v484[7];
                v1279 = v484[8];
                v1281 = (v1279 - v1280) >> 3;
                if (v1281 > v1278)
                {
                  v1282 = v1280 + 8 * v1278;
                  if (v1282 != v1279 && *(_DWORD *)(v1282 + 4) == (_DWORD)v1272)
                  {
                    v1284 = v485[4];
                    if (v1273 < (v485[5] - v1284) >> 3)
                    {
                      v1285 = *(_QWORD *)(v1284 + 8 * v1273);
                      if (v1285)
                      {
                        v1286 = *(unsigned __int16 *)(v1285 + 2 * v1277);
                        v1287 = v485[7];
                        v1288 = v485[8];
                        if (v1286 < (v1288 - v1287) >> 3)
                        {
                          v1289 = v1287 + 8 * v1286;
                          if (v1289 != v1288 && *(_DWORD *)(v1289 + 4) == (_DWORD)v1272)
                          {
                            v1291 = v487[4];
                            if (v1273 < (v487[5] - v1291) >> 3)
                            {
                              v1292 = *(_QWORD *)(v1291 + 8 * v1273);
                              if (v1292)
                              {
                                v1293 = *(unsigned __int16 *)(v1292 + 2 * v1277);
                                v1295 = v487[7];
                                v1294 = v487[8];
                                if (v1293 < (v1294 - v1295) >> 3)
                                {
                                  v1296 = v1295 + 8 * v1293;
                                  if (v1296 != v1294 && *(_DWORD *)(v1296 + 4) == (_DWORD)v1272)
                                  {
                                    v1298 = *(_QWORD *)v488;
                                    v1299 = *(_QWORD *)v488 >> 39;
                                    if (v1299 < v1275
                                      && (v1300 = *(_QWORD *)(v1274 + 8 * v1299)) != 0
                                      && (v1301 = *(unsigned __int16 *)(v1300 + 2 * (HIDWORD(v1298) & 0x7F)),
                                          v1281 > v1301)
                                      && (v1302 = v1280 + 8 * v1301, v1302 != v1279)
                                      && *(_DWORD *)(v1302 + 4) == HIDWORD(v1298))
                                    {
                                      v1271 = v484[10] + 16 * v1301;
                                    }
                                    else
                                    {
                                      v1271 = v484[11];
                                    }
                                    md::ARAnimationLogic::createAnimations(void)::$_0::operator()((uint64_t *)&v1943, v1298, v954, v1271);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v954 += 24;
            v488 += 8;
          }
          while (v488 != v489);
        }
      }
      if (v484 + 4 == v491)
      {
        v1943 = (unint64_t)v1905;
        v1944 = (uint64_t)&v1949;
        v955 = v484[7];
        v956 = v484[8];
        if (v955 != v956)
        {
          v957 = v484[10];
          do
          {
            v1304 = *(unsigned int *)(v955 + 4);
            v1305 = v1304 >> 7;
            v1306 = v483[4];
            v1307 = (v483[5] - v1306) >> 3;
            if (v1304 >> 7 < v1307)
            {
              v1308 = *(_QWORD *)(v1306 + 8 * v1305);
              if (v1308)
              {
                v1309 = v1304 & 0x7F;
                v1310 = *(unsigned __int16 *)(v1308 + 2 * v1309);
                v1312 = v483[7];
                v1311 = v483[8];
                v1313 = (v1311 - v1312) >> 3;
                if (v1313 > v1310)
                {
                  v1314 = v1312 + 8 * v1310;
                  if (v1314 != v1311 && *(_DWORD *)(v1314 + 4) == (_DWORD)v1304)
                  {
                    v1316 = v485[4];
                    if (v1305 < (v485[5] - v1316) >> 3)
                    {
                      v1317 = *(_QWORD *)(v1316 + 8 * v1305);
                      if (v1317)
                      {
                        v1318 = *(unsigned __int16 *)(v1317 + 2 * v1309);
                        v1319 = v485[7];
                        v1320 = v485[8];
                        if (v1318 < (v1320 - v1319) >> 3)
                        {
                          v1321 = v1319 + 8 * v1318;
                          if (v1321 != v1320 && *(_DWORD *)(v1321 + 4) == (_DWORD)v1304)
                          {
                            v1323 = v487[4];
                            if (v1305 < (v487[5] - v1323) >> 3)
                            {
                              v1324 = *(_QWORD *)(v1323 + 8 * v1305);
                              if (v1324)
                              {
                                v1325 = *(unsigned __int16 *)(v1324 + 2 * v1309);
                                v1327 = v487[7];
                                v1326 = v487[8];
                                if (v1325 < (v1326 - v1327) >> 3)
                                {
                                  v1328 = v1327 + 8 * v1325;
                                  if (v1328 != v1326 && *(_DWORD *)(v1328 + 4) == (_DWORD)v1304)
                                  {
                                    v1330 = *(_QWORD *)v955;
                                    v1331 = *(_QWORD *)v955 >> 39;
                                    if (v1331 < v1307
                                      && (v1332 = *(_QWORD *)(v1306 + 8 * v1331)) != 0
                                      && (v1333 = *(unsigned __int16 *)(v1332 + 2 * (HIDWORD(v1330) & 0x7F)),
                                          v1313 > v1333)
                                      && (v1334 = v1312 + 8 * v1333, v1334 != v1311)
                                      && *(_DWORD *)(v1334 + 4) == HIDWORD(v1330))
                                    {
                                      v1303 = v483[10] + 24 * v1333;
                                    }
                                    else
                                    {
                                      v1303 = v483[11];
                                    }
                                    md::ARAnimationLogic::createAnimations(void)::$_0::operator()((uint64_t *)&v1943, v1330, v1303, v957);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v957 += 16;
            v955 += 8;
          }
          while (v955 != v956);
        }
      }
      if (v485 + 4 == v491)
      {
        v1943 = (unint64_t)v1905;
        v1944 = (uint64_t)&v1949;
        v958 = v485[7];
        for (i1 = v485[8]; v958 != i1; v958 += 8)
        {
          v1336 = *(unsigned int *)(v958 + 4);
          v1337 = v1336 >> 7;
          v1338 = v483[4];
          v1339 = (v483[5] - v1338) >> 3;
          if (v1336 >> 7 < v1339)
          {
            v1340 = *(_QWORD *)(v1338 + 8 * v1337);
            if (v1340)
            {
              v1341 = v1336 & 0x7F;
              v1342 = *(unsigned __int16 *)(v1340 + 2 * v1341);
              v1344 = v483[7];
              v1343 = v483[8];
              v1345 = (v1343 - v1344) >> 3;
              if (v1345 > v1342)
              {
                v1346 = v1344 + 8 * v1342;
                if (v1346 != v1343 && *(_DWORD *)(v1346 + 4) == (_DWORD)v1336)
                {
                  v1348 = v484[4];
                  v1349 = (v484[5] - v1348) >> 3;
                  if (v1337 < v1349)
                  {
                    v1350 = *(_QWORD *)(v1348 + 8 * v1337);
                    if (v1350)
                    {
                      v1351 = *(unsigned __int16 *)(v1350 + 2 * v1341);
                      v1353 = v484[7];
                      v1352 = v484[8];
                      v1354 = (v1352 - v1353) >> 3;
                      if (v1354 > v1351)
                      {
                        v1355 = v1353 + 8 * v1351;
                        if (v1355 != v1352 && *(_DWORD *)(v1355 + 4) == (_DWORD)v1336)
                        {
                          v1357 = v487[4];
                          if (v1337 < (v487[5] - v1357) >> 3)
                          {
                            v1358 = *(_QWORD *)(v1357 + 8 * v1337);
                            if (v1358)
                            {
                              v1359 = *(unsigned __int16 *)(v1358 + 2 * v1341);
                              v1361 = v487[7];
                              v1360 = v487[8];
                              if (v1359 < (v1360 - v1361) >> 3)
                              {
                                v1362 = v1361 + 8 * v1359;
                                if (v1362 != v1360 && *(_DWORD *)(v1362 + 4) == (_DWORD)v1336)
                                {
                                  v1364 = *(_QWORD *)v958;
                                  v1365 = HIDWORD(*(_QWORD *)v958);
                                  v1366 = *(_QWORD *)v958 >> 39;
                                  if (v1366 < v1339
                                    && (v1367 = *(_QWORD *)(v1338 + 8 * v1366)) != 0
                                    && (v1368 = *(unsigned __int16 *)(v1367 + 2 * (HIDWORD(v1364) & 0x7F)), v1345 > v1368)
                                    && (v1369 = v1344 + 8 * v1368, v1369 != v1343)
                                    && *(_DWORD *)(v1369 + 4) == (_DWORD)v1365)
                                  {
                                    v1370 = v483[10] + 24 * v1368;
                                  }
                                  else
                                  {
                                    v1370 = v483[11];
                                  }
                                  if (v1366 < v1349
                                    && (v1371 = *(_QWORD *)(v1348 + 8 * v1366)) != 0
                                    && (v1372 = *(unsigned __int16 *)(v1371 + 2 * (HIDWORD(v1364) & 0x7F)), v1354 > v1372)
                                    && (v1373 = v1353 + 8 * v1372, v1373 != v1352)
                                    && *(_DWORD *)(v1373 + 4) == (_DWORD)v1365)
                                  {
                                    v1335 = v484[10] + 16 * v1372;
                                  }
                                  else
                                  {
                                    v1335 = v484[11];
                                  }
                                  md::ARAnimationLogic::createAnimations(void)::$_0::operator()((uint64_t *)&v1943, v1364, v1370, v1335);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_QWORD *)v1933 == v491)
      {
        v1943 = (unint64_t)v1905;
        v1944 = (uint64_t)&v1949;
        v960 = v487[7];
        for (i2 = v487[8]; v960 != i2; v960 += 8)
        {
          v1375 = *(unsigned int *)(v960 + 4);
          v1376 = v1375 >> 7;
          v1377 = v483[4];
          v1378 = (v483[5] - v1377) >> 3;
          if (v1375 >> 7 < v1378)
          {
            v1379 = *(_QWORD *)(v1377 + 8 * v1376);
            if (v1379)
            {
              v1380 = v1375 & 0x7F;
              v1381 = *(unsigned __int16 *)(v1379 + 2 * v1380);
              v1383 = v483[7];
              v1382 = v483[8];
              v1384 = (v1382 - v1383) >> 3;
              if (v1384 > v1381)
              {
                v1385 = v1383 + 8 * v1381;
                if (v1385 != v1382 && *(_DWORD *)(v1385 + 4) == (_DWORD)v1375)
                {
                  v1387 = v484[4];
                  v1388 = (v484[5] - v1387) >> 3;
                  if (v1376 < v1388)
                  {
                    v1389 = *(_QWORD *)(v1387 + 8 * v1376);
                    if (v1389)
                    {
                      v1390 = *(unsigned __int16 *)(v1389 + 2 * v1380);
                      v1392 = v484[7];
                      v1391 = v484[8];
                      v1393 = (v1391 - v1392) >> 3;
                      if (v1393 > v1390)
                      {
                        v1394 = v1392 + 8 * v1390;
                        if (v1394 != v1391 && *(_DWORD *)(v1394 + 4) == (_DWORD)v1375)
                        {
                          v1396 = v485[4];
                          if (v1376 < (v485[5] - v1396) >> 3)
                          {
                            v1397 = *(_QWORD *)(v1396 + 8 * v1376);
                            if (v1397)
                            {
                              v1398 = *(unsigned __int16 *)(v1397 + 2 * v1380);
                              v1400 = v485[7];
                              v1399 = v485[8];
                              if (v1398 < (v1399 - v1400) >> 3)
                              {
                                v1401 = v1400 + 8 * v1398;
                                if (v1401 != v1399 && *(_DWORD *)(v1401 + 4) == (_DWORD)v1375)
                                {
                                  v1403 = *(_QWORD *)v960;
                                  v1404 = HIDWORD(*(_QWORD *)v960);
                                  v1405 = *(_QWORD *)v960 >> 39;
                                  if (v1405 < v1378
                                    && (v1406 = *(_QWORD *)(v1377 + 8 * v1405)) != 0
                                    && (v1407 = *(unsigned __int16 *)(v1406 + 2 * (HIDWORD(v1403) & 0x7F)), v1384 > v1407)
                                    && (v1408 = v1383 + 8 * v1407, v1408 != v1382)
                                    && *(_DWORD *)(v1408 + 4) == (_DWORD)v1404)
                                  {
                                    v1409 = v483[10] + 24 * v1407;
                                  }
                                  else
                                  {
                                    v1409 = v483[11];
                                  }
                                  if (v1405 < v1388
                                    && (v1410 = *(_QWORD *)(v1387 + 8 * v1405)) != 0
                                    && (v1411 = *(unsigned __int16 *)(v1410 + 2 * (HIDWORD(v1403) & 0x7F)), v1393 > v1411)
                                    && (v1412 = v1392 + 8 * v1411, v1412 != v1391)
                                    && *(_DWORD *)(v1412 + 4) == (_DWORD)v1404)
                                  {
                                    v1374 = v484[10] + 16 * v1411;
                                  }
                                  else
                                  {
                                    v1374 = v484[11];
                                  }
                                  md::ARAnimationLogic::createAnimations(void)::$_0::operator()((uint64_t *)&v1943, v1403, v1409, v1374);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v492 = (unint64_t *)*((_QWORD *)&v1949 + 1);
      v493 = (unint64_t *)v1949;
      if ((_QWORD)v1949 == *((_QWORD *)&v1949 + 1))
      {
        v494 = v1905;
      }
      else
      {
        v494 = v1905;
        v495 = v1905[15];
        do
        {
          v496 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v495);
          gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)0>>::remove(v496, *v493++);
        }
        while (v493 != v492);
        v497 = (unint64_t *)*((_QWORD *)&v1949 + 1);
        v493 = (unint64_t *)v1949;
        if ((_QWORD)v1949 != *((_QWORD *)&v1949 + 1))
        {
          v498 = v1905[15];
          do
          {
            v499 = (_QWORD *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v498);
            gdc::ComponentStorageWrapper<arComponents::ReadyToStartAnimation>::remove(v499, *v493++);
          }
          while (v493 != v497);
          v493 = (unint64_t *)v1949;
        }
      }
      if (v493)
      {
        *((_QWORD *)&v1949 + 1) = v493;
        operator delete(v493);
      }
      v962 = v494[15];
      *(_QWORD *)&v1947 = v962;
      *(_QWORD *)&v1942 = (uint64_t)(v5 * 1000.0);
      v963 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationGroupParent>(v962);
      v964 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v962);
      v965 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(v962);
      v966 = (_QWORD *)v965;
      v967 = v965 + 32;
      v969 = v963[7];
      v968 = v963[8];
      if (v964[8] - v964[7] >= (unint64_t)(v968 - v969))
        v970 = v963 + 4;
      else
        v970 = v964 + 4;
      if (*(_QWORD *)(v965 + 64) - *(_QWORD *)(v965 + 56) >= v970[4] - v970[3])
        v971 = v970;
      else
        v971 = (_QWORD *)(v965 + 32);
      if (v968 != v969 && v963 + 4 == v971)
      {
        do
        {
          v1027 = *(unsigned int *)(v969 + 4);
          v1028 = v1027 >> 7;
          v1029 = v964[4];
          if (v1027 >> 7 < (v964[5] - v1029) >> 3)
          {
            v1030 = *(_QWORD *)(v1029 + 8 * v1028);
            if (v1030)
            {
              v1031 = *(unsigned __int16 *)(v1030 + 2 * (v1027 & 0x7F));
              v1033 = v964[7];
              v1032 = v964[8];
              if (v1031 < (v1032 - v1033) >> 3)
              {
                v1034 = v1033 + 8 * v1031;
                if (v1034 != v1032 && *(_DWORD *)(v1034 + 4) == (_DWORD)v1027)
                {
                  v1036 = v966[4];
                  if (v1028 < (v966[5] - v1036) >> 3)
                  {
                    v1037 = *(_QWORD *)(v1036 + 8 * v1028);
                    if (v1037)
                    {
                      v1038 = *(unsigned __int16 *)(v1037 + 2 * (v1027 & 0x7F));
                      v1040 = v966[7];
                      v1039 = v966[8];
                      if (v1038 < (v1039 - v1040) >> 3)
                      {
                        v1041 = v1040 + 8 * v1038;
                        if (v1041 != v1039 && *(_DWORD *)(v1041 + 4) == (_DWORD)v1027)
                        {
                          v1043 = *(_QWORD *)v969;
                          v1044 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v1947);
                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1044, v1043);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v969 += 8;
        }
        while (v969 != v968);
      }
      if (v964 + 4 == v971)
      {
        v1045 = v964[7];
        v1046 = v964[8];
        while (v1045 != v1046)
        {
          v1047 = *(unsigned int *)(v1045 + 4);
          v1048 = v1047 >> 7;
          v1049 = v963[4];
          if (v1047 >> 7 < (v963[5] - v1049) >> 3)
          {
            v1050 = *(_QWORD *)(v1049 + 8 * v1048);
            if (v1050)
            {
              v1051 = *(unsigned __int16 *)(v1050 + 2 * (v1047 & 0x7F));
              v1053 = v963[7];
              v1052 = v963[8];
              if (v1051 < (v1052 - v1053) >> 3)
              {
                v1054 = v1053 + 8 * v1051;
                if (v1054 != v1052 && *(_DWORD *)(v1054 + 4) == (_DWORD)v1047)
                {
                  v1056 = v966[4];
                  if (v1048 < (v966[5] - v1056) >> 3)
                  {
                    v1057 = *(_QWORD *)(v1056 + 8 * v1048);
                    if (v1057)
                    {
                      v1058 = *(unsigned __int16 *)(v1057 + 2 * (v1047 & 0x7F));
                      v1060 = v966[7];
                      v1059 = v966[8];
                      if (v1058 < (v1059 - v1060) >> 3)
                      {
                        v1061 = v1060 + 8 * v1058;
                        if (v1061 != v1059 && *(_DWORD *)(v1061 + 4) == (_DWORD)v1047)
                        {
                          v1063 = *(_QWORD *)v1045;
                          v1064 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v1947);
                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1064, v1063);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v1045 += 8;
        }
      }
      if ((_QWORD *)v967 == v971)
      {
        v1065 = v966[7];
        v1066 = v966[8];
        while (v1065 != v1066)
        {
          v1067 = *(unsigned int *)(v1065 + 4);
          v1068 = v1067 >> 7;
          v1069 = v963[4];
          if (v1067 >> 7 < (v963[5] - v1069) >> 3)
          {
            v1070 = *(_QWORD *)(v1069 + 8 * v1068);
            if (v1070)
            {
              v1071 = *(unsigned __int16 *)(v1070 + 2 * (v1067 & 0x7F));
              v1073 = v963[7];
              v1072 = v963[8];
              if (v1071 < (v1072 - v1073) >> 3)
              {
                v1074 = v1073 + 8 * v1071;
                if (v1074 != v1072 && *(_DWORD *)(v1074 + 4) == (_DWORD)v1067)
                {
                  v1076 = v964[4];
                  if (v1068 < (v964[5] - v1076) >> 3)
                  {
                    v1077 = *(_QWORD *)(v1076 + 8 * v1068);
                    if (v1077)
                    {
                      v1078 = *(unsigned __int16 *)(v1077 + 2 * (v1067 & 0x7F));
                      v1080 = v964[7];
                      v1079 = v964[8];
                      if (v1078 < (v1079 - v1080) >> 3)
                      {
                        v1081 = v1080 + 8 * v1078;
                        if (v1081 != v1079 && *(_DWORD *)(v1081 + 4) == (_DWORD)v1067)
                        {
                          v1083 = *(_QWORD *)v1065;
                          v1084 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v1947);
                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1084, v1083);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v1065 += 8;
        }
      }
      v1943 = 0;
      v1944 = 0;
      v1945 = 0;
      v973 = v1947;
      v974 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationGroupParent>(v1947);
      v975 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v973);
      v976 = gdc::Registry::storage<arComponents::NeedsPropagateActive>(v973);
      v977 = (_QWORD *)v976;
      v978 = v976 + 32;
      v980 = v974[7];
      v979 = v974[8];
      if (v975[8] - v975[7] >= (unint64_t)(v979 - v980))
        v981 = v974 + 4;
      else
        v981 = v975 + 4;
      if (*(_QWORD *)(v976 + 64) - *(_QWORD *)(v976 + 56) >= v981[4] - v981[3])
        v982 = v981;
      else
        v982 = (_QWORD *)(v976 + 32);
      if (v974 + 4 == v982)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1942;
        v1950 = (uint64_t)&v1943;
        while (v980 != v979)
        {
          v1172 = *(unsigned int *)(v980 + 4);
          v1173 = v1172 >> 7;
          v1174 = v975[4];
          v1175 = (v975[5] - v1174) >> 3;
          if (v1172 >> 7 < v1175)
          {
            v1176 = *(_QWORD *)(v1174 + 8 * v1173);
            if (v1176)
            {
              v1177 = *(unsigned __int16 *)(v1176 + 2 * (v1172 & 0x7F));
              v1179 = v975[7];
              v1178 = v975[8];
              v1180 = (v1178 - v1179) >> 3;
              if (v1180 > v1177)
              {
                v1181 = v1179 + 8 * v1177;
                if (v1181 != v1178 && *(_DWORD *)(v1181 + 4) == (_DWORD)v1172)
                {
                  v1183 = v977[4];
                  if (v1173 < (v977[5] - v1183) >> 3)
                  {
                    v1184 = *(_QWORD *)(v1183 + 8 * v1173);
                    if (v1184)
                    {
                      v1185 = *(unsigned __int16 *)(v1184 + 2 * (v1172 & 0x7F));
                      v1187 = v977[7];
                      v1186 = v977[8];
                      if (v1185 < (v1186 - v1187) >> 3)
                      {
                        v1188 = v1187 + 8 * v1185;
                        if (v1188 != v1186 && *(_DWORD *)(v1188 + 4) == (_DWORD)v1172)
                        {
                          v1190 = *(_QWORD *)v980;
                          v1191 = *(_QWORD *)v980 >> 39;
                          if (v1191 < v1175
                            && (v1192 = *(_QWORD *)(v1174 + 8 * v1191)) != 0
                            && (v1193 = *(unsigned __int16 *)(v1192 + 2 * (HIDWORD(v1190) & 0x7F)), v1180 > v1193)
                            && ((v1194 = v1179 + 8 * v1193, v1194 != v1178)
                              ? (v1195 = *(_DWORD *)(v1194 + 4) == HIDWORD(v1190))
                              : (v1195 = 0),
                                v1195))
                          {
                            v1171 = (unint64_t *)(v975[10] + 16 * v1193);
                          }
                          else
                          {
                            v1171 = (unint64_t *)v975[11];
                          }
                          propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1949, v1190, *v1171);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v980 += 8;
        }
      }
      if (v975 + 4 == v982)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1942;
        v1950 = (uint64_t)&v1943;
        v1085 = v975[7];
        v1086 = v975[8];
        if (v1085 != v1086)
        {
          v1087 = (unint64_t *)v975[10];
          do
          {
            v1088 = *(unsigned int *)(v1085 + 4);
            v1089 = v1088 >> 7;
            v1090 = v974[4];
            if (v1088 >> 7 < (v974[5] - v1090) >> 3)
            {
              v1091 = *(_QWORD *)(v1090 + 8 * v1089);
              if (v1091)
              {
                v1092 = *(unsigned __int16 *)(v1091 + 2 * (v1088 & 0x7F));
                v1094 = v974[7];
                v1093 = v974[8];
                if (v1092 < (v1093 - v1094) >> 3)
                {
                  v1095 = v1094 + 8 * v1092;
                  if (v1095 != v1093 && *(_DWORD *)(v1095 + 4) == (_DWORD)v1088)
                  {
                    v1097 = v977[4];
                    if (v1089 < (v977[5] - v1097) >> 3)
                    {
                      v1098 = *(_QWORD *)(v1097 + 8 * v1089);
                      if (v1098)
                      {
                        v1099 = *(unsigned __int16 *)(v1098 + 2 * (v1088 & 0x7F));
                        v1101 = v977[7];
                        v1100 = v977[8];
                        if (v1099 < (v1100 - v1101) >> 3)
                        {
                          v1102 = v1101 + 8 * v1099;
                          if (v1102 != v1100 && *(_DWORD *)(v1102 + 4) == (_DWORD)v1088)
                            propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1949, *(_QWORD *)v1085, *v1087);
                        }
                      }
                    }
                  }
                }
              }
            }
            v1087 += 2;
            v1085 += 8;
          }
          while (v1085 != v1086);
        }
      }
      if ((_QWORD *)v978 == v982)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1942;
        v1950 = (uint64_t)&v1943;
        v1104 = v977[7];
        v1105 = v977[8];
        while (v1104 != v1105)
        {
          v1197 = *(unsigned int *)(v1104 + 4);
          v1198 = v1197 >> 7;
          v1199 = v974[4];
          if (v1197 >> 7 < (v974[5] - v1199) >> 3)
          {
            v1200 = *(_QWORD *)(v1199 + 8 * v1198);
            if (v1200)
            {
              v1201 = *(unsigned __int16 *)(v1200 + 2 * (v1197 & 0x7F));
              v1203 = v974[7];
              v1202 = v974[8];
              if (v1201 < (v1202 - v1203) >> 3)
              {
                v1204 = v1203 + 8 * v1201;
                if (v1204 != v1202 && *(_DWORD *)(v1204 + 4) == (_DWORD)v1197)
                {
                  v1206 = v975[4];
                  v1207 = (v975[5] - v1206) >> 3;
                  if (v1198 < v1207)
                  {
                    v1208 = *(_QWORD *)(v1206 + 8 * v1198);
                    if (v1208)
                    {
                      v1209 = *(unsigned __int16 *)(v1208 + 2 * (v1197 & 0x7F));
                      v1211 = v975[7];
                      v1210 = v975[8];
                      v1212 = (v1210 - v1211) >> 3;
                      if (v1212 > v1209)
                      {
                        v1213 = v1211 + 8 * v1209;
                        if (v1213 != v1210 && *(_DWORD *)(v1213 + 4) == (_DWORD)v1197)
                        {
                          v1215 = *(_QWORD *)v1104;
                          v1216 = *(_QWORD *)v1104 >> 39;
                          if (v1216 < v1207
                            && (v1217 = *(_QWORD *)(v1206 + 8 * v1216)) != 0
                            && (v1218 = *(unsigned __int16 *)(v1217 + 2 * (HIDWORD(v1215) & 0x7F)), v1212 > v1218)
                            && ((v1219 = v1211 + 8 * v1218, v1219 != v1210)
                              ? (v1220 = *(_DWORD *)(v1219 + 4) == HIDWORD(v1215))
                              : (v1220 = 0),
                                v1220))
                          {
                            v1196 = (unint64_t *)(v975[10] + 16 * v1218);
                          }
                          else
                          {
                            v1196 = (unint64_t *)v975[11];
                          }
                          propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1949, v1215, *v1196);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v1104 += 8;
        }
      }
      v983 = v1947;
      v984 = (unint64_t *)v1943;
      v985 = (unint64_t *)v1944;
      if (v1943 != v1944)
      {
        do
        {
          v986 = (_QWORD *)gdc::Registry::storage<arComponents::NeedsPropagateActive>(v983);
          gdc::ComponentStorageWrapper<arComponents::NeedsPropagateActive>::remove(v986, *v984++);
        }
        while (v984 != v985);
        v984 = (unint64_t *)v1943;
        v983 = v1947;
      }
      v1944 = (uint64_t)v984;
      v987 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationGroupParent>(v983);
      v988 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v983);
      v989 = gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v983);
      v990 = (_QWORD *)v989;
      v991 = v989 + 32;
      v993 = v987[7];
      v992 = v987[8];
      if (v988[8] - v988[7] >= (unint64_t)(v992 - v993))
        v994 = v987 + 4;
      else
        v994 = v988 + 4;
      if (*(_QWORD *)(v989 + 64) - *(_QWORD *)(v989 + 56) >= v994[4] - v994[3])
        v995 = v994;
      else
        v995 = (_QWORD *)(v989 + 32);
      if (v987 + 4 == v995)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1942;
        v1950 = (uint64_t)&v1943;
        while (v993 != v992)
        {
          v1222 = *(unsigned int *)(v993 + 4);
          v1223 = v1222 >> 7;
          v1224 = v988[4];
          v1225 = (v988[5] - v1224) >> 3;
          if (v1222 >> 7 < v1225)
          {
            v1226 = *(_QWORD *)(v1224 + 8 * v1223);
            if (v1226)
            {
              v1227 = *(unsigned __int16 *)(v1226 + 2 * (v1222 & 0x7F));
              v1229 = v988[7];
              v1228 = v988[8];
              v1230 = (v1228 - v1229) >> 3;
              if (v1230 > v1227)
              {
                v1231 = v1229 + 8 * v1227;
                if (v1231 != v1228 && *(_DWORD *)(v1231 + 4) == (_DWORD)v1222)
                {
                  v1233 = v990[4];
                  if (v1223 < (v990[5] - v1233) >> 3)
                  {
                    v1234 = *(_QWORD *)(v1233 + 8 * v1223);
                    if (v1234)
                    {
                      v1235 = *(unsigned __int16 *)(v1234 + 2 * (v1222 & 0x7F));
                      v1237 = v990[7];
                      v1236 = v990[8];
                      if (v1235 < (v1236 - v1237) >> 3)
                      {
                        v1238 = v1237 + 8 * v1235;
                        if (v1238 != v1236 && *(_DWORD *)(v1238 + 4) == (_DWORD)v1222)
                        {
                          v1240 = *(_QWORD *)v993;
                          v1241 = *(_QWORD *)v993 >> 39;
                          if (v1241 < v1225
                            && (v1242 = *(_QWORD *)(v1224 + 8 * v1241)) != 0
                            && (v1243 = *(unsigned __int16 *)(v1242 + 2 * (HIDWORD(v1240) & 0x7F)), v1230 > v1243)
                            && ((v1244 = v1229 + 8 * v1243, v1244 != v1228)
                              ? (v1245 = *(_DWORD *)(v1244 + 4) == HIDWORD(v1240))
                              : (v1245 = 0),
                                v1245))
                          {
                            v1221 = (unint64_t *)(v988[10] + 16 * v1243);
                          }
                          else
                          {
                            v1221 = (unint64_t *)v988[11];
                          }
                          propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()((uint64_t)&v1949, v1240, *v1221);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v993 += 8;
        }
      }
      if (v988 + 4 == v995)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1942;
        v1950 = (uint64_t)&v1943;
        v1106 = v988[7];
        v1107 = v988[8];
        if (v1106 != v1107)
        {
          v1108 = (unint64_t *)v988[10];
          do
          {
            v1109 = *(unsigned int *)(v1106 + 4);
            v1110 = v1109 >> 7;
            v1111 = v987[4];
            if (v1109 >> 7 < (v987[5] - v1111) >> 3)
            {
              v1112 = *(_QWORD *)(v1111 + 8 * v1110);
              if (v1112)
              {
                v1113 = *(unsigned __int16 *)(v1112 + 2 * (v1109 & 0x7F));
                v1115 = v987[7];
                v1114 = v987[8];
                if (v1113 < (v1114 - v1115) >> 3)
                {
                  v1116 = v1115 + 8 * v1113;
                  if (v1116 != v1114 && *(_DWORD *)(v1116 + 4) == (_DWORD)v1109)
                  {
                    v1118 = v990[4];
                    if (v1110 < (v990[5] - v1118) >> 3)
                    {
                      v1119 = *(_QWORD *)(v1118 + 8 * v1110);
                      if (v1119)
                      {
                        v1120 = *(unsigned __int16 *)(v1119 + 2 * (v1109 & 0x7F));
                        v1122 = v990[7];
                        v1121 = v990[8];
                        if (v1120 < (v1121 - v1122) >> 3)
                        {
                          v1123 = v1122 + 8 * v1120;
                          if (v1123 != v1121 && *(_DWORD *)(v1123 + 4) == (_DWORD)v1109)
                            propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()((uint64_t)&v1949, *(_QWORD *)v1106, *v1108);
                        }
                      }
                    }
                  }
                }
              }
            }
            v1108 += 2;
            v1106 += 8;
          }
          while (v1106 != v1107);
        }
      }
      if ((_QWORD *)v991 == v995)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1942;
        v1950 = (uint64_t)&v1943;
        v1125 = v990[7];
        v1126 = v990[8];
        while (v1125 != v1126)
        {
          v1247 = *(unsigned int *)(v1125 + 4);
          v1248 = v1247 >> 7;
          v1249 = v987[4];
          if (v1247 >> 7 < (v987[5] - v1249) >> 3)
          {
            v1250 = *(_QWORD *)(v1249 + 8 * v1248);
            if (v1250)
            {
              v1251 = *(unsigned __int16 *)(v1250 + 2 * (v1247 & 0x7F));
              v1253 = v987[7];
              v1252 = v987[8];
              if (v1251 < (v1252 - v1253) >> 3)
              {
                v1254 = v1253 + 8 * v1251;
                if (v1254 != v1252 && *(_DWORD *)(v1254 + 4) == (_DWORD)v1247)
                {
                  v1256 = v988[4];
                  v1257 = (v988[5] - v1256) >> 3;
                  if (v1248 < v1257)
                  {
                    v1258 = *(_QWORD *)(v1256 + 8 * v1248);
                    if (v1258)
                    {
                      v1259 = *(unsigned __int16 *)(v1258 + 2 * (v1247 & 0x7F));
                      v1261 = v988[7];
                      v1260 = v988[8];
                      v1262 = (v1260 - v1261) >> 3;
                      if (v1262 > v1259)
                      {
                        v1263 = v1261 + 8 * v1259;
                        if (v1263 != v1260 && *(_DWORD *)(v1263 + 4) == (_DWORD)v1247)
                        {
                          v1265 = *(_QWORD *)v1125;
                          v1266 = *(_QWORD *)v1125 >> 39;
                          if (v1266 < v1257
                            && (v1267 = *(_QWORD *)(v1256 + 8 * v1266)) != 0
                            && (v1268 = *(unsigned __int16 *)(v1267 + 2 * (HIDWORD(v1265) & 0x7F)), v1262 > v1268)
                            && ((v1269 = v1261 + 8 * v1268, v1269 != v1260)
                              ? (v1270 = *(_DWORD *)(v1269 + 4) == HIDWORD(v1265))
                              : (v1270 = 0),
                                v1270))
                          {
                            v1246 = (unint64_t *)(v988[10] + 16 * v1268);
                          }
                          else
                          {
                            v1246 = (unint64_t *)v988[11];
                          }
                          propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()((uint64_t)&v1949, v1265, *v1246);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v1125 += 8;
        }
      }
      v997 = (unint64_t *)v1943;
      v996 = (unint64_t *)v1944;
      if (v1943 != v1944)
      {
        v998 = v1947;
        do
        {
          v999 = (_QWORD *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v998);
          gdc::ComponentStorageWrapper<arComponents::NeedsPropagateFinished>::remove(v999, *v997++);
        }
        while (v997 != v996);
        v997 = (unint64_t *)v1943;
      }
      if (v997)
      {
        v1944 = (uint64_t)v997;
        operator delete(v997);
      }
      v1000 = v1905[15];
      v1943 = v1000;
      v1001 = 0.0000000249532021;
      if (v1904)
        v1001 = 1.0;
      *(double *)&v1947 = v1001;
      v1002 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(v1000);
      v1003 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1000);
      v1004 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v1000);
      v1005 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v1000);
      v1006 = (_QWORD *)v1005;
      v1007 = v1005 + 32;
      v1009 = (unint64_t *)v1002[7];
      v1008 = (uint64_t *)v1002[8];
      if (v1003[8] - v1003[7] >= (unint64_t)((char *)v1008 - (char *)v1009))
        v1010 = v1002 + 4;
      else
        v1010 = v1003 + 4;
      if (v1004[8] - v1004[7] < v1010[4] - v1010[3])
        v1010 = v1004 + 4;
      if (*(_QWORD *)(v1005 + 64) - *(_QWORD *)(v1005 + 56) >= v1010[4] - v1010[3])
        v1011 = v1010;
      else
        v1011 = (_QWORD *)(v1005 + 32);
      if (v1002 + 4 == v1011)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1943;
        if (v1009 != (unint64_t *)v1008)
        {
          v1127 = (float *)(v1002[10] + 20);
          do
          {
            v1414 = *((unsigned int *)v1009 + 1);
            v1415 = v1414 >> 7;
            v1416 = v1003[4];
            v1417 = (v1003[5] - v1416) >> 3;
            if (v1414 >> 7 < v1417)
            {
              v1418 = *(_QWORD *)(v1416 + 8 * v1415);
              if (v1418)
              {
                v1419 = v1414 & 0x7F;
                v1420 = *(unsigned __int16 *)(v1418 + 2 * v1419);
                v1422 = v1003[7];
                v1421 = v1003[8];
                v1423 = (v1421 - v1422) >> 3;
                if (v1423 > v1420)
                {
                  v1424 = v1422 + 8 * v1420;
                  if (v1424 != v1421 && *(_DWORD *)(v1424 + 4) == (_DWORD)v1414)
                  {
                    v1426 = v1004[4];
                    v1427 = (v1004[5] - v1426) >> 3;
                    if (v1415 < v1427)
                    {
                      v1428 = *(_QWORD *)(v1426 + 8 * v1415);
                      if (v1428)
                      {
                        v1429 = *(unsigned __int16 *)(v1428 + 2 * v1419);
                        v1431 = v1004[7];
                        v1430 = v1004[8];
                        v1432 = (v1430 - v1431) >> 3;
                        if (v1432 > v1429)
                        {
                          v1433 = v1431 + 8 * v1429;
                          if (v1433 != v1430 && *(_DWORD *)(v1433 + 4) == (_DWORD)v1414)
                          {
                            v1435 = v1006[4];
                            if (v1415 < (v1006[5] - v1435) >> 3)
                            {
                              v1436 = *(_QWORD *)(v1435 + 8 * v1415);
                              if (v1436)
                              {
                                v1437 = *(unsigned __int16 *)(v1436 + 2 * v1419);
                                v1439 = v1006[7];
                                v1438 = v1006[8];
                                if (v1437 < (v1438 - v1439) >> 3)
                                {
                                  v1440 = v1439 + 8 * v1437;
                                  if (v1440 != v1438 && *(_DWORD *)(v1440 + 4) == (_DWORD)v1414)
                                  {
                                    v1442 = *v1009;
                                    v1443 = HIDWORD(*v1009);
                                    v1444 = *v1009 >> 39;
                                    if (v1444 < v1417
                                      && (v1445 = *(_QWORD *)(v1416 + 8 * v1444)) != 0
                                      && (v1446 = *(unsigned __int16 *)(v1445 + 2 * (HIDWORD(v1442) & 0x7F)),
                                          v1423 > v1446)
                                      && (v1447 = v1422 + 8 * v1446, v1447 != v1421)
                                      && *(_DWORD *)(v1447 + 4) == (_DWORD)v1443)
                                    {
                                      v1448 = v1003[10] + 24 * v1446;
                                    }
                                    else
                                    {
                                      v1448 = v1003[11];
                                    }
                                    v1935 = v1007;
                                    if (v1444 < v1427
                                      && (v1449 = *(_QWORD *)(v1426 + 8 * v1444)) != 0
                                      && (v1450 = *(unsigned __int16 *)(v1449 + 2 * (HIDWORD(v1442) & 0x7F)),
                                          v1432 > v1450)
                                      && (v1451 = v1431 + 8 * v1450, v1451 != v1430)
                                      && *(_DWORD *)(v1451 + 4) == (_DWORD)v1443)
                                    {
                                      v1413 = v1004[10] + 16 * v1450;
                                    }
                                    else
                                    {
                                      v1413 = v1004[11];
                                    }
                                    processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1949, v1448, v1413, *(v1127 - 3), *v1127);
                                    v1007 = v1935;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v1009;
            v1127 += 6;
          }
          while (v1009 != (unint64_t *)v1008);
        }
      }
      if (v1003 + 4 == v1011)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1943;
        v1128 = (unint64_t *)v1003[7];
        v1129 = (uint64_t *)v1003[8];
        if (v1128 != (unint64_t *)v1129)
        {
          v1130 = v1003[10];
          do
          {
            v1453 = *((unsigned int *)v1128 + 1);
            v1454 = v1453 >> 7;
            v1455 = v1002[4];
            v1456 = (v1002[5] - v1455) >> 3;
            if (v1453 >> 7 < v1456)
            {
              v1457 = *(_QWORD *)(v1455 + 8 * v1454);
              if (v1457)
              {
                v1458 = v1453 & 0x7F;
                v1459 = *(unsigned __int16 *)(v1457 + 2 * v1458);
                v1461 = v1002[7];
                v1460 = v1002[8];
                v1462 = (v1460 - v1461) >> 3;
                if (v1462 > v1459)
                {
                  v1463 = v1461 + 8 * v1459;
                  if (v1463 != v1460 && *(_DWORD *)(v1463 + 4) == (_DWORD)v1453)
                  {
                    v1465 = v1004[4];
                    v1466 = (v1004[5] - v1465) >> 3;
                    if (v1454 < v1466)
                    {
                      v1467 = *(_QWORD *)(v1465 + 8 * v1454);
                      if (v1467)
                      {
                        v1468 = *(unsigned __int16 *)(v1467 + 2 * v1458);
                        v1470 = v1004[7];
                        v1469 = v1004[8];
                        v1471 = (v1469 - v1470) >> 3;
                        if (v1471 > v1468)
                        {
                          v1472 = v1470 + 8 * v1468;
                          if (v1472 != v1469 && *(_DWORD *)(v1472 + 4) == (_DWORD)v1453)
                          {
                            v1474 = v1006[4];
                            if (v1454 < (v1006[5] - v1474) >> 3)
                            {
                              v1475 = *(_QWORD *)(v1474 + 8 * v1454);
                              if (v1475)
                              {
                                v1476 = *(unsigned __int16 *)(v1475 + 2 * v1458);
                                v1478 = v1006[7];
                                v1477 = v1006[8];
                                if (v1476 < (v1477 - v1478) >> 3)
                                {
                                  v1479 = v1478 + 8 * v1476;
                                  if (v1479 != v1477 && *(_DWORD *)(v1479 + 4) == (_DWORD)v1453)
                                  {
                                    v1481 = *v1128;
                                    v1482 = HIDWORD(*v1128);
                                    v1483 = *v1128 >> 39;
                                    if (v1483 < v1456
                                      && (v1484 = *(_QWORD *)(v1455 + 8 * v1483)) != 0
                                      && (v1485 = *(unsigned __int16 *)(v1484 + 2 * (HIDWORD(v1481) & 0x7F)),
                                          v1462 > v1485)
                                      && (v1486 = v1461 + 8 * v1485, v1486 != v1460)
                                      && *(_DWORD *)(v1486 + 4) == (_DWORD)v1482)
                                    {
                                      v1487 = v1002[10] + 24 * v1485;
                                    }
                                    else
                                    {
                                      v1487 = v1002[11];
                                    }
                                    v1936 = v1007;
                                    if (v1483 < v1466
                                      && (v1488 = *(_QWORD *)(v1465 + 8 * v1483)) != 0
                                      && (v1489 = *(unsigned __int16 *)(v1488 + 2 * (HIDWORD(v1481) & 0x7F)),
                                          v1471 > v1489)
                                      && (v1490 = v1470 + 8 * v1489, v1490 != v1469)
                                      && *(_DWORD *)(v1490 + 4) == (_DWORD)v1482)
                                    {
                                      v1452 = v1004[10] + 16 * v1489;
                                    }
                                    else
                                    {
                                      v1452 = v1004[11];
                                    }
                                    processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1949, v1130, v1452, *(float *)(v1487 + 8), *(float *)(v1487 + 20));
                                    v1007 = v1936;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1130 += 24;
            ++v1128;
          }
          while (v1128 != (unint64_t *)v1129);
        }
      }
      if (v1004 + 4 == v1011)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1943;
        v1131 = (unint64_t *)v1004[7];
        v1132 = (uint64_t *)v1004[8];
        if (v1131 != (unint64_t *)v1132)
        {
          v1133 = v1004[10];
          do
          {
            v1493 = *((unsigned int *)v1131 + 1);
            v1494 = v1493 >> 7;
            v1495 = v1002[4];
            v1496 = (v1002[5] - v1495) >> 3;
            if (v1493 >> 7 < v1496)
            {
              v1497 = *(_QWORD *)(v1495 + 8 * v1494);
              if (v1497)
              {
                v1498 = v1493 & 0x7F;
                v1499 = *(unsigned __int16 *)(v1497 + 2 * v1498);
                v1501 = v1002[7];
                v1500 = v1002[8];
                v1502 = (v1500 - v1501) >> 3;
                if (v1502 > v1499)
                {
                  v1503 = v1501 + 8 * v1499;
                  if (v1503 != v1500 && *(_DWORD *)(v1503 + 4) == (_DWORD)v1493)
                  {
                    v1505 = v1003[4];
                    v1506 = (v1003[5] - v1505) >> 3;
                    if (v1494 < v1506)
                    {
                      v1507 = *(_QWORD *)(v1505 + 8 * v1494);
                      if (v1507)
                      {
                        v1508 = *(unsigned __int16 *)(v1507 + 2 * v1498);
                        v1510 = v1003[7];
                        v1509 = v1003[8];
                        v1511 = (v1509 - v1510) >> 3;
                        if (v1511 > v1508)
                        {
                          v1512 = v1510 + 8 * v1508;
                          if (v1512 != v1509 && *(_DWORD *)(v1512 + 4) == (_DWORD)v1493)
                          {
                            v1514 = v1006[4];
                            if (v1494 < (v1006[5] - v1514) >> 3)
                            {
                              v1515 = *(_QWORD *)(v1514 + 8 * v1494);
                              if (v1515)
                              {
                                v1516 = *(unsigned __int16 *)(v1515 + 2 * v1498);
                                v1518 = v1006[7];
                                v1517 = v1006[8];
                                if (v1516 < (v1517 - v1518) >> 3)
                                {
                                  v1519 = v1518 + 8 * v1516;
                                  if (v1519 != v1517 && *(_DWORD *)(v1519 + 4) == (_DWORD)v1493)
                                  {
                                    v1521 = *v1131;
                                    v1522 = HIDWORD(*v1131);
                                    v1523 = *v1131 >> 39;
                                    if (v1523 < v1496
                                      && (v1524 = *(_QWORD *)(v1495 + 8 * v1523)) != 0
                                      && (v1525 = *(unsigned __int16 *)(v1524 + 2 * (HIDWORD(v1521) & 0x7F)),
                                          v1502 > v1525)
                                      && (v1526 = v1501 + 8 * v1525, v1526 != v1500)
                                      && *(_DWORD *)(v1526 + 4) == (_DWORD)v1522)
                                    {
                                      v1527 = v1002[10] + 24 * v1525;
                                    }
                                    else
                                    {
                                      v1527 = v1002[11];
                                    }
                                    if (v1523 < v1506
                                      && (v1528 = *(_QWORD *)(v1505 + 8 * v1523)) != 0
                                      && (v1529 = *(unsigned __int16 *)(v1528 + 2 * (HIDWORD(v1521) & 0x7F)),
                                          v1511 > v1529)
                                      && (v1530 = v1510 + 8 * v1529, v1530 != v1509)
                                      && *(_DWORD *)(v1530 + 4) == (_DWORD)v1522)
                                    {
                                      v1491 = v1007;
                                      v1492 = v1003[10] + 24 * v1529;
                                    }
                                    else
                                    {
                                      v1491 = v1007;
                                      v1492 = v1003[11];
                                    }
                                    processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1949, v1492, v1133, *(float *)(v1527 + 8), *(float *)(v1527 + 20));
                                    v1007 = v1491;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1133 += 16;
            ++v1131;
          }
          while (v1131 != (unint64_t *)v1132);
        }
      }
      if ((_QWORD *)v1007 == v1011)
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = &v1943;
        v1134 = (unint64_t *)v1006[7];
        for (i3 = (uint64_t *)v1006[8]; v1134 != (unint64_t *)i3; ++v1134)
        {
          v1532 = *((unsigned int *)v1134 + 1);
          v1533 = v1532 >> 7;
          v1534 = v1002[4];
          v1535 = (v1002[5] - v1534) >> 3;
          if (v1532 >> 7 < v1535)
          {
            v1536 = *(_QWORD *)(v1534 + 8 * v1533);
            if (v1536)
            {
              v1537 = v1532 & 0x7F;
              v1538 = *(unsigned __int16 *)(v1536 + 2 * v1537);
              v1540 = v1002[7];
              v1539 = v1002[8];
              v1541 = (v1539 - v1540) >> 3;
              if (v1541 > v1538)
              {
                v1542 = v1540 + 8 * v1538;
                if (v1542 != v1539 && *(_DWORD *)(v1542 + 4) == (_DWORD)v1532)
                {
                  v1544 = v1003[4];
                  v1545 = (v1003[5] - v1544) >> 3;
                  if (v1533 < v1545)
                  {
                    v1546 = *(_QWORD *)(v1544 + 8 * v1533);
                    if (v1546)
                    {
                      v1547 = *(unsigned __int16 *)(v1546 + 2 * v1537);
                      v1549 = v1003[7];
                      v1548 = v1003[8];
                      v1550 = (v1548 - v1549) >> 3;
                      if (v1550 > v1547)
                      {
                        v1551 = v1549 + 8 * v1547;
                        if (v1551 != v1548 && *(_DWORD *)(v1551 + 4) == (_DWORD)v1532)
                        {
                          v1553 = v1004[4];
                          v1554 = (v1004[5] - v1553) >> 3;
                          if (v1533 < v1554)
                          {
                            v1555 = *(_QWORD *)(v1553 + 8 * v1533);
                            if (v1555)
                            {
                              v1556 = *(unsigned __int16 *)(v1555 + 2 * v1537);
                              v1558 = v1004[7];
                              v1557 = v1004[8];
                              v1559 = (v1557 - v1558) >> 3;
                              if (v1559 > v1556)
                              {
                                v1560 = v1558 + 8 * v1556;
                                if (v1560 != v1557 && *(_DWORD *)(v1560 + 4) == (_DWORD)v1532)
                                {
                                  v1562 = *v1134;
                                  v1563 = HIDWORD(*v1134);
                                  v1564 = *v1134 >> 39;
                                  if (v1564 < v1535
                                    && (v1565 = *(_QWORD *)(v1534 + 8 * v1564)) != 0
                                    && (v1566 = *(unsigned __int16 *)(v1565 + 2 * (HIDWORD(v1562) & 0x7F)), v1541 > v1566)
                                    && (v1567 = v1540 + 8 * v1566, v1567 != v1539)
                                    && *(_DWORD *)(v1567 + 4) == (_DWORD)v1563)
                                  {
                                    v1568 = v1002[10] + 24 * v1566;
                                  }
                                  else
                                  {
                                    v1568 = v1002[11];
                                  }
                                  if (v1564 < v1545
                                    && (v1569 = *(_QWORD *)(v1544 + 8 * v1564)) != 0
                                    && (v1570 = *(unsigned __int16 *)(v1569 + 2 * (HIDWORD(v1562) & 0x7F)), v1550 > v1570)
                                    && (v1571 = v1549 + 8 * v1570, v1571 != v1548)
                                    && *(_DWORD *)(v1571 + 4) == (_DWORD)v1563)
                                  {
                                    v1572 = v1003[10] + 24 * v1570;
                                  }
                                  else
                                  {
                                    v1572 = v1003[11];
                                  }
                                  if (v1564 < v1554
                                    && (v1573 = *(_QWORD *)(v1553 + 8 * v1564)) != 0
                                    && (v1574 = *(unsigned __int16 *)(v1573 + 2 * (HIDWORD(v1562) & 0x7F)), v1559 > v1574)
                                    && (v1575 = v1558 + 8 * v1574, v1575 != v1557)
                                    && *(_DWORD *)(v1575 + 4) == (_DWORD)v1563)
                                  {
                                    v1531 = v1004[10] + 16 * v1574;
                                  }
                                  else
                                  {
                                    v1531 = v1004[11];
                                  }
                                  processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1949, v1572, v1531, *(float *)(v1568 + 8), *(float *)(v1568 + 20));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1012 = v1905[15];
      v1943 = v1012;
      v1013 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>(v1012);
      v1014 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1012);
      v1015 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v1012);
      v1016 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v1012);
      v1017 = (_QWORD *)v1016;
      v1018 = v1016 + 32;
      v1019 = (unint64_t *)v1013[7];
      v1020 = (uint64_t *)v1013[8];
      if (v1014[8] - v1014[7] >= (unint64_t)((char *)v1020 - (char *)v1019))
        v1021 = v1013 + 4;
      else
        v1021 = v1014 + 4;
      if (v1015[8] - v1015[7] < v1021[4] - v1021[3])
        v1021 = v1015 + 4;
      if (*(_QWORD *)(v1016 + 64) - *(_QWORD *)(v1016 + 56) >= v1021[4] - v1021[3])
        v1022 = v1021;
      else
        v1022 = (_QWORD *)(v1016 + 32);
      if (v1013 + 4 == v1022)
      {
        *(_QWORD *)&v1949 = &v1943;
        if (v1019 != (unint64_t *)v1020)
        {
          v1136 = (float *)v1013[10];
          do
          {
            v1577 = *((unsigned int *)v1019 + 1);
            v1578 = v1577 >> 7;
            v1579 = v1014[4];
            v1580 = (v1014[5] - v1579) >> 3;
            if (v1577 >> 7 < v1580)
            {
              v1581 = *(_QWORD *)(v1579 + 8 * v1578);
              if (v1581)
              {
                v1582 = v1577 & 0x7F;
                v1583 = *(unsigned __int16 *)(v1581 + 2 * v1582);
                v1585 = v1014[7];
                v1584 = v1014[8];
                v1586 = (v1584 - v1585) >> 3;
                if (v1586 > v1583)
                {
                  v1587 = v1585 + 8 * v1583;
                  if (v1587 != v1584 && *(_DWORD *)(v1587 + 4) == (_DWORD)v1577)
                  {
                    v1589 = v1015[4];
                    v1590 = (v1015[5] - v1589) >> 3;
                    if (v1578 < v1590)
                    {
                      v1591 = *(_QWORD *)(v1589 + 8 * v1578);
                      if (v1591)
                      {
                        v1592 = *(unsigned __int16 *)(v1591 + 2 * v1582);
                        v1594 = v1015[7];
                        v1593 = v1015[8];
                        v1595 = (v1593 - v1594) >> 3;
                        if (v1595 > v1592)
                        {
                          v1596 = v1594 + 8 * v1592;
                          if (v1596 != v1593 && *(_DWORD *)(v1596 + 4) == (_DWORD)v1577)
                          {
                            v1598 = v1017[4];
                            if (v1578 < (v1017[5] - v1598) >> 3)
                            {
                              v1599 = *(_QWORD *)(v1598 + 8 * v1578);
                              if (v1599)
                              {
                                v1600 = *(unsigned __int16 *)(v1599 + 2 * v1582);
                                v1602 = v1017[7];
                                v1601 = v1017[8];
                                if (v1600 < (v1601 - v1602) >> 3)
                                {
                                  v1603 = v1602 + 8 * v1600;
                                  if (v1603 != v1601 && *(_DWORD *)(v1603 + 4) == (_DWORD)v1577)
                                  {
                                    v1605 = *v1019;
                                    v1606 = HIDWORD(*v1019);
                                    v1607 = *v1019 >> 39;
                                    if (v1607 < v1580
                                      && (v1608 = *(_QWORD *)(v1579 + 8 * v1607)) != 0
                                      && (v1609 = *(unsigned __int16 *)(v1608 + 2 * (HIDWORD(v1605) & 0x7F)),
                                          v1586 > v1609)
                                      && (v1610 = v1585 + 8 * v1609, v1610 != v1584)
                                      && *(_DWORD *)(v1610 + 4) == (_DWORD)v1606)
                                    {
                                      v1611 = v1014[10] + 24 * v1609;
                                    }
                                    else
                                    {
                                      v1611 = v1014[11];
                                    }
                                    v1937 = v1018;
                                    if (v1607 < v1590
                                      && (v1612 = *(_QWORD *)(v1589 + 8 * v1607)) != 0
                                      && (v1613 = *(unsigned __int16 *)(v1612 + 2 * (HIDWORD(v1605) & 0x7F)),
                                          v1595 > v1613)
                                      && (v1614 = v1594 + 8 * v1613, v1614 != v1593)
                                      && *(_DWORD *)(v1614 + 4) == (_DWORD)v1606)
                                    {
                                      v1576 = v1015[10] + 16 * v1613;
                                    }
                                    else
                                    {
                                      v1576 = v1015[11];
                                    }
                                    processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1136, v1611, v1576);
                                    v1018 = v1937;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1136 += 6;
            ++v1019;
          }
          while (v1019 != (unint64_t *)v1020);
        }
      }
      if (v1014 + 4 == v1022)
      {
        *(_QWORD *)&v1949 = &v1943;
        v1137 = (unint64_t *)v1014[7];
        v1138 = (uint64_t *)v1014[8];
        if (v1137 != (unint64_t *)v1138)
        {
          v1139 = v1014[10];
          do
          {
            v1616 = *((unsigned int *)v1137 + 1);
            v1617 = v1616 >> 7;
            v1618 = v1013[4];
            v1619 = (v1013[5] - v1618) >> 3;
            if (v1616 >> 7 < v1619)
            {
              v1620 = *(_QWORD *)(v1618 + 8 * v1617);
              if (v1620)
              {
                v1621 = v1616 & 0x7F;
                v1622 = *(unsigned __int16 *)(v1620 + 2 * v1621);
                v1624 = v1013[7];
                v1623 = v1013[8];
                v1625 = (v1623 - v1624) >> 3;
                if (v1625 > v1622)
                {
                  v1626 = v1624 + 8 * v1622;
                  if (v1626 != v1623 && *(_DWORD *)(v1626 + 4) == (_DWORD)v1616)
                  {
                    v1628 = v1015[4];
                    v1629 = (v1015[5] - v1628) >> 3;
                    if (v1617 < v1629)
                    {
                      v1630 = *(_QWORD *)(v1628 + 8 * v1617);
                      if (v1630)
                      {
                        v1631 = *(unsigned __int16 *)(v1630 + 2 * v1621);
                        v1633 = v1015[7];
                        v1632 = v1015[8];
                        v1634 = (v1632 - v1633) >> 3;
                        if (v1634 > v1631)
                        {
                          v1635 = v1633 + 8 * v1631;
                          if (v1635 != v1632 && *(_DWORD *)(v1635 + 4) == (_DWORD)v1616)
                          {
                            v1637 = v1017[4];
                            if (v1617 < (v1017[5] - v1637) >> 3)
                            {
                              v1638 = *(_QWORD *)(v1637 + 8 * v1617);
                              if (v1638)
                              {
                                v1639 = *(unsigned __int16 *)(v1638 + 2 * v1621);
                                v1641 = v1017[7];
                                v1640 = v1017[8];
                                if (v1639 < (v1640 - v1641) >> 3)
                                {
                                  v1642 = v1641 + 8 * v1639;
                                  if (v1642 != v1640 && *(_DWORD *)(v1642 + 4) == (_DWORD)v1616)
                                  {
                                    v1644 = *v1137;
                                    v1645 = HIDWORD(*v1137);
                                    v1646 = *v1137 >> 39;
                                    if (v1646 < v1619
                                      && (v1647 = *(_QWORD *)(v1618 + 8 * v1646)) != 0
                                      && (v1648 = *(unsigned __int16 *)(v1647 + 2 * (HIDWORD(v1644) & 0x7F)),
                                          v1625 > v1648)
                                      && (v1649 = v1624 + 8 * v1648, v1649 != v1623)
                                      && *(_DWORD *)(v1649 + 4) == (_DWORD)v1645)
                                    {
                                      v1650 = (float *)(v1013[10] + 24 * v1648);
                                    }
                                    else
                                    {
                                      v1650 = (float *)v1013[11];
                                    }
                                    v1938 = v1018;
                                    if (v1646 < v1629
                                      && (v1651 = *(_QWORD *)(v1628 + 8 * v1646)) != 0
                                      && (v1652 = *(unsigned __int16 *)(v1651 + 2 * (HIDWORD(v1644) & 0x7F)),
                                          v1634 > v1652)
                                      && (v1653 = v1633 + 8 * v1652, v1653 != v1632)
                                      && *(_DWORD *)(v1653 + 4) == (_DWORD)v1645)
                                    {
                                      v1615 = v1015[10] + 16 * v1652;
                                    }
                                    else
                                    {
                                      v1615 = v1015[11];
                                    }
                                    processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1650, v1139, v1615);
                                    v1018 = v1938;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1139 += 24;
            ++v1137;
          }
          while (v1137 != (unint64_t *)v1138);
        }
      }
      if (v1015 + 4 == v1022)
      {
        *(_QWORD *)&v1949 = &v1943;
        v1140 = (unint64_t *)v1015[7];
        v1141 = (uint64_t *)v1015[8];
        if (v1140 != (unint64_t *)v1141)
        {
          v1142 = v1015[10];
          do
          {
            v1656 = *((unsigned int *)v1140 + 1);
            v1657 = v1656 >> 7;
            v1658 = v1013[4];
            v1659 = (v1013[5] - v1658) >> 3;
            if (v1656 >> 7 < v1659)
            {
              v1660 = *(_QWORD *)(v1658 + 8 * v1657);
              if (v1660)
              {
                v1661 = v1656 & 0x7F;
                v1662 = *(unsigned __int16 *)(v1660 + 2 * v1661);
                v1664 = v1013[7];
                v1663 = v1013[8];
                v1665 = (v1663 - v1664) >> 3;
                if (v1665 > v1662)
                {
                  v1666 = v1664 + 8 * v1662;
                  if (v1666 != v1663 && *(_DWORD *)(v1666 + 4) == (_DWORD)v1656)
                  {
                    v1668 = v1014[4];
                    v1669 = (v1014[5] - v1668) >> 3;
                    if (v1657 < v1669)
                    {
                      v1670 = *(_QWORD *)(v1668 + 8 * v1657);
                      if (v1670)
                      {
                        v1671 = *(unsigned __int16 *)(v1670 + 2 * v1661);
                        v1673 = v1014[7];
                        v1672 = v1014[8];
                        v1674 = (v1672 - v1673) >> 3;
                        if (v1674 > v1671)
                        {
                          v1675 = v1673 + 8 * v1671;
                          if (v1675 != v1672 && *(_DWORD *)(v1675 + 4) == (_DWORD)v1656)
                          {
                            v1677 = v1017[4];
                            if (v1657 < (v1017[5] - v1677) >> 3)
                            {
                              v1678 = *(_QWORD *)(v1677 + 8 * v1657);
                              if (v1678)
                              {
                                v1679 = *(unsigned __int16 *)(v1678 + 2 * v1661);
                                v1681 = v1017[7];
                                v1680 = v1017[8];
                                if (v1679 < (v1680 - v1681) >> 3)
                                {
                                  v1682 = v1681 + 8 * v1679;
                                  if (v1682 != v1680 && *(_DWORD *)(v1682 + 4) == (_DWORD)v1656)
                                  {
                                    v1684 = *v1140;
                                    v1685 = HIDWORD(*v1140);
                                    v1686 = *v1140 >> 39;
                                    if (v1686 < v1659
                                      && (v1687 = *(_QWORD *)(v1658 + 8 * v1686)) != 0
                                      && (v1688 = *(unsigned __int16 *)(v1687 + 2 * (HIDWORD(v1684) & 0x7F)),
                                          v1665 > v1688)
                                      && (v1689 = v1664 + 8 * v1688, v1689 != v1663)
                                      && *(_DWORD *)(v1689 + 4) == (_DWORD)v1685)
                                    {
                                      v1690 = (float *)(v1013[10] + 24 * v1688);
                                    }
                                    else
                                    {
                                      v1690 = (float *)v1013[11];
                                    }
                                    if (v1686 < v1669
                                      && (v1691 = *(_QWORD *)(v1668 + 8 * v1686)) != 0
                                      && (v1692 = *(unsigned __int16 *)(v1691 + 2 * (HIDWORD(v1684) & 0x7F)),
                                          v1674 > v1692)
                                      && (v1693 = v1673 + 8 * v1692, v1693 != v1672)
                                      && *(_DWORD *)(v1693 + 4) == (_DWORD)v1685)
                                    {
                                      v1654 = v1018;
                                      v1655 = v1014[10] + 24 * v1692;
                                    }
                                    else
                                    {
                                      v1654 = v1018;
                                      v1655 = v1014[11];
                                    }
                                    processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1690, v1655, v1142);
                                    v1018 = v1654;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1142 += 16;
            ++v1140;
          }
          while (v1140 != (unint64_t *)v1141);
        }
      }
      if ((_QWORD *)v1018 == v1022)
      {
        *(_QWORD *)&v1949 = &v1943;
        v1143 = (unint64_t *)v1017[7];
        for (i4 = (uint64_t *)v1017[8]; v1143 != (unint64_t *)i4; ++v1143)
        {
          v1695 = *((unsigned int *)v1143 + 1);
          v1696 = v1695 >> 7;
          v1697 = v1013[4];
          v1698 = (v1013[5] - v1697) >> 3;
          if (v1695 >> 7 < v1698)
          {
            v1699 = *(_QWORD *)(v1697 + 8 * v1696);
            if (v1699)
            {
              v1700 = v1695 & 0x7F;
              v1701 = *(unsigned __int16 *)(v1699 + 2 * v1700);
              v1703 = v1013[7];
              v1702 = v1013[8];
              v1704 = (v1702 - v1703) >> 3;
              if (v1704 > v1701)
              {
                v1705 = v1703 + 8 * v1701;
                if (v1705 != v1702 && *(_DWORD *)(v1705 + 4) == (_DWORD)v1695)
                {
                  v1707 = v1014[4];
                  v1708 = (v1014[5] - v1707) >> 3;
                  if (v1696 < v1708)
                  {
                    v1709 = *(_QWORD *)(v1707 + 8 * v1696);
                    if (v1709)
                    {
                      v1710 = *(unsigned __int16 *)(v1709 + 2 * v1700);
                      v1712 = v1014[7];
                      v1711 = v1014[8];
                      v1713 = (v1711 - v1712) >> 3;
                      if (v1713 > v1710)
                      {
                        v1714 = v1712 + 8 * v1710;
                        if (v1714 != v1711 && *(_DWORD *)(v1714 + 4) == (_DWORD)v1695)
                        {
                          v1716 = v1015[4];
                          v1717 = (v1015[5] - v1716) >> 3;
                          if (v1696 < v1717)
                          {
                            v1718 = *(_QWORD *)(v1716 + 8 * v1696);
                            if (v1718)
                            {
                              v1719 = *(unsigned __int16 *)(v1718 + 2 * v1700);
                              v1721 = v1015[7];
                              v1720 = v1015[8];
                              v1722 = (v1720 - v1721) >> 3;
                              if (v1722 > v1719)
                              {
                                v1723 = v1721 + 8 * v1719;
                                if (v1723 != v1720 && *(_DWORD *)(v1723 + 4) == (_DWORD)v1695)
                                {
                                  v1725 = *v1143;
                                  v1726 = HIDWORD(*v1143);
                                  v1727 = *v1143 >> 39;
                                  if (v1727 < v1698
                                    && (v1728 = *(_QWORD *)(v1697 + 8 * v1727)) != 0
                                    && (v1729 = *(unsigned __int16 *)(v1728 + 2 * (HIDWORD(v1725) & 0x7F)), v1704 > v1729)
                                    && (v1730 = v1703 + 8 * v1729, v1730 != v1702)
                                    && *(_DWORD *)(v1730 + 4) == (_DWORD)v1726)
                                  {
                                    v1731 = (float *)(v1013[10] + 24 * v1729);
                                  }
                                  else
                                  {
                                    v1731 = (float *)v1013[11];
                                  }
                                  if (v1727 < v1708
                                    && (v1732 = *(_QWORD *)(v1707 + 8 * v1727)) != 0
                                    && (v1733 = *(unsigned __int16 *)(v1732 + 2 * (HIDWORD(v1725) & 0x7F)), v1713 > v1733)
                                    && (v1734 = v1712 + 8 * v1733, v1734 != v1711)
                                    && *(_DWORD *)(v1734 + 4) == (_DWORD)v1726)
                                  {
                                    v1735 = v1014[10] + 24 * v1733;
                                  }
                                  else
                                  {
                                    v1735 = v1014[11];
                                  }
                                  if (v1727 < v1717
                                    && (v1736 = *(_QWORD *)(v1716 + 8 * v1727)) != 0
                                    && (v1737 = *(unsigned __int16 *)(v1736 + 2 * (HIDWORD(v1725) & 0x7F)), v1722 > v1737)
                                    && (v1738 = v1721 + 8 * v1737, v1738 != v1720)
                                    && *(_DWORD *)(v1738 + 4) == (_DWORD)v1726)
                                  {
                                    v1694 = v1015[10] + 16 * v1737;
                                  }
                                  else
                                  {
                                    v1694 = v1015[11];
                                  }
                                  processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1731, v1735, v1694);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1023 = v1905[15];
      *(_QWORD *)&v1947 = v1023;
      v1943 = 0x1182AA34D6B77F4FLL;
      v1024 = *(int8x8_t *)(v1023 + 128);
      if (v1024)
      {
        v1025 = (uint8x8_t)vcnt_s8(v1024);
        v1025.i16[0] = vaddlv_u8(v1025);
        if (v1025.u32[0] > 1uLL)
        {
          v1026 = 0x1182AA34D6B77F4FLL;
          if (*(_QWORD *)&v1024 <= 0x1182AA34D6B77F4FuLL)
            v1026 = 0x1182AA34D6B77F4FuLL % *(_QWORD *)&v1024;
        }
        else
        {
          v1026 = (*(_QWORD *)&v1024 - 1) & 0x1182AA34D6B77F4FLL;
        }
        v1145 = *(_QWORD **)(*(_QWORD *)(v1023 + 120) + 8 * v1026);
        if (v1145)
        {
          v1146 = (_QWORD *)*v1145;
          if (v1146)
          {
            if (v1025.u32[0] < 2uLL)
            {
              v1147 = *(_QWORD *)&v1024 - 1;
              while (1)
              {
                v1149 = v1146[1];
                if (v1149 == 0x1182AA34D6B77F4FLL)
                {
                  if (v1146[2] == 0x1182AA34D6B77F4FLL)
                    goto LABEL_1339;
                }
                else if ((v1149 & v1147) != v1026)
                {
                  goto LABEL_1315;
                }
                v1146 = (_QWORD *)*v1146;
                if (!v1146)
                  goto LABEL_1315;
              }
            }
            do
            {
              v1148 = v1146[1];
              if (v1148 == 0x1182AA34D6B77F4FLL)
              {
                if (v1146[2] == 0x1182AA34D6B77F4FLL)
                {
LABEL_1339:
                  v1150 = v1146[3];
                  goto LABEL_1318;
                }
              }
              else
              {
                if (v1148 >= *(_QWORD *)&v1024)
                  v1148 %= *(_QWORD *)&v1024;
                if (v1148 != v1026)
                  break;
              }
              v1146 = (_QWORD *)*v1146;
            }
            while (v1146);
          }
        }
      }
LABEL_1315:
      v1150 = operator new();
      *(_QWORD *)(v1150 + 16) = "arComponents::AnimationTarget<arComponents::AnimationProperty::Scale, float>]";
      *(_QWORD *)(v1150 + 24) = 76;
      *(_OWORD *)(v1150 + 32) = 0u;
      *(_OWORD *)(v1150 + 48) = 0u;
      *(_OWORD *)(v1150 + 64) = 0u;
      *(_OWORD *)(v1150 + 80) = 0u;
      *(_OWORD *)(v1150 + 96) = 0u;
      *(_OWORD *)(v1150 + 112) = 0u;
      *(_OWORD *)(v1150 + 128) = 0u;
      *(_DWORD *)(v1150 + 144) = 1065353216;
      *(_OWORD *)(v1150 + 152) = 0u;
      *(_OWORD *)(v1150 + 168) = 0u;
      *(_QWORD *)(v1150 + 184) = 0;
      *(_DWORD *)(v1150 + 192) = 1065353216;
      *(_OWORD *)(v1150 + 200) = 0u;
      *(_OWORD *)(v1150 + 216) = 0u;
      *(_QWORD *)(v1150 + 232) = 0;
      *(_DWORD *)(v1150 + 240) = 1065353216;
      *(_QWORD *)v1150 = &off_1E42B1B78;
      *(_QWORD *)(v1150 + 8) = 0x1182AA34D6B77F4FLL;
      *(_QWORD *)(v1150 + 248) = v1023;
      v1151 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v1023 + 120), 0x1182AA34D6B77F4FuLL, &v1943);
      v1152 = v1151[3];
      v1151[3] = v1150;
      if (v1152)
        (*(void (**)(uint64_t))(*(_QWORD *)v1152 + 8))(v1152);
      *(_QWORD *)&v1949 = 0x1182AA34D6B77F4FLL;
      *((_QWORD *)&v1949 + 1) = "arComponents::AnimationTarget<arComponents::AnimationProperty::Scale, float>]";
      v1950 = 76;
      gdc::Registry::_registerStorageDataSignals(v1023, 0x1182AA34D6B77F4FLL, (uint64_t)&v1949, (uint64_t *)(v1150 + 104));
LABEL_1318:
      v1153 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v1023);
      v1154 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v1023);
      v1155 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v1023);
      v1156 = (_QWORD *)v1155;
      v1157 = v1155 + 32;
      v1159 = *(unint64_t **)(v1150 + 56);
      v1158 = *(uint64_t **)(v1150 + 64);
      if (v1153[8] - v1153[7] >= (unint64_t)((char *)v1158 - (char *)v1159))
        v1160 = (_QWORD *)(v1150 + 32);
      else
        v1160 = v1153 + 4;
      if (v1154[8] - v1154[7] < v1160[4] - v1160[3])
        v1160 = v1154 + 4;
      if (*(_QWORD *)(v1155 + 64) - *(_QWORD *)(v1155 + 56) >= v1160[4] - v1160[3])
        v1161 = v1160;
      else
        v1161 = (_QWORD *)(v1155 + 32);
      if ((_QWORD *)(v1150 + 32) == v1161)
      {
        *(_QWORD *)&v1949 = &v1947;
        if (v1159 != (unint64_t *)v1158)
        {
          v1162 = (float *)(*(_QWORD *)(v1150 + 80) + 4);
          do
          {
            v1740 = *((unsigned int *)v1159 + 1);
            v1741 = v1740 >> 7;
            v1742 = v1153[4];
            v1743 = (v1153[5] - v1742) >> 3;
            if (v1740 >> 7 < v1743)
            {
              v1744 = *(_QWORD *)(v1742 + 8 * v1741);
              if (v1744)
              {
                v1745 = v1740 & 0x7F;
                v1746 = *(unsigned __int16 *)(v1744 + 2 * v1745);
                v1748 = v1153[7];
                v1747 = v1153[8];
                v1749 = (v1747 - v1748) >> 3;
                if (v1749 > v1746)
                {
                  v1750 = v1748 + 8 * v1746;
                  if (v1750 != v1747 && *(_DWORD *)(v1750 + 4) == (_DWORD)v1740)
                  {
                    v1752 = v1154[4];
                    v1753 = (v1154[5] - v1752) >> 3;
                    if (v1741 < v1753)
                    {
                      v1754 = *(_QWORD *)(v1752 + 8 * v1741);
                      if (v1754)
                      {
                        v1755 = *(unsigned __int16 *)(v1754 + 2 * v1745);
                        v1757 = v1154[7];
                        v1756 = v1154[8];
                        v1758 = (v1756 - v1757) >> 3;
                        if (v1758 > v1755)
                        {
                          v1759 = v1757 + 8 * v1755;
                          if (v1759 != v1756 && *(_DWORD *)(v1759 + 4) == (_DWORD)v1740)
                          {
                            v1761 = v1156[4];
                            if (v1741 < (v1156[5] - v1761) >> 3)
                            {
                              v1762 = *(_QWORD *)(v1761 + 8 * v1741);
                              if (v1762)
                              {
                                v1763 = *(unsigned __int16 *)(v1762 + 2 * v1745);
                                v1765 = v1156[7];
                                v1764 = v1156[8];
                                if (v1763 < (v1764 - v1765) >> 3)
                                {
                                  v1766 = v1765 + 8 * v1763;
                                  if (v1766 != v1764 && *(_DWORD *)(v1766 + 4) == (_DWORD)v1740)
                                  {
                                    v1768 = *v1159;
                                    v1769 = HIDWORD(*v1159);
                                    v1770 = *v1159 >> 39;
                                    if (v1770 < v1743
                                      && (v1771 = *(_QWORD *)(v1742 + 8 * v1770)) != 0
                                      && (v1772 = *(unsigned __int16 *)(v1771 + 2 * (HIDWORD(v1768) & 0x7F)),
                                          v1749 > v1772)
                                      && (v1773 = v1748 + 8 * v1772, v1773 != v1747)
                                      && *(_DWORD *)(v1773 + 4) == (_DWORD)v1769)
                                    {
                                      v1774 = v1153[10] + 24 * v1772;
                                    }
                                    else
                                    {
                                      v1774 = v1153[11];
                                    }
                                    v1939 = v1157;
                                    if (v1770 < v1753
                                      && (v1775 = *(_QWORD *)(v1752 + 8 * v1770)) != 0
                                      && (v1776 = *(unsigned __int16 *)(v1775 + 2 * (HIDWORD(v1768) & 0x7F)),
                                          v1758 > v1776)
                                      && (v1777 = v1757 + 8 * v1776, v1777 != v1756)
                                      && *(_DWORD *)(v1777 + 4) == (_DWORD)v1769)
                                    {
                                      v1739 = v1154[10] + 16 * v1776;
                                    }
                                    else
                                    {
                                      v1739 = v1154[11];
                                    }
                                    processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1774, v1739, *(v1162 - 1), *v1162);
                                    v1157 = v1939;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v1159;
            v1162 += 2;
          }
          while (v1159 != (unint64_t *)v1158);
        }
      }
      if (v1153 + 4 == v1161)
      {
        *(_QWORD *)&v1949 = &v1947;
        v1163 = (unint64_t *)v1153[7];
        v1164 = (uint64_t *)v1153[8];
        if (v1163 != (unint64_t *)v1164)
        {
          v1165 = v1153[10];
          do
          {
            v1780 = *((unsigned int *)v1163 + 1);
            v1781 = v1780 >> 7;
            v1782 = *(_QWORD *)(v1150 + 32);
            v1783 = (*(_QWORD *)(v1150 + 40) - v1782) >> 3;
            if (v1780 >> 7 < v1783)
            {
              v1784 = *(_QWORD *)(v1782 + 8 * v1781);
              if (v1784)
              {
                v1785 = v1780 & 0x7F;
                v1786 = *(unsigned __int16 *)(v1784 + 2 * v1785);
                v1788 = *(_QWORD *)(v1150 + 56);
                v1787 = *(_QWORD *)(v1150 + 64);
                v1789 = (v1787 - v1788) >> 3;
                if (v1789 > v1786)
                {
                  v1790 = v1788 + 8 * v1786;
                  if (v1790 != v1787 && *(_DWORD *)(v1790 + 4) == (_DWORD)v1780)
                  {
                    v1792 = v1154[4];
                    v1793 = (v1154[5] - v1792) >> 3;
                    if (v1781 < v1793)
                    {
                      v1794 = *(_QWORD *)(v1792 + 8 * v1781);
                      if (v1794)
                      {
                        v1795 = *(unsigned __int16 *)(v1794 + 2 * v1785);
                        v1797 = v1154[7];
                        v1796 = v1154[8];
                        v1798 = (v1796 - v1797) >> 3;
                        if (v1798 > v1795)
                        {
                          v1799 = v1797 + 8 * v1795;
                          if (v1799 != v1796 && *(_DWORD *)(v1799 + 4) == (_DWORD)v1780)
                          {
                            v1801 = v1156[4];
                            if (v1781 < (v1156[5] - v1801) >> 3)
                            {
                              v1802 = *(_QWORD *)(v1801 + 8 * v1781);
                              if (v1802)
                              {
                                v1803 = *(unsigned __int16 *)(v1802 + 2 * v1785);
                                v1805 = v1156[7];
                                v1804 = v1156[8];
                                if (v1803 < (v1804 - v1805) >> 3)
                                {
                                  v1806 = v1805 + 8 * v1803;
                                  if (v1806 != v1804 && *(_DWORD *)(v1806 + 4) == (_DWORD)v1780)
                                  {
                                    v1808 = *v1163;
                                    v1809 = HIDWORD(*v1163);
                                    v1810 = *v1163 >> 39;
                                    if (v1810 < v1783
                                      && (v1811 = *(_QWORD *)(v1782 + 8 * v1810)) != 0
                                      && (v1812 = *(unsigned __int16 *)(v1811 + 2 * (HIDWORD(v1808) & 0x7F)),
                                          v1789 > v1812)
                                      && (v1813 = v1788 + 8 * v1812, v1813 != v1787)
                                      && *(_DWORD *)(v1813 + 4) == (_DWORD)v1809)
                                    {
                                      v1814 = (float *)(*(_QWORD *)(v1150 + 80) + 8 * v1812);
                                    }
                                    else
                                    {
                                      v1814 = *(float **)(v1150 + 88);
                                    }
                                    if (v1810 < v1793
                                      && (v1815 = *(_QWORD *)(v1792 + 8 * v1810)) != 0
                                      && (v1816 = *(unsigned __int16 *)(v1815 + 2 * (HIDWORD(v1808) & 0x7F)),
                                          v1798 > v1816)
                                      && (v1817 = v1797 + 8 * v1816, v1817 != v1796)
                                      && *(_DWORD *)(v1817 + 4) == (_DWORD)v1809)
                                    {
                                      v1778 = v1157;
                                      v1779 = v1154[10] + 16 * v1816;
                                    }
                                    else
                                    {
                                      v1778 = v1157;
                                      v1779 = v1154[11];
                                    }
                                    processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1165, v1779, *v1814, v1814[1]);
                                    v1157 = v1778;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1165 += 24;
            ++v1163;
          }
          while (v1163 != (unint64_t *)v1164);
        }
      }
      if (v1154 + 4 == v1161)
      {
        *(_QWORD *)&v1949 = &v1947;
        v1166 = (unint64_t *)v1154[7];
        v1167 = (uint64_t *)v1154[8];
        if (v1166 != (unint64_t *)v1167)
        {
          v1168 = v1154[10];
          do
          {
            v1820 = *((unsigned int *)v1166 + 1);
            v1821 = v1820 >> 7;
            v1822 = *(_QWORD *)(v1150 + 32);
            v1823 = (*(_QWORD *)(v1150 + 40) - v1822) >> 3;
            if (v1820 >> 7 < v1823)
            {
              v1824 = *(_QWORD *)(v1822 + 8 * v1821);
              if (v1824)
              {
                v1825 = v1820 & 0x7F;
                v1826 = *(unsigned __int16 *)(v1824 + 2 * v1825);
                v1828 = *(_QWORD *)(v1150 + 56);
                v1827 = *(_QWORD *)(v1150 + 64);
                v1829 = (v1827 - v1828) >> 3;
                if (v1829 > v1826)
                {
                  v1830 = v1828 + 8 * v1826;
                  if (v1830 != v1827 && *(_DWORD *)(v1830 + 4) == (_DWORD)v1820)
                  {
                    v1832 = v1153[4];
                    v1833 = (v1153[5] - v1832) >> 3;
                    if (v1821 < v1833)
                    {
                      v1834 = *(_QWORD *)(v1832 + 8 * v1821);
                      if (v1834)
                      {
                        v1835 = *(unsigned __int16 *)(v1834 + 2 * v1825);
                        v1837 = v1153[7];
                        v1836 = v1153[8];
                        v1838 = (v1836 - v1837) >> 3;
                        if (v1838 > v1835)
                        {
                          v1839 = v1837 + 8 * v1835;
                          if (v1839 != v1836 && *(_DWORD *)(v1839 + 4) == (_DWORD)v1820)
                          {
                            v1841 = v1156[4];
                            if (v1821 < (v1156[5] - v1841) >> 3)
                            {
                              v1842 = *(_QWORD *)(v1841 + 8 * v1821);
                              if (v1842)
                              {
                                v1843 = *(unsigned __int16 *)(v1842 + 2 * v1825);
                                v1845 = v1156[7];
                                v1844 = v1156[8];
                                if (v1843 < (v1844 - v1845) >> 3)
                                {
                                  v1846 = v1845 + 8 * v1843;
                                  if (v1846 != v1844 && *(_DWORD *)(v1846 + 4) == (_DWORD)v1820)
                                  {
                                    v1848 = *v1166;
                                    v1849 = HIDWORD(*v1166);
                                    v1850 = *v1166 >> 39;
                                    if (v1850 < v1823
                                      && (v1851 = *(_QWORD *)(v1822 + 8 * v1850)) != 0
                                      && (v1852 = *(unsigned __int16 *)(v1851 + 2 * (HIDWORD(v1848) & 0x7F)),
                                          v1829 > v1852)
                                      && (v1853 = v1828 + 8 * v1852, v1853 != v1827)
                                      && *(_DWORD *)(v1853 + 4) == (_DWORD)v1849)
                                    {
                                      v1854 = (float *)(*(_QWORD *)(v1150 + 80) + 8 * v1852);
                                    }
                                    else
                                    {
                                      v1854 = *(float **)(v1150 + 88);
                                    }
                                    if (v1850 < v1833
                                      && (v1855 = *(_QWORD *)(v1832 + 8 * v1850)) != 0
                                      && (v1856 = *(unsigned __int16 *)(v1855 + 2 * (HIDWORD(v1848) & 0x7F)),
                                          v1838 > v1856)
                                      && (v1857 = v1837 + 8 * v1856, v1857 != v1836)
                                      && *(_DWORD *)(v1857 + 4) == (_DWORD)v1849)
                                    {
                                      v1818 = v1157;
                                      v1819 = v1153[10] + 24 * v1856;
                                    }
                                    else
                                    {
                                      v1818 = v1157;
                                      v1819 = v1153[11];
                                    }
                                    processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1819, v1168, *v1854, v1854[1]);
                                    v1157 = v1818;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v1168 += 16;
            ++v1166;
          }
          while (v1166 != (unint64_t *)v1167);
        }
      }
      if ((_QWORD *)v1157 == v1161)
      {
        *(_QWORD *)&v1949 = &v1947;
        v1170 = (unint64_t *)v1156[7];
        for (i5 = (uint64_t *)v1156[8]; v1170 != (unint64_t *)i5; ++v1170)
        {
          v1859 = *((unsigned int *)v1170 + 1);
          v1860 = v1859 >> 7;
          v1861 = *(_QWORD *)(v1150 + 32);
          v1862 = (*(_QWORD *)(v1150 + 40) - v1861) >> 3;
          if (v1859 >> 7 < v1862)
          {
            v1863 = *(_QWORD *)(v1861 + 8 * v1860);
            if (v1863)
            {
              v1864 = v1859 & 0x7F;
              v1865 = *(unsigned __int16 *)(v1863 + 2 * v1864);
              v1867 = *(_QWORD *)(v1150 + 56);
              v1866 = *(_QWORD *)(v1150 + 64);
              v1868 = (v1866 - v1867) >> 3;
              if (v1868 > v1865)
              {
                v1869 = v1867 + 8 * v1865;
                if (v1869 != v1866 && *(_DWORD *)(v1869 + 4) == (_DWORD)v1859)
                {
                  v1871 = v1153[4];
                  v1872 = (v1153[5] - v1871) >> 3;
                  if (v1860 < v1872)
                  {
                    v1873 = *(_QWORD *)(v1871 + 8 * v1860);
                    if (v1873)
                    {
                      v1874 = *(unsigned __int16 *)(v1873 + 2 * v1864);
                      v1876 = v1153[7];
                      v1875 = v1153[8];
                      v1877 = (v1875 - v1876) >> 3;
                      if (v1877 > v1874)
                      {
                        v1878 = v1876 + 8 * v1874;
                        if (v1878 != v1875 && *(_DWORD *)(v1878 + 4) == (_DWORD)v1859)
                        {
                          v1880 = v1154[4];
                          v1881 = (v1154[5] - v1880) >> 3;
                          if (v1860 < v1881)
                          {
                            v1882 = *(_QWORD *)(v1880 + 8 * v1860);
                            if (v1882)
                            {
                              v1883 = *(unsigned __int16 *)(v1882 + 2 * v1864);
                              v1885 = v1154[7];
                              v1884 = v1154[8];
                              v1886 = (v1884 - v1885) >> 3;
                              if (v1886 > v1883)
                              {
                                v1887 = v1885 + 8 * v1883;
                                if (v1887 != v1884 && *(_DWORD *)(v1887 + 4) == (_DWORD)v1859)
                                {
                                  v1889 = *v1170;
                                  v1890 = HIDWORD(*v1170);
                                  v1891 = *v1170 >> 39;
                                  if (v1891 < v1862
                                    && (v1892 = *(_QWORD *)(v1861 + 8 * v1891)) != 0
                                    && (v1893 = *(unsigned __int16 *)(v1892 + 2 * (HIDWORD(v1889) & 0x7F)), v1868 > v1893)
                                    && (v1894 = v1867 + 8 * v1893, v1894 != v1866)
                                    && *(_DWORD *)(v1894 + 4) == (_DWORD)v1890)
                                  {
                                    v1895 = (float *)(*(_QWORD *)(v1150 + 80) + 8 * v1893);
                                  }
                                  else
                                  {
                                    v1895 = *(float **)(v1150 + 88);
                                  }
                                  if (v1891 < v1872
                                    && (v1896 = *(_QWORD *)(v1871 + 8 * v1891)) != 0
                                    && (v1897 = *(unsigned __int16 *)(v1896 + 2 * (HIDWORD(v1889) & 0x7F)), v1877 > v1897)
                                    && (v1898 = v1876 + 8 * v1897, v1898 != v1875)
                                    && *(_DWORD *)(v1898 + 4) == (_DWORD)v1890)
                                  {
                                    v1899 = v1153[10] + 24 * v1897;
                                  }
                                  else
                                  {
                                    v1899 = v1153[11];
                                  }
                                  if (v1891 < v1881
                                    && (v1900 = *(_QWORD *)(v1880 + 8 * v1891)) != 0
                                    && (v1901 = *(unsigned __int16 *)(v1900 + 2 * (HIDWORD(v1889) & 0x7F)), v1886 > v1901)
                                    && (v1902 = v1885 + 8 * v1901, v1902 != v1884)
                                    && *(_DWORD *)(v1902 + 4) == (_DWORD)v1890)
                                  {
                                    v1858 = v1154[10] + 16 * v1901;
                                  }
                                  else
                                  {
                                    v1858 = v1154[11];
                                  }
                                  processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t **)&v1949, v1899, v1858, *v1895, v1895[1]);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return;
    }
  }
  v171 = 0;
  v172 = 2;
  v1916 = 5;
  while (1)
  {
    v1914 = v172;
    v173 = v171;
    v174 = v1926;
    v171 = v170;
    v1920 = (void *)MEMORY[0x1A1AF5730](VKAnimationCurveEaseInOut);
    v1926 = gdc::Registry::create((gdc::Registry *)v61);
    v175 = 0x6BC5598729A9856CLL;
    v1943 = 0x6BC5598729A9856CLL;
    v176 = (int8x8_t)v61[16];
    v1915 = v174;
    if (v176)
    {
      v177 = (uint8x8_t)vcnt_s8(v176);
      v177.i16[0] = vaddlv_u8(v177);
      if (v177.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v176 <= 0x6BC5598729A9856CuLL)
          v175 = 0x6BC5598729A9856CuLL % *(_QWORD *)&v176;
      }
      else
      {
        v175 = (*(_QWORD *)&v176 - 1) & 0x6BC5598729A9856CLL;
      }
      v178 = *(_QWORD **)(*v1931 + 8 * v175);
      if (v178)
      {
        v179 = (_QWORD *)*v178;
        if (v179)
        {
          if (v177.u32[0] < 2uLL)
          {
            v180 = *(_QWORD *)&v176 - 1;
            while (1)
            {
              v182 = v179[1];
              if (v182 == 0x6BC5598729A9856CLL)
              {
                if (v179[2] == 0x6BC5598729A9856CLL)
                  goto LABEL_534;
              }
              else if ((v182 & v180) != v175)
              {
                goto LABEL_185;
              }
              v179 = (_QWORD *)*v179;
              if (!v179)
                goto LABEL_185;
            }
          }
          do
          {
            v181 = v179[1];
            if (v181 == 0x6BC5598729A9856CLL)
            {
              if (v179[2] == 0x6BC5598729A9856CLL)
              {
LABEL_534:
                v183 = v179[3];
                goto LABEL_188;
              }
            }
            else
            {
              if (v181 >= *(_QWORD *)&v176)
                v181 %= *(_QWORD *)&v176;
              if (v181 != v175)
                break;
            }
            v179 = (_QWORD *)*v179;
          }
          while (v179);
        }
      }
    }
LABEL_185:
    v183 = operator new();
    *(_QWORD *)(v183 + 16) = "arComponents::AnimationInfo]";
    *(_QWORD *)(v183 + 24) = 27;
    *(_OWORD *)(v183 + 32) = 0u;
    *(_OWORD *)(v183 + 48) = 0u;
    *(_OWORD *)(v183 + 64) = 0u;
    *(_OWORD *)(v183 + 80) = 0u;
    *(_OWORD *)(v183 + 96) = 0u;
    *(_OWORD *)(v183 + 112) = 0u;
    *(_OWORD *)(v183 + 128) = 0u;
    *(_DWORD *)(v183 + 144) = 1065353216;
    *(_OWORD *)(v183 + 152) = 0u;
    *(_OWORD *)(v183 + 168) = 0u;
    *(_QWORD *)(v183 + 184) = 0;
    *(_DWORD *)(v183 + 192) = 1065353216;
    *(_OWORD *)(v183 + 200) = 0u;
    *(_OWORD *)(v183 + 216) = 0u;
    *(_QWORD *)(v183 + 232) = 0;
    *(_DWORD *)(v183 + 240) = 1065353216;
    *(_QWORD *)(v183 + 8) = 0x6BC5598729A9856CLL;
    *(_QWORD *)v183 = &off_1E42B18A8;
    *(_QWORD *)(v183 + 248) = v61;
    v184 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0x6BC5598729A9856CuLL, &v1943);
    v185 = v184[3];
    v184[3] = v183;
    if (v185)
      (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
    *(_QWORD *)&v1949 = 0x6BC5598729A9856CLL;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationInfo]";
    v1950 = 27;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0x6BC5598729A9856CLL, (uint64_t)&v1949, (uint64_t *)(v183 + 104));
LABEL_188:
    *(_QWORD *)&v1947 = v1926;
    v186 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v183 + 32), (uint64_t)&v1947);
    if ((v187 & 1) != 0)
      break;
    v188 = *(_QWORD *)(v183 + 80) + 2 * ((_QWORD)v186 - *(_QWORD *)(v183 + 56));
    *(_QWORD *)v188 = v1912;
    *(_DWORD *)(v188 + 8) = -1;
    *(_DWORD *)(v188 + 12) = v1916;
    v189 = *(_QWORD *)(v183 + 248);
    if (v188 == *(_QWORD *)(v183 + 88))
      goto LABEL_212;
    for (i6 = *(_QWORD **)(v183 + 128); i6; i6 = (_QWORD *)*i6)
    {
      *(_QWORD *)&v1949 = &v1947;
      *((_QWORD *)&v1949 + 1) = 1;
      v1943 = v189;
      v191 = i6[6];
      if (!v191)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v191 + 48))(v191, &v1943, &v1949);
    }
LABEL_215:
    v205 = 0xCEA021FDB92686D6;
    v1943 = 0xCEA021FDB92686D6;
    v206 = (int8x8_t)v61[16];
    if (v206)
    {
      v207 = (uint8x8_t)vcnt_s8(v206);
      v207.i16[0] = vaddlv_u8(v207);
      if (v207.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v206 <= 0xCEA021FDB92686D6)
          v205 = 0xCEA021FDB92686D6 % *(_QWORD *)&v206;
      }
      else
      {
        v205 = (*(_QWORD *)&v206 - 1) & 0xCEA021FDB92686D6;
      }
      v208 = *(_QWORD **)(*v1931 + 8 * v205);
      if (v208)
      {
        v209 = (_QWORD *)*v208;
        if (v209)
        {
          if (v207.u32[0] < 2uLL)
          {
            v210 = *(_QWORD *)&v206 - 1;
            while (1)
            {
              v212 = v209[1];
              if (v212 == 0xCEA021FDB92686D6)
              {
                if (v209[2] == 0xCEA021FDB92686D6)
                  goto LABEL_535;
              }
              else if ((v212 & v210) != v205)
              {
                goto LABEL_235;
              }
              v209 = (_QWORD *)*v209;
              if (!v209)
                goto LABEL_235;
            }
          }
          do
          {
            v211 = v209[1];
            if (v211 == 0xCEA021FDB92686D6)
            {
              if (v209[2] == 0xCEA021FDB92686D6)
              {
LABEL_535:
                v213 = v209[3];
                goto LABEL_238;
              }
            }
            else
            {
              if (v211 >= *(_QWORD *)&v206)
                v211 %= *(_QWORD *)&v206;
              if (v211 != v205)
                break;
            }
            v209 = (_QWORD *)*v209;
          }
          while (v209);
        }
      }
    }
LABEL_235:
    v213 = operator new();
    *(_QWORD *)(v213 + 16) = "arComponents::AnimationGroupAssociation]";
    *(_QWORD *)(v213 + 24) = 39;
    *(_OWORD *)(v213 + 32) = 0u;
    *(_OWORD *)(v213 + 48) = 0u;
    *(_OWORD *)(v213 + 64) = 0u;
    *(_OWORD *)(v213 + 80) = 0u;
    *(_OWORD *)(v213 + 96) = 0u;
    *(_OWORD *)(v213 + 112) = 0u;
    *(_OWORD *)(v213 + 128) = 0u;
    *(_DWORD *)(v213 + 144) = 1065353216;
    *(_OWORD *)(v213 + 152) = 0u;
    *(_OWORD *)(v213 + 168) = 0u;
    *(_QWORD *)(v213 + 184) = 0;
    *(_DWORD *)(v213 + 192) = 1065353216;
    *(_OWORD *)(v213 + 200) = 0u;
    *(_OWORD *)(v213 + 216) = 0u;
    *(_QWORD *)(v213 + 232) = 0;
    *(_DWORD *)(v213 + 240) = 1065353216;
    *(_QWORD *)(v213 + 8) = 0xCEA021FDB92686D6;
    *(_QWORD *)v213 = &off_1E42B22F8;
    *(_QWORD *)(v213 + 248) = v61;
    v214 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0xCEA021FDB92686D6, &v1943);
    v215 = v214[3];
    v214[3] = v213;
    if (v215)
      (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
    *(_QWORD *)&v1949 = 0xCEA021FDB92686D6;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationGroupAssociation]";
    v1950 = 39;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0xCEA021FDB92686D6, (uint64_t)&v1949, (uint64_t *)(v213 + 104));
LABEL_238:
    *(_QWORD *)&v1947 = v1926;
    v216 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v213 + 32), (uint64_t)&v1947);
    if ((v217 & 1) != 0)
    {
      v223 = *(unint64_t **)(v213 + 88);
      v222 = *(_QWORD *)(v213 + 96);
      if ((unint64_t)v223 >= v222)
      {
        v225 = *(char **)(v213 + 80);
        v226 = ((char *)v223 - v225) >> 3;
        v227 = v226 + 1;
        if ((unint64_t)(v226 + 1) >> 61)
          goto LABEL_2109;
        v228 = v222 - (_QWORD)v225;
        if (v228 >> 2 > v227)
          v227 = v228 >> 2;
        if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8)
          v229 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v229 = v227;
        if (v229)
        {
          if (v229 >> 61)
            goto LABEL_2110;
          v230 = (char *)operator new(8 * v229);
        }
        else
        {
          v230 = 0;
        }
        v231 = (unint64_t *)&v230[8 * v226];
        *v231 = v1913;
        v224 = v231 + 1;
        if (v223 != (unint64_t *)v225)
        {
          v232 = (char *)(v223 - 1) - v225;
          if (v232 < 0x58)
            goto LABEL_2119;
          if ((unint64_t)(v225 - v230) < 0x20)
            goto LABEL_2119;
          v233 = (v232 >> 3) + 1;
          v234 = &v230[8 * v226 - 16];
          v235 = v223 - 2;
          v236 = v233 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v237 = *(_OWORD *)v235;
            *((_OWORD *)v234 - 1) = *((_OWORD *)v235 - 1);
            *(_OWORD *)v234 = v237;
            v234 -= 32;
            v235 -= 4;
            v236 -= 4;
          }
          while (v236);
          v231 -= v233 & 0x3FFFFFFFFFFFFFFCLL;
          v223 -= v233 & 0x3FFFFFFFFFFFFFFCLL;
          if (v233 != (v233 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_2119:
            do
            {
              v238 = *--v223;
              *--v231 = v238;
            }
            while (v223 != (unint64_t *)v225);
          }
          v223 = *(unint64_t **)(v213 + 80);
        }
        *(_QWORD *)(v213 + 80) = v231;
        *(_QWORD *)(v213 + 88) = v224;
        *(_QWORD *)(v213 + 96) = &v230[8 * v229];
        if (v223)
          operator delete(v223);
      }
      else
      {
        *v223 = v1913;
        v224 = v223 + 1;
      }
      *(_QWORD *)(v213 + 88) = v224;
      v219 = *(_QWORD *)(v213 + 248);
    }
    else
    {
      v218 = (_QWORD *)((char *)v216 + *(_QWORD *)(v213 + 80) - *(_QWORD *)(v213 + 56));
      *v218 = v1913;
      v219 = *(_QWORD *)(v213 + 248);
      if (v218 != *(unint64_t **)(v213 + 88))
      {
        v220 = *(_QWORD **)(v213 + 128);
        if (v220)
        {
          while (1)
          {
            *(_QWORD *)&v1949 = &v1947;
            *((_QWORD *)&v1949 + 1) = 1;
            v1943 = v219;
            v221 = v220[6];
            if (!v221)
              goto LABEL_1456;
            (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v221 + 48))(v221, &v1943, &v1949);
            v220 = (_QWORD *)*v220;
            if (!v220)
              goto LABEL_270;
          }
        }
        goto LABEL_270;
      }
    }
    for (i7 = *(_QWORD **)(v213 + 176); i7; i7 = (_QWORD *)*i7)
    {
      *(_QWORD *)&v1949 = &v1947;
      *((_QWORD *)&v1949 + 1) = 1;
      v1943 = v219;
      v240 = i7[6];
      if (!v240)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v240 + 48))(v240, &v1943, &v1949);
    }
LABEL_270:
    v241 = 0xCE983FFC149A5AACLL;
    v1943 = 0xCE983FFC149A5AACLL;
    v242 = (int8x8_t)v61[16];
    if (v242)
    {
      v243 = (uint8x8_t)vcnt_s8(v242);
      v243.i16[0] = vaddlv_u8(v243);
      if (v243.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v242 <= 0xCE983FFC149A5AACLL)
          v241 = 0xCE983FFC149A5AACLL % *(_QWORD *)&v242;
      }
      else
      {
        v241 = (*(_QWORD *)&v242 - 1) & 0xCE983FFC149A5AACLL;
      }
      v244 = *(_QWORD **)(*v1931 + 8 * v241);
      if (v244)
      {
        v245 = (_QWORD *)*v244;
        if (v245)
        {
          if (v243.u32[0] < 2uLL)
          {
            v246 = *(_QWORD *)&v242 - 1;
            while (1)
            {
              v248 = v245[1];
              if (v248 == 0xCE983FFC149A5AACLL)
              {
                if (v245[2] == 0xCE983FFC149A5AACLL)
                  goto LABEL_536;
              }
              else if ((v248 & v246) != v241)
              {
                goto LABEL_290;
              }
              v245 = (_QWORD *)*v245;
              if (!v245)
                goto LABEL_290;
            }
          }
          do
          {
            v247 = v245[1];
            if (v247 == 0xCE983FFC149A5AACLL)
            {
              if (v245[2] == 0xCE983FFC149A5AACLL)
              {
LABEL_536:
                v249 = v245[3];
                goto LABEL_293;
              }
            }
            else
            {
              if (v247 >= *(_QWORD *)&v242)
                v247 %= *(_QWORD *)&v242;
              if (v247 != v241)
                break;
            }
            v245 = (_QWORD *)*v245;
          }
          while (v245);
        }
      }
    }
LABEL_290:
    v249 = operator new();
    *(_QWORD *)(v249 + 16) = "arComponents::AnimationGroupProgress]";
    *(_QWORD *)(v249 + 24) = 36;
    *(_OWORD *)(v249 + 32) = 0u;
    *(_OWORD *)(v249 + 48) = 0u;
    *(_OWORD *)(v249 + 64) = 0u;
    *(_OWORD *)(v249 + 80) = 0u;
    *(_OWORD *)(v249 + 96) = 0u;
    *(_OWORD *)(v249 + 112) = 0u;
    *(_OWORD *)(v249 + 128) = 0u;
    *(_DWORD *)(v249 + 144) = 1065353216;
    *(_OWORD *)(v249 + 152) = 0u;
    *(_OWORD *)(v249 + 168) = 0u;
    *(_QWORD *)(v249 + 184) = 0;
    *(_DWORD *)(v249 + 192) = 1065353216;
    *(_OWORD *)(v249 + 200) = 0u;
    *(_OWORD *)(v249 + 216) = 0u;
    *(_QWORD *)(v249 + 232) = 0;
    *(_DWORD *)(v249 + 240) = 1065353216;
    *(_QWORD *)(v249 + 8) = 0xCE983FFC149A5AACLL;
    *(_QWORD *)v249 = &off_1E42B21A8;
    *(_QWORD *)(v249 + 248) = v61;
    v250 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0xCE983FFC149A5AACLL, &v1943);
    v251 = v250[3];
    v250[3] = v249;
    if (v251)
      (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
    *(_QWORD *)&v1949 = 0xCE983FFC149A5AACLL;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationGroupProgress]";
    v1950 = 36;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0xCE983FFC149A5AACLL, (uint64_t)&v1949, (uint64_t *)(v249 + 104));
LABEL_293:
    *(_QWORD *)&v1947 = v1926;
    v252 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v249 + 32), (uint64_t)&v1947);
    if ((v253 & 1) != 0)
    {
      v259 = *(char **)(v249 + 88);
      v258 = *(_QWORD *)(v249 + 96);
      if ((unint64_t)v259 >= v258)
      {
        v261 = *(char **)(v249 + 80);
        v262 = (v259 - v261) >> 2;
        v263 = v262 + 1;
        if ((unint64_t)(v262 + 1) >> 62)
          goto LABEL_2109;
        v264 = v258 - (_QWORD)v261;
        if (v264 >> 1 > v263)
          v263 = v264 >> 1;
        if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFFCLL)
          v265 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v265 = v263;
        if (v265)
        {
          if (v265 >> 62)
            goto LABEL_2110;
          v266 = operator new(4 * v265);
        }
        else
        {
          v266 = 0;
        }
        v267 = &v266[4 * v262];
        *v267 = 0;
        v260 = v267 + 1;
        if (v259 != v261)
        {
          v268 = v259 - 4 - v261;
          if (v268 < 0x2C)
            goto LABEL_2120;
          if ((unint64_t)(v261 - v266) < 0x20)
            goto LABEL_2120;
          v269 = (v268 >> 2) + 1;
          v270 = &v266[4 * v262 - 16];
          v271 = v259 - 16;
          v272 = v269 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v273 = *(_OWORD *)v271;
            *(v270 - 1) = *((_OWORD *)v271 - 1);
            *v270 = v273;
            v270 -= 2;
            v271 -= 32;
            v272 -= 8;
          }
          while (v272);
          v267 -= v269 & 0x7FFFFFFFFFFFFFF8;
          v259 -= 4 * (v269 & 0x7FFFFFFFFFFFFFF8);
          if (v269 != (v269 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_2120:
            do
            {
              v274 = *((_DWORD *)v259 - 1);
              v259 -= 4;
              *--v267 = v274;
            }
            while (v259 != v261);
          }
        }
        *(_QWORD *)(v249 + 80) = v267;
        *(_QWORD *)(v249 + 88) = v260;
        *(_QWORD *)(v249 + 96) = &v266[4 * v265];
        if (v261)
          operator delete(v261);
      }
      else
      {
        *(_DWORD *)v259 = 0;
        v260 = v259 + 4;
      }
      *(_QWORD *)(v249 + 88) = v260;
      v255 = *(_QWORD *)(v249 + 248);
    }
    else
    {
      v254 = (_DWORD *)(*(_QWORD *)(v249 + 80) + (((uint64_t)v252 - *(_QWORD *)(v249 + 56)) >> 1));
      *v254 = 0;
      v255 = *(_QWORD *)(v249 + 248);
      if (v254 != *(_DWORD **)(v249 + 88))
      {
        v256 = *(_QWORD **)(v249 + 128);
        if (v256)
        {
          while (1)
          {
            *(_QWORD *)&v1949 = &v1947;
            *((_QWORD *)&v1949 + 1) = 1;
            v1943 = v255;
            v257 = v256[6];
            if (!v257)
              goto LABEL_1456;
            (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v257 + 48))(v257, &v1943, &v1949);
            v256 = (_QWORD *)*v256;
            if (!v256)
              goto LABEL_324;
          }
        }
        goto LABEL_324;
      }
    }
    for (i8 = *(_QWORD **)(v249 + 176); i8; i8 = (_QWORD *)*i8)
    {
      *(_QWORD *)&v1949 = &v1947;
      *((_QWORD *)&v1949 + 1) = 1;
      v1943 = v255;
      v276 = i8[6];
      if (!v276)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v276 + 48))(v276, &v1943, &v1949);
    }
LABEL_324:
    v277 = 0xF42391DDAC21667CLL;
    v1943 = 0xF42391DDAC21667CLL;
    v278 = (int8x8_t)v61[16];
    if (v278)
    {
      v279 = (uint8x8_t)vcnt_s8(v278);
      v279.i16[0] = vaddlv_u8(v279);
      if (v279.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v278 <= 0xF42391DDAC21667CLL)
          v277 = 0xF42391DDAC21667CLL % *(_QWORD *)&v278;
      }
      else
      {
        v277 = (*(_QWORD *)&v278 - 1) & 0xF42391DDAC21667CLL;
      }
      v280 = *(_QWORD **)(*v1931 + 8 * v277);
      if (v280)
      {
        v281 = (_QWORD *)*v280;
        if (v281)
        {
          if (v279.u32[0] < 2uLL)
          {
            v282 = *(_QWORD *)&v278 - 1;
            while (1)
            {
              v284 = v281[1];
              if (v284 == 0xF42391DDAC21667CLL)
              {
                if (v281[2] == 0xF42391DDAC21667CLL)
                  goto LABEL_537;
              }
              else if ((v284 & v282) != v277)
              {
                goto LABEL_344;
              }
              v281 = (_QWORD *)*v281;
              if (!v281)
                goto LABEL_344;
            }
          }
          do
          {
            v283 = v281[1];
            if (v283 == 0xF42391DDAC21667CLL)
            {
              if (v281[2] == 0xF42391DDAC21667CLL)
              {
LABEL_537:
                v285 = v281[3];
                goto LABEL_347;
              }
            }
            else
            {
              if (v283 >= *(_QWORD *)&v278)
                v283 %= *(_QWORD *)&v278;
              if (v283 != v277)
                break;
            }
            v281 = (_QWORD *)*v281;
          }
          while (v281);
        }
      }
    }
LABEL_344:
    v285 = operator new();
    *(_QWORD *)(v285 + 16) = "arComponents::AnimationDependencyOn]";
    *(_QWORD *)(v285 + 24) = 35;
    *(_OWORD *)(v285 + 32) = 0u;
    *(_OWORD *)(v285 + 48) = 0u;
    *(_OWORD *)(v285 + 64) = 0u;
    *(_OWORD *)(v285 + 80) = 0u;
    *(_OWORD *)(v285 + 96) = 0u;
    *(_OWORD *)(v285 + 112) = 0u;
    *(_OWORD *)(v285 + 128) = 0u;
    *(_DWORD *)(v285 + 144) = 1065353216;
    *(_OWORD *)(v285 + 152) = 0u;
    *(_OWORD *)(v285 + 168) = 0u;
    *(_QWORD *)(v285 + 184) = 0;
    *(_DWORD *)(v285 + 192) = 1065353216;
    *(_OWORD *)(v285 + 200) = 0u;
    *(_OWORD *)(v285 + 216) = 0u;
    *(_QWORD *)(v285 + 232) = 0;
    *(_DWORD *)(v285 + 240) = 1065353216;
    *(_QWORD *)(v285 + 8) = 0xF42391DDAC21667CLL;
    *(_QWORD *)v285 = &off_1E42B2028;
    *(_QWORD *)(v285 + 248) = v61;
    v286 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0xF42391DDAC21667CLL, &v1943);
    v287 = v286[3];
    v286[3] = v285;
    if (v287)
      (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
    *(_QWORD *)&v1949 = 0xF42391DDAC21667CLL;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationDependencyOn]";
    v1950 = 35;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0xF42391DDAC21667CLL, (uint64_t)&v1949, (uint64_t *)(v285 + 104));
LABEL_347:
    *(_QWORD *)&v1947 = v1926;
    v288 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v285 + 32), (uint64_t)&v1947);
    if ((v289 & 1) != 0)
    {
      v295 = *(unint64_t **)(v285 + 88);
      v294 = *(_QWORD *)(v285 + 96);
      if ((unint64_t)v295 >= v294)
      {
        v297 = *(char **)(v285 + 80);
        v298 = ((char *)v295 - v297) >> 3;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 61)
          goto LABEL_2109;
        v300 = v294 - (_QWORD)v297;
        if (v300 >> 2 > v299)
          v299 = v300 >> 2;
        if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8)
          v301 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v301 = v299;
        if (v301)
        {
          if (v301 >> 61)
            goto LABEL_2110;
          v302 = (char *)operator new(8 * v301);
        }
        else
        {
          v302 = 0;
        }
        v303 = &v302[8 * v298];
        *(_QWORD *)v303 = v1915;
        v296 = v303 + 8;
        if (v295 != (unint64_t *)v297)
        {
          v304 = (char *)(v295 - 1) - v297;
          if (v304 < 0x58)
            goto LABEL_2121;
          if ((unint64_t)(v297 - v302) < 0x20)
            goto LABEL_2121;
          v305 = (v304 >> 3) + 1;
          v306 = &v302[8 * v298 - 16];
          v307 = (__int128 *)(v295 - 2);
          v308 = v305 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v309 = *v307;
            *((_OWORD *)v306 - 1) = *(v307 - 1);
            *(_OWORD *)v306 = v309;
            v306 -= 32;
            v307 -= 2;
            v308 -= 4;
          }
          while (v308);
          v303 -= 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
          v295 -= v305 & 0x3FFFFFFFFFFFFFFCLL;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_2121:
            do
            {
              v310 = *--v295;
              *((_QWORD *)v303 - 1) = v310;
              v303 -= 8;
            }
            while (v295 != (unint64_t *)v297);
          }
          v295 = *(unint64_t **)(v285 + 80);
        }
        *(_QWORD *)(v285 + 80) = v303;
        *(_QWORD *)(v285 + 88) = v296;
        *(_QWORD *)(v285 + 96) = &v302[8 * v301];
        if (v295)
          operator delete(v295);
      }
      else
      {
        *v295 = v1915;
        v296 = v295 + 1;
      }
      *(_QWORD *)(v285 + 88) = v296;
      v291 = *(_QWORD *)(v285 + 248);
    }
    else
    {
      v290 = (_QWORD *)((char *)v288 + *(_QWORD *)(v285 + 80) - *(_QWORD *)(v285 + 56));
      *v290 = v1915;
      v291 = *(_QWORD *)(v285 + 248);
      if (v290 != *(unint64_t **)(v285 + 88))
      {
        v292 = *(_QWORD **)(v285 + 128);
        if (v292)
        {
          while (1)
          {
            *(_QWORD *)&v1949 = &v1947;
            *((_QWORD *)&v1949 + 1) = 1;
            v1943 = v291;
            v293 = v292[6];
            if (!v293)
              goto LABEL_1456;
            (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v293 + 48))(v293, &v1943, &v1949);
            v292 = (_QWORD *)*v292;
            if (!v292)
              goto LABEL_379;
          }
        }
        goto LABEL_379;
      }
    }
    for (i9 = *(_QWORD **)(v285 + 176); i9; i9 = (_QWORD *)*i9)
    {
      *(_QWORD *)&v1949 = &v1947;
      *((_QWORD *)&v1949 + 1) = 1;
      v1943 = v291;
      v312 = i9[6];
      if (!v312)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v312 + 48))(v312, &v1943, &v1949);
    }
LABEL_379:
    v313 = 0x30A6CC1B9187F411;
    v1943 = 0x30A6CC1B9187F411;
    v314 = (int8x8_t)v61[16];
    if (v314)
    {
      v315 = (uint8x8_t)vcnt_s8(v314);
      v315.i16[0] = vaddlv_u8(v315);
      if (v315.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v314 <= 0x30A6CC1B9187F411uLL)
          v313 = 0x30A6CC1B9187F411uLL % *(_QWORD *)&v314;
      }
      else
      {
        v313 = (*(_QWORD *)&v314 - 1) & 0x30A6CC1B9187F411;
      }
      v316 = *(_QWORD **)(*v1931 + 8 * v313);
      if (v316)
      {
        v317 = (_QWORD *)*v316;
        if (v317)
        {
          if (v315.u32[0] < 2uLL)
          {
            v318 = *(_QWORD *)&v314 - 1;
            while (1)
            {
              v320 = v317[1];
              if (v320 == 0x30A6CC1B9187F411)
              {
                if (v317[2] == 0x30A6CC1B9187F411)
                  goto LABEL_538;
              }
              else if ((v320 & v318) != v313)
              {
                goto LABEL_399;
              }
              v317 = (_QWORD *)*v317;
              if (!v317)
                goto LABEL_399;
            }
          }
          do
          {
            v319 = v317[1];
            if (v319 == 0x30A6CC1B9187F411)
            {
              if (v317[2] == 0x30A6CC1B9187F411)
              {
LABEL_538:
                v321 = v317[3];
                goto LABEL_402;
              }
            }
            else
            {
              if (v319 >= *(_QWORD *)&v314)
                v319 %= *(_QWORD *)&v314;
              if (v319 != v313)
                break;
            }
            v317 = (_QWORD *)*v317;
          }
          while (v317);
        }
      }
    }
LABEL_399:
    v321 = operator new();
    *(_QWORD *)(v321 + 16) = "arComponents::AnimationTarget<arComponents::AnimationProperty::Translation, gm::Matrix<float, 3, 1>>]";
    *(_QWORD *)(v321 + 24) = 100;
    *(_OWORD *)(v321 + 32) = 0u;
    *(_OWORD *)(v321 + 48) = 0u;
    *(_OWORD *)(v321 + 64) = 0u;
    *(_OWORD *)(v321 + 80) = 0u;
    *(_OWORD *)(v321 + 96) = 0u;
    *(_OWORD *)(v321 + 112) = 0u;
    *(_OWORD *)(v321 + 128) = 0u;
    *(_DWORD *)(v321 + 144) = 1065353216;
    *(_OWORD *)(v321 + 152) = 0u;
    *(_OWORD *)(v321 + 168) = 0u;
    *(_QWORD *)(v321 + 184) = 0;
    *(_DWORD *)(v321 + 192) = 1065353216;
    *(_OWORD *)(v321 + 200) = 0u;
    *(_OWORD *)(v321 + 216) = 0u;
    *(_QWORD *)(v321 + 232) = 0;
    *(_DWORD *)(v321 + 240) = 1065353216;
    *(_QWORD *)(v321 + 8) = 0x30A6CC1B9187F411;
    *(_QWORD *)v321 = &off_1E42B1B18;
    *(_QWORD *)(v321 + 248) = v61;
    v322 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0x30A6CC1B9187F411uLL, &v1943);
    v323 = v322[3];
    v322[3] = v321;
    if (v323)
      (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
    *(_QWORD *)&v1949 = 0x30A6CC1B9187F411;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationTarget<arComponents::AnimationProperty::Translation, gm::Matrix<float, 3, 1>>]";
    v1950 = 100;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0x30A6CC1B9187F411, (uint64_t)&v1949, (uint64_t *)(v321 + 104));
LABEL_402:
    *(_QWORD *)&v1947 = v1926;
    v324 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v321 + 32), (uint64_t)&v1947);
    if ((v325 & 1) != 0)
    {
      v331 = *(_QWORD **)(v321 + 88);
      v330 = *(_QWORD *)(v321 + 96);
      if ((unint64_t)v331 >= v330)
      {
        v333 = *(_QWORD **)(v321 + 80);
        v334 = 0xAAAAAAAAAAAAAAABLL * (v331 - v333) + 1;
        if (v334 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_2109;
        v335 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v330 - (_QWORD)v333) >> 3);
        if (2 * v335 > v334)
          v334 = 2 * v335;
        if (v335 >= 0x555555555555555)
          v336 = 0xAAAAAAAAAAAAAAALL;
        else
          v336 = v334;
        if (v336)
        {
          if (v336 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_2110;
          v337 = (char *)operator new(24 * v336);
        }
        else
        {
          v337 = 0;
        }
        v338 = &v337[8 * (v331 - v333)];
        *(_QWORD *)v338 = 0;
        *((_DWORD *)v338 + 2) = v170;
        *(_QWORD *)(v338 + 12) = 0;
        *((_DWORD *)v338 + 5) = v173;
        v339 = v338;
        if (v331 != v333)
        {
          do
          {
            v340 = *(_OWORD *)(v331 - 3);
            *((_QWORD *)v339 - 1) = *(v331 - 1);
            *(_OWORD *)(v339 - 24) = v340;
            v339 -= 24;
            v331 -= 3;
          }
          while (v331 != v333);
          v331 = *(_QWORD **)(v321 + 80);
        }
        v332 = v338 + 24;
        *(_QWORD *)(v321 + 80) = v339;
        *(_QWORD *)(v321 + 88) = v338 + 24;
        *(_QWORD *)(v321 + 96) = &v337[24 * v336];
        if (v331)
          operator delete(v331);
      }
      else
      {
        *v331 = 0;
        *((_DWORD *)v331 + 2) = v170;
        *(_QWORD *)((char *)v331 + 12) = 0;
        v332 = v331 + 3;
        *((_DWORD *)v331 + 5) = v173;
      }
      *(_QWORD *)(v321 + 88) = v332;
      v327 = *(_QWORD *)(v321 + 248);
    }
    else
    {
      v326 = *(_QWORD *)(v321 + 80) + 24 * (((uint64_t)v324 - *(_QWORD *)(v321 + 56)) >> 3);
      *(_QWORD *)v326 = 0;
      *(_DWORD *)(v326 + 8) = v170;
      *(_QWORD *)(v326 + 12) = 0;
      *(_DWORD *)(v326 + 20) = v173;
      v327 = *(_QWORD *)(v321 + 248);
      if (v326 != *(_QWORD *)(v321 + 88))
      {
        v328 = *(_QWORD **)(v321 + 128);
        if (v328)
        {
          while (1)
          {
            *(_QWORD *)&v1949 = &v1947;
            *((_QWORD *)&v1949 + 1) = 1;
            v1943 = v327;
            v329 = v328[6];
            if (!v329)
              goto LABEL_1456;
            (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v329 + 48))(v329, &v1943, &v1949);
            v328 = (_QWORD *)*v328;
            if (!v328)
              goto LABEL_429;
          }
        }
        goto LABEL_429;
      }
    }
    for (i10 = *(_QWORD **)(v321 + 176); i10; i10 = (_QWORD *)*i10)
    {
      *(_QWORD *)&v1949 = &v1947;
      *((_QWORD *)&v1949 + 1) = 1;
      v1943 = v327;
      v342 = i10[6];
      if (!v342)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v342 + 48))(v342, &v1943, &v1949);
    }
LABEL_429:
    v343 = 0x123588C1A18C7310;
    v1943 = 0x123588C1A18C7310;
    v344 = (int8x8_t)v61[16];
    if (v344)
    {
      v345 = (uint8x8_t)vcnt_s8(v344);
      v345.i16[0] = vaddlv_u8(v345);
      if (v345.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v344 <= 0x123588C1A18C7310uLL)
          v343 = 0x123588C1A18C7310uLL % *(_QWORD *)&v344;
      }
      else
      {
        v343 = (*(_QWORD *)&v344 - 1) & 0x123588C1A18C7310;
      }
      v346 = *(_QWORD **)(*v1931 + 8 * v343);
      if (v346)
      {
        v347 = (_QWORD *)*v346;
        if (v347)
        {
          if (v345.u32[0] < 2uLL)
          {
            v348 = *(_QWORD *)&v344 - 1;
            while (1)
            {
              v350 = v347[1];
              if (v350 == 0x123588C1A18C7310)
              {
                if (v347[2] == 0x123588C1A18C7310)
                  goto LABEL_539;
              }
              else if ((v350 & v348) != v343)
              {
                goto LABEL_449;
              }
              v347 = (_QWORD *)*v347;
              if (!v347)
                goto LABEL_449;
            }
          }
          do
          {
            v349 = v347[1];
            if (v349 == 0x123588C1A18C7310)
            {
              if (v347[2] == 0x123588C1A18C7310)
              {
LABEL_539:
                v351 = v347[3];
                goto LABEL_452;
              }
            }
            else
            {
              if (v349 >= *(_QWORD *)&v344)
                v349 %= *(_QWORD *)&v344;
              if (v349 != v343)
                break;
            }
            v347 = (_QWORD *)*v347;
          }
          while (v347);
        }
      }
    }
LABEL_449:
    v351 = operator new();
    *(_QWORD *)(v351 + 16) = "arComponents::AnimationDuration]";
    *(_QWORD *)(v351 + 24) = 31;
    *(_OWORD *)(v351 + 32) = 0u;
    *(_OWORD *)(v351 + 48) = 0u;
    *(_OWORD *)(v351 + 64) = 0u;
    *(_OWORD *)(v351 + 80) = 0u;
    *(_OWORD *)(v351 + 96) = 0u;
    *(_OWORD *)(v351 + 112) = 0u;
    *(_OWORD *)(v351 + 128) = 0u;
    *(_DWORD *)(v351 + 144) = 1065353216;
    *(_OWORD *)(v351 + 152) = 0u;
    *(_OWORD *)(v351 + 168) = 0u;
    *(_QWORD *)(v351 + 184) = 0;
    *(_DWORD *)(v351 + 192) = 1065353216;
    *(_OWORD *)(v351 + 200) = 0u;
    *(_OWORD *)(v351 + 216) = 0u;
    *(_QWORD *)(v351 + 232) = 0;
    *(_DWORD *)(v351 + 240) = 1065353216;
    *(_QWORD *)(v351 + 8) = 0x123588C1A18C7310;
    *(_QWORD *)v351 = &off_1E42B1C38;
    *(_QWORD *)(v351 + 248) = v61;
    v352 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0x123588C1A18C7310uLL, &v1943);
    v353 = v352[3];
    v352[3] = v351;
    if (v353)
      (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
    *(_QWORD *)&v1949 = 0x123588C1A18C7310;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationDuration]";
    v1950 = 31;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0x123588C1A18C7310, (uint64_t)&v1949, (uint64_t *)(v351 + 104));
LABEL_452:
    *(_QWORD *)&v1947 = v1926;
    v354 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v351 + 32), (uint64_t)&v1947);
    v169 = v169 + v168;
    if ((v355 & 1) == 0)
    {
      v356 = *(_QWORD *)(v351 + 80) + 24 * (((uint64_t)v354 - *(_QWORD *)(v351 + 56)) >> 3);
      *(float *)v356 = v168;
      *(float *)(v356 + 4) = v169;
      *(_DWORD *)(v356 + 8) = 0;
      v357 = *(void **)(v356 + 16);
      *(_QWORD *)(v356 + 16) = v1920;

      if (v356 == *(_QWORD *)(v351 + 88))
      {
        v1920 = 0;
        v370 = *(_QWORD **)(v351 + 176);
        if (v370)
          goto LABEL_480;
      }
      else
      {
        v358 = *(_QWORD **)(v351 + 128);
        if (v358)
        {
          v359 = *(_QWORD *)(v351 + 248);
          do
          {
            *(_QWORD *)&v1949 = &v1947;
            *((_QWORD *)&v1949 + 1) = 1;
            v1943 = v359;
            v360 = v358[6];
            if (!v360)
              goto LABEL_1456;
            (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v360 + 48))(v360, &v1943, &v1949);
            v358 = (_QWORD *)*v358;
          }
          while (v358);
        }
        v1920 = 0;
      }
      goto LABEL_483;
    }
    v362 = *(_QWORD *)(v351 + 88);
    v361 = *(_QWORD *)(v351 + 96);
    if (v362 < v361)
    {
      *(float *)v362 = v168;
      *(float *)(v362 + 4) = v169;
      *(_DWORD *)(v362 + 8) = 0;
      *(_QWORD *)(v362 + 16) = MEMORY[0x1A1AF5730](v1920);
      v363 = (char *)(v362 + 24);
      goto LABEL_479;
    }
    v364 = *(_QWORD *)(v351 + 80);
    v365 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v362 - v364) >> 3);
    v366 = v365 + 1;
    if (v365 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_2109:
      abort();
    v367 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v361 - v364) >> 3);
    if (2 * v367 > v366)
      v366 = 2 * v367;
    if (v367 >= 0x555555555555555)
      v368 = 0xAAAAAAAAAAAAAAALL;
    else
      v368 = v366;
    if (v368)
    {
      if (v368 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_2110;
      v369 = (char *)operator new(24 * v368);
    }
    else
    {
      v369 = 0;
    }
    v371 = (float *)&v369[24 * v365];
    v372 = &v369[24 * v368];
    *v371 = v168;
    v371[1] = v169;
    v371[2] = 0.0;
    *((_QWORD *)v371 + 2) = MEMORY[0x1A1AF5730](v1920);
    v363 = (char *)(v371 + 6);
    v373 = *(_QWORD *)(v351 + 80);
    v374 = *(_QWORD *)(v351 + 88);
    if (v374 == v373)
    {
      *(_QWORD *)(v351 + 80) = v371;
      *(_QWORD *)(v351 + 88) = v363;
      *(_QWORD *)(v351 + 96) = v372;
      if (v374)
        goto LABEL_478;
    }
    else
    {
      do
      {
        v375 = *(_QWORD *)(v374 - 24);
        v374 -= 24;
        v376 = *(_DWORD *)(v374 + 8);
        *((_QWORD *)v371 - 3) = v375;
        v371 -= 6;
        *((_DWORD *)v371 + 2) = v376;
        v377 = *(_QWORD *)(v374 + 16);
        *(_QWORD *)(v374 + 16) = 0;
        *((_QWORD *)v371 + 2) = v377;
      }
      while (v374 != v373);
      v374 = *(_QWORD *)(v351 + 80);
      v378 = *(_QWORD *)(v351 + 88);
      *(_QWORD *)(v351 + 80) = v371;
      *(_QWORD *)(v351 + 88) = v363;
      *(_QWORD *)(v351 + 96) = v372;
      if (v378 != v374)
      {
        do
        {
          v379 = v378 - 24;

          v378 = v379;
        }
        while (v379 != v374);
      }
      if (v374)
LABEL_478:
        operator delete((void *)v374);
    }
LABEL_479:
    *(_QWORD *)(v351 + 88) = v363;
    v370 = *(_QWORD **)(v351 + 176);
    if (v370)
    {
LABEL_480:
      v380 = *(_QWORD *)(v351 + 248);
      do
      {
        *(_QWORD *)&v1949 = &v1947;
        *((_QWORD *)&v1949 + 1) = 1;
        v1943 = v380;
        v381 = v370[6];
        if (!v381)
          goto LABEL_1456;
        (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v381 + 48))(v381, &v1943, &v1949);
        v370 = (_QWORD *)*v370;
      }
      while (v370);
    }
LABEL_483:
    v382 = 0x92A8E86C11220425;
    v1943 = 0x92A8E86C11220425;
    v383 = (int8x8_t)v61[16];
    if (v383)
    {
      v384 = (uint8x8_t)vcnt_s8(v383);
      v384.i16[0] = vaddlv_u8(v384);
      if (v384.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v383 <= 0x92A8E86C11220425)
          v382 = 0x92A8E86C11220425 % *(_QWORD *)&v383;
      }
      else
      {
        v382 = (*(_QWORD *)&v383 - 1) & 0x92A8E86C11220425;
      }
      v385 = *(_QWORD **)(*v1931 + 8 * v382);
      if (v385)
      {
        v386 = (_QWORD *)*v385;
        if (v386)
        {
          if (v384.u32[0] < 2uLL)
          {
            v387 = *(_QWORD *)&v383 - 1;
            while (1)
            {
              v389 = v386[1];
              if (v389 == 0x92A8E86C11220425)
              {
                if (v386[2] == 0x92A8E86C11220425)
                  goto LABEL_540;
              }
              else if ((v389 & v387) != v382)
              {
                goto LABEL_503;
              }
              v386 = (_QWORD *)*v386;
              if (!v386)
                goto LABEL_503;
            }
          }
          do
          {
            v388 = v386[1];
            if (v388 == 0x92A8E86C11220425)
            {
              if (v386[2] == 0x92A8E86C11220425)
              {
LABEL_540:
                v390 = v386[3];
                goto LABEL_506;
              }
            }
            else
            {
              if (v388 >= *(_QWORD *)&v383)
                v388 %= *(_QWORD *)&v383;
              if (v388 != v382)
                break;
            }
            v386 = (_QWORD *)*v386;
          }
          while (v386);
        }
      }
    }
LABEL_503:
    v390 = operator new();
    *(_QWORD *)(v390 + 16) = "arComponents::AnimationState<VKAnimationStateNone>]";
    *(_QWORD *)(v390 + 24) = 50;
    *(_OWORD *)(v390 + 32) = 0u;
    *(_OWORD *)(v390 + 48) = 0u;
    *(_OWORD *)(v390 + 64) = 0u;
    *(_OWORD *)(v390 + 80) = 0u;
    *(_OWORD *)(v390 + 96) = 0u;
    *(_OWORD *)(v390 + 112) = 0u;
    *(_OWORD *)(v390 + 128) = 0u;
    *(_DWORD *)(v390 + 144) = 1065353216;
    *(_OWORD *)(v390 + 152) = 0u;
    *(_OWORD *)(v390 + 168) = 0u;
    *(_QWORD *)(v390 + 184) = 0;
    *(_DWORD *)(v390 + 192) = 1065353216;
    *(_OWORD *)(v390 + 200) = 0u;
    *(_OWORD *)(v390 + 216) = 0u;
    *(_QWORD *)(v390 + 232) = 0;
    *(_DWORD *)(v390 + 240) = 1065353216;
    *(_QWORD *)(v390 + 8) = 0x92A8E86C11220425;
    *(_QWORD *)v390 = &off_1E42B1998;
    *(_QWORD *)(v390 + 248) = v61;
    v391 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v1931, 0x92A8E86C11220425, &v1943);
    v392 = v391[3];
    v391[3] = v390;
    if (v392)
      (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
    *(_QWORD *)&v1949 = 0x92A8E86C11220425;
    *((_QWORD *)&v1949 + 1) = "arComponents::AnimationState<VKAnimationStateNone>]";
    v1950 = 50;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0x92A8E86C11220425, (uint64_t)&v1949, (uint64_t *)(v390 + 104));
LABEL_506:
    *(_QWORD *)&v1947 = v1926;
    v393 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v390 + 32), (uint64_t)&v1947);
    if ((v394 & 1) != 0)
    {
      v399 = *(_BYTE **)(v390 + 88);
      v398 = *(_QWORD *)(v390 + 96);
      if ((unint64_t)v399 >= v398)
      {
        v401 = *(char **)(v390 + 80);
        v402 = v399 - v401;
        v403 = v399 - v401 + 1;
        if (v403 < 0)
          abort();
        v404 = v398 - (_QWORD)v401;
        if (2 * v404 > v403)
          v403 = 2 * v404;
        if (v404 >= 0x3FFFFFFFFFFFFFFFLL)
          v405 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v405 = v403;
        if (v405)
          v406 = (char *)operator new(v405);
        else
          v406 = 0;
        v407 = &v406[v402];
        v400 = (uint64_t)&v406[v402 + 1];
        v408 = (char *)(v401 - v399);
        if (v401 == v399)
          v408 = 0;
        *(_QWORD *)(v390 + 80) = &v408[(_QWORD)v407];
        *(_QWORD *)(v390 + 88) = v400;
        *(_QWORD *)(v390 + 96) = &v406[v405];
        if (v401)
          operator delete(v401);
      }
      else
      {
        v400 = (uint64_t)(v399 + 1);
      }
      *(_QWORD *)(v390 + 88) = v400;
      v395 = *(_QWORD *)(v390 + 248);
    }
    else
    {
      v395 = *(_QWORD *)(v390 + 248);
      if (*(_QWORD *)(v390 + 80) + (((uint64_t)v393 - *(_QWORD *)(v390 + 56)) >> 3) != *(_QWORD *)(v390 + 88))
      {
        v396 = *(_QWORD **)(v390 + 128);
        if (v396)
        {
          while (1)
          {
            *(_QWORD *)&v1949 = &v1947;
            *((_QWORD *)&v1949 + 1) = 1;
            v1943 = v395;
            v397 = v396[6];
            if (!v397)
              goto LABEL_1456;
            (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v397 + 48))(v397, &v1943, &v1949);
            v396 = (_QWORD *)*v396;
            if (!v396)
              goto LABEL_164;
          }
        }
        goto LABEL_164;
      }
    }
    for (i11 = *(_QWORD **)(v390 + 176); i11; i11 = (_QWORD *)*i11)
    {
      *(_QWORD *)&v1949 = &v1947;
      *((_QWORD *)&v1949 + 1) = 1;
      v1943 = v395;
      v410 = i11[6];
      if (!v410)
        goto LABEL_1456;
      (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v410 + 48))(v410, &v1943, &v1949);
    }
LABEL_164:

    v167 = v1911;
    ++v1916;
    v172 = v1914 + 1;
    v170 = v173;
    if (v1914 >= 2 * v1911[17])
      goto LABEL_53;
  }
  v193 = *(char **)(v183 + 88);
  v192 = *(_QWORD *)(v183 + 96);
  if ((unint64_t)v193 >= v192)
  {
    v195 = *(char **)(v183 + 80);
    v196 = (v193 - v195) >> 4;
    v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 60)
      goto LABEL_2109;
    v198 = v192 - (_QWORD)v195;
    if (v198 >> 3 > v197)
      v197 = v198 >> 3;
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF0)
      v199 = 0xFFFFFFFFFFFFFFFLL;
    else
      v199 = v197;
    if (v199)
    {
      if (v199 >> 60)
        goto LABEL_2110;
      v200 = (char *)operator new(16 * v199);
    }
    else
    {
      v200 = 0;
    }
    v201 = &v200[16 * v196];
    *(_QWORD *)v201 = v1912;
    *((_DWORD *)v201 + 2) = -1;
    *((_DWORD *)v201 + 3) = v1916;
    v202 = v201;
    if (v193 != v195)
    {
      do
      {
        *((_OWORD *)v202 - 1) = *((_OWORD *)v193 - 1);
        v202 -= 16;
        v193 -= 16;
      }
      while (v193 != v195);
      v193 = *(char **)(v183 + 80);
    }
    v194 = v201 + 16;
    *(_QWORD *)(v183 + 80) = v202;
    *(_QWORD *)(v183 + 88) = v201 + 16;
    *(_QWORD *)(v183 + 96) = &v200[16 * v199];
    if (v193)
      operator delete(v193);
  }
  else
  {
    *(_QWORD *)v193 = v1912;
    v194 = v193 + 16;
    *((_DWORD *)v193 + 2) = -1;
    *((_DWORD *)v193 + 3) = v1916;
  }
  *(_QWORD *)(v183 + 88) = v194;
  v189 = *(_QWORD *)(v183 + 248);
LABEL_212:
  v203 = *(_QWORD **)(v183 + 176);
  if (!v203)
    goto LABEL_215;
  while (1)
  {
    *(_QWORD *)&v1949 = &v1947;
    *((_QWORD *)&v1949 + 1) = 1;
    v1943 = v189;
    v204 = v203[6];
    if (!v204)
      break;
    (*(void (**)(uint64_t, unint64_t *, __int128 *))(*(_QWORD *)v204 + 48))(v204, &v1943, &v1949);
    v203 = (_QWORD *)*v203;
    if (!v203)
      goto LABEL_215;
  }
LABEL_1456:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F5BFE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  v36 = *(void **)(v34 - 176);
  if (v36)
  {
    *(_QWORD *)(v34 - 168) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *md::ARAnimationLogic::runAfterLayout(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  _QWORD *v29;
  id *v30;
  id *v31;
  void *v32;
  unint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  id *v57;
  id *v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  void *__p[2];
  char v63;
  uint64_t v64;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 120);
  v3 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationInfo>(v2);
  v4 = gdc::Registry::storage<arComponents::AnimationGroupParent>(v2);
  v5 = (_QWORD *)v4;
  v6 = v4 + 32;
  v8 = v3[7];
  v7 = v3[8];
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= (unint64_t)(v7 - v8))
    v9 = v3 + 4;
  else
    v9 = (_QWORD *)(v4 + 32);
  if (v3 + 4 == v9 && v8 != v7)
  {
    v18 = (unint64_t *)v3[10];
    v19 = (_QWORD *)(v1 + 128);
    do
    {
      v20 = *(unsigned int *)(v8 + 4);
      v21 = v5[4];
      if (v20 >> 7 < (v5[5] - v21) >> 3)
      {
        v22 = *(_QWORD *)(v21 + 8 * (v20 >> 7));
        if (v22)
        {
          v23 = *(unsigned __int16 *)(v22 + 2 * (v20 & 0x7F));
          v25 = v5[7];
          v24 = v5[8];
          if (v23 < (v24 - v25) >> 3)
          {
            v26 = v25 + 8 * v23;
            if (v26 != v24 && *(_DWORD *)(v26 + 4) == (_DWORD)v20)
            {
              v28 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v19, *v18);
              if (v28)
              {
                std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v19, v28);
                v29 = __p[0];
                if (__p[0])
                {
                  if (v63)
                  {
                    v60 = v19;
                    v61 = v1;
                    v30 = (id *)*((_QWORD *)__p[0] + 5);
                    if (v30)
                    {
                      do
                      {
                        v31 = (id *)*v30;

                        operator delete(v30);
                        v30 = v31;
                      }
                      while (v31);
                    }
                    v32 = (void *)v29[3];
                    v29[3] = 0;
                    v19 = v60;
                    v1 = v61;
                    if (v32)
                      operator delete(v32);
                  }
                  operator delete(v29);
                }
              }
            }
          }
        }
      }
      v18 += 2;
      v8 += 8;
    }
    while (v8 != v7);
  }
  if ((_QWORD *)v6 == v9)
  {
    v33 = (unint64_t *)v5[7];
    v34 = (uint64_t *)v5[8];
    if (v33 != (unint64_t *)v34)
    {
      v35 = (_QWORD *)(v1 + 128);
      do
      {
        v36 = *((unsigned int *)v33 + 1);
        v37 = v3[4];
        v38 = (v3[5] - v37) >> 3;
        if (v36 >> 7 < v38)
        {
          v39 = *(_QWORD *)(v37 + 8 * (v36 >> 7));
          if (v39)
          {
            v40 = *(unsigned __int16 *)(v39 + 2 * (v36 & 0x7F));
            v42 = v3[7];
            v41 = v3[8];
            v43 = (v41 - v42) >> 3;
            if (v43 > v40)
            {
              v44 = v42 + 8 * v40;
              if (v44 != v41 && *(_DWORD *)(v44 + 4) == (_DWORD)v36)
              {
                if ((v46 = *v33, v47 = *v33 >> 39, v47 < v38)
                  && (v48 = *(_QWORD *)(v37 + 8 * v47)) != 0
                  && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v46) & 0x7F)), v43 > v49)
                  && ((v50 = HIDWORD(v46), v51 = v42 + 8 * v49, v51 != v41)
                    ? (v52 = *(_DWORD *)(v51 + 4) == (_DWORD)v50)
                    : (v52 = 0),
                      v52))
                {
                  v53 = (unint64_t *)(v3[10] + 16 * v49);
                }
                else
                {
                  v53 = (unint64_t *)v3[11];
                }
                v54 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v35, *v53);
                if (v54)
                {
                  v55 = v1;
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v35, v54);
                  v56 = __p[0];
                  if (__p[0])
                  {
                    if (v63)
                    {
                      v57 = (id *)*((_QWORD *)__p[0] + 5);
                      if (v57)
                      {
                        do
                        {
                          v58 = (id *)*v57;

                          operator delete(v57);
                          v57 = v58;
                        }
                        while (v58);
                      }
                      v59 = (void *)v56[3];
                      v56[3] = 0;
                      if (v59)
                        operator delete(v59);
                    }
                    operator delete(v56);
                  }
                  v1 = v55;
                }
              }
            }
          }
        }
        ++v33;
      }
      while (v33 != (unint64_t *)v34);
    }
  }
  result = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(*(_QWORD *)(v1 + 120));
  v12 = result;
  if (result[29] && (v13 = (_QWORD *)result[28]) != 0)
  {
    v14 = result[31];
    v15 = (void *)result[7];
    v16 = (uint64_t)(result[8] - (_QWORD)v15) >> 3;
    while (1)
    {
      __p[0] = v15;
      __p[1] = (void *)v16;
      v64 = v14;
      v17 = v13[6];
      if (!v17)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v17 + 48))(v17, &v64, __p);
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_15;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (_QWORD *)md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::debugConsoleString();
  }
  else
  {
LABEL_15:
    v12[8] = v12[7];
    v12[11] = v12[10];
  }
  return result;
}

void md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::AnimationInfo>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6BC5598729A9856CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6BC5598729A9856CLL;
      if (*(_QWORD *)&v3 <= 0x6BC5598729A9856CuLL)
        v5 = 0x6BC5598729A9856CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6BC5598729A9856CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6BC5598729A9856CLL)
            {
              if (v7[2] == 0x6BC5598729A9856CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6BC5598729A9856CLL)
          {
            if (v7[2] == 0x6BC5598729A9856CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationInfo]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B18A8;
  *(_QWORD *)(v11 + 8) = 0x6BC5598729A9856CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6BC5598729A9856CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6BC5598729A9856CLL;
  v15[1] = "arComponents::AnimationInfo]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6BC5598729A9856CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C05FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationGroupParent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x16C9454C0C9AFF7BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x16C9454C0C9AFF7BLL;
      if (*(_QWORD *)&v3 <= 0x16C9454C0C9AFF7BuLL)
        v5 = 0x16C9454C0C9AFF7BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x16C9454C0C9AFF7BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x16C9454C0C9AFF7BLL)
            {
              if (v7[2] == 0x16C9454C0C9AFF7BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x16C9454C0C9AFF7BLL)
          {
            if (v7[2] == 0x16C9454C0C9AFF7BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationGroupParent]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1ED8;
  *(_QWORD *)(v11 + 8) = 0x16C9454C0C9AFF7BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x16C9454C0C9AFF7BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x16C9454C0C9AFF7BLL;
  v15[1] = "arComponents::AnimationGroupParent]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x16C9454C0C9AFF7BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C0824(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x28062957AE7A638DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x28062957AE7A638DLL;
      if (*(_QWORD *)&v3 <= 0x28062957AE7A638DuLL)
        v5 = 0x28062957AE7A638DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x28062957AE7A638DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x28062957AE7A638DLL)
            {
              if (v7[2] == 0x28062957AE7A638DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x28062957AE7A638DLL)
          {
            if (v7[2] == 0x28062957AE7A638DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationState<VKAnimationStateFinished>]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B19F8;
  *(_QWORD *)(v11 + 8) = 0x28062957AE7A638DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x28062957AE7A638DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x28062957AE7A638DLL;
  v15[1] = "arComponents::AnimationState<VKAnimationStateFinished>]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0x28062957AE7A638DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C0A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB7988916C13D056ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB7988916C13D056ALL;
      if (*(_QWORD *)&v3 <= 0xB7988916C13D056ALL)
        v5 = 0xB7988916C13D056ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB7988916C13D056ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB7988916C13D056ALL)
            {
              if (v7[2] == 0xB7988916C13D056ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB7988916C13D056ALL)
          {
            if (v7[2] == 0xB7988916C13D056ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::StopAnimationRequest<arComponents::Stop>]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1FC8;
  *(_QWORD *)(v11 + 8) = 0xB7988916C13D056ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB7988916C13D056ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB7988916C13D056ALL;
  v15[1] = "arComponents::StopAnimationRequest<arComponents::Stop>]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB7988916C13D056ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C10B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationDuration>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x123588C1A18C7310;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x123588C1A18C7310;
      if (*(_QWORD *)&v3 <= 0x123588C1A18C7310uLL)
        v5 = 0x123588C1A18C7310uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x123588C1A18C7310;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x123588C1A18C7310)
            {
              if (v7[2] == 0x123588C1A18C7310)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x123588C1A18C7310)
          {
            if (v7[2] == 0x123588C1A18C7310)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationDuration]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1C38;
  *(_QWORD *)(v11 + 8) = 0x123588C1A18C7310;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x123588C1A18C7310uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x123588C1A18C7310;
  v15[1] = "arComponents::AnimationDuration]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x123588C1A18C7310, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C12D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationGroupAssociation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCEA021FDB92686D6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCEA021FDB92686D6;
      if (*(_QWORD *)&v3 <= 0xCEA021FDB92686D6)
        v5 = 0xCEA021FDB92686D6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCEA021FDB92686D6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCEA021FDB92686D6)
            {
              if (v7[2] == 0xCEA021FDB92686D6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCEA021FDB92686D6)
          {
            if (v7[2] == 0xCEA021FDB92686D6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationGroupAssociation]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B22F8;
  *(_QWORD *)(v11 + 8) = 0xCEA021FDB92686D6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCEA021FDB92686D6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCEA021FDB92686D6;
  v15[1] = "arComponents::AnimationGroupAssociation]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCEA021FDB92686D6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C1500(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC2D2914D000E6B65;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC2D2914D000E6B65;
      if (*(_QWORD *)&v3 <= 0xC2D2914D000E6B65)
        v5 = 0xC2D2914D000E6B65 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC2D2914D000E6B65;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC2D2914D000E6B65)
            {
              if (v7[2] == 0xC2D2914D000E6B65)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC2D2914D000E6B65)
          {
            if (v7[2] == 0xC2D2914D000E6B65)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationState<VKAnimationStateActive>]";
  *(_QWORD *)(v11 + 24) = 52;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B19C8;
  *(_QWORD *)(v11 + 8) = 0xC2D2914D000E6B65;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC2D2914D000E6B65, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC2D2914D000E6B65;
  v15[1] = "arComponents::AnimationState<VKAnimationStateActive>]";
  v15[2] = 52;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC2D2914D000E6B65, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C1728(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _DWORD v29[2];
  uint64_t v30;

  v4 = HIDWORD(a4);
  v30 = *MEMORY[0x1E0C80C00];
  stopAndReleaseAnimation(a3, a4, *(_QWORD **)a1, 0);
  if (GEOGetVectorKitARAnimationLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_34);
  v7 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v29[0] = 67109120;
    v29[1] = v4;
    _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "Animating : Animation stopped: %d", (uint8_t *)v29, 8u);
  }

  v8 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(**(_QWORD **)(a1 + 8));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v8, a2);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(uint64_t **)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *(uint64_t **)v9;
    v14 = (uint64_t)v11 - *(_QWORD *)v9;
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      abort();
    v17 = v10 - (_QWORD)v13;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = a2;
    v12 = v20 + 1;
    if (v11 == v13)
    {
      v13 = v11;
    }
    else
    {
      v22 = (char *)v11 - (char *)v13 - 8;
      if (v22 < 0x58)
        goto LABEL_33;
      if ((unint64_t)((char *)v11 - v19 - v14) < 0x20)
        goto LABEL_33;
      v23 = (v22 >> 3) + 1;
      v24 = &v19[8 * v15 - 16];
      v25 = v11 - 2;
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          v28 = *--v11;
          *--v20 = v28;
        }
        while (v11 != v13);
        v13 = *(uint64_t **)v9;
      }
    }
    *(_QWORD *)v9 = v20;
    *(_QWORD *)(v9 + 8) = v12;
    *(_QWORD *)(v9 + 16) = v21;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = a2;
    v12 = v11 + 1;
  }
  *(_QWORD *)(v9 + 8) = v12;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::remove();
}

uint64_t gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>();
}

uint64_t gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x36475A4976FF3838;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x36475A4976FF3838;
      if (*(_QWORD *)&v3 <= 0x36475A4976FF3838uLL)
        v5 = 0x36475A4976FF3838uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x36475A4976FF3838;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x36475A4976FF3838)
            {
              if (v7[2] == 0x36475A4976FF3838)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x36475A4976FF3838)
          {
            if (v7[2] == 0x36475A4976FF3838)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::StopAnimationRequest<arComponents::StopAndComplete>]";
  *(_QWORD *)(v11 + 24) = 65;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1FF8;
  *(_QWORD *)(v11 + 8) = 0x36475A4976FF3838;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x36475A4976FF3838uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x36475A4976FF3838;
  v15[1] = "arComponents::StopAnimationRequest<arComponents::StopAndComplete>]";
  v15[2] = 65;
  gdc::Registry::_registerStorageDataSignals(a1, 0x36475A4976FF3838, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C1D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  NSObject *v29;
  _DWORD v30[2];
  uint64_t v31;

  v4 = HIDWORD(a4);
  v31 = *MEMORY[0x1E0C80C00];
  stopAndReleaseAnimation(a3, a4, *(_QWORD **)a1, 1);
  v7 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(**(_QWORD **)(a1 + 8));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v7, a2);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t **)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v11 = v10;
  if ((unint64_t)v10 >= v9)
  {
    v13 = *(uint64_t **)v8;
    v14 = (uint64_t)v10 - *(_QWORD *)v8;
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      abort();
    v17 = v9 - (_QWORD)v13;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = a2;
    v12 = v20 + 1;
    if (v10 == v13)
    {
      v13 = v10;
    }
    else
    {
      v22 = (char *)v10 - (char *)v13 - 8;
      if (v22 < 0x58)
        goto LABEL_33;
      if ((unint64_t)((char *)v10 - v19 - v14) < 0x20)
        goto LABEL_33;
      v23 = (v22 >> 3) + 1;
      v11 = &v10[-(v23 & 0x3FFFFFFFFFFFFFFCLL)];
      v24 = &v19[8 * v15 - 16];
      v25 = v10 - 2;
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          v28 = *--v11;
          *--v20 = v28;
        }
        while (v11 != v13);
        v13 = *(uint64_t **)v8;
      }
    }
    *(_QWORD *)v8 = v20;
    *(_QWORD *)(v8 + 8) = v12;
    *(_QWORD *)(v8 + 16) = v21;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v10 = a2;
    v12 = v10 + 1;
  }
  *(_QWORD *)(v8 + 8) = v12;
  if (GEOGetVectorKitARAnimationLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_34);
  v29 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30[0] = 67109120;
    v30[1] = v4;
    _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_INFO, "Animating : Animation completed: %d", (uint8_t *)v30, 8u);
  }

}

uint64_t gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>();
}

uint64_t gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5A61F07088E4D192;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5A61F07088E4D192;
      if (*(_QWORD *)&v3 <= 0x5A61F07088E4D192uLL)
        v5 = 0x5A61F07088E4D192uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5A61F07088E4D192;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5A61F07088E4D192)
            {
              if (v7[2] == 0x5A61F07088E4D192)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5A61F07088E4D192)
          {
            if (v7[2] == 0x5A61F07088E4D192)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CreateJumpAndRotateAnimation]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2538;
  *(_QWORD *)(v11 + 8) = 0x5A61F07088E4D192;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5A61F07088E4D192uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5A61F07088E4D192;
  v15[1] = "arComponents::CreateJumpAndRotateAnimation]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5A61F07088E4D192, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C22B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::Registry::add<arComponents::AnimationInfo,arComponents::AnimationGroupAssociation,arComponents::AnimationGroupProgress,arComponents::TimeBasedStart,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>,arComponents::AnimationDuration,arComponents::AnimationState<(VKAnimationState)0>>(uint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5, __int128 *a6, uint64_t *a7)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v14 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationInfo>(a1);
  gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v14, a2, a3);
  v15 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>(a1);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v15, a2, a4);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationGroupProgress>(a1);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v16, a2, a5);
  v17 = (uint64_t *)gdc::Registry::storage<arComponents::TimeBasedStart>(a1);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v17, a2);
  v18 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(a1);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v18, a2, a6);
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationDuration>(a1);
  gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(v19, a2, a7);
  v20 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(a1);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v20, a2);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 72 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 72);
  v16 = *(_OWORD *)(v15 - 56);
  v17 = *(_OWORD *)(v15 - 40);
  v18 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 - 8);
  *(_OWORD *)(v14 + 32) = v17;
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 16) = v16;
  a1[11] -= 72;
  v19 = (_QWORD *)a1[28];
  if (!v19)
    return 1;
  v20 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v20;
    v21 = v19[6];
    if (!v21)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, &v24, v25);
    v19 = (_QWORD *)*v19;
    if (!v19)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::TimeBasedStart>(v22);
}

uint64_t gdc::Registry::storage<arComponents::TimeBasedStart>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x61D2B95408214F8ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x61D2B95408214F8ELL;
      if (*(_QWORD *)&v3 <= 0x61D2B95408214F8EuLL)
        v5 = 0x61D2B95408214F8EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x61D2B95408214F8ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x61D2B95408214F8ELL)
            {
              if (v7[2] == 0x61D2B95408214F8ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x61D2B95408214F8ELL)
          {
            if (v7[2] == 0x61D2B95408214F8ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::TimeBasedStart]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1AB8;
  *(_QWORD *)(v11 + 8) = 0x61D2B95408214F8ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x61D2B95408214F8EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x61D2B95408214F8ELL;
  v15[1] = "arComponents::TimeBasedStart]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x61D2B95408214F8ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C26B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x92A8E86C11220425;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x92A8E86C11220425;
      if (*(_QWORD *)&v3 <= 0x92A8E86C11220425)
        v5 = 0x92A8E86C11220425 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x92A8E86C11220425;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x92A8E86C11220425)
            {
              if (v7[2] == 0x92A8E86C11220425)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x92A8E86C11220425)
          {
            if (v7[2] == 0x92A8E86C11220425)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationState<VKAnimationStateNone>]";
  *(_QWORD *)(v11 + 24) = 50;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1998;
  *(_QWORD *)(v11 + 8) = 0x92A8E86C11220425;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x92A8E86C11220425, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x92A8E86C11220425;
  v15[1] = "arComponents::AnimationState<VKAnimationStateNone>]";
  v15[2] = 50;
  gdc::Registry::_registerStorageDataSignals(a1, 0x92A8E86C11220425, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C28E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ReadyToStartAnimation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBA4F817314B669D2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBA4F817314B669D2;
      if (*(_QWORD *)&v3 <= 0xBA4F817314B669D2)
        v5 = 0xBA4F817314B669D2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBA4F817314B669D2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBA4F817314B669D2)
            {
              if (v7[2] == 0xBA4F817314B669D2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBA4F817314B669D2)
          {
            if (v7[2] == 0xBA4F817314B669D2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::ReadyToStartAnimation]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2118;
  *(_QWORD *)(v11 + 8) = 0xBA4F817314B669D2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBA4F817314B669D2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBA4F817314B669D2;
  v15[1] = "arComponents::ReadyToStartAnimation]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBA4F817314B669D2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C2B08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationDependencyOn>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF42391DDAC21667CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF42391DDAC21667CLL;
      if (*(_QWORD *)&v3 <= 0xF42391DDAC21667CLL)
        v5 = 0xF42391DDAC21667CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF42391DDAC21667CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF42391DDAC21667CLL)
            {
              if (v7[2] == 0xF42391DDAC21667CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF42391DDAC21667CLL)
          {
            if (v7[2] == 0xF42391DDAC21667CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationDependencyOn]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2028;
  *(_QWORD *)(v11 + 8) = 0xF42391DDAC21667CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF42391DDAC21667CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF42391DDAC21667CLL;
  v15[1] = "arComponents::AnimationDependencyOn]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF42391DDAC21667CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C2D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::NeedsPropagateFinished>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x21F4200BFFAD882CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x21F4200BFFAD882CLL;
      if (*(_QWORD *)&v3 <= 0x21F4200BFFAD882CuLL)
        v5 = 0x21F4200BFFAD882CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x21F4200BFFAD882CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x21F4200BFFAD882CLL)
            {
              if (v7[2] == 0x21F4200BFFAD882CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x21F4200BFFAD882CLL)
          {
            if (v7[2] == 0x21F4200BFFAD882CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::NeedsPropagateFinished]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B21D8;
  *(_QWORD *)(v11 + 8) = 0x21F4200BFFAD882CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x21F4200BFFAD882CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x21F4200BFFAD882CLL;
  v15[1] = "arComponents::NeedsPropagateFinished]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0x21F4200BFFAD882CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C2F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::NeedsPropagateActive>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA081D0B61327224CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA081D0B61327224CLL;
      if (*(_QWORD *)&v3 <= 0xA081D0B61327224CLL)
        v5 = 0xA081D0B61327224CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA081D0B61327224CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA081D0B61327224CLL)
            {
              if (v7[2] == 0xA081D0B61327224CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA081D0B61327224CLL)
          {
            if (v7[2] == 0xA081D0B61327224CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::NeedsPropagateActive]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1F68;
  *(_QWORD *)(v11 + 8) = 0xA081D0B61327224CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA081D0B61327224CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA081D0B61327224CLL;
  v15[1] = "arComponents::NeedsPropagateActive]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA081D0B61327224CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C3180(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *i;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;

  v6 = **(_QWORD **)(a1 + 8);
  v7 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)1>>(**(_QWORD **)a1);
  v55 = a3;
  v8 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v7 + 4, (uint64_t)&v55);
  if ((v9 & 1) != 0)
  {
    v15 = (char *)v7[11];
    v14 = v7[12];
    if ((unint64_t)v15 >= v14)
    {
      v17 = (char *)v7[10];
      v18 = (v15 - v17) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        goto LABEL_57;
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          goto LABEL_58;
        v22 = operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v6;
      v16 = v23 + 1;
      if (v15 != v17)
      {
        v25 = v15 - v17 - 8;
        if (v25 < 0x58)
          goto LABEL_61;
        if ((unint64_t)(v17 - v22) < 0x20)
          goto LABEL_61;
        v26 = (v25 >> 3) + 1;
        v27 = &v22[8 * v18 - 16];
        v28 = v15 - 16;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v15 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_61:
          do
          {
            v31 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v23 = v31;
          }
          while (v15 != v17);
        }
      }
      v7[10] = (uint64_t)v23;
      v7[11] = (uint64_t)v16;
      v7[12] = (uint64_t)v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v15 = v6;
      v16 = v15 + 8;
    }
    v7[11] = (uint64_t)v16;
    v11 = v7[31];
  }
  else
  {
    v10 = (_QWORD *)((char *)v8 + v7[10] - v7[7]);
    *v10 = v6;
    v11 = v7[31];
    if (v10 != (_QWORD *)v7[11])
    {
      v12 = (_QWORD *)v7[16];
      if (v12)
      {
        while (1)
        {
          v57 = &v55;
          v58 = 1;
          v56 = v11;
          v13 = v12[6];
          if (!v13)
            break;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v13 + 48))(v13, &v56, &v57);
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_32;
        }
LABEL_56:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_57:
        abort();
      }
      goto LABEL_32;
    }
  }
  for (i = (_QWORD *)v7[22]; i; i = (_QWORD *)*i)
  {
    v57 = &v55;
    v58 = 1;
    v56 = v11;
    v33 = i[6];
    if (!v33)
      goto LABEL_56;
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v33 + 48))(v33, &v56, &v57);
  }
LABEL_32:
  v34 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)3>>(**(_QWORD **)a1);
  gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)3>>::remove(v34, a3);
  v35 = *(_QWORD *)(a1 + 16);
  v37 = *(_QWORD **)(v35 + 8);
  v36 = *(_QWORD *)(v35 + 16);
  if ((unint64_t)v37 < v36)
  {
    *v37 = a2;
    v38 = v37 + 1;
    goto LABEL_55;
  }
  v39 = *(_BYTE **)v35;
  v40 = (uint64_t)v37 - *(_QWORD *)v35;
  v41 = v40 >> 3;
  v42 = (v40 >> 3) + 1;
  if (v42 >> 61)
    goto LABEL_57;
  v43 = v36 - (_QWORD)v39;
  if (v43 >> 2 > v42)
    v42 = v43 >> 2;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
    v44 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (!v44)
  {
    v45 = 0;
    goto LABEL_44;
  }
  if (v44 >> 61)
LABEL_58:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v45 = operator new(8 * v44);
LABEL_44:
  v46 = &v45[8 * v41];
  v47 = &v45[8 * v44];
  *v46 = a2;
  v38 = v46 + 1;
  if (v37 == (_QWORD *)v39)
  {
    v39 = v37;
  }
  else
  {
    v48 = (char *)v37 - v39 - 8;
    if (v48 < 0x58)
      goto LABEL_62;
    if ((unint64_t)((char *)v37 - v45 - v40) < 0x20)
      goto LABEL_62;
    v49 = (v48 >> 3) + 1;
    v50 = &v45[8 * v41 - 16];
    v51 = (__int128 *)(v37 - 2);
    v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 2;
      v52 -= 4;
    }
    while (v52);
    v46 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
    v37 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v54 = *--v37;
        *--v46 = v54;
      }
      while (v37 != (_QWORD *)v39);
      v39 = *(_BYTE **)v35;
    }
  }
  *(_QWORD *)v35 = v46;
  *(_QWORD *)(v35 + 8) = v38;
  *(_QWORD *)(v35 + 16) = v47;
  if (v39)
    operator delete(v39);
LABEL_55:
  *(_QWORD *)(v35 + 8) = v38;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::NeedsPropagateActive>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()();
}

void propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *i;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;

  v6 = **(_QWORD **)(a1 + 8);
  v7 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)3>>(**(_QWORD **)a1);
  v55 = a3;
  v8 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v7 + 4, (uint64_t)&v55);
  if ((v9 & 1) != 0)
  {
    v15 = (char *)v7[11];
    v14 = v7[12];
    if ((unint64_t)v15 >= v14)
    {
      v17 = (char *)v7[10];
      v18 = (v15 - v17) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        goto LABEL_57;
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          goto LABEL_58;
        v22 = operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v6;
      v16 = v23 + 1;
      if (v15 != v17)
      {
        v25 = v15 - v17 - 8;
        if (v25 < 0x58)
          goto LABEL_61;
        if ((unint64_t)(v17 - v22) < 0x20)
          goto LABEL_61;
        v26 = (v25 >> 3) + 1;
        v27 = &v22[8 * v18 - 16];
        v28 = v15 - 16;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v15 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_61:
          do
          {
            v31 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v23 = v31;
          }
          while (v15 != v17);
        }
      }
      v7[10] = (uint64_t)v23;
      v7[11] = (uint64_t)v16;
      v7[12] = (uint64_t)v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v15 = v6;
      v16 = v15 + 8;
    }
    v7[11] = (uint64_t)v16;
    v11 = v7[31];
  }
  else
  {
    v10 = (_QWORD *)((char *)v8 + v7[10] - v7[7]);
    *v10 = v6;
    v11 = v7[31];
    if (v10 != (_QWORD *)v7[11])
    {
      v12 = (_QWORD *)v7[16];
      if (v12)
      {
        while (1)
        {
          v57 = &v55;
          v58 = 1;
          v56 = v11;
          v13 = v12[6];
          if (!v13)
            break;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v13 + 48))(v13, &v56, &v57);
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_32;
        }
LABEL_56:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_57:
        abort();
      }
      goto LABEL_32;
    }
  }
  for (i = (_QWORD *)v7[22]; i; i = (_QWORD *)*i)
  {
    v57 = &v55;
    v58 = 1;
    v56 = v11;
    v33 = i[6];
    if (!v33)
      goto LABEL_56;
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v33 + 48))(v33, &v56, &v57);
  }
LABEL_32:
  v34 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)1>>(**(_QWORD **)a1);
  gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)1>>::remove(v34, a3);
  v35 = *(_QWORD *)(a1 + 16);
  v37 = *(_QWORD **)(v35 + 8);
  v36 = *(_QWORD *)(v35 + 16);
  if ((unint64_t)v37 < v36)
  {
    *v37 = a2;
    v38 = v37 + 1;
    goto LABEL_55;
  }
  v39 = *(_BYTE **)v35;
  v40 = (uint64_t)v37 - *(_QWORD *)v35;
  v41 = v40 >> 3;
  v42 = (v40 >> 3) + 1;
  if (v42 >> 61)
    goto LABEL_57;
  v43 = v36 - (_QWORD)v39;
  if (v43 >> 2 > v42)
    v42 = v43 >> 2;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
    v44 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (!v44)
  {
    v45 = 0;
    goto LABEL_44;
  }
  if (v44 >> 61)
LABEL_58:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v45 = operator new(8 * v44);
LABEL_44:
  v46 = &v45[8 * v41];
  v47 = &v45[8 * v44];
  *v46 = a2;
  v38 = v46 + 1;
  if (v37 == (_QWORD *)v39)
  {
    v39 = v37;
  }
  else
  {
    v48 = (char *)v37 - v39 - 8;
    if (v48 < 0x58)
      goto LABEL_62;
    if ((unint64_t)((char *)v37 - v45 - v40) < 0x20)
      goto LABEL_62;
    v49 = (v48 >> 3) + 1;
    v50 = &v45[8 * v41 - 16];
    v51 = (__int128 *)(v37 - 2);
    v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 2;
      v52 -= 4;
    }
    while (v52);
    v46 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
    v37 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v54 = *--v37;
        *--v46 = v54;
      }
      while (v37 != (_QWORD *)v39);
      v39 = *(_BYTE **)v35;
    }
  }
  *(_QWORD *)v35 = v46;
  *(_QWORD *)(v35 + 8) = v38;
  *(_QWORD *)(v35 + 16) = v47;
  if (v39)
    operator delete(v39);
LABEL_55:
  *(_QWORD *)(v35 + 8) = v38;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::NeedsPropagateFinished>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v18 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    v19 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v19, v20);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(v17);
}

uint64_t gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x30A6CC1B9187F411;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x30A6CC1B9187F411;
      if (*(_QWORD *)&v3 <= 0x30A6CC1B9187F411uLL)
        v5 = 0x30A6CC1B9187F411uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x30A6CC1B9187F411;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x30A6CC1B9187F411)
            {
              if (v7[2] == 0x30A6CC1B9187F411)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x30A6CC1B9187F411)
          {
            if (v7[2] == 0x30A6CC1B9187F411)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationTarget<arComponents::AnimationProperty::Translation, gm::Matrix<float, 3, 1>>]";
  *(_QWORD *)(v11 + 24) = 100;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1B18;
  *(_QWORD *)(v11 + 8) = 0x30A6CC1B9187F411;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x30A6CC1B9187F411uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x30A6CC1B9187F411;
  v15[1] = "arComponents::AnimationTarget<arComponents::AnimationProperty::Translation, gm::Matrix<float, 3, 1>>]";
  v15[2] = 100;
  gdc::Registry::_registerStorageDataSignals(a1, 0x30A6CC1B9187F411, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C3C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  unint64_t v8;
  double v9;
  NSObject *v10;
  int v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint8_t buf[8];
  __int16 v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a3;
  v9 = (float)(a4 + (float)((float)(a5 - a4) * *(float *)(a2 + 8)));
  v26 = **(double **)a1 * v9;
  if (GEOGetVectorKitARAnimationLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_34);
  v10 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(_DWORD *)(a3 + 12);
    v12 = *(float *)(a2 + 8);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v11;
    v31 = 2048;
    v32 = v12;
    _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "Animating : Translation applied: %d  progress : %f", buf, 0x12u);
  }

  if (fabs(v9) <= 0.01)
    return;
  v13 = **(_QWORD **)(a1 + 8);
  v28[0] = &off_1E42D9638;
  v28[1] = &v26;
  v29 = v28;
  v14 = (_QWORD *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v13);
  v15 = v14[4];
  if (v8 >> 39 < (v14[5] - v15) >> 3)
  {
    v16 = *(_QWORD *)(v15 + 8 * (v8 >> 39));
    if (v16)
    {
      v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v8) & 0x7F));
      v19 = v14[7];
      v18 = v14[8];
      if (v17 < (v18 - v19) >> 3)
      {
        v20 = v19 + 8 * v17;
        if (v20 != v18 && *(_DWORD *)(v20 + 4) == HIDWORD(v8))
        {
          v25 = v14[10];
          if (v25)
          {
            if (v25 + 8 * v17 != v14[11])
            {
              buf[0] = 0;
              if (v29)
              {
                (*(void (**)(_QWORD *))(*v29 + 48))(v29);
                goto LABEL_15;
              }
LABEL_25:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
              return;
            }
          }
        }
      }
    }
  }
  *(_QWORD *)buf = 0;
  LOBYTE(v27) = 1;
  if (!v29)
    goto LABEL_25;
  (*(void (**)(_QWORD *, uint8_t *, uint64_t *))(*v29 + 48))(v29, buf, &v27);
  v27 = *(_QWORD *)buf;
  v22 = (uint64_t *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v13);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v22, v8, &v27);
LABEL_15:
  v23 = v29;
  if (v29 == v28)
  {
    v24 = 4;
    v23 = v28;
  }
  else
  {
    if (!v29)
      return;
    v24 = 5;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
}

void sub_19F5C3ED0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F5C3EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(exception_object);
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x87509A21B3A53B5ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x87509A21B3A53B5ALL;
      if (*(_QWORD *)&v3 <= 0x87509A21B3A53B5ALL)
        v5 = 0x87509A21B3A53B5ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x87509A21B3A53B5ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x87509A21B3A53B5ALL)
            {
              if (v7[2] == 0x87509A21B3A53B5ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x87509A21B3A53B5ALL)
          {
            if (v7[2] == 0x87509A21B3A53B5ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationTarget<arComponents::AnimationProperty::Rotation, gm::Matrix<float, 3, 1>>]";
  *(_QWORD *)(v11 + 24) = 97;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1B48;
  *(_QWORD *)(v11 + 8) = 0x87509A21B3A53B5ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x87509A21B3A53B5ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x87509A21B3A53B5ALL;
  v15[1] = "arComponents::AnimationTarget<arComponents::AnimationProperty::Rotation, gm::Matrix<float, 3, 1>>]";
  v15[2] = 97;
  gdc::Registry::_registerStorageDataSignals(a1, 0x87509A21B3A53B5ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C4128(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()(uint64_t **a1, float *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  NSObject *v9;
  int v10;
  double v11;
  float v12;
  float v13;
  float v14;
  __float2 v15;
  __float2 v16;
  __float2 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v27;
  _QWORD *result;
  uint64_t v29;
  uint64_t v30;
  float v31[4];
  uint64_t v32;
  int v33;
  int v34;
  _QWORD v35[3];
  _QWORD *v36;
  _BYTE buf[18];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a4;
  if (GEOGetVectorKitARAnimationLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_34);
  v9 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_DWORD *)(a4 + 12);
    v11 = *(float *)(a3 + 8);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 2048;
    *(double *)&buf[10] = v11;
    _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "Animating : Rotation applied: %d  progress : %f", buf, 0x12u);
  }

  v12 = *(float *)(a3 + 8);
  v13 = a2[1] + (float)(v12 * (float)(a2[4] - a2[1]));
  v14 = a2[2] + (float)((float)(a2[5] - a2[2]) * v12);
  v15 = __sincosf_stret((float)(*a2 + (float)(v12 * (float)(a2[3] - *a2))) * 0.5);
  v16 = __sincosf_stret(v13 * 0.5);
  v17 = __sincosf_stret(v14 * 0.5);
  v31[0] = (float)((float)(v16.__sinval * v15.__cosval) * v17.__cosval)
         + (float)((float)(v16.__cosval * v15.__sinval) * v17.__sinval);
  v31[1] = -(float)((float)((float)(v16.__sinval * v15.__cosval) * v17.__sinval)
                  - (float)((float)(v16.__cosval * v15.__sinval) * v17.__cosval));
  v31[2] = -(float)((float)((float)(v16.__sinval * v15.__sinval) * v17.__cosval)
                  - (float)((float)(v16.__cosval * v15.__cosval) * v17.__sinval));
  v31[3] = (float)((float)(v16.__cosval * v15.__cosval) * v17.__cosval)
         + (float)((float)(v16.__sinval * v15.__sinval) * v17.__sinval);
  v18 = **a1;
  v35[0] = &off_1E42D95F0;
  v35[1] = v31;
  v36 = v35;
  v19 = (_QWORD *)gdc::Registry::storage<arComponents::RotationToApply>(v18);
  v20 = v19[4];
  if (v8 >> 39 >= (v19[5] - v20) >> 3
    || (v21 = *(_QWORD *)(v20 + 8 * (v8 >> 39))) == 0
    || (v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v8) & 0x7F)), v24 = v19[7], v23 = v19[8], v22 >= (v23 - v24) >> 3)
    || ((v25 = v24 + 8 * v22, v25 != v23) ? (v26 = *(_DWORD *)(v25 + 4) == HIDWORD(v8)) : (v26 = 0),
        !v26 || (v30 = v19[10]) == 0 || v30 + 16 * v22 == v19[11]))
  {
    *(_OWORD *)buf = xmmword_19FFB34C0;
    LOBYTE(v32) = 1;
    if (v36)
    {
      (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(*v36 + 48))(v36, buf, &v32);
      v32 = *(_QWORD *)buf;
      v33 = *(_DWORD *)&buf[8];
      v34 = *(_DWORD *)&buf[12];
      v27 = (uint64_t *)gdc::Registry::storage<arComponents::RotationToApply>(v18);
      gdc::ComponentStorageWrapper<arComponents::RotationToApply>::emplace(v27, v8, &v32);
      goto LABEL_14;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  buf[0] = 0;
  if (!v36)
    goto LABEL_24;
  (*(void (**)(_QWORD *))(*v36 + 48))(v36);
LABEL_14:
  result = v36;
  if (v36 == v35)
  {
    v29 = 4;
    result = v35;
  }
  else
  {
    if (!v36)
      return result;
    v29 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
}

void sub_19F5C442C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F5C4438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      _Unwind_Resume(exception_object);
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  _Unwind_Resume(exception_object);
}

_QWORD *processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  unint64_t v8;
  NSObject *v9;
  int v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint8_t buf[8];
  __int16 v30;
  double v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a3;
  v25 = a4 + (float)(*(float *)(a2 + 8) * (float)(a5 - a4));
  if (GEOGetVectorKitARAnimationLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_34);
  v9 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = *(_DWORD *)(a3 + 12);
    v11 = *(float *)(a2 + 8);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v10;
    v30 = 2048;
    v31 = v11;
    _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_INFO, "Animating : Scale applied: %d  progress : %f", buf, 0x12u);
  }

  v12 = **a1;
  v27[0] = &off_1E42D95A8;
  v27[1] = &v25;
  v28 = v27;
  v13 = (_QWORD *)gdc::Registry::storage<arComponents::ScaleToApply>(v12);
  v14 = v13[4];
  if (v8 >> 39 >= (v13[5] - v14) >> 3
    || (v15 = *(_QWORD *)(v14 + 8 * (v8 >> 39))) == 0
    || (v16 = *(unsigned __int16 *)(v15 + 2 * (HIDWORD(v8) & 0x7F)), v18 = v13[7], v17 = v13[8], v16 >= (v17 - v18) >> 3)
    || ((v19 = v18 + 8 * v16, v19 != v17) ? (v20 = *(_DWORD *)(v19 + 4) == HIDWORD(v8)) : (v20 = 0),
        !v20 || (v24 = v13[10]) == 0 || v24 + 8 * v16 == v13[11]))
  {
    *(_QWORD *)buf = 0x3FF0000000000000;
    LOBYTE(v26) = 1;
    if (v28)
    {
      (*(void (**)(_QWORD *, uint8_t *, uint64_t *))(*v28 + 48))(v28, buf, &v26);
      v26 = *(_QWORD *)buf;
      v21 = (uint64_t *)gdc::Registry::storage<arComponents::ScaleToApply>(v12);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v21, v8, &v26);
      goto LABEL_14;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  buf[0] = 0;
  if (!v28)
    goto LABEL_24;
  (*(void (**)(_QWORD *))(*v28 + 48))(v28);
LABEL_14:
  result = v28;
  if (v28 == v27)
  {
    v23 = 4;
    result = v27;
  }
  else
  {
    if (!v28)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
}

void sub_19F5C46B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F5C46C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(exception_object);
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<arComponents::ScaleToApply>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x79E9DCF970528A97;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x79E9DCF970528A97;
      if (*(_QWORD *)&v3 <= 0x79E9DCF970528A97uLL)
        v5 = 0x79E9DCF970528A97uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x79E9DCF970528A97;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x79E9DCF970528A97)
            {
              if (v7[2] == 0x79E9DCF970528A97)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x79E9DCF970528A97)
          {
            if (v7[2] == 0x79E9DCF970528A97)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::ScaleToApply]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1878;
  *(_QWORD *)(v11 + 8) = 0x79E9DCF970528A97;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x79E9DCF970528A97uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x79E9DCF970528A97;
  v15[1] = "arComponents::ScaleToApply]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x79E9DCF970528A97, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C490C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::ScaleToApply>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ScaleToApply>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ScaleToApply>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ScaleToApply>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1},std::allocator<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1}>,void ()(arComponents::ScaleToApply &,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1},std::allocator<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1}>,void ()(arComponents::ScaleToApply &,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D95A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1},std::allocator<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1}>,void ()(arComponents::ScaleToApply &,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D95A8;
  a2[1] = v2;
  return result;
}

double std::__function::__func<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1},std::allocator<processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::ScaleToApply &,BOOL)#1}>,void ()(arComponents::ScaleToApply &,BOOL)>::operator()(uint64_t a1, double *a2)
{
  double result;

  result = *a2 * **(float **)(a1 + 8);
  *a2 = result;
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)2,float>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::RotationToApply>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x23D8CDD6E36C6DAFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x23D8CDD6E36C6DAFLL;
      if (*(_QWORD *)&v3 <= 0x23D8CDD6E36C6DAFuLL)
        v5 = 0x23D8CDD6E36C6DAFuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x23D8CDD6E36C6DAFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x23D8CDD6E36C6DAFLL)
            {
              if (v7[2] == 0x23D8CDD6E36C6DAFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x23D8CDD6E36C6DAFLL)
          {
            if (v7[2] == 0x23D8CDD6E36C6DAFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RotationToApply]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1BA8;
  *(_QWORD *)(v11 + 8) = 0x23D8CDD6E36C6DAFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x23D8CDD6E36C6DAFuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x23D8CDD6E36C6DAFLL;
  v15[1] = "arComponents::RotationToApply]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x23D8CDD6E36C6DAFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C4E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::RotationToApply>::emplace(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v26 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v15 = (char *)a1[10];
      v16 = (v12 - v15) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        goto LABEL_30;
      v18 = v11 - (_QWORD)v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(16 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[16 * v16];
      *(_QWORD *)v21 = *a3;
      *((_DWORD *)v21 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)v21 + 3) = *((_DWORD *)a3 + 3);
      v14 = v21 + 16;
      if (v12 != v15)
      {
        do
        {
          v22 = *((_QWORD *)v12 - 2);
          v12 -= 16;
          v23 = *((_DWORD *)v12 + 2);
          *((_QWORD *)v21 - 2) = v22;
          v21 -= 16;
          *((_DWORD *)v21 + 2) = v23;
          *((_DWORD *)v21 + 3) = *((_DWORD *)v12 + 3);
        }
        while (v12 != v15);
        v12 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v21;
      a1[11] = (uint64_t)v14;
      a1[12] = (uint64_t)&v20[16 * v19];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *a3;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v12 = v13;
      *((_DWORD *)v12 + 3) = *((_DWORD *)a3 + 3);
      v14 = v12 + 16;
    }
    a1[11] = (uint64_t)v14;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)(a1[10] + 2 * ((_QWORD)v5 - a1[7]));
    *v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    v7[2] = *((_DWORD *)a3 + 2);
    v7[3] = *((_DWORD *)a3 + 3);
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v24 = (_QWORD *)a1[22];
  if (v24)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v25 = v24[6];
      if (!v25)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v25 + 48))(v25, &v27, &v28);
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<arComponents::RotationToApply>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RotationToApply>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RotationToApply>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RotationToApply>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1},std::allocator<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1}>,void ()(arComponents::RotationToApply &,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1},std::allocator<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1}>,void ()(arComponents::RotationToApply &,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D95F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1},std::allocator<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1}>,void ()(arComponents::RotationToApply &,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D95F0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1},std::allocator<processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::RotationToApply &,BOOL)#1}>,void ()(arComponents::RotationToApply &,BOOL)>::operator()(uint64_t a1, float *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v2 = *(float **)(a1 + 8);
  v3 = v2[1];
  v5 = a2[2];
  v4 = a2[3];
  v6 = v2[2];
  v7 = v2[3];
  v8 = a2[1];
  v9 = (float)((float)(v8 * v7) - (float)((float)(*a2 * v6) - (float)(v3 * v4))) + (float)(v5 * *v2);
  v10 = (float)((float)((float)(v6 * v4) + (float)(*a2 * v3)) - (float)(v8 * *v2)) + (float)(v5 * v7);
  v11 = (float)((float)(*a2 * *v2) + (float)(v8 * v3)) + (float)(v5 * v6);
  *a2 = (float)((float)((float)(*v2 * v4) + (float)(*a2 * v7)) + (float)(v8 * v6)) - (float)(v5 * v3);
  a2[1] = v9;
  result = -(float)(v11 - (float)(v7 * v4));
  a2[2] = v10;
  a2[3] = result;
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x12D112A384BC02BDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x12D112A384BC02BDLL;
      if (*(_QWORD *)&v3 <= 0x12D112A384BC02BDuLL)
        v5 = 0x12D112A384BC02BDuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x12D112A384BC02BDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x12D112A384BC02BDLL)
            {
              if (v7[2] == 0x12D112A384BC02BDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x12D112A384BC02BDLL)
          {
            if (v7[2] == 0x12D112A384BC02BDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::UpRelativeTranslationToApply]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B25C8;
  *(_QWORD *)(v11 + 8) = 0x12D112A384BC02BDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x12D112A384BC02BDuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x12D112A384BC02BDLL;
  v15[1] = "arComponents::UpRelativeTranslationToApply]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x12D112A384BC02BDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C56AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::UpRelativeTranslationToApply>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpRelativeTranslationToApply>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::UpRelativeTranslationToApply>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpRelativeTranslationToApply>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1},std::allocator<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1}>,void ()(arComponents::UpRelativeTranslationToApply &,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1},std::allocator<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1}>,void ()(arComponents::UpRelativeTranslationToApply &,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1},std::allocator<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1}>,void ()(arComponents::UpRelativeTranslationToApply &,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9638;
  a2[1] = v2;
  return result;
}

double std::__function::__func<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1},std::allocator<processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator() const(gdc::Entity,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>> &,arComponents::AnimationDuration &,arComponents::AnimationInfo &)::{lambda(arComponents::UpRelativeTranslationToApply &,BOOL)#1}>,void ()(arComponents::UpRelativeTranslationToApply &,BOOL)>::operator()(uint64_t a1, double *a2)
{
  double result;

  result = *a2 + **(double **)(a1 + 8);
  *a2 = result;
  return result;
}

uint64_t gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)3>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x24F0F36C0DDEC215;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x24F0F36C0DDEC215;
      if (*(_QWORD *)&v3 <= 0x24F0F36C0DDEC215uLL)
        v5 = 0x24F0F36C0DDEC215uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x24F0F36C0DDEC215;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x24F0F36C0DDEC215)
            {
              if (v7[2] == 0x24F0F36C0DDEC215)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x24F0F36C0DDEC215)
          {
            if (v7[2] == 0x24F0F36C0DDEC215)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationEntityStatus<VKAnimationStateFinished>]";
  *(_QWORD *)(v11 + 24) = 61;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2088;
  *(_QWORD *)(v11 + 8) = 0x24F0F36C0DDEC215;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x24F0F36C0DDEC215uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x24F0F36C0DDEC215;
  v15[1] = "arComponents::AnimationEntityStatus<VKAnimationStateFinished>]";
  v15[2] = 61;
  gdc::Registry::_registerStorageDataSignals(a1, 0x24F0F36C0DDEC215, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C5AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)1>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x21CF515ED2058BBDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x21CF515ED2058BBDLL;
      if (*(_QWORD *)&v3 <= 0x21CF515ED2058BBDuLL)
        v5 = 0x21CF515ED2058BBDuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x21CF515ED2058BBDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x21CF515ED2058BBDLL)
            {
              if (v7[2] == 0x21CF515ED2058BBDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x21CF515ED2058BBDLL)
          {
            if (v7[2] == 0x21CF515ED2058BBDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationEntityStatus<VKAnimationStateActive>]";
  *(_QWORD *)(v11 + 24) = 59;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2058;
  *(_QWORD *)(v11 + 8) = 0x21CF515ED2058BBDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x21CF515ED2058BBDuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x21CF515ED2058BBDLL;
  v15[1] = "arComponents::AnimationEntityStatus<VKAnimationStateActive>]";
  v15[2] = 59;
  gdc::Registry::_registerStorageDataSignals(a1, 0x21CF515ED2058BBDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C5CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v20, v21);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)1>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)3>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationEntityStatus<(VKAnimationState)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::NeedsPropagateActive>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsPropagateActive>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::NeedsPropagateFinished>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsPropagateFinished>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::ARAnimationLogic::createAnimations(void)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  double v10;
  VKTimedAnimation *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  char *v55;
  _QWORD *i;
  uint64_t v57;
  unsigned __int16 *v58;
  id *v59;
  char **v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  int v82;
  _QWORD v83[5];
  std::__shared_weak_count *v84;
  uint64_t v85;
  _QWORD v86[2];
  void (*v87)(_QWORD *, float);
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t buf[8];
  _QWORD v96[5];

  v96[3] = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (GEOGetVectorKitARAnimationLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_34);
  v8 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(_DWORD *)(a4 + 12);
    v10 = *(float *)a3;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v9;
    LOWORD(v96[0]) = 2048;
    *(double *)((char *)v96 + 2) = v10;
    _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_INFO, "Animating : Starting animation: %d duration: %f", buf, 0x12u);
  }

  v11 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", *(float *)a3);
  *(_DWORD *)(a3 + 8) = 0;
  -[VKTimedAnimation setTimingFunction:](v11, "setTimingFunction:", *(_QWORD *)(a3 + 16));
  v82 = *((_DWORD *)std::__hash_table<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::__unordered_map_hasher<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::hash<gdc::EntityId>,std::equal_to<gdc::EntityId>,true>,std::__unordered_map_equal<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::equal_to<gdc::EntityId>,std::hash<gdc::EntityId>,true>,std::allocator<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>>>::__emplace_unique_key_args<gdc::EntityId,std::piecewise_construct_t const&,std::tuple<gdc::EntityId const&>,std::tuple<>>((uint64_t *)(v7 + 128), *(_QWORD *)a4, (_QWORD *)a4)+ 12);
  v92 = v82;
  v13 = *(_QWORD *)(v7 + 176);
  v12 = *(std::__shared_weak_count **)(v7 + 184);
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v87 = ___ZZN2md16ARAnimationLogic16createAnimationsEvENK3__0clEN3gdc6EntityERN12arComponents17AnimationDurationERNS4_13AnimationInfoE_block_invoke;
    v88 = &__block_descriptor_56_ea8_32c73_ZTSNSt3__18weak_ptrIN2md16ARAnimationLogic25ARAnimationLogicWeakProxyEEE_e8_v12__0f8l;
    v89 = v13;
    v90 = v12;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  else
  {
    v87 = ___ZZN2md16ARAnimationLogic16createAnimationsEvENK3__0clEN3gdc6EntityERN12arComponents17AnimationDurationERNS4_13AnimationInfoE_block_invoke;
    v88 = &__block_descriptor_56_ea8_32c73_ZTSNSt3__18weak_ptrIN2md16ARAnimationLogic25ARAnimationLogicWeakProxyEEE_e8_v12__0f8l;
    v89 = v13;
    v90 = 0;
  }
  v17 = MEMORY[0x1E0C809B0];
  v86[0] = MEMORY[0x1E0C809B0];
  v86[1] = 3321888768;
  v91 = a2;
  -[VKTimedAnimation setStepHandler:](v11, "setStepHandler:", v86, v7 + 128);
  v83[0] = v17;
  v83[1] = 3321888768;
  v83[2] = ___ZZN2md16ARAnimationLogic16createAnimationsEvENK3__0clEN3gdc6EntityERN12arComponents17AnimationDurationERNS4_13AnimationInfoE_block_invoke_11;
  v83[3] = &__block_descriptor_56_ea8_32c73_ZTSNSt3__18weak_ptrIN2md16ARAnimationLogic25ARAnimationLogicWeakProxyEEE_e8_v12__0B8l;
  v83[4] = v13;
  v84 = v12;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v85 = a2;
  -[VKAnimation setCompletionHandler:](v11, "setCompletionHandler:", v83);
  md::AnimationRunner::runAnimation(*(md::MapEngine ***)(v7 + 168), &v11->super);
  v20 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(*(_QWORD *)(v7 + 120));
  v93 = a2;
  v21 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v20 + 4, (uint64_t)&v93);
  if ((v22 & 1) != 0)
  {
    v27 = (_BYTE *)v20[11];
    v26 = v20[12];
    if ((unint64_t)v27 >= v26)
    {
      v29 = (char *)v20[10];
      v30 = v27 - v29;
      v31 = v27 - v29 + 1;
      if (v31 < 0)
        goto LABEL_95;
      v32 = v26 - (_QWORD)v29;
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
        v33 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
        v34 = (char *)operator new(v33);
      else
        v34 = 0;
      v35 = &v34[v30];
      v28 = (uint64_t)&v34[v30 + 1];
      v36 = (char *)(v29 - v27);
      if (v29 == v27)
        v36 = 0;
      v20[10] = (uint64_t)&v36[(_QWORD)v35];
      v20[11] = v28;
      v20[12] = (uint64_t)&v34[v33];
      if (v29)
        operator delete(v29);
    }
    else
    {
      v28 = (uint64_t)(v27 + 1);
    }
    v20[11] = v28;
    v23 = v20[31];
  }
  else
  {
    v23 = v20[31];
    if (v20[10] + (((uint64_t)v21 - v20[7]) >> 3) != v20[11])
    {
      v24 = (_QWORD *)v20[16];
      if (v24)
      {
        while (1)
        {
          *(_QWORD *)buf = &v93;
          v96[0] = 1;
          v94 = v23;
          v25 = v24[6];
          if (!v25)
            goto LABEL_94;
          (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v25 + 48))(v25, &v94, buf);
          v24 = (_QWORD *)*v24;
          if (!v24)
            goto LABEL_40;
        }
      }
      goto LABEL_40;
    }
  }
  v37 = (_QWORD *)v20[22];
  if (v37)
  {
    while (1)
    {
      *(_QWORD *)buf = &v93;
      v96[0] = 1;
      v94 = v23;
      v38 = v37[6];
      if (!v38)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v38 + 48))(v38, &v94, buf);
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_40;
    }
LABEL_94:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
LABEL_40:
  v39 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsPropagateActive>(*(_QWORD *)(v7 + 120));
  v93 = a2;
  v40 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v39 + 4, (uint64_t)&v93);
  if ((v41 & 1) != 0)
  {
    v46 = (_BYTE *)v39[11];
    v45 = v39[12];
    if ((unint64_t)v46 >= v45)
    {
      v48 = (char *)v39[10];
      v49 = v46 - v48;
      v50 = v46 - v48 + 1;
      if (v50 < 0)
        goto LABEL_95;
      v51 = v45 - (_QWORD)v48;
      if (2 * v51 > v50)
        v50 = 2 * v51;
      if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
        v52 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
        v53 = (char *)operator new(v52);
      else
        v53 = 0;
      v54 = &v53[v49];
      v47 = (uint64_t)&v53[v49 + 1];
      v55 = (char *)(v48 - v46);
      if (v48 == v46)
        v55 = 0;
      v39[10] = (uint64_t)&v55[(_QWORD)v54];
      v39[11] = v47;
      v39[12] = (uint64_t)&v53[v52];
      if (v48)
        operator delete(v48);
    }
    else
    {
      v47 = (uint64_t)(v46 + 1);
    }
    v39[11] = v47;
    v42 = v39[31];
  }
  else
  {
    v42 = v39[31];
    if (v39[10] + (((uint64_t)v40 - v39[7]) >> 3) != v39[11])
    {
      v43 = (_QWORD *)v39[16];
      if (v43)
      {
        while (1)
        {
          *(_QWORD *)buf = &v93;
          v96[0] = 1;
          v94 = v42;
          v44 = v43[6];
          if (!v44)
            goto LABEL_94;
          (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v44 + 48))(v44, &v94, buf);
          v43 = (_QWORD *)*v43;
          if (!v43)
            goto LABEL_65;
        }
      }
      goto LABEL_65;
    }
  }
  for (i = (_QWORD *)v39[22]; i; i = (_QWORD *)*i)
  {
    *(_QWORD *)buf = &v93;
    v96[0] = 1;
    v94 = v42;
    v57 = i[6];
    if (!v57)
      goto LABEL_94;
    (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v57 + 48))(v57, &v94, buf);
  }
LABEL_65:
  *(_DWORD *)(a4 + 8) = v82;
  v58 = std::__hash_table<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::__unordered_map_hasher<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::hash<gdc::EntityId>,std::equal_to<gdc::EntityId>,true>,std::__unordered_map_equal<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::equal_to<gdc::EntityId>,std::hash<gdc::EntityId>,true>,std::allocator<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>>>::__emplace_unique_key_args<gdc::EntityId,std::piecewise_construct_t const&,std::tuple<gdc::EntityId const&>,std::tuple<>>(v80, *(_QWORD *)a4, (_QWORD *)a4);
  v59 = (id *)std::__hash_table<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,VKTimedAnimation * {__strong}>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v58 + 12), v82, &v92);
  objc_storeStrong(v59 + 3, v11);
  v60 = (char **)a1[1];
  v62 = v60[1];
  v61 = (unint64_t)v60[2];
  if ((unint64_t)v62 < v61)
  {
    *(_QWORD *)v62 = a2;
    v63 = v62 + 8;
    goto LABEL_87;
  }
  v64 = *v60;
  v65 = v62 - *v60;
  v66 = v65 >> 3;
  v67 = (v65 >> 3) + 1;
  if (v67 >> 61)
LABEL_95:
    abort();
  v68 = v61 - (_QWORD)v64;
  if (v68 >> 2 > v67)
    v67 = v68 >> 2;
  if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
    v69 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v69 = v67;
  if (v69)
  {
    if (v69 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v70 = operator new(8 * v69);
  }
  else
  {
    v70 = 0;
  }
  v71 = &v70[8 * v66];
  v72 = &v70[8 * v69];
  *(_QWORD *)v71 = a2;
  v63 = v71 + 8;
  if (v62 != v64)
  {
    v73 = v62 - v64 - 8;
    if (v73 < 0x58)
      goto LABEL_99;
    if ((unint64_t)(v62 - v70 - v65) < 0x20)
      goto LABEL_99;
    v74 = (v73 >> 3) + 1;
    v75 = &v70[8 * v66 - 16];
    v76 = v62 - 16;
    v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v78 = *(_OWORD *)v76;
      *(v75 - 1) = *((_OWORD *)v76 - 1);
      *v75 = v78;
      v75 -= 2;
      v76 -= 32;
      v77 -= 4;
    }
    while (v77);
    v71 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
    v62 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
    if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_99:
      do
      {
        v79 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *((_QWORD *)v71 - 1) = v79;
        v71 -= 8;
      }
      while (v62 != v64);
    }
    v62 = *v60;
  }
  *v60 = v71;
  v60[1] = v63;
  v60[2] = v72;
  if (v62)
    operator delete(v62);
LABEL_87:
  v60[1] = v63;
  if (v84)
    std::__shared_weak_count::__release_weak(v84);
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);

}

void sub_19F5C673C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  void *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v27;

  if (a17)
  {
    std::__shared_weak_count::__release_weak(a17);
    v27 = a24;
    if (!a24)
    {
LABEL_3:
      if (!v25)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v27 = a24;
    if (!a24)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v27);
  if (!v25)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_4:
  std::__shared_weak_count::__release_weak(v25);
  goto LABEL_5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)0>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ReadyToStartAnimation>::remove();
}

uint64_t gdc::ComponentStorageWrapper<arComponents::ReadyToStartAnimation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v21, v22);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)std::__hash_table<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::__unordered_map_hasher<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::hash<gdc::EntityId>,std::equal_to<gdc::EntityId>,true>,std::__unordered_map_equal<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::equal_to<gdc::EntityId>,std::hash<gdc::EntityId>,true>,std::allocator<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>>>::__emplace_unique_key_args<gdc::EntityId,std::piecewise_construct_t const&,std::tuple<gdc::EntityId const&>,std::tuple<>>(v17, v18, v19);
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::__unordered_map_hasher<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::hash<gdc::EntityId>,std::equal_to<gdc::EntityId>,true>,std::__unordered_map_equal<gdc::EntityId,std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,std::equal_to<gdc::EntityId>,std::hash<gdc::EntityId>,true>,std::allocator<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>>>::__emplace_unique_key_args<gdc::EntityId,std::piecewise_construct_t const&,std::tuple<gdc::EntityId const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (unsigned __int16 *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (__PAIR64__(v10[9], v10[8]) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)
                && *((_DWORD *)v10 + 5) == HIDWORD(a2))
              {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v10 = *(unsigned __int16 **)v10;
            if (!v10)
              goto LABEL_25;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (__PAIR64__(v10[9], v10[8]) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)
              && *((_DWORD *)v10 + 5) == HIDWORD(a2))
            {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(unsigned __int16 **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_25:
  v13 = a1 + 2;
  v10 = (unsigned __int16 *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 12) = 0u;
  *(_OWORD *)(v10 + 20) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_75;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_38:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_62;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_62:
      v7 = prime;
      goto LABEL_63;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_62;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_67;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_67:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_62;
    }
  }
  if (prime >= v7)
    goto LABEL_63;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  v7 = a1[1];
LABEL_63:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_75:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_83:
    *v37 = v10;
    goto LABEL_84;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_83;
  }
LABEL_84:
  ++a1[3];
  return v10;
}

void sub_19F5C6E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZZN2md16ARAnimationLogic16createAnimationsEvENK3__0clEN3gdc6EntityERN12arComponents17AnimationDurationERNS4_13AnimationInfoE_block_invoke(_QWORD *a1, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = a1[4];
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 16);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 120);
          if (v9)
          {
            v10 = a1[6];
            if (*(unsigned __int16 *)(v9 + 40) == (unsigned __int16)v10)
            {
              v11 = *(_QWORD *)(v9 + 48);
              if (HIDWORD(v10) < (unint64_t)((*(_QWORD *)(v9 + 56) - v11) >> 3))
              {
                v12 = (unsigned __int16 *)(v11 + 8 * HIDWORD(v10));
                if (*v12 == (unsigned __int16)v10 && v12[1] == WORD1(v10) && *((_DWORD *)v12 + 1) == HIDWORD(v10))
                {
                  v13 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationDuration>(v9);
                  v14 = v13[4];
                  if (v10 >> 39 < (v13[5] - v14) >> 3)
                  {
                    v15 = *(_QWORD *)(v14 + 8 * (v10 >> 39));
                    if (v15)
                    {
                      v16 = *(unsigned __int16 *)(v15 + 2 * (HIDWORD(v10) & 0x7F));
                      v18 = v13[7];
                      v17 = v13[8];
                      if (v16 < (v17 - v18) >> 3)
                      {
                        v19 = v18 + 8 * v16;
                        if (v19 != v17 && *(_DWORD *)(v19 + 4) == HIDWORD(v10))
                        {
                          v21 = v13[10];
                          if (v21)
                          {
                            if (v21 + 24 * v16 != v13[11])
                              *(float *)(v21 + 24 * v16 + 8) = a2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_19F5C6FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZZN2md16ARAnimationLogic16createAnimationsEvENK3__0clEN3gdc6EntityERN12arComponents17AnimationDurationERNS4_13AnimationInfoE_block_invoke_11(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[4];
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 16);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 120);
          if (v7)
          {
            v8 = a1[6];
            if (*(unsigned __int16 *)(v7 + 40) == (unsigned __int16)v8)
            {
              v9 = *(_QWORD *)(v7 + 48);
              if (HIDWORD(v8) < (unint64_t)((*(_QWORD *)(v7 + 56) - v9) >> 3))
              {
                v10 = (unsigned __int16 *)(v9 + 8 * HIDWORD(v8));
                if (*v10 == (unsigned __int16)v8 && v10[1] == WORD1(v8) && *((_DWORD *)v10 + 1) == HIDWORD(v8))
                {
                  v11 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v7);
                  gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(v11, v8);
                  v12 = (uint64_t *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(*(_QWORD *)(v6 + 120));
                  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v12, v8);
                }
              }
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19F5C70D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,VKTimedAnimation * {__strong}>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v3) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F5C73CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_32c73_ZTSNSt3__18weak_ptrIN2md16ARAnimationLogic25ARAnimationLogicWeakProxyEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c73_ZTSNSt3__18weak_ptrIN2md16ARAnimationLogic25ARAnimationLogicWeakProxyEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  id *v3;
  id *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (id *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (id *)*v3;

          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::ARAnimationLogic::ARAnimationLogicWeakProxy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARAnimationLogic::ARAnimationLogicWeakProxy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ARAnimationLogic::ARAnimationLogicWeakProxy>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void gdc::ComponentStorageWrapper<arComponents::ReadyToStartAnimation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ReadyToStartAnimation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::TimeBasedStart>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TimeBasedStart>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::TimeBasedStart>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TimeBasedStart>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)0>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)0>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v26 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 16);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 24);
  *(_DWORD *)(v14 + 8) = v16;
  v17 = MEMORY[0x1A1AF5730](*(_QWORD *)(v15 - 8));
  v18 = *(void **)(v14 + 16);
  *(_QWORD *)(v14 + 16) = v17;

  v19 = a1[11];
  v20 = v19 - 24;

  a1[11] = v20;
  v21 = (_QWORD *)a1[28];
  if (!v21)
    return 1;
  v22 = a1[31];
  while (1)
  {
    v28[0] = &v26;
    v28[1] = 1;
    v27 = v22;
    v23 = v21[6];
    if (!v23)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v23 + 48))(v23, &v27, v28);
    v21 = (_QWORD *)*v21;
    if (!v21)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::contains(v24, v25);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;

        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    v8 = (_QWORD *)a1[5];
    v9 = (void *)a1[4];
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          MEMORY[0x1A1AF4E00](v10, 0x1000C40104B78CFLL);
      }
      while (v8 != v7);
      v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationDependencyOn>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationDependencyOn>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationDependencyOn>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationDependencyOn>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationGroupProgress>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupProgress>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationGroupProgress>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupProgress>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationGroupAssociation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupAssociation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationGroupAssociation>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupAssociation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::AnimationGroupProgress>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCE983FFC149A5AACLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCE983FFC149A5AACLL;
      if (*(_QWORD *)&v3 <= 0xCE983FFC149A5AACLL)
        v5 = 0xCE983FFC149A5AACLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCE983FFC149A5AACLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCE983FFC149A5AACLL)
            {
              if (v7[2] == 0xCE983FFC149A5AACLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCE983FFC149A5AACLL)
          {
            if (v7[2] == 0xCE983FFC149A5AACLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AnimationGroupProgress]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B21A8;
  *(_QWORD *)(v11 + 8) = 0xCE983FFC149A5AACLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCE983FFC149A5AACLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCE983FFC149A5AACLL;
  v15[1] = "arComponents::AnimationGroupProgress]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCE983FFC149A5AACLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5C8204(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v36 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v36);
  if ((v6 & 1) != 0)
  {
    v15 = a1[11];
    v14 = a1[12];
    if (v15 >= v14)
    {
      v18 = a1[10];
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v18) >> 3);
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_35;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v18) >> 3);
      v21 = 2 * v20;
      if (2 * v20 <= v19 + 1)
        v21 = v19 + 1;
      if (v20 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v23 = (char *)operator new(24 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[24 * v19];
      v25 = &v23[24 * v22];
      *(_QWORD *)v24 = *a3;
      *((_DWORD *)v24 + 2) = *((_DWORD *)a3 + 2);
      *((_QWORD *)v24 + 2) = MEMORY[0x1A1AF5730](a3[2]);
      v17 = (uint64_t)(v24 + 24);
      v26 = a1[10];
      v27 = a1[11];
      if (v27 == v26)
      {
        a1[10] = (uint64_t)v24;
        a1[11] = v17;
        a1[12] = (uint64_t)v25;
        if (!v27)
          goto LABEL_26;
      }
      else
      {
        do
        {
          v28 = *(_QWORD *)(v27 - 24);
          v27 -= 24;
          v29 = *(_DWORD *)(v27 + 8);
          *((_QWORD *)v24 - 3) = v28;
          v24 -= 24;
          *((_DWORD *)v24 + 2) = v29;
          v30 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          *((_QWORD *)v24 + 2) = v30;
        }
        while (v27 != v26);
        v27 = a1[10];
        v31 = a1[11];
        a1[10] = (uint64_t)v24;
        a1[11] = v17;
        a1[12] = (uint64_t)v25;
        if (v31 != v27)
        {
          do
          {
            v32 = v31 - 24;

            v31 = v32;
          }
          while (v32 != v27);
        }
        if (!v27)
          goto LABEL_26;
      }
      operator delete((void *)v27);
    }
    else
    {
      v16 = *a3;
      *(_DWORD *)(v15 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v15 = v16;
      *(_QWORD *)(v15 + 16) = MEMORY[0x1A1AF5730](a3[2]);
      v17 = v15 + 24;
    }
LABEL_26:
    a1[11] = v17;
    goto LABEL_27;
  }
  v7 = a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3);
  v8 = *a3;
  *(_DWORD *)(v7 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v7 = v8;
  v9 = a3[2];
  a3[2] = 0;
  v10 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v9;

  if (v7 != a1[11])
  {
    v11 = (_QWORD *)a1[16];
    if (v11)
    {
      v12 = a1[31];
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v12;
        v13 = v11[6];
        if (!v13)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v13 + 48))(v13, &v37, &v38);
        v11 = (_QWORD *)*v11;
        if (!v11)
          return;
      }
LABEL_34:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
      abort();
    }
    return;
  }
LABEL_27:
  v33 = (_QWORD *)a1[22];
  if (v33)
  {
    v34 = a1[31];
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v34;
      v35 = v33[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v33 = (_QWORD *)*v33;
      if (!v33)
        return;
    }
    goto LABEL_34;
  }
}

void gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void stopAndReleaseAnimation(unint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v7;
  uint64_t *v8;
  size_t prime;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  id *v31;
  id *v32;
  void *v33;
  void *v34;
  BOOL v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  void *__p[2];
  __int128 v40;
  float v41;
  int v42;
  _QWORD *v43;
  __int128 *v44;
  char v45;

  v42 = a2;
  v7 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(a3, a1);
  if (!v7)
    return;
  v8 = v7;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  v41 = *((float *)v7 + 14);
  prime = v7[4];
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(v7[4]);
      v34 = __p[1];
      v35 = (void *)prime >= __p[1];
      if ((void *)prime > __p[1])
        goto LABEL_4;
    }
    else
    {
      v34 = 0;
      v35 = 1;
      if (prime)
        goto LABEL_4;
    }
    if (v35)
      goto LABEL_5;
    v36 = vcvtps_u32_f32((float)*((unint64_t *)&v40 + 1) / v41);
    if ((unint64_t)v34 < 3
      || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      v36 = std::__next_prime(v36);
    }
    else
    {
      v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2)
        v36 = v38;
    }
    if (prime <= v36)
      prime = v36;
    if (prime >= (unint64_t)v34)
      goto LABEL_5;
    goto LABEL_4;
  }
  prime = 2;
LABEL_4:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)__p, prime);
LABEL_5:
  for (i = v8[5]; i; i = *(_QWORD *)i)
  {
    v11 = *(int *)(i + 16);
    v12 = (unint64_t)__p[1];
    if (__p[1])
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v4 = *(int *)(i + 16);
        if (__p[1] <= (void *)v11)
          v4 = v11 % (unint64_t)__p[1];
      }
      else
      {
        v4 = ((unint64_t)__p[1] - 1) & v11;
      }
      v14 = (uint64_t **)*((_QWORD *)__p[0] + v4);
      if (v14)
      {
        v15 = *v14;
        if (v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            while (1)
            {
              v17 = v15[1];
              if (v17 == v11)
              {
                if (*((_DWORD *)v15 + 4) == (_DWORD)v11)
                  goto LABEL_64;
              }
              else if ((v17 & ((unint64_t)__p[1] - 1)) != v4)
              {
                goto LABEL_26;
              }
              v15 = (uint64_t *)*v15;
              if (!v15)
                goto LABEL_26;
            }
          }
          do
          {
            v16 = v15[1];
            if (v16 == v11)
            {
              if (*((_DWORD *)v15 + 4) == (_DWORD)v11)
                goto LABEL_64;
            }
            else
            {
              if ((void *)v16 >= __p[1])
                v16 %= (unint64_t)__p[1];
              if (v16 != v4)
                break;
            }
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_26:
    v18 = operator new(0x20uLL);
    v43 = v18;
    v44 = &v40;
    *v18 = 0;
    v18[1] = v11;
    *((_DWORD *)v18 + 4) = *(_DWORD *)(i + 16);
    v18[3] = *(id *)(i + 24);
    v45 = 1;
    v19 = (float)(unint64_t)(*((_QWORD *)&v40 + 1) + 1);
    if (!v12 || (float)(v41 * (float)v12) < v19)
    {
      v20 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3)
        v20 = 1;
      v21 = v20 | (2 * v12);
      v22 = vcvtps_u32_f32(v19 / v41);
      if (v21 <= v22)
        v23 = v22;
      else
        v23 = v21;
      if (v23 == 1)
      {
        v23 = 2;
      }
      else if ((v23 & (v23 - 1)) != 0)
      {
        v23 = std::__next_prime(v23);
      }
      v24 = __p[1];
      if ((void *)v23 > __p[1])
        goto LABEL_38;
      if ((void *)v23 < __p[1])
      {
        v25 = vcvtps_u32_f32((float)*((unint64_t *)&v40 + 1) / v41);
        if (__p[1] < (void *)3
          || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
        {
          v25 = std::__next_prime(v25);
        }
        else
        {
          v27 = 1 << -(char)__clz(v25 - 1);
          if (v25 >= 2)
            v25 = v27;
        }
        if (v23 <= v25)
          v23 = v25;
        if (v23 < (unint64_t)v24)
LABEL_38:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)__p, v23);
      }
      v12 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v11)
          v4 = v11 % (unint64_t)__p[1];
        else
          v4 = v11;
      }
      else
      {
        v4 = ((unint64_t)__p[1] - 1) & v11;
      }
    }
    v28 = __p[0];
    v29 = (_QWORD *)*((_QWORD *)__p[0] + v4);
    if (v29)
    {
      *v18 = *v29;
    }
    else
    {
      *v18 = v40;
      *(_QWORD *)&v40 = v18;
      v28[v4] = &v40;
      if (!*v18)
        goto LABEL_63;
      v30 = *(_QWORD *)(*v18 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v30 >= v12)
          v30 %= v12;
      }
      else
      {
        v30 &= v12 - 1;
      }
      v29 = (char *)__p[0] + 8 * v30;
    }
    *v29 = v18;
LABEL_63:
    ++*((_QWORD *)&v40 + 1);
LABEL_64:
    ;
  }
  objc_msgSend((id)std::__hash_table<std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,VKTimedAnimation * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,VKTimedAnimation * {__strong}>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__p, a2, &v42)[3], "stopAnimation:", a4);
  v31 = (id *)v40;
  if ((_QWORD)v40)
  {
    do
    {
      v32 = (id *)*v31;

      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  v33 = __p[0];
  __p[0] = 0;
  if (v33)
    operator delete(v33);
}

void sub_19F5C8944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<int,VKTimedAnimation * {__strong}>::~unordered_map[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F5C895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<int,VKTimedAnimation * {__strong}>::~unordered_map[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,VKTimedAnimation * {__strong}>::~unordered_map[abi:nn180100](uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x37F8C546A65FE3EELL;
    if (a3 <= 0x37F8C546A65FE3EELL)
      v4 = 0x37F8C546A65FE3EELL % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x37F8C546A65FE3EELL;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x37F8C546A65FE3EELL)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x37F8C546A65FE3EELL)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v12 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x1AF456233693CD46)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0xF409241CDA31AF08;
    if (a3 <= 0xF409241CDA31AF08)
      v18 = 0xF409241CDA31AF08 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0xF409241CDA31AF08;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0xF409241CDA31AF08)
      {
        if (v20[2] == 0xF409241CDA31AF08)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0xF409241CDA31AF08)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0xF409241CDA31AF08)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0xF409241CDA31AF08)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::ARAnimationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0F50;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARAnimationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0F50;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARAnimationContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::LabelStyle::LabelStyle(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4, char a5, uint64_t a6, char a7, float a8)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int16 v25;

  v10 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(float *)(a1 + 88) = a8;
  *(_BYTE *)(a1 + 92) = a4;
  *(_BYTE *)(a1 + 93) = a5;
  *(_QWORD *)(a1 + 94) = a6;
  *(_BYTE *)(a1 + 102) = a7;
  *(_QWORD *)(a1 + 104) = 0x3F800000437F0000;
  *(_QWORD *)(a1 + 112) = 0xFC00FC00FC00FC00;
  *(_WORD *)(a1 + 120) = 256;
  *(_DWORD *)(a1 + 122) = 0;
  *(_BYTE *)(a1 + 126) = 0;
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 136) = -1;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 377) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 359) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  v25 = 0;
  v16 = geo::linear_map<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::equal_to<md::LabelStyle::StyleQueryOptions>,std::allocator<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>,std::vector<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>::operator[]((unsigned __int8 **)(a1 + 64), (unsigned __int8 *)&v25);
  v18 = *a2;
  v17 = a2[1];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return a1;
}

void sub_19F5C91B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  uint64_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  v5 = (std::__shared_weak_count *)v1[56];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)v1[54];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)v1[52];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v1[50];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *v3;
  *v3 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v1[46];
  v1[46] = 0;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = (char *)v1[42];
    if (!v19)
    {
LABEL_25:
      v20 = (std::__shared_weak_count *)v1[41];
      if (!v20)
        goto LABEL_41;
      goto LABEL_37;
    }
  }
  else
  {
    v19 = (char *)v1[42];
    if (!v19)
      goto LABEL_25;
  }
  v21 = (char *)v1[43];
  v22 = v19;
  if (v21 != v19)
  {
    do
    {
      v23 = (uint64_t *)*((_QWORD *)v21 - 1);
      *((_QWORD *)v21 - 1) = 0;
      if (v23)
      {
        v24 = *v23;
        *v23 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        MEMORY[0x1A1AF4E00](v23, 0x1020C4034E03FFCLL);
      }
      v21 -= 16;
    }
    while (v21 != v19);
    v22 = (char *)v1[42];
  }
  v1[43] = v19;
  operator delete(v22);
  v20 = (std::__shared_weak_count *)v1[41];
  if (!v20)
  {
LABEL_41:
    v27 = (char *)*v2;
    if (*v2)
    {
      v28 = (char *)v1[9];
      v29 = *v2;
      if (v28 != v27)
      {
        do
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)v28 - 1);
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v28 -= 24;
        }
        while (v28 != v27);
        v29 = *v2;
      }
      v1[9] = v27;
      operator delete(v29);
    }
    v33 = (std::__shared_weak_count *)v1[7];
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)v1[5];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = (std::__shared_weak_count *)v1[3];
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)v1[1];
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    _Unwind_Resume(exception_object);
  }
LABEL_37:
  v25 = (unint64_t *)&v20->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  goto LABEL_41;
}

void md::LabelStyle::styleName(md::LabelStyle *this, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  unsigned __int8 v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  md::LabelStyle *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD v37[2];
  unsigned __int8 v38;

  v3 = *a2;
  if (*a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      v36 = v4;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    else
    {
      v36 = 0;
    }
    v37[0] = 0;
    v37[1] = 0;
    v35 = v3;
    v38 = 0;
    v9 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(v3, v37);
    v38 = v9;
    if (v4)
    {
      v10 = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v9 = v38;
    }
    if (!v9)
    {
      {
        v32 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *((_QWORD *)this + 3) = mdm::Allocator::instance(void)::alloc;
      *((_BYTE *)this + 23) = 0;
      *(_BYTE *)this = 0;
      goto LABEL_44;
    }
    v12 = *(_QWORD *)(v35 + 24);
    v13 = *(_QWORD *)(v12 + 16);
    v14 = *(std::__shared_weak_count **)(v12 + 24);
    v34 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    if (!v13)
    {
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *((_QWORD *)this + 3) = mdm::Allocator::instance(void)::alloc;
      *((_BYTE *)this + 23) = 0;
      *(_BYTE *)this = 0;
      if (!v14)
        goto LABEL_44;
      goto LABEL_40;
    }
    v17 = *(const char **)(v13 + 104);
    if (v17)
      v18 = v17;
    else
      v18 = "";
    {
      v31 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v31, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v20 = mdm::Allocator::instance(void)::alloc;
    *((_QWORD *)this + 3) = mdm::Allocator::instance(void)::alloc;
    v21 = strlen(v18);
    if (v21 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v22 = v21;
    if (v21 >= 0x17)
    {
      v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v25 = v21 | 7;
      v26 = v25 + 1;
      v27 = (md::LabelStyle *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v25 + 1, 1);
      *((_QWORD *)this + 1) = v22;
      *((_QWORD *)this + 2) = v26 | 0x8000000000000000;
      *(_QWORD *)this = v27;
      this = v27;
    }
    else
    {
      *((_BYTE *)this + 23) = v21;
      if (!v21)
      {
LABEL_39:
        *((_BYTE *)this + v22) = 0;
        v14 = v34;
        if (!v34)
        {
LABEL_44:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v35);
          return;
        }
LABEL_40:
        v28 = (unint64_t *)&v14->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_44;
      }
    }
    memmove(this, v18, v22);
    goto LABEL_39;
  }
  {
    v30 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v30, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 3) = mdm::Allocator::instance(void)::alloc;
  *((_BYTE *)this + 23) = 21;
  strcpy((char *)this, "<<NO STYLE RESOLVED>>");
}

void sub_19F5C98D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F5C98F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v16 = a15;
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = a13;
  if (a13)
  {
    v20 = (unint64_t *)&a13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_3,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_3>,BOOL ()(unsigned char)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_3,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_3>,BOOL ()(unsigned char)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8828;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_2,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_2>,BOOL ()(unsigned char)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_2,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_2>,BOOL ()(unsigned char)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C87E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_1,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_1>,BOOL ()(unsigned char)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_1,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_1>,BOOL ()(unsigned char)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8798;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_0,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_0>,BOOL ()(unsigned char)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyle::updateZoomInvariantStyles(void)::$_0,std::allocator<md::LabelStyle::updateZoomInvariantStyles(void)::$_0>,BOOL ()(unsigned char)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8750;
  result[1] = v3;
  return result;
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  int hasValueForKeyAtZAtEnd;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  float v83;
  int v84;
  float v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  char v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  float v98;
  size_t size;
  std::string *p_p;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  geo::read_write_lock *v108;
  const char *v109;
  malloc_zone_t *zone;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  _QWORD v113[2];
  unsigned __int8 v114;
  __int16 v115;
  char v116;
  std::string __p;
  unsigned __int8 v118;
  unsigned __int8 v119;

  v115 = 0;
  v116 = 1;
  v2 = *(_QWORD *)(a1 + 336);
  v3 = *(_QWORD *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = !*(_BYTE *)v2 && *(_BYTE *)(v2 + 1) == 0;
      if (v4 && *(_BYTE *)(v2 + 2) == 1)
        break;
      v2 += 16;
      if (v2 == v3)
        goto LABEL_13;
    }
  }
  if (v2 != v3)
  {
    v6 = *(uint64_t **)(v2 + 8);
    goto LABEL_24;
  }
LABEL_13:
  v7 = (uint64_t *)operator new();
  *v7 = 0;
  v7[1] = 0;
  v111 = v7;
  v8 = operator new();
  *(_QWORD *)v8 = off_1E4297388;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  {
    v107 = operator new();
    *(_QWORD *)(v107 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v107 + 24) = "VectorKitLabels";
    *(_OWORD *)(v107 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v107 = &off_1E42B5668;
    *(_QWORD *)(v107 + 8) = "VectorKitLabels";
    *(_OWORD *)(v107 + 72) = 0u;
    *(_OWORD *)(v107 + 88) = 0u;
    *(_OWORD *)(v107 + 104) = 0u;
    *(_OWORD *)(v107 + 120) = 0u;
    *(_OWORD *)(v107 + 136) = 0u;
    *(_OWORD *)(v107 + 152) = 0u;
    *(_OWORD *)(v107 + 168) = 0u;
    *(_OWORD *)(v107 + 184) = 0u;
    *(_OWORD *)(v107 + 200) = 0u;
    *(_OWORD *)(v107 + 216) = 0u;
    *(_OWORD *)(v107 + 232) = 0u;
    *(_QWORD *)(v107 + 248) = 0;
    *(_OWORD *)(v107 + 56) = 0u;
    v108 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v107 + 56), 0);
    if ((_DWORD)v108)
      geo::read_write_lock::logFailure(v108, (uint64_t)"initialization", v109);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v107 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v107 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v107;
  }
  *(_QWORD *)(v8 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  if (*(char *)(v8 + 95) < 0)
  {
    **(_BYTE **)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 0;
    v10 = *(char *)(v8 + 95);
    *(_BYTE *)(v8 + 56) = 1;
    *(_OWORD *)(v8 + 24) = xmmword_19FFB3BC0;
    *(_DWORD *)(v8 + 40) = 1097859072;
    *(_DWORD *)(v8 + 8) = 2;
    *(_BYTE *)(v8 + 60) = 1;
    *(_QWORD *)(v8 + 48) = 1101004800;
    if (v10 < 0)
    {
      **(_BYTE **)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      goto LABEL_18;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 72) = 0;
    *(_BYTE *)(v8 + 95) = 0;
    *(_BYTE *)(v8 + 56) = 1;
    *(_OWORD *)(v8 + 24) = xmmword_19FFB3BC0;
    *(_DWORD *)(v8 + 40) = 1097859072;
    *(_DWORD *)(v8 + 8) = 2;
    *(_BYTE *)(v8 + 60) = 1;
    *(_QWORD *)(v8 + 48) = 1101004800;
  }
  *(_BYTE *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 95) = 0;
LABEL_18:
  v11 = *v7;
  *v7 = v8;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v6 = (uint64_t *)*((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)(a1 + 336), &v115, &v111)+ 1);
  v12 = v111;
  if (v111)
  {
    v13 = *v111;
    *v111 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    MEMORY[0x1A1AF4E00](v12, 0x1020C4034E03FFCLL);
  }
LABEL_24:
  if (!*((_BYTE *)v6 + 12))
  {
    v15 = *v6;
    *((_BYTE *)v6 + 12) = 1;
    if (*(_QWORD *)a1)
    {
      v16 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 0, 0);
      v17 = *(uint64_t **)v16;
      if (*(_QWORD *)v16)
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 1);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v16;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          v112 = v18;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          v112 = 0;
        }
        v113[0] = 0;
        v113[1] = 0;
        v111 = v17;
        v114 = 0;
        v22 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v17 + 48))(v17, v113);
        v114 = v22;
        if (v18)
        {
          v23 = (unint64_t *)&v18->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          v22 = v114;
        }
        if (!v22)
        {
LABEL_174:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v111);
          return v6;
        }
        v25 = *(_QWORD *)(a1 + 16);
        v26 = *(float *)(a1 + 88);
        v27 = *(unsigned __int8 *)(a1 + 93);
        if ((int)*(float *)(a1 + 104) >= 0x17)
          v28 = 23;
        else
          v28 = (int)*(float *)(a1 + 104);
        *(_OWORD *)(v15 + 8) = 0u;
        *(_OWORD *)(v15 + 52) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 40) = 0u;
        if (*(char *)(v15 + 95) < 0)
        {
          **(_BYTE **)(v15 + 72) = 0;
          *(_QWORD *)(v15 + 80) = 0;
        }
        else
        {
          *(_BYTE *)(v15 + 72) = 0;
          *(_BYTE *)(v15 + 95) = 0;
        }
        v29 = v111[3];
        v30 = *(unsigned __int8 *)(v29 + 12);
        if (v30 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          v119 = 1;
          v31 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v29, 0x78u, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v29, 0x78u, 1u, &v119);
          v32 = *v31;
        }
        else
        {
          v32 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v111[3], 0x78u, v30, 0);
        }
        *(_DWORD *)(v15 + 16) = v32;
        v33 = v111[3];
        v34 = *(unsigned __int8 *)(v33 + 12);
        if (v34 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          v119 = 1;
          v35 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v33, 0x79u, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v33, 0x79u, 1u, &v119);
          v36 = *v35;
        }
        else
        {
          v36 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v111[3], 0x79u, v34, 0);
        }
        *(_DWORD *)(v15 + 20) = v36;
        v37 = v111[3];
        v38 = *(unsigned __int8 *)(v37 + 12);
        if (v38 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          v119 = 1;
          v39 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v37, 0x85u, v28, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v37, 0x85u, v28, 1u, &v119);
        }
        else
        {
          v39 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v111[3], 0x85u, v28, v38, 0);
        }
        v40 = (char)v39;
        if ((char)v39 <= -3)
          v40 = -3;
        if (v40 >= 7)
          LOBYTE(v40) = 7;
        if ((v39 - 8) >= 0xF5u)
          LOBYTE(v40) = v39;
        *(_BYTE *)(v15 + 63) = v40;
        v41 = v111[3];
        v42 = *(unsigned __int8 *)(v41 + 12);
        if (v42 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          v119 = 1;
          v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v41, 0x5Bu, v28, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v41, 0x5Bu, v28, 1, &v119);
        }
        else
        {
          v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v111[3], 0x5Bu, v28, v42, 0);
        }
        *(_BYTE *)(v15 + 56) = v43;
        v44 = *(_BYTE *)(a1 + 241);
        if (v44)
          v44 = v28 >= *(float *)(v15 + 16);
        *(_BYTE *)(v15 + 60) = v44;
        v45 = v111[3];
        v46 = *(unsigned __int8 *)(v45 + 12);
        if (v46 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          v119 = 1;
          v47 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v45, 0x1CCu, v28, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v45, 0x1CCu, v28, 1, &v119);
          if (v47)
          {
LABEL_71:
            v48 = v28 >= *(float *)(v15 + 16);
            goto LABEL_74;
          }
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v111[3], 0x1CCu, v28, v46, 0))
        {
          goto LABEL_71;
        }
        v48 = 0;
LABEL_74:
        *(_BYTE *)(v15 + 59) = v48;
        v49 = v111[3];
        v50 = *(unsigned __int8 *)(v49 + 12);
        if (v50 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          v119 = 1;
          v51 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v49, 0x80u, v28, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v49, 0x80u, v28, 1, &v119);
          if (v51)
          {
LABEL_76:
            v52 = v28 >= *(float *)(v15 + 20);
LABEL_79:
            *(_BYTE *)(v15 + 58) = v52;
            v53 = v111[3];
            v54 = *(unsigned __int8 *)(v53 + 12);
            if (v54 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v119 = 1;
              v55 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v53, 0x81u, v28, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v53, 0x81u, v28, 1, &v119);
            }
            else
            {
              v55 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v111[3], 0x81u, v28, v54, 0);
            }
            *(_BYTE *)(v15 + 57) = v55;
            switch(v27)
            {
              case 0u:
                v56 = v111[3];
                v57 = *(unsigned __int8 *)(v56 + 12);
                if (v57 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x15u, v28, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x15u, v28, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    v119 = 1;
                    v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0x15u, v28, 0, &__p);
                    v59 = v56;
                    v60 = 21;
                    goto LABEL_121;
                  }
                  goto LABEL_119;
                }
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x15u, v28, *(unsigned __int8 *)(v56 + 12)))goto LABEL_122;
                v63 = v56;
                v64 = 21;
                goto LABEL_124;
              case 1u:
                v56 = v111[3];
                v57 = *(unsigned __int8 *)(v56 + 12);
                if (v57 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x16u, v28, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x16u, v28, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    v119 = 1;
                    v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0x16u, v28, 0, &__p);
                    v59 = v56;
                    v60 = 22;
                    goto LABEL_121;
                  }
                  goto LABEL_119;
                }
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x16u, v28, *(unsigned __int8 *)(v56 + 12)))goto LABEL_122;
                v63 = v56;
                v64 = 22;
                goto LABEL_124;
              case 2u:
                v56 = v111[3];
                v57 = *(unsigned __int8 *)(v56 + 12);
                if (v57 != 2)
                {
                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x17u, v28, *(unsigned __int8 *)(v56 + 12)))goto LABEL_122;
                  goto LABEL_123;
                }
                if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x17u, v28, 0) & 1) != 0
                  || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x17u, v28, 1u) & 1) != 0)
                {
                  goto LABEL_118;
                }
                goto LABEL_119;
              case 3u:
                v56 = v111[3];
                v57 = *(unsigned __int8 *)(v56 + 12);
                if (v57 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x20u, v28, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x20u, v28, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    v119 = 1;
                    v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0x20u, v28, 0, &__p);
                    v59 = v56;
                    v60 = 32;
                    goto LABEL_121;
                  }
                  goto LABEL_114;
                }
                hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x20u, v28, *(unsigned __int8 *)(v56 + 12));
                v62 = v57;
                if (!hasValueForKeyAtZAtEnd)
                  goto LABEL_116;
                v63 = v56;
                v64 = 32;
                goto LABEL_124;
              case 4u:
              case 5u:
                v56 = v111[3];
                v57 = *(unsigned __int8 *)(v56 + 12);
                if (v57 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x27u, v28, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x27u, v28, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    v119 = 1;
                    v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0x27u, v28, 0, &__p);
                    v59 = v56;
                    v60 = 39;
LABEL_121:
                    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, v60, v28, 1u, &v119);
                    goto LABEL_125;
                  }
LABEL_114:
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x17u, v28, 0) & 1) != 0)
                    goto LABEL_117;
                  v62 = 1;
                }
                else
                {
                  v61 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x27u, v28, *(unsigned __int8 *)(v56 + 12));
                  v62 = v57;
                  if (v61)
                  {
                    v63 = v56;
                    v64 = 39;
                    goto LABEL_124;
                  }
                }
LABEL_116:
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v56, 0x17u, v28, v62))
                {
LABEL_119:
                  if (v57 == 2)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    v119 = 1;
                    v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0x7Au, v28, 0, &__p);
                    v59 = v56;
                    v60 = 122;
                    goto LABEL_121;
                  }
LABEL_122:
                  v63 = v56;
                  v64 = 122;
                  goto LABEL_124;
                }
LABEL_117:
                if (v57 == 2)
                {
LABEL_118:
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0x17u, v28, 0, &__p);
                  v59 = v56;
                  v60 = 23;
                  goto LABEL_121;
                }
LABEL_123:
                v63 = v56;
                v64 = 23;
LABEL_124:
                v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v63, v64, v28, v57, 0);
LABEL_125:
                *(_DWORD *)(v15 + 24) = v58;
                v66 = v111[3];
                v67 = *(unsigned __int8 *)(v66 + 12);
                if (v67 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x83u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x83u, v28, 1u, &v119);
                }
                else
                {
                  v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0x83u, v28, v67, 0);
                }
                *(_DWORD *)(v15 + 28) = v68;
                v69 = v111[3];
                v70 = *(unsigned __int8 *)(v69 + 12);
                if (v70 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v71 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v69, 0xE2u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v69, 0xE2u, v28, 1u, &v119);
                }
                else
                {
                  v71 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0xE2u, v28, v70, 0);
                }
                *(_DWORD *)(v15 + 32) = v71;
                v72 = v111[3];
                v73 = *(unsigned __int8 *)(v72 + 12);
                if (v73 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0xE3u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0xE3u, v28, 1u, &v119);
                }
                else
                {
                  v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0xE3u, v28, v73, 0);
                }
                *(_DWORD *)(v15 + 36) = v74;
                v75 = v111[3];
                v76 = *(unsigned __int8 *)(v75 + 12);
                if (v76 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0xE4u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0xE4u, v28, 1u, &v119);
                }
                else
                {
                  v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0xE4u, v28, v76, 0);
                }
                *(_DWORD *)(v15 + 40) = v77;
                v78 = v111[3];
                v79 = *(unsigned __int8 *)(v78 + 12);
                if (v79 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v78, 0x1B0u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v78, 0x1B0u, v28, 1u, &v119);
                }
                else
                {
                  v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0x1B0u, v28, v79, 0);
                }
                *(_DWORD *)(v15 + 52) = v80;
                v118 = 1;
                v81 = v111[3];
                v82 = *(unsigned __int8 *)(v81 + 12);
                if (v82 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v83 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0x1DCu, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0x1DCu, v28, 1u, &v119);
                  v84 = (__p.__r_.__value_.__s.__data_[0] | v119) != 0;
                }
                else
                {
                  v83 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0x1DCu, v28, v82, &v118);
                  v84 = v118;
                }
                v85 = -1.0;
                if (v84)
                  v85 = v83;
                *(float *)(v15 + 44) = v85;
                v86 = v111[3];
                v87 = *(unsigned __int8 *)(v86 + 12);
                if (v87 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v88 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v86, 0xE9u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v86, 0xE9u, v28, 1u, &v119);
                }
                else
                {
                  v88 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v111[3], 0xE9u, v28, v87, 0);
                }
                *(_BYTE *)(v15 + 61) = gss::MaskToLabelPosition((unsigned __int16)v88);
                v118 = 1;
                v89 = v111[3];
                v90 = *(unsigned __int8 *)(v89 + 12);
                if (v90 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v91 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v89, 0x1DDu, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v89, 0x1DDu, v28, 1u, &v119);
                  if (__p.__r_.__value_.__s.__data_[0] | v119)
                  {
LABEL_150:
                    v92 = gss::MaskToLabelPosition((unsigned __int16)v91);
                    goto LABEL_153;
                  }
                }
                else
                {
                  v91 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v111[3], 0x1DDu, v28, v90, &v118);
                  if (v118)
                    goto LABEL_150;
                }
                v92 = *(_BYTE *)(v15 + 61);
LABEL_153:
                *(_BYTE *)(v15 + 62) = v92;
                v93 = v111[3];
                v94 = *(unsigned __int8 *)(v93 + 12);
                if (v94 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v95 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v93, 0xDBu, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v93, 0xDBu, v28, 1u, &v119);
                }
                else
                {
                  v95 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v111[3], 0xDBu, v28, v94, 0);
                }
                *(_DWORD *)(v15 + 8) = v95;
                v96 = v111[3];
                v97 = *(unsigned __int8 *)(v96 + 12);
                if (v97 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v96, 0x82u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v96, 0x82u, v28, 1u, &v119);
                }
                else
                {
                  v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111[3], 0x82u, v28, v97, 0);
                }
                *(float *)(v15 + 48) = (float)(v26 * *(float *)(v25 + 20 * v27)) * (float)(1.3 * v98);
                gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__p, 0x71u, 1, v111[3], 0);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  size = __p.__r_.__value_.__l.__size_;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v15 + 72), p_p, size);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v101 = v111[3];
                v102 = *(unsigned __int8 *)(v101 + 12);
                if (v102 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v103 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x199u, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x199u, v28, 1u, &v119);
                }
                else
                {
                  v103 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v111[3], 0x199u, v28, v102, 0);
                }
                *(_DWORD *)(v15 + 12) = v103;
                v104 = v111[3];
                v105 = *(unsigned __int8 *)(v104 + 12);
                if (v105 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  v119 = 1;
                  v106 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v104, 0x19Bu, v28, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v104, 0x19Bu, v28, 1u, &v119);
                }
                else
                {
                  v106 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v111[3], 0x19Bu, v28, v105, 0);
                }
                *(_BYTE *)(v15 + 64) = v106;
                break;
              default:
                v56 = v111[3];
                v57 = *(unsigned __int8 *)(v56 + 12);
                goto LABEL_119;
            }
            goto LABEL_174;
          }
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v111[3], 0x80u, v28, v50, 0))
        {
          goto LABEL_76;
        }
        v52 = 0;
        goto LABEL_79;
      }
    }
  }
  return v6;
}

void sub_19F5CACC0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  va_list va;

  va_start(va, a7);
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  if (a3)
  {
    v10 = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F5CAD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>(unsigned __int8 **a1, __int16 *a2, uint64_t **a3)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  BOOL v8;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned __int8 *v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v27;
  unsigned __int8 v28;

  v27 = *a2;
  v28 = *((_BYTE *)a2 + 2);
  v4 = *a3;
  *a3 = 0;
  v5 = *a1;
  v6 = a1[1];
  v7 = *a1;
  if (*a1 != v6)
  {
    v7 = *a1;
    while (1)
    {
      v8 = v27 == *v7 && HIBYTE(v27) == v7[1];
      if (v8 && v28 == v7[2])
        break;
      v7 += 16;
      if (v7 == v6)
        goto LABEL_17;
    }
  }
  if (v7 == v6)
  {
LABEL_17:
    v11 = a1[2];
    if (v6 >= v11)
    {
      v13 = (v6 - v5) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        abort();
      v15 = v11 - v5;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = (char *)operator new(16 * v16);
      v18 = &v17[16 * v13];
      *(_WORD *)v18 = v27;
      v19 = (unsigned __int8 *)&v17[16 * v16];
      v18[2] = v28;
      *((_QWORD *)v18 + 1) = v4;
      v12 = (unsigned __int8 *)(v18 + 16);
      if (v5 == v6)
      {
        *a1 = (unsigned __int8 *)v18;
        a1[1] = v12;
        a1[2] = v19;
      }
      else
      {
        do
        {
          v20 = *((_WORD *)v6 - 8);
          v6 -= 16;
          v21 = v6[2];
          *((_WORD *)v18 - 8) = v20;
          v18 -= 16;
          v18[2] = v21;
          v22 = *((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v18 + 1) = v22;
        }
        while (v6 != v5);
        v5 = *a1;
        v23 = a1[1];
        *a1 = (unsigned __int8 *)v18;
        a1[1] = v12;
        a1[2] = v19;
        while (v23 != v5)
        {
          v24 = (uint64_t *)*((_QWORD *)v23 - 1);
          *((_QWORD *)v23 - 1) = 0;
          if (v24)
          {
            v25 = *v24;
            *v24 = 0;
            if (v25)
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            MEMORY[0x1A1AF4E00](v24, 0x1020C4034E03FFCLL);
          }
          v23 -= 16;
        }
      }
      if (v5)
        operator delete(v5);
    }
    else
    {
      v6[2] = v28;
      *(_WORD *)v6 = v27;
      *((_QWORD *)v6 + 1) = v4;
      v12 = v6 + 16;
    }
    a1[1] = v12;
    return v12 - 16;
  }
  else if (v4)
  {
    v10 = *v4;
    *v4 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    MEMORY[0x1A1AF4E00](v4, 0x1020C4034E03FFCLL);
  }
  return v7;
}

void sub_19F5CAF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1A1AF4E00](v2, 0x1020C4034E03FFCLL);
  }
  return a1;
}

uint64_t std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>::~pair(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1A1AF4E00](v2, 0x1020C4034E03FFCLL);
  }
  return a1;
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int16x8_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  size_t size;
  std::string *p_p;
  size_t v59;
  std::string *v60;
  size_t v61;
  std::string *v62;
  size_t v63;
  std::string *v64;
  size_t v65;
  std::string *v66;
  size_t v67;
  std::string *v68;
  uint64_t v69;
  unsigned int v70;
  float v71;
  uint64_t v72;
  unsigned int v73;
  float v74;
  int v75;
  float v76;
  uint64_t v77;
  unsigned int v78;
  float v79;
  int v80;
  float v81;
  uint64_t v82;
  unsigned int v83;
  float v84;
  int v85;
  float v86;
  uint64_t v87;
  unsigned int v88;
  float v89;
  int v90;
  float v91;
  uint64_t v92;
  unsigned int v93;
  float v94;
  int v95;
  float v96;
  uint64_t v97;
  unsigned int v98;
  float v99;
  uint64_t v100;
  unsigned int v101;
  float v102;
  uint64_t v103;
  unsigned int v104;
  float v105;
  uint64_t v106;
  unsigned int v107;
  float v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  geo::read_write_lock *v129;
  const char *v130;
  malloc_zone_t *zone;
  uint64_t v132;
  geo::read_write_lock *v133;
  const char *v134;
  malloc_zone_t *v135;
  uint64_t v136;
  geo::read_write_lock *v137;
  const char *v138;
  malloc_zone_t *v139;
  uint64_t v140;
  geo::read_write_lock *v141;
  const char *v142;
  malloc_zone_t *v143;
  uint64_t v144;
  geo::read_write_lock *v145;
  const char *v146;
  malloc_zone_t *v147;
  uint64_t v148;
  geo::read_write_lock *v149;
  const char *v150;
  malloc_zone_t *v151;
  uint64_t *v152;
  std::__shared_weak_count *v153;
  _QWORD v154[2];
  unsigned __int8 v155;
  __int16 v156;
  char v157;
  std::string __p;
  unsigned __int8 v159;
  unsigned __int8 v160;

  v156 = 0;
  v157 = 2;
  v2 = *(_QWORD *)(a1 + 336);
  v3 = *(_QWORD *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = !*(_BYTE *)v2 && *(_BYTE *)(v2 + 1) == 0;
      if (v4 && *(_BYTE *)(v2 + 2) == 2)
        break;
      v2 += 16;
      if (v2 == v3)
        goto LABEL_13;
    }
  }
  if (v2 != v3)
  {
    v6 = *(uint64_t **)(v2 + 8);
    goto LABEL_39;
  }
LABEL_13:
  v7 = (uint64_t *)operator new();
  *v7 = 0;
  v7[1] = 0;
  v152 = v7;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E42991B0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  {
    v128 = operator new();
    *(_QWORD *)(v128 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v128 + 24) = "VectorKitLabels";
    *(_OWORD *)(v128 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v128 = &off_1E42B5668;
    *(_QWORD *)(v128 + 8) = "VectorKitLabels";
    *(_OWORD *)(v128 + 72) = 0u;
    *(_OWORD *)(v128 + 88) = 0u;
    *(_OWORD *)(v128 + 104) = 0u;
    *(_OWORD *)(v128 + 120) = 0u;
    *(_OWORD *)(v128 + 136) = 0u;
    *(_OWORD *)(v128 + 152) = 0u;
    *(_OWORD *)(v128 + 168) = 0u;
    *(_OWORD *)(v128 + 184) = 0u;
    *(_OWORD *)(v128 + 200) = 0u;
    *(_OWORD *)(v128 + 216) = 0u;
    *(_OWORD *)(v128 + 232) = 0u;
    *(_QWORD *)(v128 + 248) = 0;
    *(_OWORD *)(v128 + 56) = 0u;
    v129 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v128 + 56), 0);
    if ((_DWORD)v129)
      geo::read_write_lock::logFailure(v129, (uint64_t)"initialization", v130);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v128 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v128 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v128;
  }
  *(_QWORD *)(v8 + 104) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  {
    v132 = operator new();
    *(_QWORD *)(v132 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v132 + 24) = "VectorKitLabels";
    *(_OWORD *)(v132 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v132 = &off_1E42B5668;
    *(_QWORD *)(v132 + 8) = "VectorKitLabels";
    *(_OWORD *)(v132 + 72) = 0u;
    *(_OWORD *)(v132 + 88) = 0u;
    *(_OWORD *)(v132 + 104) = 0u;
    *(_OWORD *)(v132 + 120) = 0u;
    *(_OWORD *)(v132 + 136) = 0u;
    *(_OWORD *)(v132 + 152) = 0u;
    *(_OWORD *)(v132 + 168) = 0u;
    *(_OWORD *)(v132 + 184) = 0u;
    *(_OWORD *)(v132 + 200) = 0u;
    *(_OWORD *)(v132 + 216) = 0u;
    *(_OWORD *)(v132 + 232) = 0u;
    *(_QWORD *)(v132 + 248) = 0;
    *(_OWORD *)(v132 + 56) = 0u;
    v133 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v132 + 56), 0);
    if ((_DWORD)v133)
      geo::read_write_lock::logFailure(v133, (uint64_t)"initialization", v134);
    v135 = malloc_create_zone(0, 0);
    *(_QWORD *)(v132 + 48) = v135;
    malloc_set_zone_name(v135, "VectorKitLabels");
    *(_QWORD *)(v132 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v132;
  }
  *(_QWORD *)(v8 + 136) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  {
    v136 = operator new();
    *(_QWORD *)(v136 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v136 + 24) = "VectorKitLabels";
    *(_OWORD *)(v136 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v136 = &off_1E42B5668;
    *(_QWORD *)(v136 + 8) = "VectorKitLabels";
    *(_OWORD *)(v136 + 72) = 0u;
    *(_OWORD *)(v136 + 88) = 0u;
    *(_OWORD *)(v136 + 104) = 0u;
    *(_OWORD *)(v136 + 120) = 0u;
    *(_OWORD *)(v136 + 136) = 0u;
    *(_OWORD *)(v136 + 152) = 0u;
    *(_OWORD *)(v136 + 168) = 0u;
    *(_OWORD *)(v136 + 184) = 0u;
    *(_OWORD *)(v136 + 200) = 0u;
    *(_OWORD *)(v136 + 216) = 0u;
    *(_OWORD *)(v136 + 232) = 0u;
    *(_QWORD *)(v136 + 248) = 0;
    *(_OWORD *)(v136 + 56) = 0u;
    v137 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v136 + 56), 0);
    if ((_DWORD)v137)
      geo::read_write_lock::logFailure(v137, (uint64_t)"initialization", v138);
    v139 = malloc_create_zone(0, 0);
    *(_QWORD *)(v136 + 48) = v139;
    malloc_set_zone_name(v139, "VectorKitLabels");
    *(_QWORD *)(v136 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v136;
  }
  *(_QWORD *)(v8 + 168) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 192) = 0;
  {
    v140 = operator new();
    *(_QWORD *)(v140 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v140 + 24) = "VectorKitLabels";
    *(_OWORD *)(v140 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v140 = &off_1E42B5668;
    *(_QWORD *)(v140 + 8) = "VectorKitLabels";
    *(_OWORD *)(v140 + 72) = 0u;
    *(_OWORD *)(v140 + 88) = 0u;
    *(_OWORD *)(v140 + 104) = 0u;
    *(_OWORD *)(v140 + 120) = 0u;
    *(_OWORD *)(v140 + 136) = 0u;
    *(_OWORD *)(v140 + 152) = 0u;
    *(_OWORD *)(v140 + 168) = 0u;
    *(_OWORD *)(v140 + 184) = 0u;
    *(_OWORD *)(v140 + 200) = 0u;
    *(_OWORD *)(v140 + 216) = 0u;
    *(_OWORD *)(v140 + 232) = 0u;
    *(_QWORD *)(v140 + 248) = 0;
    *(_OWORD *)(v140 + 56) = 0u;
    v141 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v140 + 56), 0);
    if ((_DWORD)v141)
      geo::read_write_lock::logFailure(v141, (uint64_t)"initialization", v142);
    v143 = malloc_create_zone(0, 0);
    *(_QWORD *)(v140 + 48) = v143;
    malloc_set_zone_name(v143, "VectorKitLabels");
    *(_QWORD *)(v140 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v140;
  }
  *(_QWORD *)(v8 + 200) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 224) = 0;
  {
    v144 = operator new();
    *(_QWORD *)(v144 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v144 + 24) = "VectorKitLabels";
    *(_OWORD *)(v144 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v144 = &off_1E42B5668;
    *(_QWORD *)(v144 + 8) = "VectorKitLabels";
    *(_OWORD *)(v144 + 72) = 0u;
    *(_OWORD *)(v144 + 88) = 0u;
    *(_OWORD *)(v144 + 104) = 0u;
    *(_OWORD *)(v144 + 120) = 0u;
    *(_OWORD *)(v144 + 136) = 0u;
    *(_OWORD *)(v144 + 152) = 0u;
    *(_OWORD *)(v144 + 168) = 0u;
    *(_OWORD *)(v144 + 184) = 0u;
    *(_OWORD *)(v144 + 200) = 0u;
    *(_OWORD *)(v144 + 216) = 0u;
    *(_OWORD *)(v144 + 232) = 0u;
    *(_QWORD *)(v144 + 248) = 0;
    *(_OWORD *)(v144 + 56) = 0u;
    v145 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v144 + 56), 0);
    if ((_DWORD)v145)
      geo::read_write_lock::logFailure(v145, (uint64_t)"initialization", v146);
    v147 = malloc_create_zone(0, 0);
    *(_QWORD *)(v144 + 48) = v147;
    malloc_set_zone_name(v147, "VectorKitLabels");
    *(_QWORD *)(v144 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v144;
  }
  *(_QWORD *)(v8 + 232) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_QWORD *)(v8 + 256) = 0;
  {
    v148 = operator new();
    *(_QWORD *)(v148 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v148 + 24) = "VectorKitLabels";
    *(_OWORD *)(v148 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v148 = &off_1E42B5668;
    *(_QWORD *)(v148 + 8) = "VectorKitLabels";
    *(_OWORD *)(v148 + 72) = 0u;
    *(_OWORD *)(v148 + 88) = 0u;
    *(_OWORD *)(v148 + 104) = 0u;
    *(_OWORD *)(v148 + 120) = 0u;
    *(_OWORD *)(v148 + 136) = 0u;
    *(_OWORD *)(v148 + 152) = 0u;
    *(_OWORD *)(v148 + 168) = 0u;
    *(_OWORD *)(v148 + 184) = 0u;
    *(_OWORD *)(v148 + 200) = 0u;
    *(_OWORD *)(v148 + 216) = 0u;
    *(_OWORD *)(v148 + 232) = 0u;
    *(_QWORD *)(v148 + 248) = 0;
    *(_OWORD *)(v148 + 56) = 0u;
    v149 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v148 + 56), 0);
    if ((_DWORD)v149)
      geo::read_write_lock::logFailure(v149, (uint64_t)"initialization", v150);
    v151 = malloc_create_zone(0, 0);
    *(_QWORD *)(v148 + 48) = v151;
    malloc_set_zone_name(v151, "VectorKitLabels");
    *(_QWORD *)(v148 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v148;
  }
  *(_QWORD *)(v8 + 264) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_DWORD *)(v8 + 72) = 0;
  if (*(char *)(v8 + 103) < 0)
  {
    **(_BYTE **)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 88) = 0;
    if ((*(char *)(v8 + 135) & 0x80000000) == 0)
    {
LABEL_21:
      *(_BYTE *)(v8 + 112) = 0;
      *(_BYTE *)(v8 + 135) = 0;
      if ((*(char *)(v8 + 167) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_27;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 80) = 0;
    *(_BYTE *)(v8 + 103) = 0;
    if ((*(char *)(v8 + 135) & 0x80000000) == 0)
      goto LABEL_21;
  }
  **(_BYTE **)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  if ((*(char *)(v8 + 167) & 0x80000000) == 0)
  {
LABEL_22:
    *(_BYTE *)(v8 + 144) = 0;
    *(_BYTE *)(v8 + 167) = 0;
    if ((*(char *)(v8 + 199) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_28:
    **(_BYTE **)(v8 + 176) = 0;
    *(_QWORD *)(v8 + 184) = 0;
    if ((*(char *)(v8 + 231) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_29:
    **(_BYTE **)(v8 + 208) = 0;
    *(_QWORD *)(v8 + 216) = 0;
    goto LABEL_30;
  }
LABEL_27:
  **(_BYTE **)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  if (*(char *)(v8 + 199) < 0)
    goto LABEL_28;
LABEL_23:
  *(_BYTE *)(v8 + 176) = 0;
  *(_BYTE *)(v8 + 199) = 0;
  if (*(char *)(v8 + 231) < 0)
    goto LABEL_29;
LABEL_24:
  *(_BYTE *)(v8 + 208) = 0;
  *(_BYTE *)(v8 + 231) = 0;
LABEL_30:
  if (*(char *)(v8 + 263) < 0)
  {
    **(_BYTE **)(v8 + 240) = 0;
    *(_QWORD *)(v8 + 248) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 240) = 0;
    *(_BYTE *)(v8 + 263) = 0;
  }
  *(_DWORD *)(v8 + 8) = 1065353216;
  *(_QWORD *)(v8 + 12) = 0x10000000CLL;
  *(_WORD *)(v8 + 72) = 257;
  v15 = *v7;
  *v7 = v8;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v6 = (uint64_t *)*((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)(a1 + 336), &v156, &v152)+ 1);
  v16 = v152;
  if (v152)
  {
    v17 = *v152;
    *v152 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    MEMORY[0x1A1AF4E00](v16, 0x1020C4034E03FFCLL);
  }
LABEL_39:
  if (!*((_BYTE *)v6 + 12))
  {
    v19 = *v6;
    *((_BYTE *)v6 + 12) = 1;
    if (*(_QWORD *)a1)
    {
      v20 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 0, 0);
      v21 = *(uint64_t **)v20;
      if (*(_QWORD *)v20)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v20;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
          v153 = v22;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        else
        {
          v153 = 0;
        }
        v154[0] = 0;
        v154[1] = 0;
        v152 = v21;
        v155 = 0;
        v26 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v21 + 48))(v21, v154);
        v155 = v26;
        if (v22)
        {
          v27 = (unint64_t *)&v22->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          v26 = v155;
        }
        if (!v26)
          goto LABEL_219;
        v29 = *(float *)(a1 + 88);
        v30 = (int)*(float *)(a1 + 104);
        *(_OWORD *)(v19 + 8) = 0u;
        if (v30 >= 0x17)
          v31 = 23;
        else
          v31 = v30;
        *(_DWORD *)(v19 + 72) = 0;
        *(_OWORD *)(v19 + 40) = 0uLL;
        *(_OWORD *)(v19 + 56) = 0uLL;
        *(_OWORD *)(v19 + 24) = 0uLL;
        if (*(char *)(v19 + 103) < 0)
        {
          **(_BYTE **)(v19 + 80) = 0;
          *(_QWORD *)(v19 + 88) = 0;
          if ((*(char *)(v19 + 135) & 0x80000000) == 0)
          {
LABEL_62:
            *(_BYTE *)(v19 + 112) = 0;
            *(_BYTE *)(v19 + 135) = 0;
            if ((*(char *)(v19 + 167) & 0x80000000) == 0)
              goto LABEL_63;
            goto LABEL_69;
          }
        }
        else
        {
          *(_BYTE *)(v19 + 80) = 0;
          *(_BYTE *)(v19 + 103) = 0;
          if ((*(char *)(v19 + 135) & 0x80000000) == 0)
            goto LABEL_62;
        }
        **(_BYTE **)(v19 + 112) = 0;
        *(_QWORD *)(v19 + 120) = 0;
        if ((*(char *)(v19 + 167) & 0x80000000) == 0)
        {
LABEL_63:
          *(_BYTE *)(v19 + 144) = 0;
          *(_BYTE *)(v19 + 167) = 0;
          if ((*(char *)(v19 + 199) & 0x80000000) == 0)
            goto LABEL_64;
          goto LABEL_70;
        }
LABEL_69:
        **(_BYTE **)(v19 + 144) = 0;
        *(_QWORD *)(v19 + 152) = 0;
        if ((*(char *)(v19 + 199) & 0x80000000) == 0)
        {
LABEL_64:
          *(_BYTE *)(v19 + 176) = 0;
          *(_BYTE *)(v19 + 199) = 0;
          if ((*(char *)(v19 + 231) & 0x80000000) == 0)
            goto LABEL_65;
          goto LABEL_71;
        }
LABEL_70:
        **(_BYTE **)(v19 + 176) = 0;
        *(_QWORD *)(v19 + 184) = 0;
        if ((*(char *)(v19 + 231) & 0x80000000) == 0)
        {
LABEL_65:
          *(_BYTE *)(v19 + 208) = 0;
          *(_BYTE *)(v19 + 231) = 0;
          if ((*(char *)(v19 + 263) & 0x80000000) == 0)
          {
LABEL_66:
            *(_BYTE *)(v19 + 240) = 0;
            *(_BYTE *)(v19 + 263) = 0;
LABEL_73:
            v32 = v152[3];
            v33 = *(unsigned __int8 *)(v32 + 12);
            if (v33 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v34 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v32, 0x7Cu, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v32, 0x7Cu, v31, 1, &v160);
            }
            else
            {
              v34 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v152[3], 0x7Cu, v31, v33, 0);
            }
            *(_BYTE *)(v19 + 71) = v34;
            if (v34)
              v35 = *(_BYTE *)(a1 + 142) == 0;
            else
              v35 = 1;
            v36 = v35;
            v159 = 1;
            v37 = v152[3];
            v38 = *(unsigned __int8 *)(v37 + 12);
            if (v38 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v39 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v37, 0xD7u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v37, 0xD7u, v31, 1, &v160);
              v40 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v39 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v152[3], 0xD7u, v31, v38, &v159);
              v40 = v159;
            }
            if (v40)
              v41 = v39 != 0;
            else
              v41 = v36;
            *(_BYTE *)(v19 + 72) = v41;
            v159 = 1;
            v42 = v152[3];
            v43 = *(unsigned __int8 *)(v42 + 12);
            if (v43 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v44 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v42, 0xD8u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v42, 0xD8u, v31, 1, &v160);
              v45 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v44 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v152[3], 0xD8u, v31, v43, &v159);
              v45 = v159;
            }
            if (v45)
              v46 = v44 != 0;
            else
              v46 = v36;
            *(_BYTE *)(v19 + 73) = v46;
            v47 = v152[3];
            v48 = *(unsigned __int8 *)(v47 + 12);
            if (v48 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v49 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v47, 0xCEu, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v47, 0xCEu, v31, 1, &v160);
            }
            else
            {
              v49 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v152[3], 0xCEu, v31, v48, 0);
            }
            *(_BYTE *)(v19 + 70) = v49;
            v50 = v152[3];
            v51 = *(unsigned __int8 *)(v50 + 12);
            if (v51 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v52 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v50, 0x9Fu, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v50, 0x9Fu, v31, 1u, &v160);
            }
            else
            {
              v52 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v152[3], 0x9Fu, v31, v51, 0);
            }
            *(_DWORD *)(v19 + 60) = v52;
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&__p, v152[3], 0x11Eu, 1u, fminf((float)v31, 23.0));
            v53 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x3B7F00FFu)));
            *(int16x4_t *)v53.i8 = vmovn_s32((int32x4_t)v53);
            *(_DWORD *)(v19 + 65) = vmovn_s16(v53).u32[0];
            v54 = v152[3];
            v55 = *(unsigned __int8 *)(v54 + 12);
            if (v55 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x17Au, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x17Au, v31, 1u, &v160);
            }
            else
            {
              v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v152[3], 0x17Au, v31, v55, 0);
            }
            *(_BYTE *)(v19 + 69) = v56;
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, v152[3], 0x71u, v31, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v19 + 80), p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, v152[3], 0x16Eu, v31, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v59 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v60 = &__p;
            else
              v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v19 + 112), v60, v59);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, v152[3], 0x181u, v31, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v61 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v62 = &__p;
            else
              v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v19 + 144), v62, v61);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, v152[3], 0xBCu, v31, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v63 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &__p;
            else
              v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v19 + 240), v64, v63);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, v152[3], 0xB8u, v31, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v65 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &__p;
            else
              v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v19 + 176), v66, v65);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, v152[3], 0xD0u, v31, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v67 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &__p;
            else
              v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v19 + 208), v68, v67);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v69 = v152[3];
            v70 = *(unsigned __int8 *)(v69 + 12);
            if (v70 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v71 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v69, 0x98u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v69, 0x98u, v31, 1u, &v160);
            }
            else
            {
              v71 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x98u, v31, v70, 0);
            }
            v159 = 1;
            v72 = v152[3];
            v73 = *(unsigned __int8 *)(v72 + 12);
            if (v73 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v74 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0x99u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0x99u, v31, 1u, &v160);
              v75 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v74 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x99u, v31, v73, &v159);
              v75 = v159;
            }
            if (v75)
              v76 = v74;
            else
              v76 = v71;
            *(float *)(v19 + 24) = v76 * v29;
            v159 = 1;
            v77 = v152[3];
            v78 = *(unsigned __int8 *)(v77 + 12);
            if (v78 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v79 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v77, 0x9Cu, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v77, 0x9Cu, v31, 1u, &v160);
              v80 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v79 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x9Cu, v31, v78, &v159);
              v80 = v159;
            }
            if (v80)
              v81 = v79;
            else
              v81 = v71;
            *(float *)(v19 + 28) = v81 * v29;
            v159 = 1;
            v82 = v152[3];
            v83 = *(unsigned __int8 *)(v82 + 12);
            if (v83 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v84 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v82, 0x9Au, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v82, 0x9Au, v31, 1u, &v160);
              v85 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v84 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x9Au, v31, v83, &v159);
              v85 = v159;
            }
            if (v85)
              v86 = v84;
            else
              v86 = v71;
            *(float *)(v19 + 36) = v86 * v29;
            v159 = 1;
            v87 = v152[3];
            v88 = *(unsigned __int8 *)(v87 + 12);
            if (v88 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v89 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v87, 0x9Bu, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v87, 0x9Bu, v31, 1u, &v160);
              v90 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v89 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x9Bu, v31, v88, &v159);
              v90 = v159;
            }
            if (v90)
              v91 = v89;
            else
              v91 = v71;
            *(float *)(v19 + 32) = v91 * v29;
            v159 = 1;
            v92 = v152[3];
            v93 = *(unsigned __int8 *)(v92 + 12);
            if (v93 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v94 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v92, 0xE6u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v92, 0xE6u, v31, 1u, &v160);
              v95 = (__p.__r_.__value_.__s.__data_[0] | v160) != 0;
            }
            else
            {
              v94 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0xE6u, v31, v93, &v159);
              v95 = v159;
            }
            if (v95)
              v96 = v94;
            else
              v96 = v71;
            *(float *)(v19 + 52) = v96 * v29;
            v97 = v152[3];
            v98 = *(unsigned __int8 *)(v97 + 12);
            if (v98 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v99 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v97, 0xE7u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v97, 0xE7u, v31, 1u, &v160);
            }
            else
            {
              v99 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0xE7u, v31, v98, 0);
            }
            *(float *)(v19 + 56) = v99 * v29;
            v100 = v152[3];
            v101 = *(unsigned __int8 *)(v100 + 12);
            if (v101 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v102 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x119u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x119u, v31, 1u, &v160);
            }
            else
            {
              v102 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x119u, v31, v101, 0);
            }
            *(float *)(v19 + 40) = v102 * v29;
            v103 = v152[3];
            v104 = *(unsigned __int8 *)(v103 + 12);
            if (v104 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v105 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v103, 0x11Au, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v103, 0x11Au, v31, 1u, &v160);
            }
            else
            {
              v105 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x11Au, v31, v104, 0);
            }
            *(float *)(v19 + 44) = v105 * v29;
            v106 = v152[3];
            v107 = *(unsigned __int8 *)(v106 + 12);
            if (v107 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v108 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v106, 0x11Bu, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v106, 0x11Bu, v31, 1u, &v160);
            }
            else
            {
              v108 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x11Bu, v31, v107, 0);
            }
            *(float *)(v19 + 48) = v108 * v29;
            v109 = v152[3];
            v110 = *(unsigned __int8 *)(v109 + 12);
            if (v110 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v111 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v109, 0xE5u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v109, 0xE5u, v31, 1u, &v160);
            }
            else
            {
              v111 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v152[3], 0xE5u, v31, v110, 0);
            }
            *(_BYTE *)(v19 + 64) = v111;
            v112 = v152[3];
            v113 = *(unsigned __int8 *)(v112 + 12);
            if (v113 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v114 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v112, 0x192u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v112, 0x192u, v31, 1u, &v160);
            }
            else
            {
              v114 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v152[3], 0x192u, v31, v113, 0);
            }
            *(_DWORD *)(v19 + 8) = v114;
            v115 = v152[3];
            v116 = *(unsigned __int8 *)(v115 + 12);
            if (v116 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v117 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v115, 0x70u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v115, 0x70u, v31, 1u, &v160);
            }
            else
            {
              v117 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v152[3], 0x70u, v31, v116, 0);
            }
            *(_DWORD *)(v19 + 12) = v117;
            v118 = v152[3];
            v119 = *(unsigned __int8 *)(v118 + 12);
            if (v119 == 2)
            {
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v118, 0xE8u, v31, 0) & 1) != 0
                || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v118, 0xE8u, v31, 1u) & 1) != 0)
              {
                __p.__r_.__value_.__s.__data_[0] = 1;
                v160 = 1;
                v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v118, 0xE8u, v31, 0, &__p);
                v121 = v118;
                v122 = 232;
              }
              else
              {
                __p.__r_.__value_.__s.__data_[0] = 1;
                v160 = 1;
                v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v118, 0x70u, v31, 0, &__p);
                v121 = v118;
                v122 = 112;
              }
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v121, v122, v31, 1u, &v160);
            }
            else
            {
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v118, 0xE8u, v31, *(unsigned __int8 *)(v118 + 12)))
              {
                v123 = v118;
                v124 = 232;
              }
              else
              {
                v123 = v118;
                v124 = 112;
              }
              v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v123, v124, v31, v119, 0);
            }
            *(_DWORD *)(v19 + 16) = v120;
            v125 = v152[3];
            v126 = *(unsigned __int8 *)(v125 + 12);
            if (v126 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              v160 = 1;
              v127 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v125, 0x171u, v31, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v125, 0x171u, v31, 1, &v160);
            }
            else
            {
              v127 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v152[3], 0x171u, v31, v126, 0);
            }
            *(_DWORD *)(v19 + 20) = v127;
LABEL_219:
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v152);
            return v6;
          }
LABEL_72:
          **(_BYTE **)(v19 + 240) = 0;
          *(_QWORD *)(v19 + 248) = 0;
          goto LABEL_73;
        }
LABEL_71:
        **(_BYTE **)(v19 + 208) = 0;
        *(_QWORD *)(v19 + 216) = 0;
        if ((*(char *)(v19 + 263) & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_72;
      }
    }
  }
  return v6;
}

void sub_19F5CC848(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  va_list va;

  va_start(va, a7);
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  if (a3)
  {
    v10 = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F5CC8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  float v22;
  char *v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  __int16 v31;
  char v32;

  v31 = a2;
  v32 = 0;
  v4 = *(unsigned __int8 **)(a1 + 336);
  v5 = *(unsigned __int8 **)(a1 + 344);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *v4 == (_DWORD)a2 && v4[1] == 0;
      if (v6 && v4[2] == 0)
        break;
      v4 += 16;
      if (v4 == v5)
        goto LABEL_13;
    }
  }
  if (v4 == v5)
  {
LABEL_13:
    v9 = (uint64_t *)operator new();
    *v9 = 0;
    v9[1] = 0;
    v27 = v9;
    v10 = operator new();
    *(_QWORD *)v10 = off_1E42973A8;
    *(_BYTE *)(v10 + 64) = (_DWORD)a2 == 6;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 72) = 0;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 0;
    *(_QWORD *)(v10 + 96) = 0x4190000000000000;
    *(_QWORD *)(v10 + 104) = 0;
    *(_WORD *)(v10 + 112) = 0;
    v11 = *v9;
    *v9 = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v8 = *((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)(a1 + 336), &v31, &v27)+ 1);
    v12 = v27;
    if (v27)
    {
      v13 = *v27;
      *v27 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      MEMORY[0x1A1AF4E00](v12, 0x1020C4034E03FFCLL);
    }
  }
  else
  {
    v8 = *((_QWORD *)v4 + 1);
  }
  if (!*(_BYTE *)(v8 + 12))
  {
    v15 = *(_QWORD *)v8;
    *(_BYTE *)(v8 + 12) = 1;
    if (*(_QWORD *)a1)
    {
      v16 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, a2, 0);
      v17 = *(uint64_t **)v16;
      if (*(_QWORD *)v16)
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 1);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          v28 = v18;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          v28 = 0;
        }
        v29[0] = 0;
        v29[1] = 0;
        v27 = v17;
        v30 = 0;
        v24 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v17 + 48))(v17, v29);
        v30 = v24;
        if (v18)
        {
          v25 = (unint64_t *)&v18->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          v24 = v30;
        }
        if (v24)
          md::LabelTextStyleGroup::update(v15, (uint64_t)&v27, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 93), 1, *(float *)(a1 + 104), *(float *)(a1 + 88));
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v27);
      }
    }
    else
    {
      v22 = *(float *)(a1 + 88);
      *(_WORD *)(v15 + 8) = 255;
      *(_DWORD *)(v15 + 10) = -1;
      *(_WORD *)(v15 + 14) = -1;
      *(_DWORD *)(v15 + 44) = 1065353216;
      if (*(char *)(v15 + 95) < 0)
      {
        *(_QWORD *)(v15 + 80) = 5;
        v23 = *(char **)(v15 + 72);
      }
      else
      {
        v23 = (char *)(v15 + 72);
        *(_BYTE *)(v15 + 95) = 5;
      }
      strcpy(v23, "basic");
      *(float *)(v15 + 100) = v22 * 20.0;
      *(_DWORD *)(v15 + 104) = 1065353216;
    }
  }
  return v8;
}

void sub_19F5CCBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F5CCC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  unsigned __int8 v34;
  __int16 v35;
  char v36;

  if (a2)
    v4 = 256;
  else
    v4 = 0;
  v35 = v4 | 1;
  v36 = 3;
  v5 = *(_QWORD *)(a1 + 336);
  v6 = *(_QWORD *)(a1 + 344);
  if (v5 != v6)
  {
    v7 = v4 >> 8;
    while (1)
    {
      _ZF = *(_BYTE *)v5 == 1 && *(unsigned __int8 *)(v5 + 1) == v7;
      if (_ZF && *(_BYTE *)(v5 + 2) == 3)
        break;
      v5 += 16;
      if (v5 == v6)
        goto LABEL_17;
    }
  }
  if (v5 == v6)
  {
LABEL_17:
    v11 = (uint64_t *)operator new();
    *v11 = 0;
    v11[1] = 0;
    v31 = v11;
    v12 = operator new();
    *(_QWORD *)v12 = &off_1E4297368;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 85) = 0u;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)(v12 + 16) = _Q0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v12 + 32) = _Q0;
    *(_DWORD *)(v12 + 40) = 1084227584;
    v17 = *v11;
    *v11 = v12;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v10 = *((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)(a1 + 336), &v35, &v31)+ 1);
    v18 = v31;
    if (v31)
    {
      v19 = *v31;
      *v31 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      MEMORY[0x1A1AF4E00](v18, 0x1020C4034E03FFCLL);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v5 + 8);
  }
  if (!*(_BYTE *)(v10 + 12))
  {
    v21 = *(_QWORD *)v10;
    *(_BYTE *)(v10 + 12) = 1;
    if (*(_QWORD *)a1)
    {
      v22 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 1, a2);
      v23 = *(uint64_t **)v22;
      if (*(_QWORD *)v22)
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          v32 = v24;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        else
        {
          v32 = 0;
        }
        v33[0] = 0;
        v33[1] = 0;
        v31 = v23;
        v34 = 0;
        v28 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v23 + 48))(v23, v33);
        v34 = v28;
        if (v24)
        {
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          v28 = v34;
        }
        if (v28)
          md::LabelIconStyleGroup::update(v21, (uint64_t)&v31, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 93), *(float *)(a1 + 104), *(float *)(a1 + 88));
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v31);
      }
    }
  }
  return v10;
}

void sub_19F5CCEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F5CCF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  float v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  _QWORD v97[2];
  uint64_t *v98;
  std::__shared_weak_count *v99;
  _QWORD v100[2];
  unsigned __int8 v101;
  __int16 v102;
  char v103;
  unsigned __int8 v104;
  unsigned __int8 v105;

  v102 = 6;
  v103 = 4;
  v2 = *(_QWORD *)(a1 + 336);
  v3 = *(_QWORD *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *(_BYTE *)v2 == 6 && *(_BYTE *)(v2 + 1) == 0;
      if (v4 && *(_BYTE *)(v2 + 2) == 4)
        break;
      v2 += 16;
      if (v2 == v3)
        goto LABEL_13;
    }
  }
  if (v2 == v3)
  {
LABEL_13:
    v7 = (uint64_t *)operator new();
    *v7 = 0;
    v7[1] = 0;
    v98 = v7;
    v8 = operator new();
    *(_QWORD *)v8 = &off_1E42A1EE8;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_QWORD *)(v8 + 12) = 0x10000000CLL;
    *(_DWORD *)(v8 + 8) = 1065353216;
    *(_QWORD *)(v8 + 36) = 0x40A000003F800000;
    v9 = *v7;
    *v7 = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v6 = (uint64_t *)*((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)(a1 + 336), &v102, &v98)+ 1);
    v10 = v98;
    if (v98)
    {
      v11 = *v98;
      *v98 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      MEMORY[0x1A1AF4E00](v10, 0x1020C4034E03FFCLL);
    }
  }
  else
  {
    v6 = *(uint64_t **)(v2 + 8);
  }
  if (!*((_BYTE *)v6 + 12))
  {
    v13 = *v6;
    *((_BYTE *)v6 + 12) = 1;
    if (*(_QWORD *)a1)
    {
      v14 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 6, 0);
      v15 = *(uint64_t **)v14;
      if (*(_QWORD *)v14)
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
        v97[0] = *(_QWORD *)v14;
        v97[1] = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          v99 = v16;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        else
        {
          v99 = 0;
        }
        v100[0] = 0;
        v100[1] = 0;
        v98 = v15;
        v101 = 0;
        v20 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v15 + 48))(v15, v100);
        v101 = v20;
        if (v16)
        {
          v21 = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          v20 = v101;
        }
        if (v20)
        {
          v23 = *(float *)(a1 + 88);
          if ((int)*(float *)(a1 + 104) >= 0x17)
            v24 = 23;
          else
            v24 = (int)*(float *)(a1 + 104);
          *(_OWORD *)(v13 + 8) = 0u;
          *(_QWORD *)(v13 + 56) = 0;
          *(_OWORD *)(v13 + 24) = 0u;
          *(_OWORD *)(v13 + 40) = 0u;
          v104 = 1;
          v25 = v98[3];
          v26 = *(unsigned __int8 *)(v25 + 12);
          if (v26 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0xD4u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0xD4u, v24, 1u, &v105);
            v28 = (LOBYTE(v97[0]) | v105) != 0;
          }
          else
          {
            v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0xD4u, v24, v26, &v104);
            v28 = v104;
          }
          if (v28)
            v29 = v27;
          else
            v29 = 1;
          *(_BYTE *)(v13 + 45) = v29;
          v30 = v98[3];
          v31 = *(unsigned __int8 *)(v30 + 12);
          if (v31 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v32 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v30, 0x176u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v30, 0x176u, v24, 1u, &v105);
          }
          else
          {
            v32 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x176u, v24, v31, 0);
          }
          *(_BYTE *)(v13 + 46) = v32;
          v33 = v98[3];
          v34 = *(unsigned __int8 *)(v33 + 12);
          if (v34 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v33, 0x153u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v33, 0x153u, v24, 1u, &v105);
          }
          else
          {
            v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x153u, v24, v34, 0);
          }
          *(_BYTE *)(v13 + 47) = v35;
          v36 = v98[3];
          v37 = *(unsigned __int8 *)(v36 + 12);
          if (v37 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v38 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v36, 0x16Du, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v36, 0x16Du, v24, 1u, &v105);
          }
          else
          {
            v38 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x16Du, v24, v37, 0);
          }
          *(_BYTE *)(v13 + 48) = v38;
          v39 = v98[3];
          v40 = *(unsigned __int8 *)(v39 + 12);
          if (v40 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v41 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v39, 0x16Fu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v39, 0x16Fu, v24, 1u, &v105);
          }
          else
          {
            v41 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x16Fu, v24, v40, 0);
          }
          *(_BYTE *)(v13 + 49) = v41;
          v42 = v98[3];
          v43 = *(unsigned __int8 *)(v42 + 12);
          if (v43 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0x170u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0x170u, v24, 1u, &v105);
          }
          else
          {
            v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x170u, v24, v43, 0);
          }
          *(_BYTE *)(v13 + 50) = v44;
          v45 = v98[3];
          v46 = *(unsigned __int8 *)(v45 + 12);
          if (v46 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x177u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x177u, v24, 1u, &v105);
          }
          else
          {
            v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x177u, v24, v46, 0);
          }
          *(_BYTE *)(v13 + 51) = v47;
          v48 = v98[3];
          v49 = *(unsigned __int8 *)(v48 + 12);
          if (v49 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48, 0x178u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48, 0x178u, v24, 1u, &v105);
          }
          else
          {
            v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x178u, v24, v49, 0);
          }
          *(_BYTE *)(v13 + 52) = v50;
          v51 = v98[3];
          v52 = *(unsigned __int8 *)(v51 + 12);
          if (v52 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v51, 0x179u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v51, 0x179u, v24, 1u, &v105);
          }
          else
          {
            v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x179u, v24, v52, 0);
          }
          *(_BYTE *)(v13 + 53) = v53;
          v54 = v98[3];
          v55 = *(unsigned __int8 *)(v54 + 12);
          if (v55 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v56 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x199u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x199u, v24, 1u, &v105);
          }
          else
          {
            v56 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x199u, v24, v55, 0);
          }
          *(_DWORD *)(v13 + 56) = v56;
          v57 = v98[3];
          v58 = *(unsigned __int8 *)(v57 + 12);
          if (v58 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v59 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v57, 0x19Au, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v57, 0x19Au, v24, 1u, &v105);
          }
          else
          {
            v59 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x19Au, v24, v58, 0);
          }
          *(_DWORD *)(v13 + 60) = v59;
          v60 = v98[3];
          v61 = *(unsigned __int8 *)(v60 + 12);
          if (v61 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v60, 0x19Bu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v60, 0x19Bu, v24, 1u, &v105);
          }
          else
          {
            v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x19Bu, v24, v61, 0);
          }
          *(_BYTE *)(v13 + 54) = v62;
          v63 = v98[3];
          v64 = *(unsigned __int8 *)(v63 + 12);
          if (v64 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v65 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v63, 0x19Cu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v63, 0x19Cu, v24, 1u, &v105);
          }
          else
          {
            v65 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x19Cu, v24, v64, 0);
          }
          *(_BYTE *)(v13 + 55) = v65;
          v66 = v98[3];
          v67 = *(unsigned __int8 *)(v66 + 12);
          if (v67 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v68 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x11Cu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x11Cu, v24, 1u, &v105);
          }
          else
          {
            v68 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98[3], 0x11Cu, v24, v67, 0);
          }
          *(float *)(v13 + 32) = v68 * v23;
          v69 = v98[3];
          v70 = *(unsigned __int8 *)(v69 + 12);
          if (v70 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v71 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v69, 0x192u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v69, 0x192u, v24, 1u, &v105);
          }
          else
          {
            v71 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98[3], 0x192u, v24, v70, 0);
          }
          *(_DWORD *)(v13 + 8) = v71;
          v72 = v98[3];
          v73 = *(unsigned __int8 *)(v72 + 12);
          if (v73 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v72, 0x70u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v72, 0x70u, v24, 1u, &v105);
          }
          else
          {
            v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x70u, v24, v73, 0);
          }
          *(_DWORD *)(v13 + 12) = v74;
          v75 = v98[3];
          v76 = *(unsigned __int8 *)(v75 + 12);
          if (v76 == 2)
          {
            if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v75, 0xE8u, v24, 0) & 1) != 0
              || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v75, 0xE8u, v24, 1u) & 1) != 0)
            {
              LOBYTE(v97[0]) = 1;
              v105 = 1;
              v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v75, 0xE8u, v24, 0, v97);
              v78 = v75;
              v79 = 232;
            }
            else
            {
              LOBYTE(v97[0]) = 1;
              v105 = 1;
              v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v75, 0x70u, v24, 0, v97);
              v78 = v75;
              v79 = 112;
            }
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v78, v79, v24, 1u, &v105);
          }
          else
          {
            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v75, 0xE8u, v24, *(unsigned __int8 *)(v75 + 12)))
            {
              v80 = v75;
              v81 = 232;
            }
            else
            {
              v80 = v75;
              v81 = 112;
            }
            v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v80, v81, v24, v76, 0);
          }
          *(_DWORD *)(v13 + 16) = v77;
          v82 = v98[3];
          v83 = *(unsigned __int8 *)(v82 + 12);
          if (v83 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v84 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v82, 0x171u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v82, 0x171u, v24, 1, &v105);
          }
          else
          {
            v84 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v98[3], 0x171u, v24, v83, 0);
          }
          *(_DWORD *)(v13 + 20) = v84;
          v85 = v98[3];
          v86 = *(unsigned __int8 *)(v85 + 12);
          if (v86 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v87 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v85, 0x16Cu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v85, 0x16Cu, v24, 1u, &v105);
          }
          else
          {
            v87 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x16Cu, v24, v86, 0);
          }
          *(_DWORD *)(v13 + 24) = v87;
          v88 = v98[3];
          v89 = *(unsigned __int8 *)(v88 + 12);
          if (v89 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v90 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v88, 0x174u, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v88, 0x174u, v24, 1u, &v105);
          }
          else
          {
            v90 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98[3], 0x174u, v24, v89, 0);
          }
          *(_DWORD *)(v13 + 28) = v90;
          v91 = v98[3];
          v92 = *(unsigned __int8 *)(v91 + 12);
          if (v92 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v93 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v91, 0x1DFu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v91, 0x1DFu, v24, 1u, &v105);
          }
          else
          {
            v93 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98[3], 0x1DFu, v24, v92, 0);
          }
          *(_DWORD *)(v13 + 40) = v93;
          v94 = v98[3];
          v95 = *(unsigned __int8 *)(v94 + 12);
          if (v95 == 2)
          {
            LOBYTE(v97[0]) = 1;
            v105 = 1;
            v96 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x1DBu, v24, 0, v97);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x1DBu, v24, 1u, &v105);
          }
          else
          {
            v96 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98[3], 0x1DBu, v24, v95, 0);
          }
          *(_DWORD *)(v13 + 36) = v96;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v98);
      }
    }
  }
  return v6;
}

void sub_19F5CDCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F5CDD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  _QWORD v38[2];
  uint64_t *v39;
  std::__shared_weak_count *v40;
  _QWORD v41[2];
  unsigned __int8 v42;
  __int16 v43;
  char v44;
  char v45;

  v43 = 6;
  v44 = 5;
  v2 = *(_QWORD *)(a1 + 336);
  v3 = *(_QWORD *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *(_BYTE *)v2 == 6 && *(_BYTE *)(v2 + 1) == 0;
      if (v4 && *(_BYTE *)(v2 + 2) == 5)
        break;
      v2 += 16;
      if (v2 == v3)
        goto LABEL_13;
    }
  }
  if (v2 == v3)
  {
LABEL_13:
    v7 = (uint64_t *)operator new();
    *v7 = 0;
    v7[1] = 0;
    v39 = v7;
    v8 = (_QWORD *)operator new();
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E42A09B8;
    v9 = *v7;
    *v7 = (uint64_t)v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v6 = (uint64_t *)*((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)(a1 + 336), &v43, &v39)+ 1);
    v10 = v39;
    if (v39)
    {
      v11 = *v39;
      *v39 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      MEMORY[0x1A1AF4E00](v10, 0x1020C4034E03FFCLL);
    }
  }
  else
  {
    v6 = *(uint64_t **)(v2 + 8);
  }
  if (!*((_BYTE *)v6 + 12))
  {
    v13 = *v6;
    *((_BYTE *)v6 + 12) = 1;
    if (*(_QWORD *)a1)
    {
      v14 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 6, 0);
      v15 = *(uint64_t **)v14;
      if (*(_QWORD *)v14)
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
        v38[0] = *(_QWORD *)v14;
        v38[1] = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          v40 = v16;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        else
        {
          v40 = 0;
        }
        v41[0] = 0;
        v41[1] = 0;
        v39 = v15;
        v42 = 0;
        v20 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v15 + 48))(v15, v41);
        v42 = v20;
        if (v16)
        {
          v21 = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          v20 = v42;
        }
        if (v20)
        {
          v23 = (int)*(float *)(a1 + 104);
          v24 = *(float *)(a1 + 88);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          if (v23 >= 0x17)
            v25 = 23;
          else
            v25 = v23;
          v26 = v39[3];
          v27 = *(unsigned __int8 *)(v26 + 12);
          if (v27 == 2)
          {
            LOBYTE(v38[0]) = 1;
            v45 = 1;
            v28 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v26, 0x1BCu, v25, 0, v38);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v26, 0x1BCu, v25, 1u, &v45);
          }
          else
          {
            v28 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39[3], 0x1BCu, v25, v27, 0);
          }
          *(float *)(v13 + 8) = v28 * v24;
          v29 = v39[3];
          v30 = *(unsigned __int8 *)(v29 + 12);
          if (v30 == 2)
          {
            LOBYTE(v38[0]) = 1;
            v45 = 1;
            v31 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v29, 0x1BBu, v25, 0, v38);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v29, 0x1BBu, v25, 1u, &v45);
          }
          else
          {
            v31 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39[3], 0x1BBu, v25, v30, 0);
          }
          *(float *)(v13 + 12) = v31 * v24;
          v32 = v39[3];
          v33 = *(unsigned __int8 *)(v32 + 12);
          if (v33 == 2)
          {
            LOBYTE(v38[0]) = 1;
            v45 = 1;
            v34 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v32, 0x1BDu, v25, 0, v38);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v32, 0x1BDu, v25, 1u, &v45);
          }
          else
          {
            v34 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39[3], 0x1BDu, v25, v33, 0);
          }
          *(_DWORD *)(v13 + 16) = v34;
          v35 = v39[3];
          v36 = *(unsigned __int8 *)(v35 + 12);
          if (v36 == 2)
          {
            LOBYTE(v38[0]) = 1;
            v45 = 1;
            v37 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v35, 0xE9u, v25, 0, v38);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v35, 0xE9u, v25, 1u, &v45);
          }
          else
          {
            v37 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v39[3], 0xE9u, v25, v36, 0);
          }
          *(_BYTE *)(v13 + 20) = gss::MaskToLabelPosition((unsigned __int16)v37);
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v39);
      }
    }
  }
  return v6;
}

void sub_19F5CE16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F5CE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];
  unsigned __int8 v16;

  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 104);
  if (*(_QWORD *)result)
  {
    v4 = result;
    v5 = (uint64_t *)md::LabelStyle::styleQueryForComponent((unsigned __int8 **)result, a3, 0);
    result = *v5;
    if (*v5)
    {
      v6 = (std::__shared_weak_count *)v5[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v14 = v6;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      else
      {
        v14 = 0;
      }
      v15[0] = 0;
      v15[1] = 0;
      v13 = result;
      v16 = 0;
      v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 48))(result, v15);
      v16 = v10;
      if (v6)
      {
        v11 = (unint64_t *)&v6->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v10 = v16;
      }
      if (v10)
        md::LabelTextStyleGroup::update(*(_QWORD *)a2, (uint64_t)&v13, *(_QWORD *)(v4 + 16), *(unsigned __int8 *)(v4 + 93), 0, *(float *)(v4 + 104), *(float *)(v4 + 88));
      return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v13);
    }
  }
  return result;
}

void sub_19F5CE324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v16 = a15;
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = a13;
  if (a13)
  {
    v20 = (unint64_t *)&a13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::prepareDisplayCoreStyleGroup(md::LabelStyle *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t result;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[2];
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[2];
  unsigned __int8 v23;
  char v24;

  v2 = operator new(0x90uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42DD380;
  *((_DWORD *)v2 + 34) = 1065353216;
  *((_BYTE *)v2 + 128) = 0;
  memset_pattern16(v2 + 3, &unk_19FFB6370, 0x60uLL);
  v2[15] = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 49) = v2 + 3;
  *((_QWORD *)this + 50) = v2;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
  }
  else
  {
LABEL_5:
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v19[0] = result;
  v19[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v21 = v7;
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
  }
  else
  {
    v21 = 0;
  }
  v22[0] = 0;
  v22[1] = 0;
  v20 = result;
  v23 = 0;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 48))(result, v22);
  v23 = v11;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v11 = v23;
  }
  if (v11)
  {
    v14 = 0;
    v15 = *((_QWORD *)this + 49);
    do
    {
      v17 = *(_QWORD *)(v20 + 24);
      v18 = *(unsigned __int8 *)(v17 + 12);
      if (v18 == 2)
      {
        LOBYTE(v19[0]) = 1;
        v24 = 1;
        v16 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v17, 0x159u, v14, 0, v19);
        gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v17, 0x159u, v14, 1u, &v24);
      }
      else
      {
        v16 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v20 + 24), 0x159u, v14, v18, 0);
      }
      *(_DWORD *)(v15 + 4 * v14) = v16;
      *(_QWORD *)(v15 + 96) |= 1 << v14++;
    }
    while (v14 != 24);
  }
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v20);
}

void sub_19F5CE5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelDisplayCoreStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelDisplayCoreStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

int32x4_t *md::LabelStyle::prepareDisplayTextStyleGroup(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  int32x4_t *result;
  int32x2_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  float v15;
  int32x4_t v16;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  unsigned int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int32x4_t *v46;
  std::__shared_weak_count *v47;
  int32x4_t *v48;
  std::__shared_weak_count *v49;
  _QWORD v50[2];
  unsigned __int8 v51;
  char v52;
  char v53;

  result = (int32x4_t *)operator new(0x1F0uLL);
  result->i64[1] = 0;
  result[1].i64[0] = 0;
  result->i64[0] = (uint64_t)&off_1E42DD3F0;
  result[1].i8[8] = a3;
  result[8].i64[0] = 0;
  result[8].i8[8] = 1;
  result[15].i64[0] = 0;
  result[15].i8[8] = 1;
  result[22].i64[0] = 0;
  result[22].i8[8] = 1;
  result[29].i64[0] = 0;
  result[29].i8[8] = 1;
  result[30].i64[0] = 0;
  result[30].i64[1] = 0;
  *a1 = (char *)result + 24;
  a1[1] = result;
  if (*(_QWORD *)a2)
  {
    v10 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a2, a4, 0);
    result = *(int32x4_t **)v10;
    if (*(_QWORD *)v10)
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
      v46 = *(int32x4_t **)v10;
      v47 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        v49 = v11;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      else
      {
        v49 = 0;
      }
      v50[0] = 0;
      v50[1] = 0;
      v48 = result;
      v51 = 0;
      v22 = (*(uint64_t (**)(int32x4_t *, _QWORD *))(result->i64[0] + 48))(result, v50);
      v51 = v22;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v22 = v51;
      }
      if (v22)
      {
        v25 = 0;
        v26 = (_QWORD *)*a1;
        v27 = *(_QWORD *)(a2 + 16);
        v28 = *(float *)(a2 + 88);
        v29 = *(unsigned __int8 *)(a2 + 93);
        LOBYTE(v47) = 0;
        v46 = 0;
        v30 = (int *)(v26 + 29);
        do
        {
          v32 = v48[1].i64[1];
          v33 = *(unsigned __int8 *)(v32 + 12);
          if (v33 == 2)
          {
            v53 = 1;
            v52 = 1;
            v34 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v32, 0x148u, v25, 0, &v53);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v32, 0x148u, v25, 1u, &v52);
          }
          else
          {
            v34 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48[1].i64[1], 0x148u, v25, v33, 0);
          }
          if (v34 == 1)
            v35 = 1;
          else
            v35 = v29;
          md::FontSizeInfo::update((uint64_t)&v46, (uint64_t)&v48, v27, v35, *(unsigned __int8 *)v26, (float)v25);
          v36 = v47;
          *((float *)v30 - 56) = *((float *)&v46 + 1) * v28;
          v37 = 1 << v25;
          if (v36)
          {
            v38 = v26[13] | v37;
            v39 = v26[27] | v37;
          }
          else
          {
            v38 = v26[13] & ~v37;
            v39 = v26[27] & ~v37;
          }
          v40 = *(float *)&v46 * v28;
          v26[13] = v38;
          *((float *)v30 - 28) = v40;
          v26[27] = v39;
          v41 = v48[1].i64[1];
          v42 = *(unsigned __int8 *)(v41 + 12);
          if (v42 == 2)
          {
            v53 = 1;
            v52 = 1;
            v43 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v41, 0x144u, v25, 0, &v53);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v41, 0x144u, v25, 1u, &v52);
          }
          else
          {
            v43 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v48[1].i64[1], 0x144u, v25, v42, 0);
          }
          *v30 = v43;
          v26[41] |= v37;
          v44 = v48[1].i64[1];
          v45 = *(unsigned __int8 *)(v44 + 12);
          if (v45 == 2)
          {
            v53 = 1;
            v52 = 1;
            v31 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v44, 0x1B0u, v25, 0, &v53);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v44, 0x1B0u, v25, 1u, &v52);
          }
          else
          {
            v31 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v48[1].i64[1], 0x1B0u, v25, v45, 0);
          }
          v30[28] = v31;
          v26[55] |= v37;
          ++v25;
          ++v30;
        }
        while (v25 != 24);
      }
      return (int32x4_t *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v48);
    }
  }
  else
  {
    v15 = 20.0;
    if (a3)
      v15 = 16.0;
    *(float *)v9.i32 = v15 * *(float *)(a2 + 88);
    v16 = vdupq_lane_s32(v9, 0);
    result[2] = v16;
    result[3] = v16;
    __asm { FMOV            V2.4S, #1.0 }
    result[9] = 0u;
    result[10] = 0u;
    result[16] = _Q2;
    result[17] = _Q2;
    result[23] = 0u;
    result[24] = 0u;
    result[4] = v16;
    result[5] = v16;
    result[11] = 0u;
    result[12] = 0u;
    result[18] = _Q2;
    result[19] = _Q2;
    result[25] = 0u;
    result[26] = 0u;
    result[27] = 0u;
    result[6] = v16;
    result[7] = v16;
    result[13] = 0u;
    result[14] = 0u;
    result[20] = _Q2;
    result[21] = _Q2;
    result[8].i64[0] = 0;
    result[15].i64[0] = 0;
    result[22].i64[0] = 0;
    result[28].i64[1] = 0;
    result[29].i64[0] = 0;
    result[28].i64[0] = 0;
  }
  return result;
}

void sub_19F5CEA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v14;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v16 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = a12;
  if (a12)
  {
    v20 = (unint64_t *)&a12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelDisplayTextStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelDisplayTextStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelStyle::prepareDisplayIconStyleGroup(md::LabelStyle *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD v32[2];
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[2];
  unsigned __int8 v36;
  char v37;

  v2 = operator new(0x178uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42DD3B8;
  v2[15] = 0;
  *((_BYTE *)v2 + 128) = 1;
  v2[29] = 0;
  *((_BYTE *)v2 + 240) = 1;
  v2[43] = 0;
  *((_BYTE *)v2 + 352) = 1;
  *((_DWORD *)v2 + 92) = 0;
  v2[45] = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 55) = v2 + 3;
  *((_QWORD *)this + 56) = v2;
  if (!v3)
    goto LABEL_37;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_37:
    if (*(_QWORD *)this)
      goto LABEL_6;
LABEL_14:
    v12 = *((_QWORD *)this + 55);
    v13 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 208);
    v15 = *(_QWORD *)(v12 + 320);
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_OWORD *)(v12 + 304) = 0u;
    *(_QWORD *)(v12 + 96) = v13 & 0xFFFFFFFFFF000000;
    *(_QWORD *)(v12 + 208) = v14 & 0xFFFFFFFFFF000000;
    *(_QWORD *)(v12 + 320) = v15 & 0xFFFFFFFFFF000000;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!*(_QWORD *)this)
    goto LABEL_14;
LABEL_6:
  v6 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)this, 1, 0);
  v7 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
    v32[0] = *(_QWORD *)v6;
    v32[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v34 = v8;
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
    }
    else
    {
      v34 = 0;
    }
    v35[0] = 0;
    v35[1] = 0;
    v33 = v7;
    v36 = 0;
    v16 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v35);
    v36 = v16;
    if (v8)
    {
      v17 = (unint64_t *)&v8->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v16 = v36;
    }
    if (v16)
    {
      v19 = 0;
      v20 = (float *)*((_QWORD *)this + 55);
      v21 = *((float *)this + 22);
      do
      {
        v23 = *(_QWORD *)(v33 + 24);
        v24 = *(unsigned __int8 *)(v23 + 12);
        if (v24 == 2)
        {
          LOBYTE(v32[0]) = 1;
          v37 = 1;
          v25 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v23, 0x5Eu, v19, 0, v32);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v23, 0x5Eu, v19, 1u, &v37);
        }
        else
        {
          v25 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v33 + 24), 0x5Eu, v19, v24, 0);
        }
        v20[v19] = v25 * v21;
        v26 = 1 << v19;
        *((_QWORD *)v20 + 12) |= 1 << v19;
        v27 = *(_QWORD *)(v33 + 24);
        v28 = *(unsigned __int8 *)(v27 + 12);
        if (v28 == 2)
        {
          LOBYTE(v32[0]) = 1;
          v37 = 1;
          v29 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v27, 0x61u, v19, 0, v32);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v27, 0x61u, v19, 1u, &v37);
        }
        else
        {
          v29 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v33 + 24), 0x61u, v19, v28, 0);
        }
        v20[v19 + 28] = v29 * v21;
        *((_QWORD *)v20 + 26) |= v26;
        v30 = *(_QWORD *)(v33 + 24);
        v31 = *(unsigned __int8 *)(v30 + 12);
        if (v31 == 2)
        {
          LOBYTE(v32[0]) = 1;
          v37 = 1;
          v22 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v30, 0x194u, v19, 0, v32);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v30, 0x194u, v19, 1u, &v37);
        }
        else
        {
          v22 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v33 + 24), 0x194u, v19, v31, 0);
        }
        v20[v19 + 56] = v22 * v21;
        *((_QWORD *)v20 + 40) |= v26;
        ++v19;
      }
      while (v19 != 24);
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v33);
  }
}

void sub_19F5CEEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelDisplayIconStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelDisplayIconStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelStyle::populateDebugNode(md::LabelStyle *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  md::LabelStyle *v4;
  _BYTE *v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  char *ChildNode;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  float v58;
  uint64_t v59;
  uint64_t *v60;
  float v61;
  uint64_t v62;
  uint64_t *v63;
  float v64;
  uint64_t v65;
  uint64_t *v66;
  float v67;
  uint64_t v68;
  uint64_t *v69;
  float v70;
  uint64_t v71;
  uint64_t *v72;
  float v73;
  uint64_t v74;
  uint64_t *v75;
  float v76;
  uint64_t v77;
  uint64_t *v78;
  float v79;
  uint64_t v80;
  _BOOL4 v81;
  uint64_t *v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t *v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  const void *v102;
  std::string::size_type v103;
  void *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  md::LabelStyle *v109;
  gdc::DebugTreeNode *v110;
  _BYTE v111[32];
  std::string v112;
  int v113;
  _BYTE v114[8];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _BYTE v120[32];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _QWORD v125[7];
  int v126;
  _QWORD v127[7];
  int v128;
  _QWORD v129[7];
  int v130;
  _BYTE v131[16];
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _BYTE v137[16];
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  _BYTE v143[16];
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _BYTE v149[16];
  double v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  _BYTE v155[16];
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  _BYTE v161[16];
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _BYTE v167[16];
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  _BYTE v173[16];
  double v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _QWORD v179[7];
  int v180;
  _QWORD v181[7];
  int v182;
  _QWORD v183[7];
  int v184;
  _QWORD v185[7];
  int v186;
  _QWORD v187[7];
  int v188;
  _QWORD v189[7];
  int v190;
  _BYTE v191[16];
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  _BYTE v197[16];
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  _BYTE v203[32];
  std::string __p;
  int v205;
  _QWORD v206[7];
  int v207;
  _QWORD v208[7];
  int v209;
  _QWORD v210[7];
  int v211;
  _QWORD v212[7];
  int v213;
  _QWORD v214[7];
  int v215;
  _BYTE __src[24];
  uint64_t v217;
  __int128 __dst;
  unint64_t v219;
  _BYTE v220[32];
  __int128 v221;
  unint64_t v222;
  int v223;
  std::string v224;

  v4 = this;
  *((_BYTE *)&v224.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v224, "Name");
  md::LabelStyle::styleName((md::LabelStyle *)__src, (uint64_t *)this);
  if ((__src[23] & 0x80000000) == 0)
  {
    v5 = __src;
    v6 = __src[23];
    if (__src[23] < 0x17uLL)
      goto LABEL_3;
LABEL_7:
    v8 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v219 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)&__src[8];
  if (*(_QWORD *)&__src[8] > 0x7FFFFFFFFFFFFFF7uLL)
    abort();
  v5 = *(_BYTE **)__src;
  if (*(_QWORD *)&__src[8] >= 0x17uLL)
    goto LABEL_7;
LABEL_3:
  HIBYTE(v219) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v221 = 0uLL;
  v222 = 0;
  v223 = 4;
  v10 = SHIBYTE(v219);
  if ((v10 & 0x80000000) != 0)
  {
    std::string::__assign_no_alias<true>(&v221, (void *)__dst, *((size_t *)&__dst + 1));
  }
  else
  {
    v221 = __dst;
    v222 = v219;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)&v224, (uint64_t)v220);
  if (SHIBYTE(v222) < 0)
  {
    operator delete((void *)v221);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_16:
      if ((__src[23] & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)__dst);
  if ((__src[23] & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_23:
    operator delete(v224.__r_.__value_.__l.__data_);
    v11 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
      goto LABEL_59;
    goto LABEL_24;
  }
LABEL_22:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v217 + 40))(v217, *(_QWORD *)__src, *(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
LABEL_18:
  v11 = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
    goto LABEL_59;
LABEL_24:
  v109 = v4;
  gss::StylesheetQuery<gss::PropertyID>::debugClientAttributes((uint64_t *)&v224, v11);
  __src[23] = 17;
  strcpy(__src, "Client Attributes");
  v110 = a2;
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__src);
  v13 = WORD1(v224.__r_.__value_.__r.__words[1]);
  if (WORD1(v224.__r_.__value_.__r.__words[1]))
  {
    v14 = (uint64_t)ChildNode;
    v15 = 0;
    v16 = 0;
    v17 = WORD1(v224.__r_.__value_.__r.__words[1]);
    do
    {
      if (v16 < v17)
      {
        v15 = (int *)(v224.__r_.__value_.__r.__words[0] + 4 * v16);
        v10 = v224.__r_.__value_.__r.__words[0] + LOWORD(v224.__r_.__value_.__r.__words[1]) + 2 * v16;
      }
      v18 = gss::to_string(*v15);
      v19 = strlen(v18);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v20 = v19;
      if (v19 >= 0x17)
      {
        v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v22 = v19 | 7;
        v23 = v22 + 1;
        v21 = operator new(v22 + 1);
        *(_QWORD *)&__src[8] = v20;
        *(_QWORD *)&__src[16] = v23 | 0x8000000000000000;
        *(_QWORD *)__src = v21;
      }
      else
      {
        __src[23] = v19;
        v21 = __src;
        if (!v19)
          goto LABEL_40;
      }
      memmove(v21, v18, v20);
LABEL_40:
      v21[v20] = 0;
      v24 = *(unsigned __int16 *)v10;
      memset(&v214[4], 0, 24);
      v215 = 0;
      v214[0] = v24;
      gdc::DebugTreeNode::addProperty(v14, (uint64_t)__src, (uint64_t)v214);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v17 = WORD1(v224.__r_.__value_.__r.__words[1]);
      if (v16 + 1 < WORD1(v224.__r_.__value_.__r.__words[1]))
        ++v16;
      else
        v16 = WORD1(v224.__r_.__value_.__r.__words[1]);
    }
    while (v16 != v13);
  }
  __src[23] = 18;
  strcpy(__src, "Feature Attributes");
  v25 = gdc::DebugTreeNode::createChildNode((uint64_t)v110, (__int128 *)__src);
  v4 = v109;
  v26 = *(_QWORD *)(*(_QWORD *)v109 + 240);
  v27 = *(_QWORD *)(*(_QWORD *)v109 + 248);
  if (v26 != v27)
  {
    v28 = (uint64_t)v25;
    do
    {
      v29 = gss::to_string(*(_DWORD *)v26);
      v30 = strlen(v29);
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v31 = v30;
      if (v30 >= 0x17)
      {
        v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v33 = v30 | 7;
        v34 = v33 + 1;
        v32 = operator new(v33 + 1);
        *(_QWORD *)&__src[8] = v31;
        *(_QWORD *)&__src[16] = v34 | 0x8000000000000000;
        *(_QWORD *)__src = v32;
      }
      else
      {
        __src[23] = v30;
        v32 = __src;
        if (!v30)
          goto LABEL_53;
      }
      memmove(v32, v29, v31);
LABEL_53:
      v32[v31] = 0;
      v35 = *(unsigned __int16 *)(v26 + 4);
      memset(&v212[4], 0, 24);
      v213 = 0;
      v212[0] = v35;
      gdc::DebugTreeNode::addProperty(v28, (uint64_t)__src, (uint64_t)v212);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v26 += 8;
    }
    while (v26 != v27);
  }
  if (!v224.__r_.__value_.__s.__data_[14] && v224.__r_.__value_.__r.__words[0])
  {
    v36 = gss::Allocator::instance((gss::Allocator *)v25);
    (*(void (**)(uint64_t, std::string::size_type, _QWORD))(*(_QWORD *)v36 + 40))(v36, v224.__r_.__value_.__r.__words[0], WORD2(v224.__r_.__value_.__r.__words[1]));
  }
  a2 = v110;
LABEL_59:
  __src[23] = 18;
  strcpy(__src, "Visible Zoom Range");
  v37 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__src);
  v38 = *((unsigned __int8 *)v4 + 112);
  __src[23] = 3;
  strcpy(__src, "Min");
  v211 = 0;
  memset(&v210[4], 0, 24);
  v210[0] = v38;
  gdc::DebugTreeNode::addProperty((uint64_t)v37, (uint64_t)__src, (uint64_t)v210);
  v39 = *((unsigned __int8 *)v4 + 113);
  __src[23] = 3;
  strcpy(__src, "Max");
  v209 = 0;
  memset(&v208[4], 0, 24);
  v208[0] = v39;
  gdc::DebugTreeNode::addProperty((uint64_t)v37, (uint64_t)__src, (uint64_t)v208);
  v40 = *(_QWORD *)v4;
  __src[23] = 10;
  strcpy(__src, "Is Default");
  v207 = 0;
  memset(&v206[4], 0, 24);
  v206[0] = v40 == 0;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__src, (uint64_t)v206);
  __src[23] = 12;
  strcpy(__src, "Font Options");
  v41 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__src);
  v42 = *((_QWORD *)v4 + 35);
  if (v42)
  {
    if (vabds_f32(*(float *)(v42 + 8), *((float *)v4 + 26)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((uint64_t)v4, v42, 0);
      v42 = *((_QWORD *)v4 + 35);
    }
  }
  else
  {
    v42 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>((uint64_t)v4, 0);
    *((_QWORD *)v4 + 35) = v42;
  }
  v43 = *(_QWORD *)v42;
  __src[23] = 11;
  strcpy(__src, "Family Name");
  if (*(char *)(v43 + 95) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(v43 + 72), *(_QWORD *)(v43 + 80));
  else
    v224 = *(std::string *)(v43 + 72);
  memset(&__p, 0, sizeof(__p));
  v205 = 4;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&__p, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    __p = v224;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v203);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
  }
  else if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v224.__r_.__value_.__l.__data_);
LABEL_71:
  v44 = *(float *)(v43 + 100);
  __src[23] = 9;
  strcpy(__src, "Font Size");
  v201 = 0;
  v199 = 0;
  v200 = 0;
  v202 = 2;
  v198 = v44;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v197);
  v45 = *(float *)(v43 + 96);
  __src[23] = 14;
  strcpy(__src, "Font Expansion");
  v195 = 0;
  v193 = 0;
  v194 = 0;
  v196 = 2;
  v192 = v45;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v191);
  v46 = *(unsigned __int8 *)(v43 + 109);
  __src[23] = 13;
  strcpy(__src, "Is Upper Case");
  v190 = 0;
  memset(&v189[4], 0, 24);
  v189[0] = v46;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v189);
  v47 = *(unsigned __int8 *)(v43 + 110);
  __src[23] = 12;
  strcpy(__src, "Is Down Case");
  v188 = 0;
  memset(&v187[4], 0, 24);
  v187[0] = v47;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v187);
  v48 = *(unsigned __int8 *)(v43 + 111);
  __src[23] = 13;
  strcpy(__src, "Is Title Case");
  v186 = 0;
  memset(&v185[4], 0, 24);
  v185[0] = v48;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v185);
  v49 = *(unsigned __int8 *)(v43 + 108);
  __src[23] = 17;
  strcpy(__src, "Is Raised Initial");
  v184 = 0;
  memset(&v183[4], 0, 24);
  v183[0] = v49;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v183);
  v50 = *(unsigned __int8 *)(v43 + 112);
  __src[23] = 14;
  strcpy(__src, "Has Small Caps");
  v182 = 0;
  memset(&v181[4], 0, 24);
  v181[0] = v50;
  gdc::DebugTreeNode::addProperty((uint64_t)v41, (uint64_t)__src, (uint64_t)v181);
  __src[23] = 16;
  strcpy(__src, "Line Style Group");
  v51 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__src);
  v52 = (char *)operator new(0x19uLL);
  *(_QWORD *)__src = v52;
  *(_OWORD *)&__src[8] = xmmword_19FFB3490;
  strcpy(v52, "Road Crossing Threshold");
  v53 = *((_QWORD *)v4 + 33);
  if (!v53)
  {
    v54 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v53 = *v54;
    *((_QWORD *)v4 + 33) = *v54;
  }
  v55 = *(int *)(v53 + 8);
  v180 = 0;
  memset(&v179[4], 0, 24);
  v179[0] = v55;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v179);
  operator delete(v52);
  __src[23] = 9;
  strcpy(__src, "Road Rank");
  v56 = *((_QWORD *)v4 + 33);
  if (!v56)
  {
    v57 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v56 = *v57;
    *((_QWORD *)v4 + 33) = *v57;
  }
  v58 = *(float *)(v56 + 16);
  v177 = 0;
  v175 = 0;
  v176 = 0;
  v178 = 2;
  v174 = v58;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v173);
  v59 = *((_QWORD *)v4 + 33);
  __src[23] = 11;
  strcpy(__src, "Shield Rank");
  if (!v59)
  {
    v60 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v59 = *v60;
    *((_QWORD *)v4 + 33) = *v60;
  }
  v61 = *(float *)(v59 + 20);
  v171 = 0;
  v169 = 0;
  v170 = 0;
  v172 = 2;
  v168 = v61;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v167);
  v62 = *((_QWORD *)v4 + 33);
  __src[23] = 18;
  strcpy(__src, "Road Label Spacing");
  if (!v62)
  {
    v63 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v62 = *v63;
    *((_QWORD *)v4 + 33) = *v63;
  }
  v64 = *(float *)(v62 + 24);
  v165 = 0;
  v163 = 0;
  v164 = 0;
  v166 = 2;
  v162 = v64;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v161);
  v65 = *((_QWORD *)v4 + 33);
  __src[23] = 13;
  strcpy(__src, "Arrow Spacing");
  if (!v65)
  {
    v66 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v65 = *v66;
    *((_QWORD *)v4 + 33) = *v66;
  }
  v67 = *(float *)(v65 + 28);
  v159 = 0;
  v157 = 0;
  v158 = 0;
  v160 = 2;
  v156 = v67;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v155);
  v68 = *((_QWORD *)v4 + 33);
  __src[23] = 14;
  strcpy(__src, "Shield Spacing");
  if (!v68)
  {
    v69 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v68 = *v69;
    *((_QWORD *)v4 + 33) = *v69;
  }
  v70 = *(float *)(v68 + 32);
  v153 = 0;
  v151 = 0;
  v152 = 0;
  v154 = 2;
  v150 = v70;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v149);
  v71 = *((_QWORD *)v4 + 33);
  __src[23] = 16;
  strcpy(__src, "Multi Shield Gap");
  if (!v71)
  {
    v72 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v71 = *v72;
    *((_QWORD *)v4 + 33) = *v72;
  }
  v73 = *(float *)(v71 + 36);
  v147 = 0;
  v145 = 0;
  v146 = 0;
  v148 = 2;
  v144 = v73;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v143);
  v74 = *((_QWORD *)v4 + 33);
  __src[23] = 20;
  strcpy(__src, "Road With Shield Gap");
  if (!v74)
  {
    v75 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v74 = *v75;
    *((_QWORD *)v4 + 33) = *v75;
  }
  v76 = *(float *)(v74 + 40);
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v142 = 2;
  v138 = v76;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v137);
  v77 = *((_QWORD *)v4 + 33);
  __src[23] = 12;
  strcpy(__src, "Arrow Height");
  if (!v77)
  {
    v78 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v77 = *v78;
    *((_QWORD *)v4 + 33) = *v78;
  }
  v79 = *(float *)(v77 + 48);
  v134 = 0;
  v135 = 0;
  v133 = 0;
  v136 = 2;
  v132 = v79;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v131);
  v80 = *((_QWORD *)v4 + 33);
  __src[23] = 14;
  strcpy(__src, "Arrows Visible");
  if (v80)
  {
    if (*(_BYTE *)(v80 + 56))
    {
LABEL_91:
      v81 = *(unsigned __int8 *)(v80 + 57) != 0;
      goto LABEL_96;
    }
  }
  else
  {
    v82 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v80 = *v82;
    *((_QWORD *)v4 + 33) = *v82;
    if (*(_BYTE *)(v80 + 56))
      goto LABEL_91;
  }
  v81 = 0;
LABEL_96:
  v130 = 0;
  memset(&v129[4], 0, 24);
  v129[0] = v81;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v129);
  v83 = *((_QWORD *)v4 + 33);
  __src[23] = 15;
  strcpy(__src, "Shields Visible");
  if (v83)
  {
    if (*(_BYTE *)(v83 + 56))
    {
LABEL_98:
      v84 = *(unsigned __int8 *)(v83 + 58) != 0;
      goto LABEL_101;
    }
  }
  else
  {
    v85 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v83 = *v85;
    *((_QWORD *)v4 + 33) = *v85;
    if (*(_BYTE *)(v83 + 56))
      goto LABEL_98;
  }
  v84 = 0;
LABEL_101:
  v128 = 0;
  memset(&v127[4], 0, 24);
  v127[0] = v84;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v127);
  v86 = *((_QWORD *)v4 + 33);
  __src[23] = 18;
  strcpy(__src, "Road Names Visible");
  if (v86)
  {
    if (*(_BYTE *)(v86 + 56))
    {
LABEL_103:
      v87 = *(unsigned __int8 *)(v86 + 60) != 0;
      goto LABEL_106;
    }
  }
  else
  {
    v88 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v86 = *v88;
    *((_QWORD *)v4 + 33) = *v88;
    if (*(_BYTE *)(v86 + 56))
      goto LABEL_103;
  }
  v87 = 0;
LABEL_106:
  v126 = 0;
  memset(&v125[4], 0, 24);
  v125[0] = v87;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v125);
  v89 = *((_QWORD *)v4 + 33);
  __src[23] = 15;
  strcpy(__src, "Offset Position");
  if (!v89)
  {
    v90 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v89 = *v90;
    *((_QWORD *)v4 + 33) = *v90;
  }
  v91 = *(unsigned __int8 *)(v89 + 61);
  v92 = v91;
  v93 = 5;
  v94 = 0x7468676952;
  v95 = v91;
  v96 = v91;
  switch((int)v91)
  {
    case 0:
      break;
    case 1:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 8;
      v94 = 0x7468676952706F54;
      break;
    case 2:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 3;
      v94 = 7368532;
      break;
    case 3:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 7;
      v94 = 0x7466654C706F54;
      break;
    case 4:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v94 = 1952867660;
      v93 = v92;
      break;
    case 5:
      v96 = 0;
      v93 = 10;
      v94 = 0x654C6D6F74746F42;
      v91 = 102;
      v95 = 29696;
      break;
    case 6:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v94 = 0x6D6F74746F42;
      v93 = v92;
      break;
    case 7:
      v93 = 11;
      v94 = 0x69526D6F74746F42;
      v91 = 103;
      v96 = 7602176;
      v95 = 26624;
      break;
    case 8:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 6;
      v94 = 0x7265746E6543;
      break;
    case 9:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 4;
      v94 = 1701736270;
      break;
    case 10:
      v95 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 8;
      v94 = 0x656C676E41747845;
      break;
    default:
      v95 = 0;
      v94 = 0;
      v96 = 0;
      v91 = 0;
      v93 = 0;
      break;
  }
  v124 = 4;
  v121 = v94;
  v122 = v96 | v95 | v91;
  v123 = 0;
  HIBYTE(v123) = v93;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v120);
  v97 = *((_QWORD *)v4 + 33);
  __src[23] = 11;
  strcpy(__src, "Arrow Layer");
  if (!v97)
  {
    v98 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v97 = *v98;
    *((_QWORD *)v4 + 33) = *v98;
  }
  v99 = *(char *)(v97 + 63);
  v117 = 0;
  v118 = 0;
  v119 = 1;
  v116 = 0;
  v115 = v99;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v114);
  v100 = *((_QWORD *)v4 + 33);
  __src[23] = 15;
  strcpy(__src, "Arrow Icon Name");
  if (v100)
  {
    v101 = *(char *)(v100 + 95);
    if ((v101 & 0x80000000) == 0)
      goto LABEL_124;
  }
  else
  {
    v105 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v4);
    v100 = *v105;
    *((_QWORD *)v4 + 33) = *v105;
    v101 = *(char *)(v100 + 95);
    if ((v101 & 0x80000000) == 0)
    {
LABEL_124:
      v102 = (const void *)(v100 + 72);
      v103 = v101;
      if (v101 < 0x17uLL)
        goto LABEL_125;
LABEL_130:
      v106 = (v103 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v103 | 7) != 0x17)
        v106 = v103 | 7;
      v107 = v106 + 1;
      v104 = operator new(v106 + 1);
      v224.__r_.__value_.__l.__size_ = v103;
      v224.__r_.__value_.__r.__words[2] = v107 | 0x8000000000000000;
      v224.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
      goto LABEL_133;
    }
  }
  v103 = *(_QWORD *)(v100 + 80);
  if (v103 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v102 = *(const void **)(v100 + 72);
  if (v103 >= 0x17)
    goto LABEL_130;
LABEL_125:
  *((_BYTE *)&v224.__r_.__value_.__s + 23) = v103;
  v104 = &v224;
  if (v103)
LABEL_133:
    memmove(v104, v102, v103);
  *((_BYTE *)v104 + v103) = 0;
  memset(&v112, 0, sizeof(v112));
  v113 = 4;
  v108 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v112, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v112 = v224;
  gdc::DebugTreeNode::addProperty((uint64_t)v51, (uint64_t)__src, (uint64_t)v111);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((v108 & 0x80000000) == 0)
    {
LABEL_139:
      if ((__src[23] & 0x80000000) == 0)
        return;
LABEL_143:
      operator delete(*(void **)__src);
      return;
    }
  }
  else if ((v108 & 0x80000000) == 0)
  {
    goto LABEL_139;
  }
  operator delete(v224.__r_.__value_.__l.__data_);
  if ((__src[23] & 0x80000000) != 0)
    goto LABEL_143;
}

void sub_19F5D01B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F5D01CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 - 232) + 40))(*(_QWORD *)(v1 - 232), *(_QWORD *)(v1 - 256), *(_QWORD *)(v1 - 240) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(a1);
}

void sub_19F5D0200(_Unwind_Exception *a1)
{
  uint64_t v1;

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v1 - 128));
  _Unwind_Resume(a1);
}

void gss::StylesheetQuery<gss::PropertyID>::debugClientAttributes(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  std::__shared_weak_count *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  gss::Allocator *v30;
  BOOL v31;
  uint64_t v32;
  gss::Allocator *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _BYTE v39[15];
  char v40;
  void *__p;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _BYTE *v46;
  std::__shared_weak_count *v47;
  char v48;
  char v49;

  *(uint64_t *)((char *)a1 + 7) = 0;
  *a1 = 0;
  *((_BYTE *)a1 + 15) = 1;
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v45 = v5;
  if (!v5)
    return;
  v6 = *(_QWORD *)(a2 + 8);
  v44 = v6;
  if (!v6)
  {
    v22 = v5;
LABEL_61:
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    return;
  }
  __p = 0;
  v42 = 0;
  v43 = 0;
  v7 = *(_QWORD *)(v6 + 520);
  v8 = *(std::__shared_weak_count **)(v6 + 528);
  if (!v8)
    goto LABEL_9;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v7)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v7)
    {
LABEL_10:
      v12 = *(_QWORD *)(v44 + 520);
      v13 = *(std::__shared_weak_count **)(v44 + 528);
      v46 = (_BYTE *)v12;
      v47 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      gss::ClientStyleState<gss::PropertyID>::appendSourceClientStyleAttributes(v12, (unint64_t *)&__p);
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v18 = *(unsigned __int16 *)(a2 + 282);
      v46 = (_BYTE *)(a2 + 272);
      LODWORD(v47) = 0;
      v48 = 0;
      v49 = 0;
      if (v18)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          ++v20;
          v21 = v19 + 1;
          if (v19 + 1 < v18)
            ++v19;
          else
            v19 = v18;
        }
        while (v21 < v18);
      }
      else
      {
        v20 = 0;
      }
      std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v42, &v46, a2 + 272, v18, v20);
      goto LABEL_50;
    }
  }
  memset(v39, 0, sizeof(v39));
  v40 = 1;
  gss::DisplayStyle::applyDisplayStyle(gss::DisplayStyleDay, v39);
  v46 = v39;
  LODWORD(v47) = 0;
  v48 = 0;
  v49 = 0;
  if (*(_WORD *)&v39[10])
  {
    v23 = 0;
    v24 = 0;
    do
    {
      ++v24;
      v25 = v23 + 1;
      if (v23 + 1 < *(unsigned __int16 *)&v39[10])
        ++v23;
      else
        v23 = *(unsigned __int16 *)&v39[10];
    }
    while (v25 < *(unsigned __int16 *)&v39[10]);
  }
  else
  {
    v24 = 0;
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v42, &v46, (uint64_t)v39, *(unsigned __int16 *)&v39[10], v24);
  v26 = *(unsigned __int16 *)(a2 + 282);
  v46 = (_BYTE *)(a2 + 272);
  LODWORD(v47) = 0;
  v48 = 0;
  v49 = 0;
  if (v26)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      ++v28;
      v29 = v27 + 1;
      if (v27 + 1 < v26)
        ++v27;
      else
        v27 = v26;
    }
    while (v29 < v26);
  }
  else
  {
    v28 = 0;
  }
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>((unint64_t *)&__p, v42, &v46, a2 + 272, v26, v28);
  if (v39[14])
    v31 = 1;
  else
    v31 = *(_QWORD *)v39 == 0;
  if (!v31)
  {
    v32 = gss::Allocator::instance(v30);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 40))(v32, *(_QWORD *)v39, *(unsigned __int16 *)&v39[12]);
  }
LABEL_50:
  gss::ResolveMultiAttributeVectorToMap((unsigned int **)&__p, (uint64_t *)&v46);
  if (&v46 == (_BYTE **)a1)
  {
    if (!*((_BYTE *)a1 + 14) && *a1)
    {
      v36 = gss::Allocator::instance(v33);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v36 + 40))(v36, *a1, *((unsigned __int16 *)a1 + 6));
    }
  }
  else
  {
    if (!*((_BYTE *)a1 + 14) && *a1)
    {
      v34 = gss::Allocator::instance(v33);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, *a1, *((unsigned __int16 *)a1 + 6));
      *a1 = 0;
    }
    v35 = v47;
    *a1 = (uint64_t)v46;
    *((_DWORD *)a1 + 2) = (_DWORD)v35;
    *((_WORD *)a1 + 6) = WORD2(v35);
    *((_WORD *)a1 + 7) = HIWORD(v47);
  }
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  v22 = v45;
  if (v45)
    goto LABEL_61;
}

void sub_19F5D0560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  gss::QueryOverrides *v16;

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a16);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  gss::QueryOverrides::~QueryOverrides(v16);
  _Unwind_Resume(a1);
}

void md::MapNavLabeler::~MapNavLabeler(md::MapNavLabeler *this)
{
  md::MapNavLabeler::~MapNavLabeler(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  VKLabelNavArtworkCache *v17;
  md::LabelNavEtaLabeler *v18;
  void (***v19)(_QWORD, _QWORD);
  void (***v20)(_QWORD, _QWORD);
  uint64_t v21;
  void (***v22)(_QWORD, _QWORD);
  void (***v23)(_QWORD, _QWORD);
  void (**v24)(_QWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  md::RouteAnnotationSupport *v44;
  uint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;

  *(_QWORD *)this = &off_1E428DCA8;
  *((_QWORD *)this + 1) = &unk_1E428DEE0;
  *((_QWORD *)this + 2) = &unk_1E428DFC8;
  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)(*(_QWORD *)(v3 + 168) + 32) = *(_QWORD *)(*(_QWORD *)(v3 + 168) + 80);
  v4 = *(_QWORD *)(v3 + 168);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD **)v4;
  if (*(_QWORD **)v4 != v5)
  {
    while ((char *)*v6 != v2)
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(v4 + 8);
        break;
      }
    }
  }
  v7 = v6 + 1;
  v8 = v6 == v5 || v7 == v5;
  if (v8)
  {
    if (v6 != v5)
      goto LABEL_26;
LABEL_11:
    v9 = *((_QWORD *)this + 97);
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
  do
  {
    if ((char *)*v7 != v2)
      *v6++ = *v7;
    ++v7;
  }
  while (v7 != v5);
  if (v6 == *(_QWORD **)(v4 + 8))
    goto LABEL_11;
LABEL_26:
  *(_QWORD *)(v4 + 8) = v6;
  v9 = *((_QWORD *)this + 97);
  if (v9)
  {
LABEL_12:
    *((_QWORD *)this + 98) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 100) + 40))(*((_QWORD *)this + 100), v9, *((_QWORD *)this + 99) - v9);
  }
LABEL_13:
  v10 = *((_QWORD *)this + 92);
  if (v10)
  {
    v11 = *((_QWORD *)this + 93);
    v12 = *((_QWORD *)this + 92);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 32);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v13->__on_zero_shared)(v13, v12);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 40;
      }
      while (v11 != v10);
      v12 = *((_QWORD *)this + 92);
    }
    *((_QWORD *)this + 93) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 95) + 40))(*((_QWORD *)this + 95), v12, *((_QWORD *)this + 94) - v12);
  }
  v16 = *((_QWORD *)this + 88);
  if (v16)
  {
    *((_QWORD *)this + 89) = v16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 91) + 40))(*((_QWORD *)this + 91), v16, *((_QWORD *)this + 90) - v16);
  }
  v17 = (VKLabelNavArtworkCache *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v17)
  {
    VKLabelNavArtworkCache::~VKLabelNavArtworkCache(v17);
    MEMORY[0x1A1AF4E00]();
  }
  v18 = (md::LabelNavEtaLabeler *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v18)
  {
    md::LabelNavEtaLabeler::~LabelNavEtaLabeler(v18);
    MEMORY[0x1A1AF4E00]();
  }
  v19 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 81);
  if (v19)
  {
    v20 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 82);
    v21 = *((_QWORD *)this + 81);
    if (v20 != v19)
    {
      v22 = v20 - 3;
      v23 = v20 - 3;
      do
      {
        v24 = *v23;
        v23 -= 3;
        (*v24)(v22, v21);
        v8 = v22 == v19;
        v22 = v23;
      }
      while (!v8);
      v21 = *((_QWORD *)this + 81);
    }
    *((_QWORD *)this + 82) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 84) + 40))(*((_QWORD *)this + 84), v21, *((_QWORD *)this + 83) - v21);
  }
  v25 = *((_QWORD *)this + 77);
  if (v25)
  {
    v26 = *((_QWORD *)this + 78);
    v27 = *((_QWORD *)this + 77);
    if (v26 != v25)
    {
      do
      {
        v28 = *(std::__shared_weak_count **)(v26 - 8);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v28->__on_zero_shared)(v28, v27);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 16;
      }
      while (v26 != v25);
      v27 = *((_QWORD *)this + 77);
    }
    *((_QWORD *)this + 78) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 80) + 40))(*((_QWORD *)this + 80), v27, *((_QWORD *)this + 79) - v27);
  }
  v31 = *((_QWORD *)this + 73);
  if (v31)
  {
    v32 = *((_QWORD *)this + 74);
    v33 = *((_QWORD *)this + 73);
    if (v32 != v31)
    {
      do
      {
        v34 = *(std::__shared_weak_count **)(v32 - 8);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v34->__on_zero_shared)(v34, v33);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v32 -= 16;
      }
      while (v32 != v31);
      v33 = *((_QWORD *)this + 73);
    }
    *((_QWORD *)this + 74) = v31;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 40))(*((_QWORD *)this + 76), v33, *((_QWORD *)this + 75) - v33);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 70));
  v37 = (_QWORD *)*((_QWORD *)this + 66);
  while (v37)
  {
    v46 = v37;
    v37 = (_QWORD *)*v37;
    v47 = (std::__shared_weak_count *)v46[6];
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    operator delete(v46);
  }
  v38 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v38)
    operator delete(v38);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 42));
  v39 = (_QWORD *)*((_QWORD *)this + 38);
  while (v39)
  {
    v50 = v39;
    v39 = (_QWORD *)*v39;
    v51 = (std::__shared_weak_count *)v50[6];
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    operator delete(v50);
  }
  v40 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v40)
    operator delete(v40);
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *((_QWORD *)this + 10) = &off_1E42B4B90;

  v44 = (md::RouteAnnotationSupport *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v44)
  {
    md::RouteAnnotationSupport::~RouteAnnotationSupport(v44);
    MEMORY[0x1A1AF4E00]();
  }
  v45 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);

  *((_QWORD *)this + 4) = &off_1E42B4ED0;
}

uint64_t md::MapNavLabeler::render(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;

  v4 = result;
  if (*(_BYTE *)(result + 824))
    v5 = 0;
  else
    v5 = *(_BYTE *)(result + 825) == 0;
  v6 = *(uint64_t **)(result + 584);
  for (i = *(uint64_t **)(result + 592); v6 != i; v6 += 2)
  {
    v8 = *v6;
    v9 = *(_QWORD *)(*v6 + 288);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 640);
      if (v10)
      {
        v11 = atomic_load((unsigned __int8 *)(v10 + 143));
        if ((v11 & 1) != 0 && *(float *)(v8 + 268) > 0.0)
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 288) + 128))(*(_QWORD *)(v8 + 288), a3);
      }
    }
    if (v5)
    {
      if (*(_BYTE *)(*v6 + 265)
        && (v12 = *(_QWORD *)(*(_QWORD *)(*v6 + 288) + 640)) != 0
        && (v13 = atomic_load((unsigned __int8 *)(v12 + 143)), (v13 & 1) != 0))
      {
        v5 = 0;
        *(_BYTE *)(v4 + 825) = 1;
      }
      else
      {
        v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }
  }
  return result;
}

void md::MapNavLabeler::updateOcclusionQueries(id *this)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if ((*((unsigned int (**)(id *))*this + 44))(this))
  {
    v2 = (uint64_t **)objc_msgSend(this[7], "activeSigns");
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        v5 = *v3;
        if (*(_BYTE *)(*v3 + 24) && !*(_BYTE *)(v5 + 26))
        {
          v6 = *((_QWORD *)this[3] + 45);
          if (!*(_QWORD *)(v5 + 8))
          {
            v8 = operator new(0x138uLL);
            v8[1] = 0;
            v8[2] = 0;
            *v8 = &off_1E42DB208;
            v9.n128_f64[0] = md::OcclusionQuery::OcclusionQuery((uint64_t)(v8 + 3), 14, 0);
            v10 = *(std::__shared_weak_count **)(v5 + 16);
            *(_QWORD *)(v5 + 8) = v11;
            *(_QWORD *)(v5 + 16) = v8;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
          }
          v7 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v5 + 8) + 286));
          if ((v7 & 1) != 0)
          {
            *(_BYTE *)(v5 + 24) = 0;
            *(_BYTE *)(v5 + 26) = 1;
            md::OcclusionTest::setupAntennaeTest(**(_QWORD **)(v5 + 8), (_QWORD *)(v5 + 208), 0);
            md::OcclusionManager::addQuery(v6, (__int128 *)(v5 + 8));
          }
        }
        v3 += 2;
      }
      while (v3 != v4);
    }
  }
}

void sub_19F5D081C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t md::MapNavLabeler::stylesheetAnimationDidFinish(md::MapNavLabeler *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;

  v2 = (uint64_t *)*((_QWORD *)this + 9);
  md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(*v2 + 296), (uint64_t)(v2 + 18));
  v3 = *v2;
  *(_BYTE *)(v3 + 3041) = 1;
  v4 = atomic_load((unsigned __int8 *)(v3 + 3058));
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 + 136);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 56);
      if (v6)
      {
        v9 = v3;
        v8 = 9;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v6 + 48))(v6, &v9, &v8);
      }
    }
  }
  return objc_msgSend(*((id *)this + 7), "styleManagerDidFinishAnimating");
}

void md::MapNavLabeler::labelMarkerForSelectionAtPixel(_QWORD *a1@<X0>, float *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  id v13;
  uint64_t v14;
  id WeakRetained;
  uint64_t v16;
  std::__shared_weak_count *v17;
  float v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v21;
  __int128 v22;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  id location;

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1) & 1) == 0 && (!a1[13] || !*(_QWORD *)(a1[86] + 24)))
    goto LABEL_29;
  v6 = a1[81];
  v7 = a1[82];
  if (v6 == v7)
    goto LABEL_29;
  while (1)
  {
    v8 = *(id *)(v6 + 8);
    v9 = objc_msgSend(v8, "label");

    v10 = *(_QWORD *)v9;
    if (*(_BYTE *)(*(_QWORD *)v9 + 327))
    {
      if (*(_BYTE *)(v10 + 325)
        && *(_BYTE *)(v10 + 326)
        && !*(_BYTE *)(v10 + 264)
        && *(float *)(v10 + 268) >= 1.0
        && *a2 <= *(float *)(v10 + 344)
        && *a2 >= *(float *)(v10 + 336))
      {
        v11 = a2[1];
        if (v11 <= *(float *)(v10 + 348) && v11 >= *(float *)(v10 + 340))
          break;
      }
    }

    v6 += 24;
    if (v6 == v7)
      goto LABEL_29;
  }
  objc_msgSend(v8, "navFeature");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
LABEL_29:
    v13 = 0;
    *a3 = 0;
    a3[1] = 0;
LABEL_30:

    return;
  }
  v14 = a1[14];
  if (v14)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v14 + 288));

    if (v13 == WeakRetained)
    {
      v34 = a1[15];
      *a3 = a1[14];
      a3[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      goto LABEL_30;
    }
  }
  v16 = a1[3];
  v17 = *(std::__shared_weak_count **)(v16 + 16);
  v39 = *(_QWORD *)(v16 + 8);
  if (v17)
  {
    v40 = std::__shared_weak_count::lock(v17);
    if (v40)
    {
      v18 = *(float *)(a1[3] + 176);
      v19 = (std::__shared_weak_count *)operator new(0x140uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB1D0;
      v21 = v19 + 1;
      objc_initWeak(&location, v13);
      md::NavLabelMarker::NavLabelMarker((uint64_t)&v19[1], &v39, &location, v18);
      objc_storeWeak(&location, 0);
      objc_destroyWeak(&location);
      *(_QWORD *)&v22 = v19 + 1;
      *((_QWORD *)&v22 + 1) = v19;
      shared_weak_owners = (std::__shared_weak_count *)v19[1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1)
        {
LABEL_38:
          *(_OWORD *)a3 = v22;
          v31 = v40;
          if (v40)
          {
            v32 = (unint64_t *)&v40->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          goto LABEL_30;
        }
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v37 = v22;
        p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
        do
          v26 = __ldxr(p_shared_weak_owners);
        while (__stxr(v26 + 1, p_shared_weak_owners));
        v19[1].__shared_owners_ = (uint64_t)v21;
        v19[1].__shared_weak_owners_ = (uint64_t)v19;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
        v22 = v37;
      }
      else
      {
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v28 = (unint64_t *)&v19->__shared_weak_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v19[1].__shared_owners_ = (uint64_t)v21;
        v19[1].__shared_weak_owners_ = (uint64_t)v19;
      }
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        v38 = v22;
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v22 = v38;
      }
      goto LABEL_38;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
  __break(1u);
}

void sub_19F5D0BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, id location)
{
  void *v14;
  std::__shared_weak_count *v15;
  void *v17;

  objc_storeWeak(&location, 0);
  objc_destroyWeak(&location);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);

  _Unwind_Resume(a1);
}

void sub_19F5D0BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::Labeler::labelMarkerForCustomFeatureAnnotation(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::MapNavLabeler::setSelectedLabelMarker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  id WeakRetained;
  id v15;

  v3 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v3 + 224) == 1)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = *(std::__shared_weak_count **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = v3;
      *(_QWORD *)(a1 + 120) = v4;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 112) + 288));
      objc_msgSend(WeakRetained, "setIsPicked:", 1);

    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 112);
    if (v10)
    {
      v15 = objc_loadWeakRetained((id *)(v10 + 288));
      objc_msgSend(v15, "setIsPicked:", 0);

      v11 = *(std::__shared_weak_count **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_19F5D0D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::Labeler::adoptSelectedLabelMarker()
{
  return 0;
}

void md::MapNavLabeler::getLabelMarkers(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  id v11;
  void *v12;
  id *v13;
  unint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  id *v27;
  id *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  __int128 v35;
  __int128 v36;
  id *v37;
  id *v38;
  id *v39;
  id v40;
  float *v41;
  uint64_t v42;
  float *v43;
  void *v44;
  float v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *p_shared_weak_owners;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 *v58;
  unint64_t *v59;
  unint64_t v60;
  _OWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  id *i;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  id *v72;
  id *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  id location;

  v5 = a1[3];
  v6 = *(std::__shared_weak_count **)(v5 + 16);
  v76 = *(_QWORD *)(v5 + 8);
  if (!v6 || (v2 = a2, (v77 = std::__shared_weak_count::lock(v6)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_87:
    {
      v69 = operator new();
      *((_QWORD *)v3 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    goto LABEL_4;
  }
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
    goto LABEL_87;
LABEL_4:
  v75 = *((_QWORD *)v3 + 299);
  if (a1[13] && *(_QWORD *)(a1[86] + 24))
  {
    v8 = a1[81];
    v9 = a1[82];
    while (v8 != v9)
    {
      v11 = *(id *)(v8 + 8);
      v12 = v11;
      v13 = v73;
      v14 = v74;
      if ((unint64_t)v73 < v74)
      {
        v15 = v11;
        if (v73)
        {
          v15 = 0;
          *v73 = v11;
        }
        v10 = v13 + 1;
        goto LABEL_8;
      }
      v16 = (char *)v72;
      v17 = v73 - v72;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      if ((uint64_t)(v74 - (_QWORD)v72) >> 2 > v18)
        v18 = (uint64_t)(v74 - (_QWORD)v72) >> 2;
      if (v74 - (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, 8 * v19, 8);
        v21 = (id *)(v20 + 8 * v17);
        v22 = v20 + 8 * v19;
        v23 = 0uLL;
        if (v20)
        {
          v15 = 0;
          *v21 = v12;
          v24 = (char *)((char *)v13 - v16);
          if (v13 == (id *)v16)
            goto LABEL_34;
        }
        else
        {
          v15 = v12;
          v24 = (char *)((char *)v73 - (char *)v72);
          if (v73 == v72)
          {
LABEL_34:
            v72 = v21;
            v74 = v22;
            v10 = v21 + 1;
            if (!v13)
              goto LABEL_8;
LABEL_35:
            (*(void (**)(uint64_t, id *, unint64_t))(*(_QWORD *)v75 + 40))(v75, v13, v14 - (_QWORD)v13);
            goto LABEL_8;
          }
        }
      }
      else
      {
        v22 = 0;
        v21 = (id *)(8 * v17);
        v15 = v11;
        v23 = 0uLL;
        v24 = (char *)((char *)v73 - (char *)v72);
        if (v73 == v72)
          goto LABEL_34;
      }
      v25 = (unint64_t)(v24 - 8);
      if (v25 > 0x57
        && ((v26 = (v16 - (char *)v13 + 7) & 0xFFFFFFFFFFFFFFF8, (id *)((char *)v13 + v26) >= v21)
         || (id *)((char *)v21 + v26) >= v13))
      {
        v31 = 0;
        v32 = (v25 >> 3) + 1;
        v27 = &v13[-(v32 & 0x3FFFFFFFFFFFFFFCLL)];
        v33 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = &v13[v31];
          v36 = *(_OWORD *)&v13[v31 - 4];
          v35 = *(_OWORD *)&v13[v31 - 2];
          v37 = &v21[v31];
          *((_OWORD *)v34 - 2) = v23;
          *((_OWORD *)v34 - 1) = v23;
          *((_OWORD *)v37 - 2) = v36;
          *((_OWORD *)v37 - 1) = v35;
          v31 -= 4;
          v33 -= 4;
        }
        while (v33);
        v28 = &v21[-(v32 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      else
      {
        v27 = v13;
        v28 = v21;
      }
      do
      {
        v29 = *--v27;
        *v27 = 0;
        *--v28 = v29;
      }
      while (v27 != (id *)v16);
      v16 = (char *)v72;
      v13 = v73;
      v14 = v74;
LABEL_28:
      v72 = v28;
      v74 = v22;
      if (v13 != (id *)v16)
      {
        do
        {
          v30 = *--v13;

        }
        while (v13 != (id *)v16);
        v13 = (id *)v16;
      }
      v10 = v21 + 1;
      if (v13)
        goto LABEL_35;
LABEL_8:
      v73 = v10;

      v8 += 24;
    }
  }
  v38 = v72;
  v39 = v73;
  if (v72 == v73)
    goto LABEL_75;
  do
  {
    v40 = *v38;
    v41 = (float *)a1[3];
    v42 = objc_msgSend(v40, "label");
    v43 = *(float **)v42;
    if (v41[380] <= *(float *)(*(_QWORD *)v42 + 336)
      || v41[378] >= v43[86]
      || v41[381] <= v43[85]
      || v41[379] >= v43[87])
    {
      goto LABEL_44;
    }
    objc_msgSend(v40, "navFeature");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = *(float *)(a1[3] + 176);
    v46 = (std::__shared_weak_count *)operator new(0x140uLL);
    v46->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    v46->__shared_weak_owners_ = 0;
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB1D0;
    v48 = v46 + 1;
    objc_initWeak(&location, v44);
    md::NavLabelMarker::NavLabelMarker((uint64_t)&v46[1], &v76, &location, v45);
    objc_storeWeak(&location, 0);
    objc_destroyWeak(&location);
    shared_weak_owners = (std::__shared_weak_count *)v46[1].__shared_weak_owners_;
    if (!shared_weak_owners)
    {
      do
        v53 = __ldxr(p_shared_owners);
      while (__stxr(v53 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
      do
        v55 = __ldxr(p_shared_weak_owners);
      while (__stxr(v55 + 1, p_shared_weak_owners));
      v46[1].__shared_owners_ = (uint64_t)v48;
      v46[1].__shared_weak_owners_ = (uint64_t)v46;
      do
LABEL_59:
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      goto LABEL_62;
    }
    if (shared_weak_owners->__shared_owners_ == -1)
    {
      do
        v50 = __ldxr(p_shared_owners);
      while (__stxr(v50 + 1, p_shared_owners));
      v51 = (unint64_t *)&v46->__shared_weak_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v46[1].__shared_owners_ = (uint64_t)v48;
      v46[1].__shared_weak_owners_ = (uint64_t)v46;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      goto LABEL_59;
    }
LABEL_62:
    *(_QWORD *)&v57 = v46 + 1;
    *((_QWORD *)&v57 + 1) = v46;
    v70 = v57;
    v71 = v57;

    v58 = *(__int128 **)(v2 + 8);
    if ((unint64_t)v58 >= *(_QWORD *)(v2 + 16))
    {
      v61 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v2, &v71);
    }
    else
    {
      if (v58)
      {
        *v58 = v70;
        if (*((_QWORD *)&v70 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
      }
      v61 = v58 + 1;
    }
    *(_QWORD *)(v2 + 8) = v61;
    if (*((_QWORD *)&v70 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
      }
    }
LABEL_44:

    ++v38;
  }
  while (v38 != v39);
  v38 = v72;
LABEL_75:
  if (v38)
  {
    for (i = v73; i != v38; --i)
    {
      v65 = *(i - 1);

    }
    v73 = v38;
    (*(void (**)(uint64_t, id *, unint64_t))(*(_QWORD *)v75 + 40))(v75, v38, v74 - (_QWORD)v38);
  }
  v66 = v77;
  if (v77)
  {
    v67 = (unint64_t *)&v77->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_19F5D12F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, id location)
{
  void *v20;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL md::MapNavLabeler::isLabelHitAtPixel(int a1, md::NavLabelMarker *this, float *a3)
{
  void *v4;
  void *v5;
  float **v6;
  std::__shared_weak_count *v7;
  float *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BOOL8 v11;
  float v12;
  unint64_t *v13;
  unint64_t v14;

  if (*((_BYTE *)this + 224) != 1)
    return 0;
  md::NavLabelMarker::navRoadLabel((id *)this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4 && *(_QWORD *)objc_msgSend(v4, "label"))
  {
    v6 = (float **)objc_msgSend(v5, "label");
    v8 = *v6;
    v7 = (std::__shared_weak_count *)v6[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }

    if (!v8 || (*a3 <= v8[86] ? (v11 = *a3 >= v8[84]) : (v11 = 0), (v12 = a3[1], v12 > v8[87]) || v12 < v8[85]))
      v11 = 0;
    if (v7)
    {
      v13 = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {

    return 0;
  }
  return v11;
}

void sub_19F5D148C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::Labeler::roadMarkerForSelectionAtPixel(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::Labeler::labelMarkerForLabel(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t md::Labeler::debugHighlightLabelAtPixel()
{
  return 0;
}

void md::Labeler::debugString(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void md::MapNavLabeler::populateDebugNode(_QWORD *a1, uint64_t a2)
{
  char *ChildNode;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  std::string::size_type v12;
  std::string *p_dst;
  unint64_t v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  size_t size;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  id *v28;
  id *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  const char *v34;
  size_t v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  id *v42;
  id *v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  const char *v48;
  size_t v49;
  size_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  std::string __dst;
  uint64_t v75;
  void *v76[2];
  unint64_t v77;
  _BYTE v78[32];
  __int128 v79;
  unint64_t v80;
  int v81;
  void *__p[4];
  _BYTE v83[24];
  _QWORD v84[3];
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  std::ios_base v93;
  uint64_t v94;
  int v95;
  _QWORD v96[7];
  int v97;

  v83[23] = 13;
  strcpy(v83, "MapNavLabeler");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)v83);
  v4 = a1[3];
  v5 = *(unsigned int *)(v4 + 3560);
  v6 = *(float *)(v4 + 3564);
  v83[23] = 15;
  strcpy(v83, "RouteUserOffset");
  v7 = v6;
  v8 = (char *)operator new(0x80uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v8 + 128);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v8 + 128);
  *((_QWORD *)v8 + 1) = v5;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_DWORD *)v8 + 14) = 1;
  *((double *)v8 + 10) = v7;
  *((_QWORD *)v8 + 12) = 0;
  *((_QWORD *)v8 + 13) = 0;
  *((_QWORD *)v8 + 14) = 0;
  *((_DWORD *)v8 + 30) = 2;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v83, (uint64_t *)&__dst);
  if (v8[119] < 0)
  {
    operator delete(*((void **)v8 + 12));
    if ((v8[55] & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v8[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)v8 + 4));
LABEL_3:
  operator delete(v8);
  v9 = a1[13];
  v83[23] = 18;
  strcpy(v83, "ETA Labeler Active");
  if (v9)
    LODWORD(v9) = *(_QWORD *)(a1[86] + 24) != 0;
  v97 = 0;
  memset(&v96[4], 0, 24);
  v96[0] = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v83, (uint64_t)v96);
  v72 = (uint64_t)ChildNode;
  if (a1[13] && *(_QWORD *)(a1[86] + 24))
  {
    *(_QWORD *)v83 = &unk_1E428AEF8;
    v93.__vftable = (std::ios_base_vtbl *)&unk_1E428AF20;
    std::ios_base::init(&v93, &v83[8]);
    v94 = 0;
    v95 = -1;
    *(_QWORD *)v83 = off_1E42DAA38;
    v93.__vftable = (std::ios_base_vtbl *)&off_1E42DAA60;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&v83[8] = off_1E42DA790;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    {
      v70 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v70, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v90 = mdm::Allocator::instance(void)::alloc;
    v91 = 0;
    v92 = 16;
    md::LabelNavEtaLabeler::describeDebugState(a1[86], v83, 1);
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_19FFB3490;
    strcpy((char *)__p[0], "ETA Labeler Debug State");
    if ((v92 & 0x10) != 0)
    {
      v14 = v91;
      if (v91 < v86)
      {
        v91 = v86;
        v14 = v86;
      }
      v15 = (const void **)&v85;
    }
    else
    {
      if ((v92 & 8) == 0)
      {
        v11 = a1;
        v12 = 0;
        v75 = v90;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_25;
      }
      v15 = (const void **)v84;
      v14 = v84[2];
    }
    v16 = *v15;
    v12 = v14 - (_QWORD)*v15;
    v75 = v90;
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v12 >= 0x17)
    {
      v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v17 = v12 | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)(*(uint64_t (**)(void))(*(_QWORD *)v90 + 16))();
      __dst.__r_.__value_.__l.__size_ = v12;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
      p_dst = &__dst;
      if (!v12)
      {
        v11 = a1;
        goto LABEL_25;
      }
    }
    v11 = a1;
    memmove(p_dst, v16, v12);
LABEL_25:
    p_dst->__r_.__value_.__s.__data_[v12] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      size = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        abort();
      v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ < 0x17)
      {
LABEL_27:
        HIBYTE(v77) = size;
        v21 = v76;
        if (!size)
        {
LABEL_35:
          a1 = v11;
          v21[size] = 0;
          v79 = 0uLL;
          v80 = 0;
          v81 = 4;
          v24 = SHIBYTE(v77);
          if (SHIBYTE(v77) < 0)
          {
            std::string::__assign_no_alias<true>(&v79, v76[0], (size_t)v76[1]);
          }
          else
          {
            v79 = *(_OWORD *)v76;
            v80 = v77;
          }
          gdc::DebugTreeNode::addProperty(v72, (uint64_t)__p, (uint64_t)v78);
          if (SHIBYTE(v80) < 0)
          {
            operator delete((void *)v79);
            if ((v24 & 0x80000000) == 0)
            {
LABEL_40:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_41:
                ChildNode = (char *)v72;
                if (SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
                v93.__vftable = (std::ios_base_vtbl *)&off_1E42DAA60;
                *(_QWORD *)v83 = off_1E42DAA38;
                *(_QWORD *)&v83[8] = off_1E42DA790;
                if (SHIBYTE(v89) < 0)
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90 + 40))(v90, v87, v89 & 0x7FFFFFFFFFFFFFFFLL);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x1A1AF4D64](&v93);
                goto LABEL_46;
              }
LABEL_94:
              (*(void (**)(uint64_t, std::string::size_type, std::string::size_type))(*(_QWORD *)v75 + 40))(v75, __dst.__r_.__value_.__r.__words[0], __dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
              goto LABEL_41;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
            goto LABEL_40;
          }
          operator delete(v76[0]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_41;
          goto LABEL_94;
        }
LABEL_34:
        memmove(v21, v19, size);
        goto LABEL_35;
      }
    }
    else
    {
      v19 = &__dst;
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0x17uLL)
        goto LABEL_27;
    }
    v22 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v22 = size | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    v76[1] = (void *)size;
    v77 = v23 | 0x8000000000000000;
    v76[0] = v21;
    goto LABEL_34;
  }
LABEL_46:
  v71 = a1;
  v25 = (_QWORD *)a1[9];
  strcpy((char *)__p, "RouteAnnotationSupport");
  HIBYTE(__p[2]) = 22;
  v26 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)__p);
  v83[23] = 15;
  strcpy(v83, "TrafficFeatures");
  v73 = (uint64_t)v26;
  v27 = gdc::DebugTreeNode::createChildNode((uint64_t)v26, (__int128 *)v83);
  v28 = (id *)v25[6];
  v29 = (id *)v25[7];
  if (v28 != v29)
  {
    v30 = (uint64_t)v27;
    do
    {
      v31 = *v28;
      objc_msgSend(v31, "uniqueIdentifier");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32)
      {
        objc_msgSend(v31, "uniqueIdentifier");
        v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v34 = (const char *)objc_msgSend(v33, "UTF8String");

      }
      else
      {
        v34 = "";
      }

      v35 = strlen(v34);
      if (v35 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v36 = v35;
      if (v35 >= 0x17)
      {
        v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17)
          v38 = v35 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        *(_QWORD *)&v83[8] = v36;
        *(_QWORD *)&v83[16] = v39 | 0x8000000000000000;
        *(_QWORD *)v83 = v37;
      }
      else
      {
        v83[23] = v35;
        v37 = v83;
        if (!v35)
          goto LABEL_59;
      }
      memmove(v37, v34, v36);
LABEL_59:
      v37[v36] = 0;
      v40 = gdc::DebugTreeNode::createChildNode(v30, (__int128 *)v83);
      if ((v83[23] & 0x80000000) != 0)
        operator delete(*(void **)v83);
      objc_msgSend(v31, "populateDebugNode:", v40, v71);

      ++v28;
    }
    while (v28 != v29);
  }
  v83[23] = 16;
  strcpy(v83, "TrafficIncidents");
  v41 = gdc::DebugTreeNode::createChildNode(v73, (__int128 *)v83);
  v42 = (id *)v25[10];
  v43 = (id *)v25[11];
  if (v42 != v43)
  {
    v44 = (uint64_t)v41;
    do
    {
      v45 = *v42;
      objc_msgSend(v45, "uniqueIdentifier");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      if (v46)
      {
        objc_msgSend(v45, "uniqueIdentifier");
        v47 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v48 = (const char *)objc_msgSend(v47, "UTF8String");

      }
      else
      {
        v48 = "";
      }

      v49 = strlen(v48);
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v50 = v49;
      if (v49 >= 0x17)
      {
        v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v52 = v49 | 7;
        v53 = v52 + 1;
        v51 = operator new(v52 + 1);
        *(_QWORD *)&v83[8] = v50;
        *(_QWORD *)&v83[16] = v53 | 0x8000000000000000;
        *(_QWORD *)v83 = v51;
      }
      else
      {
        v83[23] = v49;
        v51 = v83;
        if (!v49)
          goto LABEL_76;
      }
      memmove(v51, v48, v50);
LABEL_76:
      v51[v50] = 0;
      objc_msgSend(v45, "populateDebugNode:", gdc::DebugTreeNode::createChildNode(v44, (__int128 *)v83));
      if ((v83[23] & 0x80000000) != 0)
        operator delete(*(void **)v83);

      ++v42;
    }
    while (v42 != v43);
  }
  v83[23] = 13;
  strcpy(v83, "LabelFeatures");
  v54 = gdc::DebugTreeNode::createChildNode(v73, (__int128 *)v83);
  v55 = (uint64_t *)v25[14];
  v56 = (uint64_t *)v25[15];
  if (v55 != v56)
  {
    v57 = (uint64_t)v54;
    v58 = 1;
    do
    {
      v59 = *v55;
      v83[23] = 7;
      strcpy(v83, "Feature");
      std::to_string(&__dst, v58);
      v60 = gdc::DebugTreeNode::createChildNode(v57, (__int128 *)v83, (__int128 *)&__dst);
      (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v59 + 464))(v59, v60, *v25);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v55 += 2;
      ++v58;
    }
    while (v55 != v56);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v61 = (_QWORD *)v71[8];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "RouteLineSupport");
  v62 = gdc::DebugTreeNode::createChildNode(v72, (__int128 *)__p);
  if (v61[11] != v61[12])
  {
    v83[23] = 14;
    strcpy(v83, "RouteWaypoints");
    v63 = gdc::DebugTreeNode::createChildNode((uint64_t)v62, (__int128 *)v83);
    v64 = (uint64_t *)v61[11];
    v65 = (uint64_t *)v61[12];
    if (v64 != v65)
    {
      v66 = (uint64_t)v63;
      v67 = 1;
      do
      {
        v68 = *v64;
        v83[23] = 8;
        strcpy(v83, "Waypoint");
        std::to_string(&__dst, v67);
        v69 = gdc::DebugTreeNode::createChildNode(v66, (__int128 *)v83, (__int128 *)&__dst);
        (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v68 + 464))(v68, v69, v61[1]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v64 += 2;
        ++v67;
      }
      while (v64 != v65);
    }
  }
}

void sub_19F5D1ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a15 + 40))(a15, a12, a14 & 0x7FFFFFFFFFFFFFFFLL);
  if (a32 < 0)
    operator delete(__p);
  std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_19F5D1F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;

  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void md::MapNavLabeler::debugDraw(md::MapNavLabeler *this, NSMutableString *a2, float32x2_t *a3)
{
  NSMutableString *j;
  uint64_t v5;
  NSMutableString *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id *v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  void *v38;
  uint64_t *v39;
  uint64_t **v40;
  BOOL v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  _QWORD *i;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  double v59;
  __int128 v60;
  double v61;
  double v62;
  double v63;
  long double v64;
  long double v65;
  double v66;
  long double v67;
  double v68;
  __double2 v69;
  double v70;
  double v71;
  __double2 v72;
  float32x2_t v73;
  double v74;
  unsigned int v75;
  int v76;
  id *v77;
  id *v78;
  id v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  long double v86;
  long double v87;
  double v88;
  long double v89;
  double v90;
  __double2 v91;
  double v92;
  double v93;
  __double2 v94;
  float32x2_t v95;
  uint64_t v96;
  NSMutableString *v97;
  double *v98;
  double v99;
  long double v100;
  long double v101;
  double v102;
  long double v103;
  double v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  md::MapNavLabeler *v112;
  NSMutableString *v113;
  float32x2_t v114;
  NSMutableString *v115;
  _QWORD *v116;
  int v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  char *v125;

  j = a2;
  if (objc_msgSend(*((id *)this + 7), "needsDebugDraw"))
  {
    v5 = *((_QWORD *)this + 3);
    *(_QWORD *)&v123 = &off_1E428BBF8;
    *((_QWORD *)&v123 + 1) = v5;
    *(_QWORD *)&v124 = this;
    *((_QWORD *)&v124 + 1) = v5 + 440;
    v125 = (char *)this + 360;
    objc_msgSend(*((id *)this + 7), "debugDraw:overlayConsole:navContext:", j, a3, &v123);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 9) + 232))
  {
    v116 = (_QWORD *)*((_QWORD *)this + 9);
    v6 = j;
    v125 = 0;
    v123 = 0u;
    v124 = 0u;
    v120 = 0;
    {
      v111 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v111, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v121 = mdm::Allocator::instance(void)::alloc;
    v122 = 0;
    v119 = &v120;
    v9 = v116[10];
    v8 = v116[11];
    v10 = v8 - v9;
    v113 = j;
    if (v8 != v9)
    {
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 48, 8);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 16) = &v120;
      v120 = (uint64_t *)v11;
      if (*v119)
        v119 = (uint64_t **)*v119;
      *(_BYTE *)(v11 + 24) = 1;
      ++v122;
      *(_QWORD *)(v11 + 40) = v10 >> 3;
    }
    v112 = this;
    v115 = v6;
    v12 = (id *)v116[6];
    v13 = (id *)v116[7];
    if (v12 == v13)
    {
      v14 = 0;
      goto LABEL_42;
    }
    v14 = 0;
    while (1)
    {
      v15 = *v12;
      v16 = objc_msgSend(v15, "trafficFeatureType");
      v17 = v120;
      if (!v120)
      {
LABEL_12:
        v18 = objc_msgSend(v15, "trafficFeatureType");
        v19 = v18;
        v20 = v120;
        v21 = &v120;
        v22 = &v120;
        if (v120)
        {
          while (1)
          {
            while (1)
            {
              v22 = (uint64_t **)v20;
              v29 = v20[4];
              if (v18 >= v29)
                break;
              v20 = *v22;
              v21 = v22;
              if (!*v22)
                goto LABEL_25;
            }
            if (v29 >= v18)
              break;
            v20 = v22[1];
            if (!v20)
            {
              v21 = v22 + 1;
              goto LABEL_25;
            }
          }
          v30 = (uint64_t *)v22;
          v32 = 1;
        }
        else
        {
LABEL_25:
          v30 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, 48, 8);
          v30[4] = v19;
          v30[5] = 0;
          *v30 = 0;
          v30[1] = 0;
          v30[2] = (uint64_t)v22;
          *v21 = v30;
          v31 = v30;
          if (*v119)
          {
            v119 = (uint64_t **)*v119;
            v31 = *v21;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v120, v31);
          ++v122;
          v32 = 1;
        }
        goto LABEL_39;
      }
      while (1)
      {
        v23 = v17[4];
        if (v16 < v23)
          goto LABEL_15;
        if (v23 >= v16)
          break;
        ++v17;
LABEL_15:
        v17 = (uint64_t *)*v17;
        if (!v17)
          goto LABEL_12;
      }
      v24 = objc_msgSend(v15, "trafficFeatureType");
      v25 = v24;
      v26 = v120;
      v27 = &v120;
      v28 = &v120;
      if (v120)
      {
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v26;
            v33 = v26[4];
            if (v24 >= v33)
              break;
            v26 = *v28;
            v27 = v28;
            if (!*v28)
              goto LABEL_33;
          }
          if (v33 >= v24)
            break;
          v26 = v28[1];
          if (!v26)
          {
            v27 = v28 + 1;
            goto LABEL_33;
          }
        }
        v30 = (uint64_t *)v28;
      }
      else
      {
LABEL_33:
        v30 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, 48, 8);
        v30[4] = v25;
        v30[5] = 0;
        *v30 = 0;
        v30[1] = 0;
        v30[2] = (uint64_t)v28;
        *v27 = v30;
        v34 = v30;
        if (*v119)
        {
          v119 = (uint64_t **)*v119;
          v34 = *v27;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v120, v34);
        ++v122;
      }
      v32 = v30[5] + 1;
LABEL_39:
      v30[5] = v32;
      v35 = objc_msgSend(v15, "navigationState");
      v36 = objc_msgSend(v15, "navigationState");
      v14 |= v35 != 0;
      ++*((_QWORD *)&v123 + v36);

      if (++v12 == v13)
      {
LABEL_42:
        -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("RouteAnnotationSupport\n"));
        -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\tFeatureCount:%lu\n"), ((uint64_t)(v116[11] - v116[10]) >> 3) + ((uint64_t)(v116[7] - v116[6]) >> 3));
        v37 = (uint64_t *)v119;
        if (v119 != &v120)
        {
          do
          {
            +[VKTrafficFeature stringForFeatureType:](VKTrafficFeature, "stringForFeatureType:", v37[4]);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\t\t%@:%lu\n"), v38, v37[5]);

            v39 = (uint64_t *)v37[1];
            if (v39)
            {
              do
              {
                v40 = (uint64_t **)v39;
                v39 = (uint64_t *)*v39;
              }
              while (v39);
            }
            else
            {
              do
              {
                v40 = (uint64_t **)v37[2];
                v41 = *v40 == v37;
                v37 = (uint64_t *)v40;
              }
              while (!v41);
            }
            v37 = (uint64_t *)v40;
          }
          while (v40 != &v120);
        }
        if ((v14 & 1) != 0)
        {
          -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\tNavigationStates\n"));
          +[VKTrafficFeature stringForNavState:](VKTrafficFeature, "stringForNavState:", 0);
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = (void *)v42;
          if ((_QWORD)v123)
            -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\t\t%@:%lu\n"), v42, (_QWORD)v123);

          +[VKTrafficFeature stringForNavState:](VKTrafficFeature, "stringForNavState:", 1);
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = (void *)v44;
          if (*((_QWORD *)&v123 + 1))
            -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\t\t%@:%lu\n"), v44, *((_QWORD *)&v123 + 1));

          +[VKTrafficFeature stringForNavState:](VKTrafficFeature, "stringForNavState:", 2);
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = (void *)v46;
          if ((_QWORD)v124)
            -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\t\t%@:%lu\n"), v46, (_QWORD)v124);

          +[VKTrafficFeature stringForNavState:](VKTrafficFeature, "stringForNavState:", 3);
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = (void *)v48;
          if (*((_QWORD *)&v124 + 1))
            -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\t\t%@:%lu\n"), v48, *((_QWORD *)&v124 + 1));

          +[VKTrafficFeature stringForNavState:](VKTrafficFeature, "stringForNavState:", 4);
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = (void *)v50;
          if (v125)
            -[NSMutableString appendFormat:](v115, "appendFormat:", CFSTR("\t\t%@:%lu\n"), v50, v125);

        }
        a3[12].i32[0] = -1;
        v52 = (_QWORD *)v116[14];
        for (i = (_QWORD *)v116[15]; v52 != i; v52 += 2)
        {
          v54 = *v52;
          v118 = 0;
          v55 = (float *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v54 + 112))(v54, &v118);
          v56 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v55);
          v57 = *v116;
          v58 = v55[10];
          if (v58 == 3.4028e38)
            v58 = 0.0;
          v59 = v58;
          v60 = *(_OWORD *)v56;
          v61 = *(double *)(v56 + 8);
          v62 = v59 * *(float *)(v57 + 488);
          if (*(_BYTE *)(v57 + 448))
          {
            v63 = v62 * 0.0000000249532021;
          }
          else
          {
            v64 = *(double *)&v60 * 6.28318531;
            v65 = exp(v61 * 6.28318531 + -3.14159265);
            v66 = atan(v65) * 2.0 + -1.57079633;
            v67 = fmod(v64, 6.28318531);
            v68 = fmod(v67 + 6.28318531, 6.28318531) + -3.14159265;
            v69 = __sincos_stret(v66);
            v70 = 6378137.0 / sqrt(v69.__sinval * v69.__sinval * -0.00669437999 + 1.0);
            v71 = (v70 + v62) * v69.__cosval;
            v72 = __sincos_stret(v68);
            *(double *)&v60 = v71 * v72.__cosval;
            v61 = v71 * v72.__sinval;
            v63 = (v62 + v70 * 0.99330562) * v69.__sinval;
          }
          v73 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v57 + 1400), *(float64x2_t *)(v57 + 1304), *(double *)&v60), *(float64x2_t *)(v57 + 1336), v61), *(float64x2_t *)(v57 + 1368), v63), 1.0/ (*(double *)(v57 + 1424)+ *(double *)(v57 + 1328) * *(double *)&v60+ *(double *)(v57 + 1360) * v61+ *(double *)(v57 + 1392) * v63)));
          if (v73.f32[0] >= *(float *)(v57 + 1544)
            && v73.f32[0] < *(float *)(v57 + 1552)
            && v73.f32[1] >= *(float *)(v57 + 1548)
            && v73.f32[1] < *(float *)(v57 + 1556))
          {
            v114 = v73;
            v74 = (*(double (**)(_QWORD, float))(**(_QWORD **)(*(_QWORD *)(v57 + 168) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(v57 + 168) + 32), v73.f32[1]);
            v75 = vabdd_f64(v74, (*(double (**)(_QWORD))(*(_QWORD *)*v52 + 632))(*v52))
                / 0xFA;
            if (v75 >= 2)
              v75 = 2;
            v76 = dword_19FFB83E0[v75];
            a3[1] = v114;
            ggl::DebugConsole::drawSymbol(a3, v76);
          }
        }
        a3[12].i32[0] = -16776961;
        v77 = (id *)v116[10];
        v78 = (id *)v116[11];
        for (j = v113; v77 != v78; ++v77)
        {
          v79 = *v77;
          objc_msgSend(v79, "mercatorPoint");
          v82 = *v116;
          v84 = v83 * *(float *)(*v116 + 488);
          if (*(_BYTE *)(*v116 + 448))
          {
            v85 = v84 * 0.0000000249532021;
          }
          else
          {
            v86 = v80 * 6.28318531;
            v87 = exp(v81 * 6.28318531 + -3.14159265);
            v88 = atan(v87) * 2.0 + -1.57079633;
            v89 = fmod(v86, 6.28318531);
            v90 = fmod(v89 + 6.28318531, 6.28318531) + -3.14159265;
            v91 = __sincos_stret(v88);
            v92 = 6378137.0 / sqrt(v91.__sinval * v91.__sinval * -0.00669437999 + 1.0);
            v93 = (v92 + v84) * v91.__cosval;
            v94 = __sincos_stret(v90);
            v80 = v93 * v94.__cosval;
            v81 = v93 * v94.__sinval;
            v85 = (v84 + v92 * 0.99330562) * v91.__sinval;
          }
          v95 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v82 + 1400), *(float64x2_t *)(v82 + 1304), v80), *(float64x2_t *)(v82 + 1336), v81), *(float64x2_t *)(v82 + 1368), v85), 1.0/ (*(double *)(v82 + 1424)+ *(double *)(v82 + 1328) * v80+ *(double *)(v82 + 1360) * v81+ *(double *)(v82 + 1392) * v85)));
          if (v95.f32[0] >= *(float *)(v82 + 1544)
            && v95.f32[0] < *(float *)(v82 + 1552)
            && v95.f32[1] >= *(float *)(v82 + 1548)
            && v95.f32[1] < *(float *)(v82 + 1556))
          {
            a3[1] = v95;
            ggl::DebugConsole::drawSymbol(a3, 0);
          }

        }
        std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v119, v120);

        this = v112;
        break;
      }
    }
  }
  v96 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v96 + 249))
  {
    v97 = j;
    v98 = *(double **)(v96 + 8);
    v99 = v98[74];
    v100 = v98[72] * 6.28318531;
    v101 = exp(v98[73] * 6.28318531 + -3.14159265);
    v102 = atan(v101);
    v103 = fmod(v100, 6.28318531);
    v104 = fmod(v103 + 6.28318531, 6.28318531);
    -[NSMutableString appendString:](v97, "appendString:", CFSTR("RouteLineSupport:\n"));
    -[NSMutableString appendFormat:](v97, "appendFormat:", CFSTR("\tMapType:%d\n"), *(unsigned int *)(*(_QWORD *)(v96 + 8) + 3548));
    -[NSMutableString appendFormat:](v97, "appendFormat:", CFSTR("\tEye:%.8f,%.8f,%.2f\n"), v102 * 114.591559 + -90.0, v104 * 57.2957795 + -180.0, v99 * 40075017.0);
    -[NSMutableString appendFormat:](v97, "appendFormat:", CFSTR("\tWaypoints:%lu\n"), (uint64_t)(*(_QWORD *)(v96 + 96) - *(_QWORD *)(v96 + 88)) >> 4);
    v105 = *(_QWORD **)(v96 + 40);
    v106 = (_QWORD *)(v96 + 48);
    if (v105 != v106)
    {
      do
      {
        objc_msgSend((id)v105[4], "route");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v107, "uniqueRouteID");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSMutableString appendFormat:](v97, "appendFormat:", CFSTR("\tRoute:%@\n"), v108);

        -[NSMutableString appendFormat:](v97, "appendFormat:", CFSTR("\t\tClusteringZoomRange:%f-%f\n"), *(float *)(v105[5] + 280), *(float *)(v105[5] + 284));
        v109 = (_QWORD *)v105[1];
        if (v109)
        {
          do
          {
            v110 = v109;
            v109 = (_QWORD *)*v109;
          }
          while (v109);
        }
        else
        {
          do
          {
            v110 = (_QWORD *)v105[2];
            v41 = *v110 == (_QWORD)v105;
            v105 = v110;
          }
          while (!v41);
        }
        v105 = v110;
      }
      while (v110 != v106);
    }

  }
}

void sub_19F5D2BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28)
{
  void *v28;

  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&a27, a28);

  _Unwind_Resume(a1);
}

uint64_t md::MapNavLabeler::setLabelMode(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2 == 2;
  if (*(unsigned __int8 *)(result + 128) != v2)
  {
    v3 = result;
    *(_BYTE *)(result + 128) = v2;
    v4 = *(_QWORD *)(result + 64);
    if (*(unsigned __int8 *)(v4 + 252) != v2)
    {
      *(_BYTE *)(v4 + 252) = v2;
      if (a2 != 2)
        *(_QWORD *)(v4 + 224) = 0;
    }
    result = *(_QWORD *)(result + 688);
    if (*(unsigned __int8 *)(result + 136) != v2)
    {
      *(_BYTE *)(result + 136) = v2;
      result = md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)result);
      v2 = *(unsigned __int8 *)(v3 + 128);
    }
    if (!v2)
    {
      v5 = *(_QWORD *)(v3 + 64);
      if (*MEMORY[0x1E0D26A38] != *(_DWORD *)(v5 + 212)
        || vabds_f32(*(float *)(MEMORY[0x1E0D26A38] + 4), *(float *)(v5 + 216)) >= 0.00000011921)
      {
        *(_QWORD *)(v5 + 212) = *MEMORY[0x1E0D26A38];
        md::RouteLineSupport::resolveCurrentRouteLeg((md::RouteLineSupport *)v5);
      }
      objc_msgSend(*(id *)(v3 + 56), "clearSceneIsMemoryWarning:", 0);
      return md::LabelNavEtaLabeler::clearEtaFeatures(*(md::LabelNavEtaLabeler **)(v3 + 688));
    }
  }
  return result;
}

uint64_t md::MapNavLabeler::setNavMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 130) = a2;
  return result;
}

uint64_t md::MapNavLabeler::navMode(md::MapNavLabeler *this)
{
  return *((unsigned __int8 *)this + 130);
}

uint64_t md::MapNavLabeler::setRouteLabelBoundingRects(uint64_t a1, __int128 **a2)
{
  uint64_t result;

  result = a1 + 704;
  if ((__int128 **)result != a2)
    result = std::vector<md::LabelBoundingRect,geo::StdAllocator<md::LabelBoundingRect,mdm::Allocator>>::__assign_with_size[abi:nn180100]<md::LabelBoundingRect*,md::LabelBoundingRect*>(result, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_BYTE *)(a1 + 768) = 1;
  return result;
}

BOOL md::MapNavLabeler::isEtaActive(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 13) && *(_QWORD *)(*((_QWORD *)this + 86) + 24) != 0;
}

uint64_t md::MapNavLabeler::isNavHighZoomActive(md::MapNavLabeler *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this);
  if ((_DWORD)result)
    return *((unsigned __int8 *)this + 130) == 1;
  return result;
}

BOOL md::MapNavLabeler::isNavApplicationStateActive(md::MapNavLabeler *this)
{
  return (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 336) + 163) << 16 == 0x20000;
}

uint64_t md::MapNavLabeler::computeRoutePositionForPOI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];

  v3 = *(_QWORD *)(a1 + 24);
  v5[0] = &off_1E428BBF8;
  v5[1] = v3;
  v5[2] = a1;
  v5[3] = v3 + 440;
  v5[4] = a1 + 360;
  return objc_msgSend(*(id *)(a1 + 56), "computeRoutePositionForPOIAtPixel:currentPosition:context:", a2, a3, v5);
}

float md::MapNavLabeler::currentRoadSignOffset(id *this)
{
  double v2;
  int v3;

  if (((*((uint64_t (**)(id *))*this + 44))(this) & 1) != 0
    || (unint64_t)*(unsigned __int8 *)(*((_QWORD *)this[3] + 42) + 163) << 16 == 393216
    || (v3 = (*((uint64_t (**)(id *))*this + 47))(this), LODWORD(v2) = 0, v3))
  {
    objc_msgSend(this[7], "currentRoadSignPixelHeight", v2);
    *(float *)&v2 = *(float *)&v2 / *((float *)this[3] + 44);
  }
  return *(float *)&v2;
}

uint64_t md::MapNavLabeler::currentRouteLeg(md::MapNavLabeler *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 224);
}

uint64_t md::MapNavLabeler::isNavCameraDetached(md::MapNavLabeler *this)
{
  return *((unsigned __int8 *)this + 129);
}

double md::MapNavLabeler::routeUserOffsetInMeters(md::MapNavLabeler *this)
{
  return *((double *)this + 102);
}

void md::MapNavLabeler::resolveRouteLegWhen(const PolylineCoordinate **this@<X0>, PolylineCoordinate *a2@<X1>, md::RouteLineSupport *a3@<X8>)
{
  md::RouteLineSupport::resolveRouteLegWhen(a3, this[8], (unsigned int *)a2);
}

uint64_t md::MapNavLabeler::routeSupport(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t md::MapNavLabeler::routeUserOffset(md::MapNavLabeler *this)
{
  return (uint64_t)this + 808;
}

uint64_t md::MapNavLabeler::setRouteOverlayCache(uint64_t this, const md::RouteOverlayCache *a2)
{
  if (*(const md::RouteOverlayCache **)(this + 104) != a2)
  {
    *(_QWORD *)(this + 104) = a2;
    *(_QWORD *)(*(_QWORD *)(this + 688) + 104) = a2;
  }
  return this;
}

void md::MapNavLabeler::setTrafficFeatures(md::RouteAnnotationSupport **this, NSArray *a2)
{
  md::RouteAnnotationSupport::setTrafficFeatures(this[9], a2);
}

uint64_t md::MapNavLabeler::setCurrentLocationText(id *this, NSString *a2)
{
  return objc_msgSend(this[7], "setCurrentLocationText:", a2);
}

uint64_t md::MapNavLabeler::setIsNavCameraDetached(uint64_t this, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(this + 129) != a2)
  {
    *(_BYTE *)(this + 129) = a2;
    v2 = *(_QWORD *)(this + 24);
    v3 = atomic_load((unsigned __int8 *)(v2 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v2 + 136);
      if (v4)
      {
        this = *(_QWORD *)(v4 + 56);
        if (this)
        {
          v6 = v2;
          v5 = 9;
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)this + 48))(this, &v6, &v5);
        }
      }
    }
  }
  return this;
}

void md::MapNavLabeler::setRouteLine(md::MapNavLabeler *this, VKRouteLine *a2)
{
  md::RouteLineSupport *v3;
  VKRouteLine *v4;

  v4 = a2;
  v3 = (md::RouteLineSupport *)*((_QWORD *)this + 8);
  if (v3)
    md::RouteLineSupport::setRouteLine(v3, v4);

}

void sub_19F5D2FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::MapNavLabeler::routeAnnotationFeatures(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 9) + 112;
}

uint64_t md::MapNavLabeler::externalRouteWaypointFeatures(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 8) + 88;
}

uint64_t md::MapNavLabeler::externalRouteFeatures(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 8) + 288;
}

void md::MapNavLabeler::worldTraitsDidChange(md::MapNavLabeler *this)
{
  int v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 31);
  if (*((unsigned __int8 *)this + 828) != v1)
  {
    *((_BYTE *)this + 828) = v1;
    md::LabelNavEtaLabeler::clearETALabels(*((md::LabelNavEtaLabeler **)this + 86));
  }
}

BOOL `non-virtual thunk to'md::MapNavLabeler::isNavApplicationStateActive(md::MapNavLabeler *this)
{
  return (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 336) + 163) << 16 == 0x20000;
}

float `non-virtual thunk to'md::MapNavLabeler::currentRoadSignOffset(id *this)
{
  id *v2;
  double v3;
  int v4;

  v2 = this - 1;
  if (((*((uint64_t (**)(char *))*(this - 1) + 44))((char *)this - 8) & 1) != 0
    || (unint64_t)*(unsigned __int8 *)(*((_QWORD *)this[2] + 42) + 163) << 16 == 393216
    || (v4 = (*((uint64_t (**)(id *))*v2 + 47))(v2), LODWORD(v3) = 0, v4))
  {
    objc_msgSend(this[6], "currentRoadSignPixelHeight", v3);
    *(float *)&v3 = *(float *)&v3 / *((float *)this[2] + 44);
  }
  return *(float *)&v3;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::currentRouteLeg(md::MapNavLabeler *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 224);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::isNavCameraDetached(md::MapNavLabeler *this)
{
  return *((unsigned __int8 *)this + 121);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::routeUserOffset(md::MapNavLabeler *this)
{
  return (uint64_t)this + 800;
}

double `non-virtual thunk to'md::MapNavLabeler::routeUserOffsetInMeters(md::MapNavLabeler *this)
{
  return *((double *)this + 101);
}

void `non-virtual thunk to'md::MapNavLabeler::resolveRouteLegWhen(const PolylineCoordinate **this@<X0>, PolylineCoordinate *a2@<X1>, md::RouteLineSupport *a3@<X8>)
{
  md::RouteLineSupport::resolveRouteLegWhen(a3, this[7], (unsigned int *)a2);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::computeRoutePositionForPOI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];

  v3 = *(_QWORD *)(a1 + 16);
  v5[0] = &off_1E428BBF8;
  v5[1] = v3;
  v5[2] = a1 - 8;
  v5[3] = v3 + 440;
  v5[4] = a1 + 352;
  return objc_msgSend(*(id *)(a1 + 48), "computeRoutePositionForPOIAtPixel:currentPosition:context:", a2, a3, v5);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::setIsNavCameraDetached(uint64_t this, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(this + 121) != a2)
  {
    *(_BYTE *)(this + 121) = a2;
    v2 = *(_QWORD *)(this + 16);
    v3 = atomic_load((unsigned __int8 *)(v2 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v2 + 136);
      if (v4)
      {
        this = *(_QWORD *)(v4 + 56);
        if (this)
        {
          v6 = v2;
          v5 = 9;
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)this + 48))(this, &v6, &v5);
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::setRouteLabelBoundingRects(uint64_t a1, __int128 **a2)
{
  uint64_t result;

  result = a1 + 696;
  if ((__int128 **)result != a2)
    result = std::vector<md::LabelBoundingRect,geo::StdAllocator<md::LabelBoundingRect,mdm::Allocator>>::__assign_with_size[abi:nn180100]<md::LabelBoundingRect*,md::LabelBoundingRect*>(result, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_BYTE *)(a1 + 760) = 1;
  return result;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::setLabelMode(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2 == 2;
  if (*(unsigned __int8 *)(result + 120) != v2)
  {
    v3 = result;
    *(_BYTE *)(result + 120) = v2;
    v4 = *(_QWORD *)(result + 56);
    if (*(unsigned __int8 *)(v4 + 252) != v2)
    {
      *(_BYTE *)(v4 + 252) = v2;
      if (a2 != 2)
        *(_QWORD *)(v4 + 224) = 0;
    }
    result = *(_QWORD *)(result + 680);
    if (*(unsigned __int8 *)(result + 136) != v2)
    {
      *(_BYTE *)(result + 136) = v2;
      result = md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)result);
      v2 = *(unsigned __int8 *)(v3 + 120);
    }
    if (!v2)
    {
      v5 = *(_QWORD *)(v3 + 56);
      if (*MEMORY[0x1E0D26A38] != *(_DWORD *)(v5 + 212)
        || vabds_f32(*(float *)(MEMORY[0x1E0D26A38] + 4), *(float *)(v5 + 216)) >= 0.00000011921)
      {
        *(_QWORD *)(v5 + 212) = *MEMORY[0x1E0D26A38];
        md::RouteLineSupport::resolveCurrentRouteLeg((md::RouteLineSupport *)v5);
      }
      objc_msgSend(*(id *)(v3 + 48), "clearSceneIsMemoryWarning:", 0);
      return md::LabelNavEtaLabeler::clearEtaFeatures(*(md::LabelNavEtaLabeler **)(v3 + 680));
    }
  }
  return result;
}

void `non-virtual thunk to'md::MapNavLabeler::setRouteLine(md::MapNavLabeler *this, VKRouteLine *a2)
{
  md::RouteLineSupport *v3;
  VKRouteLine *v4;

  v4 = a2;
  v3 = (md::RouteLineSupport *)*((_QWORD *)this + 7);
  if (v3)
    md::RouteLineSupport::setRouteLine(v3, v4);

}

void sub_19F5D3318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::externalRouteFeatures(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 7) + 288;
}

void `non-virtual thunk to'md::MapNavLabeler::worldTraitsDidChange(md::MapNavLabeler *this)
{
  int v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 31);
  if (*((unsigned __int8 *)this + 812) != v1)
  {
    *((_BYTE *)this + 812) = v1;
    md::LabelNavEtaLabeler::clearETALabels(*((md::LabelNavEtaLabeler **)this + 84));
  }
}

uint64_t std::vector<md::LabelBoundingRect,geo::StdAllocator<md::LabelBoundingRect,mdm::Allocator>>::__assign_with_size[abi:nn180100]<md::LabelBoundingRect*,md::LabelBoundingRect*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t i;
  __int128 v26;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v9 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 4) >= a4)
  {
    v17 = (uint64_t *)(result + 8);
    v16 = *(_QWORD *)(result + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 4) >= a4)
    {
      for (i = *(_QWORD *)result; a2 != a3; a2 += 3)
      {
        v26 = *a2;
        *(_QWORD *)(i + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)i = v26;
        *(_DWORD *)(i + 24) = *((_DWORD *)a2 + 6);
        *(_DWORD *)(i + 28) = *((_DWORD *)a2 + 7);
        *(_DWORD *)(i + 32) = *((_DWORD *)a2 + 8);
        *(_DWORD *)(i + 36) = *((_DWORD *)a2 + 9);
        *(_BYTE *)(i + 40) = *((_BYTE *)a2 + 40);
        i += 48;
      }
      v24 = i - v9;
    }
    else
    {
      v18 = &a2[(v16 - v9) >> 4];
      if (v16 != v9)
      {
        do
        {
          v19 = *a2;
          *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v9 = v19;
          *(_DWORD *)(v9 + 24) = *((_DWORD *)a2 + 6);
          *(_DWORD *)(v9 + 28) = *((_DWORD *)a2 + 7);
          *(_DWORD *)(v9 + 32) = *((_DWORD *)a2 + 8);
          *(_DWORD *)(v9 + 36) = *((_DWORD *)a2 + 9);
          *(_BYTE *)(v9 + 40) = *((_BYTE *)a2 + 40);
          a2 += 3;
          v9 += 48;
        }
        while (a2 != v18);
        v9 = *v17;
      }
      v20 = v9;
      if (v18 != a3)
      {
        v21 = 0;
        do
        {
          if (v9 + v21 * 16)
          {
            v22 = v9 + v21 * 16;
            *(_QWORD *)v22 = *(_QWORD *)&v18[v21];
            *(_OWORD *)(v22 + 8) = *(__int128 *)((char *)&v18[v21] + 8);
            v23 = *(__int128 *)((char *)&v18[v21 + 1] + 8);
            *(_BYTE *)(v22 + 40) = BYTE8(v18[v21 + 2]);
            *(_OWORD *)(v22 + 24) = v23;
          }
          v21 += 3;
        }
        while (&v18[v21] != a3);
        v20 = v9 + v21 * 16;
      }
      v24 = v20 - v9;
    }
  }
  else
  {
    if (v9)
    {
      *(_QWORD *)(result + 8) = v9;
      (*(void (**)(_QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24));
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (a4 > 0x555555555555555)
      goto LABEL_32;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555)
LABEL_32:
      abort();
    v13 = 48 * v12;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v7 + 24) + 16))(*(_QWORD *)(v7 + 24), 48 * v12, 8);
    v9 = result;
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 8) = result;
    *(_QWORD *)(v7 + 16) = result + v13;
    v14 = result;
    if (a2 != a3)
    {
      v14 = result;
      do
      {
        if (v14)
        {
          *(_QWORD *)v14 = *(_QWORD *)a2;
          *(_OWORD *)(v14 + 8) = *(__int128 *)((char *)a2 + 8);
          v15 = *(__int128 *)((char *)a2 + 24);
          *(_BYTE *)(v14 + 40) = *((_BYTE *)a2 + 40);
          *(_OWORD *)(v14 + 24) = v15;
        }
        a2 += 3;
        v14 += 48;
      }
      while (a2 != a3);
    }
    v24 = v14 - result;
    v17 = (uint64_t *)(v7 + 8);
  }
  *v17 = v9 + v24;
  return result;
}

void md::NavContext::~NavContext(md::NavContext *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::NavLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB1D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::NavLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB1D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::NavLabelMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

float std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::AvoidanceRectWithPriority const*>,std::__wrap_iter<md::AvoidanceRectWithPriority const*>>(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;

  if (a5 < 1)
    return *(float *)&v17;
  v6 = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = (a2 - *a1) / 24;
  v11 = *a1 + 24 * v10;
  v12 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v9) >> 3)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * ((uint64_t)(v9 - v8) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v15, 4);
    else
      v16 = 0;
    v21 = v16 + 24 * v10;
    v22 = 24 * a5;
    v23 = v21 + 24 * a5;
    v24 = v21;
    do
    {
      if (v24)
      {
        v17 = *v6;
        *(_QWORD *)(v24 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v24 = v17;
      }
      v24 += 24;
      v6 = (__int128 *)((char *)v6 + 24);
      v22 -= 24;
    }
    while (v22);
    v25 = *a1;
    if (*a1 == v11)
    {
      v27 = v16 + 24 * v10;
    }
    else
    {
      v26 = v11;
      do
      {
        v27 = v21 - 24;
        v17 = *(_OWORD *)(v26 - 24);
        *(_QWORD *)(v21 - 8) = *(_QWORD *)(v26 - 8);
        *(_OWORD *)(v21 - 24) = v17;
        v26 -= 24;
        v21 -= 24;
      }
      while (v26 != v25);
    }
    for (i = a1[1]; v11 != i; v11 += 24)
    {
      v17 = *(_OWORD *)v11;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v23 = v17;
      v23 += 24;
    }
    v29 = *a1;
    *a1 = v27;
    a1[1] = v23;
    v30 = a1[2];
    a1[2] = v16 + 24 * v15;
    if (v29)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v29, v30 - v29);
    return *(float *)&v17;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
  {
    v18 = (__int128 *)((char *)a3 + 24 * a5);
    v20 = a1[1];
LABEL_34:
    v31 = v11 + 24 * a5;
    v32 = (__int128 *)(v20 - 24 * a5);
    v33 = v20;
    if ((unint64_t)v32 < v9)
    {
      v33 = v20;
      do
      {
        if (v33)
        {
          v17 = *v32;
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v32 + 2);
          *(_OWORD *)v33 = v17;
        }
        v32 = (__int128 *)((char *)v32 + 24);
        v33 += 24;
      }
      while ((unint64_t)v32 < v9);
    }
    a1[1] = v33;
    if (v20 != v31)
    {
      v34 = v20 - 12;
      v35 = 8 * ((v20 - v31) >> 3);
      do
      {
        *(_DWORD *)(v34 - 12) = *(_DWORD *)(v11 + v35 - 24);
        *(_DWORD *)(v34 - 8) = *(_DWORD *)(v11 + v35 - 20);
        *(_DWORD *)(v34 - 4) = *(_DWORD *)(v11 + v35 - 16);
        LODWORD(v17) = *(_DWORD *)(v11 + v35 - 12);
        *(_DWORD *)v34 = v17;
        v36 = *(_DWORD *)(v11 + v35 - 8);
        *(_BYTE *)(v34 + 8) = *(_BYTE *)(v11 + v35 - 4);
        *(_DWORD *)(v34 + 4) = v36;
        v34 -= 24;
        v35 -= 24;
      }
      while (v35);
    }
    if (v18 != a3)
    {
      do
      {
        *(_DWORD *)v11 = *(_DWORD *)v6;
        *(_DWORD *)(v11 + 4) = *((_DWORD *)v6 + 1);
        *(_DWORD *)(v11 + 8) = *((_DWORD *)v6 + 2);
        LODWORD(v17) = *((_DWORD *)v6 + 3);
        *(_DWORD *)(v11 + 12) = v17;
        v37 = *((_DWORD *)v6 + 4);
        *(_BYTE *)(v11 + 20) = *((_BYTE *)v6 + 20);
        *(_DWORD *)(v11 + 16) = v37;
        v6 = (__int128 *)((char *)v6 + 24);
        v11 += 24;
      }
      while (v6 != v18);
    }
    return *(float *)&v17;
  }
  v18 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v9 - v11) >> 3));
  if (v18 == a4)
  {
    v20 = a1[1];
  }
  else
  {
    v19 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v9 - v11) >> 3));
    v20 = a1[1];
    do
    {
      if (v20)
      {
        v17 = *v19;
        *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v20 = v17;
      }
      v19 = (__int128 *)((char *)v19 + 24);
      v20 += 24;
    }
    while (v19 != a4);
  }
  a1[1] = v20;
  if ((uint64_t)(v9 - v11) >= 1)
    goto LABEL_34;
  return *(float *)&v17;
}

void std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB138;
  return result;
}

void std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB138;
}

void std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsNavLayout", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB0F0;
  return result;
}

void std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB0F0;
}

void std::__function::__func<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0,std::allocator<md::MapNavLabeler::layoutForDisplay(md::LayoutContext const&)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsNavLayout", (const char *)&unk_1A0189141, v1, 2u);
  }

}

uint64_t *std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  void (***v2)(_QWORD, _QWORD);
  void (***v3)(_QWORD, _QWORD);
  void (***v4)(_QWORD, _QWORD);
  void (***v5)(_QWORD, _QWORD);
  void (***v6)(_QWORD, _QWORD);
  void (**v7)(_QWORD, uint64_t);
  BOOL v8;

  v2 = (void (***)(_QWORD, _QWORD))*a1;
  if (*a1)
  {
    v3 = (void (***)(_QWORD, _QWORD))a1[1];
    v4 = (void (***)(_QWORD, _QWORD))*a1;
    if (v3 != v2)
    {
      v5 = v3 - 3;
      v6 = v3 - 3;
      do
      {
        v7 = *v6;
        v6 -= 3;
        (*v7)(v5, (uint64_t)v4);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void (***)(_QWORD, _QWORD))*a1;
    }
    a1[1] = (uint64_t)v2;
    (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD), uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - (_QWORD)v4);
  }
  return a1;
}

uint64_t geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E10;

  return a1;
}

void geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E10;

  JUMPOUT(0x1A1AF4E00);
}

void md::RouteAnnotationSupport::~RouteAnnotationSupport(md::RouteAnnotationSupport *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = (uint64_t *)*((_QWORD *)this + 25);
  if (v2)
  {
    do
    {
      v3 = (uint64_t *)*v2;

      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v2, 32);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), v4, 8 * *((_QWORD *)this + 23));
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v5, *((_QWORD *)this + 20) - v5);
  }
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    v7 = *((_QWORD *)this + 15);
    v8 = *((_QWORD *)this + 14);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v8);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = *((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), v8, *((_QWORD *)this + 16) - v8);
  }
  v12 = *((_QWORD *)this + 10);
  if (v12)
  {
    v13 = *((_QWORD *)this + 11);
    v14 = *((_QWORD *)this + 10);
    if (v13 != v12)
    {
      do
      {
        v15 = *(void **)(v13 - 8);
        v13 -= 8;

      }
      while (v13 != v12);
      v14 = *((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v14, *((_QWORD *)this + 12) - v14);
  }
  v16 = *((_QWORD *)this + 6);
  if (v16)
  {
    v17 = *((_QWORD *)this + 7);
    v18 = *((_QWORD *)this + 6);
    if (v17 != v16)
    {
      do
      {
        v19 = *(void **)(v17 - 8);
        v17 -= 8;

      }
      while (v17 != v16);
      v18 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v18, *((_QWORD *)this + 8) - v18);
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *((_QWORD *)this + 1) = &off_1E42B53F0;

}

uint64_t *std::vector<md::RouteFeatureAnchorWithPixelBounds,geo::StdAllocator<md::RouteFeatureAnchorWithPixelBounds,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 32);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

VKLabelNavArtworkCache **std::unique_ptr<VKLabelNavArtworkCache>::~unique_ptr[abi:nn180100](VKLabelNavArtworkCache **a1)
{
  VKLabelNavArtworkCache *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    VKLabelNavArtworkCache::~VKLabelNavArtworkCache(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelNavEtaLabeler **std::unique_ptr<md::LabelNavEtaLabeler>::~unique_ptr[abi:nn180100](md::LabelNavEtaLabeler **a1)
{
  md::LabelNavEtaLabeler *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelNavEtaLabeler::~LabelNavEtaLabeler(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::LabelNavLayoutContext::~LabelNavLayoutContext(md::LabelNavLayoutContext *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 25));
  v2 = (_QWORD *)*((_QWORD *)this + 21);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    operator delete(v3);
}

md::RouteAnnotationSupport **std::unique_ptr<md::RouteAnnotationSupport>::~unique_ptr[abi:nn180100](md::RouteAnnotationSupport **a1)
{
  md::RouteAnnotationSupport *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::RouteAnnotationSupport::~RouteAnnotationSupport(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t geo::_retain_ptr<LabelNavRouteLabeler * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4ED0;

  return a1;
}

void geo::_retain_ptr<LabelNavRouteLabeler * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4ED0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninRoadFeature::MuninRoadFeature(uint64_t a1, uint64_t *a2, int a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;
  malloc_zone_t *zone;
  uint64_t v24;
  geo::read_write_lock *v25;
  const char *v26;
  malloc_zone_t *v27;
  uint64_t v28;
  geo::read_write_lock *v29;
  const char *v30;
  malloc_zone_t *v31;
  uint64_t v32;
  geo::read_write_lock *v33;
  const char *v34;
  malloc_zone_t *v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    *(_QWORD *)a1 = a2;
    v6 = (std::__shared_weak_count *)a2[1];
    if (v6 && (v6 = std::__shared_weak_count::lock(v6)) != 0)
      v7 = *a2;
    else
      v7 = 0;
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  {
    v20 = operator new();
    *(_QWORD *)(v20 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v20 + 24) = "VectorKitLabels";
    *(_OWORD *)(v20 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v20 = &off_1E42B5668;
    *(_QWORD *)(v20 + 8) = "VectorKitLabels";
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 120) = 0u;
    *(_OWORD *)(v20 + 136) = 0u;
    *(_OWORD *)(v20 + 152) = 0u;
    *(_OWORD *)(v20 + 168) = 0u;
    *(_OWORD *)(v20 + 184) = 0u;
    *(_OWORD *)(v20 + 200) = 0u;
    *(_OWORD *)(v20 + 216) = 0u;
    *(_OWORD *)(v20 + 232) = 0u;
    *(_QWORD *)(v20 + 248) = 0;
    *(_OWORD *)(v20 + 56) = 0u;
    v21 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v20 + 56), 0);
    if ((_DWORD)v21)
      geo::read_write_lock::logFailure(v21, (uint64_t)"initialization", v22);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v20 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v20 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v20;
  }
  v12 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  {
    v24 = operator new();
    *(_QWORD *)(v24 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v24 + 24) = "VectorKitLabels";
    *(_OWORD *)(v24 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v24 = &off_1E42B5668;
    *(_QWORD *)(v24 + 8) = "VectorKitLabels";
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    *(_OWORD *)(v24 + 136) = 0u;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_OWORD *)(v24 + 168) = 0u;
    *(_OWORD *)(v24 + 184) = 0u;
    *(_OWORD *)(v24 + 200) = 0u;
    *(_OWORD *)(v24 + 216) = 0u;
    *(_OWORD *)(v24 + 232) = 0u;
    *(_QWORD *)(v24 + 248) = 0;
    *(_OWORD *)(v24 + 56) = 0u;
    v25 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v24 + 56), 0);
    if ((_DWORD)v25)
      geo::read_write_lock::logFailure(v25, (uint64_t)"initialization", v26);
    v27 = malloc_create_zone(0, 0);
    *(_QWORD *)(v24 + 48) = v27;
    malloc_set_zone_name(v27, "VectorKitLabels");
    *(_QWORD *)(v24 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v24;
  }
  *(_QWORD *)(a1 + 80) = mdm::Allocator::instance(void)::alloc;
  {
    v28 = operator new();
    *(_QWORD *)(v28 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v28 + 24) = "VectorKitLabels";
    *(_OWORD *)(v28 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v28 = &off_1E42B5668;
    *(_QWORD *)(v28 + 8) = "VectorKitLabels";
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_OWORD *)(v28 + 120) = 0u;
    *(_OWORD *)(v28 + 136) = 0u;
    *(_OWORD *)(v28 + 152) = 0u;
    *(_OWORD *)(v28 + 168) = 0u;
    *(_OWORD *)(v28 + 184) = 0u;
    *(_OWORD *)(v28 + 200) = 0u;
    *(_OWORD *)(v28 + 216) = 0u;
    *(_OWORD *)(v28 + 232) = 0u;
    *(_QWORD *)(v28 + 248) = 0;
    *(_OWORD *)(v28 + 56) = 0u;
    v29 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v28 + 56), 0);
    if ((_DWORD)v29)
      geo::read_write_lock::logFailure(v29, (uint64_t)"initialization", v30);
    v31 = malloc_create_zone(0, 0);
    *(_QWORD *)(v28 + 48) = v31;
    malloc_set_zone_name(v31, "VectorKitLabels");
    *(_QWORD *)(v28 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v28;
  }
  v14 = mdm::Allocator::instance(void)::alloc;
  v42 = 0uLL;
  v43 = 0;
  {
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v32 + 24) = "VectorKitLabels";
    *(_OWORD *)(v32 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v32 = &off_1E42B5668;
    *(_QWORD *)(v32 + 8) = "VectorKitLabels";
    *(_OWORD *)(v32 + 72) = 0u;
    *(_OWORD *)(v32 + 88) = 0u;
    *(_OWORD *)(v32 + 104) = 0u;
    *(_OWORD *)(v32 + 120) = 0u;
    *(_OWORD *)(v32 + 136) = 0u;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_OWORD *)(v32 + 184) = 0u;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_OWORD *)(v32 + 232) = 0u;
    *(_QWORD *)(v32 + 248) = 0;
    *(_OWORD *)(v32 + 56) = 0u;
    v33 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v32 + 56), 0);
    if ((_DWORD)v33)
      geo::read_write_lock::logFailure(v33, (uint64_t)"initialization", v34);
    v35 = malloc_create_zone(0, 0);
    *(_QWORD *)(v32 + 48) = v35;
    malloc_set_zone_name(v35, "VectorKitLabels");
    *(_QWORD *)(v32 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v32;
  }
  v44 = mdm::Allocator::instance(void)::alloc;
  v16.n128_f64[0] = md::LabelFeature::textFromFeature(&v36, *(uint64_t **)a1, a3, (uint64_t)&v42, 0);
  v17 = v36;
  v18 = v37;
  if ((v37 & 0x8000000000000000) != 0)
  {
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_28;
    v38 = v14;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v36, (void *)v36, *((unint64_t *)&v36 + 1));
  }
  else
  {
    if (!HIBYTE(v37))
      goto LABEL_28;
    v38 = v14;
  }
  v41 = v44;
  if (SHIBYTE(v43) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(&v39, (void *)v42.n128_u64[0], v42.n128_u64[1]);
  }
  else
  {
    v39 = v42;
    v40 = v43;
  }
  if (*(char *)(a1 + 47) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFLL);
  *(_OWORD *)(a1 + 24) = v36;
  *(_QWORD *)(a1 + 40) = v37;
  HIBYTE(v37) = 0;
  LOBYTE(v36) = 0;
  if (*(char *)(a1 + 79) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL);
  v16 = v39;
  *(__n128 *)(a1 + 56) = v39;
  *(_QWORD *)(a1 + 72) = v40;
LABEL_28:
  if (SHIBYTE(v43) < 0)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(*(_QWORD *)v44 + 40))(v44, v42.n128_u64[0], v43 & 0x7FFFFFFFFFFFFFFFLL, v16);
    if ((v18 & 0x8000000000000000) == 0)
      return a1;
LABEL_32:
    (*(void (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v14 + 40))(v14, v17, v18 & 0x7FFFFFFFFFFFFFFFLL, v16);
    return a1;
  }
  if ((v18 & 0x8000000000000000) != 0)
    goto LABEL_32;
  return a1;
}

void sub_19F5D4C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (SHIBYTE(a11) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(a19) < 0)
    {
LABEL_5:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, a17, a19 & 0x7FFFFFFFFFFFFFFFLL);
      if ((v23 & 0x8000000000000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if (SHIBYTE(a19) < 0)
  {
    goto LABEL_5;
  }
  if ((v23 & 0x8000000000000000) == 0)
  {
LABEL_6:
    if (*(char *)(v20 + 79) < 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 40))(v22, v21, v23 & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(v20 + 79) < 0)
  {
LABEL_7:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 + 80) + 40))(*(_QWORD *)(v20 + 80), *(_QWORD *)(v20 + 56), *(_QWORD *)(v20 + 72) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*(char *)(v20 + 47) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_13;
  }
LABEL_12:
  if ((*(char *)(v20 + 47) & 0x80000000) == 0)
  {
LABEL_8:
    v25 = *(std::__shared_weak_count **)(v20 + 16);
    if (!v25)
      goto LABEL_18;
    goto LABEL_14;
  }
LABEL_13:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 40))(*(_QWORD *)(v20 + 48), *(_QWORD *)(v20 + 24), *(_QWORD *)(v20 + 40) & 0x7FFFFFFFFFFFFFFFLL);
  v25 = *(std::__shared_weak_count **)(v20 + 16);
  if (!v25)
    goto LABEL_18;
LABEL_14:
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_19F5D4EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5D5174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  void *v15;

  v13 = v12;
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19F5D52D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F5D5384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

uint64_t ggl::VertexDataTyped<ggl::EarthCorona::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::EarthCorona::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::EarthCorona::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::EarthCorona::BaseMesh::~BaseMesh(ggl::EarthCorona::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::EarthCorona::BaseMesh::~BaseMesh(ggl::EarthCorona::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::EarthCorona::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::EarthCorona::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::EarthCorona::BasePipelineState::~BasePipelineState(ggl::EarthCorona::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::EarthCorona::BasePipelineState::BasePipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::EarthCoronaShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::EarthCorona::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::attributesReflection(void)::r;
            unk_1EE576160 = 1;
          }
          ggl::EarthCorona::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE5875C8 = &ggl::EarthCorona::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE5875D0 = 0;
          if ((v23 & 1) == 0
          {
            ggl::EarthCorona::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::EarthCorona::Base::reflection(void)::reflection;
          }
          qword_1EE5875D8 = (uint64_t)&ggl::EarthCorona::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EE5875E0 = vdupq_n_s64(1uLL);
        }
      }
      ggl::EarthCorona::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::EarthCorona::BasePipelineSetup::typedReflection(void)::ref;
      ggl::EarthCoronaShader::typedReflection(v18);
      qword_1EE587570 = (uint64_t)&ggl::EarthCoronaShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::EarthCorona::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE587600 = 0;
        qword_1EE587608 = (uint64_t)"";
        dword_1EE587610 = 0;
        qword_1EE587618 = (uint64_t)&ggl::EarthCorona::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE587620 = 1;
      }
      qword_1EE587578 = (uint64_t)&ggl::EarthCorona::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1EE587580 = 1;
      qword_1EE587588 = 0;
      unk_1EE587590 = 1;
      qword_1EE587598 = (uint64_t)&ggl::EarthCorona::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EE5875A0 = 0;
      if ((v21 & 1) == 0
      {
        ggl::EarthCorona::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE587640 = 0;
        qword_1EE587648 = (uint64_t)"base";
        dword_1EE587650 = 3;
        qword_1EE587658 = (uint64_t)&ggl::EarthCorona::pipelineStateBasePipelineConstantBaseBinding(void)::reflection;
        unk_1EE587660 = 7;
      }
      qword_1EE5875A8 = (uint64_t)&ggl::EarthCorona::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1EE5875B0 = 1;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::EarthCorona::BasePipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42B5BB0;
  return a1;
}

void ggl::EarthCorona::BasePipelineSetup::~BasePipelineSetup(ggl::EarthCorona::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::EarthCorona::BasePipelineSetup::constantDataIsEnabled(ggl::EarthCorona::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::EarthCorona::BasePipelineSetup::textureIsEnabled(ggl::EarthCorona::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t altitude::GEOTileDataPrivate::vectorTile(altitude::GEOTileDataPrivate *this)
{
  return *((_QWORD *)this + 5);
}

_DWORD *altitude::GEOTileDataPrivate::geoTileKey@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;

  v2 = this[6];
  v3 = this[8];
  v4 = (1 << v2) + ~this[7];
  *(_BYTE *)a2 = -1;
  *(_BYTE *)(a2 + 1) = v2;
  *(_DWORD *)(a2 + 4) = v4;
  *(_DWORD *)(a2 + 8) = v3;
  return this;
}

unint64_t altitude::GEOTileDataPrivate::altitudeTileKey(altitude::GEOTileDataPrivate *this)
{
  return *((unsigned int *)this + 8) | ((unint64_t)*((unsigned int *)this + 7) << 32);
}

void altitude::GEOTileDataPrivate::~GEOTileDataPrivate(altitude::GEOTileDataPrivate *this)
{
  altitude::GEOTileDataPrivate::~GEOTileDataPrivate(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = off_1E42C53B0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 5) = 0;

  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v12)
      return;
  }
  else
  {
LABEL_17:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

BOOL VKLocationCoordinate2DIsValid(double a1, double a2)
{
  _BOOL4 v2;

  v2 = a1 <= 90.0;
  if (a1 < -90.0)
    v2 = 0;
  if (a2 > 180.0)
    v2 = 0;
  return a2 >= -180.0 && v2;
}

double VKPointForVKLocationCoordinate2D(double a1, double a2)
{
  long double v3;

  v3 = tan(a1 * 0.00872664626 + 0.785398163);
  log(v3);
  return a2 * 0.00277777778 + 0.5;
}

long double VKLocationCoordinate2DForVKPoint(double a1, double a2)
{
  double v2;
  long double v3;

  if (a2 > 1.0)
  {
    v2 = floor(a2);
LABEL_5:
    a2 = a2 - v2;
    goto LABEL_6;
  }
  if (a2 < 0.0)
  {
    v2 = ceil(a2);
    a2 = a2 + 1.0;
    goto LABEL_5;
  }
LABEL_6:
  v3 = exp(a2 * -6.28318531 + 3.14159265);
  return atan(v3) * -114.591559 + 90.0;
}

double VKWorldBoundsFromGEOTileKey(uint64_t a1, unint64_t a2)
{
  __int128 v3;

  *(_QWORD *)&v3 = a1;
  BYTE8(v3) = a2;
  return 1.0
       / (double)(1 << SBYTE6(a1))
       * (double)(((*(_QWORD *)((char *)&v3 + 1) >> 46) | ((a2 >> 8) << 18)) & 0x3FFFFFF);
}

uint64_t VKPointInPolygon(float *a1, unint64_t a2, double a3, double a4)
{
  uint64_t v5;
  unsigned int v6;
  double v7;
  int v8;
  int v9;
  int v10;
  float *v11;
  int v12;
  int v13;
  uint64_t v14;
  float *v15;
  float v16;
  double v17;
  int v18;

  if (a2 < 2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = a1[1];
  if (v7 <= a4)
    v8 = 3;
  else
    v8 = 0;
  if (v7 > a4)
    v9 = 1;
  else
    v9 = 2;
  if (*a1 <= a3)
    v10 = v9;
  else
    v10 = v8;
  v11 = a1;
  do
  {
    v13 = v10;
    if (a2 - 1 == v5)
      v14 = 0;
    else
      v14 = v5 + 1;
    v15 = &a1[2 * v14];
    v16 = v15[1];
    v17 = *v15;
    if (v16 <= a4)
      v10 = 3;
    else
      v10 = 0;
    if (v16 > a4)
      v18 = 1;
    else
      v18 = 2;
    if (v17 <= a3)
      v10 = v18;
    v12 = v10 - v13;
    switch(v12)
    {
      case -3:
        v12 = 1;
        break;
      case -2:
      case 2:
        if (v17 + (a4 - v16) * (float)((float)(*v11 - *v15) / (float)(v11[1] - v16)) > a3)
          v12 = -v12;
        break;
      case 3:
        v12 = -1;
        break;
      default:
        break;
    }
    v6 += v12;
    ++v5;
    v11 = v15;
  }
  while (a2 != v5);
  return (v6 >> 2) & 1;
}

void std::__function::__func<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0,std::allocator<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0,std::allocator<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427C270;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0,std::allocator<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427C270;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0,std::allocator<md::ita::PrepareStyleConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &)>::operator()(uint64_t a1, double a2, double a3, double _D2, uint64_t a5, double **a6, unint64_t *a7)
{
  double *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int16 *v33;
  uint64_t v50;
  void **v51;
  float *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  _QWORD **v58;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  float64x2_t *v84;
  unint64_t v85;
  double v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  float64x2_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  float64x2_t *v95;
  double v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  float64x2_t v100;
  float64x2_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  __int128 *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint8x8_t v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  float v130;
  float v131;
  _BOOL8 v132;
  unint64_t v133;
  unint64_t v134;
  size_t prime;
  unint64_t v136;
  uint8x8_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  float v145;
  float v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  float v151;
  float v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint8x8_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  float v163;
  float v164;
  _BOOL8 v165;
  unint64_t v166;
  unint64_t v167;
  size_t v168;
  void *v169;
  void *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  size_t v174;
  size_t v175;
  size_t v176;
  _QWORD *v177;
  size_t v178;
  uint64_t v179;
  unint64_t v180;
  uint8x8_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  size_t v185;
  void *v186;
  _QWORD *v187;
  uint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  uint8x8_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  float v197;
  float v198;
  _BOOL8 v199;
  unint64_t v200;
  unint64_t v201;
  size_t v202;
  void *v203;
  void *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  size_t v208;
  size_t v209;
  size_t v210;
  _QWORD *v211;
  size_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint8x8_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  size_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  unint64_t v232;
  uint8x8_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  float v242;
  float v243;
  _BOOL8 v244;
  unint64_t v245;
  unint64_t v246;
  size_t v247;
  void *v248;
  void *v249;
  uint64_t v250;
  _QWORD *v251;
  size_t v252;
  size_t v253;
  size_t v254;
  _QWORD *v255;
  size_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint8x8_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  size_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  double v273[16];
  float64x2_t v274;
  double v275;
  float64x2_t v276;
  double v277;
  float64x2_t v278;
  double v279;
  float64x2_t v280;
  double v281;

  v8 = *a6;
  v9 = **(_QWORD ***)(a1 + 8);
  v10 = *a7;
  v11 = *a7;
  v12 = v9[195];
  if (v11 < (v9[196] - v12) >> 3
    && ((v13 = *(_QWORD *)(v12 + 8 * v11)) != 0 ? (_ZF = HIDWORD(v10) == HIDWORD(v13)) : (_ZF = 0), _ZF))
  {
    v16 = v9[198] + 20 * v13;
    v15 = v9[199];
  }
  else
  {
    v15 = v9[199];
    v16 = v15;
  }
  if (v16 == v15)
    v17 = 0;
  else
    v17 = (float *)v16;
  if (v17)
  {
    v18 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v9 + 182), v10, a7);
    ++v18[3];
  }
  if (*(_BYTE *)v17)
  {
    v19 = *(_QWORD *)(a1 + 16);
LABEL_19:
    LODWORD(_D2) = *(_DWORD *)v19;
    _H8 = *(_WORD *)(v19 + 4);
    goto LABEL_20;
  }
  if (!**(_BYTE **)(a1 + 32) || !v8 || !**(_BYTE **)(a1 + 40))
  {
    v19 = *(_QWORD *)(a1 + 48);
    goto LABEL_19;
  }
  v20 = v8[3];
  v21 = v8[4];
  v22 = v8[5];
  v23 = v8[6];
  v24 = v21 + v21;
  v25 = (v21 + v21) * v21;
  v26 = (v22 + v22) * v22;
  v27 = v20 + v20;
  v28 = (v20 + v20) * v21;
  v29 = (v22 + v22) * v23;
  v30 = v22 * (v20 + v20);
  v31 = 1.0 - (v20 + v20) * v20;
  v32 = v24 * v22;
  v273[0] = 1.0 - (v25 + v26);
  v273[1] = v29 + v28;
  v273[4] = v28 - v29;
  v273[5] = v31 - v26;
  v273[8] = v23 * v24 + v30;
  v273[9] = v32 - v23 * v27;
  v273[2] = v30 - v23 * v24;
  v273[6] = v23 * v27 + v32;
  v273[10] = v31 - v25;
  v273[3] = 0.0;
  v273[7] = 0.0;
  memset(&v273[11], 0, 32);
  v273[15] = 1.0;
  gm::Matrix<double,4,4>::inverted<int,void>(v274.f64, v273);
  v33 = *(__int16 **)(a1 + 48);
  _H0 = *v33;
  __asm { FCVT            D0, H0 }
  _H1 = v33[1];
  __asm { FCVT            D1, H1 }
  _H2 = v33[2];
  __asm { FCVT            D2, H2 }
  _H3 = v33[3];
  __asm { FCVT            D3, H3 }
  _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, _D0), v276, _D1), v278, _D2), v280, _D3);
  _D0 = v275 * _D0 + v277 * _D1 + v279 * _D2 + v281 * _D3;
  _D1 = _Q4.f64[1];
  __asm
  {
    FCVT            H1, D1
    FCVT            H2, D4
  }
  WORD1(_D2) = LOWORD(_D1);
  __asm { FCVT            H8, D0 }
LABEL_20:
  _S9 = **(_DWORD **)(a1 + 24);
  __asm { FCVT            S0, H8 }
  v272 = LODWORD(_D2);
  *(_QWORD *)(v17 + 1) = vcvtq_f32_f16(*(float16x4_t *)&_D2).u64[0];
  *((_DWORD *)v17 + 3) = _S0;
  *((_DWORD *)v17 + 4) = _S9;
  v50 = **(_QWORD **)(a1 + 8);
  v51 = (void **)(v50 + 1376);
  v52 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>((_QWORD *)(v50 + 1376), v17);
  if (v52)
  {
    v53 = *((_QWORD *)v52 + 5);
    if (v53)
    {
      v274.f64[0] = *((float64_t *)v52 + 5);
      v54 = *(_QWORD *)(v50 + 1264);
      if (v53 >= (unint64_t)((*(_QWORD *)(v50 + 1272) - v54) >> 3))
        return;
      v55 = *(_QWORD *)(v54 + 8 * v53);
      if (!v55 || HIDWORD(v53) != HIDWORD(v55))
        return;
      v57 = *(_QWORD *)(v50 + 1288);
      v58 = (_QWORD **)(v57 + 24 * v55);
      if (v58 == *(_QWORD ***)(v50 + 1296) || v57 == 0)
        return;
      v60 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>> const&>,std::tuple<>>(v50 + 1160, v53, &v274);
      ++v60[3];
      v61 = *v58;
      if (!v61)
        return;
LABEL_375:
      v234 = v61[1];
      v235 = v61[9];
      __asm { FCVT            H0, S9 }
      *(_DWORD *)v235 = v272;
      *(_WORD *)(v235 + 4) = _H8;
      *(_WORD *)(v235 + 6) = _H0;
      if (v61[8] > v234)
        v234 = v61[8];
      v61[7] = 0;
      v61[8] = v234;
      return;
    }
  }
  v274 = 0uLL;
  v275 = 0.0;
  v62 = *(_QWORD *)(v50 + 1248);
  if (*(_QWORD *)(v50 + 1240) == v62)
  {
    v65 = (-1431655765 * ((*(_QWORD *)(v50 + 1296) - *(_QWORD *)(v50 + 1288)) >> 3)) | 0x100000000;
    v66 = *(uint64_t **)(v50 + 1272);
    v67 = *(_QWORD *)(v50 + 1280);
    if ((unint64_t)v66 >= v67)
    {
      v69 = *(char **)(v50 + 1264);
      v70 = ((char *)v66 - v69) >> 3;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 61)
        goto LABEL_469;
      v72 = v67 - (_QWORD)v69;
      if (v72 >> 2 > v71)
        v71 = v72 >> 2;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        if (v73 >> 61)
          goto LABEL_468;
        v74 = (char *)operator new(8 * v73);
      }
      else
      {
        v74 = 0;
      }
      v75 = (uint64_t *)&v74[8 * v70];
      v76 = &v74[8 * v73];
      *v75 = v65;
      v68 = v75 + 1;
      if (v66 != (uint64_t *)v69)
      {
        v77 = (char *)v66 - v69 - 8;
        if (v77 < 0x58)
          goto LABEL_472;
        if ((unint64_t)(v69 - v74) < 0x20)
          goto LABEL_472;
        v78 = (v77 >> 3) + 1;
        v79 = &v74[8 * v70 - 16];
        v80 = v66 - 2;
        v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *(_OWORD *)v80;
          *((_OWORD *)v79 - 1) = *((_OWORD *)v80 - 1);
          *(_OWORD *)v79 = v82;
          v79 -= 32;
          v80 -= 4;
          v81 -= 4;
        }
        while (v81);
        v75 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
        v66 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_472:
          do
          {
            v83 = *--v66;
            *--v75 = v83;
          }
          while (v66 != (uint64_t *)v69);
        }
        v66 = *(uint64_t **)(v50 + 1264);
      }
      *(_QWORD *)(v50 + 1264) = v75;
      *(_QWORD *)(v50 + 1272) = v68;
      *(_QWORD *)(v50 + 1280) = v76;
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v66 = v65;
      v68 = v66 + 1;
    }
    *(_QWORD *)(v50 + 1272) = v68;
    v64 = *(v68 - 1);
  }
  else
  {
    v63 = *(_QWORD *)(v62 - 8);
    *(_QWORD *)(v50 + 1248) = v62 - 8;
    *(_DWORD *)(*(_QWORD *)(v50 + 1264) + 8 * v63) = -1431655765
                                                   * ((*(_QWORD *)(v50 + 1296) - *(_QWORD *)(v50 + 1288)) >> 3);
    *(_DWORD *)(*(_QWORD *)(v50 + 1264) + 8 * v63 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v50 + 1264)
                                                                                             + 8 * v63
                                                                                             + 4) << 32)
                                                        + 0x100000000) >> 32;
    v64 = v63 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v50 + 1264) + 8 * v63 + 4) << 32);
  }
  v84 = *(float64x2_t **)(v50 + 1296);
  v85 = *(_QWORD *)(v50 + 1304);
  if ((unint64_t)v84 >= v85)
  {
    v90 = *(float64x2_t **)(v50 + 1288);
    v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v90) >> 3) + 1;
    if (v91 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_469;
    v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v90) >> 3);
    if (2 * v92 > v91)
      v91 = 2 * v92;
    if (v92 >= 0x555555555555555)
      v93 = 0xAAAAAAAAAAAAAAALL;
    else
      v93 = v91;
    if (v93 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_468;
    v94 = (char *)operator new(24 * v93);
    v95 = (float64x2_t *)&v94[8 * (((char *)v84 - (char *)v90) >> 3)];
    *v95 = v274;
    v96 = v275;
    v95[1].f64[0] = v275;
    if (v96 != 0.0)
    {
      v97 = (unint64_t *)(*(_QWORD *)&v96 + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      v84 = *(float64x2_t **)(v50 + 1296);
      v90 = *(float64x2_t **)(v50 + 1288);
    }
    v99 = &v94[24 * v93];
    v89 = (char *)&v95[1].f64[1];
    if (v84 == v90)
    {
      *(_QWORD *)(v50 + 1288) = v95;
      *(_QWORD *)(v50 + 1296) = v89;
      *(_QWORD *)(v50 + 1304) = v99;
    }
    else
    {
      do
      {
        v100 = *(float64x2_t *)((char *)v84 - 24);
        v84 = (float64x2_t *)((char *)v84 - 24);
        *(float64x2_t *)((char *)v95 - 24) = v100;
        v95 = (float64x2_t *)((char *)v95 - 24);
        v95[1].f64[0] = v84[1].f64[0];
        v84->f64[1] = 0.0;
        v84[1].f64[0] = 0.0;
      }
      while (v84 != v90);
      v90 = *(float64x2_t **)(v50 + 1288);
      v101 = *(float64x2_t **)(v50 + 1296);
      *(_QWORD *)(v50 + 1288) = v95;
      *(_QWORD *)(v50 + 1296) = v89;
      *(_QWORD *)(v50 + 1304) = v99;
      while (v101 != v90)
      {
        v102 = *(std::__shared_weak_count **)&v101[-1].f64[1];
        if (v102)
        {
          p_shared_owners = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldaxr(p_shared_owners);
          while (__stlxr(v104 - 1, p_shared_owners));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        v101 = (float64x2_t *)((char *)v101 - 24);
      }
    }
    if (v90)
      operator delete(v90);
  }
  else
  {
    *v84 = v274;
    v86 = v275;
    v84[1].f64[0] = v275;
    if (v86 != 0.0)
    {
      v87 = (unint64_t *)(*(_QWORD *)&v86 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v89 = (char *)&v84[1].f64[1];
  }
  *(_QWORD *)(v50 + 1296) = v89;
  v105 = *(_QWORD *)(v50 + 1320);
  v106 = *(_QWORD *)(v50 + 1328);
  if (v105 < v106)
  {
    *(_QWORD *)v105 = v64;
    v105 += 8;
    v107 = v105;
    goto LABEL_110;
  }
  v108 = *(_BYTE **)(v50 + 1312);
  v109 = (uint64_t)(v105 - (_QWORD)v108) >> 3;
  v110 = v109 + 1;
  if ((unint64_t)(v109 + 1) >> 61)
LABEL_469:
    abort();
  v111 = v106 - (_QWORD)v108;
  if (v111 >> 2 > v110)
    v110 = v111 >> 2;
  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
    v112 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v112 = v110;
  if (v112)
  {
    if (v112 >> 61)
      goto LABEL_468;
    v113 = operator new(8 * v112);
  }
  else
  {
    v113 = 0;
  }
  v114 = &v113[8 * v109];
  v115 = &v113[8 * v112];
  *v114 = v64;
  v107 = (unint64_t)(v114 + 1);
  if ((_BYTE *)v105 != v108)
  {
    v116 = v105 - (_QWORD)v108 - 8;
    if (v116 < 0x58)
      goto LABEL_473;
    if ((unint64_t)(v108 - v113) < 0x20)
      goto LABEL_473;
    v117 = (v116 >> 3) + 1;
    v118 = &v113[8 * v109 - 16];
    v119 = (__int128 *)(v105 - 16);
    v120 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v121 = *v119;
      *(v118 - 1) = *(v119 - 1);
      *v118 = v121;
      v118 -= 2;
      v119 -= 2;
      v120 -= 4;
    }
    while (v120);
    v114 -= v117 & 0x3FFFFFFFFFFFFFFCLL;
    v105 -= 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_473:
      do
      {
        v122 = *(_QWORD *)(v105 - 8);
        v105 -= 8;
        *--v114 = v122;
      }
      while ((_BYTE *)v105 != v108);
    }
  }
  *(_QWORD *)(v50 + 1312) = v114;
  *(_QWORD *)(v50 + 1320) = v107;
  *(_QWORD *)(v50 + 1328) = v115;
  if (v108)
    operator delete(v108);
LABEL_110:
  v123 = (uint64_t *)(v50 + 1160);
  *(_QWORD *)(v50 + 1320) = v107;
  v124 = *(_QWORD *)(v50 + 1168);
  if (v124)
  {
    v125 = (uint8x8_t)vcnt_s8((int8x8_t)v124);
    v125.i16[0] = vaddlv_u8(v125);
    if (v125.u32[0] > 1uLL)
    {
      v107 = v64;
      if (v64 >= v124)
        v107 = v64 % v124;
    }
    else
    {
      v107 = (v124 - 1) & v64;
    }
    v126 = *(_QWORD **)(*v123 + 8 * v107);
    if (v126)
    {
      v127 = (_QWORD *)*v126;
      if (v127)
      {
        if (v125.u32[0] < 2uLL)
        {
          while (1)
          {
            v129 = v127[1];
            if (v129 == v64)
            {
              if (v127[2] == v64)
                goto LABEL_169;
            }
            else if ((v129 & (v124 - 1)) != v107)
            {
              goto LABEL_131;
            }
            v127 = (_QWORD *)*v127;
            if (!v127)
              goto LABEL_131;
          }
        }
        do
        {
          v128 = v127[1];
          if (v128 == v64)
          {
            if (v127[2] == v64)
              goto LABEL_169;
          }
          else
          {
            if (v128 >= v124)
              v128 %= v124;
            if (v128 != v107)
              break;
          }
          v127 = (_QWORD *)*v127;
        }
        while (v127);
      }
    }
  }
LABEL_131:
  v105 = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)v105 = 0;
  *(_QWORD *)(v105 + 8) = v64;
  *(_QWORD *)(v105 + 16) = v64;
  *(_OWORD *)(v105 + 24) = xmmword_19FFB3350;
  *(_BYTE *)(v105 + 40) = 0;
  v130 = (float)(unint64_t)(*(_QWORD *)(v50 + 1184) + 1);
  v131 = *(float *)(v50 + 1192);
  if (!v124 || (float)(v131 * (float)v124) < v130)
  {
    v132 = 1;
    if (v124 >= 3)
      v132 = (v124 & (v124 - 1)) != 0;
    v133 = v132 | (2 * v124);
    v134 = vcvtps_u32_f32(v130 / v131);
    if (v133 <= v134)
      prime = v134;
    else
      prime = v133;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v124 = *(_QWORD *)(v50 + 1168);
    }
    if (prime > v124)
      goto LABEL_143;
    if (prime < v124)
    {
      v136 = vcvtps_u32_f32((float)*(unint64_t *)(v50 + 1184) / *(float *)(v50 + 1192));
      if (v124 < 3 || (v137 = (uint8x8_t)vcnt_s8((int8x8_t)v124), v137.i16[0] = vaddlv_u8(v137), v137.u32[0] > 1uLL))
      {
        v136 = std::__next_prime(v136);
      }
      else
      {
        v138 = 1 << -(char)__clz(v136 - 1);
        if (v136 >= 2)
          v136 = v138;
      }
      if (prime <= v136)
        prime = v136;
      if (prime < v124)
LABEL_143:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v50 + 1160, prime);
    }
    v124 = *(_QWORD *)(v50 + 1168);
    if ((v124 & (v124 - 1)) != 0)
    {
      if (v64 >= v124)
        v107 = v64 % v124;
      else
        v107 = v64;
    }
    else
    {
      v107 = (v124 - 1) & v64;
    }
  }
  v139 = *v123;
  v140 = *(unint64_t **)(*v123 + 8 * v107);
  if (v140)
  {
    *(_QWORD *)v105 = *v140;
LABEL_167:
    *v140 = v105;
    goto LABEL_168;
  }
  *(_QWORD *)v105 = *(_QWORD *)(v50 + 1176);
  *(_QWORD *)(v50 + 1176) = v105;
  *(_QWORD *)(v139 + 8 * v107) = v50 + 1176;
  if (*(_QWORD *)v105)
  {
    v141 = *(_QWORD *)(*(_QWORD *)v105 + 8);
    if ((v124 & (v124 - 1)) != 0)
    {
      if (v141 >= v124)
        v141 %= v124;
    }
    else
    {
      v141 &= v124 - 1;
    }
    v140 = (unint64_t *)(*v123 + 8 * v141);
    goto LABEL_167;
  }
LABEL_168:
  ++*(_QWORD *)(v50 + 1184);
LABEL_169:
  v142 = *(std::__shared_weak_count **)&v275;
  if (v275 != 0.0)
  {
    v143 = (unint64_t *)(*(_QWORD *)&v275 + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v17[1];
  v146 = v17[2];
  v147 = 0x9E3779B97F4A7C15;
  v148 = LODWORD(v145) - 0x61C8864680B583EBLL;
  if (v145 == 0.0)
    v148 = 0x9E3779B97F4A7C15;
  v149 = LODWORD(v146) - 0x61C8864680B583EBLL;
  if (v146 == 0.0)
    v149 = 0x9E3779B97F4A7C15;
  v150 = ((v148 >> 2) + (v148 << 6) + v149) ^ v148;
  v151 = v17[3];
  v152 = v17[4];
  v153 = LODWORD(v151) - 0x61C8864680B583EBLL;
  if (v151 == 0.0)
    v153 = 0x9E3779B97F4A7C15;
  v154 = (v153 + (v150 << 6) + (v150 >> 2)) ^ v150;
  if (v152 != 0.0)
    v147 = LODWORD(v152) - 0x61C8864680B583EBLL;
  v155 = (v147 + (v154 << 6) + (v154 >> 2)) ^ v154;
  v156 = *(_QWORD *)(v50 + 1384);
  if (v156)
  {
    v157 = (uint8x8_t)vcnt_s8((int8x8_t)v156);
    v157.i16[0] = vaddlv_u8(v157);
    if (v157.u32[0] > 1uLL)
    {
      v105 = (v147 + (v154 << 6) + (v154 >> 2)) ^ v154;
      if (v155 >= v156)
        v105 = v155 % v156;
    }
    else
    {
      v105 = v155 & (v156 - 1);
    }
    v158 = (uint64_t *)*((_QWORD *)*v51 + v105);
    if (v158)
    {
      v159 = *v158;
      if (*v158)
      {
        if (v157.u32[0] < 2uLL)
        {
          while (1)
          {
            v160 = *(_QWORD *)(v159 + 8);
            if (v160 == v155)
            {
              if (vabds_f32(*(float *)(v159 + 20), v145) < 0.000001
                && vabds_f32(*(float *)(v159 + 24), v146) < 0.000001
                && vabds_f32(*(float *)(v159 + 28), v151) < 0.000001
                && vabds_f32(*(float *)(v159 + 32), v152) < 0.000001)
              {
                goto LABEL_278;
              }
            }
            else if ((v160 & (v156 - 1)) != v105)
            {
              goto LABEL_211;
            }
            v159 = *(_QWORD *)v159;
            if (!v159)
              goto LABEL_211;
          }
        }
        do
        {
          v161 = *(_QWORD *)(v159 + 8);
          if (v161 == v155)
          {
            if (vabds_f32(*(float *)(v159 + 20), v145) < 0.000001
              && vabds_f32(*(float *)(v159 + 24), v146) < 0.000001
              && vabds_f32(*(float *)(v159 + 28), v151) < 0.000001
              && vabds_f32(*(float *)(v159 + 32), v152) < 0.000001)
            {
              goto LABEL_278;
            }
          }
          else
          {
            if (v161 >= v156)
              v161 %= v156;
            if (v161 != v105)
              break;
          }
          v159 = *(_QWORD *)v159;
        }
        while (v159);
      }
    }
  }
LABEL_211:
  v159 = (uint64_t)operator new(0x30uLL);
  *(_QWORD *)v159 = 0;
  *(_QWORD *)(v159 + 8) = v155;
  v162 = *((_DWORD *)v17 + 4);
  *(_OWORD *)(v159 + 16) = *(_OWORD *)v17;
  *(_DWORD *)(v159 + 32) = v162;
  *(_QWORD *)(v159 + 40) = 0;
  v163 = (float)(unint64_t)(*(_QWORD *)(v50 + 1400) + 1);
  v164 = *(float *)(v50 + 1408);
  if (!v156 || (float)(v164 * (float)v156) < v163)
  {
    v165 = 1;
    if (v156 >= 3)
      v165 = (v156 & (v156 - 1)) != 0;
    v166 = v165 | (2 * v156);
    v167 = vcvtps_u32_f32(v163 / v164);
    if (v166 <= v167)
      v168 = v167;
    else
      v168 = v166;
    if (v168 == 1)
    {
      v168 = 2;
    }
    else if ((v168 & (v168 - 1)) != 0)
    {
      v168 = std::__next_prime(v168);
      v156 = *(_QWORD *)(v50 + 1384);
    }
    if (v168 <= v156)
    {
      if (v168 >= v156)
        goto LABEL_263;
      v180 = vcvtps_u32_f32((float)*(unint64_t *)(v50 + 1400) / *(float *)(v50 + 1408));
      if (v156 < 3 || (v181 = (uint8x8_t)vcnt_s8((int8x8_t)v156), v181.i16[0] = vaddlv_u8(v181), v181.u32[0] > 1uLL))
      {
        v180 = std::__next_prime(v180);
      }
      else
      {
        v182 = 1 << -(char)__clz(v180 - 1);
        if (v180 >= 2)
          v180 = v182;
      }
      if (v168 <= v180)
        v168 = v180;
      if (v168 >= v156)
        goto LABEL_263;
      if (!v168)
      {
        v186 = *v51;
        *v51 = 0;
        if (v186)
          operator delete(v186);
        *(_QWORD *)(v50 + 1384) = 0;
        goto LABEL_263;
      }
    }
    if (v168 >> 61)
      goto LABEL_468;
    v169 = operator new(8 * v168);
    v170 = *v51;
    *v51 = v169;
    if (v170)
      operator delete(v170);
    v171 = 0;
    *(_QWORD *)(v50 + 1384) = v168;
    do
      *((_QWORD *)*v51 + v171++) = 0;
    while (v168 != v171);
    v172 = *(_QWORD **)(v50 + 1392);
    if (!v172)
      goto LABEL_263;
    v173 = v50 + 1392;
    v174 = v172[1];
    v175 = v168 - 1;
    if ((v168 & (v168 - 1)) == 0)
    {
      v176 = v174 & v175;
      *((_QWORD *)*v51 + v176) = v173;
      while (1)
      {
        v177 = (_QWORD *)*v172;
        if (!*v172)
          break;
        v178 = v177[1] & v175;
        if (v178 == v176)
        {
          v172 = (_QWORD *)*v172;
        }
        else if (*((_QWORD *)*v51 + v178))
        {
          *v172 = *v177;
          v179 = 8 * v178;
          *v177 = **(_QWORD **)((char *)*v51 + v179);
          **(_QWORD **)((char *)*v51 + v179) = v177;
        }
        else
        {
          *((_QWORD *)*v51 + v178) = v172;
          v172 = v177;
          v176 = v178;
        }
      }
LABEL_263:
      v156 = *(_QWORD *)(v50 + 1384);
      if ((v156 & (v156 - 1)) != 0)
      {
        if (v155 >= v156)
          v105 = v155 % v156;
        else
          v105 = v155;
      }
      else
      {
        v105 = (v156 - 1) & v155;
      }
      goto LABEL_268;
    }
    if (v174 >= v168)
      v174 %= v168;
    *((_QWORD *)*v51 + v174) = v173;
    v183 = (_QWORD *)*v172;
    if (!*v172)
      goto LABEL_263;
    while (1)
    {
      v185 = v183[1];
      if (v185 >= v168)
        v185 %= v168;
      if (v185 != v174)
      {
        if (!*((_QWORD *)*v51 + v185))
        {
          *((_QWORD *)*v51 + v185) = v172;
          goto LABEL_249;
        }
        *v172 = *v183;
        v184 = 8 * v185;
        *v183 = **(_QWORD **)((char *)*v51 + v184);
        **(_QWORD **)((char *)*v51 + v184) = v183;
        v183 = v172;
      }
      v185 = v174;
LABEL_249:
      v172 = v183;
      v183 = (_QWORD *)*v183;
      v174 = v185;
      if (!v183)
        goto LABEL_263;
    }
  }
LABEL_268:
  v187 = *v51;
  v188 = (uint64_t *)*((_QWORD *)*v51 + v105);
  if (v188)
  {
    *(_QWORD *)v159 = *v188;
LABEL_276:
    *v188 = v159;
    goto LABEL_277;
  }
  *(_QWORD *)v159 = *(_QWORD *)(v50 + 1392);
  *(_QWORD *)(v50 + 1392) = v159;
  v187[v105] = v50 + 1392;
  if (*(_QWORD *)v159)
  {
    v189 = *(_QWORD *)(*(_QWORD *)v159 + 8);
    if ((v156 & (v156 - 1)) != 0)
    {
      if (v189 >= v156)
        v189 %= v156;
    }
    else
    {
      v189 &= v156 - 1;
    }
    v188 = (uint64_t *)((char *)*v51 + 8 * v189);
    goto LABEL_276;
  }
LABEL_277:
  ++*(_QWORD *)(v50 + 1400);
LABEL_278:
  *(_QWORD *)(v159 + 40) = v64;
  v190 = *(_QWORD *)(v50 + 1424);
  if (!v190)
    goto LABEL_300;
  v191 = (uint8x8_t)vcnt_s8((int8x8_t)v190);
  v191.i16[0] = vaddlv_u8(v191);
  if (v191.u32[0] > 1uLL)
  {
    v159 = v64;
    if (v64 >= v190)
      v159 = v64 % v190;
  }
  else
  {
    v159 = (v190 - 1) & v64;
  }
  v192 = *(uint64_t **)(*(_QWORD *)(v50 + 1416) + 8 * v159);
  if (!v192 || (v193 = *v192) == 0)
  {
LABEL_300:
    v193 = (uint64_t)operator new(0x30uLL);
    *(_QWORD *)v193 = 0;
    *(_QWORD *)(v193 + 8) = v64;
    *(_QWORD *)(v193 + 24) = 0;
    *(_QWORD *)(v193 + 32) = 0;
    *(_QWORD *)(v193 + 16) = v64;
    *(_DWORD *)(v193 + 40) = 0;
    v197 = (float)(unint64_t)(*(_QWORD *)(v50 + 1440) + 1);
    v198 = *(float *)(v50 + 1448);
    if (v190 && (float)(v198 * (float)v190) >= v197)
    {
LABEL_357:
      v223 = *(_QWORD *)(v50 + 1416);
      v224 = *(uint64_t **)(v223 + 8 * v159);
      if (v224)
      {
        *(_QWORD *)v193 = *v224;
        v196 = v64;
      }
      else
      {
        *(_QWORD *)v193 = *(_QWORD *)(v50 + 1432);
        *(_QWORD *)(v50 + 1432) = v193;
        *(_QWORD *)(v223 + 8 * v159) = v50 + 1432;
        v196 = v64;
        if (!*(_QWORD *)v193)
        {
LABEL_366:
          ++*(_QWORD *)(v50 + 1440);
          goto LABEL_367;
        }
        v225 = *(_QWORD *)(*(_QWORD *)v193 + 8);
        if ((v190 & (v190 - 1)) != 0)
        {
          if (v225 >= v190)
            v225 %= v190;
        }
        else
        {
          v225 &= v190 - 1;
        }
        v224 = (uint64_t *)(*(_QWORD *)(v50 + 1416) + 8 * v225);
      }
      *v224 = v193;
      goto LABEL_366;
    }
    v199 = 1;
    if (v190 >= 3)
      v199 = (v190 & (v190 - 1)) != 0;
    v200 = v199 | (2 * v190);
    v201 = vcvtps_u32_f32(v197 / v198);
    if (v200 <= v201)
      v202 = v201;
    else
      v202 = v200;
    if (v202 == 1)
    {
      v202 = 2;
    }
    else if ((v202 & (v202 - 1)) != 0)
    {
      v202 = std::__next_prime(v202);
      v190 = *(_QWORD *)(v50 + 1424);
    }
    if (v202 <= v190)
    {
      if (v202 >= v190)
        goto LABEL_352;
      v215 = vcvtps_u32_f32((float)*(unint64_t *)(v50 + 1440) / *(float *)(v50 + 1448));
      if (v190 < 3 || (v216 = (uint8x8_t)vcnt_s8((int8x8_t)v190), v216.i16[0] = vaddlv_u8(v216), v216.u32[0] > 1uLL))
      {
        v215 = std::__next_prime(v215);
      }
      else
      {
        v217 = 1 << -(char)__clz(v215 - 1);
        if (v215 >= 2)
          v215 = v217;
      }
      if (v202 <= v215)
        v202 = v215;
      if (v202 >= v190)
        goto LABEL_352;
      if (!v202)
      {
        v222 = *(void **)(v50 + 1416);
        *(_QWORD *)(v50 + 1416) = 0;
        if (v222)
          operator delete(v222);
        *(_QWORD *)(v50 + 1424) = 0;
        goto LABEL_352;
      }
    }
    if (v202 >> 61)
      goto LABEL_468;
    v203 = operator new(8 * v202);
    v204 = *(void **)(v50 + 1416);
    *(_QWORD *)(v50 + 1416) = v203;
    if (v204)
      operator delete(v204);
    v205 = 0;
    *(_QWORD *)(v50 + 1424) = v202;
    do
      *(_QWORD *)(*(_QWORD *)(v50 + 1416) + 8 * v205++) = 0;
    while (v202 != v205);
    v206 = *(_QWORD **)(v50 + 1432);
    if (!v206)
      goto LABEL_352;
    v207 = v50 + 1432;
    v208 = v206[1];
    v209 = v202 - 1;
    if ((v202 & (v202 - 1)) == 0)
    {
      v210 = v208 & v209;
      *(_QWORD *)(*(_QWORD *)(v50 + 1416) + 8 * v210) = v207;
      while (1)
      {
        v211 = (_QWORD *)*v206;
        if (!*v206)
          break;
        v212 = v211[1] & v209;
        if (v212 == v210)
        {
          v206 = (_QWORD *)*v206;
        }
        else
        {
          v213 = *(_QWORD *)(v50 + 1416);
          if (*(_QWORD *)(v213 + 8 * v212))
          {
            *v206 = *v211;
            v214 = 8 * v212;
            *v211 = **(_QWORD **)(*(_QWORD *)(v50 + 1416) + v214);
            **(_QWORD **)(*(_QWORD *)(v50 + 1416) + v214) = v211;
          }
          else
          {
            *(_QWORD *)(v213 + 8 * v212) = v206;
            v206 = v211;
            v210 = v212;
          }
        }
      }
LABEL_352:
      v190 = *(_QWORD *)(v50 + 1424);
      if ((v190 & (v190 - 1)) != 0)
      {
        if (v64 >= v190)
          v159 = v64 % v190;
        else
          v159 = v64;
      }
      else
      {
        v159 = (v190 - 1) & v64;
      }
      goto LABEL_357;
    }
    if (v208 >= v202)
      v208 %= v202;
    *(_QWORD *)(*(_QWORD *)(v50 + 1416) + 8 * v208) = v207;
    v218 = (_QWORD *)*v206;
    if (!*v206)
      goto LABEL_352;
    while (1)
    {
      v220 = v218[1];
      if (v220 >= v202)
        v220 %= v202;
      if (v220 != v208)
      {
        v221 = *(_QWORD *)(v50 + 1416);
        if (!*(_QWORD *)(v221 + 8 * v220))
        {
          *(_QWORD *)(v221 + 8 * v220) = v206;
          goto LABEL_338;
        }
        *v206 = *v218;
        v219 = 8 * v220;
        *v218 = **(_QWORD **)(*(_QWORD *)(v50 + 1416) + v219);
        **(_QWORD **)(*(_QWORD *)(v50 + 1416) + v219) = v218;
        v218 = v206;
      }
      v220 = v208;
LABEL_338:
      v206 = v218;
      v218 = (_QWORD *)*v218;
      v208 = v220;
      if (!v218)
        goto LABEL_352;
    }
  }
  if (v191.u32[0] < 2uLL)
  {
    while (1)
    {
      v195 = *(_QWORD *)(v193 + 8);
      if (v195 == v64)
      {
        if (*(_QWORD *)(v193 + 16) == v64)
          goto LABEL_299;
      }
      else if ((v195 & (v190 - 1)) != v159)
      {
        goto LABEL_300;
      }
      v193 = *(_QWORD *)v193;
      if (!v193)
        goto LABEL_300;
    }
  }
  while (1)
  {
    v194 = *(_QWORD *)(v193 + 8);
    if (v194 == v64)
      break;
    if (v194 >= v190)
      v194 %= v190;
    if (v194 != v159)
      goto LABEL_300;
LABEL_289:
    v193 = *(_QWORD *)v193;
    if (!v193)
      goto LABEL_300;
  }
  if (*(_QWORD *)(v193 + 16) != v64)
    goto LABEL_289;
LABEL_299:
  v196 = v64;
LABEL_367:
  *(_BYTE *)(v193 + 24) = *(_BYTE *)v17;
  *(float *)(v193 + 28) = v17[1];
  *(float *)(v193 + 32) = v17[2];
  *(float *)(v193 + 36) = v17[3];
  *(float *)(v193 + 40) = v17[4];
  v226 = **(_QWORD **)(a1 + 8);
  v227 = *(_QWORD *)(v226 + 1272);
  v228 = *(_QWORD *)(v226 + 1264);
  *(_QWORD *)&v274.f64[0] = v64;
  if (v196 < (v227 - v228) >> 3)
  {
    v229 = *(_QWORD *)(v228 + 8 * v196);
    if (v229)
    {
      if (HIDWORD(v64) == HIDWORD(v229))
      {
        v230 = (_QWORD *)(*(_QWORD *)(v226 + 1288) + 24 * v229);
        if (v230 != *(_QWORD **)(v226 + 1296))
        {
          v61 = (_QWORD *)operator new();
          v231 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v61, qword_1EE54A448, 2, 0, 6, 1);
          v231[25] = ggl::DaVinci::Style::reflection(void)::reflection;
          *v231 = &off_1E42B9D90;
          v232 = *(_QWORD *)(v226 + 1344);
          if (v232)
          {
            v233 = (uint8x8_t)vcnt_s8((int8x8_t)v232);
            v233.i16[0] = vaddlv_u8(v233);
            if (v233.u32[0] > 1uLL)
            {
              v193 = v64;
              if (v64 >= v232)
                v193 = v64 % v232;
            }
            else
            {
              v193 = (v232 - 1) & v64;
            }
            v237 = *(_QWORD ***)(*(_QWORD *)(v226 + 1336) + 8 * v193);
            if (v237)
            {
              v238 = *v237;
              if (*v237)
              {
                if (v233.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v240 = v238[1];
                    if (v240 == v64)
                    {
                      if (v238[2] == v64)
                        goto LABEL_464;
                    }
                    else if ((v240 & (v232 - 1)) != v193)
                    {
                      goto LABEL_397;
                    }
                    v238 = (_QWORD *)*v238;
                    if (!v238)
                      goto LABEL_397;
                  }
                }
                do
                {
                  v239 = v238[1];
                  if (v239 == v64)
                  {
                    if (v238[2] == v64)
                      goto LABEL_464;
                  }
                  else
                  {
                    if (v239 >= v232)
                      v239 %= v232;
                    if (v239 != v193)
                      break;
                  }
                  v238 = (_QWORD *)*v238;
                }
                while (v238);
              }
            }
          }
LABEL_397:
          v241 = (_QWORD *)(v226 + 1352);
          v238 = operator new(0x20uLL);
          *v238 = 0;
          v238[1] = v64;
          v238[2] = v64;
          v238[3] = 0;
          v242 = (float)(unint64_t)(*(_QWORD *)(v226 + 1360) + 1);
          v243 = *(float *)(v226 + 1368);
          if (v232 && (float)(v243 * (float)v232) >= v242)
          {
            v64 = v193;
            goto LABEL_454;
          }
          v244 = 1;
          if (v232 >= 3)
            v244 = (v232 & (v232 - 1)) != 0;
          v245 = v244 | (2 * v232);
          v246 = vcvtps_u32_f32(v242 / v243);
          if (v245 <= v246)
            v247 = v246;
          else
            v247 = v245;
          if (v247 == 1)
          {
            v247 = 2;
          }
          else if ((v247 & (v247 - 1)) != 0)
          {
            v247 = std::__next_prime(v247);
            v232 = *(_QWORD *)(v226 + 1344);
          }
          if (v247 > v232)
          {
LABEL_410:
            if (!(v247 >> 61))
            {
              v248 = operator new(8 * v247);
              v249 = *(void **)(v226 + 1336);
              *(_QWORD *)(v226 + 1336) = v248;
              if (v249)
                operator delete(v249);
              v250 = 0;
              *(_QWORD *)(v226 + 1344) = v247;
              do
                *(_QWORD *)(*(_QWORD *)(v226 + 1336) + 8 * v250++) = 0;
              while (v247 != v250);
              v251 = (_QWORD *)*v241;
              if (!*v241)
                goto LABEL_450;
              v252 = v251[1];
              v253 = v247 - 1;
              if ((v247 & (v247 - 1)) == 0)
              {
                v254 = v252 & v253;
                *(_QWORD *)(*(_QWORD *)(v226 + 1336) + 8 * v254) = v241;
                while (1)
                {
                  v255 = (_QWORD *)*v251;
                  if (!*v251)
                    break;
                  v256 = v255[1] & v253;
                  if (v256 == v254)
                  {
                    v251 = (_QWORD *)*v251;
                  }
                  else
                  {
                    v257 = *(_QWORD *)(v226 + 1336);
                    if (*(_QWORD *)(v257 + 8 * v256))
                    {
                      *v251 = *v255;
                      v258 = 8 * v256;
                      *v255 = **(_QWORD **)(*(_QWORD *)(v226 + 1336) + v258);
                      **(_QWORD **)(*(_QWORD *)(v226 + 1336) + v258) = v255;
                    }
                    else
                    {
                      *(_QWORD *)(v257 + 8 * v256) = v251;
                      v251 = v255;
                      v254 = v256;
                    }
                  }
                }
                goto LABEL_450;
              }
              if (v252 >= v247)
                v252 %= v247;
              *(_QWORD *)(*(_QWORD *)(v226 + 1336) + 8 * v252) = v241;
              v262 = (_QWORD *)*v251;
              if (!*v251)
                goto LABEL_450;
              while (2)
              {
                v264 = v262[1];
                if (v264 >= v247)
                  v264 %= v247;
                if (v264 != v252)
                {
                  v265 = *(_QWORD *)(v226 + 1336);
                  if (!*(_QWORD *)(v265 + 8 * v264))
                  {
                    *(_QWORD *)(v265 + 8 * v264) = v251;
LABEL_436:
                    v251 = v262;
                    v262 = (_QWORD *)*v262;
                    v252 = v264;
                    if (!v262)
                      goto LABEL_450;
                    continue;
                  }
                  *v251 = *v262;
                  v263 = 8 * v264;
                  *v262 = **(_QWORD **)(*(_QWORD *)(v226 + 1336) + v263);
                  **(_QWORD **)(*(_QWORD *)(v226 + 1336) + v263) = v262;
                  v262 = v251;
                }
                break;
              }
              v264 = v252;
              goto LABEL_436;
            }
LABEL_468:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          if (v247 < v232)
          {
            v259 = vcvtps_u32_f32((float)*(unint64_t *)(v226 + 1360) / *(float *)(v226 + 1368));
            if (v232 < 3
              || (v260 = (uint8x8_t)vcnt_s8((int8x8_t)v232), v260.i16[0] = vaddlv_u8(v260), v260.u32[0] > 1uLL))
            {
              v259 = std::__next_prime(v259);
            }
            else
            {
              v261 = 1 << -(char)__clz(v259 - 1);
              if (v259 >= 2)
                v259 = v261;
            }
            if (v247 <= v259)
              v247 = v259;
            if (v247 < v232)
            {
              if (v247)
                goto LABEL_410;
              v266 = *(void **)(v226 + 1336);
              *(_QWORD *)(v226 + 1336) = 0;
              if (v266)
                operator delete(v266);
              *(_QWORD *)(v226 + 1344) = 0;
            }
          }
LABEL_450:
          v232 = *(_QWORD *)(v226 + 1344);
          if ((v232 & (v232 - 1)) != 0)
          {
            if (v64 >= v232)
              v64 %= v232;
          }
          else
          {
            v64 &= v232 - 1;
          }
LABEL_454:
          v267 = *(_QWORD *)(v226 + 1336);
          v268 = *(_QWORD **)(v267 + 8 * v64);
          if (v268)
          {
            *v238 = *v268;
            goto LABEL_462;
          }
          *v238 = *v241;
          *v241 = v238;
          *(_QWORD *)(v267 + 8 * v64) = v241;
          if (*v238)
          {
            v269 = *(_QWORD *)(*v238 + 8);
            if ((v232 & (v232 - 1)) != 0)
            {
              if (v269 >= v232)
                v269 %= v232;
            }
            else
            {
              v269 &= v232 - 1;
            }
            v268 = (_QWORD *)(*(_QWORD *)(v226 + 1336) + 8 * v269);
LABEL_462:
            *v268 = v238;
          }
          ++*(_QWORD *)(v226 + 1360);
LABEL_464:
          v270 = v238[3];
          v238[3] = v61;
          if (v270)
            (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
          v271 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>> const&>,std::tuple<>>(v226 + 1160, *(unint64_t *)&v274.f64[0], &v274);
          ++v271[3];
          *v230 = v61;
          if (v61)
            goto LABEL_375;
        }
      }
    }
  }
}

void sub_19F5D7B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  uint64_t v31;

  v31 = v29[3];
  v29[3] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void ggl::BuildingTopDepth::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::BuildingTopDepth::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::BuildingTopDepth::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::BuildingTopDepth::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::BuildingTopDepth::CompressedMeshPipelineSetup::textureIsEnabled(ggl::BuildingTopDepth::CompressedMeshPipelineSetup *this)
{
  return 0;
}

void md::LayoutContext::~LayoutContext(md::LayoutContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;

  if (*((_BYTE *)this + 728))
  {
    if (*((_BYTE *)this + 576))
      *((_BYTE *)this + 576) = 0;
    if (*((_BYTE *)this + 560))
      *((_BYTE *)this + 560) = 0;
  }
  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    *((_QWORD *)this + 6) = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  v10 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v10);
  v5 = v10;
  v10 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v7)
  {
LABEL_14:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_18:

}

uint64_t md::LayoutContext::debugConsoleForId(id *a1, uint64_t a2)
{
  if (*a1 && (objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(*a1, "debugConsoleForId:", a2);
  else
    return 0;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6350;
  return result;
}

void std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::MaskingOverlay::FillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::MaskingOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2248;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::MaskingOverlay::FillPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6BC8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1600;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55EF40, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::MaskingOverlay::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9050;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::MaskingOverlay::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::MaskingOverlay::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::MaskingOverlay::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::MaskingOverlay::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::MaskingOverlay::Fill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::MaskingOverlay::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MaskingOverlay::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay20MaskingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay20MaskingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6398;
  return result;
}

void std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::MaskingOverlay::MaskingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::MaskingOverlay::MaskingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2200;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::MaskingOverlay::MaskingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(std::__shared_weak_count **)(v1 + 64);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6C18;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1600;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55EF40, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::MaskingOverlay::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9050;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::MaskingOverlay::MaskingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MaskingOverlay::MaskingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MaskingOverlayRenderable::buildRenderItems(char **this)
{
  md::MaskingOverlayRenderable *v1;
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (**v31)(ggl::RenderItem *__hidden);
  uint64_t result;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  void **v38;
  unint64_t v39;
  const void **v40;
  const void *v41;
  md::MaskingOverlayRenderable *v42;
  void (**v43)(ggl::RenderItem *__hidden);
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *__dst[2];
  int64_t v53;
  _QWORD v54[2];
  _QWORD v55[3];
  _QWORD v56[3];
  uint64_t v57;
  unint64_t v58;
  void *__p;
  char v60;
  unint64_t v61;
  int v62;
  uint64_t v63;

  v1 = (md::MaskingOverlayRenderable *)this;
  v2 = (unint64_t)(this[20] + 1);
  v3 = this[8];
  v4 = this[9];
  v5 = v4;
  v6 = (v4 - v3) >> 3;
  v7 = v2 - v6;
  if (v2 <= v6)
  {
    if (v2 < v6)
    {
      v26 = &v3[8 * v2];
      if (v4 != v26)
      {
        do
        {
          v28 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          v27 = v28;
          *(_QWORD *)v5 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        while (v5 != v26);
      }
      *((_QWORD *)v1 + 9) = v26;
    }
  }
  else
  {
    v8 = this[10];
    if (v7 <= (v8 - v4) >> 3)
    {
      bzero(v4, 8 * v7);
      *((_QWORD *)v1 + 9) = &v4[8 * v7];
    }
    else
    {
      if (v2 >> 61)
        abort();
      v9 = v8 - v3;
      if (v9 >> 2 > v2)
        v2 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v2 = 0x1FFFFFFFFFFFFFFFLL;
      if (v2 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = 8 * v2;
      v11 = (char *)operator new(8 * v2);
      v12 = &v11[8 * v6];
      v51 = &v11[v10];
      bzero(v12, 8 * v7);
      v13 = &v12[8 * v7];
      if (v4 == v3)
      {
        *((_QWORD *)v1 + 8) = v12;
        *((_QWORD *)v1 + 9) = v13;
        *((_QWORD *)v1 + 10) = v51;
      }
      else
      {
        v14 = v4 - v3 - 8;
        if (v14 <= 0x77)
          goto LABEL_67;
        if (&v4[-(v14 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - v3 - (v14 & 0xFFFFFFFFFFFFFFF8) - 8] < v4)
          goto LABEL_67;
        v16 = (v14 >> 3) + 1;
        v5 = &v4[-8 * (v16 & 0x3FFFFFFFFFFFFFFCLL)];
        v17 = &v11[8 * v6 - 16];
        v18 = v4 - 32;
        v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *(_OWORD *)v18;
          v20 = *((_OWORD *)v18 + 1);
          *(_OWORD *)v18 = 0uLL;
          *((_OWORD *)v18 + 1) = 0uLL;
          v18 -= 32;
          *((_OWORD *)v17 - 1) = v21;
          *(_OWORD *)v17 = v20;
          v17 -= 32;
          v19 -= 4;
        }
        while (v19);
        v12 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_67:
          do
          {
            v22 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *(_QWORD *)v5 = 0;
            *((_QWORD *)v12 - 1) = v22;
            v12 -= 8;
          }
          while (v5 != v3);
        }
        v5 = (char *)*((_QWORD *)v1 + 8);
        v23 = (char *)*((_QWORD *)v1 + 9);
        *((_QWORD *)v1 + 8) = v12;
        *((_QWORD *)v1 + 9) = v13;
        *((_QWORD *)v1 + 10) = v51;
        while (v23 != v5)
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          v24 = v25;
          *(_QWORD *)v23 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
      }
      if (v5)
        operator delete(v5);
    }
  }
  std::vector<BOOL>::resize((uint64_t)v1 + 88, *((_QWORD *)v1 + 20) + 1);
  v29 = (uint64_t *)*((_QWORD *)v1 + 8);
  v30 = operator new();
  v31 = &off_1E42B59B0;
  *(_QWORD *)v30 = &off_1E42B59B0;
  *(_QWORD *)(v30 + 48) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 16) = "MaskingOverlayFill";
  *(_DWORD *)(v30 + 40) = 0;
  *(_DWORD *)(v30 + 56) = 1065353216;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(int64x2_t *)(v30 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v30 + 112) = 0;
  result = *v29;
  *v29 = v30;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*((_QWORD *)v1 + 9) - *((_QWORD *)v1 + 8) >= 9uLL)
  {
    v33 = *MEMORY[0x1E0DE4F50];
    v49 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v50 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v48 = MEMORY[0x1E0DE4FB8] + 16;
    for (i = 1; i < (uint64_t)(*((_QWORD *)v1 + 9) - *((_QWORD *)v1 + 8)) >> 3; ++i)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v54);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)"MaskingOverlayStencil", 21);
      std::ostream::operator<<();
      v35 = *((_QWORD *)v1 + 8);
      v36 = operator new();
      if ((v62 & 0x10) != 0)
      {
        v39 = v61;
        v40 = (const void **)&v57;
        if (v61 < v58)
        {
          v61 = v58;
          v39 = v58;
          v40 = (const void **)&v57;
        }
      }
      else
      {
        if ((v62 & 8) == 0)
        {
          v37 = 0;
          HIBYTE(v53) = 0;
          v38 = __dst;
          goto LABEL_53;
        }
        v39 = v56[2];
        v40 = (const void **)v56;
      }
      v41 = *v40;
      v37 = v39 - (_QWORD)*v40;
      if (v37 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v37 >= 0x17)
      {
        v42 = v1;
        v43 = v31;
        v44 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v37 | 7) != 0x17)
          v44 = v37 | 7;
        v45 = v44 + 1;
        v38 = (void **)operator new(v44 + 1);
        __dst[1] = (void *)v37;
        v53 = v45 | 0x8000000000000000;
        __dst[0] = v38;
        v31 = v43;
        v1 = v42;
      }
      else
      {
        HIBYTE(v53) = v39 - *(_BYTE *)v40;
        v38 = __dst;
        if (!v37)
          goto LABEL_53;
      }
      memmove(v38, v41, v37);
LABEL_53:
      *((_BYTE *)v38 + v37) = 0;
      v46 = __dst;
      if (v53 < 0)
        v46 = (void **)__dst[0];
      *(_QWORD *)v36 = v31;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 16) = v46;
      *(_DWORD *)(v36 + 40) = 0;
      *(_DWORD *)(v36 + 56) = 1065353216;
      *(_OWORD *)(v36 + 64) = 0u;
      *(_OWORD *)(v36 + 80) = 0u;
      *(int64x2_t *)(v36 + 96) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v36 + 112) = 0;
      v47 = *(_QWORD *)(v35 + 8 * i);
      *(_QWORD *)(v35 + 8 * i) = v36;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      if (SHIBYTE(v53) < 0)
        operator delete(__dst[0]);
      v54[0] = v33;
      *(_QWORD *)((char *)v54 + *(_QWORD *)(v33 - 24)) = v50;
      v55[0] = v49;
      v55[1] = v48;
      if (v60 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x1A1AF4D64](&v63);
    }
  }
  *((_QWORD *)v1 + 21) = 0;
  return result;
}

void sub_19F5D8998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  MEMORY[0x1A1AF4E00](v13, 0x10F1C4093A39A99);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::MaskingOverlayRenderableConfig::~MaskingOverlayRenderableConfig(md::MaskingOverlayRenderableConfig *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::MaskingOverlayRenderable::layoutFill(md::MaskingOverlayRenderable *this, const md::LayoutContext *a2, int a3)
{
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  _QWORD *i;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  long double v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  float *v38;
  float v39;
  BOOL v40;
  int v41;
  char v42;
  char v43;
  _BOOL4 v44;
  uint64_t v45;
  float v46;
  std::string::size_type size;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  float v51;
  unint64_t v52;
  id v53;
  void *v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  md::SharedResource *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  float v68;
  float *v69;
  float v70;
  BOOL v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  void *v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  float v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  double *v161;
  double v162;
  unint64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  long double v169;
  float v170;
  float v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176[2];
  uint64_t *v177;
  std::__shared_weak_count *v178;
  std::string v179;
  std::string __p;
  long double __y;
  std::__shared_weak_count *v182;
  _QWORD v183[2];
  unsigned __int8 v184;

  **((_QWORD **)this + 11) &= ~1uLL;
  if (!*((_QWORD *)this + 14) || !*((_QWORD *)this + 15))
    return;
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
  {
    v10 = 0;
    v11 = (uint8x8_t)vcnt_s8(0);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0] < 2uLL;
    if (v11.u32[0] < 2uLL)
      goto LABEL_30;
    goto LABEL_36;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x1AF456233693CD46uLL % *(_QWORD *)&v7;
    if (*(_QWORD *)&v7 > 0x1AF456233693CD46uLL)
      v9 = 0x1AF456233693CD46;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x1AF456233693CD46;
  }
  v13 = *(_QWORD **)(*v6 + 8 * v9);
  if (!v13)
    goto LABEL_28;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_28;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
          goto LABEL_26;
      }
      else if ((v16 & (*(_QWORD *)&v7 - 1)) != v9)
      {
        goto LABEL_28;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_28;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= *(_QWORD *)&v7)
      v15 %= *(_QWORD *)&v7;
    if (v15 != v9)
      goto LABEL_28;
LABEL_15:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_28;
  }
  if (v14[2] != 0x1AF456233693CD46)
    goto LABEL_15;
LABEL_26:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v10 = *(_QWORD *)(v17 + 32);
    goto LABEL_29;
  }
LABEL_28:
  v10 = 0;
LABEL_29:
  v18 = (uint8x8_t)vcnt_s8(v7);
  v18.i16[0] = vaddlv_u8(v18);
  v12 = v18.u32[0] < 2uLL;
  if (v18.u32[0] < 2uLL)
  {
LABEL_30:
    v19 = *(_QWORD *)&v7 - 1;
    for (i = **(_QWORD ***)(*v6 + 8 * ((*(_QWORD *)&v7 - 1) & 0x1AF456233693CD46));
          i[1] != 0x1AF456233693CD46 || i[2] != 0x1AF456233693CD46;
    v12 = 1;
    goto LABEL_41;
  }
  v21 = 0x1AF456233693CD46;
  if (*(_QWORD *)&v7 <= 0x1AF456233693CD46uLL)
LABEL_36:
    v21 = 0x1AF456233693CD46uLL % *(_QWORD *)&v7;
  i = **(_QWORD ***)(*v6 + 8 * v21);
  v19 = *(_QWORD *)&v7 - 1;
  while (i[1] != 0x1AF456233693CD46 || i[2] != 0x1AF456233693CD46)
    i = (_QWORD *)*i;
LABEL_41:
  v22 = *(_QWORD *)(i[5] + 32);
  if (v12)
  {
    v23 = *(_QWORD **)(*v6 + 8 * (v19 & 0xE42D19AFCA302E68));
    do
    {
      do
        v23 = (_QWORD *)*v23;
      while (v23[1] != 0xE42D19AFCA302E68);
    }
    while (v23[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v24 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v7 <= 0xE42D19AFCA302E68)
      v24 = 0xE42D19AFCA302E68 % *(_QWORD *)&v7;
    v23 = *(_QWORD **)(*v6 + 8 * v24);
    do
    {
      do
        v23 = (_QWORD *)*v23;
      while (v23[1] != 0xE42D19AFCA302E68);
    }
    while (v23[2] != 0xE42D19AFCA302E68);
  }
  v25 = *(float *)(v22 + 3076);
  v26 = *(float *)(v22 + 3080);
  v27 = *(float *)(*(_QWORD *)(v23[5] + 32) + 108);
  v28 = *((double *)this + 16);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  __p.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 16);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    v182 = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
  else
  {
    v182 = 0;
  }
  v183[0] = 0;
  v183[1] = 0;
  __y = v28;
  v184 = 0;
  if (v28 != 0.0)
    LODWORD(v28) = (*(uint64_t (**)(long double, _QWORD *))(**(_QWORD **)&v28 + 48))(COERCE_LONG_DOUBLE(*(_QWORD *)&v28), v183);
  v184 = LOBYTE(v28);
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    LODWORD(v28) = v184;
  }
  if (!LODWORD(v28))
  {
    v44 = 0;
    v45 = 0;
    v46 = 0.0;
    goto LABEL_131;
  }
  v35 = fmaxf(v26 + v25, 1.0);
  v36 = *(_QWORD *)(*(_QWORD *)&__y + 24);
  if ((int)v35 >= 0x17)
    v37 = 23;
  else
    v37 = (int)v35;
  v38 = *(float **)v36;
  if (*(_QWORD *)v36
    && (v39 = *v38, LODWORD(v38) = *v38 == 1.0, *(_BYTE *)(v36 + 10))
    && (v39 != 0.0 ? (v40 = v39 == 1.0) : (v40 = 1), !v40)
    || (v41 = *(unsigned __int8 *)(v36 + v38 + 11), v39 = 0.0, v41 == 2))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v179.__r_.__value_.__s.__data_[0] = 1;
    v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 0, &__p);
    v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 1, &v179);
    if (v39 < 1.0)
      v43 = v42;
  }
  else
  {
    v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)&__y + 24), 0x5Bu, v37, v41, 0);
  }
  v44 = v43 != 0;
  if (v43)
  {
    memset(&__p, 0, sizeof(__p));
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&v179, *(_QWORD *)(*(_QWORD *)&__y + 24), 0x88u, v37, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v179;
    size = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v179.__r_.__value_.__l.__size_;
    if (size)
    {
      v48 = (_QWORD *)*((_QWORD *)a2 + 1);
      v49 = v48[1];
      if ((v49 & (v49 - 1)) != 0)
      {
        v52 = 0xA60DDA5A69582425;
        if (v49 <= 0xA60DDA5A69582425)
          v52 = 0xA60DDA5A69582425 % v49;
        v50 = *(_QWORD **)(*v48 + 8 * v52);
        do
        {
          do
            v50 = (_QWORD *)*v50;
          while (v50[1] != 0xA60DDA5A69582425);
        }
        while (v50[2] != 0xA60DDA5A69582425);
      }
      else
      {
        v50 = *(_QWORD **)(*v48 + 8 * ((v49 - 1) & 0xA60DDA5A69582425));
        do
        {
          do
            v50 = (_QWORD *)*v50;
          while (v50[1] != 0xA60DDA5A69582425);
        }
        while (v50[2] != 0xA60DDA5A69582425);
      }
      v53 = **(id **)(v50[5] + 32);
      v54 = v53;
      if (v53)
      {
        objc_msgSend(v53, "textureManager");
        v55 = v177;
      }
      else
      {
        v55 = 0;
        v177 = 0;
        v178 = 0;
      }
      v56 = (std::__shared_weak_count *)operator new(0x58uLL);
      v56->__shared_owners_ = 0;
      v57 = (unint64_t *)&v56->__shared_owners_;
      v56->__shared_weak_owners_ = 0;
      v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
      v56[1].__shared_weak_owners_ = 0;
      v56[2].__vftable = 0;
      v56[1].__shared_owners_ = 0;
      LODWORD(v56[2].__shared_owners_) = 0;
      v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
      *(_OWORD *)((char *)&v56[2].__shared_owners_ + 4) = xmmword_19FFB3BE0;
      *(std::__shared_weak_count_vtbl **)((char *)&v56[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
      HIDWORD(v56[3].__shared_owners_) = 0;
      v176[0] = (uint64_t)&v56[1];
      v176[1] = (uint64_t)v56;
      md::TextureManager::texture(&v179, v55, (uint64_t)&__p, v176, 0, v27);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      v59 = v178;
      if (v178)
      {
        v60 = (unint64_t *)&v178->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }

      v62 = (md::SharedResource *)v179.__r_.__value_.__r.__words[0];
      if (v179.__r_.__value_.__r.__words[0])
      {
        md::LayoutContext::frameState(a2);
        md::SharedResource::addFrameRef(v62, *(_QWORD *)(v63 + 624));
        v45 = *((_QWORD *)v62 + 4);
        v64 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
        if (!v179.__r_.__value_.__l.__size_)
          goto LABEL_121;
LABEL_117:
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      else
      {
        v45 = 0;
        v64 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
        if (v179.__r_.__value_.__l.__size_)
          goto LABEL_117;
      }
    }
    else
    {
      v45 = 0;
    }
LABEL_121:
    v67 = *(_QWORD *)(*(_QWORD *)&__y + 24);
    v68 = fminf(fmaxf(v35, 0.0), 23.0);
    v69 = *(float **)v67;
    if (*(_QWORD *)v67
      && (v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(_BYTE *)(v67 + 10))
      && (v70 != 0.0 ? (v71 = v70 == 1.0) : (v71 = 1), !v71)
      || (v72 = *(unsigned __int8 *)(v67 + v69 + 11), v70 = 0.0, v72 == 2))
    {
      v179.__r_.__value_.__s.__data_[0] = 1;
      LOBYTE(v177) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v67, 0xC2u, 0, (BOOL *)&v179, v68);
      v74 = v73;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v67, 0xC2u, 1u, (BOOL *)&v177, v68);
      v46 = v74 + (float)((float)(v75 - v74) * v70);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_130;
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&__y + 24), 0xC2u, v72, 0, v68);
      v46 = v94;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_130:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_131:
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "maskingOverlayOpacityFactor");
    v78 = v77;

    v51 = v46 * v78;
  }
  else
  {
    v45 = 0;
    v51 = 0.0;
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&__y);
  if (!v44 || !v45)
    return;
  v79 = *(_QWORD *)(*((_QWORD *)this + 3) + 48);
  v80 = *(_QWORD *)(v79 + 8);
  if (v80 == *(_QWORD *)v79)
  {
    v91 = *(_QWORD *)(v79 + 88);
    if (!v91)
    {
LABEL_245:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_246:
      abort();
    }
    v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 48))(v91);
    v82 = *(uint64_t **)(v79 + 40);
    v92 = *(_QWORD *)(v79 + 48);
    if ((unint64_t)v82 < v92)
    {
LABEL_146:
      if (v82)
        *v82 = v81;
      v93 = v82 + 1;
      goto LABEL_185;
    }
    v95 = *(_QWORD *)(v79 + 32);
    v96 = ((uint64_t)v82 - v95) >> 3;
    v86 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 61)
      goto LABEL_246;
    v97 = v92 - v95;
    if (v97 >> 2 > v86)
      v86 = v97 >> 2;
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
      v86 = 0x1FFFFFFFFFFFFFFFLL;
    if (v86)
    {
      v98 = 8 * v86;
      v99 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v79 + 56) + 16))(*(_QWORD *)(v79 + 56), 8 * v86, 8);
      v90 = (uint64_t *)(v99 + 8 * v96);
      v86 = v99 + v98;
      if (v99)
        *v90 = v81;
    }
    else
    {
      v90 = (uint64_t *)(8 * v96);
    }
    v93 = v90 + 1;
    v109 = *(_QWORD *)(v79 + 32);
    v100 = *(_QWORD *)(v79 + 40);
    if (v100 == v109)
      goto LABEL_183;
    v110 = v100 - v109 - 8;
    if (v110 < 0x38)
    {
      v112 = *(_QWORD *)(v79 + 40);
    }
    else if ((unint64_t)(v100 - (_QWORD)v90) < 0x20)
    {
      v112 = *(_QWORD *)(v79 + 40);
    }
    else
    {
      v111 = (v110 >> 3) + 1;
      v112 = v100 - 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
      v113 = v90 - 2;
      v114 = (__int128 *)(v100 - 16);
      v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v116 = *v114;
        *((_OWORD *)v113 - 1) = *(v114 - 1);
        *(_OWORD *)v113 = v116;
        v113 -= 4;
        v114 -= 2;
        v115 -= 4;
      }
      while (v115);
      v90 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
      if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_182;
    }
    do
    {
      v118 = *(_QWORD *)(v112 - 8);
      v112 -= 8;
      *--v90 = v118;
    }
    while (v112 != v109);
LABEL_182:
    v100 = *(_QWORD *)(v79 + 32);
    goto LABEL_183;
  }
  v81 = *(_QWORD *)(v80 - 8);
  *(_QWORD *)(v79 + 8) = v80 - 8;
  v82 = *(uint64_t **)(v79 + 40);
  v83 = *(_QWORD *)(v79 + 48);
  if ((unint64_t)v82 < v83)
    goto LABEL_146;
  v84 = *(_QWORD *)(v79 + 32);
  v85 = ((uint64_t)v82 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_246;
  v87 = v83 - v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v86 = 0x1FFFFFFFFFFFFFFFLL;
  if (v86)
  {
    v88 = 8 * v86;
    v89 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v79 + 56) + 16))(*(_QWORD *)(v79 + 56), 8 * v86, 8);
    v90 = (uint64_t *)(v89 + 8 * v85);
    v86 = v89 + v88;
    if (v89)
      *v90 = v81;
  }
  else
  {
    v90 = (uint64_t *)(8 * v85);
  }
  v93 = v90 + 1;
  v101 = *(_QWORD *)(v79 + 32);
  v100 = *(_QWORD *)(v79 + 40);
  if (v100 != v101)
  {
    v102 = v100 - v101 - 8;
    if (v102 < 0x38)
    {
      v104 = *(_QWORD *)(v79 + 40);
    }
    else if ((unint64_t)(v100 - (_QWORD)v90) < 0x20)
    {
      v104 = *(_QWORD *)(v79 + 40);
    }
    else
    {
      v103 = (v102 >> 3) + 1;
      v104 = v100 - 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
      v105 = v90 - 2;
      v106 = (__int128 *)(v100 - 16);
      v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)v105 = v108;
        v105 -= 4;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      v90 -= v103 & 0x3FFFFFFFFFFFFFFCLL;
      if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_182;
    }
    do
    {
      v117 = *(_QWORD *)(v104 - 8);
      v104 -= 8;
      *--v90 = v117;
    }
    while (v104 != v101);
    goto LABEL_182;
  }
LABEL_183:
  *(_QWORD *)(v79 + 32) = v90;
  *(_QWORD *)(v79 + 40) = v93;
  v119 = *(_QWORD *)(v79 + 48);
  *(_QWORD *)(v79 + 48) = v86;
  if (v100)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v79 + 56) + 40))(*(_QWORD *)(v79 + 56), v100, v119 - v100);
LABEL_185:
  *(_QWORD *)(v79 + 40) = v93;
  *(_QWORD *)&__y = v81;
  v120 = *(_QWORD *)(v79 + 120);
  if (!v120)
    goto LABEL_245;
  (*(void (**)(uint64_t, long double *))(*(_QWORD *)v120 + 48))(v120, &__y);
  v121 = *(_QWORD **)(v81 + 64);
  v121[1] = 0;
  v122 = *((_QWORD *)this + 4);
  *v121 = v122;
  v123 = *(_QWORD **)(v81 + 160);
  v124 = *((_QWORD *)this + 5);
  if (v124)
  {
    v125 = (unint64_t *)(v124 + 8);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v127 = (std::__shared_weak_count *)v123[1];
  *v123 = v122;
  v123[1] = v124;
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = *(_QWORD *)(v81 + 64);
  *(_QWORD *)(v130 + 24) = 0;
  v131 = *((_QWORD *)this + 6);
  *(_QWORD *)(v130 + 16) = v131;
  v132 = *(_QWORD *)(v81 + 160);
  v133 = *((_QWORD *)this + 7);
  if (v133)
  {
    v134 = (unint64_t *)(v133 + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v136 = *(std::__shared_weak_count **)(v132 + 24);
  *(_QWORD *)(v132 + 16) = v131;
  *(_QWORD *)(v132 + 24) = v133;
  if (v136)
  {
    v137 = (unint64_t *)&v136->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = *((_QWORD *)this + 3);
  v141 = *(_QWORD *)(v139 + 16);
  v140 = *(std::__shared_weak_count **)(v139 + 24);
  if (v140)
  {
    v142 = (unint64_t *)&v140->__shared_owners_;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  if (v141 && **(_QWORD **)(v141 + 40) == *(_QWORD *)(v81 + 8))
  {
    v147 = *(_QWORD *)(v81 + 16);
    if (v147 && v147 != v141)
      ggl::PipelineSetup::resetData(v81);
    if (v140)
    {
      v148 = (unint64_t *)&v140->__shared_owners_;
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
    }
    v144 = *(std::__shared_weak_count **)(v81 + 24);
    *(_QWORD *)(v81 + 16) = v141;
    *(_QWORD *)(v81 + 24) = v140;
    if (v144)
    {
      v150 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v150);
      while (__stlxr(v146 - 1, v150));
      goto LABEL_220;
    }
  }
  else
  {
    v144 = *(std::__shared_weak_count **)(v81 + 24);
    *(_QWORD *)(v81 + 16) = 0;
    *(_QWORD *)(v81 + 24) = 0;
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
LABEL_220:
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
  }
  if (v140)
  {
    v151 = (unint64_t *)&v140->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  **(_QWORD **)(v81 + 96) = v45;
  v153 = (_QWORD *)*((_QWORD *)a2 + 1);
  v154 = v153[1];
  if ((v154 & (v154 - 1)) != 0)
  {
    v156 = 0xE42D19AFCA302E68;
    if (v154 <= 0xE42D19AFCA302E68)
      v156 = 0xE42D19AFCA302E68 % v154;
    v155 = *(_QWORD **)(*v153 + 8 * v156);
    do
    {
      do
        v155 = (_QWORD *)*v155;
      while (v155[1] != 0xE42D19AFCA302E68);
    }
    while (v155[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v155 = *(_QWORD **)(*v153 + 8 * ((v154 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v155 = (_QWORD *)*v155;
      while (v155[1] != 0xE42D19AFCA302E68);
    }
    while (v155[2] != 0xE42D19AFCA302E68);
  }
  v157 = *(float *)(*(_QWORD *)(v155[5] + 32) + 108);
  v158 = *(_QWORD **)(*(_QWORD *)(v81 + 64) + 32);
  v159 = v158[1];
  v160 = v158[9];
  *(_DWORD *)(v160 + 20) = 0;
  v161 = *(double **)(v10 + 5584);
  if (!v161)
    v161 = (double *)v10;
  v162 = v161[471];
  *(double *)&v163 = v162 * v161[173];
  v164 = *(double *)&v163 * (double)(1 << *((_BYTE *)this + 1));
  LODWORD(v163) = *(_DWORD *)(v45 + 80);
  LODWORD(v162) = *(_DWORD *)(v45 + 84);
  v165 = v161[171] * v157 / v164;
  v166 = v165 / (double)v163;
  v167 = v165 / (double)*(unint64_t *)&v162;
  v168 = modf(v166 * (double)*((int *)this + 2), &__y);
  v169 = modf(v167 * (double)*((int *)this + 1), &__y);
  v170 = v168;
  *(float *)&v169 = v169;
  *(float *)v160 = v170;
  *(_DWORD *)(v160 + 4) = LODWORD(v169);
  *(float *)&v169 = v166;
  v171 = v167;
  *(_DWORD *)(v160 + 8) = LODWORD(v169);
  *(float *)(v160 + 12) = v171;
  *(float *)(v160 + 16) = v51;
  v172 = v158[8];
  if (v172 <= v159)
    v172 = v159;
  v158[7] = 0;
  v158[8] = v172;
  v173 = (_QWORD *)*((_QWORD *)this + 3);
  v174 = 5;
  if (*((_QWORD *)this + 14) == 1)
    v174 = 4;
  v175 = **((_QWORD **)this + 8);
  *(_QWORD *)(v175 + 24) = v173[v174];
  *(_QWORD *)(v175 + 32) = v81;
  *(_DWORD *)(v175 + 40) = a3;
  *(_QWORD *)(v175 + 64) = *v173;
  **((_QWORD **)this + 11) |= 1uLL;
  *((_QWORD *)this + 21) = 0;
}

void sub_19F5D9848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;

  if (a22 < 0)
    operator delete(__p);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void md::MaskingOverlayRenderable::collectRenderItems(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != 1)
    goto LABEL_9;
  v6 = a1[8];
  v5 = a1[9];
  if ((unint64_t)(v5 - v6) < 9)
    return;
  v7 = a1[11];
  v8 = 1;
  while (1)
  {
    if ((*(_QWORD *)(v7 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
      goto LABEL_5;
    v11 = *(_QWORD *)(v6 + 8 * v8);
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      break;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    v7 = a1[11];
    *(_QWORD *)(v7 + 8 * (v8 >> 6)) &= ~(1 << v8);
    v6 = a1[8];
    v5 = a1[9];
LABEL_5:
    if (++v8 >= (v5 - v6) >> 3)
      return;
  }
  while (1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_9:
    if ((*(_BYTE *)a1[11] & 1) == 0)
      break;
    v11 = *(_QWORD *)a1[8];
    v10 = *(_QWORD *)(a3 + 24);
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v11);
      *(_QWORD *)a1[11] &= ~1uLL;
      return;
    }
  }
}

void md::LabelsLogic::~LabelsLogic(md::LabelsLogic *this)
{
  md::LabelsLogic::~LabelsLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD **v2;
  void **v3;
  md::LabelManager **i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  *(_QWORD *)this = &off_1E428C308;
  v2 = (_QWORD **)((char *)this + 192);
  v3 = (void **)((char *)this + 176);
  for (i = (md::LabelManager **)((char *)this + 192); ; md::LabelManager::willShutdown(i[3]))
  {
    i = (md::LabelManager **)*i;
    if (!i)
      break;
  }
  if (*((_QWORD *)this + 25))
  {
    v5 = *v2;
    while (v5)
    {
      v29 = v5;
      v5 = (_QWORD *)*v5;
      v30 = (std::__shared_weak_count *)v29[4];
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      operator delete(v29);
    }
    *((_QWORD *)this + 24) = 0;
    v6 = *((_QWORD *)this + 23);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *((_QWORD *)*v3 + j) = 0;
    }
    *((_QWORD *)this + 25) = 0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *v2;
  while (v11)
  {
    v25 = v11;
    v11 = (_QWORD *)*v11;
    v26 = (std::__shared_weak_count *)v25[4];
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    operator delete(v25);
  }
  v12 = *v3;
  *v3 = 0;
  if (v12)
    operator delete(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v16)
    std::default_delete<md::LabelManagerCreationParams>::operator()[abi:nn180100](v16);
  v17 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v17)
  {
    v18 = *(id **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = 0;
    if (v18)
    {
      md::LabelSettingsData::~LabelSettingsData(v18);
      MEMORY[0x1A1AF4E00]();
    }
    v19 = *(std::__shared_weak_count **)(v17 + 32);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    MEMORY[0x1A1AF4E00](v17, 0x20C40A759441BLL);
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::LabelsLogic::prune(uint64_t a1, int a2)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(a1 + 192); i; i = (uint64_t **)*i)
    md::LabelManager::didReceiveMemoryWarning((md::FontTrackingCache **)i[3], a2 == 2);
}

void md::LabelsLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t **v5;
  unint64_t v6;
  const char *v7;
  uint64_t *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  float v14;
  NSObject *v15;
  dispatch_time_t v16;
  intptr_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  char *ChildNode;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  void **v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void **v56;
  _QWORD *v57;
  std::string __dst;
  std::string __p;
  void *v61;
  _OWORD v62[3];
  char v63;
  _BYTE v64[8];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE v70[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _BYTE v76[8];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _BYTE v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _BYTE v88[8];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _BYTE v94[8];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _BYTE v100[8];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _BYTE v106[8];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _BYTE v112[8];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BYTE v118[8];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _BYTE v124[8];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  _BYTE v130[8];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _BYTE v136[8];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _BYTE v142[8];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _BYTE v148[8];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _QWORD v154[7];
  int v155;
  _QWORD v156[7];
  int v157;
  _BYTE v158[16];
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166[2];
  __int128 v167;
  uint64_t v168;
  int v169;
  __int128 v170;
  char v171;

  v4 = (_QWORD *)a3;
  md::LogicBase::createDebugNode(a1, a3);
  v5 = *(uint64_t ***)(a1 + 192);
  if (v5)
  {
    v57 = v4;
    while (1)
    {
      v6 = *((unsigned __int8 *)v5 + 16);
      v7 = "<Invalid>";
      if (v6 <= 6)
        v7 = off_1E42FB0E0[v6];
      v8 = v5[3];
      v9 = strlen(v7);
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v10 = v9;
      if (v9 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
      p_dst = &__dst;
      if (v9)
        goto LABEL_14;
LABEL_15:
      p_dst->__r_.__value_.__s.__data_[v10] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        __p = __dst;
      LOBYTE(v61) = 0;
      memset(v62, 0, sizeof(v62));
      v63 = 0;
      BYTE7(v166[1]) = 11;
      strcpy((char *)v166, "Layout Zoom");
      v14 = *((float *)v8 + 118);
      v161 = 0;
      v162 = 0;
      v160 = 0;
      v163 = 2;
      v159 = v14;
      gdc::DebugTreeNode::addProperty((uint64_t)&__p, (uint64_t)v166, (uint64_t)v158);
      v15 = (id)v8[27];
      v16 = dispatch_time(0, 500000000);
      v17 = dispatch_semaphore_wait(v15, v16);

      if (!v17)
      {
        v19 = (char *)operator new(0x20uLL);
        *(_QWORD *)&v166[0] = v19;
        *(__int128 *)((char *)v166 + 8) = xmmword_19FFB3880;
        strcpy(v19, "Is Background Update Running");
        v20 = *((unsigned __int8 *)v8 + 3385);
        memset(&v156[4], 0, 24);
        v157 = 0;
        v156[0] = v20;
        gdc::DebugTreeNode::addProperty((uint64_t)&__p, (uint64_t)v166, (uint64_t)v156);
        operator delete(v19);
        v21 = (char *)operator new(0x20uLL);
        *(_QWORD *)&v166[0] = v21;
        *(__int128 *)((char *)v166 + 8) = xmmword_19FFB34A0;
        strcpy(v21, "Route traffic features active");
        v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8[21] + 48) + 16))(*(_QWORD *)(v8[21] + 48));
        memset(&v154[4], 0, 24);
        v155 = 0;
        v154[0] = v22;
        gdc::DebugTreeNode::addProperty((uint64_t)&__p, (uint64_t)v166, (uint64_t)v154);
        operator delete(v21);
        BYTE7(v166[1]) = 14;
        strcpy((char *)v166, "Loading Counts");
        ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)&__p, v166);
        BYTE7(v166[1]) = 5;
        strcpy((char *)v166, "image");
        v24 = atomic_load((unsigned int *)(v8[33] + 140));
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v153 = 1;
        v149 = v24;
        gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v166, (uint64_t)v148);
        if (SBYTE7(v166[1]) < 0)
          operator delete(*(void **)&v166[0]);
        BYTE7(v166[1]) = 8;
        strcpy((char *)v166, "textData");
        v25 = atomic_load((unsigned int *)(v8[34] + 56));
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v147 = 1;
        v143 = v25;
        gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v166, (uint64_t)v142);
        if (SBYTE7(v166[1]) < 0)
          operator delete(*(void **)&v166[0]);
        BYTE7(v166[1]) = 10;
        strcpy((char *)v166, "glyphImage");
        v26 = atomic_load((unsigned int *)(v8[35] + 64));
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v141 = 1;
        v137 = v26;
        gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v166, (uint64_t)v136);
        if (SBYTE7(v166[1]) < 0)
          operator delete(*(void **)&v166[0]);
        BYTE7(v166[1]) = 15;
        strcpy((char *)v166, "totalGlyphCount");
        v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v8[35] + 24))(*(_QWORD *)v8[35]);
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v135 = 1;
        v131 = v27;
        gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v166, (uint64_t)v130);
        v28 = (char *)operator new(0x28uLL);
        *(_QWORD *)&v166[0] = v28;
        *(__int128 *)((char *)v166 + 8) = xmmword_19FFB3C00;
        strcpy(v28, "glyphsUsingLargeScaleFactorCount");
        v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v8[35] + 32))(*(_QWORD *)v8[35]);
        v126 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 1;
        v125 = v29;
        gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v166, (uint64_t)v124);
        operator delete(v28);
        BYTE7(v166[1]) = 19;
        strcpy((char *)v166, "Staging Glyph Cache");
        v30 = gdc::DebugTreeNode::createChildNode((uint64_t)&__p, v166);
        BYTE7(v166[1]) = 9;
        strcpy((char *)v166, "cacheHits");
        v31 = *(unsigned int *)(v8[393] + 144);
        v121 = 0;
        v122 = 0;
        v120 = 0;
        v123 = 1;
        v119 = v31;
        gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)v166, (uint64_t)v118);
        v32 = *(unsigned int *)(v8[393] + 148);
        BYTE7(v166[1]) = 11;
        strcpy((char *)v166, "cacheMisses");
        v115 = 0;
        v116 = 0;
        v114 = 0;
        v117 = 1;
        v113 = v32;
        gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)v166, (uint64_t)v112);
        v33 = *(unsigned int *)(v8[393] + 152);
        BYTE7(v166[1]) = 15;
        strcpy((char *)v166, "cachedItemCount");
        v109 = 0;
        v110 = 0;
        v108 = 0;
        v111 = 1;
        v107 = v33;
        gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)v166, (uint64_t)v106);
        BYTE7(v166[1]) = 19;
        strcpy((char *)v166, "Display Glyph Cache");
        v34 = gdc::DebugTreeNode::createChildNode((uint64_t)&__p, v166);
        v35 = *(unsigned int **)(v8[38] + 128);
        BYTE7(v166[1]) = 9;
        strcpy((char *)v166, "cacheHits");
        v36 = v35[36];
        v103 = 0;
        v104 = 0;
        v102 = 0;
        v105 = 1;
        v101 = v36;
        gdc::DebugTreeNode::addProperty((uint64_t)v34, (uint64_t)v166, (uint64_t)v100);
        v37 = v35[37];
        BYTE7(v166[1]) = 11;
        strcpy((char *)v166, "cacheMisses");
        v97 = 0;
        v98 = 0;
        v96 = 0;
        v99 = 1;
        v95 = v37;
        gdc::DebugTreeNode::addProperty((uint64_t)v34, (uint64_t)v166, (uint64_t)v94);
        v38 = v35[38];
        BYTE7(v166[1]) = 15;
        strcpy((char *)v166, "cachedItemCount");
        v91 = 0;
        v92 = 0;
        v90 = 0;
        v93 = 1;
        v89 = v38;
        gdc::DebugTreeNode::addProperty((uint64_t)v34, (uint64_t)v166, (uint64_t)v88);
        BYTE7(v166[1]) = 8;
        strcpy((char *)v166, "Renderer");
        v39 = gdc::DebugTreeNode::createChildNode((uint64_t)&__p, v166);
        BYTE7(v166[1]) = 11;
        strcpy((char *)v166, "descriptors");
        v40 = *(unsigned int *)(v8[41] + 1808);
        v85 = 0;
        v86 = 0;
        v84 = 0;
        v87 = 1;
        v83 = v40;
        gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v166, (uint64_t)v82);
        v41 = (*(_DWORD *)(v8[41] + 1812) + *(_DWORD *)(v8[41] + 1816));
        BYTE7(v166[1]) = 11;
        strcpy((char *)v166, "renderItems");
        v79 = 0;
        v80 = 0;
        v78 = 0;
        v81 = 1;
        v77 = v41;
        gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v166, (uint64_t)v76);
        v42 = *(unsigned int *)(v8[41] + 1812);
        BYTE7(v166[1]) = 17;
        strcpy((char *)v166, "glyph renderItems");
        v73 = 0;
        v74 = 0;
        v72 = 0;
        v75 = 1;
        v71 = v42;
        gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v166, (uint64_t)v70);
        v43 = *(unsigned int *)(v8[41] + 1816);
        BYTE7(v166[1]) = 16;
        strcpy((char *)v166, "icon renderItems");
        v67 = 0;
        v68 = 0;
        v66 = 0;
        v69 = 1;
        v65 = v43;
        gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v166, (uint64_t)v64);
        v44 = v8[32];
        v171 = 15;
        strcpy((char *)&v170, "Texture Atlases");
        v45 = gdc::DebugTreeNode::createChildNode((uint64_t)&__p, &v170);
        v171 = 5;
        strcpy((char *)&v170, "atlas");
        v4 = v57;
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v44 + 8) + 48))(&v164, *(_QWORD *)(v44 + 8), 1);
        v167 = 0uLL;
        v168 = 0;
        v169 = 4;
        if (SHIBYTE(v165) < 0)
        {
          std::string::__assign_no_alias<true>(&v167, (void *)v164, *((size_t *)&v164 + 1));
        }
        else
        {
          v167 = v164;
          v168 = v165;
        }
        gdc::DebugTreeNode::addProperty((uint64_t)v45, (uint64_t)&v170, (uint64_t)v166);
        if (SHIBYTE(v168) < 0)
        {
          operator delete((void *)v167);
          if (SHIBYTE(v165) < 0)
            goto LABEL_34;
        }
        else
        {
          if ((SHIBYTE(v165) & 0x80000000) == 0)
            goto LABEL_31;
LABEL_34:
          operator delete((void *)v164);
        }
LABEL_31:
        v171 = 5;
        strcpy((char *)&v170, "atlas");
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v44 + 16) + 48))(&v164, *(_QWORD *)(v44 + 16), 1);
        v167 = 0uLL;
        v168 = 0;
        v169 = 4;
        if (SHIBYTE(v165) < 0)
        {
          std::string::__assign_no_alias<true>(&v167, (void *)v164, *((size_t *)&v164 + 1));
        }
        else
        {
          v167 = v164;
          v168 = v165;
        }
        gdc::DebugTreeNode::addProperty((uint64_t)v45, (uint64_t)&v170, (uint64_t)v166);
        if (SHIBYTE(v168) < 0)
        {
          operator delete((void *)v167);
          if ((SHIBYTE(v165) & 0x80000000) == 0)
            goto LABEL_38;
        }
        else if ((SHIBYTE(v165) & 0x80000000) == 0)
        {
LABEL_38:
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v8[30] + 288))(v8[30], &__p, a2);
          v46 = (id)v8[27];
          dispatch_semaphore_signal(v46);

          goto LABEL_39;
        }
        operator delete((void *)v164);
        goto LABEL_38;
      }
      v18 = (char *)operator new(0x30uLL);
      *(_QWORD *)&v166[0] = v18;
      *(__int128 *)((char *)v166 + 8) = xmmword_19FFB3BF0;
      strcpy(v18, "<<Unable to lock label background state>>");
      gdc::DebugTreeNode::createChildNode((uint64_t)&__p, v166);
      operator delete(v18);
LABEL_39:
      gdc::DebugTreeNode::addChildNode(v4, (__int128 *)&__p);
      v47 = *(void ***)((char *)&v62[1] + 9);
      if (*(_QWORD *)((char *)&v62[1] + 9))
      {
        v48 = *(_QWORD *)((char *)&v62[2] + 1);
        v49 = *(void **)((char *)&v62[1] + 9);
        if (*(_QWORD *)((char *)&v62[2] + 1) != *(_QWORD *)((char *)&v62[1] + 9))
        {
          do
          {
            v50 = *(_QWORD *)(v48 - 24);
            if (v50)
            {
              v51 = *(_QWORD *)(v48 - 16);
              v52 = *(void **)(v48 - 24);
              if (v51 != v50)
              {
                do
                {
                  if (*(char *)(v51 - 1) < 0)
                    operator delete(*(void **)(v51 - 24));
                  v51 -= 24;
                }
                while (v51 != v50);
                v52 = *(void **)(v48 - 24);
              }
              *(_QWORD *)(v48 - 16) = v50;
              operator delete(v52);
            }
            v53 = *(_QWORD *)(v48 - 48);
            if (v53)
            {
              v54 = *(_QWORD *)(v48 - 40);
              v55 = *(void **)(v48 - 48);
              if (v54 != v53)
              {
                do
                {
                  if (*(char *)(v54 - 9) < 0)
                    operator delete(*(void **)(v54 - 32));
                  v54 -= 64;
                }
                while (v54 != v53);
                v55 = *(void **)(v48 - 48);
              }
              *(_QWORD *)(v48 - 40) = v53;
              operator delete(v55);
            }
            v56 = (void **)(v48 - 80);
            if (*(char *)(v48 - 57) < 0)
              operator delete(*v56);
            v48 -= 80;
          }
          while (v56 != v47);
          v49 = *(void **)((char *)&v62[1] + 9);
        }
        *(_QWORD *)((char *)&v62[2] + 1) = v47;
        operator delete(v49);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v62 + 1));
      if (SLOBYTE(v62[0]) < 0)
      {
        operator delete(v61);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_3;
LABEL_67:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_4;
LABEL_68:
        operator delete(__dst.__r_.__value_.__l.__data_);
        v5 = (uint64_t **)*v5;
        if (!v5)
          return;
      }
      else
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_67;
LABEL_3:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_68;
LABEL_4:
        v5 = (uint64_t **)*v5;
        if (!v5)
          return;
      }
    }
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
    memmove(p_dst, v7, v10);
    goto LABEL_15;
  }
}

void sub_19F5DA760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,gdc::DebugTreeNode *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  void *v50;

  operator delete(v50);
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a50);
  if (a49 < 0)
    operator delete(__p);
  gdc::DebugTreeNode::~DebugTreeNode(a37);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0xA588623CD4116DAELL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42C8DC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C8DC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8D80;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8D38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8D38;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68)
      v3 = 0xE42D19AFCA302E68 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0xE42D19AFCA302E68)
      {
        if (v6[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0xE42D19AFCA302E68)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0xE42D19AFCA302E68)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0xF014CCE28176CA44;
    if (a2 <= 0xF014CCE28176CA44)
      v11 = 0xF014CCE28176CA44 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0xF014CCE28176CA44;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0xF014CCE28176CA44)
      {
        if (v13[2] == 0xF014CCE28176CA44)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0xF014CCE28176CA44)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0xF014CCE28176CA44)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0xF014CCE28176CA44)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::LabelsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E42B0BB8;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::LabelsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42B0BB8;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40960023A9);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LabelsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F5DB034(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 232);
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 160);
  v4 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (v4)
    std::default_delete<md::LabelManagerCreationParams>::operator()[abi:nn180100](v4);
  std::unique_ptr<md::LabelSettings>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 144));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 120);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<md::LabelManagerCreationParams>::operator()[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v8 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v8)
      goto LABEL_16;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_16:
  *(_QWORD *)(a1 + 16) = &off_1E42B4D50;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::unique_ptr<md::LabelSettings>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  id *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(id **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v3)
    {
      md::LabelSettingsData::~LabelSettingsData(v3);
      MEMORY[0x1A1AF4E00]();
    }
    v4 = *(std::__shared_weak_count **)(v2 + 32);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40A759441BLL);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::LabelManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::LabelManagerDelegates>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelManagerDelegates>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_emplace<md::LabelManagerDelegates>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;

  v2 = a1 + 39;
  v3 = (_QWORD *)a1[42];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[38];
  if (v5 == a1 + 35)
  {
    v6 = 4;
    v5 = a1 + 35;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[34];
  if (v7 == a1 + 31)
  {
    v8 = 4;
    v7 = a1 + 31;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[30];
  if (v9 == a1 + 27)
  {
    v10 = 4;
    v9 = a1 + 27;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[26];
  if (v11 == a1 + 23)
  {
    v12 = 4;
    v11 = a1 + 23;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[22];
  if (v13 == a1 + 19)
  {
    v14 = 4;
    v13 = a1 + 19;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[18];
  if (v15 == a1 + 15)
  {
    v16 = 4;
    v15 = a1 + 15;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[14];
  if (v17 == a1 + 11)
  {
    v18 = 4;
    v17 = a1 + 11;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = (_QWORD *)a1[10];
  if (v19 == a1 + 7)
  {
    v20 = 4;
    v19 = a1 + 7;
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_46:
  result = (_QWORD *)a1[6];
  if (result == a1 + 3)
  {
    v22 = 4;
    result = a1 + 3;
  }
  else
  {
    if (!result)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

_QWORD *md::LabelsLogic::setNeedsDisplayCallback(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  if (v8 != a1)
  {
    v4 = v9;
    v5 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42C8E58;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42C8E58;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_1E42C8E58;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_19F5DB800(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::__clone(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_1E42C8E58;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::operator()(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t result;
  char v5;
  char v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) == *a2)
    {
      v5 = *a3;
      v7 = *a2;
      v6 = v5;
      return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v7, &v6);
    }
  }
  return result;
}

_QWORD *std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42C8E10;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42C8E10;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_1E42C8E10;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_19F5DBAAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_1E42C8E10;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) == *a2)
    {
      v4 = *a2;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v4);
    }
  }
  return result;
}

void std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

char *std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = md::LabelsLogic::labelManagerForWorldType(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  v4 = *((_QWORD *)result + 1);
  *a2 = *(_QWORD *)result;
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void ggl::BuildingFacadeDepth::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::BuildingFacadeDepth::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::BuildingFacadeDepth::BuildingPipelineSetup::constantDataIsEnabled(ggl::BuildingFacadeDepth::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::BuildingFacadeDepth::BuildingPipelineSetup::textureIsEnabled(ggl::BuildingFacadeDepth::BuildingPipelineSetup *this)
{
  return 0;
}

uint64_t ggl::StandardPostchain::SSAOPipelineState::SSAOPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::StandardPostchainSSAOShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::StandardPostchain::SSAOPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1EE57D790 = &ggl::StandardPostchain::pipelineDataSSAOPipelineDeviceStructs(void)::ref;
          qword_1EE57D798 = 0;
          if ((v97 & 1) == 0
          {
            ggl::StandardPostchain::pipelineDataSSAOPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::SSAOConstants::reflection(void)::reflection;
          }
          qword_1EE57D7A0 = (uint64_t)&ggl::StandardPostchain::pipelineDataSSAOPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57D7A8 = xmmword_19FFB2DB0;
        }
      }
      ggl::StandardPostchain::SSAOPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::SSAOPipelineSetup::typedReflection(void)::ref;
      ggl::StandardPostchainSSAOShader::typedReflection(v92);
      qword_1EE57D7C8 = (uint64_t)&ggl::StandardPostchainSSAOShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateSSAOPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57DDB8 = 0;
        qword_1EE57DDC0 = (uint64_t)"";
        dword_1EE57DDC8 = 0;
        qword_1EE57DDD0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineAttributeBinding_0(void)::attr;
        unk_1EE57DDD8 = 2;
      }
      qword_1EE57D7D0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57D7D8 = 1;
      qword_1EE57D7E0 = 0;
      unk_1EE57D7E8 = 2;
      qword_1EE57D7F0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineDeviceStructBinding(void)::ref;
      unk_1EE57D7F8 = 0;
      if ((v95 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateSSAOPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57DD78 = 0;
        qword_1EE57DD80 = (uint64_t)"ssaoConstants";
        dword_1EE57DD88 = 3;
        qword_1EE57DD90 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineConstantSsaoConstantsBinding(void)::reflection;
        unk_1EE57DD98 = 11;
      }
      qword_1EE57D800 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineConstantStructBinding(void)::ref;
      unk_1EE57D808 = 1;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::StandardPostchain::SSAOPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 305) = (a5 & 2) != 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  *(_QWORD *)a1 = &off_1E42BA220;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::StandardPostchain::SSAOPipelineSetup::~SSAOPipelineSetup(ggl::StandardPostchain::SSAOPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::StandardPostchain::SSAOPipelineSetup::constantDataIsEnabled(ggl::StandardPostchain::SSAOPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::StandardPostchain::SSAOPipelineSetup::textureIsEnabled(ggl::StandardPostchain::SSAOPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

md::LabelPartContent *md::LabelPartContent::LabelPartContent(md::LabelPartContent *this, md::LabelPart *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)a2 + 562))
  {
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v9 + 24) = "VectorKitLabels";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "VectorKitLabels";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v9;
    }
    v5 = mdm::Allocator::instance(void)::alloc;
    v16 = mdm::Allocator::instance(void)::alloc;
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 8, 8);
    v7 = v6;
    v13 = v6;
    v15 = v6 + 1;
    if (v6)
      *v6 = (uint64_t)a2;
    v14 = v6 + 1;
    md::LabelPartContent::parsePartContent((uint64_t)this, &v13);
    if (v7)
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v7, 8);
  }
  else
  {
    (*(void (**)(uint64_t **__return_ptr, md::LabelPart *))(*(_QWORD *)a2 + 200))(&v13, a2);
    md::LabelPartContent::parsePartContent((uint64_t)this, &v13);
    if (v13)
    {
      v14 = v13;
      (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v16 + 40))(v16, v13, (char *)v15 - (char *)v13);
    }
  }
  return this;
}

void sub_19F5DC80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 40))(a12);
  _Unwind_Resume(exception_object);
}

void altitude::DebugRenderUtil::~DebugRenderUtil(altitude::DebugRenderUtil *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C44C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*((_QWORD **)this + 4));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C44C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*((_QWORD **)this + 4));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::DebugRenderUtil::flush(altitude::DebugRenderUtil *this, ggl::CommandBuffer *a2, const RenderTargetFormat *a3)
{
  char *v3;
  char *v4;
  char v6;
  char v7;
  char *v8;
  char *v9;
  BOOL v10;

  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 == (char *)this + 32)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD, ggl::CommandBuffer *, const RenderTargetFormat *))(**((_QWORD **)v3 + 5)
                                                                                               + 24))(*((_QWORD *)v3 + 5), a2, a3);
      v8 = (char *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v6 |= v7;
      v3 = v9;
    }
    while (v9 != v4);
  }
  return v6 & 1;
}

void altitude::SphereColorFeature::~SphereColorFeature(altitude::SphereColorFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5688;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::DebugRenderFeature::~DebugRenderFeature(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5688;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::DebugRenderFeature::~DebugRenderFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::DebugRenderFeatureT<(altitude::DebugRenderFeatureId)0>::id()
{
  return 0;
}

BOOL altitude::DebugRenderFeature::onFlush(altitude::DebugRenderFeature *this, ggl::CommandBuffer *a2)
{
  unint64_t v4;
  __n128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  ggl::RenderItem ***v16;
  ggl::RenderItem ***v17;
  ggl::RenderItem **v18;
  int64x2_t v19;
  int64x2_t v20;
  _BOOL8 result;
  uint64_t v22;

  v4 = *((_QWORD *)this + 8);
  if (v4 != *((_QWORD *)this + 9))
  {
    v4 = *((_QWORD *)this + 9);
    do
    {
      v5 = (__n128 *)*((_QWORD *)this + 3);
      if ((unint64_t)v5 >= *((_QWORD *)this + 4))
      {
        v10 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 16, *(__n128 *)(v4 - 16));
      }
      else
      {
        v7 = *(_QWORD *)(v4 - 16);
        v6 = *(_QWORD *)(v4 - 8);
        v5->n128_u64[0] = v7;
        v5->n128_u64[1] = v6;
        if (v6)
        {
          v8 = (unint64_t *)(v6 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v10 = v5 + 1;
      }
      *((_QWORD *)this + 3) = v10;
      v11 = *((_QWORD *)this + 9);
      v12 = *(std::__shared_weak_count **)(v11 - 8);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v4 = v11 - 16;
      *((_QWORD *)this + 9) = v11 - 16;
    }
    while (*((_QWORD *)this + 8) != v11 - 16);
  }
  v15 = *((_QWORD *)this + 5);
  v16 = (ggl::RenderItem ***)*((_QWORD *)this + 6);
  if ((ggl::RenderItem ***)v15 == v16)
  {
    v20 = vdupq_n_s64(v4);
    v19 = vdupq_n_s64(v15);
  }
  else
  {
    v17 = (ggl::RenderItem ***)*((_QWORD *)this + 5);
    do
    {
      v18 = *v17;
      v17 += 2;
      ggl::CommandBuffer::pushRenderItem((uint64_t)a2, *v18);
    }
    while (v17 != v16);
    v19 = *(int64x2_t *)((char *)this + 40);
    v20 = *((int64x2_t *)this + 4);
  }
  result = v15 != (_QWORD)v16;
  *(int64x2_t *)((char *)this + 40) = v20;
  *((int64x2_t *)this + 4) = v19;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v22;
  return result;
}

void altitude::SphereColorFeature::createDrawable(altitude::SphereColorFeature *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;

  v3 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(v3 + 8);
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (_QWORD *)operator new();
  v9 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(v9 + 48);
  v10 = *(std::__shared_weak_count **)(v9 + 56);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1018;
  v16 = v14 + 1;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE575550, 2, 1, 6, 1);
  v14[9].__shared_owners_ = (uint64_t)ggl::ShadedColor::Props::reflection(void)::reflection;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8CB0;
  if (v4)
  {
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ggl::PipelineSetup::PipelineSetup(v8, v5, (uint64_t)v4);
    v19 = (unint64_t *)&v4->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v8, v5, 0);
  }
  *v8 = &off_1E42B5E08;
  v21 = (_QWORD *)v8[8];
  *v21 = v11;
  v21[1] = 0;
  v22 = (_QWORD *)v8[20];
  if (v10)
  {
    v23 = (unint64_t *)&v10->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)v22[1];
  *v22 = v11;
  v22[1] = v10;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v8[8];
  *(_QWORD *)(v28 + 16) = v16;
  *(_QWORD *)(v28 + 24) = 0;
  v29 = v8[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 24);
  *(_QWORD *)(v29 + 16) = v16;
  *(_QWORD *)(v29 + 24) = v14;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v34 = __ldaxr(v15);
  while (__stlxr(v34 - 1, v15));
  if (v34)
  {
    if (!v10)
      goto LABEL_39;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v10)
      goto LABEL_39;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_39:
  v37 = *(_QWORD **)(v8[8] + 16);
  v38 = v37[1];
  v40 = v37[8];
  v39 = v37[9];
  *(_DWORD *)(v39 + 24) = 1065353216;
  *(_QWORD *)(v39 + 16) = 0;
  if (v40 > v38)
    v38 = v40;
  v37[7] = 0;
  v37[8] = v38;
  v41 = (int64x2_t *)operator new();
  v42 = *((_QWORD *)this + 13);
  v43 = *((_QWORD *)this + 11);
  v41->i64[0] = (uint64_t)&off_1E42B59B0;
  v41[1].i64[0] = (uint64_t)"";
  v41[1].i64[1] = v42;
  v41[2].i64[0] = (uint64_t)v8;
  v41[2].i32[2] = 0;
  v41[3].i64[0] = 0;
  v41[3].i32[2] = 1065353216;
  v41[4].i64[0] = v43;
  v41[4].i64[1] = 0;
  v41[5].i64[0] = 0;
  v41[5].i64[1] = 0;
  v41[6] = vdupq_n_s64(1uLL);
  v41[7].i64[0] = 0;
  v44 = operator new(0x38uLL);
  v44[1] = 0;
  v44[2] = 0;
  *v44 = &off_1E42E4EE0;
  v44[3] = v41;
  v44[4] = v8;
  v44[5] = v43;
  v45 = *((_QWORD *)this + 12);
  v44[6] = v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  *a2 = v44 + 3;
  a2[1] = v44;
  if (v4)
  {
    v48 = (unint64_t *)&v4->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__shared_ptr_emplace<ggl::Drawable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Drawable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Drawable>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = a1[3];
  a1[3] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::ShadedColor::Props>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ShadedColor::Props>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ShadedColor::Props>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ShadedColor::Props>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ShadedColor::Props>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::DebugRenderFeature::~DebugRenderFeature(altitude::DebugRenderFeature *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = off_1E42C5378;
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = (void *)*((_QWORD *)this + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    operator delete(v4);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *((_QWORD *)this + 6);
    v10 = (void *)*((_QWORD *)this + 5);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v8;
    operator delete(v10);
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    v15 = *((_QWORD *)this + 3);
    v16 = (void *)*((_QWORD *)this + 2);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v14;
    operator delete(v16);
  }
}

void altitude::DebugRenderFeature::createDrawable(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__shared_ptr_emplace<ggl::ShadedColor::P3NPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEA40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ShadedColor::P3NPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEA40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ShadedColor::P3NPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::DebugRenderUtil::Global>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DebugRenderUtil::Global>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DebugRenderUtil::Global>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E16E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DebugRenderUtil::Global>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E16E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DebugRenderUtil::Global>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::DebugRenderUtil::P3NMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF3A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DebugRenderUtil::P3NMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF3A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DebugRenderUtil::P3NMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::VertexDataTyped<ggl::DebugRenderUtil::P3NVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DebugRenderUtil::P3NVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DebugRenderUtil::P3NVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DebugRenderUtil::P3NVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DebugRenderUtil::P3NVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DebugRenderUtil::P3NVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0,std::allocator<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0>,md::FrameGraphLogicalResource * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0,std::allocator<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0>,md::FrameGraphLogicalResource * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CE468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0,std::allocator<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0>,md::FrameGraphLogicalResource * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE468;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0,std::allocator<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0>,md::FrameGraphLogicalResource * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 24);
  v5 = *(unsigned __int8 *)(v3 + 52);
  if (v5 == 2)
    v6 = 2;
  else
    v6 = v5 == 1;
  v7 = *(_OWORD *)*(_QWORD *)(a1 + 16);
  *(_BYTE *)v2 = v6;
  *(_OWORD *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = -1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = v2 + 48;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = v2 + 72;
  v8 = *(_QWORD *)(v3 + 48);
  v10 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 104) = v10;
  *(__n128 *)(v2 + 120) = result;
  *(_QWORD *)(v2 + 136) = v8;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *,false>(uint64_t result, unsigned __int8 **a2, uint64_t a3, char a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned __int8 **v57;
  unsigned __int8 **v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 **v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 **v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  BOOL v72;
  unsigned __int8 *v73;
  unsigned __int8 **v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned __int8 **v92;
  unsigned __int8 **v93;
  unsigned __int8 **v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 **v101;
  BOOL v103;
  uint64_t v104;
  unsigned __int8 **v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t i;
  uint64_t *v110;
  unsigned __int8 **v111;
  unsigned __int8 *v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  unsigned __int8 **v117;
  unsigned int v118;
  unsigned int v119;
  BOOL v120;
  unsigned __int8 **v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned int v124;
  unsigned int v125;
  BOOL v126;
  unsigned __int8 **v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 **v134;
  unsigned __int8 **v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  uint64_t v141;
  unint64_t v142;
  unsigned __int8 **v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 **v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unsigned int v153;
  unsigned __int8 **v154;
  unsigned __int8 **v155;

  v7 = (unsigned __int8 **)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v85 = *v7;
        if (**v8 < **v7)
        {
          *v7 = *v8;
          *v8 = v85;
        }
        return result;
      case 3uLL:
        v86 = *v7;
        v87 = v7[1];
        v88 = *v87;
        v89 = **v7;
        v90 = *v8;
        v91 = **v8;
        if (v88 >= v89)
        {
          if (v91 < v88)
          {
            v7[1] = v90;
            *v8 = v87;
            v150 = *v7;
            v149 = v7[1];
            if (*v149 < **v7)
            {
              *v7 = v149;
              v7[1] = v150;
            }
          }
        }
        else
        {
          if (v91 >= v88)
          {
            *v7 = v87;
            v7[1] = v86;
            if (**v8 >= v89)
              return result;
            v7[1] = *v8;
          }
          else
          {
            *v7 = v90;
          }
          *v8 = v86;
        }
        return result;
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        v92 = v7 + 1;
        v93 = v7 + 2;
        v94 = v7 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v7, v7 + 1, v7 + 2, v7 + 3);
        v95 = v7[3];
        if (**v8 < *v95)
        {
          *v94 = *v8;
          *v8 = v95;
          v96 = *v94;
          v97 = *v93;
          v98 = **v94;
          if (v98 < **v93)
          {
            *v93 = v96;
            *v94 = v97;
            v99 = *v92;
            if (v98 < **v92)
            {
              v7[1] = v96;
              v7[2] = v99;
              v100 = *v7;
              if (v98 < **v7)
              {
                *v7 = v96;
                v7[1] = v100;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v101 = v7 + 1;
          v103 = v7 == a2 || v101 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v103)
            {
              v104 = 0;
              v105 = v7;
              do
              {
                v106 = *v105;
                v107 = v105[1];
                v105 = v101;
                if (*v107 < *v106)
                {
                  v108 = 0;
                  *v101 = 0;
                  for (i = v104; ; i -= 8)
                  {
                    v110 = (uint64_t *)((char *)v7 + i);
                    *v110 = 0;
                    v110[1] = (uint64_t)v106;
                    if (v108)
                    {
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v108 + 112));
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v108 + 88));
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v108 + 64));
                      if (*(char *)(v108 + 47) < 0)
                        operator delete(*(void **)(v108 + 24));
                      result = MEMORY[0x1A1AF4E00](v108, 0x1032C4041C7693DLL);
                    }
                    if (!i)
                      break;
                    v111 = (unsigned __int8 **)((char *)v7 + i);
                    v106 = *(unsigned __int8 **)((char *)v7 + i - 8);
                    if (*v107 >= *v106)
                      goto LABEL_141;
                    v108 = *v110;
                  }
                  v111 = v7;
LABEL_141:
                  v112 = *v111;
                  *v111 = v107;
                  if (v112)
                  {
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v112 + 14));
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v112 + 11));
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v112 + 8));
                    if ((char)v112[47] < 0)
                      operator delete(*((void **)v112 + 3));
                    result = MEMORY[0x1A1AF4E00](v112, 0x1032C4041C7693DLL);
                  }
                }
                v101 = v105 + 1;
                v104 += 8;
              }
              while (v105 + 1 != a2);
            }
          }
          else if (!v103)
          {
            do
            {
              v152 = *v7;
              v151 = v7[1];
              v7 = v101;
              v153 = *v151;
              if (v153 < *v152)
              {
                *v7 = 0;
                v154 = v7;
                do
                {
                  v155 = v154;
                  *--v154 = 0;
                  *v155 = v152;
                  v152 = *(v155 - 2);
                }
                while (v153 < *v152);
                *v154 = v151;
              }
              v101 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v113 = (v11 - 2) >> 1;
          v114 = v113;
          do
          {
            v115 = v114;
            if (v113 >= v114)
            {
              v116 = (2 * v114) | 1;
              v117 = &v7[v116];
              if (2 * v115 + 2 >= (uint64_t)v11)
              {
                v118 = **v117;
              }
              else
              {
                v118 = **v117;
                v119 = *v117[1];
                v120 = v118 >= v119;
                if (v118 <= v119)
                  v118 = *v117[1];
                if (!v120)
                {
                  ++v117;
                  v116 = 2 * v115 + 2;
                }
              }
              v121 = &v7[v115];
              v122 = *v121;
              if (v118 >= **v121)
              {
                *v121 = 0;
                v123 = *v117;
                do
                {
                  v127 = v117;
                  *v117 = 0;
                  v128 = *v121;
                  *v121 = v123;
                  if (v128)
                  {
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v128 + 14));
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v128 + 11));
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v128 + 8));
                    if ((char)v128[47] < 0)
                      operator delete(*((void **)v128 + 3));
                    result = MEMORY[0x1A1AF4E00](v128, 0x1032C4041C7693DLL);
                  }
                  if (v113 < v116)
                    break;
                  v117 = &v7[(2 * v116) | 1];
                  if (2 * v116 + 2 < (uint64_t)v11)
                  {
                    v123 = *v117;
                    v124 = **v117;
                    v125 = *v117[1];
                    v126 = v124 >= v125;
                    if (v124 <= v125)
                      v124 = *v117[1];
                    if (v126)
                    {
                      v116 = (2 * v116) | 1;
                    }
                    else
                    {
                      v123 = v117[1];
                      ++v117;
                      v116 = 2 * v116 + 2;
                    }
                  }
                  else
                  {
                    v123 = *v117;
                    v124 = **v117;
                    v116 = (2 * v116) | 1;
                  }
                  v121 = v127;
                }
                while (v124 >= *v122);
                v129 = *v127;
                *v127 = v122;
                if (v129)
                {
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v129 + 14));
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v129 + 11));
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v129 + 8));
                  if ((char)v129[47] < 0)
                    operator delete(*((void **)v129 + 3));
                  result = MEMORY[0x1A1AF4E00](v129, 0x1032C4041C7693DLL);
                }
              }
            }
            v114 = v115 - 1;
          }
          while (v115);
          v130 = (unint64_t)v10 >> 3;
          while (2)
          {
            v132 = 0;
            v133 = *v7;
            *v7 = 0;
            v134 = v7;
            do
            {
              v135 = &v134[v132 + 1];
              if (2 * v132 + 2 >= v130)
              {
                v136 = *v135;
                v132 = (2 * v132) | 1;
              }
              else
              {
                v136 = *v135;
                if (**v135 >= *v134[v132 + 2])
                {
                  v132 = (2 * v132) | 1;
                }
                else
                {
                  v136 = v134[v132 + 2];
                  v135 = &v134[v132 + 2];
                  v132 = 2 * v132 + 2;
                }
              }
              *v135 = 0;
              v137 = *v134;
              *v134 = v136;
              if (v137)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v137 + 14));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v137 + 11));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v137 + 8));
                if ((char)v137[47] < 0)
                  operator delete(*((void **)v137 + 3));
                result = MEMORY[0x1A1AF4E00](v137, 0x1032C4041C7693DLL);
              }
              v134 = v135;
            }
            while (v132 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
            if (v135 == --a2)
            {
              v148 = *v135;
              *v135 = v133;
              if (!v148)
                goto LABEL_176;
            }
            else
            {
              v138 = *a2;
              *a2 = 0;
              v139 = *v135;
              *v135 = v138;
              if (v139)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v139 + 14));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v139 + 11));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v139 + 8));
                if ((char)v139[47] < 0)
                  operator delete(*((void **)v139 + 3));
                result = MEMORY[0x1A1AF4E00](v139, 0x1032C4041C7693DLL);
              }
              v140 = *a2;
              *a2 = v133;
              if (v140)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v140 + 14));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v140 + 11));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v140 + 8));
                if ((char)v140[47] < 0)
                  operator delete(*((void **)v140 + 3));
                result = MEMORY[0x1A1AF4E00](v140, 0x1032C4041C7693DLL);
              }
              v141 = (char *)(v135 + 1) - (char *)v7;
              if (v141 < 9)
                goto LABEL_176;
              v142 = (((unint64_t)v141 >> 3) - 2) >> 1;
              v143 = &v7[v142];
              v144 = *v135;
              if (**v143 >= **v135)
                goto LABEL_176;
              *v135 = 0;
              v145 = *v143;
              do
              {
                v146 = v143;
                *v143 = 0;
                v147 = *v135;
                *v135 = v145;
                if (v147)
                {
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v147 + 14));
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v147 + 11));
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v147 + 8));
                  if ((char)v147[47] < 0)
                    operator delete(*((void **)v147 + 3));
                  result = MEMORY[0x1A1AF4E00](v147, 0x1032C4041C7693DLL);
                }
                if (!v142)
                  break;
                v142 = (v142 - 1) >> 1;
                v143 = &v7[v142];
                v145 = *v143;
                v135 = v146;
              }
              while (**v143 < *v144);
              v148 = *v146;
              *v146 = v144;
              if (!v148)
              {
LABEL_176:
                if (v130-- <= 2)
                  return result;
                continue;
              }
            }
            break;
          }
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v148 + 14));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v148 + 11));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v148 + 8));
          if ((char)v148[47] < 0)
            operator delete(*((void **)v148 + 3));
          result = MEMORY[0x1A1AF4E00](v148, 0x1032C4041C7693DLL);
          goto LABEL_176;
        }
        v12 = v11 >> 1;
        v13 = &v7[v11 >> 1];
        v14 = *v8;
        v15 = **v8;
        if ((unint64_t)v10 >= 0x401)
        {
          v16 = *v13;
          v17 = *v7;
          v18 = **v13;
          v19 = **v7;
          if (v18 >= v19)
          {
            if (v15 < v18)
            {
              *v13 = v14;
              *v8 = v16;
              v24 = *v7;
              if (**v13 < **v7)
              {
                *v7 = *v13;
                *v13 = v24;
              }
            }
          }
          else
          {
            if (v15 < v18)
            {
              *v7 = v14;
              goto LABEL_21;
            }
            *v7 = v16;
            *v13 = v17;
            if (**v8 < v19)
            {
              *v13 = *v8;
LABEL_21:
              *v8 = v17;
            }
          }
          v26 = &v7[v12];
          v29 = *(v26 - 1);
          v27 = v26 - 1;
          v28 = v29;
          v30 = v7[1];
          v31 = *v29;
          v32 = *v30;
          v33 = *(a2 - 2);
          v34 = *v33;
          if (v31 >= v32)
          {
            if (v34 < v31)
            {
              *v27 = v33;
              *(a2 - 2) = v28;
              v35 = v7[1];
              if (**v27 < *v35)
              {
                v7[1] = *v27;
                *v27 = v35;
              }
            }
          }
          else
          {
            if (v34 < v31)
            {
              v7[1] = v33;
              goto LABEL_33;
            }
            v7[1] = v28;
            *v27 = v30;
            v36 = *(a2 - 2);
            if (*v36 < v32)
            {
              *v27 = v36;
LABEL_33:
              *(a2 - 2) = v30;
            }
          }
          v37 = &v7[v12];
          v40 = v37[1];
          v38 = v37 + 1;
          v39 = v40;
          v41 = v7[2];
          v42 = *v40;
          v43 = *v41;
          v44 = *(a2 - 3);
          v45 = *v44;
          if (v42 >= v43)
          {
            if (v45 < v42)
            {
              *v38 = v44;
              *(a2 - 3) = v39;
              v46 = v7[2];
              if (**v38 < *v46)
              {
                v7[2] = *v38;
                *v38 = v46;
              }
            }
          }
          else
          {
            if (v45 < v42)
            {
              v7[2] = v44;
              goto LABEL_42;
            }
            v7[2] = v39;
            *v38 = v41;
            v47 = *(a2 - 3);
            if (*v47 < v43)
            {
              *v38 = v47;
LABEL_42:
              *(a2 - 3) = v41;
            }
          }
          v48 = *v13;
          v49 = *v27;
          v50 = **v13;
          v51 = **v27;
          v52 = *v38;
          v53 = **v38;
          if (v50 >= v51)
          {
            if (v53 >= v50)
              goto LABEL_50;
            *v13 = v52;
            *v38 = v48;
            v38 = &v7[v11 >> 1];
            v48 = v49;
            if (v53 >= v51)
            {
              v48 = v52;
              goto LABEL_50;
            }
          }
          else if (v53 >= v50)
          {
            *v27 = v48;
            *v13 = v49;
            v27 = &v7[v11 >> 1];
            v48 = v52;
            if (v53 >= v51)
            {
              v48 = v49;
LABEL_50:
              v54 = *v7;
              *v7 = v48;
              *v13 = v54;
              goto LABEL_51;
            }
          }
          *v27 = v52;
          *v38 = v49;
          goto LABEL_50;
        }
        v20 = *v7;
        v21 = *v13;
        v22 = **v7;
        v23 = **v13;
        if (v22 >= v23)
        {
          if (v15 < v22)
          {
            *v7 = v14;
            *v8 = v20;
            v25 = *v13;
            if (**v7 < **v13)
            {
              *v13 = *v7;
              *v7 = v25;
            }
          }
        }
        else
        {
          if (v15 >= v22)
          {
            *v13 = v20;
            *v7 = v21;
            if (**v8 >= v23)
              goto LABEL_51;
            *v7 = *v8;
          }
          else
          {
            *v13 = v14;
          }
          *v8 = v21;
        }
LABEL_51:
        --a3;
        v55 = *v7;
        v56 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v56)
        {
          *v7 = 0;
          if (v56 >= **v8)
          {
            v74 = v7 + 1;
            do
            {
              v9 = v74;
              if (v74 >= a2)
                break;
              ++v74;
            }
            while (v56 >= **v9);
          }
          else
          {
            v9 = v7;
            do
            {
              v73 = v9[1];
              ++v9;
            }
            while (v56 >= *v73);
          }
          v75 = a2;
          if (v9 < a2)
          {
            v75 = a2;
            do
              v76 = *--v75;
            while (v56 < *v76);
          }
          if (v9 < v75)
          {
            v77 = *v9;
            v78 = *v75;
            do
            {
              *v9 = v78;
              *v75 = v77;
              do
              {
                v79 = v9[1];
                ++v9;
                v77 = v79;
              }
              while (v56 >= *v79);
              do
              {
                v80 = *--v75;
                v78 = v80;
              }
              while (v56 < *v80);
            }
            while (v9 < v75);
          }
          v81 = v9 - 1;
          if (v9 - 1 != v7)
          {
            v82 = *v81;
            *v81 = 0;
            v83 = *v7;
            *v7 = v82;
            if (v83)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v83 + 14));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v83 + 11));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v83 + 8));
              if ((char)v83[47] < 0)
                operator delete(*((void **)v83 + 3));
              result = MEMORY[0x1A1AF4E00](v83, 0x1032C4041C7693DLL);
            }
          }
          a4 = 0;
          v84 = *v81;
          *v81 = v55;
          if (v84)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v84 + 14));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v84 + 11));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v84 + 8));
            if ((char)v84[47] < 0)
              operator delete(*((void **)v84 + 3));
            result = MEMORY[0x1A1AF4E00](v84, 0x1032C4041C7693DLL);
            a4 = 0;
          }
          continue;
        }
        *v7 = 0;
        v57 = v7;
        do
        {
          v58 = v57;
          v60 = v57[1];
          ++v57;
          v59 = v60;
        }
        while (*v60 < v56);
        v61 = a2;
        if (v58 == v7)
        {
          v61 = a2;
          do
          {
            if (v57 >= v61)
              break;
            v63 = *--v61;
          }
          while (*v63 >= v56);
        }
        else
        {
          do
            v62 = *--v61;
          while (*v62 >= v56);
        }
        if (v57 < v61)
        {
          v64 = *v61;
          v65 = v57;
          v66 = v61;
          do
          {
            *v65 = v64;
            *v66 = v59;
            do
            {
              v58 = v65;
              v67 = v65[1];
              ++v65;
              v59 = v67;
            }
            while (*v67 < v56);
            do
            {
              v68 = *--v66;
              v64 = v68;
            }
            while (*v68 >= v56);
          }
          while (v65 < v66);
        }
        if (v58 != v7)
        {
          v69 = *v58;
          *v58 = 0;
          v70 = *v7;
          *v7 = v69;
          if (v70)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v70 + 14));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v70 + 11));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v70 + 8));
            if ((char)v70[47] < 0)
              operator delete(*((void **)v70 + 3));
            MEMORY[0x1A1AF4E00](v70, 0x1032C4041C7693DLL);
          }
        }
        v71 = *v58;
        *v58 = v55;
        if (v71)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v71 + 14));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v71 + 11));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v71 + 8));
          if ((char)v71[47] < 0)
            operator delete(*((void **)v71 + 3));
          MEMORY[0x1A1AF4E00](v71, 0x1032C4041C7693DLL);
        }
        if (v57 < v61)
        {
LABEL_79:
          result = std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *,false>(v7, v58, a3, a4 & 1);
          a4 = 0;
          v9 = v58 + 1;
          continue;
        }
        v72 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v7, v58);
        v9 = v58 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v58 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v72)
            continue;
          goto LABEL_79;
        }
        a2 = v58;
        if (!v72)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,false>(uint64_t result, unsigned __int8 **a2, uint64_t a3, char a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 **i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int8 **k;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int8 **v25;
  unsigned __int8 **m;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  BOOL v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  BOOL v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 **j;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  BOOL v50;
  unsigned __int8 *v51;
  unsigned int v52;
  BOOL v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned __int8 **v63;
  BOOL v65;
  uint64_t v66;
  unsigned __int8 **v67;
  unsigned __int8 **v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t n;
  uint64_t *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unsigned __int8 **v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned __int8 *v95;
  unsigned __int8 **v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned int v100;
  BOOL v101;
  unsigned int v103;
  unsigned int v104;
  BOOL v105;
  unsigned __int8 *v106;
  uint64_t v107;
  unsigned __int8 *v108;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 **v112;
  unsigned __int8 **v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  unsigned int v117;
  BOOL v118;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  unsigned __int8 **v127;
  unsigned __int8 *v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v131;
  unsigned __int8 *v132;
  unsigned __int8 **v133;
  unsigned __int8 *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned __int8 **v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned int v140;
  unsigned int v141;
  BOOL v142;
  unsigned __int8 *v143;
  unsigned __int8 **v144;
  unsigned int v145;

  v7 = (unsigned __int8 **)result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v58 = *v8;
        v59 = *v7;
        v60 = **v8;
        v61 = **v7;
        v62 = v60 >= v61;
        if (v60 == v61)
          v62 = *((_QWORD *)v58 + 3) + (unint64_t)*((unsigned int *)v58 + 5) >= *((_QWORD *)v59 + 3)
                                                                                     + (unint64_t)*((unsigned int *)v59 + 5);
        if (!v62)
        {
          *v7 = v58;
          *v8 = v59;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v7, v7 + 1, a2 - 1);
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,0>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v7 == a2)
              return result;
            v80 = (unint64_t)(v11 - 2) >> 1;
            v81 = v80;
            do
            {
              v82 = v81;
              if (v80 >= v81)
              {
                v83 = (2 * v81) | 1;
                v84 = &v7[v83];
                if (2 * v82 + 2 < v11)
                {
                  v85 = v84[1];
                  v86 = **v84;
                  v87 = *v85;
                  v88 = v86 >= v87;
                  if (v86 == v87)
                    v88 = *((_QWORD *)*v84 + 3) + (unint64_t)*((unsigned int *)*v84 + 5) >= *((_QWORD *)v85 + 3)
                                                                                                 + (unint64_t)*((unsigned int *)v85 + 5);
                  if (!v88)
                  {
                    ++v84;
                    v83 = 2 * v82 + 2;
                  }
                }
                v90 = &v7[v82];
                v91 = *v90;
                v92 = **v84;
                v93 = **v90;
                v94 = v92 >= v93;
                if (v92 == v93)
                  v94 = *((_QWORD *)*v84 + 3) + (unint64_t)*((unsigned int *)*v84 + 5) >= *((_QWORD *)v91 + 3)
                                                                                               + (unint64_t)*((unsigned int *)v91 + 5);
                if (v94)
                {
                  *v90 = 0;
                  v95 = *v84;
                  while (1)
                  {
                    v96 = v84;
                    *v84 = 0;
                    v97 = *v90;
                    *v90 = v95;
                    if (v97)
                    {
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v97 + 9));
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v97 + 6));
                      result = MEMORY[0x1A1AF4E00](v97, 0x1070C4044CBF76DLL);
                    }
                    if (v80 < v83)
                      break;
                    v84 = &v7[(2 * v83) | 1];
                    if (2 * v83 + 2 >= v11)
                    {
                      v83 = (2 * v83) | 1;
                    }
                    else
                    {
                      v98 = v84[1];
                      v99 = **v84;
                      v100 = *v98;
                      v101 = v99 >= v100;
                      if (v99 == v100)
                        v101 = *((_QWORD *)*v84 + 3) + (unint64_t)*((unsigned int *)*v84 + 5) >= *((_QWORD *)v98 + 3) + (unint64_t)*((unsigned int *)v98 + 5);
                      if (!v101)
                      {
                        ++v84;
                        v83 = 2 * v83 + 2;
                      }
                      else
                      {
                        v83 = (2 * v83) | 1;
                      }
                    }
                    v95 = *v84;
                    v103 = **v84;
                    v104 = *v91;
                    v105 = v103 >= v104;
                    if (v103 == v104)
                    {
                      v90 = v96;
                      if (*((_QWORD *)v95 + 3) + (unint64_t)*((unsigned int *)v95 + 5) < *((_QWORD *)v91 + 3)
                                                                                               + (unint64_t)*((unsigned int *)v91 + 5))
                        break;
                    }
                    else
                    {
                      v90 = v96;
                      if (!v105)
                        break;
                    }
                  }
                  v106 = *v96;
                  *v96 = v91;
                  if (v106)
                  {
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v106 + 9));
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v106 + 6));
                    result = MEMORY[0x1A1AF4E00](v106, 0x1070C4044CBF76DLL);
                  }
                }
              }
              v81 = v82 - 1;
            }
            while (v82);
            v107 = (unint64_t)v10 >> 3;
            while (1)
            {
              v110 = 0;
              v111 = *v7;
              *v7 = 0;
              v112 = v7;
              do
              {
                v113 = &v112[v110 + 1];
                v114 = 2 * v110;
                v110 = (2 * v110) | 1;
                if (v114 + 2 < v107)
                {
                  v115 = v113[1];
                  v116 = **v113;
                  v117 = *v115;
                  v118 = v116 >= v117;
                  if (v116 == v117)
                    v118 = *((_QWORD *)*v113 + 3) + (unint64_t)*((unsigned int *)*v113 + 5) >= *((_QWORD *)v115 + 3) + (unint64_t)*((unsigned int *)v115 + 5);
                  if (!v118)
                  {
                    ++v113;
                    v110 = v114 + 2;
                  }
                }
                v120 = *v113;
                *v113 = 0;
                v121 = *v112;
                *v112 = v120;
                if (v121)
                {
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v121 + 9));
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v121 + 6));
                  result = MEMORY[0x1A1AF4E00](v121, 0x1070C4044CBF76DLL);
                }
                v112 = v113;
              }
              while (v110 <= (uint64_t)((unint64_t)(v107 - 2) >> 1));
              if (v113 != --a2)
                break;
              v108 = *v113;
              *v113 = v111;
              if (v108)
                goto LABEL_167;
LABEL_168:
              if (v107-- <= 2)
                return result;
            }
            v122 = *a2;
            *a2 = 0;
            v123 = *v113;
            *v113 = v122;
            if (v123)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v123 + 9));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v123 + 6));
              result = MEMORY[0x1A1AF4E00](v123, 0x1070C4044CBF76DLL);
            }
            v124 = *a2;
            *a2 = v111;
            if (v124)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v124 + 9));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v124 + 6));
              result = MEMORY[0x1A1AF4E00](v124, 0x1070C4044CBF76DLL);
            }
            v125 = (char *)(v113 + 1) - (char *)v7;
            if (v125 < 9)
              goto LABEL_168;
            v126 = (((unint64_t)v125 >> 3) - 2) >> 1;
            v127 = &v7[v126];
            v128 = *v113;
            v129 = **v127;
            v130 = **v113;
            v131 = v129 >= v130;
            if (v129 == v130)
              v131 = *((_QWORD *)*v127 + 3) + (unint64_t)*((unsigned int *)*v127 + 5) >= *((_QWORD *)v128 + 3)
                                                                                              + (unint64_t)*((unsigned int *)v128 + 5);
            if (v131)
              goto LABEL_168;
            *v113 = 0;
            v132 = *v127;
            while (1)
            {
              v133 = v127;
              *v127 = 0;
              v134 = *v113;
              *v113 = v132;
              if (v134)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v134 + 9));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v134 + 6));
                result = MEMORY[0x1A1AF4E00](v134, 0x1070C4044CBF76DLL);
              }
              if (!v126)
                break;
              v126 = (v126 - 1) >> 1;
              v127 = &v7[v126];
              v132 = *v127;
              v135 = **v127;
              v136 = *v128;
              if (v135 == v136)
              {
                v113 = v133;
                if (*((_QWORD *)v132 + 3) + (unint64_t)*((unsigned int *)v132 + 5) >= *((_QWORD *)v128 + 3)
                                                                                            + (unint64_t)*((unsigned int *)v128 + 5))
                  break;
              }
              else
              {
                v113 = v133;
                if (v135 >= v136)
                  break;
              }
            }
            v108 = *v133;
            *v133 = v128;
            if (!v108)
              goto LABEL_168;
LABEL_167:
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v108 + 9));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v108 + 6));
            result = MEMORY[0x1A1AF4E00](v108, 0x1070C4044CBF76DLL);
            goto LABEL_168;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v13, v7, a2 - 1);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v7, v13, a2 - 1);
            v14 = v12;
            v15 = &v7[v12];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v7 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v7 + 2, &v7[v14 + 1], a2 - 3);
            result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v15 - 1, v13, &v7[v14 + 1]);
            v16 = *v7;
            *v7 = *v15;
            *v15 = v16;
          }
          --a3;
          v17 = *v7;
          v18 = **v7;
          if ((a4 & 1) == 0)
          {
            v19 = *(v7 - 1);
            v20 = *v19;
            v21 = v20 >= v18;
            if (v20 == v18)
              v21 = *((_QWORD *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) >= *((_QWORD *)v17 + 3)
                                                                                         + (unint64_t)*((unsigned int *)v17 + 5);
            if (v21)
            {
              *v7 = 0;
              v41 = *v8;
              v42 = **v8;
              if (v18 == v42)
              {
                if (*((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) < *((_QWORD *)v41 + 3)
                                                                                         + (unint64_t)*((unsigned int *)v41 + 5))
                  goto LABEL_64;
              }
              else if (v18 < v42)
              {
LABEL_64:
                for (i = v7 + 1; ; ++i)
                {
                  v44 = **i;
                  if (v18 == v44)
                  {
                    if (*((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) < *((_QWORD *)*i + 3)
                                                                                             + (unint64_t)*((unsigned int *)*i + 5))
                      goto LABEL_69;
                  }
                  else if (v18 < v44)
                  {
                    goto LABEL_69;
                  }
                }
              }
              for (i = v7 + 1; i < a2; ++i)
              {
                v43 = **i;
                if (v18 == v43)
                {
                  if (*((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) < *((_QWORD *)*i + 3)
                                                                                           + (unint64_t)*((unsigned int *)*i + 5))
                    break;
                }
                else if (v18 < v43)
                {
                  break;
                }
              }
LABEL_69:
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 1; ; --j)
                {
                  if (v18 == v42)
                  {
                    if (*((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) >= *((_QWORD *)v41 + 3)
                                                                                              + (unint64_t)*((unsigned int *)v41 + 5))
                      break;
                  }
                  else if (v18 >= v42)
                  {
                    break;
                  }
                  v46 = *(j - 1);
                  v41 = v46;
                  v42 = *v46;
                }
              }
              if (i < j)
              {
                v47 = *i;
                v48 = *j;
                do
                {
                  *i++ = v48;
                  *j = v47;
                  while (1)
                  {
                    v47 = *i;
                    v49 = **i;
                    v50 = v18 >= v49;
                    if (v18 == v49)
                      v50 = *((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) >= *((_QWORD *)v47 + 3)
                                                                                                 + (unint64_t)*((unsigned int *)v47 + 5);
                    if (!v50)
                      break;
                    ++i;
                  }
                  do
                  {
                    v51 = *--j;
                    v48 = v51;
                    v52 = *v51;
                    v53 = v18 >= v52;
                    if (v18 == v52)
                      v53 = *((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) >= *((_QWORD *)v48 + 3)
                                                                                                 + (unint64_t)*((unsigned int *)v48 + 5);
                  }
                  while (!v53);
                }
                while (i < j);
              }
              v54 = i - 1;
              if (i - 1 != v7)
              {
                v55 = *v54;
                *v54 = 0;
                v56 = *v7;
                *v7 = v55;
                if (v56)
                {
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v56 + 9));
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v56 + 6));
                  result = MEMORY[0x1A1AF4E00](v56, 0x1070C4044CBF76DLL);
                }
              }
              a4 = 0;
              v57 = *v54;
              *v54 = v17;
              if (v57)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v57 + 9));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v57 + 6));
                result = MEMORY[0x1A1AF4E00](v57, 0x1070C4044CBF76DLL);
                a4 = 0;
              }
              continue;
            }
          }
          *v7 = 0;
          for (k = v7 + 1; ; ++k)
          {
            v23 = *k;
            v24 = **k;
            if (v24 == v18)
              break;
            if (v24 >= v18)
              goto LABEL_18;
LABEL_15:
            ;
          }
          if (*((_QWORD *)v23 + 3) + (unint64_t)*((unsigned int *)v23 + 5) < *((_QWORD *)v17 + 3)
                                                                                   + (unint64_t)*((unsigned int *)v17 + 5))
            goto LABEL_15;
LABEL_18:
          v25 = k - 1;
          m = a2 - 1;
          if (k - 1 == v7)
          {
            for (m = a2 - 1; k < m + 1; --m)
            {
              v29 = **m;
              if (v29 == v18)
              {
                if (*((_QWORD *)*m + 3) + (unint64_t)*((unsigned int *)*m + 5) < *((_QWORD *)v17 + 3)
                                                                                       + (unint64_t)*((unsigned int *)v17 + 5))
                  goto LABEL_32;
              }
              else if (v29 < v18)
              {
                goto LABEL_32;
              }
            }
            ++m;
          }
          else
          {
            while (1)
            {
              v27 = **m;
              v28 = v27 >= v18;
              if (v27 == v18)
                v28 = *((_QWORD *)*m + 3) + (unint64_t)*((unsigned int *)*m + 5) >= *((_QWORD *)v17 + 3)
                                                                                         + (unint64_t)*((unsigned int *)v17 + 5);
              if (!v28)
                break;
              --m;
            }
          }
LABEL_32:
          if (k < m)
          {
            v30 = *m;
            v31 = k;
            v32 = m;
            do
            {
              *v31++ = v30;
              *v32 = v23;
              while (1)
              {
                v23 = *v31;
                v33 = **v31;
                if (v33 == v18)
                  break;
                if (v33 >= v18)
                  goto LABEL_40;
LABEL_37:
                ++v31;
              }
              if (*((_QWORD *)v23 + 3) + (unint64_t)*((unsigned int *)v23 + 5) < *((_QWORD *)v17 + 3)
                                                                                       + (unint64_t)*((unsigned int *)v17 + 5))
                goto LABEL_37;
LABEL_40:
              v25 = v31 - 1;
              do
              {
                v34 = *--v32;
                v30 = v34;
                v35 = *v34;
                v36 = v35 >= v18;
                if (v35 == v18)
                  v36 = *((_QWORD *)v30 + 3) + (unint64_t)*((unsigned int *)v30 + 5) >= *((_QWORD *)v17 + 3)
                                                                                             + (unint64_t)*((unsigned int *)v17 + 5);
              }
              while (v36);
            }
            while (v31 < v32);
          }
          if (v25 != v7)
          {
            v37 = *v25;
            *v25 = 0;
            v38 = *v7;
            *v7 = v37;
            if (v38)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v38 + 9));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v38 + 6));
              MEMORY[0x1A1AF4E00](v38, 0x1070C4044CBF76DLL);
            }
          }
          v39 = *v25;
          *v25 = v17;
          if (v39)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v39 + 9));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v39 + 6));
            MEMORY[0x1A1AF4E00](v39, 0x1070C4044CBF76DLL);
          }
          if (k < m)
            goto LABEL_53;
          v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v7, v25);
          i = v25 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v25 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v40)
              continue;
LABEL_53:
            result = std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,false>(v7, v25, a3, a4 & 1);
            a4 = 0;
            i = v25 + 1;
            continue;
          }
          a2 = v25;
          if (v40)
            return result;
          goto LABEL_2;
        }
        v63 = v7 + 1;
        v65 = v7 == a2 || v63 == a2;
        if ((a4 & 1) == 0)
        {
          if (v65)
            return result;
          while (1)
          {
            v137 = v7;
            v7 = v63;
            v138 = *v137;
            v139 = v137[1];
            v140 = *v139;
            v141 = **v137;
            v142 = v140 >= v141;
            if (v140 == v141)
              v142 = *((_QWORD *)v139 + 3) + (unint64_t)*((unsigned int *)v139 + 5) >= *((_QWORD *)v138 + 3)
                                                                                            + (unint64_t)*((unsigned int *)v138 + 5);
            if (!v142)
            {
              v143 = 0;
              *v7 = 0;
              do
              {
                while (1)
                {
                  v144 = v137;
                  *v137 = 0;
                  v137[1] = v138;
                  if (v143)
                  {
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v143 + 9));
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v143 + 6));
                    result = MEMORY[0x1A1AF4E00](v143, 0x1070C4044CBF76DLL);
                    v140 = *v139;
                  }
                  v137 = v144 - 1;
                  v138 = *(v144 - 1);
                  v145 = *v138;
                  if (v140 == v145)
                    break;
                  v143 = *v144;
                  if (v140 >= v145)
                    goto LABEL_211;
                }
                v143 = *v144;
              }
              while (*((_QWORD *)v139 + 3) + (unint64_t)*((unsigned int *)v139 + 5) < *((_QWORD *)v138 + 3)
                                                                                            + (unint64_t)*((unsigned int *)v138 + 5));
LABEL_211:
              *v144 = v139;
              if (v143)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v143 + 9));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v143 + 6));
                result = MEMORY[0x1A1AF4E00](v143, 0x1070C4044CBF76DLL);
              }
            }
            v63 = v7 + 1;
            if (v7 + 1 == a2)
              return result;
          }
        }
        if (v65)
          return result;
        v66 = 0;
        v67 = v7;
        while (2)
        {
          v68 = v67;
          v67 = v63;
          v69 = *v68;
          v70 = v68[1];
          v71 = *v70;
          v72 = **v68;
          v73 = v71 >= v72;
          if (v71 == v72)
            v73 = *((_QWORD *)v70 + 3) + (unint64_t)*((unsigned int *)v70 + 5) >= *((_QWORD *)v69 + 3)
                                                                                       + (unint64_t)*((unsigned int *)v69 + 5);
          if (v73)
            goto LABEL_112;
          v74 = 0;
          *v67 = 0;
          for (n = v66; ; n -= 8)
          {
            v76 = (uint64_t *)((char *)v7 + n);
            *v76 = 0;
            v76[1] = (uint64_t)v69;
            if (v74)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v74 + 72));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v74 + 48));
              result = MEMORY[0x1A1AF4E00](v74, 0x1070C4044CBF76DLL);
            }
            if (!n)
            {
              v68 = v7;
              goto LABEL_127;
            }
            v69 = *(unsigned __int8 **)((char *)v7 + n - 8);
            v77 = *v70;
            v78 = *v69;
            if (v77 != v78)
              break;
            if (*((_QWORD *)v70 + 3) + (unint64_t)*((unsigned int *)v70 + 5) >= *((_QWORD *)v69 + 3)
                                                                                      + (unint64_t)*((unsigned int *)v69 + 5))
              goto LABEL_127;
LABEL_118:
            --v68;
            v74 = *v76;
          }
          if (v77 < v78)
            goto LABEL_118;
          v68 = (unsigned __int8 **)((char *)v7 + n);
LABEL_127:
          v79 = *v68;
          *v68 = v70;
          if (v79)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v79 + 9));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v79 + 6));
            result = MEMORY[0x1A1AF4E00](v79, 0x1070C4044CBF76DLL);
          }
LABEL_112:
          v63 = v67 + 1;
          v66 += 8;
          if (v67 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::isAcyclicDFS(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, unint64_t *a4)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned int v10;
  unsigned __int8 **v11;
  unsigned int v12;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  unsigned __int8 **v25;
  unsigned __int8 **v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned __int8 **v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  unsigned __int8 **v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t result;
  unsigned int v41;
  unsigned __int8 **v42;
  unsigned int v43;
  int64_t v45;
  unsigned __int8 *v46;

  v46 = a2;
  v8 = (unsigned __int8 **)*a3;
  v9 = (unsigned __int8 **)a3[1];
  if ((unsigned __int8 **)*a3 != v9)
  {
    v10 = *a2;
    v11 = (unsigned __int8 **)*a3;
    while (1)
    {
      v12 = **v11;
      if (v12 == v10)
        break;
      ++v11;
      if (v10 < v12 || v11 == v9)
      {
LABEL_19:
        while (**v8 < *a2)
        {
          if (++v8 == v9)
          {
            v8 = (unsigned __int8 **)a3[1];
            goto LABEL_24;
          }
        }
        goto LABEL_22;
      }
    }
    if (v11 == v9)
      goto LABEL_19;
    v14 = (unsigned __int8 **)*a4;
    v16 = a4 + 1;
    v15 = (unsigned __int8 **)a4[1];
    if ((unsigned __int8 **)*a4 != v15)
    {
      while (1)
      {
        v17 = **v14;
        if (v17 == v10)
          break;
        ++v14;
        if (v10 < v17 || v14 == v15)
          return 1;
      }
      if (v14 != v15)
      {
        v45 = (char *)v15 - (char *)(v14 + 1);
        if (v15 != v14 + 1)
          memmove(v14, v14 + 1, (char *)v15 - (char *)(v14 + 1));
        goto LABEL_83;
      }
    }
    return 1;
  }
LABEL_22:
  if (v8 == v9 || *a2 != **v8)
LABEL_24:
    std::vector<md::FrameGraphPass *>::insert(a3, v8, (char *)&v46);
  v19 = *(_QWORD *)(a1 + 8);
  if (!v19)
    return 1;
  v20 = *v46;
  v21 = a1 + 8;
  do
  {
    v22 = **(unsigned __int8 **)(v19 + 32);
    v23 = v22 >= v20;
    if (v22 >= v20)
      v24 = (uint64_t *)v19;
    else
      v24 = (uint64_t *)(v19 + 8);
    if (v23)
      v21 = v19;
    v19 = *v24;
  }
  while (*v24);
  if (v21 == a1 + 8 || v20 < **(unsigned __int8 **)(v21 + 32))
    return 1;
  v25 = (unsigned __int8 **)*a4;
  v26 = (unsigned __int8 **)a4[1];
  if ((unsigned __int8 **)*a4 != v26)
  {
    while (**v25 < v20)
    {
      if (++v25 == v26)
      {
        v25 = (unsigned __int8 **)a4[1];
        goto LABEL_42;
      }
    }
  }
  if (v25 == v26 || v20 != **v25)
LABEL_42:
    std::vector<md::FrameGraphPass *>::insert(a4, v25, (char *)&v46);
  v27 = *(_QWORD **)(v21 + 40);
  v28 = *(_QWORD **)(v21 + 48);
  if (v27 == v28)
  {
    v14 = (unsigned __int8 **)*a4;
    v29 = (unsigned __int8 **)a4[1];
    v30 = (unint64_t)v29;
LABEL_45:
    if (v14 != (unsigned __int8 **)v30)
    {
      v31 = *v46;
      while (1)
      {
        v32 = **v14;
        if (v32 == v31)
          break;
        ++v14;
        if (v31 < v32 || v14 == v29)
          return 1;
      }
      if (v14 != v29)
      {
        v45 = (char *)v29 - (char *)(v14 + 1);
        if (v29 != v14 + 1)
          memmove(v14, v14 + 1, (char *)v29 - (char *)(v14 + 1));
        v16 = a4 + 1;
LABEL_83:
        *v16 = (char *)v14 + v45;
      }
    }
    return 1;
  }
  while (1)
  {
    v34 = (unsigned __int8 *)*v27;
    v35 = (unsigned __int8 **)*a3;
    v36 = (unsigned __int8 **)a3[1];
    if ((unsigned __int8 **)*a3 == v36)
      goto LABEL_66;
    v37 = *v34;
    while (1)
    {
      v38 = **v35;
      if (v38 == v37)
        break;
      ++v35;
      if (v37 < v38 || v35 == v36)
        goto LABEL_66;
    }
    if (v35 == v36)
    {
LABEL_66:
      result = geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::isAcyclicDFS(a1, *v27, a3, a4);
      if (!(_DWORD)result)
        return result;
    }
    v14 = (unsigned __int8 **)*a4;
    v29 = (unsigned __int8 **)a4[1];
    v30 = *a4;
    if ((unsigned __int8 **)*a4 != v29)
      break;
LABEL_55:
    if (++v27 == v28)
      goto LABEL_45;
  }
  v41 = *v34;
  v42 = (unsigned __int8 **)*a4;
  while (1)
  {
    v43 = **v42;
    if (v43 == v41)
      break;
    ++v42;
    if (v41 < v43 || v42 == v29)
    {
      v30 = a4[1];
      goto LABEL_55;
    }
  }
  v30 = a4[1];
  if (v42 == v29)
    goto LABEL_55;
  return 0;
}

void std::vector<md::FrameGraphPass *>::insert(unint64_t *a1, void *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  size_t v52;
  char *v53;
  void *v54;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = (unint64_t)(v9 + 8);
    }
    else
    {
      v11 = v5 - (_QWORD)(v9 + 8);
      v12 = v11 >> 3;
      v13 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        v20 = (_QWORD *)a1[1];
      }
      else
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
        v15 = (char *)(v14 + v6);
        v16 = v14 + v6 + 8;
        if (v5 > v16)
          v16 = a1[1];
        v17 = v16 + ~v6 - v14;
        v18 = v5 - (_QWORD)v15;
        v19 = v17 >= 0x58 && v18 > 0x1F;
        v20 = (_QWORD *)a1[1];
        if (!v19)
          goto LABEL_63;
        v21 = (v17 >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = (uint64_t *)((char *)v13 + v22);
        v23 = (_OWORD *)(v5 + 16);
        v24 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        v20 = (_QWORD *)(v5 + v22);
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_63:
          do
          {
            v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = (unint64_t)v20;
      if ((char *)v5 != v9 + 8)
        memmove((void *)(v5 - 8 * v12), v9, v11);
      if (v9 <= v3)
        v3 += 8 * (a1[1] > (unint64_t)v3);
      *(_QWORD *)v9 = *(_QWORD *)v3;
    }
    return;
  }
  v28 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v28 >> 61)
    abort();
  v30 = v10 - v6;
  if (v30 >> 2 > v28)
    v28 = v30 >> 2;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v31 = v28;
  if (v31)
  {
    if (v31 >> 61)
      goto LABEL_60;
    v32 = (char *)operator new(8 * v31);
  }
  else
  {
    v32 = 0;
  }
  v33 = &v32[8 * v8];
  v34 = &v32[8 * v31];
  if (v8 != v31)
  {
LABEL_32:
    v36 = (char *)v6;
    goto LABEL_33;
  }
  if (v7 >= 1)
  {
    v35 = v8 + 2;
    if (v8 >= -1)
      v35 = v8 + 1;
    v33 -= 8 * (v35 >> 1);
    goto LABEL_32;
  }
  v46 = v7 >> 2;
  if ((void *)v6 == a2)
    v46 = 1;
  if (v46 >> 61)
LABEL_60:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v47 = 8 * v46;
  v33 = (char *)operator new(8 * v46);
  v34 = &v33[v47];
  if (!v32)
    goto LABEL_32;
  operator delete(v32);
  v34 = &v33[v47];
  v36 = (char *)*a1;
LABEL_33:
  *(_QWORD *)v33 = *(_QWORD *)v3;
  v37 = v33 + 8;
  if (v36 != v9)
  {
    v38 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v39 = v38 - v36 - 8;
    if (v39 < 0x58)
    {
      v41 = v9;
    }
    else if ((unint64_t)(v38 - v33) < 0x20)
    {
      v41 = v9;
    }
    else
    {
      v40 = (v39 >> 3) + 1;
      v41 = &v9[-8 * (v40 & 0x3FFFFFFFFFFFFFFCLL)];
      v42 = v33 - 16;
      v43 = (__int128 *)(v6 + 8 * v8 - 16);
      v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = *v43;
        *((_OWORD *)v42 - 1) = *(v43 - 1);
        *(_OWORD *)v42 = v45;
        v42 -= 32;
        v43 -= 2;
        v44 -= 4;
      }
      while (v44);
      v33 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_54;
    }
    do
    {
      v48 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *((_QWORD *)v33 - 1) = v48;
      v33 -= 8;
    }
    while (v41 != v36);
  }
LABEL_54:
  v49 = (char *)a1[1];
  v50 = v49 - v9;
  if (v49 != v9)
  {
    v51 = v9;
    v52 = v49 - v9;
    v53 = v34;
    memmove(v37, v51, v52);
    v34 = v53;
  }
  v54 = (void *)*a1;
  *a1 = (unint64_t)v33;
  a1[1] = (unint64_t)&v37[v50];
  a1[2] = (unint64_t)v34;
  if (v54)
    operator delete(v54);
}

void geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::topologicalSortedDFS(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned int v10;
  unsigned __int8 **v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned __int8 **v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  unsigned __int8 **v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 *v46;

  v46 = a2;
  v8 = (unsigned __int8 **)*a3;
  v9 = (unsigned __int8 **)a3[1];
  if ((unsigned __int8 **)*a3 != v9)
  {
    v10 = *a2;
    v11 = (unsigned __int8 **)*a3;
    do
    {
      v12 = **v11;
      if (v12 == v10)
      {
        if (v11 == v9)
          break;
        return;
      }
      ++v11;
    }
    while (v10 >= v12 && v11 != v9);
    while (**v8 < *a2)
    {
      if (++v8 == v9)
      {
        v8 = (unsigned __int8 **)a3[1];
        goto LABEL_16;
      }
    }
  }
  if (v8 == v9 || *a2 != **v8)
LABEL_16:
    std::vector<md::FrameGraphPass *>::insert(a3, v8, (char *)&v46);
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = *v46;
    v16 = a1 + 8;
    do
    {
      v17 = **(unsigned __int8 **)(v14 + 32);
      v18 = v17 >= v15;
      if (v17 >= v15)
        v19 = (uint64_t *)v14;
      else
        v19 = (uint64_t *)(v14 + 8);
      if (v18)
        v16 = v14;
      v14 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 8 && v15 >= **(unsigned __int8 **)(v16 + 32))
    {
      v30 = *(unsigned __int8 ***)(v16 + 40);
      v31 = *(unsigned __int8 ***)(v16 + 48);
      while (v30 != v31)
      {
        v32 = (unsigned __int8 **)*a3;
        v33 = (unsigned __int8 **)a3[1];
        if ((unsigned __int8 **)*a3 == v33)
          goto LABEL_40;
        v34 = **v30;
        while (1)
        {
          v35 = **v32;
          if (v35 == v34)
            break;
          ++v32;
          if (v34 < v35 || v32 == v33)
            goto LABEL_40;
        }
        if (v32 == v33)
LABEL_40:
          geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::topologicalSortedDFS(a1);
        ++v30;
      }
    }
  }
  v21 = *(_QWORD **)(a4 + 8);
  v20 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v21 >= v20)
  {
    v23 = *(_BYTE **)a4;
    v24 = (uint64_t)v21 - *(_QWORD *)a4;
    v25 = v24 >> 3;
    v26 = (v24 >> 3) + 1;
    if (v26 >> 61)
      abort();
    v27 = v20 - (_QWORD)v23;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v29 = operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v37 = &v29[8 * v25];
    v38 = &v29[8 * v28];
    *v37 = v46;
    v22 = v37 + 1;
    if (v21 == (_QWORD *)v23)
    {
      v23 = v21;
    }
    else
    {
      v39 = (char *)v21 - v23 - 8;
      if (v39 < 0x58)
        goto LABEL_72;
      if ((unint64_t)((char *)v21 - v29 - v24) < 0x20)
        goto LABEL_72;
      v40 = (v39 >> 3) + 1;
      v41 = &v29[8 * v25 - 16];
      v42 = (__int128 *)(v21 - 2);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v37 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
      v21 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        do
        {
          v45 = *--v21;
          *--v37 = v45;
        }
        while (v21 != (_QWORD *)v23);
        v23 = *(_BYTE **)a4;
      }
    }
    *(_QWORD *)a4 = v37;
    *(_QWORD *)(a4 + 8) = v22;
    *(_QWORD *)(a4 + 16) = v38;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v21 = v46;
    v22 = v21 + 1;
  }
  *(_QWORD *)(a4 + 8) = v22;
}

unsigned __int8 **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned int v18;
  BOOL v19;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  if (v5 == v6)
  {
    v7 = *a3;
    if (*((_QWORD *)v3 + 3) + (unint64_t)*((unsigned int *)v3 + 5) >= *((_QWORD *)v4 + 3)
                                                                            + (unint64_t)*((unsigned int *)v4 + 5))
    {
LABEL_3:
      v8 = *v7;
      v9 = v8 >= v5;
      if (v8 == v5)
        v9 = *((_QWORD *)v7 + 3) + (unint64_t)*((unsigned int *)v7 + 5) >= *((_QWORD *)v3 + 3)
                                                                                + (unint64_t)*((unsigned int *)v3 + 5);
      if (!v9)
      {
        *a2 = v7;
        *a3 = v3;
        v10 = *a2;
        v11 = *result;
        v12 = **a2;
        v13 = **result;
        v14 = v12 >= v13;
        if (v12 == v13)
          v14 = *((_QWORD *)v10 + 3) + (unint64_t)*((unsigned int *)v10 + 5) >= *((_QWORD *)v11 + 3)
                                                                                     + (unint64_t)*((unsigned int *)v11 + 5);
        if (!v14)
        {
          *result = v10;
          *a2 = v11;
        }
      }
      return result;
    }
  }
  else
  {
    v7 = *a3;
    if (v5 >= v6)
      goto LABEL_3;
  }
  v15 = *v7;
  v16 = v15 >= v5;
  if (v15 == v5)
    v16 = *((_QWORD *)v7 + 3) + (unint64_t)*((unsigned int *)v7 + 5) >= *((_QWORD *)v3 + 3)
                                                                             + (unint64_t)*((unsigned int *)v3 + 5);
  if (!v16)
  {
    *result = v7;
LABEL_19:
    *a3 = v4;
    return result;
  }
  *result = v3;
  *a2 = v4;
  v17 = *a3;
  v18 = **a3;
  v19 = v18 >= v6;
  if (v18 == v6)
    v19 = *((_QWORD *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) >= *((_QWORD *)v4 + 3)
                                                                               + (unint64_t)*((unsigned int *)v4 + 5);
  if (!v19)
  {
    *a2 = v17;
    goto LABEL_19;
  }
  return result;
}

unsigned __int8 **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(unsigned __int8 **a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  unsigned __int8 **result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = **a4;
  v12 = **a3;
  v13 = v11 >= v12;
  if (v11 == v12)
    v13 = *((_QWORD *)v9 + 3) + (unint64_t)*((unsigned int *)v9 + 5) >= *((_QWORD *)v10 + 3)
                                                                             + (unint64_t)*((unsigned int *)v10
                                                                                                 + 5);
  if (!v13)
  {
    *a3 = v9;
    *a4 = v10;
    v14 = *a3;
    v15 = *a2;
    v16 = **a3;
    v17 = **a2;
    v18 = v16 >= v17;
    if (v16 == v17)
      v18 = *((_QWORD *)v14 + 3) + (unint64_t)*((unsigned int *)v14 + 5) >= *((_QWORD *)v15 + 3)
                                                                                 + (unint64_t)*((unsigned int *)v15 + 5);
    if (!v18)
    {
      *a2 = v14;
      *a3 = v15;
      v19 = *a2;
      v20 = *a1;
      v21 = **a2;
      v22 = **a1;
      v23 = v21 >= v22;
      if (v21 == v22)
        v23 = *((_QWORD *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) >= *((_QWORD *)v20 + 3)
                                                                                   + (unint64_t)*((unsigned int *)v20 + 5);
      if (!v23)
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  return result;
}

unsigned __int8 **std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,0>(unsigned __int8 **a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  unsigned __int8 **result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = **a5;
  v14 = **a4;
  v15 = v13 >= v14;
  if (v13 == v14)
    v15 = *((_QWORD *)v11 + 3) + (unint64_t)*((unsigned int *)v11 + 5) >= *((_QWORD *)v12 + 3)
                                                                               + (unint64_t)*((unsigned int *)v12 + 5);
  if (!v15)
  {
    *a4 = v11;
    *a5 = v12;
    v16 = *a4;
    v17 = *a3;
    v18 = **a4;
    v19 = **a3;
    v20 = v18 >= v19;
    if (v18 == v19)
      v20 = *((_QWORD *)v16 + 3) + (unint64_t)*((unsigned int *)v16 + 5) >= *((_QWORD *)v17 + 3)
                                                                                 + (unint64_t)*((unsigned int *)v17 + 5);
    if (!v20)
    {
      *a3 = v16;
      *a4 = v17;
      v21 = *a3;
      v22 = *a2;
      v23 = **a3;
      v24 = **a2;
      v25 = v23 >= v24;
      if (v23 == v24)
        v25 = *((_QWORD *)v21 + 3) + (unint64_t)*((unsigned int *)v21 + 5) >= *((_QWORD *)v22 + 3)
                                                                                   + (unint64_t)*((unsigned int *)v22 + 5);
      if (!v25)
      {
        *a2 = v21;
        *a3 = v22;
        v26 = *a2;
        v27 = *a1;
        v28 = **a2;
        v29 = **a1;
        v30 = v28 >= v29;
        if (v28 == v29)
          v30 = *((_QWORD *)v26 + 3) + (unint64_t)*((unsigned int *)v26 + 5) >= *((_QWORD *)v27 + 3)
                                                                                     + (unint64_t)*((unsigned int *)v27 + 5);
        if (!v30)
        {
          *a1 = v26;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t i;
  char *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *v6;
      v9 = **a1;
      v10 = v8 >= v9;
      if (v8 == v9)
        v10 = *((_QWORD *)v6 + 3) + (unint64_t)*((unsigned int *)v6 + 5) >= *((_QWORD *)v7 + 3)
                                                                                 + (unint64_t)*((unsigned int *)v7 + 5);
      if (!v10)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (2)
  {
    v15 = *v12;
    v16 = *v11;
    v17 = **v12;
    v18 = **v11;
    v19 = v17 >= v18;
    if (v17 == v18)
      v19 = *((_QWORD *)v15 + 3) + (unint64_t)*((unsigned int *)v15 + 5) >= *((_QWORD *)v16 + 3)
                                                                                 + (unint64_t)*((unsigned int *)v16 + 5);
    if (v19)
      goto LABEL_9;
    v20 = 0;
    *v12 = 0;
    for (i = v13; ; i -= 8)
    {
      v22 = (char *)a1 + i;
      *((_QWORD *)v22 + 2) = 0;
      *((_QWORD *)v22 + 3) = v16;
      if (v20)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v20 + 72));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v20 + 48));
        MEMORY[0x1A1AF4E00](v20, 0x1070C4044CBF76DLL);
      }
      if (i == -16)
      {
        v11 = a1;
        goto LABEL_24;
      }
      v16 = *(unsigned __int8 **)((char *)a1 + i + 8);
      v23 = *v15;
      v24 = *v16;
      if (v23 != v24)
        break;
      if (*((_QWORD *)v15 + 3) + (unint64_t)*((unsigned int *)v15 + 5) >= *((_QWORD *)v16 + 3)
                                                                                + (unint64_t)*((unsigned int *)v16 + 5))
        goto LABEL_24;
LABEL_15:
      --v11;
      v20 = *((_QWORD *)v22 + 2);
    }
    if (v23 < v24)
      goto LABEL_15;
    v11 = (unsigned __int8 **)((char *)a1 + i + 16);
LABEL_24:
    v25 = *v11;
    *v11 = v15;
    if (v25)
    {
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v25 + 9));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v25 + 6));
      MEMORY[0x1A1AF4E00](v25, 0x1070C4044CBF76DLL);
    }
    if (++v14 == 8)
      return v12 + 1 == a2;
LABEL_9:
    v11 = v12;
    v13 += 8;
    if (++v12 != a2)
      continue;
    return 1;
  }
}

unsigned __int8 **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v4 = *a2;
  v5 = *result;
  v6 = **a2;
  v7 = **result;
  v8 = *a3;
  v9 = **a3;
  if (v6 >= v7)
  {
    if (v9 >= v6)
    {
      v4 = *a3;
    }
    else
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v10;
        v4 = *a3;
      }
    }
  }
  else
  {
    if (v9 < v6)
    {
      *result = v8;
LABEL_9:
      *a3 = v5;
      v4 = v5;
      goto LABEL_11;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    if (**a3 < v7)
    {
      *a2 = v4;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (**a4 < *v4)
  {
    *a3 = *a4;
    *a4 = v4;
    v11 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v12;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 **v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t i;
  char *v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = *v9;
      v11 = **a1;
      v12 = *(a2 - 1);
      v13 = *v12;
      if (v10 >= v11)
      {
        if (v13 < v10)
        {
          a1[1] = v12;
          *(a2 - 1) = v9;
          v34 = *a1;
          v33 = a1[1];
          if (*v33 < **a1)
          {
            *a1 = v33;
            a1[1] = v34;
          }
        }
      }
      else if (v13 >= v10)
      {
        *a1 = v9;
        a1[1] = v8;
        v45 = *(a2 - 1);
        if (*v45 < v11)
        {
          a1[1] = v45;
          *(a2 - 1) = v8;
        }
      }
      else
      {
        *a1 = v12;
        *(a2 - 1) = v8;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v23 = a1 + 1;
      v24 = a1 + 2;
      v25 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v26 = *(a2 - 1);
      v27 = a1[3];
      if (*v26 < *v27)
      {
        *v25 = v26;
        *(a2 - 1) = v27;
        v28 = *v25;
        v29 = *v24;
        v30 = **v25;
        if (v30 < **v24)
        {
          *v24 = v28;
          *v25 = v29;
          v31 = *v23;
          if (v30 < **v23)
          {
            a1[1] = v28;
            a1[2] = v31;
            v32 = *a1;
            if (v30 < **a1)
            {
              *a1 = v28;
              a1[1] = v32;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 2;
      v15 = a1[2];
      v16 = a1[1];
      v17 = *a1;
      v18 = *v16;
      v19 = **a1;
      v20 = *v15;
      if (v18 >= v19)
      {
        if (v20 >= v18)
          goto LABEL_23;
        a1[1] = v15;
        *v14 = v16;
        v21 = a1;
        v22 = a1 + 1;
      }
      else
      {
        v21 = a1;
        v22 = a1 + 2;
        if (v20 < v18)
          goto LABEL_22;
        *a1 = v16;
        a1[1] = v17;
        v21 = a1 + 1;
        v22 = a1 + 2;
      }
      if (v20 >= v19)
        goto LABEL_23;
LABEL_22:
      *v21 = v15;
      *v22 = v17;
LABEL_23:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      v37 = 0;
      break;
  }
  while (1)
  {
    v38 = *v35;
    v39 = *v14;
    if (**v35 < *v39)
    {
      v40 = 0;
      *v35 = 0;
      for (i = v36; ; i -= 8)
      {
        v42 = (char *)a1 + i;
        *((_QWORD *)v42 + 2) = 0;
        *((_QWORD *)v42 + 3) = v39;
        if (v40)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v40 + 112));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v40 + 88));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v40 + 64));
          if (*(char *)(v40 + 47) < 0)
            operator delete(*(void **)(v40 + 24));
          MEMORY[0x1A1AF4E00](v40, 0x1032C4041C7693DLL);
        }
        if (i == -16)
        {
          v43 = a1;
          goto LABEL_39;
        }
        v39 = *(unsigned __int8 **)((char *)a1 + i + 8);
        if (*v38 >= *v39)
          break;
        v40 = *((_QWORD *)v42 + 2);
      }
      v43 = (unsigned __int8 **)((char *)a1 + i + 16);
LABEL_39:
      v44 = *v43;
      *v43 = v38;
      if (v44)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v44 + 14));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v44 + 11));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v44 + 8));
        if ((char)v44[47] < 0)
          operator delete(*((void **)v44 + 3));
        MEMORY[0x1A1AF4E00](v44, 0x1032C4041C7693DLL);
      }
      if (++v37 == 8)
        return v35 + 1 == a2;
    }
    v14 = v35;
    v36 += 8;
    if (++v35 == a2)
      return 1;
  }
}

void md::RouteWaypointLabelFeature::~RouteWaypointLabelFeature(md::RouteWaypointLabelFeature *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42A2220;
  if (*((_BYTE *)this + 728))
  {
    v2 = (void *)*((_QWORD *)this + 88);
    if (v2)
    {
      *((_QWORD *)this + 89) = v2;
      operator delete(v2);
    }
  }
  *((_QWORD *)this + 84) = &off_1E42B4E50;

  md::PointLabelFeature::~PointLabelFeature(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42A2220;
  if (*((_BYTE *)this + 728))
  {
    v2 = (void *)*((_QWORD *)this + 88);
    if (v2)
    {
      *((_QWORD *)this + 89) = v2;
      operator delete(v2);
    }
  }
  *((_QWORD *)this + 84) = &off_1E42B4E50;

  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RouteWaypointLabelFeature::newRootPart(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = md::PointLabelFeature::newRootPart(a1, a2, a3, a4, a5);
  v7 = v6;
  if (v6 && *(_DWORD *)(a1[63] + 84) != 0x7FFFFFFF)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 824))(v6, (unsigned __int16)~*(_WORD *)(a1[63] + 84));
  return v7;
}

uint64_t md::RouteWaypointLabelFeature::updateDynamicStyling(id *this, md::LabelManager *a2, md::Label *a3)
{
  int v5;
  int v6;
  _BOOL4 v7;
  unint64_t v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  int v12;

  v5 = objc_msgSend(this[85], "isOnSelectedRoute", a3);
  v6 = *((unsigned __int8 *)this + 696);
  v7 = v6 != v5;
  if (v6 != v5)
    *((_BYTE *)this + 696) = v5;
  if ((((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 32) + 8))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 32)) & 1) != 0
     || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 32) + 32))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 32)))
    && *((_BYTE *)this + 696))
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 32) + 48))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 32));
    if (objc_msgSend(this[85], "legIndex") <= v8)
    {
      if (objc_msgSend(this[85], "legIndex") >= v8)
        v9 = 1;
      else
        v9 = 2;
      if (!*((_BYTE *)this + 701))
        goto LABEL_17;
    }
    else
    {
      v9 = 0;
      if (!*((_BYTE *)this + 701))
      {
LABEL_17:
        *((_WORD *)this + 350) = v9 | 0x100;
        v7 = 1;
LABEL_18:
        v11 = objc_msgSend(this[85], "when");
        v12 = v11 == 2;
        if (v11 == 3)
          v12 = 2;
        if (!*((_BYTE *)this + 699) || v12 != *((unsigned __int8 *)this + 698))
        {
          *((_WORD *)this + 349) = v12 | 0x100;
LABEL_30:
          (*((void (**)(id *, md::LabelManager *))*this + 67))(this, a2);
          return 0;
        }
        goto LABEL_29;
      }
    }
    if (*((unsigned __int8 *)this + 700) == v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (objc_msgSend(this[85], "legIndex"))
  {
    v10 = 0;
    if (!*((_BYTE *)this + 701))
      goto LABEL_25;
  }
  else
  {
    objc_msgSend(this[85], "legIndex");
    v10 = 1;
    if (!*((_BYTE *)this + 701))
    {
LABEL_25:
      *((_WORD *)this + 350) = v10 | 0x100;
      v7 = 1;
      goto LABEL_26;
    }
  }
  if (*((unsigned __int8 *)this + 700) != v10)
    goto LABEL_25;
LABEL_26:
  if (!*((_BYTE *)this + 699) || *((_BYTE *)this + 698))
  {
    *((_WORD *)this + 349) = 256;
    goto LABEL_30;
  }
LABEL_29:
  if (v7)
    goto LABEL_30;
  return 0;
}

uint64_t md::RouteWaypointLabelFeature::facingVector(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 697) == 2)
    return *(_QWORD *)(a1 + 736);
  else
    return 0;
}

uint64_t md::RouteWaypointLabelFeature::labelFeatureType(md::RouteWaypointLabelFeature *this)
{
  int v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 697);
  if (v1 == 2)
    v2 = 21;
  else
    v2 = 20;
  if (v1 == 3)
    return 22;
  else
    return v2;
}

uint64_t md::RouteWaypointLabelFeature::isRouteFeature(md::RouteWaypointLabelFeature *this)
{
  return 1;
}

BOOL md::RouteWaypointLabelFeature::isOnRouteFeature(md::RouteWaypointLabelFeature *this)
{
  return *((_BYTE *)this + 697) != 0;
}

void md::RouteWaypointLabelFeature::debugString(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  void *v7;
  id v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  const char *v13;
  size_t v14;
  std::string::size_type v15;
  void *p_dst;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  const char *v23;
  size_t v24;
  std::string::size_type v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  int v33;
  size_t size;
  unint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type v42;
  void **v43;
  std::string::size_type v44;
  std::string __dst;
  void *__p[2];
  int64_t v47;
  std::string v48;

  md::LabelFeature::debugString((_BYTE *)a1, a2, a3, a4, a5);
  std::string::append(a5, "RouteWaypoint:\n", 0xFuLL);
  memset(&v48, 0, sizeof(v48));
  v7 = *(void **)(a1 + 680);
  if (v7)
  {
    v8 = v7;
    std::to_string(&__dst, objc_msgSend(v8, "legIndex"));
    v9 = std::string::insert(&__dst, 0, " LegIndex=", 0xAuLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v47 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v47 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (v47 >= 0)
      v12 = HIBYTE(v47);
    else
      v12 = (std::string::size_type)__p[1];
    std::string::append(&v48, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:

      goto LABEL_11;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_10;
  }
LABEL_11:
  if (!*(_BYTE *)(a1 + 701))
    goto LABEL_28;
  v13 = gss::to_string(*(unsigned __int8 *)(a1 + 700));
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_19;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_19:
    memmove(p_dst, v13, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v19 = std::string::insert(&__dst, 0, " LegWhen=", 9uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v47 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if (v47 >= 0)
    v22 = HIBYTE(v47);
  else
    v22 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v21, v22);
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if (!*(_BYTE *)(a1 + 699))
        goto LABEL_53;
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 699))
    goto LABEL_53;
LABEL_29:
  v23 = gss::to_string(*(unsigned __int8 *)(a1 + 698));
  v24 = strlen(v23);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
    v26 = &__dst;
    if (!v24)
      goto LABEL_37;
  }
  memmove(v26, v23, v25);
LABEL_37:
  *((_BYTE *)v26 + v25) = 0;
  v29 = std::string::insert(&__dst, 0, " When=", 6uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  if (v47 >= 0)
    v32 = HIBYTE(v47);
  else
    v32 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v31, v32);
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_53;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_53:
  v33 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    size = v48.__r_.__value_.__l.__size_;
  if (size)
  {
    v35 = size + 2;
    if (size + 2 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v35 > 0x16)
    {
      v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v37 = v35 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      __dst.__r_.__value_.__l.__size_ = size + 2;
      __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      v36 = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 2;
    }
    *v36 = 8224;
    v39 = v36 + 1;
    if (v33 >= 0)
      v40 = &v48;
    else
      v40 = (std::string *)v48.__r_.__value_.__r.__words[0];
    memmove(v39, v40, size);
    *((_BYTE *)v39 + size) = 0;
    v41 = std::string::append(&__dst, "\n", 1uLL);
    v42 = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v47 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (v47 >= 0)
      v43 = __p;
    else
      v43 = (void **)__p[0];
    if (v47 >= 0)
      v44 = HIBYTE(v47);
    else
      v44 = (std::string::size_type)__p[1];
    std::string::append(a5, (const std::string::value_type *)v43, v44);
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_74:
      LOBYTE(v33) = *((_BYTE *)&v48.__r_.__value_.__s + 23);
      goto LABEL_75;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_74;
  }
LABEL_75:
  if ((v33 & 0x80) != 0)
    operator delete(v48.__r_.__value_.__l.__data_);
}

void sub_19F5E1014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a15 < 0)
  {
    operator delete(__p);
    if (a24 < 0)
    {
LABEL_5:
      operator delete(a19);
      if ((*(char *)(v24 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_8;
    }
  }
  else if (a24 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v24 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(*(void **)v24);
  _Unwind_Resume(a1);
}

void md::RouteWaypointLabelFeature::populateDebugNode(md::RouteWaypointLabelFeature *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  void *v5;
  id v6;
  const char *v7;
  const char *v8;
  _BYTE v9[32];
  std::string v10;
  int v11;
  _BYTE v12[32];
  std::string __p;
  int v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21[23];
  char v22;

  md::LabelFeature::populateDebugNode(this, a2, (unint64_t)a3);
  v5 = (void *)*((_QWORD *)this + 85);
  if (v5)
  {
    v22 = 8;
    strcpy(v21, "LegIndex");
    v6 = v5;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    v17 = 0;
    LODWORD(v16) = objc_msgSend(v6, "legIndex");
    v16 = v16;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v21, (uint64_t)v15);

  }
  if (*((_BYTE *)this + 701))
  {
    v22 = 7;
    strcpy(v21, "LegWhen");
    v7 = gss::to_string(*((unsigned __int8 *)this + 700));
    memset(&__p, 0, sizeof(__p));
    v14 = 4;
    if (v7)
    {
      std::string::__assign_external(&__p, v7);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v21, (uint64_t)v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 699))
  {
    v22 = 4;
    strcpy(v21, "When");
    v8 = gss::to_string(*((unsigned __int8 *)this + 698));
    memset(&v10, 0, sizeof(v10));
    v11 = 4;
    if (v8)
    {
      std::string::__assign_external(&v10, v8);
    }
    else
    {
      *((_BYTE *)&v10.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v10, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v21, (uint64_t)v9);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_19F5E126C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::RouteWaypointLabelFeature::populateAdditionalStyleAttributes(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  result = md::PointLabelFeature::populateAdditionalStyleAttributes(a1, a2);
  if (a1[699])
  {
    v5 = a1[698];
    v6 = *(_QWORD **)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v6 < v7)
    {
      if (v6)
        *v6 = ((v5 << 32) | 0x10002) + 7;
      v8 = v6 + 1;
LABEL_28:
      *(_QWORD *)(a2 + 8) = v8;
      goto LABEL_29;
    }
    v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_85;
    v11 = v7 - *(_QWORD *)a2;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    if (v10)
    {
      v12 = 8 * v10;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 8 * v10, 4);
      v13 = (_QWORD *)(result + 8 * v9);
      v10 = result + v12;
      if (result)
        *v13 = ((v5 << 32) | 0x10002) + 7;
    }
    else
    {
      v13 = (_QWORD *)(8 * v9);
    }
    v8 = v13 + 1;
    v15 = *(_QWORD *)a2;
    v14 = *(_QWORD *)(a2 + 8);
    if (v14 == *(_QWORD *)a2)
    {
LABEL_26:
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v8;
      v24 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v10;
      if (v14)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v14, v24 - v14);
      goto LABEL_28;
    }
    v16 = v14 - *(_QWORD *)a2 - 8;
    if (v16 < 0x38)
    {
      v18 = *(_QWORD *)(a2 + 8);
    }
    else if ((unint64_t)(v14 - (_QWORD)v13) < 0x20)
    {
      v18 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v17 = (v16 >> 3) + 1;
      v18 = v14 - 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = v13 - 2;
      v20 = (__int128 *)(v14 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v13 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_25;
    }
    do
    {
      v23 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *--v13 = v23;
    }
    while (v18 != v15);
LABEL_25:
    v14 = *(_QWORD *)a2;
    goto LABEL_26;
  }
LABEL_29:
  if (!a1[701])
  {
    v28 = *(uint64_t **)(a2 + 8);
    goto LABEL_58;
  }
  v25 = a1[700];
  v26 = *(_QWORD **)(a2 + 8);
  v27 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v26 >= v27)
  {
    v29 = ((uint64_t)v26 - *(_QWORD *)a2) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_85;
    v31 = v27 - *(_QWORD *)a2;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    if (v30)
    {
      v32 = 8 * v30;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 8 * v30, 4);
      v33 = (_QWORD *)(result + 8 * v29);
      v30 = result + v32;
      if (result)
        *v33 = ((v25 << 32) | 0x10002) + 82;
    }
    else
    {
      v33 = (_QWORD *)(8 * v29);
    }
    v28 = v33 + 1;
    v35 = *(_QWORD *)a2;
    v34 = *(_QWORD *)(a2 + 8);
    if (v34 == *(_QWORD *)a2)
      goto LABEL_55;
    v36 = v34 - *(_QWORD *)a2 - 8;
    if (v36 < 0x38)
    {
      v38 = *(_QWORD *)(a2 + 8);
    }
    else if ((unint64_t)(v34 - (_QWORD)v33) < 0x20)
    {
      v38 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v37 = (v36 >> 3) + 1;
      v38 = v34 - 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v39 = v33 - 2;
      v40 = (__int128 *)(v34 - 16);
      v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      v33 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
      if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_54;
    }
    do
    {
      v43 = *(_QWORD *)(v38 - 8);
      v38 -= 8;
      *--v33 = v43;
    }
    while (v38 != v35);
LABEL_54:
    v34 = *(_QWORD *)a2;
LABEL_55:
    *(_QWORD *)a2 = v33;
    *(_QWORD *)(a2 + 8) = v28;
    v44 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v30;
    if (v34)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v34, v44 - v34);
    goto LABEL_57;
  }
  if (v26)
    *v26 = ((v25 << 32) | 0x10002) + 82;
  v28 = v26 + 1;
LABEL_57:
  *(_QWORD *)(a2 + 8) = v28;
LABEL_58:
  v45 = a1[696];
  v46 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v28 < v46)
  {
    if (v28)
      *v28 = (v45 << 32) | 0x10002;
    v47 = v28 + 1;
    goto LABEL_84;
  }
  v48 = ((uint64_t)v28 - *(_QWORD *)a2) >> 3;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_85:
    abort();
  v49 = v46 - *(_QWORD *)a2;
  v50 = v49 >> 2;
  if (v49 >> 2 <= (unint64_t)(v48 + 1))
    v50 = v48 + 1;
  v51 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8;
  v52 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v51)
    v52 = v50;
  if (v52)
  {
    v53 = 8 * v52;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 8 * v52, 4);
    v54 = (uint64_t *)(result + 8 * v48);
    v52 = result + v53;
    if (result)
      *v54 = (v45 << 32) | 0x10002;
  }
  else
  {
    v54 = (uint64_t *)(8 * v48);
  }
  v47 = v54 + 1;
  v56 = *(_QWORD *)a2;
  v55 = *(_QWORD *)(a2 + 8);
  if (v55 == *(_QWORD *)a2)
    goto LABEL_82;
  v57 = v55 - *(_QWORD *)a2 - 8;
  if (v57 < 0x38)
  {
    v59 = *(_QWORD *)(a2 + 8);
  }
  else if ((unint64_t)(v55 - (_QWORD)v54) < 0x20)
  {
    v59 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v58 = (v57 >> 3) + 1;
    v59 = v55 - 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v60 = v54 - 2;
    v61 = (__int128 *)(v55 - 16);
    v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v63 = *v61;
      *((_OWORD *)v60 - 1) = *(v61 - 1);
      *(_OWORD *)v60 = v63;
      v60 -= 4;
      v61 -= 2;
      v62 -= 4;
    }
    while (v62);
    v54 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
    if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_81;
  }
  do
  {
    v64 = *(_QWORD *)(v59 - 8);
    v59 -= 8;
    *--v54 = v64;
  }
  while (v59 != v56);
LABEL_81:
  v55 = *(_QWORD *)a2;
LABEL_82:
  *(_QWORD *)a2 = v54;
  *(_QWORD *)(a2 + 8) = v47;
  v65 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v52;
  if (v55)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v55, v65 - v55);
LABEL_84:
  *(_QWORD *)(a2 + 8) = v47;
  return result;
}

md::BalloonLabelPart *md::RouteWaypointLabelFeature::newIconPart(md::RouteWaypointLabelFeature *this, const md::PartCreationContext *a2)
{
  unsigned __int8 v3;
  md::LabelPart *v4;
  uint64_t v5;
  unsigned __int8 v6;
  md::CompositeLabelPart *v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  if (*((_BYTE *)this + 697) != 2)
    return md::PointLabelFeature::newIconPart(this, a2);
  {
    v9 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v4 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 912, 8);
  v11 = 0u;
  md::IconLabelPart::IconLabelPart((uint64_t)v4, &v11);
  *(_QWORD *)v5 = off_1E4293AA8;
  *(_OWORD *)(v5 + 768) = 0u;
  *(_QWORD *)(v5 + 784) = -1;
  *(_QWORD *)(v5 + 792) = -1;
  *(_QWORD *)(v5 + 800) = -1;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_QWORD *)(v5 + 824) = -1;
  *(_QWORD *)(v5 + 832) = -1;
  *(_QWORD *)(v5 + 840) = -1;
  *(_OWORD *)(v5 + 848) = xmmword_19FFB2E30;
  *(_OWORD *)(v5 + 864) = xmmword_19FFB3480;
  *(_OWORD *)(v5 + 880) = xmmword_19FFB2E30;
  *(_QWORD *)(v5 + 904) = 0;
  *(_QWORD *)(v5 + 896) = 0;
  *(_BYTE *)(v5 + 660) = 8;
  if ((v6 & 1) == 0)
  {
    {
      v10 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v10, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  v7 = (md::CompositeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 648, 8);
  md::WorldSpaceLabelPart::WorldSpaceLabelPart(v7, v4, *((_QWORD *)a2 + 1), 50, 1);
  return v7;
}

void sub_19F5E18C0(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 648);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

_QWORD *md::RouteWaypointLabelFeature::additionalIconAttributeValues@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*((_BYTE *)this + 728))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v3 = (_BYTE *)this[88];
    v4 = (_BYTE *)this[89];
    v5 = v4 - v3;
    if (v4 != v3)
    {
      if (v5 < 0)
        abort();
      v6 = (char *)operator new(v4 - v3);
      *(_QWORD *)a2 = v6;
      v7 = &v6[4 * (v5 >> 2)];
      *(_QWORD *)(a2 + 16) = v7;
      this = memcpy(v6, v3, v5);
      *(_QWORD *)(a2 + 8) = v7;
    }
    *(_BYTE *)(a2 + 24) = 1;
  }
  return this;
}

uint64_t geo::_retain_ptr<VKRouteWaypointInfo * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E50;

  return a1;
}

void geo::_retain_ptr<VKRouteWaypointInfo * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E50;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelExternalPointFeature::isCluster(md::LabelExternalPointFeature *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2 || v2->__shared_owners_ == -1)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  v4 = *((_QWORD *)this + 37);
  if (!v3)
    v4 = 0;
  if (v4 && (v5 = *((_QWORD *)this + 36)) != 0)
  {
    v6 = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) >> 2) & 1;
    if (!v3)
      return v6;
  }
  else
  {
    v6 = 0;
    if (!v3)
      return v6;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

void sub_19F5E1AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      abort();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t md::RouteWaypointLabelFeature::RouteWaypointLabelFeature(uint64_t a1, void *a2, char a3, char a4, uint64_t *a5, uint64_t a6)
{
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  float v40;
  __double2 v41;
  double v42;
  __double2 v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  long double v53;
  long double v54;
  float64x2_t v55;
  float v60;
  __double2 v61;
  double v62;
  __double2 v63;
  long double v64;
  long double v65;
  float64x2_t v66;
  float v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float v73;
  float v74;
  float v75;
  double v77;
  double v78;
  _BYTE v79[40];
  float v80;
  _WORD v81[2];
  _BYTE v82[40];
  float v83;
  _WORD v84[10];

  v11 = a2;
  md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)a1, a5, 0, a6);
  *(_QWORD *)a1 = &off_1E42A2220;
  v12 = v11;
  *(_QWORD *)(a1 + 672) = &off_1E42B4E50;
  *(_QWORD *)(a1 + 680) = v12;
  *(_BYTE *)(a1 + 696) = a3;
  *(_BYTE *)(a1 + 697) = a4;
  v13 = (_QWORD *)(a1 + 704);
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_DWORD *)(a1 + 698) = 0;
  if (md::LabelExternalPointFeature::isCluster((md::LabelExternalPointFeature *)*a5))
  {
    v14 = *a5;
    v15 = *(std::__shared_weak_count **)(*a5 + 304);
    if (v15)
    {
      if (v15->__shared_owners_ != -1)
      {
        v16 = std::__shared_weak_count::lock(v15);
        v17 = v16;
        if (v16)
          _ZF = *(_QWORD *)(v14 + 296) == 0;
        else
          _ZF = 1;
        if (_ZF)
        {
          if (!v16)
            goto LABEL_24;
        }
        else
        {
          v19 = *(_QWORD *)(v14 + 288);
          if (v19)
          {
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 80))(v19);
            if (v20)
            {
              if (*(_BYTE *)(a1 + 728))
              {
                if (v13 != (_QWORD *)(v20 + 144))
                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 704), *(char **)(v20 + 144), *(char **)(v20 + 152), (uint64_t)(*(_QWORD *)(v20 + 152) - *(_QWORD *)(v20 + 144)) >> 2);
              }
              else
              {
                *v13 = 0;
                *(_QWORD *)(a1 + 712) = 0;
                *(_QWORD *)(a1 + 720) = 0;
                v22 = *(_BYTE **)(v20 + 144);
                v21 = *(_BYTE **)(v20 + 152);
                v23 = v21 - v22;
                if (v21 != v22)
                {
                  if (v23 < 0)
                    abort();
                  v24 = (char *)operator new(v21 - v22);
                  *(_QWORD *)(a1 + 704) = v24;
                  *(_QWORD *)(a1 + 712) = v24;
                  v25 = &v24[4 * (v23 >> 2)];
                  *(_QWORD *)(a1 + 720) = v25;
                  memcpy(v24, v22, v23);
                  *(_QWORD *)(a1 + 712) = v25;
                }
                *(_BYTE *)(a1 + 728) = 1;
              }
            }
          }
        }
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
LABEL_24:
  if (*(_BYTE *)(a1 + 697) == 2)
  {
    objc_msgSend(v12, "routeCoordinate");
    v78 = v28;
    v30 = v29;
    v32 = v31;
    objc_msgSend(v12, "adjacentRouteCoordinate");
    v35 = v33;
    v37 = v36;
    if (vabdd_f64(v30, v33) < 0.00000000999999994 && vabdd_f64(v78, v34) < 0.00000000999999994
      || v78 < -180.0
      || v78 > 180.0
      || v30 < -90.0
      || v30 > 90.0
      || v34 < -180.0
      || v34 > 180.0
      || v33 < -90.0
      || v33 > 90.0)
    {
      if (*(_BYTE *)(*(_QWORD *)(a6 + 232) + 17))
      {
        v38 = 0.0;
        v39 = 1.0;
        v40 = -0.0;
      }
      else
      {
        v44 = md::LabelPoint::geocentricNormal((md::LabelPoint *)(a1 + 192));
        v46 = -(v44 * v45);
        v48 = -(v47 * v45);
        v49 = v47 * v47 + v44 * v44;
        v50 = 1.0 / sqrt(v46 * v46 + v48 * v48 + v49 * v49);
        v51 = v50 * v46;
        v38 = v50 * v49;
        v40 = v50 * v48;
        v39 = v51;
      }
      v52 = *(unsigned __int8 *)(a1 + 748);
      *(float *)(a1 + 736) = v39;
      *(float *)(a1 + 740) = v40;
      *(float *)(a1 + 744) = v38;
      if (!v52)
        *(_BYTE *)(a1 + 748) = 1;
    }
    else
    {
      v77 = v34;
      memset(v82, 0, sizeof(v82));
      v83 = 3.4028e38;
      memset(v84, 0, 3);
      memset(v79, 0, sizeof(v79));
      v80 = 3.4028e38;
      memset(v81, 0, 3);
      if (fabs(v30) <= 85.0511169)
      {
        v53 = tan(v30 * 0.00872664626 + 0.785398163);
        v54 = log(v53);
        v55.f64[0] = v78;
        v55.f64[1] = v54;
        __asm { FMOV            V1.2D, #0.5 }
        *(float64x2_t *)&v82[24] = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v55);
        *(_WORD *)((char *)v84 + 1) = 257;
      }
      else
      {
        v41 = __sincos_stret(v30 * 0.0174532925);
        v42 = 6378137.0 / sqrt(v41.__sinval * v41.__sinval * -0.00669437999 + 1.0);
        v43 = __sincos_stret(v78 * 0.0174532925);
        *(double *)v82 = v42 * v41.__cosval * v43.__cosval;
        *(double *)&v82[8] = v42 * v41.__cosval * v43.__sinval;
        *(double *)&v82[16] = v41.__sinval * 0.99330562 * v42;
        LOBYTE(v84[0]) = 1;
      }
      if (v32 != 1.79769313e308)
      {
        v60 = v32;
        v83 = v60;
      }
      if (fabs(v35) <= 85.0511169)
      {
        v64 = tan(v35 * 0.00872664626 + 0.785398163);
        v65 = log(v64);
        v66.f64[0] = v77;
        v66.f64[1] = v65;
        __asm { FMOV            V1.2D, #0.5 }
        *(float64x2_t *)&v79[24] = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v66);
        *(_WORD *)((char *)v81 + 1) = 257;
      }
      else
      {
        v61 = __sincos_stret(v35 * 0.0174532925);
        v62 = 6378137.0 / sqrt(v61.__sinval * v61.__sinval * -0.00669437999 + 1.0);
        v63 = __sincos_stret(v77 * 0.0174532925);
        *(double *)v79 = v62 * v61.__cosval * v63.__cosval;
        *(double *)&v79[8] = v62 * v61.__cosval * v63.__sinval;
        *(double *)&v79[16] = v61.__sinval * 0.99330562 * v62;
        LOBYTE(v81[0]) = 1;
      }
      if (v37 != 1.79769313e308)
      {
        v68 = v37;
        v80 = v68;
      }
      md::LabelPoint::vectorToPoint((md::LabelPoint *)v82, (const md::LabelPoint *)v79, *(_BYTE *)(*(_QWORD *)(a6 + 232) + 17) == 0);
      v72 = 1.0 / sqrt(v69 * v69 + v70 * v70 + v71 * v71);
      v73 = v72 * v69;
      v74 = v72 * v70;
      v75 = v72 * v71;
      if (!*(_BYTE *)(a1 + 748))
        *(_BYTE *)(a1 + 748) = 1;
      *(float *)(a1 + 736) = v73;
      *(float *)(a1 + 740) = v74;
      *(float *)(a1 + 744) = v75;
    }
  }

  return a1;
}

void sub_19F5E21B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*(_BYTE *)(v1 + 728))
  {
    v9 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 712) = v9;
      operator delete(v9);
    }
  }
  *(_QWORD *)(v1 + 672) = v5;

  md::PointLabelFeature::~PointLabelFeature((md::PointLabelFeature *)v1);
  _Unwind_Resume(a1);
}

void altitude::RenderableGroup::~RenderableGroup(altitude::RenderableGroup *this)
{
  altitude::RenderableGroup::~RenderableGroup(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = &off_1E42C4580;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)*((_QWORD *)this + 13);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)*((_QWORD *)this + 12);
  }
  *((_QWORD *)this + 13) = v5;
  operator delete(v7);
LABEL_16:
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = *((_QWORD *)this + 10);
    v13 = (void *)*((_QWORD *)this + 9);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v11;
    operator delete(v13);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 6);
  if (v17)
  {
    v18 = (_QWORD *)*((_QWORD *)this + 7);
    v19 = (void *)*((_QWORD *)this + 6);
    if (v18 != v17)
    {
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v17;
    operator delete(v19);
  }
  *(_QWORD *)this = off_1E42BE278;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void altitude::RenderableGroup::addRenderable(altitude::RenderableGroup *this, altitude::Renderable *a2)
{
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;

  v5 = (_QWORD *)*((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  v6 = (char *)v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*((_QWORD *)this + 6);
    v9 = ((char *)v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    if (v5 == (_QWORD *)v8)
    {
      *((_QWORD *)this + 6) = v14;
      *((_QWORD *)this + 7) = v7;
      *((_QWORD *)this + 8) = v15;
    }
    else
    {
      v16 = (char *)v5 - v8 - 8;
      if (v16 <= 0x77
        || (char *)v5 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8 < v14
        && &v13[(char *)v5 - v8 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v5)
      {
        goto LABEL_51;
      }
      v17 = (v16 >> 3) + 1;
      v6 = (char *)&v5[-(v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = (__int128 *)(v5 - 4);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v19;
        v21 = v19[1];
        *v19 = 0uLL;
        v19[1] = 0uLL;
        v19 -= 2;
        *((_OWORD *)v18 - 1) = v22;
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_51:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v23;
          v14 -= 8;
        }
        while (v6 != v8);
      }
      v6 = (char *)*((_QWORD *)this + 6);
      v24 = (char *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 6) = v14;
      *((_QWORD *)this + 7) = v7;
      *((_QWORD *)this + 8) = v15;
      while (v24 != v6)
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        v25 = v26;
        *(_QWORD *)v24 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
    }
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *((_QWORD *)this + 7) = v7;
  v27 = *((unsigned __int8 *)this + 120);
  if (*((unsigned __int8 *)a2 + 169) != v27 || *((_BYTE *)a2 + 168))
  {
    *((_BYTE *)a2 + 169) = v27;
    *((_BYTE *)a2 + 168) = 0;
    if (v27)
    {
      v28 = *((_QWORD *)a2 + 27);
      v29 = *(_QWORD **)(v28 + 96);
      v30 = *(std::__shared_weak_count **)(v28 + 104);
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
    }
    else
    {
      v33 = *((_DWORD *)a2 + 41);
      v34 = *((_QWORD *)a2 + 27);
      v29 = *(_QWORD **)(v34 + 96);
      v30 = *(std::__shared_weak_count **)(v34 + 104);
      if (v30)
      {
        v35 = (unint64_t *)&v30->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (v33 != -1)
      {
        v37 = *((int *)a2 + 41);
        goto LABEL_41;
      }
    }
    v37 = (v29[6] - v29[5]) / v29[1];
LABEL_41:
    v38 = (_QWORD *)*((_QWORD *)a2 + 23);
    v38[9] = 0;
    v38[10] = v37;
    v38[11] = 0;
    v38[12] = 1;
    if (v30)
    {
      v39 = (unint64_t *)&v30->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

uint64_t ggl::NamedBase<std::string>::~NamedBase(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42BE278;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ggl::NamedBase<std::string>::~NamedBase(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42BE278;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1A1AF4E00);
}

void altitude::RenderableGroup::takeOwnership(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (*(_QWORD *)a2)
  {
    v5 = (char *)a1[10];
    v4 = a1[11];
    if ((unint64_t)v5 >= v4)
    {
      v10 = (char *)a1[9];
      v11 = (v5 - v10) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        abort();
      v13 = v4 - (_QWORD)v10;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
      v15 = 0xFFFFFFFFFFFFFFFLL;
      if (!v14)
        v15 = v12;
      if (v15 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = 16 * v15;
      v17 = (char *)operator new(16 * v15);
      v18 = &v17[16 * v11];
      v19 = *a2;
      *(_OWORD *)v18 = *a2;
      if (*((_QWORD *)&v19 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        v10 = (char *)a1[9];
        v5 = (char *)a1[10];
      }
      v22 = &v17[v16];
      v9 = v18 + 16;
      if (v5 == v10)
      {
        a1[9] = v18;
        a1[10] = v9;
        a1[11] = v22;
      }
      else
      {
        do
        {
          v23 = *((_OWORD *)v5 - 1);
          v5 -= 16;
          *((_OWORD *)v18 - 1) = v23;
          v18 -= 16;
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
        }
        while (v5 != v10);
        v10 = (char *)a1[9];
        v24 = (char *)a1[10];
        a1[9] = v18;
        a1[10] = v9;
        a1[11] = v22;
        while (v24 != v10)
        {
          v25 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(p_shared_owners);
            while (__stlxr(v27 - 1, p_shared_owners));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v24 -= 16;
        }
      }
      if (v10)
        operator delete(v10);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)v5 = *(_QWORD *)a2;
      *((_QWORD *)v5 + 1) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = v5 + 16;
    }
    a1[10] = v9;
  }
}

void altitude::RenderableGroup::dropOwnership(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  if (a2)
  {
    v3 = *(_QWORD **)(a1 + 72);
    v4 = *(_QWORD **)(a1 + 80);
    if (v3 != v4)
    {
      while (*v3 != a2)
      {
        v3 += 2;
        if (v3 == v4)
        {
          v3 = *(_QWORD **)(a1 + 80);
          break;
        }
      }
    }
    v5 = v3 + 2;
    if (v3 + 2 != v4)
    {
      do
      {
        v6 = *(_OWORD *)v5;
        *v5 = 0;
        v5[1] = 0;
        v7 = (std::__shared_weak_count *)v3[1];
        *(_OWORD *)v3 = v6;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 += 2;
        v3 += 2;
      }
      while (v5 != v4);
      v4 = *(_QWORD **)(a1 + 80);
    }
    while (v4 != v3)
    {
      v10 = (std::__shared_weak_count *)*(v4 - 1);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 2;
    }
    *(_QWORD *)(a1 + 80) = v3;
  }
}

void altitude::RenderableGroup::setDrapesEnabled(altitude::RenderableGroup *this, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;

  *((_BYTE *)this + 120) = a2;
  v2 = (uint64_t *)*((_QWORD *)this + 6);
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  if (v2 != v3)
  {
    while (1)
    {
      v5 = *v2;
      v6 = *((unsigned __int8 *)this + 120);
      if (*(unsigned __int8 *)(*v2 + 169) != v6 || *(_BYTE *)(v5 + 168))
        break;
LABEL_3:
      if (++v2 == v3)
        return;
    }
    *(_BYTE *)(v5 + 169) = v6;
    *(_BYTE *)(v5 + 168) = 0;
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 216);
      v8 = *(_QWORD **)(v7 + 96);
      v9 = *(std::__shared_weak_count **)(v7 + 104);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
    }
    else
    {
      v12 = *(_DWORD *)(v5 + 164);
      v13 = *(_QWORD *)(v5 + 216);
      v8 = *(_QWORD **)(v13 + 96);
      v9 = *(std::__shared_weak_count **)(v13 + 104);
      if (v9)
      {
        v14 = (unint64_t *)&v9->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      if (v12 != -1)
      {
        v16 = *(int *)(v5 + 164);
        goto LABEL_17;
      }
    }
    v16 = (v8[6] - v8[5]) / v8[1];
LABEL_17:
    v17 = *(_QWORD **)(v5 + 184);
    v17[9] = 0;
    v17[10] = v16;
    v17[11] = 0;
    v17[12] = 1;
    if (v9)
    {
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    goto LABEL_3;
  }
}

uint64_t ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolylineOverlayRibbon::BaseMesh::~BaseMesh(ggl::PolylineOverlayRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolylineOverlayRibbon::BaseMesh::~BaseMesh(ggl::PolylineOverlayRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolylineOverlayRibbon::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolylineOverlayRibbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolylineOverlayRibbon::BakedWidthMesh::~BakedWidthMesh(ggl::PolylineOverlayRibbon::BakedWidthMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolylineOverlayRibbon::BakedWidthMesh::~BakedWidthMesh(ggl::PolylineOverlayRibbon::BakedWidthMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolylineOverlayRibbon::BakedWidthMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolylineOverlayRibbon::BakedWidthMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
      }
      ggl::MeshTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE587718 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BDB78;
  *(_QWORD *)(a1 + 16) = &unk_1E42BDB98;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BAE20;
  *(_QWORD *)(a1 + 16) = &unk_1E42BAE40;
  return a1;
}

void ggl::PolylineOverlayRibbon::ElevatedMesh::~ElevatedMesh(ggl::PolylineOverlayRibbon::ElevatedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolylineOverlayRibbon::ElevatedMesh::~ElevatedMesh(ggl::PolylineOverlayRibbon::ElevatedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolylineOverlayRibbon::ElevatedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolylineOverlayRibbon::ElevatedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::MultipleShieldLabelPart::~MultipleShieldLabelPart(md::MultipleShieldLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_1E429EDA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 84);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 80);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 80);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E429EDA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 84);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 80);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v9 + 24) = "VectorKitLabels";
    *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v9 = &off_1E42B5668;
    *(_QWORD *)(v9 + 8) = "VectorKitLabels";
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_QWORD *)(v9 + 248) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
    if ((_DWORD)v10)
      geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v9 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v9;
  }
  (*(void (**)(uint64_t, md::MultipleShieldLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 40))(mdm::Allocator::instance(void)::alloc, this, 704);
}

uint64_t md::MultipleShieldLabelPart::prepareForDisplay(uint64_t this, LabelManager *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;

  v2 = this;
  v3 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v3 != i;
        this = (*(uint64_t (**)(uint64_t, LabelManager *))(*(_QWORD *)v6 + 104))(v6, a2))
  {
    v6 = *v3++;
  }
  if (!*(_BYTE *)(v2 + 662))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 632) + 24))(*(_QWORD *)(v2 + 632), v2 + 664);
  return this;
}

uint64_t md::MultipleShieldLabelPart::clone(md::MultipleShieldLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  _QWORD *i;
  md::LabelPart *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  {
    v17 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 704, 8);
  md::LabelPart::LabelPart((md::LabelPart *)v3, this);
  *(_QWORD *)v3 = off_1E4294028;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  {
    v18 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(v3 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(v3 + 608) = 0;
  *(_BYTE *)(v3 + 616) = 0;
  *(_WORD *)(v3 + 628) = 1;
  *(_BYTE *)(v3 + 630) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 72);
  for (i = (_QWORD *)*((_QWORD *)this + 73); v5 != i; ++v5)
  {
    v7 = (md::LabelPart *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 888))(*v5);
    if (v7)
      md::CompositeLabelPart::addLabelPart(v3, v7);
  }
  *(_QWORD *)v3 = off_1E429EDA8;
  *(_QWORD *)(v3 + 632) = *((_QWORD *)this + 79);
  v8 = *((_QWORD *)this + 80);
  *(_QWORD *)(v3 + 640) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_QWORD *)this + 81);
  *(_QWORD *)(v3 + 655) = *(_QWORD *)((char *)this + 655);
  *(_QWORD *)(v3 + 648) = v11;
  *(_QWORD *)(v3 + 664) = *((_QWORD *)this + 83);
  v12 = *((_QWORD *)this + 84);
  *(_QWORD *)(v3 + 672) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *((_QWORD *)this + 85);
  *(_QWORD *)(v3 + 687) = *(_QWORD *)((char *)this + 687);
  *(_QWORD *)(v3 + 680) = v15;
  *(_BYTE *)(v3 + 696) = *((_BYTE *)this + 696);
  return v3;
}

void sub_19F5E38FC(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 704);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void md::MultipleShieldLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "MultipleShields");
}

uint64_t md::MultipleShieldLabelPart::MultipleShieldLabelPart(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  float *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  geo::read_write_lock *v25;
  const char *v26;
  malloc_zone_t *zone;
  __int128 v28;

  *(_DWORD *)(a1 + 8) = 1065353216;
  v4 = a1 + 280;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  v5 = 0uLL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E4294028;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
  {
    v5 = 0uLL;
    v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v23)
    {
      v24 = operator new();
      *(_QWORD *)(v24 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v24 + 24) = "VectorKitLabels";
      *(_OWORD *)(v24 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v24 = &off_1E42B5668;
      *(_QWORD *)(v24 + 8) = "VectorKitLabels";
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_OWORD *)(v24 + 104) = 0u;
      *(_OWORD *)(v24 + 120) = 0u;
      *(_OWORD *)(v24 + 136) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *(_OWORD *)(v24 + 168) = 0u;
      *(_OWORD *)(v24 + 184) = 0u;
      *(_OWORD *)(v24 + 200) = 0u;
      *(_OWORD *)(v24 + 216) = 0u;
      *(_OWORD *)(v24 + 232) = 0u;
      *(_QWORD *)(v24 + 248) = 0;
      *(_OWORD *)(v24 + 56) = 0u;
      v25 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v24 + 56), 0);
      if ((_DWORD)v25)
        geo::read_write_lock::logFailure(v25, (uint64_t)"initialization", v26);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v24 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v24 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v24;
      v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v5 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 600) = *((_QWORD *)v6 + 299);
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_WORD *)(a1 + 628) = 1;
  *(_BYTE *)(a1 + 630) = 0;
  *(_QWORD *)a1 = off_1E429EDA8;
  *(_OWORD *)(a1 + 632) = v5;
  *(_DWORD *)(a1 + 648) = 1065353216;
  *(_DWORD *)(a1 + 659) = 0;
  *(_QWORD *)(a1 + 652) = 0;
  *(_QWORD *)(v4 + 384) = 0;
  *(_QWORD *)(v4 + 392) = 0;
  *(_DWORD *)(a1 + 680) = 1065353216;
  *(_DWORD *)(a1 + 691) = 0;
  *(_QWORD *)(a1 + 684) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  v8 = *a2;
  v9 = a2[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = *(std::__shared_weak_count **)(a1 + 640);
    *(_QWORD *)(a1 + 632) = v8;
    *(_QWORD *)(a1 + 640) = v9;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 632) = v8;
    *(_QWORD *)(a1 + 640) = 0;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 16))(&v28);
  v15 = v28;
  v28 = 0uLL;
  v16 = *(std::__shared_weak_count **)(a1 + 672);
  *(_OWORD *)(v4 + 384) = v15;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_19F5E3D58(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 84);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)v1 + 80);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::MaterialTextureManager::purge(pthread_rwlock_t *this)
{
  geo::read_write_lock *v2;
  const char *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  geo::read_write_lock *v10;
  const char *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (geo::read_write_lock *)pthread_rwlock_wrlock(this);
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"write lock", v3);
  if (*(_QWORD *)&this[1].__opaque[16])
  {
    v4 = *(_QWORD **)&this[1].__opaque[8];
    while (v4)
    {
      v12 = v4;
      v4 = (_QWORD *)*v4;
      v13 = (std::__shared_weak_count *)v12[5];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v12);
    }
    *(_QWORD *)&this[1].__opaque[8] = 0;
    v5 = *(_QWORD *)this[1].__opaque;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(this[1].__sig + 8 * i) = 0;
    }
    *(_QWORD *)&this[1].__opaque[16] = 0;
  }
  if (*(_QWORD *)&this[1].__opaque[56])
  {
    v7 = *(_QWORD **)&this[1].__opaque[48];
    while (v7)
    {
      v16 = v7;
      v7 = (_QWORD *)*v7;
      v17 = (std::__shared_weak_count *)v16[5];
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)&this[1].__opaque[48] = 0;
    v8 = *(_QWORD *)&this[1].__opaque[40];
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*(_QWORD *)&this[1].__opaque[32] + 8 * j) = 0;
    }
    *(_QWORD *)&this[1].__opaque[56] = 0;
  }
  v10 = (geo::read_write_lock *)pthread_rwlock_unlock(this);
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"unlock", v11);
}

void std::__function::__func<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0,std::allocator<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0,std::allocator<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0F28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0,std::allocator<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0F28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0,std::allocator<md::MaterialTextureManager::_textureFromMaterial(std::shared_ptr<gms::Material<ggl::Texture2D>> const&,unsigned long long const&,gms::PropertyKey const&,unsigned char,std::shared_ptr<ggl::SamplerState> &,BOOL)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6DE0;
  v7[1] = ggl::Texture2D::onImplicitLoadComplete;
  v7[2] = 0;
  v7[3] = v4;
  v23 = v7;
  v15[0] = v5;
  v15[1] = v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = v20;
  v19 = v6;
  v9 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v7);
  v21 = v10;
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(__n128))(*v11 + 8 * v12))(v9);
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v15, v9);
  if (v21 == v20)
  {
    v14 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
    v8 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v14))(v8);
}

void sub_19F5E4108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  float v14;
  uint64_t **v15;
  uint64_t **v16;
  _DWORD *v17;
  uint64_t v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  float v27;
  float v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _BYTE *v34;
  float v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  float v42;
  float v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  int shared_owners_high;
  int shared_owners;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *p_shared_weak_owners;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;

  v6 = (std::__shared_weak_count *)operator new(0x50uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB6A0;
  v6[1].__vftable = 0;
  v6[1].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = a3;
  LODWORD(v6[2].__vftable) = 0;
  v6[2].__shared_owners_ = 0;
  v71 = 0;
  v72 = 0;
  v70 = &v71;
  if (a2)
  {
    v8 = 0;
    v9 = &v71;
    while (1)
    {
      v10 = &v71;
      if (v9 == &v71)
        goto LABEL_9;
      v11 = v8;
      v12 = &v71;
      if (v8)
      {
        do
        {
          v10 = (uint64_t **)v11;
          v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v12[2];
          v13 = *v10 == (uint64_t *)v12;
          v12 = v10;
        }
        while (v13);
      }
      v14 = *((float *)a2 + 4);
      if (*((float *)v10 + 7) < v14)
      {
LABEL_9:
        v15 = v8 ? v10 : &v71;
        v16 = v8 ? v10 + 1 : &v71;
      }
      else
      {
        v15 = &v71;
        v16 = &v71;
        if (v8)
        {
          v16 = &v71;
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v8;
              v19 = *((float *)v8 + 7);
              if (v14 >= v19)
                break;
              v8 = (uint64_t *)*v8;
              v16 = v15;
              if (!*v15)
                goto LABEL_16;
            }
            if (v19 >= v14)
              break;
            v16 = (uint64_t **)(v8 + 1);
            v8 = (uint64_t *)v8[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v16)
      {
LABEL_16:
        v17 = operator new(0x30uLL);
        v17[7] = *((_DWORD *)a2 + 4);
        v18 = *(uint64_t *)((char *)a2 + 20);
        v17[10] = *((_DWORD *)a2 + 7);
        *((_QWORD *)v17 + 4) = v18;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = v15;
        *v16 = (uint64_t *)v17;
        if (*v70)
        {
          v70 = (uint64_t **)*v70;
          v17 = *v16;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v71, (uint64_t *)v17);
        ++v72;
      }
      a2 = (uint64_t *)*a2;
      if (!a2)
        break;
      v9 = v70;
      v8 = v71;
    }
  }
  v20 = (std::__shared_weak_count *)operator new(0x60uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v22 = ggl::TextureData2D::TextureData2D((uint64_t)&v20[1], 256, 1, 1u, 12, 1);
  v69 = v20;
  v23 = (_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v20[1].__on_zero_shared)(v22, 0);
  v24 = v71;
  v68 = v20;
  v67 = &v20[1].__vftable;
  if (v71)
  {
    do
    {
      v25 = v24;
      v24 = (uint64_t *)v24[1];
    }
    while (v24);
  }
  else
  {
    v26 = &v71;
    do
    {
      v25 = v26[2];
      v13 = *v25 == (_QWORD)v26;
      v26 = (uint64_t **)v25;
    }
    while (v13);
  }
  v27 = *((float *)v25 + 7);
  LODWORD(v6[2].__shared_weak_owners_) = 1008981770;
  *((float *)&v6[2].__shared_weak_owners_ + 1) = v27;
  v28 = log2f(v27);
  v29 = 0;
  LODWORD(v6[3].__vftable) = -1059808648;
  *((float *)&v6[3].__vftable + 1) = v28;
  do
  {
    v35 = exp2f(*(float *)&v6[3].__vftable+ (float)((float)((float)(*((float *)&v6[3].__vftable + 1) - *(float *)&v6[3].__vftable) * (float)v29)* 0.0039216));
    v36 = v71;
    v37 = &v71;
    if (!v71)
      goto LABEL_43;
    v37 = &v71;
    do
    {
      v38 = v36 + 1;
      if (v35 < *((float *)v36 + 7))
      {
        v38 = v36;
        v37 = (uint64_t **)v36;
      }
      v36 = (uint64_t *)*v38;
    }
    while (*v38);
    v39 = *v37;
    if (*v37)
    {
      do
      {
        v40 = (uint64_t **)v39;
        v39 = (uint64_t *)v39[1];
      }
      while (v39);
    }
    else
    {
LABEL_43:
      v40 = v37;
      do
      {
        v41 = (uint64_t *)v40;
        v40 = (uint64_t **)v40[2];
      }
      while (*v40 == v41);
    }
    v30 = (float)(v35 - *((float *)v40 + 7)) / (float)(*((float *)v37 + 7) - *((float *)v40 + 7));
    v31 = *((float *)v40 + 8) + (float)((float)(*((float *)v37 + 8) - *((float *)v40 + 8)) * v30);
    v32 = *((float *)v40 + 9) + (float)((float)(*((float *)v37 + 9) - *((float *)v40 + 9)) * v30);
    v33 = *((float *)v40 + 10) + (float)((float)(*((float *)v37 + 10) - *((float *)v40 + 10)) * v30);
    v34 = &v23[4 * v29];
    *v34 = (int)(float)(v31 * 255.0);
    v34[1] = (int)(float)(v32 * 255.0);
    v34[2] = (int)(float)(v33 * 255.0);
    v34[3] = 1;
    ++v29;
  }
  while (v29 != 255);
  v42 = *((float *)v25 + 9) * 255.0;
  v43 = *((float *)v25 + 10) * 255.0;
  v23[1020] = (int)(float)(*((float *)v25 + 8) * 255.0);
  v23[1021] = (int)v42;
  v23[1022] = (int)v43;
  v23[1023] = 1;
  v44 = (std::__shared_weak_count *)operator new(0x58uLL);
  v44->__shared_owners_ = 0;
  v45 = (unint64_t *)&v44->__shared_owners_;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v44[1].__shared_weak_owners_ = 0;
  v44[2].__vftable = 0;
  v44[1].__shared_owners_ = 0;
  LODWORD(v44[2].__shared_owners_) = 0;
  *(_QWORD *)&v46 = 0x100000001;
  *((_QWORD *)&v46 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v44[2].__shared_owners_ + 4) = v46;
  *(std::__shared_weak_count_vtbl **)((char *)&v44[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)1;
  HIDWORD(v44[3].__shared_owners_) = 0;
  v47 = operator new();
  do
    v48 = __ldxr(v21);
  while (__stxr(v48 + 1, v21));
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)(v47 + 24) = 0;
  *(_DWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 56) = 0x100000001;
  shared_owners = v68[1].__shared_owners_;
  shared_owners_high = HIDWORD(v68[1].__shared_owners_);
  *(_DWORD *)(v47 + 64) = 0;
  *(_DWORD *)(v47 + 68) = shared_owners_high;
  *(_QWORD *)(v47 + 72) = 0x100000001;
  *(_QWORD *)(v47 + 88) = 0;
  *(_QWORD *)(v47 + 96) = 0;
  *(_QWORD *)v47 = &off_1E42BE438;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v47 + 48) = "";
  *(_DWORD *)(v47 + 104) = shared_owners;
  *(_QWORD *)(v47 + 112) = v67;
  *(_QWORD *)(v47 + 120) = v68;
  do
    v51 = __ldxr(v21);
  while (__stxr(v51 + 1, v21));
  *(_WORD *)(v47 + 128) = 0;
  *(_BYTE *)(v47 + 130) = 1;
  *(_QWORD *)(v47 + 136) = v44 + 1;
  *(_QWORD *)(v47 + 144) = v44;
  do
    v52 = __ldxr(v45);
  while (__stxr(v52 + 1, v45));
  *(_QWORD *)(v47 + 80) = v68[1].__shared_weak_owners_;
  v53 = v6[2].__shared_owners_;
  v6[2].__shared_owners_ = v47;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  do
    v54 = __ldaxr(v21);
  while (__stlxr(v54 - 1, v21));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  if (v44)
  {
    v55 = (unint64_t *)&v44->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v69)
  {
    v57 = (unint64_t *)&v69->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v71);
  *a1 = v6 + 1;
  a1[1] = v6;
  v59 = (std::__shared_weak_count *)v6[1].__shared_owners_;
  if (v59)
  {
    if (v59->__shared_owners_ != -1)
      return;
    do
      v60 = __ldxr(p_shared_owners);
    while (__stxr(v60 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v62 = __ldxr(p_shared_weak_owners);
    while (__stxr(v62 + 1, p_shared_weak_owners));
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1];
    v6[1].__shared_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    do
      v63 = __ldxr(p_shared_owners);
    while (__stxr(v63 + 1, p_shared_owners));
    v64 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1];
    v6[1].__shared_owners_ = (uint64_t)v6;
  }
  do
    v66 = __ldaxr(p_shared_owners);
  while (__stlxr(v66 - 1, p_shared_owners));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19F5E4804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  std::__shared_weak_count *v19;
  uint64_t shared_owners;
  std::__shared_weak_count *v22;
  void *v23;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a19);
  shared_owners = v19[2].__shared_owners_;
  v19[2].__shared_owners_ = 0;
  if (shared_owners)
    (*(void (**)(uint64_t))(*(_QWORD *)shared_owners + 8))(shared_owners);
  v22 = (std::__shared_weak_count *)v19[1].__shared_owners_;
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  float v14;
  uint64_t **v15;
  uint64_t **v16;
  _DWORD *v17;
  float v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  float32x4_t *v24;
  uint64_t **v25;
  float v26;
  float v27;
  unint64_t v28;
  int16x8_t v29;
  float v30;
  uint64_t *v31;
  float32x4_t *v32;
  uint64_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  int16x8_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  int shared_owners_high;
  int shared_owners;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t v54;
  unint64_t *p_shared_weak_owners;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  float32x4_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;

  v6 = (std::__shared_weak_count *)operator new(0x50uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB6A0;
  v6[1].__vftable = 0;
  v6[1].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = a3;
  LODWORD(v6[2].__vftable) = 0;
  v6[2].__shared_owners_ = 0;
  v63 = 0;
  v64 = 0;
  v62 = &v63;
  if (a2)
  {
    v8 = 0;
    v9 = &v63;
    while (1)
    {
      v10 = &v63;
      if (v9 == &v63)
        goto LABEL_9;
      v11 = v8;
      v12 = &v63;
      if (v8)
      {
        do
        {
          v10 = (uint64_t **)v11;
          v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v12[2];
          v13 = *v10 == (uint64_t *)v12;
          v12 = v10;
        }
        while (v13);
      }
      v14 = *((float *)a2 + 4);
      if (*((float *)v10 + 7) < v14)
      {
LABEL_9:
        v15 = v8 ? v10 : &v63;
        v16 = v8 ? v10 + 1 : &v63;
      }
      else
      {
        v15 = &v63;
        v16 = &v63;
        if (v8)
        {
          v16 = &v63;
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v8;
              v18 = *((float *)v8 + 7);
              if (v14 >= v18)
                break;
              v8 = (uint64_t *)*v8;
              v16 = v15;
              if (!*v15)
                goto LABEL_16;
            }
            if (v18 >= v14)
              break;
            v16 = (uint64_t **)(v8 + 1);
            v8 = (uint64_t *)v8[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v16)
      {
LABEL_16:
        v17 = operator new(0x30uLL);
        v17[7] = *((_DWORD *)a2 + 4);
        *((_OWORD *)v17 + 2) = *(_OWORD *)((char *)a2 + 20);
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = v15;
        *v16 = (uint64_t *)v17;
        if (*v62)
        {
          v62 = (uint64_t **)*v62;
          v17 = *v16;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v63, (uint64_t *)v17);
        ++v64;
      }
      a2 = (uint64_t *)*a2;
      if (!a2)
        break;
      v9 = v62;
      v8 = v63;
    }
  }
  v19 = (std::__shared_weak_count *)operator new(0x60uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v21 = ggl::TextureData2D::TextureData2D((uint64_t)&v19[1], 256, 1, 1u, 12, 1);
  v22 = ((uint64_t (*)(_QWORD *, _QWORD))v19[1].__on_zero_shared)(v21, 0);
  v23 = v63;
  if (v63)
  {
    do
    {
      v24 = (float32x4_t *)v23;
      v23 = (uint64_t *)v23[1];
    }
    while (v23);
  }
  else
  {
    v25 = &v63;
    do
    {
      v24 = (float32x4_t *)v25[2];
      v13 = v24->i64[0] == (_QWORD)v25;
      v25 = (uint64_t **)v24;
    }
    while (v13);
  }
  v26 = v24[1].f32[3];
  LODWORD(v6[2].__shared_weak_owners_) = 1008981770;
  *((float *)&v6[2].__shared_weak_owners_ + 1) = v26;
  v27 = log2f(v26);
  v28 = 0;
  LODWORD(v6[3].__vftable) = -1059808648;
  *((float *)&v6[3].__vftable + 1) = v27;
  v61 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  do
  {
    v30 = exp2f(*(float *)&v6[3].__vftable+ (float)((float)((float)(*((float *)&v6[3].__vftable + 1) - *(float *)&v6[3].__vftable) * (float)v28)* 0.0039216));
    v31 = v63;
    v32 = (float32x4_t *)&v63;
    if (!v63)
      goto LABEL_43;
    v32 = (float32x4_t *)&v63;
    do
    {
      v33 = v31 + 1;
      if (v30 < *((float *)v31 + 7))
      {
        v33 = v31;
        v32 = (float32x4_t *)v31;
      }
      v31 = (uint64_t *)*v33;
    }
    while (*v33);
    v34 = (float32x4_t *)v32->i64[0];
    if (v32->i64[0])
    {
      do
      {
        v35 = v34;
        v34 = (float32x4_t *)v34->i64[1];
      }
      while (v34);
    }
    else
    {
LABEL_43:
      v35 = v32;
      do
      {
        v36 = v35;
        v35 = (float32x4_t *)v35[1].i64[0];
      }
      while ((float32x4_t *)v35->i64[0] == v36);
    }
    v29 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmlaq_n_f32(v35[2], vsubq_f32(v32[2], v35[2]), (float)(v30 - v35[1].f32[3]) / (float)(v32[1].f32[3] - v35[1].f32[3])), v61));
    *(int16x4_t *)v29.i8 = vmovn_s32((int32x4_t)v29);
    *(_DWORD *)(v22 + 4 * v28++) = vmovn_s16(v29).u32[0];
  }
  while (v28 != 255);
  v37 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v24[2], (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v37.i8 = vmovn_s32((int32x4_t)v37);
  *(_DWORD *)(v22 + 1020) = vmovn_s16(v37).u32[0];
  v38 = (std::__shared_weak_count *)operator new(0x58uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v38[1].__shared_weak_owners_ = 0;
  v38[2].__vftable = 0;
  v38[1].__shared_owners_ = 0;
  LODWORD(v38[2].__shared_owners_) = 0;
  *(_QWORD *)&v40 = 0x100000001;
  *((_QWORD *)&v40 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v38[2].__shared_owners_ + 4) = v40;
  *(std::__shared_weak_count_vtbl **)((char *)&v38[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)1;
  HIDWORD(v38[3].__shared_owners_) = 0;
  v41 = operator new();
  do
    v42 = __ldxr(v20);
  while (__stxr(v42 + 1, v20));
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 24) = 0;
  *(_DWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 56) = 0x100000001;
  shared_owners = v19[1].__shared_owners_;
  shared_owners_high = HIDWORD(v19[1].__shared_owners_);
  *(_DWORD *)(v41 + 64) = 0;
  *(_DWORD *)(v41 + 68) = shared_owners_high;
  *(_QWORD *)(v41 + 72) = 0x100000001;
  *(_QWORD *)(v41 + 88) = 0;
  *(_QWORD *)(v41 + 96) = 0;
  *(_QWORD *)v41 = &off_1E42BE438;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v41 + 48) = "";
  *(_DWORD *)(v41 + 104) = shared_owners;
  *(_QWORD *)(v41 + 112) = v19 + 1;
  *(_QWORD *)(v41 + 120) = v19;
  do
    v45 = __ldxr(v20);
  while (__stxr(v45 + 1, v20));
  *(_WORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 130) = 1;
  *(_QWORD *)(v41 + 136) = v38 + 1;
  *(_QWORD *)(v41 + 144) = v38;
  do
    v46 = __ldxr(v39);
  while (__stxr(v46 + 1, v39));
  *(_QWORD *)(v41 + 80) = v19[1].__shared_weak_owners_;
  v47 = v6[2].__shared_owners_;
  v6[2].__shared_owners_ = v41;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  do
    v48 = __ldaxr(v20);
  while (__stlxr(v48 - 1, v20));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v38)
  {
    v49 = (unint64_t *)&v38->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v19)
  {
    v51 = (unint64_t *)&v19->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v63);
  *a1 = v6 + 1;
  a1[1] = v6;
  v53 = (std::__shared_weak_count *)v6[1].__shared_owners_;
  if (v53)
  {
    if (v53->__shared_owners_ != -1)
      return;
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v56 = __ldxr(p_shared_weak_owners);
    while (__stxr(v56 + 1, p_shared_weak_owners));
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1];
    v6[1].__shared_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(v53);
  }
  else
  {
    do
      v57 = __ldxr(p_shared_owners);
    while (__stxr(v57 + 1, p_shared_owners));
    v58 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1];
    v6[1].__shared_owners_ = (uint64_t)v6;
  }
  do
    v60 = __ldaxr(p_shared_owners);
  while (__stlxr(v60 - 1, p_shared_owners));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19F5E4E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  std::__shared_weak_count *v19;
  uint64_t shared_owners;
  std::__shared_weak_count *v22;
  void *v23;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a19);
  shared_owners = v19[2].__shared_owners_;
  v19[2].__shared_owners_ = 0;
  if (shared_owners)
    (*(void (**)(uint64_t))(*(_QWORD *)shared_owners + 8))(shared_owners);
  v22 = (std::__shared_weak_count *)v19[1].__shared_owners_;
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~optional(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
      operator delete(v4);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void std::__shared_ptr_emplace<md::ColorRampTexture>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB6A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ColorRampTexture>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB6A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ColorRampTexture>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void md::DrapingTaskScheduler::~DrapingTaskScheduler(md::DrapingTaskScheduler *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (_QWORD *)v2[8];
      while (v5)
      {
        v7 = v5;
        v5 = (_QWORD *)*v5;
        v8 = (std::__shared_weak_count *)v7[9];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v7);
      }
      v6 = (void *)v2[6];
      v2[6] = 0;
      if (v6)
        operator delete(v6);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
}

void std::__function::__func<md::DrapingTaskScheduler::reset(void)::$_0,std::allocator<md::DrapingTaskScheduler::reset(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DrapingTaskScheduler::reset(void)::$_0,std::allocator<md::DrapingTaskScheduler::reset(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0598;
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[9];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[8];
      while (v3)
      {
        v6 = v3;
        v3 = (_QWORD *)*v3;
        v7 = (std::__shared_weak_count *)v6[9];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v6);
      }
      v4 = (void *)v2[6];
      v2[6] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

void md::SectionPointsSource::~SectionPointsSource(md::SectionPointsSource *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::SectionPointsSource::operator[](uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t md::SectionPointsSource::speed(md::SectionPointsSource *this)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1))
                            + 44);
}

uint64_t md::SectionPointsSource::size(md::SectionPointsSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

uint64_t ggl::ConstantDataTyped<ggl::SinglePassRouteLine::ClipParams>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::SinglePassRouteLine::ClipParams>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::ClipParams>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::ClipParams>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::ClipParams>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::SinglePassRouteLine::DrawAnimationDescription>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::SinglePassRouteLine::DrawAnimationDescription>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::DrawAnimationDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::DrawAnimationDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::DrawAnimationDescription>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::SinglePassRouteLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::SinglePassRouteLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SinglePassRouteLine::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::RouteLine::BaseMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLine::BaseMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::BaseMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::RouteLineDrawAnimation::rebuildAnimationSegments(md::RouteLineDrawAnimation *this, VKRouteLine *a2, PolylineCoordinate a3)
{
  VKRouteLine *v5;
  VKRouteLine *v6;
  _OWORD *v7;
  _OWORD *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  float offset;
  double v18;
  char *v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned __int8 v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned __int8 v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned __int8 v43;
  uint64_t v44;
  _QWORD *v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned __int8 v51;
  uint64_t v52;
  unint64_t i;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  float *v65;
  BOOL v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  double *v80;
  double v81;
  double *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  char *v88;
  char *v89;
  double *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  double v95;
  unsigned __int8 v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  VKRouteLine *v101;
  double v102;
  double v103;
  void **v104;
  double v105;
  void **v106;
  double v107;
  _QWORD *v108;
  char *__p;
  _BYTE *v110;

  v5 = a2;
  v6 = v5;
  *(_OWORD *)((char *)this + 120) = 0u;
  v7 = (_OWORD *)((char *)this + 120);
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_OWORD *)this + 5) = 0u;
  v8 = (_OWORD *)((char *)this + 80);
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0x3FF0000000000000;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 0x3FF0000000000000;
  *((_DWORD *)this + 52) = -1;
  if (v5)
  {
    -[VKRouteLine sections](v5, "sections");
    v9 = v110;
    *((float *)this + 53) = (float)(unint64_t)((v110 - __p) >> 3);
    if (__p)
    {
      v10 = __p;
      if (v110 != __p)
      {
        v11 = v110;
        do
        {
          v13 = (_QWORD *)*((_QWORD *)v11 - 1);
          v11 -= 8;
          v12 = v13;
          if (v13)
          {
            v66 = (*v12)-- == 1;
            if (v66)
            {
              md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v12 + 1));
              {
                v15 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v9 - 1), 424);
              *((_QWORD *)v9 - 1) = 0;
            }
          }
          v9 = v11;
        }
        while (v11 != __p);
        v10 = __p;
      }
      v110 = __p;
      operator delete(v10);
    }
    v16 = 0;
    offset = a3.offset;
    v104 = (void **)((char *)this + 40);
    *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
    v106 = (void **)((char *)this + 48);
    v18 = 0.0;
    v101 = v6;
    while (1)
    {
      -[VKRouteLine sections](v6, "sections");
      v20 = v110;
      v21 = (v110 - __p) >> 3;
      if (__p)
      {
        v22 = __p;
        if (v110 != __p)
        {
          v23 = v110;
          do
          {
            v25 = (_QWORD *)*((_QWORD *)v23 - 1);
            v23 -= 8;
            v24 = v25;
            if (v25)
            {
              v66 = (*v24)-- == 1;
              if (v66)
              {
                md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v24 + 1));
                {
                  v27 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v27, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v20 - 1), 424);
                *((_QWORD *)v20 - 1) = 0;
              }
            }
            v20 = v23;
          }
          while (v23 != __p);
          v22 = __p;
          v6 = v101;
        }
        v110 = __p;
        operator delete(v22);
      }
      if (v21 <= v16)
        break;
      -[VKRouteLine sections](v6, "sections");
      v28 = v110;
      v29 = *(_QWORD *)&__p[8 * v16];
      if (v29)
        v30 = v29 + 8;
      else
        v30 = 0;
      v31 = *(double *)(v30 + 232);
      v19 = __p;
      if (v110 != __p)
      {
        v32 = v110;
        do
        {
          v34 = (_QWORD *)*((_QWORD *)v32 - 1);
          v32 -= 8;
          v33 = v34;
          if (v34)
          {
            v66 = (*v33)-- == 1;
            if (v66)
            {
              md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v33 + 1));
              if ((v35 & 1) == 0)
              {
                {
                  v36 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
              }
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v28 - 1), 424);
              *((_QWORD *)v28 - 1) = 0;
            }
          }
          v28 = v32;
        }
        while (v32 != __p);
        v19 = __p;
      }
      v18 = v31 + v18;
      v110 = __p;
      operator delete(v19);
      ++v16;
    }
    if (v6)
    {
      v37 = 0;
      v107 = 0.0;
      v105 = 1.0 / v18;
      while (1)
      {
        -[VKRouteLine sections](v6, "sections");
        v38 = v110;
        v39 = (v110 - __p) >> 3;
        if (!__p)
          goto LABEL_64;
        if (v110 == __p)
          break;
        v40 = v110;
        do
        {
          v42 = (_QWORD *)*((_QWORD *)v40 - 1);
          v40 -= 8;
          v41 = v42;
          if (v42)
          {
            v66 = (*v41)-- == 1;
            if (v66)
            {
              md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v41 + 1));
              {
                v44 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v38 - 1), 424);
              *((_QWORD *)v38 - 1) = 0;
            }
          }
          v38 = v40;
        }
        while (v40 != __p);
        v110 = __p;
        operator delete(__p);
        if (v39 <= v37)
          goto LABEL_120;
LABEL_65:
        -[VKRouteLine sections](v6, "sections");
        v45 = *(_QWORD **)&__p[8 * v37];
        v108 = v45;
        if (v45)
          ++*v45;
        v46 = v110;
        v47 = __p;
        if (v110 != __p)
        {
          v48 = v110;
          do
          {
            v50 = (_QWORD *)*((_QWORD *)v48 - 1);
            v48 -= 8;
            v49 = v50;
            if (v50)
            {
              v66 = (*v49)-- == 1;
              if (v66)
              {
                md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v49 + 1));
                {
                  v52 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v52, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v46 - 1), 424);
                *((_QWORD *)v46 - 1) = 0;
              }
            }
            v46 = v48;
          }
          while (v48 != __p);
          v45 = v108;
          v47 = __p;
        }
        v110 = __p;
        operator delete(v47);
        for (i = 1; ; ++i)
        {
          v55 = v45 ? (uint64_t)(v45 + 1) : 0;
          v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 56))(v55);
          v45 = v108;
          v57 = v108 ? (uint64_t)(v108 + 1) : 0;
          if (v56 <= i)
            break;
          v58 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v57 + 96) + 32))(*(_QWORD *)(v57 + 96), i - 1);
          v59 = *(float *)v58;
          v60 = *(float *)(v58 + 4);
          v61 = *(float *)(v58 + 8);
          v62 = *(_DWORD *)(v58 + 12);
          v63 = *(float *)(v58 + 16);
          v64 = *(float *)(v58 + 32);
          v65 = (float *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v57 + 96) + 32))(*(_QWORD *)(v57 + 96), i);
          if (v62 >= a3.index)
          {
            v66 = v63 < offset && v62 == a3.index;
            if (!v66)
            {
              v67 = (float)(v65[8] - v64);
              if (v67 > 0.0000001)
              {
                v68 = v59;
                v69 = v60;
                v70 = v61;
                v71 = *v65;
                v72 = v65[1];
                v73 = v65[2];
                v74 = (v107 + v64) * v105;
                v75 = v67 + v64;
                v76 = (v75 + v107) * v105;
                v77 = *(double *)(v57 + 232);
                v78 = v64 / v77;
                v80 = (double *)*((_QWORD *)this + 6);
                v79 = *((_QWORD *)this + 7);
                v81 = v75 / v77;
                if ((unint64_t)v80 < v79)
                {
                  *v80 = v78;
                  v80[1] = v81;
                  v80[2] = v74;
                  v80[3] = v76;
                  v80[4] = v68;
                  v80[5] = v69;
                  v80[6] = v70;
                  v80[7] = v71;
                  v80[8] = v72;
                  v80[9] = v73;
                  v54 = (char *)(v80 + 11);
                  *((_DWORD *)v80 + 20) = v37;
                  offset = a3.offset;
                }
                else
                {
                  v82 = (double *)*v104;
                  v83 = 0x2E8BA2E8BA2E8BA3 * (((char *)v80 - (_BYTE *)*v104) >> 3);
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) > 0x2E8BA2E8BA2E8BALL)
                    abort();
                  v85 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v79 - (_QWORD)v82) >> 3);
                  if (2 * v85 > v84)
                    v84 = 2 * v85;
                  if (v85 >= 0x1745D1745D1745DLL)
                    v86 = 0x2E8BA2E8BA2E8BALL;
                  else
                    v86 = v84;
                  if (v86)
                  {
                    v102 = v81;
                    v103 = v64 / v77;
                    if (v86 > 0x2E8BA2E8BA2E8BALL)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v87 = v68;
                    v88 = (char *)operator new(88 * v86);
                    v68 = v87;
                    v81 = v102;
                    v78 = v103;
                  }
                  else
                  {
                    v88 = 0;
                  }
                  v89 = &v88[88 * v83];
                  *(double *)v89 = v78;
                  *((double *)v89 + 1) = v81;
                  *((double *)v89 + 2) = v74;
                  *((double *)v89 + 3) = v76;
                  *((double *)v89 + 4) = v68;
                  *((double *)v89 + 5) = v69;
                  *((double *)v89 + 6) = v70;
                  *((double *)v89 + 7) = v71;
                  *((double *)v89 + 8) = v72;
                  *((double *)v89 + 9) = v73;
                  *((_DWORD *)v89 + 20) = v37;
                  v90 = (double *)v89;
                  if (v80 == v82)
                  {
                    offset = a3.offset;
                  }
                  else
                  {
                    offset = a3.offset;
                    do
                    {
                      v91 = *(_OWORD *)(v80 - 11);
                      *(_OWORD *)(v90 - 9) = *(_OWORD *)(v80 - 9);
                      *(_OWORD *)(v90 - 11) = v91;
                      v92 = *(_OWORD *)(v80 - 7);
                      v93 = *(_OWORD *)(v80 - 5);
                      v94 = *(_OWORD *)(v80 - 3);
                      *(v90 - 1) = *(v80 - 1);
                      *(_OWORD *)(v90 - 3) = v94;
                      *(_OWORD *)(v90 - 5) = v93;
                      *(_OWORD *)(v90 - 7) = v92;
                      v90 -= 11;
                      v80 -= 11;
                    }
                    while (v80 != v82);
                    v80 = (double *)*v104;
                  }
                  v54 = v89 + 88;
                  *((_QWORD *)this + 5) = v90;
                  *((_QWORD *)this + 6) = v89 + 88;
                  *((_QWORD *)this + 7) = &v88[88 * v86];
                  v6 = v101;
                  if (v80)
                    operator delete(v80);
                }
                *v106 = v54;
              }
            }
          }
        }
        v95 = *(double *)(v57 + 232);
        if (v108)
        {
          v66 = (*v108)-- == 1;
          if (v66)
          {
            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v108 + 1));
            {
              v97 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v97, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v108, 424);
          }
        }
        v107 = v95 + v107;
        ++v37;
      }
      v110 = __p;
      operator delete(__p);
LABEL_64:
      if (v39 <= v37)
        goto LABEL_120;
      goto LABEL_65;
    }
LABEL_120:
    v8 = (_OWORD *)((char *)this + 80);
    v7 = (_OWORD *)((char *)this + 120);
  }
  else
  {
    *((_DWORD *)this + 53) = 0;
    v104 = (void **)((char *)this + 40);
    *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
    v106 = (void **)((char *)this + 48);
  }
  v98 = *v104;
  if (*v106 != *v104)
  {
    v99 = v98[6];
    v100 = *((_OWORD *)v98 + 2);
    *((_QWORD *)this + 9) = 0x3FF0000000000000;
    *v8 = 0u;
    v8[1] = 0u;
    *((_QWORD *)this + 14) = 0x3FF0000000000000;
    *v7 = 0u;
    v7[1] = 0u;
    *(_OWORD *)((char *)this + 152) = xmmword_19FFB32C0;
    *(_OWORD *)((char *)this + 168) = v100;
    *((_QWORD *)this + 23) = v99;
    *((_QWORD *)this + 24) = 0x3FF0000000000000;
    *(float *)&v99 = *((double *)v98 + 2);
    *((_DWORD *)this + 55) = v99;
  }

}

void sub_19F5E6070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr(_QWORD *a1)
{
  _QWORD *v2;
  unsigned __int8 v4;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v2 + 1));
      {
        v6 = operator new();
        *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v6 + 24) = "VectorKitLabels";
        *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v6 = &off_1E42B5668;
        *(_QWORD *)(v6 + 8) = "VectorKitLabels";
        *(_OWORD *)(v6 + 72) = 0u;
        *(_OWORD *)(v6 + 88) = 0u;
        *(_OWORD *)(v6 + 104) = 0u;
        *(_OWORD *)(v6 + 120) = 0u;
        *(_OWORD *)(v6 + 136) = 0u;
        *(_OWORD *)(v6 + 152) = 0u;
        *(_OWORD *)(v6 + 168) = 0u;
        *(_OWORD *)(v6 + 184) = 0u;
        *(_OWORD *)(v6 + 200) = 0u;
        *(_OWORD *)(v6 + 216) = 0u;
        *(_OWORD *)(v6 + 232) = 0u;
        *(_QWORD *)(v6 + 248) = 0;
        *(_OWORD *)(v6 + 56) = 0u;
        v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
        if ((_DWORD)v7)
          geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v6 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v6;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *a1, 424);
      *a1 = 0;
    }
  }
  return a1;
}

float md::RouteLineDrawAnimation::update(md::RouteLineDrawAnimation *this, float result, int *a3)
{
  double v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *i;
  double v9;
  double v10;
  int v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64_t v23;
  float64_t v24;
  float64_t v25;
  float32x2_t v26;
  _QWORD *v27;
  uint64_t v28;
  float32x2_t *v29;
  float64_t v30;
  double v31;
  double v32;
  float64_t v33;
  float64_t v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;

  v3 = result;
  v4 = *((float *)this + 55) + (1.0 - *((float *)this + 55)) * result;
  *((float *)this + 50) = v4;
  v5 = *((_QWORD *)this + 5);
  v6 = -1171354717 * ((unint64_t)(*((_QWORD *)this + 6) - v5) >> 3);
  if (!(_DWORD)v6)
    return 1.0;
  v7 = 0;
  for (i = (double *)(v5 + 24); ; i += 11)
  {
    v9 = *(i - 1);
    if (v9 <= v3)
    {
      v10 = *i;
      if (*i >= v3)
        break;
    }
    if (v6 == ++v7)
    {
      *a3 = *((_DWORD *)this + 51);
      return result;
    }
  }
  if (*((_DWORD *)this + 52) == (_DWORD)v7)
  {
    v11 = *((_DWORD *)this + 51);
  }
  else
  {
    v11 = *(_DWORD *)(v5 + 88 * v7 + 80);
    *((_DWORD *)this + 51) = v11;
    *((_DWORD *)this + 52) = v7;
  }
  *a3 = v11;
  v12 = (v3 - v10) / (v10 - v9);
  v13 = v5 + 88 * v7;
  v14 = *(double *)(v13 + 32);
  v15 = v12 + 1.0;
  v16 = *(double *)(v13 + 56);
  v17 = (v16 - v14) * v15;
  v18 = v16 - (v14 + v17);
  v19 = *(float64x2_t *)(v13 + 40);
  v20 = *(float64x2_t *)(v13 + 64);
  v21 = vmulq_n_f64(vsubq_f64(v20, v19), v15);
  v22 = vsubq_f64(v20, vaddq_f64(v21, v19));
  v20.f64[0] = 1.0 / sqrt(vmulq_f64(v22, v22).f64[0] + v18 * v18);
  v23 = v20.f64[0] * v18;
  v22.f64[0] = v20.f64[0] * v22.f64[0];
  v20.f64[0] = 1.0 / sqrt(v23 * v23 + v22.f64[0] * v22.f64[0]);
  v24 = -(v23 * v20.f64[0]);
  v22.f64[0] = sqrt(v24 * v24 + v20.f64[0] * v22.f64[0] * (v20.f64[0] * v22.f64[0])) + v20.f64[0] * v22.f64[0];
  v20.f64[0] = 1.0 / sqrt(v24 * v24 + v22.f64[0] * v22.f64[0]);
  v25 = v20.f64[0] * v24;
  v22.f64[0] = v20.f64[0] * v22.f64[0];
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 152) = xmmword_19FFB32C0;
  *((double *)this + 21) = v17;
  *((float64x2_t *)this + 11) = v21;
  *((_QWORD *)this + 24) = 0x3FF0000000000000;
  v26 = vcvt_f32_f64(*(float64x2_t *)(v13 + 32));
  *(float *)v20.f64 = *(double *)(v13 + 48);
  v27 = **(_QWORD ***)(*((_QWORD *)this + 3) + 64);
  v28 = v27[1];
  v29 = (float32x2_t *)v27[9];
  *v29 = v26;
  v29[1].i32[0] = LODWORD(v20.f64[0]);
  v29[6] = v26;
  v29[7].i32[0] = LODWORD(v20.f64[0]);
  v29[12] = v26;
  v29[13].i32[0] = LODWORD(v20.f64[0]);
  v29[18] = v26;
  v29[19].i32[0] = LODWORD(v20.f64[0]);
  v29[24] = v26;
  v29[25].i32[0] = LODWORD(v20.f64[0]);
  v29[30] = v26;
  v29[31].i32[0] = LODWORD(v20.f64[0]);
  v20.f64[0] = v22.f64[0] * (v25 * -2.0);
  v30 = v25 * (v25 * -2.0);
  v21.f64[0] = -1.0 - v30;
  v22.f64[0] = v22.f64[0] * (v25 + v25);
  v31 = 1.0 - v25 * (v25 + v25);
  v32 = -1.0 - v30 + v20.f64[0];
  v33 = v30 + 1.0;
  v34 = v30 + 1.0 + v20.f64[0];
  v35 = v31 + v20.f64[0];
  *(float *)v21.f64 = v21.f64[0] * 0.25;
  *(float *)v20.f64 = v20.f64[0] * 0.25;
  v29[2].i16[0] = (int)(float)((float)(*(float *)v21.f64 * 32768.0) + -0.5);
  v29[2].i16[1] = (int)(float)((float)(*(float *)v20.f64 * 32768.0) + -0.5);
  *(float *)&v31 = v31 * 0.25;
  v36 = (int)(float)((float)(*(float *)&v31 * 32768.0) + -0.5);
  *(float *)&v31 = v22.f64[0] * 0.25;
  v37 = (int)(float)((float)(*(float *)&v31 * 32768.0) + -0.5);
  v29[8].i16[0] = v36;
  v29[8].i16[1] = v37;
  *(float *)&v31 = v32 * 0.25;
  v38 = (int)(float)((float)(*(float *)&v31 * 32768.0) + -0.5);
  *(float *)&v31 = v34 * 0.25;
  v39 = (int)(float)((float)(*(float *)&v31 * 32768.0) + -0.5);
  v29[14].i16[0] = v38;
  v29[14].i16[1] = v39;
  v29[20].i16[0] = v36;
  v29[20].i16[1] = v37;
  *(float *)&v31 = v35 * 0.25;
  *(float *)&v33 = (v33 + v22.f64[0]) * 0.25;
  v29[26].i16[0] = (int)(float)((float)(*(float *)&v31 * 32768.0) + -0.5);
  v29[26].i16[1] = (int)(float)((float)(*(float *)&v33 * 32768.0) + -0.5);
  v40 = 6 * v28;
  v29[32].i16[0] = v38;
  v29[32].i16[1] = v39;
  if (v40)
  {
    v41 = v27[8];
    if (v41 <= v40)
      v41 = v40;
    v27[7] = 0;
    v27[8] = v41;
  }
  return *(double *)(v5 + 88 * v7) + (*(double *)(v5 + 88 * v7 + 8) - *(double *)(v5 + 88 * v7)) * v15;
}

md::RouteLineOverlay *md::RouteLineOverlay::RouteLineOverlay(md::RouteLineOverlay *this, VKPolylineOverlay *a2, char a3, double a4)
{
  VKPolylineOverlay *v6;
  __int128 v7;
  unsigned __int8 v8;
  gss::Allocator *v9;
  char *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unsigned __int8 v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  ggl::SinglePassRouteLine::BasePipelineSetup *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  id v118;
  void *v119;
  id v120;
  void *v121;
  VKRouteLine *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  void *v131;
  const GEOStyleAttributes *v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  _QWORD *v156;
  char *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 *v162;
  _OWORD *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  __int128 *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  void *v186;
  __int16 v187;
  __int16 v188;
  uint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  _OWORD *v200;
  char *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _OWORD *v216;
  __int128 *v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v222;
  unsigned __int8 v223;
  uint64_t v224;
  geo::read_write_lock *v225;
  const char *v226;
  malloc_zone_t *zone;
  uint64_t v228;
  geo::read_write_lock *v229;
  const char *v230;
  malloc_zone_t *v231;
  uint64_t v232;
  geo::read_write_lock *v233;
  const char *v234;
  malloc_zone_t *v235;
  int v236;
  uint64_t v237;
  geo::read_write_lock *v238;
  const char *v239;
  malloc_zone_t *v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  void *v244;
  id *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  unint64_t v249;
  __int128 v250;
  unint64_t v251;
  unint64_t v252;
  __int16 v253;
  uint64_t v254;

  v6 = a2;
  v243 = v6;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 17) = &off_1E42B4CF0;
  *((_QWORD *)this + 18) = 0;
  v7 = 0uLL;
  *((_OWORD *)this + 10) = 0u;
  v245 = (id *)((char *)this + 160);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_BYTE *)this + 208) = 1;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  if ((v8 & 1) == 0)
  {
    v7 = 0uLL;
    if ((_DWORD)v6)
    {
      v222 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v222, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = 0uLL;
    }
  }
  *((_QWORD *)this + 56) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 54) = (char *)this + 440;
  *((_OWORD *)this + 29) = v7;
  *((_OWORD *)this + 30) = v7;
  *((_DWORD *)this + 124) = 1065353216;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = -1;
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = 0;
  v9 = (gss::Allocator *)gss::Allocator::instance((gss::Allocator *)v6);
  *((_QWORD *)this + 70) = v9;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 74) = gss::Allocator::instance(v9);
  memset_pattern16((char *)this + 600, &unk_19FFB6380, 0x10uLL);
  *(_DWORD *)((char *)this + 619) = 0;
  *((_DWORD *)this + 154) = 0;
  *(_WORD *)((char *)this + 623) = 1;
  *((_BYTE *)this + 625) = a3;
  *((_BYTE *)this + 632) = 0;
  v10 = (char *)this + 640;
  *((_DWORD *)this + 208) = 0;
  *((_WORD *)this + 424) = 0;
  *((_DWORD *)this + 213) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  v248 = (char *)this + 656;
  v11 = operator new(0xA8uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42E5340;
  if ((v12 & 1) == 0
  {
    if ((v223 & 1) == 0
    {
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43E18 = 1;
  }
  v11[11] = 0;
  v13 = (char *)(v11 + 11);
  v11[7] = 0;
  v11[8] = 0;
  *((_DWORD *)v11 + 18) = 0;
  v11[3] = &off_1E42BBC08;
  v11[4] = "/AnimatedEndCap";
  v11[5] = &unk_1E42BBC28;
  v11[6] = 0;
  v11[10] = &ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
  v11[12] = 0;
  v11[13] = 0;
  {
    v224 = operator new();
    *(_QWORD *)(v224 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v224 + 24) = "GeoGL";
    *(_OWORD *)(v224 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v224 = &off_1E42B5668;
    *(_QWORD *)(v224 + 8) = "GeoGL";
    *(_OWORD *)(v224 + 72) = 0u;
    *(_OWORD *)(v224 + 88) = 0u;
    *(_OWORD *)(v224 + 104) = 0u;
    *(_OWORD *)(v224 + 120) = 0u;
    *(_OWORD *)(v224 + 136) = 0u;
    *(_OWORD *)(v224 + 152) = 0u;
    *(_OWORD *)(v224 + 168) = 0u;
    *(_OWORD *)(v224 + 184) = 0u;
    *(_OWORD *)(v224 + 200) = 0u;
    *(_OWORD *)(v224 + 216) = 0u;
    *(_OWORD *)(v224 + 232) = 0u;
    *(_QWORD *)(v224 + 248) = 0;
    *(_OWORD *)(v224 + 56) = 0u;
    v225 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v224 + 56), 0);
    if ((_DWORD)v225)
      geo::read_write_lock::logFailure(v225, (uint64_t)"initialization", v226);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v224 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v224 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v224;
  }
  v15 = ggl::Allocator::instance(void)::alloc;
  v11[18] = 0;
  v11[15] = 0;
  v11[16] = 0;
  v11[14] = v15;
  {
    v228 = operator new();
    *(_QWORD *)(v228 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v228 + 24) = "GeoGL";
    *(_OWORD *)(v228 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v228 = &off_1E42B5668;
    *(_QWORD *)(v228 + 8) = "GeoGL";
    *(_OWORD *)(v228 + 72) = 0u;
    *(_OWORD *)(v228 + 88) = 0u;
    *(_OWORD *)(v228 + 104) = 0u;
    *(_OWORD *)(v228 + 120) = 0u;
    *(_OWORD *)(v228 + 136) = 0u;
    *(_OWORD *)(v228 + 152) = 0u;
    *(_OWORD *)(v228 + 168) = 0u;
    *(_OWORD *)(v228 + 184) = 0u;
    *(_OWORD *)(v228 + 200) = 0u;
    *(_OWORD *)(v228 + 216) = 0u;
    *(_OWORD *)(v228 + 232) = 0u;
    *(_QWORD *)(v228 + 248) = 0;
    *(_OWORD *)(v228 + 56) = 0u;
    v229 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v228 + 56), 0);
    if ((_DWORD)v229)
      geo::read_write_lock::logFailure(v229, (uint64_t)"initialization", v230);
    v231 = malloc_create_zone(0, 0);
    *(_QWORD *)(v228 + 48) = v231;
    malloc_set_zone_name(v231, "GeoGL");
    *(_QWORD *)(v228 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v228;
  }
  v11[19] = ggl::Allocator::instance(void)::alloc;
  v11[20] = 0;
  v11[17] = v11 + 18;
  v11[3] = &off_1E42BE1B8;
  v11[5] = &unk_1E42BE1D8;
  v16 = v11[11];
  v17 = *(_QWORD *)(v11[10] + 8);
  v18 = v11[12];
  v19 = (v18 - v16) >> 4;
  v20 = v17 - v19;
  if (v17 <= v19)
  {
    if (v17 < v19)
    {
      v21 = v16 + 16 * v17;
      while (v18 != v21)
      {
        v22 = *(std::__shared_weak_count **)(v18 - 8);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v22->__on_zero_shared)(v22, v20);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v18 -= 16;
      }
      v11[12] = v21;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)(v11 + 11), v20);
  }
  v11[3] = &off_1E42BE3A8;
  v11[5] = &unk_1E42BE3C8;
  {
    v232 = operator new();
    *(_QWORD *)(v232 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v232 + 24) = "GeoGL";
    *(_OWORD *)(v232 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v232 = &off_1E42B5668;
    *(_QWORD *)(v232 + 8) = "GeoGL";
    *(_OWORD *)(v232 + 72) = 0u;
    *(_OWORD *)(v232 + 88) = 0u;
    *(_OWORD *)(v232 + 104) = 0u;
    *(_OWORD *)(v232 + 120) = 0u;
    *(_OWORD *)(v232 + 136) = 0u;
    *(_OWORD *)(v232 + 152) = 0u;
    *(_OWORD *)(v232 + 168) = 0u;
    *(_OWORD *)(v232 + 184) = 0u;
    *(_OWORD *)(v232 + 200) = 0u;
    *(_OWORD *)(v232 + 216) = 0u;
    *(_OWORD *)(v232 + 232) = 0u;
    *(_QWORD *)(v232 + 248) = 0;
    *(_OWORD *)(v232 + 56) = 0u;
    v233 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v232 + 56), 0);
    if ((_DWORD)v233)
      geo::read_write_lock::logFailure(v233, (uint64_t)"initialization", v234);
    v235 = malloc_create_zone(0, 0);
    *(_QWORD *)(v232 + 48) = v235;
    malloc_set_zone_name(v235, "GeoGL");
    *(_QWORD *)(v232 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v232;
  }
  v26 = ggl::Allocator::instance(void)::alloc;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v27 = &off_1E42E0800;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 32) = &off_1E42B5748;
  *(_QWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v27 + 24) = v26;
  *(_QWORD *)(v27 + 40) = 48;
  *(_DWORD *)(v27 + 48) = 6;
  v28 = 0uLL;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *(_QWORD *)(v27 + 120) = 0;
  if ((v29 & 1) == 0)
  {
    v28 = 0uLL;
    if (v236)
    {
      v237 = operator new();
      *(_QWORD *)(v237 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v237 + 24) = "GeoGL";
      *(_OWORD *)(v237 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v237 = &off_1E42B5668;
      *(_QWORD *)(v237 + 8) = "GeoGL";
      *(_OWORD *)(v237 + 72) = 0u;
      *(_OWORD *)(v237 + 88) = 0u;
      *(_OWORD *)(v237 + 104) = 0u;
      *(_OWORD *)(v237 + 120) = 0u;
      *(_OWORD *)(v237 + 136) = 0u;
      *(_OWORD *)(v237 + 152) = 0u;
      *(_OWORD *)(v237 + 168) = 0u;
      *(_OWORD *)(v237 + 184) = 0u;
      *(_OWORD *)(v237 + 200) = 0u;
      *(_OWORD *)(v237 + 216) = 0u;
      *(_OWORD *)(v237 + 232) = 0u;
      *(_QWORD *)(v237 + 248) = 0;
      *(_OWORD *)(v237 + 56) = 0u;
      v238 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v237 + 56), 0);
      if ((_DWORD)v238)
        geo::read_write_lock::logFailure(v238, (uint64_t)"initialization", v239);
      v240 = malloc_create_zone(0, 0);
      *(_QWORD *)(v237 + 48) = v240;
      malloc_set_zone_name(v240, "GeoGL");
      *(_QWORD *)(v237 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v237;
      v28 = 0uLL;
    }
  }
  *(_QWORD *)(v27 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v27 + 136) = 0;
  *(_OWORD *)(v27 + 200) = v28;
  *(_OWORD *)(v27 + 184) = v28;
  *(_OWORD *)(v27 + 168) = v28;
  *(_QWORD *)(v27 + 216) = 0;
  *(_QWORD *)(v27 + 224) = -1;
  *(_OWORD *)(v27 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v27 + 144) = 0;
  *(_QWORD *)(v27 + 32) = &off_1E42B8560;
  *(_QWORD *)(v27 + 240) = "/AnimatedEndCap";
  *(_QWORD *)(v27 + 248) = &ggl::RouteLine::defaultVboReflection;
  *(_QWORD *)(v27 + 232) = &unk_1E42B8580;
  v30 = *(_QWORD **)v13;
  v31 = *(std::__shared_weak_count **)(*(_QWORD *)v13 + 8);
  *v30 = v27 + 32;
  v30[1] = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  *((_QWORD *)this + 82) = v11 + 3;
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = v11;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = **(_QWORD **)(*(_QWORD *)v248 + 64);
  v38 = 6 * *(_QWORD *)(v37 + 8);
  v39 = *(_QWORD *)(v37 + 72);
  v40 = *(_QWORD *)(v37 + 80) - v39;
  if (v38 != v40)
  {
    if (v38 <= v40)
    {
      if (v38 < v40)
        *(_QWORD *)(v37 + 80) = v39 + v38;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v37 + 72, v38 - v40);
    }
    v41 = *(std::__shared_weak_count **)(v37 + 32);
    *(_QWORD *)(v37 + 24) = 0;
    *(_QWORD *)(v37 + 32) = 0;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    *(_QWORD *)(v37 + 120) = 0;
    *(_DWORD *)(v37 + 112) = 0;
    v44 = *(_QWORD *)(v37 + 80) - *(_QWORD *)(v37 + 72);
    *(_QWORD *)(v37 + 40) = 0;
    *(_QWORD *)(v37 + 48) = v44;
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)(v37 + 64) = v44;
    v37 = **(_QWORD **)(*(_QWORD *)v248 + 64);
  }
  v250 = 0uLL;
  v45 = 6 * *(_QWORD *)(v37 + 8);
  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v46 + 1) = v37;
  v47 = *(_QWORD *)(v37 + 72);
  v250 = v46;
  v251 = 0;
  v252 = v45;
  v254 = v47;
  v253 = 1;
  *(_DWORD *)(v47 + 8) = 0;
  *(_QWORD *)v47 = 0;
  *(_DWORD *)(v47 + 56) = 0;
  *(_QWORD *)(v47 + 48) = 0;
  *(_DWORD *)(v47 + 104) = 0;
  *(_QWORD *)(v47 + 96) = 0;
  *(_DWORD *)(v47 + 152) = 0;
  *(_QWORD *)(v47 + 144) = 0;
  *(_DWORD *)(v47 + 200) = 0;
  *(_QWORD *)(v47 + 192) = 0;
  *(_DWORD *)(v47 + 248) = 0;
  *(_QWORD *)(v47 + 240) = 0;
  *(_QWORD *)(v47 + 16) = 0x800000000000E000;
  *(_QWORD *)(v47 + 64) = 0x7FFF000000001FFFLL;
  *(_QWORD *)(v47 + 112) = 0x80007FFF1FFFE000;
  *(_QWORD *)(v47 + 160) = 0x7FFF000000001FFFLL;
  *(_QWORD *)(v47 + 208) = 0x7FFF7FFF1FFF1FFFLL;
  *(_QWORD *)(v47 + 256) = 0x80007FFF1FFFE000;
  *(_WORD *)(v47 + 36) = 771;
  v48 = v254;
  *(_DWORD *)(v254 + 32) = 0;
  *(_QWORD *)(v48 + 24) = 0x3FECCCCD00000000;
  *(_WORD *)(v48 + 84) = 771;
  *(_DWORD *)(v48 + 80) = 0;
  *(_QWORD *)(v48 + 72) = 0x3FECCCCD00000000;
  *(_WORD *)(v48 + 132) = 771;
  *(_DWORD *)(v48 + 128) = 0;
  *(_QWORD *)(v48 + 120) = 0x3FECCCCD00000000;
  *(_WORD *)(v48 + 180) = 771;
  *(_DWORD *)(v48 + 176) = 0;
  *(_QWORD *)(v48 + 168) = 0x3FECCCCD00000000;
  *(_WORD *)(v48 + 228) = 771;
  *(_DWORD *)(v48 + 224) = 0;
  *(_QWORD *)(v48 + 216) = 0x3FECCCCD00000000;
  *(_WORD *)(v48 + 276) = 771;
  *(_DWORD *)(v48 + 272) = 0;
  *(_QWORD *)(v48 + 264) = 0x3FECCCCD00000000;
  *((_QWORD *)this + 88) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_QWORD *)this + 93) = 0x3FF0000000000000;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_QWORD *)this + 98) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_QWORD *)this + 103) = 0x3FF0000000000000;
  v49 = (ggl::SinglePassRouteLine::BasePipelineSetup *)operator new();
  ggl::SinglePassRouteLine::BasePipelineSetup::BasePipelineSetup(v49);
  v50 = *(_QWORD *)v10;
  *(_QWORD *)v10 = v49;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v49 = *(ggl::SinglePassRouteLine::BasePipelineSetup **)v10;
  }
  v51 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v51->__shared_owners_ = 0;
  v52 = (unint64_t *)&v51->__shared_owners_;
  v51->__shared_weak_owners_ = 0;
  v51->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v53 = ggl::BufferData::BufferData((uint64_t)&v51[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v51[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v51[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v54 = (uint64_t *)*((_QWORD *)v49 + 8);
  *v54 = v53;
  v54[1] = 0;
  v55 = (uint64_t *)*((_QWORD *)v49 + 20);
  do
    v56 = __ldxr(v52);
  while (__stxr(v56 + 1, v52));
  v57 = (std::__shared_weak_count *)v55[1];
  *v55 = v53;
  v55[1] = (uint64_t)v51;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  do
    v60 = __ldaxr(v52);
  while (__stlxr(v60 - 1, v52));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  v61 = *(_QWORD *)v10;
  v62 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v62->__shared_owners_ = 0;
  v63 = (unint64_t *)&v62->__shared_owners_;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EC0;
  v64 = ggl::BufferData::BufferData((uint64_t)&v62[1], qword_1EE560190, 2, 1, 6, 1);
  v62[9].__shared_owners_ = (uint64_t)ggl::SinglePassRouteLine::Style::reflection(void)::reflection;
  v62[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9570;
  v65 = *(_QWORD *)(v61 + 64);
  *(_QWORD *)(v65 + 32) = v64;
  *(_QWORD *)(v65 + 40) = 0;
  v66 = *(_QWORD *)(v61 + 160);
  do
    v67 = __ldxr(v63);
  while (__stxr(v67 + 1, v63));
  v68 = *(std::__shared_weak_count **)(v66 + 40);
  *(_QWORD *)(v66 + 32) = v64;
  *(_QWORD *)(v66 + 40) = v62;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  do
    v71 = __ldaxr(v63);
  while (__stlxr(v71 - 1, v63));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  v72 = *(_QWORD *)v10;
  v73 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v73->__shared_owners_ = 0;
  v74 = (unint64_t *)&v73->__shared_owners_;
  v73->__shared_weak_owners_ = 0;
  v73->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v75 = ggl::BufferData::BufferData((uint64_t)&v73[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v73[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v73[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v76 = *(_QWORD *)(v72 + 64);
  *(_QWORD *)(v76 + 16) = v75;
  *(_QWORD *)(v76 + 24) = 0;
  v77 = *(_QWORD *)(v72 + 160);
  do
    v78 = __ldxr(v74);
  while (__stxr(v78 + 1, v74));
  v79 = *(std::__shared_weak_count **)(v77 + 24);
  *(_QWORD *)(v77 + 16) = v75;
  *(_QWORD *)(v77 + 24) = v73;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  do
    v82 = __ldaxr(v74);
  while (__stlxr(v82 - 1, v74));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  v83 = *(_QWORD *)v10;
  v84 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v84->__shared_owners_ = 0;
  v85 = (unint64_t *)&v84->__shared_owners_;
  v84->__shared_weak_owners_ = 0;
  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E88;
  v86 = ggl::BufferData::BufferData((uint64_t)&v84[1], qword_1EE5601F0, 2, 1, 6, 1);
  v84[9].__shared_owners_ = (uint64_t)ggl::SinglePassRouteLine::DrawAnimationDescription::reflection(void)::reflection;
  v84[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9550;
  v87 = *(_QWORD *)(v83 + 64);
  *(_QWORD *)(v87 + 64) = v86;
  *(_QWORD *)(v87 + 72) = 0;
  v88 = *(_QWORD *)(v83 + 160);
  do
    v89 = __ldxr(v85);
  while (__stxr(v89 + 1, v85));
  v90 = *(std::__shared_weak_count **)(v88 + 72);
  *(_QWORD *)(v88 + 64) = v86;
  *(_QWORD *)(v88 + 72) = v84;
  if (v90)
  {
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  do
    v93 = __ldaxr(v85);
  while (__stlxr(v93 - 1, v85));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  v94 = *(_QWORD *)v10;
  v95 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v95->__shared_owners_ = 0;
  v96 = (unint64_t *)&v95->__shared_owners_;
  v95->__shared_weak_owners_ = 0;
  v95->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E50;
  v97 = ggl::BufferData::BufferData((uint64_t)&v95[1], qword_1EE560250, 2, 1, 6, 1);
  v95[9].__shared_owners_ = (uint64_t)ggl::SinglePassRouteLine::ClipParams::reflection(void)::reflection;
  v95[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9530;
  v98 = *(_QWORD *)(v94 + 64);
  *(_QWORD *)(v98 + 48) = v97;
  *(_QWORD *)(v98 + 56) = 0;
  v99 = *(_QWORD *)(v94 + 160);
  do
    v100 = __ldxr(v96);
  while (__stxr(v100 + 1, v96));
  v101 = *(std::__shared_weak_count **)(v99 + 56);
  *(_QWORD *)(v99 + 48) = v97;
  *(_QWORD *)(v99 + 56) = v95;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  do
    v104 = __ldaxr(v96);
  while (__stlxr(v104 - 1, v96));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
  }
  v105 = *(_QWORD *)(*(_QWORD *)v10 + 64);
  v106 = *(_QWORD *)(v105 + 64);
  v107 = *(_QWORD *)(v106 + 8);
  **(_QWORD **)(v106 + 72) = 0x3F8000003F800000;
  v108 = *(_QWORD *)(v106 + 64);
  if (v108 <= v107)
    v108 = v107;
  if (v108 > v107)
    v107 = v108;
  *(_QWORD *)(v106 + 56) = 0;
  *(_QWORD *)(v106 + 64) = v107;
  v109 = *(_QWORD **)(v105 + 48);
  v110 = v109[1];
  v111 = v109[9];
  *(_DWORD *)v111 = 1065353216;
  *(_QWORD *)(v111 + 12) = 0;
  *(_QWORD *)(v111 + 4) = 0;
  *(_DWORD *)(v111 + 20) = 1065353216;
  *(_QWORD *)(v111 + 24) = 0;
  *(_QWORD *)(v111 + 32) = 0;
  *(_DWORD *)(v111 + 40) = 1065353216;
  *(_QWORD *)(v111 + 52) = 0;
  *(_QWORD *)(v111 + 44) = 0;
  *(_DWORD *)(v111 + 60) = 1065353216;
  if (v109[8] > v110)
    v110 = v109[8];
  v109[7] = 0;
  v109[8] = v110;
  v112 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v10 + 64) + 48);
  v113 = v112[1];
  if (!v113)
  {
    MEMORY[0x48] = 0;
    MEMORY[0x40] = 0;
    if (!v254)
      goto LABEL_119;
    goto LABEL_104;
  }
  v114 = v112[9];
  *(_QWORD *)(v114 + 64) = 0;
  *(_QWORD *)(v114 + 72) = 0;
  if (v112[8] > v113)
    v113 = v112[8];
  v112[7] = 0;
  v112[8] = v113;
  if (v254)
  {
LABEL_104:
    if (v252 != v251)
    {
      v115 = *((_QWORD *)&v250 + 1);
      if ((_QWORD)v250 && *(_BYTE *)(*((_QWORD *)&v250 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v250 + 64))();
      if ((_BYTE)v253 && !HIBYTE(v253))
      {
        v117 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 56);
        v116 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 64);
        if (v116 == v117)
          v117 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v250 + 1) + 72);
        if (v251 < v117)
          v117 = v251;
        if (v116 <= v252)
          v116 = v252;
        if (v116 == v117)
          v116 = v117 + *(_QWORD *)(*((_QWORD *)&v250 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v250 + 1) + 72);
        *(_QWORD *)(*((_QWORD *)&v250 + 1) + 56) = v117;
        *(_QWORD *)(v115 + 64) = v116;
      }
    }
  }
LABEL_119:
  *((_WORD *)this + 428) = 256;
  v118 = v243;
  v119 = v118;
  if (v118)
    v120 = v118;
  v121 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v119;

  v122 = -[VKRouteLine initWithPolylineOverlay:]([VKRouteLine alloc], "initWithPolylineOverlay:", v119);
  v123 = *v245;
  *v245 = v122;

  objc_msgSend(*v245, "setSimplificationEpsilonPoints:", 0.0);
  objc_msgSend(*((id *)this + 18), "setRouteRibbon:", *((_QWORD *)this + 20));
  md::TrafficStyleAttributes((gss::Allocator *)&v250, 1);
  v249 = v252;
  v124 = *((_QWORD *)&v250 + 1);
  v125 = v250;
  v126 = *((_QWORD *)&v250 + 1) - v250;
  if (*((_QWORD *)&v250 + 1) == (_QWORD)v250)
  {
    v128 = 0;
    v246 = 0;
    v130 = 0;
    if ((_QWORD)v250)
    {
LABEL_128:
      *((_QWORD *)&v250 + 1) = v125;
      (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v252 + 40))(v252, v125, v251 - v125);
    }
  }
  else
  {
    if (v126 < 0)
      abort();
    v127 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)v252 + 16))(v252, *((_QWORD *)&v250 + 1) - v250, 4);
    v128 = v127;
    v129 = 0;
    do
    {
      if (v127 + v129)
        *(_QWORD *)(v127 + v129) = *(_QWORD *)(v125 + v129);
      v129 += 8;
    }
    while (v125 + v129 != v124);
    v130 = (char *)(v127 + v129);
    v246 = v127 + 8 * (v126 >> 3);
    v125 = v250;
    if ((_QWORD)v250)
      goto LABEL_128;
  }
  objc_msgSend(v119, "composedRoute");
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v131, "styleAttributes");
  v132 = (const GEOStyleAttributes *)objc_claimAutoreleasedReturnValue();
  md::createFeatureAttributeSet((md *)&v250, v132);

  v133 = v250;
  v134 = *((_QWORD *)&v250 + 1) - v250;
  v242 = v252;
  if (*((_QWORD *)&v250 + 1) == (_QWORD)v250)
  {
    v138 = 0;
    v241 = 0;
    v136 = 0;
  }
  else
  {
    if (v134 < 0)
      abort();
    v135 = (*(uint64_t (**)(void))(*(_QWORD *)v252 + 16))();
    v136 = (char *)v135;
    v137 = 0;
    do
    {
      if (v135 + v137)
        *(_QWORD *)(v135 + v137) = *(_QWORD *)(v133 + v137);
      v137 += 8;
    }
    while ((_QWORD)v133 + v137 != *((_QWORD *)&v133 + 1));
    v138 = (char *)(v135 + v137);
    v241 = v135 + 8 * (v134 >> 3);
  }
  v139 = v138 - v136;
  v244 = v119;
  if (v138 - v136 < 1)
  {
    v148 = v128;
    v149 = v246;
    goto LABEL_196;
  }
  v140 = v139 >> 3;
  v141 = (unint64_t)&v130[-v128];
  v142 = (uint64_t)&v130[-v128] >> 3;
  v143 = (char *)(v128 + ((unint64_t)&v130[-v128] & 0xFFFFFFFFFFFFFFF8));
  if (v139 >> 3 > (v246 - (uint64_t)v130) >> 3)
  {
    v144 = v142 + v140;
    if ((unint64_t)(v142 + v140) >> 61)
      abort();
    v145 = v246 - v128;
    if ((v246 - v128) >> 2 > v144)
      v144 = (v246 - v128) >> 2;
    if (v145 >= 0x7FFFFFFFFFFFFFF8)
      v146 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v146 = v144;
    if (v146)
    {
      v147 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v249 + 16))(v249, 8 * v146, 4);
      v142 = (uint64_t)&v130[-v128] >> 3;
      v140 = v139 >> 3;
      v145 = v246 - v128;
    }
    else
    {
      v147 = 0;
    }
    v148 = v147 + 8 * v142;
    v154 = 8 * v140;
    v155 = (char *)(v148 + 8 * v140);
    v156 = (_QWORD *)v148;
    v157 = v136;
    do
    {
      if (v156)
        *v156 = *(_QWORD *)v157;
      ++v156;
      v157 += 8;
      v154 -= 8;
    }
    while (v154);
    if (v141 >= 8)
    {
      v158 = (v141 & 0xFFFFFFFFFFFFFFF8) - 8;
      if (v158 < 0x68)
      {
        v159 = (char *)(v128 + ((unint64_t)&v130[-v128] & 0xFFFFFFFFFFFFFFF8));
        do
        {
LABEL_169:
          v166 = *((_QWORD *)v159 - 1);
          v159 -= 8;
          *(_QWORD *)(v148 - 8) = v166;
          v148 -= 8;
        }
        while (v159 != (char *)v128);
        goto LABEL_170;
      }
      v159 = (char *)(v128 + ((unint64_t)&v130[-v128] & 0xFFFFFFFFFFFFFFF8));
      if ((unint64_t)(v128 - v147) < 0x20)
        goto LABEL_169;
      v160 = (v158 >> 3) + 1;
      v159 = &v143[-8 * (v160 & 0x3FFFFFFFFFFFFFFCLL)];
      v161 = 8 * v142 - 16;
      v162 = (__int128 *)(v128 + v161);
      v163 = (_OWORD *)(v147 + v161);
      v164 = v160 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v165 = *v162;
        *(v163 - 1) = *(v162 - 1);
        *v163 = v165;
        v162 -= 2;
        v163 -= 2;
        v164 -= 4;
      }
      while (v164);
      v148 -= 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
      if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_169;
    }
LABEL_170:
    if (v130 == v143)
    {
      v149 = v147 + 8 * v146;
    }
    else
    {
      v167 = (v141 & 0xFFFFFFFFFFFFFFF8) + v128;
      v168 = (unint64_t)&v130[-v167 - 8];
      if (v168 >= 0x68)
      {
        v169 = (v141 & 0xFFFFFFFFFFFFFFF8) + v147 + v139 - v167;
        v149 = v147 + 8 * v146;
        if (v169 >= 0x20)
        {
          v170 = (v168 >> 3) + 1;
          v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
          v143 += v171;
          v172 = (_OWORD *)(8 * v142 + 8 * v140 + v147 + 16);
          v173 = (__int128 *)(8 * v142 + v128 + 16);
          v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v175 = *v173;
            *(v172 - 1) = *(v173 - 1);
            *v172 = v175;
            v172 += 2;
            v173 += 2;
            v174 -= 4;
          }
          while (v174);
          v155 += v171;
          if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_180;
        }
      }
      else
      {
        v149 = v147 + 8 * v146;
      }
      do
      {
        v176 = *(_QWORD *)v143;
        v143 += 8;
        *(_QWORD *)v155 = v176;
        v155 += 8;
      }
      while (v143 != v130);
    }
    if (!v128)
    {
LABEL_181:
      v130 = v155;
      goto LABEL_196;
    }
LABEL_180:
    (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v249 + 40))(v249, v128, v145);
    goto LABEL_181;
  }
  v150 = (v130 - v143) >> 3;
  if (v150 >= v140)
  {
    v151 = &v136[8 * v140];
    v153 = v130;
    v149 = v246;
  }
  else
  {
    v151 = &v136[8 * v150];
    v149 = v246;
    if (v151 == v138)
    {
      v153 = v130;
    }
    else
    {
      v152 = v151;
      v153 = v130;
      do
      {
        if (v153)
          *(_QWORD *)v153 = *(_QWORD *)v152;
        v152 += 8;
        v153 += 8;
      }
      while (v152 != v138);
    }
    if (v130 - v143 < 1)
    {
      v148 = v128;
      v130 = v153;
      goto LABEL_196;
    }
  }
  v177 = &v143[8 * v140];
  v178 = &v153[-8 * v140];
  v179 = v153;
  if (v178 < v130)
  {
    v179 = v153;
    do
    {
      if (v179)
        *(_QWORD *)v179 = *(_QWORD *)v178;
      v178 += 8;
      v179 += 8;
    }
    while (v178 < v130);
  }
  if (v153 != v177)
  {
    v180 = (v153 - v177) >> 3;
    v181 = v153 - 4;
    v182 = 8 * v180;
    do
    {
      *((_DWORD *)v181 - 1) = *(_DWORD *)&v143[v182 - 8];
      *(_WORD *)v181 = *(_WORD *)&v143[v182 - 4];
      v181 -= 8;
      v182 -= 8;
    }
    while (v182);
  }
  if (v151 != v136)
  {
    v183 = 8 * v142;
    v184 = v136;
    do
    {
      v185 = v128 + v183;
      *(_DWORD *)v185 = *(_DWORD *)v184;
      *(_WORD *)(v185 + 4) = *((_WORD *)v184 + 2);
      v183 += 8;
      v184 += 8;
    }
    while (v184 != v151);
  }
  v148 = v128;
  v130 = v179;
LABEL_196:
  objc_msgSend(v244, "composedRoute");
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  v187 = objc_msgSend(v186, "transportType");
  v188 = v187;
  if ((unint64_t)v130 < v149)
  {
    v189 = (uint64_t *)((char *)this + 568);
    if (v130)
    {
      *(_DWORD *)v130 = 65552;
      *((_WORD *)v130 + 2) = v187;
    }
    v190 = (unint64_t)(v130 + 8);
    goto LABEL_223;
  }
  v191 = (uint64_t)&v130[-v148] >> 3;
  v192 = v191 + 1;
  if ((unint64_t)(v191 + 1) >> 61)
    abort();
  v193 = v149 - v148;
  if ((uint64_t)(v149 - v148) >> 2 > v192)
    v192 = (uint64_t)(v149 - v148) >> 2;
  if (v193 >= 0x7FFFFFFFFFFFFFF8)
    v194 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v194 = v192;
  if (v194)
  {
    v195 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v249 + 16))(v249, 8 * v194, 4);
    v196 = v195 + 8 * v191;
    v247 = v195 + 8 * v194;
    if (v195)
    {
      *(_DWORD *)v196 = 65552;
      *(_WORD *)(v196 + 4) = v188;
    }
  }
  else
  {
    v247 = 0;
    v196 = 8 * v191;
  }
  v189 = (uint64_t *)((char *)this + 568);
  v190 = v196 + 8;
  if (v130 != (char *)v148)
  {
    v197 = (unint64_t)&v130[-v148 - 8];
    if (v197 < 0x38)
    {
      v199 = v130;
    }
    else if ((unint64_t)&v130[-v196] < 0x20)
    {
      v199 = v130;
    }
    else
    {
      v198 = (v197 >> 3) + 1;
      v199 = &v130[-8 * (v198 & 0x3FFFFFFFFFFFFFFCLL)];
      v200 = (_OWORD *)(v196 - 16);
      v201 = v130 - 16;
      v202 = v198 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v203 = *(_OWORD *)v201;
        *(v200 - 1) = *((_OWORD *)v201 - 1);
        *v200 = v203;
        v200 -= 2;
        v201 -= 32;
        v202 -= 4;
      }
      while (v202);
      v196 -= 8 * (v198 & 0x3FFFFFFFFFFFFFFCLL);
      if (v198 == (v198 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_220;
    }
    do
    {
      v204 = *((_QWORD *)v199 - 1);
      v199 -= 8;
      *(_QWORD *)(v196 - 8) = v204;
      v196 -= 8;
    }
    while (v199 != (char *)v148);
  }
LABEL_220:
  if (v148)
    (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v249 + 40))(v249, v148, v193);
  v148 = v196;
  v149 = v247;
LABEL_223:

  if (v190 < v149)
  {
    *(_DWORD *)v190 = 65545;
    *(_WORD *)(v190 + 4) = 0;
    v205 = (_QWORD *)(v190 + 8);
    v206 = (uint64_t *)((char *)this + 536);
    goto LABEL_248;
  }
  v207 = (uint64_t)(v190 - v148) >> 3;
  v208 = v207 + 1;
  if ((unint64_t)(v207 + 1) >> 61)
    abort();
  v209 = v149 - v148;
  if ((uint64_t)(v149 - v148) >> 2 > v208)
    v208 = (uint64_t)(v149 - v148) >> 2;
  if (v209 >= 0x7FFFFFFFFFFFFFF8)
    v210 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v210 = v208;
  if (v210)
  {
    v211 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v249 + 16))(v249, 8 * v210, 4);
    v212 = v211 + 8 * v207;
    v149 = v211 + 8 * v210;
    if (v211)
    {
      *(_DWORD *)v212 = 65545;
      *(_WORD *)(v212 + 4) = 0;
    }
  }
  else
  {
    v149 = 0;
    v212 = 8 * v207;
  }
  v205 = (_QWORD *)(v212 + 8);
  if (v190 == v148)
  {
    v206 = (uint64_t *)((char *)this + 536);
  }
  else
  {
    v213 = v190 - v148 - 8;
    if (v213 < 0x38 || v190 - v212 < 0x20)
    {
      v215 = v190;
      v206 = (uint64_t *)((char *)this + 536);
    }
    else
    {
      v214 = (v213 >> 3) + 1;
      v215 = v190 - 8 * (v214 & 0x3FFFFFFFFFFFFFFCLL);
      v216 = (_OWORD *)(v212 - 16);
      v217 = (__int128 *)(v190 - 16);
      v218 = v214 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v219 = *v217;
        *(v216 - 1) = *(v217 - 1);
        *v216 = v219;
        v216 -= 2;
        v217 -= 2;
        v218 -= 4;
      }
      while (v218);
      v212 -= 8 * (v214 & 0x3FFFFFFFFFFFFFFCLL);
      v206 = (uint64_t *)((char *)this + 536);
      if (v214 == (v214 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_245;
    }
    do
    {
      v220 = *(_QWORD *)(v215 - 8);
      v215 -= 8;
      *(_QWORD *)(v212 - 8) = v220;
      v212 -= 8;
    }
    while (v215 != v148);
  }
LABEL_245:
  if (v148)
    (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v249 + 40))(v249, v148, v209);
  v148 = v212;
LABEL_248:
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v206, v148, v205, ((uint64_t)v205 - v148) >> 3);
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)v206);
  *((_WORD *)v205 - 2) = 2;
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v189, v148, v205, ((uint64_t)v205 - v148) >> 3);
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)v189);
  if (v136)
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)v242 + 40))(v242, v136, v241 - (_QWORD)v136);
  if ((_QWORD)v250)
  {
    *((_QWORD *)&v250 + 1) = v250;
    (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)v252 + 40))(v252, v250, v251 - v250);
  }
  if (v148)
    (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v249 + 40))(v249, v148, v149 - v148);

  return this;
}

void sub_19F5E7E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  if (v26)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, v26, a13 - v26);
  if (a21)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a24 + 40))(a24, a21, a23 - a21);
  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, v25, a19 - v25);
  md::RouteLineDrawAnimation::~RouteLineDrawAnimation(a11);
  v28 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v24 + 576) = v28;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 592) + 40))(*(_QWORD *)(v24 + 592), v28, *(_QWORD *)(v24 + 584) - v28);
  }
  v29 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v24 + 544) = v29;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 560) + 40))(*(_QWORD *)(v24 + 560), v29, *(_QWORD *)(v24 + 552) - v29);
  }
  geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr((_QWORD *)(v24 + 504));
  std::unordered_set<GEOComposedRouteSection * {__strong}>::~unordered_set[abi:nn180100](v24 + 464);
  std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(v24 + 432, *(_QWORD *)(v24 + 440));
  v30 = *(_QWORD *)(v24 + 424);
  *(_QWORD *)(v24 + 424) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v24 + 416));
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v24 + 408));
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v24 + 400));
  v31 = *(_QWORD *)(v24 + 392);
  *(_QWORD *)(v24 + 392) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v24 + 384));
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v24 + 376));
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v24 + 368));
  v32 = *(_QWORD *)(v24 + 360);
  *(_QWORD *)(v24 + 360) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD *)(v24 + 352);
  *(_QWORD *)(v24 + 352) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD **)(v24 + 344);
  *(_QWORD *)(v24 + 344) = 0;
  if (v34)
    std::default_delete<md::ManeuverPointSet>::operator()[abi:nn180100](v34);
  v35 = *(_QWORD *)(v24 + 336);
  *(_QWORD *)(v24 + 336) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(v24 + 328);
  *(_QWORD *)(v24 + 328) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(v24 + 320);
  *(_QWORD *)(v24 + 320) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  std::unique_ptr<md::RouteLineSharedResources>::~unique_ptr[abi:nn180100]((md::RouteLineSharedResources **)(v24 + 312));
  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100]((_QWORD *)(v24 + 288));
  v38 = *(_QWORD **)(v24 + 280);
  *(_QWORD *)(v24 + 280) = 0;
  if (v38)
    std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v38);
  v39 = *(_QWORD *)(v24 + 272);
  *(_QWORD *)(v24 + 272) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(v24 + 264);
  *(_QWORD *)(v24 + 264) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v24 + 248);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v24 + 232);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);

  *(_QWORD *)(v24 + 136) = &off_1E42B4CF0;
  _Unwind_Resume(a1);
}

void md::RouteLineDrawAnimation::~RouteLineDrawAnimation(id *this)
{
  id v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  id v6;
  id v7;

  v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)this[4];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = this[2];
  this[2] = 0;
  if (v6)
    (*(void (**)(id))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[1];
  this[1] = 0;
  if (v7)
    (*(void (**)(id))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t std::unordered_set<GEOComposedRouteSection * {__strong}>::~unordered_set[abi:nn180100](uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 48);
  }
  return result;
}

void std::default_delete<md::ManeuverPointSet>::operator()[abi:nn180100](_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4CF0;

  return a1;
}

void geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4CF0;

  JUMPOUT(0x1A1AF4E00);
}

void ggl::ImageCopy::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::ImageCopy::Pos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ImageCopy::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::ImageCopy::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ImageCopy::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::ImageCopy::Pos2DUVPipelineSetup *this)
{
  return 0;
}

BOOL ggl::ImageCopy::Pos2DUVPipelineSetup::textureIsEnabled(ggl::ImageCopy::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t md::LabelNavEtaLabeler::onRouteContextStateDidChange(uint64_t this, VKRouteContext *a2)
{
  if (a2)
    *(_BYTE *)(this + 253) = 1;
  return this;
}

uint64_t buildStringForRouteSet(_BYTE *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  unint64_t v33;
  void *__p[2];
  __int128 v35;
  int v36;
  uint64_t v37[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v37[0] = MEMORY[0x1E0DE4FE0] + 64;
  v29 = v7;
  *(uint64_t *)((char *)&v29 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v29 + *(_QWORD *)(v29 - 24));
  std::ios_base::init(v9, &v30);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v29 = v4 + 24;
  v37[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v30 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  v36 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v29, (uint64_t)"[", 1);
  v13 = (_QWORD *)*a2;
  v11 = a2 + 1;
  v12 = v13;
  if (v13 != v11)
  {
    do
    {
      v14 = (id)v12[4];
      std::ostream::operator<<();
      v15 = (_QWORD *)*v11;
      v16 = v11;
      if (*v11)
      {
        do
        {
          v17 = v15;
          v15 = (_QWORD *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v16[2];
          v18 = *v17 == (_QWORD)v16;
          v16 = v17;
        }
        while (v18);
      }
      if (v14 != (id)v17[4])
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v29, (uint64_t)", ", 2);

      v19 = (_QWORD *)v12[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v12[2];
          v18 = *v20 == (_QWORD)v12;
          v12 = v20;
        }
        while (!v18);
      }
      v12 = v20;
    }
    while (v20 != v11);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v29, (uint64_t)"]", 1);
  if ((v36 & 0x10) != 0)
  {
    v22 = *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1) < v33)
    {
      *((_QWORD *)&v35 + 1) = v33;
      v22 = v33;
    }
    v23 = (const void **)&v32;
  }
  else
  {
    if ((v36 & 8) == 0)
    {
      v21 = 0;
      a1[23] = 0;
      goto LABEL_31;
    }
    v23 = (const void **)v31;
    v22 = v31[2];
  }
  v24 = *v23;
  v21 = v22 - (_QWORD)*v23;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a1 + 1) = v21;
    *((_QWORD *)a1 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a1 = v27;
    a1 = v27;
    goto LABEL_30;
  }
  a1[23] = v21;
  if (v21)
LABEL_30:
    memmove(a1, v24, v21);
LABEL_31:
  a1[v21] = 0;
  v29 = *v6;
  *(uint64_t *)((char *)&v29 + *(_QWORD *)(v29 - 24)) = v6[3];
  v30 = v10 + 16;
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v37);
}

void sub_19F5E8990(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19F5E89B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(a2 + 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), v4, *(_QWORD *)(a2 + 56) - v4);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 72);
  }
  return result;
}

uint64_t md::RouteRangeAnnotationRequest::operator==(id *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *(id *)a2;
  if (v4 == v5)
    v6 = objc_msgSend(a1[1], "isEqual:", *(_QWORD *)(a2 + 8));
  else
    v6 = 0;

  return v6;
}

void sub_19F5E8AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::RouteRangeAnnotationRequest::to_string(md::RouteRangeAnnotationRequest *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  id v15;
  id v16;
  const char *v17;
  size_t v18;
  id v19;
  const char *v20;
  size_t v21;
  id v22;
  const char *v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  __CFString *v27;
  const char *v28;
  size_t v29;
  __CFString *v30;
  const char *v31;
  size_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  _QWORD *v39;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  const void **v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  md::RouteRangeAnnotationRequest *v47;
  uint64_t v49;
  __CFString *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  unint64_t v55;
  void *__p[2];
  __int128 v57;
  int v58;
  uint64_t v59[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v59[0] = MEMORY[0x1E0DE4FE0] + 64;
  v51 = v6;
  *(uint64_t *)((char *)&v51 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v51 + *(_QWORD *)(v51 - 24));
  std::ios_base::init(v8, &v52);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v51 = v4 + 24;
  v59[0] = v5;
  std::streambuf::basic_streambuf();
  v52 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v57 = 0u;
  v58 = 16;
  objc_msgSend(*(id *)(a2 + 8), "etaDescription");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "etaText");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_msgSend(*(id *)(a2 + 8), "etaDescription");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "etaText");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\\n"));
    v50 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v50 = &stru_1E4315B30;
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v51, (uint64_t)"{ route:", 8);
  v13 = objc_retainAutorelease(*(id *)a2);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", route.end:(", 13);
  v15 = *(id *)a2;
  objc_msgSend(v15, "endRouteCoordinate");
  GEOPolylineCoordinateAsFullString();
  v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v17 = (const char *)objc_msgSend(v16, "UTF8String");
  v18 = strlen(v17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"), annotation.start:(", 21);
  objc_msgSend(*(id *)(a2 + 8), "start");
  GEOPolylineCoordinateAsFullString();
  v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v20 = (const char *)objc_msgSend(v19, "UTF8String");
  v21 = strlen(v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"), annotation.end:(", 19);
  objc_msgSend(*(id *)(a2 + 8), "end");
  GEOPolylineCoordinateAsFullString();
  v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v23 = (const char *)objc_msgSend(v22, "UTF8String");
  v24 = strlen(v23);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"), annotation.type:", 19);
  objc_msgSend(*(id *)(a2 + 8), "etaDescription");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "routeEtaType");

  if (v26 > 6)
    v27 = CFSTR("VKRouteEtaUnknown");
  else
    v27 = (__CFString *)*((_QWORD *)&off_1E42EDF40 + v26);
  v28 = (const char *)-[__CFString UTF8String](v27, "UTF8String", v59);
  v29 = strlen(v28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v28, v29);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", annotation.text:\"", 19);
  v30 = objc_retainAutorelease(v50);
  v31 = (const char *)-[__CFString UTF8String](v30, "UTF8String");
  v32 = strlen(v31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v31, v32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"\", sections:", 12);
  v33 = *(_QWORD **)(a2 + 16);
  if (v33 != (_QWORD *)(a2 + 24))
  {
    v34 = 0;
    do
    {
      v35 = (_QWORD *)v33[1];
      v36 = v33;
      if (v35)
      {
        do
        {
          v37 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v36[2];
          v38 = *v37 == (_QWORD)v36;
          v36 = v37;
        }
        while (!v38);
      }
      v34 += (uint64_t)(v33[6] - v33[5]) >> 4;
      v33 = v37;
    }
    while (v37 != (_QWORD *)(a2 + 24));
  }
  v39 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)" }", 2);

  if ((v58 & 0x10) != 0)
  {
    v42 = *((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1) < v55)
    {
      *((_QWORD *)&v57 + 1) = v55;
      v42 = v55;
    }
    v43 = (const void **)&v54;
  }
  else
  {
    if ((v58 & 8) == 0)
    {
      v40 = 0;
      *((_BYTE *)this + 23) = 0;
      v41 = v49;
      goto LABEL_31;
    }
    v43 = (const void **)v53;
    v42 = v53[2];
  }
  v41 = v49;
  v44 = *v43;
  v40 = v42 - (_QWORD)*v43;
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v40 >= 0x17)
  {
    v45 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v45 = v40 | 7;
    v46 = v45 + 1;
    v47 = (md::RouteRangeAnnotationRequest *)operator new(v45 + 1);
    *((_QWORD *)this + 1) = v40;
    *((_QWORD *)this + 2) = v46 | 0x8000000000000000;
    *(_QWORD *)this = v47;
    this = v47;
    goto LABEL_30;
  }
  *((_BYTE *)this + 23) = v40;
  if (v40)
LABEL_30:
    memmove(this, v44, v40);
LABEL_31:
  *((_BYTE *)this + v40) = 0;

  v51 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v51 + *(_QWORD *)(v51 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v52 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v41);
}

void sub_19F5E8F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);

  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,mdm::Allocator>>::destroy(v3, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::linear_map::RouteLabelState,std::equal_to<md>,std::allocator<std::pair<md,md::RouteRangeAnnotationRequest>>,std::vector<std::allocator,std::pair<md,md::RouteRangeAnnotationRequest>>>>,0>((uint64_t)(a2 + 4));
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a2 + 40, *(_QWORD *)(a2 + 48));

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 72);
  }
  return result;
}

void std::default_delete<md::RouteSimplifier>::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 96));
  v2 = *(_QWORD **)(a1 + 64);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    operator delete(v3);
  std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*(_QWORD **)(a1 + 16));
  JUMPOUT(0x1A1AF4E00);
}

void std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*a1);
    std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }

    operator delete(a1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,GEOComposedRoute * const {__strong}::_retain_ptr<VKLabelNavRouteEta * {__strong},GEOComposedRoute * const {__strong}::_retain_objc_arc,GEOComposedRoute * const {__strong}::_release_objc_arc,GEOComposedRoute * const {__strong}::_hash_objc,GEOComposedRoute * const {__strong}::_equal_objc>,std::equal_to<md>,std::allocator<std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>,std::vector<std::allocator,std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>>>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        *(_QWORD *)(v3 - 24) = &off_1E42B4DD0;

        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v3 - 56, *(_QWORD *)(v3 - 48));
        v5 = *(void **)(v3 - 72);
        v3 -= 72;

      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }

}

uint64_t geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4DD0;

  return a1;
}

void geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4DD0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::linear_map::RouteLabelState,std::equal_to<md>,std::allocator<std::pair<md,md::RouteRangeAnnotationRequest>>,std::vector<std::allocator,std::pair<md,md::RouteRangeAnnotationRequest>>>>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      v5 = v3 - 384;
      do
      {
        md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)(v5 + 48));
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v5 + 16, *(_QWORD *)(v5 + 24));

        v6 = v5 == v2;
        v5 -= 384;
      }
      while (!v6);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }

}

void md::RouteLabelState::~RouteLabelState(md::RouteLabelState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;

  v2 = *((_QWORD *)this + 38);
  if (v2)
  {
    v3 = *((_QWORD *)this + 39);
    v4 = *((_QWORD *)this + 38);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD **)(v3 - 24);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = *(void **)(v3 - 40);
        *(_QWORD *)(v3 - 40) = 0;
        if (v7)
          operator delete(v7);
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 38);
    }
    *((_QWORD *)this + 39) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v4, *((_QWORD *)this + 40) - v4);
  }
  v8 = *((_QWORD *)this + 6);
  if (v8)
  {
    v9 = *((_QWORD *)this + 7);
    v10 = *((_QWORD *)this + 6);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v10, *((_QWORD *)this + 8) - v10);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 2);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v16)
    operator delete(v16);
}

uint64_t geo::_retain_ptr<LabelNavRouteContextObserverProxy * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5290;

  return a1;
}

void geo::_retain_ptr<LabelNavRouteContextObserverProxy * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5290;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelNavEtaLabeler::~LabelNavEtaLabeler(md::LabelNavEtaLabeler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void (***v21)(_QWORD, _QWORD);
  void (***v22)(_QWORD, _QWORD);
  uint64_t v23;
  void (***v24)(_QWORD, _QWORD);
  void (***v25)(_QWORD, _QWORD);
  void (**v26)(_QWORD, uint64_t);
  BOOL v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (char *)this + 576;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 672, *((_QWORD *)this + 85));
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 640, *((_QWORD *)this + 81));
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 608, *((_QWORD *)this + 77));
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)v2, *((_QWORD *)this + 73));
  v3 = *((_QWORD *)this + 69);
  if (v3)
  {
    v4 = *((_QWORD *)this + 70);
    v5 = (void *)*((_QWORD *)this + 69);
    if (v4 != v3)
    {
      do
      {
        if (*(_BYTE *)(v4 - 6))
          *(_BYTE *)(v4 - 6) = 0;
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v4 - 40, *(_QWORD *)(v4 - 32));

        v4 -= 56;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 69);
    }
    *((_QWORD *)this + 70) = v3;
    operator delete(v5);
  }
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 520, *((_QWORD *)this + 66));
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 488, *((_QWORD *)this + 62));
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,mdm::Allocator>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 416, *((_QWORD *)this + 53));
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 384, *((_QWORD *)this + 49));
  std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::destroy((uint64_t)this + 352, *((_QWORD *)this + 45));
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    v7 = *((_QWORD *)this + 41);
    v8 = *((_QWORD *)this + 40);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 8);
        v7 -= 8;

      }
      while (v7 != v6);
      v8 = *((_QWORD *)this + 40);
    }
    *((_QWORD *)this + 41) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), v8, *((_QWORD *)this + 42) - v8);
  }
  v10 = *((_QWORD *)this + 36);
  if (v10)
  {
    v11 = *((_QWORD *)this + 37);
    v12 = *((_QWORD *)this + 36);
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 8);
        v11 -= 8;

      }
      while (v11 != v10);
      v12 = *((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 37) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 39) + 40))(*((_QWORD *)this + 39), v12, *((_QWORD *)this + 38) - v12);
  }
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,mdm::Allocator>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  v14 = *((_QWORD *)this + 27);
  if (v14)
  {
    *((_QWORD *)this + 28) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 30) + 40))(*((_QWORD *)this + 30), v14, *((_QWORD *)this + 29) - v14);
  }
  v15 = *((_QWORD *)this + 23);
  if (v15)
  {
    v16 = *((_QWORD *)this + 24);
    v17 = *((_QWORD *)this + 23);
    if (v16 != v15)
    {
      do
      {
        v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v18->__on_zero_shared)(v18, v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 16;
      }
      while (v16 != v15);
      v17 = *((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v17, *((_QWORD *)this + 25) - v17);
  }
  v21 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 19);
  if (v21)
  {
    v22 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 20);
    v23 = *((_QWORD *)this + 19);
    if (v22 != v21)
    {
      v24 = v22 - 3;
      v25 = v22 - 3;
      do
      {
        v26 = *v25;
        v25 -= 3;
        (*v26)(v24, v23);
        v27 = v24 == v21;
        v24 = v25;
      }
      while (!v27);
      v23 = *((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), v23, *((_QWORD *)this + 21) - v23);
  }
  *((_QWORD *)this + 14) = &off_1E42B5290;

  v28 = (void *)*((_QWORD *)this + 10);
  if (v28)
  {
    *((_QWORD *)this + 11) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 7);
  if (v29)
  {
    *((_QWORD *)this + 8) = v29;
    operator delete(v29);
  }
  v30 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v30)
    std::default_delete<md::RouteSimplifier>::operator()[abi:nn180100](v30);
  v31 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  *((_QWORD *)this + 2) = &off_1E42B4B90;

}

void gatherRoutesFromContext(VKRouteContext *a1, void *a2)
{
  id v3;
  void *v4;
  objc_class *p_routeInfo;
  void *v6;
  void *v7;
  void *v8;
  Class isa;
  VKRouteInfo *routeInfo;
  VKRouteInfo *v11;
  VKRouteEtaDescription *etaDescription;
  VKRouteInfo *v13;
  VKRouteInfo *v14;
  VKRouteInfo **v15;
  VKRouteInfo **v16;
  unint64_t v17;
  objc_class *v18;
  NSString *obj;
  VKRouteEtaDescription *v20;
  VKRouteInfo *v21;
  VKRouteInfo **v22;
  VKRouteInfo **v23;
  unint64_t trafficAnnotations;
  uint64_t *v25;
  objc_class *v26;
  VKRouteEtaDescription *v27;
  NSString *i;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  uint64_t v34;
  VKRouteInfo *v35;
  VKRouteInfo **v36;
  VKRouteInfo **v37;
  unint64_t v38;
  uint64_t *v39;
  objc_class *v40;
  NSString *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  a1->_routeInfo = 0;
  p_routeInfo = (objc_class *)&a1->_routeInfo;
  *(_QWORD *)&a1->_useType = 0;
  a1->super.isa = (Class)&a1->_routeInfo;
  if (!v3)
    goto LABEL_67;
  objc_msgSend(v3, "routeInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "route");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!*(_QWORD *)&a1->_useType)
  {
    v21 = *(VKRouteInfo **)p_routeInfo;
    goto LABEL_30;
  }
  isa = a1->super.isa;
  routeInfo = a1->_routeInfo;
  a1->super.isa = p_routeInfo;
  routeInfo->_etaDescription = 0;
  *(_QWORD *)p_routeInfo = 0;
  *(_QWORD *)&a1->_useType = 0;
  if (*((_QWORD *)isa + 1))
    v11 = (VKRouteInfo *)*((_QWORD *)isa + 1);
  else
    v11 = (VKRouteInfo *)isa;
  if (!v11)
  {
    v21 = 0;
LABEL_30:
    v22 = &a1->_routeInfo;
    v23 = &a1->_routeInfo;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          v23 = (VKRouteInfo **)v21;
          trafficAnnotations = (unint64_t)v21->_trafficAnnotations;
          if ((unint64_t)v7 >= trafficAnnotations)
            break;
          v21 = *v23;
          v22 = v23;
          if (!*v23)
            goto LABEL_37;
        }
        if (trafficAnnotations >= (unint64_t)v7)
          break;
        v21 = v23[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_37;
        }
      }
    }
    else
    {
LABEL_37:
      v25 = (uint64_t *)operator new(0x28uLL);
      v25[4] = (uint64_t)v8;
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v23;
      *v22 = (VKRouteInfo *)v25;
      v26 = *(objc_class **)a1->super.isa;
      if (v26)
      {
        a1->super.isa = v26;
        v25 = (uint64_t *)*v22;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1->_routeInfo, v25);
      ++*(_QWORD *)&a1->_useType;
    }
    goto LABEL_48;
  }
  etaDescription = v11->_etaDescription;
  if (etaDescription)
  {
    v13 = (VKRouteInfo *)etaDescription->super.isa;
    if ((VKRouteInfo *)etaDescription->super.isa == v11)
    {
      etaDescription->super.isa = 0;
      while (1)
      {
        v27 = (VKRouteEtaDescription *)etaDescription->_etaText._vptr$_retain_ptr;
        if (!v27)
          break;
        do
        {
          etaDescription = v27;
          v27 = (VKRouteEtaDescription *)v27->super.isa;
        }
        while (v27);
      }
    }
    else
    {
      for (etaDescription->_etaText._vptr$_retain_ptr = 0;
            v13;
            v13 = (VKRouteInfo *)etaDescription->_etaText._vptr$_retain_ptr)
      {
        do
        {
          etaDescription = (VKRouteEtaDescription *)v13;
          v13 = (VKRouteInfo *)v13->super.isa;
        }
        while (v13);
      }
    }
  }
  v14 = *(VKRouteInfo **)p_routeInfo;
  v15 = &a1->_routeInfo;
  v16 = &a1->_routeInfo;
  if (*(_QWORD *)p_routeInfo)
  {
    while (1)
    {
      while (1)
      {
        v16 = (VKRouteInfo **)v14;
        v17 = (unint64_t)v14->_trafficAnnotations;
        if ((unint64_t)v7 >= v17)
          break;
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_19;
      }
      if (v17 >= (unint64_t)v7)
        break;
      v14 = v16[1];
      if (!v14)
      {
        v15 = v16 + 1;
        goto LABEL_19;
      }
    }
    std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(v11);
    if (!etaDescription)
      goto LABEL_48;
    goto LABEL_45;
  }
LABEL_19:
  objc_storeStrong((id *)&v11->_trafficAnnotations, v7);
  v11->super.isa = 0;
  v11->_route = 0;
  v11->_etaDescription = (VKRouteEtaDescription *)v16;
  *v15 = v11;
  v18 = *(objc_class **)a1->super.isa;
  if (v18)
  {
    a1->super.isa = v18;
    v11 = *v15;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1->_routeInfo, (uint64_t *)v11);
  ++*(_QWORD *)&a1->_useType;
  if (!etaDescription)
    goto LABEL_48;
  obj = etaDescription->_etaText._obj;
  if (obj)
  {
    v20 = (VKRouteEtaDescription *)obj->super.isa;
    if ((VKRouteEtaDescription *)obj->super.isa == etaDescription)
    {
      obj->super.isa = 0;
      while (1)
      {
        v41 = (NSString *)obj[1].super.isa;
        if (!v41)
          break;
        do
        {
          obj = v41;
          v41 = (NSString *)v41->super.isa;
        }
        while (v41);
      }
    }
    else
    {
      for (obj[1].super.isa = 0; v20; v20 = (VKRouteEtaDescription *)obj[1].super.isa)
      {
        do
        {
          obj = (NSString *)v20;
          v20 = (VKRouteEtaDescription *)v20->super.isa;
        }
        while (v20);
      }
    }
    std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(etaDescription);
    etaDescription = (VKRouteEtaDescription *)obj;
LABEL_45:
    for (i = etaDescription->_etaText._obj; i; i = (NSString *)i[2].super.isa)
      etaDescription = (VKRouteEtaDescription *)i;
  }
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(etaDescription);
LABEL_48:

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  objc_msgSend(v4, "alternateRoutes", 0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  if (v30)
  {
    v31 = *(_QWORD *)v43;
    do
    {
      for (j = 0; j != v30; ++j)
      {
        if (*(_QWORD *)v43 != v31)
          objc_enumerationMutation(v29);
        objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * j), "route");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = (uint64_t)v33;
        v35 = *(VKRouteInfo **)p_routeInfo;
        v36 = &a1->_routeInfo;
        v37 = &a1->_routeInfo;
        if (*(_QWORD *)p_routeInfo)
        {
          while (1)
          {
            while (1)
            {
              v37 = (VKRouteInfo **)v35;
              v38 = (unint64_t)v35->_trafficAnnotations;
              if ((unint64_t)v33 >= v38)
                break;
              v35 = *v37;
              v36 = v37;
              if (!*v37)
                goto LABEL_62;
            }
            if (v38 >= (unint64_t)v33)
              break;
            v35 = v37[1];
            if (!v35)
            {
              v36 = v37 + 1;
              goto LABEL_62;
            }
          }

        }
        else
        {
LABEL_62:
          v39 = (uint64_t *)operator new(0x28uLL);
          v39[4] = v34;
          *v39 = 0;
          v39[1] = 0;
          v39[2] = (uint64_t)v37;
          *v36 = (VKRouteInfo *)v39;
          v40 = *(objc_class **)a1->super.isa;
          if (v40)
          {
            a1->super.isa = v40;
            v39 = (uint64_t *)*v36;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1->_routeInfo, v39);
          ++*(_QWORD *)&a1->_useType;
        }
      }
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    }
    while (v30);
  }

LABEL_67:
}

void sub_19F5E9C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  _QWORD **v4;

  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*v4);
  _Unwind_Resume(a1);
}

uint64_t ****std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::insert_iterator<std::set<GEOComposedRoute * {__strong}>> &>(uint64_t ****result, uint64_t ****a2, uint64_t ****a3, uint64_t a4, _QWORD *a5, uint64_t ****a6)
{
  uint64_t ****v7;
  uint64_t ***v8;
  uint64_t ***v9;
  _QWORD *i;
  uint64_t *v15;
  unint64_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  uint64_t ***v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t ***v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t **v28;
  uint64_t ***v29;
  __int128 v30;

  v7 = result;
  v8 = *a2;
  v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_39:
    v27 = *(_OWORD *)a6;
    v9 = v8;
    goto LABEL_41;
  }
  for (i = *(_QWORD **)a4; *(_QWORD *)a4 != *a5; i = *(_QWORD **)a4)
  {
    v15 = (uint64_t *)v8[4];
    v16 = i[4];
    if ((unint64_t)v15 >= v16)
    {
      if (v16 >= (unint64_t)v15)
      {
        v23 = v8[1];
        if (v23)
        {
          do
          {
            v24 = (uint64_t ***)v23;
            v23 = (uint64_t **)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t ***)v8[2];
            v20 = *v24 == (uint64_t **)v8;
            v8 = v24;
          }
          while (!v20);
        }
        *a2 = v24;
        v25 = *(_QWORD **)a4;
        v26 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v26)
        {
          do
          {
            v22 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v25[2];
            v20 = *v22 == (_QWORD)v25;
            v25 = v22;
          }
          while (!v20);
        }
      }
      else
      {
        v21 = (_QWORD *)i[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)i[2];
            v20 = *v22 == (_QWORD)i;
            i = v22;
          }
          while (!v20);
        }
      }
      *(_QWORD *)a4 = v22;
    }
    else
    {
      result = std::insert_iterator<std::set<GEOComposedRoute * {__strong}>>::operator=[abi:nn180100](a6, v15);
      v17 = *a2;
      v18 = (*a2)[1];
      if (v18)
      {
        do
        {
          v19 = (uint64_t ***)v18;
          v18 = (uint64_t **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (uint64_t ***)v17[2];
          v20 = *v19 == (uint64_t **)v17;
          v17 = v19;
        }
        while (!v20);
      }
      *a2 = v19;
    }
    v8 = *a2;
    v9 = *a3;
    if (*a2 == *a3)
      goto LABEL_39;
  }
  v27 = *(_OWORD *)a6;
  v30 = *(_OWORD *)a6;
  if (v8 != v9)
  {
    do
    {
      result = std::insert_iterator<std::set<GEOComposedRoute * {__strong}>>::operator=[abi:nn180100]((uint64_t ****)&v30, (uint64_t *)v8[4]);
      v28 = v8[1];
      if (v28)
      {
        do
        {
          v29 = (uint64_t ***)v28;
          v28 = (uint64_t **)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t ***)v8[2];
          v20 = *v29 == (uint64_t **)v8;
          v8 = v29;
        }
        while (!v20);
      }
      v8 = v29;
    }
    while (v29 != v9);
    v27 = v30;
  }
LABEL_41:
  *v7 = v9;
  *(_OWORD *)(v7 + 1) = v27;
  return result;
}

void ___ZL36GEOGetVectorKitLabelNavEtaLabelerLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelNavEtaLabeler");
  v1 = (void *)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
  GEOGetVectorKitLabelNavEtaLabelerLog(void)::log = (uint64_t)v0;

}

uint64_t ****std::insert_iterator<std::set<GEOComposedRoute * {__strong}>>::operator=[abi:nn180100](uint64_t ****a1, uint64_t *a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = *a1;
  v5 = (uint64_t **)a1[1];
  v6 = (uint64_t **)(*a1 + 1);
  if (v6 != v5)
  {
    v7 = (unint64_t)v5[4];
    if (v7 <= (unint64_t)a2)
    {
      if (v7 >= (unint64_t)a2)
      {
        v16 = (uint64_t *)a1[1];
        goto LABEL_44;
      }
      v11 = v5 + 1;
      v12 = v5[1];
      if (v12)
      {
        do
        {
          v11 = (uint64_t **)v12;
          v12 = (uint64_t *)*v12;
          v5 = v11;
          v13 = v11;
        }
        while (v12);
      }
      else
      {
        v13 = (uint64_t **)a1[1];
        do
        {
          v19 = (uint64_t *)v13;
          v13 = (uint64_t **)v13[2];
        }
        while (*v13 != v19);
      }
      if (v13 == v6 || v13[4] > a2)
        goto LABEL_21;
      v20 = *v6;
      if (!*v6)
        goto LABEL_24;
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t **)v20;
          v21 = v20[4];
          if (v21 <= (unint64_t)a2)
            break;
          v20 = *v5;
          v6 = v5;
          if (!*v5)
            goto LABEL_41;
        }
        if (v21 >= (unint64_t)a2)
          break;
        v6 = v5 + 1;
        v20 = v5[1];
        if (!v20)
          goto LABEL_41;
      }
LABEL_50:
      v11 = v6;
      goto LABEL_21;
    }
  }
  v8 = *v5;
  if (*v4 == v5)
  {
    v10 = (uint64_t *)a1[1];
    goto LABEL_16;
  }
  if (v8)
  {
    v9 = *v5;
    do
    {
      v10 = v9;
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
  }
  else
  {
    v14 = (uint64_t *)a1[1];
    do
    {
      v10 = (uint64_t *)v14[2];
      v15 = *v10 == (_QWORD)v14;
      v14 = v10;
    }
    while (v15);
  }
  if (v10[4] < (unint64_t)a2)
  {
LABEL_16:
    v15 = v8 == 0;
    if (v8)
      v11 = (uint64_t **)(v10 + 1);
    else
      v11 = (uint64_t **)a1[1];
    if (!v15)
      v5 = (uint64_t **)v10;
LABEL_21:
    v16 = *v11;
    v6 = v11;
    if (*v11)
      goto LABEL_44;
    goto LABEL_41;
  }
  v17 = *v6;
  if (*v6)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v17;
        v18 = v17[4];
        if (v18 <= (unint64_t)a2)
          break;
        v17 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_41;
      }
      if (v18 >= (unint64_t)a2)
        goto LABEL_50;
      v6 = v5 + 1;
      v17 = v5[1];
      if (!v17)
        goto LABEL_41;
    }
  }
LABEL_24:
  v5 = (uint64_t **)(*a1 + 1);
LABEL_41:
  v16 = (uint64_t *)operator new(0x28uLL);
  v16[4] = (uint64_t)a2;
  *v16 = 0;
  v16[1] = 0;
  v16[2] = (uint64_t)v5;
  *v6 = v16;
  v22 = **v4;
  v23 = v16;
  if (v22)
  {
    *v4 = (uint64_t **)v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v23);
  v4[2] = (uint64_t **)((char *)v4[2] + 1);
LABEL_44:
  a1[1] = (uint64_t ***)v16;
  v24 = (uint64_t *)v16[1];
  if (v24)
  {
    do
    {
      v25 = v24;
      v24 = (uint64_t *)*v24;
    }
    while (v24);
  }
  else
  {
    do
    {
      v25 = (uint64_t *)v16[2];
      v15 = *v25 == (_QWORD)v16;
      v16 = v25;
    }
    while (!v15);
  }
  a1[1] = (uint64_t ***)v25;
  return a1;
}

void md::LabelNavEtaLabeler::recreateRouteCollider(md::LabelNavEtaLabeler *this, VKRouteContext *a2)
{
  VKRouteContext *v2;
  void *v3;
  void *v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char **v38;
  id *v39;
  char *v40;
  GEOComposedRoute *v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int i;
  id v55;
  void *v56;
  void *v57;
  unsigned int j;
  _WORD *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  char **v79;
  id *v80;
  char *v81;
  GEOComposedRoute *v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int k;
  id v96;
  void *v97;
  void *v98;
  unsigned int m;
  _WORD *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  char *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  int v124;
  double v125;
  id *v126;
  double *v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  id v130;
  id v131;
  _OWORD *v132;
  unsigned int v133;
  uint64_t v134;
  size_t v135;
  double *v136;
  uint64_t v137;
  double *v138;
  double *v139;
  double v140;
  __double2 v141;
  double v142;
  __double2 v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  unsigned int v152;
  std::__shared_weak_count_vtbl *shared_owners;
  std::__shared_weak_count_vtbl *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  size_t v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count_vtbl *v161;
  unint64_t v162;
  char *v163;
  char *v164;
  unint64_t v165;
  __int128 v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  _BYTE *v172;
  char v173;
  unsigned int *v174;
  unsigned int *v175;
  uint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  int32x4_t *v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t *v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t *v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t *v192;
  int32x4_t v193;
  int32x4_t v194;
  unsigned int v195;
  unsigned __int8 v196;
  char v197;
  unsigned __int8 v198;
  size_t v199;
  _BYTE *v200;
  _BYTE *shared_weak_owners;
  _BYTE *v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  unint64_t v207;
  _OWORD *v208;
  __int128 *v209;
  unint64_t v210;
  __int128 v211;
  unint64_t v212;
  char *v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char v218;
  char *v219;
  _BYTE *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  char *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  __int128 *v229;
  uint64_t v230;
  __int128 v231;
  int v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  unsigned int v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count_vtbl *v238;
  uint64_t v239;
  std::__shared_weak_count_vtbl *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  size_t v244;
  char *v245;
  char *v246;
  unint64_t v247;
  char *v248;
  const void *(__cdecl **p_get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v250;
  __int128 v251;
  unint64_t v252;
  _BYTE *v253;
  char *v254;
  uint64_t *v255;
  uint64_t v256;
  char *v257;
  char on_zero_shared_weak_high;
  std::__shared_weak_count_vtbl *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  _BYTE *v266;
  _DWORD *v267;
  unint64_t v268;
  uint64_t v269;
  _OWORD *v270;
  char *v271;
  uint64_t v272;
  __int128 v273;
  int v274;
  _QWORD *v275;
  id v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  char *v284;
  char *n;
  void *v286;
  VKRouteContext *v287;
  size_t v289;
  uint64_t v290;
  id *v291;
  _QWORD *v292;
  _QWORD *v293;
  double v294;
  char v295;
  unint64_t *v296;
  id *v297;
  id *v298;
  id *v299;
  char **v300;
  void *v301;
  void *__p;
  void *__pa;
  void *__pb;
  double *__pc;
  void *__pd;
  void *v307;
  GEOComposedRoute *v308;
  GEOComposedRoute *v309;
  uint64_t *v310;
  uint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  void *v319;
  char *v320;
  char *v321;
  __int128 v322;
  _BYTE v323[128];
  uint64_t v324;

  v324 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v319 = 0;
  v320 = 0;
  v321 = 0;
  v287 = v2;
  if (v2)
  {
    -[VKRouteContext routeInfo](v2, "routeInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      -[VKRouteContext routeInfo](v287, "routeInfo");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "route");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v5, "pointCount") < 2)
      {
        v7 = 0;
      }
      else
      {
        v6 = (char *)operator new(8uLL);
        *(_QWORD *)v6 = v5;
        v7 = v6 + 8;
        v320 = v6 + 8;
        v321 = v6 + 8;
        v319 = v6;
      }

    }
    else
    {
      v7 = 0;
    }
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    -[VKRouteContext alternateRoutes](v287, "alternateRoutes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v315, v323, 16);
    if (v9)
    {
      v10 = *(void **)v316;
      __p = *(void **)v316;
      v307 = v8;
      do
      {
        v11 = 0;
        v311 = v9;
        do
        {
          if (*(void **)v316 != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v315 + 1) + 8 * v11), "route");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v12, "pointCount") >= 2)
          {
            if (v7 < v321)
            {
              *(_QWORD *)v7 = v12;
              v13 = v7 + 8;
LABEL_38:
              v320 = v13;
              v7 = v13;
              goto LABEL_39;
            }
            v14 = (char *)v319;
            v15 = v7 - (_BYTE *)v319;
            v16 = (v7 - (_BYTE *)v319) >> 3;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              abort();
            v18 = v321 - (_BYTE *)v319;
            if ((v321 - (_BYTE *)v319) >> 2 > v17)
              v17 = v18 >> 2;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              if (v19 >> 61)
LABEL_466:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v20 = (char *)operator new(8 * v19);
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[8 * v16];
            v22 = &v20[8 * v19];
            *(_QWORD *)v21 = v12;
            v13 = v21 + 8;
            v23 = v7 - v14;
            if (v7 == v14)
            {
              v319 = &v20[8 * v16];
              v320 = v21 + 8;
              v321 = v22;
            }
            else
            {
              v24 = v23 - 8;
              if ((unint64_t)(v23 - 8) <= 0x77
                || (v25 = v24 >> 3, &v7[-8 * (v24 >> 3) - 8] < v21) && &v20[v15 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
              {
                v26 = v7;
                goto LABEL_32;
              }
              v30 = v25 + 1;
              v31 = (v25 + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v26 = &v7[-8 * v31];
              v32 = &v20[8 * v16 - 16];
              v33 = v7 - 32;
              v34 = v31;
              do
              {
                v36 = *(_OWORD *)v33;
                v35 = *((_OWORD *)v33 + 1);
                *(_OWORD *)v33 = 0uLL;
                *((_OWORD *)v33 + 1) = 0uLL;
                v33 -= 32;
                *((_OWORD *)v32 - 1) = v36;
                *(_OWORD *)v32 = v35;
                v32 -= 32;
                v34 -= 4;
              }
              while (v34);
              v21 -= 8 * v31;
              if (v30 != v31)
              {
                do
                {
LABEL_32:
                  v27 = *((_QWORD *)v26 - 1);
                  v26 -= 8;
                  *(_QWORD *)v26 = 0;
                  *((_QWORD *)v21 - 1) = v27;
                  v21 -= 8;
                }
                while (v26 != v14);
              }
              v7 = (char *)v319;
              v28 = v320;
              v319 = v21;
              v320 = v13;
              v321 = v22;
              if (v28 != v7)
              {
                v10 = __p;
                v8 = v307;
                v9 = v311;
                do
                {
                  v29 = (void *)*((_QWORD *)v28 - 1);
                  v28 -= 8;

                }
                while (v28 != v7);
                if (!v7)
                  goto LABEL_38;
LABEL_37:
                operator delete(v7);
                goto LABEL_38;
              }
            }
            v10 = __p;
            v8 = v307;
            v9 = v311;
            if (!v7)
              goto LABEL_38;
            goto LABEL_37;
          }
LABEL_39:

          ++v11;
        }
        while (v11 != v9);
        v37 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v315, v323, 16);
        v9 = v37;
      }
      while (v37);
    }

  }
  else
  {
    v7 = 0;
  }
  if (*((_BYTE *)this + 450))
  {
    v293 = (_QWORD *)operator new();
    *v293 = &off_1E429E7E8;
    v38 = (char **)operator new();
    *v38 = 0;
    v38[1] = 0;
    v300 = v38;
    v38[2] = 0;
    v39 = (id *)v319;
    if (v319 != v7)
    {
      do
      {
        if (*v39 && objc_msgSend(*v39, "pointCount"))
        {
          v40 = (char *)operator new(0xB0uLL);
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = 0;
          *(_QWORD *)v40 = &off_1E42DC5B8;
          v297 = v39;
          v41 = (GEOComposedRoute *)*v39;
          *((_OWORD *)v40 + 3) = 0u;
          *((_QWORD *)v40 + 3) = &off_1E42B4C30;
          __pa = v40 + 24;
          v308 = v41;
          *((_QWORD *)v40 + 4) = v41;
          v312 = v40 + 72;
          *((_QWORD *)v40 + 15) = 0;
          *((_QWORD *)v40 + 14) = 0;
          *((_OWORD *)v40 + 4) = 0u;
          *((_OWORD *)v40 + 5) = 0u;
          *((_QWORD *)v40 + 13) = v40 + 112;
          *((_OWORD *)v40 + 8) = xmmword_19FFB3C20;
          *((_QWORD *)v40 + 18) = 0;
          md::PointSource::PointSource((md::PointSource *)(v40 + 152), v41);
          -[GEOComposedRoute sections](v41, "sections");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = objc_msgSend(v42, "count");

          v44 = *((_QWORD *)v40 + 9);
          v45 = *((_QWORD *)v40 + 10);
          v46 = (v45 - v44) >> 3;
          if (v43 <= v46)
          {
            if (v43 < v46)
            {
              v47 = v44 + 8 * v43;
              while (v45 != v47)
              {
                v48 = *(void **)(v45 - 8);
                v45 -= 8;

              }
              *((_QWORD *)v40 + 10) = v47;
            }
          }
          else
          {
            std::vector<GEOComposedRouteSection * {__strong}>::__append(v312, v43 - v46);
          }
          if (-[GEOComposedRoute pointCount](v308, "pointCount"))
          {
            v49 = -[GEOComposedRoute pointCount](v308, "pointCount") - 1;
            v50 = *((_QWORD *)v40 + 6);
            v51 = (*((_QWORD *)v40 + 7) - v50) >> 2;
            if (v49 <= v51)
            {
              if (v49 < v51)
                *((_QWORD *)v40 + 7) = v50 + 4 * v49;
            }
            else
            {
              std::vector<md::PointSource::SegmentIndex>::__append((uint64_t)(v40 + 48), v49 - v51);
            }
          }
          if (v43)
          {
            v52 = 0;
            v53 = 0;
            for (i = 0; i < v43; v52 = ++i)
            {
              v55 = *((id *)v40 + 4);
              objc_msgSend(v55, "sections");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v56, "objectAtIndexedSubscript:", v52);
              v57 = (void *)objc_claimAutoreleasedReturnValue();

              objc_storeStrong((id *)(*v312 + 8 * v52), v57);
              for (j = 0; j < objc_msgSend(v57, "pointCount") - 1; ++j)
              {
                v59 = (_WORD *)(*((_QWORD *)v40 + 6) + 4 * (v53 + j));
                *v59 = i;
                v59[1] = j;
              }
              objc_msgSend(v57, "pointCount");

              v53 += j;
            }
          }
          md::RouteCollisionObject<md::GeocentricPointSource>::buildTopDownAABBTree((uint64_t)__pa, (char **)v40 + 12, *((int **)v40 + 6), *((int **)v40 + 7));

          *(_QWORD *)&v322 = v40 + 24;
          *((_QWORD *)&v322 + 1) = v40;
          v61 = v300[1];
          v60 = (unint64_t)v300[2];
          if ((unint64_t)v61 < v60)
          {
            *(_QWORD *)v61 = __pa;
            *((_QWORD *)v61 + 1) = v40;
            v300[1] = v61 + 16;
          }
          else
          {
            v62 = *v300;
            v63 = (v61 - *v300) >> 4;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 60)
              abort();
            v65 = v60 - (_QWORD)v62;
            if (v65 >> 3 > v64)
              v64 = v65 >> 3;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
              v66 = 0xFFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66 >> 60)
              goto LABEL_466;
            v67 = (char *)operator new(16 * v66);
            v68 = &v67[16 * v63];
            *(_OWORD *)v68 = v322;
            v69 = v68 + 16;
            v70 = &v67[16 * v66];
            v322 = 0uLL;
            if (v61 == v62)
            {
              *v300 = v68;
              v300[1] = v69;
              v300[2] = v70;
            }
            else
            {
              do
              {
                v71 = *((_OWORD *)v61 - 1);
                v61 -= 16;
                *((_OWORD *)v68 - 1) = v71;
                v68 -= 16;
                *(_QWORD *)v61 = 0;
                *((_QWORD *)v61 + 1) = 0;
              }
              while (v61 != v62);
              v61 = *v300;
              v72 = v300[1];
              *v300 = v68;
              v300[1] = v69;
              v300[2] = v70;
              while (v72 != v61)
              {
                v73 = (std::__shared_weak_count *)*((_QWORD *)v72 - 1);
                if (v73)
                {
                  p_shared_owners = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(p_shared_owners);
                  while (__stlxr(v75 - 1, p_shared_owners));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v72 -= 16;
              }
            }
            if (v61)
              operator delete(v61);
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
            v300[1] = v69;
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          v39 = v297;
        }
        ++v39;
      }
      while (v39 != (id *)v7);
    }
  }
  else
  {
    v293 = (_QWORD *)operator new();
    *v293 = &off_1E429B218;
    v79 = (char **)operator new();
    *v79 = 0;
    v79[1] = 0;
    v300 = v79;
    v79[2] = 0;
    v80 = (id *)v319;
    if (v319 != v7)
    {
      do
      {
        if (*v80 && objc_msgSend(*v80, "pointCount"))
        {
          v81 = (char *)operator new(0xB0uLL);
          *((_QWORD *)v81 + 1) = 0;
          *((_QWORD *)v81 + 2) = 0;
          *(_QWORD *)v81 = &off_1E42DC580;
          v298 = v80;
          v82 = (GEOComposedRoute *)*v80;
          *((_OWORD *)v81 + 3) = 0u;
          *((_QWORD *)v81 + 3) = &off_1E42B4C30;
          __pb = v81 + 24;
          v309 = v82;
          *((_QWORD *)v81 + 4) = v82;
          v313 = v81 + 72;
          *((_QWORD *)v81 + 15) = 0;
          *((_QWORD *)v81 + 14) = 0;
          *((_OWORD *)v81 + 4) = 0u;
          *((_OWORD *)v81 + 5) = 0u;
          *((_QWORD *)v81 + 13) = v81 + 112;
          *((_OWORD *)v81 + 8) = xmmword_19FFB3C30;
          *((_QWORD *)v81 + 18) = 0;
          md::PointSource::PointSource((md::PointSource *)(v81 + 152), v82);
          -[GEOComposedRoute sections](v82, "sections");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v84 = objc_msgSend(v83, "count");

          v85 = *((_QWORD *)v81 + 9);
          v86 = *((_QWORD *)v81 + 10);
          v87 = (v86 - v85) >> 3;
          if (v84 <= v87)
          {
            if (v84 < v87)
            {
              v88 = v85 + 8 * v84;
              while (v86 != v88)
              {
                v89 = *(void **)(v86 - 8);
                v86 -= 8;

              }
              *((_QWORD *)v81 + 10) = v88;
            }
          }
          else
          {
            std::vector<GEOComposedRouteSection * {__strong}>::__append(v313, v84 - v87);
          }
          if (-[GEOComposedRoute pointCount](v309, "pointCount"))
          {
            v90 = -[GEOComposedRoute pointCount](v309, "pointCount") - 1;
            v91 = *((_QWORD *)v81 + 6);
            v92 = (*((_QWORD *)v81 + 7) - v91) >> 2;
            if (v90 <= v92)
            {
              if (v90 < v92)
                *((_QWORD *)v81 + 7) = v91 + 4 * v90;
            }
            else
            {
              std::vector<md::PointSource::SegmentIndex>::__append((uint64_t)(v81 + 48), v90 - v92);
            }
          }
          if (v84)
          {
            v93 = 0;
            v94 = 0;
            for (k = 0; k < v84; v93 = ++k)
            {
              v96 = *((id *)v81 + 4);
              objc_msgSend(v96, "sections");
              v97 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v97, "objectAtIndexedSubscript:", v93);
              v98 = (void *)objc_claimAutoreleasedReturnValue();

              objc_storeStrong((id *)(*v313 + 8 * v93), v98);
              for (m = 0; m < objc_msgSend(v98, "pointCount") - 1; ++m)
              {
                v100 = (_WORD *)(*((_QWORD *)v81 + 6) + 4 * (v94 + m));
                *v100 = k;
                v100[1] = m;
              }
              objc_msgSend(v98, "pointCount");

              v94 += m;
            }
          }
          md::RouteCollisionObject<md::MercatorPointSource>::buildTopDownAABBTree((uint64_t)__pb, (char **)v81 + 12, *((int **)v81 + 6), *((int **)v81 + 7));

          *(_QWORD *)&v322 = v81 + 24;
          *((_QWORD *)&v322 + 1) = v81;
          v102 = v300[1];
          v101 = (unint64_t)v300[2];
          if ((unint64_t)v102 < v101)
          {
            *(_QWORD *)v102 = __pb;
            *((_QWORD *)v102 + 1) = v81;
            v300[1] = v102 + 16;
          }
          else
          {
            v103 = *v300;
            v104 = (v102 - *v300) >> 4;
            v105 = v104 + 1;
            if ((unint64_t)(v104 + 1) >> 60)
              abort();
            v106 = v101 - (_QWORD)v103;
            if (v106 >> 3 > v105)
              v105 = v106 >> 3;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
              v107 = 0xFFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            if (v107 >> 60)
              goto LABEL_466;
            v108 = (char *)operator new(16 * v107);
            v109 = &v108[16 * v104];
            *(_OWORD *)v109 = v322;
            v110 = v109 + 16;
            v111 = &v108[16 * v107];
            v322 = 0uLL;
            if (v102 == v103)
            {
              *v300 = v109;
              v300[1] = v110;
              v300[2] = v111;
            }
            else
            {
              do
              {
                v112 = *((_OWORD *)v102 - 1);
                v102 -= 16;
                *((_OWORD *)v109 - 1) = v112;
                v109 -= 16;
                *(_QWORD *)v102 = 0;
                *((_QWORD *)v102 + 1) = 0;
              }
              while (v102 != v103);
              v102 = *v300;
              v113 = v300[1];
              *v300 = v109;
              v300[1] = v110;
              v300[2] = v111;
              while (v113 != v102)
              {
                v114 = (std::__shared_weak_count *)*((_QWORD *)v113 - 1);
                if (v114)
                {
                  v115 = (unint64_t *)&v114->__shared_owners_;
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                v113 -= 16;
              }
            }
            if (v102)
              operator delete(v102);
            v117 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
            v300[1] = v110;
            if (v117)
            {
              v118 = (unint64_t *)&v117->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
          }
          v80 = v298;
        }
        ++v80;
      }
      while (v80 != (id *)v7);
    }
  }
  v293[1] = v300;
  v120 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v293;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = *((_QWORD *)this + 1);
  v122 = operator new();
  v123 = (uint64_t *)v122;
  v124 = *((unsigned __int8 *)this + 450);
  *(_QWORD *)(v122 + 16) = 0;
  *(_QWORD *)(v122 + 24) = 0;
  *(_QWORD *)v122 = v121;
  *(_QWORD *)(v122 + 8) = v122 + 16;
  v292 = (_QWORD *)(v122 + 16);
  *(_DWORD *)(v122 + 40) = 1065353216;
  *(_OWORD *)(v122 + 44) = 0u;
  *(_OWORD *)(v122 + 60) = 0u;
  *(_QWORD *)(v122 + 76) = 0x3F80000000000000;
  *(_QWORD *)(v122 + 104) = 0;
  *(_QWORD *)(v122 + 96) = 0;
  *(_QWORD *)(v122 + 88) = v122 + 96;
  v295 = v124;
  v125 = 0.0000000783927971;
  if (!v124)
    v125 = 1.0;
  v294 = v125;
  *(double *)(v122 + 32) = v125;
  v126 = (id *)v319;
  v291 = (id *)v320;
  if (v319 != v320)
  {
    v127 = (double *)MEMORY[0x1E0D266F8];
    v290 = v122;
    while (1)
    {
      v128 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v128->__shared_owners_ = 0;
      v128->__shared_weak_owners_ = 0;
      v128->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC510;
      v129 = *v123;
      v130 = *v126;
      v128[1].__vftable = 0;
      v314 = (uint64_t)&v128[1];
      v128[1].__shared_owners_ = 0;
      v128[1].__shared_weak_owners_ = 0;
      *(_OWORD *)&v128[2].__shared_owners_ = 0u;
      v310 = &v128[2].__shared_owners_;
      v128[3].std::__shared_count = 0u;
      *(_OWORD *)&v128[3].__shared_weak_owners_ = 0u;
      v128[4].__shared_owners_ = v129;
      v131 = v130;
      v128[5].__vftable = 0;
      v128[4].__shared_weak_owners_ = (uint64_t)v131;
      v128[5].__shared_owners_ = 0;
      v128[5].__shared_weak_owners_ = 0;
      v132 = operator new(0x104uLL);
      v128[5].__shared_owners_ = (uint64_t)v132 + 260;
      v128[5].__shared_weak_owners_ = (uint64_t)v132 + 260;
      *v132 = 0u;
      v132[1] = 0u;
      v132[2] = 0u;
      v132[3] = 0u;
      v132[4] = 0u;
      v132[5] = 0u;
      v132[6] = 0u;
      v132[7] = 0u;
      v132[8] = 0u;
      v132[9] = 0u;
      v132[10] = 0u;
      v132[11] = 0u;
      v132[12] = 0u;
      v132[13] = 0u;
      v132[14] = 0u;
      v132[15] = 0u;
      *((_DWORD *)v132 + 64) = 0;
      v128[5].__vftable = (std::__shared_weak_count_vtbl *)v132;
      *(double *)&v128[6].__vftable = v294;
      LOBYTE(v128[6].__shared_owners_) = v295;
      v133 = objc_msgSend(v131, "pointCount");
      v299 = v126;
      v301 = v131;
      v296 = (unint64_t *)&v128->__shared_owners_;
      if (v133)
      {
        v134 = v133;
        v135 = 3 * v133;
        v136 = (double *)operator new(v135 * 8);
        v137 = 0;
        v138 = &v136[v135];
        __pc = v136;
        v139 = v136 + 2;
        do
        {
          objc_msgSend((id)v128[4].__shared_weak_owners_, "pointAt:", v137);
          if (LOBYTE(v128[6].__shared_owners_))
          {
            v140 = v148 * 0.0174532925;
            v141 = __sincos_stret(v147 * 0.0174532925);
            v142 = 6378137.0 / sqrt(v141.__sinval * v141.__sinval * -0.00669437999 + 1.0);
            v143 = __sincos_stret(v140);
            v144 = v142 * v141.__cosval * v143.__cosval;
            v145 = v142 * v141.__cosval * v143.__sinval;
            v146 = v141.__sinval * 0.99330562 * v142;
          }
          else
          {
            GEOMapPointForCoordinate();
            v144 = v149 / *v127;
            v145 = 1.0 - v150 / v127[1];
            v146 = 0.0;
          }
          *(v139 - 2) = v144;
          *(v139 - 1) = v145;
          *v139 = v146;
          v139 += 3;
          ++v137;
        }
        while (v134 != v137);
        v151 = (uint64_t)__pc;
      }
      else
      {
        v151 = 0;
        v138 = 0;
      }
      v152 = -1431655765 * (((uint64_t)v138 - v151) >> 3);
      v154 = v128[1].__vftable;
      shared_owners = (std::__shared_weak_count_vtbl *)v128[1].__shared_owners_;
      v155 = (char *)shared_owners - (char *)v154;
      __pd = (void *)v151;
      if (v152 > (unint64_t)((char *)shared_owners - (char *)v154))
        break;
      if (v152 < (unint64_t)((char *)shared_owners - (char *)v154))
        v128[1].__shared_owners_ = (uint64_t)v154 + v152;
LABEL_199:
      **(_BYTE **)v314 = 0;
      *(_BYTE *)(*(_QWORD *)v314 + 1) = 0;
      memset((void *)(*(_QWORD *)v314 + 1), 255, v152 - 2);
      if (v152 >= 3)
        md::ProgressiveLodRibbon::dpSimplifyProgressive(v314, v151, 0, v152 - 1);
      v175 = (unsigned int *)v128[5].__vftable;
      v174 = (unsigned int *)v128[5].__shared_owners_;
      if (v175 != v174)
        bzero(v128[5].__vftable, ((char *)v174 - (char *)v175) & 0xFFFFFFFFFFFFFFFCLL);
      v177 = v128[1].__vftable;
      v176 = v128[1].__shared_owners_;
      LODWORD(v178) = v176 - (_DWORD)v177;
      if ((_DWORD)v176 != (_DWORD)v177)
      {
        v179 = 0;
        while (1)
        {
          v180 = *((unsigned __int8 *)&v177->~__shared_weak_count + v179);
          if (v180 <= 0x40)
          {
            if (v180 < 0x3A)
            {
              v181 = (65 - v180) & 0xFFFFFFFFFFFFFFF8;
              v182 = (int32x4_t *)&v175[v180];
              v183.i64[0] = 0x100000001;
              v183.i64[1] = 0x100000001;
              v184 = vaddq_s32(v182[1], v183);
              *v182 = vaddq_s32(*v182, v183);
              v182[1] = v184;
              if (v181 != 8)
              {
                v185 = vaddq_s32(v182[3], v183);
                v182[2] = vaddq_s32(v182[2], v183);
                v182[3] = v185;
                if (v181 != 16)
                {
                  v186 = (int32x4_t *)&v175[v180];
                  v187 = vaddq_s32(v186[5], v183);
                  v186[4] = vaddq_s32(v186[4], v183);
                  v186[5] = v187;
                  if (v181 != 24)
                  {
                    v188 = vaddq_s32(v186[7], v183);
                    v186[6] = vaddq_s32(v186[6], v183);
                    v186[7] = v188;
                    if (v181 != 32)
                    {
                      v189 = (int32x4_t *)&v175[v180];
                      v190 = vaddq_s32(v189[9], v183);
                      v189[8] = vaddq_s32(v189[8], v183);
                      v189[9] = v190;
                      if (v181 != 40)
                      {
                        v191 = vaddq_s32(v189[11], v183);
                        v189[10] = vaddq_s32(v189[10], v183);
                        v189[11] = v191;
                        if (v181 != 48)
                        {
                          v192 = (int32x4_t *)&v175[v180];
                          v193 = vaddq_s32(v192[13], v183);
                          v192[12] = vaddq_s32(v192[12], v183);
                          v192[13] = v193;
                          if (v181 != 56)
                          {
                            v194 = vaddq_s32(v192[15], v183);
                            v192[14] = vaddq_s32(v192[14], v183);
                            v192[15] = v194;
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (65 - v180 == v181)
                goto LABEL_205;
              v180 += v181;
            }
            do
              ++v175[v180++];
            while (v180 != 65);
          }
LABEL_205:
          if (++v179 == (_DWORD)v176 - (_DWORD)v177)
          {
            v178 = v176 - *(_QWORD *)v314;
            break;
          }
        }
      }
      v195 = (float)((float)v178 * 0.0625);
      if (*v175 <= v195)
      {
        if (v175[1] <= v195)
        {
          if (v175[2] <= v195)
          {
            if (v175[3] <= v195)
            {
              if (v175[4] <= v195)
              {
                if (v175[5] <= v195)
                {
                  if (v175[6] <= v195)
                  {
                    if (v175[7] <= v195)
                    {
                      if (v175[8] <= v195)
                      {
                        if (v175[9] <= v195)
                        {
                          if (v175[10] <= v195)
                          {
                            if (v175[11] <= v195)
                            {
                              if (v175[12] <= v195)
                              {
                                if (v175[13] <= v195)
                                {
                                  if (v175[14] <= v195)
                                  {
                                    if (v175[15] <= v195)
                                    {
                                      if (v175[16] <= v195)
                                      {
                                        if (v175[17] <= v195)
                                        {
                                          if (v175[18] <= v195)
                                          {
                                            if (v175[19] <= v195)
                                            {
                                              if (v175[20] <= v195)
                                              {
                                                if (v175[21] <= v195)
                                                {
                                                  if (v175[22] <= v195)
                                                  {
                                                    if (v175[23] <= v195)
                                                    {
                                                      if (v175[24] <= v195)
                                                      {
                                                        if (v175[25] <= v195)
                                                        {
                                                          if (v175[26] <= v195)
                                                          {
                                                            if (v175[27] <= v195)
                                                            {
                                                              if (v175[28] <= v195)
                                                              {
                                                                if (v175[29] <= v195)
                                                                {
                                                                  if (v175[30] <= v195)
                                                                  {
                                                                    if (v175[31] <= v195)
                                                                    {
                                                                      if (v175[32] <= v195)
                                                                      {
                                                                        if (v175[33] <= v195)
                                                                        {
                                                                          if (v175[34] <= v195)
                                                                          {
                                                                            if (v175[35] <= v195)
                                                                            {
                                                                              if (v175[36] <= v195)
                                                                              {
                                                                                if (v175[37] <= v195)
                                                                                {
                                                                                  if (v175[38] <= v195)
                                                                                  {
                                                                                    if (v175[39] <= v195)
                                                                                    {
                                                                                      if (v175[40] <= v195)
                                                                                      {
                                                                                        if (v175[41] <= v195)
                                                                                        {
                                                                                          if (v175[42] <= v195)
                                                                                          {
                                                                                            if (v175[43] <= v195)
                                                                                            {
                                                                                              if (v175[44] <= v195)
                                                                                              {
                                                                                                if (v175[45] <= v195)
                                                                                                {
                                                                                                  if (v175[46] <= v195)
                                                                                                  {
                                                                                                    if (v175[47] <= v195)
                                                                                                    {
                                                                                                      if (v175[48] <= v195)
                                                                                                      {
                                                                                                        if (v175[49] <= v195)
                                                                                                        {
                                                                                                          if (v175[50] <= v195)
                                                                                                          {
                                                                                                            if (v175[51] <= v195)
                                                                                                            {
                                                                                                              if (v175[52] <= v195)
                                                                                                              {
                                                                                                                if (v175[53] <= v195)
                                                                                                                {
                                                                                                                  if (v175[54] <= v195)
                                                                                                                  {
                                                                                                                    if (v175[55] <= v195)
                                                                                                                    {
                                                                                                                      if (v175[56] <= v195)
                                                                                                                      {
                                                                                                                        if (v175[57] <= v195)
                                                                                                                        {
                                                                                                                          if (v175[58] <= v195)
                                                                                                                          {
                                                                                                                            if (v175[59] <= v195)
                                                                                                                            {
                                                                                                                              if (v175[60] <= v195)
                                                                                                                              {
                                                                                                                                if (v175[61] <= v195)
                                                                                                                                {
                                                                                                                                  if (v175[62] <= v195)
                                                                                                                                  {
                                                                                                                                    if (v175[63] <= v195)
                                                                                                                                    {
                                                                                                                                      if (v175[64] > v195)
                                                                                                                                        v196 = 64;
                                                                                                                                      else
                                                                                                                                        v196 = 65;
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                      v196 = 63;
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  else
                                                                                                                                  {
                                                                                                                                    v196 = 62;
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                  v196 = 61;
                                                                                                                                }
                                                                                                                              }
                                                                                                                              else
                                                                                                                              {
                                                                                                                                v196 = 60;
                                                                                                                              }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v196 = 59;
                                                                                                                            }
                                                                                                                          }
                                                                                                                          else
                                                                                                                          {
                                                                                                                            v196 = 58;
                                                                                                                          }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          v196 = 57;
                                                                                                                        }
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        v196 = 56;
                                                                                                                      }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v196 = 55;
                                                                                                                    }
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    v196 = 54;
                                                                                                                  }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  v196 = 53;
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v196 = 52;
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v196 = 51;
                                                                                                            }
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            v196 = 50;
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          v196 = 49;
                                                                                                        }
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v196 = 48;
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v196 = 47;
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v196 = 46;
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v196 = 45;
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v196 = 44;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v196 = 43;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v196 = 42;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v196 = 41;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v196 = 40;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v196 = 39;
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v196 = 38;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  v196 = 37;
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                v196 = 36;
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              v196 = 35;
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            v196 = 34;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          v196 = 33;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v196 = 32;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v196 = 31;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v196 = 30;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v196 = 29;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                v196 = 28;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v196 = 27;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v196 = 26;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v196 = 25;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v196 = 24;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v196 = 23;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v196 = 22;
                                                  }
                                                }
                                                else
                                                {
                                                  v196 = 21;
                                                }
                                              }
                                              else
                                              {
                                                v196 = 20;
                                              }
                                            }
                                            else
                                            {
                                              v196 = 19;
                                            }
                                          }
                                          else
                                          {
                                            v196 = 18;
                                          }
                                        }
                                        else
                                        {
                                          v196 = 17;
                                        }
                                      }
                                      else
                                      {
                                        v196 = 16;
                                      }
                                    }
                                    else
                                    {
                                      v196 = 15;
                                    }
                                  }
                                  else
                                  {
                                    v196 = 14;
                                  }
                                }
                                else
                                {
                                  v196 = 13;
                                }
                              }
                              else
                              {
                                v196 = 12;
                              }
                            }
                            else
                            {
                              v196 = 11;
                            }
                          }
                          else
                          {
                            v196 = 10;
                          }
                        }
                        else
                        {
                          v196 = 9;
                        }
                      }
                      else
                      {
                        v196 = 8;
                      }
                    }
                    else
                    {
                      v196 = 7;
                    }
                  }
                  else
                  {
                    v196 = 6;
                  }
                }
                else
                {
                  v196 = 5;
                }
              }
              else
              {
                v196 = 4;
              }
            }
            else
            {
              v196 = 3;
            }
          }
          else
          {
            v196 = 2;
          }
        }
        else
        {
          v196 = 1;
        }
      }
      else
      {
        v196 = 0;
      }
      v197 = v196;
      if (v196 <= 1u)
        v197 = 1;
      v198 = v197 - 1;
      LOBYTE(v128[2].__vftable) = v198;
      v199 = v175[v198];
      v200 = (_BYTE *)v128[2].__shared_owners_;
      if ((char *)v128[3].__vftable - v200 < v199)
      {
        shared_weak_owners = (_BYTE *)v128[2].__shared_weak_owners_;
        v202 = operator new(v199);
        v203 = shared_weak_owners - v200;
        v204 = &v202[shared_weak_owners - v200];
        v205 = (uint64_t)v204;
        if (shared_weak_owners == v200)
          goto LABEL_372;
        v205 = (uint64_t)v202;
        if (v203 >= 8)
        {
          v206 = &v202[shared_weak_owners - v200];
          if ((unint64_t)(v200 - v202) < 0x20)
            goto LABEL_370;
          if (v203 >= 0x20)
          {
            v207 = v203 & 0xFFFFFFFFFFFFFFE0;
            v208 = &v202[v203 - 16];
            v209 = (__int128 *)(shared_weak_owners - 16);
            v210 = v203 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v211 = *v209;
              *(v208 - 1) = *(v209 - 1);
              *v208 = v211;
              v208 -= 2;
              v209 -= 2;
              v210 -= 32;
            }
            while (v210);
            if (v203 == v207)
              goto LABEL_372;
            if ((v203 & 0x18) == 0)
            {
              v206 = &v204[-v207];
              shared_weak_owners -= v207;
              goto LABEL_370;
            }
          }
          else
          {
            v207 = 0;
          }
          v212 = v207 - (v203 & 0xFFFFFFFFFFFFFFF8);
          v213 = &shared_weak_owners[-v207];
          v214 = &v202[&shared_weak_owners[-v207] - v200 - 8];
          v215 = v213 - 8;
          do
          {
            v216 = *(_QWORD *)v215;
            v215 -= 8;
            *v214-- = v216;
            v212 += 8;
          }
          while (v212);
          if (v203 != (v203 & 0xFFFFFFFFFFFFFFF8))
          {
            v206 = &v204[-(v203 & 0xFFFFFFFFFFFFFFF8)];
            shared_weak_owners -= v203 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_370;
          }
        }
        else
        {
          v206 = &v202[shared_weak_owners - v200];
LABEL_370:
          v217 = v206 - 1;
          do
          {
            v218 = *--shared_weak_owners;
            *v217-- = v218;
          }
          while (shared_weak_owners != v200);
        }
LABEL_372:
        v128[2].__shared_owners_ = v205;
        v128[2].__shared_weak_owners_ = (uint64_t)v204;
        v128[3].__vftable = (std::__shared_weak_count_vtbl *)&v202[v199];
        if (v200)
          operator delete(v200);
      }
      v219 = (char *)v128[3].__shared_owners_;
      if (v199 <= ((char *)v128[4].__vftable - v219) >> 2)
        goto LABEL_385;
      v220 = (_BYTE *)v128[3].__shared_weak_owners_;
      v221 = (char *)operator new(4 * v199);
      v222 = v220 - v219;
      v223 = &v221[(v220 - v219) & 0xFFFFFFFFFFFFFFFCLL];
      v224 = v223;
      if (v220 != v219)
      {
        v225 = v220 - v219 - 4;
        if (v225 < 0x2C)
        {
          v224 = &v221[(v220 - v219) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_382:
            v232 = *((_DWORD *)v220 - 1);
            v220 -= 4;
            *((_DWORD *)v224 - 1) = v232;
            v224 -= 4;
          }
          while (v220 != v219);
          goto LABEL_383;
        }
        v224 = &v221[(v220 - v219) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v220 - &v221[v222 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
          goto LABEL_382;
        v226 = v222 >> 2;
        v227 = (v225 >> 2) + 1;
        v228 = &v221[4 * v226 - 16];
        v229 = (__int128 *)(v220 - 16);
        v230 = v227 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v231 = *v229;
          *((_OWORD *)v228 - 1) = *(v229 - 1);
          *(_OWORD *)v228 = v231;
          v228 -= 32;
          v229 -= 2;
          v230 -= 8;
        }
        while (v230);
        v224 = &v223[-4 * (v227 & 0x7FFFFFFFFFFFFFF8)];
        v220 -= 4 * (v227 & 0x7FFFFFFFFFFFFFF8);
        if (v227 != (v227 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_382;
      }
LABEL_383:
      v128[3].__shared_owners_ = (uint64_t)v224;
      v128[3].__shared_weak_owners_ = (uint64_t)v223;
      v128[4].__vftable = (std::__shared_weak_count_vtbl *)&v221[4 * v199];
      if (v219)
        operator delete(v219);
LABEL_385:
      if ((_DWORD)v178)
      {
        v233 = 0;
        while (2)
        {
          v235 = *(_QWORD *)v314;
          v236 = *(unsigned __int8 *)(*(_QWORD *)v314 + v233);
          if (v236 > v196)
            goto LABEL_389;
          v238 = (std::__shared_weak_count_vtbl *)v128[2].__shared_weak_owners_;
          v237 = v128[3].__vftable;
          if (v238 < v237)
          {
            LOBYTE(v238->~__shared_weak_count) = v236;
            v239 = (uint64_t)&v238->~__shared_weak_count + 1;
            goto LABEL_423;
          }
          v240 = (std::__shared_weak_count_vtbl *)*v310;
          v241 = (unint64_t)v238 - *v310;
          v242 = v241 + 1;
          if ((uint64_t)(v241 + 1) < 0)
            goto LABEL_465;
          v243 = (char *)v237 - (char *)v240;
          if (2 * v243 > v242)
            v242 = 2 * v243;
          if (v243 >= 0x3FFFFFFFFFFFFFFFLL)
            v244 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v244 = v242;
          if (v244)
          {
            v245 = (char *)operator new(v244);
            LOBYTE(v236) = *(_BYTE *)(v235 + v233);
          }
          else
          {
            v245 = 0;
          }
          v246 = &v245[v241];
          v245[v241] = v236;
          v239 = (uint64_t)&v245[v241 + 1];
          if (v238 != v240)
          {
            if (v241 >= 8 && (unint64_t)((char *)v240 - v245) >= 0x20)
            {
              if (v241 >= 0x20)
              {
                v247 = v241 & 0xFFFFFFFFFFFFFFE0;
                v248 = &v245[v241 - 16];
                p_get_deleter = &v238[-1].__get_deleter;
                v250 = v241 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v251 = *(_OWORD *)p_get_deleter;
                  *((_OWORD *)v248 - 1) = *((_OWORD *)p_get_deleter - 1);
                  *(_OWORD *)v248 = v251;
                  v248 -= 32;
                  p_get_deleter -= 4;
                  v250 -= 32;
                }
                while (v250);
                if (v241 == v247)
                  goto LABEL_414;
                if ((v241 & 0x18) != 0)
                  goto LABEL_411;
                v246 -= v247;
                v238 = (std::__shared_weak_count_vtbl *)((char *)v238 - v247);
              }
              else
              {
                v247 = 0;
LABEL_411:
                v252 = v247 - (v241 & 0xFFFFFFFFFFFFFFF8);
                v253 = (char *)v238 - v247;
                v254 = &v245[(char *)v238 - v247 - (char *)v240 - 8];
                v255 = (uint64_t *)(v253 - 8);
                do
                {
                  v256 = *v255--;
                  *(_QWORD *)v254 = v256;
                  v254 -= 8;
                  v252 += 8;
                }
                while (v252);
                if (v241 == (v241 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_414:
                  v238 = v240;
                  goto LABEL_420;
                }
                v246 -= v241 & 0xFFFFFFFFFFFFFFF8;
                v238 = (std::__shared_weak_count_vtbl *)((char *)v238 - (v241 & 0xFFFFFFFFFFFFFFF8));
              }
            }
            v257 = v246 - 1;
            do
            {
              on_zero_shared_weak_high = HIBYTE(v238[-1].__on_zero_shared_weak);
              v238 = (std::__shared_weak_count_vtbl *)((char *)v238 - 1);
              *v257-- = on_zero_shared_weak_high;
            }
            while (v238 != v240);
            v238 = (std::__shared_weak_count_vtbl *)*v310;
LABEL_420:
            v246 = v245;
          }
          v128[2].__shared_owners_ = (uint64_t)v246;
          v128[2].__shared_weak_owners_ = v239;
          v128[3].__vftable = (std::__shared_weak_count_vtbl *)&v245[v244];
          if (v238)
            operator delete(v238);
LABEL_423:
          v128[2].__shared_weak_owners_ = v239;
          v260 = (char *)v128[3].__shared_weak_owners_;
          v259 = v128[4].__vftable;
          if (v260 < (char *)v259)
          {
            *(_DWORD *)v260 = v233;
            v234 = v260 + 4;
          }
          else
          {
            v261 = (char *)v128[3].__shared_owners_;
            v262 = (v260 - v261) >> 2;
            v263 = v262 + 1;
            if ((unint64_t)(v262 + 1) >> 62)
LABEL_465:
              abort();
            v264 = (char *)v259 - v261;
            if (v264 >> 1 > v263)
              v263 = v264 >> 1;
            if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFFCLL)
              v265 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v265 = v263;
            if (v265)
            {
              if (v265 >> 62)
                goto LABEL_466;
              v266 = operator new(4 * v265);
            }
            else
            {
              v266 = 0;
            }
            v267 = &v266[4 * v262];
            *v267 = v233;
            v234 = v267 + 1;
            if (v260 != v261)
            {
              v268 = v260 - 4 - v261;
              if (v268 < 0x2C)
                goto LABEL_472;
              if ((unint64_t)(v261 - v266) < 0x20)
                goto LABEL_472;
              v269 = (v268 >> 2) + 1;
              v270 = &v266[4 * v262 - 16];
              v271 = v260 - 16;
              v272 = v269 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v273 = *(_OWORD *)v271;
                *(v270 - 1) = *((_OWORD *)v271 - 1);
                *v270 = v273;
                v270 -= 2;
                v271 -= 32;
                v272 -= 8;
              }
              while (v272);
              v267 -= v269 & 0x7FFFFFFFFFFFFFF8;
              v260 -= 4 * (v269 & 0x7FFFFFFFFFFFFFF8);
              if (v269 != (v269 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_472:
                do
                {
                  v274 = *((_DWORD *)v260 - 1);
                  v260 -= 4;
                  *--v267 = v274;
                }
                while (v260 != v261);
              }
            }
            v128[3].__shared_owners_ = (uint64_t)v267;
            v128[3].__shared_weak_owners_ = (uint64_t)v234;
            v128[4].__vftable = (std::__shared_weak_count_vtbl *)&v266[4 * v265];
            if (v261)
              operator delete(v261);
          }
          v128[3].__shared_weak_owners_ = (uint64_t)v234;
LABEL_389:
          if (++v233 == v178)
            break;
          continue;
        }
      }
      if (__pd)
        operator delete(__pd);

      v123 = (uint64_t *)v290;
      v127 = (double *)MEMORY[0x1E0D266F8];
      v275 = operator new(0x38uLL);
      v276 = *v299;
      v275[4] = v276;
      v275[5] = v314;
      v275[6] = v128;
      v277 = v292;
      while (1)
      {
        v278 = (_QWORD *)*v277;
        v279 = v277;
        if (!*v277)
          break;
        while (1)
        {
          v277 = v278;
          v280 = v278[4];
          if ((unint64_t)v276 < v280)
            break;
          if (v280 >= (unint64_t)v276)
          {
            do
              v282 = __ldaxr(v296);
            while (__stlxr(v282 - 1, v296));
            if (!v282)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }

            operator delete(v275);
            goto LABEL_160;
          }
          v278 = (_QWORD *)v278[1];
          if (!v278)
          {
            v279 = v277 + 1;
            goto LABEL_451;
          }
        }
      }
LABEL_451:
      *v275 = 0;
      v275[1] = 0;
      v275[2] = v277;
      *v279 = v275;
      v281 = **(_QWORD **)(v290 + 8);
      if (v281)
      {
        *(_QWORD *)(v290 + 8) = v281;
        v275 = (_QWORD *)*v279;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v290 + 16), v275);
      ++*(_QWORD *)(v290 + 24);
LABEL_160:
      v126 = v299 + 1;
      if (v299 + 1 == v291)
        goto LABEL_457;
    }
    v156 = v128[1].__shared_weak_owners_;
    if (v156 - (uint64_t)shared_owners >= (unint64_t)v152 - ((char *)shared_owners - (char *)v154))
    {
      bzero(shared_owners, v152 - ((char *)shared_owners - (char *)v154));
      v128[1].__shared_owners_ = (uint64_t)v154 + v152;
      goto LABEL_199;
    }
    v157 = v156 - (_QWORD)v154;
    v158 = 2 * v157;
    if (2 * v157 <= v152)
      v158 = v152;
    if (v157 >= 0x3FFFFFFFFFFFFFFFLL)
      v159 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v159 = v158;
    v160 = (std::__shared_weak_count_vtbl *)operator new(v159);
    v289 = v159;
    v161 = (std::__shared_weak_count_vtbl *)((char *)v160 + v155);
    bzero((char *)v160 + v155, v152 - ((char *)shared_owners - (char *)v154));
    if (shared_owners == v154)
    {
      v151 = (uint64_t)__pd;
      goto LABEL_197;
    }
    v151 = (uint64_t)__pd;
    if (v155 < 8 || (unint64_t)((char *)v154 - (char *)v160) < 0x20)
      goto LABEL_194;
    if (v155 >= 0x20)
    {
      v162 = v155 & 0xFFFFFFFFFFFFFFE0;
      v163 = (char *)v160 + v155 - 16;
      v164 = (char *)&shared_owners[-1].__get_deleter;
      v165 = v155 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v166 = *(_OWORD *)v164;
        *((_OWORD *)v163 - 1) = *((_OWORD *)v164 - 1);
        *(_OWORD *)v163 = v166;
        v163 -= 32;
        v164 -= 32;
        v165 -= 32;
      }
      while (v165);
      if (v155 == v162)
        goto LABEL_196;
      if ((v155 & 0x18) == 0)
      {
        v161 = (std::__shared_weak_count_vtbl *)((char *)v161 - v162);
        shared_owners = (std::__shared_weak_count_vtbl *)((char *)shared_owners - v162);
        goto LABEL_194;
      }
    }
    else
    {
      v162 = 0;
    }
    v167 = v162 - (v155 & 0xFFFFFFFFFFFFFFF8);
    v168 = (char *)shared_owners - v162;
    v169 = (char *)v160 + (char *)shared_owners - v162 - (char *)v154 - 8;
    v170 = v168 - 8;
    do
    {
      v171 = *(_QWORD *)v170;
      v170 -= 8;
      *(_QWORD *)v169 = v171;
      v169 -= 8;
      v167 += 8;
    }
    while (v167);
    if (v155 == (v155 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_196;
    v161 = (std::__shared_weak_count_vtbl *)((char *)v161 - (v155 & 0xFFFFFFFFFFFFFFF8));
    shared_owners = (std::__shared_weak_count_vtbl *)((char *)shared_owners - (v155 & 0xFFFFFFFFFFFFFFF8));
LABEL_194:
    v172 = (char *)&v161[-1].__on_zero_shared_weak + 7;
    do
    {
      v173 = HIBYTE(shared_owners[-1].__on_zero_shared_weak);
      shared_owners = (std::__shared_weak_count_vtbl *)((char *)shared_owners - 1);
      *v172-- = v173;
    }
    while (shared_owners != v154);
LABEL_196:
    shared_owners = v154;
    v161 = v160;
LABEL_197:
    v128[1].__vftable = v161;
    v128[1].__shared_owners_ = (uint64_t)v160 + v152;
    v128[1].__shared_weak_owners_ = (uint64_t)v160 + v289;
    if (shared_owners)
      operator delete(shared_owners);
    goto LABEL_199;
  }
LABEL_457:
  v283 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v123;
  if (v283)
    std::default_delete<md::RouteSimplifier>::operator()[abi:nn180100](v283);
  v284 = (char *)v319;
  if (v319)
  {
    for (n = v320; n != v284; n -= 8)
    {
      v286 = (void *)*((_QWORD *)n - 1);

    }
    operator delete(v284);
  }

}

void sub_19F5EBD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,md::DynamicTrafficTileList *a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39)
{
  MEMORY[0x1A1AF4E00](a17, 0xA1C40BD48D6D6);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](&a36);

  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::prepareAnnotatableSectionsRoutes(md::LabelNavEtaLabeler *this)
{
  void *v2;
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t *v20;
  GEOComposedRoute *v21;
  uint64_t *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  int v28;
  void **v29;
  void **v30;
  void **v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  unint64_t v43;
  uint64_t *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t *v47;
  GEOComposedRoute *v48;
  uint64_t *v49;
  NSObject *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  void **v57;
  void **v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  md::LabelNavEtaLabeler *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void *__p[2];
  char v71;
  void *v72[2];
  char v73;
  _QWORD v74[6];
  int v75;
  uint8_t v76[128];
  uint8_t v77[4];
  void *v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  void **v82;
  __int16 v83;
  void **v84;
  __int128 buf;
  uint64_t v86;
  _QWORD *(*v87)(_QWORD *, _QWORD *);
  void (*v88)(uint64_t);
  const char *v89;
  _QWORD **v90;
  _QWORD *v91[5];

  v91[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 384, *((_QWORD *)this + 49));
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *((_QWORD *)this + 49) = 0;
  v64 = this;
  if (!*((_QWORD *)this + 3))
    return;
  if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
  v2 = (void *)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v3 = *((id *)this + 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v3;
    v4 = v2;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Updating annotatable sections for routes in routeContext:%p", (uint8_t *)&buf, 0xCu);

  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v86 = 0x4812000000;
  v87 = __Block_byref_object_copy__4519;
  v88 = __Block_byref_object_dispose__4520;
  v91[0] = 0;
  v91[1] = 0;
  v89 = "";
  v90 = v91;
  v5 = objc_msgSend(*((id *)this + 3), "totalRouteCount");
  if (v5)
  {
    v6 = 1;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = *((id *)v64 + 3);
      v74[0] = v7;
      v74[1] = 3221225472;
      v74[2] = ___ZN2md18LabelNavEtaLabeler32prepareAnnotatableSectionsRoutesEv_block_invoke;
      v74[3] = &unk_1E42EDF00;
      v75 = v6;
      v74[4] = &buf;
      v74[5] = v64;
      objc_msgSend(v8, "forEachSectionWithShareCount:dothis:", v6, v74);

      v6 = (v6 + 1);
    }
    while (v6 <= v5);
  }
  v9 = *((id *)v64 + 3);
  objc_msgSend(v9, "routeInfo");
  v62 = (void *)objc_claimAutoreleasedReturnValue();

  if (v62)
  {
    v10 = *((_QWORD *)&buf + 1);
    objc_msgSend(v62, "route");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (uint64_t)v11;
    v14 = (uint64_t **)(v10 + 56);
    v13 = *(uint64_t **)(v10 + 56);
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = v13[4];
          if ((unint64_t)v11 >= v16)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_17;
        }
        if (v16 >= (unint64_t)v11)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_17;
        }
      }

      v17 = (uint64_t *)v15;
    }
    else
    {
      v15 = (uint64_t **)(v10 + 56);
LABEL_17:
      v17 = (uint64_t *)operator new(0x48uLL);
      v17[6] = 0;
      v17[4] = v12;
      {
        v61 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v61, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v17[7] = mdm::Allocator::instance(void)::alloc;
      v17[8] = 0;
      v17[5] = (uint64_t)(v17 + 6);
      *v17 = 0;
      v17[1] = 0;
      v17[2] = (uint64_t)v15;
      *v14 = v17;
      v19 = **(_QWORD **)(v10 + 48);
      v20 = v17;
      if (v19)
      {
        *(_QWORD *)(v10 + 48) = v19;
        v20 = *v14;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 56), v20);
      ++*(_QWORD *)(v10 + 64);
    }
    objc_msgSend(v62, "route");
    v21 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
    v22 = md::LabelNavEtaLabeler::annotatableSectionsForRoute(v64, v21);

    if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
    v23 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      goto LABEL_33;
    objc_msgSend(v62, "route");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "route");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "endRouteCoordinate");
    GEOPolylineCoordinateAsFullString();
    v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v27 = objc_msgSend(v26, "UTF8String");
    buildStringForAnnotatableSections(v72, v17 + 5);
    v28 = v73;
    v29 = (void **)v72[0];
    buildStringForAnnotatableSections(__p, v22);
    v30 = v72;
    if (v28 < 0)
      v30 = v29;
    if (v71 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    *(_DWORD *)v77 = 134218754;
    v78 = v24;
    v79 = 2080;
    v80 = v27;
    v81 = 2080;
    v82 = v30;
    v83 = 2080;
    v84 = v31;
    _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_INFO, "main:%p end:(%s) shareSections:%s annotatableSections:%s", v77, 0x2Au);
    if (v71 < 0)
    {
      operator delete(__p[0]);
      if ((v73 & 0x80000000) == 0)
        goto LABEL_32;
    }
    else if ((v73 & 0x80000000) == 0)
    {
LABEL_32:

LABEL_33:
      goto LABEL_34;
    }
    operator delete(v72[0]);
    goto LABEL_32;
  }
LABEL_34:
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  objc_msgSend(*((id *)v64 + 3), "alternateRoutes");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
  if (v33)
  {
    v34 = *(_QWORD *)v67;
    do
    {
      v63 = v33;
      for (i = 0; i != v63; ++i)
      {
        if (*(_QWORD *)v67 != v34)
          objc_enumerationMutation(v32);
        v36 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * i);
        v37 = *((_QWORD *)&buf + 1);
        objc_msgSend(v36, "route");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = (uint64_t)v38;
        v41 = (uint64_t **)(v37 + 56);
        v40 = *(uint64_t **)(v37 + 56);
        if (v40)
        {
          while (1)
          {
            while (1)
            {
              v42 = (uint64_t **)v40;
              v43 = v40[4];
              if ((unint64_t)v38 >= v43)
                break;
              v40 = *v42;
              v41 = v42;
              if (!*v42)
                goto LABEL_46;
            }
            if (v43 >= (unint64_t)v38)
              break;
            v40 = v42[1];
            if (!v40)
            {
              v41 = v42 + 1;
              goto LABEL_46;
            }
          }

          v44 = (uint64_t *)v42;
        }
        else
        {
          v42 = (uint64_t **)(v37 + 56);
LABEL_46:
          v44 = (uint64_t *)operator new(0x48uLL);
          v44[6] = 0;
          v44[4] = v39;
          {
            v60 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v60, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v44[7] = mdm::Allocator::instance(void)::alloc;
          v44[8] = 0;
          v44[5] = (uint64_t)(v44 + 6);
          *v44 = 0;
          v44[1] = 0;
          v44[2] = (uint64_t)v42;
          *v41 = v44;
          v46 = **(_QWORD **)(v37 + 48);
          v47 = v44;
          if (v46)
          {
            *(_QWORD *)(v37 + 48) = v46;
            v47 = *v41;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v37 + 56), v47);
          ++*(_QWORD *)(v37 + 64);
        }
        objc_msgSend(v36, "route");
        v48 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
        v49 = md::LabelNavEtaLabeler::annotatableSectionsForRoute(v64, v48);

        if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
        v50 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v36, "route");
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "route");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "endRouteCoordinate");
          GEOPolylineCoordinateAsFullString();
          v52 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v53 = objc_msgSend(v52, "UTF8String");
          buildStringForAnnotatableSections(v72, v44 + 5);
          v54 = v34;
          v55 = v32;
          v56 = v73;
          v57 = (void **)v72[0];
          buildStringForAnnotatableSections(__p, v49);
          v58 = v72;
          if (v56 < 0)
            v58 = v57;
          v59 = __p;
          if (v71 < 0)
            v59 = (void **)__p[0];
          *(_DWORD *)v77 = 134218754;
          v78 = v65;
          v79 = 2080;
          v80 = v53;
          v81 = 2080;
          v82 = v58;
          v83 = 2080;
          v84 = v59;
          _os_log_impl(&dword_19F029000, v50, OS_LOG_TYPE_INFO, "alternate:%p end:(%s) shareSections:%s annotatableSections:%s", v77, 0x2Au);
          if (v71 < 0)
            operator delete(__p[0]);
          v32 = v55;
          if (v73 < 0)
            operator delete(v72[0]);

          v34 = v54;
        }

      }
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
    }
    while (v33);
  }

  _Block_object_dispose(&buf, 8);
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>>>::destroy(v91[0]);
}

void sub_19F5EC944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  if (a34 < 0)
    operator delete(__p);

  _Block_object_dispose((const void *)(v38 - 192), 8);
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>>>::destroy(*(_QWORD **)(v38 - 136));
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__4519(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__4520(uint64_t a1)
{
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>>>::destroy(*(_QWORD **)(a1 + 56));
}

void ___ZN2md18LabelNavEtaLabeler32prepareAnnotatableSectionsRoutesEv_block_invoke(uint64_t a1, id *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  id *v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t *v29;
  id *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t *v70;
  id *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  _DWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 48);
  if (v5 < 2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = -1;
    v9 = a2;
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      objc_msgSend(*v9, "route");
      v94 = (id)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v94, "expectedTime");

      if (v10 < v8)
      {
        objc_msgSend(*v9, "route");
        v95 = (id)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v95, "expectedTime");

        v7 = v6;
      }
      ++v6;
      v9 += 3;
      if (v5 == v6)
        goto LABEL_9;
    }
    v7 = v6;
  }
LABEL_9:
  v96 = a2[3 * v7];
  objc_msgSend(v96, "route");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  v13 = *(uint64_t **)(v4 + 392);
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        v15 = v13;
        v16 = v13[4];
        if (v11 >= v16)
          break;
        v13 = (uint64_t *)*v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_16;
      }
      if (v16 >= v11)
        break;
      v13 = (uint64_t *)v15[1];
      if (!v13)
      {
        v14 = v15 + 1;
        goto LABEL_16;
      }
    }
    v17 = (uint64_t)v15;
  }
  else
  {
    v14 = (uint64_t *)(v4 + 392);
    v15 = (uint64_t *)(v4 + 392);
LABEL_16:
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 400) + 16))(*(_QWORD *)(v4 + 400), 72, 8);
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 32) = v12;
    {
      v92 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v92, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v17 + 56) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 40) = v17 + 48;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = v15;
    *v14 = v17;
    v19 = **(_QWORD **)(v4 + 384);
    v20 = (uint64_t *)v17;
    if (v19)
    {
      *(_QWORD *)(v4 + 384) = v19;
      v20 = (uint64_t *)*v14;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 392), v20);
    v12 = 0;
    ++*(_QWORD *)(v4 + 408);
  }
  v22 = (uint64_t *)(v17 + 48);
  v21 = *(_QWORD *)(v17 + 48);
  if (v21)
  {
    v23 = *(_DWORD *)(a1 + 48);
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t *)v21;
        v25 = *(_DWORD *)(v21 + 32);
        if (v23 >= v25)
          break;
        v21 = *v24;
        v22 = v24;
        if (!*v24)
          goto LABEL_29;
      }
      if (v25 >= v23)
        break;
      v21 = v24[1];
      if (!v21)
      {
        v22 = v24 + 1;
        goto LABEL_29;
      }
    }
    v26 = (uint64_t)v24;
  }
  else
  {
    v24 = (uint64_t *)(v17 + 48);
LABEL_29:
    v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 56) + 16))(*(_QWORD *)(v17 + 56), 72, 8);
    *(_DWORD *)(v26 + 32) = *(_DWORD *)(a1 + 48);
    *(_QWORD *)(v26 + 48) = 0;
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 40) = 0;
    {
      v93 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v93, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v26 + 64) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = v24;
    *v22 = v26;
    v28 = **(_QWORD **)(v17 + 40);
    v29 = (uint64_t *)v26;
    if (v28)
    {
      *(_QWORD *)(v17 + 40) = v28;
      v29 = (uint64_t *)*v22;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v17 + 48), v29);
    ++*(_QWORD *)(v17 + 64);
  }
  v30 = &a2[3 * v7];
  v31 = *((_DWORD *)v30 + 2);
  v32 = *((_DWORD *)v30 + 3);
  v33 = *((_DWORD *)v30 + 4);
  v34 = *((_DWORD *)v30 + 5);
  v35 = *(_DWORD **)(v26 + 48);
  v36 = *(_QWORD *)(v26 + 56);
  if ((unint64_t)v35 >= v36)
  {
    v38 = *(_QWORD *)(v26 + 40);
    v39 = ((uint64_t)v35 - v38) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      abort();
    v41 = v36 - v38;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v26 + 64) + 16))(*(_QWORD *)(v26 + 64), 16 * v42, 4);
      v44 = (_DWORD *)(v43 + 16 * v39);
      v45 = v43 + 16 * v42;
      if (v43)
      {
        *v44 = v31;
        v44[1] = v32;
        v44[2] = v33;
        v44[3] = v34;
      }
    }
    else
    {
      v45 = 0;
      v44 = (_DWORD *)(16 * v39);
    }
    v37 = v44 + 4;
    v47 = *(_QWORD *)(v26 + 40);
    v46 = *(_QWORD *)(v26 + 48);
    if (v46 != v47)
    {
      do
      {
        *((_OWORD *)v44 - 1) = *(_OWORD *)(v46 - 16);
        v44 -= 4;
        v46 -= 16;
      }
      while (v46 != v47);
      v46 = *(_QWORD *)(v26 + 40);
    }
    *(_QWORD *)(v26 + 40) = v44;
    *(_QWORD *)(v26 + 48) = v37;
    v48 = *(_QWORD *)(v26 + 56);
    *(_QWORD *)(v26 + 56) = v45;
    if (v46)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v26 + 64) + 40))(*(_QWORD *)(v26 + 64), v46, v48 - v46);
  }
  else
  {
    if (v35)
    {
      *v35 = v31;
      v35[1] = v32;
      v35[2] = v33;
      v35[3] = v34;
    }
    v37 = v35 + 4;
  }
  *(_QWORD *)(v26 + 48) = v37;

  if (*(_DWORD *)(a1 + 48))
  {
    v49 = 0;
    do
    {
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      objc_msgSend(a2[3 * v49], "route");
      v52 = objc_claimAutoreleasedReturnValue();
      v53 = (void *)v52;
      v55 = (uint64_t **)(v51 + 56);
      v54 = *(uint64_t **)(v51 + 56);
      if (v54)
      {
        while (1)
        {
          while (1)
          {
            v56 = (uint64_t **)v54;
            v57 = v54[4];
            if (v52 >= v57)
              break;
            v54 = *v56;
            v55 = v56;
            if (!*v56)
              goto LABEL_64;
          }
          if (v57 >= v52)
            break;
          v54 = v56[1];
          if (!v54)
          {
            v55 = v56 + 1;
            goto LABEL_64;
          }
        }
        v58 = (uint64_t *)v56;
      }
      else
      {
        v56 = (uint64_t **)(v51 + 56);
LABEL_64:
        v58 = (uint64_t *)operator new(0x48uLL);
        v58[6] = 0;
        v58[4] = (uint64_t)v53;
        {
          v90 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v58[7] = mdm::Allocator::instance(void)::alloc;
        v58[8] = 0;
        v58[5] = (uint64_t)(v58 + 6);
        *v58 = 0;
        v58[1] = 0;
        v58[2] = (uint64_t)v56;
        *v55 = v58;
        v60 = **(_QWORD **)(v51 + 48);
        v61 = v58;
        if (v60)
        {
          *(_QWORD *)(v51 + 48) = v60;
          v61 = *v55;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v51 + 56), v61);
        v53 = 0;
        ++*(_QWORD *)(v51 + 64);
      }
      v63 = v58 + 6;
      v62 = v58[6];
      if (v62)
      {
        v64 = *(_DWORD *)(a1 + 48);
        while (1)
        {
          while (1)
          {
            v65 = (uint64_t *)v62;
            v66 = *(_DWORD *)(v62 + 32);
            if (v64 >= v66)
              break;
            v62 = *v65;
            v63 = v65;
            if (!*v65)
              goto LABEL_77;
          }
          if (v66 >= v64)
            break;
          v62 = v65[1];
          if (!v62)
          {
            v63 = v65 + 1;
            goto LABEL_77;
          }
        }
        v67 = (uint64_t)v65;
      }
      else
      {
        v65 = v58 + 6;
LABEL_77:
        v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58[7] + 16))(v58[7], 72, 8);
        *(_DWORD *)(v67 + 32) = *(_DWORD *)(a1 + 48);
        *(_QWORD *)(v67 + 48) = 0;
        *(_QWORD *)(v67 + 56) = 0;
        *(_QWORD *)(v67 + 40) = 0;
        {
          v91 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v91, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v67 + 64) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)v67 = 0;
        *(_QWORD *)(v67 + 8) = 0;
        *(_QWORD *)(v67 + 16) = v65;
        *v63 = v67;
        v69 = *(_QWORD *)v58[5];
        v70 = (uint64_t *)v67;
        if (v69)
        {
          v58[5] = v69;
          v70 = (uint64_t *)*v63;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v58[6], v70);
        ++v58[8];
      }
      v71 = &a2[3 * v49];
      v72 = *((_DWORD *)v71 + 2);
      v73 = *((_DWORD *)v71 + 3);
      v74 = *((_DWORD *)v71 + 4);
      v75 = *((_DWORD *)v71 + 5);
      v76 = *(_DWORD **)(v67 + 48);
      v77 = *(_QWORD *)(v67 + 56);
      if ((unint64_t)v76 >= v77)
      {
        v78 = *(_QWORD *)(v67 + 40);
        v79 = ((uint64_t)v76 - v78) >> 4;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60)
          abort();
        v81 = v77 - v78;
        if (v81 >> 3 > v80)
          v80 = v81 >> 3;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
        {
          v83 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v67 + 64) + 16))(*(_QWORD *)(v67 + 64), 16 * v82, 4);
          v84 = (_DWORD *)(v83 + 16 * v79);
          v85 = v83 + 16 * v82;
          if (v83)
          {
            *v84 = v72;
            v84[1] = v73;
            v84[2] = v74;
            v84[3] = v75;
          }
        }
        else
        {
          v85 = 0;
          v84 = (_DWORD *)(16 * v79);
        }
        v87 = *(_QWORD *)(v67 + 40);
        v86 = *(_QWORD *)(v67 + 48);
        v88 = v84;
        if (v86 != v87)
        {
          do
          {
            *((_OWORD *)v88 - 1) = *(_OWORD *)(v86 - 16);
            v88 -= 4;
            v86 -= 16;
          }
          while (v86 != v87);
          v86 = *(_QWORD *)(v67 + 40);
        }
        v50 = v84 + 4;
        *(_QWORD *)(v67 + 40) = v88;
        *(_QWORD *)(v67 + 48) = v84 + 4;
        v89 = *(_QWORD *)(v67 + 56);
        *(_QWORD *)(v67 + 56) = v85;
        if (v86)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v67 + 64) + 40))(*(_QWORD *)(v67 + 64), v86, v89 - v86);
      }
      else
      {
        if (v76)
        {
          *v76 = v72;
          v76[1] = v73;
          v76[2] = v74;
          v76[3] = v75;
        }
        v50 = v76 + 4;
      }
      *(_QWORD *)(v67 + 48) = v50;

      ++v49;
    }
    while (v49 < *(unsigned int *)(a1 + 48));
  }

}

void sub_19F5ED2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *md::LabelNavEtaLabeler::annotatableSectionsForRoute(md::LabelNavEtaLabeler *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  int v15;
  mdm::Allocator *v16;

  v3 = a2;
  if ((v4 & 1) == 0)
  {
    v16 = v3;
    v3 = v16;
    if (v15)
    {
      qword_1EE5776A8 = 0;
      qword_1EE5776B0 = mdm::Allocator::instance(v16);
      unk_1EE5776B8 = 0;
      md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty = (uint64_t)&qword_1EE5776A8;
      __cxa_atexit((void (*)(void *))std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::~map[abi:nn180100], &md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty, &dword_19F029000);
      v3 = v16;
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 49);
  if (v5)
  {
    v6 = (char *)this + 392;
    v7 = (char *)this + 392;
    do
    {
      v8 = v5[4];
      v9 = v8 >= (unint64_t)v3;
      if (v8 >= (unint64_t)v3)
        v10 = v5;
      else
        v10 = v5 + 1;
      if (v9)
        v7 = (char *)v5;
      v5 = (_QWORD *)*v10;
    }
    while (*v10);
    v11 = &md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty;
    if (v7 != v6)
    {
      v12 = *((_QWORD *)v7 + 4);
      v13 = (uint64_t *)(v7 + 40);
      if (v12 <= (unint64_t)v3)
        v11 = v13;
    }
  }
  else
  {
    v11 = &md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty;
  }

  return v11;
}

uint64_t buildStringForAnnotatableSections(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  uint64_t *v10;
  void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  const std::locale::facet *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  std::locale::__imp *p_b;
  uint64_t v26;
  uint64_t v27;
  void *locale;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  int v37;
  const std::locale::facet *v38;
  const char *v39;
  const char *v40;
  int64_t v41;
  int64_t v42;
  size_t v43;
  std::locale::__imp *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  int v54;
  const std::locale::facet *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  std::locale::__imp *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  const char *v68;
  int64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  int v73;
  const std::locale::facet *v74;
  const char *v75;
  const char *v76;
  int64_t v77;
  int64_t v78;
  size_t v79;
  std::locale::__imp *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  const std::locale::facet *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  std::locale::__imp *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  int v106;
  int v107;
  const std::locale::facet *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  std::locale::__imp *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  BOOL v123;
  unint64_t v124;
  const void **v125;
  const void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  uint64_t v139;
  unint64_t v140;
  void *__p[2];
  __int128 v142;
  int v143;
  uint64_t v144[19];
  _BYTE v145[16];
  std::locale __b;
  size_t v147;
  int64_t v148;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v144[0] = MEMORY[0x1E0DE4FE0] + 64;
  v136 = v6;
  *(uint64_t *)((char *)&v136 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24));
  std::ios_base::init(v8, &v137);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v136 = v4 + 24;
  v144[0] = v5;
  std::streambuf::basic_streambuf();
  v137 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v142 = 0u;
  v143 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v136, (uint64_t)"[\n", 2);
  v131 = a1;
  v9 = (_QWORD *)*a2;
  v132 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v14 = v9[5];
      v13 = v9[6];
      v133 = v13;
      v134 = v9;
      while (v14 != v13)
      {
        MEMORY[0x1A1AF49E0](v145, &v136);
        if (!v145[0])
          goto LABEL_39;
        v15 = (char *)&v136 + *(_QWORD *)(v136 - 24);
        v16 = *((_QWORD *)v15 + 5);
        v17 = *((_DWORD *)v15 + 2);
        v18 = *((_DWORD *)v15 + 36);
        if (v18 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)));
          v19 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v15 + 36) = v18;
        }
        if ((v17 & 0xB0) == 0x20)
          v20 = "";
        else
          v20 = "\t{ start:(";
        if (!v16)
          goto LABEL_38;
        v21 = *((_QWORD *)v15 + 3);
        v22 = v21 <= 10;
        v23 = v21 - 10;
        v24 = v22 ? 0 : v23;
        if (v20 - "\t{ start:(" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v16 + 96))(v16, "\t{ start:(", v20 - "\t{ start:(") != v20 - "\t{ start:(")
        {
          goto LABEL_38;
        }
        if (v24 >= 1)
        {
          if ((unint64_t)v24 >= 0x17)
          {
            v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v26 = v24 | 7;
            v27 = v26 + 1;
            p_b = (std::locale::__imp *)operator new(v26 + 1);
            v147 = v24;
            v148 = v27 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v148) = v24;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v18, v24);
          *((_BYTE *)p_b + v24) = 0;
          if (v148 >= 0)
            locale = &__b;
          else
            locale = __b.__locale_;
          v29 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v16 + 96))(v16, locale, v24);
          v30 = v29;
          if (SHIBYTE(v148) < 0)
          {
            operator delete(__b.__locale_);
            if (v30 != v24)
              goto LABEL_38;
          }
          else if (v29 != v24)
          {
            goto LABEL_38;
          }
        }
        v31 = "\t{ start:(" - v20 + 10;
        if (v31 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v16 + 96))(v16, v20, "\t{ start:(" - v20 + 10) == v31)
        {
          *((_QWORD *)v15 + 3) = 0;
          goto LABEL_39;
        }
LABEL_38:
        std::ios_base::clear((std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)), *(_DWORD *)((char *)&v138[1] + *(_QWORD *)(v136 - 24)) | 5);
LABEL_39:
        MEMORY[0x1A1AF49EC](v145);
        GEOPolylineCoordinateAsFullString();
        v135 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v32 = (const char *)objc_msgSend(v135, "UTF8String");
        v33 = strlen(v32);
        MEMORY[0x1A1AF49E0](v145, &v136);
        if (!v145[0])
          goto LABEL_69;
        v34 = (char *)&v136 + *(_QWORD *)(v136 - 24);
        v35 = *((_QWORD *)v34 + 5);
        v36 = *((_DWORD *)v34 + 2);
        v37 = *((_DWORD *)v34 + 36);
        if (v37 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)));
          v38 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v34 + 36) = v37;
        }
        v39 = &v32[v33];
        if ((v36 & 0xB0) == 0x20)
          v40 = &v32[v33];
        else
          v40 = v32;
        if (!v35)
          goto LABEL_68;
        v41 = *((_QWORD *)v34 + 3);
        v22 = v41 <= v33;
        v42 = v41 - v33;
        v43 = v22 ? 0 : v42;
        if (v40 - v32 >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v35 + 96))(v35, v32, v40 - v32) != v40 - v32)
        {
          goto LABEL_68;
        }
        if ((uint64_t)v43 >= 1)
        {
          if (v43 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v43 >= 0x17)
          {
            v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v43 | 7) != 0x17)
              v45 = v43 | 7;
            v46 = v45 + 1;
            v44 = (std::locale::__imp *)operator new(v45 + 1);
            v147 = v43;
            v148 = v46 | 0x8000000000000000;
            __b.__locale_ = v44;
          }
          else
          {
            HIBYTE(v148) = v43;
            v44 = (std::locale::__imp *)&__b;
          }
          memset(v44, v37, v43);
          *((_BYTE *)v44 + v43) = 0;
          if (v148 >= 0)
            v47 = &__b;
          else
            v47 = __b.__locale_;
          v48 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v35 + 96))(v35, v47, v43);
          v49 = v48;
          if (SHIBYTE(v148) < 0)
          {
            operator delete(__b.__locale_);
            if (v49 != v43)
              goto LABEL_68;
          }
          else if (v48 != v43)
          {
            goto LABEL_68;
          }
        }
        if (v39 - v40 < 1
          || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v35 + 96))(v35, v40, v39 - v40) == v39 - v40)
        {
          *((_QWORD *)v34 + 3) = 0;
          goto LABEL_69;
        }
LABEL_68:
        std::ios_base::clear((std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)), *(_DWORD *)((char *)&v138[1] + *(_QWORD *)(v136 - 24)) | 5);
LABEL_69:
        v50 = MEMORY[0x1A1AF49EC](v145);
        MEMORY[0x1A1AF49E0](v50, &v136);
        if (!v145[0])
          goto LABEL_98;
        v51 = (char *)&v136 + *(_QWORD *)(v136 - 24);
        v52 = *((_QWORD *)v51 + 5);
        v53 = *((_DWORD *)v51 + 2);
        v54 = *((_DWORD *)v51 + 36);
        if (v54 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)));
          v55 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v51 + 36) = v54;
        }
        if ((v53 & 0xB0) == 0x20)
          v56 = "";
        else
          v56 = "), end:(";
        if (!v52)
          goto LABEL_97;
        v57 = *((_QWORD *)v51 + 3);
        v22 = v57 <= 8;
        v58 = v57 - 8;
        v59 = v22 ? 0 : v58;
        if (v56 - "), end:(" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v52 + 96))(v52, "), end:(", v56 - "), end:(") != v56 - "), end:(")
        {
          goto LABEL_97;
        }
        if (v59 >= 1)
        {
          if ((unint64_t)v59 >= 0x17)
          {
            v61 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v59 | 7) != 0x17)
              v61 = v59 | 7;
            v62 = v61 + 1;
            v60 = (std::locale::__imp *)operator new(v61 + 1);
            v147 = v59;
            v148 = v62 | 0x8000000000000000;
            __b.__locale_ = v60;
          }
          else
          {
            HIBYTE(v148) = v59;
            v60 = (std::locale::__imp *)&__b;
          }
          memset(v60, v54, v59);
          *((_BYTE *)v60 + v59) = 0;
          if (v148 >= 0)
            v63 = &__b;
          else
            v63 = __b.__locale_;
          v64 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v52 + 96))(v52, v63, v59);
          v65 = v64;
          if (SHIBYTE(v148) < 0)
          {
            operator delete(__b.__locale_);
            if (v65 != v59)
              goto LABEL_97;
          }
          else if (v64 != v59)
          {
            goto LABEL_97;
          }
        }
        v66 = "), end:(" - v56 + 8;
        if (v66 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v52 + 96))(v52, v56, "), end:(" - v56 + 8) == v66)
        {
          *((_QWORD *)v51 + 3) = 0;
          goto LABEL_98;
        }
LABEL_97:
        std::ios_base::clear((std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)), *(_DWORD *)((char *)&v138[1] + *(_QWORD *)(v136 - 24)) | 5);
LABEL_98:
        MEMORY[0x1A1AF49EC](v145);
        GEOPolylineCoordinateAsFullString();
        v67 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v68 = (const char *)objc_msgSend(v67, "UTF8String");
        v69 = strlen(v68);
        MEMORY[0x1A1AF49E0](v145, &v136);
        if (!v145[0])
          goto LABEL_128;
        v70 = (char *)&v136 + *(_QWORD *)(v136 - 24);
        v71 = *((_QWORD *)v70 + 5);
        v72 = *((_DWORD *)v70 + 2);
        v73 = *((_DWORD *)v70 + 36);
        if (v73 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)));
          v74 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v73 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v70 + 36) = v73;
        }
        v75 = &v68[v69];
        if ((v72 & 0xB0) == 0x20)
          v76 = &v68[v69];
        else
          v76 = v68;
        if (!v71)
          goto LABEL_127;
        v77 = *((_QWORD *)v70 + 3);
        v22 = v77 <= v69;
        v78 = v77 - v69;
        v79 = v22 ? 0 : v78;
        if (v76 - v68 >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v71 + 96))(v71, v68, v76 - v68) != v76 - v68)
        {
          goto LABEL_127;
        }
        if ((uint64_t)v79 >= 1)
        {
          if (v79 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v79 >= 0x17)
          {
            v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v79 | 7) != 0x17)
              v81 = v79 | 7;
            v82 = v81 + 1;
            v80 = (std::locale::__imp *)operator new(v81 + 1);
            v147 = v79;
            v148 = v82 | 0x8000000000000000;
            __b.__locale_ = v80;
          }
          else
          {
            HIBYTE(v148) = v79;
            v80 = (std::locale::__imp *)&__b;
          }
          memset(v80, v73, v79);
          *((_BYTE *)v80 + v79) = 0;
          if (v148 >= 0)
            v83 = &__b;
          else
            v83 = __b.__locale_;
          v84 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v71 + 96))(v71, v83, v79);
          v85 = v84;
          if (SHIBYTE(v148) < 0)
          {
            operator delete(__b.__locale_);
            if (v85 != v79)
              goto LABEL_127;
          }
          else if (v84 != v79)
          {
            goto LABEL_127;
          }
        }
        if (v75 - v76 < 1
          || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v71 + 96))(v71, v76, v75 - v76) == v75 - v76)
        {
          *((_QWORD *)v70 + 3) = 0;
          goto LABEL_128;
        }
LABEL_127:
        std::ios_base::clear((std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)), *(_DWORD *)((char *)&v138[1] + *(_QWORD *)(v136 - 24)) | 5);
LABEL_128:
        v86 = MEMORY[0x1A1AF49EC](v145);
        MEMORY[0x1A1AF49E0](v86, &v136);
        if (!v145[0])
          goto LABEL_157;
        v87 = (char *)&v136 + *(_QWORD *)(v136 - 24);
        v88 = *((_QWORD *)v87 + 5);
        v89 = *((_DWORD *)v87 + 2);
        v90 = *((_DWORD *)v87 + 36);
        if (v90 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)));
          v91 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v90 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v87 + 36) = v90;
        }
        if ((v89 & 0xB0) == 0x20)
          v92 = "";
        else
          v92 = "), weight:";
        if (!v88)
          goto LABEL_156;
        v93 = *((_QWORD *)v87 + 3);
        v22 = v93 <= 10;
        v94 = v93 - 10;
        v95 = v22 ? 0 : v94;
        if (v92 - "), weight:" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v88 + 96))(v88, "), weight:", v92 - "), weight:") != v92 - "), weight:")
        {
          goto LABEL_156;
        }
        if (v95 >= 1)
        {
          if ((unint64_t)v95 >= 0x17)
          {
            v97 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v95 | 7) != 0x17)
              v97 = v95 | 7;
            v98 = v97 + 1;
            v96 = (std::locale::__imp *)operator new(v97 + 1);
            v147 = v95;
            v148 = v98 | 0x8000000000000000;
            __b.__locale_ = v96;
          }
          else
          {
            HIBYTE(v148) = v95;
            v96 = (std::locale::__imp *)&__b;
          }
          memset(v96, v90, v95);
          *((_BYTE *)v96 + v95) = 0;
          if (v148 >= 0)
            v99 = &__b;
          else
            v99 = __b.__locale_;
          v100 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v88 + 96))(v88, v99, v95);
          v101 = v100;
          if (SHIBYTE(v148) < 0)
          {
            operator delete(__b.__locale_);
            if (v101 != v95)
              goto LABEL_156;
          }
          else if (v100 != v95)
          {
            goto LABEL_156;
          }
        }
        v102 = "), weight:" - v92 + 10;
        if (v102 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v88 + 96))(v88, v92, "), weight:" - v92 + 10) == v102)
        {
          *((_QWORD *)v87 + 3) = 0;
          goto LABEL_157;
        }
LABEL_156:
        std::ios_base::clear((std::ios_base *)((char *)&v136 + *(_QWORD *)(v136 - 24)), *(_DWORD *)((char *)&v138[1] + *(_QWORD *)(v136 - 24)) | 5);
LABEL_157:
        MEMORY[0x1A1AF49EC](v145);
        v103 = (_QWORD *)std::ostream::operator<<();
        MEMORY[0x1A1AF49E0](v145, v103);
        if (v145[0])
        {
          v104 = (char *)v103 + *(_QWORD *)(*v103 - 24);
          v105 = *((_QWORD *)v104 + 5);
          v106 = *((_DWORD *)v104 + 2);
          v107 = *((_DWORD *)v104 + 36);
          if (v107 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)));
            v108 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
            v107 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 32);
            std::locale::~locale(&__b);
            *((_DWORD *)v104 + 36) = v107;
          }
          if ((v106 & 0xB0) == 0x20)
            v109 = "";
          else
            v109 = " }\n";
          if (!v105)
            goto LABEL_7;
          v110 = *((_QWORD *)v104 + 3);
          v22 = v110 <= 3;
          v111 = v110 - 3;
          v112 = v22 ? 0 : v111;
          if (v109 - " }\n" >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v105 + 96))(v105, " }\n", v109 - " }\n") != v109 - " }\n")
          {
            goto LABEL_7;
          }
          if ((uint64_t)v112 >= 1)
          {
            if (v112 > 0x7FFFFFFFFFFFFFF7)
              abort();
            if (v112 >= 0x17)
            {
              v114 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v112 | 7) != 0x17)
                v114 = v112 | 7;
              v115 = v114 + 1;
              v113 = (std::locale::__imp *)operator new(v114 + 1);
              v147 = v112;
              v148 = v115 | 0x8000000000000000;
              __b.__locale_ = v113;
            }
            else
            {
              HIBYTE(v148) = v112;
              v113 = (std::locale::__imp *)&__b;
            }
            memset(v113, v107, v112);
            *((_BYTE *)v113 + v112) = 0;
            if (v148 >= 0)
              v116 = &__b;
            else
              v116 = __b.__locale_;
            v117 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v105 + 96))(v105, v116, v112);
            v118 = v117;
            if (SHIBYTE(v148) < 0)
            {
              operator delete(__b.__locale_);
              if (v118 != v112)
                goto LABEL_7;
            }
            else if (v117 != v112)
            {
              goto LABEL_7;
            }
          }
          v119 = " }\n" - v109 + 3;
          if (v119 >= 1
            && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v105 + 96))(v105, v109, " }\n" - v109 + 3) != v119)
          {
LABEL_7:
            std::ios_base::clear((std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)), *(_DWORD *)((char *)v103 + *(_QWORD *)(*v103 - 24) + 32) | 5);
            goto LABEL_8;
          }
          *((_QWORD *)v104 + 3) = 0;
        }
LABEL_8:
        MEMORY[0x1A1AF49EC](v145);

        v14 += 16;
        v13 = v133;
      }
      v120 = v134;
      v121 = (_QWORD *)v134[1];
      if (v121)
      {
        do
        {
          v122 = v121;
          v121 = (_QWORD *)*v121;
        }
        while (v121);
      }
      else
      {
        do
        {
          v122 = (_QWORD *)v120[2];
          v123 = *v122 == (_QWORD)v120;
          v120 = v122;
        }
        while (!v123);
      }
      v9 = v122;
    }
    while (v122 != v132);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v136, (uint64_t)"]", 1);
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = v131;
  if ((v143 & 0x10) != 0)
  {
    v124 = *((_QWORD *)&v142 + 1);
    if (*((_QWORD *)&v142 + 1) < v140)
    {
      *((_QWORD *)&v142 + 1) = v140;
      v124 = v140;
    }
    v125 = (const void **)&v139;
  }
  else
  {
    if ((v143 & 8) == 0)
    {
      v12 = 0;
      *((_BYTE *)v131 + 23) = 0;
      goto LABEL_204;
    }
    v125 = (const void **)v138;
    v124 = v138[2];
  }
  v126 = *v125;
  v12 = v124 - (_QWORD)*v125;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v12 >= 0x17)
  {
    v127 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v127 = v12 | 7;
    v128 = v127 + 1;
    v129 = operator new(v127 + 1);
    v131[1] = v12;
    v131[2] = v128 | 0x8000000000000000;
    *v131 = v129;
    v11 = v129;
    goto LABEL_203;
  }
  *((_BYTE *)v131 + 23) = v12;
  if (v12)
LABEL_203:
    memmove(v11, v126, v12);
LABEL_204:
  *((_BYTE *)v11 + v12) = 0;
  v136 = *v10;
  *(uint64_t *)((char *)&v136 + *(_QWORD *)(v136 - 24)) = v10[3];
  v137 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v142) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v144);
}

void sub_19F5EE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a11);
  _Unwind_Resume(a1);
}

void sub_19F5EE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>>>::destroy(*a1);
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute * {__strong},std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(a1 + 5), a1[6]);

    operator delete(a1);
  }
}

uint64_t std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1, *(_QWORD *)(a1 + 8));
  return a1;
}

void md::LabelNavEtaLabeler::calculatePositioningFrame(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4, PolylineCoordinate a5, PolylineCoordinate a6)
{
  const GEOComposedRoute *v11;
  float64x2_t *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float32x2_t v20;
  double v21;
  double v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  const GEOComposedRoute *v33;
  PolylineCoordinate v34;

  v11 = a4;
  v12 = *(float64x2_t **)(a3 + 24);
  v33 = v11;
  v34 = a5;
  v30 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a2 + 48), v11, &v34);
  v31 = v13;
  v32 = v14;
  v15 = v12[55].f64[1];
  v16 = v12[57].f64[1];
  v17 = v12[61].f64[1];
  v18 = v12[59].f64[1];
  v26 = v12[54];
  v27 = v12[56];
  v28 = v12[58];
  v29 = v12[60];
  v34 = a6;
  v19 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a2 + 48), v33, &v34);
  v20 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v29, v26, v30), v27, v31), v28, v32), 1.0 / (v17 + v15 * v30 + v16 * v31 + v18 * v32)));
  v23 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v12[60], v12[54], v19), v12[56], v21), v12[58], v22), 1.0 / (v12[61].f64[1] + v12[55].f64[1] * v19 + v12[57].f64[1] * v21 + v12[59].f64[1] * v22)));
  *a1 = vmul_f32(vadd_f32(v23, v20), (float32x2_t)0x3F0000003F000000);
  if (*(_QWORD *)&v20 == *(_QWORD *)&v23)
  {
    v24 = (float32x2_t)1065353216;
  }
  else
  {
    v25 = vsub_f32(v23, v20);
    v24 = vmul_n_f32(v25, 1.0 / sqrtf(vaddv_f32(vmul_f32(v25, v25))));
  }
  a1[1] = v24;
  a1[2].f32[0] = -v24.f32[1];
  a1[2].i32[1] = v24.i32[0];

}

void sub_19F5EE630(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

float md::LabelNavEtaLabeler::scoreEtaLabelPosition(uint64_t a1, _QWORD *a2, float *a3, float a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  float v20;
  unint64_t v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  float v29[4];
  int v30;

  if (a4 >= 0.0)
  {
    v9 = a3[1];
    v8 = *a3 - a4;
    v5 = v9 - a4;
    v7 = *a3 + a4;
    v6 = v9 + a4;
  }
  else
  {
    v5 = 3.4028e38;
    v6 = -3.4028e38;
    v7 = -3.4028e38;
    v8 = 3.4028e38;
  }
  v29[0] = v8;
  v29[1] = v5;
  v29[2] = v7;
  v29[3] = v6;
  v10 = a2[19];
  v11 = v10 > 4;
  v12 = (1 << v10) & 0x19;
  v13 = v11 || v12 == 0;
  if (v13)
    return 3.4028e38;
  v14 = *(_QWORD **)(a1 + 456);
  v15 = (_QWORD *)(a1 + 464);
  if (v14 == (_QWORD *)(a1 + 464))
    return 3.4028e38;
  v16 = COERCE_UNSIGNED_INT(v8 + (float)((float)(v7 - v8) * 0.5)) | ((unint64_t)COERCE_UNSIGNED_INT(v5+ (float)((float)(v6 - v5) * 0.5)) << 32);
  v17 = 3.4028e38;
  do
  {
    v19 = (_QWORD *)v14[5];
    v18 = (_QWORD *)v14[6];
    while (v19 != v18)
    {
      if (v19 + 6 != a2)
      {
        v21 = v19[25];
        v22 = v21 > 4 || ((1 << v21) & 0x19) == 0;
        if (!v22 && v21 == a2[19])
        {
          v30 = 2139095039;
          v24 = (uint64_t **)v19[12];
          v23 = (uint64_t **)v19[13];
          if (v24 == v23)
          {
            v20 = 3.4028e38;
          }
          else
          {
            do
            {
              v25 = *v24;
              v24 += 2;
              md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeNearestDistSquaredToRectCenter(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(v25, 0, v29, (float *)&v30, v16);
            }
            while (v24 != v23);
            v20 = *(float *)&v30;
          }
          v17 = fminf(v20, v17);
        }
      }
      v19 += 48;
    }
    v26 = (_QWORD *)v14[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (_QWORD *)v14[2];
        v13 = *v27 == (_QWORD)v14;
        v14 = v27;
      }
      while (!v13);
    }
    v14 = v27;
  }
  while (v27 != v15);
  return v17;
}

uint64_t md::LabelNavEtaLabeler::scoreEtaLabelRect(uint64_t result, _QWORD *a2, uint64_t a3, float *a4, float *a5)
{
  _QWORD *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t **v24;
  float v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  unint64_t v57;
  float v58;
  unint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101[2];
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float *v112;
  void *v113;
  void *__p;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  v6 = (_QWORD *)a2[57];
  v96 = a2 + 58;
  if (v6 != a2 + 58)
  {
    v7 = 0.0;
    v98 = a3;
    v99 = result;
    while (1)
    {
      v97 = v6;
      v9 = v6[5];
      v8 = v6[6];
      v100 = v8;
      if (v9 != v8)
        break;
LABEL_5:
      v10 = v97;
      v11 = (_QWORD *)v97[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v22 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v22);
      }
      v6 = v12;
      if (v12 == v96)
        goto LABEL_94;
    }
    while (1)
    {
      v19 = *(_QWORD *)(v9 + 200);
      v20 = v19 > 4;
      v21 = (1 << v19) & 0x19;
      v22 = v20 || v21 == 0;
      if (v22)
        goto LABEL_83;
      v111 = 0.0;
      v24 = *(uint64_t ***)(v9 + 96);
      v23 = *(uint64_t ***)(v9 + 104);
      if (v24 != v23)
        break;
      v25 = 0.0;
      if (*(_BYTE *)(v9 + 196))
        goto LABEL_78;
LABEL_82:
      v7 = *(float *)result + v25;
      *(float *)result = v7;
LABEL_83:
      if (v9 + 48 != a3)
      {
        if (*(_BYTE *)(v9 + 136))
        {
          v59 = *(_QWORD *)(v9 + 200);
          if (v59 > 4 || ((1 << v59) & 0x19) == 0 || v59 == *(_QWORD *)(a3 + 152))
          {
            v60 = *(float *)(v9 + 148);
            if (v60 <= *a4
              || (v61 = *(float *)(v9 + 140), v62 = a4[2], v61 >= v62)
              || (v63 = *(float *)(v9 + 152), v64 = a4[1], v63 <= v64)
              || (v65 = *(float *)(v9 + 144), v66 = a4[3], v65 >= v66))
            {
              v13 = 3.4028e38;
              v14 = -3.4028e38;
              v15 = -3.4028e38;
              v16 = 3.4028e38;
            }
            else
            {
              v16 = fmaxf(v61, *a4);
              v15 = fminf(v62, v60);
              v13 = fmaxf(v65, v64);
              v14 = fminf(v66, v63);
            }
            v17 = v14 < v13 || v15 < v16;
            v18 = (float)(v15 - v16) * (float)(v14 - v13);
            if (v17)
              v18 = 0.0;
            *(float *)(result + 4) = v18 + *(float *)(result + 4);
          }
        }
      }
      v9 += 384;
      if (v9 == v8)
        goto LABEL_5;
    }
    do
    {
      v26 = *v24;
      md::RouteLabelState::RouteLabelState((md::RouteLabelState *)v101, (const md::RouteLabelState *)(v9 + 48));
      v112 = &v111;
      md::RouteLabelState::RouteLabelState((md::RouteLabelState *)&v113, (const md::RouteLabelState *)v101);
      md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeRectOverlap(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(v26, 0, a4, (uint64_t)&v112);
      v27 = v119;
      if (v119)
      {
        v28 = v120;
        v29 = v119;
        if (v120 != v119)
        {
          do
          {
            v30 = *(_QWORD **)(v28 - 24);
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                operator delete(v30);
                v30 = v31;
              }
              while (v31);
            }
            v32 = *(void **)(v28 - 40);
            *(_QWORD *)(v28 - 40) = 0;
            if (v32)
              operator delete(v32);
            v28 -= 72;
          }
          while (v28 != v27);
          v29 = v119;
        }
        v120 = v27;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v122 + 40))(v122, v29, v121 - v29);
      }
      v33 = v115;
      if (v115)
      {
        v34 = v116;
        v35 = v115;
        if (v116 != v115)
        {
          do
          {
            v36 = *(std::__shared_weak_count **)(v34 - 8);
            if (v36)
            {
              p_shared_owners = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v36->__on_zero_shared)(v36, v35);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v34 -= 16;
          }
          while (v34 != v33);
          v35 = v115;
        }
        v116 = v33;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v118 + 40))(v118, v35, v117 - v35);
      }
      v39 = __p;
      if (__p)
      {
        do
        {
          v40 = (_QWORD *)*v39;
          operator delete(v39);
          v39 = v40;
        }
        while (v40);
      }
      v41 = v113;
      v113 = 0;
      if (v41)
        operator delete(v41);
      v42 = v107;
      if (v107)
      {
        v43 = v108;
        v44 = v107;
        if (v108 != v107)
        {
          do
          {
            v45 = *(_QWORD **)(v43 - 24);
            if (v45)
            {
              do
              {
                v46 = (_QWORD *)*v45;
                operator delete(v45);
                v45 = v46;
              }
              while (v46);
            }
            v47 = *(void **)(v43 - 40);
            *(_QWORD *)(v43 - 40) = 0;
            if (v47)
              operator delete(v47);
            v43 -= 72;
          }
          while (v43 != v42);
          v44 = v107;
        }
        v108 = v42;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 40))(v110, v44, v109 - v44);
      }
      v48 = v103;
      if (v103)
      {
        v49 = v104;
        v50 = v103;
        if (v104 != v103)
        {
          do
          {
            v51 = *(std::__shared_weak_count **)(v49 - 8);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v51->__on_zero_shared)(v51, v50);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v49 -= 16;
          }
          while (v49 != v48);
          v50 = v103;
        }
        v104 = v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106 + 40))(v106, v50, v105 - v50);
      }
      v54 = v102;
      if (v102)
      {
        do
        {
          v55 = (_QWORD *)*v54;
          operator delete(v54);
          v54 = v55;
        }
        while (v55);
      }
      v56 = v101[0];
      v101[0] = 0;
      if (v56)
        operator delete(v56);
      v24 += 2;
    }
    while (v24 != v23);
    v25 = v111;
    a3 = v98;
    result = v99;
    v8 = v100;
    if (!*(_BYTE *)(v9 + 196))
      goto LABEL_82;
LABEL_78:
    v57 = *(_QWORD *)(v9 + 200);
    v58 = v25 * 4.0;
    if (((1 << v57) & 0x19) == 0)
      v58 = v25;
    if (v57 <= 4)
      v25 = v58;
    goto LABEL_82;
  }
  v7 = 0.0;
LABEL_94:
  v67 = (float *)a2[27];
  v68 = (float *)a2[28];
  if (v67 == v68)
  {
    v72 = a4[2];
    v73 = a4[3];
    v71 = 0.0;
    v69 = *a4;
    v70 = a4[1];
  }
  else
  {
    v69 = *a4;
    v70 = a4[1];
    v71 = 0.0;
    v72 = a4[2];
    v73 = a4[3];
    do
    {
      v74 = v67[2];
      if (v74 <= v69 || *v67 >= v72 || (v75 = v67[3], v75 <= v70) || (v76 = v67[1], v76 >= v73))
      {
        v79 = 3.4028e38;
        v80 = -3.4028e38;
        v78 = -3.4028e38;
        v77 = 3.4028e38;
      }
      else
      {
        v77 = fmaxf(*v67, v69);
        v78 = fminf(v72, v74);
        v79 = fmaxf(v76, v70);
        v80 = fminf(v73, v75);
      }
      v81 = v80 < v79 || v78 < v77;
      v82 = (float)(v78 - v77) * (float)(v80 - v79);
      if (v81)
        v82 = 0.0;
      v71 = v71 + (float)(v82 * v67[4]);
      v67 += 6;
    }
    while (v67 != v68);
  }
  *(float *)(result + 8) = v71;
  v83 = (float)(v73 - v70) * (float)(v72 - v69);
  if (v72 <= *a5 || (v84 = a5[2], v69 >= v84) || (v85 = a5[1], v73 <= v85) || (v86 = a5[3], v70 >= v86))
  {
    v89 = 3.4028e38;
    v90 = -3.4028e38;
    v88 = -3.4028e38;
    v87 = 3.4028e38;
  }
  else
  {
    v87 = fmaxf(v69, *a5);
    v88 = fminf(v84, v72);
    v89 = fmaxf(v70, v85);
    v90 = fminf(v86, v73);
  }
  v91 = v90 < v89 || v88 < v87;
  v92 = (float)(v88 - v87) * (float)(v90 - v89);
  if (v91)
    v92 = 0.0;
  v93 = fmaxf(v83 - v92, 0.0);
  *(float *)(result + 12) = v93;
  if (*(_QWORD *)(a3 + 152) == 1)
  {
    *(float *)(result + 16) = (float)((float)(v93 + v71) + (float)(v7 + *(float *)(result + 4))) / v83;
    *(_BYTE *)(result + 20) = 1;
  }
  return result;
}

void sub_19F5EEEA0(_Unwind_Exception *a1)
{
  md::RouteLabelState *v1;
  md::RouteLabelState *v2;

  md::RouteLabelState::~RouteLabelState(v2);
  md::RouteLabelState::~RouteLabelState(v1);
  _Unwind_Resume(a1);
}

md::RouteLabelState *md::RouteLabelState::RouteLabelState(md::RouteLabelState *this, const md::RouteLabelState *a2)
{
  uint64_t v3;
  size_t prime;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  md::RouteLabelState *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 *v48;
  md::RouteLabelState *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t *v54;
  size_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t ***v61;
  uint64_t **v62;
  uint64_t *v63;
  unint64_t v64;
  char *v65;
  __int128 v66;
  float v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  int8x8_t v84;
  BOOL v85;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  __int128 *v89;

  v3 = (uint64_t)this;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  prime = *((_QWORD *)a2 + 1);
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v84 = *(int8x8_t *)(v3 + 8);
      v85 = prime >= *(_QWORD *)&v84;
      if (prime > *(_QWORD *)&v84)
        goto LABEL_3;
    }
    else
    {
      v84 = 0;
      v85 = 1;
      if (prime)
        goto LABEL_3;
    }
    if (v85)
      goto LABEL_4;
    v86 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 24) / *(float *)(v3 + 32));
    if (*(_QWORD *)&v84 < 3uLL || (v87 = (uint8x8_t)vcnt_s8(v84), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
    {
      v86 = std::__next_prime(v86);
    }
    else
    {
      v88 = 1 << -(char)__clz(v86 - 1);
      if (v86 >= 2)
        v86 = v88;
    }
    if (prime <= v86)
      prime = v86;
    if (prime >= *(_QWORD *)&v84)
      goto LABEL_4;
    goto LABEL_3;
  }
  prime = 2;
LABEL_3:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v3, prime);
LABEL_4:
  v5 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (!v5)
    goto LABEL_67;
  v6 = (_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 8);
  while (1)
  {
LABEL_9:
    while (1)
    {
      v8 = *((unsigned __int8 *)v5 + 16);
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v3 = *((unsigned __int8 *)v5 + 16);
          if (v7 <= v8)
            v3 = v8 % v7;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v8;
        }
        v10 = *(uint64_t ****)(*(_QWORD *)this + 8 * v3);
        if (v10)
        {
          v11 = *v10;
          if (v11)
            break;
        }
      }
LABEL_31:
      v14 = operator new(0x28uLL);
      *v14 = 0;
      v14[1] = v8;
      v15 = *((_OWORD *)v5 + 1);
      *((_DWORD *)v14 + 8) = *((_DWORD *)v5 + 8);
      *((_OWORD *)v14 + 1) = v15;
      v16 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
      v17 = *((float *)this + 8);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        if (v21 == 1)
        {
          v21 = 2;
        }
        else if ((v21 & (v21 - 1)) != 0)
        {
          v21 = std::__next_prime(v21);
          v7 = *((_QWORD *)this + 1);
        }
        if (v21 > v7)
          goto LABEL_43;
        if (v21 < v7)
        {
          v22 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
          if (v7 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
          {
            v22 = std::__next_prime(v22);
          }
          else
          {
            v24 = 1 << -(char)__clz(v22 - 1);
            if (v22 >= 2)
              v22 = v24;
          }
          if (v21 <= v22)
            v21 = v22;
          if (v21 < v7)
LABEL_43:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this, v21);
        }
        v7 = *((_QWORD *)this + 1);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8)
            v3 = v8 % v7;
          else
            v3 = v8;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v8;
        }
      }
      v25 = *(_QWORD *)this;
      v26 = *(_QWORD **)(*(_QWORD *)this + 8 * v3);
      if (v26)
      {
        *v14 = *v26;
        v3 = (uint64_t)this;
      }
      else
      {
        *v14 = *v6;
        *v6 = v14;
        *(_QWORD *)(v25 + 8 * v3) = v6;
        v3 = (uint64_t)this;
        if (!*v14)
          goto LABEL_8;
        v27 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v27 >= v7)
            v27 %= v7;
        }
        else
        {
          v27 &= v7 - 1;
        }
        v26 = (_QWORD *)(*(_QWORD *)this + 8 * v27);
      }
      *v26 = v14;
LABEL_8:
      ++*(_QWORD *)(v3 + 24);
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_67;
    }
    if (v9.u32[0] < 2uLL)
      break;
    while (1)
    {
      v12 = (unint64_t)v11[1];
      if (v12 == v8)
        break;
      if (v12 >= v7)
        v12 %= v7;
      if (v12 != v3)
        goto LABEL_31;
LABEL_19:
      v11 = (uint64_t **)*v11;
      if (!v11)
        goto LABEL_31;
    }
    if (*((unsigned __int8 *)v11 + 16) != (_DWORD)v8)
      goto LABEL_19;
    v3 = (uint64_t)this;
    v5 = (uint64_t *)*v5;
    if (!v5)
      goto LABEL_67;
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == (uint64_t *)v8)
      break;
    if (((unint64_t)v13 & (v7 - 1)) != v3)
      goto LABEL_31;
LABEL_26:
    v11 = (uint64_t **)*v11;
    if (!v11)
      goto LABEL_31;
  }
  if (*((unsigned __int8 *)v11 + 16) != (_DWORD)v8)
    goto LABEL_26;
  v3 = (uint64_t)this;
  v5 = (uint64_t *)*v5;
  if (v5)
    goto LABEL_9;
LABEL_67:
  v28 = *((_BYTE *)a2 + 40);
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 40) = v28;
  *(_QWORD *)(v3 + 56) = 0;
  v29 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = v29;
  v30 = (char *)*((_QWORD *)a2 + 6);
  v31 = (char *)*((_QWORD *)a2 + 7);
  v32 = (md::RouteLabelState *)v3;
  v33 = v31 - v30;
  if (v31 != v30)
  {
    if (v33 < 0)
      abort();
    v34 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v31 - v30, 8);
    *((_QWORD *)this + 6) = v34;
    *((_QWORD *)this + 7) = v34;
    *((_QWORD *)this + 8) = &v34[2 * (v33 >> 4)];
    do
    {
      if (v34)
      {
        v35 = *((_QWORD *)v30 + 1);
        *v34 = *(_QWORD *)v30;
        v34[1] = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
      }
      v30 += 16;
      v34 += 2;
    }
    while (v30 != v31);
    *((_QWORD *)this + 7) = v34;
    v32 = this;
  }
  *((_OWORD *)v32 + 5) = *((_OWORD *)a2 + 5);
  v38 = *((_OWORD *)a2 + 6);
  v39 = *((_OWORD *)a2 + 7);
  v40 = *((_OWORD *)a2 + 9);
  *((_OWORD *)v32 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)v32 + 9) = v40;
  *((_OWORD *)v32 + 6) = v38;
  *((_OWORD *)v32 + 7) = v39;
  v41 = *((_OWORD *)a2 + 11);
  v42 = *((_OWORD *)a2 + 12);
  v43 = *((_OWORD *)a2 + 14);
  *((_OWORD *)v32 + 13) = *((_OWORD *)a2 + 13);
  *((_OWORD *)v32 + 14) = v43;
  *((_OWORD *)v32 + 11) = v41;
  *((_OWORD *)v32 + 12) = v42;
  v44 = *((_OWORD *)a2 + 15);
  v45 = *((_OWORD *)a2 + 16);
  v46 = *((_OWORD *)a2 + 18);
  *((_OWORD *)v32 + 17) = *((_OWORD *)a2 + 17);
  *((_OWORD *)v32 + 18) = v46;
  *((_OWORD *)v32 + 15) = v44;
  *((_OWORD *)v32 + 16) = v45;
  *((_OWORD *)v32 + 10) = *((_OWORD *)a2 + 10);
  *((_QWORD *)v32 + 38) = 0;
  *((_QWORD *)v32 + 39) = 0;
  v47 = *((_QWORD *)a2 + 41);
  *((_QWORD *)v32 + 40) = 0;
  *((_QWORD *)v32 + 41) = v47;
  v48 = (__int128 *)*((_QWORD *)a2 + 38);
  v89 = (__int128 *)*((_QWORD *)a2 + 39);
  v49 = v32;
  if (v89 != v48)
  {
    v50 = 0x8E38E38E38E38E39 * (((char *)v89 - (char *)v48) >> 3);
    if (v50 >= 0x38E38E38E38E38FLL)
      abort();
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
    *((_QWORD *)v49 + 38) = v51;
    *((_QWORD *)v49 + 39) = v51;
    *((_QWORD *)v49 + 40) = v51 + 8 * (((char *)v89 - (char *)v48) >> 3);
    v52 = v51;
    while (2)
    {
      if (v52)
      {
        v53 = *v48;
        *(_OWORD *)(v52 + 12) = *(__int128 *)((char *)v48 + 12);
        *(_OWORD *)(v52 + 32) = 0u;
        v54 = (uint64_t *)(v52 + 32);
        *(_OWORD *)v52 = v53;
        *(_OWORD *)(v52 + 48) = 0u;
        *(_DWORD *)(v52 + 64) = *((_DWORD *)v48 + 16);
        v55 = *((_QWORD *)v48 + 5);
        if (v55 == 1)
        {
          v55 = 2;
          goto LABEL_84;
        }
        if ((v55 & (v55 - 1)) != 0)
        {
          v55 = std::__next_prime(*((_QWORD *)v48 + 5));
          v50 = *(_QWORD *)(v52 + 40);
          v79 = v55 >= v50;
          if (v55 > v50)
            goto LABEL_84;
        }
        else
        {
          v50 = 0;
          v79 = 1;
          if (v55)
            goto LABEL_84;
        }
        if (!v79)
        {
          v80 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 56) / *(float *)(v52 + 64));
          if (v50 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
          {
            v80 = std::__next_prime(v80);
          }
          else
          {
            v82 = 1 << -(char)__clz(v80 - 1);
            if (v80 >= 2)
              v80 = v82;
          }
          if (v55 <= v80)
            v55 = v80;
          if (v55 < v50)
LABEL_84:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v52 + 32, v55);
        }
        v56 = (uint64_t *)*((_QWORD *)v48 + 6);
        if (v56)
        {
          v57 = (_QWORD *)(v52 + 48);
          do
          {
            v58 = *((unsigned __int8 *)v56 + 16);
            v59 = *(_QWORD *)(v52 + 40);
            if (v59)
            {
              v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
              v60.i16[0] = vaddlv_u8(v60);
              if (v60.u32[0] > 1uLL)
              {
                v50 = *((unsigned __int8 *)v56 + 16);
                if (v59 <= v58)
                  v50 = v58 % v59;
              }
              else
              {
                v50 = ((_DWORD)v59 - 1) & v58;
              }
              v61 = *(uint64_t ****)(*v54 + 8 * v50);
              if (v61)
              {
                v62 = *v61;
                if (v62)
                {
                  if (v60.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v63 = v62[1];
                      if (v63 == (uint64_t *)v58)
                      {
                        if (*((unsigned __int8 *)v62 + 16) == (_DWORD)v58)
                          goto LABEL_145;
                      }
                      else if (((unint64_t)v63 & (v59 - 1)) != v50)
                      {
                        goto LABEL_107;
                      }
                      v62 = (uint64_t **)*v62;
                      if (!v62)
                        goto LABEL_107;
                    }
                  }
                  do
                  {
                    v64 = (unint64_t)v62[1];
                    if (v64 == v58)
                    {
                      if (*((unsigned __int8 *)v62 + 16) == (_DWORD)v58)
                        goto LABEL_145;
                    }
                    else
                    {
                      if (v64 >= v59)
                        v64 %= v59;
                      if (v64 != v50)
                        break;
                    }
                    v62 = (uint64_t **)*v62;
                  }
                  while (v62);
                }
              }
            }
LABEL_107:
            v65 = (char *)operator new(0x30uLL);
            *(_QWORD *)v65 = 0;
            *((_QWORD *)v65 + 1) = v58;
            v66 = *((_OWORD *)v56 + 1);
            *(_OWORD *)(v65 + 28) = *(_OWORD *)((char *)v56 + 28);
            *((_OWORD *)v65 + 1) = v66;
            v67 = (float)(unint64_t)(*(_QWORD *)(v52 + 56) + 1);
            v68 = *(float *)(v52 + 64);
            if (v59 && (float)(v68 * (float)v59) >= v67)
            {
              v58 = v50;
            }
            else
            {
              v69 = (v59 & (v59 - 1)) != 0;
              if (v59 < 3)
                v69 = 1;
              v70 = v69 | (2 * v59);
              v71 = vcvtps_u32_f32(v67 / v68);
              if (v70 <= v71)
                v72 = v71;
              else
                v72 = v70;
              if (v72 == 1)
              {
                v72 = 2;
              }
              else if ((v72 & (v72 - 1)) != 0)
              {
                v72 = std::__next_prime(v72);
                v59 = *(_QWORD *)(v52 + 40);
              }
              if (v72 > v59)
                goto LABEL_120;
              if (v72 < v59)
              {
                v73 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 56) / *(float *)(v52 + 64));
                if (v59 < 3
                  || (v74 = (uint8x8_t)vcnt_s8((int8x8_t)v59), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
                {
                  v73 = std::__next_prime(v73);
                }
                else
                {
                  v75 = 1 << -(char)__clz(v73 - 1);
                  if (v73 >= 2)
                    v73 = v75;
                }
                if (v72 <= v73)
                  v72 = v73;
                if (v72 < v59)
LABEL_120:
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v52 + 32, v72);
              }
              v59 = *(_QWORD *)(v52 + 40);
              if ((v59 & (v59 - 1)) != 0)
              {
                if (v59 <= v58)
                  v58 %= v59;
              }
              else
              {
                v58 = ((_DWORD)v59 - 1) & v58;
              }
            }
            v76 = *v54;
            v77 = *(_QWORD **)(*v54 + 8 * v58);
            if (v77)
            {
              *(_QWORD *)v65 = *v77;
            }
            else
            {
              *(_QWORD *)v65 = *v57;
              *v57 = v65;
              *(_QWORD *)(v76 + 8 * v58) = v57;
              if (!*(_QWORD *)v65)
                goto LABEL_144;
              v78 = *(_QWORD *)(*(_QWORD *)v65 + 8);
              if ((v59 & (v59 - 1)) != 0)
              {
                if (v78 >= v59)
                  v78 %= v59;
              }
              else
              {
                v78 &= v59 - 1;
              }
              v77 = (_QWORD *)(*v54 + 8 * v78);
            }
            *v77 = v65;
LABEL_144:
            ++*(_QWORD *)(v52 + 56);
LABEL_145:
            v56 = (uint64_t *)*v56;
          }
          while (v56);
        }
      }
      v48 = (__int128 *)((char *)v48 + 72);
      v52 += 72;
      if (v48 != v89)
        continue;
      break;
    }
    v49 = this;
    *((_QWORD *)this + 39) = v52;
  }
  return v49;
}

void sub_19F5EF7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](a12);
  _Unwind_Resume(a1);
}

void sub_19F5EF82C()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x19F5EF840);
}

void md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeRectOverlap(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(uint64_t *a1, unsigned int a2, float *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v32;
  float v33;
  float *v34;
  _BYTE v35[336];
  float *v36;
  _BYTE v37[336];

  v7 = *a1;
  v8 = *a1 + 32 * a2;
  if (*(_BYTE *)(v8 + 2) != 1)
  {
    v12 = *(unsigned __int16 *)(v7 + 32 * a2);
    if (!*(_WORD *)(v7 + 32 * a2))
      return;
    v13 = *(unsigned __int16 **)(v7 + 32 * a2 + 24);
    v14 = a1[3];
    while (1)
    {
      v15 = *v13++;
      v16 = (float *)(v14 + 8 * v15);
      v18 = *v16;
      v17 = v16[1];
      v19 = v16[2];
      v20 = v19 - *v16;
      v21 = vabds_f32(v19, *v16);
      v22 = *a3;
      if (v21 >= 1.0e-10)
      {
        v26 = (float)(v22 - v18) * (float)(1.0 / v20);
        v27 = (float)(a3[2] - v18) * (float)(1.0 / v20);
        v28 = fminf(v26, v27);
        v29 = fmaxf(v26, v27);
        v25 = fmaxf(v28, 0.0);
        v24 = fminf(v29, 1.0);
        if (v25 > v24)
          goto LABEL_10;
      }
      else
      {
        if (v18 < v22 || v18 > a3[2])
          goto LABEL_10;
        v24 = 1.0;
        v25 = 0.0;
      }
      v30 = v16[3] - v17;
      if (fabsf(v30) >= 1.0e-10)
      {
        v32 = (float)(a3[1] - v17) * (float)(1.0 / v30);
        v33 = (float)(a3[3] - v17) * (float)(1.0 / v30);
        v25 = fmaxf(v25, fminf(v32, v33));
        v24 = fminf(fmaxf(v32, v33), v24);
        if (v25 > v24)
          goto LABEL_10;
      }
      else if (v17 < a3[1] || v17 > a3[3])
      {
        goto LABEL_10;
      }
      **(float **)a4 = **(float **)a4
                     + (float)(sqrtf((float)((float)((float)(v24 - v25) * v20) * (float)((float)(v24 - v25) * v20))+ (float)((float)((float)(v24 - v25) * v30) * (float)((float)(v24 - v25) * v30)))* *(float *)(a4 + 92));
LABEL_10:
      if (!--v12)
        return;
    }
  }
  if (*(float *)(v8 + 12) > *a3)
  {
    v10 = *(float *)(v8 + 4);
    v9 = v8 + 4;
    if (v10 < a3[2] && *(float *)(v7 + 32 * a2 + 16) > a3[1] && *(float *)(v9 + 4) < a3[3])
    {
      v36 = *(float **)a4;
      md::RouteLabelState::RouteLabelState((md::RouteLabelState *)v37, (const md::RouteLabelState *)(a4 + 8));
      md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeRectOverlap(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(a1, (2 * a2) | 1, a3, &v36);
      md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)v37);
      v34 = *(float **)a4;
      md::RouteLabelState::RouteLabelState((md::RouteLabelState *)v35, (const md::RouteLabelState *)(a4 + 8));
      md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeRectOverlap(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(a1, 2 * a2 + 2, a3, &v34);
      md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)v35);
    }
  }
}

void sub_19F5EFAD0(_Unwind_Exception *a1)
{
  md::RouteLabelState *v1;

  md::RouteLabelState::~RouteLabelState(v1);
  _Unwind_Resume(a1);
}

uint64_t *md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeNearestDistSquaredToRectCenter(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(uint64_t *result, unsigned int a2, float *a3, float *a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;

  v8 = result;
  v9 = a2;
  v10 = *result;
  if (*(_BYTE *)(*result + 32 * a2 + 2) != 1)
  {
LABEL_7:
    v15 = *(unsigned __int16 *)(v10 + 32 * v9);
    if (!*(_WORD *)(v10 + 32 * v9))
      return result;
    v16 = *(unsigned __int16 **)(v10 + 32 * v9 + 24);
    v17 = v8[3];
    v18 = *a3;
    while (1)
    {
      v19 = *v16++;
      v20 = (float *)(v17 + 8 * v19);
      v21 = *v20;
      v22 = v20[1];
      v23 = v20[2];
      v24 = v23 - *v20;
      if (vabds_f32(v23, *v20) >= 1.0e-10)
      {
        v28 = (float)(v18 - v21) * (float)(1.0 / v24);
        v29 = (float)(a3[2] - v21) * (float)(1.0 / v24);
        v30 = fminf(v28, v29);
        v31 = fmaxf(v28, v29);
        v27 = fmaxf(v30, 0.0);
        v26 = fminf(v31, 1.0);
        if (v27 > v26)
          goto LABEL_10;
      }
      else
      {
        if (v21 < v18 || v21 > a3[2])
          goto LABEL_10;
        v26 = 1.0;
        v27 = 0.0;
      }
      v32 = v20[3] - v22;
      if (fabsf(v32) < 1.0e-10)
      {
        if (v22 < a3[1] || v22 > a3[3])
          goto LABEL_10;
LABEL_27:
        v36 = v27 * v24;
        v37 = v27 * v32;
        v38 = v36 + v21;
        v39 = v37 + v22;
        v40 = -(float)(v36 - (float)(v26 * v24));
        v41 = -(float)(v37 - (float)(v26 * v32));
        v42 = (float)(v40 * v40) + (float)(v41 * v41);
        v43 = 0.0;
        if (v42 > 1.0e-15)
          v43 = fminf(fmaxf((float)((float)((float)(*(float *)&a5 - v38) * v40)+ (float)((float)(*((float *)&a5 + 1) - v39) * v41))/ v42, 0.0), 1.0);
        *a4 = fminf(*a4, (float)((float)(*(float *)&a5 - (float)(v38 + (float)(v43 * v40)))* (float)(*(float *)&a5 - (float)(v38 + (float)(v43 * v40))))+ (float)((float)(*((float *)&a5 + 1) - (float)(v39 + (float)(v43 * v41)))* (float)(*((float *)&a5 + 1) - (float)(v39 + (float)(v43 * v41)))));
        v18 = *a3;
        goto LABEL_10;
      }
      v34 = (float)(a3[1] - v22) * (float)(1.0 / v32);
      v35 = (float)(a3[3] - v22) * (float)(1.0 / v32);
      v27 = fmaxf(v27, fminf(v34, v35));
      v26 = fminf(fmaxf(v34, v35), v26);
      if (v27 <= v26)
        goto LABEL_27;
LABEL_10:
      if (!--v15)
        return result;
    }
  }
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (*(float *)(v11 + 12) <= *a3)
      return result;
    v13 = *(float *)(v11 + 4);
    v12 = v11 + 4;
    if (v13 >= a3[2] || *(float *)(v10 + 32 * v9 + 16) <= a3[1] || *(float *)(v12 + 4) >= a3[3])
      return result;
    v14 = 2 * a2;
    result = (uint64_t *)md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeNearestDistSquaredToRectCenter(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(v8, (2 * a2) | 1, a3, a4, a5);
    v9 = (v14 + 2);
    v10 = *v8;
    a2 = v14 + 2;
    if (*(_BYTE *)(*v8 + 32 * v9 + 2) != 1)
      goto LABEL_7;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F5F001C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::describeDebugState(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  _QWORD *v7;
  void *v8;
  id v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  const std::locale::facet *v35;
  char *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  std::locale::__imp *v41;
  uint64_t v42;
  uint64_t v43;
  void *locale;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  int v52;
  int v53;
  const std::locale::facet *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  std::locale::__imp *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  const std::locale::facet *v72;
  char *v73;
  void *v74;
  id v75;
  const char *v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  const std::locale::facet *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  int v88;
  const std::locale::facet *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  std::locale::__imp *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  int v104;
  int v105;
  const std::locale::facet *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  std::locale::__imp *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v116;
  int v117;
  const std::locale::facet *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  std::locale::__imp *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  int64_t v131;
  char *v132;
  uint64_t v133;
  int v134;
  int v135;
  const std::locale::facet *v136;
  const char *v137;
  const char *v138;
  int64_t v139;
  int64_t v140;
  size_t v141;
  std::locale::__imp *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int v150;
  int v151;
  const std::locale::facet *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  size_t v156;
  std::locale::__imp *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  const char *v165;
  int64_t v166;
  char *v167;
  uint64_t v168;
  int v169;
  int v170;
  const std::locale::facet *v171;
  const char *v172;
  const char *v173;
  int64_t v174;
  int64_t v175;
  size_t v176;
  std::locale::__imp *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  int v185;
  int v186;
  const std::locale::facet *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  size_t v191;
  std::locale::__imp *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  id v212;
  VKRouteInfo *v213;
  char *v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  const char *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  VKRouteInfo *v230;
  char *v231;
  _QWORD *v232;
  _QWORD *v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t i;
  char *v240;
  uint64_t v241;
  int v242;
  int v243;
  const std::locale::facet *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  size_t v248;
  std::locale::__imp *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  PolylineCoordinate v271;
  PolylineCoordinate v272;
  unint64_t ClosestCoordinateBetweenVertices;
  void *v274;
  int8x8_t v275;
  unint64_t v276;
  uint8x8_t v277;
  unint64_t v278;
  uint64_t ***v279;
  uint64_t **v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  const char *v288;
  char *v289;
  uint64_t v290;
  int v291;
  int v292;
  const std::locale::facet *v293;
  char *v294;
  std::locale *v295;
  uint64_t v296;
  uint64_t v297;
  size_t v298;
  std::locale::__imp *v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  char *v309;
  uint64_t v310;
  int v311;
  int v312;
  const std::locale::facet *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  size_t v317;
  std::locale::__imp *v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  int v327;
  int v328;
  const std::locale::facet *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  size_t v333;
  std::locale::__imp *v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  int v343;
  int v344;
  const std::locale::facet *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  size_t v349;
  std::locale::__imp *v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  std::locale *v358;
  _QWORD *v359;
  uint64_t v360;
  _QWORD *v361;
  id v362;
  _QWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  id v375;
  VKRouteInfo *v376;
  std::locale v378[4];
  _BYTE v379[16];
  std::locale __b[4];

  v3 = *(_QWORD **)(a1 + 488);
  v359 = (_QWORD *)(a1 + 496);
  if (v3 == (_QWORD *)(a1 + 496))
    goto LABEL_2;
  while (2)
  {
    v27 = *(id *)(a1 + 24);
    objc_msgSend(v27, "routeInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "route");

    v30 = v3[5];
    v29 = v3[6];
    v361 = v3;
    v364 = v29;
    while (v30 != v29)
    {
      MEMORY[0x1A1AF49E0](v378, a2);
      if (!LOBYTE(v378[0].__locale_))
        goto LABEL_41;
      v31 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v32 = *((_QWORD *)v31 + 5);
      v33 = *((_DWORD *)v31 + 2);
      v34 = *((_DWORD *)v31 + 36);
      if (v34 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v35 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
        v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 32);
        std::locale::~locale(__b);
        *((_DWORD *)v31 + 36) = v34;
      }
      if ((v33 & 0xB0) == 0x20)
        v36 = "";
      else
        v36 = "AnnotationRequest: ";
      if (!v32)
        goto LABEL_40;
      v37 = *((_QWORD *)v31 + 3);
      v38 = v37 <= 19;
      v39 = v37 - 19;
      v40 = v38 ? 0 : v39;
      if (v36 - "AnnotationRequest: " >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v32 + 96))(v32, "AnnotationRequest: ", v36 - "AnnotationRequest: ") != v36 - "AnnotationRequest: ")
      {
        goto LABEL_40;
      }
      if (v40 >= 1)
      {
        if ((unint64_t)v40 >= 0x17)
        {
          v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v42 = v40 | 7;
          v43 = v42 + 1;
          v41 = (std::locale::__imp *)operator new(v42 + 1);
          __b[1].__locale_ = (std::locale::__imp *)v40;
          __b[2].__locale_ = (std::locale::__imp *)(v43 | 0x8000000000000000);
          __b[0].__locale_ = v41;
        }
        else
        {
          HIBYTE(__b[2].__locale_) = v40;
          v41 = (std::locale::__imp *)__b;
        }
        memset(v41, v34, v40);
        *((_BYTE *)v41 + v40) = 0;
        if (SHIBYTE(__b[2].__locale_) >= 0)
          locale = __b;
        else
          locale = __b[0].__locale_;
        v45 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v32 + 96))(v32, locale, v40);
        v46 = v45;
        if (SHIBYTE(__b[2].__locale_) < 0)
        {
          operator delete(__b[0].__locale_);
          if (v46 != v40)
            goto LABEL_40;
        }
        else if (v45 != v40)
        {
          goto LABEL_40;
        }
      }
      v47 = "AnnotationRequest: " - v36 + 19;
      if (v47 < 1
        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v32 + 96))(v32, v36, "AnnotationRequest: " - v36 + 19) == v47)
      {
        *((_QWORD *)v31 + 3) = 0;
        goto LABEL_41;
      }
LABEL_40:
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_41:
      MEMORY[0x1A1AF49EC](v378);
      objc_msgSend(*(id *)(v30 + 8), "etaDescription");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "routeEtaType");

      v49 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v378, v49);
      v367 = v30;
      if (!LOBYTE(v378[0].__locale_))
        goto LABEL_70;
      v50 = (char *)v49 + *(_QWORD *)(*v49 - 24);
      v51 = *((_QWORD *)v50 + 5);
      v52 = *((_DWORD *)v50 + 2);
      v53 = *((_DWORD *)v50 + 36);
      if (v53 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
        v54 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
        v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
        std::locale::~locale(__b);
        *((_DWORD *)v50 + 36) = v53;
      }
      if ((v52 & 0xB0) == 0x20)
        v55 = "";
      else
        v55 = " selected:";
      if (!v51)
        goto LABEL_69;
      v56 = *((_QWORD *)v50 + 3);
      v38 = v56 <= 10;
      v57 = v56 - 10;
      v58 = v38 ? 0 : v57;
      if (v55 - " selected:" >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v51 + 96))(v51, " selected:", v55 - " selected:") != v55 - " selected:")
      {
        goto LABEL_69;
      }
      if (v58 >= 1)
      {
        if ((unint64_t)v58 >= 0x17)
        {
          v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17)
            v60 = v58 | 7;
          v61 = v60 + 1;
          v59 = (std::locale::__imp *)operator new(v60 + 1);
          __b[1].__locale_ = (std::locale::__imp *)v58;
          __b[2].__locale_ = (std::locale::__imp *)(v61 | 0x8000000000000000);
          __b[0].__locale_ = v59;
        }
        else
        {
          HIBYTE(__b[2].__locale_) = v58;
          v59 = (std::locale::__imp *)__b;
        }
        memset(v59, v53, v58);
        *((_BYTE *)v59 + v58) = 0;
        if (SHIBYTE(__b[2].__locale_) >= 0)
          v62 = __b;
        else
          v62 = __b[0].__locale_;
        v63 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v51 + 96))(v51, v62, v58);
        v64 = v63;
        if (SHIBYTE(__b[2].__locale_) < 0)
        {
          operator delete(__b[0].__locale_);
          if (v64 != v58)
            goto LABEL_69;
        }
        else if (v63 != v58)
        {
          goto LABEL_69;
        }
      }
      v65 = " selected:" - v55 + 10;
      if (v65 < 1
        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v51 + 96))(v51, v55, " selected:" - v55 + 10) == v65)
      {
        *((_QWORD *)v50 + 3) = 0;
        v30 = v367;
        goto LABEL_70;
      }
LABEL_69:
      std::ios_base::clear((std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)), *(_DWORD *)((char *)v49 + *(_QWORD *)(*v49 - 24) + 32) | 5);
      v30 = v367;
LABEL_70:
      MEMORY[0x1A1AF49EC](v378);
      std::ostream::operator<<();
      objc_msgSend(*(id *)(v30 + 8), "etaDescription");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "etaText");
      v67 = (void *)objc_claimAutoreleasedReturnValue();

      if (v67)
      {
        MEMORY[0x1A1AF49E0](__b, a2);
        if (LOBYTE(__b[0].__locale_))
        {
          v68 = (uint64_t)a2 + *(_QWORD *)(*a2 - 24);
          v69 = *(_QWORD *)(v68 + 40);
          v70 = *(_DWORD *)(v68 + 8);
          v71 = *(_DWORD *)(v68 + 144);
          if (v71 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v72 = std::locale::use_facet(v378, MEMORY[0x1E0DE4A90]);
            v71 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 32);
            std::locale::~locale(v378);
            *(_DWORD *)(v68 + 144) = v71;
          }
          if ((v70 & 0xB0) == 0x20)
            v73 = "";
          else
            v73 = " eta:";
          if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)" eta:", (uint64_t)v73, (uint64_t)"", v68, (char)v71))std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
        }
        MEMORY[0x1A1AF49EC](__b);
        objc_msgSend(*(id *)(v30 + 8), "etaDescription");
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "etaText");
        v75 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v76 = (const char *)objc_msgSend(v75, "UTF8String");
        v77 = strlen(v76);
        MEMORY[0x1A1AF49E0](__b, a2);
        if (LOBYTE(__b[0].__locale_))
        {
          v78 = (uint64_t)a2 + *(_QWORD *)(*a2 - 24);
          v79 = *(_QWORD *)(v78 + 40);
          v80 = *(_DWORD *)(v78 + 8);
          v81 = *(_DWORD *)(v78 + 144);
          if (v81 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v82 = std::locale::use_facet(v378, MEMORY[0x1E0DE4A90]);
            v81 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 32);
            std::locale::~locale(v378);
            *(_DWORD *)(v78 + 144) = v81;
          }
          if ((v80 & 0xB0) == 0x20)
            v83 = (uint64_t)&v76[v77];
          else
            v83 = (uint64_t)v76;
          v84 = std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)v76, v83, (uint64_t)&v76[v77], v78, (char)v81);
          v30 = v367;
          if (!v84)
            std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
        }
        MEMORY[0x1A1AF49EC](__b);

      }
      MEMORY[0x1A1AF49E0](v378, a2);
      if (LOBYTE(v378[0].__locale_))
      {
        v85 = (char *)a2 + *(_QWORD *)(*a2 - 24);
        v86 = *((_QWORD *)v85 + 5);
        v87 = *((_DWORD *)v85 + 2);
        v88 = *((_DWORD *)v85 + 36);
        if (v88 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v89 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
          v88 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 32);
          std::locale::~locale(__b);
          *((_DWORD *)v85 + 36) = v88;
        }
        if ((v87 & 0xB0) == 0x20)
          v90 = "";
        else
          v90 = "\n";
        if (!v86)
          goto LABEL_117;
        v91 = *((_QWORD *)v85 + 3);
        v38 = v91 <= 1;
        v92 = v91 - 1;
        v93 = v38 ? 0 : v92;
        if (v90 - "\n" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v86 + 96))(v86, "\n", v90 - "\n") != v90 - "\n")
        {
          goto LABEL_117;
        }
        if ((uint64_t)v93 >= 1)
        {
          if (v93 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v93 >= 0x17)
          {
            v95 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v93 | 7) != 0x17)
              v95 = v93 | 7;
            v96 = v95 + 1;
            v94 = (std::locale::__imp *)operator new(v95 + 1);
            __b[1].__locale_ = (std::locale::__imp *)v93;
            __b[2].__locale_ = (std::locale::__imp *)(v96 | 0x8000000000000000);
            __b[0].__locale_ = v94;
          }
          else
          {
            HIBYTE(__b[2].__locale_) = v93;
            v94 = (std::locale::__imp *)__b;
          }
          memset(v94, v88, v93);
          *((_BYTE *)v94 + v93) = 0;
          if (SHIBYTE(__b[2].__locale_) >= 0)
            v97 = __b;
          else
            v97 = __b[0].__locale_;
          v98 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v86 + 96))(v86, v97, v93);
          v99 = v98;
          if (SHIBYTE(__b[2].__locale_) < 0)
          {
            operator delete(__b[0].__locale_);
            if (v99 != v93)
            {
LABEL_117:
              std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
              v30 = v367;
              goto LABEL_118;
            }
          }
          else if (v98 != v93)
          {
            goto LABEL_117;
          }
        }
        v100 = "\n" - v90 + 1;
        if (v100 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v86 + 96))(v86, v90, "\n" - v90 + 1) == v100)
        {
          *((_QWORD *)v85 + 3) = 0;
          v30 = v367;
          goto LABEL_118;
        }
        goto LABEL_117;
      }
LABEL_118:
      MEMORY[0x1A1AF49EC](v378);
      v101 = *(_QWORD **)(v30 + 16);
      v370 = (_QWORD *)(v30 + 24);
      if (v101 != (_QWORD *)(v30 + 24))
      {
        do
        {
          v113 = v101[5];
          v112 = v101[6];
          v372 = v101;
          v373 = v112;
          while (v113 != v112)
          {
            MEMORY[0x1A1AF49E0](v378, a2);
            if (!LOBYTE(v378[0].__locale_))
              goto LABEL_170;
            v114 = (char *)a2 + *(_QWORD *)(*a2 - 24);
            v115 = *((_QWORD *)v114 + 5);
            v116 = *((_DWORD *)v114 + 2);
            v117 = *((_DWORD *)v114 + 36);
            if (v117 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
              v118 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
              v117 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 32);
              std::locale::~locale(__b);
              *((_DWORD *)v114 + 36) = v117;
            }
            if ((v116 & 0xB0) == 0x20)
              v119 = "";
            else
              v119 = "  ";
            if (!v115)
              goto LABEL_169;
            v120 = *((_QWORD *)v114 + 3);
            v38 = v120 <= 2;
            v121 = v120 - 2;
            v122 = v38 ? 0 : v121;
            if (v119 - "  " >= 1
              && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v115 + 96))(v115, "  ", v119 - "  ") != v119 - "  ")
            {
              goto LABEL_169;
            }
            if ((uint64_t)v122 >= 1)
            {
              if (v122 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v122 >= 0x17)
              {
                v124 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v122 | 7) != 0x17)
                  v124 = v122 | 7;
                v125 = v124 + 1;
                v123 = (std::locale::__imp *)operator new(v124 + 1);
                __b[1].__locale_ = (std::locale::__imp *)v122;
                __b[2].__locale_ = (std::locale::__imp *)(v125 | 0x8000000000000000);
                __b[0].__locale_ = v123;
              }
              else
              {
                HIBYTE(__b[2].__locale_) = v122;
                v123 = (std::locale::__imp *)__b;
              }
              memset(v123, v117, v122);
              *((_BYTE *)v123 + v122) = 0;
              if (SHIBYTE(__b[2].__locale_) >= 0)
                v126 = __b;
              else
                v126 = __b[0].__locale_;
              v127 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v115 + 96))(v115, v126, v122);
              v128 = v127;
              if (SHIBYTE(__b[2].__locale_) < 0)
              {
                operator delete(__b[0].__locale_);
                if (v128 != v122)
                  goto LABEL_169;
              }
              else if (v127 != v122)
              {
                goto LABEL_169;
              }
            }
            v129 = "  " - v119 + 2;
            if (v129 < 1
              || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v115 + 96))(v115, v119, "  " - v119 + 2) == v129)
            {
              *((_QWORD *)v114 + 3) = 0;
              goto LABEL_170;
            }
LABEL_169:
            std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_170:
            MEMORY[0x1A1AF49EC](v378);
            GEOPolylineCoordinateAsFullString();
            v375 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v130 = (const char *)objc_msgSend(v375, "UTF8String");
            v131 = strlen(v130);
            MEMORY[0x1A1AF49E0](v378, a2);
            if (!LOBYTE(v378[0].__locale_))
              goto LABEL_200;
            v132 = (char *)a2 + *(_QWORD *)(*a2 - 24);
            v133 = *((_QWORD *)v132 + 5);
            v134 = *((_DWORD *)v132 + 2);
            v135 = *((_DWORD *)v132 + 36);
            if (v135 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
              v136 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
              v135 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v136->__vftable[2].~facet_0)(v136, 32);
              std::locale::~locale(__b);
              *((_DWORD *)v132 + 36) = v135;
            }
            v137 = &v130[v131];
            if ((v134 & 0xB0) == 0x20)
              v138 = &v130[v131];
            else
              v138 = v130;
            if (!v133)
              goto LABEL_199;
            v139 = *((_QWORD *)v132 + 3);
            v38 = v139 <= v131;
            v140 = v139 - v131;
            v141 = v38 ? 0 : v140;
            if (v138 - v130 >= 1
              && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v133 + 96))(v133, v130, v138 - v130) != v138 - v130)
            {
              goto LABEL_199;
            }
            if ((uint64_t)v141 >= 1)
            {
              if (v141 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v141 >= 0x17)
              {
                v143 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v141 | 7) != 0x17)
                  v143 = v141 | 7;
                v144 = v143 + 1;
                v142 = (std::locale::__imp *)operator new(v143 + 1);
                __b[1].__locale_ = (std::locale::__imp *)v141;
                __b[2].__locale_ = (std::locale::__imp *)(v144 | 0x8000000000000000);
                __b[0].__locale_ = v142;
              }
              else
              {
                HIBYTE(__b[2].__locale_) = v141;
                v142 = (std::locale::__imp *)__b;
              }
              memset(v142, v135, v141);
              *((_BYTE *)v142 + v141) = 0;
              if (SHIBYTE(__b[2].__locale_) >= 0)
                v145 = __b;
              else
                v145 = __b[0].__locale_;
              v146 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v133 + 96))(v133, v145, v141);
              v147 = v146;
              if (SHIBYTE(__b[2].__locale_) < 0)
              {
                operator delete(__b[0].__locale_);
                if (v147 != v141)
                  goto LABEL_199;
              }
              else if (v146 != v141)
              {
                goto LABEL_199;
              }
            }
            if (v137 - v138 < 1
              || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v133 + 96))(v133, v138, v137 - v138) == v137 - v138)
            {
              *((_QWORD *)v132 + 3) = 0;
              goto LABEL_200;
            }
LABEL_199:
            std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_200:
            MEMORY[0x1A1AF49EC](v378);
            MEMORY[0x1A1AF49E0](v378, a2);
            if (!LOBYTE(v378[0].__locale_))
              goto LABEL_230;
            v148 = (char *)a2 + *(_QWORD *)(*a2 - 24);
            v149 = *((_QWORD *)v148 + 5);
            v150 = *((_DWORD *)v148 + 2);
            v151 = *((_DWORD *)v148 + 36);
            if (v151 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
              v152 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
              v151 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v152->__vftable[2].~facet_0)(v152, 32);
              std::locale::~locale(__b);
              *((_DWORD *)v148 + 36) = v151;
            }
            if ((v150 & 0xB0) == 0x20)
              v153 = "";
            else
              v153 = " - ";
            if (!v149)
              goto LABEL_229;
            v154 = *((_QWORD *)v148 + 3);
            v38 = v154 <= 3;
            v155 = v154 - 3;
            v156 = v38 ? 0 : v155;
            if (v153 - " - " >= 1
              && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v149 + 96))(v149, " - ", v153 - " - ") != v153 - " - ")
            {
              goto LABEL_229;
            }
            if ((uint64_t)v156 >= 1)
            {
              if (v156 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v156 >= 0x17)
              {
                v158 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v156 | 7) != 0x17)
                  v158 = v156 | 7;
                v159 = v158 + 1;
                v157 = (std::locale::__imp *)operator new(v158 + 1);
                __b[1].__locale_ = (std::locale::__imp *)v156;
                __b[2].__locale_ = (std::locale::__imp *)(v159 | 0x8000000000000000);
                __b[0].__locale_ = v157;
              }
              else
              {
                HIBYTE(__b[2].__locale_) = v156;
                v157 = (std::locale::__imp *)__b;
              }
              memset(v157, v151, v156);
              *((_BYTE *)v157 + v156) = 0;
              if (SHIBYTE(__b[2].__locale_) >= 0)
                v160 = __b;
              else
                v160 = __b[0].__locale_;
              v161 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v149 + 96))(v149, v160, v156);
              v162 = v161;
              if (SHIBYTE(__b[2].__locale_) < 0)
              {
                operator delete(__b[0].__locale_);
                if (v162 != v156)
                  goto LABEL_229;
              }
              else if (v161 != v156)
              {
                goto LABEL_229;
              }
            }
            v163 = " - " - v153 + 3;
            if (v163 < 1
              || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v149 + 96))(v149, v153, " - " - v153 + 3) == v163)
            {
              *((_QWORD *)v148 + 3) = 0;
              goto LABEL_230;
            }
LABEL_229:
            std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_230:
            MEMORY[0x1A1AF49EC](v378);
            GEOPolylineCoordinateAsFullString();
            v164 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v165 = (const char *)objc_msgSend(v164, "UTF8String");
            v166 = strlen(v165);
            MEMORY[0x1A1AF49E0](v378, a2);
            if (!LOBYTE(v378[0].__locale_))
              goto LABEL_260;
            v167 = (char *)a2 + *(_QWORD *)(*a2 - 24);
            v168 = *((_QWORD *)v167 + 5);
            v169 = *((_DWORD *)v167 + 2);
            v170 = *((_DWORD *)v167 + 36);
            if (v170 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
              v171 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
              v170 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 32);
              std::locale::~locale(__b);
              *((_DWORD *)v167 + 36) = v170;
            }
            v172 = &v165[v166];
            if ((v169 & 0xB0) == 0x20)
              v173 = &v165[v166];
            else
              v173 = v165;
            if (!v168)
              goto LABEL_259;
            v174 = *((_QWORD *)v167 + 3);
            v38 = v174 <= v166;
            v175 = v174 - v166;
            v176 = v38 ? 0 : v175;
            if (v173 - v165 >= 1
              && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v168 + 96))(v168, v165, v173 - v165) != v173 - v165)
            {
              goto LABEL_259;
            }
            if ((uint64_t)v176 >= 1)
            {
              if (v176 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v176 >= 0x17)
              {
                v178 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v176 | 7) != 0x17)
                  v178 = v176 | 7;
                v179 = v178 + 1;
                v177 = (std::locale::__imp *)operator new(v178 + 1);
                __b[1].__locale_ = (std::locale::__imp *)v176;
                __b[2].__locale_ = (std::locale::__imp *)(v179 | 0x8000000000000000);
                __b[0].__locale_ = v177;
              }
              else
              {
                HIBYTE(__b[2].__locale_) = v176;
                v177 = (std::locale::__imp *)__b;
              }
              memset(v177, v170, v176);
              *((_BYTE *)v177 + v176) = 0;
              if (SHIBYTE(__b[2].__locale_) >= 0)
                v180 = __b;
              else
                v180 = __b[0].__locale_;
              v181 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v168 + 96))(v168, v180, v176);
              v182 = v181;
              if (SHIBYTE(__b[2].__locale_) < 0)
              {
                operator delete(__b[0].__locale_);
                if (v182 != v176)
                  goto LABEL_259;
              }
              else if (v181 != v176)
              {
                goto LABEL_259;
              }
            }
            if (v172 - v173 < 1
              || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v168 + 96))(v168, v173, v172 - v173) == v172 - v173)
            {
              *((_QWORD *)v167 + 3) = 0;
              goto LABEL_260;
            }
LABEL_259:
            std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_260:
            MEMORY[0x1A1AF49EC](v378);
            MEMORY[0x1A1AF49E0](v378, a2);
            if (LOBYTE(v378[0].__locale_))
            {
              v183 = (char *)a2 + *(_QWORD *)(*a2 - 24);
              v184 = *((_QWORD *)v183 + 5);
              v185 = *((_DWORD *)v183 + 2);
              v186 = *((_DWORD *)v183 + 36);
              if (v186 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
                v187 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
                v186 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v187->__vftable[2].~facet_0)(v187, 32);
                std::locale::~locale(__b);
                *((_DWORD *)v183 + 36) = v186;
              }
              if ((v185 & 0xB0) == 0x20)
                v188 = "";
              else
                v188 = "\n";
              if (!v184)
                goto LABEL_137;
              v189 = *((_QWORD *)v183 + 3);
              v38 = v189 <= 1;
              v190 = v189 - 1;
              v191 = v38 ? 0 : v190;
              if (v188 - "\n" >= 1
                && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v184 + 96))(v184, "\n", v188 - "\n") != v188 - "\n")
              {
                goto LABEL_137;
              }
              if ((uint64_t)v191 >= 1)
              {
                if (v191 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                if (v191 >= 0x17)
                {
                  v193 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v191 | 7) != 0x17)
                    v193 = v191 | 7;
                  v194 = v193 + 1;
                  v192 = (std::locale::__imp *)operator new(v193 + 1);
                  __b[1].__locale_ = (std::locale::__imp *)v191;
                  __b[2].__locale_ = (std::locale::__imp *)(v194 | 0x8000000000000000);
                  __b[0].__locale_ = v192;
                }
                else
                {
                  HIBYTE(__b[2].__locale_) = v191;
                  v192 = (std::locale::__imp *)__b;
                }
                memset(v192, v186, v191);
                *((_BYTE *)v192 + v191) = 0;
                if (SHIBYTE(__b[2].__locale_) >= 0)
                  v195 = __b;
                else
                  v195 = __b[0].__locale_;
                v196 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v184 + 96))(v184, v195, v191);
                v197 = v196;
                if (SHIBYTE(__b[2].__locale_) < 0)
                {
                  operator delete(__b[0].__locale_);
                  if (v197 != v191)
                    goto LABEL_137;
                }
                else if (v196 != v191)
                {
                  goto LABEL_137;
                }
              }
              v198 = "\n" - v188 + 1;
              if (v198 >= 1
                && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v184 + 96))(v184, v188, "\n" - v188 + 1) != v198)
              {
LABEL_137:
                std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
                goto LABEL_138;
              }
              *((_QWORD *)v183 + 3) = 0;
            }
LABEL_138:
            MEMORY[0x1A1AF49EC](v378);

            v113 += 16;
            v112 = v373;
          }
          v199 = v372;
          v200 = (_QWORD *)v372[1];
          if (v200)
          {
            do
            {
              v201 = v200;
              v200 = (_QWORD *)*v200;
            }
            while (v200);
          }
          else
          {
            do
            {
              v201 = (_QWORD *)v199[2];
              v202 = *v201 == (_QWORD)v199;
              v199 = v201;
            }
            while (!v202);
          }
          v101 = v201;
        }
        while (v201 != v370);
      }
      MEMORY[0x1A1AF49E0](v378, a2);
      if (!LOBYTE(v378[0].__locale_))
        goto LABEL_10;
      v102 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v103 = *((_QWORD *)v102 + 5);
      v104 = *((_DWORD *)v102 + 2);
      v105 = *((_DWORD *)v102 + 36);
      if (v105 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v106 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
        v105 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 32);
        std::locale::~locale(__b);
        *((_DWORD *)v102 + 36) = v105;
      }
      if ((v104 & 0xB0) == 0x20)
        v107 = "";
      else
        v107 = "\n";
      if (!v103)
        goto LABEL_9;
      v108 = *((_QWORD *)v102 + 3);
      v38 = v108 <= 1;
      v109 = v108 - 1;
      v110 = v38 ? 0 : v109;
      if (v107 - "\n" >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v103 + 96))(v103, "\n", v107 - "\n") != v107 - "\n")
      {
        goto LABEL_9;
      }
      if ((uint64_t)v110 >= 1)
      {
        if (v110 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v110 >= 0x17)
        {
          v203 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v110 | 7) != 0x17)
            v203 = v110 | 7;
          v204 = v203 + 1;
          v111 = (std::locale::__imp *)operator new(v203 + 1);
          __b[1].__locale_ = (std::locale::__imp *)v110;
          __b[2].__locale_ = (std::locale::__imp *)(v204 | 0x8000000000000000);
          __b[0].__locale_ = v111;
        }
        else
        {
          HIBYTE(__b[2].__locale_) = v110;
          v111 = (std::locale::__imp *)__b;
        }
        memset(v111, v105, v110);
        *((_BYTE *)v111 + v110) = 0;
        if (SHIBYTE(__b[2].__locale_) >= 0)
          v205 = __b;
        else
          v205 = __b[0].__locale_;
        v206 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v103 + 96))(v103, v205, v110);
        v207 = v206;
        if ((SHIBYTE(__b[2].__locale_) & 0x80000000) == 0)
        {
          if (v206 == v110)
            goto LABEL_305;
LABEL_9:
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
          goto LABEL_10;
        }
        operator delete(__b[0].__locale_);
        if (v207 != v110)
          goto LABEL_9;
      }
LABEL_305:
      v208 = "\n" - v107 + 1;
      if (v208 >= 1
        && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v103 + 96))(v103, v107, "\n" - v107 + 1) != v208)
      {
        goto LABEL_9;
      }
      *((_QWORD *)v102 + 3) = 0;
LABEL_10:
      MEMORY[0x1A1AF49EC](v378);
      v30 = v367 + 48;
      v29 = v364;
    }
    v209 = v361;
    v210 = (_QWORD *)v361[1];
    if (v210)
    {
      do
      {
        v211 = v210;
        v210 = (_QWORD *)*v210;
      }
      while (v210);
    }
    else
    {
      do
      {
        v211 = (_QWORD *)v209[2];
        v202 = *v211 == (_QWORD)v209;
        v209 = v211;
      }
      while (!v202);
    }
    v3 = v211;
    if (v211 != v359)
      continue;
    break;
  }
LABEL_2:
  v4 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v4)
  {
    v5 = 0;
    do
    {
      v6 = *(id *)(v4 + 8 * v5);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Route Idx ", 10);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      objc_msgSend(v6, "displayEtaDescription");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "etaText");
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v10 = (const char *)objc_msgSend(v9, "UTF8String");
      v11 = strlen(v10);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, v11);
      LOBYTE(__b[0].__locale_) = 10;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)__b, 1);

      ++v5;
      v4 = *(_QWORD *)(a1 + 288);
    }
    while (v5 < (*(_QWORD *)(a1 + 296) - v4) >> 3);
  }
  v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"-- current placements --\n", 25);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 24) = 4;
  v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Idx", 3);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 10;
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"Lat", 3);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 10;
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"Long", 4);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 24) = 8;
  v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"Orient", 6);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 8;
  v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"Avoid", 5);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 8;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"Clipped", 7);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 8;
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Labels", 6);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 24) = 8;
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"Route", 5);
  v366 = v21 + 3;
  *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 8;
  v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"Balance", 7);
  v365 = v22 + 1;
  *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 8;
  v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"MinDist", 7);
  v363 = v23 + 2;
  *(_QWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 8;
  v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"Shr Cnt", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  v25 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v25)
  {
    v26 = 0;
    do
    {
      v212 = *(id *)(v25 + 8 * v26);
      objc_msgSend(v212, "routeInfo");
      v213 = (VKRouteInfo *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)((char *)v366 + *(_QWORD *)(*a2 - 24)) = 4;
      std::ostream::operator<<();
      if (v213)
      {
        v214 = md::LabelNavEtaLabeler::routeLabelStatesForRouteInfo((md::LabelNavEtaLabeler *)a1, v213);
        if (!v214 || (v215 = *(_QWORD *)v214, *(_QWORD *)v214 == *((_QWORD *)v214 + 1)))
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"no route label state\n", 21);
        }
        else
        {
          -[VKRouteInfo route](v213, "route");
          v216 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v216, "pointWithAltitudeCorrectionAtRouteCoordinate:", objc_msgSend(v212, "routeOffset"));

          if (*(_BYTE *)(v215 + 156))
          {
            v217 = *a2;
            *(_QWORD *)((char *)v366 + *(_QWORD *)(*a2 - 24)) = 10;
            *(_DWORD *)((char *)v365 + *(_QWORD *)(v217 - 24)) = *(_DWORD *)((_BYTE *)v365 + *(_QWORD *)(v217 - 24)) & 0xFFFFFEFB | 4;
            *(_QWORD *)((char *)v363 + *(_QWORD *)(v217 - 24)) = 4;
            v218 = (_QWORD *)std::ostream::operator<<();
            *(_QWORD *)((char *)v218 + *(_QWORD *)(*v218 - 24) + 24) = 10;
            v219 = (_QWORD *)std::ostream::operator<<();
            *(_QWORD *)((char *)v219 + *(_QWORD *)(*v219 - 24) + 24) = 8;
            switch(objc_msgSend(v212, "orientation"))
            {
              case 0u:
                HIBYTE(__b[2].__locale_) = 4;
                strcpy((char *)__b, "None");
                v220 = 4;
                break;
              case 1u:
                HIBYTE(__b[2].__locale_) = 13;
                v221 = "ArrowDownLeft";
                goto LABEL_336;
              case 2u:
                HIBYTE(__b[2].__locale_) = 14;
                strcpy((char *)__b, "ArrowDownRight");
                v220 = 14;
                break;
              case 3u:
                HIBYTE(__b[2].__locale_) = 15;
                strcpy((char *)__b, "ArrowDownMiddle");
                v220 = 15;
                break;
              case 4u:
                HIBYTE(__b[2].__locale_) = 9;
                strcpy((char *)__b, "ArrowLeft");
                v220 = 9;
                break;
              case 5u:
                HIBYTE(__b[2].__locale_) = 10;
                strcpy((char *)__b, "ArrowRight");
                v220 = 10;
                break;
              case 6u:
                HIBYTE(__b[2].__locale_) = 17;
                strcpy((char *)__b, "HalfArrowDownLeft");
                v220 = 17;
                break;
              case 7u:
                HIBYTE(__b[2].__locale_) = 18;
                strcpy((char *)__b, "HalfArrowDownRight");
                v220 = 18;
                break;
              case 8u:
                HIBYTE(__b[2].__locale_) = 21;
                strcpy((char *)__b, "ArrowDownDiagonalLeft");
                v220 = 21;
                break;
              case 9u:
                strcpy((char *)__b, "ArrowDownDiagonalRight");
                HIBYTE(__b[2].__locale_) = 22;
                v220 = 22;
                break;
              case 0xAu:
                HIBYTE(__b[2].__locale_) = 13;
                v221 = "ArrowUpMiddle";
LABEL_336:
                __b[0] = *(std::locale *)v221;
                *(std::locale::__imp **)((char *)&__b[0].__locale_ + 5) = *(std::locale::__imp **)(v221 + 5);
                BYTE5(__b[1].__locale_) = 0;
                v220 = 13;
                break;
              case 0xBu:
                HIBYTE(__b[2].__locale_) = 19;
                strcpy((char *)__b, "ArrowUpDiagonalLeft");
                v220 = 19;
                break;
              case 0xCu:
                HIBYTE(__b[2].__locale_) = 20;
                strcpy((char *)__b, "ArrowUpDiagonalRight");
                v220 = 20;
                break;
              case 0xDu:
                HIBYTE(__b[2].__locale_) = 7;
                strcpy((char *)__b, "NoArrow");
                v220 = 7;
                break;
              default:
                v220 = 0;
                HIBYTE(__b[2].__locale_) = 0;
                LOBYTE(__b[0].__locale_) = 0;
                break;
            }
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v219, (uint64_t)__b, v220);
            if (SHIBYTE(__b[2].__locale_) < 0)
              operator delete(__b[0].__locale_);
            *(_QWORD *)((char *)v366 + *(_QWORD *)(*a2 - 24)) = 8;
            v222 = (_QWORD *)std::ostream::operator<<();
            *(_QWORD *)((char *)v222 + *(_QWORD *)(*v222 - 24) + 24) = 8;
            v223 = (_QWORD *)std::ostream::operator<<();
            *(_QWORD *)((char *)v223 + *(_QWORD *)(*v223 - 24) + 24) = 8;
            v224 = (_QWORD *)std::ostream::operator<<();
            *(_QWORD *)((char *)v224 + *(_QWORD *)(*v224 - 24) + 24) = 8;
            v225 = (_QWORD *)std::ostream::operator<<();
            *(_QWORD *)((char *)v225 + *(_QWORD *)(*v225 - 24) + 24) = 8;
            if (*(float *)(v215 + 164) == 3.4028e38)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Max", 3);
            else
              std::ostream::operator<<();
            *(_QWORD *)((char *)v366 + *(_QWORD *)(*a2 - 24)) = 8;
            if (*(float *)(v215 + 160) == 3.4028e38)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Max", 3);
            else
              std::ostream::operator<<();
            *(_QWORD *)((char *)v366 + *(_QWORD *)(*a2 - 24)) = 8;
            std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      else
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"no route info\n", 14);
      }

      ++v26;
      v25 = *(_QWORD *)(a1 + 288);
    }
    while (v26 < (*(_QWORD *)(a1 + 296) - v25) >> 3);
  }
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 0;
  v226 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n-- last search results --\n", 27);
  *(_QWORD *)((char *)v226 + *(_QWORD *)(*v226 - 24) + 24) = 12;
  CACurrentMediaTime();
  v227 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v227)
  {
    v228 = 0;
    while (1)
    {
      v362 = *(id *)(v227 + 8 * v228);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\nRoute ", 7);
      v229 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v229, (uint64_t)": ", 2);
      objc_msgSend(v362, "routeInfo");
      v230 = (VKRouteInfo *)objc_claimAutoreleasedReturnValue();
      v360 = v228;
      if (!v230)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"no route info\n", 14);
        goto LABEL_350;
      }
      v231 = md::LabelNavEtaLabeler::routeLabelStatesForRouteInfo((md::LabelNavEtaLabeler *)a1, v230);
      v368 = *(_QWORD *)v231;
      if (*(double *)(*(_QWORD *)v231 + 208) == 0.0)
      {
        v233 = a2;
        v234 = "no last search\n";
        v235 = 15;
      }
      else
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"last search was ", 16);
        v232 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)" seconds ago. did find = ", 25);
        v233 = (_QWORD *)std::ostream::operator<<();
        v234 = "\n";
        v235 = 1;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v233, (uint64_t)v234, v235);
      if (a3)
      {
        v236 = *a2;
        *(_DWORD *)((char *)v365 + *(_QWORD *)(*a2 - 24)) &= 0xFFFFFEFB;
        *(_QWORD *)((char *)v363 + *(_QWORD *)(v236 - 24)) = 10;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Screen Projection Matrix :\n", 27);
        v237 = 0;
        v238 = v368 + 224;
        v376 = v230;
        do
        {
          for (i = 0; ; i += 32)
          {
            std::ostream::operator<<();
            if (i == 96)
              break;
            MEMORY[0x1A1AF49E0](v378, a2);
            if (LOBYTE(v378[0].__locale_))
            {
              v240 = (char *)a2 + *(_QWORD *)(*a2 - 24);
              v241 = *((_QWORD *)v240 + 5);
              v242 = *((_DWORD *)v240 + 2);
              v243 = *((_DWORD *)v240 + 36);
              if (v243 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
                v244 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
                v243 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v244->__vftable[2].~facet_0)(v244, 32);
                std::locale::~locale(__b);
                *((_DWORD *)v240 + 36) = v243;
              }
              if ((v242 & 0xB0) == 0x20)
                v245 = "";
              else
                v245 = ", ";
              if (!v241)
                goto LABEL_358;
              v246 = *((_QWORD *)v240 + 3);
              v38 = v246 <= 2;
              v247 = v246 - 2;
              v248 = v38 ? 0 : v247;
              if (v245 - ", " >= 1
                && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v241 + 96))(v241, ", ", v245 - ", ") != v245 - ", ")
              {
                goto LABEL_358;
              }
              if ((uint64_t)v248 >= 1)
              {
                if (v248 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                if (v248 >= 0x17)
                {
                  v250 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v248 | 7) != 0x17)
                    v250 = v248 | 7;
                  v251 = v250 + 1;
                  v249 = (std::locale::__imp *)operator new(v250 + 1);
                  __b[1].__locale_ = (std::locale::__imp *)v248;
                  __b[2].__locale_ = (std::locale::__imp *)(v251 | 0x8000000000000000);
                  __b[0].__locale_ = v249;
                }
                else
                {
                  HIBYTE(__b[2].__locale_) = v248;
                  v249 = (std::locale::__imp *)__b;
                }
                memset(v249, v243, v248);
                *((_BYTE *)v249 + v248) = 0;
                if (SHIBYTE(__b[2].__locale_) >= 0)
                  v252 = __b;
                else
                  v252 = __b[0].__locale_;
                v253 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v241 + 96))(v241, v252, v248);
                v254 = v253;
                if (SHIBYTE(__b[2].__locale_) < 0)
                {
                  operator delete(__b[0].__locale_);
                  if (v254 != v248)
                    goto LABEL_358;
                }
                else if (v253 != v248)
                {
                  goto LABEL_358;
                }
              }
              v255 = ", " - v245 + 2;
              if (v255 >= 1
                && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v241 + 96))(v241, v245, ", " - v245 + 2) != v255)
              {
LABEL_358:
                v230 = v376;
                std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
                goto LABEL_359;
              }
              *((_QWORD *)v240 + 3) = 0;
              v230 = v376;
            }
LABEL_359:
            MEMORY[0x1A1AF49EC](v378);
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          ++v237;
          v238 += 8;
        }
        while (v237 != 4);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        v256 = v366;
        v257 = *a2;
        *(_DWORD *)((char *)v365 + *(_QWORD *)(*a2 - 24)) = *(_DWORD *)((_BYTE *)v365 + *(_QWORD *)(*a2 - 24)) & 0xFFFFFEFB | 4;
        *(_QWORD *)((char *)v363 + *(_QWORD *)(v257 - 24)) = 4;
        if (*(_QWORD *)(v368 + 360) != *(_QWORD *)(v368 + 352))
        {
          *(_QWORD *)((char *)v366 + *(_QWORD *)(v257 - 24)) = 10;
          v258 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Lat", 3);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v258 - 24)) = 10;
          v259 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)"Long", 4);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v259 - 24)) = 8;
          v260 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)"Orient", 6);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v260 - 24)) = 8;
          v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)"Avoid", 5);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v261 - 24)) = 8;
          v262 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"Clipped", 7);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v262 - 24)) = 8;
          v263 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)"Labels", 6);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v263 - 24)) = 8;
          v264 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)"Route", 5);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v264 - 24)) = 8;
          v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)"Balance", 7);
          *(_QWORD *)((char *)v366 + *(_QWORD *)(*v265 - 24)) = 8;
          v266 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"MinDist", 7);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)"\n", 1);
          v267 = *(_QWORD **)(v368 + 64);
          if (v267)
            break;
        }
      }
LABEL_350:

      v228 = v360 + 1;
      v227 = *(_QWORD *)(a1 + 288);
      if (v360 + 1 >= (unint64_t)((*(_QWORD *)(a1 + 296) - v227) >> 3))
        return;
    }
    if (*(_QWORD *)(v368 + 352) == *(_QWORD *)(v368 + 360))
    {
      do
        v267 = (_QWORD *)*v267;
      while (v267);
      goto LABEL_350;
    }
    while (2)
    {
      v371 = v267;
      v269 = *(_QWORD *)(v368 + 352);
      v268 = *(_QWORD *)(v368 + 360);
      v374 = v268;
LABEL_400:
      if (v269 == v268)
      {
        v267 = (_QWORD *)*v371;
        if (!*v371)
          goto LABEL_350;
        continue;
      }
      break;
    }
    -[VKRouteInfo route](v230, "route");
    v270 = (void *)objc_claimAutoreleasedReturnValue();
    v271 = *(PolylineCoordinate *)v269;
    v272 = *(PolylineCoordinate *)(v269 + 8);
    ClosestCoordinateBetweenVertices = md::LabelNavEtaLabeler::findClosestCoordinateBetweenVertices(a1, (float64x2_t *)(v368 + 224), v270, v271, v272, *(float *)(v269 + 16));

    -[VKRouteInfo route](v230, "route");
    v274 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v274, "pointWithAltitudeCorrectionAtRouteCoordinate:", ClosestCoordinateBetweenVertices);

    v275 = *(int8x8_t *)(v269 + 40);
    if (!*(_QWORD *)&v275)
      goto LABEL_472;
    v276 = *((unsigned __int8 *)v371 + 16);
    v277 = (uint8x8_t)vcnt_s8(v275);
    v277.i16[0] = vaddlv_u8(v277);
    if (v277.u32[0] > 1uLL)
    {
      v278 = *((unsigned __int8 *)v371 + 16);
      if (*(_QWORD *)&v275 <= v276)
        v278 = v276 % *(_QWORD *)&v275;
    }
    else
    {
      v278 = (v275.i32[0] - 1) & v276;
    }
    v279 = *(uint64_t ****)(*(_QWORD *)(v269 + 32) + 8 * v278);
    if (!v279)
      goto LABEL_472;
    v280 = *v279;
    if (!*v279)
      goto LABEL_472;
    if (v277.u32[0] < 2uLL)
    {
      v281 = *(_QWORD *)&v275 - 1;
      while (1)
      {
        v283 = v280[1];
        if (v283 == (uint64_t *)v276)
        {
          if (*((unsigned __int8 *)v280 + 16) == (_DWORD)v276)
            goto LABEL_422;
        }
        else if (((unint64_t)v283 & v281) != v278)
        {
          goto LABEL_472;
        }
        v280 = (uint64_t **)*v280;
        if (!v280)
          goto LABEL_472;
      }
    }
    while (1)
    {
      v282 = (unint64_t)v280[1];
      if (v282 == v276)
      {
        if (*((unsigned __int8 *)v280 + 16) == (_DWORD)v276)
        {
LABEL_422:
          v284 = *a2;
          *(_QWORD *)((char *)v256 + *(_QWORD *)(*a2 - 24)) = 10;
          *(_DWORD *)((char *)v365 + *(_QWORD *)(v284 - 24)) = *(_DWORD *)((_BYTE *)v365 + *(_QWORD *)(v284 - 24)) & 0xFFFFFEFB | 4;
          *(_QWORD *)((char *)v363 + *(_QWORD *)(v284 - 24)) = 4;
          v285 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v285 + *(_QWORD *)(*v285 - 24) + 24) = 10;
          v286 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v286 + *(_QWORD *)(*v286 - 24) + 24) = 8;
          switch(*((_BYTE *)v371 + 16))
          {
            case 0:
              HIBYTE(v378[2].__locale_) = 4;
              strcpy((char *)v378, "None");
              v287 = 4;
              break;
            case 1:
              HIBYTE(v378[2].__locale_) = 13;
              v288 = "ArrowDownLeft";
              goto LABEL_436;
            case 2:
              HIBYTE(v378[2].__locale_) = 14;
              strcpy((char *)v378, "ArrowDownRight");
              v287 = 14;
              break;
            case 3:
              HIBYTE(v378[2].__locale_) = 15;
              strcpy((char *)v378, "ArrowDownMiddle");
              v287 = 15;
              break;
            case 4:
              HIBYTE(v378[2].__locale_) = 9;
              strcpy((char *)v378, "ArrowLeft");
              v287 = 9;
              break;
            case 5:
              HIBYTE(v378[2].__locale_) = 10;
              strcpy((char *)v378, "ArrowRight");
              v287 = 10;
              break;
            case 6:
              HIBYTE(v378[2].__locale_) = 17;
              strcpy((char *)v378, "HalfArrowDownLeft");
              v287 = 17;
              break;
            case 7:
              HIBYTE(v378[2].__locale_) = 18;
              strcpy((char *)v378, "HalfArrowDownRight");
              v287 = 18;
              break;
            case 8:
              HIBYTE(v378[2].__locale_) = 21;
              strcpy((char *)v378, "ArrowDownDiagonalLeft");
              v287 = 21;
              break;
            case 9:
              strcpy((char *)v378, "ArrowDownDiagonalRight");
              HIBYTE(v378[2].__locale_) = 22;
              v287 = 22;
              break;
            case 0xA:
              HIBYTE(v378[2].__locale_) = 13;
              v288 = "ArrowUpMiddle";
LABEL_436:
              v378[0] = *(std::locale *)v288;
              *(std::locale::__imp **)((char *)&v378[0].__locale_ + 5) = *(std::locale::__imp **)(v288 + 5);
              BYTE5(v378[1].__locale_) = 0;
              v287 = 13;
              break;
            case 0xB:
              HIBYTE(v378[2].__locale_) = 19;
              strcpy((char *)v378, "ArrowUpDiagonalLeft");
              v287 = 19;
              break;
            case 0xC:
              HIBYTE(v378[2].__locale_) = 20;
              strcpy((char *)v378, "ArrowUpDiagonalRight");
              v287 = 20;
              break;
            case 0xD:
              HIBYTE(v378[2].__locale_) = 7;
              strcpy((char *)v378, "NoArrow");
              v287 = 7;
              break;
            default:
              v287 = 0;
              HIBYTE(v378[2].__locale_) = 0;
              LOBYTE(v378[0].__locale_) = 0;
              break;
          }
          MEMORY[0x1A1AF49E0](v379, v286);
          if (v379[0])
          {
            v289 = (char *)v286 + *(_QWORD *)(*v286 - 24);
            v290 = *((_QWORD *)v289 + 5);
            v291 = *((_DWORD *)v289 + 2);
            v292 = *((_DWORD *)v289 + 36);
            if (v292 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v286 + *(_QWORD *)(*v286 - 24)));
              v293 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
              v292 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v293->__vftable[2].~facet_0)(v293, 32);
              std::locale::~locale(__b);
              *((_DWORD *)v289 + 36) = v292;
            }
            v294 = (char *)v378 + v287;
            if ((v291 & 0xB0) == 0x20)
              v295 = (std::locale *)((char *)v378 + v287);
            else
              v295 = v378;
            if (!v290)
              goto LABEL_468;
            v296 = *((_QWORD *)v289 + 3);
            v38 = v296 <= v287;
            v297 = v296 - v287;
            v298 = v38 ? 0 : v297;
            if ((char *)v295 - (char *)v378 >= 1
              && (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v290 + 96))(v290, v378, (char *)v295 - (char *)v378) != (char *)v295 - (char *)v378)
            {
              goto LABEL_468;
            }
            if ((uint64_t)v298 >= 1)
            {
              if (v298 > 0x7FFFFFFFFFFFFFF7)
                abort();
              v358 = v295;
              if (v298 >= 0x17)
              {
                v300 = (v298 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v298 | 7) != 0x17)
                  v300 = v298 | 7;
                v301 = v300 + 1;
                v299 = (std::locale::__imp *)operator new(v300 + 1);
                __b[1].__locale_ = (std::locale::__imp *)v298;
                __b[2].__locale_ = (std::locale::__imp *)(v301 | 0x8000000000000000);
                __b[0].__locale_ = v299;
              }
              else
              {
                HIBYTE(__b[2].__locale_) = v298;
                v299 = (std::locale::__imp *)__b;
              }
              memset(v299, v292, v298);
              *((_BYTE *)v299 + v298) = 0;
              if (SHIBYTE(__b[2].__locale_) >= 0)
                v302 = __b;
              else
                v302 = __b[0].__locale_;
              v303 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v290 + 96))(v290, v302, v298);
              v304 = v303;
              v295 = v358;
              if (SHIBYTE(__b[2].__locale_) < 0)
              {
                operator delete(__b[0].__locale_);
                if (v304 != v298)
                  goto LABEL_468;
              }
              else if (v303 != v298)
              {
                goto LABEL_468;
              }
            }
            if (v294 - (char *)v295 < 1
              || (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v290 + 96))(v290, v295, v294 - (char *)v295) == v294 - (char *)v295)
            {
              *((_QWORD *)v289 + 3) = 0;
              v256 = v366;
              v230 = v376;
            }
            else
            {
LABEL_468:
              v230 = v376;
              std::ios_base::clear((std::ios_base *)((char *)v286 + *(_QWORD *)(*v286 - 24)), *(_DWORD *)((char *)v286 + *(_QWORD *)(*v286 - 24) + 32) | 5);
              v256 = v366;
            }
          }
          MEMORY[0x1A1AF49EC](v379);
          if (SHIBYTE(v378[2].__locale_) < 0)
            operator delete(v378[0].__locale_);
          *(_QWORD *)((char *)v256 + *(_QWORD *)(*a2 - 24)) = 8;
          v305 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v305 + *(_QWORD *)(*v305 - 24) + 24) = 8;
          v306 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v306 + *(_QWORD *)(*v306 - 24) + 24) = 8;
          v307 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v307 + *(_QWORD *)(*v307 - 24) + 24) = 8;
          v308 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v308 + *(_QWORD *)(*v308 - 24) + 24) = 8;
LABEL_472:
          if (*(float *)(v269 + 24) == 3.4028e38)
          {
            MEMORY[0x1A1AF49E0](v378, a2);
            if (LOBYTE(v378[0].__locale_))
            {
              v309 = (char *)a2 + *(_QWORD *)(*a2 - 24);
              v310 = *((_QWORD *)v309 + 5);
              v311 = *((_DWORD *)v309 + 2);
              v312 = *((_DWORD *)v309 + 36);
              if (v312 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
                v313 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
                v312 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v313->__vftable[2].~facet_0)(v313, 32);
                std::locale::~locale(__b);
                *((_DWORD *)v309 + 36) = v312;
              }
              if ((v311 & 0xB0) == 0x20)
                v314 = "";
              else
                v314 = "Max";
              if (!v310)
                goto LABEL_503;
              v315 = *((_QWORD *)v309 + 3);
              v38 = v315 <= 3;
              v316 = v315 - 3;
              v317 = v38 ? 0 : v316;
              if (v314 - "Max" >= 1
                && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v310 + 96))(v310, "Max", v314 - "Max") != v314 - "Max")
              {
                goto LABEL_503;
              }
              if ((uint64_t)v317 >= 1)
              {
                if (v317 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                if (v317 >= 0x17)
                {
                  v319 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v317 | 7) != 0x17)
                    v319 = v317 | 7;
                  v320 = v319 + 1;
                  v318 = (std::locale::__imp *)operator new(v319 + 1);
                  __b[1].__locale_ = (std::locale::__imp *)v317;
                  __b[2].__locale_ = (std::locale::__imp *)(v320 | 0x8000000000000000);
                  __b[0].__locale_ = v318;
                }
                else
                {
                  HIBYTE(__b[2].__locale_) = v317;
                  v318 = (std::locale::__imp *)__b;
                }
                memset(v318, v312, v317);
                *((_BYTE *)v318 + v317) = 0;
                if (SHIBYTE(__b[2].__locale_) >= 0)
                  v321 = __b;
                else
                  v321 = __b[0].__locale_;
                v322 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v310 + 96))(v310, v321, v317);
                v323 = v322;
                if (SHIBYTE(__b[2].__locale_) < 0)
                {
                  operator delete(__b[0].__locale_);
                  if (v323 != v317)
                    goto LABEL_503;
                }
                else if (v322 != v317)
                {
                  goto LABEL_503;
                }
              }
              v324 = "Max" - v314 + 3;
              if (v324 < 1
                || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v310 + 96))(v310, v314, "Max" - v314 + 3) == v324)
              {
                *((_QWORD *)v309 + 3) = 0;
                v230 = v376;
              }
              else
              {
LABEL_503:
                v230 = v376;
                std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
              }
            }
            MEMORY[0x1A1AF49EC](v378);
          }
          else
          {
            std::ostream::operator<<();
          }
          *(_QWORD *)((char *)v256 + *(_QWORD *)(*a2 - 24)) = 8;
          if (*(float *)(v269 + 20) == 3.4028e38)
          {
            MEMORY[0x1A1AF49E0](v378, a2);
            if (LOBYTE(v378[0].__locale_))
            {
              v325 = (char *)a2 + *(_QWORD *)(*a2 - 24);
              v326 = *((_QWORD *)v325 + 5);
              v327 = *((_DWORD *)v325 + 2);
              v328 = *((_DWORD *)v325 + 36);
              if (v328 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
                v329 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
                v328 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v329->__vftable[2].~facet_0)(v329, 32);
                std::locale::~locale(__b);
                *((_DWORD *)v325 + 36) = v328;
              }
              if ((v327 & 0xB0) == 0x20)
                v330 = "";
              else
                v330 = "Max";
              if (!v326)
                goto LABEL_536;
              v331 = *((_QWORD *)v325 + 3);
              v38 = v331 <= 3;
              v332 = v331 - 3;
              v333 = v38 ? 0 : v332;
              if (v330 - "Max" >= 1
                && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v326 + 96))(v326, "Max", v330 - "Max") != v330 - "Max")
              {
                goto LABEL_536;
              }
              if ((uint64_t)v333 >= 1)
              {
                if (v333 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                if (v333 >= 0x17)
                {
                  v335 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v333 | 7) != 0x17)
                    v335 = v333 | 7;
                  v336 = v335 + 1;
                  v334 = (std::locale::__imp *)operator new(v335 + 1);
                  __b[1].__locale_ = (std::locale::__imp *)v333;
                  __b[2].__locale_ = (std::locale::__imp *)(v336 | 0x8000000000000000);
                  __b[0].__locale_ = v334;
                }
                else
                {
                  HIBYTE(__b[2].__locale_) = v333;
                  v334 = (std::locale::__imp *)__b;
                }
                memset(v334, v328, v333);
                *((_BYTE *)v334 + v333) = 0;
                if (SHIBYTE(__b[2].__locale_) >= 0)
                  v337 = __b;
                else
                  v337 = __b[0].__locale_;
                v338 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v326 + 96))(v326, v337, v333);
                v339 = v338;
                if (SHIBYTE(__b[2].__locale_) < 0)
                {
                  operator delete(__b[0].__locale_);
                  if (v339 != v333)
                    goto LABEL_536;
                }
                else if (v338 != v333)
                {
                  goto LABEL_536;
                }
              }
              v340 = "Max" - v330 + 3;
              if (v340 < 1
                || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v326 + 96))(v326, v330, "Max" - v330 + 3) == v340)
              {
                *((_QWORD *)v325 + 3) = 0;
                v230 = v376;
              }
              else
              {
LABEL_536:
                v230 = v376;
                std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
              }
            }
            MEMORY[0x1A1AF49EC](v378);
          }
          else
          {
            std::ostream::operator<<();
          }
          MEMORY[0x1A1AF49E0](v378, a2);
          if (!LOBYTE(v378[0].__locale_))
            goto LABEL_399;
          v341 = (char *)a2 + *(_QWORD *)(*a2 - 24);
          v342 = *((_QWORD *)v341 + 5);
          v343 = *((_DWORD *)v341 + 2);
          v344 = *((_DWORD *)v341 + 36);
          if (v344 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v345 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
            v344 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v345->__vftable[2].~facet_0)(v345, 32);
            std::locale::~locale(__b);
            *((_DWORD *)v341 + 36) = v344;
          }
          if ((v343 & 0xB0) == 0x20)
            v346 = "";
          else
            v346 = "\n";
          if (!v342)
            goto LABEL_398;
          v347 = *((_QWORD *)v341 + 3);
          v38 = v347 <= 1;
          v348 = v347 - 1;
          v349 = v38 ? 0 : v348;
          if (v346 - "\n" >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v342 + 96))(v342, "\n", v346 - "\n") != v346 - "\n")
          {
            goto LABEL_398;
          }
          if ((uint64_t)v349 < 1)
            goto LABEL_564;
          if (v349 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v349 >= 0x17)
          {
            v351 = (v349 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v349 | 7) != 0x17)
              v351 = v349 | 7;
            v352 = v351 + 1;
            v350 = (std::locale::__imp *)operator new(v351 + 1);
            __b[1].__locale_ = (std::locale::__imp *)v349;
            __b[2].__locale_ = (std::locale::__imp *)(v352 | 0x8000000000000000);
            __b[0].__locale_ = v350;
          }
          else
          {
            HIBYTE(__b[2].__locale_) = v349;
            v350 = (std::locale::__imp *)__b;
          }
          memset(v350, v344, v349);
          *((_BYTE *)v350 + v349) = 0;
          if (SHIBYTE(__b[2].__locale_) >= 0)
            v353 = __b;
          else
            v353 = __b[0].__locale_;
          v354 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v342 + 96))(v342, v353, v349);
          v355 = v354;
          if (SHIBYTE(__b[2].__locale_) < 0)
          {
            operator delete(__b[0].__locale_);
            if (v355 != v349)
              goto LABEL_398;
LABEL_564:
            v356 = "\n" - v346 + 1;
            if (v356 >= 1
              && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v342 + 96))(v342, v346, "\n" - v346 + 1) != v356)
            {
              goto LABEL_398;
            }
            *((_QWORD *)v341 + 3) = 0;
            v230 = v376;
            goto LABEL_399;
          }
          if (v354 == v349)
            goto LABEL_564;
LABEL_398:
          v230 = v376;
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_399:
          MEMORY[0x1A1AF49EC](v378);
          v269 += 72;
          v268 = v374;
          goto LABEL_400;
        }
      }
      else
      {
        if (v282 >= *(_QWORD *)&v275)
          v282 %= *(_QWORD *)&v275;
        if (v282 != v278)
          goto LABEL_472;
      }
      v280 = (uint64_t **)*v280;
      if (!v280)
        goto LABEL_472;
    }
  }
}

void sub_19F5F30FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_19F5F31E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F5F320C()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 144));
  JUMPOUT(0x19F5F3224);
}

void sub_19F5F321C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  MEMORY[0x1A1AF49EC](&a30);
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x19F5F3444);
}

void sub_19F5F3230(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23)
{
  std::locale::~locale(&a23);
  JUMPOUT(0x19F5F32E0);
}

void sub_19F5F3240(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23)
{
  std::locale::~locale(&a23);
  JUMPOUT(0x19F5F32D4);
}

void sub_19F5F3288()
{
  JUMPOUT(0x19F5F3448);
}

void sub_19F5F3290()
{
  void *v0;

  JUMPOUT(0x19F5F3298);
}

void sub_19F5F32D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF49EC](v1 - 144);
  _Unwind_Resume(a1);
}

void sub_19F5F32DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1A1AF49EC](v3 - 144);

  _Unwind_Resume(a1);
}

void sub_19F5F32EC()
{
  JUMPOUT(0x19F5F333CLL);
}

void sub_19F5F3314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5F3350()
{
  JUMPOUT(0x19F5F33D0);
}

void sub_19F5F3358()
{
  JUMPOUT(0x19F5F33D0);
}

void sub_19F5F336C()
{
  JUMPOUT(0x19F5F33D0);
}

void sub_19F5F337C()
{
  void *v0;

  JUMPOUT(0x19F5F3444);
}

void sub_19F5F3394()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x19F5F33CCLL);
}

void sub_19F5F33AC()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 144));
  JUMPOUT(0x19F5F33CCLL);
}

void sub_19F5F33C0()
{
  JUMPOUT(0x19F5F33D0);
}

void sub_19F5F33C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  MEMORY[0x1A1AF49EC](va);
  JUMPOUT(0x19F5F3444);
}

void sub_19F5F33E0()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x19F5F34A8);
}

void sub_19F5F3410()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x19F5F34BCLL);
}

void sub_19F5F3440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19F5F3450()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 144));
  JUMPOUT(0x19F5F34CCLL);
}

void sub_19F5F3468()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 144));
  JUMPOUT(0x19F5F34BCLL);
}

void sub_19F5F3478()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 144));
  JUMPOUT(0x19F5F34A8);
}

void sub_19F5F34A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  MEMORY[0x1A1AF49EC](va);
  JUMPOUT(0x19F5F34ECLL);
}

void sub_19F5F34C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);
  MEMORY[0x1A1AF49EC](va);

  JUMPOUT(0x19F5F34ECLL);
}

char *md::LabelNavEtaLabeler::routeLabelStatesForRouteInfo(md::LabelNavEtaLabeler *this, VKRouteInfo *a2)
{
  VKRouteInfo *v3;
  void *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  char *v11;

  v3 = a2;
  -[VKRouteInfo route](v3, "route");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (_QWORD *)*((_QWORD *)this + 58);
  if (!v5)
    goto LABEL_12;
  v6 = (char *)this + 464;
  v7 = (char *)this + 464;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (char *)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v6 && (unint64_t)v4 >= *((_QWORD *)v7 + 4))
  {

    v11 = v7 + 40;
  }
  else
  {
LABEL_12:

    v11 = 0;
  }

  return v11;
}

void sub_19F5F3580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t md::LabelNavEtaLabeler::findClosestCoordinateBetweenVertices(uint64_t a1, float64x2_t *a2, void *a3, PolylineCoordinate a4, PolylineCoordinate a5, float a6)
{
  PolylineCoordinate v7;
  id v10;
  void *v11;
  float offset;
  unsigned int index;
  const GEOComposedRoute *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float32x2_t v29;
  float32x2_t v30;
  unsigned int v31;
  double v32;
  double v33;
  float32x2_t v34;
  float v35;
  double v36;
  double v37;
  double v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;
  float32x2_t v46;
  double v47;
  double v48;
  double v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  double v71;
  PolylineCoordinate v73;
  PolylineCoordinate v74;
  PolylineCoordinate v75;

  v7 = a4;
  v73 = a5;
  v74 = a4;
  v10 = a3;
  v11 = v10;
  if (a6 == 0.0)
  {
    offset = v7.offset;
    index = v7.index;
  }
  else
  {
    v15 = (const GEOComposedRoute *)v10;
    v69 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v15, &v74);
    v70 = v16;
    v71 = v17;
    v65 = *a2;
    v66 = a2[2];
    v67 = a2[4];
    v68 = a2[6];
    v18 = a2[1].f64[1];
    v19 = a2[3].f64[1];
    v20 = a2[5].f64[1];
    v21 = a2[7].f64[1];
    v62 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v15, &v73);
    v63 = v22;
    v64 = v23;
    v24 = a2[1].f64[1];
    v25 = a2[3].f64[1];
    v26 = a2[7].f64[1];
    v27 = a2[5].f64[1];
    v58 = *a2;
    v59 = a2[2];
    v60 = a2[4];
    v61 = a2[6];

    v75 = v7;
    v28 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v15, &v75);
    v29 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v68, v65, v69), v66, v70), v67, v71), 1.0 / (v21 + v18 * v69 + v19 * v70 + v20 * v71)));
    v30 = vmla_n_f32(v29, vsub_f32(vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v61, v58, v62), v59, v63), v60, v64), 1.0 / (v26 + v24 * v62 + v25 * v63 + v27 * v64))), v29), a6);
    v31 = v7.index + 1;
    v34 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, v28), a2[2], v32), a2[4], v33), 1.0 / (a2[7].f64[1] + a2[1].f64[1] * v28 + a2[3].f64[1] * v32 + a2[5].f64[1] * v33)));
    if (v7.index + 1 <= a5.index)
    {
      index = 0;
      offset = -1.0;
      v35 = 3.4028e38;
      do
      {
        v46 = v34;
        v75.index = v31;
        v75.offset = 0.0;
        v47 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v15, &v75);
        v34 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, v47), a2[2], v48), a2[4], v49), 1.0 / (a2[7].f64[1] + a2[1].f64[1] * v47 + a2[3].f64[1] * v48 + a2[5].f64[1] * v49)));
        v50 = vsub_f32(v34, v46);
        v51 = vmul_f32(v50, v50);
        v52 = 0.0;
        if (vaddv_f32(v51) > 1.0e-15)
        {
          v53 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v51, 1), v51);
          v54 = vmul_f32(v50, vsub_f32(v30, v46));
          v52 = fminf(fmaxf(vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v54, 1), v54), v53).f32[0], 0.0), 1.0);
        }
        v55 = vsub_f32(v30, vmla_n_f32(v46, v50, v52));
        v56 = vaddv_f32(vmul_f32(v55, v55));
        if (v56 < v35)
        {
          v57 = (float)(v7.offset + (float)v7.index)
              + (float)(v52 * (float)((float)v31 - (float)(v7.offset + (float)v7.index)));
          index = vcvtms_u32_f32(v57);
          offset = v57 - floorf(v57);
          if (offset >= 1.0)
          {
            index += vcvtms_u32_f32(offset);
            offset = offset - floorf(offset);
          }
          v35 = v56;
        }
        v7 = (PolylineCoordinate)v31++;
      }
      while (v31 <= a5.index);
    }
    else
    {
      index = 0;
      offset = -1.0;
      v35 = 3.4028e38;
    }
    if (a5.offset != 0.0)
    {
      v75 = a5;
      v36 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v15, &v75);
      v39 = vsub_f32(vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, v36), a2[2], v37), a2[4], v38), 1.0 / (a2[7].f64[1] + a2[1].f64[1] * v36 + a2[3].f64[1] * v37 + a2[5].f64[1] * v38))), v34);
      v40 = vmul_f32(v39, v39);
      v41 = 0.0;
      if (vaddv_f32(v40) > 1.0e-15)
      {
        v42 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v40, 1), v40);
        v43 = vmul_f32(v39, vsub_f32(v30, v34));
        v41 = fminf(fmaxf(vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v43, 1), v43), v42).f32[0], 0.0), 1.0);
      }
      v44 = vsub_f32(v30, vmla_n_f32(v34, v39, v41));
      if (vaddv_f32(vmul_f32(v44, v44)) < v35)
      {
        v45 = (float)(v7.offset + (float)v7.index)
            + (float)((float)((float)((float)a5.index - (float)(v7.offset + (float)v7.index)) + a5.offset) * v41);
        index = vcvtms_u32_f32(v45);
        offset = v45 - floorf(v45);
        if (offset >= 1.0)
        {
          index += vcvtms_u32_f32(offset);
          offset = offset - floorf(offset);
        }
      }
    }
  }

  return index | ((unint64_t)LODWORD(offset) << 32);
}

void sub_19F5F3A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *md::LabelNavEtaLabeler::featuresForRoute(md::LabelNavEtaLabeler *this, VKRouteInfo *a2)
{
  VKRouteInfo *v3;
  void *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  char *v11;

  v3 = a2;
  -[VKRouteInfo route](v3, "route");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (_QWORD *)*((_QWORD *)this + 33);
  if (!v5)
    goto LABEL_12;
  v6 = (char *)this + 264;
  v7 = (char *)this + 264;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (char *)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v6 && (unint64_t)v4 >= *((_QWORD *)v7 + 4))
  {

    v11 = v7 + 40;
  }
  else
  {
LABEL_12:

    v11 = 0;
  }

  return v11;
}

void sub_19F5F3ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v5;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F5F3D88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v5;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F5F4058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::updateLabelPositions(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  id v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  int v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD *v21;
  unint64_t v22;
  GEOComposedRoute *v23;
  float32x2_t *v24;
  uint64_t v25;
  float32x2_t v26;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id *v50;
  id *v51;
  uint64_t *v52;
  uint64_t *v53;
  id *v54;
  id v55;
  _QWORD *v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v60;
  id v61;
  _QWORD *v62;
  uint64_t *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t i;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  NSObject *v123;
  uint8_t *v124;
  id *v125;
  id **v126;
  _QWORD *v127;
  md::LabelNavEtaLabeler *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  id v141;
  unsigned __int8 v142;
  _QWORD *v143;
  _QWORD *v144;
  unint64_t v145;
  BOOL v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  unsigned int v165;
  uint64_t v166;
  unsigned __int8 v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  _BYTE *v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t **v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  size_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  size_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  unsigned int v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  _BYTE *v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t **v222;
  uint64_t *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned __int8 v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t *v239;
  _BYTE *v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  BOOL v267;
  id v268;
  void *v269;
  uint64_t **v270;
  uint64_t *v271;
  uint64_t **v272;
  unint64_t v273;
  uint64_t *v274;
  unsigned __int8 v275;
  _QWORD **v276;
  _QWORD *v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  _BYTE *v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  unint64_t v292;
  _QWORD *v293;
  id v294;
  uint64_t **v295;
  uint64_t v296;
  uint64_t *v297;
  _QWORD *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t *v303;
  unsigned int v304;
  uint64_t *v305;
  uint64_t *v306;
  unsigned int v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  _OWORD *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  _BYTE *v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  id v339;
  uint64_t *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  id v354;
  void *v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t **v358;
  unint64_t v359;
  uint64_t *v360;
  unsigned __int8 v361;
  _QWORD **v362;
  _QWORD *v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  _BYTE *v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  _QWORD *v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  mdm::Allocator *v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t j;
  uint64_t v409;
  id k;
  void *v411;
  uint64_t v412;
  uint64_t **v413;
  uint64_t *v414;
  uint64_t **v415;
  unint64_t v416;
  uint64_t *v417;
  unsigned __int8 v418;
  _QWORD **v419;
  _QWORD *v420;
  uint64_t *v421;
  uint64_t v422;
  float *v423;
  unint64_t v424;
  uint64_t v425;
  float v426;
  unint64_t v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  void *v435;
  uint64_t v436;
  char v437;
  __int16 v438;
  uint64_t v439;
  BOOL v440;
  uint64_t v441;
  BOOL v442;
  uint64_t v443;
  _WORD *v444;
  void *v445;
  uint64_t v446;
  uint64_t *v447;
  _QWORD **v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  unsigned int v452;
  uint64_t v453;
  unsigned __int8 v454;
  _QWORD *v455;
  uint64_t *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  id v472;
  void *v473;
  void *v474;
  double v475;
  uint64_t v476;
  void *v477;
  BOOL v478;
  uint64_t v479;
  char v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  _QWORD *v484;
  NSObject *v485;
  uint8_t *v486;
  _QWORD *v487;
  _QWORD *v488;
  id v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t m;
  double v494;
  id v495;
  void *v496;
  _QWORD *v497;
  float *v498;
  unint64_t v499;
  BOOL v500;
  _QWORD *v501;
  md::LabelNavEtaLabeler *v502;
  id v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  id v508;
  void *v509;
  float *n;
  unint64_t v511;
  GEOComposedRoute *v512;
  GEOComposedRoute *v513;
  float *v514;
  _QWORD *v515;
  unint64_t v516;
  BOOL v517;
  _QWORD *v518;
  float v519;
  uint64_t v520;
  unsigned int v521;
  id v522;
  float v523;
  id v524;
  uint64_t v525;
  uint64_t v526;
  id v527;
  _QWORD *v528;
  uint64_t v529;
  _QWORD *v530;
  _QWORD *v531;
  unint64_t v532;
  BOOL v533;
  _QWORD *v534;
  BOOL v535;
  void *v536;
  uint64_t v537;
  unint64_t v538;
  void *v539;
  char v540;
  unsigned int v541;
  unsigned __int8 v542;
  char v543;
  VKRouteInfo *v544;
  void *v545;
  _QWORD *v546;
  _QWORD *v547;
  unint64_t v548;
  BOOL v549;
  _QWORD *v550;
  md::LabelNavEtaLabeler *v551;
  BOOL v552;
  int v553;
  NSObject *v554;
  const char *v555;
  float v556;
  unint64_t v557;
  const char *v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  id v564;
  md::LabelNavEtaLabeler *v565;
  unint64_t v566;
  _QWORD *v567;
  _QWORD *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  _QWORD *v575;
  uint64_t v576;
  void *v577;
  unint64_t v578;
  void *v580;
  BOOL v581;
  char *v582;
  char *v583;
  unint64_t v584;
  unint64_t v585;
  char *v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  void *v590;
  _BOOL4 v591;
  uint64_t v592;
  _OWORD *v593;
  __int128 *v594;
  uint64_t v595;
  __int128 v596;
  __int128 v597;
  uint64_t *v598;
  uint64_t **v599;
  uint64_t *v600;
  unint64_t v601;
  BOOL v602;
  uint64_t **v603;
  uint64_t *v604;
  uint64_t **v605;
  uint64_t *v606;
  id v607;
  void *v608;
  id v609;
  void *v610;
  id v611;
  _BYTE *v612;
  id v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t **v621;
  id v622;
  void *v623;
  id v624;
  _BOOL4 v625;
  id v626;
  BOOL v627;
  uint64_t *v628;
  uint64_t **v629;
  uint64_t **v630;
  unint64_t v631;
  uint64_t *v632;
  id v633;
  void *v634;
  uint64_t v635;
  md::LabelNavEtaLabeler *v636;
  _QWORD *v637;
  id v638;
  void *v639;
  id *v640;
  id *v641;
  uint64_t v642;
  void *v643;
  id v644;
  void *v645;
  md::LabelNavEtaLabeler *v646;
  unint64_t v647;
  void *v648;
  uint64_t v649;
  uint64_t *v650;
  uint64_t *v651;
  uint64_t **v652;
  unint64_t v653;
  BOOL v654;
  uint64_t **v655;
  void *v656;
  uint64_t v657;
  uint64_t v658;
  unsigned __int8 v659;
  BOOL v660;
  uint64_t *v661;
  uint64_t **v662;
  uint64_t *v663;
  _QWORD *v664;
  uint64_t *v665;
  void *v666;
  _QWORD *v667;
  _QWORD *v668;
  void *v669;
  uint64_t v670;
  char *v671;
  uint64_t v672;
  uint64_t *v673;
  void *v674;
  uint64_t v675;
  uint64_t v676;
  char v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  id v681;
  _QWORD *v682;
  _QWORD *v683;
  _QWORD *v684;
  void *v685;
  _QWORD *v686;
  _QWORD *v687;
  BOOL v688;
  uint64_t *v689;
  _QWORD *v690;
  void *v691;
  id **v692;
  uint64_t v693;
  _QWORD **v694;
  id v695;
  int v696;
  id **v697;
  char v698;
  float *v699;
  uint64_t **v701;
  uint64_t *v702;
  uint64_t *v703;
  _QWORD **v704;
  _QWORD *v705;
  uint64_t v706;
  uint64_t **v707;
  md::LabelNavEtaLabeler *v708;
  uint64_t v709;
  uint64_t *v710;
  int v711;
  uint64_t *v712;
  unint64_t *v713;
  _BYTE *v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  void *v727[2];
  void *__p[2];
  int v729;
  float64x2_t v730[24];
  void *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  _OWORD buf[2];
  _BYTE v737[128];
  _BYTE v738[128];
  _QWORD v739[3];
  _QWORD *v740;
  _BYTE v741[128];
  _QWORD v742[3];
  _QWORD *v743;
  uint8_t v744[32];
  _QWORD *v745;
  uint64_t v746;

  v746 = *MEMORY[0x1E0C80C00];
  v5 = *(id *)(a1 + 24);
  objc_msgSend(v5, "routeInfo");
  v685 = (void *)objc_claimAutoreleasedReturnValue();

  v731 = 0;
  v6 = geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(a1 + 24), &v731);
  if (v685)
    v7 = v6;
  else
    v7 = 1;
  if (v7 == 1)
  {
    md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)a1);
    goto LABEL_22;
  }
  v8 = (uint64_t *)(a1 + 576);
  v9 = a1 + 584;
  v10 = *(_QWORD *)(a1 + 584);
  v11 = *(_OWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 616) = v10;
  *(_OWORD *)(a1 + 576) = v11;
  v12 = *(_QWORD *)(a1 + 632);
  v13 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 632) = v13;
  *(_QWORD *)(a1 + 600) = v12;
  v14 = (_QWORD *)(v10 + 16);
  if (!v13)
    v14 = (_QWORD *)(a1 + 608);
  *v14 = a1 + 616;
  if (v12)
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 16);
  else
    v15 = (uint64_t *)(a1 + 576);
  *v15 = v9;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy(a1 + 576, *(_QWORD *)(a1 + 584));
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 576) = v9;
  *(_QWORD *)(a1 + 584) = 0;
  v682 = (_QWORD *)(a1 + 672);
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy(a1 + 672, *(_QWORD *)(a1 + 680));
  *(_QWORD *)(a1 + 696) = 0;
  v684 = (_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 672) = a1 + 680;
  *(_QWORD *)(a1 + 680) = 0;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy(a1 + 640, *(_QWORD *)(a1 + 648));
  *(_QWORD *)(a1 + 664) = 0;
  v697 = (id **)(a1 + 648);
  *(_QWORD *)(a1 + 640) = a1 + 648;
  *(_QWORD *)(a1 + 648) = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "forceEtaLabelPlacement"))
  {

LABEL_14:
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setForceEtaLabelPlacement:", 0);

    *(_BYTE *)(a1 + 449) = 0;
    v696 = 1;
    goto LABEL_15;
  }
  v17 = *(unsigned __int8 *)(a1 + 449);

  if (v17)
    goto LABEL_14;
  v696 = 0;
LABEL_15:
  v19 = v685;
  v20 = v19;
  v21 = *(_QWORD **)(a1 + 424);
  if (!v21)
  {
LABEL_21:

    objc_msgSend(v20, "route");
    v23 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
    md::LabelNavEtaLabeler::extinguishLabels((md::LabelNavEtaLabeler *)a1, v23);

    goto LABEL_22;
  }
  while (1)
  {
    v22 = v21[4];
    if (v22 <= (unint64_t)v19)
      break;
LABEL_17:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_21;
  }
  if (v22 < (unint64_t)v19)
  {
    ++v21;
    goto LABEL_17;
  }

  if ((__int128 **)(a1 + 216) != a3)
    std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__assign_with_size[abi:nn180100]<md::AvoidanceRectWithPriority*,md::AvoidanceRectWithPriority*>(a1 + 216, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(float *)(a1 + 248) = 0.01 / *(float *)(a2[1] + 176);
  v25 = a2[3];
  v24 = (float32x2_t *)a2[4];
  v26 = vdiv_f32((float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + 1064));
  __asm { FMOV            V2.2S, #-1.0 }
  v30 = *(double *)&v24[17];
  v31 = vcvtq_f64_f32(vmla_f32(_D2, v24[4], v26));
  v32 = vcvtq_f64_f32(vmla_f32(_D2, v24[5], v26));
  *(float64x2_t *)v744 = v31;
  *(float64x2_t *)&v744[16] = v32;
  geo::Frustum<double>::Frustum(v730, (double *)(v25 + 736), (double *)v744, v30);
  v681 = v20;
  *(_OWORD *)v727 = 0u;
  *(_OWORD *)__p = 0u;
  v729 = 1065353216;
  if (!*(_BYTE *)(a1 + 704))
  {
    std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType const&>((uint64_t)v727, 1uLL, 1);
    std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType const&>((uint64_t)v727, 2uLL, 2);
  }
  v699 = (float *)(a1 + 424);
  v708 = (md::LabelNavEtaLabeler *)a1;
  std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType>((uint64_t)v727, 4uLL, 4);

  v33 = a1;
  v694 = (_QWORD **)(a1 + 488);
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v33 + 488, *(_QWORD *)(v33 + 496));
  *(_QWORD *)(a1 + 512) = 0;
  v701 = (uint64_t **)(a1 + 496);
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_QWORD *)(a1 + 496) = 0;
  v690 = (_QWORD *)(a1 + 520);
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v33 + 520, *(_QWORD *)(v33 + 528));
  *(_QWORD *)(a1 + 544) = 0;
  v683 = (_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_QWORD *)(a1 + 528) = 0;
  v742[0] = &off_1E42CEE88;
  v742[1] = v727;
  v743 = v742;
  md::LabelNavEtaLabeler::extractAndSortAnnotations(a1, v681, v742);
  v34 = v743;
  if (v743 == v742)
  {
    v35 = 4;
    v34 = v742;
LABEL_32:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  else if (v743)
  {
    v35 = 5;
    goto LABEL_32;
  }
  v725 = 0u;
  v726 = 0u;
  v723 = 0u;
  v724 = 0u;
  v36 = *(id *)(a1 + 24);
  objc_msgSend(v36, "alternateRoutes");
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v692 = (id **)(a1 + 640);
  v703 = (uint64_t *)(a1 + 608);
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v723, v741, 16);
  if (!v38)
    goto LABEL_49;
  v39 = *(_QWORD *)v724;
  while (2)
  {
    v40 = 0;
    while (2)
    {
      if (*(_QWORD *)v724 != v39)
        objc_enumerationMutation(v37);
      v41 = *(void **)(*((_QWORD *)&v723 + 1) + 8 * v40);
      memset(v744, 0, sizeof(v744));
      LODWORD(v745) = 1065353216;
      std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType const&>((uint64_t)v744, 1uLL, 1);
      std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType const&>((uint64_t)v744, 2uLL, 2);
      std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType const&>((uint64_t)v744, 3uLL, 3);
      std::__hash_table<VKRouteEtaType,std::hash<VKRouteEtaType>,std::equal_to<VKRouteEtaType>,std::allocator<VKRouteEtaType>>::__emplace_unique_key_args<VKRouteEtaType,VKRouteEtaType>((uint64_t)v744, 4uLL, 4);
      v739[0] = &off_1E42CEED0;
      v739[1] = v744;
      v740 = v739;
      md::LabelNavEtaLabeler::extractAndSortAnnotations(a1, v41, v739);
      v42 = v740;
      if (v740 == v739)
      {
        v42 = v739;
        v43 = 4;
LABEL_43:
        (*(void (**)(void))(*v42 + 8 * v43))();
      }
      else if (v740)
      {
        v43 = 5;
        goto LABEL_43;
      }
      v44 = *(_QWORD **)&v744[16];
      if (*(_QWORD *)&v744[16])
      {
        do
        {
          v45 = (_QWORD *)*v44;
          operator delete(v44);
          v44 = v45;
        }
        while (v45);
      }
      v46 = *(void **)v744;
      *(_QWORD *)v744 = 0;
      if (v46)
        operator delete(v46);
      if (++v40 != v38)
        continue;
      break;
    }
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v723, v741, 16);
    if (v38)
      continue;
    break;
  }
LABEL_49:

  v47 = *v703;
  v48 = (_QWORD *)*v682;
  v735 = *v8;
  v734 = a1 + 584;
  v733 = v47;
  v732 = a1 + 616;
  *(_QWORD *)&buf[0] = a1 + 672;
  *((_QWORD *)&buf[0] + 1) = v48;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::insert_iterator<std::set<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>> &>((uint64_t)v744, (uint64_t)&v735, &v734, (uint64_t)&v733, &v732, (uint64_t *)buf);
  v49 = *v8;
  v50 = *v692;
  v735 = *v703;
  v734 = a1 + 616;
  v733 = v49;
  v732 = a1 + 584;
  *(_QWORD *)&buf[0] = a1 + 640;
  *((_QWORD *)&buf[0] + 1) = v50;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::insert_iterator<std::set<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>> &>((uint64_t)v744, (uint64_t)&v735, &v734, (uint64_t)&v733, &v732, (uint64_t *)buf);
  v51 = *v692;
  if (*v692 != (id *)v697)
  {
    v52 = (uint64_t *)(a1 + 464);
    v53 = (uint64_t *)(a1 + 264);
    do
    {
      v54 = v51 + 4;
      v55 = v51[4];
      v56 = (_QWORD *)*v52;
      if (!*v52)
        goto LABEL_63;
      v57 = v52;
      do
      {
        v58 = v56[4];
        _CF = v58 >= (unint64_t)v55;
        if (v58 >= (unint64_t)v55)
          v60 = v56;
        else
          v60 = v56 + 1;
        if (_CF)
          v57 = v56;
        v56 = (_QWORD *)*v60;
      }
      while (*v60);
      if (v57 == v52 || (unint64_t)v55 < v57[4])
LABEL_63:
        v57 = v52;

      v61 = *v54;
      v62 = (_QWORD *)*v53;
      if (!*v53)
        goto LABEL_75;
      v63 = v53;
      do
      {
        v64 = v62[4];
        v65 = v64 >= (unint64_t)v61;
        if (v64 >= (unint64_t)v61)
          v66 = v62;
        else
          v66 = v62 + 1;
        if (v65)
          v63 = v62;
        v62 = (_QWORD *)*v66;
      }
      while (*v66);
      if (v63 == v53 || (unint64_t)v61 < v63[4])
LABEL_75:
        v63 = v53;

      if (v57 == (uint64_t *)((char *)v708 + 464))
        goto LABEL_132;
      v67 = v57[5];
      if (v67 == v57[6])
        goto LABEL_130;
      while (1)
      {
        v68 = md::RouteRangeAnnotationRequest::operator==(v51 + 4, v67);
        v69 = v57[6];
        if ((v68 & 1) != 0)
          break;
        v67 += 384;
        if (v67 == v69)
          goto LABEL_131;
      }
      if (v67 == v69)
        goto LABEL_130;
      v70 = v67 + 384;
      if (v67 + 384 == v69)
        goto LABEL_125;
      do
      {
        v72 = *(_QWORD *)v70;
        *(_QWORD *)v70 = 0;
        v73 = *(void **)v67;
        *(_QWORD *)v67 = v72;

        v74 = *(_QWORD *)(v70 + 8);
        *(_QWORD *)(v70 + 8) = 0;
        v75 = *(void **)(v67 + 8);
        *(_QWORD *)(v67 + 8) = v74;

        v76 = v67 + 24;
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v67 + 16, *(_QWORD *)(v67 + 24));
        *(_QWORD *)(v67 + 16) = *(_QWORD *)(v70 + 16);
        v77 = *(_QWORD *)(v70 + 24);
        *(_QWORD *)(v67 + 24) = v77;
        v78 = *(_QWORD *)(v70 + 40);
        *(_QWORD *)(v67 + 40) = v78;
        if (v78)
        {
          *(_QWORD *)(v77 + 16) = v76;
          *(_QWORD *)(v70 + 16) = v70 + 24;
          *(_QWORD *)(v70 + 24) = 0;
          *(_QWORD *)(v70 + 40) = 0;
          if (!*(_QWORD *)(v67 + 72))
            goto LABEL_97;
        }
        else
        {
          *(_QWORD *)(v67 + 16) = v76;
          if (!*(_QWORD *)(v67 + 72))
            goto LABEL_97;
        }
        v79 = *(_QWORD **)(v67 + 64);
        if (v79)
        {
          do
          {
            v80 = (_QWORD *)*v79;
            operator delete(v79);
            v79 = v80;
          }
          while (v80);
        }
        *(_QWORD *)(v67 + 64) = 0;
        v81 = *(_QWORD *)(v67 + 56);
        if (v81)
        {
          for (i = 0; i != v81; ++i)
            *(_QWORD *)(*(_QWORD *)(v67 + 48) + 8 * i) = 0;
        }
        *(_QWORD *)(v67 + 72) = 0;
LABEL_97:
        v83 = *(_QWORD *)(v70 + 48);
        *(_QWORD *)(v70 + 48) = 0;
        v84 = *(void **)(v67 + 48);
        *(_QWORD *)(v67 + 48) = v83;
        if (v84)
          operator delete(v84);
        v85 = *(_QWORD *)(v70 + 64);
        v86 = *(_QWORD *)(v70 + 56);
        *(_QWORD *)(v67 + 64) = v85;
        *(_QWORD *)(v67 + 56) = v86;
        *(_QWORD *)(v70 + 56) = 0;
        v87 = *(_QWORD *)(v70 + 72);
        *(_QWORD *)(v67 + 72) = v87;
        *(_DWORD *)(v67 + 80) = *(_DWORD *)(v70 + 80);
        if (v87)
        {
          v88 = *(_QWORD *)(v85 + 8);
          if ((v86 & (v86 - 1)) != 0)
          {
            if (v88 >= v86)
              v88 %= v86;
          }
          else
          {
            v88 &= v86 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v67 + 48) + 8 * v88) = v67 + 64;
          *(_QWORD *)(v70 + 64) = 0;
          *(_QWORD *)(v70 + 72) = 0;
        }
        v90 = (uint64_t *)(v67 + 96);
        v89 = *(_QWORD *)(v67 + 96);
        *(_BYTE *)(v67 + 88) = *(_BYTE *)(v70 + 88);
        if (v89)
        {
          v91 = *(_QWORD *)(v67 + 104);
          v92 = v89;
          if (v91 != v89)
          {
            do
            {
              v93 = *(std::__shared_weak_count **)(v91 - 8);
              if (v93)
              {
                p_shared_owners = (unint64_t *)&v93->__shared_owners_;
                do
                  v95 = __ldaxr(p_shared_owners);
                while (__stlxr(v95 - 1, p_shared_owners));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v93->__on_zero_shared)(v93, v92);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              v91 -= 16;
            }
            while (v91 != v89);
            v92 = *v90;
          }
          *(_QWORD *)(v67 + 104) = v89;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v67 + 120) + 40))(*(_QWORD *)(v67 + 120), v92, *(_QWORD *)(v67 + 112) - v92);
          *v90 = 0;
          *(_QWORD *)(v67 + 104) = 0;
          *(_QWORD *)(v67 + 112) = 0;
        }
        *(_OWORD *)(v67 + 96) = *(_OWORD *)(v70 + 96);
        *(_QWORD *)(v67 + 112) = *(_QWORD *)(v70 + 112);
        *(_QWORD *)(v70 + 104) = 0;
        *(_QWORD *)(v70 + 112) = 0;
        *(_QWORD *)(v70 + 96) = 0;
        *(_BYTE *)(v67 + 136) = *(_BYTE *)(v70 + 136);
        *(_QWORD *)(v67 + 128) = *(_QWORD *)(v70 + 128);
        *(_DWORD *)(v67 + 140) = *(_DWORD *)(v70 + 140);
        *(_DWORD *)(v67 + 144) = *(_DWORD *)(v70 + 144);
        *(_DWORD *)(v67 + 148) = *(_DWORD *)(v70 + 148);
        *(_DWORD *)(v67 + 152) = *(_DWORD *)(v70 + 152);
        *(_OWORD *)(v67 + 172) = *(_OWORD *)(v70 + 172);
        *(_OWORD *)(v67 + 188) = *(_OWORD *)(v70 + 188);
        *(_DWORD *)(v67 + 204) = *(_DWORD *)(v70 + 204);
        *(_OWORD *)(v67 + 156) = *(_OWORD *)(v70 + 156);
        *(_BYTE *)(v67 + 216) = *(_BYTE *)(v70 + 216);
        *(_QWORD *)(v67 + 208) = *(_QWORD *)(v70 + 208);
        *(_QWORD *)(v67 + 224) = *(_QWORD *)(v70 + 224);
        *(_QWORD *)(v67 + 232) = *(_QWORD *)(v70 + 232);
        *(_QWORD *)(v67 + 240) = *(_QWORD *)(v70 + 240);
        *(_QWORD *)(v67 + 248) = *(_QWORD *)(v70 + 248);
        *(_QWORD *)(v67 + 256) = *(_QWORD *)(v70 + 256);
        *(_QWORD *)(v67 + 264) = *(_QWORD *)(v70 + 264);
        *(_QWORD *)(v67 + 272) = *(_QWORD *)(v70 + 272);
        *(_QWORD *)(v67 + 280) = *(_QWORD *)(v70 + 280);
        *(_QWORD *)(v67 + 288) = *(_QWORD *)(v70 + 288);
        *(_QWORD *)(v67 + 296) = *(_QWORD *)(v70 + 296);
        *(_QWORD *)(v67 + 304) = *(_QWORD *)(v70 + 304);
        *(_QWORD *)(v67 + 312) = *(_QWORD *)(v70 + 312);
        *(_QWORD *)(v67 + 320) = *(_QWORD *)(v70 + 320);
        *(_QWORD *)(v67 + 328) = *(_QWORD *)(v70 + 328);
        *(_QWORD *)(v67 + 336) = *(_QWORD *)(v70 + 336);
        *(_QWORD *)(v67 + 344) = *(_QWORD *)(v70 + 344);
        v96 = *(_QWORD *)(v67 + 352);
        if (v96)
        {
          v97 = (uint64_t *)(v67 + 352);
          v98 = *(_QWORD *)(v67 + 360);
          v71 = *(_QWORD *)(v67 + 352);
          if (v98 != v96)
          {
            do
            {
              v99 = *(_QWORD **)(v98 - 24);
              if (v99)
              {
                do
                {
                  v100 = (_QWORD *)*v99;
                  operator delete(v99);
                  v99 = v100;
                }
                while (v100);
              }
              v101 = *(void **)(v98 - 40);
              *(_QWORD *)(v98 - 40) = 0;
              if (v101)
                operator delete(v101);
              v98 -= 72;
            }
            while (v98 != v96);
            v71 = *v97;
          }
          *(_QWORD *)(v67 + 360) = v96;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v67 + 376) + 40))(*(_QWORD *)(v67 + 376), v71, *(_QWORD *)(v67 + 368) - v71);
          *v97 = 0;
          *(_QWORD *)(v67 + 360) = 0;
          *(_QWORD *)(v67 + 368) = 0;
        }
        *(_OWORD *)(v67 + 352) = *(_OWORD *)(v70 + 352);
        *(_QWORD *)(v67 + 368) = *(_QWORD *)(v70 + 368);
        *(_QWORD *)(v70 + 352) = 0;
        *(_QWORD *)(v70 + 360) = 0;
        *(_QWORD *)(v70 + 368) = 0;
        v70 += 384;
        v67 += 384;
        v53 = (uint64_t *)((char *)v708 + 264);
        v54 = v51 + 4;
      }
      while (v70 != v69);
      v69 = v57[6];
LABEL_125:
      if (v69 != v67)
      {
        v102 = v69 - 384;
        do
        {
          md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)(v102 + 48));
          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v102 + 16, *(_QWORD *)(v102 + 24));

          _ZF = v102 == v67;
          v102 -= 384;
        }
        while (!_ZF);
      }
      v57[6] = v67;
LABEL_130:
      v69 = v67;
LABEL_131:
      if (v57[5] == v69)
      {
        v106 = (uint64_t *)v57[1];
        v107 = v57;
        if (v106)
        {
          do
          {
            v108 = v106;
            v106 = (uint64_t *)*v106;
          }
          while (v106);
        }
        else
        {
          do
          {
            v108 = (uint64_t *)v107[2];
            _ZF = *v108 == (_QWORD)v107;
            v107 = v108;
          }
          while (!_ZF);
        }
        if (*((uint64_t **)v708 + 57) == v57)
          *((_QWORD *)v708 + 57) = v108;
        --*((_QWORD *)v708 + 60);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v708 + 58), v57);
        std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::linear_map::RouteLabelState,std::equal_to<md>,std::allocator<std::pair<md,md::RouteRangeAnnotationRequest>>,std::vector<std::allocator,std::pair<md,md::RouteRangeAnnotationRequest>>>>,0>((uint64_t)(v57 + 4));
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)v708 + 59) + 40))(*((_QWORD *)v708 + 59), v57, 64);
        if (v63 != v53)
          goto LABEL_133;
      }
      else
      {
LABEL_132:
        if (v63 != v53)
        {
LABEL_133:
          v103 = v63[5];
          if (v103 == v63[6])
            goto LABEL_153;
          do
          {
            v104 = md::RouteRangeAnnotationRequest::operator==(v54, v103);
            v105 = v63[6];
            if ((v104 & 1) != 0)
              break;
            v103 += 72;
          }
          while (v103 != v105);
          if (v103 == v105)
          {
LABEL_153:
            v105 = v103;
          }
          else
          {
            if (v103 + 72 == v105)
            {
              v117 = v103;
            }
            else
            {
              do
              {
                v109 = *(_QWORD *)(v103 + 72);
                *(_QWORD *)(v103 + 72) = 0;
                v110 = *(void **)v103;
                *(_QWORD *)v103 = v109;

                v111 = *(_QWORD *)(v103 + 80);
                *(_QWORD *)(v103 + 80) = 0;
                v112 = *(void **)(v103 + 8);
                *(_QWORD *)(v103 + 8) = v111;

                v113 = v103 + 24;
                std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v103 + 16, *(_QWORD *)(v103 + 24));
                v114 = *(_QWORD *)(v103 + 96);
                *(_QWORD *)(v103 + 16) = *(_QWORD *)(v103 + 88);
                *(_QWORD *)(v103 + 24) = v114;
                v115 = *(_QWORD *)(v103 + 112);
                *(_QWORD *)(v103 + 40) = v115;
                if (v115)
                {
                  *(_QWORD *)(v114 + 16) = v113;
                  *(_QWORD *)(v103 + 88) = v103 + 96;
                  *(_QWORD *)(v103 + 96) = 0;
                  *(_QWORD *)(v103 + 112) = 0;
                }
                else
                {
                  *(_QWORD *)(v103 + 16) = v113;
                }
                objc_storeStrong((id *)(v103 + 56), *(id *)(v103 + 128));
                v116 = *(void **)(v103 + 128);
                *(_QWORD *)(v103 + 128) = 0;

                v117 = v103 + 72;
                v118 = v103 + 144;
                v103 += 72;
              }
              while (v118 != v105);
              v105 = v63[6];
            }
            while (v105 != v117)
            {
              *(_QWORD *)(v105 - 24) = &off_1E42B4DD0;

              std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v105 - 56, *(_QWORD *)(v105 - 48));
              v119 = *(void **)(v105 - 72);
              v105 -= 72;

            }
            v63[6] = v117;
            v105 = v117;
          }
          if (v63[5] == v105)
          {
            v120 = (uint64_t *)v63[1];
            v121 = v63;
            if (v120)
            {
              do
              {
                v122 = v120;
                v120 = (uint64_t *)*v120;
              }
              while (v120);
            }
            else
            {
              do
              {
                v122 = (uint64_t *)v121[2];
                _ZF = *v122 == (_QWORD)v121;
                v121 = v122;
              }
              while (!_ZF);
            }
            if (*((uint64_t **)v708 + 32) == v63)
              *((_QWORD *)v708 + 32) = v122;
            --*((_QWORD *)v708 + 35);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v708 + 33), v63);
            std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,GEOComposedRoute * const {__strong}::_retain_ptr<VKLabelNavRouteEta * {__strong},GEOComposedRoute * const {__strong}::_retain_objc_arc,GEOComposedRoute * const {__strong}::_release_objc_arc,GEOComposedRoute * const {__strong}::_hash_objc,GEOComposedRoute * const {__strong}::_equal_objc>,std::equal_to<md>,std::allocator<std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>,std::vector<std::allocator,std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>>>,0>((uint64_t)(v63 + 4));
            (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)v708 + 34) + 40))(*((_QWORD *)v708 + 34), v63, 64);
          }
        }
      }
      if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
      v123 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
      if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
      {
        md::RouteRangeAnnotationRequest::to_string((md::RouteRangeAnnotationRequest *)v744, (uint64_t)v54);
        v124 = v744;
        if ((v744[23] & 0x80u) != 0)
          v124 = *(uint8_t **)v744;
        LODWORD(buf[0]) = 136315138;
        *(_QWORD *)((char *)buf + 4) = v124;
        _os_log_impl(&dword_19F029000, v123, OS_LOG_TYPE_INFO, "RouteRangeAnnotationRequest dropped - %s", (uint8_t *)buf, 0xCu);
        if ((char)v744[23] < 0)
          operator delete(*(void **)v744);
      }

      v125 = (id *)v51[1];
      if (v125)
      {
        do
        {
          v126 = (id **)v125;
          v125 = (id *)*v125;
        }
        while (v125);
      }
      else
      {
        do
        {
          v126 = (id **)v51[2];
          _ZF = *v126 == v51;
          v51 = (id *)v126;
        }
        while (!_ZF);
      }
      v51 = (id *)v126;
      v52 = (uint64_t *)((char *)v708 + 464);
    }
    while (v126 != v697);
  }
  v127 = (_QWORD *)*v690;
  v128 = v708;
  if ((_QWORD *)*v690 != v683)
  {
    v686 = (_QWORD *)((char *)v708 + 392);
    while (1)
    {
      v129 = v127[5];
      v687 = v127;
      v693 = v127[6];
      if (v129 != v693)
        break;
LABEL_603:
      v404 = v687;
      v405 = (_QWORD *)v687[1];
      if (v405)
      {
        do
        {
          v406 = v405;
          v405 = (_QWORD *)*v405;
        }
        while (v405);
      }
      else
      {
        do
        {
          v406 = (_QWORD *)v404[2];
          _ZF = *v406 == (_QWORD)v404;
          v404 = v406;
        }
        while (!_ZF);
      }
      v127 = v406;
      if (v406 == v683)
        goto LABEL_609;
    }
    v130 = 0;
    v698 = 0;
    while (1)
    {
      v704 = (_QWORD **)(v129 + 16);
      std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v129 + 16, *(_QWORD *)(v129 + 24));
      *(_QWORD *)(v129 + 40) = 0;
      *(_QWORD *)(v129 + 16) = v129 + 24;
      *(_QWORD *)(v129 + 24) = 0;
      v712 = (uint64_t *)(v129 + 24);
      objc_msgSend(*(id *)(v129 + 8), "etaDescription");
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      v132 = objc_msgSend(v131, "routeEtaType");

      v709 = v129;
      if (!v132)
        break;
      objc_msgSend(*(id *)(v129 + 8), "etaDescription");
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      v134 = objc_msgSend(v133, "routeEtaType");

      if (v134 != 4 || !v130)
        goto LABEL_321;
      objc_msgSend(*(id *)(v130 + 8), "etaDescription");
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v129 + 8), "etaDescription");
      v136 = (void *)objc_claimAutoreleasedReturnValue();
      v137 = objc_msgSend(v135, "compare:", v136);

      *(_QWORD *)v744 = objc_msgSend(*(id *)(v130 + 8), "start");
      v138 = *(_QWORD *)(*(_QWORD *)(a2[1] + 168) + 32);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v138 + 88))(&v735, v138, v744);
      *(_QWORD *)&buf[0] = objc_msgSend(*(id *)(v129 + 8), "start");
      v139 = *(_QWORD *)(*(_QWORD *)(a2[1] + 168) + 32);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v139 + 88))(&v734, v139, buf);
      if (!(_BYTE)v735)
        goto LABEL_294;
      if ((_BYTE)v734)
      {
        v140 = BYTE1(v735) == BYTE1(v734);
        if (v137)
          goto LABEL_321;
      }
      else
      {
LABEL_294:
        v140 = (v735 != 0) ^ (v734 == 0);
        if (v137)
          goto LABEL_321;
      }
      if (!v140)
      {
LABEL_321:
        if ((v698 & 1) != 0
          && (objc_msgSend(*(id *)(v129 + 8), "etaDescription"),
              v224 = (void *)objc_claimAutoreleasedReturnValue(),
              v225 = objc_msgSend(v224, "routeEtaType"),
              v224,
              v225 == 4))
        {
          v698 = 1;
        }
        else
        {
          v226 = objc_msgSend(*(id *)(v129 + 8), "start", v681);
          v227 = objc_msgSend(*(id *)(v129 + 8), "end");
          v228 = (uint64_t *)(v129 + 24);
          while (1)
          {
            v229 = *v228;
            v230 = v228;
            if (!*v228)
              break;
            while (1)
            {
              v228 = (uint64_t *)v229;
              v231 = *(_DWORD *)(v229 + 32);
              if (v231 >= 2)
                break;
              if (v231)
              {
                v232 = (uint64_t)v228;
                goto LABEL_365;
              }
              v229 = v228[1];
              if (!v229)
              {
                v230 = v228 + 1;
                goto LABEL_329;
              }
            }
          }
LABEL_329:
          v232 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v129 + 32) + 16))(*(_QWORD *)(v129 + 32), 72, 8);
          *(_DWORD *)(v232 + 32) = 1;
          *(_QWORD *)(v232 + 48) = 0;
          *(_QWORD *)(v232 + 56) = 0;
          *(_QWORD *)(v232 + 40) = 0;
          {
            v402 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v402, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          *(_QWORD *)(v232 + 64) = mdm::Allocator::instance(void)::alloc;
          *(_QWORD *)v232 = 0;
          *(_QWORD *)(v232 + 8) = 0;
          *(_QWORD *)(v232 + 16) = v228;
          *v230 = v232;
          v234 = (_QWORD *)**v704;
          v235 = v232;
          if (v234)
          {
            *v704 = v234;
            v235 = *v230;
          }
          v236 = *v712;
          _ZF = v235 == *v712;
          *(_BYTE *)(v235 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v237 = *(uint64_t **)(v235 + 16);
              if (*((_BYTE *)v237 + 24))
                break;
              v238 = v237[2];
              v239 = *(uint64_t **)v238;
              if (*(uint64_t **)v238 == v237)
              {
                v242 = *(_QWORD *)(v238 + 8);
                if (!v242 || (v243 = *(unsigned __int8 *)(v242 + 24), v240 = (_BYTE *)(v242 + 24), v243))
                {
                  if (*v237 == v235)
                  {
                    v244 = *(uint64_t ***)(v235 + 16);
                  }
                  else
                  {
                    v244 = (uint64_t **)v237[1];
                    v245 = *v244;
                    v237[1] = (uint64_t)*v244;
                    if (v245)
                    {
                      v245[2] = (uint64_t)v237;
                      v238 = v237[2];
                    }
                    v244[2] = (uint64_t *)v238;
                    *(_QWORD *)(v237[2] + 8 * (*(_QWORD *)v237[2] != (_QWORD)v237)) = v244;
                    *v244 = v237;
                    v237[2] = (uint64_t)v244;
                    v238 = (uint64_t)v244[2];
                    v237 = *(uint64_t **)v238;
                  }
                  *((_BYTE *)v244 + 24) = 1;
                  *(_BYTE *)(v238 + 24) = 0;
                  v248 = v237[1];
                  *(_QWORD *)v238 = v248;
                  if (v248)
                    *(_QWORD *)(v248 + 16) = v238;
                  v237[2] = *(_QWORD *)(v238 + 16);
                  *(_QWORD *)(*(_QWORD *)(v238 + 16) + 8 * (**(_QWORD **)(v238 + 16) != v238)) = v237;
                  v237[1] = v238;
                  goto LABEL_363;
                }
              }
              else if (!v239 || (v241 = *((unsigned __int8 *)v239 + 24), v240 = v239 + 3, v241))
              {
                if (*v237 == v235)
                {
                  v246 = *(_QWORD *)(v235 + 8);
                  *v237 = v246;
                  if (v246)
                  {
                    *(_QWORD *)(v246 + 16) = v237;
                    v238 = v237[2];
                  }
                  *(_QWORD *)(v235 + 16) = v238;
                  *(_QWORD *)(v237[2] + 8 * (*(_QWORD *)v237[2] != (_QWORD)v237)) = v235;
                  *(_QWORD *)(v235 + 8) = v237;
                  v237[2] = v235;
                  v238 = *(_QWORD *)(v235 + 16);
                }
                else
                {
                  v235 = *(_QWORD *)(v235 + 16);
                }
                *(_BYTE *)(v235 + 24) = 1;
                *(_BYTE *)(v238 + 24) = 0;
                v237 = *(uint64_t **)(v238 + 8);
                v247 = *v237;
                *(_QWORD *)(v238 + 8) = *v237;
                if (v247)
                  *(_QWORD *)(v247 + 16) = v238;
                v237[2] = *(_QWORD *)(v238 + 16);
                *(_QWORD *)(*(_QWORD *)(v238 + 16) + 8 * (**(_QWORD **)(v238 + 16) != v238)) = v237;
                *v237 = v238;
LABEL_363:
                *(_QWORD *)(v238 + 16) = v237;
                break;
              }
              *((_BYTE *)v237 + 24) = 1;
              v235 = v238;
              *(_BYTE *)(v238 + 24) = v238 == v236;
              *v240 = 1;
            }
            while (v238 != v236);
          }
          ++*(_QWORD *)(v129 + 40);
LABEL_365:
          v249 = *(uint64_t **)(v232 + 48);
          v250 = *(_QWORD *)(v232 + 56);
          if ((unint64_t)v249 >= v250)
          {
            v252 = *(_QWORD *)(v232 + 40);
            v253 = ((uint64_t)v249 - v252) >> 4;
            v254 = v253 + 1;
            if ((unint64_t)(v253 + 1) >> 60)
              goto LABEL_1019;
            v255 = v250 - v252;
            if (v255 >> 3 > v254)
              v254 = v255 >> 3;
            if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF0)
              v256 = 0xFFFFFFFFFFFFFFFLL;
            else
              v256 = v254;
            if (v256)
            {
              v257 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v232 + 64) + 16))(*(_QWORD *)(v232 + 64), 16 * v256, 4);
              v258 = (uint64_t *)(v257 + 16 * v253);
              v259 = v257 + 16 * v256;
              if (v257)
              {
                *v258 = v226;
                v258[1] = v227;
              }
            }
            else
            {
              v259 = 0;
              v258 = (uint64_t *)(16 * v253);
            }
            v261 = *(_QWORD *)(v232 + 40);
            v260 = *(_QWORD *)(v232 + 48);
            v262 = v258;
            if (v260 != v261)
            {
              do
              {
                *((_OWORD *)v262 - 1) = *(_OWORD *)(v260 - 16);
                v262 -= 2;
                v260 -= 16;
              }
              while (v260 != v261);
              v260 = *(_QWORD *)(v232 + 40);
            }
            v251 = v258 + 2;
            *(_QWORD *)(v232 + 40) = v262;
            *(_QWORD *)(v232 + 48) = v258 + 2;
            v263 = *(_QWORD *)(v232 + 56);
            *(_QWORD *)(v232 + 56) = v259;
            if (v260)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v232 + 64) + 40))(*(_QWORD *)(v232 + 64), v260, v263 - v260);
          }
          else
          {
            if (v249)
            {
              *v249 = v226;
              v249[1] = v227;
            }
            v251 = v249 + 2;
          }
          *(_QWORD *)(v232 + 48) = v251;
LABEL_385:
          v129 = v709;
          objc_msgSend(*(id *)(v709 + 8), "etaDescription", v681);
          v264 = (void *)objc_claimAutoreleasedReturnValue();
          v265 = objc_msgSend(v264, "routeEtaType");

          v266 = 0x555555555555555;
          v267 = v265 == 4;
          v268 = *(id *)v709;
          v269 = v268;
          v270 = v701;
          v271 = *v701;
          v272 = v701;
          if (*v701)
          {
            while (1)
            {
              while (1)
              {
                v270 = (uint64_t **)v271;
                v273 = v271[4];
                if ((unint64_t)v268 >= v273)
                  break;
                v271 = *v270;
                v272 = v270;
                if (!*v270)
                  goto LABEL_392;
              }
              if (v273 >= (unint64_t)v268)
                break;
              v271 = v270[1];
              if (!v271)
              {
                v272 = v270 + 1;
                goto LABEL_392;
              }
            }
            v274 = (uint64_t *)v270;
          }
          else
          {
LABEL_392:
            v274 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v708 + 63) + 16))(*((_QWORD *)v708 + 63), 72, 8);
            v274[4] = (uint64_t)v269;
            v274[5] = 0;
            v274[6] = 0;
            v274[7] = 0;
            v276 = v694;
            if ((v275 & 1) == 0)
            {
              v276 = v694;
              if (v397)
              {
                v398 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v398, "VectorKitLabels", 0x5ED09DD50000000FLL);
                v276 = v694;
              }
            }
            v274[8] = mdm::Allocator::instance(void)::alloc;
            *v274 = 0;
            v274[1] = 0;
            v274[2] = (uint64_t)v270;
            *v272 = v274;
            v277 = (_QWORD *)**v276;
            v278 = v274;
            if (v277)
            {
              *v276 = v277;
              v278 = *v272;
            }
            v279 = *v701;
            *((_BYTE *)v278 + 24) = v278 == *v701;
            if (v278 != v279)
            {
              do
              {
                v280 = v278[2];
                if (*(_BYTE *)(v280 + 24))
                  break;
                v281 = *(uint64_t **)(v280 + 16);
                v282 = *v281;
                if (*v281 == v280)
                {
                  v285 = v281[1];
                  if (!v285 || (v286 = *(unsigned __int8 *)(v285 + 24), v283 = (_BYTE *)(v285 + 24), v286))
                  {
                    if (*(uint64_t **)v280 == v278)
                    {
                      v287 = (uint64_t *)v278[2];
                    }
                    else
                    {
                      v287 = *(uint64_t **)(v280 + 8);
                      v288 = *v287;
                      *(_QWORD *)(v280 + 8) = *v287;
                      if (v288)
                      {
                        *(_QWORD *)(v288 + 16) = v280;
                        v281 = *(uint64_t **)(v280 + 16);
                      }
                      v287[2] = (uint64_t)v281;
                      *(_QWORD *)(*(_QWORD *)(v280 + 16) + 8 * (**(_QWORD **)(v280 + 16) != v280)) = v287;
                      *v287 = v280;
                      *(_QWORD *)(v280 + 16) = v287;
                      v281 = (uint64_t *)v287[2];
                      v280 = *v281;
                    }
                    *((_BYTE *)v287 + 24) = 1;
                    *((_BYTE *)v281 + 24) = 0;
                    v291 = *(_QWORD *)(v280 + 8);
                    *v281 = v291;
                    if (v291)
                      *(_QWORD *)(v291 + 16) = v281;
                    *(_QWORD *)(v280 + 16) = v281[2];
                    *(_QWORD *)(v281[2] + 8 * (*(_QWORD *)v281[2] != (_QWORD)v281)) = v280;
                    *(_QWORD *)(v280 + 8) = v281;
                    goto LABEL_422;
                  }
                }
                else if (!v282 || (v284 = *(unsigned __int8 *)(v282 + 24), v283 = (_BYTE *)(v282 + 24), v284))
                {
                  if (*(uint64_t **)v280 == v278)
                  {
                    v289 = v278[1];
                    *(_QWORD *)v280 = v289;
                    if (v289)
                    {
                      *(_QWORD *)(v289 + 16) = v280;
                      v281 = *(uint64_t **)(v280 + 16);
                    }
                    v278[2] = (uint64_t)v281;
                    *(_QWORD *)(*(_QWORD *)(v280 + 16) + 8 * (**(_QWORD **)(v280 + 16) != v280)) = v278;
                    v278[1] = v280;
                    *(_QWORD *)(v280 + 16) = v278;
                    v281 = (uint64_t *)v278[2];
                  }
                  else
                  {
                    v278 = (uint64_t *)v278[2];
                  }
                  *((_BYTE *)v278 + 24) = 1;
                  *((_BYTE *)v281 + 24) = 0;
                  v280 = v281[1];
                  v290 = *(uint64_t **)v280;
                  v281[1] = *(_QWORD *)v280;
                  if (v290)
                    v290[2] = (uint64_t)v281;
                  *(_QWORD *)(v280 + 16) = v281[2];
                  *(_QWORD *)(v281[2] + 8 * (*(_QWORD *)v281[2] != (_QWORD)v281)) = v280;
                  *(_QWORD *)v280 = v281;
LABEL_422:
                  v281[2] = v280;
                  break;
                }
                *(_BYTE *)(v280 + 24) = 1;
                v278 = v281;
                *((_BYTE *)v281 + 24) = v281 == v279;
                *v283 = 1;
              }
              while (v281 != v279);
            }
            v269 = 0;
            ++*((_QWORD *)v708 + 64);
          }
          v293 = (_QWORD *)v274[6];
          v292 = v274[7];
          if ((unint64_t)v293 >= v292)
          {
            v331 = v274[5];
            v332 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v293 - v331) >> 4);
            v333 = v332 + 1;
            if (v332 + 1 > 0x555555555555555)
              abort();
            v334 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v292 - v331) >> 4);
            if (2 * v334 > v333)
              v333 = 2 * v334;
            if (v334 < 0x2AAAAAAAAAAAAAALL)
              v266 = v333;
            v745 = v274 + 8;
            if (v266)
              v335 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v274[8] + 16))(v274[8], 48 * v266, 8);
            else
              v335 = 0;
            v337 = (_QWORD *)(v335 + 48 * v332);
            *(_QWORD *)v744 = v335;
            *(_QWORD *)&v744[8] = v337;
            *(_QWORD *)&v744[16] = v337;
            *(_QWORD *)&v744[24] = v335 + 48 * v266;
            if (v335)
            {
              *v337 = *(id *)v709;
              v338 = (_QWORD *)(v335 + 48 * v332);
              v339 = *(id *)(v709 + 8);
              v338[2] = 0;
              v340 = v338 + 2;
              v341 = *(_QWORD *)(v709 + 32);
              v338[3] = 0;
              v338 += 3;
              *(v338 - 2) = v339;
              v338[1] = v341;
              v338[2] = 0;
              *v340 = (uint64_t)v338;
              std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>(v340, *(_QWORD **)(v709 + 16), v712);
              v337 = *(_QWORD **)&v744[8];
              v342 = *(_QWORD **)&v744[16];
            }
            else
            {
              v342 = v337;
            }
            v336 = v342 + 6;
            v343 = v274[5];
            v344 = v274[6];
            if (v344 == v343)
            {
              v274[5] = (uint64_t)v337;
              v274[6] = (uint64_t)v336;
              v352 = v274[7];
              v274[7] = *(_QWORD *)&v744[24];
            }
            else
            {
              v345 = 0;
              do
              {
                v346 = &v337[v345 / 8];
                v347 = v344 + v345;
                v348 = *(_OWORD *)(v344 + v345 - 48);
                *(_QWORD *)(v347 - 48) = 0;
                *(_QWORD *)(v347 - 40) = 0;
                *((_OWORD *)v346 - 3) = v348;
                *(v346 - 4) = *(_QWORD *)(v344 + v345 - 32);
                v349 = (uint64_t)&v337[v345 / 8 - 3];
                *(_OWORD *)(v346 - 3) = *(_OWORD *)(v344 + v345 - 24);
                v350 = *(_QWORD *)(v344 + v345 - 8);
                *(v346 - 1) = v350;
                if (v350)
                {
                  *(_QWORD *)(*(_QWORD *)v349 + 16) = v349;
                  *(_QWORD *)(v347 - 32) = v347 - 24;
                  *(_QWORD *)(v347 - 24) = 0;
                  *(_QWORD *)(v347 - 8) = 0;
                }
                else
                {
                  *(v346 - 4) = v349;
                }
                v345 -= 48;
              }
              while (v344 + v345 != v343);
              v344 = v274[5];
              v351 = v274[6];
              v274[5] = (uint64_t)&v337[v345 / 8];
              v274[6] = (uint64_t)v336;
              v352 = v274[7];
              v274[7] = *(_QWORD *)&v744[24];
              while (v351 != v344)
              {
                std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v351 - 32, *(_QWORD *)(v351 - 24));

                v353 = *(void **)(v351 - 48);
                v351 -= 48;

              }
            }
            if (v344)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v745 + 40))(*v745, v344, v352 - v344);
          }
          else
          {
            v689 = v274;
            v691 = v269;
            v688 = v267;
            if (v293)
            {
              *v293 = *(id *)v709;
              v294 = *(id *)(v709 + 8);
              v293[2] = 0;
              v295 = (uint64_t **)(v293 + 2);
              v296 = *(_QWORD *)(v709 + 32);
              v293[3] = 0;
              v297 = v293 + 3;
              v293[1] = v294;
              v293[4] = v296;
              v298 = v293 + 4;
              v293[5] = 0;
              v293[2] = v293 + 3;
              v299 = *(uint64_t **)(v709 + 16);
              if (v299 != v712)
              {
                v705 = v293;
                while (1)
                {
                  v300 = *v297;
                  v301 = v297;
                  if (*v295 != v297)
                  {
                    v302 = (uint64_t *)*v297;
                    v303 = v297;
                    if (v300)
                    {
                      do
                      {
                        v301 = v302;
                        v302 = (uint64_t *)v302[1];
                      }
                      while (v302);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v303[2];
                        _ZF = *v301 == (_QWORD)v303;
                        v303 = v301;
                      }
                      while (_ZF);
                    }
                    v304 = *((_DWORD *)v299 + 8);
                    if (*((_DWORD *)v301 + 8) >= v304)
                      break;
                  }
                  if (v300)
                    v305 = v301;
                  else
                    v305 = v297;
                  if (v300)
                    v306 = v301 + 1;
                  else
                    v306 = v297;
                  if (!*v306)
                    goto LABEL_450;
LABEL_488:
                  v329 = (uint64_t *)v299[1];
                  v129 = v709;
                  if (v329)
                  {
                    do
                    {
                      v330 = v329;
                      v329 = (uint64_t *)*v329;
                    }
                    while (v329);
                  }
                  else
                  {
                    do
                    {
                      v330 = (uint64_t *)v299[2];
                      _ZF = *v330 == (_QWORD)v299;
                      v299 = v330;
                    }
                    while (!_ZF);
                  }
                  v299 = v330;
                  if (v330 == v712)
                    goto LABEL_501;
                }
                v306 = v297;
                v305 = v297;
                if (v300)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v305 = (uint64_t *)v300;
                      v307 = *(_DWORD *)(v300 + 32);
                      if (v304 >= v307)
                        break;
                      v300 = *v305;
                      v306 = v305;
                      if (!*v305)
                        goto LABEL_450;
                    }
                    if (v307 >= v304)
                      goto LABEL_488;
                    v300 = v305[1];
                    if (!v300)
                    {
                      v306 = v305 + 1;
                      break;
                    }
                  }
                }
LABEL_450:
                v308 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v298 + 16))(*v298, 72, 8);
                *(_QWORD *)v744 = v308;
                *(_QWORD *)&v744[8] = v298;
                v309 = v298;
                v744[16] = 0;
                *(_DWORD *)(v308 + 32) = *((_DWORD *)v299 + 8);
                *(_QWORD *)(v308 + 40) = 0;
                *(_QWORD *)(v308 + 48) = 0;
                v310 = v299[8];
                *(_QWORD *)(v308 + 56) = 0;
                *(_QWORD *)(v308 + 64) = v310;
                v311 = (char *)v299[5];
                v312 = (char *)v299[6];
                v313 = v312 - v311;
                if (v312 != v311)
                {
                  if (v313 < 0)
                    abort();
                  v314 = (_OWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v310 + 16))(v310, v312 - v311, 4);
                  *(_QWORD *)(v308 + 40) = v314;
                  *(_QWORD *)(v308 + 48) = v314;
                  *(_QWORD *)(v308 + 56) = &v314[v313 >> 4];
                  do
                  {
                    if (v314)
                      *v314 = *(_OWORD *)v311;
                    v311 += 16;
                    ++v314;
                  }
                  while (v311 != v312);
                  *(_QWORD *)(v308 + 48) = v314;
                }
                *(_QWORD *)v308 = 0;
                *(_QWORD *)(v308 + 8) = 0;
                *(_QWORD *)(v308 + 16) = v305;
                *v306 = v308;
                v315 = (uint64_t *)**v295;
                if (v315)
                {
                  *v295 = v315;
                  v308 = *v306;
                }
                v316 = *v297;
                _ZF = v308 == *v297;
                *(_BYTE *)(v308 + 24) = _ZF;
                v293 = v705;
                v298 = v309;
                if (!_ZF)
                {
                  do
                  {
                    v317 = *(uint64_t **)(v308 + 16);
                    if (*((_BYTE *)v317 + 24))
                      break;
                    v318 = v317[2];
                    v319 = *(uint64_t **)v318;
                    if (*(uint64_t **)v318 == v317)
                    {
                      v322 = *(_QWORD *)(v318 + 8);
                      if (!v322 || (v323 = *(unsigned __int8 *)(v322 + 24), v320 = (_BYTE *)(v322 + 24), v323))
                      {
                        if (*v317 == v308)
                        {
                          v324 = *(uint64_t ***)(v308 + 16);
                        }
                        else
                        {
                          v324 = (uint64_t **)v317[1];
                          v325 = *v324;
                          v317[1] = (uint64_t)*v324;
                          if (v325)
                          {
                            v325[2] = (uint64_t)v317;
                            v318 = v317[2];
                          }
                          v324[2] = (uint64_t *)v318;
                          *(_QWORD *)(v317[2] + 8 * (*(_QWORD *)v317[2] != (_QWORD)v317)) = v324;
                          *v324 = v317;
                          v317[2] = (uint64_t)v324;
                          v318 = (uint64_t)v324[2];
                          v317 = *(uint64_t **)v318;
                        }
                        *((_BYTE *)v324 + 24) = 1;
                        *(_BYTE *)(v318 + 24) = 0;
                        v328 = v317[1];
                        *(_QWORD *)v318 = v328;
                        if (v328)
                          *(_QWORD *)(v328 + 16) = v318;
                        v317[2] = *(_QWORD *)(v318 + 16);
                        *(_QWORD *)(*(_QWORD *)(v318 + 16) + 8 * (**(_QWORD **)(v318 + 16) != v318)) = v317;
                        v317[1] = v318;
                        goto LABEL_486;
                      }
                    }
                    else if (!v319 || (v321 = *((unsigned __int8 *)v319 + 24), v320 = v319 + 3, v321))
                    {
                      if (*v317 == v308)
                      {
                        v326 = *(_QWORD *)(v308 + 8);
                        *v317 = v326;
                        if (v326)
                        {
                          *(_QWORD *)(v326 + 16) = v317;
                          v318 = v317[2];
                        }
                        *(_QWORD *)(v308 + 16) = v318;
                        *(_QWORD *)(v317[2] + 8 * (*(_QWORD *)v317[2] != (_QWORD)v317)) = v308;
                        *(_QWORD *)(v308 + 8) = v317;
                        v317[2] = v308;
                        v318 = *(_QWORD *)(v308 + 16);
                      }
                      else
                      {
                        v308 = *(_QWORD *)(v308 + 16);
                      }
                      *(_BYTE *)(v308 + 24) = 1;
                      *(_BYTE *)(v318 + 24) = 0;
                      v317 = *(uint64_t **)(v318 + 8);
                      v327 = *v317;
                      *(_QWORD *)(v318 + 8) = *v317;
                      if (v327)
                        *(_QWORD *)(v327 + 16) = v318;
                      v317[2] = *(_QWORD *)(v318 + 16);
                      *(_QWORD *)(*(_QWORD *)(v318 + 16) + 8 * (**(_QWORD **)(v318 + 16) != v318)) = v317;
                      *v317 = v318;
LABEL_486:
                      *(_QWORD *)(v318 + 16) = v317;
                      break;
                    }
                    *((_BYTE *)v317 + 24) = 1;
                    v308 = v318;
                    *(_BYTE *)(v318 + 24) = v318 == v316;
                    *v320 = 1;
                  }
                  while (v318 != v316);
                }
                ++v705[5];
                goto LABEL_488;
              }
            }
LABEL_501:
            v336 = v293 + 6;
            v274 = v689;
            v269 = v691;
            v689[6] = (uint64_t)(v293 + 6);
            v267 = v688;
          }
          v274[6] = (uint64_t)v336;

          v354 = *(id *)v129;
          v355 = v354;
          v356 = v701;
          v357 = *v701;
          v358 = v701;
          if (*v701)
          {
            while (1)
            {
              while (1)
              {
                v356 = (uint64_t **)v357;
                v359 = v357[4];
                if ((unint64_t)v354 >= v359)
                  break;
                v357 = *v356;
                v358 = v356;
                if (!*v356)
                  goto LABEL_525;
              }
              if (v359 >= (unint64_t)v354)
                break;
              v357 = v356[1];
              if (!v357)
              {
                v358 = v356 + 1;
                goto LABEL_525;
              }
            }
            v360 = (uint64_t *)v356;
          }
          else
          {
LABEL_525:
            v360 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v708 + 63) + 16))(*((_QWORD *)v708 + 63), 72, 8);
            v360[4] = (uint64_t)v355;
            v360[5] = 0;
            v360[6] = 0;
            v360[7] = 0;
            v362 = v694;
            if ((v361 & 1) == 0)
            {
              v362 = v694;
              if (v399)
              {
                v400 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v400, "VectorKitLabels", 0x5ED09DD50000000FLL);
                v362 = v694;
              }
            }
            v360[8] = mdm::Allocator::instance(void)::alloc;
            *v360 = 0;
            v360[1] = 0;
            v360[2] = (uint64_t)v356;
            *v358 = v360;
            v363 = (_QWORD *)**v362;
            v364 = v360;
            if (v363)
            {
              *v362 = v363;
              v364 = *v358;
            }
            v365 = *v701;
            _ZF = v364 == *v701;
            *((_BYTE *)v364 + 24) = _ZF;
            if (!_ZF)
            {
              do
              {
                v366 = v364[2];
                if (*(_BYTE *)(v366 + 24))
                  break;
                v367 = *(uint64_t **)(v366 + 16);
                v368 = *v367;
                if (*v367 == v366)
                {
                  v371 = v367[1];
                  if (!v371 || (v372 = *(unsigned __int8 *)(v371 + 24), v369 = (_BYTE *)(v371 + 24), v372))
                  {
                    if (*(uint64_t **)v366 == v364)
                    {
                      v373 = (uint64_t *)v364[2];
                    }
                    else
                    {
                      v373 = *(uint64_t **)(v366 + 8);
                      v374 = *v373;
                      *(_QWORD *)(v366 + 8) = *v373;
                      if (v374)
                      {
                        *(_QWORD *)(v374 + 16) = v366;
                        v367 = *(uint64_t **)(v366 + 16);
                      }
                      v373[2] = (uint64_t)v367;
                      *(_QWORD *)(*(_QWORD *)(v366 + 16) + 8 * (**(_QWORD **)(v366 + 16) != v366)) = v373;
                      *v373 = v366;
                      *(_QWORD *)(v366 + 16) = v373;
                      v367 = (uint64_t *)v373[2];
                      v366 = *v367;
                    }
                    *((_BYTE *)v373 + 24) = 1;
                    *((_BYTE *)v367 + 24) = 0;
                    v377 = *(_QWORD *)(v366 + 8);
                    *v367 = v377;
                    if (v377)
                      *(_QWORD *)(v377 + 16) = v367;
                    *(_QWORD *)(v366 + 16) = v367[2];
                    *(_QWORD *)(v367[2] + 8 * (*(_QWORD *)v367[2] != (_QWORD)v367)) = v366;
                    *(_QWORD *)(v366 + 8) = v367;
                    goto LABEL_556;
                  }
                }
                else if (!v368 || (v370 = *(unsigned __int8 *)(v368 + 24), v369 = (_BYTE *)(v368 + 24), v370))
                {
                  if (*(uint64_t **)v366 == v364)
                  {
                    v375 = v364[1];
                    *(_QWORD *)v366 = v375;
                    if (v375)
                    {
                      *(_QWORD *)(v375 + 16) = v366;
                      v367 = *(uint64_t **)(v366 + 16);
                    }
                    v364[2] = (uint64_t)v367;
                    *(_QWORD *)(*(_QWORD *)(v366 + 16) + 8 * (**(_QWORD **)(v366 + 16) != v366)) = v364;
                    v364[1] = v366;
                    *(_QWORD *)(v366 + 16) = v364;
                    v367 = (uint64_t *)v364[2];
                  }
                  else
                  {
                    v364 = (uint64_t *)v364[2];
                  }
                  *((_BYTE *)v364 + 24) = 1;
                  *((_BYTE *)v367 + 24) = 0;
                  v366 = v367[1];
                  v376 = *(uint64_t **)v366;
                  v367[1] = *(_QWORD *)v366;
                  if (v376)
                    v376[2] = (uint64_t)v367;
                  *(_QWORD *)(v366 + 16) = v367[2];
                  *(_QWORD *)(v367[2] + 8 * (*(_QWORD *)v367[2] != (_QWORD)v367)) = v366;
                  *(_QWORD *)v366 = v367;
LABEL_556:
                  v367[2] = v366;
                  break;
                }
                *(_BYTE *)(v366 + 24) = 1;
                v364 = v367;
                *((_BYTE *)v367 + 24) = v367 == v365;
                *v369 = 1;
              }
              while (v367 != v365);
            }
            v355 = 0;
            ++*((_QWORD *)v708 + 64);
          }
          v378 = v360[6];

          v698 |= v267;
          v130 = v378 - 48;
        }
        v128 = v708;
        goto LABEL_187;
      }
      v203 = objc_msgSend(*(id *)(v129 + 8), "start");
      v204 = objc_msgSend(*(id *)(v129 + 8), "end");
      v206 = (uint64_t *)(v130 + 24);
      v205 = *(_QWORD *)(v130 + 24);
      v207 = (uint64_t *)(v130 + 24);
      v208 = (uint64_t *)(v130 + 24);
      if (v205)
      {
        while (1)
        {
          while (1)
          {
            v208 = (uint64_t *)v205;
            v209 = *(_DWORD *)(v205 + 32);
            if (v209 < 2)
              break;
            v205 = *v208;
            v207 = v208;
            if (!*v208)
              goto LABEL_303;
          }
          if (v209)
            break;
          v205 = v208[1];
          if (!v205)
          {
            v207 = v208 + 1;
            goto LABEL_303;
          }
        }
        v210 = (uint64_t)v208;
        v128 = v708;
      }
      else
      {
LABEL_303:
        v210 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v130 + 32) + 16))(*(_QWORD *)(v130 + 32), 72, 8);
        *(_DWORD *)(v210 + 32) = 1;
        *(_QWORD *)(v210 + 48) = 0;
        *(_QWORD *)(v210 + 56) = 0;
        *(_QWORD *)(v210 + 40) = 0;
        {
          v403 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v403, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v210 + 64) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)v210 = 0;
        *(_QWORD *)(v210 + 8) = 0;
        *(_QWORD *)(v210 + 16) = v208;
        *v207 = v210;
        v212 = **(_QWORD **)(v130 + 16);
        v213 = v210;
        if (v212)
        {
          *(_QWORD *)(v130 + 16) = v212;
          v213 = *v207;
        }
        v214 = *v206;
        _ZF = v213 == *v206;
        *(_BYTE *)(v213 + 24) = _ZF;
        v128 = v708;
        if (!_ZF)
        {
          do
          {
            v215 = *(uint64_t **)(v213 + 16);
            if (*((_BYTE *)v215 + 24))
              break;
            v216 = v215[2];
            v217 = *(uint64_t **)v216;
            if (*(uint64_t **)v216 == v215)
            {
              v220 = *(_QWORD *)(v216 + 8);
              if (!v220 || (v221 = *(unsigned __int8 *)(v220 + 24), v218 = (_BYTE *)(v220 + 24), v221))
              {
                if (*v215 == v213)
                {
                  v222 = *(uint64_t ***)(v213 + 16);
                }
                else
                {
                  v222 = (uint64_t **)v215[1];
                  v223 = *v222;
                  v215[1] = (uint64_t)*v222;
                  if (v223)
                  {
                    v223[2] = (uint64_t)v215;
                    v216 = v215[2];
                  }
                  v222[2] = (uint64_t *)v216;
                  *(_QWORD *)(v215[2] + 8 * (*(_QWORD *)v215[2] != (_QWORD)v215)) = v222;
                  *v222 = v215;
                  v215[2] = (uint64_t)v222;
                  v216 = (uint64_t)v222[2];
                  v215 = *(uint64_t **)v216;
                }
                *((_BYTE *)v222 + 24) = 1;
                *(_BYTE *)(v216 + 24) = 0;
                v381 = v215[1];
                *(_QWORD *)v216 = v381;
                if (v381)
                  *(_QWORD *)(v381 + 16) = v216;
                v215[2] = *(_QWORD *)(v216 + 16);
                *(_QWORD *)(*(_QWORD *)(v216 + 16) + 8 * (**(_QWORD **)(v216 + 16) != v216)) = v215;
                v215[1] = v216;
                goto LABEL_569;
              }
            }
            else if (!v217 || (v219 = *((unsigned __int8 *)v217 + 24), v218 = v217 + 3, v219))
            {
              if (*v215 == v213)
              {
                v379 = *(_QWORD *)(v213 + 8);
                *v215 = v379;
                if (v379)
                {
                  *(_QWORD *)(v379 + 16) = v215;
                  v216 = v215[2];
                }
                *(_QWORD *)(v213 + 16) = v216;
                *(_QWORD *)(v215[2] + 8 * (*(_QWORD *)v215[2] != (_QWORD)v215)) = v213;
                *(_QWORD *)(v213 + 8) = v215;
                v215[2] = v213;
                v216 = *(_QWORD *)(v213 + 16);
              }
              else
              {
                v213 = *(_QWORD *)(v213 + 16);
              }
              *(_BYTE *)(v213 + 24) = 1;
              *(_BYTE *)(v216 + 24) = 0;
              v215 = *(uint64_t **)(v216 + 8);
              v380 = *v215;
              *(_QWORD *)(v216 + 8) = *v215;
              if (v380)
                *(_QWORD *)(v380 + 16) = v216;
              v215[2] = *(_QWORD *)(v216 + 16);
              *(_QWORD *)(*(_QWORD *)(v216 + 16) + 8 * (**(_QWORD **)(v216 + 16) != v216)) = v215;
              *v215 = v216;
LABEL_569:
              *(_QWORD *)(v216 + 16) = v215;
              break;
            }
            *((_BYTE *)v215 + 24) = 1;
            v213 = v216;
            *(_BYTE *)(v216 + 24) = v216 == v214;
            *v218 = 1;
          }
          while (v216 != v214);
        }
        ++*(_QWORD *)(v130 + 40);
      }
      v382 = *(uint64_t **)(v210 + 48);
      v383 = *(_QWORD *)(v210 + 56);
      if ((unint64_t)v382 >= v383)
      {
        v384 = *(_QWORD *)(v210 + 40);
        v385 = ((uint64_t)v382 - v384) >> 4;
        v386 = v385 + 1;
        if ((unint64_t)(v385 + 1) >> 60)
LABEL_1019:
          abort();
        v387 = v383 - v384;
        if (v387 >> 3 > v386)
          v386 = v387 >> 3;
        if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFF0)
          v388 = 0xFFFFFFFFFFFFFFFLL;
        else
          v388 = v386;
        if (v388)
        {
          v389 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v210 + 64) + 16))(*(_QWORD *)(v210 + 64), 16 * v388, 4);
          v390 = (uint64_t *)(v389 + 16 * v385);
          v391 = v389 + 16 * v388;
          if (v389)
          {
            *v390 = v203;
            v390[1] = v204;
          }
        }
        else
        {
          v391 = 0;
          v390 = (uint64_t *)(16 * v385);
        }
        v393 = *(_QWORD *)(v210 + 40);
        v392 = *(_QWORD *)(v210 + 48);
        v394 = v390;
        if (v392 == v393)
        {
          v128 = v708;
        }
        else
        {
          v128 = v708;
          do
          {
            *((_OWORD *)v394 - 1) = *(_OWORD *)(v392 - 16);
            v394 -= 2;
            v392 -= 16;
          }
          while (v392 != v393);
          v392 = *(_QWORD *)(v210 + 40);
        }
        v395 = v390 + 2;
        *(_QWORD *)(v210 + 40) = v394;
        *(_QWORD *)(v210 + 48) = v390 + 2;
        v396 = *(_QWORD *)(v210 + 56);
        *(_QWORD *)(v210 + 56) = v391;
        if (v392)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v210 + 64) + 40))(*(_QWORD *)(v210 + 64), v392, v396 - v392);
        *(_QWORD *)(v210 + 48) = v395;
      }
      else
      {
        if (v382)
        {
          *v382 = v203;
          v382[1] = v204;
        }
        *(_QWORD *)(v210 + 48) = v382 + 2;
      }
LABEL_187:
      v129 += 48;
      if (v129 == v693)
        goto LABEL_603;
    }
    v141 = (id)v687[4];
    if ((v142 & 1) == 0)
    {
      if ((_DWORD)v401)
      {
        qword_1EE5776A8 = 0;
        qword_1EE5776B0 = mdm::Allocator::instance(v401);
        unk_1EE5776B8 = 0;
        md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty = (uint64_t)&qword_1EE5776A8;
        __cxa_atexit((void (*)(void *))std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::~map[abi:nn180100], &md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty, &dword_19F029000);
      }
    }
    v143 = (_QWORD *)*v686;
    if (!*v686)
      goto LABEL_209;
    v144 = (_QWORD *)((char *)v708 + 392);
    do
    {
      v145 = v143[4];
      v146 = v145 >= (unint64_t)v141;
      if (v145 >= (unint64_t)v141)
        v147 = v143;
      else
        v147 = v143 + 1;
      if (v146)
        v144 = v143;
      v143 = (_QWORD *)*v147;
    }
    while (*v147);
    if (v144 == v686)
    {
LABEL_209:
      v150 = &md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty;
    }
    else
    {
      v148 = v144[4];
      v149 = v144 + 5;
      if (v148 <= (unint64_t)v141)
        v150 = v149;
      else
        v150 = &md::LabelNavEtaLabeler::annotatableSectionsForRoute(GEOComposedRoute *)const::empty;
    }

    v153 = *v150;
    v152 = v150 + 1;
    v151 = (_QWORD *)v153;
    if ((uint64_t *)v153 == v152)
      goto LABEL_385;
    while (1)
    {
      v154 = v151[5];
      v155 = v151[6];
      if (v154 != v155)
        break;
LABEL_280:
      v198 = (uint64_t *)v151[1];
      if (v198)
      {
        do
        {
          v199 = v198;
          v198 = (uint64_t *)*v198;
        }
        while (v198);
      }
      else
      {
        do
        {
          v199 = (uint64_t *)v151[2];
          _ZF = *v199 == (_QWORD)v151;
          v151 = v199;
        }
        while (!_ZF);
      }
      v151 = v199;
      if (v199 == v152)
        goto LABEL_385;
    }
    v156 = v155 - v154;
    if (v155 - v154 < 0)
      goto LABEL_1019;
    v157 = *((_DWORD *)v151 + 8);
    v158 = v151[8];
    v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158 + 16))(v158, v155 - v154, 4);
    v160 = (char *)v159;
    v161 = 0;
    do
    {
      if (v159 + v161)
        *(_OWORD *)(v159 + v161) = *(_OWORD *)(v154 + v161);
      v161 += 16;
    }
    while (v154 + v161 != v155);
    v162 = v712;
    while (1)
    {
      v163 = *v162;
      v164 = v162;
      if (!*v162)
        break;
      while (1)
      {
        v162 = (uint64_t *)v163;
        v165 = *(_DWORD *)(v163 + 32);
        if (v165 > v157)
          break;
        if (v165 >= v157)
        {
          v166 = (uint64_t)v162;
          goto LABEL_258;
        }
        v163 = v162[1];
        if (!v163)
        {
          v164 = v162 + 1;
          goto LABEL_225;
        }
      }
    }
LABEL_225:
    v166 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v709 + 32) + 16))(*(_QWORD *)(v709 + 32), 72, 8);
    *(_DWORD *)(v166 + 32) = v157;
    *(_QWORD *)(v166 + 48) = 0;
    *(_QWORD *)(v166 + 56) = 0;
    *(_QWORD *)(v166 + 40) = 0;
    {
      v202 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v202, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v166 + 64) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)v166 = 0;
    *(_QWORD *)(v166 + 8) = 0;
    *(_QWORD *)(v166 + 16) = v162;
    *v164 = v166;
    v168 = (_QWORD *)**v704;
    v169 = v166;
    if (v168)
    {
      *v704 = v168;
      v169 = *v164;
    }
    v170 = *v712;
    _ZF = v169 == *v712;
    *(_BYTE *)(v169 + 24) = _ZF;
    if (!_ZF)
    {
      do
      {
        v171 = *(uint64_t **)(v169 + 16);
        if (*((_BYTE *)v171 + 24))
          break;
        v172 = v171[2];
        v173 = *(uint64_t **)v172;
        if (*(uint64_t **)v172 == v171)
        {
          v176 = *(_QWORD *)(v172 + 8);
          if (!v176 || (v177 = *(unsigned __int8 *)(v176 + 24), v174 = (_BYTE *)(v176 + 24), v177))
          {
            if (*v171 == v169)
            {
              v178 = *(uint64_t ***)(v169 + 16);
            }
            else
            {
              v178 = (uint64_t **)v171[1];
              v179 = *v178;
              v171[1] = (uint64_t)*v178;
              if (v179)
              {
                v179[2] = (uint64_t)v171;
                v172 = v171[2];
              }
              v178[2] = (uint64_t *)v172;
              *(_QWORD *)(v171[2] + 8 * (*(_QWORD *)v171[2] != (_QWORD)v171)) = v178;
              *v178 = v171;
              v171[2] = (uint64_t)v178;
              v172 = (uint64_t)v178[2];
              v171 = *(uint64_t **)v172;
            }
            *((_BYTE *)v178 + 24) = 1;
            *(_BYTE *)(v172 + 24) = 0;
            v182 = v171[1];
            *(_QWORD *)v172 = v182;
            if (v182)
              *(_QWORD *)(v182 + 16) = v172;
            v171[2] = *(_QWORD *)(v172 + 16);
            *(_QWORD *)(*(_QWORD *)(v172 + 16) + 8 * (**(_QWORD **)(v172 + 16) != v172)) = v171;
            v171[1] = v172;
            goto LABEL_256;
          }
        }
        else if (!v173 || (v175 = *((unsigned __int8 *)v173 + 24), v174 = v173 + 3, v175))
        {
          if (*v171 == v169)
          {
            v180 = *(_QWORD *)(v169 + 8);
            *v171 = v180;
            if (v180)
            {
              *(_QWORD *)(v180 + 16) = v171;
              v172 = v171[2];
            }
            *(_QWORD *)(v169 + 16) = v172;
            *(_QWORD *)(v171[2] + 8 * (*(_QWORD *)v171[2] != (_QWORD)v171)) = v169;
            *(_QWORD *)(v169 + 8) = v171;
            v171[2] = v169;
            v172 = *(_QWORD *)(v169 + 16);
          }
          else
          {
            v169 = *(_QWORD *)(v169 + 16);
          }
          *(_BYTE *)(v169 + 24) = 1;
          *(_BYTE *)(v172 + 24) = 0;
          v171 = *(uint64_t **)(v172 + 8);
          v181 = *v171;
          *(_QWORD *)(v172 + 8) = *v171;
          if (v181)
            *(_QWORD *)(v181 + 16) = v172;
          v171[2] = *(_QWORD *)(v172 + 16);
          *(_QWORD *)(*(_QWORD *)(v172 + 16) + 8 * (**(_QWORD **)(v172 + 16) != v172)) = v171;
          *v171 = v172;
LABEL_256:
          *(_QWORD *)(v172 + 16) = v171;
          break;
        }
        *((_BYTE *)v171 + 24) = 1;
        v169 = v172;
        *(_BYTE *)(v172 + 24) = v172 == v170;
        *v174 = 1;
      }
      while (v172 != v170);
    }
    ++*(_QWORD *)(v709 + 40);
LABEL_258:
    v183 = v161;
    v184 = v161 >> 4;
    v185 = *(char **)(v166 + 40);
    v186 = *(_QWORD *)(v166 + 56);
    if (v184 <= (v186 - (uint64_t)v185) >> 4)
    {
      v195 = *(char **)(v166 + 48);
      v190 = v166 + 48;
      v194 = v195;
      v196 = v195 - v185;
      v197 = (v195 - v185) >> 4;
      if (v197 >= v184)
      {
        if (v183)
          memmove(v185, v160, v183);
        goto LABEL_278;
      }
      if (v194 != v185)
      {
        memmove(v185, v160, v196);
        v185 = *(char **)v190;
      }
      v191 = v185;
      if (v197 != v184)
      {
        v200 = &v160[16 * v197];
        v191 = v185;
        v201 = 16 * v184 - 16 * v197;
        do
        {
          if (v191)
            *(_OWORD *)v191 = *(_OWORD *)v200;
          v200 += 16;
          v191 += 16;
          v201 -= 16;
        }
        while (v201);
      }
    }
    else
    {
      if (v185)
      {
        *(_QWORD *)(v166 + 48) = v185;
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(v166 + 64) + 40))(*(_QWORD *)(v166 + 64), v185);
        v186 = 0;
        *(_QWORD *)(v166 + 40) = 0;
        *(_QWORD *)(v166 + 48) = 0;
        *(_QWORD *)(v166 + 56) = 0;
      }
      if ((v183 & 0x8000000000000000) != 0)
        goto LABEL_1020;
      v187 = v186 >> 3;
      if (v186 >> 3 <= v184)
        v187 = v184;
      v188 = (unint64_t)v186 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v187;
      if (v188 >> 60)
LABEL_1020:
        abort();
      v189 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v166 + 64) + 16))(*(_QWORD *)(v166 + 64), 16 * v188, 4);
      v185 = (char *)v189;
      *(_QWORD *)(v166 + 48) = v189;
      v190 = v166 + 48;
      *(_QWORD *)(v190 - 8) = v189;
      *(_QWORD *)(v190 + 8) = v189 + 16 * v188;
      v191 = (char *)v189;
      if (v183)
      {
        v192 = 16 * v184;
        v193 = v160;
        v191 = (char *)v189;
        do
        {
          if (v191)
            *(_OWORD *)v191 = *(_OWORD *)v193;
          v193 += 16;
          v191 += 16;
          v192 -= 16;
        }
        while (v192);
      }
    }
    v183 = v191 - v185;
LABEL_278:
    *(_QWORD *)v190 = &v185[v183];
    if (v160)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v158 + 40))(v158, v160, v156);
    goto LABEL_280;
  }
LABEL_609:
  v407 = *((_QWORD *)v128 + 70);
  for (j = *((_QWORD *)v128 + 69); v407 != j; v407 -= 56)
  {
    if (*(_BYTE *)(v407 - 6))
      *(_BYTE *)(v407 - 6) = 0;
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v407 - 40, *(_QWORD *)(v407 - 32));

  }
  v409 = (uint64_t)v708;
  *((_QWORD *)v708 + 70) = j;
  if (!*((_BYTE *)v708 + 136))
    goto LABEL_722;
  k = v681;
  objc_msgSend(k, "route");
  v411 = (void *)objc_claimAutoreleasedReturnValue();
  v412 = (uint64_t)v411;
  v413 = v701;
  v414 = *v701;
  v415 = v701;
  if (*v701)
  {
    while (1)
    {
      while (1)
      {
        v415 = (uint64_t **)v414;
        v416 = v414[4];
        if ((unint64_t)v411 >= v416)
          break;
        v414 = *v415;
        v413 = v415;
        if (!*v415)
          goto LABEL_621;
      }
      if (v416 >= (unint64_t)v411)
        break;
      v414 = v415[1];
      if (!v414)
      {
        v413 = v415 + 1;
        goto LABEL_621;
      }
    }

    v417 = (uint64_t *)v415;
    v409 = (uint64_t)v708;
  }
  else
  {
LABEL_621:
    v417 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v708 + 63) + 16))(*((_QWORD *)v708 + 63), 72, 8);
    v417[4] = v412;
    v417[5] = 0;
    v417[6] = 0;
    v417[7] = 0;
    v419 = v694;
    if ((v418 & 1) == 0)
    {
      v419 = v694;
      if (v679)
      {
        v680 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v680, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v419 = v694;
      }
    }
    v417[8] = mdm::Allocator::instance(void)::alloc;
    *v417 = 0;
    v417[1] = 0;
    v417[2] = (uint64_t)v415;
    *v413 = v417;
    v420 = (_QWORD *)**v419;
    v421 = v417;
    if (v420)
    {
      *v419 = v420;
      v421 = *v413;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v708 + 62), v421);
    ++*((_QWORD *)v708 + 64);
  }
  if (v417[5] == v417[6])
    goto LABEL_721;
  v422 = *(_QWORD *)(*(_QWORD *)(a2[1] + 168) + 32);
  v423 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v422 + 64))(v422);
  v424 = v417[5];
  if (v424 == v417[6])
    goto LABEL_721;
  v695 = k;
  v710 = v417;
  v713 = (unint64_t *)(v409 + 552);
  v425 = *(unsigned int *)v423;
  v426 = v423[1];
  while (2)
  {
    v429 = v424;
    objc_msgSend(*(id *)(v424 + 8), "etaDescription", v681);
    v430 = (void *)objc_claimAutoreleasedReturnValue();
    v431 = objc_msgSend(v430, "routeEtaType");

    v432 = v710[6] - v424;
    if (v432)
    {
      v433 = 0xAAAAAAAAAAAAAAABLL * (v432 >> 4);
      do
      {
        v434 = v424 + 48 * (v433 >> 1);
        objc_msgSend(*(id *)(v434 + 8), "etaDescription");
        v435 = (void *)objc_claimAutoreleasedReturnValue();
        v436 = objc_msgSend(v435, "routeEtaType");

        if (v436 > v431)
        {
          v433 >>= 1;
        }
        else
        {
          v424 = v434 + 48;
          v433 += ~(v433 >> 1);
        }
      }
      while (v433);
    }
    _ZF = (unint64_t)v431 > 4 || ((1 << v431) & 0x19) == 0;
    if (!_ZF || v424 <= v429)
      goto LABEL_636;
    v437 = 0;
    v706 = v424;
    while (1)
    {
      v439 = objc_msgSend(*(id *)(v429 + 8), "start");
      if (v425 <= v439
        && ((_DWORD)v425 == (_DWORD)v439 ? (v440 = v426 < *((float *)&v439 + 1)) : (v440 = 1), v440)
        || (v441 = objc_msgSend(*(id *)(v429 + 8), "end"), v425 >= v441)
        && ((_DWORD)v425 == (_DWORD)v441 ? (v442 = v426 <= *((float *)&v441 + 1)) : (v442 = 0), !v442))
      {
        v443 = objc_msgSend(*(id *)(v429 + 8), "start");
        if (v425 < v443 || (_DWORD)v425 == (_DWORD)v443 && v426 < *((float *)&v443 + 1))
        {
          v444 = (_WORD *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v429);
          if ((v437 & 1) != 0)
            v438 = 256;
          else
            v438 = 259;
          *v444 = v438;
          v437 = 1;
          goto LABEL_647;
        }
        *(_WORD *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v429) = 258;
        goto LABEL_698;
      }
      *(_WORD *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v429) = 257;
      objc_msgSend(*(id *)(v429 + 8), "etaDescription");
      v445 = (void *)objc_claimAutoreleasedReturnValue();
      v446 = objc_msgSend(v445, "routeEtaType");

      if (v446 == 2)
        break;
LABEL_647:
      v429 += 48;
      if (v429 == v424)
      {
        v429 = v424;
        goto LABEL_703;
      }
    }
    v447 = (uint64_t *)(v429 + 24);
    v448 = (_QWORD **)(v429 + 16);
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v429 + 16, *(_QWORD *)(v429 + 24));
    *(_QWORD *)(v429 + 40) = 0;
    *(_QWORD *)(v429 + 16) = v429 + 24;
    *(_QWORD *)(v429 + 24) = 0;
    v449 = objc_msgSend(*(id *)(v429 + 8), "end");
    v450 = *(_QWORD *)(v429 + 24);
    v451 = (uint64_t *)(v429 + 24);
    if (v450)
    {
      while (1)
      {
        while (1)
        {
          v451 = (uint64_t *)v450;
          v452 = *(_DWORD *)(v450 + 32);
          if (v452 < 2)
            break;
          v450 = *v451;
          v447 = v451;
          if (!*v451)
            goto LABEL_671;
        }
        if (v452)
          break;
        v450 = v451[1];
        if (!v450)
        {
          v447 = v451 + 1;
          goto LABEL_671;
        }
      }
      v453 = (uint64_t)v451;
    }
    else
    {
LABEL_671:
      v453 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v429 + 32) + 16))(*(_QWORD *)(v429 + 32), 72, 8);
      *(_DWORD *)(v453 + 32) = 1;
      *(_QWORD *)(v453 + 48) = 0;
      *(_QWORD *)(v453 + 56) = 0;
      *(_QWORD *)(v453 + 40) = 0;
      {
        v476 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v476, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v453 + 64) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)v453 = 0;
      *(_QWORD *)(v453 + 8) = 0;
      *(_QWORD *)(v453 + 16) = v451;
      *v447 = v453;
      v455 = (_QWORD *)**v448;
      v456 = (uint64_t *)v453;
      if (v455)
      {
        *v448 = v455;
        v456 = (uint64_t *)*v447;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v429 + 24), v456);
      ++*(_QWORD *)(v429 + 40);
    }
    v457 = *(_QWORD *)(v453 + 48);
    v458 = *(_QWORD *)(v453 + 56);
    if (v457 >= v458)
    {
      v460 = *(_QWORD *)(v453 + 40);
      v461 = (uint64_t)(v457 - v460) >> 4;
      v462 = v461 + 1;
      if ((unint64_t)(v461 + 1) >> 60)
        abort();
      v463 = v458 - v460;
      if (v463 >> 3 > v462)
        v462 = v463 >> 3;
      if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFF0)
        v464 = 0xFFFFFFFFFFFFFFFLL;
      else
        v464 = v462;
      if (v464)
      {
        v465 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v453 + 64) + 16))(*(_QWORD *)(v453 + 64), 16 * v464, 4);
        v466 = v465 + 16 * v461;
        v467 = v465 + 16 * v464;
        if (v465)
        {
          *(_DWORD *)v466 = v425;
          *(float *)(v466 + 4) = v426;
          *(_QWORD *)(v466 + 8) = v449;
        }
      }
      else
      {
        v467 = 0;
        v466 = 16 * v461;
      }
      v469 = *(_QWORD *)(v453 + 40);
      v468 = *(_QWORD *)(v453 + 48);
      v470 = v466;
      if (v468 != v469)
      {
        do
        {
          *(_OWORD *)(v470 - 16) = *(_OWORD *)(v468 - 16);
          v470 -= 16;
          v468 -= 16;
        }
        while (v468 != v469);
        v468 = *(_QWORD *)(v453 + 40);
      }
      v459 = v466 + 16;
      *(_QWORD *)(v453 + 40) = v470;
      *(_QWORD *)(v453 + 48) = v466 + 16;
      v471 = *(_QWORD *)(v453 + 56);
      *(_QWORD *)(v453 + 56) = v467;
      if (v468)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v453 + 64) + 40))(*(_QWORD *)(v453 + 64), v468, v471 - v468);
    }
    else
    {
      if (v457)
      {
        *(_DWORD *)v457 = v425;
        *(float *)(v457 + 4) = v426;
        *(_QWORD *)(v457 + 8) = v449;
      }
      v459 = v457 + 16;
    }
    *(_QWORD *)(v453 + 48) = v459;
    v472 = *((id *)v708 + 3);
    objc_msgSend(v472, "routeInfo");
    v473 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v473, "route");
    v474 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v474, "distanceFromPoint:toPoint:", v425 | ((unint64_t)LODWORD(v426) << 32), objc_msgSend(*(id *)(v429 + 8), "end"));
    if (v475 < 200.0)
    {
      *(_WORD *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v429) = 258;

LABEL_698:
      v706 = v429;
      goto LABEL_647;
    }

LABEL_703:
    if (v706 != v424)
      *(_WORD *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v706) = 260;
    if (v429 != v424)
    {
      objc_msgSend(*(id *)(v429 + 8), "etaDescription");
      v477 = (void *)objc_claimAutoreleasedReturnValue();
      v478 = objc_msgSend(v477, "routeEtaType") != 2;

      v479 = v429 + 48;
      v480 = v429 + 48 == v424 || v478;
      if ((v480 & 1) == 0)
      {
        do
        {
          *(_WORD *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v479) = 256;
          v479 += 48;
        }
        while (v479 != v424);
      }
    }
LABEL_636:
    if (v424 != v710[6])
      continue;
    break;
  }
  v481 = v710[5];
  for (k = v695; v481 != v424; v481 += 48)
  {
    *(_QWORD *)v744 = objc_msgSend(*(id *)(v481 + 8), "start");
    v482 = *(_QWORD *)(*(_QWORD *)(a2[1] + 168) + 32);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v482 + 88))(buf, v482, v744);
    v483 = geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v713, v481);
    if (LOBYTE(buf[0]))
    {
      if (!*(_BYTE *)(v483 + 2))
        *(_BYTE *)(v483 + 2) = 1;
      *(_BYTE *)(v483 + 3) = BYTE1(buf[0]);
    }
    else if (*(_BYTE *)(v483 + 2))
    {
      *(_BYTE *)(v483 + 2) = 0;
    }
  }
LABEL_721:

  v409 = (uint64_t)v708;
LABEL_722:
  v484 = (_QWORD *)*v682;
  if ((_QWORD *)*v682 != v684)
  {
    do
    {
      if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
      v485 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
      if (os_log_type_enabled(v485, OS_LOG_TYPE_INFO))
      {
        md::RouteRangeAnnotationRequest::to_string((md::RouteRangeAnnotationRequest *)v744, (uint64_t)(v484 + 4));
        v486 = (v744[23] & 0x80u) == 0 ? v744 : *(uint8_t **)v744;
        LODWORD(buf[0]) = 136315138;
        *(_QWORD *)((char *)buf + 4) = v486;
        _os_log_impl(&dword_19F029000, v485, OS_LOG_TYPE_INFO, "RouteRangeAnnotationRequest added - %s", (uint8_t *)buf, 0xCu);
        if ((char)v744[23] < 0)
          operator delete(*(void **)v744);
      }

      v487 = (_QWORD *)v484[1];
      if (v487)
      {
        do
        {
          v488 = v487;
          v487 = (_QWORD *)*v487;
        }
        while (v487);
      }
      else
      {
        do
        {
          v488 = (_QWORD *)v484[2];
          _ZF = *v488 == (_QWORD)v484;
          v484 = v488;
        }
        while (!_ZF);
      }
      v484 = v488;
      v409 = (uint64_t)v708;
    }
    while (v488 != v684);
  }
  md::LabelNavEtaLabeler::setupRouteLabelingState(v409, (uint64_t)a2, (uint64_t)v730, v681, 1u, 0, v696);
  v721 = 0u;
  v722 = 0u;
  v719 = 0u;
  v720 = 0u;
  v489 = *((id *)v708 + 3);
  objc_msgSend(v489, "alternateRoutes");
  v490 = (void *)objc_claimAutoreleasedReturnValue();

  v491 = objc_msgSend(v490, "countByEnumeratingWithState:objects:count:", &v719, v738, 16);
  if (v491)
  {
    v492 = *(_QWORD *)v720;
    do
    {
      for (m = 0; m != v491; ++m)
      {
        if (*(_QWORD *)v720 != v492)
          objc_enumerationMutation(v490);
        md::LabelNavEtaLabeler::setupRouteLabelingState((uint64_t)v708, (uint64_t)a2, (uint64_t)v730, *(void **)(*((_QWORD *)&v719 + 1) + 8 * m), 0, objc_msgSend(*(id *)(*((_QWORD *)&v719 + 1) + 8 * m), "etaComparisionToMain", v681), v696);
      }
      v491 = objc_msgSend(v490, "countByEnumeratingWithState:objects:count:", &v719, v738, 16);
    }
    while (v491);
  }

  v494 = CACurrentMediaTime();
  v495 = v681;
  v496 = v495;
  v497 = *(_QWORD **)v699;
  if (!*(_QWORD *)v699)
    goto LABEL_757;
  v498 = v699;
  do
  {
    v499 = v497[4];
    v500 = v499 >= (unint64_t)v495;
    if (v499 >= (unint64_t)v495)
      v501 = v497;
    else
      v501 = v497 + 1;
    if (v500)
      v498 = (float *)v497;
    v497 = (_QWORD *)*v501;
  }
  while (*v501);
  if (v498 != v699 && *((_QWORD *)v498 + 4) <= (unint64_t)v495)
  {
    v556 = v498[10];

    v502 = v708;
    if (v556 >= 1.0)
      md::LabelNavEtaLabeler::updateEtaFeature((uint64_t)v708, a2, (uint64_t)v730, v496, 1u, v696, v494);
  }
  else
  {
LABEL_757:

    v502 = v708;
  }
  v717 = 0u;
  v718 = 0u;
  v715 = 0u;
  v716 = 0u;
  v503 = *((id *)v502 + 3);
  objc_msgSend(v503, "alternateRoutes");
  v504 = (void *)objc_claimAutoreleasedReturnValue();

  v505 = objc_msgSend(v504, "countByEnumeratingWithState:objects:count:", &v715, v737, 16);
  if (v505)
  {
    v506 = *(_QWORD *)v716;
    do
    {
      v507 = 0;
      do
      {
        if (*(_QWORD *)v716 != v506)
          objc_enumerationMutation(v504);
        v508 = *(id *)(*((_QWORD *)&v715 + 1) + 8 * v507);
        v509 = v508;
        for (n = v699; ; n += 2)
        {
          do
          {
            n = *(float **)n;
            if (!n)
            {

              objc_msgSend(v509, "route");
              v512 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
              md::LabelNavEtaLabeler::extinguishLabels(v708, v512);
LABEL_769:

              goto LABEL_770;
            }
            v511 = *((_QWORD *)n + 4);
          }
          while (v511 > (unint64_t)v508);
          if (v511 >= (unint64_t)v508)
            break;
        }

        v513 = v509;
        v512 = v513;
        v514 = v699;
        v515 = *(_QWORD **)v699;
        if (!*(_QWORD *)v699)
          goto LABEL_769;
        do
        {
          v516 = v515[4];
          v517 = v516 >= (unint64_t)v513;
          if (v516 >= (unint64_t)v513)
            v518 = v515;
          else
            v518 = v515 + 1;
          if (v517)
            v514 = (float *)v515;
          v515 = (_QWORD *)*v518;
        }
        while (*v518);
        if (v514 == v699 || *((_QWORD *)v514 + 4) > (unint64_t)v513)
          goto LABEL_769;
        v519 = v514[10];

        if (v519 >= 1.0)
          md::LabelNavEtaLabeler::updateEtaFeature((uint64_t)v708, a2, (uint64_t)v730, v512, 0, v696, v494);
LABEL_770:
        ++v507;
      }
      while (v507 != v505);
      v520 = objc_msgSend(v504, "countByEnumeratingWithState:objects:count:", &v715, v737, 16);
      v505 = v520;
    }
    while (v520);
  }

  v714 = (char *)v708 + 705;
  v521 = *(unsigned __int16 *)((char *)v708 + 705);
  v522 = v496;
  v523 = *(float *)(a2[3] + 32);
  v524 = v522;
  v525 = *(_QWORD *)(*(_QWORD *)(a2[1] + 168) + 32);
  v526 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v525 + 80))(v525);
  if (!v526)
    goto LABEL_798;
  v527 = v524;
  v530 = *(_QWORD **)(v526 + 48);
  v529 = v526 + 48;
  v528 = v530;
  if (!v530)
    goto LABEL_797;
  v531 = (_QWORD *)v529;
  do
  {
    v532 = v528[4];
    v533 = v532 >= (unint64_t)v527;
    if (v532 >= (unint64_t)v527)
      v534 = v528;
    else
      v534 = v528 + 1;
    if (v533)
      v531 = v528;
    v528 = (_QWORD *)*v534;
  }
  while (*v534);
  if (v531 == (_QWORD *)v529 || v531[4] > (unint64_t)v527)
  {
LABEL_797:

    goto LABEL_798;
  }
  v670 = *(_QWORD *)(v531[5] + 280);

  if (v523 >= *(float *)&v670)
    v535 = v523 <= *((float *)&v670 + 1);
  else
LABEL_798:
    v535 = 0;

  objc_msgSend(v524, "route");
  v536 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v536, "legs");
  v537 = objc_claimAutoreleasedReturnValue();
  v538 = objc_msgSend((id)v537, "count");

  objc_msgSend(*((id *)v708 + 3), "alternateRoutes");
  v539 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v538) = v538 < 2;
  LOBYTE(v537) = objc_msgSend(v539, "count") != 0;

  v540 = v538 | v537;
  if ((_DWORD)v538)
    LOBYTE(v541) = 4;
  else
    LOBYTE(v541) = 3;
  v542 = 1;
  if ((v540 & 1) == 0)
  {
    v543 = *((_BYTE *)v708 + 136) || v535;
    v542 = *((_BYTE *)v708 + 136) ? 2 : 1;
    LOBYTE(v541) = *((_BYTE *)v708 + 136) ? 5 : 1;
    if ((v543 & 1) == 0)
    {
      v544 = (VKRouteInfo *)v524;
      -[VKRouteInfo route](v544, "route");
      v545 = (void *)objc_claimAutoreleasedReturnValue();
      v546 = (_QWORD *)*((_QWORD *)v708 + 33);
      if (!v546)
        goto LABEL_824;
      v547 = (_QWORD *)((char *)v708 + 264);
      do
      {
        v548 = v546[4];
        v549 = v548 >= (unint64_t)v545;
        if (v548 >= (unint64_t)v545)
          v550 = v546;
        else
          v550 = v546 + 1;
        if (v549)
          v547 = v546;
        v546 = (_QWORD *)*v550;
      }
      while (*v550);
      if (v547 != (_QWORD *)((char *)v708 + 264) && (unint64_t)v545 >= v547[4])
      {

        v671 = md::LabelNavEtaLabeler::routeLabelStatesForRouteInfo(v708, v544);
        v672 = v547[5];
        if (v672 == v547[6])
        {
          v542 = 2;
          LOBYTE(v541) = 2;
        }
        else
        {
          v673 = (uint64_t *)v671;
          while (1)
          {
            objc_msgSend(*(id *)(v672 + 8), "etaDescription", v681);
            v674 = (void *)objc_claimAutoreleasedReturnValue();
            v675 = objc_msgSend(v674, "routeEtaType");

            if (v675 == 3 && !*(_QWORD *)(v672 + 56))
            {
              v676 = *v673;
              if (*v673 != v673[1])
              {
                while (1)
                {
                  v677 = md::RouteRangeAnnotationRequest::operator==((id *)v672, v676);
                  v678 = v673[1];
                  if ((v677 & 1) != 0)
                    break;
                  v676 += 384;
                  if (v676 == v678)
                    goto LABEL_1008;
                }
                if (v676 != v678 && *(_DWORD *)(v676 + 128) != -1)
                  break;
              }
            }
LABEL_1008:
            v672 += 72;
            v542 = 2;
            LOBYTE(v541) = 2;
            if (v672 == v547[6])
              goto LABEL_825;
          }
          LOBYTE(v541) = 2;
          v542 = 1;
        }
      }
      else
      {
LABEL_824:

        v541 = v521 >> 8;
        v542 = v521;
      }
    }
  }
LABEL_825:

  v551 = v708;
  v552 = *((unsigned __int8 *)v708 + 705) == v542 && *((unsigned __int8 *)v708 + 706) == v541;
  v553 = v552;
  v711 = v553;
  if (!v552)
  {
    if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
    v554 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
    if (os_log_type_enabled(v554, OS_LOG_TYPE_INFO))
    {
      if (v542 > 2u)
        v555 = "<Invalid>";
      else
        v555 = off_1E42EDF78[v542];
      v557 = *v714;
      if (v557 > 2)
        v558 = "<Invalid>";
      else
        v558 = off_1E42EDF78[v557];
      *(_DWORD *)v744 = 136315394;
      *(_QWORD *)&v744[4] = v555;
      *(_WORD *)&v744[12] = 2080;
      *(_QWORD *)&v744[14] = v558;
      _os_log_impl(&dword_19F029000, v554, OS_LOG_TYPE_INFO, "EtaLabelingState changed - Mode:%s from:%s", v744, 0x16u);
    }

    v551 = v708;
    *((_BYTE *)v708 + 705) = v542;
    *((_BYTE *)v708 + 706) = v541;
  }
  if (v542)
  {
    v559 = *((_QWORD *)v551 + 37) - *((_QWORD *)v551 + 36);
    if (v559)
    {
      v560 = 0;
      v561 = v559 >> 3;
      v702 = (uint64_t *)((char *)v551 + 152);
      v707 = (uint64_t **)((char *)v551 + 360);
      if (v561 <= 1)
        v562 = 1;
      else
        v562 = v561;
      do
      {
        v563 = (uint64_t *)*(id *)(*((_QWORD *)v551 + 36) + 8 * v560);
        objc_msgSend(v563, "routeInfo");
        v564 = (id)objc_claimAutoreleasedReturnValue();
        if (v564 != v524)
          goto LABEL_851;
        objc_msgSend(v563, "displayEtaDescription");
        v577 = (void *)objc_claimAutoreleasedReturnValue();
        v578 = objc_msgSend(v577, "routeEtaType");
        if (v578 > 4 || ((1 << v578) & 0x19) == 0)
        {

          v564 = v524;
LABEL_851:

LABEL_852:
          v565 = v708;
          v567 = (_QWORD *)*((_QWORD *)v708 + 41);
          v566 = *((_QWORD *)v708 + 42);
          if ((unint64_t)v567 < v566)
          {
            if (v567)
              *v567 = v563;
            v568 = v567 + 1;
LABEL_885:
            *((_QWORD *)v565 + 41) = v568;
            goto LABEL_886;
          }
          v569 = *((_QWORD *)v708 + 40);
          v570 = ((uint64_t)v567 - v569) >> 3;
          if ((unint64_t)(v570 + 1) >> 61)
            abort();
          v571 = v566 - v569;
          v572 = v571 >> 2;
          if (v571 >> 2 <= (unint64_t)(v570 + 1))
            v572 = v570 + 1;
          if ((unint64_t)v571 >= 0x7FFFFFFFFFFFFFF8)
            v573 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v573 = v572;
          if (v573)
          {
            v574 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v708 + 43) + 16))(*((_QWORD *)v708 + 43), 8 * v573, 8);
            v575 = (_QWORD *)(v574 + 8 * v570);
            v576 = v574 + 8 * v573;
            if (v574)
              *v575 = v563;
          }
          else
          {
            v576 = 0;
            v575 = (_QWORD *)(8 * v570);
          }
          v568 = v575 + 1;
          v582 = (char *)*((_QWORD *)v708 + 40);
          v583 = (char *)*((_QWORD *)v708 + 41);
          if (v583 == v582)
          {
            *((_QWORD *)v708 + 40) = v575;
            *((_QWORD *)v708 + 41) = v568;
            v589 = *((_QWORD *)v708 + 42);
            *((_QWORD *)v708 + 42) = v576;
          }
          else
          {
            v584 = v583 - v582 - 8;
            if (v584 <= 0x57
              || (v585 = (v582 - v583 + 7) & 0xFFFFFFFFFFFFFFF8, &v583[v585] < (char *)v575)
              && (char *)v575 + v585 < v583)
            {
              v586 = (char *)*((_QWORD *)v708 + 41);
              goto LABEL_878;
            }
            v592 = (v584 >> 3) + 1;
            v586 = &v583[-8 * (v592 & 0x3FFFFFFFFFFFFFFCLL)];
            v593 = v575 - 2;
            v594 = (__int128 *)(v583 - 32);
            v595 = v592 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v597 = *v594;
              v596 = v594[1];
              *v594 = 0uLL;
              v594[1] = 0uLL;
              v594 -= 2;
              *(v593 - 1) = v597;
              *v593 = v596;
              v593 -= 2;
              v595 -= 4;
            }
            while (v595);
            v575 -= v592 & 0x3FFFFFFFFFFFFFFCLL;
            if (v592 != (v592 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_878:
                v587 = *((_QWORD *)v586 - 1);
                v586 -= 8;
                *(_QWORD *)v586 = 0;
                *--v575 = v587;
              }
              while (v586 != v582);
            }
            v583 = (char *)*((_QWORD *)v708 + 40);
            v588 = (char *)*((_QWORD *)v708 + 41);
            *((_QWORD *)v708 + 40) = v575;
            *((_QWORD *)v708 + 41) = v568;
            v589 = *((_QWORD *)v708 + 42);
            *((_QWORD *)v708 + 42) = v576;
            while (v588 != v583)
            {
              v590 = (void *)*((_QWORD *)v588 - 1);
              v588 -= 8;

            }
          }
          v565 = v708;
          if (v583)
            (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)v708 + 43) + 40))(*((_QWORD *)v708 + 43), v583, v589 - (_QWORD)v583);
          goto LABEL_885;
        }

        objc_msgSend(v563, "displayEtaDescription");
        v580 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v580, "routeEtaType") == 3)
        {
          v581 = *v714 == 1;

          if (v581)
            goto LABEL_891;
        }
        else
        {

        }
        objc_msgSend(v563, "displayEtaDescription", v681);
        v564 = (id)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v564, "routeEtaType"))
          goto LABEL_851;
        v591 = *v714 == 2;

        if (!v591)
          goto LABEL_852;
LABEL_891:
        if (v563)
        {
          objc_msgSend(v563, "updateRoadSignWithNavContext:artworkCache:", a2, *((_QWORD *)v708 + 18));
          if (!v711)
            goto LABEL_900;
        }
        else
        {
          memset(v744, 0, 24);
          if (!v711)
          {
LABEL_900:
            v598 = *v707;
            if (*v707)
            {
              v599 = v707;
              v600 = *v707;
              do
              {
                v601 = v600[4];
                v602 = v601 >= (unint64_t)v563;
                if (v601 >= (unint64_t)v563)
                  v603 = (uint64_t **)v600;
                else
                  v603 = (uint64_t **)(v600 + 1);
                if (v602)
                  v599 = (uint64_t **)v600;
                v600 = *v603;
              }
              while (*v603);
              if (v599 != v707 && v563 >= v599[4])
              {
                v604 = v599[1];
                v605 = v599;
                if (v604)
                {
                  do
                  {
                    v606 = v604;
                    v604 = (uint64_t *)*v604;
                  }
                  while (v604);
                }
                else
                {
                  do
                  {
                    v606 = v605[2];
                    _ZF = *v606 == (_QWORD)v605;
                    v605 = (uint64_t **)v606;
                  }
                  while (!_ZF);
                }
                if (*((uint64_t ***)v708 + 44) == v599)
                  *((_QWORD *)v708 + 44) = v606;
                --*((_QWORD *)v708 + 47);
                std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v598, (uint64_t *)v599);
                v599[5] = (uint64_t *)&off_1E42B4E10;

                (*(void (**)(_QWORD, uint64_t **, uint64_t))(**((_QWORD **)v708 + 46) + 40))(*((_QWORD *)v708 + 46), v599, 64);
              }
            }
            v607 = *(id *)&v744[8];
            v608 = v607;
            if (v607)
            {
              v609 = v607;
            }
            else
            {
              objc_msgSend(v563, "label");
              v609 = (id)objc_claimAutoreleasedReturnValue();
            }
            v610 = v609;
            v611 = v609;

            if (*(_QWORD *)(*(_QWORD *)objc_msgSend(v611, "label") + 160))
            {
              v612 = *(_BYTE **)objc_msgSend(v611, "label");
              v612[297] = 0;
              if (v612[296])
                v612[298] = 0;
              v613 = v611;
              *(_QWORD *)&buf[0] = &off_1E42B4E10;
              *((_QWORD *)&buf[0] + 1) = v613;
              v614 = *((_QWORD *)v708 + 20);
              if (v614 >= *((_QWORD *)v708 + 21))
              {
                v615 = std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__push_back_slow_path<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(v702, (uint64_t)buf);
                v613 = (id)*((_QWORD *)&buf[0] + 1);
              }
              else
              {
                if (v614)
                {
                  *(_QWORD *)v614 = &off_1E42B4E10;
                  *(_QWORD *)(v614 + 8) = 0;
                  objc_storeStrong((id *)(v614 + 8), v610);
                  *((_QWORD *)&buf[0] + 1) = 0;

                  v613 = 0;
                }
                v615 = v614 + 24;
              }
              *((_QWORD *)v708 + 20) = v615;
              *(_QWORD *)&buf[0] = &off_1E42B4E10;

            }
            *(_QWORD *)v744 = &off_1E42B4E10;

            goto LABEL_886;
          }
        }
        *(_QWORD *)v744 = &off_1E42B4E10;

LABEL_886:
        ++v560;
        v551 = v708;
      }
      while (v560 != v562);
    }
    v616 = *((_QWORD *)v551 + 41) - *((_QWORD *)v551 + 40);
    if (v616)
    {
      v617 = 0;
      v618 = v616 >> 3;
      v619 = (uint64_t *)((char *)v551 + 152);
      v620 = v618 <= 1 ? 1 : v618;
      v621 = (uint64_t **)((char *)v551 + 360);
      do
      {
        v622 = *(id *)(*((_QWORD *)v551 + 40) + 8 * v617);
        v623 = v622;
        if (v622)
        {
          objc_msgSend(v622, "updateRoadSignWithNavContext:artworkCache:", a2, *((_QWORD *)v551 + 18));
          if (*(_QWORD *)&v744[8])
          {
            v624 = *(id *)&v744[8];
            v625 = *(_BYTE *)(*(_QWORD *)objc_msgSend(v624, "label") + 297) == 0;

            if (v625)
            {
              v636 = v708;
              v637 = (_QWORD *)*((_QWORD *)v708 + 20);
              if ((unint64_t)v637 >= *((_QWORD *)v708 + 21))
              {
                *((_QWORD *)v708 + 20) = std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__push_back_slow_path<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>(v619, (uint64_t)v744);
              }
              else
              {
                if (v637)
                {
                  *v637 = &off_1E42B4E10;
                  v637[1] = 0;
                  v638 = *(id *)&v744[8];
                  v639 = (void *)v637[1];
                  v637[1] = v638;

                  v636 = v708;
                }
                *((_QWORD *)v636 + 20) = v637 + 3;
              }
            }
            else if (objc_msgSend(v623, "hasLabel"))
            {
              v626 = *(id *)&v744[8];
              v627 = *(_QWORD *)(*(_QWORD *)objc_msgSend(v626, "label") + 160) == 0;

              if (!v627)
              {
                v628 = *v621;
                v629 = v621;
                v630 = v621;
                if (*v621)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v630 = (uint64_t **)v628;
                      v631 = v628[4];
                      if ((unint64_t)v623 >= v631)
                        break;
                      v628 = *v630;
                      v629 = v630;
                      if (!*v630)
                        goto LABEL_949;
                    }
                    if (v631 >= (unint64_t)v623)
                      break;
                    v628 = v630[1];
                    if (!v628)
                    {
                      v629 = v630 + 1;
                      goto LABEL_949;
                    }
                  }
                }
                else
                {
LABEL_949:
                  v632 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v708 + 46) + 16))(*((_QWORD *)v708 + 46), 64, 8);
                  v632[4] = (uint64_t)v623;
                  v632[5] = (uint64_t)&off_1E42B4E10;
                  v632[6] = 0;
                  v633 = *(id *)&v744[8];
                  v634 = (void *)v632[6];
                  v632[6] = (uint64_t)v633;

                  *v632 = 0;
                  v632[1] = 0;
                  v632[2] = (uint64_t)v630;
                  *v629 = v632;
                  v635 = **((_QWORD **)v708 + 44);
                  if (v635)
                  {
                    *((_QWORD *)v708 + 44) = v635;
                    v632 = *v629;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v708 + 45), v632);
                  ++*((_QWORD *)v708 + 47);
                }
              }
            }
          }
        }
        else
        {
          *(_QWORD *)&v744[8] = 0;
          *(_QWORD *)&v744[16] = 0;
        }
        *(_QWORD *)v744 = &off_1E42B4E10;

        ++v617;
        v551 = v708;
      }
      while (v617 != v620);
      v640 = (id *)*((_QWORD *)v708 + 40);
      v641 = (id *)*((_QWORD *)v708 + 41);
      if (v640 != v641)
      {
        while (1)
        {
          if (objc_msgSend(*v640, "hasLabelWithAnchor", v681))
          {
            objc_msgSend(*v640, "label");
            v643 = (void *)objc_claimAutoreleasedReturnValue();
            v644 = v643;
            v645 = v644;
            *(_QWORD *)v744 = &off_1E42B4E10;
            *(_QWORD *)&v744[8] = v644;
            v646 = v551;
            v647 = *((_QWORD *)v551 + 20);
            if (v647 >= *((_QWORD *)v646 + 21))
            {
              v649 = std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__push_back_slow_path<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(v619, (uint64_t)v744);
              v648 = *(void **)&v744[8];
            }
            else
            {
              v648 = v644;
              if (v647)
              {
                *(_QWORD *)v647 = &off_1E42B4E10;
                *(_QWORD *)(v647 + 8) = 0;
                objc_storeStrong((id *)(v647 + 8), v643);
                *(_QWORD *)&v744[8] = 0;

                v648 = 0;
              }
              v649 = v647 + 24;
            }
            *((_QWORD *)v708 + 20) = v649;
            *(_QWORD *)v744 = &off_1E42B4E10;

            v551 = v708;
          }
          v650 = *v621;
          if (!*v621)
            goto LABEL_964;
          v651 = (uint64_t *)*v640;
          v652 = v621;
          do
          {
            v653 = v650[4];
            v654 = v653 >= (unint64_t)v651;
            if (v653 >= (unint64_t)v651)
              v655 = (uint64_t **)v650;
            else
              v655 = (uint64_t **)(v650 + 1);
            if (v654)
              v652 = (uint64_t **)v650;
            v650 = *v655;
          }
          while (*v655);
          if (v652 == v621 || v651 < v652[4])
            goto LABEL_964;
          if (!objc_msgSend(v651, "hasLabelWithAnchor"))
            goto LABEL_996;
          objc_msgSend(*v640, "label");
          v656 = (void *)objc_claimAutoreleasedReturnValue();
          v657 = *(_QWORD *)(*(_QWORD *)objc_msgSend(v656, "label") + 288);
          if (!v657)
            break;
          v658 = *(_QWORD *)(v657 + 640);
          if (!v658)
            break;
          v659 = atomic_load((unsigned __int8 *)(v658 + 143));
          v660 = (v659 & 1) == 0;

          if (v660)
            goto LABEL_996;
          v661 = v652[1];
          v662 = v652;
          if (v661)
          {
            do
            {
              v663 = v661;
              v661 = (uint64_t *)*v661;
            }
            while (v661);
          }
          else
          {
            do
            {
              v663 = v662[2];
              _ZF = *v663 == (_QWORD)v662;
              v662 = (uint64_t **)v663;
            }
            while (!_ZF);
          }
          if (*((uint64_t ***)v708 + 44) == v652)
            *((_QWORD *)v708 + 44) = v663;
          --*((_QWORD *)v708 + 47);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v708 + 45), (uint64_t *)v652);
          v652[5] = (uint64_t *)&off_1E42B4E10;

          v551 = v708;
          (*(void (**)(_QWORD, uint64_t **, uint64_t))(**((_QWORD **)v708 + 46) + 40))(*((_QWORD *)v708 + 46), v652, 64);
LABEL_964:
          if (++v640 == v641)
            goto LABEL_1000;
        }

LABEL_996:
        v551 = v708;
        *((_BYTE *)v708 + 252) = 1;
        v664 = (_QWORD *)*((_QWORD *)v708 + 20);
        if ((unint64_t)v664 >= *((_QWORD *)v708 + 21))
        {
          v642 = std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__push_back_slow_path<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>(v619, (uint64_t)(v652 + 5));
        }
        else
        {
          if (v664)
          {
            *v664 = &off_1E42B4E10;
            v664[1] = 0;
            v665 = v652[6];
            v666 = (void *)v664[1];
            v664[1] = v665;

            v551 = v708;
          }
          v642 = (uint64_t)(v664 + 3);
        }
        *((_QWORD *)v551 + 20) = v642;
        goto LABEL_964;
      }
    }
  }
LABEL_1000:
  v667 = __p[0];
  if (__p[0])
  {
    do
    {
      v668 = (_QWORD *)*v667;
      operator delete(v667);
      v667 = v668;
    }
    while (v668);
  }
  v669 = v727[0];
  v727[0] = 0;
  if (v669)
    operator delete(v669);
LABEL_22:

}

void sub_19F5F8204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a57);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F5F872C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::extinguishLabels(md::LabelNavEtaLabeler *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t i;
  id v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  GEOComposedRoute *v15;

  v3 = a2;
  v4 = (_QWORD *)*((_QWORD *)this + 33);
  if (v4)
  {
    v5 = (uint64_t *)((char *)this + 264);
    do
    {
      v6 = v4[4];
      v7 = v6 >= (unint64_t)v3;
      if (v6 >= (unint64_t)v3)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (uint64_t *)((char *)this + 264) && v5[4] <= (unint64_t)v3)
    {
      v15 = v3;
      for (i = v5[5]; i != v5[6]; i += 72)
      {
        v10 = *(id *)(i + 56);
        std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::__erase_unique<VKLabelNavRouteEta * {__strong}>((uint64_t)this + 352, (unint64_t)v10);

      }
      v11 = (uint64_t *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        v13 = v5;
        do
        {
          v12 = (uint64_t *)v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = v12;
        }
        while (!v14);
      }
      if (*((uint64_t **)this + 32) == v5)
        *((_QWORD *)this + 32) = v12;
      --*((_QWORD *)this + 35);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 33), v5);
      std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,GEOComposedRoute * const {__strong}::_retain_ptr<VKLabelNavRouteEta * {__strong},GEOComposedRoute * const {__strong}::_retain_objc_arc,GEOComposedRoute * const {__strong}::_release_objc_arc,GEOComposedRoute * const {__strong}::_hash_objc,GEOComposedRoute * const {__strong}::_equal_objc>,std::equal_to<md>,std::allocator<std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>,std::vector<std::allocator,std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>>>,0>((uint64_t)(v5 + 4));
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34), v5, 64);
      v3 = v15;
    }
  }

}

void sub_19F5F887C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__assign_with_size[abi:nn180100]<md::AvoidanceRectWithPriority*,md::AvoidanceRectWithPriority*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t i;
  int v24;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v9 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) >= a4)
  {
    v17 = (uint64_t *)(result + 8);
    v16 = *(_QWORD *)(result + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= a4)
    {
      for (i = *(_QWORD *)result; a2 != a3; a2 = (__int128 *)((char *)a2 + 24))
      {
        *(_DWORD *)i = *(_DWORD *)a2;
        *(_DWORD *)(i + 4) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(i + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(i + 12) = *((_DWORD *)a2 + 3);
        v24 = *((_DWORD *)a2 + 4);
        *(_BYTE *)(i + 20) = *((_BYTE *)a2 + 20);
        *(_DWORD *)(i + 16) = v24;
        i += 24;
      }
      v22 = i - v9;
    }
    else
    {
      v18 = (__int128 *)((char *)a2 + 8 * ((v16 - v9) >> 3));
      if (v16 != v9)
      {
        do
        {
          *(_DWORD *)v9 = *(_DWORD *)a2;
          *(_DWORD *)(v9 + 4) = *((_DWORD *)a2 + 1);
          *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
          *(_DWORD *)(v9 + 12) = *((_DWORD *)a2 + 3);
          v19 = *((_DWORD *)a2 + 4);
          *(_BYTE *)(v9 + 20) = *((_BYTE *)a2 + 20);
          *(_DWORD *)(v9 + 16) = v19;
          a2 = (__int128 *)((char *)a2 + 24);
          v9 += 24;
        }
        while (a2 != v18);
        v9 = *v17;
      }
      v20 = v9;
      if (v18 != a3)
      {
        v20 = v9;
        do
        {
          if (v20)
          {
            v21 = *v18;
            *(_QWORD *)(v20 + 16) = *((_QWORD *)v18 + 2);
            *(_OWORD *)v20 = v21;
          }
          v18 = (__int128 *)((char *)v18 + 24);
          v20 += 24;
        }
        while (v18 != a3);
      }
      v22 = v20 - v9;
    }
  }
  else
  {
    if (v9)
    {
      *(_QWORD *)(result + 8) = v9;
      (*(void (**)(_QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24));
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_31;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_31:
      abort();
    v13 = 24 * v12;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v7 + 24) + 16))(*(_QWORD *)(v7 + 24), 24 * v12, 4);
    v9 = result;
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 8) = result;
    *(_QWORD *)(v7 + 16) = result + v13;
    v14 = result;
    if (a2 != a3)
    {
      v14 = result;
      do
      {
        if (v14)
        {
          v15 = *a2;
          *(_QWORD *)(v14 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v14 = v15;
        }
        a2 = (__int128 *)((char *)a2 + 24);
        v14 += 24;
      }
      while (a2 != a3);
    }
    v22 = v14 - result;
    v17 = (uint64_t *)(v7 + 8);
  }
  *v17 = v9 + v22;
  return result;
}

float64x2_t *geo::Frustum<double>::Frustum(float64x2_t *a1, double *a2, double *a3, double a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;

  v5 = a2[1];
  v7 = a2[4];
  v6 = a2[5];
  v9 = a2[8];
  v8 = a2[9];
  v11 = a2[12];
  v10 = a2[13];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[6];
  v15 = a2[7];
  v16 = a2[10];
  v17 = a2[11];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a3[1];
  v21 = *a2 - *a3 * v13;
  v22 = v7 - *a3 * v15;
  v23.f64[0] = v9 - *a3 * v17;
  v23.f64[1] = v11 - *a3 * v19;
  v24 = a3[2];
  v25 = a3[3];
  v26 = -(*a2 - v24 * v13);
  v27 = -(v7 - v24 * v15);
  v28 = -(v11 - v24 * v19);
  v29.f64[0] = -(v9 - v24 * v17);
  v29.f64[1] = v28;
  v30 = v5 - v20 * v13;
  v31 = v6 - v20 * v15;
  v32.f64[0] = v8 - v20 * v17;
  v32.f64[1] = v10 - v20 * v19;
  v33 = v12 - v13 * a4;
  v34 = v14 - v15 * a4;
  v35.f64[0] = v16 - v17 * a4;
  v36 = -(v5 - v25 * v13);
  v37 = -(v6 - v25 * v15);
  v38.f64[0] = -(v8 - v25 * v17);
  v38.f64[1] = -(v10 - v25 * v19);
  v35.f64[1] = v18 - v19 * a4;
  v39 = 1.0 / sqrt(v33 * v33 + v34 * v34 + v35.f64[0] * v35.f64[0]);
  v40 = v13 - v12;
  v41 = v15 - v14;
  v42.f64[0] = v17 - v16;
  v42.f64[1] = v19 - v18;
  a1->f64[0] = v39 * v33;
  a1->f64[1] = v39 * v34;
  a1[1] = vmulq_n_f64(v35, v39);
  v43 = 1.0 / sqrt(v40 * v40 + v41 * v41 + v42.f64[0] * v42.f64[0]);
  a1[2].f64[0] = v43 * v40;
  a1[2].f64[1] = v43 * v41;
  a1[3] = vmulq_n_f64(v42, v43);
  v44 = 1.0 / sqrt(v30 * v30 + v31 * v31 + v32.f64[0] * v32.f64[0]);
  a1[4].f64[0] = v44 * v30;
  a1[4].f64[1] = v44 * v31;
  a1[5] = vmulq_n_f64(v32, v44);
  v45 = 1.0 / sqrt(v36 * v36 + v37 * v37 + v38.f64[0] * v38.f64[0]);
  a1[6].f64[0] = v45 * v36;
  a1[6].f64[1] = v45 * v37;
  a1[7] = vmulq_n_f64(v38, v45);
  v46 = 1.0 / sqrt(v21 * v21 + v22 * v22 + v23.f64[0] * v23.f64[0]);
  a1[8].f64[0] = v46 * v21;
  a1[8].f64[1] = v46 * v22;
  a1[9] = vmulq_n_f64(v23, v46);
  v47 = 1.0 / sqrt(v26 * v26 + v27 * v27 + v29.f64[0] * v29.f64[0]);
  a1[10].f64[0] = v47 * v26;
  a1[10].f64[1] = v47 * v27;
  a1[11] = vmulq_n_f64(v29, v47);
  geo::Frustum<double>::calculateCorners(a1->f64, a2, a4);
  return a1;
}

void md::LabelNavEtaLabeler::extractAndSortAnnotations(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  unsigned __int8 v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __n128 (*v40)(__n128 *, __n128 *);
  uint64_t (*v41)(uint64_t);
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  id v48;
  uint64_t *v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v37 = 0;
  v38 = &v37;
  v39 = 0x5012000000;
  v40 = __Block_byref_object_copy__54;
  v41 = __Block_byref_object_dispose__55;
  v42 = "";
  v43 = 0;
  v44 = 0;
  v45 = 0;
  {
    v35 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v46 = mdm::Allocator::instance(void)::alloc;
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3321888768;
  v47[2] = ___ZN2md18LabelNavEtaLabeler25extractAndSortAnnotationsEP11VKRouteInfoNSt3__18functionIFbRKNS_27RouteRangeAnnotationRequestEEEE_block_invoke;
  v47[3] = &unk_1E42E9FC0;
  v50 = a1;
  v7 = v5;
  v48 = v7;
  v8 = v51;
  v9 = a3[3];
  if (!v9)
    goto LABEL_5;
  if ((_QWORD *)v9 != a3)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_5:
    v52 = (_BYTE *)v9;
    goto LABEL_7;
  }
  v52 = v51;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v51);
LABEL_7:
  v49 = &v37;
  objc_msgSend(v7, "visitAnnotations:", v47);
  v10 = v38[6];
  v11 = (__int128 *)v38[7];
  v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v10) >> 4));
  if (v11 == (__int128 *)v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*,false>(v10, v11, v13, 1);
  v14 = v38;
  objc_msgSend(v7, "route");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v15;
  v17 = *(uint64_t **)(a1 + 528);
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t **)v17;
        v20 = v17[4];
        if (v15 >= v20)
          break;
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_17;
      }
      if (v20 >= v15)
        break;
      v17 = v19[1];
      if (!v17)
      {
        v18 = v19 + 1;
        goto LABEL_17;
      }
    }
    v21 = (uint64_t *)v19;
  }
  else
  {
    v18 = (uint64_t **)(a1 + 528);
    v19 = (uint64_t **)(a1 + 528);
LABEL_17:
    v21 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 536) + 16))(*(_QWORD *)(a1 + 536), 72, 8);
    v21[4] = (uint64_t)v16;
    v21[5] = 0;
    v21[6] = 0;
    v21[7] = 0;
    {
      v36 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v21[8] = mdm::Allocator::instance(void)::alloc;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    *v18 = v21;
    v23 = **(_QWORD **)(a1 + 520);
    v24 = v21;
    if (v23)
    {
      *(_QWORD *)(a1 + 520) = v23;
      v24 = *v18;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 528), v24);
    v16 = 0;
    ++*(_QWORD *)(a1 + 544);
  }
  v25 = v21 + 5;
  v26 = v21[5];
  if (v26)
  {
    v27 = v21[6];
    v28 = v21[5];
    if (v27 != v26)
    {
      do
      {
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v27 - 32, *(_QWORD *)(v27 - 24));

        v29 = *(void **)(v27 - 48);
        v27 -= 48;

      }
      while (v27 != v26);
      v28 = *v25;
    }
    v21[6] = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[8] + 40))(v21[8], v28, v21[7] - v28);
    *v25 = 0;
    v21[6] = 0;
    v21[7] = 0;
  }
  *(_OWORD *)(v21 + 5) = *((_OWORD *)v14 + 3);
  v21[7] = v14[8];
  v14[6] = 0;
  v14[7] = 0;
  v14[8] = 0;

  if (v52 == v51)
  {
    v30 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v30 = 5;
    v8 = v52;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v30))(v8);
LABEL_32:

  _Block_object_dispose(&v37, 8);
  v31 = v43;
  if (v43)
  {
    v32 = v44;
    v33 = v43;
    if (v44 != v43)
    {
      do
      {
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v32 - 32, *(_QWORD *)(v32 - 24));

        v34 = *(void **)(v32 - 48);
        v32 -= 48;

      }
      while (v32 != v31);
      v33 = v43;
    }
    v44 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v33, v45 - v33);
  }

}

void sub_19F5F90E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a10, 8);
  std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::~vector[abi:nn180100](&a16);

  _Unwind_Resume(a1);
}

uint64_t std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::__tree_const_iterator<md::RouteRangeAnnotationRequest,std::__tree_node<md::RouteRangeAnnotationRequest,void *> *,long> &,std::insert_iterator<std::set<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>> &>(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v12;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  v7 = (_QWORD *)result;
  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
  {
LABEL_56:
    v33 = *a6;
    v32 = (_QWORD *)a6[1];
    v9 = v8;
  }
  else
  {
    v12 = *(_QWORD **)a4;
    while (*(_QWORD *)a4 != *a5)
    {
      v15 = v8[4];
      v16 = v12[4];
      if (v15 == v16)
      {
        result = objc_msgSend((id)v8[5], "compare:", v12[5]);
        v8 = *(_QWORD **)a2;
        if (result == -1)
        {
LABEL_25:
          result = std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::__emplace_hint_unique_key_args<md::RouteRangeAnnotationRequest,md::RouteRangeAnnotationRequest const&>(*a6, a6[1], (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
          a6[1] = result;
          v27 = *(_QWORD **)(result + 8);
          if (v27)
          {
            do
            {
              v28 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v28 = *(_QWORD **)(result + 16);
              v24 = *v28 == result;
              result = (uint64_t)v28;
            }
            while (!v24);
          }
          a6[1] = (uint64_t)v28;
          v29 = *(_QWORD **)a2;
          v30 = *(_QWORD **)(*(_QWORD *)a2 + 8);
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v29[2];
              v24 = *v31 == (_QWORD)v29;
              v29 = v31;
            }
            while (!v24);
          }
          *(_QWORD *)a2 = v31;
          goto LABEL_40;
        }
        v12 = *(_QWORD **)a4;
        v20 = *(_QWORD *)(*(_QWORD *)a4 + 32);
        v21 = v8[4];
        v17 = v20 >= v21;
        if (v20 != v21)
        {
LABEL_6:
          if (v17)
            goto LABEL_14;
          v18 = (_QWORD *)v12[1];
          if (!v18)
            goto LABEL_37;
          goto LABEL_8;
        }
      }
      else
      {
        if (v15 < v16)
          goto LABEL_25;
        v17 = v16 >= v15;
        if (v16 != v15)
          goto LABEL_6;
      }
      result = objc_msgSend((id)v12[5], "compare:", v8[5]);
      if (result != -1)
      {
        v8 = *(_QWORD **)a2;
LABEL_14:
        v22 = (_QWORD *)v8[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v8[2];
            v24 = *v23 == (_QWORD)v8;
            v8 = v23;
          }
          while (!v24);
        }
        *(_QWORD *)a2 = v23;
        v25 = *(_QWORD **)a4;
        v26 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v26)
        {
          do
          {
            v19 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v25[2];
            v24 = *v19 == (_QWORD)v25;
            v25 = v19;
          }
          while (!v24);
        }
        goto LABEL_39;
      }
      v12 = *(_QWORD **)a4;
      v18 = *(_QWORD **)(*(_QWORD *)a4 + 8);
      if (!v18)
      {
        do
        {
LABEL_37:
          v19 = (_QWORD *)v12[2];
          v24 = *v19 == (_QWORD)v12;
          v12 = v19;
        }
        while (!v24);
        goto LABEL_39;
      }
      do
      {
LABEL_8:
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
LABEL_39:
      *(_QWORD *)a4 = v19;
LABEL_40:
      v8 = *(_QWORD **)a2;
      v9 = (_QWORD *)*a3;
      if (*(_QWORD *)a2 == *a3)
        goto LABEL_56;
      v12 = *(_QWORD **)a4;
    }
    v33 = *a6;
    v32 = (_QWORD *)a6[1];
    if (v8 != v9)
    {
      do
      {
        result = std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::__emplace_hint_unique_key_args<md::RouteRangeAnnotationRequest,md::RouteRangeAnnotationRequest const&>(v33, (uint64_t)v32, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
        v34 = *(_QWORD **)(result + 8);
        if (v34)
        {
          do
          {
            v32 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v32 = *(_QWORD **)(result + 16);
            v24 = *v32 == result;
            result = (uint64_t)v32;
          }
          while (!v24);
        }
        v35 = (_QWORD *)v8[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD *)v8[2];
            v24 = *v36 == (_QWORD)v8;
            v8 = v36;
          }
          while (!v24);
        }
        v8 = v36;
      }
      while (v36 != v9);
    }
  }
  *v7 = v9;
  v7[1] = v33;
  v7[2] = v32;
  return result;
}

void md::LabelNavEtaLabeler::setupRouteLabelingState(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, unsigned int a6, char a7)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned __int8 v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  char *v32;
  char *i;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  VKRouteInfo *v39;
  float *v40;
  _QWORD *v41;
  float v42;
  unint64_t v43;
  _QWORD *v45;
  float v46;
  float v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  float *v53;
  unsigned int v54;
  const GEOComposedRoute *v55;
  float v56;
  float v57;
  float32x2_t *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  double v61;
  double v62;
  float64x2_t *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float32x2_t *v68;
  unsigned int v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  float64x2_t *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  unint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  const GEOComposedRoute *v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  unsigned int *v92;
  unsigned int *v93;
  float32x2_t *v94;
  double v95;
  float64x2_t *v96;
  double v97;
  double v98;
  float32x2_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  float32x2_t *v104;
  unint64_t v105;
  float32x2_t *v106;
  uint64_t v107;
  _OWORD *v108;
  float32x2_t *v109;
  uint64_t v110;
  __int128 v111;
  float32x2_t v112;
  float32x2_t *v113;
  unint64_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  double v117;
  float64x2_t *v118;
  double v119;
  double v120;
  float32x2_t v121;
  float32x2_t *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  float32x2_t *v127;
  unint64_t v128;
  float32x2_t *v129;
  float32x2_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  unsigned __int16 v133;
  size_t v134;
  std::__shared_weak_count_vtbl *v135;
  unsigned __int16 *v136;
  uint64_t v137;
  id *j;
  int16x8_t *v139;
  uint64_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  uint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  _BYTE *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  __int128 v157;
  _QWORD *v158;
  _BYTE *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  float32x2_t *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  _OWORD *v171;
  float32x2_t *v172;
  uint64_t v173;
  __int128 v174;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  float v183;
  float v184;
  float v185;
  float v186;
  id *v187;
  id *v188;
  uint64_t v189;
  id v190;
  id v191;
  char v192;
  id v193;
  void *v194;
  uint64_t *v195;
  char *v196;
  void *v197;
  uint64_t v198;
  id *v199;
  void *v200;
  void *v201;
  _BYTE *v202;
  PolylineCoordinate v203;
  PolylineCoordinate v204;
  double v205;
  unsigned __int8 v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  float *v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float32x2_t v217;
  __int16 *v218;
  __int16 v219;
  uint64_t v220;
  unsigned int v221;
  unsigned __int8 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  void *v227;
  double v228;
  double v229;
  double v230;
  long double v231;
  long double v232;
  float64x2_t v233;
  _BYTE *v234;
  unsigned __int8 v235;
  void *v236;
  double v237;
  double v238;
  void *v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v249;
  float v250;
  float v251;
  float v252;
  float *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  float *v266;
  int v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  VKRouteInfo *v271;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  _BOOL4 v288;
  float64x2_t v289;
  float64x2_t v290;
  double v291;
  float64x2_t v292;
  double v293;
  double v294;
  void *v295;
  float64_t v296;
  double v297;
  double v298;
  unint64_t *v299;
  double v300;
  double v301;
  uint64_t v302;
  float *v303;
  char v304;
  double v305;
  void *v306;
  id *__p;
  _DWORD *__pa;
  double v309;
  const GEOComposedRoute *v310;
  void *v311;
  uint64_t v312;
  _BYTE v314[2];
  float64x2_t v315;
  double v316[2];
  PolylineCoordinate v317[2];
  double v318;
  __int128 v319;
  std::__shared_weak_count *v320;
  PolylineCoordinate v321;

  v8 = a4;
  objc_msgSend(v8, "route");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (uint64_t)v9;
  v11 = *(uint64_t **)(a1 + 464);
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v11;
        v14 = v11[4];
        if ((unint64_t)v9 >= v14)
          break;
        v11 = *v13;
        v12 = v13;
        if (!*v13)
          goto LABEL_8;
      }
      if (v14 >= (unint64_t)v9)
        break;
      v11 = v13[1];
      if (!v11)
      {
        v12 = v13 + 1;
        goto LABEL_8;
      }
    }

    v15 = (uint64_t *)v13;
  }
  else
  {
    v12 = (uint64_t **)(a1 + 464);
    v13 = (uint64_t **)(a1 + 464);
LABEL_8:
    v15 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 472) + 16))(*(_QWORD *)(a1 + 472), 64, 8);
    v15[4] = v10;
    v15[5] = 0;
    v15[6] = 0;
    v15[7] = 0;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v13;
    *v12 = v15;
    v16 = **(_QWORD **)(a1 + 456);
    v17 = v15;
    if (v16)
    {
      *(_QWORD *)(a1 + 456) = v16;
      v17 = *v12;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 464), v17);
    ++*(_QWORD *)(a1 + 480);
  }
  objc_msgSend(v8, "route");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (uint64_t)v18;
  v20 = *(uint64_t **)(a1 + 496);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v22 = (uint64_t **)v20;
        v23 = v20[4];
        if ((unint64_t)v18 >= v23)
          break;
        v20 = *v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_19;
      }
      if (v23 >= (unint64_t)v18)
        break;
      v20 = v22[1];
      if (!v20)
      {
        v21 = v22 + 1;
        goto LABEL_19;
      }
    }

    v269 = (uint64_t *)v22;
  }
  else
  {
    v21 = (uint64_t **)(a1 + 496);
    v22 = (uint64_t **)(a1 + 496);
LABEL_19:
    v24 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 504) + 16))(*(_QWORD *)(a1 + 504), 72, 8);
    v24[4] = v19;
    v24[5] = 0;
    v24[6] = 0;
    v24[7] = 0;
    {
      v263 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v263, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v24[8] = mdm::Allocator::instance(void)::alloc;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v22;
    *v21 = v24;
    v26 = **(_QWORD **)(a1 + 488);
    v269 = v24;
    if (v26)
    {
      *(_QWORD *)(a1 + 488) = v26;
      v24 = *v21;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 496), v24);
    ++*(_QWORD *)(a1 + 512);
  }
  objc_msgSend(v8, "route");
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  v268 = (uint64_t)(v15 + 5);
  v271 = (VKRouteInfo *)v8;
  v27 = *(_QWORD **)(a1 + 424);
  if (!v27)
  {
LABEL_30:
    v267 = 0;
    goto LABEL_32;
  }
  while (1)
  {
    v28 = v27[4];
    if (v28 <= (unint64_t)v271)
      break;
LABEL_26:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_30;
  }
  if (v28 < (unint64_t)v271)
  {
    ++v27;
    goto LABEL_26;
  }
  v267 = 1;
LABEL_32:

  v29 = v269[5];
  v312 = a1;
  if (v269[6] != v29)
  {
    v30 = 0;
    v266 = (float *)(a1 + 424);
    v276 = (_QWORD *)(a1 + 80);
    while (1)
    {
      v270 = v30;
      v31 = geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>::operator[](v268, v29 + 48 * v30);
      *((_BYTE *)v31 + 148) = a5;
      v32 = (char *)v31[6];
      for (i = (char *)v31[7]; i != v32; i -= 16)
      {
        v34 = (std::__shared_weak_count *)*((_QWORD *)i - 1);
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      v31[7] = v32;
      objc_msgSend(*(id *)(v29 + 48 * v270 + 8), "etaDescription");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v37, "routeEtaType");

      v31[19] = (id)v38;
      v39 = v271;
      v40 = v266;
      v41 = *(_QWORD **)v266;
      v42 = 0.0;
      if (*(_QWORD *)v266)
      {
        do
        {
          v43 = v41[4];
          _CF = v43 >= (unint64_t)v39;
          if (v43 >= (unint64_t)v39)
            v45 = v41;
          else
            v45 = v41 + 1;
          if (_CF)
            v40 = (float *)v41;
          v41 = (_QWORD *)*v45;
        }
        while (*v45);
        if (v40 != v266 && *((_QWORD *)v40 + 4) <= (unint64_t)v39)
          v42 = v40[11];
      }
      v46 = v42 == 0.0 ? 8.0 : v42 + v42;
      v47 = v46 * *(float *)(*(_QWORD *)(a2 + 8) + 176);

      *((float *)v31 + 21) = v47;
      if ((v267 & 1) != 0)
      {
        v48 = v29 + 48 * v270;
        *((_DWORD *)v31 + 20) = -1;
        v49 = *(_QWORD **)(v48 + 16);
        v273 = (_QWORD *)(v48 + 24);
        if (v49 != (_QWORD *)(v48 + 24))
          break;
      }
LABEL_34:
      v29 = v269[5];
      v30 = v270 + 1;
      if (v270 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v269[6] - v29) >> 4))
        goto LABEL_216;
    }
    __p = v31;
    while (1)
    {
      v50 = v49[5];
      v274 = v49[6];
      v275 = v49;
      if (v50 != v274)
        break;
LABEL_62:
      v51 = (_QWORD *)v49[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v49[2];
          _ZF = *v52 == (_QWORD)v49;
          v49 = v52;
        }
        while (!_ZF);
      }
      v49 = v52;
      if (v52 == v273)
        goto LABEL_34;
    }
LABEL_66:
    (*(void (**)(float64x2_t *__return_ptr, _QWORD, uint64_t, void *, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(&v315, *(_QWORD *)(a1 + 40), a3, v306, v50);
    v277 = v50;
    v303 = *(float **)&v315.f64[1];
    v53 = *(float **)&v315.f64[0];
    if (*(_QWORD *)&v315.f64[0] == *(_QWORD *)&v315.f64[1])
      goto LABEL_211;
    v54 = *((_DWORD *)v31 + 20);
    if (v54 >= *((_DWORD *)v275 + 8))
      v54 = *((_DWORD *)v275 + 8);
    *((_DWORD *)v31 + 20) = v54;
    while (2)
    {
      v55 = v306;
      v56 = v53[2];
      v57 = v53[1];
      if (*(_DWORD *)v53 == LODWORD(v56) && vabds_f32(v57, v53[3]) < 0.00000011921)
      {
        v58 = 0;
        v59 = 0;
        v60 = 0;
        goto LABEL_155;
      }
      if (v57 == 0.0)
      {
        v68 = 0;
        v59 = 0;
      }
      else
      {
        v317[0] = *(PolylineCoordinate *)v53;
        v297 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v55, v317);
        v300 = v61;
        v309 = v62;
        v63 = *(float64x2_t **)(a2 + 24);
        v64 = v63[55].f64[1];
        v65 = v63[57].f64[1];
        v66 = v63[59].f64[1];
        v67 = v63[61].f64[1];
        v284 = v63[54];
        v285 = v63[56];
        v289 = v63[58];
        v292 = v63[60];
        v68 = (float32x2_t *)operator new(8uLL);
        *v68 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v292, v284, v297), v285, v300), v289, v309), 1.0 / (v67 + v64 * v297 + v65 * v300 + v66 * v309)));
        v59 = v68 + 1;
        v57 = v53[1];
        v56 = v53[2];
      }
      if (v57 <= 0.0)
        v69 = *(_DWORD *)v53;
      else
        v69 = *(_DWORD *)v53 + 1;
      v310 = v55;
      if (v69 == LODWORD(v56))
      {
        v317[0] = (PolylineCoordinate)LODWORD(v56);
        v70 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v55, v317);
        v73 = (char *)v59 - (char *)v68;
        v74 = v59 - v68;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61)
          goto LABEL_286;
        v76 = *(float64x2_t **)(a2 + 24);
        v77 = v76[55].f64[1];
        v78 = v76[57].f64[1];
        v79 = v76[61].f64[1];
        v80 = v76[59].f64[1];
        v81 = v76[54];
        v82 = v76[56];
        v83 = v76[60];
        v84 = v76[58];
        if (v73 >> 2 > v75)
          v75 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v85 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v85 = v75;
        if (v85)
        {
          if (v85 >> 61)
            goto LABEL_283;
          v283 = v76[54];
          v284 = v76[56];
          v286 = v76[58];
          v290 = v76[60];
          v293 = v70;
          v298 = v71;
          v301 = v72;
          v86 = operator new(8 * v85);
          v70 = v293;
          v71 = v298;
          v72 = v301;
          v87 = v86;
          v84 = v286;
          v83 = v290;
          v82 = v284;
          v81 = v283;
        }
        else
        {
          v87 = 0;
        }
        v58 = (float32x2_t *)&v87[8 * v74];
        *v58 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v83, v81, v70), v82, v71), v84, v72), 1.0 / (v79 + v77 * v70 + v78 * v71 + v80 * v72)));
        v113 = v58 + 1;
        if (v59 == v68)
        {
          a1 = v312;
          if (v68)
            goto LABEL_127;
        }
        else
        {
          v114 = (char *)&v59[-1] - (char *)v68;
          if (v114 < 0x58 || (unint64_t)((char *)v68 - v87) < 0x20)
          {
            v115 = v59;
            a1 = v312;
            goto LABEL_125;
          }
          v165 = (v114 >> 3) + 1;
          v115 = &v59[-(v165 & 0x3FFFFFFFFFFFFFFCLL)];
          v166 = &v87[8 * v74 - 16];
          v167 = v59 - 2;
          v168 = v165 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v169 = *(_OWORD *)v167->f32;
            *(v166 - 1) = *(_OWORD *)v167[-2].f32;
            *v166 = v169;
            v166 -= 2;
            v167 -= 4;
            v168 -= 4;
          }
          while (v168);
          v58 -= v165 & 0x3FFFFFFFFFFFFFFCLL;
          a1 = v312;
          if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_125:
              v116 = v115[-1];
              --v115;
              v58[-1] = v116;
              --v58;
            }
            while (v115 != v68);
          }
          if (v68)
LABEL_127:
            operator delete(v68);
        }
        v60 = (float32x2_t *)&v87[8 * v85];
        v59 = v113;
        v55 = v310;
LABEL_133:
        if (v53[3] != 0.0)
        {
          v317[0] = *(PolylineCoordinate *)(v53 + 2);
          v117 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v55, v317);
          v118 = *(float64x2_t **)(a2 + 24);
          v121 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v118[60], v118[54], v117), v118[56], v119), v118[58], v120), 1.0 / (v118[61].f64[1] + v118[55].f64[1] * v117 + v118[57].f64[1] * v119 + v118[59].f64[1] * v120)));
          if (v59 < v60)
          {
            *v59 = v121;
            v122 = v59 + 1;
            a1 = v312;
            goto LABEL_154;
          }
          v123 = v59 - v58;
          v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61)
LABEL_286:
            abort();
          if (((char *)v60 - (char *)v58) >> 2 > v124)
            v124 = ((char *)v60 - (char *)v58) >> 2;
          if ((unint64_t)((char *)v60 - (char *)v58) >= 0x7FFFFFFFFFFFFFF8)
            v125 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v125 = v124;
          if (v125)
          {
            if (v125 >> 61)
LABEL_283:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v126 = operator new(8 * v125);
          }
          else
          {
            v126 = 0;
          }
          v127 = (float32x2_t *)&v126[8 * v123];
          *v127 = v121;
          v122 = v127 + 1;
          if (v59 == v58)
          {
            a1 = v312;
            v60 = (float32x2_t *)&v126[8 * v125];
            if (v58)
              goto LABEL_152;
          }
          else
          {
            v128 = (char *)&v59[-1] - (char *)v58;
            if (v128 < 0x58 || (unint64_t)((char *)v58 - v126) < 0x20)
            {
              v129 = v59;
              a1 = v312;
              goto LABEL_150;
            }
            v170 = (v128 >> 3) + 1;
            v129 = &v59[-(v170 & 0x3FFFFFFFFFFFFFFCLL)];
            v171 = &v126[8 * v123 - 16];
            v172 = v59 - 2;
            v173 = v170 & 0x3FFFFFFFFFFFFFFCLL;
            a1 = v312;
            do
            {
              v174 = *(_OWORD *)v172->f32;
              *(v171 - 1) = *(_OWORD *)v172[-2].f32;
              *v171 = v174;
              v171 -= 2;
              v172 -= 4;
              v173 -= 4;
            }
            while (v173);
            v127 -= v170 & 0x3FFFFFFFFFFFFFFCLL;
            if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_150:
                v130 = v129[-1];
                --v129;
                v127[-1] = v130;
                --v127;
              }
              while (v129 != v58);
            }
            v60 = (float32x2_t *)&v126[8 * v125];
            if (v58)
LABEL_152:
              operator delete(v58);
          }
          v58 = v127;
LABEL_154:
          v59 = v122;
          v55 = v310;
        }
LABEL_155:

        if ((unint64_t)((char *)v59 - (char *)v58) < 9)
        {
          if (v58)
            operator delete(v58);
        }
        else
        {
          v131 = (std::__shared_weak_count *)operator new(0x60uLL);
          v131->__shared_owners_ = 0;
          v131->__shared_weak_owners_ = 0;
          v131->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7B8;
          v131[1].std::__shared_count = 0u;
          v132 = (uint64_t)&v131[1];
          *(_OWORD *)&v131[1].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v131[2].__shared_owners_ = 0u;
          v131[3].std::__shared_count = 0u;
          v131[3].__shared_weak_owners_ = 0;
          v133 = ((unint64_t)((char *)v59 - (char *)v58) >> 3) - 1;
          v131[2].__vftable = (std::__shared_weak_count_vtbl *)v58;
          v131[2].__shared_owners_ = (uint64_t)v59;
          v131[2].__shared_weak_owners_ = (uint64_t)v60;
          v134 = 32 * ((2 << -(char)__clz(v133 - 1)) - 1);
          v135 = (std::__shared_weak_count_vtbl *)operator new(v134);
          bzero(v135, v134);
          v131[1].__vftable = v135;
          v131[1].__shared_owners_ = (uint64_t)v135 + v134;
          v131[1].__shared_weak_owners_ = (uint64_t)v135 + v134;
          if (v133)
          {
            std::vector<md::TileSelectionTileSetType>::__append((uint64_t)&v131[3], v133);
            v136 = (unsigned __int16 *)v131[3].__vftable;
            if (v133 < 0x10u)
            {
              v137 = 0;
              j = __p;
              goto LABEL_165;
            }
            v137 = v133 & 0xFFF0;
            v139 = (int16x8_t *)(v136 + 8);
            v140 = v137;
            v141 = (int16x8_t)xmmword_19FFB3C40;
            v142.i64[0] = 0x8000800080008;
            v142.i64[1] = 0x8000800080008;
            v143.i64[0] = 0x10001000100010;
            v143.i64[1] = 0x10001000100010;
            do
            {
              v139[-1] = v141;
              *v139 = vaddq_s16(v141, v142);
              v141 = vaddq_s16(v141, v143);
              v139 += 2;
              v140 -= 16;
            }
            while (v140);
            for (j = __p; v133 != v137; ++v137)
LABEL_165:
              v136[v137] = v137;
          }
          else
          {
            v136 = 0;
            j = __p;
          }
          md::PolylineCollider::buildTopDownAABBTree(v132, 0, v136, (unsigned __int16 *)v131[3].__shared_owners_);
          v144 = (uint64_t *)j[7];
          v145 = (unint64_t)j[8];
          if ((unint64_t)v144 < v145)
          {
            if (v144)
            {
              *v144 = v132;
              v144[1] = (uint64_t)v131;
              v131 = 0;
            }
            v146 = v144 + 2;
            goto LABEL_193;
          }
          v147 = j[6];
          v148 = ((char *)v144 - v147) >> 4;
          v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 60)
            abort();
          v150 = v145 - (_QWORD)v147;
          if (v150 >> 3 > v149)
            v149 = v150 >> 3;
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
            v151 = 0xFFFFFFFFFFFFFFFLL;
          else
            v151 = v149;
          if (v151)
          {
            v152 = (*(uint64_t (**)(id, uint64_t, uint64_t))(*(_QWORD *)j[9] + 16))(j[9], 16 * v151, 8);
            v153 = (uint64_t *)(v152 + 16 * v148);
            v154 = v152 + 16 * v151;
            if (v152)
            {
              *v153 = v132;
              v153[1] = (uint64_t)v131;
              v131 = 0;
            }
          }
          else
          {
            v154 = 0;
            v153 = (uint64_t *)(16 * v148);
          }
          v146 = v153 + 2;
          v155 = j[6];
          v156 = j[7];
          if (v156 == v155)
          {
            j[6] = v153;
            j[7] = v146;
            v159 = j[8];
            j[8] = (id)v154;
            if (!v156)
              goto LABEL_193;
LABEL_192:
            (*(void (**)(id, _QWORD *, int64_t))(*(_QWORD *)j[9] + 40))(j[9], v156, v159 - (_BYTE *)v156);
            goto LABEL_193;
          }
          do
          {
            v157 = *((_OWORD *)v156 - 1);
            v156 -= 2;
            *((_OWORD *)v153 - 1) = v157;
            v153 -= 2;
            *v156 = 0;
            v156[1] = 0;
          }
          while (v156 != v155);
          v156 = j[6];
          v158 = j[7];
          j[6] = v153;
          j[7] = v146;
          v159 = j[8];
          j[8] = (id)v154;
          if (v158 != v156)
          {
            do
            {
              v160 = (std::__shared_weak_count *)*(v158 - 1);
              if (v160)
              {
                v161 = (unint64_t *)&v160->__shared_owners_;
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 - 1, v161));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                }
              }
              v158 -= 2;
            }
            while (v158 != v156);
            j = __p;
          }
          if (v156)
            goto LABEL_192;
LABEL_193:
          j[7] = v146;
          if (v131)
          {
            v163 = (unint64_t *)&v131->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
        }
        v53 += 4;
        v31 = __p;
        if (v53 != v303)
          continue;
        v53 = *(float **)&v315.f64[0];
LABEL_211:
        if (v53)
        {
          *(_QWORD *)&v315.f64[1] = v53;
          operator delete(v53);
        }
        v50 = v277 + 16;
        v49 = v275;
        if (v277 + 16 == v274)
          goto LABEL_62;
        goto LABEL_66;
      }
      break;
    }
    if (v69 >= LODWORD(v56))
    {
      v58 = v68;
      v60 = v59;
      goto LABEL_133;
    }
    v88 = v55;
    v89 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v317[0].index = *(_OWORD *)(v89 + 136);
    v318 = *(double *)(v89 + 152);
    v319 = *(_OWORD *)(v89 + 160);
    v320 = *(std::__shared_weak_count **)(v89 + 176);
    v90 = *(_QWORD *)(a1 + 40);
    v321.index = v69;
    v321.offset = v56;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, const GEOComposedRoute *, PolylineCoordinate *, PolylineCoordinate *, double *))(*(_QWORD *)v90 + 32))(v90, a3, v88, v317, &v321, v316))
    {
      v94 = v59;
      v60 = v59;
      v55 = v310;
LABEL_132:
      v58 = v68;
      v59 = v94;
      a1 = v312;
      goto LABEL_133;
    }
    v91 = v316[0] * 4.0 * *(double *)(v89 + 312) / *(float *)(v89 + 1064);
    v55 = v310;
    md::RouteSimplifier::simplifiedRibbonIndices(*(_QWORD *)(a1 + 48), v310, v69, SLODWORD(v56), v276, v91);
    v93 = *(unsigned int **)(a1 + 80);
    v92 = *(unsigned int **)(a1 + 88);
    v60 = v59;
    v94 = v59;
    while (2)
    {
      if (v93 == v92)
        goto LABEL_132;
      v321 = (PolylineCoordinate)*v93;
      v95 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(v312 + 48), v55, &v321);
      v96 = *(float64x2_t **)(a2 + 24);
      v99 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v96[60], v96[54], v95), v96[56], v97), v96[58], v98), 1.0 / (v96[61].f64[1] + v96[55].f64[1] * v95 + v96[57].f64[1] * v97 + v96[59].f64[1] * v98)));
      if (v59 < v60)
      {
        *v59 = v99;
        v94 = v59 + 1;
      }
      else
      {
        v100 = v59 - v68;
        v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 61)
          abort();
        if (((char *)v60 - (char *)v68) >> 2 > v101)
          v101 = ((char *)v60 - (char *)v68) >> 2;
        if ((unint64_t)((char *)v60 - (char *)v68) >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v101;
        if (v102)
        {
          if (v102 >> 61)
            goto LABEL_283;
          v103 = operator new(8 * v102);
        }
        else
        {
          v103 = 0;
        }
        v104 = (float32x2_t *)&v103[8 * v100];
        *v104 = v99;
        v94 = v104 + 1;
        if (v59 != v68)
        {
          v105 = (char *)&v59[-1] - (char *)v68;
          if (v105 < 0x58)
          {
            v106 = v59;
            goto LABEL_115;
          }
          if ((unint64_t)((char *)v68 - v103) < 0x20)
          {
            v106 = v59;
            goto LABEL_115;
          }
          v107 = (v105 >> 3) + 1;
          v106 = &v59[-(v107 & 0x3FFFFFFFFFFFFFFCLL)];
          v108 = &v103[8 * v100 - 16];
          v109 = v59 - 2;
          v110 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v111 = *(_OWORD *)v109->f32;
            *(v108 - 1) = *(_OWORD *)v109[-2].f32;
            *v108 = v111;
            v108 -= 2;
            v109 -= 4;
            v110 -= 4;
          }
          while (v110);
          v104 -= v107 & 0x3FFFFFFFFFFFFFFCLL;
          if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_115:
              v112 = v106[-1];
              --v106;
              v104[-1] = v112;
              --v104;
            }
            while (v106 != v68);
          }
        }
        v60 = (float32x2_t *)&v103[8 * v102];
        if (v68)
          operator delete(v68);
        v68 = v104;
        v55 = v310;
      }
      ++v93;
      v59 = v94;
      continue;
    }
  }
LABEL_216:
  v176 = md::LabelNavEtaLabeler::featuresForRoute((md::LabelNavEtaLabeler *)a1, v271);
  v177 = v269[5];
  if (v269[6] != v177)
  {
    v178 = v176;
    v179 = 0;
    v299 = (unint64_t *)(a1 + 552);
    __asm { FMOV            V0.2D, #0.5 }
    v282 = _Q0;
LABEL_221:
    v187 = (id *)(v177 + 48 * v179);
    v188 = geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>::operator[](v268, (uint64_t)v187);
    if (!v178)
      goto LABEL_234;
    v189 = *(_QWORD *)v178;
    if (*(_QWORD *)v178 == *((_QWORD *)v178 + 1))
      goto LABEL_233;
    while (1)
    {
      v190 = *v187;
      v191 = *(id *)v189;
      if (v190 == v191)
      {
        v192 = objc_msgSend(*(id *)(v177 + 48 * v179 + 8), "isEqual:", *(_QWORD *)(v189 + 8));

        if ((v192 & 1) != 0)
        {
          if (v189 != *((_QWORD *)v178 + 1))
          {
            v193 = *(id *)(v189 + 56);
            if (v193)
            {
              v194 = v193;
              v195 = v269;
              v311 = v193;
              if (objc_msgSend(v193, "didStyleChange"))
              {
                *((_BYTE *)v188 + 40) = 0;
                objc_msgSend(v194, "setDidStyleChange:", 0);
              }
              v304 = 0;
LABEL_235:
              v302 = v179;
              v198 = v177 + 48 * v179;
              v200 = *(void **)(v198 + 8);
              v199 = (id *)(v198 + 8);
              objc_msgSend(v200, "etaDescription");
              v201 = (void *)objc_claimAutoreleasedReturnValue();
              switch(objc_msgSend(v201, "routeEtaType"))
              {
                case 0:
                case 3:
                case 6:
                  __pa = operator new(4uLL);
                  *__pa = 185337865;
                  v202 = __pa + 1;
                  if (!*((_BYTE *)v188 + 40))
                    goto LABEL_250;
                  goto LABEL_237;
                case 1:
                  __pa = operator new(2uLL);
                  v218 = (__int16 *)__pa;
                  v219 = 1798;
                  goto LABEL_249;
                case 2:
                  __pa = operator new(2uLL);
                  v218 = (__int16 *)__pa;
                  v219 = 2057;
                  goto LABEL_249;
                case 4:
                  __pa = operator new(2uLL);
                  v218 = (__int16 *)__pa;
                  v219 = 1284;
LABEL_249:
                  *v218 = v219;
                  v202 = v218 + 1;
                  if (!*((_BYTE *)v188 + 40))
                    goto LABEL_250;
                  goto LABEL_237;
                default:
                  __pa = operator new(1uLL);
                  *(_BYTE *)__pa = 6;
                  v202 = (char *)__pa + 1;
                  if (*((_BYTE *)v188 + 40))
                    goto LABEL_237;
LABEL_250:
                  v288 = -[VKRouteInfo hasFocus](v271, "hasFocus");
                  v220 = +[VKLabelNavRouteEta toStyleEtaComparison:](VKLabelNavRouteEta, "toStyleEtaComparison:", a6);
                  -[VKRouteInfo route](v271, "route");
                  v295 = (void *)objc_claimAutoreleasedReturnValue();
                  v221 = objc_msgSend(v295, "transportType");
                  if (v221 >= 7)
                    v222 = 4;
                  else
                    v222 = 0x50403020100uLL >> (8 * v221);
                  v223 = +[VKLabelNavRouteEta toStyleNavLabelType:](VKLabelNavRouteEta, "toStyleNavLabelType:", objc_msgSend(v201, "routeEtaType"));
                  v224 = *(unsigned __int16 *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v299, (uint64_t)v187);
                  v225 = geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v299, (uint64_t)v187);
                  v314[0] = 0;
                  if (*(_BYTE *)(v225 + 2))
                  {
                    v314[1] = *(_BYTE *)(v225 + 3);
                    v314[0] = 1;
                  }
                  objc_msgSend(v201, "styleAttributes");
                  v226 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_QWORD *)&v284.f64[0] = *(_QWORD *)&v284.f64[0] & 0xFFFFFFFFFFFF0000 | v224;
                  +[VKLabelNavRouteEta styleForNavContext:selected:focused:etaComparison:transportType:navLabelType:when:routeLegWhen:additionalAttributes:](VKLabelNavRouteEta, "styleForNavContext:selected:focused:etaComparison:transportType:navLabelType:when:routeLegWhen:additionalAttributes:", a2, a5, v288, v220, v222, v223, *(_QWORD *)&v284.f64[0], v314, v226);

                  v195 = v269;
                  if (v314[0])
                    v314[0] = 0;

                  -[VKRouteInfo route](v271, "route");
                  v227 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v227, "pointAt:", objc_msgSend(*v199, "start"));
                  v296 = v228;
                  v230 = v229;

                  v231 = tan(v230 * 0.00872664626 + 0.785398163);
                  v232 = log(v231);
                  v233.f64[0] = v296;
                  v233.f64[1] = v232;
                  v315 = vmlaq_f64(v282, (float64x2_t)xmmword_19FFB32D0, v233);
                  v234 = __pa;
                  if (__pa != (_DWORD *)v202)
                  {
                    do
                    {
                      LOBYTE(v316[0]) = *v234;
                      v235 = LOBYTE(v316[0]);
                      +[VKLabelNavRouteEta artworkForEtaDescription:navContext:roadSignStyleGroup:mercatorPoint:orientation:isSelected:artworkCache:](VKLabelNavRouteEta, "artworkForEtaDescription:navContext:roadSignStyleGroup:mercatorPoint:orientation:isSelected:artworkCache:", v201, a2, v317, &v315, LOBYTE(v316[0]), a5, *(_QWORD *)(v312 + 144));
                      v236 = (void *)objc_claimAutoreleasedReturnValue();
                      v239 = v236;
                      if (!v236)
                        break;
                      LODWORD(v237) = 0;
                      LODWORD(v238) = 0;
                      objc_msgSend(v236, "offsetPixelForPixel:", v237, v238);
                      v241 = v240;
                      v243 = v242;
                      objc_msgSend(v239, "localSignBounds");
                      if (v246 < v244 || v247 < v245)
                      {
                        v250 = 3.4028e38;
                        v252 = -3.4028e38;
                        v251 = -3.4028e38;
                        v249 = 3.4028e38;
                      }
                      else
                      {
                        v249 = v244 + v241;
                        v250 = v245 + v243;
                        v251 = v246 + v241;
                        v252 = v247 + v243;
                      }
                      v253 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v188, v235, v316);
                      v253[5] = v249;
                      v253[6] = v250;
                      v253[7] = v251;
                      v253[8] = v252;
                      *((_BYTE *)v188 + 40) = 1;

                      ++v234;
                    }
                    while (v234 != v202);
                  }
                  v254 = v320;
                  if (!v320)
                    goto LABEL_270;
                  v255 = (unint64_t *)&v320->__shared_owners_;
                  do
                    v256 = __ldaxr(v255);
                  while (__stlxr(v256 - 1, v255));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                    v257 = (std::__shared_weak_count *)v319;
                    if (!(_QWORD)v319)
                      goto LABEL_276;
                  }
                  else
                  {
LABEL_270:
                    v257 = (std::__shared_weak_count *)v319;
                    if (!(_QWORD)v319)
                      goto LABEL_276;
                  }
                  v258 = (unint64_t *)&v257->__shared_owners_;
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                    std::__shared_weak_count::__release_weak(v257);
                  }
LABEL_276:
                  v260 = (std::__shared_weak_count *)v317[1];
                  if (v317[1])
                  {
                    v261 = (unint64_t *)(*(_QWORD *)&v317[1] + 8);
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (!v262)
                    {
                      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                      std::__shared_weak_count::__release_weak(v260);
                    }
                  }
LABEL_237:
                  *((_BYTE *)v188 + 88) = 0;
                  if ((v304 & 1) == 0
                    && (v267 & objc_msgSend(v311, "hasLabelWithAnchor")) == 1
                    && (a7 & 1) == 0)
                  {
                    objc_msgSend(v311, "worldPointForStaging");
                    v291 = *(double *)&v203;
                    v294 = *(double *)&v204;
                    v305 = v205;
                    v317[0] = v203;
                    v317[1] = v204;
                    v318 = v205;
                    v206 = objc_msgSend(v311, "orientation");
                    LOBYTE(v315.f64[0]) = v206;
                    *((_BYTE *)v188 + 88) = 0;
                    v207 = *(_QWORD *)(a2 + 24);
                    if (!md::LabelLayoutContext::isDistanceClipped(v207, (uint64_t)v317))
                    {
                      v208 = *(double *)(v207 + 888);
                      v209 = *(double *)(v207 + 920);
                      v210 = *(double *)(v207 + 984);
                      v211 = *(double *)(v207 + 952);
                      v278 = *(float64x2_t *)(v207 + 864);
                      v279 = *(float64x2_t *)(v207 + 896);
                      v287 = *(float64x2_t *)(v207 + 960);
                      v280 = *(float64x2_t *)(v207 + 928);
                      v212 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v188, v206, &v315);
                      v213 = v212[7];
                      v214 = v212[5];
                      if (v213 < v214 || (v215 = v212[8], v216 = v212[6], v215 < v216))
                      {
                        v183 = 3.4028e38;
                        v184 = -3.4028e38;
                        v185 = -3.4028e38;
                        v186 = 3.4028e38;
                      }
                      else
                      {
                        v217 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v287, v278, v291), v279, v294), v280, v305), 1.0 / (v210 + v208 * v291 + v209 * v294 + v211 * v305)));
                        v186 = v217.f32[0] + v214;
                        v183 = v217.f32[1] + v216;
                        v185 = v217.f32[0] + v213;
                        v184 = v217.f32[1] + v215;
                      }
                      *((float *)v188 + 23) = v186;
                      *((float *)v188 + 24) = v183;
                      *((float *)v188 + 25) = v185;
                      *((float *)v188 + 26) = v184;
                      *((_BYTE *)v188 + 88) = 1;
                    }
                  }
                  operator delete(__pa);

                  v179 = v302 + 1;
                  v177 = v195[5];
                  if (v302 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v195[6] - v177) >> 4))
                    goto LABEL_221;
                  goto LABEL_282;
              }
            }
LABEL_234:
            v311 = 0;
            v304 = 1;
            v195 = v269;
            goto LABEL_235;
          }
LABEL_233:
          v196 = geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::operator[]((uint64_t)v178, v177 + 48 * v179);
          v197 = (void *)*((_QWORD *)v196 + 1);
          *((_QWORD *)v196 + 1) = 0;

          goto LABEL_234;
        }
      }
      else
      {

      }
      v189 += 72;
      if (v189 == *((_QWORD *)v178 + 1))
        goto LABEL_233;
    }
  }
LABEL_282:

}

void sub_19F5FAA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{

  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::updateEtaFeature(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, unsigned int a5, int a6, double a7)
{
  VKRouteInfo *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t i;
  uint64_t v29;
  char *v30;
  void *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t *v40;
  void **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  void *v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t **v54;
  unint64_t v55;
  uint64_t *v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t *v59;
  float32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  VKRouteInfo *v63;
  float v64;
  float v65;
  VKLabelNavRouteEta *v66;
  uint64_t j;
  id v68;
  id v69;
  char v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  md::RouteSimplifier *v80;
  const GEOComposedRoute *v81;
  void *v82;
  double v83;
  unsigned __int8 v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  float *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  int v99;
  VKLabelNavRouteEta *v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  md::RouteSimplifier *v104;
  const GEOComposedRoute *v105;
  uint64_t v106;
  uint64_t v107;
  float64x2_t *v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float32x2_t v118;
  void *v119;
  void *v120;
  double v121;
  float64x2_t *v122;
  float v123;
  float v124;
  uint64_t k;
  _BOOL4 v126;
  void *v127;
  uint64_t v128;
  double v129;
  _QWORD *v130;
  int v131;
  int v132;
  VKRouteInfo *v133;
  md::RouteSimplifier *v134;
  const GEOComposedRoute *v135;
  double v136;
  double v137;
  _BOOL4 v138;
  id v139;
  uint64_t v140;
  unsigned int v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  VKRouteInfo *v145;
  uint64_t v146;
  void *v147;
  double v148;
  PolylineCoordinate *v149;
  unsigned int index;
  float64x2_t *v151;
  float32x2_t v152;
  double v153;
  double v154;
  double v155;
  __int128 v156;
  unsigned __int8 v157;
  uint64_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  float *v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  void *v172;
  PolylineCoordinate v173;
  PolylineCoordinate v174;
  int v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  unint64_t v181;
  float v182;
  _QWORD *v183;
  unint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  float v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t **v191;
  uint64_t **v192;
  uint64_t *v193;
  _QWORD *v194;
  _QWORD *v195;
  float32x2_t v196;
  float32x2_t v197;
  unsigned __int32 v198;
  unint64_t v199;
  uint8x8_t v200;
  unint64_t v201;
  float **v202;
  float *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  float32x2_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  double v213;
  double v214;
  void *v215;
  unint64_t v216;
  void *v217;
  _BYTE *v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  char *v230;
  char *v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  _OWORD *v240;
  __int128 *v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  BOOL v253;
  BOOL v254;
  float v255;
  float v256;
  float v257;
  uint64_t v258;
  _BOOL4 v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float32x2_t v265;
  float64x2_t v266;
  int v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  int v271;
  double v272;
  double v273;
  VKRouteInfo *v274;
  float64x2_t v275;
  double v276;
  double v277;
  double v278;
  unsigned int v279;
  unint64_t v280;
  double v281;
  _BOOL4 isDistanceClipped;
  float64x2_t v283;
  unint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  float32x2_t v287;
  _QWORD *v290;
  unint64_t *v291;
  char *v293;
  VKRouteInfo *v295;
  uint64_t v296;
  VKLabelNavRouteEta *v297;
  double v298;
  double v299;
  VKLabelNavRouteEta *v300;
  VKLabelNavRouteEta *v301;
  char *location;
  id *locationa;
  unsigned int locationb;
  double locationc;
  _BYTE v306[2];
  char v307;
  char v308;
  void *__p[2];
  double v310;
  double v311;
  uint64_t v312;
  char v313;
  float v314[4];
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  _BYTE v318[48];

  v9 = a4;
  -[VKRouteInfo route](v9, "route");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD **)(a1 + 464);
  if (!v11)
    goto LABEL_12;
  v12 = a1 + 464;
  do
  {
    v13 = v11[4];
    v14 = v13 >= (unint64_t)v10;
    if (v13 >= (unint64_t)v10)
      v15 = v11;
    else
      v15 = v11 + 1;
    if (v14)
      v12 = (uint64_t)v11;
    v11 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v12 != a1 + 464 && (unint64_t)v10 >= *(_QWORD *)(v12 + 32))
  {

    v16 = (uint64_t *)(v12 + 40);
  }
  else
  {
LABEL_12:

    v16 = 0;
  }
  v290 = (_QWORD *)(a1 + 464);

  v17 = md::LabelNavEtaLabeler::featuresForRoute((md::LabelNavEtaLabeler *)a1, v9);
  v295 = v9;
  if (!v17)
  {
    __p[0] = 0;
    __p[1] = 0;
    v310 = 0.0;
    -[VKRouteInfo route](v9, "route");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (uint64_t)v18;
    v20 = *(uint64_t **)(a1 + 496);
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          v22 = (uint64_t **)v20;
          v23 = v20[4];
          if ((unint64_t)v18 >= v23)
            break;
          v20 = *v22;
          v21 = v22;
          if (!*v22)
            goto LABEL_21;
        }
        if (v23 >= (unint64_t)v18)
          break;
        v20 = v22[1];
        if (!v20)
        {
          v21 = v22 + 1;
          goto LABEL_21;
        }
      }

      v24 = (uint64_t *)v22;
    }
    else
    {
      v21 = (uint64_t **)(a1 + 496);
      v22 = (uint64_t **)(a1 + 496);
LABEL_21:
      v24 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 504) + 16))(*(_QWORD *)(a1 + 504), 72, 8);
      v24[4] = v19;
      v24[5] = 0;
      v24[6] = 0;
      v24[7] = 0;
      {
        v262 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v262, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v24[8] = mdm::Allocator::instance(void)::alloc;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = (uint64_t)v22;
      *v21 = v24;
      v26 = **(_QWORD **)(a1 + 488);
      v27 = v24;
      if (v26)
      {
        *(_QWORD *)(a1 + 488) = v26;
        v27 = *v21;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 496), v27);
      ++*(_QWORD *)(a1 + 512);
    }
    v29 = v24[5];
    for (i = v24[6]; v29 != i; v29 += 48)
    {
      v30 = geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::operator[]((uint64_t)__p, v29);
      v31 = (void *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;

    }
    -[VKRouteInfo route](v9, "route");
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = (uint64_t *)v32;
    v34 = *(uint64_t **)(a1 + 264);
    if (v34)
    {
      while (1)
      {
        while (1)
        {
          v36 = (uint64_t **)v34;
          v37 = v34[4];
          if (v32 >= v37)
            break;
          v34 = *v36;
          v35 = v36;
          if (!*v36)
            goto LABEL_36;
        }
        if (v37 >= v32)
          break;
        v34 = v36[1];
        if (!v34)
        {
          v35 = v36 + 1;
          goto LABEL_36;
        }
      }
      v38 = v36;
    }
    else
    {
      v35 = (uint64_t **)(a1 + 264);
      v36 = (uint64_t **)(a1 + 264);
LABEL_36:
      v38 = (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272), 64, 8);
      v38[4] = v33;
      v38[5] = 0;
      v38[6] = 0;
      v38[7] = 0;
      *v38 = 0;
      v38[1] = 0;
      v38[2] = (uint64_t *)v36;
      *v35 = (uint64_t *)v38;
      v39 = **(_QWORD **)(a1 + 256);
      v40 = (uint64_t *)v38;
      if (v39)
      {
        *(_QWORD *)(a1 + 256) = v39;
        v40 = *v35;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 264), v40);
      v33 = 0;
      ++*(_QWORD *)(a1 + 280);
    }
    v41 = (void **)(v38 + 5);
    v42 = v38[5];
    if (v42)
    {
      v43 = v38[6];
      v44 = v38[5];
      if (v43 != v42)
      {
        do
        {
          *(v43 - 3) = (uint64_t)&off_1E42B4DD0;

          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v43 - 7), *(v43 - 6));
          v45 = (void *)*(v43 - 9);
          v43 -= 9;

        }
        while (v43 != v42);
        v44 = (uint64_t *)*v41;
      }
      v38[6] = v42;
      operator delete(v44);
      *v41 = 0;
      v38[6] = 0;
      v38[7] = 0;
      v9 = v295;
    }
    *(_OWORD *)(v38 + 5) = *(_OWORD *)__p;
    *((double *)v38 + 7) = v310;
    __p[1] = 0;
    v310 = 0.0;
    __p[0] = 0;

    v17 = md::LabelNavEtaLabeler::featuresForRoute((md::LabelNavEtaLabeler *)a1, v9);
    v46 = (char *)__p[0];
    if (__p[0])
    {
      v47 = (char *)__p[1];
      v48 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          *((_QWORD *)v47 - 3) = &off_1E42B4DD0;

          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v47 - 56), *((_QWORD *)v47 - 6));
          v49 = (void *)*((_QWORD *)v47 - 9);
          v47 -= 72;

        }
        while (v47 != v46);
        v48 = __p[0];
      }
      __p[1] = v46;
      operator delete(v48);
    }
  }
  -[VKRouteInfo route](v9, "route");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = (uint64_t)v50;
  v52 = *(uint64_t **)(a1 + 496);
  if (v52)
  {
    while (1)
    {
      while (1)
      {
        v54 = (uint64_t **)v52;
        v55 = v52[4];
        if ((unint64_t)v50 >= v55)
          break;
        v52 = *v54;
        v53 = v54;
        if (!*v54)
          goto LABEL_57;
      }
      if (v55 >= (unint64_t)v50)
        break;
      v52 = v54[1];
      if (!v52)
      {
        v53 = v54 + 1;
        goto LABEL_57;
      }
    }

    v56 = (uint64_t *)v54;
  }
  else
  {
    v53 = (uint64_t **)(a1 + 496);
    v54 = (uint64_t **)(a1 + 496);
LABEL_57:
    v56 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 504) + 16))(*(_QWORD *)(a1 + 504), 72, 8);
    v56[4] = v51;
    v56[5] = 0;
    v56[6] = 0;
    v56[7] = 0;
    {
      v261 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v261, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v56[8] = mdm::Allocator::instance(void)::alloc;
    *v56 = 0;
    v56[1] = 0;
    v56[2] = (uint64_t)v54;
    *v53 = v56;
    v58 = **(_QWORD **)(a1 + 488);
    v59 = v56;
    if (v58)
    {
      *(_QWORD *)(a1 + 488) = v58;
      v59 = *v53;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 496), v59);
    ++*(_QWORD *)(a1 + 512);
  }
  v62 = v56[5];
  v61 = v56[6];
  v63 = v295;
  if (v62 != v61)
  {
    v285 = a1 + 352;
    v64 = 5.0;
    v65 = 0.5;
    v287 = v60;
    v296 = v56[6];
    v291 = (unint64_t *)(a1 + 552);
    while (1)
    {
      location = geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::operator[]((uint64_t)v17, v62);
      for (j = *v16; ; j += 384)
      {
        while (1)
        {
          if (j == v16[1])
            goto LABEL_66;
          v68 = *(id *)v62;
          v69 = *(id *)j;
          if (v68 == v69)
            break;

          j += 384;
        }
        v70 = objc_msgSend(*(id *)(v62 + 8), "isEqual:", *(_QWORD *)(j + 8));

        if ((v70 & 1) != 0)
          break;
      }
      if (j != v16[1])
        break;
LABEL_66:
      v62 += 48;
      if (v62 == v61)
        goto LABEL_304;
    }
    v71 = (void *)*((_QWORD *)location + 1);
    locationa = (id *)(location + 8);
    v66 = v71;
    objc_msgSend(*(id *)(v62 + 8), "etaDescription");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v72)
      goto LABEL_65;
    v297 = v66;
    objc_msgSend(*(id *)(v62 + 8), "etaDescription");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v73, "etaText");
    v74 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v74)
    {
      v66 = v297;
      goto LABEL_65;
    }
    v66 = v297;
    if (!*(_BYTE *)(j + 88))
      goto LABEL_65;
    v286 = (_QWORD *)(j + 48);
    if (!v297)
    {
      __p[0] = (void *)0xBF80000000000000;
      HIDWORD(__p[1]) = 2139095039;
      v311 = 0.0;
      v312 = 0;
      v310 = 0.0;
      v313 = 1;
      v99 = md::LabelNavEtaLabeler::searchForPlacementAcrossShareSections(a1, a2, a3, (_QWORD *)(j + 48), v62, 0, (uint64_t)__p);
      *(double *)(j + 208) = a7;
      *(_BYTE *)(j + 216) = v99;
      if (!v99)
      {
        v66 = 0;
        goto LABEL_65;
      }
      v100 = [VKLabelNavRouteEta alloc];
      v66 = -[VKLabelNavRouteEta initWithRouteInfo:routeCoord:](v100, "initWithRouteInfo:routeCoord:", v63, __p[0]);
      objc_storeStrong(locationa, v66);
      locationb = LOBYTE(__p[1]);
      objc_msgSend(*(id *)(v62 + 8), "etaDescription");
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      v102 = *(unsigned __int16 *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v291, v62);
      v103 = geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v291, v62);
      v307 = 0;
      if (*(_BYTE *)(v103 + 2))
      {
        v308 = *(_BYTE *)(v103 + 3);
        v307 = 1;
      }
      v280 = v280 & 0xFFFFFFFFFFFF0000 | v102;
      -[VKLabelNavRouteEta createLabelWithNavContext:orientation:etaDescription:selected:when:routeLegWhen:artworkCache:](v66, "createLabelWithNavContext:orientation:etaDescription:selected:when:routeLegWhen:artworkCache:", a2, locationb, v101, a5, *(_QWORD *)(a1 + 144));
      if (v307)
        v307 = 0;

      if (-[VKLabelNavRouteEta hasLabel](v66, "hasLabel") && !-[VKLabelNavRouteEta hasAnchor](v66, "hasAnchor"))
      {
        v104 = *(md::RouteSimplifier **)(a1 + 48);
        -[VKRouteInfo route](v63, "route");
        v105 = (const GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)v318 = md::RouteSimplifier::worldPointForPolylineCoordinate(v104, v105, (const PolylineCoordinate *)__p);
        *(_QWORD *)&v318[8] = v106;
        *(_QWORD *)&v318[16] = v107;

        LOBYTE(v315) = locationb;
        *(_BYTE *)(j + 136) = 0;
        v108 = (float64x2_t *)a2[3];
        if (!md::LabelLayoutContext::isDistanceClipped((uint64_t)v108, (uint64_t)v318))
        {
          md::LabelLayoutContext::projectPointToPixel(v108, (double *)v318, (float32x2_t *)&v316);
          v109 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v286, locationb, &v315);
          v110 = v109[7];
          v111 = v109[5];
          if (v110 >= v111 && (v112 = v109[8], v113 = v109[6], v112 >= v113))
          {
            v117 = *(float *)&v316 + v111;
            v114 = *((float *)&v316 + 1) + v113;
            v116 = *(float *)&v316 + v110;
            v115 = *((float *)&v316 + 1) + v112;
          }
          else
          {
            v114 = 3.4028e38;
            v115 = -3.4028e38;
            v116 = -3.4028e38;
            v117 = 3.4028e38;
          }
          *(float *)(j + 140) = v117;
          *(float *)(j + 144) = v114;
          *(float *)(j + 148) = v116;
          *(float *)(j + 152) = v115;
          *(_BYTE *)(j + 136) = 1;
        }
        *(_BYTE *)(a1 + 252) = 1;
      }
      goto LABEL_235;
    }
    -[VKLabelNavRouteEta setRouteInfo:](v297, "setRouteInfo:", v63);
    -[VKLabelNavRouteEta setSelected:](v297, "setSelected:", a5);
    geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v291, v62);
    -[VKLabelNavRouteEta setWhen:](v297, "setWhen:");
    v75 = geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v291, v62);
    v306[0] = 0;
    if (*(_BYTE *)(v75 + 2))
    {
      v306[1] = *(_BYTE *)(v75 + 3);
      v306[0] = 1;
    }
    -[VKLabelNavRouteEta setRouteLegWhen:](v297, "setRouteLegWhen:", v306);
    if (v306[0])
      v306[0] = 0;
    if (!-[VKLabelNavRouteEta hasLabel](v297, "hasLabel"))
    {
      v76 = -[VKLabelNavRouteEta orientation](v297, "orientation");
      objc_msgSend(*(id *)(v62 + 8), "etaDescription");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = *(unsigned __int16 *)geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v291, v62);
      geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](v291, v62);
      v79 = v284 & 0xFFFFFFFFFFFF0000 | v78;
      v66 = v297;
      v284 = v79;
      -[VKLabelNavRouteEta createLabelWithNavContext:orientation:etaDescription:selected:when:routeLegWhen:artworkCache:](v297, "createLabelWithNavContext:orientation:etaDescription:selected:when:routeLegWhen:artworkCache:", a2, v76, v77, a5, *(_QWORD *)(a1 + 144));

      if (!-[VKLabelNavRouteEta hasLabel](v297, "hasLabel"))
        goto LABEL_65;
      v80 = *(md::RouteSimplifier **)(a1 + 48);
      -[VKRouteInfo route](v63, "route");
      v81 = (const GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)v318 = -[VKLabelNavRouteEta routeOffset](v297, "routeOffset");
      v272 = md::RouteSimplifier::worldPointForPolylineCoordinate(v80, v81, (const PolylineCoordinate *)v318);
      v276 = *(double *)&v82;
      __p[0] = *(void **)&v272;
      __p[1] = v82;
      v281 = v83;
      v310 = v83;

      v84 = -[VKLabelNavRouteEta orientation](v297, "orientation");
      v318[0] = v84;
      *(_BYTE *)(j + 136) = 0;
      v85 = a2[3];
      if (!md::LabelLayoutContext::isDistanceClipped(v85, (uint64_t)__p))
      {
        v86 = *(double *)(v85 + 888);
        v87 = *(double *)(v85 + 920);
        v88 = *(double *)(v85 + 984);
        v89 = *(double *)(v85 + 952);
        v263 = *(float64x2_t *)(v85 + 864);
        v264 = *(float64x2_t *)(v85 + 896);
        v266 = *(float64x2_t *)(v85 + 928);
        v269 = *(float64x2_t *)(v85 + 960);
        v90 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v286, v84, v318);
        v91 = v90[7];
        v92 = v90[5];
        if (v91 >= v92 && (v93 = v90[8], v94 = v90[6], v93 >= v94))
        {
          v118 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v269, v263, v272), v264, v276), v266, v281), 1.0 / (v88 + v86 * v272 + v87 * v276 + v89 * v281)));
          v98 = v118.f32[0] + v92;
          v95 = v118.f32[1] + v94;
          v97 = v118.f32[0] + v91;
          v96 = v118.f32[1] + v93;
        }
        else
        {
          v95 = 3.4028e38;
          v96 = -3.4028e38;
          v97 = -3.4028e38;
          v98 = 3.4028e38;
        }
        *(float *)(j + 140) = v98;
        *(float *)(j + 144) = v95;
        *(float *)(j + 148) = v97;
        *(float *)(j + 152) = v96;
        *(_BYTE *)(j + 136) = 1;
      }
      v64 = 5.0;
      v65 = 0.5;
    }
    if (!-[VKLabelNavRouteEta hasAnchor](v66, "hasAnchor"))
    {
      *(_BYTE *)(a1 + 252) = 1;
      goto LABEL_65;
    }
    v66 = v66;
    -[VKLabelNavRouteEta worldPointForStaging](v66, "worldPointForStaging");
    v273 = *(double *)&v119;
    v277 = *(double *)&v120;
    __p[0] = v119;
    __p[1] = v120;
    v298 = v121;
    v310 = v121;
    v122 = (float64x2_t *)a2[3];
    isDistanceClipped = md::LabelLayoutContext::isDistanceClipped((uint64_t)v122, (uint64_t)__p);
    if (!isDistanceClipped)
      v287 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v122[60], v122[54], v273), v122[56], v277), v122[58], v298), 1.0 / (v122[61].f64[1] + v122[55].f64[1] * v273 + v122[57].f64[1] * v277 + v122[59].f64[1] * v298)));

    *(_BYTE *)(j + 156) = 0;
    v123 = *(float *)(a2[1] + 176) * 12.0;
    v124 = v123 * v123;
    if (((isDistanceClipped | a6) & 1) != 0)
    {
      k = 0;
    }
    else
    {
      objc_msgSend(*(id *)(v62 + 8), "etaDescription");
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      v128 = objc_msgSend(v127, "routeEtaType");

      if (v128)
      {
        if (!*(_QWORD *)(v62 + 40))
          goto LABEL_65;
        v130 = *(_QWORD **)(v62 + 16);
        k = v130[5];
        if (k == v130[6])
          goto LABEL_65;
LABEL_115:
        v267 = *((_DWORD *)v130 + 8);
      }
      else
      {
        v140 = -[VKLabelNavRouteEta routeOffset](v66, "routeOffset");
        v130 = *(_QWORD **)(v62 + 16);
        if (v130 != (_QWORD *)(v62 + 24))
        {
          LODWORD(v129) = HIDWORD(v140);
          do
          {
            for (k = v130[5]; k != v130[6]; k += 16)
            {
              if (*(_DWORD *)k < v140
                || *(_DWORD *)k == (_DWORD)v140 && *(float *)(k + 4) <= *((float *)&v140 + 1))
              {
                v141 = *(_DWORD *)(k + 8);
                if (v141 > v140 || v141 == (_DWORD)v140 && *(float *)(k + 12) >= *((float *)&v140 + 1))
                  goto LABEL_115;
              }
            }
            v142 = (_QWORD *)v130[1];
            if (v142)
            {
              do
              {
                v143 = v142;
                v142 = (_QWORD *)*v142;
              }
              while (v142);
            }
            else
            {
              do
              {
                v143 = (_QWORD *)v130[2];
                v189 = *v143 == (_QWORD)v130;
                v130 = v143;
              }
              while (!v189);
            }
            v130 = v143;
          }
          while (v143 != (_QWORD *)(v62 + 24));
        }
        k = 0;
        v267 = 0;
      }
      v144 = -[VKLabelNavRouteEta routeOffset](v66, "routeOffset", v129);
      v279 = -[VKLabelNavRouteEta orientation](v66, "orientation");
      v145 = v63;
      if (k)
      {
        v300 = v66;
        v146 = *(_QWORD *)(a1 + 40);
        v274 = v145;
        -[VKRouteInfo route](v145, "route");
        v147 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v146 + 24))(__p, v146, a3, v147, k);

        v149 = (PolylineCoordinate *)__p[0];
        if (__p[0] == __p[1])
          goto LABEL_175;
        LODWORD(v148) = HIDWORD(v144);
        while (1)
        {
          if (v149->index < v144 || v149->index == (_DWORD)v144 && v149->offset <= *((float *)&v144 + 1))
          {
            index = v149[1].index;
            if (index > v144 || index == (_DWORD)v144 && v149[1].offset >= *((float *)&v144 + 1))
              break;
          }
          v149 += 2;
          if (v149 == __p[1])
            goto LABEL_175;
        }
        if (v149 == __p[1])
        {
LABEL_175:
          v175 = 0;
          v265 = *(float32x2_t *)&v148;
        }
        else
        {
          -[VKRouteInfo route](v274, "route", v148);
          v172 = (void *)objc_claimAutoreleasedReturnValue();
          v173 = *v149;
          v174 = v149[1];
          md::LabelNavEtaLabeler::calculatePositioningFrame((float32x2_t *)&v316, a1, (uint64_t)a2, v172, v173, v174);
          v265 = (float32x2_t)v316;
          *(_OWORD *)v318 = v316;
          *(_QWORD *)&v318[16] = v317;

          v175 = 1;
        }
        v176 = *(float *)(a2[1] + 176) * 12.0;
        v271 = v175;
        if (v176 >= 0.0)
        {
          v180 = v287.f32[0] - v176;
          v177 = v287.f32[1] - v176;
          v179 = v287.f32[0] + v176;
          v178 = v287.f32[1] + v176;
        }
        else
        {
          v177 = 3.4028e38;
          v178 = -3.4028e38;
          v179 = -3.4028e38;
          v180 = 3.4028e38;
        }
        *(_QWORD *)&v316 = __PAIR64__(LODWORD(v177), LODWORD(v180));
        *((_QWORD *)&v316 + 1) = __PAIR64__(LODWORD(v178), LODWORD(v179));
        v181 = *(_QWORD *)(j + 200);
        v182 = 3.4028e38;
        if (v181 <= 4 && ((1 << v181) & 0x19) != 0)
        {
          v183 = *(_QWORD **)(a1 + 456);
          if (v183 == v290)
          {
            v182 = 3.4028e38;
          }
          else
          {
            v184 = COERCE_UNSIGNED_INT(v180 + (float)((float)(v179 - v180) * v65)) | ((unint64_t)COERCE_UNSIGNED_INT(v177 + (float)((float)(v178 - v177) * v65)) << 32);
            v182 = 3.4028e38;
            v293 = v17;
            do
            {
              v185 = (_QWORD *)v183[5];
              v186 = (_QWORD *)v183[6];
              while (v185 != v186)
              {
                if (v185 != (_QWORD *)j)
                {
                  v188 = v185[25];
                  v189 = v188 > 4 || ((1 << v188) & 0x19) == 0;
                  if (!v189 && v188 == *(_QWORD *)(j + 200))
                  {
                    v190 = a1;
                    LODWORD(v315) = 2139095039;
                    v191 = (uint64_t **)v185[12];
                    v192 = (uint64_t **)v185[13];
                    if (v191 == v192)
                    {
                      v187 = 3.4028e38;
                    }
                    else
                    {
                      do
                      {
                        v193 = *v191;
                        v191 += 2;
                        md::PolylineCollider::enumerateSegmentsIntersectingBounds<md::LabelNavEtaLabeler::routeNearestDistSquaredToRectCenter(md::RouteLabelState const&,gm::Box<float,2> const&)::$_0>(v193, 0, (float *)&v316, (float *)&v315, v184);
                      }
                      while (v191 != v192);
                      v187 = *(float *)&v315;
                    }
                    a1 = v190;
                    v17 = v293;
                    v182 = fminf(v187, v182);
                  }
                }
                v185 += 48;
              }
              v194 = (_QWORD *)v183[1];
              if (v194)
              {
                do
                {
                  v195 = v194;
                  v194 = (_QWORD *)*v194;
                }
                while (v194);
              }
              else
              {
                do
                {
                  v195 = (_QWORD *)v183[2];
                  v189 = *v195 == (_QWORD)v183;
                  v183 = v195;
                }
                while (!v189);
              }
              v183 = v195;
            }
            while (v195 != v290);
          }
        }
        if (v271)
        {
          v196 = vsub_f32(v287, v265);
          v197 = vabs_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v318[12], (float32x2_t)vrev64_s32((int32x2_t)v196)), v196, (float32x2_t)__PAIR64__(*(unsigned int *)&v318[20], *(unsigned int *)&v318[8])));
          v198 = vsub_f32(v197, (float32x2_t)vdup_lane_s32((int32x2_t)v197, 1)).u32[0];
        }
        else
        {
          v198 = 2139095039;
        }
        v63 = v295;
        v66 = v300;
        *(float *)(j + 160) = v182;
        *(_DWORD *)(j + 164) = v198;
        v315 = *(_OWORD *)(a2[4] + 32);
        v199 = *(_QWORD *)(j + 56);
        if (v199)
        {
          v200 = (uint8x8_t)vcnt_s8((int8x8_t)v199);
          v200.i16[0] = vaddlv_u8(v200);
          if (v200.u32[0] > 1uLL)
          {
            v201 = v279;
            if (v199 <= v279)
              v201 = v279 % v199;
          }
          else
          {
            v201 = ((_DWORD)v199 - 1) & v279;
          }
          v202 = *(float ***)(*v286 + 8 * v201);
          if (v202)
          {
            v203 = *v202;
            if (v203)
            {
              if (v200.u32[0] < 2uLL)
              {
                v204 = v199 - 1;
                while (1)
                {
                  v206 = *((_QWORD *)v203 + 1);
                  if (v206 == v279)
                  {
                    if (*((unsigned __int8 *)v203 + 16) == v279)
                      goto LABEL_274;
                  }
                  else if ((v206 & v204) != v201)
                  {
                    goto LABEL_286;
                  }
                  v203 = *(float **)v203;
                  if (!v203)
                    goto LABEL_286;
                }
              }
              do
              {
                v205 = *((_QWORD *)v203 + 1);
                if (v205 == v279)
                {
                  if (*((unsigned __int8 *)v203 + 16) == v279)
                  {
LABEL_274:
                    v245 = v203[7];
                    v246 = v203[5];
                    if (v245 >= v246)
                    {
                      v251 = v203[8];
                      v252 = v203[6];
                      v253 = v251 < v252;
                      v254 = v251 < v252;
                      v255 = v287.f32[0] + v246;
                      v256 = v287.f32[1] + v252;
                      v257 = v287.f32[0] + v245;
                      v248 = v287.f32[1] + v251;
                      if (v253)
                      {
                        v248 = -3.4028e38;
                        v249 = -3.4028e38;
                      }
                      else
                      {
                        v249 = v257;
                      }
                      if (v254)
                        v247 = 3.4028e38;
                      else
                        v247 = v256;
                      if (v254)
                        v250 = 3.4028e38;
                      else
                        v250 = v255;
                    }
                    else
                    {
                      v247 = 3.4028e38;
                      v248 = -3.4028e38;
                      v249 = -3.4028e38;
                      v250 = 3.4028e38;
                    }
                    v314[0] = v250;
                    v314[1] = v247;
                    v314[2] = v249;
                    v314[3] = v248;
                    md::LabelNavEtaLabeler::scoreEtaLabelRect((uint64_t)&v316, (_QWORD *)a1, (uint64_t)v286, v314, (float *)&v315);
                    *(_OWORD *)(j + 168) = v316;
                    *(_QWORD *)(j + 184) = v317;
                    *(_DWORD *)(j + 192) = v267;
                    break;
                  }
                }
                else
                {
                  if (v205 >= v199)
                    v205 %= v199;
                  if (v205 != v201)
                    break;
                }
                v203 = *(float **)v203;
              }
              while (v203);
            }
          }
        }
LABEL_286:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        k = j + 160;

        *(_BYTE *)(j + 156) = 1;
        v258 = *(_QWORD *)(j + 200);
        if (v258 == 1)
        {
          if (*(_BYTE *)(j + 188) && *(float *)(j + 184) <= 0.3)
            goto LABEL_235;
        }
        else
        {
          v259 = *(float *)k < v124
              || (float)((float)(*(float *)(j + 172) + *(float *)(j + 168))
                       + (float)(*(float *)(j + 176) + *(float *)(j + 180))) >= 1.0
              || *(_DWORD *)(j + 128) < *(_DWORD *)(j + 192);
          if (v258 == 3)
          {
            v260 = *(float *)(j + 176) >= 1.0 || v259;
            if ((v260 & 1) == 0)
              goto LABEL_235;
          }
          else if (!v259)
          {
            goto LABEL_235;
          }
        }
      }
      else
      {

      }
    }
    __p[0] = (void *)0xBF80000000000000;
    HIDWORD(__p[1]) = 2139095039;
    v311 = 0.0;
    v312 = 0;
    v310 = 0.0;
    v313 = 1;
    if (!k)
      goto LABEL_121;
    v126 = *(float *)k < v124 || *(float *)(k + 12) >= 1.0;
    if (*(_QWORD *)(j + 200) == 3)
    {
      if (*(float *)(k + 16) >= 1.0)
        LOBYTE(v126) = 1;
      if (!v126)
        goto LABEL_121;
    }
    else if (!v126)
    {
LABEL_121:
      v131 = 0;
      goto LABEL_124;
    }
    k = 0;
    v131 = 1;
LABEL_124:
    v132 = md::LabelNavEtaLabeler::searchForPlacementAcrossShareSections(a1, a2, a3, v286, v62, k, (uint64_t)__p);
    *(double *)(j + 208) = a7;
    *(_BYTE *)(j + 216) = v132;
    if (v132)
    {
      v133 = v63;
      v66 = v66;
      v134 = *(md::RouteSimplifier **)(a1 + 48);
      -[VKRouteInfo route](v133, "route");
      v135 = (const GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
      v278 = md::RouteSimplifier::worldPointForPolylineCoordinate(v134, v135, (const PolylineCoordinate *)__p);
      v299 = v136;
      locationc = v137;

      if (isDistanceClipped)
      {
        v138 = 1;
      }
      else
      {
        v151 = (float64x2_t *)a2[3];
        v152 = vsub_f32(vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v151[60], v151[54], v278), v151[56], v299), v151[58], locationc), 1.0/ (v151[61].f64[1] + v151[55].f64[1] * v278 + v151[57].f64[1] * v299 + v151[59].f64[1] * locationc))), v287);
        v138 = sqrtf(vaddv_f32(vmul_f32(v152, v152))) > (float)(*(float *)(a2[1] + 176) * v64);
      }
      -[VKLabelNavRouteEta worldPointForStaging](v66, "worldPointForStaging");
      *(double *)v318 = v153;
      *(double *)&v318[8] = v154;
      *(double *)&v318[16] = v155;
      if (v138)
      {
        *(double *)&v156 = v278;
        *((double *)&v156 + 1) = v299;
        *(_OWORD *)v318 = v156;
        *(double *)&v318[16] = locationc;
        -[VKLabelNavRouteEta repositionAtRouteCoord:](v66, "repositionAtRouteCoord:", __p[0]);
      }
      else
      {
        v299 = v154;
        locationc = v155;
        v278 = v153;
      }
      v157 = __p[1];
      -[VKLabelNavRouteEta setOrientation:](v66, "setOrientation:", LOBYTE(__p[1]));
      LOBYTE(v316) = v157;
      *(_BYTE *)(j + 136) = 0;
      v158 = a2[3];
      if (!md::LabelLayoutContext::isDistanceClipped(v158, (uint64_t)v318))
      {
        v159 = *(double *)(v158 + 888);
        v160 = *(double *)(v158 + 920);
        v161 = *(double *)(v158 + 984);
        v162 = *(double *)(v158 + 952);
        v268 = *(float64x2_t *)(v158 + 864);
        v270 = *(float64x2_t *)(v158 + 896);
        v283 = *(float64x2_t *)(v158 + 960);
        v275 = *(float64x2_t *)(v158 + 928);
        v163 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v286, v157, &v316);
        v164 = v163[7];
        v165 = v163[5];
        if (v164 >= v165 && (v166 = v163[8], v167 = v163[6], v166 >= v167))
        {
          v207 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v283, v268, v278), v270, v299), v275, locationc), 1.0 / (v161 + v159 * v278 + v160 * v299 + v162 * locationc)));
          v171 = v207.f32[0] + v165;
          v168 = v207.f32[1] + v167;
          v170 = v207.f32[0] + v164;
          v169 = v207.f32[1] + v166;
        }
        else
        {
          v168 = 3.4028e38;
          v169 = -3.4028e38;
          v170 = -3.4028e38;
          v171 = 3.4028e38;
        }
        *(float *)(j + 140) = v171;
        *(float *)(j + 144) = v168;
        *(float *)(j + 148) = v170;
        *(float *)(j + 152) = v169;
        *(_BYTE *)(j + 136) = 1;
      }

      v64 = 5.0;
      v65 = 0.5;
    }
    else
    {
      if (v131)
      {
        std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::__erase_unique<VKLabelNavRouteEta * {__strong}>(v285, (unint64_t)v66);
        v139 = *locationa;
        if (*locationa)
        {
          *locationa = 0;

        }
        goto LABEL_65;
      }
      if (isDistanceClipped)
        goto LABEL_65;
    }
LABEL_235:
    if (-[VKLabelNavRouteEta hasLabelWithAnchor](v66, "hasLabelWithAnchor"))
    {
      v66 = v66;
      *(_OWORD *)__p = xmmword_19FFB34C0;
      v310 = 0.0;
      -[VKLabelNavRouteEta worldPointForStaging](v66, "worldPointForStaging");
      *(_QWORD *)v318 = v208;
      *(_QWORD *)&v318[8] = v209;
      *(_QWORD *)&v318[16] = v210;
      -[VKLabelNavRouteEta worldUnitsPerMeterAtPoint](v66, "worldUnitsPerMeterAtPoint");
      v211 = a2[3];
      LOBYTE(v316) = 0;
      BYTE12(v316) = 0;
      v212 = 1;
      md::LabelLayoutContext::evaluateWorldPoint(v211, (uint64_t)v318, (uint64_t)&v316, 1u, 0, (uint64_t)__p, v213);
      LODWORD(v214) = HIDWORD(__p[0]);
      if (*((float *)__p + 1) >= 0.905)
      {
        -[VKLabelNavRouteEta displayEtaDescription](v66, "displayEtaDescription", v214);
        v215 = (void *)objc_claimAutoreleasedReturnValue();
        v216 = objc_msgSend(v215, "routeEtaType");
        if (v216 <= 4 && ((1 << v216) & 0x19) != 0)
        {

          v212 = 0;
        }
        else
        {

          v212 = v311 < 1500.0;
        }
      }

      -[VKLabelNavRouteEta label](v66, "label");
      v217 = (void *)objc_claimAutoreleasedReturnValue();
      v218 = *(_BYTE **)objc_msgSend(v217, "label");
      v218[297] = v212;
      if (v218[296])
        v218[298] = v212;

      v220 = *(_QWORD **)(a1 + 296);
      v219 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v220 < v219)
      {
        if (v220)
          *v220 = v66;
        *(_QWORD *)(a1 + 296) = v220 + 1;
        goto LABEL_65;
      }
      v221 = *(_QWORD *)(a1 + 288);
      v222 = ((uint64_t)v220 - v221) >> 3;
      v301 = v66;
      if ((unint64_t)(v222 + 1) >> 61)
        abort();
      v223 = v219 - v221;
      v224 = v223 >> 2;
      if (v223 >> 2 <= (unint64_t)(v222 + 1))
        v224 = v222 + 1;
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
        v225 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v225 = v224;
      if (v225)
      {
        v226 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 312) + 16))(*(_QWORD *)(a1 + 312), 8 * v225, 8);
        v227 = (_QWORD *)(v226 + 8 * v222);
        v228 = v226 + 8 * v225;
        if (v226)
          *v227 = v301;
      }
      else
      {
        v228 = 0;
        v227 = (_QWORD *)(8 * v222);
      }
      v229 = v227 + 1;
      v230 = *(char **)(a1 + 288);
      v231 = *(char **)(a1 + 296);
      if (v231 == v230)
      {
        *(_QWORD *)(a1 + 288) = v227;
        *(_QWORD *)(a1 + 296) = v229;
        v237 = *(_QWORD *)(a1 + 304);
        *(_QWORD *)(a1 + 304) = v228;
LABEL_267:
        if (v231)
          (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 312) + 40))(*(_QWORD *)(a1 + 312), v231, v237 - (_QWORD)v231);
        v66 = v301;
        *(_QWORD *)(a1 + 296) = v229;
        goto LABEL_65;
      }
      v232 = v231 - v230 - 8;
      if (v232 > 0x57
        && ((v233 = (v230 - v231 + 7) & 0xFFFFFFFFFFFFFFF8, &v231[v233] >= (char *)v227) || (char *)v227 + v233 >= v231))
      {
        v239 = (v232 >> 3) + 1;
        v234 = &v231[-8 * (v239 & 0x3FFFFFFFFFFFFFFCLL)];
        v240 = v227 - 2;
        v241 = (__int128 *)(v231 - 32);
        v242 = v239 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v244 = *v241;
          v243 = v241[1];
          *v241 = 0uLL;
          v241[1] = 0uLL;
          v241 -= 2;
          *(v240 - 1) = v244;
          *v240 = v243;
          v240 -= 2;
          v242 -= 4;
        }
        while (v242);
        v227 -= v239 & 0x3FFFFFFFFFFFFFFCLL;
        if (v239 == (v239 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_263:
          v231 = *(char **)(a1 + 288);
          v236 = *(char **)(a1 + 296);
          *(_QWORD *)(a1 + 288) = v227;
          *(_QWORD *)(a1 + 296) = v229;
          v237 = *(_QWORD *)(a1 + 304);
          *(_QWORD *)(a1 + 304) = v228;
          while (v236 != v231)
          {
            v238 = (void *)*((_QWORD *)v236 - 1);
            v236 -= 8;

          }
          goto LABEL_267;
        }
      }
      else
      {
        v234 = *(char **)(a1 + 296);
      }
      do
      {
        v235 = *((_QWORD *)v234 - 1);
        v234 -= 8;
        *(_QWORD *)v234 = 0;
        *--v227 = v235;
      }
      while (v234 != v230);
      goto LABEL_263;
    }
LABEL_65:

    v61 = v296;
    goto LABEL_66;
  }
LABEL_304:

}

void sub_19F5FC41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,__int16 a50,char a51,char a52,char a53,char a54,char a55,void *__p,uint64_t a57)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__push_back_slow_path<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void (**v21)(char *);
  BOOL v22;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v10 = v8 + v7;
    if (v8)
    {
      *(_QWORD *)v9 = &off_1E42B4E10;
      v11 = v8 + 24 * v3;
      *(_QWORD *)(v11 + 8) = 0;
      objc_storeStrong((id *)(v11 + 8), *(id *)(a2 + 8));
      v12 = *(void **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;

    }
  }
  else
  {
    v10 = 0;
    v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  v13 = v9 + 24;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v13;
    v18 = (char *)a1[2];
    a1[2] = v10;
    if (!v14)
      return v13;
    goto LABEL_17;
  }
  do
  {
    *(_QWORD *)(v9 - 24) = &off_1E42B4E10;
    v9 -= 24;
    *(_QWORD *)(v9 + 8) = 0;
    objc_storeStrong((id *)(v9 + 8), *((id *)v14 - 2));
    v16 = (void *)*((_QWORD *)v14 - 2);
    *((_QWORD *)v14 - 2) = 0;

    v14 -= 24;
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v13;
  v18 = (char *)a1[2];
  a1[2] = v10;
  if (v17 != v14)
  {
    v19 = v17 - 24;
    v20 = v17 - 24;
    do
    {
      v21 = *(void (***)(char *))v20;
      v20 -= 24;
      (*v21)(v19);
      v22 = v19 == v14;
      v19 = v20;
    }
    while (!v22);
  }
  if (v14)
LABEL_17:
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v14, v18 - v14);
  return v13;
}

uint64_t std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__push_back_slow_path<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void (**v22)(char *);
  BOOL v23;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v10 = v8 + v7;
    if (v8)
    {
      *(_QWORD *)v9 = &off_1E42B4E10;
      v11 = v8 + 24 * v3;
      *(_QWORD *)(v11 + 8) = 0;
      v12 = *(id *)(a2 + 8);
      v13 = *(void **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v12;

    }
  }
  else
  {
    v10 = 0;
    v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  v14 = v9 + 24;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v14;
    v19 = (char *)a1[2];
    a1[2] = v10;
    if (!v15)
      return v14;
    goto LABEL_17;
  }
  do
  {
    *(_QWORD *)(v9 - 24) = &off_1E42B4E10;
    v9 -= 24;
    *(_QWORD *)(v9 + 8) = 0;
    objc_storeStrong((id *)(v9 + 8), *((id *)v15 - 2));
    v17 = (void *)*((_QWORD *)v15 - 2);
    *((_QWORD *)v15 - 2) = 0;

    v15 -= 24;
  }
  while (v15 != v16);
  v15 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v14;
  v19 = (char *)a1[2];
  a1[2] = v10;
  if (v18 != v15)
  {
    v20 = v18 - 24;
    v21 = v18 - 24;
    do
    {
      v22 = *(void (***)(char *))v21;
      v21 -= 24;
      (*v22)(v20);
      v23 = v20 == v15;
      v20 = v21;
    }
    while (!v23);
  }
  if (v15)
LABEL_17:
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v15, v19 - v15);
  return v14;
}

char *geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::operator[](uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char *v6;
  id v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  id *v22;
  void *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  id v32;
  id v33;
  uint64_t *v34;
  uint64_t v35[3];
  uint64_t (**v36)();
  id v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v4 = *(char **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_4;
  while (1)
  {
    v5 = md::RouteRangeAnnotationRequest::operator==((id *)a2, (uint64_t)v4);
    v6 = *(char **)(a1 + 8);
    if ((v5 & 1) != 0)
      break;
    v4 += 72;
    if (v4 == v6)
      goto LABEL_4;
  }
  if (v4 == v6)
  {
LABEL_4:
    v32 = *(id *)a2;
    v7 = *(id *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 32);
    v35[0] = 0;
    v35[1] = v8;
    v35[2] = 0;
    v33 = v7;
    v34 = v35;
    std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>((uint64_t *)&v34, *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
    v36 = &off_1E42B4DD0;
    v37 = 0;
    objc_storeStrong(&v37, 0);
    v4 = *(char **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      goto LABEL_11;
    while (1)
    {
      v9 = md::RouteRangeAnnotationRequest::operator==(&v32, (uint64_t)v4);
      v10 = *(char **)(a1 + 8);
      if ((v9 & 1) != 0)
        break;
      v4 += 72;
      if (v4 == v10)
      {
        v4 = *(char **)(a1 + 8);
        goto LABEL_11;
      }
    }
    if (v4 == v10)
    {
LABEL_11:
      v11 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v4 >= v11)
      {
        v13 = 0x8E38E38E38E38E39 * ((uint64_t)&v4[-*(_QWORD *)a1] >> 3);
        if (v13 + 1 > 0x38E38E38E38E38ELL)
          abort();
        v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - *(_QWORD *)a1) >> 3);
        v15 = 2 * v14;
        if (2 * v14 <= v13 + 1)
          v15 = v13 + 1;
        if (v14 >= 0x1C71C71C71C71C7)
          v16 = 0x38E38E38E38E38ELL;
        else
          v16 = v15;
        v42 = a1 + 16;
        if (v16)
        {
          if (v16 > 0x38E38E38E38E38ELL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = (char *)operator new(72 * v16);
        }
        else
        {
          v17 = 0;
        }
        v38 = v17;
        v39 = &v17[72 * v13];
        v40 = v39;
        v41 = &v17[72 * v16];
        std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::pair[abi:nn180100](v39, (uint64_t)&v32);
        v18 = v39;
        v12 = v40 + 72;
        v20 = *(char **)a1;
        v19 = *(char **)(a1 + 8);
        if (v19 == *(char **)a1)
        {
          v29 = *(char **)(a1 + 8);
        }
        else
        {
          v21 = 0;
          do
          {
            v24 = &v18[v21 / 8];
            v25 = &v19[v21];
            v26 = *(_OWORD *)&v19[v21 - 72];
            *((_QWORD *)v25 - 9) = 0;
            *((_QWORD *)v25 - 8) = 0;
            *(_OWORD *)(v24 - 9) = v26;
            *(v24 - 7) = *(_QWORD *)&v19[v21 - 56];
            v27 = (uint64_t)&v18[v21 / 8 - 6];
            *((_OWORD *)v24 - 3) = *(_OWORD *)&v19[v21 - 48];
            v28 = *(_QWORD *)&v19[v21 - 32];
            *(v24 - 4) = v28;
            if (v28)
            {
              *(_QWORD *)(*(_QWORD *)v27 + 16) = v27;
              *((_QWORD *)v25 - 7) = v25 - 48;
              *((_QWORD *)v25 - 6) = 0;
              *((_QWORD *)v25 - 4) = 0;
            }
            else
            {
              *(v24 - 7) = v27;
            }
            v18[v21 / 8 - 2] = 0;
            v22 = (id *)&v18[v21 / 8 - 2];
            *(v22 - 1) = &off_1E42B4DD0;
            objc_storeStrong(v22, *(id *)&v19[v21 - 16]);
            v23 = *(void **)&v19[v21 - 16];
            *(_QWORD *)&v19[v21 - 16] = 0;

            v21 -= 72;
          }
          while (&v19[v21] != v20);
          v18 = (_QWORD *)((char *)v18 + v21);
          v29 = *(char **)a1;
          v19 = *(char **)(a1 + 8);
        }
        *(_QWORD *)a1 = v18;
        *(_QWORD *)(a1 + 8) = v12;
        v30 = *(char **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v41;
        v40 = v19;
        v41 = v30;
        v38 = v29;
        v39 = v29;
        if (v19 != v29)
        {
          do
          {
            v40 = v19 - 72;
            *((_QWORD *)v19 - 3) = &off_1E42B4DD0;

            std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v19 - 56), *((_QWORD *)v19 - 6));
            v19 = v40;
          }
          while (v40 != v29);
          v19 = v38;
        }
        if (v19)
          operator delete(v19);
      }
      else
      {
        std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::pair[abi:nn180100](v4, (uint64_t)&v32);
        v12 = v4 + 72;
        *(_QWORD *)(a1 + 8) = v4 + 72;
      }
      *(_QWORD *)(a1 + 8) = v12;
      v4 = (char *)(v12 - 9);
    }
    v36 = &off_1E42B4DD0;

    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v34, v35[0]);
  }
  return v4 + 48;
}

void sub_19F5FCCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__split_buffer<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>::~__split_buffer((uint64_t)&a18);
  std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        *((_QWORD *)v3 - 3) = &off_1E42B4DD0;

        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v3 - 56), *((_QWORD *)v3 - 6));
        v5 = (void *)*((_QWORD *)v3 - 9);
        v3 -= 72;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t md::LabelNavEtaLabeler::searchForPlacementAcrossShareSections(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  float v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  PolylineCoordinate *v27;
  PolylineCoordinate v28;
  PolylineCoordinate v29;
  const GEOComposedRoute *v30;
  char *v31;
  char *v32;
  double v33;
  float64x2_t *v34;
  double v35;
  double v36;
  float v37;
  const GEOComposedRoute *v38;
  unsigned int v39;
  float v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *j;
  unsigned int *v45;
  uint64_t v47;
  float v48;
  char v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  PolylineCoordinate v61;
  PolylineCoordinate v62;
  __int128 v63;
  unsigned int v66;
  unsigned int v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  _QWORD *v74;
  __int128 v75;
  PolylineCoordinate *v76;
  PolylineCoordinate *v77;
  float32x2_t v78;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[48];
  __int128 v87;
  uint64_t v88;
  PolylineCoordinate *v89;
  PolylineCoordinate *v90;
  float v91;
  PolylineCoordinate v92;
  PolylineCoordinate v93;
  char v94;
  unsigned __int8 v95;
  float32x2_t v96;
  uint64_t v97;
  float v98;
  char v99;
  __int16 v100;
  char v101;
  uint64_t v102;
  _QWORD v103[5];
  const GEOComposedRoute *v104;
  _QWORD *v105;
  float v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  char v116;
  char v117;
  float v118;
  char *v119;
  char *v120;
  _DWORD v121[2];
  double v122[2];
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;

  v7 = a4;
  v10 = a4[38];
  for (i = a4[39]; i != v10; i -= 72)
  {
    v12 = *(_QWORD **)(i - 24);
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    v14 = *(void **)(i - 40);
    *(_QWORD *)(i - 40) = 0;
    if (v14)
      operator delete(v14);
  }
  v7[39] = v10;
  v15 = (_QWORD *)a2[3];
  v7[22] = v15[108];
  v7[23] = v15[109];
  v7[24] = v15[110];
  v7[25] = v15[111];
  v7[26] = v15[112];
  v7[27] = v15[113];
  v7[28] = v15[114];
  v7[29] = v15[115];
  v7[30] = v15[116];
  v7[31] = v15[117];
  v7[32] = v15[118];
  v7[33] = v15[119];
  v7[34] = v15[120];
  v7[35] = v15[121];
  v7[36] = v15[122];
  v7[37] = v15[123];
  v16 = *(_QWORD **)(a5 + 16);
  if (v16 == (_QWORD *)(a5 + 24))
    return 0;
  v74 = v7 + 38;
  v17 = 12.0;
  v72 = v7;
  while (1)
  {
    v18 = *(id *)a5;
    v66 = *((unsigned __int8 *)v16 + 32);
    v19 = v18;
    v20 = v19;
    v70 = v16;
    v21 = v16[6] - v16[5];
    if (v21)
      break;

LABEL_67:
    v56 = v70;
    v57 = (_QWORD *)v70[1];
    if (v57)
    {
      do
      {
        v58 = v57;
        v57 = (_QWORD *)*v57;
      }
      while (v57);
    }
    else
    {
      do
      {
        v58 = (_QWORD *)v56[2];
        v59 = *v58 == (_QWORD)v56;
        v56 = v58;
      }
      while (!v59);
    }
    v16 = v58;
    if (v58 == (_QWORD *)(a5 + 24))
      return 0;
  }
  v68 = 0;
  v22 = *(float *)(a2[1] + 176);
  v75 = *(_OWORD *)(a2[4] + 32);
  v23 = v21 >> 4;
  v102 = 0x7F7FFFFF00000000;
  v96 = 0;
  v97 = 0;
  v98 = 0.0;
  v99 = 1;
  v95 = -1;
  v94 = 0;
  v92 = (PolylineCoordinate)0xBF80000000000000;
  v93 = (PolylineCoordinate)0xBF80000000000000;
  v91 = 0.0;
  v24 = v22 * v17;
  v25 = v22 * 40.0;
  if (v23 <= 1)
    v23 = 1;
  v69 = v23;
  v73 = v19;
  while (2)
  {
    v26 = 0;
    do
    {
      v71 = v26;
      (*(void (**)(PolylineCoordinate **__return_ptr, _QWORD, uint64_t, void *, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                                  + 24))(&v89, *(_QWORD *)(a1 + 40), a3, v20, v70[5] + 16 * v26);
      v27 = v89;
      v76 = v90;
      if (v89 == v90)
      {
        if (v89)
          goto LABEL_44;
      }
      else
      {
        do
        {
          v28 = *v27;
          v29 = v27[1];
          md::LabelNavEtaLabeler::calculatePositioningFrame((float32x2_t *)&v87, a1, (uint64_t)a2, v20, v28, v29);
          *(_QWORD *)&v81 = a1;
          *((_QWORD *)&v81 + 1) = v7;
          *(_QWORD *)&v82 = &v102;
          *((_QWORD *)&v82 + 1) = &v96;
          *(_QWORD *)&v83 = &v95;
          *((_QWORD *)&v83 + 1) = &v94;
          *(_QWORD *)&v84 = &v93;
          *((_QWORD *)&v84 + 1) = &v92;
          *(_QWORD *)&v85 = &v91;
          *((_QWORD *)&v85 + 1) = v74;
          *(float *)v86 = v24;
          *(_OWORD *)&v86[4] = v87;
          *(_QWORD *)&v86[20] = v88;
          *(_OWORD *)&v86[28] = v75;
          *(float *)&v86[44] = v24 * v24;
          v30 = v20;
          (*(void (**)(char **__return_ptr, _QWORD, uint64_t, const GEOComposedRoute *, PolylineCoordinate *))(**(_QWORD **)(a1 + 40) + 24))(&v119, *(_QWORD *)(a1 + 40), a3, v30, v27);
          v31 = v119;
          v32 = v120;
          v77 = v27;
          if (v120 - v119 == 16
            && *(_DWORD *)v119 == *((_DWORD *)v119 + 2)
            && vabds_f32(*((float *)v119 + 1), *((float *)v119 + 3)) < 0.00000011921)
          {
            v33 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(a1 + 48), v30, (const PolylineCoordinate *)v119);
            v34 = (float64x2_t *)a2[3];
            *(float32x2_t *)&v123 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v34[60], v34[54], v33), v34[56], v35), v34[58], v36), 1.0/ (v34[61].f64[1]+ v34[55].f64[1] * v33+ v34[57].f64[1] * v35+ v34[59].f64[1] * v36)));
            md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)const::$_0::operator()((uint64_t)&v81, (float *)&v123, *(_QWORD *)v119, *((_QWORD *)v119 + 1), 0.0);
          }
          else
          {
            while (v31 != v32)
            {
              v118 = v25;
              v117 = 1;
              v115 = 0xBF80000000000000;
              v37 = *(float *)(a2[1] + 176);
              v103[0] = a1;
              v103[1] = &v118;
              v103[2] = &v117;
              v103[3] = &v116;
              v103[4] = &v115;
              v104 = v30;
              v105 = a2;
              v106 = v25;
              v111 = v85;
              v112 = *(_OWORD *)v86;
              v113 = *(_OWORD *)&v86[16];
              v114 = *(_OWORD *)&v86[32];
              v107 = v81;
              v108 = v82;
              v109 = v83;
              v110 = v84;
              v38 = v104;
              v39 = *((_DWORD *)v31 + 2);
              v40 = *((float *)v31 + 1);
              if (*(_DWORD *)v31 != v39 || vabds_f32(v40, *((float *)v31 + 3)) >= 0.00000011921)
              {
                if (v40 != 0.0)
                {
                  md::LabelNavEtaLabeler::sampleSimplifiedRouteSection<md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,gm::Range<geo::PolylineCoordinate> const&,float,md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0)const::{lambda(geo::PolylineCoordinate)#1}::operator()((uint64_t)v103, *(_QWORD *)v31);
                  v40 = *((float *)v31 + 1);
                  v39 = *((_DWORD *)v31 + 2);
                }
                if (v40 <= 0.0)
                  v41 = *(_DWORD *)v31;
                else
                  v41 = *(_DWORD *)v31 + 1;
                if (v41 == v39)
                {
                  md::LabelNavEtaLabeler::sampleSimplifiedRouteSection<md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,gm::Range<geo::PolylineCoordinate> const&,float,md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0)const::{lambda(geo::PolylineCoordinate)#1}::operator()((uint64_t)v103, v39);
                }
                else if (v41 < v39)
                {
                  v42 = a2[3];
                  v123 = *(_OWORD *)(v42 + 136);
                  v124 = *(_QWORD *)(v42 + 152);
                  v125 = *(_OWORD *)(v42 + 160);
                  v126 = *(_QWORD *)(v42 + 176);
                  v43 = *(_QWORD *)(a1 + 40);
                  v121[0] = v41;
                  v121[1] = v39;
                  if ((*(unsigned int (**)(uint64_t, uint64_t, const GEOComposedRoute *, __int128 *, _DWORD *, double *))(*(_QWORD *)v43 + 32))(v43, a3, v38, &v123, v121, v122))
                  {
                    md::RouteSimplifier::simplifiedRibbonIndices(*(_QWORD *)(a1 + 48), v38, v41, v39, (_QWORD *)(a1 + 80), v37 * ((v122[0] + v122[0]) * *(double *)(v42 + 312)) / *(float *)(v42 + 1064));
                    v45 = *(unsigned int **)(a1 + 80);
                    for (j = *(unsigned int **)(a1 + 88); v45 != j; ++v45)
                      md::LabelNavEtaLabeler::sampleSimplifiedRouteSection<md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,gm::Range<geo::PolylineCoordinate> const&,float,md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0)const::{lambda(geo::PolylineCoordinate)#1}::operator()((uint64_t)v103, *v45);
                  }
                }
                if (*((float *)v31 + 3) != 0.0)
                  md::LabelNavEtaLabeler::sampleSimplifiedRouteSection<md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,gm::Range<geo::PolylineCoordinate> const&,float,md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0)const::{lambda(geo::PolylineCoordinate)#1}::operator()((uint64_t)v103, *((_QWORD *)v31 + 1));
              }

              v31 += 16;
            }
          }
          if (v119)
          {
            v120 = v119;
            operator delete(v119);
          }

          v27 = v77 + 2;
          v7 = v72;
          v20 = v73;
        }
        while (&v77[2] != v76);
        v27 = v89;
        if (v89)
        {
LABEL_44:
          v90 = v27;
          operator delete(v27);
        }
      }
      v26 = v71 + 1;
    }
    while (v71 + 1 != v69);
    if (v95 == 255)
    {
      v25 = v25 * 0.5;
      if (v68++ < 2)
        continue;
    }
    break;
  }
  if (v95 == 255)
    goto LABEL_66;
  v47 = v97;
  v48 = v98;
  v49 = v99;
  LOWORD(v103[0]) = v100;
  BYTE2(v103[0]) = v101;
  if (!a6)
    goto LABEL_74;
  if (v7[19] != 1)
  {
    v52 = *(float *)(a2[1] + 176);
    v53 = vaddv_f32(v96) + (float)(*(float *)&v97 + *((float *)&v97 + 1));
    v54 = (float)(*(float *)(a6 + 12) + *(float *)(a6 + 8)) + (float)(*(float *)(a6 + 16) + *(float *)(a6 + 20));
    if (vabds_f32(v53, v54) <= (float)(v52 * 100.0))
    {
      v55 = *(_DWORD *)(a6 + 32);
      if (v55 == v66)
      {
        if (*((float *)&v102 + 1) < (float)(*(float *)(a6 + 4) + (float)(v52 * -20.0)))
          goto LABEL_74;
      }
      else if (v55 > v66)
      {
        goto LABEL_74;
      }
    }
    else if (v53 < v54)
    {
      goto LABEL_74;
    }
LABEL_66:

    v17 = 12.0;
    goto LABEL_67;
  }
  v50 = 0.0;
  if (v99)
    v51 = v98;
  else
    v51 = 0.0;
  if (*(_BYTE *)(a6 + 28))
    v50 = *(float *)(a6 + 24);
  if (vabds_f32(v51, v50) <= 0.3)
    goto LABEL_66;
LABEL_74:
  v78 = v96;
  v80 = v102;
  v62 = v92;
  v61 = v93;
  *(_QWORD *)a7 = md::LabelNavEtaLabeler::findClosestCoordinateBetweenVertices(a1, (float64x2_t *)(a2[3] + 864), v20, v61, v62, v91);
  *(_BYTE *)(a7 + 8) = v94;
  *(_QWORD *)&v63 = v80;
  *((float32x2_t *)&v63 + 1) = v78;
  *(_OWORD *)(a7 + 12) = v63;
  *(_QWORD *)(a7 + 28) = v47;
  *(float *)(a7 + 36) = v48;
  *(_BYTE *)(a7 + 40) = v49;
  *(_WORD *)(a7 + 41) = v103[0];
  *(_BYTE *)(a7 + 43) = BYTE2(v103[0]);
  *(_DWORD *)(a7 + 44) = v66;

  return 1;
}

void sub_19F5FD5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  void *v54;

  _Unwind_Resume(a1);
}

unint64_t geo::linear_map<md::RouteRangeAnnotationRequest,md::WhenState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>>::operator[](unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v30;
  id v31;
  uint64_t *v32;
  uint64_t v33[3];
  __int16 v34;
  char v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;

  v4 = *a1;
  if (*a1 == a1[1])
    goto LABEL_4;
  while (1)
  {
    v5 = md::RouteRangeAnnotationRequest::operator==((id *)a2, v4);
    v6 = a1[1];
    if ((v5 & 1) != 0)
      break;
    v4 += 56;
    if (v4 == v6)
      goto LABEL_4;
  }
  if (v4 == v6)
  {
LABEL_4:
    v30 = *(id *)a2;
    v7 = *(id *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 32);
    v33[0] = 0;
    v33[1] = v8;
    v33[2] = 0;
    v31 = v7;
    v32 = v33;
    std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>((uint64_t *)&v32, *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
    v34 = 0;
    v35 = 0;
    v4 = *a1;
    if (*a1 == a1[1])
      goto LABEL_11;
    while (1)
    {
      v9 = md::RouteRangeAnnotationRequest::operator==(&v30, v4);
      v10 = a1[1];
      if ((v9 & 1) != 0)
        break;
      v4 += 56;
      if (v4 == v10)
      {
        v4 = a1[1];
        goto LABEL_11;
      }
    }
    if (v4 == v10)
    {
LABEL_11:
      v11 = a1[2];
      if (v4 >= v11)
      {
        v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
        if ((unint64_t)(v13 + 1) > 0x492492492492492)
          abort();
        v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - *a1) >> 3);
        v15 = 2 * v14;
        if (2 * v14 <= v13 + 1)
          v15 = v13 + 1;
        if (v14 >= 0x249249249249249)
          v16 = 0x492492492492492;
        else
          v16 = v15;
        v40 = a1 + 2;
        if (v16)
        {
          if (v16 > 0x492492492492492)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = (char *)operator new(56 * v16);
        }
        else
        {
          v17 = 0;
        }
        v36 = v17;
        v37 = (unint64_t)&v17[56 * v13];
        v38 = v37;
        v39 = &v17[56 * v16];
        std::pair<md::RouteRangeAnnotationRequest,md::WhenState>::pair[abi:nn180100](v37, (uint64_t)&v30);
        v18 = v37;
        v12 = v38 + 56;
        v19 = (char *)*a1;
        v20 = (char *)a1[1];
        if (v20 == (char *)*a1)
        {
          *a1 = v37;
          a1[1] = v12;
          a1[2] = (unint64_t)v39;
        }
        else
        {
          v21 = 0;
          do
          {
            v22 = v18 + v21;
            v23 = &v20[v21];
            v24 = *(_OWORD *)&v20[v21 - 56];
            *((_QWORD *)v23 - 7) = 0;
            *((_QWORD *)v23 - 6) = 0;
            *(_OWORD *)(v22 - 56) = v24;
            *(_QWORD *)(v22 - 40) = *(_QWORD *)&v20[v21 - 40];
            v25 = v18 + v21 - 32;
            *(_OWORD *)(v22 - 32) = *(_OWORD *)&v20[v21 - 32];
            v26 = *(_QWORD *)&v20[v21 - 16];
            *(_QWORD *)(v22 - 16) = v26;
            if (v26)
            {
              *(_QWORD *)(*(_QWORD *)v25 + 16) = v25;
              *((_QWORD *)v23 - 5) = v23 - 32;
              *((_QWORD *)v23 - 4) = 0;
              *((_QWORD *)v23 - 2) = 0;
            }
            else
            {
              *(_QWORD *)(v22 - 40) = v25;
            }
            v27 = v18 + v21;
            *(_WORD *)(v27 - 8) = *(_WORD *)&v20[v21 - 8];
            *(_BYTE *)(v27 - 6) = 0;
            if (v20[v21 - 6])
            {
              *(_BYTE *)(v27 - 5) = v20[v21 - 5];
              *(_BYTE *)(v27 - 6) = 1;
            }
            v21 -= 56;
          }
          while (&v20[v21] != v19);
          v20 = (char *)*a1;
          v28 = (char *)a1[1];
          *a1 = v18 + v21;
          a1[1] = v12;
          for (a1[2] = (unint64_t)v39; v28 != v20; v28 -= 56)
          {
            if (*(v28 - 6))
              *(v28 - 6) = 0;
            std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v28 - 40), *((_QWORD *)v28 - 4));

          }
        }
        if (v20)
          operator delete(v20);
      }
      else
      {
        std::pair<md::RouteRangeAnnotationRequest,md::WhenState>::pair[abi:nn180100](v4, (uint64_t)&v30);
        v12 = v4 + 56;
        a1[1] = v4 + 56;
      }
      a1[1] = v12;
      v4 = v12 - 56;
    }
    if (v35)
      v35 = 0;
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v32, v33[0]);

  }
  return v4 + 48;
}

void sub_19F5FD958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__split_buffer<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>::~__split_buffer((uint64_t)&a16);
  std::pair<md::RouteRangeAnnotationRequest,md::WhenState>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::__erase_unique<VKLabelNavRouteEta * {__strong}>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 8);
  result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    v5 = v4;
    v6 = result;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*(uint64_t **)a1 == v5)
        *(_QWORD *)a1 = v11;
      --*(_QWORD *)(a1 + 24);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(result, v5);
      v5[5] = (uint64_t)&off_1E42B4E10;

      return (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v5, 64);
    }
  }
  return result;
}

uint64_t std::pair<md::RouteRangeAnnotationRequest,md::WhenState>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(id *)a2;
  v4 = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>((uint64_t *)(a1 + 16), *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = 0;
  if (*(_BYTE *)(a2 + 50))
  {
    *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
    *(_BYTE *)(a1 + 50) = 1;
  }
  return a1;
}

void sub_19F5FDB38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v2, *(_QWORD *)(v1 + 24));

  _Unwind_Resume(a1);
}

uint64_t std::pair<md::RouteRangeAnnotationRequest,md::WhenState>::~pair(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 50))
    *(_BYTE *)(a1 + 50) = 0;
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 16, *(_QWORD *)(a1 + 24));

  return a1;
}

uint64_t std::__split_buffer<std::pair<md::RouteRangeAnnotationRequest,md::WhenState>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    if (*(_BYTE *)(i - 6))
      *(_BYTE *)(i - 6) = 0;
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(i - 40, *(_QWORD *)(i - 32));

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = (uint64_t *)v9;
            v9 = *(_QWORD *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *((_DWORD *)v4 + 8);
        if (*((_DWORD *)v8 + 8) >= v12)
          break;
      }
      v13 = v6;
      v14 = v6;
      if (!v7)
        goto LABEL_19;
      v13 = v8 + 1;
      if (!v8[1])
      {
        v14 = v8;
LABEL_19:
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 16))(v5[2], 72, 8);
        *(_DWORD *)(v16 + 32) = *((_DWORD *)v4 + 8);
        *(_QWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        v17 = v4[8];
        *(_QWORD *)(v16 + 56) = 0;
        *(_QWORD *)(v16 + 64) = v17;
        v18 = (char *)v4[5];
        v19 = (char *)v4[6];
        v20 = v19 - v18;
        if (v19 != v18)
        {
          if (v20 < 0)
            abort();
          v21 = (_OWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v19 - v18, 4);
          *(_QWORD *)(v16 + 40) = v21;
          *(_QWORD *)(v16 + 48) = v21;
          *(_QWORD *)(v16 + 56) = &v21[v20 >> 4];
          do
          {
            if (v21)
              *v21 = *(_OWORD *)v18;
            v18 += 16;
            ++v21;
          }
          while (v18 != v19);
          *(_QWORD *)(v16 + 48) = v21;
        }
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = v14;
        *v13 = v16;
        v22 = *(_QWORD *)*v5;
        if (v22)
        {
          *v5 = v22;
          v16 = *v13;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v16);
        ++v5[3];
      }
LABEL_29:
      v23 = (_QWORD *)v4[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v4[2];
          v11 = *v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v11);
      }
      v4 = v24;
      if (v24 == a3)
        return result;
    }
    v13 = v6;
    v14 = v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t *)v7;
          v15 = *(_DWORD *)(v7 + 32);
          if (v12 >= v15)
            break;
          v7 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_19;
        }
        if (v15 >= v12)
          goto LABEL_29;
        v13 = v14 + 1;
        v7 = v14[1];
        if (!v7)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

void sub_19F5FDE30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 16) + 40))(*(_QWORD *)(v1 + 16), v2, 72);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        *(_QWORD *)(v2 + 48) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 64) + 40))(*(_QWORD *)(v2 + 64), v3, *(_QWORD *)(v2 + 56) - v3);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 72);
  }
  return a1;
}

void md::LabelNavEtaLabeler::sampleSimplifiedRouteSection<md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,gm::Range<geo::PolylineCoordinate> const&,float,md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)::$_0)const::{lambda(geo::PolylineCoordinate)#1}::operator()(uint64_t a1, uint64_t a2)
{
  double v4;
  float64x2_t *v5;
  double v6;
  double v7;
  float64x2_t v8;
  float32x2_t v9;
  _BYTE *v10;
  float32x2_t *v11;
  float32x2_t v12;
  float v13;
  _DWORD *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float64x2_t v19;
  uint64_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float32x2_t v23;
  PolylineCoordinate v24;

  v24 = (PolylineCoordinate)a2;
  v4 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(*(_QWORD *)a1 + 48), *(const GEOComposedRoute **)(a1 + 40), &v24);
  v5 = *(float64x2_t **)(*(_QWORD *)(a1 + 48) + 24);
  v8 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v5[60], v5[54], v4), v5[56], v6), v5[58], v7), 1.0 / (v5[61].f64[1] + v5[55].f64[1] * v4 + v5[57].f64[1] * v6 + v5[59].f64[1] * v7));
  v9 = vcvt_f32_f64(v8);
  v10 = *(_BYTE **)(a1 + 16);
  if (!*v10)
  {
    v11 = *(float32x2_t **)(a1 + 24);
    v12 = vsub_f32(v9, *v11);
    *(float32x2_t *)&v8.f64[0] = vmul_f32(v12, v12);
    v13 = sqrtf(vaddv_f32(*(float32x2_t *)&v8.f64[0]));
    v14 = *(_DWORD **)(a1 + 8);
    LODWORD(v8.f64[0]) = *v14;
    v15 = *(float *)(a1 + 56) - *(float *)v14;
    if (v13 >= v15)
    {
      v16 = v13 - v15;
      *v14 = 0;
      *(float *)v8.f64 = v15 / v13;
      v23 = vmla_n_f32(*v11, vsub_f32(v9, *v11), v15 / v13);
      v21 = v8;
      md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)const::$_0::operator()(a1 + 64, (float *)&v23, **(_QWORD **)(a1 + 32), a2, v15 / v13);
      v17 = *(float *)(a1 + 56);
      if (v16 >= v17)
      {
        v18 = v17 / v13;
        v19 = v21;
        do
        {
          v16 = v16 - v17;
          *(float *)v19.f64 = *(float *)v19.f64 + v18;
          v22 = v19;
          v20 = *(uint64_t **)(a1 + 32);
          v23 = vmla_n_f32(**(float32x2_t **)(a1 + 24), vsub_f32(v9, **(float32x2_t **)(a1 + 24)), *(float *)v19.f64);
          md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)const::$_0::operator()(a1 + 64, (float *)&v23, *v20, a2, *(float *)v19.f64);
          v19 = v22;
          v17 = *(float *)(a1 + 56);
        }
        while (v16 >= v17);
      }
      v14 = *(_DWORD **)(a1 + 8);
      v10 = *(_BYTE **)(a1 + 16);
      LODWORD(v8.f64[0]) = *v14;
      v13 = v16;
    }
    *(float *)v14 = *(float *)v8.f64 + v13;
  }
  *v10 = 0;
  **(float32x2_t **)(a1 + 24) = v9;
  **(PolylineCoordinate **)(a1 + 32) = v24;
}

