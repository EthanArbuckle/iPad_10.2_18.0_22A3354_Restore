BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::InView>(v1);
  v4 = gdc::Registry::storage<md::ls::RampMaterialData>(v1);
  v5 = gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283BA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283BA8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283BF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283BF0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43F0;
  v2[4] = "md::ls::MeshRenderableID]";
  v2[5] = 24;
  v2[6] = 0x20D1AB8FE4B8A761;
  v2[7] = "md::ls::CanEnableTexture]";
  v2[8] = 24;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xB6C12FBB402E8E70;
    v2[10] = "md::ls::RenderableMaterialData]";
    v2[11] = 30;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xB6C12FBB402E8E70;
  *((_QWORD *)v10 + 1) = "md::ls::RenderableMaterialData]";
  *((_QWORD *)v10 + 2) = 30;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F713B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276678;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  float v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275628;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = v13[1];
  if ((v14 & (v14 - 1)) != 0)
  {
    v16 = 0x1AF456233693CD46;
    if (v14 <= 0x1AF456233693CD46)
      v16 = 0x1AF456233693CD46 % v14;
    v15 = *(_QWORD **)(*v13 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  else
  {
    v15 = *(_QWORD **)(*v13 + 8 * ((v14 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  v30 = fmaxf(*(float *)(*(_QWORD *)(v15[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v15[5] + 32) + 3076), 1.0);
  v29 = 0;
  v17 = **v3;
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0x4EDAD23DFB014132)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_33;
    }
  }
  if (v18 == v19)
  {
LABEL_33:
    v21 = 0;
  }
  else
  {
    v21 = v18[3];
    v20 = (std::__shared_weak_count *)v18[4];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v29 = v21;
  v25 = operator new(0x20uLL);
  *v25 = &off_1E427B580;
  v25[1] = &v29;
  v25[2] = &v30;
  v25[3] = v3;
  v32 = v25;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v31);
  v26 = v32;
  if (v32 == v31)
  {
    v27 = 4;
    v26 = v31;
    goto LABEL_38;
  }
  if (v32)
  {
    v27 = 5;
LABEL_38:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F713EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *CanEnable;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  CanEnable = (_QWORD *)gdc::Registry::storage<md::ls::CanEnableTexture>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)CanEnable;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (CanEnable[8] - CanEnable[7] < v7[4] - v7[3])
    v7 = CanEnable + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 4 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = CanEnable[4], v17 < (CanEnable[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = CanEnable[7],
            v41 = CanEnable[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = CanEnable[11];
        v46 = CanEnable[10] + v40;
      }
      else
      {
        v45 = CanEnable[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 32 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CanEnable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::InView>(v1);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  CanEnable = gdc::Registry::storage<md::ls::CanEnableTexture>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = CanEnable;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(CanEnable + 64) - *(_QWORD *)(CanEnable + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = CanEnable;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::CanEnableTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x20D1AB8FE4B8A761;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x20D1AB8FE4B8A761;
      if (*(_QWORD *)&v3 <= 0x20D1AB8FE4B8A761uLL)
        v5 = 0x20D1AB8FE4B8A761uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x20D1AB8FE4B8A761;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x20D1AB8FE4B8A761)
            {
              if (v7[2] == 0x20D1AB8FE4B8A761)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x20D1AB8FE4B8A761)
          {
            if (v7[2] == 0x20D1AB8FE4B8A761)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CanEnableTexture]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271AA8;
  *(_QWORD *)(v11 + 8) = 0x20D1AB8FE4B8A761;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x20D1AB8FE4B8A761uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x20D1AB8FE4B8A761;
  v15[1] = "md::ls::CanEnableTexture]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x20D1AB8FE4B8A761, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F714668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282D98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282D98;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xA3F884E4E2541296;
  result[1] = "md::ls::ColorDataHandle]";
  result[2] = 23;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282DE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282DE0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4400;
  v2[4] = "md::ls::SharedColorDataHandle]";
  v2[5] = 29;
  v2[6] = 0x60915CB292001F47;
  v2[7] = "md::ls::UniqueColorDataHandle]";
  v2[8] = 29;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x2906BE24995F2F60;
    v2[10] = "md::ls::AlbedoTintColor]";
    v2[11] = 23;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x2906BE24995F2F60;
  *((_QWORD *)v10 + 1) = "md::ls::AlbedoTintColor]";
  *((_QWORD *)v10 + 2) = 23;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F714ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275F70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275F70;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v98;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::InView>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SharedColorDataHandle>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::AlbedoTintColor>(v2);
  gdc::Registry::storage<md::ls::UniqueColorDataHandle>(v2);
  v6 = gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v3 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v8 = v4 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  if (v5[8] - v5[7] < v8[4] - v8[3])
    v8 = v5 + 4;
  v100 = v8;
  v101 = (_QWORD *)v3;
  v102 = v4;
  v103 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v104 = v5;
  v105 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v100))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v105 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v100);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  v98 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *v98 = *v9;
    v14 = *v9;
    v15 = HIDWORD(*v9);
    v16 = *v9 >> 39;
    v17 = v4[4];
    if (v16 < (v4[5] - v17) >> 3
      && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
      && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)), v21 = v4[7], v20 = v4[8], v19 < (v20 - v21) >> 3)
      && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
    {
      v24 = (unint64_t *)(v4[10] + 8 * v19);
    }
    else
    {
      v24 = (unint64_t *)v4[11];
    }
    v25 = v7[4];
    if (v16 < (v7[5] - v25) >> 3
      && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
      && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)), v29 = v7[7], v28 = v7[8], v27 < (v28 - v29) >> 3)
      && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
    {
      v32 = (unint64_t *)(v7[10] + 8 * v27);
    }
    else
    {
      v32 = (unint64_t *)v7[11];
    }
    v33 = v5[4];
    if (v16 < (v5[5] - v33) >> 3
      && (v34 = *(_QWORD *)(v33 + 8 * v16)) != 0
      && (v35 = *(unsigned __int16 *)(v34 + 2 * (HIDWORD(v14) & 0x7F)), v37 = v5[7], v36 = v5[8], v35 < (v36 - v37) >> 3)
      && ((v38 = v37 + 8 * v35, v38 != v36) ? (v39 = *(_DWORD *)(v38 + 4) == (_DWORD)v15) : (v39 = 0), v39))
    {
      v40 = v5[11];
      v41 = v5[10] + 16 * v35;
    }
    else
    {
      v40 = v5[11];
      v41 = v40;
    }
    if (v41 == v40)
      v42 = 0;
    else
      v42 = (float *)v41;
    v43 = **(_QWORD **)(a1 + 8);
    v44 = *(_QWORD **)v43;
    v45 = *(_QWORD **)(v43 + 8);
    if (v44 != v45)
    {
      while (*v44 != 0x4EDAD23DFB014132)
      {
        v44 += 5;
        if (v44 == v45)
          goto LABEL_55;
      }
    }
    if (v44 == v45)
    {
LABEL_55:
      v46 = 0;
    }
    else
    {
      v46 = (_QWORD *)v44[3];
      v47 = (std::__shared_weak_count *)v44[4];
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(p_shared_owners);
        while (__stxr(v49 + 1, p_shared_owners));
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    v51 = *v24;
    v106 = v51;
    v52 = v46[126];
    v53 = (v46[127] - v52) >> 3;
    if (v51 < v53
      && ((v54 = *(_QWORD *)(v52 + 8 * v51)) != 0 ? (v55 = HIDWORD(v51) == HIDWORD(v54)) : (v55 = 0), v55))
    {
      v57 = v46[129] + 20 * v54;
      v56 = v46[130];
    }
    else
    {
      v56 = v46[130];
      v57 = v56;
    }
    if (v57 == v56)
      v58 = 0;
    else
      v58 = (float *)v57;
    if (v58)
    {
      v59 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v46 + 118), v51, &v106);
      ++v59[3];
      v52 = v46[126];
      v53 = (v46[127] - v52) >> 3;
    }
    v60 = *v32;
    v106 = v60;
    if (v60 < v53
      && ((v61 = *(_QWORD *)(v52 + 8 * v60)) != 0 ? (v62 = HIDWORD(v60) == HIDWORD(v61)) : (v62 = 0), v62))
    {
      v64 = v46[129] + 20 * v61;
      v63 = v46[130];
    }
    else
    {
      v63 = v46[130];
      v64 = v63;
    }
    if (v64 == v63)
      v65 = 0;
    else
      v65 = (float *)v64;
    if (v65)
    {
      v66 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v46 + 118), v60, &v106);
      ++v66[3];
    }
    *v65 = *v58 + (float)((float)(*v42 - *v58) * v42[3]);
    v65[1] = v58[1] + (float)((float)(v42[1] - v58[1]) * v42[3]);
    v65[2] = v58[2] + (float)((float)(v42[2] - v58[2]) * v42[3]);
    v9 = (_QWORD *)v100[4];
    v13 = v105 + 1;
    v105 = v13;
    if (v13 != v9)
    {
      v67 = v101[4];
      while (1)
      {
        v68 = *((unsigned int *)v13 + 1);
        v69 = v68 >> 7;
        if (v68 >> 7 < (v101[5] - v67) >> 3)
        {
          v70 = *(_QWORD *)(v67 + 8 * v69);
          if (v70)
          {
            v71 = v68 & 0x7F;
            v72 = *(unsigned __int16 *)(v70 + 2 * v71);
            v74 = v101[7];
            v73 = v101[8];
            if (v72 < (v73 - v74) >> 3)
            {
              v75 = v74 + 8 * v72;
              if (v75 != v73 && *(_DWORD *)(v75 + 4) == (_DWORD)v68)
              {
                v77 = v102[4];
                if (v69 < (v102[5] - v77) >> 3)
                {
                  v78 = *(_QWORD *)(v77 + 8 * v69);
                  if (v78)
                  {
                    v79 = *(unsigned __int16 *)(v78 + 2 * v71);
                    v81 = v102[7];
                    v80 = v102[8];
                    if (v79 < (v80 - v81) >> 3)
                    {
                      v82 = v81 + 8 * v79;
                      if (v82 != v80 && *(_DWORD *)(v82 + 4) == (_DWORD)v68)
                      {
                        v84 = v103[4];
                        if (v69 < (v103[5] - v84) >> 3)
                        {
                          v85 = *(_QWORD *)(v84 + 8 * v69);
                          if (v85)
                          {
                            v86 = *(unsigned __int16 *)(v85 + 2 * v71);
                            v88 = v103[7];
                            v87 = v103[8];
                            if (v86 < (v87 - v88) >> 3)
                            {
                              v89 = v88 + 8 * v86;
                              if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v68)
                              {
                                v91 = v104[4];
                                if (v69 < (v104[5] - v91) >> 3)
                                {
                                  v92 = *(_QWORD *)(v91 + 8 * v69);
                                  if (v92)
                                  {
                                    v93 = *(unsigned __int16 *)(v92 + 2 * v71);
                                    v94 = v104[7];
                                    v95 = v104[8];
                                    if (v93 < (v95 - v94) >> 3)
                                    {
                                      v96 = v94 + 8 * v93;
                                      if (*(_DWORD *)(v96 + 4) == (_DWORD)v68 && v96 != v95)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v13 == v9)
        {
          v13 = v9;
          goto LABEL_15;
        }
      }
      v9 = v13;
LABEL_15:
      v105 = v13;
    }
  }
  *v98 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t gdc::Registry::storage<md::ls::SharedColorDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC893C1C4D3D90FF5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC893C1C4D3D90FF5;
      if (*(_QWORD *)&v3 <= 0xC893C1C4D3D90FF5)
        v5 = 0xC893C1C4D3D90FF5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC893C1C4D3D90FF5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC893C1C4D3D90FF5)
            {
              if (v7[2] == 0xC893C1C4D3D90FF5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC893C1C4D3D90FF5)
          {
            if (v7[2] == 0xC893C1C4D3D90FF5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedColorDataHandle]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272888;
  *(_QWORD *)(v11 + 8) = 0xC893C1C4D3D90FF5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC893C1C4D3D90FF5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC893C1C4D3D90FF5;
  v15[1] = "md::ls::SharedColorDataHandle]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC893C1C4D3D90FF5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F715318(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AlbedoTintColor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2906BE24995F2F60;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2906BE24995F2F60;
      if (*(_QWORD *)&v3 <= 0x2906BE24995F2F60uLL)
        v5 = 0x2906BE24995F2F60uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2906BE24995F2F60;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2906BE24995F2F60)
            {
              if (v7[2] == 0x2906BE24995F2F60)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2906BE24995F2F60)
          {
            if (v7[2] == 0x2906BE24995F2F60)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::AlbedoTintColor]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42718F8;
  *(_QWORD *)(v11 + 8) = 0x2906BE24995F2F60;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2906BE24995F2F60uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2906BE24995F2F60;
  v15[1] = "md::ls::AlbedoTintColor]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2906BE24995F2F60, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F715540(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UniqueColorDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x60915CB292001F47;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x60915CB292001F47;
      if (*(_QWORD *)&v3 <= 0x60915CB292001F47uLL)
        v5 = 0x60915CB292001F47uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x60915CB292001F47;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x60915CB292001F47)
            {
              if (v7[2] == 0x60915CB292001F47)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x60915CB292001F47)
          {
            if (v7[2] == 0x60915CB292001F47)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueColorDataHandle]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42728B8;
  *(_QWORD *)(v11 + 8) = 0x60915CB292001F47;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x60915CB292001F47uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x60915CB292001F47;
  v15[1] = "md::ls::UniqueColorDataHandle]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x60915CB292001F47, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F715768(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282C78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282C78;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282CC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282CC0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43F0;
  v2[4] = "md::ls::MeshRenderableID]";
  v2[5] = 24;
  v2[6] = 0x20D1AB8FE4B8A761;
  v2[7] = "md::ls::CanEnableTexture]";
  v2[8] = 24;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0xA3F884E4E2541296;
    v2[10] = "md::ls::ColorDataHandle]";
    v2[11] = 23;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xA3F884E4E2541296;
  *((_QWORD *)v10 + 1) = "md::ls::ColorDataHandle]";
  *((_QWORD *)v10 + 2) = 23;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xB6C12FBB402E8E70;
    *((_QWORD *)v4 + 1) = "md::ls::RenderableMaterialData]";
    *((_QWORD *)v4 + 2) = 30;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xB6C12FBB402E8E70;
  *((_QWORD *)v21 + 1) = "md::ls::RenderableMaterialData]";
  *((_QWORD *)v21 + 2) = 30;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xE40027D1222182B5;
    *((_QWORD *)v14 + 1) = "md::ls::HasOverlayPatch]";
    *((_QWORD *)v14 + 2) = 23;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xE40027D1222182B5;
  *((_QWORD *)v32 + 1) = "md::ls::HasOverlayPatch]";
  *((_QWORD *)v32 + 2) = 23;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F7160D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275EE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275EE0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  float v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42755F8;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = v13[1];
  if ((v14 & (v14 - 1)) != 0)
  {
    v16 = 0x1AF456233693CD46;
    if (v14 <= 0x1AF456233693CD46)
      v16 = 0x1AF456233693CD46 % v14;
    v15 = *(_QWORD **)(*v13 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  else
  {
    v15 = *(_QWORD **)(*v13 + 8 * ((v14 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  v39 = fmaxf(*(float *)(*(_QWORD *)(v15[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v15[5] + 32) + 3076), 1.0);
  v38 = 0;
  v17 = **v3;
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0x4EDAD23DFB014132)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_33;
    }
  }
  if (v18 == v19)
  {
LABEL_33:
    v21 = 0;
  }
  else
  {
    v21 = v18[3];
    v20 = (std::__shared_weak_count *)v18[4];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v38 = v21;
  v25 = *(uint64_t **)**v3;
  if (v25 != *(uint64_t **)(**v3 + 8) && *v25 != 0xC94DD89A7B09BE9CLL)
  {
    v26 = v25 + 5;
    do
    {
      v27 = *v26;
      v26 += 5;
    }
    while (v27 != 0xC94DD89A7B09BE9CLL);
    v25 = v26 - 5;
  }
  v28 = v25[3];
  v29 = (std::__shared_weak_count *)v25[4];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    do
      v32 = __ldaxr(v30);
    while (__stlxr(v32 - 1, v30));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  v34 = operator new(0x28uLL);
  *v34 = &off_1E427B1D8;
  v34[1] = &v38;
  v34[2] = v33 + 2576;
  v34[3] = &v39;
  v34[4] = v3;
  v41 = v34;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v40);
  v35 = v41;
  if (v41 == v40)
  {
    v36 = 4;
    v35 = v40;
    goto LABEL_49;
  }
  if (v41)
  {
    v36 = 5;
LABEL_49:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F71650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *CanEnable;
  _QWORD *HasOverlay;
  _QWORD *v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t result;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v116[6];
  unint64_t *v117;
  uint64_t v118[6];
  unint64_t v119;
  unint64_t v120;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  CanEnable = (_QWORD *)gdc::Registry::storage<md::ls::CanEnableTexture>(v2);
  HasOverlay = (_QWORD *)gdc::Registry::storage<md::ls::HasOverlayPatch>(v2);
  v118[0] = (uint64_t)v3;
  v118[1] = (uint64_t)v4;
  v118[2] = (uint64_t)v5;
  v118[3] = (uint64_t)v6;
  v118[4] = (uint64_t)CanEnable;
  v118[5] = (uint64_t)HasOverlay;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v116, v118);
  v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v9 = v4 + 4;
  if (v5[8] - v5[7] < v9[4] - v9[3])
    v9 = v5 + 4;
  if (v6[8] - v6[7] < v9[4] - v9[3])
    v9 = v6 + 4;
  v10 = v117;
  v114 = (unint64_t *)v9[4];
  if (v114 == v117)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
LABEL_120:
    *v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)v116[1];
    v13 = (_QWORD *)v116[2];
    v112 = (_QWORD *)v116[3];
    v113 = v116[0];
    v111 = (_QWORD *)v116[4];
    while (1)
    {
      *v11 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v3[7],
            v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v3[11];
        v26 = v3[10] + 4 * v20;
      }
      else
      {
        v25 = v3[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = v26;
      v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      if (v36 == v35)
        v37 = 0;
      else
        v37 = v36;
      v38 = CanEnable[4];
      if (v17 < (CanEnable[5] - v38) >> 3
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = CanEnable[7],
            v41 = CanEnable[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = CanEnable[11];
        v46 = CanEnable[10] + v40;
      }
      else
      {
        v45 = CanEnable[11];
        v46 = v45;
      }
      if (v46 == v45)
        v46 = 0;
      if ((v47 = v5[4], v17 < (v5[5] - v47) >> 3)
        && (v48 = *(_QWORD *)(v47 + 8 * v17)) != 0
        && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v15) & 0x7F)),
            v51 = v5[7],
            v50 = v5[8],
            v49 < (v50 - v51) >> 3)
        && ((v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == (_DWORD)v16) : (v53 = 0), v53))
      {
        v54 = v5[11];
        v55 = v5[10] + 8 * v49;
      }
      else
      {
        v54 = v5[11];
        v55 = v54;
      }
      v56 = v55 == v54 ? 0 : v55;
      if ((v57 = v6[4], v17 < (v6[5] - v57) >> 3)
        && (v58 = *(_QWORD *)(v57 + 8 * v17)) != 0
        && (v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(v15) & 0x7F)),
            v61 = v6[7],
            v60 = v6[8],
            v59 < (v60 - v61) >> 3)
        && ((v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == (_DWORD)v16) : (v63 = 0), v63))
      {
        v64 = v6[11];
        v65 = v6[10] + 32 * v59;
      }
      else
      {
        v64 = v6[11];
        v65 = v64;
      }
      v66 = v65 == v64 ? 0 : v65;
      if ((v67 = HasOverlay[4], v17 < (HasOverlay[5] - v67) >> 3)
        && (v68 = *(_QWORD *)(v67 + 8 * v17)) != 0
        && (v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            v71 = HasOverlay[7],
            v70 = HasOverlay[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == (_DWORD)v16) : (v73 = 0), v73))
      {
        v74 = HasOverlay[11];
        v75 = HasOverlay[10] + v69;
      }
      else
      {
        v74 = HasOverlay[11];
        v75 = v74;
      }
      v76 = v75 == v74 ? 0 : v75;
      v119 = v76;
      v120 = v46;
      v77 = *(_QWORD *)(a2 + 24);
      if (!v77)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v77 + 48))(v77, v27, v37, &v120, v56, v66, &v119);
      v79 = *(unint64_t **)(v113 + 32);
      v14 = v10 + 1;
      v117 = v10 + 1;
      if (v10 + 1 != v79)
      {
        v80 = v12[4];
        while (1)
        {
          v81 = *((unsigned int *)v14 + 1);
          v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            v83 = *(_QWORD *)(v80 + 8 * v82);
            if (v83)
            {
              v84 = v81 & 0x7F;
              v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              v87 = v12[7];
              v86 = v12[8];
              result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == (_DWORD)v81)
                {
                  v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    v91 = *(_QWORD *)(v90 + 8 * v82);
                    if (v91)
                    {
                      v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      v94 = v13[7];
                      v93 = v13[8];
                      result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == (_DWORD)v81)
                        {
                          v97 = v112[4];
                          if (v82 < (v112[5] - v97) >> 3)
                          {
                            v98 = *(_QWORD *)(v97 + 8 * v82);
                            if (v98)
                            {
                              v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              v101 = v112[7];
                              v100 = v112[8];
                              result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == (_DWORD)v81)
                                {
                                  v104 = v111[4];
                                  if (v82 < (v111[5] - v104) >> 3)
                                  {
                                    v105 = *(_QWORD *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      v108 = v111[7];
                                      v107 = v111[8];
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        v109 = v108 + 8 * v106;
                                        if (*(_DWORD *)(v109 + 4) == (_DWORD)v81 && v109 != v107)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            v14 = v79;
            goto LABEL_10;
          }
        }
        v79 = v14;
LABEL_10:
        v117 = v14;
      }
      v10 = v79;
      if (v114 == v79)
        goto LABEL_120;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[6];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::InView>(v1);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v4 = gdc::Registry::storage<md::ls::ColorDataHandle>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[4] = gdc::Registry::storage<md::ls::CanEnableTexture>(v1);
  v8[5] = gdc::Registry::storage<md::ls::HasOverlayPatch>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288B88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288B88;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls31StyleRouteLineMaskDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F716C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288BD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288BD0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *(_QWORD *)&result = 14;
  *((_OWORD *)v2 + 1) = xmmword_19FFB43F0;
  v2[4] = "md::ls::MeshRenderableID]";
  v2[5] = 24;
  v2[6] = 0x52AE3240ED071F6CLL;
  v2[7] = "md::ls::GradientMaskColorFactors]";
  v2[8] = 32;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278E68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278E68;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42756B8;
  v4[1] = a2;
  v28 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v28 = v9;
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0xD369A4D92C8FFE6CLL)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0xD369A4D92C8FFE6CLL);
    v13 = v14 - 5;
  }
  v16 = v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 160);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 32);
      v24 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 96);
      if (v23 < (*(_QWORD *)(*(_QWORD *)(v21 + 8) + 104) - v24) >> 3)
      {
        if (*(_QWORD *)(*(_QWORD *)(v24 + 8 * v23) + 16))
        {
          v29[0] = &off_1E427C6F0;
          v29[1] = &v28;
          v29[2] = v3;
          v30 = v29;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v29);
          v25 = v30;
          if (v30 == v29)
          {
            v26 = 4;
            v25 = v29;
            goto LABEL_32;
          }
          if (v30)
          {
            v26 = 5;
LABEL_32:
            (*(void (**)(_QWORD *))(*v25 + 8 * v26))(v25);
          }
        }
      }
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F717008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD v87[5];
  _QWORD *v88;
  uint64_t v89;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::GradientMaskColorFactors>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v2);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] >= v7[4] - v7[3])
    v8 = v7;
  else
    v8 = v5 + 4;
  v87[0] = v8;
  v87[1] = v3;
  v87[2] = v4;
  v87[3] = v5;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v88 = v10;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v87))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v88 = v11;
      if (v11 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v87);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v9 == v10)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
LABEL_95:
    *v13 = 0xFFFFFFFF00000000;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v13 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_23;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_23;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_23;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 4 * v20;
      }
      else
      {
LABEL_23:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 36 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 8 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = v56 == v55 ? 0 : v56;
      v89 = v57;
      v58 = *(_QWORD *)(a2 + 24);
      if (!v58)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v58 + 48))(v58, v27, v37, v47, &v89);
      v60 = (_QWORD *)v8[4];
      v14 = v10 + 1;
      v88 = v10 + 1;
      if (v10 + 1 != v60)
      {
        v61 = v3[4];
        v63 = v3[7];
        v62 = v3[8];
        v64 = v4[4];
        result = v4[7];
        v65 = v4[8];
        v66 = v5[4];
        v68 = v5[7];
        v67 = v5[8];
        while (1)
        {
          v69 = *((unsigned int *)v14 + 1);
          v70 = v69 >> 7;
          if (v69 >> 7 < (v3[5] - v61) >> 3)
          {
            v71 = *(_QWORD *)(v61 + 8 * v70);
            if (v71)
            {
              v72 = v69 & 0x7F;
              v73 = *(unsigned __int16 *)(v71 + 2 * v72);
              if ((v62 - v63) >> 3 > v73)
              {
                v74 = v63 + 8 * v73;
                v75 = v74 != v62 && *(_DWORD *)(v74 + 4) == (_DWORD)v69;
                if (v75 && v70 < (v4[5] - v64) >> 3)
                {
                  v77 = *(_QWORD *)(v64 + 8 * v70);
                  if (v77)
                  {
                    v78 = *(unsigned __int16 *)(v77 + 2 * v72);
                    if ((v65 - result) >> 3 > v78)
                    {
                      v79 = result + 8 * v78;
                      v80 = v79 != v65 && *(_DWORD *)(v79 + 4) == (_DWORD)v69;
                      if (v80 && v70 < (v5[5] - v66) >> 3)
                      {
                        v82 = *(_QWORD *)(v66 + 8 * v70);
                        if (v82)
                        {
                          v83 = *(unsigned __int16 *)(v82 + 2 * v72);
                          if ((v67 - v68) >> 3 > v83)
                          {
                            v84 = v68 + 8 * v83;
                            if (*(_DWORD *)(v84 + 4) == (_DWORD)v69 && v84 != v67)
                              break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_14;
          }
        }
        v60 = v14;
LABEL_14:
        v88 = v14;
      }
      v10 = v60;
      if (v9 == v60)
        goto LABEL_95;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::InView>(v1);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v4 = gdc::Registry::storage<md::ls::GradientMaskColorFactors>(v1);
  gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::GradientMaskColorFactors>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x52AE3240ED071F6CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x52AE3240ED071F6CLL;
      if (*(_QWORD *)&v3 <= 0x52AE3240ED071F6CuLL)
        v5 = 0x52AE3240ED071F6CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x52AE3240ED071F6CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x52AE3240ED071F6CLL)
            {
              if (v7[2] == 0x52AE3240ED071F6CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x52AE3240ED071F6CLL)
          {
            if (v7[2] == 0x52AE3240ED071F6CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::GradientMaskColorFactors]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272F18;
  *(_QWORD *)(v11 + 8) = 0x52AE3240ED071F6CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x52AE3240ED071F6CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x52AE3240ED071F6CLL;
  v15[1] = "md::ls::GradientMaskColorFactors]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x52AE3240ED071F6CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F717764(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v29 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = v14 + 36 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  if (*(unsigned __int8 *)(v15 + 16) == *(unsigned __int8 *)(v16 - 20))
  {
    if (*(_BYTE *)(v15 + 16))
    {
      *(_DWORD *)v15 = *(_DWORD *)(v16 - 36);
      *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 - 32);
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 - 28);
      *(_DWORD *)(v15 + 12) = *(_DWORD *)(v16 - 24);
    }
  }
  else if (*(_BYTE *)(v15 + 16))
  {
    *(_BYTE *)(v15 + 16) = 0;
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)(v16 - 36);
    *(_BYTE *)(v15 + 16) = 1;
  }
  v17 = v14 + 36 * v7;
  v20 = *(unsigned __int8 *)(v17 + 32);
  v18 = (_BYTE *)(v17 + 32);
  v19 = v20;
  v21 = v18 - 12;
  if (v20 == *(unsigned __int8 *)(v16 - 4))
  {
    if (v19)
    {
      *v21 = *(_DWORD *)(v16 - 16);
      v22 = v14 + 36 * v7;
      *(_DWORD *)(v22 + 24) = *(_DWORD *)(v16 - 12);
      *(_DWORD *)(v22 + 28) = *(_DWORD *)(v16 - 8);
    }
  }
  else if (v19)
  {
    *v18 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(v16 - 16);
    *((_DWORD *)v18 - 1) = *(_DWORD *)(v16 - 8);
    *(_QWORD *)v21 = v23;
    *v18 = 1;
  }
  a1[11] -= 36;
  v24 = (_QWORD *)a1[28];
  if (!v24)
    return 1;
  v25 = a1[31];
  while (1)
  {
    v31[0] = &v29;
    v31[1] = 1;
    v30 = v25;
    v26 = v24[6];
    if (!v26)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v26 + 48))(v26, &v30, v31);
    v24 = (_QWORD *)*v24;
    if (!v24)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::contains(v27, v28);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286F68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286F68;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F717A48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286FB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286FB0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x78uLL);
  a1[2] = (char *)(v2 + 15);
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43F0;
  v2[4] = "md::ls::MeshRenderableID]";
  v2[5] = 24;
  v2[6] = 0xB6C12FBB402E8E70;
  v2[7] = "md::ls::RenderableMaterialData]";
  v2[8] = 30;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 15)
  {
    *(_QWORD *)v3 = 0x9D7520A01DC69D83;
    v2[10] = "md::ls::HasMaterialRaster]";
    v2[11] = 25;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_38;
  if (0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 15) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_39;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x9D7520A01DC69D83;
  *((_QWORD *)v10 + 1) = "md::ls::HasMaterialRaster]";
  *((_QWORD *)v10 + 2) = 25;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x7A5110AF346E0C7FLL;
    *((_QWORD *)v4 + 1) = "md::ls::MaterialRasterMaxIndex]";
    *((_QWORD *)v4 + 2) = 30;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
    abort();
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = (char *)operator new(24 * v19);
      goto LABEL_31;
    }
LABEL_39:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v20 = 0;
LABEL_31:
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x7A5110AF346E0C7FLL;
  *((_QWORD *)v21 + 1) = "md::ls::MaterialRasterMaxIndex]";
  *((_QWORD *)v21 + 2) = 30;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
}

void sub_19F717DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278058;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278058;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  VKDebugSettings *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (***v25)(_QWORD);
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  int8x8_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t result;
  char v56;
  uint64_t v57;
  float v58;
  __int16 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[24];
  _BYTE *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275688;
  v4[1] = a2;
  v63 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v62 = 0;
  v63 = v9;
  v13 = **v3;
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x4EDAD23DFB014132)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_24;
    }
  }
  if (v14 == v15)
  {
LABEL_24:
    v17 = 0;
  }
  else
  {
    v17 = v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v62 = v17;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v21 = (VKDebugSettings *)objc_claimAutoreleasedReturnValue();
  md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)&v59, v21);

  v22 = *(uint64_t **)**v3;
  if (v22 != *(uint64_t **)(**v3 + 8) && *v22 != 0x22D45F5AAD4BF408)
  {
    v23 = v22 + 5;
    do
    {
      v24 = *v23;
      v23 += 5;
    }
    while (v24 != 0x22D45F5AAD4BF408);
    v22 = v23 - 5;
  }
  v25 = (uint64_t (***)(_QWORD))v22[3];
  v26 = (std::__shared_weak_count *)v22[4];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v30 = *(uint64_t **)((**v25)(v25) + 8);
  v31 = (int8x8_t)v30[1];
  v32 = (uint8x8_t)vcnt_s8(v31);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] >= 2uLL)
  {
    v35 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v31 <= 0x1AF456233693CD46uLL)
      v35 = 0x1AF456233693CD46uLL % *(_QWORD *)&v31;
    v34 = **(_QWORD ***)(*v30 + 8 * v35);
    v33 = *(_QWORD *)&v31 - 1;
    while (v34[1] != 0x1AF456233693CD46 || v34[2] != 0x1AF456233693CD46)
      v34 = (_QWORD *)*v34;
  }
  else
  {
    v33 = *(_QWORD *)&v31 - 1;
    v34 = *(_QWORD **)(*v30 + 8 * ((*(_QWORD *)&v31 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v34 = (_QWORD *)*v34;
      while (v34[1] != 0x1AF456233693CD46);
    }
    while (v34[2] != 0x1AF456233693CD46);
  }
  v58 = fmaxf(*(float *)(*(_QWORD *)(v34[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v34[5] + 32) + 3076), 1.0);
  if (v32.u32[0] > 1uLL)
  {
    v36 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v31 <= 0xE42D19AFCA302E68)
      v36 = 0xE42D19AFCA302E68 % *(_QWORD *)&v31;
  }
  else
  {
    v36 = v33 & 0xE42D19AFCA302E68;
  }
  v37 = *v30;
  v38 = *(_QWORD **)(v37 + 8 * v36);
  if (!v38)
    goto LABEL_69;
  v39 = (_QWORD *)*v38;
  if (!v39)
    goto LABEL_69;
  if (v32.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v39[1];
      if (v40 == 0xE42D19AFCA302E68)
      {
        if (v39[2] == 0xE42D19AFCA302E68)
          goto LABEL_67;
      }
      else if ((v40 & v33) != v36)
      {
        goto LABEL_69;
      }
      v39 = (_QWORD *)*v39;
      if (!v39)
        goto LABEL_69;
    }
  }
  while (1)
  {
    v41 = v39[1];
    if (v41 == 0xE42D19AFCA302E68)
      break;
    if (v41 >= *(_QWORD *)&v31)
      v41 %= *(_QWORD *)&v31;
    if (v41 != v36)
      goto LABEL_69;
LABEL_61:
    v39 = (_QWORD *)*v39;
    if (!v39)
      goto LABEL_69;
  }
  if (v39[2] != 0xE42D19AFCA302E68)
    goto LABEL_61;
LABEL_67:
  v42 = v39[5];
  if (*(_QWORD *)(v42 + 8) == 0xE42D19AFCA302E68)
  {
    v43 = *(_QWORD *)(v42 + 32);
    goto LABEL_70;
  }
LABEL_69:
  v43 = 0;
LABEL_70:
  v57 = v43;
  if (v32.u32[0] > 1uLL)
  {
    v44 = 0xD2404CDD1F9A6950;
    if (*(_QWORD *)&v31 <= 0xD2404CDD1F9A6950)
      v44 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v31;
  }
  else
  {
    v44 = v33 & 0xD2404CDD1F9A6950;
  }
  v45 = *(_QWORD **)(v37 + 8 * v44);
  if (!v45)
    goto LABEL_99;
  v46 = (_QWORD *)*v45;
  if (!v46)
    goto LABEL_99;
  if (v32.u32[0] < 2uLL)
  {
    while (1)
    {
      v47 = v46[1];
      if (v47 == 0xD2404CDD1F9A6950)
      {
        if (v46[2] == 0xD2404CDD1F9A6950)
          goto LABEL_90;
      }
      else if ((v47 & v33) != v44)
      {
        goto LABEL_99;
      }
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_99;
    }
  }
  while (2)
  {
    v48 = v46[1];
    if (v48 != 0xD2404CDD1F9A6950)
    {
      if (v48 >= *(_QWORD *)&v31)
        v48 %= *(_QWORD *)&v31;
      if (v48 != v44)
        goto LABEL_99;
      goto LABEL_84;
    }
    if (v46[2] != 0xD2404CDD1F9A6950)
    {
LABEL_84:
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_99;
      continue;
    }
    break;
  }
LABEL_90:
  v49 = v46[5];
  if (*(_QWORD *)(v49 + 8) == 0xD2404CDD1F9A6950)
  {
    v50 = *(_QWORD *)(v49 + 32);
    if (v50)
    {
      v51 = v60 | v61;
      if (v51)
        LOBYTE(v51) = v59 == 0;
      v56 = v51;
      v52 = operator new(0x40uLL);
      *v52 = &off_1E427C198;
      v52[1] = &v63;
      v52[2] = &v62;
      v52[3] = v3;
      v52[4] = v50;
      v52[5] = &v58;
      v52[6] = &v56;
      v52[7] = &v57;
      v65 = v52;
      (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v64);
      v53 = v65;
      if (v65 == v64)
      {
        v54 = 4;
        v53 = v64;
LABEL_98:
        (*(void (**)(void))(*v53 + 8 * v54))();
      }
      else if (v65)
      {
        v54 = 5;
        goto LABEL_98;
      }
    }
  }
LABEL_99:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F718438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *HasMaterial;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v116[6];
  unint64_t *v117;
  uint64_t v118[6];
  uint64_t v119;
  uint64_t v120;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  HasMaterial = (_QWORD *)gdc::Registry::storage<md::ls::HasMaterialRaster>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  v118[0] = (uint64_t)v3;
  v118[1] = (uint64_t)v4;
  v118[2] = (uint64_t)v5;
  v118[3] = (uint64_t)HasMaterial;
  v118[4] = (uint64_t)v7;
  v118[5] = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::InView const,md::ls::MeshRenderableID const,md::ls::RenderableMaterialData const,md::ls::ColorRampDataHandle>,gdc::Any<md::ls::HasMaterialRaster const,md::ls::MaterialRasterMaxIndex const>,gdc::None<>>::begin(v116, v118);
  v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v9 = v4 + 4;
  if (v5[8] - v5[7] < v9[4] - v9[3])
    v9 = v5 + 4;
  if (v8[8] - v8[7] < v9[4] - v9[3])
    v9 = v8 + 4;
  v10 = v117;
  v114 = (unint64_t *)v9[4];
  if (v114 == v117)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
LABEL_120:
    *v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)v116[1];
    v13 = (_QWORD *)v116[2];
    v112 = (_QWORD *)v116[3];
    v113 = v116[0];
    v111 = (_QWORD *)v116[4];
    while (1)
    {
      *v11 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v3[7],
            v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v3[11];
        v26 = v3[10] + 4 * v20;
      }
      else
      {
        v25 = v3[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = v26;
      v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      if (v36 == v35)
        v37 = 0;
      else
        v37 = v36;
      v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 32 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      if (v46 == v45)
        v47 = 0;
      else
        v47 = v46;
      v48 = v8[4];
      if (v17 < (v8[5] - v48) >> 3
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v8[7],
            v51 = v8[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v8[11];
        v56 = v8[10] + 8 * v50;
      }
      else
      {
        v55 = v8[11];
        v56 = v55;
      }
      if (v56 == v55)
        v57 = 0;
      else
        v57 = v56;
      v58 = HasMaterial[4];
      if (v17 < (HasMaterial[5] - v58) >> 3
        && (v59 = *(_QWORD *)(v58 + 8 * v17)) != 0
        && (v60 = *(unsigned __int16 *)(v59 + 2 * (HIDWORD(v15) & 0x7F)),
            v62 = HasMaterial[7],
            v61 = HasMaterial[8],
            v60 < (v61 - v62) >> 3)
        && ((v63 = v62 + 8 * v60, v63 != v61) ? (v64 = *(_DWORD *)(v63 + 4) == (_DWORD)v16) : (v64 = 0), v64))
      {
        v65 = HasMaterial[11];
        v66 = HasMaterial[10] + 8 * v60;
      }
      else
      {
        v65 = HasMaterial[11];
        v66 = v65;
      }
      if (v66 == v65)
        v66 = 0;
      if ((v67 = v7[4], v17 < (v7[5] - v67) >> 3)
        && (v68 = *(_QWORD *)(v67 + 8 * v17)) != 0
        && (v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            v71 = v7[7],
            v70 = v7[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == (_DWORD)v16) : (v73 = 0), v73))
      {
        v74 = v7[11];
        v75 = v7[10] + 2 * v69;
      }
      else
      {
        v74 = v7[11];
        v75 = v74;
      }
      v76 = v75 == v74 ? 0 : v75;
      v119 = v76;
      v120 = v66;
      v77 = *(_QWORD *)(a2 + 24);
      if (!v77)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, v27, v37, v47, v57, &v120, &v119);
      v79 = *(unint64_t **)(v113 + 32);
      v14 = v10 + 1;
      v117 = v10 + 1;
      if (v10 + 1 != v79)
      {
        v80 = v12[4];
        while (1)
        {
          v81 = *((unsigned int *)v14 + 1);
          v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            v83 = *(_QWORD *)(v80 + 8 * v82);
            if (v83)
            {
              v84 = v81 & 0x7F;
              v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              v87 = v12[7];
              v86 = v12[8];
              result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == (_DWORD)v81)
                {
                  v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    v91 = *(_QWORD *)(v90 + 8 * v82);
                    if (v91)
                    {
                      v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      v94 = v13[7];
                      v93 = v13[8];
                      result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == (_DWORD)v81)
                        {
                          v97 = v112[4];
                          if (v82 < (v112[5] - v97) >> 3)
                          {
                            v98 = *(_QWORD *)(v97 + 8 * v82);
                            if (v98)
                            {
                              v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              v101 = v112[7];
                              v100 = v112[8];
                              result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == (_DWORD)v81)
                                {
                                  v104 = v111[4];
                                  if (v82 < (v111[5] - v104) >> 3)
                                  {
                                    v105 = *(_QWORD *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      v108 = v111[7];
                                      v107 = v111[8];
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        v109 = v108 + 8 * v106;
                                        if (*(_DWORD *)(v109 + 4) == (_DWORD)v81 && v109 != v107)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            v14 = v79;
            goto LABEL_10;
          }
        }
        v79 = v14;
LABEL_10:
        v117 = v14;
      }
      v10 = v79;
      if (v114 == v79)
        goto LABEL_120;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t HasMaterial;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[6];
  uint64_t v11[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::InView>(v1);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v4 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  HasMaterial = gdc::Registry::storage<md::ls::HasMaterialRaster>(v1);
  v6 = gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(v1);
  v7 = gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = HasMaterial;
  v10[4] = v6;
  v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::InView const,md::ls::MeshRenderableID const,md::ls::RenderableMaterialData const,md::ls::ColorRampDataHandle>,gdc::Any<md::ls::HasMaterialRaster const,md::ls::MaterialRasterMaxIndex const>,gdc::None<>>::begin(v11, v10);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v8 = v2;
  else
    v8 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v4;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  return *(_QWORD *)(v8 + 64) == v11[6];
}

uint64_t gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7A5110AF346E0C7FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7A5110AF346E0C7FLL;
      if (*(_QWORD *)&v3 <= 0x7A5110AF346E0C7FuLL)
        v5 = 0x7A5110AF346E0C7FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7A5110AF346E0C7FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7A5110AF346E0C7FLL)
            {
              if (v7[2] == 0x7A5110AF346E0C7FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7A5110AF346E0C7FLL)
          {
            if (v7[2] == 0x7A5110AF346E0C7FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MaterialRasterMaxIndex]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272A08;
  *(_QWORD *)(v11 + 8) = 0x7A5110AF346E0C7FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7A5110AF346E0C7FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7A5110AF346E0C7FLL;
  v15[1] = "md::ls::MaterialRasterMaxIndex]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7A5110AF346E0C7FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F718CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::InView const,md::ls::MeshRenderableID const,md::ls::RenderableMaterialData const,md::ls::ColorRampDataHandle>,gdc::Any<md::ls::HasMaterialRaster const,md::ls::MaterialRasterMaxIndex const>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[5];
  v7 = *a2 + 32;
  if (!*a2)
    v7 = 0;
  v8 = v4 + 32;
  if (!v4)
    v8 = 0;
  v9 = v5 + 32;
  if (!v5)
    v9 = 0;
  v10 = v6 + 32;
  if (!v6)
    v10 = 0;
  result = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24) < (unint64_t)(*(_QWORD *)(v7 + 32) - result))
    v7 = v8;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v9;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v10;
  *a1 = v7;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  v13 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288AF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288AF8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288B40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288B40;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *(_QWORD *)&result = 14;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4410;
  v2[4] = "md::ls::RenderableMaterialData]";
  v2[5] = 30;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278E20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278E20;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (***v24)(_QWORD);
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t result;
  float v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42756E8;
  v4[1] = a2;
  v39 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v38 = 0;
  v39 = v9;
  v13 = **v3;
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x4EDAD23DFB014132)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_24;
    }
  }
  if (v14 == v15)
  {
LABEL_24:
    v17 = 0;
  }
  else
  {
    v17 = v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v38 = v17;
  v21 = *(uint64_t **)**v3;
  if (v21 != *(uint64_t **)(**v3 + 8) && *v21 != 0x22D45F5AAD4BF408)
  {
    v22 = v21 + 5;
    do
    {
      v23 = *v22;
      v22 += 5;
    }
    while (v23 != 0x22D45F5AAD4BF408);
    v21 = v22 - 5;
  }
  v24 = (uint64_t (***)(_QWORD))v21[3];
  v25 = (std::__shared_weak_count *)v21[4];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v29 = *(_QWORD **)((**v24)(v24) + 8);
  v30 = v29[1];
  if ((v30 & (v30 - 1)) != 0)
  {
    v32 = 0x1AF456233693CD46;
    if (v30 <= 0x1AF456233693CD46)
      v32 = 0x1AF456233693CD46 % v30;
    v31 = *(_QWORD **)(*v29 + 8 * v32);
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0x1AF456233693CD46);
    }
    while (v31[2] != 0x1AF456233693CD46);
  }
  else
  {
    v31 = *(_QWORD **)(*v29 + 8 * ((v30 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0x1AF456233693CD46);
    }
    while (v31[2] != 0x1AF456233693CD46);
  }
  v37 = fmaxf(*(float *)(*(_QWORD *)(v31[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v31[5] + 32) + 3076), 1.0);
  v33 = operator new(0x28uLL);
  *v33 = &off_1E427C6A8;
  v33[1] = &v38;
  v33[2] = &v37;
  v33[3] = &v39;
  v33[4] = v3;
  v41 = v33;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v40);
  v34 = v41;
  if (v41 == v40)
  {
    v35 = 4;
    v34 = v40;
    goto LABEL_50;
  }
  if (v41)
  {
    v35 = 5;
LABEL_50:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F719490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::RenderableMaterialData const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::RenderableMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 4 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 32 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::RenderableMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288288;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288288;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42882D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42882D0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *(_QWORD *)&result = 14;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4420;
  v2[4] = "md::ls::MercatorBounds]";
  v2[5] = 22;
  v2[6] = 0xB6C12FBB402E8E70;
  v2[7] = "md::ls::RenderableMaterialData]";
  v2[8] = 30;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42789E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42789E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  uint64_t result;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t (**v61)();
  __int128 v62;
  uint64_t (***v63)();
  uint64_t (**v64)();
  __int128 v65;
  uint64_t (***v66)();
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::InView>(v3);
  v5 = gdc::Registry::storage<md::ls::MercatorBounds>(v3);
  v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v7 = v4;
  else
    v7 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v6;
  v53 = v7 + 32;
  v54 = (_QWORD *)v4;
  v55 = (_QWORD *)v5;
  v56 = (_QWORD *)v6;
  v8 = *(_QWORD **)(v7 + 56);
  v9 = *(_QWORD **)(v7 + 64);
  v57 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v53))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v57 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v53);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v13 = (uint64_t *)result;
  if (v9 != v8)
  {
    while (1)
    {
      *v13 = *v8;
      v15 = **(_QWORD **)(a1 + 8);
      v16 = *(_QWORD **)v15;
      v17 = *(_QWORD **)(v15 + 8);
      if (v16 != v17)
      {
        while (*v16 != 0x41D4E9297E100630)
        {
          v16 += 5;
          if (v16 == v17)
            goto LABEL_27;
        }
      }
      if (v16 == v17)
      {
LABEL_27:
        v18 = 0;
      }
      else
      {
        v18 = v16[3];
        v19 = (std::__shared_weak_count *)v16[4];
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      v59 = 0;
      v58 = 1065353216;
      v23 = std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>((_QWORD *)(v18 + 6784), (float *)&v58);
      if (!v23 || (v24 = v23[4]) == 0)
      {
        v24 = md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::ElevatedStroke,md::ElevatedStrokeCacheKey>(v18, (float *)&v58);
        v25 = (_QWORD *)md::VKMRenderResourcesStore::pop<ggl::DaVinci::ElevatedStroke>(v18, v24);
        v26 = v25[1];
        v27 = v25[9];
        *(_DWORD *)v27 = 1065353216;
        *(_QWORD *)(v27 + 8) = 0;
        if (v25[8] > v26)
          v26 = v25[8];
        v25[7] = 0;
        v25[8] = v26;
      }
      v28 = *(_QWORD **)(a1 + 8);
      v29 = *v13;
      v61 = &off_1E4281A30;
      *(_QWORD *)&v62 = v24;
      *((_QWORD *)&v62 + 1) = v29;
      v63 = &v61;
      v66 = &v64;
      v64 = &off_1E4281A30;
      v65 = v62;
      v67 = 0;
      ecs2::Runtime::queueCommand(v28, (uint64_t)&v64);
      if (v67 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v67])(&v60, &v64);
      v67 = -1;
      result = (uint64_t)v63;
      if (v63 == &v61)
        break;
      if (v63)
      {
        v30 = 5;
LABEL_39:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v30))();
      }
      v8 = *(_QWORD **)(v53 + 32);
      v14 = v57 + 1;
      v57 = v14;
      if (v14 != v8)
      {
        v31 = v54[4];
        while (1)
        {
          v32 = *((unsigned int *)v14 + 1);
          v33 = v32 >> 7;
          if (v32 >> 7 < (v54[5] - v31) >> 3)
          {
            v34 = *(_QWORD *)(v31 + 8 * v33);
            if (v34)
            {
              v35 = v32 & 0x7F;
              v36 = *(unsigned __int16 *)(v34 + 2 * v35);
              v37 = v54[7];
              result = v54[8];
              if (v36 < (result - v37) >> 3)
              {
                v38 = v37 + 8 * v36;
                if (v38 != result && *(_DWORD *)(v38 + 4) == (_DWORD)v32)
                {
                  v40 = v55[4];
                  result = v55[5] - v40;
                  if (v33 < result >> 3)
                  {
                    v41 = *(_QWORD *)(v40 + 8 * v33);
                    if (v41)
                    {
                      v42 = *(unsigned __int16 *)(v41 + 2 * v35);
                      v43 = v55[7];
                      result = v55[8];
                      if (v42 < (result - v43) >> 3)
                      {
                        v44 = v43 + 8 * v42;
                        if (v44 != result && *(_DWORD *)(v44 + 4) == (_DWORD)v32)
                        {
                          v46 = v56[4];
                          result = v56[5] - v46;
                          if (v33 < result >> 3)
                          {
                            v47 = *(_QWORD *)(v46 + 8 * v33);
                            if (v47)
                            {
                              v48 = *(unsigned __int16 *)(v47 + 2 * v35);
                              v50 = v56[7];
                              v49 = v56[8];
                              result = v49 - v50;
                              if (v48 < (v49 - v50) >> 3)
                              {
                                v51 = v50 + 8 * v48;
                                if (*(_DWORD *)(v51 + 4) == (_DWORD)v32 && v51 != v49)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v8)
          {
            v14 = v8;
            goto LABEL_14;
          }
        }
        v8 = v14;
LABEL_14:
        v57 = v14;
      }
      if (v9 == v8)
        goto LABEL_67;
    }
    result = (uint64_t)&v61;
    v30 = 4;
    goto LABEL_39;
  }
LABEL_67:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::MercatorBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8D1BF84D316565E9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8D1BF84D316565E9;
      if (*(_QWORD *)&v3 <= 0x8D1BF84D316565E9)
        v5 = 0x8D1BF84D316565E9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8D1BF84D316565E9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8D1BF84D316565E9)
            {
              if (v7[2] == 0x8D1BF84D316565E9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8D1BF84D316565E9)
          {
            if (v7[2] == 0x8D1BF84D316565E9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MercatorBounds]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271748;
  *(_QWORD *)(v11 + 8) = 0x8D1BF84D316565E9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8D1BF84D316565E9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8D1BF84D316565E9;
  v15[1] = "md::ls::MercatorBounds]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8D1BF84D316565E9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71A044(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_QWORD *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42871A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42871A8;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xDC66BF6D06F6D0BALL;
  result[1] = "md::ls::RasterOverlayConstantDataHandle]";
  result[2] = 39;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42871F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42871F0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x8D1BF84D316565E9;
  v2[1] = "md::ls::MercatorBounds]";
  *(_QWORD *)&result = 22;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4430;
  v2[4] = "md::ls::InView]";
  v2[5] = 14;
  v2[6] = 0xB6C12FBB402E8E70;
  v2[7] = "md::ls::RenderableMaterialData]";
  v2[8] = 30;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278178;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278178;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 isValid;
  unint64_t result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MercatorBounds>(v3);
  v5 = gdc::Registry::storage<md::ls::InView>(v3);
  v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  v7 = gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v3);
  v8 = (_QWORD *)v7;
  v9 = v7 + 32;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v9 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = v5 + 32;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = v6 + 32;
  v59 = v9;
  v60 = (_QWORD *)v7;
  v61 = (_QWORD *)v4;
  v62 = (_QWORD *)v5;
  v10 = *(_QWORD **)(v9 + 24);
  v11 = *(_QWORD **)(v9 + 32);
  v63 = (_QWORD *)v6;
  v64 = v10;
  if (v11 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v59))
  {
    v12 = v10 + 1;
    do
    {
      v10 = v12;
      v64 = v12;
      if (v12 == v11)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v59);
      v12 = v10 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v15 = (_QWORD *)result;
  while (v11 != v10)
  {
    *v15 = *v10;
    v17 = *v10;
    v18 = *v10 >> 39;
    v19 = v8[4];
    if (v18 < (v8[5] - v19) >> 3
      && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
      && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v17) & 0x7F)), v23 = v8[7], v22 = v8[8], v21 < (v22 - v23) >> 3)
      && ((v24 = HIDWORD(v17), v25 = v23 + 8 * v21, v25 != v22)
        ? (v26 = *(_DWORD *)(v25 + 4) == (_DWORD)v24)
        : (v26 = 0),
          v26))
    {
      v27 = v8[11];
      v28 = v8[10] + 32 * v21;
    }
    else
    {
      v27 = v8[11];
      v28 = v27;
    }
    if (v28 == v27)
      v29 = 0;
    else
      v29 = v28;
    v30 = **(_QWORD **)(a1 + 8);
    v31 = *(_QWORD **)v30;
    v32 = *(_QWORD **)(v30 + 8);
    if (v31 != v32)
    {
      while (*v31 != 0x41D4E9297E100630)
      {
        v31 += 5;
        if (v31 == v32)
          goto LABEL_39;
      }
    }
    if (v31 == v32)
    {
LABEL_39:
      v33 = 0;
    }
    else
    {
      v33 = v31[3];
      v34 = (std::__shared_weak_count *)v31[4];
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    v66 = 0;
    v65 = 1065353216;
    result = (unint64_t)std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>((_QWORD *)(v33 + 6784), (float *)&v65);
    if (!result || (v38 = *(_QWORD *)(result + 32)) == 0)
    {
      v38 = md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::ElevatedStroke,md::ElevatedStrokeCacheKey>(v33, (float *)&v65);
      result = md::VKMRenderResourcesStore::pop<ggl::DaVinci::ElevatedStroke>(v33, v38);
      v39 = *(_QWORD *)(result + 8);
      v40 = *(_QWORD *)(result + 72);
      *(_DWORD *)v40 = 1065353216;
      *(_QWORD *)(v40 + 8) = 0;
      if (*(_QWORD *)(result + 64) > v39)
        v39 = *(_QWORD *)(result + 64);
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 64) = v39;
    }
    *(_QWORD *)(v29 + 24) = v38;
    v10 = *(_QWORD **)(v59 + 32);
    v16 = v64 + 1;
    v64 = v16;
    if (v16 != v10)
    {
      v41 = v60[4];
      while (1)
      {
        v42 = *((unsigned int *)v16 + 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < (v60[5] - v41) >> 3)
        {
          result = *(_QWORD *)(v41 + 8 * v43);
          if (result)
          {
            v44 = v42 & 0x7F;
            result = *(unsigned __int16 *)(result + 2 * v44);
            v46 = v60[7];
            v45 = v60[8];
            if (result < (v45 - v46) >> 3)
            {
              result = v46 + 8 * result;
              if (result != v45 && *(_DWORD *)(result + 4) == (_DWORD)v42)
              {
                result = v61[4];
                if (v43 < (uint64_t)(v61[5] - result) >> 3)
                {
                  result = *(_QWORD *)(result + 8 * v43);
                  if (result)
                  {
                    result = *(unsigned __int16 *)(result + 2 * v44);
                    v49 = v61[7];
                    v48 = v61[8];
                    if (result < (v48 - v49) >> 3)
                    {
                      result = v49 + 8 * result;
                      if (result != v48 && *(_DWORD *)(result + 4) == (_DWORD)v42)
                      {
                        result = v62[4];
                        if (v43 < (uint64_t)(v62[5] - result) >> 3)
                        {
                          result = *(_QWORD *)(result + 8 * v43);
                          if (result)
                          {
                            result = *(unsigned __int16 *)(result + 2 * v44);
                            v52 = v62[7];
                            v51 = v62[8];
                            if (result < (v51 - v52) >> 3)
                            {
                              result = v52 + 8 * result;
                              if (result != v51 && *(_DWORD *)(result + 4) == (_DWORD)v42)
                              {
                                result = v63[4];
                                if (v43 < (uint64_t)(v63[5] - result) >> 3)
                                {
                                  v54 = *(_QWORD *)(result + 8 * v43);
                                  if (v54)
                                  {
                                    v55 = *(unsigned __int16 *)(v54 + 2 * v44);
                                    result = v63[7];
                                    v56 = v63[8];
                                    if (v55 < (uint64_t)(v56 - result) >> 3)
                                    {
                                      v57 = result + 8 * v55;
                                      result = *(unsigned int *)(v57 + 4);
                                      if ((_DWORD)result == (_DWORD)v42 && v57 != v56)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v16 == v10)
        {
          v16 = v10;
          goto LABEL_15;
        }
      }
      v10 = v16;
LABEL_15:
      v64 = v16;
    }
  }
  *v15 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287238;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287238;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x1BB343378E1EE5BLL;
  result[1] = "md::ls::StyleDataKeyHandle]";
  result[2] = 26;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287280;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287280;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4440;
  v2[4] = "md::ls::OrientedBox]";
  v2[5] = 19;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42781C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42781C0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  uint8x8_t v36;
  _QWORD *v37;
  int8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  md::CameraContext *v46;
  _BOOL4 isSplinedEnabled;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v59;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t result;
  float v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  char v72;
  uint64_t v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274DB8;
  v4[1] = a2;
  v73 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v73 = v9;
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = (**v16)(v16);
  v22 = *(_QWORD **)(v21 + 8);
  v23 = (int8x8_t)v22[1];
  if (!*(_QWORD *)&v23)
    goto LABEL_91;
  v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    v25 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v23 <= 0x41E8D6E445F4145uLL)
      v25 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v23;
  }
  else
  {
    v25 = (*(_QWORD *)&v23 - 1) & 0x41E8D6E445F4145;
  }
  v26 = *(_QWORD **)(*v22 + 8 * v25);
  if (!v26)
    goto LABEL_91;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_91;
  if (v24.u32[0] < 2uLL)
  {
    v28 = *(_QWORD *)&v23 - 1;
    while (1)
    {
      v30 = v27[1];
      if (v30 == 0x41E8D6E445F4145)
      {
        if (v27[2] == 0x41E8D6E445F4145)
          goto LABEL_45;
      }
      else if ((v30 & v28) != v25)
      {
        goto LABEL_91;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_91;
    }
  }
  while (1)
  {
    v29 = v27[1];
    if (v29 == 0x41E8D6E445F4145)
      break;
    if (v29 >= *(_QWORD *)&v23)
      v29 %= *(_QWORD *)&v23;
    if (v29 != v25)
      goto LABEL_91;
LABEL_34:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_91;
  }
  if (v27[2] != 0x41E8D6E445F4145)
    goto LABEL_34;
LABEL_45:
  v31 = v27[5];
  if (*(_QWORD *)(v31 + 8) != 0x41E8D6E445F4145)
    goto LABEL_91;
  v32 = *(_QWORD *)(v31 + 32);
  if (!v32)
    goto LABEL_91;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v33, "daVinciGlobeLighting"))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "daVinciAdvancedLightingEnabled");

  }
  else
  {
    v35 = 0;
  }

  v72 = v35;
  v37 = *(_QWORD **)(v21 + 8);
  v38 = (int8x8_t)v37[1];
  if (!*(_QWORD *)&v38)
    goto LABEL_73;
  v36 = (uint8x8_t)vcnt_s8(v38);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    v39 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v38 <= 0x1AF456233693CD46uLL)
      v39 = 0x1AF456233693CD46uLL % *(_QWORD *)&v38;
  }
  else
  {
    v39 = (*(_QWORD *)&v38 - 1) & 0x1AF456233693CD46;
  }
  v40 = *(_QWORD **)(*v37 + 8 * v39);
  if (!v40)
    goto LABEL_73;
  v41 = (_QWORD *)*v40;
  if (!v41)
    goto LABEL_73;
  if (v36.u32[0] < 2uLL)
  {
    v42 = *(_QWORD *)&v38 - 1;
    while (1)
    {
      v44 = v41[1];
      if (v44 == 0x1AF456233693CD46)
      {
        if (v41[2] == 0x1AF456233693CD46)
          goto LABEL_71;
      }
      else if ((v44 & v42) != v39)
      {
        goto LABEL_73;
      }
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_73;
    }
  }
  while (2)
  {
    v43 = v41[1];
    if (v43 != 0x1AF456233693CD46)
    {
      if (v43 >= *(_QWORD *)&v38)
        v43 %= *(_QWORD *)&v38;
      if (v43 != v39)
        goto LABEL_73;
      goto LABEL_60;
    }
    if (v41[2] != 0x1AF456233693CD46)
    {
LABEL_60:
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_73;
      continue;
    }
    break;
  }
LABEL_71:
  v45 = v41[5];
  if (*(_QWORD *)(v45 + 8) == 0x1AF456233693CD46)
  {
    v46 = *(md::CameraContext **)(v45 + 32);
    goto LABEL_74;
  }
LABEL_73:
  v46 = 0;
LABEL_74:
  isSplinedEnabled = md::CameraContext::isSplinedEnabled(v46, *(float *)v36.i32);
  v71 = isSplinedEnabled;
  v48 = *(_QWORD **)(v21 + 8);
  v49 = v48[1];
  if ((v49 & (v49 - 1)) != 0)
  {
    v51 = 0x8BD499FBD96FBB9ELL;
    if (v49 <= 0x8BD499FBD96FBB9ELL)
      v51 = 0x8BD499FBD96FBB9ELL % v49;
    v50 = *(_QWORD **)(*v48 + 8 * v51);
    do
    {
      do
        v50 = (_QWORD *)*v50;
      while (v50[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v50[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v50 = *(_QWORD **)(*v48 + 8 * ((v49 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v50 = (_QWORD *)*v50;
      while (v50[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v50[2] != 0x8BD499FBD96FBB9ELL);
  }
  _Q0 = *(_OWORD *)(v32 + 160);
  _Q1 = *(_OWORD *)(v32 + 176);
  _D2 = *(_QWORD *)(v32 + 168);
  __asm
  {
    FCVT            H2, D2
    FCVT            H0, D0
  }
  WORD1(_D0) = _D2;
  v59 = *(_QWORD *)(v50[5] + 32);
  __asm { FCVT            H2, D1 }
  WORD2(_D0) = _D2;
  *(_QWORD *)&_Q1 = *(_QWORD *)(v32 + 184);
  __asm { FCVT            H1, D1 }
  HIWORD(_D0) = _Q1;
  _Q2 = *(_OWORD *)(v32 + 128);
  _Q1 = *(_OWORD *)(v32 + 144);
  _D3 = *(_QWORD *)(v32 + 136);
  __asm
  {
    FCVT            H3, D3
    FCVT            H2, D2
  }
  WORD1(_Q2) = _D3;
  __asm { FCVT            H3, D1 }
  WORD2(_Q2) = _D3;
  *(_QWORD *)&_Q1 = *(_QWORD *)(v32 + 152);
  __asm { FCVT            H1, D1 }
  WORD3(_Q2) = _Q1;
  v69 = _Q2;
  v70 = _D0;
  v68 = 1.0 / *(float *)(v59 + 12);
  if ((isSplinedEnabled & v35) == 1)
    v69 = _D0;
  v64 = operator new(0x38uLL);
  *v64 = &off_1E427C270;
  v64[1] = &v73;
  v64[2] = &v70;
  v64[3] = &v68;
  v64[4] = &v71;
  v64[5] = &v72;
  v64[6] = &v69;
  v75 = v64;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v74);
  v65 = v75;
  if (v75 == v74)
  {
    v66 = 4;
    v65 = v74;
LABEL_90:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  else if (v75)
  {
    v66 = 5;
    goto LABEL_90;
  }
LABEL_91:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F71AFEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65[4];
  unint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::OrientedBox>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v3);
  v7 = v6;
  v8 = v6 + 4;
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)(v6 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v67, v9, v4, v6, *(_QWORD *)(v9 + 24));
  if (v7[8] - v7[7] >= v4[8] - v4[7])
    v10 = (uint64_t)(v4 + 4);
  else
    v10 = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v65, v10, v4, v7, *(_QWORD *)(v10 + 32));
  if (v66 == v70)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)result;
LABEL_67:
    *v12 = 0xFFFFFFFF00000000;
  }
  else
  {
    v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v12 = *v11;
      v13 = *v11;
      v14 = HIDWORD(*v11);
      v15 = v13 >> 39;
      v16 = v4[4];
      if (v13 >> 39 < (v4[5] - v16) >> 3
        && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
        && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)),
            v20 = v4[7],
            v19 = v4[8],
            v18 < (v19 - v20) >> 3)
        && ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v14) : (v22 = 0), v22))
      {
        v23 = v4[11];
        v24 = v4[10] + 8 * v18;
      }
      else
      {
        v23 = v4[11];
        v24 = v23;
      }
      if (v24 == v23)
        v25 = 0;
      else
        v25 = v24;
      v26 = v5[4];
      if (v15 < (v5[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v15)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F)),
            v30 = v5[7],
            v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v14) : (v32 = 0), v32))
      {
        v33 = v5[11];
        v34 = v5[10] + 104 * v28;
      }
      else
      {
        v33 = v5[11];
        v34 = v33;
      }
      if (v34 == v33)
        v34 = 0;
      if ((v35 = v7[4], v15 < (v7[5] - v35) >> 3)
        && (v36 = *(_QWORD *)(v35 + 8 * v15)) != 0
        && (v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(v13) & 0x7F)),
            v39 = v7[7],
            v38 = v7[8],
            v37 < (v38 - v39) >> 3)
        && ((v40 = v39 + 8 * v37, v40 != v38) ? (v41 = *(_DWORD *)(v40 + 4) == (_DWORD)v14) : (v41 = 0), v41))
      {
        v42 = v7[11];
        v43 = v7[10] + 8 * v37;
      }
      else
      {
        v42 = v7[11];
        v43 = v42;
      }
      v71 = v34;
      v44 = *(_QWORD *)(a2 + 24);
      if (!v44)
        break;
      if (v43 == v42)
        v45 = 0;
      else
        v45 = v43;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v44 + 48))(v44, v25, &v71, v45);
      v47 = v70;
      v11 = *(unint64_t **)(v67 + 32);
      if (++v70 != v11)
      {
        v48 = v68[4];
        v49 = (v68[5] - v48) >> 3;
        v50 = v47 + 2;
        while (1)
        {
          v51 = *((unsigned int *)v50 - 1);
          v52 = v51 >> 7;
          if (v51 >> 7 < v49)
          {
            v53 = *(_QWORD *)(v48 + 8 * v52);
            if (v53)
            {
              v54 = *(unsigned __int16 *)(v53 + 2 * (v51 & 0x7F));
              v55 = v68[7];
              result = v68[8];
              if (v54 < (result - v55) >> 3)
              {
                v56 = v55 + 8 * v54;
                if (v56 != result && *(_DWORD *)(v56 + 4) == (_DWORD)v51)
                {
                  v58 = v69[4];
                  result = v69[5] - v58;
                  if (v52 < result >> 3)
                  {
                    v59 = *(_QWORD *)(v58 + 8 * v52);
                    if (v59)
                    {
                      v60 = *(unsigned __int16 *)(v59 + 2 * (v51 & 0x7F));
                      v62 = v69[7];
                      v61 = v69[8];
                      result = v61 - v62;
                      if (v60 < (v61 - v62) >> 3)
                      {
                        v63 = v62 + 8 * v60;
                        if (v63 != v61 && *(_DWORD *)(v63 + 4) == (_DWORD)v51)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v70 = v50;
          v22 = v50++ == v11;
          if (v22)
            goto LABEL_9;
        }
        v11 = v50 - 1;
      }
LABEL_9:
      if (v66 == v11)
        goto LABEL_67;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  gdc::Registry::storage<md::ls::OrientedBox>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::OrientedBox>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEA668AD3AE8488A2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEA668AD3AE8488A2;
      if (*(_QWORD *)&v3 <= 0xEA668AD3AE8488A2)
        v5 = 0xEA668AD3AE8488A2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEA668AD3AE8488A2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEA668AD3AE8488A2)
            {
              if (v7[2] == 0xEA668AD3AE8488A2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEA668AD3AE8488A2)
          {
            if (v7[2] == 0xEA668AD3AE8488A2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::OrientedBox]";
  *(_QWORD *)(v11 + 24) = 19;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271178;
  *(_QWORD *)(v11 + 8) = 0xEA668AD3AE8488A2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEA668AD3AE8488A2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEA668AD3AE8488A2;
  v15[1] = "md::ls::OrientedBox]";
  v15[2] = 19;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEA668AD3AE8488A2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71B670(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::OrientedBox>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::OrientedBox>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 104 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v14[3] = *(v15 - 10);
  v14[4] = *(v15 - 9);
  v14[5] = *(v15 - 8);
  v14[6] = *(v15 - 7);
  v16 = *(v15 - 13);
  v15 -= 13;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::OrientedBox>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::OrientedBox>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42844A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42844A8;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xF2296D6406C155CBLL;
  result[1] = "md::ls::TileShadowConstantDataHandle]";
  result[2] = 36;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42844F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42844F0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F71B9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0xBCC33905201D8160;
    *((_QWORD *)v11 + 1) = "md::ls::TileMatrix]";
    *((_QWORD *)v11 + 2) = 18;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0xBCC33905201D8160;
    *((_QWORD *)v3 + 1) = "md::ls::TileMatrix]";
    *((_QWORD *)v3 + 2) = 18;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276AF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276AF8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  md::PassList *v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  _OWORD v51[8];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274AB8;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (**v8)(v8);
  v52 = 0;
  v14 = **(_QWORD **)(a1 + 8);
  v15 = *(_QWORD **)v14;
  v16 = *(_QWORD **)(v14 + 8);
  if (v15 != v16)
  {
    while (*v15 != 0x41D4E9297E100630)
    {
      v15 += 5;
      if (v15 == v16)
        goto LABEL_23;
    }
  }
  if (v15 == v16)
  {
LABEL_23:
    v18 = 0;
  }
  else
  {
    v18 = v15[3];
    v17 = (std::__shared_weak_count *)v15[4];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v52 = v18;
  v22 = *(_QWORD **)(v13 + 8);
  v23 = (int8x8_t)v22[1];
  if (!*(_QWORD *)&v23)
    goto LABEL_61;
  v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    v25 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v23 <= 0x41E8D6E445F4145uLL)
      v25 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v23;
  }
  else
  {
    v25 = (*(_QWORD *)&v23 - 1) & 0x41E8D6E445F4145;
  }
  v26 = *(_QWORD **)(*v22 + 8 * v25);
  if (!v26)
    goto LABEL_61;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_61;
  if (v24.u32[0] < 2uLL)
  {
    v28 = *(_QWORD *)&v23 - 1;
    while (1)
    {
      v30 = v27[1];
      if (v30 == 0x41E8D6E445F4145)
      {
        if (v27[2] == 0x41E8D6E445F4145)
          goto LABEL_45;
      }
      else if ((v30 & v28) != v25)
      {
        goto LABEL_61;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_61;
    }
  }
  while (1)
  {
    v29 = v27[1];
    if (v29 == 0x41E8D6E445F4145)
      break;
    if (v29 >= *(_QWORD *)&v23)
      v29 %= *(_QWORD *)&v23;
    if (v29 != v25)
      goto LABEL_61;
LABEL_34:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_61;
  }
  if (v27[2] != 0x41E8D6E445F4145)
    goto LABEL_34;
LABEL_45:
  v31 = v27[5];
  if (*(_QWORD *)(v31 + 8) == 0x41E8D6E445F4145)
  {
    v32 = *(_QWORD *)(v31 + 32);
    if (v32)
    {
      v33 = ***(uint64_t ****)(a1 + 8);
      if (v33 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v33 != 0xD369A4D92C8FFE6CLL)
      {
        v34 = v33 + 5;
        do
        {
          v35 = *v34;
          v34 += 5;
        }
        while (v35 != 0xD369A4D92C8FFE6CLL);
        v33 = v34 - 5;
      }
      v36 = v33[3];
      v37 = (std::__shared_weak_count *)v33[4];
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v42 = v41;
      if (v41)
      {
        v43 = *(md::PassList **)(v41 + 8);
        if (md::PassList::renderQueueForId(v43, 0))
        {
          if (!*(_BYTE *)(v32 + 228))
          {
            v45 = *(_QWORD *)(v42 + 80);
            if (v45)
            {
              v46 = *(_QWORD *)(v45 + 32);
              v47 = *((_QWORD *)v43 + 12);
              if (v46 < (*((_QWORD *)v43 + 13) - v47) >> 3)
              {
                v48 = *(_QWORD *)(*(_QWORD *)(v47 + 8 * v46) + 16);
                if (v48)
                {
                  md::LightingLogicContext::quantizedShadowViewProjectionMatrix((md::LightingLogicContext *)&v53, v32, *(_DWORD *)(v48 + 80), *(_DWORD *)(v48 + 84));
                  v51[0] = v53;
                  v51[1] = v54;
                  v51[2] = v55;
                  v51[3] = v56;
                  v51[4] = v57;
                  v51[5] = v58;
                  v51[6] = v59;
                  v51[7] = v60;
                  *(_QWORD *)&v53 = &off_1E427B8E0;
                  *((_QWORD *)&v53 + 1) = &v52;
                  *(_QWORD *)&v54 = v51;
                  *((_QWORD *)&v54 + 1) = &v53;
                  (*(void (**)(_QWORD *, __int128 *))(*v4 + 16))(v4, &v53);
                  v49 = (__int128 *)*((_QWORD *)&v54 + 1);
                  if (*((__int128 **)&v54 + 1) == &v53)
                  {
                    v50 = 4;
                    v49 = &v53;
LABEL_69:
                    (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
                  }
                  else if (*((_QWORD *)&v54 + 1))
                  {
                    v50 = 5;
                    goto LABEL_69;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_61:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F71BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  uint64_t v30;
  char *v31;
  char *v33;
  uint64_t v34;

  v33 = a30;
  if (a30 == v31)
  {
    v34 = 4;
    v33 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42861E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42861E8;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x70E01531993BB945;
  v2[1] = "md::ls::PrepassShadowConstantDataHandle]";
  *(_QWORD *)&result = 39;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4450;
  v2[4] = "md::ls::PrepassConstantDataHandle]";
  v2[5] = 33;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286230;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286230;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4460;
  v2[4] = "md::ls::SharedRenderableDataHandle]";
  v2[5] = 34;
  v2[6] = 0xA219A074B7259E0FLL;
  v2[7] = "md::ls::InView]";
  v2[8] = 14;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x412941A9C4AFE129;
    v2[10] = "md::ls::SharedTileMatrix]";
    v2[11] = 24;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x412941A9C4AFE129;
  *((_QWORD *)v10 + 1) = "md::ls::SharedTileMatrix]";
  *((_QWORD *)v10 + 2) = 24;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F71C6D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277998;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (***v17)(_QWORD);
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)();
  uint64_t *v41;
  uint64_t *v42;
  uint64_t (***v43)();
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274FF8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4274E78;
  v5[1] = a2;
  v39 = 0;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x41D4E9297E100630)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    v10 = v7[3];
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v39 = v10;
  v14 = ***(uint64_t ****)(a1 + 8);
  if (v14 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v14 != 0x22D45F5AAD4BF408)
  {
    v15 = v14 + 5;
    do
    {
      v16 = *v15;
      v15 += 5;
    }
    while (v16 != 0x22D45F5AAD4BF408);
    v14 = v15 - 5;
  }
  v17 = (uint64_t (***)(_QWORD))v14[3];
  v18 = (std::__shared_weak_count *)v14[4];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = *(_QWORD **)((**v17)(v17) + 8);
  v23 = (int8x8_t)v22[1];
  if (!*(_QWORD *)&v23)
    goto LABEL_47;
  v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    v25 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v23 <= 0x1AF456233693CD46uLL)
      v25 = 0x1AF456233693CD46uLL % *(_QWORD *)&v23;
  }
  else
  {
    v25 = (*(_QWORD *)&v23 - 1) & 0x1AF456233693CD46;
  }
  v26 = *(_QWORD **)(*v22 + 8 * v25);
  if (!v26)
    goto LABEL_47;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_47;
  if (v24.u32[0] < 2uLL)
  {
    v28 = *(_QWORD *)&v23 - 1;
    while (1)
    {
      v30 = v27[1];
      if (v30 == 0x1AF456233693CD46)
      {
        if (v27[2] == 0x1AF456233693CD46)
          goto LABEL_45;
      }
      else if ((v30 & v28) != v25)
      {
        goto LABEL_47;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v29 = v27[1];
    if (v29 == 0x1AF456233693CD46)
      break;
    if (v29 >= *(_QWORD *)&v23)
      v29 %= *(_QWORD *)&v23;
    if (v29 != v25)
      goto LABEL_47;
LABEL_34:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_47;
  }
  if (v27[2] != 0x1AF456233693CD46)
    goto LABEL_34;
LABEL_45:
  v31 = v27[5];
  if (*(_QWORD *)(v31 + 8) == 0x1AF456233693CD46)
  {
    v32 = *(_QWORD *)(v31 + 32);
    goto LABEL_48;
  }
LABEL_47:
  v32 = 0;
LABEL_48:
  v38 = v32;
  v40 = &off_1E427BDA8;
  v41 = &v39;
  v43 = &v40;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v40);
  v33 = v43;
  if (v43 == &v40)
  {
    v34 = 4;
    v33 = &v40;
LABEL_52:
    (*v33)[v34]();
  }
  else if (v43)
  {
    v34 = 5;
    goto LABEL_52;
  }
  v40 = &off_1E427BDF0;
  v41 = &v39;
  v42 = &v38;
  v43 = &v40;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v40);
  v35 = v43;
  if (v43 == &v40)
  {
    v36 = 4;
    v35 = &v40;
LABEL_57:
    (*v35)[v36]();
  }
  else if (v43)
  {
    v36 = 5;
    goto LABEL_57;
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F71CB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SharedTileMatrix>(v3);
  v6 = gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 8 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::SharedTileMatrix>(v1);
  v4 = gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::SharedTileMatrix>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x412941A9C4AFE129;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x412941A9C4AFE129;
      if (*(_QWORD *)&v3 <= 0x412941A9C4AFE129uLL)
        v5 = 0x412941A9C4AFE129uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x412941A9C4AFE129;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x412941A9C4AFE129)
            {
              if (v7[2] == 0x412941A9C4AFE129)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x412941A9C4AFE129)
          {
            if (v7[2] == 0x412941A9C4AFE129)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedTileMatrix]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271D18;
  *(_QWORD *)(v11 + 8) = 0x412941A9C4AFE129;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x412941A9C4AFE129uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x412941A9C4AFE129;
  v15[1] = "md::ls::SharedTileMatrix]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x412941A9C4AFE129, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71D234(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 4 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 8 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v1);
  v4 = gdc::Registry::storage<md::ls::InView>(v1);
  v5 = gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5EBA003AC7A96B8ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5EBA003AC7A96B8ALL;
      if (*(_QWORD *)&v3 <= 0x5EBA003AC7A96B8AuLL)
        v5 = 0x5EBA003AC7A96B8AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5EBA003AC7A96B8ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5EBA003AC7A96B8ALL)
            {
              if (v7[2] == 0x5EBA003AC7A96B8ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5EBA003AC7A96B8ALL)
          {
            if (v7[2] == 0x5EBA003AC7A96B8ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedRenderableDataHandle]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273278;
  *(_QWORD *)(v11 + 8) = 0x5EBA003AC7A96B8ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5EBA003AC7A96B8AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5EBA003AC7A96B8ALL;
  v15[1] = "md::ls::SharedRenderableDataHandle]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5EBA003AC7A96B8ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71DAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42872C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42872C8;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x1202E9D2D9704CABLL;
  v2[1] = "md::ls::UniqueMaterialEmissiveTexture]";
  *(_QWORD *)&result = 37;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4470;
  v2[4] = "md::ls::SharedMaterialEmissiveTexture]";
  v2[5] = 37;
  v2[6] = 0xCE03281732FA0019;
  v2[7] = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
  v2[8] = 54;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287310;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287310;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F71DE00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0x3209EBE3B62CF3D3;
    *((_QWORD *)v11 + 1) = "md::ls::UniqueMaterialData]";
    *((_QWORD *)v11 + 2) = 26;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0x3209EBE3B62CF3D3;
    *((_QWORD *)v3 + 1) = "md::ls::UniqueMaterialData]";
    *((_QWORD *)v3 + 2) = 26;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278208;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278208;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  md::LayoutContext *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  _BYTE v53[24];
  _BYTE *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275328;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275A18;
  v5[1] = a2;
  v6 = ***(uint64_t ****)(a1 + 8);
  if (v6 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (md::LayoutContext *)(**v9)(v9);
  v15 = **(_QWORD **)(a1 + 8);
  v16 = *(_QWORD **)v15;
  v17 = *(_QWORD **)(v15 + 8);
  if (v16 != v17)
  {
    while (*v16 != 0xC94DD89A7B09BE9CLL)
    {
      v16 += 5;
      if (v16 == v17)
        goto LABEL_23;
    }
  }
  if (v16 == v17)
  {
LABEL_23:
    v18 = 0;
  }
  else
  {
    v18 = v16[3];
    v19 = (std::__shared_weak_count *)v16[4];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v23 = (_QWORD *)*((_QWORD *)v14 + 1);
  v24 = v23[1];
  if ((v24 & (v24 - 1)) != 0)
  {
    v26 = 0x1AF456233693CD46;
    if (v24 <= 0x1AF456233693CD46)
      v26 = 0x1AF456233693CD46 % v24;
    v25 = *(_QWORD **)(*v23 + 8 * v26);
    do
    {
      do
        v25 = (_QWORD *)*v25;
      while (v25[1] != 0x1AF456233693CD46);
    }
    while (v25[2] != 0x1AF456233693CD46);
  }
  else
  {
    v25 = *(_QWORD **)(*v23 + 8 * ((v24 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v25 = (_QWORD *)*v25;
      while (v25[1] != 0x1AF456233693CD46);
    }
    while (v25[2] != 0x1AF456233693CD46);
  }
  v52 = fmaxf(*(float *)(*(_QWORD *)(v25[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v25[5] + 32) + 3076), 1.0);
  v51 = 0;
  v27 = **(_QWORD **)(a1 + 8);
  v28 = *(_QWORD **)v27;
  v29 = *(_QWORD **)(v27 + 8);
  if (v28 != v29)
  {
    while (*v28 != 0x4EDAD23DFB014132)
    {
      v28 += 5;
      if (v28 == v29)
        goto LABEL_45;
    }
  }
  if (v28 == v29)
  {
LABEL_45:
    v31 = 0;
  }
  else
  {
    v31 = v28[3];
    v30 = (std::__shared_weak_count *)v28[4];
    if (v30)
    {
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v50 = 0;
  v51 = v31;
  v35 = **(_QWORD **)(a1 + 8);
  v36 = *(_QWORD **)v35;
  v37 = *(_QWORD **)(v35 + 8);
  if (v36 != v37)
  {
    while (*v36 != 0x348A0B0E758C07C2)
    {
      v36 += 5;
      if (v36 == v37)
        goto LABEL_57;
    }
  }
  if (v36 == v37)
  {
LABEL_57:
    v39 = 0;
  }
  else
  {
    v39 = v36[3];
    v38 = (std::__shared_weak_count *)v36[4];
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v50 = v39;
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  md::LayoutContext::frameState(v14);
  v49 = *(_QWORD *)(v44 + 624);
  v45 = operator new(0x30uLL);
  *v45 = &off_1E427C2B8;
  v45[1] = &v51;
  v45[2] = &v52;
  v45[3] = v43 + 2576;
  v45[4] = &v49;
  v45[5] = &v50;
  v54 = v45;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v53);
  v46 = v54;
  if (v54 == v53)
  {
    v47 = 4;
    v46 = v53;
    goto LABEL_62;
  }
  if (v54)
  {
    v47 = 5;
LABEL_62:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F71E494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a17;
  if (a17 == v19)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x553C3DE8C694F909;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x553C3DE8C694F909;
      if (*(_QWORD *)&v3 <= 0x553C3DE8C694F909uLL)
        v5 = 0x553C3DE8C694F909uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x553C3DE8C694F909;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x553C3DE8C694F909)
            {
              if (v7[2] == 0x553C3DE8C694F909)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x553C3DE8C694F909)
          {
            if (v7[2] == 0x553C3DE8C694F909)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedMaterialEmissiveTexture]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273CF8;
  *(_QWORD *)(v11 + 8) = 0x553C3DE8C694F909;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x553C3DE8C694F909uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x553C3DE8C694F909;
  v15[1] = "md::ls::SharedMaterialEmissiveTexture]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0x553C3DE8C694F909, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71EA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 24 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3209EBE3B62CF3D3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3209EBE3B62CF3D3;
      if (*(_QWORD *)&v3 <= 0x3209EBE3B62CF3D3uLL)
        v5 = 0x3209EBE3B62CF3D3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3209EBE3B62CF3D3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3209EBE3B62CF3D3)
            {
              if (v7[2] == 0x3209EBE3B62CF3D3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3209EBE3B62CF3D3)
          {
            if (v7[2] == 0x3209EBE3B62CF3D3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueMaterialData]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272258;
  *(_QWORD *)(v11 + 8) = 0x3209EBE3B62CF3D3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3209EBE3B62CF3D3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3209EBE3B62CF3D3;
  v15[1] = "md::ls::UniqueMaterialData]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3209EBE3B62CF3D3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71F1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1202E9D2D9704CABLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1202E9D2D9704CABLL;
      if (*(_QWORD *)&v3 <= 0x1202E9D2D9704CABuLL)
        v5 = 0x1202E9D2D9704CABuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1202E9D2D9704CABLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1202E9D2D9704CABLL)
            {
              if (v7[2] == 0x1202E9D2D9704CABLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1202E9D2D9704CABLL)
          {
            if (v7[2] == 0x1202E9D2D9704CABLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueMaterialEmissiveTexture]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273DB8;
  *(_QWORD *)(v11 + 8) = 0x1202E9D2D9704CABLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1202E9D2D9704CABuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1202E9D2D9704CABLL;
  v15[1] = "md::ls::UniqueMaterialEmissiveTexture]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1202E9D2D9704CABLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F71F3F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286ED8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286ED8;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xCF2EB3C843EAD89ALL;
  v2[1] = "md::ls::UniqueMaterialDiffuseTexture]";
  *(_QWORD *)&result = 36;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4480;
  v2[4] = "md::ls::SharedMaterialDiffuseTexture]";
  v2[5] = 36;
  v2[6] = 0xDD9825BCFA7911B2;
  v2[7] = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
  v2[8] = 53;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286F20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286F20;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F71F880(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278010;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278010;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  md::LayoutContext *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  _BYTE v53[24];
  _BYTE *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42752F8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42759E8;
  v5[1] = a2;
  v6 = ***(uint64_t ****)(a1 + 8);
  if (v6 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (md::LayoutContext *)(**v9)(v9);
  v15 = **(_QWORD **)(a1 + 8);
  v16 = *(_QWORD **)v15;
  v17 = *(_QWORD **)(v15 + 8);
  if (v16 != v17)
  {
    while (*v16 != 0xC94DD89A7B09BE9CLL)
    {
      v16 += 5;
      if (v16 == v17)
        goto LABEL_23;
    }
  }
  if (v16 == v17)
  {
LABEL_23:
    v18 = 0;
  }
  else
  {
    v18 = v16[3];
    v19 = (std::__shared_weak_count *)v16[4];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v23 = (_QWORD *)*((_QWORD *)v14 + 1);
  v24 = v23[1];
  if ((v24 & (v24 - 1)) != 0)
  {
    v26 = 0x1AF456233693CD46;
    if (v24 <= 0x1AF456233693CD46)
      v26 = 0x1AF456233693CD46 % v24;
    v25 = *(_QWORD **)(*v23 + 8 * v26);
    do
    {
      do
        v25 = (_QWORD *)*v25;
      while (v25[1] != 0x1AF456233693CD46);
    }
    while (v25[2] != 0x1AF456233693CD46);
  }
  else
  {
    v25 = *(_QWORD **)(*v23 + 8 * ((v24 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v25 = (_QWORD *)*v25;
      while (v25[1] != 0x1AF456233693CD46);
    }
    while (v25[2] != 0x1AF456233693CD46);
  }
  v52 = fmaxf(*(float *)(*(_QWORD *)(v25[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v25[5] + 32) + 3076), 1.0);
  v51 = 0;
  v27 = **(_QWORD **)(a1 + 8);
  v28 = *(_QWORD **)v27;
  v29 = *(_QWORD **)(v27 + 8);
  if (v28 != v29)
  {
    while (*v28 != 0x4EDAD23DFB014132)
    {
      v28 += 5;
      if (v28 == v29)
        goto LABEL_45;
    }
  }
  if (v28 == v29)
  {
LABEL_45:
    v31 = 0;
  }
  else
  {
    v31 = v28[3];
    v30 = (std::__shared_weak_count *)v28[4];
    if (v30)
    {
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v50 = 0;
  v51 = v31;
  v35 = **(_QWORD **)(a1 + 8);
  v36 = *(_QWORD **)v35;
  v37 = *(_QWORD **)(v35 + 8);
  if (v36 != v37)
  {
    while (*v36 != 0x348A0B0E758C07C2)
    {
      v36 += 5;
      if (v36 == v37)
        goto LABEL_57;
    }
  }
  if (v36 == v37)
  {
LABEL_57:
    v39 = 0;
  }
  else
  {
    v39 = v36[3];
    v38 = (std::__shared_weak_count *)v36[4];
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v50 = v39;
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  md::LayoutContext::frameState(v14);
  v49 = *(_QWORD *)(v44 + 624);
  v45 = operator new(0x30uLL);
  *v45 = &off_1E427C150;
  v45[1] = &v51;
  v45[2] = &v52;
  v45[3] = v43 + 2576;
  v45[4] = &v49;
  v45[5] = &v50;
  v54 = v45;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v53);
  v46 = v54;
  if (v54 == v53)
  {
    v47 = 4;
    v46 = v53;
    goto LABEL_62;
  }
  if (v54)
  {
    v47 = 5;
LABEL_62:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F71FDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a17;
  if (a17 == v19)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9ADEB1E4572AC694;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9ADEB1E4572AC694;
      if (*(_QWORD *)&v3 <= 0x9ADEB1E4572AC694)
        v5 = 0x9ADEB1E4572AC694 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9ADEB1E4572AC694;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9ADEB1E4572AC694)
            {
              if (v7[2] == 0x9ADEB1E4572AC694)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9ADEB1E4572AC694)
          {
            if (v7[2] == 0x9ADEB1E4572AC694)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedMaterialDiffuseTexture]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273BA8;
  *(_QWORD *)(v11 + 8) = 0x9ADEB1E4572AC694;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9ADEB1E4572AC694, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9ADEB1E4572AC694;
  v15[1] = "md::ls::SharedMaterialDiffuseTexture]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9ADEB1E4572AC694, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7203BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 24 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCF2EB3C843EAD89ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCF2EB3C843EAD89ALL;
      if (*(_QWORD *)&v3 <= 0xCF2EB3C843EAD89ALL)
        v5 = 0xCF2EB3C843EAD89ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCF2EB3C843EAD89ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCF2EB3C843EAD89ALL)
            {
              if (v7[2] == 0xCF2EB3C843EAD89ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCF2EB3C843EAD89ALL)
          {
            if (v7[2] == 0xCF2EB3C843EAD89ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueMaterialDiffuseTexture]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273C38;
  *(_QWORD *)(v11 + 8) = 0xCF2EB3C843EAD89ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCF2EB3C843EAD89ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCF2EB3C843EAD89ALL;
  v15[1] = "md::ls::UniqueMaterialDiffuseTexture]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCF2EB3C843EAD89ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F720AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286788;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286788;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x5FF8F613B2E16249;
  v2[1] = "md::ls::UniqueMaterialAlbedoTexture]";
  *(_QWORD *)&result = 35;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4490;
  v2[4] = "md::ls::SharedMaterialAlbedoTexture]";
  v2[5] = 35;
  v2[6] = 0x1D932F2BF291491;
  v2[7] = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
  v2[8] = 49;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42867D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42867D0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x3209EBE3B62CF3D3;
  v2[1] = "md::ls::UniqueMaterialData]";
  *(_QWORD *)&result = 26;
  *((_OWORD *)v2 + 1) = xmmword_19FFB44A0;
  v2[4] = "md::ls::MeshRenderableID]";
  v2[5] = 24;
  v2[6] = 0x28D6AB85FDB5A2BLL;
  v2[7] = "md::ls::RenderableAlbedoTexture]";
  v2[8] = 31;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277C68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277C68;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  md::LayoutContext *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  _BYTE v62[24];
  _BYTE *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42752C8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275028;
  v5[1] = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4274FC8;
  v6[1] = a2;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E42759B8;
  v7[1] = a2;
  v8 = *(uint64_t **)**v3;
  if (v8 != *(uint64_t **)(**v3 + 8) && *v8 != 0x22D45F5AAD4BF408)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    v8 = v9 - 5;
  }
  v11 = (uint64_t (***)(_QWORD))v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (md::LayoutContext *)(**v11)(v11);
  v17 = **v3;
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0xC94DD89A7B09BE9CLL)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_23;
    }
  }
  if (v18 == v19)
  {
LABEL_23:
    v20 = 0;
  }
  else
  {
    v20 = v18[3];
    v21 = (std::__shared_weak_count *)v18[4];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v25 = (_QWORD *)*((_QWORD *)v16 + 1);
  v26 = v25[1];
  if ((v26 & (v26 - 1)) != 0)
  {
    v28 = 0x1AF456233693CD46;
    if (v26 <= 0x1AF456233693CD46)
      v28 = 0x1AF456233693CD46 % v26;
    v27 = *(_QWORD **)(*v25 + 8 * v28);
    do
    {
      do
        v27 = (_QWORD *)*v27;
      while (v27[1] != 0x1AF456233693CD46);
    }
    while (v27[2] != 0x1AF456233693CD46);
  }
  else
  {
    v27 = *(_QWORD **)(*v25 + 8 * ((v26 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v27 = (_QWORD *)*v27;
      while (v27[1] != 0x1AF456233693CD46);
    }
    while (v27[2] != 0x1AF456233693CD46);
  }
  v61 = fmaxf(*(float *)(*(_QWORD *)(v27[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v27[5] + 32) + 3076), 1.0);
  v60 = 0;
  v29 = **v3;
  v30 = *(_QWORD **)v29;
  v31 = *(_QWORD **)(v29 + 8);
  if (v30 != v31)
  {
    while (*v30 != 0x4EDAD23DFB014132)
    {
      v30 += 5;
      if (v30 == v31)
        goto LABEL_45;
    }
  }
  if (v30 == v31)
  {
LABEL_45:
    v33 = 0;
  }
  else
  {
    v33 = v30[3];
    v32 = (std::__shared_weak_count *)v30[4];
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v59 = 0;
  v60 = v33;
  v37 = **v3;
  v38 = *(_QWORD **)v37;
  v39 = *(_QWORD **)(v37 + 8);
  if (v38 != v39)
  {
    while (*v38 != 0x348A0B0E758C07C2)
    {
      v38 += 5;
      if (v38 == v39)
        goto LABEL_57;
    }
  }
  if (v38 == v39)
  {
LABEL_57:
    v41 = 0;
  }
  else
  {
    v41 = v38[3];
    v40 = (std::__shared_weak_count *)v38[4];
    if (v40)
    {
      v42 = (unint64_t *)&v40->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      do
        v44 = __ldaxr(v42);
      while (__stlxr(v44 - 1, v42));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v59 = v41;
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  md::LayoutContext::frameState(v16);
  v58 = *(_QWORD *)(v46 + 624);
  v47 = operator new(0x30uLL);
  v48 = v45 + 2576;
  *v47 = &off_1E427BF10;
  v47[1] = &v60;
  v47[2] = v45 + 2576;
  v47[3] = &v61;
  v47[4] = &v58;
  v47[5] = &v59;
  v63 = v47;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v62);
  v49 = v63;
  if (v63 == v62)
  {
    v50 = 4;
    v49 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_63;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_63:
  v51 = operator new(0x20uLL);
  *v51 = &off_1E427BF58;
  v51[1] = &v59;
  v51[2] = v48;
  v51[3] = v3;
  v63 = v51;
  (*(void (**)(_QWORD *, _BYTE *))(*v5 + 16))(v5, v62);
  v52 = v63;
  if (v63 == v62)
  {
    v53 = 4;
    v52 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_68;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_68:
  v54 = operator new(0x20uLL);
  *v54 = &off_1E427BFA0;
  v54[1] = &v59;
  v54[2] = v48;
  v54[3] = v3;
  v63 = v54;
  (*(void (**)(_QWORD *, _BYTE *))(*v6 + 16))(v6, v62);
  v55 = v63;
  if (v63 == v62)
  {
    v56 = 4;
    v55 = v62;
    goto LABEL_72;
  }
  if (v63)
  {
    v56 = 5;
LABEL_72:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7214A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9AAE33FEB51FAC5BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9AAE33FEB51FAC5BLL;
      if (*(_QWORD *)&v3 <= 0x9AAE33FEB51FAC5BLL)
        v5 = 0x9AAE33FEB51FAC5BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9AAE33FEB51FAC5BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9AAE33FEB51FAC5BLL)
            {
              if (v7[2] == 0x9AAE33FEB51FAC5BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9AAE33FEB51FAC5BLL)
          {
            if (v7[2] == 0x9AAE33FEB51FAC5BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedMaterialAlbedoTexture]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273458;
  *(_QWORD *)(v11 + 8) = 0x9AAE33FEB51FAC5BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9AAE33FEB51FAC5BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9AAE33FEB51FAC5BLL;
  v15[1] = "md::ls::SharedMaterialAlbedoTexture]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9AAE33FEB51FAC5BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F721AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 24 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x28D6AB85FDB5A2BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x28D6AB85FDB5A2BLL;
      if (*(_QWORD *)&v3 <= 0x28D6AB85FDB5A2BuLL)
        v5 = 0x28D6AB85FDB5A2BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x28D6AB85FDB5A2BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x28D6AB85FDB5A2BLL)
            {
              if (v7[2] == 0x28D6AB85FDB5A2BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x28D6AB85FDB5A2BLL)
          {
            if (v7[2] == 0x28D6AB85FDB5A2BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderableAlbedoTexture]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272B28;
  *(_QWORD *)(v11 + 8) = 0x28D6AB85FDB5A2BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x28D6AB85FDB5A2BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x28D6AB85FDB5A2BLL;
  v15[1] = "md::ls::RenderableAlbedoTexture]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x28D6AB85FDB5A2BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F722220(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  v18 = *(_QWORD *)(v16 - 24);
  v17 = *(_QWORD *)(v16 - 16);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v15[1];
  *v15 = v18;
  v15[1] = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)(v14 + 24 * v7 + 16) = *(_QWORD *)(v16 - 8);
  v24 = a1[11];
  v25 = *(std::__shared_weak_count **)(v24 - 16);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  a1[11] = v24 - 24;
  v28 = (_QWORD *)a1[28];
  if (!v28)
    return 1;
  v29 = a1[31];
  while (1)
  {
    v35[0] = &v33;
    v35[1] = 1;
    v34 = v29;
    v30 = v28[6];
    if (!v30)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v30 + 48))(v30, &v34, v35);
    v28 = (_QWORD *)*v28;
    if (!v28)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::contains(v31, v32);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 24 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5FF8F613B2E16249;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5FF8F613B2E16249;
      if (*(_QWORD *)&v3 <= 0x5FF8F613B2E16249uLL)
        v5 = 0x5FF8F613B2E16249uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5FF8F613B2E16249;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5FF8F613B2E16249)
            {
              if (v7[2] == 0x5FF8F613B2E16249)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5FF8F613B2E16249)
          {
            if (v7[2] == 0x5FF8F613B2E16249)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueMaterialAlbedoTexture]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42734B8;
  *(_QWORD *)(v11 + 8) = 0x5FF8F613B2E16249;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5FF8F613B2E16249uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5FF8F613B2E16249;
  v15[1] = "md::ls::UniqueMaterialAlbedoTexture]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5FF8F613B2E16249, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F722DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42845C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42845C8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284610;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284610;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB44B0;
  v2[4] = "md::ls::RenderablePendingProcessing]";
  v2[5] = 35;
  v2[6] = 0xEE00EAF3B9AFA033;
  v2[7] = "md::ls::MeshRenderablePositionScaleInfo]";
  v2[8] = 39;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276B88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276B88;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD **v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t prime;
  void *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  size_t v71;
  size_t v72;
  size_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v119;
  unsigned int v120;
  float *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t *v135;
  int64x2_t v136;
  char v137;
  _QWORD *v138;
  int v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = gdc::Registry::storage<md::ls::RenderablePendingProcessing>(v3);
  v6 = gdc::Registry::storage<md::ls::MeshRenderablePositionScaleInfo>(v3);
  v7 = v6 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v8 = v4;
  else
    v8 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v7 = v8 + 32;
  v9 = *(_QWORD **)(v7 + 24);
  v126 = v7;
  v127 = (_QWORD *)v4;
  v128 = (_QWORD *)v5;
  v129 = (_QWORD *)v6;
  v125 = (_QWORD *)v6;
  v130 = v9;
  v122 = *(_QWORD **)(v7 + 32);
  if (v122 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126))
  {
    v10 = v9 + 1;
    do
    {
      v9 = v10;
      v130 = v10;
      if (v10 == v122)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126);
      v10 = v9 + 1;
    }
    while (!isValid);
  }
  if (v122 == v9)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)result;
    goto LABEL_183;
  }
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v123 = v12;
  do
  {
    *v12 = *v9;
    v14 = *v9;
    v15 = *v9 >> 39;
    v16 = v125[4];
    if (v15 < (v125[5] - v16) >> 3
      && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
      && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F)),
          v20 = v125[7],
          v19 = v125[8],
          v18 < (v19 - v20) >> 3)
      && ((v21 = HIDWORD(v14), v22 = v20 + 8 * v18, v22 != v19)
        ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v21)
        : (v23 = 0),
          v23))
    {
      v24 = v125[11];
      v25 = v125[10] + 4 * v18;
    }
    else
    {
      v24 = v125[11];
      v25 = v24;
    }
    if (v25 == v24)
      v26 = 0;
    else
      v26 = (float *)v25;
    v27 = **(_QWORD **)(a1 + 8);
    v28 = *(_QWORD **)v27;
    v29 = *(_QWORD **)(v27 + 8);
    if (v28 != v29)
    {
      while (*v28 != 0x41D4E9297E100630)
      {
        v28 += 5;
        if (v28 == v29)
          goto LABEL_38;
      }
    }
    if (v28 == v29)
    {
LABEL_38:
      v31 = 0;
    }
    else
    {
      v31 = v28[3];
      v30 = (std::__shared_weak_count *)v28[4];
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    if (*v26 < 0.0)
    {
      if (!*(_QWORD *)(v31 + 10568))
      {
        v49 = operator new();
        v50 = ggl::BufferData::BufferData(v49, qword_1EE54AFE0, 2, 1, 6, 1);
        *(_QWORD *)(v50 + 200) = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
        *(_QWORD *)v50 = &off_1E42B9790;
        v51 = *(_QWORD *)(v31 + 10576);
        *(_QWORD *)(v31 + 10576) = v50;
        if (v51)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          v50 = *(_QWORD *)(v31 + 10576);
        }
        v52 = *(_QWORD *)(v50 + 8);
        **(_DWORD **)(v50 + 72) = 1073322394;
        if (*(_QWORD *)(v50 + 64) > v52)
          v52 = *(_QWORD *)(v50 + 64);
        *(_QWORD *)(v50 + 56) = 0;
        *(_QWORD *)(v50 + 64) = v52;
        v132 = v50;
        v133 = 0;
        v134 = 0;
        v12 = v123;
        v53 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back((_QWORD *)(v31 + 5664), (uint64_t)&v132);
        v136 = vdupq_n_s64(1uLL);
        v137 = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&,md::Counter>(v31 + 5624, v53, v53, (uint64_t)&v136);
        *(_QWORD *)(v31 + 10568) = v53;
        v54 = v134;
        if (v134)
        {
          v55 = (unint64_t *)&v134->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      v35 = *(_QWORD *)(v31 + 10568);
      v36 = *(_QWORD **)(a1 + 8);
      v37 = *v12;
      v38 = operator new(0x20uLL);
      *v38 = &off_1E4281B98;
      v38[1] = v35;
      *((_BYTE *)v38 + 16) = 1;
      v38[3] = v37;
      v138 = v38;
      v135 = 0;
      v139 = 0;
      v39 = v36;
      goto LABEL_148;
    }
    v121 = v26;
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v40 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back((_QWORD *)(v31 + 5664), (uint64_t)&v132);
    v136 = vdupq_n_s64(1uLL);
    v137 = 0;
    std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&,md::Counter>(v31 + 5624, v40, v40, (uint64_t)&v136);
    v41 = v134;
    if (v134)
    {
      v42 = (unint64_t *)&v134->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v136.i64[0] = v40;
    v120 = *(_DWORD *)(*(_QWORD *)(v31 + 5688) + 8 * v40);
    v44 = *(_QWORD *)(v31 + 5712);
    v45 = operator new();
    v46 = (_QWORD *)ggl::BufferData::BufferData(v45, qword_1EE54AFE0, 2, 0, 6, 1);
    v46[25] = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
    *v46 = &off_1E42B9790;
    v47 = *(_QWORD *)(v31 + 5768);
    if (v47)
    {
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.u32[0] > 1uLL)
      {
        v2 = v40;
        if (v40 >= v47)
          v2 = v40 % v47;
      }
      else
      {
        v2 = (v47 - 1) & v40;
      }
      v57 = *(_QWORD ***)(*(_QWORD *)(v31 + 5760) + 8 * v2);
      if (v57)
      {
        v58 = *v57;
        if (*v57)
        {
          if (v48.u32[0] < 2uLL)
          {
            while (1)
            {
              v60 = v58[1];
              if (v60 == v40)
              {
                if (v58[2] == v40)
                  goto LABEL_143;
              }
              else if ((v60 & (v47 - 1)) != v2)
              {
                goto LABEL_76;
              }
              v58 = (_QWORD *)*v58;
              if (!v58)
                goto LABEL_76;
            }
          }
          do
          {
            v59 = v58[1];
            if (v59 == v40)
            {
              if (v58[2] == v40)
                goto LABEL_143;
            }
            else
            {
              if (v59 >= v47)
                v59 %= v47;
              if (v59 != v2)
                break;
            }
            v58 = (_QWORD *)*v58;
          }
          while (v58);
        }
      }
    }
LABEL_76:
    v58 = operator new(0x20uLL);
    *v58 = 0;
    v58[1] = v40;
    v58[2] = v40;
    v58[3] = 0;
    v61 = (float)(unint64_t)(*(_QWORD *)(v31 + 5784) + 1);
    v119 = (_QWORD *)(v31 + 5776);
    v62 = *(float *)(v31 + 5792);
    if ((((float)(v62 * (float)v47) >= v61) & ~(v47 == 0)) == 0)
    {
      v63 = (v47 & (v47 - 1)) != 0;
      if (v47 < 3)
        v63 = 1;
      v64 = v63 | (2 * v47);
      v65 = vcvtps_u32_f32(v61 / v62);
      if (v64 <= v65)
        prime = v65;
      else
        prime = v64;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v47 = *(_QWORD *)(v31 + 5768);
      }
      if (prime <= v47)
      {
        if (prime >= v47)
          goto LABEL_128;
        v78 = vcvtps_u32_f32((float)*(unint64_t *)(v31 + 5784) / *(float *)(v31 + 5792));
        if (v47 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v47), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
        {
          v78 = std::__next_prime(v78);
        }
        else
        {
          v80 = 1 << -(char)__clz(v78 - 1);
          if (v78 >= 2)
            v78 = v80;
        }
        if (prime <= v78)
          prime = v78;
        if (prime >= v47)
          goto LABEL_128;
        if (!prime)
        {
          v85 = *(void **)(v31 + 5760);
          *(_QWORD *)(v31 + 5760) = 0;
          if (v85)
            operator delete(v85);
          *(_QWORD *)(v31 + 5768) = 0;
          goto LABEL_128;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v67 = operator new(8 * prime);
      v68 = *(void **)(v31 + 5760);
      *(_QWORD *)(v31 + 5760) = v67;
      if (v68)
        operator delete(v68);
      v69 = 0;
      *(_QWORD *)(v31 + 5768) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v31 + 5760) + 8 * v69++) = 0;
      while (prime != v69);
      v70 = (_QWORD *)*v119;
      if (!*v119)
      {
LABEL_128:
        v47 = *(_QWORD *)(v31 + 5768);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v40 >= v47)
            v2 = v40 % v47;
          else
            v2 = v40;
        }
        else
        {
          v2 = (v47 - 1) & v40;
        }
        goto LABEL_133;
      }
      v71 = v70[1];
      v72 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v73 = v71 & v72;
        *(_QWORD *)(*(_QWORD *)(v31 + 5760) + 8 * v73) = v119;
        while (1)
        {
          v74 = (_QWORD *)*v70;
          if (!*v70)
            break;
          v75 = v74[1] & v72;
          if (v75 == v73)
          {
            v70 = (_QWORD *)*v70;
          }
          else
          {
            v76 = *(_QWORD *)(v31 + 5760);
            if (*(_QWORD *)(v76 + 8 * v75))
            {
              *v70 = *v74;
              v77 = 8 * v75;
              *v74 = **(_QWORD **)(*(_QWORD *)(v31 + 5760) + v77);
              **(_QWORD **)(*(_QWORD *)(v31 + 5760) + v77) = v74;
            }
            else
            {
              *(_QWORD *)(v76 + 8 * v75) = v70;
              v70 = v74;
              v73 = v75;
            }
          }
        }
        goto LABEL_128;
      }
      if (v71 >= prime)
        v71 %= prime;
      *(_QWORD *)(*(_QWORD *)(v31 + 5760) + 8 * v71) = v119;
      v81 = (_QWORD *)*v70;
      if (!*v70)
        goto LABEL_128;
      while (1)
      {
        v83 = v81[1];
        if (v83 >= prime)
          v83 %= prime;
        if (v83 != v71)
        {
          v84 = *(_QWORD *)(v31 + 5760);
          if (!*(_QWORD *)(v84 + 8 * v83))
          {
            *(_QWORD *)(v84 + 8 * v83) = v70;
            goto LABEL_114;
          }
          *v70 = *v81;
          v82 = 8 * v83;
          *v81 = **(_QWORD **)(*(_QWORD *)(v31 + 5760) + v82);
          **(_QWORD **)(*(_QWORD *)(v31 + 5760) + v82) = v81;
          v81 = v70;
        }
        v83 = v71;
LABEL_114:
        v70 = v81;
        v81 = (_QWORD *)*v81;
        v71 = v83;
        if (!v81)
          goto LABEL_128;
      }
    }
LABEL_133:
    v86 = *(_QWORD *)(v31 + 5760);
    v87 = *(_QWORD **)(v86 + 8 * v2);
    if (v87)
    {
      *v58 = *v87;
    }
    else
    {
      *v58 = *v119;
      *v119 = v58;
      *(_QWORD *)(v86 + 8 * v2) = v119;
      if (!*v58)
        goto LABEL_142;
      v88 = *(_QWORD *)(*v58 + 8);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v88 >= v47)
          v88 %= v47;
      }
      else
      {
        v88 &= v47 - 1;
      }
      v87 = (_QWORD *)(*(_QWORD *)(v31 + 5760) + 8 * v88);
    }
    *v87 = v58;
LABEL_142:
    ++*(_QWORD *)(v31 + 5784);
LABEL_143:
    v89 = v58[3];
    v58[3] = v45;
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&>,std::tuple<>>(v31 + 5624, v136.u64[0], &v136);
    ++v90[3];
    *(_QWORD *)(v44 + 24 * v120) = v45;
    v91 = *(_QWORD *)(v45 + 8);
    **(float **)(v45 + 72) = *v121;
    if (*(_QWORD *)(v45 + 64) > v91)
      v91 = *(_QWORD *)(v45 + 64);
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 64) = v91;
    v92 = *(_QWORD **)(a1 + 8);
    v93 = *v123;
    v94 = operator new(0x20uLL);
    *v94 = &off_1E4281B98;
    v94[1] = v40;
    *((_BYTE *)v94 + 16) = 0;
    v94[3] = v93;
    v138 = v94;
    v135 = 0;
    v139 = 0;
    v39 = v92;
LABEL_148:
    ecs2::Runtime::queueCommand(v39, (uint64_t)&v136);
    if (v139 != -1)
      ((void (*)(char *, int64x2_t *))off_1E42FB340[v139])(&v131, &v136);
    v139 = -1;
    result = (uint64_t)v135;
    v12 = v123;
    if (v135 == &v132)
    {
      result = (uint64_t)&v132;
      v96 = 4;
    }
    else
    {
      if (!v135)
        goto LABEL_155;
      v96 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v96))();
LABEL_155:
    v9 = *(_QWORD **)(v126 + 32);
    v13 = v130 + 1;
    v130 = v13;
    if (v13 != v9)
    {
      v97 = v127[4];
      while (1)
      {
        v98 = *((unsigned int *)v13 + 1);
        v99 = v98 >> 7;
        if (v98 >> 7 < (v127[5] - v97) >> 3)
        {
          v100 = *(_QWORD *)(v97 + 8 * v99);
          if (v100)
          {
            v101 = v98 & 0x7F;
            v102 = *(unsigned __int16 *)(v100 + 2 * v101);
            v103 = v127[7];
            result = v127[8];
            if (v102 < (result - v103) >> 3)
            {
              v104 = v103 + 8 * v102;
              if (v104 != result && *(_DWORD *)(v104 + 4) == (_DWORD)v98)
              {
                v106 = v128[4];
                result = v128[5] - v106;
                if (v99 < result >> 3)
                {
                  v107 = *(_QWORD *)(v106 + 8 * v99);
                  if (v107)
                  {
                    v108 = *(unsigned __int16 *)(v107 + 2 * v101);
                    v109 = v128[7];
                    result = v128[8];
                    if (v108 < (result - v109) >> 3)
                    {
                      v110 = v109 + 8 * v108;
                      if (v110 != result && *(_DWORD *)(v110 + 4) == (_DWORD)v98)
                      {
                        v112 = v129[4];
                        result = v129[5] - v112;
                        if (v99 < result >> 3)
                        {
                          v113 = *(_QWORD *)(v112 + 8 * v99);
                          if (v113)
                          {
                            v114 = *(unsigned __int16 *)(v113 + 2 * v101);
                            v116 = v129[7];
                            v115 = v129[8];
                            result = v115 - v116;
                            if (v114 < (v115 - v116) >> 3)
                            {
                              v117 = v116 + 8 * v114;
                              if (*(_DWORD *)(v117 + 4) == (_DWORD)v98 && v117 != v115)
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v13 == v9)
        {
          v13 = v9;
          goto LABEL_14;
        }
      }
      v9 = v13;
LABEL_14:
      v130 = v13;
    }
  }
  while (v122 != v9);
LABEL_183:
  *v12 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F723C48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F723C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::ls::RenderablePendingProcessing>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1BBF568133D71FB7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1BBF568133D71FB7;
      if (*(_QWORD *)&v3 <= 0x1BBF568133D71FB7uLL)
        v5 = 0x1BBF568133D71FB7uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1BBF568133D71FB7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1BBF568133D71FB7)
            {
              if (v7[2] == 0x1BBF568133D71FB7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1BBF568133D71FB7)
          {
            if (v7[2] == 0x1BBF568133D71FB7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderablePendingProcessing]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42733F8;
  *(_QWORD *)(v11 + 8) = 0x1BBF568133D71FB7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1BBF568133D71FB7uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1BBF568133D71FB7;
  v15[1] = "md::ls::RenderablePendingProcessing]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1BBF568133D71FB7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F723EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderablePositionScaleInfo>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEE00EAF3B9AFA033;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEE00EAF3B9AFA033;
      if (*(_QWORD *)&v3 <= 0xEE00EAF3B9AFA033)
        v5 = 0xEE00EAF3B9AFA033 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEE00EAF3B9AFA033;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEE00EAF3B9AFA033)
            {
              if (v7[2] == 0xEE00EAF3B9AFA033)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEE00EAF3B9AFA033)
          {
            if (v7[2] == 0xEE00EAF3B9AFA033)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MeshRenderablePositionScaleInfo]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273F38;
  *(_QWORD *)(v11 + 8) = 0xEE00EAF3B9AFA033;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEE00EAF3B9AFA033, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEE00EAF3B9AFA033;
  v15[1] = "md::ls::MeshRenderablePositionScaleInfo]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEE00EAF3B9AFA033, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F72411C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283068;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283068;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x60915CB292001F47;
  v2[1] = "md::ls::UniqueColorDataHandle]";
  *(_QWORD *)&result = 29;
  *((_OWORD *)v2 + 1) = xmmword_19FFB44C0;
  v2[4] = "md::ls::SharedColorDataHandle]";
  v2[5] = 29;
  v2[6] = 0xA3F884E4E2541296;
  v2[7] = "md::ls::ColorDataHandle]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42830B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42830B0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F72458C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42760D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42760D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *result;
  unint64_t *v9;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (***v36)(_QWORD);
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  BOOL v61;
  int8x8_t *v62;
  uint64_t v63;
  float v64;
  int8x8_t v65;
  float v66;
  int v67;
  float v68;
  float v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  float v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v100;
  unint64_t *v101;
  uint64_t v102[4];
  unint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t *v107;
  __int128 v108;
  float v109;
  uint64_t v110;
  _BYTE v111[12];
  float v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t v115;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueColorDataHandle>(v3);
  gdc::Registry::storage<md::ls::SharedColorDataHandle>(v3);
  gdc::Registry::storage<md::ls::ColorDataHandle>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v6 = (uint64_t)(v4 + 4);
  else
    v6 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v104, v6, v4, v5, *(_QWORD *)(v6 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v7 = (uint64_t)(v4 + 4);
  else
    v7 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v102, v7, v4, v5, *(_QWORD *)(v7 + 32));
  if (v103 != v107)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    __asm { FMOV            V10.2S, #1.0 }
    v101 = result;
    while (1)
    {
      *result = *v9;
      v14 = *v9;
      v15 = HIDWORD(*v9);
      v16 = v14 >> 39;
      v17 = v4[4];
      if (v14 >> 39 < (v4[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v4[7],
            v20 = v4[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (_ZF = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (_ZF = 0), _ZF))
      {
        v24 = (unint64_t *)(v4[10] + 24 * v19);
      }
      else
      {
        v24 = (unint64_t *)v4[11];
      }
      v25 = v5[4];
      if (v16 < (v5[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v5[7],
            v28 = v5[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = (unint64_t *)(v5[10] + 8 * v27);
      }
      else
      {
        v32 = (unint64_t *)v5[11];
      }
      v33 = ***(uint64_t ****)(a1 + 8);
      if (v33 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v33 != 0x22D45F5AAD4BF408)
      {
        v34 = v33 + 5;
        do
        {
          v35 = *v34;
          v34 += 5;
        }
        while (v35 != 0x22D45F5AAD4BF408);
        v33 = v34 - 5;
      }
      v36 = (uint64_t (***)(_QWORD))v33[3];
      v37 = (std::__shared_weak_count *)v33[4];
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v41 = *(_QWORD **)((**v36)(v36) + 8);
      v42 = v41[1];
      if ((v42 & (v42 - 1)) != 0)
      {
        v44 = 0x1AF456233693CD46;
        if (v42 <= 0x1AF456233693CD46)
          v44 = 0x1AF456233693CD46 % v42;
        v43 = *(_QWORD **)(*v41 + 8 * v44);
        do
        {
          do
            v43 = (_QWORD *)*v43;
          while (v43[1] != 0x1AF456233693CD46);
        }
        while (v43[2] != 0x1AF456233693CD46);
      }
      else
      {
        v43 = *(_QWORD **)(*v41 + 8 * ((v42 - 1) & 0x1AF456233693CD46));
        do
        {
          do
            v43 = (_QWORD *)*v43;
          while (v43[1] != 0x1AF456233693CD46);
        }
        while (v43[2] != 0x1AF456233693CD46);
      }
      v45 = *(_QWORD *)(v43[5] + 32);
      v46 = *(float *)(v45 + 3076);
      v47 = *(float *)(v45 + 3080);
      v48 = **(_QWORD **)(a1 + 8);
      v49 = *(_QWORD **)v48;
      v50 = *(_QWORD **)(v48 + 8);
      if (v49 != v50)
      {
        while (*v49 != 0x4EDAD23DFB014132)
        {
          v49 += 5;
          if (v49 == v50)
            goto LABEL_59;
        }
      }
      if (v49 == v50)
      {
LABEL_59:
        v52 = 0;
      }
      else
      {
        v52 = v49[3];
        v51 = (std::__shared_weak_count *)v49[4];
        if (v51)
        {
          v53 = (unint64_t *)&v51->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
          do
            v55 = __ldaxr(v53);
          while (__stlxr(v55 - 1, v53));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      v56 = *v24;
      *(_QWORD *)v111 = v56;
      v57 = *(_QWORD *)(v52 + 120);
      if (v56 >= (unint64_t)((*(_QWORD *)(v52 + 128) - v57) >> 3))
        goto LABEL_68;
      v58 = *(_QWORD *)(v57 + 8 * v56);
      if (!v58)
        goto LABEL_69;
      if (HIDWORD(v56) != HIDWORD(v58)
        || ((v59 = *(_QWORD *)(v52 + 144),
             v60 = (unint64_t *)(v59 + 8 * v58),
             v60 != *(unint64_t **)(v52 + 152))
          ? (v61 = v59 == 0)
          : (v61 = 1),
            v61))
      {
LABEL_68:
        v58 = 0;
      }
      else
      {
        v100 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v52 + 56, v56, v111);
        ++v100[3];
        v58 = *v60;
      }
LABEL_69:
      v62 = *(int8x8_t **)v52;
      v108 = v58;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v113, v62, (uint64_t *)&v108, 0);
      v63 = v113;
      if (v113)
      {
        v64 = fmaxf(v47 + v46, 1.0);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, float))(*(_QWORD *)v113 + 976))(v111, v113, v64);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(_QWORD *)v63 + 928))(&v110, v63, v64);
        if (v111[0])
        {
          LOBYTE(v108) = 0;
LABEL_73:
          v65 = *(int8x8_t *)&v111[4];
          v66 = v112;
          v67 = v110;
          v68 = *((float *)&v110 + 1);
          if ((_BYTE)v110)
            v69 = *((float *)&v110 + 1);
          else
            v69 = 1.0;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, float))(*(_QWORD *)v63 + 232))(&v108, v63, v64);
          if (v111[0])
            goto LABEL_73;
          v65 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((_BYTE)v108 == 0), 0x1FuLL)), _D10, *(int8x8_t *)((char *)&v108 + 4));
          if ((_BYTE)v108)
            v66 = *((float *)&v108 + 3);
          else
            v66 = 1.0;
          if ((_BYTE)v108)
            v69 = v109;
          else
            v69 = 1.0;
          v67 = v110;
          v68 = *((float *)&v110 + 1);
        }
        v70 = *v32;
        v115 = v70;
        v71 = *(_QWORD *)(v52 + 1008);
        if (v70 < (unint64_t)((*(_QWORD *)(v52 + 1016) - v71) >> 3)
          && (v72 = *(_QWORD *)(v71 + 8 * v70)) != 0
          && HIDWORD(v70) == HIDWORD(v72))
        {
          v73 = *(_QWORD *)(v52 + 1032) + 20 * v72;
          v74 = *(_QWORD *)(v52 + 1040);
        }
        else
        {
          v74 = *(_QWORD *)(v52 + 1040);
          v73 = v74;
        }
        if (v73 == v74)
          v75 = 0;
        else
          v75 = v73;
        if (v75)
        {
          v76 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v52 + 944, v70, &v115);
          ++v76[3];
        }
        *(int8x8_t *)v75 = v65;
        if (v67)
          v77 = v68;
        else
          v77 = -1.0;
        *(float *)(v75 + 8) = v66;
        *(float *)(v75 + 12) = v69;
        *(float *)(v75 + 16) = v77;
      }
      v78 = v114;
      if (v114)
      {
        v79 = (unint64_t *)&v114->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v107;
      v9 = *(unint64_t **)(v104 + 32);
      if (++v107 == v9)
      {
        result = v101;
      }
      else
      {
        v82 = v105[4];
        v83 = (v105[5] - v82) >> 3;
        v84 = v81 + 2;
        result = v101;
        while (1)
        {
          v85 = *((unsigned int *)v84 - 1);
          v86 = v85 >> 7;
          if (v85 >> 7 < v83)
          {
            v87 = *(_QWORD *)(v82 + 8 * v86);
            if (v87)
            {
              v88 = *(unsigned __int16 *)(v87 + 2 * (v85 & 0x7F));
              v89 = v105[7];
              v90 = v105[8];
              if (v88 < (v90 - v89) >> 3)
              {
                v91 = v89 + 8 * v88;
                if (v91 != v90 && *(_DWORD *)(v91 + 4) == (_DWORD)v85)
                {
                  v93 = v106[4];
                  if (v86 < (v106[5] - v93) >> 3)
                  {
                    v94 = *(_QWORD *)(v93 + 8 * v86);
                    if (v94)
                    {
                      v95 = *(unsigned __int16 *)(v94 + 2 * (v85 & 0x7F));
                      v97 = v106[7];
                      v96 = v106[8];
                      if (v95 < (v96 - v97) >> 3)
                      {
                        v98 = v97 + 8 * v95;
                        if (v98 != v96 && *(_DWORD *)(v98 + 4) == (_DWORD)v85)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v107 = v84;
          _ZF = v84++ == v9;
          if (_ZF)
            goto LABEL_10;
        }
        v9 = v84 - 1;
      }
LABEL_10:
      if (v103 == v9)
        goto LABEL_125;
    }
  }
  result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_125:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F724CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
      std::__shared_weak_count::__release_weak(a28);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42832A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42832A8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42832F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42832F0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xA219A074B7259E0FLL;
  v2[1] = "md::ls::InView]";
  *(_QWORD *)&result = 14;
  *((_OWORD *)v2 + 1) = xmmword_19FFB43F0;
  v2[4] = "md::ls::MeshRenderableID]";
  v2[5] = 24;
  v2[6] = 0xB6C12FBB402E8E70;
  v2[7] = "md::ls::RenderableMaterialData]";
  v2[8] = 30;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42761F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42761F8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  float v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275658;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = v13[1];
  if ((v14 & (v14 - 1)) != 0)
  {
    v16 = 0x1AF456233693CD46;
    if (v14 <= 0x1AF456233693CD46)
      v16 = 0x1AF456233693CD46 % v14;
    v15 = *(_QWORD **)(*v13 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  else
  {
    v15 = *(_QWORD **)(*v13 + 8 * ((v14 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  v30 = fmaxf(*(float *)(*(_QWORD *)(v15[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v15[5] + 32) + 3076), 1.0);
  v29 = 0;
  v17 = **v3;
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0x4EDAD23DFB014132)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_33;
    }
  }
  if (v18 == v19)
  {
LABEL_33:
    v21 = 0;
  }
  else
  {
    v21 = v18[3];
    v20 = (std::__shared_weak_count *)v18[4];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v29 = v21;
  v25 = operator new(0x20uLL);
  *v25 = &off_1E427B3D0;
  v25[1] = &v29;
  v25[2] = &v30;
  v25[3] = v3;
  v32 = v25;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v31);
  v26 = v32;
  if (v32 == v31)
  {
    v27 = 4;
    v26 = v31;
    goto LABEL_38;
  }
  if (v32)
  {
    v27 = 5;
LABEL_38:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7251E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 4 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 8 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 32 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::InView>(v1);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v4 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42849B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42849B8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284A00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284A00;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB44D0;
  v2[4] = "md::ls::MeshLayerTypeV]";
  v2[5] = 22;
  v2[6] = 0xCC16A20B07DB93CCLL;
  v2[7] = "md::ls::InstanceDataV]";
  v2[8] = 21;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xA219A074B7259E0FLL;
    v2[10] = "md::ls::InView]";
    v2[11] = 14;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xA219A074B7259E0FLL;
  *((_QWORD *)v10 + 1) = "md::ls::InView]";
  *((_QWORD *)v10 + 2) = 14;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F725948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276D80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276D80;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  BOOL v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD v76[6];
  _QWORD *v77;
  char v78;
  _QWORD v79[2];
  int v80;
  _QWORD *v81;
  _QWORD v82[2];
  int v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceDataV>(v2);
  v6 = gdc::Registry::storage<md::ls::InView>(v2);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v3 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v8 = v4 + 4;
  if (v5[8] - v5[7] < v8[4] - v8[3])
    v8 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v76[0] = v8;
  v76[1] = v3;
  v73 = (_QWORD *)v3;
  v76[2] = v4;
  v76[3] = v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v74 = v8;
  v76[4] = v6;
  v77 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v76))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v77 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v76);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v75 = result;
  if (v10 != v9)
  {
    while (1)
    {
      v15 = *v9;
      *v75 = *v9;
      v16 = *v9;
      v17 = HIDWORD(*v9);
      v18 = *v9 >> 39;
      v19 = v4[4];
      if (v18 < (v4[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v4[7],
            v22 = v4[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (_BYTE *)(v4[10] + v21);
      }
      else
      {
        v26 = (_BYTE *)v4[11];
      }
      v27 = v5[4];
      if (v18 < (v5[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v5[7],
            v30 = v5[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = (uint64_t *)(v5[10] + 16 * v29);
      }
      else
      {
        v34 = (uint64_t *)v5[11];
      }
      if (*v26 == 3)
        goto LABEL_45;
      v35 = *v34;
      if (*(_DWORD *)(v35 + 16) > 1u || !*(_BYTE *)(v35 + 20))
        goto LABEL_45;
      v36 = *(_QWORD **)(a1 + 8);
      v79[0] = &off_1E4280290;
      v79[1] = v15 << 32;
      v80 = HIDWORD(v15);
      v81 = v79;
      v84 = v82;
      v82[0] = &off_1E4280290;
      v82[1] = v15 << 32;
      v83 = HIDWORD(v15);
      v85 = 0;
      ecs2::Runtime::queueCommand(v36, (uint64_t)v82);
      if (v85 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v85])(&v78, v82);
      v85 = -1;
      result = v81;
      if (v81 == v79)
        break;
      if (v81)
      {
        v37 = 5;
LABEL_44:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v37))();
      }
LABEL_45:
      v38 = (_QWORD *)v74[4];
      v14 = v9 + 1;
      v77 = v9 + 1;
      if (v9 + 1 != v38)
      {
        v39 = v73[4];
        v41 = v73[7];
        v40 = v73[8];
        v42 = v4[4];
        result = (_QWORD *)v4[7];
        v43 = (_QWORD *)v4[8];
        v44 = v5[4];
        v46 = v5[7];
        v45 = v5[8];
        v47 = v7[4];
        v48 = v7[7];
        v49 = v7[8];
        while (1)
        {
          v50 = *((unsigned int *)v14 + 1);
          v51 = v50 >> 7;
          if (v50 >> 7 < (v73[5] - v39) >> 3)
          {
            v52 = *(_QWORD *)(v39 + 8 * v51);
            if (v52)
            {
              v53 = v50 & 0x7F;
              v54 = *(unsigned __int16 *)(v52 + 2 * v53);
              if ((v40 - v41) >> 3 > v54)
              {
                v55 = v41 + 8 * v54;
                v56 = v55 != v40 && *(_DWORD *)(v55 + 4) == (_DWORD)v50;
                if (v56 && v51 < (v4[5] - v42) >> 3)
                {
                  v58 = *(_QWORD *)(v42 + 8 * v51);
                  if (v58)
                  {
                    v59 = *(unsigned __int16 *)(v58 + 2 * v53);
                    if (v43 - result > v59)
                    {
                      v60 = &result[v59];
                      v61 = v60 != v43 && *((_DWORD *)v60 + 1) == (_DWORD)v50;
                      if (v61 && v51 < (v5[5] - v44) >> 3)
                      {
                        v63 = *(_QWORD *)(v44 + 8 * v51);
                        if (v63)
                        {
                          v64 = *(unsigned __int16 *)(v63 + 2 * v53);
                          if ((v45 - v46) >> 3 > v64)
                          {
                            v65 = v46 + 8 * v64;
                            v66 = v65 != v45 && *(_DWORD *)(v65 + 4) == (_DWORD)v50;
                            if (v66 && v51 < (v7[5] - v47) >> 3)
                            {
                              v68 = *(_QWORD *)(v47 + 8 * v51);
                              if (v68)
                              {
                                v69 = *(unsigned __int16 *)(v68 + 2 * v53);
                                if ((v49 - v48) >> 3 > v69)
                                {
                                  v70 = v48 + 8 * v69;
                                  if (*(_DWORD *)(v70 + 4) == (_DWORD)v50 && v70 != v49)
                                    break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v38)
          {
            v14 = v38;
            goto LABEL_15;
          }
        }
        v38 = v14;
LABEL_15:
        v77 = v14;
      }
      v9 = v38;
      if (v10 == v38)
        goto LABEL_83;
    }
    result = v79;
    v37 = 4;
    goto LABEL_44;
  }
LABEL_83:
  *v75 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::InstanceDataV>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCC16A20B07DB93CCLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCC16A20B07DB93CCLL;
      if (*(_QWORD *)&v3 <= 0xCC16A20B07DB93CCLL)
        v5 = 0xCC16A20B07DB93CCLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCC16A20B07DB93CCLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCC16A20B07DB93CCLL)
            {
              if (v7[2] == 0xCC16A20B07DB93CCLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCC16A20B07DB93CCLL)
          {
            if (v7[2] == 0xCC16A20B07DB93CCLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::InstanceDataV]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271538;
  *(_QWORD *)(v11 + 8) = 0xCC16A20B07DB93CCLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCC16A20B07DB93CCLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCC16A20B07DB93CCLL;
  v15[1] = "md::ls::InstanceDataV]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCC16A20B07DB93CCLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F726084(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v32 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v17 = *(_QWORD *)(v15 - 16);
  v16 = *(_QWORD *)(v15 - 8);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)v14[1];
  *v14 = v17;
  v14[1] = v16;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[11];
  v24 = *(std::__shared_weak_count **)(v23 - 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  a1[11] = v23 - 16;
  v27 = (_QWORD *)a1[28];
  if (!v27)
    return 1;
  v28 = a1[31];
  while (1)
  {
    v34[0] = &v32;
    v34[1] = 1;
    v33 = v28;
    v29 = v27[6];
    if (!v29)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v29 + 48))(v29, &v33, v34);
    v27 = (_QWORD *)*v27;
    if (!v27)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::contains(v30, v31);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288678;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288678;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42886C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42886C0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x3209EBE3B62CF3D3;
  v2[1] = "md::ls::UniqueMaterialData]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB44E0;
  v2[4] = "md::ls::UniqueMaterialAlbedoTexture]";
  v2[5] = 35;
  v2[6] = 0xBEF372B431A710A8;
  v2[7] = "md::ls::UnitsPerMeter]";
  v2[8] = 21;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xD6C8660F950CD951;
    v2[10] = "md::ls::CanUpdateWithStyleZChange]";
    v2[11] = 33;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xD6C8660F950CD951;
  *((_QWORD *)v10 + 1) = "md::ls::CanUpdateWithStyleZChange]";
  *((_QWORD *)v10 + 2) = 33;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F726580(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278BE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278BE0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t result;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275268;
  v4[1] = a2;
  v42 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v41 = 0;
  v42 = v9;
  v13 = **v3;
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x4EDAD23DFB014132)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_24;
    }
  }
  if (v14 == v15)
  {
LABEL_24:
    v17 = 0;
  }
  else
  {
    v17 = v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v40 = 0;
  v41 = v17;
  v21 = **v3;
  v22 = *(_QWORD **)v21;
  v23 = *(_QWORD **)(v21 + 8);
  if (v22 != v23)
  {
    while (*v22 != 0x348A0B0E758C07C2)
    {
      v22 += 5;
      if (v22 == v23)
        goto LABEL_36;
    }
  }
  if (v22 == v23)
  {
LABEL_36:
    v25 = 0;
  }
  else
  {
    v25 = v22[3];
    v24 = (std::__shared_weak_count *)v22[4];
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v40 = v25;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "daVinciPlanarOverride");

  v39 = v30;
  if (v30)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "daVinciPlanarPixelPerMeterOverride");
    v33 = v32;

  }
  else
  {
    v33 = 1107296256;
  }
  v38 = v33;
  v34 = operator new(0x38uLL);
  *v34 = &off_1E427C5D0;
  v34[1] = &v41;
  v34[2] = &v40;
  v34[3] = &v39;
  v34[4] = &v38;
  v34[5] = &v42;
  v34[6] = v3;
  v44 = v34;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v43);
  v35 = v44;
  if (v44 == v43)
  {
    v36 = 4;
    v35 = v43;
    goto LABEL_44;
  }
  if (v44)
  {
    v36 = 5;
LABEL_44:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F726958(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *CanUpdateWithStyle;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UnitsPerMeter>(v2);
  CanUpdateWithStyle = (_QWORD *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)CanUpdateWithStyle;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (CanUpdateWithStyle[8] - CanUpdateWithStyle[7] < v7[4] - v7[3])
    v7 = CanUpdateWithStyle + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 12 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = CanUpdateWithStyle[4], v17 < (CanUpdateWithStyle[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = CanUpdateWithStyle[7],
            v51 = CanUpdateWithStyle[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = CanUpdateWithStyle[11];
        v56 = CanUpdateWithStyle[10] + 4 * v50;
      }
      else
      {
        v55 = CanUpdateWithStyle[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t CanUpdateWithStyle;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  v3 = gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v1);
  v4 = gdc::Registry::storage<md::ls::UnitsPerMeter>(v1);
  CanUpdateWithStyle = gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = CanUpdateWithStyle;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(CanUpdateWithStyle + 64) - *(_QWORD *)(CanUpdateWithStyle + 56) < *(_QWORD *)(v6 + 64)
                                                                                   - *(_QWORD *)(v6 + 56))
    v6 = CanUpdateWithStyle;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::UnitsPerMeter>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBEF372B431A710A8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBEF372B431A710A8;
      if (*(_QWORD *)&v3 <= 0xBEF372B431A710A8)
        v5 = 0xBEF372B431A710A8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBEF372B431A710A8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBEF372B431A710A8)
            {
              if (v7[2] == 0xBEF372B431A710A8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBEF372B431A710A8)
          {
            if (v7[2] == 0xBEF372B431A710A8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UnitsPerMeter]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42716B8;
  *(_QWORD *)(v11 + 8) = 0xBEF372B431A710A8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBEF372B431A710A8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBEF372B431A710A8;
  v15[1] = "md::ls::UnitsPerMeter]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBEF372B431A710A8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7270F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD6C8660F950CD951;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD6C8660F950CD951;
      if (*(_QWORD *)&v3 <= 0xD6C8660F950CD951)
        v5 = 0xD6C8660F950CD951 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD6C8660F950CD951;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD6C8660F950CD951)
            {
              if (v7[2] == 0xD6C8660F950CD951)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD6C8660F950CD951)
          {
            if (v7[2] == 0xD6C8660F950CD951)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CanUpdateWithStyleZChange]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273008;
  *(_QWORD *)(v11 + 8) = 0xD6C8660F950CD951;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD6C8660F950CD951, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD6C8660F950CD951;
  v15[1] = "md::ls::CanUpdateWithStyleZChange]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD6C8660F950CD951, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F727318(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 12 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 12);
  v15 -= 12;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  v14[2] = *(_DWORD *)(v15 + 8);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288EE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288EE8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288F30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288F30;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB44F0;
  v2[4] = "md::ls::UnitsPerMeter]";
  v2[5] = 21;
  v2[6] = 0xA219A074B7259E0FLL;
  v2[7] = "md::ls::InView]";
  v2[8] = 14;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279018;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t result;
  int v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274E18;
  v4[1] = a2;
  v45 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v45 = v9;
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = (int8x8_t)v21[1];
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] >= 2uLL)
  {
    v26 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v22 <= 0x1AF456233693CD46uLL)
      v26 = 0x1AF456233693CD46uLL % *(_QWORD *)&v22;
    v25 = **(_QWORD ***)(*v21 + 8 * v26);
    v24 = *(_QWORD *)&v22 - 1;
    while (v25[1] != 0x1AF456233693CD46 || v25[2] != 0x1AF456233693CD46)
      v25 = (_QWORD *)*v25;
  }
  else
  {
    v24 = *(_QWORD *)&v22 - 1;
    v25 = *(_QWORD **)(*v21 + 8 * ((*(_QWORD *)&v22 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v25 = (_QWORD *)*v25;
      while (v25[1] != 0x1AF456233693CD46);
    }
    while (v25[2] != 0x1AF456233693CD46);
  }
  v44 = *(_QWORD *)(v25[5] + 32);
  v43 = fmaxf(*(float *)(v44 + 3080) + *(float *)(v44 + 3076), 1.0);
  if (v23.u32[0] > 1uLL)
  {
    v27 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v22 <= 0x41E8D6E445F4145uLL)
      v27 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v22;
  }
  else
  {
    v27 = (*(_QWORD *)&v22 - 1) & 0x41E8D6E445F4145;
  }
  v28 = *(_QWORD **)(*v21 + 8 * v27);
  if (!v28)
    goto LABEL_66;
  v29 = (_QWORD *)*v28;
  if (!v29)
    goto LABEL_66;
  if (v23.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v29[1];
      if (v30 == 0x41E8D6E445F4145)
      {
        if (v29[2] == 0x41E8D6E445F4145)
          goto LABEL_55;
      }
      else if ((v30 & v24) != v27)
      {
        goto LABEL_66;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_66;
    }
  }
  while (1)
  {
    v31 = v29[1];
    if (v31 == 0x41E8D6E445F4145)
      break;
    if (v31 >= *(_QWORD *)&v22)
      v31 %= *(_QWORD *)&v22;
    if (v31 != v27)
      goto LABEL_66;
LABEL_49:
    v29 = (_QWORD *)*v29;
    if (!v29)
      goto LABEL_66;
  }
  if (v29[2] != 0x41E8D6E445F4145)
    goto LABEL_49;
LABEL_55:
  v32 = v29[5];
  if (*(_QWORD *)(v32 + 8) == 0x41E8D6E445F4145)
  {
    v33 = *(_QWORD *)(v32 + 32);
    if (v33)
    {
      v34 = *(unsigned __int8 *)(v33 + 226);
      v35 = *(float *)(v33 + 200);
      v41 = *(_DWORD *)(v33 + 196);
      v42 = v35;
      if (v34 && v35 >= 0.001)
      {
        v37 = operator new(0x38uLL);
        *v37 = &off_1E427C8A0;
        v37[1] = &v44;
        v37[2] = &v41;
        v37[3] = &v43;
        v37[4] = &v42;
        v37[5] = &v45;
        v37[6] = v3;
        v47 = v37;
        (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v46);
        v38 = v47;
        if (v47 == v46)
        {
          v39 = 4;
          v38 = v46;
LABEL_65:
          (*(void (**)(void))(*v38 + 8 * v39))();
        }
        else if (v47)
        {
          v39 = 5;
          goto LABEL_65;
        }
      }
    }
  }
LABEL_66:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F727C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UnitsPerMeter>(v3);
  v6 = gdc::Registry::storage<md::ls::InView>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 12 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 4 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::UnitsPerMeter>(v1);
  v4 = gdc::Registry::storage<md::ls::InView>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286E48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286E48;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286E90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286E90;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB44B0;
  v2[4] = "md::ls::RenderablePendingProcessing]";
  v2[5] = 35;
  v2[6] = 0x7A5110AF346E0C7FLL;
  v2[7] = "md::ls::MaterialRasterMaxIndex]";
  v2[8] = 30;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277FC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277FC8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x8_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint64_t ***v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _BYTE *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint8x8_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  float v110;
  float v111;
  _BOOL8 v112;
  unint64_t v113;
  unint64_t v114;
  size_t prime;
  unint64_t v116;
  uint8x8_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  uint8x8_t v123;
  void **v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  _BOOL8 v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  size_t v139;
  size_t v140;
  size_t v141;
  _QWORD *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint8x8_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint8x8_t v158;
  void **v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  float v163;
  float v164;
  _BOOL8 v165;
  unint64_t v166;
  unint64_t v167;
  size_t v168;
  void *v169;
  void *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  size_t v174;
  size_t v175;
  size_t v176;
  _QWORD *v177;
  size_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint8x8_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  size_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint8x8_t v198;
  _QWORD **v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  float v203;
  _QWORD *v204;
  float v205;
  _BOOL8 v206;
  unint64_t v207;
  unint64_t v208;
  size_t v209;
  void *v210;
  void *v211;
  uint64_t v212;
  _QWORD *v213;
  size_t v214;
  size_t v215;
  size_t v216;
  _QWORD *v217;
  size_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint8x8_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  size_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  unsigned int v235;
  uint64_t result;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int64x2_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  _WORD *v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  char v271;
  uint64_t (**v272)();
  __int128 v273;
  uint64_t (***v274)();
  uint64_t (**v275)();
  __int128 v276;
  uint64_t (***v277)();
  int v278;
  uint64_t v279;

  v2 = a1;
  v279 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = gdc::Registry::storage<md::ls::RenderablePendingProcessing>(v3);
  v6 = gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(v3);
  v7 = (_QWORD *)v6;
  v8 = v6 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v9 = v4;
  else
    v9 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= *(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56))
    v8 = v9 + 32;
  v10 = *(_QWORD **)(v8 + 24);
  v266 = v8;
  v267 = (_QWORD *)v4;
  v268 = (_QWORD *)v5;
  v269 = (_QWORD *)v6;
  v270 = v10;
  v264 = *(_QWORD **)(v8 + 32);
  if (v264 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v266))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v270 = v11;
      if (v11 == v264)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v266);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v264 != v10)
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v260 = vdupq_n_s64(1uLL);
    v262 = v7;
    v263 = v2;
    v261 = v13;
    while (1)
    {
      *v13 = *v10;
      v15 = *v10;
      v16 = *v10 >> 39;
      v17 = v7[4];
      if (v16 < (v7[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v15) & 0x7F)),
            v21 = v7[7],
            v20 = v7[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = HIDWORD(v15), v23 = v21 + 8 * v19, v23 != v20)
          ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v22)
          : (v24 = 0),
            v24))
      {
        v25 = v7[11];
        v26 = v7[10] + 2 * v19;
      }
      else
      {
        v25 = v7[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = (unsigned __int8 *)v26;
      v28 = **(_QWORD **)(v2 + 8);
      v29 = *(_QWORD **)v28;
      v30 = *(_QWORD **)(v28 + 8);
      if (v29 != v30)
      {
        while (*v29 != 0x41D4E9297E100630)
        {
          v29 += 5;
          if (v29 == v30)
            goto LABEL_38;
        }
      }
      if (v29 == v30)
      {
LABEL_38:
        v32 = 0;
      }
      else
      {
        v32 = v29[3];
        v31 = (std::__shared_weak_count *)v29[4];
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      v36 = *v27;
      v37 = *(int8x8_t *)(v32 + 3160);
      if (!*(_QWORD *)&v37)
        goto LABEL_63;
      v38 = (uint8x8_t)vcnt_s8(v37);
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.u32[0] > 1uLL)
      {
        v39 = *v27;
        if (*(_QWORD *)&v37 <= v36)
          v39 = v36 % *(_QWORD *)&v37;
      }
      else
      {
        v39 = (v37.i32[0] - 1) & v36;
      }
      v40 = *(uint64_t ****)(*(_QWORD *)(v32 + 3152) + 8 * v39);
      if (!v40)
        goto LABEL_63;
      v41 = *v40;
      if (!v41)
        goto LABEL_63;
      if (v38.u32[0] < 2uLL)
      {
        v42 = *(_QWORD *)&v37 - 1;
        while (1)
        {
          v43 = v41[1];
          if (v43 == (uint64_t *)v36)
          {
            if (*((unsigned __int8 *)v41 + 16) == (_DWORD)v36)
              goto LABEL_61;
          }
          else if (((unint64_t)v43 & v42) != v39)
          {
            goto LABEL_63;
          }
          v41 = (uint64_t **)*v41;
          if (!v41)
            goto LABEL_63;
        }
      }
      while (1)
      {
        v44 = (unint64_t)v41[1];
        if (v44 == v36)
          break;
        if (v44 >= *(_QWORD *)&v37)
          v44 %= *(_QWORD *)&v37;
        if (v44 != v39)
          goto LABEL_63;
LABEL_54:
        v41 = (uint64_t **)*v41;
        if (!v41)
          goto LABEL_63;
      }
      if (*((unsigned __int8 *)v41 + 16) != (_DWORD)v36)
        goto LABEL_54;
LABEL_61:
      v45 = (unint64_t)v41[3];
      if (v45)
      {
        v275 = (uint64_t (**)())v41[3];
        v46 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>> const&>,std::tuple<>>(v32 + 2976, v45, &v275);
        ++v46[4];
        v2 = v263;
        v47 = *(_QWORD **)(v263 + 8);
        v13 = v261;
        v48 = *v261;
        v272 = &off_1E4281B50;
        *(_QWORD *)&v273 = v45;
        goto LABEL_453;
      }
LABEL_63:
      v49 = *(_QWORD *)(v32 + 3024);
      v265 = v27;
      if (*(_QWORD *)(v32 + 3016) != v49)
      {
        v50 = *(_QWORD *)(v49 - 8);
        *(_QWORD *)(v32 + 3024) = v49 - 8;
        *(_DWORD *)(*(_QWORD *)(v32 + 3040) + 8 * v50) = -1431655765
                                                       * ((*(_QWORD *)(v32 + 3072) - *(_QWORD *)(v32 + 3064)) >> 3);
        *(_DWORD *)(*(_QWORD *)(v32 + 3040) + 8 * v50 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v32 + 3040)
                                                                                                 + 8 * v50
                                                                                                 + 4) << 32)
                                                            + 0x100000000) >> 32;
        v51 = v50 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v32 + 3040) + 8 * v50 + 4) << 32);
        goto LABEL_88;
      }
      v52 = (-1431655765 * ((*(_QWORD *)(v32 + 3072) - *(_QWORD *)(v32 + 3064)) >> 3)) | 0x100000000;
      v53 = *(uint64_t **)(v32 + 3048);
      v54 = *(_QWORD *)(v32 + 3056);
      if ((unint64_t)v53 >= v54)
      {
        v56 = *(char **)(v32 + 3040);
        v57 = ((char *)v53 - v56) >> 3;
        v58 = v57 + 1;
        if (!((unint64_t)(v57 + 1) >> 61))
        {
          v59 = v54 - (_QWORD)v56;
          if (v59 >> 2 > v58)
            v58 = v59 >> 2;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
            v60 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            if (v60 >> 61)
              goto LABEL_489;
            v61 = (char *)operator new(8 * v60);
          }
          else
          {
            v61 = 0;
          }
          v62 = (uint64_t *)&v61[8 * v57];
          *v62 = v52;
          v55 = v62 + 1;
          if (v53 != (uint64_t *)v56)
          {
            v63 = (char *)v53 - v56 - 8;
            if (v63 < 0x58)
              goto LABEL_493;
            if ((unint64_t)(v56 - v61) < 0x20)
              goto LABEL_493;
            v64 = (v63 >> 3) + 1;
            v65 = &v61[8 * v57 - 16];
            v66 = v53 - 2;
            v67 = v64 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *(_OWORD *)v66;
              *((_OWORD *)v65 - 1) = *((_OWORD *)v66 - 1);
              *(_OWORD *)v65 = v68;
              v65 -= 32;
              v66 -= 4;
              v67 -= 4;
            }
            while (v67);
            v62 -= v64 & 0x3FFFFFFFFFFFFFFCLL;
            v53 -= v64 & 0x3FFFFFFFFFFFFFFCLL;
            if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_493:
              do
              {
                v69 = *--v53;
                *--v62 = v69;
              }
              while (v53 != (uint64_t *)v56);
            }
            v53 = *(uint64_t **)(v32 + 3040);
          }
          *(_QWORD *)(v32 + 3040) = v62;
          *(_QWORD *)(v32 + 3048) = v55;
          *(_QWORD *)(v32 + 3056) = &v61[8 * v60];
          if (v53)
            operator delete(v53);
          goto LABEL_87;
        }
LABEL_490:
        abort();
      }
      *v53 = v52;
      v55 = v53 + 1;
LABEL_87:
      *(_QWORD *)(v32 + 3048) = v55;
      v51 = *(v55 - 1);
LABEL_88:
      v70 = *(_QWORD **)(v32 + 3072);
      v71 = *(_QWORD *)(v32 + 3080);
      if ((unint64_t)v70 < v71)
      {
        *v70 = 0;
        v70[1] = 0;
        v72 = v70 + 3;
        v70[2] = 0;
        goto LABEL_110;
      }
      v73 = *(_QWORD **)(v32 + 3064);
      v74 = 0xAAAAAAAAAAAAAAABLL * (v70 - v73) + 1;
      if (v74 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_490;
      v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v73) >> 3);
      if (2 * v75 > v74)
        v74 = 2 * v75;
      if (v75 >= 0x555555555555555)
        v76 = 0xAAAAAAAAAAAAAAALL;
      else
        v76 = v74;
      if (v76 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_489;
      v77 = (char *)operator new(24 * v76);
      v78 = &v77[8 * (v70 - v73)];
      v79 = &v77[24 * v76];
      *(_QWORD *)v78 = 0;
      *((_QWORD *)v78 + 1) = 0;
      *((_QWORD *)v78 + 2) = 0;
      v72 = v78 + 24;
      if (v70 == v73)
      {
        *(_QWORD *)(v32 + 3064) = v78;
        *(_QWORD *)(v32 + 3072) = v72;
        *(_QWORD *)(v32 + 3080) = v79;
      }
      else
      {
        do
        {
          v80 = *(_OWORD *)(v70 - 3);
          v70 -= 3;
          *(_OWORD *)(v78 - 24) = v80;
          v78 -= 24;
          *((_QWORD *)v78 + 2) = v70[2];
          v70[1] = 0;
          v70[2] = 0;
        }
        while (v70 != v73);
        v70 = *(_QWORD **)(v32 + 3064);
        v81 = *(_QWORD **)(v32 + 3072);
        *(_QWORD *)(v32 + 3064) = v78;
        *(_QWORD *)(v32 + 3072) = v72;
        *(_QWORD *)(v32 + 3080) = v79;
        while (v81 != v70)
        {
          v82 = (std::__shared_weak_count *)*(v81 - 1);
          if (v82)
          {
            v83 = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v81 -= 3;
        }
      }
      if (v70)
        operator delete(v70);
LABEL_110:
      *(_QWORD *)(v32 + 3072) = v72;
      v85 = *(_QWORD *)(v32 + 3096);
      v86 = *(_QWORD *)(v32 + 3104);
      if (v85 < v86)
      {
        *(_QWORD *)v85 = v51;
        v85 += 8;
        v87 = (_QWORD *)v85;
        goto LABEL_131;
      }
      v88 = *(_BYTE **)(v32 + 3088);
      v89 = (uint64_t)(v85 - (_QWORD)v88) >> 3;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 61)
        goto LABEL_490;
      v91 = v86 - (_QWORD)v88;
      if (v91 >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        if (!(v92 >> 61))
        {
          v93 = operator new(8 * v92);
          goto LABEL_122;
        }
LABEL_489:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v93 = 0;
LABEL_122:
      v94 = &v93[8 * v89];
      *v94 = v51;
      v87 = v94 + 1;
      if ((_BYTE *)v85 != v88)
      {
        v95 = v85 - (_QWORD)v88 - 8;
        if (v95 < 0x58)
          goto LABEL_494;
        if ((unint64_t)(v88 - v93) < 0x20)
          goto LABEL_494;
        v96 = (v95 >> 3) + 1;
        v97 = &v93[8 * v89 - 16];
        v98 = (__int128 *)(v85 - 16);
        v99 = v96 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v100 = *v98;
          *(v97 - 1) = *(v98 - 1);
          *v97 = v100;
          v97 -= 2;
          v98 -= 2;
          v99 -= 4;
        }
        while (v99);
        v94 -= v96 & 0x3FFFFFFFFFFFFFFCLL;
        v85 -= 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
        if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_494:
          do
          {
            v101 = *(_QWORD *)(v85 - 8);
            v85 -= 8;
            *--v94 = v101;
          }
          while ((_BYTE *)v85 != v88);
        }
      }
      *(_QWORD *)(v32 + 3088) = v94;
      *(_QWORD *)(v32 + 3096) = v87;
      *(_QWORD *)(v32 + 3104) = &v93[8 * v92];
      if (v88)
        operator delete(v88);
LABEL_131:
      *(_QWORD *)(v32 + 3096) = v87;
      v102 = (uint64_t *)(v32 + 2976);
      v103 = *(_QWORD *)(v32 + 2984);
      if (v103)
      {
        v104 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
        v104.i16[0] = vaddlv_u8(v104);
        if (v104.u32[0] > 1uLL)
        {
          v85 = v51;
          if (v51 >= v103)
            v85 = v51 % v103;
        }
        else
        {
          v85 = (v103 - 1) & v51;
        }
        v105 = *(_QWORD **)(*v102 + 8 * v85);
        if (v105)
        {
          v106 = (_QWORD *)*v105;
          if (v106)
          {
            if (v104.u32[0] < 2uLL)
            {
              while (1)
              {
                v108 = v106[1];
                if (v108 == v51)
                {
                  if (v106[2] == v51)
                    goto LABEL_190;
                }
                else if ((v108 & (v103 - 1)) != v85)
                {
                  goto LABEL_151;
                }
                v106 = (_QWORD *)*v106;
                if (!v106)
                  goto LABEL_151;
              }
            }
            do
            {
              v107 = v106[1];
              if (v107 == v51)
              {
                if (v106[2] == v51)
                  goto LABEL_190;
              }
              else
              {
                if (v107 >= v103)
                  v107 %= v103;
                if (v107 != v85)
                  break;
              }
              v106 = (_QWORD *)*v106;
            }
            while (v106);
          }
        }
      }
LABEL_151:
      v109 = (char *)operator new(0x30uLL);
      *(_QWORD *)v109 = 0;
      *((_QWORD *)v109 + 1) = v51;
      *((_QWORD *)v109 + 2) = v51;
      *(int64x2_t *)(v109 + 24) = v260;
      v109[40] = 0;
      v110 = (float)(unint64_t)(*(_QWORD *)(v32 + 3000) + 1);
      v111 = *(float *)(v32 + 3008);
      if ((((float)(v111 * (float)v103) >= v110) & ~(v103 == 0)) != 0)
      {
        v102 = (uint64_t *)(v32 + 2976);
      }
      else
      {
        v102 = (uint64_t *)(v32 + 2976);
        v112 = v103 < 3 || (v103 & (v103 - 1)) != 0;
        v113 = v112 | (2 * v103);
        v114 = vcvtps_u32_f32(v110 / v111);
        if (v113 <= v114)
          prime = v114;
        else
          prime = v113;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v103 = *(_QWORD *)(v32 + 2984);
        }
        if (prime > v103)
          goto LABEL_164;
        if (prime < v103)
        {
          v116 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3000) / *(float *)(v32 + 3008));
          if (v103 < 3
            || (v117 = (uint8x8_t)vcnt_s8((int8x8_t)v103), v117.i16[0] = vaddlv_u8(v117), v117.u32[0] > 1uLL))
          {
            v116 = std::__next_prime(v116);
          }
          else
          {
            v118 = 1 << -(char)__clz(v116 - 1);
            if (v116 >= 2)
              v116 = v118;
          }
          if (prime <= v116)
            prime = v116;
          if (prime < v103)
LABEL_164:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v32 + 2976, prime);
        }
        v103 = *(_QWORD *)(v32 + 2984);
        if ((v103 & (v103 - 1)) != 0)
        {
          if (v51 >= v103)
            v85 = v51 % v103;
          else
            v85 = v51;
        }
        else
        {
          v85 = (v103 - 1) & v51;
        }
      }
      v119 = *v102;
      v120 = *(_QWORD **)(*v102 + 8 * v85);
      if (v120)
      {
        *(_QWORD *)v109 = *v120;
        goto LABEL_188;
      }
      *(_QWORD *)v109 = *(_QWORD *)(v32 + 2992);
      *(_QWORD *)(v32 + 2992) = v109;
      *(_QWORD *)(v119 + 8 * v85) = v32 + 2992;
      if (*(_QWORD *)v109)
      {
        v121 = *(_QWORD *)(*(_QWORD *)v109 + 8);
        if ((v103 & (v103 - 1)) != 0)
        {
          if (v121 >= v103)
            v121 %= v103;
        }
        else
        {
          v121 &= v103 - 1;
        }
        v120 = (_QWORD *)(*v102 + 8 * v121);
LABEL_188:
        *v120 = v109;
      }
      ++*(_QWORD *)(v32 + 3000);
LABEL_190:
      v122 = *(_QWORD *)(v32 + 3160);
      if (v122)
      {
        v123 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
        v123.i16[0] = vaddlv_u8(v123);
        if (v123.u32[0] > 1uLL)
        {
          v85 = v36;
          if (v122 <= v36)
            v85 = v36 % v122;
        }
        else
        {
          v85 = ((_DWORD)v122 - 1) & v36;
        }
        v124 = *(void ***)(*(_QWORD *)(v32 + 3152) + 8 * v85);
        if (v124)
        {
          v125 = *v124;
          if (*v124)
          {
            if (v123.u32[0] < 2uLL)
            {
              while (1)
              {
                v127 = v125[1];
                if (v127 == v36)
                {
                  if (*((unsigned __int8 *)v125 + 16) == (_DWORD)v36)
                    goto LABEL_276;
                }
                else if ((v127 & (v122 - 1)) != v85)
                {
                  goto LABEL_210;
                }
                v125 = (_QWORD *)*v125;
                if (!v125)
                  goto LABEL_210;
              }
            }
            do
            {
              v126 = v125[1];
              if (v126 == v36)
              {
                if (*((unsigned __int8 *)v125 + 16) == (_DWORD)v36)
                  goto LABEL_276;
              }
              else
              {
                if (v126 >= v122)
                  v126 %= v122;
                if (v126 != v85)
                  break;
              }
              v125 = (_QWORD *)*v125;
            }
            while (v125);
          }
        }
      }
LABEL_210:
      v125 = operator new(0x20uLL);
      *v125 = 0;
      v125[1] = v36;
      *((_BYTE *)v125 + 16) = v36;
      v125[3] = 0;
      v128 = (float)(unint64_t)(*(_QWORD *)(v32 + 3176) + 1);
      v129 = *(float *)(v32 + 3184);
      if ((((float)(v129 * (float)v122) >= v128) & ~(v122 == 0)) == 0)
      {
        v130 = (v122 & (v122 - 1)) != 0;
        if (v122 < 3)
          v130 = 1;
        v131 = v130 | (2 * v122);
        v132 = vcvtps_u32_f32(v128 / v129);
        if (v131 <= v132)
          v133 = v132;
        else
          v133 = v131;
        if (v133 == 1)
        {
          v133 = 2;
        }
        else if ((v133 & (v133 - 1)) != 0)
        {
          v133 = std::__next_prime(v133);
          v122 = *(_QWORD *)(v32 + 3160);
        }
        if (v133 <= v122)
        {
          if (v133 < v122)
          {
            v146 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3176) / *(float *)(v32 + 3184));
            if (v122 < 3
              || (v147 = (uint8x8_t)vcnt_s8((int8x8_t)v122), v147.i16[0] = vaddlv_u8(v147), v147.u32[0] > 1uLL))
            {
              v146 = std::__next_prime(v146);
            }
            else
            {
              v148 = 1 << -(char)__clz(v146 - 1);
              if (v146 >= 2)
                v146 = v148;
            }
            if (v133 <= v146)
              v133 = v146;
            if (v133 < v122)
            {
              if (v133)
                goto LABEL_221;
              v153 = *(void **)(v32 + 3152);
              *(_QWORD *)(v32 + 3152) = 0;
              if (v153)
                operator delete(v153);
              *(_QWORD *)(v32 + 3160) = 0;
            }
          }
          goto LABEL_261;
        }
LABEL_221:
        if (v133 >> 61)
          goto LABEL_489;
        v134 = operator new(8 * v133);
        v135 = *(void **)(v32 + 3152);
        *(_QWORD *)(v32 + 3152) = v134;
        if (v135)
          operator delete(v135);
        v136 = 0;
        *(_QWORD *)(v32 + 3160) = v133;
        do
          *(_QWORD *)(*(_QWORD *)(v32 + 3152) + 8 * v136++) = 0;
        while (v133 != v136);
        v137 = *(_QWORD **)(v32 + 3168);
        if (!v137)
          goto LABEL_261;
        v138 = v32 + 3168;
        v139 = v137[1];
        v140 = v133 - 1;
        if ((v133 & (v133 - 1)) == 0)
        {
          v141 = v139 & v140;
          *(_QWORD *)(*(_QWORD *)(v32 + 3152) + 8 * v141) = v138;
          while (1)
          {
            v142 = (_QWORD *)*v137;
            if (!*v137)
              break;
            v143 = v142[1] & v140;
            if (v143 == v141)
            {
              v137 = (_QWORD *)*v137;
            }
            else
            {
              v144 = *(_QWORD *)(v32 + 3152);
              if (*(_QWORD *)(v144 + 8 * v143))
              {
                *v137 = *v142;
                v145 = 8 * v143;
                *v142 = **(_QWORD **)(*(_QWORD *)(v32 + 3152) + v145);
                **(_QWORD **)(*(_QWORD *)(v32 + 3152) + v145) = v142;
              }
              else
              {
                *(_QWORD *)(v144 + 8 * v143) = v137;
                v137 = v142;
                v141 = v143;
              }
            }
          }
          goto LABEL_261;
        }
        if (v139 >= v133)
          v139 %= v133;
        *(_QWORD *)(*(_QWORD *)(v32 + 3152) + 8 * v139) = v138;
        v149 = (_QWORD *)*v137;
        if (!*v137)
        {
LABEL_261:
          v122 = *(_QWORD *)(v32 + 3160);
          if ((v122 & (v122 - 1)) != 0)
          {
            if (v122 <= v36)
              v85 = v36 % v122;
            else
              v85 = v36;
          }
          else
          {
            v85 = ((_DWORD)v122 - 1) & v36;
          }
          goto LABEL_266;
        }
        while (2)
        {
          v151 = v149[1];
          if (v151 >= v133)
            v151 %= v133;
          if (v151 != v139)
          {
            v152 = *(_QWORD *)(v32 + 3152);
            if (!*(_QWORD *)(v152 + 8 * v151))
            {
              *(_QWORD *)(v152 + 8 * v151) = v137;
LABEL_247:
              v137 = v149;
              v149 = (_QWORD *)*v149;
              v139 = v151;
              if (!v149)
                goto LABEL_261;
              continue;
            }
            *v137 = *v149;
            v150 = 8 * v151;
            *v149 = **(_QWORD **)(*(_QWORD *)(v32 + 3152) + v150);
            **(_QWORD **)(*(_QWORD *)(v32 + 3152) + v150) = v149;
            v149 = v137;
          }
          break;
        }
        v151 = v139;
        goto LABEL_247;
      }
LABEL_266:
      v154 = *(_QWORD *)(v32 + 3152);
      v155 = *(_QWORD **)(v154 + 8 * v85);
      if (v155)
      {
        *v125 = *v155;
        goto LABEL_274;
      }
      *v125 = *(_QWORD *)(v32 + 3168);
      *(_QWORD *)(v32 + 3168) = v125;
      *(_QWORD *)(v154 + 8 * v85) = v32 + 3168;
      if (*v125)
      {
        v156 = *(_QWORD *)(*v125 + 8);
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v156 >= v122)
            v156 %= v122;
        }
        else
        {
          v156 &= v122 - 1;
        }
        v155 = (_QWORD *)(*(_QWORD *)(v32 + 3152) + 8 * v156);
LABEL_274:
        *v155 = v125;
      }
      ++*(_QWORD *)(v32 + 3176);
LABEL_276:
      v125[3] = v51;
      v157 = *(_QWORD *)(v32 + 3200);
      if (v157)
      {
        v158 = (uint8x8_t)vcnt_s8((int8x8_t)v157);
        v158.i16[0] = vaddlv_u8(v158);
        if (v158.u32[0] > 1uLL)
        {
          v85 = v51;
          if (v51 >= v157)
            v85 = v51 % v157;
        }
        else
        {
          v85 = (v157 - 1) & v51;
        }
        v159 = *(void ***)(*(_QWORD *)(v32 + 3192) + 8 * v85);
        if (v159)
        {
          v160 = *v159;
          if (*v159)
          {
            if (v158.u32[0] < 2uLL)
            {
              while (1)
              {
                v162 = v160[1];
                if (v162 == v51)
                {
                  if (v160[2] == v51)
                    goto LABEL_362;
                }
                else if ((v162 & (v157 - 1)) != v85)
                {
                  goto LABEL_296;
                }
                v160 = (_QWORD *)*v160;
                if (!v160)
                  goto LABEL_296;
              }
            }
            do
            {
              v161 = v160[1];
              if (v161 == v51)
              {
                if (v160[2] == v51)
                  goto LABEL_362;
              }
              else
              {
                if (v161 >= v157)
                  v161 %= v157;
                if (v161 != v85)
                  break;
              }
              v160 = (_QWORD *)*v160;
            }
            while (v160);
          }
        }
      }
LABEL_296:
      v160 = operator new(0x20uLL);
      *v160 = 0;
      v160[1] = v51;
      v160[2] = v51;
      *((_BYTE *)v160 + 24) = 0;
      v163 = (float)(unint64_t)(*(_QWORD *)(v32 + 3216) + 1);
      v164 = *(float *)(v32 + 3224);
      if ((((float)(v164 * (float)v157) >= v163) & ~(v157 == 0)) == 0)
      {
        v165 = (v157 & (v157 - 1)) != 0;
        if (v157 < 3)
          v165 = 1;
        v166 = v165 | (2 * v157);
        v167 = vcvtps_u32_f32(v163 / v164);
        if (v166 <= v167)
          v168 = v167;
        else
          v168 = v166;
        if (v168 == 1)
        {
          v168 = 2;
        }
        else if ((v168 & (v168 - 1)) != 0)
        {
          v168 = std::__next_prime(v168);
          v157 = *(_QWORD *)(v32 + 3200);
        }
        if (v168 <= v157)
        {
          if (v168 < v157)
          {
            v181 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3216) / *(float *)(v32 + 3224));
            if (v157 < 3
              || (v182 = (uint8x8_t)vcnt_s8((int8x8_t)v157), v182.i16[0] = vaddlv_u8(v182), v182.u32[0] > 1uLL))
            {
              v181 = std::__next_prime(v181);
            }
            else
            {
              v183 = 1 << -(char)__clz(v181 - 1);
              if (v181 >= 2)
                v181 = v183;
            }
            if (v168 <= v181)
              v168 = v181;
            if (v168 < v157)
            {
              if (v168)
                goto LABEL_307;
              v188 = *(void **)(v32 + 3192);
              *(_QWORD *)(v32 + 3192) = 0;
              if (v188)
                operator delete(v188);
              *(_QWORD *)(v32 + 3200) = 0;
            }
          }
          goto LABEL_347;
        }
LABEL_307:
        if (v168 >> 61)
          goto LABEL_489;
        v169 = operator new(8 * v168);
        v170 = *(void **)(v32 + 3192);
        *(_QWORD *)(v32 + 3192) = v169;
        if (v170)
          operator delete(v170);
        v171 = 0;
        *(_QWORD *)(v32 + 3200) = v168;
        do
          *(_QWORD *)(*(_QWORD *)(v32 + 3192) + 8 * v171++) = 0;
        while (v168 != v171);
        v172 = *(_QWORD **)(v32 + 3208);
        if (!v172)
          goto LABEL_347;
        v173 = v32 + 3208;
        v174 = v172[1];
        v175 = v168 - 1;
        if ((v168 & (v168 - 1)) == 0)
        {
          v176 = v174 & v175;
          *(_QWORD *)(*(_QWORD *)(v32 + 3192) + 8 * v176) = v173;
          while (1)
          {
            v177 = (_QWORD *)*v172;
            if (!*v172)
              break;
            v178 = v177[1] & v175;
            if (v178 == v176)
            {
              v172 = (_QWORD *)*v172;
            }
            else
            {
              v179 = *(_QWORD *)(v32 + 3192);
              if (*(_QWORD *)(v179 + 8 * v178))
              {
                *v172 = *v177;
                v180 = 8 * v178;
                *v177 = **(_QWORD **)(*(_QWORD *)(v32 + 3192) + v180);
                **(_QWORD **)(*(_QWORD *)(v32 + 3192) + v180) = v177;
              }
              else
              {
                *(_QWORD *)(v179 + 8 * v178) = v172;
                v172 = v177;
                v176 = v178;
              }
            }
          }
          goto LABEL_347;
        }
        if (v174 >= v168)
          v174 %= v168;
        *(_QWORD *)(*(_QWORD *)(v32 + 3192) + 8 * v174) = v173;
        v184 = (_QWORD *)*v172;
        if (!*v172)
        {
LABEL_347:
          v157 = *(_QWORD *)(v32 + 3200);
          if ((v157 & (v157 - 1)) != 0)
          {
            if (v51 >= v157)
              v85 = v51 % v157;
            else
              v85 = v51;
          }
          else
          {
            v85 = (v157 - 1) & v51;
          }
          goto LABEL_352;
        }
        while (2)
        {
          v186 = v184[1];
          if (v186 >= v168)
            v186 %= v168;
          if (v186 != v174)
          {
            v187 = *(_QWORD *)(v32 + 3192);
            if (!*(_QWORD *)(v187 + 8 * v186))
            {
              *(_QWORD *)(v187 + 8 * v186) = v172;
LABEL_333:
              v172 = v184;
              v184 = (_QWORD *)*v184;
              v174 = v186;
              if (!v184)
                goto LABEL_347;
              continue;
            }
            *v172 = *v184;
            v185 = 8 * v186;
            *v184 = **(_QWORD **)(*(_QWORD *)(v32 + 3192) + v185);
            **(_QWORD **)(*(_QWORD *)(v32 + 3192) + v185) = v184;
            v184 = v172;
          }
          break;
        }
        v186 = v174;
        goto LABEL_333;
      }
LABEL_352:
      v189 = *(_QWORD *)(v32 + 3192);
      v190 = *(_QWORD **)(v189 + 8 * v85);
      if (v190)
      {
        *v160 = *v190;
        goto LABEL_360;
      }
      *v160 = *(_QWORD *)(v32 + 3208);
      *(_QWORD *)(v32 + 3208) = v160;
      *(_QWORD *)(v189 + 8 * v85) = v32 + 3208;
      if (*v160)
      {
        v191 = *(_QWORD *)(*v160 + 8);
        if ((v157 & (v157 - 1)) != 0)
        {
          if (v191 >= v157)
            v191 %= v157;
        }
        else
        {
          v191 &= v157 - 1;
        }
        v190 = (_QWORD *)(*(_QWORD *)(v32 + 3192) + 8 * v191);
LABEL_360:
        *v190 = v160;
      }
      ++*(_QWORD *)(v32 + 3216);
LABEL_362:
      *((_BYTE *)v160 + 24) = v36;
      v192 = *(_QWORD *)(v32 + 3040);
      v275 = (uint64_t (**)())v51;
      v193 = *(_DWORD *)(v192 + 8 * v51);
      v194 = *(_QWORD *)(v32 + 3064);
      v195 = operator new();
      v196 = (_QWORD *)ggl::BufferData::BufferData(v195, qword_1EE554618, 2, 0, 6, 1);
      v196[25] = ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
      *v196 = &off_1E42B9C70;
      v197 = *(_QWORD *)(v32 + 3120);
      if (v197)
      {
        v198 = (uint8x8_t)vcnt_s8((int8x8_t)v197);
        v198.i16[0] = vaddlv_u8(v198);
        if (v198.u32[0] > 1uLL)
        {
          v36 = v51;
          if (v51 >= v197)
            v36 = v51 % v197;
        }
        else
        {
          v36 = (v197 - 1) & v51;
        }
        v199 = *(_QWORD ***)(*(_QWORD *)(v32 + 3112) + 8 * v36);
        if (v199)
        {
          v200 = *v199;
          if (*v199)
          {
            if (v198.u32[0] < 2uLL)
            {
              while (1)
              {
                v202 = v200[1];
                if (v202 == v51)
                {
                  if (v200[2] == v51)
                    goto LABEL_448;
                }
                else if ((v202 & (v197 - 1)) != v36)
                {
                  goto LABEL_382;
                }
                v200 = (_QWORD *)*v200;
                if (!v200)
                  goto LABEL_382;
              }
            }
            do
            {
              v201 = v200[1];
              if (v201 == v51)
              {
                if (v200[2] == v51)
                  goto LABEL_448;
              }
              else
              {
                if (v201 >= v197)
                  v201 %= v197;
                if (v201 != v36)
                  break;
              }
              v200 = (_QWORD *)*v200;
            }
            while (v200);
          }
        }
      }
LABEL_382:
      v200 = operator new(0x20uLL);
      *v200 = 0;
      v200[1] = v51;
      v200[2] = v51;
      v200[3] = 0;
      v203 = (float)(unint64_t)(*(_QWORD *)(v32 + 3136) + 1);
      v204 = (_QWORD *)(v32 + 3128);
      v205 = *(float *)(v32 + 3144);
      if ((((float)(v205 * (float)v197) >= v203) & ~(v197 == 0)) == 0)
      {
        v206 = (v197 & (v197 - 1)) != 0;
        if (v197 < 3)
          v206 = 1;
        v207 = v206 | (2 * v197);
        v208 = vcvtps_u32_f32(v203 / v205);
        if (v207 <= v208)
          v209 = v208;
        else
          v209 = v207;
        if (v209 == 1)
        {
          v209 = 2;
        }
        else if ((v209 & (v209 - 1)) != 0)
        {
          v209 = std::__next_prime(v209);
          v197 = *(_QWORD *)(v32 + 3120);
        }
        if (v209 <= v197)
        {
          if (v209 < v197)
          {
            v221 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3136) / *(float *)(v32 + 3144));
            if (v197 < 3
              || (v222 = (uint8x8_t)vcnt_s8((int8x8_t)v197), v222.i16[0] = vaddlv_u8(v222), v222.u32[0] > 1uLL))
            {
              v221 = std::__next_prime(v221);
            }
            else
            {
              v223 = 1 << -(char)__clz(v221 - 1);
              if (v221 >= 2)
                v221 = v223;
            }
            if (v209 <= v221)
              v209 = v221;
            if (v209 < v197)
            {
              if (v209)
                goto LABEL_393;
              v228 = *(void **)(v32 + 3112);
              *(_QWORD *)(v32 + 3112) = 0;
              if (v228)
                operator delete(v228);
              *(_QWORD *)(v32 + 3120) = 0;
            }
          }
          goto LABEL_433;
        }
LABEL_393:
        if (v209 >> 61)
          goto LABEL_489;
        v210 = operator new(8 * v209);
        v211 = *(void **)(v32 + 3112);
        *(_QWORD *)(v32 + 3112) = v210;
        if (v211)
          operator delete(v211);
        v212 = 0;
        *(_QWORD *)(v32 + 3120) = v209;
        do
          *(_QWORD *)(*(_QWORD *)(v32 + 3112) + 8 * v212++) = 0;
        while (v209 != v212);
        v213 = (_QWORD *)*v204;
        if (!*v204)
          goto LABEL_433;
        v214 = v213[1];
        v215 = v209 - 1;
        if ((v209 & (v209 - 1)) == 0)
        {
          v216 = v214 & v215;
          *(_QWORD *)(*(_QWORD *)(v32 + 3112) + 8 * v216) = v204;
          while (1)
          {
            v217 = (_QWORD *)*v213;
            if (!*v213)
              break;
            v218 = v217[1] & v215;
            if (v218 == v216)
            {
              v213 = (_QWORD *)*v213;
            }
            else
            {
              v219 = *(_QWORD *)(v32 + 3112);
              if (*(_QWORD *)(v219 + 8 * v218))
              {
                *v213 = *v217;
                v220 = 8 * v218;
                *v217 = **(_QWORD **)(*(_QWORD *)(v32 + 3112) + v220);
                **(_QWORD **)(*(_QWORD *)(v32 + 3112) + v220) = v217;
              }
              else
              {
                *(_QWORD *)(v219 + 8 * v218) = v213;
                v213 = v217;
                v216 = v218;
              }
            }
          }
          goto LABEL_433;
        }
        if (v214 >= v209)
          v214 %= v209;
        *(_QWORD *)(*(_QWORD *)(v32 + 3112) + 8 * v214) = v204;
        v224 = (_QWORD *)*v213;
        if (!*v213)
        {
LABEL_433:
          v197 = *(_QWORD *)(v32 + 3120);
          if ((v197 & (v197 - 1)) != 0)
          {
            if (v51 >= v197)
              v36 = v51 % v197;
            else
              v36 = v51;
          }
          else
          {
            v36 = (v197 - 1) & v51;
          }
          goto LABEL_438;
        }
        while (2)
        {
          v226 = v224[1];
          if (v226 >= v209)
            v226 %= v209;
          if (v226 != v214)
          {
            v227 = *(_QWORD *)(v32 + 3112);
            if (!*(_QWORD *)(v227 + 8 * v226))
            {
              *(_QWORD *)(v227 + 8 * v226) = v213;
LABEL_419:
              v213 = v224;
              v224 = (_QWORD *)*v224;
              v214 = v226;
              if (!v224)
                goto LABEL_433;
              continue;
            }
            *v213 = *v224;
            v225 = 8 * v226;
            *v224 = **(_QWORD **)(*(_QWORD *)(v32 + 3112) + v225);
            **(_QWORD **)(*(_QWORD *)(v32 + 3112) + v225) = v224;
            v224 = v213;
          }
          break;
        }
        v226 = v214;
        goto LABEL_419;
      }
LABEL_438:
      v229 = *(_QWORD *)(v32 + 3112);
      v230 = *(_QWORD **)(v229 + 8 * v36);
      if (v230)
      {
        *v200 = *v230;
        goto LABEL_446;
      }
      *v200 = *v204;
      *v204 = v200;
      *(_QWORD *)(v229 + 8 * v36) = v204;
      if (*v200)
      {
        v231 = *(_QWORD *)(*v200 + 8);
        if ((v197 & (v197 - 1)) != 0)
        {
          if (v231 >= v197)
            v231 %= v197;
        }
        else
        {
          v231 &= v197 - 1;
        }
        v230 = (_QWORD *)(*(_QWORD *)(v32 + 3112) + 8 * v231);
LABEL_446:
        *v230 = v200;
      }
      ++*(_QWORD *)(v32 + 3136);
LABEL_448:
      v232 = v200[3];
      v200[3] = v195;
      if (v232)
        (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
      v233 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>> const&>,std::tuple<>>((uint64_t)v102, (unint64_t)v275, &v275);
      ++v233[3];
      *(_QWORD *)(v194 + 24 * v193) = v195;
      v234 = *(_QWORD *)(v195 + 8);
      LOWORD(v235) = *v265;
      **(float **)(v195 + 72) = (float)v235;
      if (*(_QWORD *)(v195 + 64) > v234)
        v234 = *(_QWORD *)(v195 + 64);
      *(_QWORD *)(v195 + 56) = 0;
      *(_QWORD *)(v195 + 64) = v234;
      v2 = v263;
      v47 = *(_QWORD **)(v263 + 8);
      v13 = v261;
      v48 = *v261;
      v272 = &off_1E4281B50;
      *(_QWORD *)&v273 = v51;
LABEL_453:
      *((_QWORD *)&v273 + 1) = v48;
      v274 = &v272;
      v277 = &v275;
      v275 = &off_1E4281B50;
      v276 = v273;
      v278 = 0;
      ecs2::Runtime::queueCommand(v47, (uint64_t)&v275);
      if (v278 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v278])(&v271, &v275);
      v278 = -1;
      result = (uint64_t)v274;
      v7 = v262;
      if (v274 == &v272)
      {
        result = (uint64_t)&v272;
        v237 = 4;
LABEL_459:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v237))();
      }
      else if (v274)
      {
        v237 = 5;
        goto LABEL_459;
      }
      v10 = *(_QWORD **)(v266 + 32);
      v14 = v270 + 1;
      v270 = v14;
      if (v14 != v10)
      {
        v238 = v267[4];
        while (1)
        {
          v239 = *((unsigned int *)v14 + 1);
          v240 = v239 >> 7;
          if (v239 >> 7 < (v267[5] - v238) >> 3)
          {
            v241 = *(_QWORD *)(v238 + 8 * v240);
            if (v241)
            {
              v242 = v239 & 0x7F;
              v243 = *(unsigned __int16 *)(v241 + 2 * v242);
              v244 = v267[7];
              result = v267[8];
              if (v243 < (result - v244) >> 3)
              {
                v245 = v244 + 8 * v243;
                if (v245 != result && *(_DWORD *)(v245 + 4) == (_DWORD)v239)
                {
                  v247 = v268[4];
                  result = v268[5] - v247;
                  if (v240 < result >> 3)
                  {
                    v248 = *(_QWORD *)(v247 + 8 * v240);
                    if (v248)
                    {
                      v249 = *(unsigned __int16 *)(v248 + 2 * v242);
                      v250 = v268[7];
                      result = v268[8];
                      if (v249 < (result - v250) >> 3)
                      {
                        v251 = v250 + 8 * v249;
                        if (v251 != result && *(_DWORD *)(v251 + 4) == (_DWORD)v239)
                        {
                          v253 = v269[4];
                          result = v269[5] - v253;
                          if (v240 < result >> 3)
                          {
                            v254 = *(_QWORD *)(v253 + 8 * v240);
                            if (v254)
                            {
                              v255 = *(unsigned __int16 *)(v254 + 2 * v242);
                              v257 = v269[7];
                              v256 = v269[8];
                              result = v256 - v257;
                              if (v255 < (v256 - v257) >> 3)
                              {
                                v258 = v257 + 8 * v255;
                                if (*(_DWORD *)(v258 + 4) == (_DWORD)v239 && v258 != v256)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            v14 = v10;
            goto LABEL_14;
          }
        }
        v10 = v14;
LABEL_14:
        v270 = v14;
      }
      if (v264 == v10)
        goto LABEL_488;
    }
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v13 = (_QWORD *)result;
LABEL_488:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F729BE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42891B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42891B8;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x81BF69EEE736436;
  result[1] = "md::ls::FlyoverCommonS2TransformHandle]";
  result[2] = 38;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289200;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289200;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x695C99F828CA9E84;
  result[1] = "md::ls::BaseMapTileHandle]";
  result[2] = 25;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279180;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279180;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float64_t v32;
  uint64_t v33;
  uint64_t result;
  _OWORD v35[4];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275A48;
  v4[1] = a2;
  v46 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v46 = v9;
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = (int8x8_t)v21[1];
  if (!*(_QWORD *)&v22)
    goto LABEL_47;
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v24 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v22 <= 0x1AF456233693CD46uLL)
      v24 = 0x1AF456233693CD46uLL % *(_QWORD *)&v22;
  }
  else
  {
    v24 = (*(_QWORD *)&v22 - 1) & 0x1AF456233693CD46;
  }
  v25 = *(_QWORD **)(*v21 + 8 * v24);
  if (!v25)
    goto LABEL_47;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_47;
  if (v23.u32[0] < 2uLL)
  {
    v27 = *(_QWORD *)&v22 - 1;
    while (1)
    {
      v29 = v26[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v26[2] == 0x1AF456233693CD46)
          goto LABEL_45;
      }
      else if ((v29 & v27) != v24)
      {
        goto LABEL_47;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v28 = v26[1];
    if (v28 == 0x1AF456233693CD46)
      break;
    if (v28 >= *(_QWORD *)&v22)
      v28 %= *(_QWORD *)&v22;
    if (v28 != v24)
      goto LABEL_47;
LABEL_34:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_47;
  }
  if (v26[2] != 0x1AF456233693CD46)
    goto LABEL_34;
LABEL_45:
  v30 = v26[5];
  if (*(_QWORD *)(v30 + 8) == 0x1AF456233693CD46)
  {
    v31 = *(_QWORD *)(v30 + 32);
    goto LABEL_48;
  }
LABEL_47:
  v31 = 0;
LABEL_48:
  v41 = 0;
  v44 = 0u;
  v43 = 0u;
  v40 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0x415854A640000000;
  v39 = 0x415854A640000000uLL;
  v45 = 0x3FF0000000000000;
  v42 = 0x41583FC4141C97D0;
  gm::operator*<double,4,4,4>(v47.f64, (double *)(v31 + 3160), (double *)&v36);
  v35[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v48);
  v35[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v49), v50);
  v35[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v51), v52);
  v35[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v53), v54);
  *(_QWORD *)&v47.f64[0] = &off_1E427C930;
  *(_QWORD *)&v47.f64[1] = &v46;
  *(_QWORD *)&v48.f64[0] = v35;
  *(_QWORD *)&v48.f64[1] = &v47;
  (*(void (**)(_QWORD *, float64x2_t *))(*v4 + 16))(v4, &v47);
  v32 = v48.f64[1];
  if (*(float64x2_t **)&v48.f64[1] == &v47)
  {
    v33 = 4;
    v32 = COERCE_DOUBLE(&v47);
LABEL_52:
    (*(void (**)(void))(**(_QWORD **)&v32 + 8 * v33))();
  }
  else if (*(_QWORD *)&v48.f64[1])
  {
    v33 = 5;
    goto LABEL_52;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F72A1F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v3 - 160);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 184);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v6, v4, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v6[11];
      v24 = v6[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v4[7];
        v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v4[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v4[11];
  v34 = v4[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289008;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289008;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x7D9191A7B57B7B35;
  result[1] = "md::ls::FlyoverCommonTransformConstantDataHandle]";
  result[2] = 48;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289050;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289050;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xBED6A4C8B7C54422;
  v2[1] = "md::ls::ModelTransformData]";
  *(_QWORD *)&result = 26;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4500;
  v2[4] = "md::ls::GlobeMatrix]";
  v2[5] = 19;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42790A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42790A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  md::LayoutContext *v21;
  _QWORD *v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t result;
  double v46[16];
  _BYTE v47[496];
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275A78;
  v4[1] = a2;
  v55 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v55 = v9;
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = (md::LayoutContext *)(**v16)(v16);
  v22 = (_QWORD *)*((_QWORD *)v21 + 1);
  v23 = (int8x8_t)v22[1];
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8(v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v23 <= 0x1AF456233693CD46uLL)
        v25 = 0x1AF456233693CD46uLL % *(_QWORD *)&v23;
    }
    else
    {
      v25 = (*(_QWORD *)&v23 - 1) & 0x1AF456233693CD46;
    }
    v26 = *(_QWORD **)(*v22 + 8 * v25);
    if (v26)
    {
      v27 = (_QWORD *)*v26;
      if (v27)
      {
        if (v24.u32[0] < 2uLL)
        {
          v28 = *(_QWORD *)&v23 - 1;
          while (1)
          {
            v30 = v27[1];
            if (v30 == 0x1AF456233693CD46)
            {
              if (v27[2] == 0x1AF456233693CD46)
                goto LABEL_44;
            }
            else if ((v30 & v28) != v25)
            {
              goto LABEL_44;
            }
            v27 = (_QWORD *)*v27;
            if (!v27)
              goto LABEL_44;
          }
        }
        do
        {
          v29 = v27[1];
          if (v29 == 0x1AF456233693CD46)
          {
            if (v27[2] == 0x1AF456233693CD46)
              break;
          }
          else
          {
            if (v29 >= *(_QWORD *)&v23)
              v29 %= *(_QWORD *)&v23;
            if (v29 != v25)
              break;
          }
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
    }
  }
LABEL_44:
  md::LayoutContext::frameState(v21);
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)v47, (const Camera *)(v31 + 128));
  v32 = -(v50 * v52 - v49 * v53) - (v50 * v52 - v49 * v53);
  v33 = -(v48 * v53 - v50 * v51) - (v48 * v53 - v50 * v51);
  v34 = -(v49 * v51 - v48 * v52) - (v49 * v51 - v48 * v52);
  v35 = -(v34 * v51 - (-(v49 - v32 * v53) - v33 * v54));
  v36 = -(v48 + v32 * v54 + v33 * v53 - v34 * v52);
  v37 = -(v50 + v32 * v52 + v34 * v54 - v33 * v51);
  v38 = -(v52 * (v52 * -2.0));
  v39 = v53 * -2.0 * v54;
  v40 = v54 * (v52 * -2.0);
  v41 = v51 * -2.0 * v51 + 1.0;
  v46[0] = 1.0 - (v38 - v53 * (v53 * -2.0));
  v46[1] = v39 - v52 * (v51 * -2.0);
  v42 = v54 * (v51 * -2.0);
  v46[4] = -(v52 * (v51 * -2.0)) - v39;
  v46[5] = v41 - -(v53 * (v53 * -2.0));
  v46[8] = v40 - v53 * (v51 * -2.0);
  v46[9] = -(v53 * (v52 * -2.0)) - v42;
  v46[2] = -(v53 * (v51 * -2.0)) - v40;
  v46[6] = v42 - v53 * (v52 * -2.0);
  v46[10] = v41 - v38;
  v46[3] = 0.0;
  v46[7] = 0.0;
  v46[11] = 0.0;
  v46[12] = v36;
  v46[13] = v35;
  v46[14] = v37;
  v46[15] = 1.0;
  v56[0] = &off_1E427C8E8;
  v56[1] = &v55;
  v56[2] = v46;
  v57 = v56;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v56);
  v43 = v57;
  if (v57 == v56)
  {
    v44 = 4;
    v43 = v56;
    goto LABEL_48;
  }
  if (v57)
  {
    v44 = 5;
LABEL_48:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F72ABE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v3 - 64);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 88);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::ModelTransformData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::GlobeMatrix>(v3);
  v6 = gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v3);
  v10 = (_QWORD *)v6;
  v11 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v11 = v4 + 4;
  if (v5[8] - v5[7] >= v11[4] - v11[3])
    v12 = v11;
  else
    v12 = v5 + 4;
  v82[0] = v12;
  v82[1] = v6;
  v82[2] = v4;
  v82[3] = v5;
  v14 = (_QWORD *)v12[3];
  v13 = (_QWORD *)v12[4];
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v10[7];
    v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v10[11];
      v32 = v10[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v10[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v4[11];
      v42 = v4[10] + 48 * v36;
    }
    else
    {
      v41 = v4[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v5[7];
        v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v5[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = (_QWORD *)v12[4];
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v10[4];
      v59 = v10[7];
      v58 = v10[8];
      v60 = v4[4];
      result = v4[7];
      v61 = v4[8];
      v62 = v5[4];
      v64 = v5[7];
      v63 = v5[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v5[11];
  v52 = v5[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::ModelTransformData>(v1);
  v3 = gdc::Registry::storage<md::ls::GlobeMatrix>(v1);
  v4 = gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v1);
  if (*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v5 = v4;
  else
    v5 = v2;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v3;
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::ModelTransformData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBED6A4C8B7C54422;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBED6A4C8B7C54422;
      if (*(_QWORD *)&v3 <= 0xBED6A4C8B7C54422)
        v5 = 0xBED6A4C8B7C54422 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBED6A4C8B7C54422;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBED6A4C8B7C54422)
            {
              if (v7[2] == 0xBED6A4C8B7C54422)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBED6A4C8B7C54422)
          {
            if (v7[2] == 0xBED6A4C8B7C54422)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ModelTransformData]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42721C8;
  *(_QWORD *)(v11 + 8) = 0xBED6A4C8B7C54422;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBED6A4C8B7C54422, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBED6A4C8B7C54422;
  v15[1] = "md::ls::ModelTransformData]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBED6A4C8B7C54422, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F72B2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::GlobeMatrix>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x67D8808361DF5DBFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x67D8808361DF5DBFLL;
      if (*(_QWORD *)&v3 <= 0x67D8808361DF5DBFuLL)
        v5 = 0x67D8808361DF5DBFuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x67D8808361DF5DBFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x67D8808361DF5DBFLL)
            {
              if (v7[2] == 0x67D8808361DF5DBFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x67D8808361DF5DBFLL)
          {
            if (v7[2] == 0x67D8808361DF5DBFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::GlobeMatrix]";
  *(_QWORD *)(v11 + 24) = 19;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42710E8;
  *(_QWORD *)(v11 + 8) = 0x67D8808361DF5DBFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x67D8808361DF5DBFuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x67D8808361DF5DBFLL;
  v15[1] = "md::ls::GlobeMatrix]";
  v15[2] = 19;
  gdc::Registry::_registerStorageDataSignals(a1, 0x67D8808361DF5DBFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F72B4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_DWORD *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 12);
  v15 -= 12;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287748;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287748;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x5E4DB6CB13CB5848;
  result[1] = "md::ls::FlyoverClipConstantDataHandle]";
  result[2] = 37;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287790;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287790;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x2523AFF0E364AA00;
  v2[1] = "md::BoundData]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4510;
  v2[4] = "md::ls::TileType]";
  v2[5] = 16;
  v2[6] = 0x78FA727E419141C0;
  v2[7] = "md::ls::FlyoverClipPlaneData]";
  v2[8] = 28;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xBED6A4C8B7C54422;
    v2[10] = "md::ls::ModelTransformData]";
    v2[11] = 26;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xBED6A4C8B7C54422;
  *((_QWORD *)v10 + 1) = "md::ls::ModelTransformData]";
  *((_QWORD *)v10 + 2) = 26;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F72BB30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278448;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278448;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  double v15;
  int8x16_t v16;
  double v17;
  double v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD **v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  size_t prime;
  void *v104;
  void *v105;
  uint64_t v106;
  _QWORD *v107;
  size_t v108;
  size_t v109;
  size_t v110;
  _QWORD *v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint8x8_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  size_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  float v137;
  float v138;
  float v139;
  float v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  float64_t v161;
  double v162;
  float64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float64_t v168;
  float64_t v169;
  double v170;
  float64_t v171;
  float64_t v172;
  double v173;
  float64_t v174;
  float64_t v175;
  double v176;
  double v177;
  double v178;
  double v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  double v185;
  double v186;
  float64_t v187;
  float64_t v188;
  float64_t v189;
  double v190;
  float64_t v191;
  float64_t v192;
  float64_t v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  double v199;
  double v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  __int128 v218;
  int8x16_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  char v223;
  uint64_t v224;
  _OWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  float v267;
  float v268;
  double v269;
  float64_t v270;
  float64_t v271;
  float v272;
  float64_t v273;
  float v274;
  float v275;
  _QWORD *v276;
  _QWORD *v277;
  double v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  float32x2_t *v282;
  double v283;
  float v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  float64_t v288;
  unsigned __int8 *v289;
  __int128 v290;
  float64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  double v299[12];
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  float64x2_t v303;
  double v304;
  uint64_t v305;
  float64x2_t v306;
  double v307;
  uint64_t v308;
  float64x2_t v309;
  double v310;
  uint64_t v311;
  float64x2_t v312;
  double v313;
  uint64_t v314;
  double v315[16];
  float64x2_t v316;
  int8x16_t v317;
  float64x2_t v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;

  v2 = a1;
  v332 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::BoundData>(v3);
  v5 = gdc::Registry::storage<md::ls::TileType>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverClipPlaneData>(v3);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::ModelTransformData>(v3);
  v8 = gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(v3);
  v9 = (_QWORD *)v8;
  v10 = (_QWORD *)(v8 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v10 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v5 + 32);
  if (v6[8] - v6[7] < v10[4] - v10[3])
    v10 = v6 + 4;
  if (v7[8] - v7[7] < v10[4] - v10[3])
    v10 = v7 + 4;
  v292 = v10;
  v293 = (_QWORD *)v8;
  v294 = v4;
  v295 = (_QWORD *)v5;
  v296 = v6;
  v297 = v7;
  v12 = (_QWORD *)v10[3];
  v11 = (_QWORD *)v10[4];
  v298 = v12;
  v285 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v292))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v298 = v13;
      if (v13 == v285)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v292);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  v281 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v285 == v12)
    goto LABEL_256;
  v279 = v9;
  v280 = v6;
  v265 = v4;
  v266 = v2;
  v264 = v5;
  do
  {
    *v281 = *v12;
    v21 = *v12;
    v22 = HIDWORD(*v12);
    v23 = *v12 >> 39;
    v24 = v9[4];
    if (v23 < (v9[5] - v24) >> 3
      && (v25 = *(_QWORD *)(v24 + 8 * v23)) != 0
      && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F)), v28 = v9[7], v27 = v9[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v22) : (v30 = 0), v30))
    {
      v31 = (unint64_t *)(v9[10] + 8 * v26);
    }
    else
    {
      v31 = (unint64_t *)v9[11];
    }
    v32 = v4[4];
    if (v23 < (v4[5] - v32) >> 3
      && (v33 = *(_QWORD *)(v32 + 8 * v23)) != 0
      && (v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(v21) & 0x7F)), v36 = v4[7], v35 = v4[8], v34 < (v35 - v36) >> 3)
      && ((v37 = v36 + 8 * v34, v37 != v35) ? (v38 = *(_DWORD *)(v37 + 4) == (_DWORD)v22) : (v38 = 0), v38))
    {
      v39 = v4[11];
      v40 = v4[10] + 24 * v34;
    }
    else
    {
      v39 = v4[11];
      v40 = v39;
    }
    if (v40 == v39)
      v41 = 0;
    else
      v41 = (float32x2_t *)v40;
    v42 = *(_QWORD *)(v5 + 32);
    if (v23 < (*(_QWORD *)(v5 + 40) - v42) >> 3
      && (v43 = *(_QWORD *)(v42 + 8 * v23)) != 0
      && (v44 = *(unsigned __int16 *)(v43 + 2 * (HIDWORD(v21) & 0x7F)),
          v46 = *(_QWORD *)(v5 + 56),
          v45 = *(_QWORD *)(v5 + 64),
          v44 < (v45 - v46) >> 3)
      && ((v47 = v46 + 8 * v44, v47 != v45) ? (v48 = *(_DWORD *)(v47 + 4) == (_DWORD)v22) : (v48 = 0), v48))
    {
      v49 = (unsigned __int8 *)(*(_QWORD *)(v5 + 80) + v44);
    }
    else
    {
      v49 = *(unsigned __int8 **)(v5 + 88);
    }
    v289 = v49;
    v50 = v6[4];
    if (v23 < (v6[5] - v50) >> 3
      && (v51 = *(_QWORD *)(v50 + 8 * v23)) != 0
      && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v21) & 0x7F)), v54 = v6[7], v53 = v6[8], v52 < (v53 - v54) >> 3)
      && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v22) : (v56 = 0), v56))
    {
      v57 = v6[11];
      v58 = v6[10] + 240 * v52;
    }
    else
    {
      v57 = v6[11];
      v58 = v57;
    }
    if (v58 == v57)
      v59 = 0;
    else
      v59 = v58;
    v60 = v7[4];
    v282 = v41;
    if (v23 < (v7[5] - v60) >> 3
      && (v61 = *(_QWORD *)(v60 + 8 * v23)) != 0
      && (v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v21) & 0x7F)), v64 = v7[7], v63 = v7[8], v62 < (v63 - v64) >> 3)
      && ((v65 = v64 + 8 * v62, v65 != v63) ? (v66 = *(_DWORD *)(v65 + 4) == (_DWORD)v22) : (v66 = 0), v66))
    {
      v67 = v7[11];
      v68 = v7[10] + 48 * v62;
    }
    else
    {
      v67 = v7[11];
      v68 = v67;
    }
    if (v68 == v67)
      v69 = 0;
    else
      v69 = v68;
    v70 = **(_QWORD **)(v2 + 8);
    v71 = *(_QWORD **)v70;
    v72 = *(_QWORD **)(v70 + 8);
    if (v71 != v72)
    {
      while (*v71 != 0x41D4E9297E100630)
      {
        v71 += 5;
        if (v71 == v72)
          goto LABEL_78;
      }
    }
    if (v71 == v72)
    {
LABEL_78:
      v73 = 0;
    }
    else
    {
      v73 = v71[3];
      v74 = (std::__shared_weak_count *)v71[4];
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(p_shared_owners);
        while (__stxr(v76 + 1, p_shared_owners));
        do
          v77 = __ldaxr(p_shared_owners);
        while (__stlxr(v77 - 1, p_shared_owners));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
    v78 = **(_QWORD **)(v2 + 8);
    v79 = *(_QWORD **)v78;
    v80 = *(_QWORD **)(v78 + 8);
    if (v79 != v80)
    {
      while (*v79 != 0xE72A6B9E738C2197)
      {
        v79 += 5;
        if (v79 == v80)
          goto LABEL_90;
      }
    }
    if (v79 == v80)
    {
LABEL_90:
      v286 = 0;
    }
    else
    {
      v81 = (std::__shared_weak_count *)v79[4];
      v286 = v79[3];
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
        do
          v84 = __ldaxr(v82);
        while (__stlxr(v84 - 1, v82));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
    v85 = *v31;
    *(_QWORD *)&v316.f64[0] = v85;
    v86 = *(_QWORD *)(v73 + 4432);
    if (v85 >= (unint64_t)((*(_QWORD *)(v73 + 4440) - v86) >> 3)
      || (v87 = *(_QWORD *)(v86 + 8 * v85)) == 0
      || HIDWORD(v85) != HIDWORD(v87)
      || *(_QWORD *)(v73 + 4456) + 24 * v87 == *(_QWORD *)(v73 + 4464))
    {
      v88 = 0;
      v92 = MEMORY[8];
      if (MEMORY[8])
        goto LABEL_99;
      goto LABEL_191;
    }
    v277 = (_QWORD *)(*(_QWORD *)(v73 + 4456) + 24 * v87);
    v88 = (_QWORD *)operator new();
    v89 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v88, qword_1EE550C18, 2, 0, 6, 1);
    v89[25] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
    *v89 = &off_1E42B8E30;
    v90 = *(_QWORD *)(v73 + 4512);
    if (v90)
    {
      v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
      v91.i16[0] = vaddlv_u8(v91);
      if (v91.u32[0] > 1uLL)
      {
        v5 = v85;
        if (v85 >= v90)
          v5 = v85 % v90;
      }
      else
      {
        v5 = (v90 - 1) & v85;
      }
      v94 = *(_QWORD ***)(*(_QWORD *)(v73 + 4504) + 8 * v5);
      if (v94)
      {
        v95 = *v94;
        if (*v94)
        {
          if (v91.u32[0] < 2uLL)
          {
            while (1)
            {
              v97 = v95[1];
              if (v97 == v85)
              {
                if (v95[2] == v85)
                  goto LABEL_188;
              }
              else if ((v97 & (v90 - 1)) != v5)
              {
                goto LABEL_122;
              }
              v95 = (_QWORD *)*v95;
              if (!v95)
                goto LABEL_122;
            }
          }
          do
          {
            v96 = v95[1];
            if (v96 == v85)
            {
              if (v95[2] == v85)
                goto LABEL_188;
            }
            else
            {
              if (v96 >= v90)
                v96 %= v90;
              if (v96 != v5)
                break;
            }
            v95 = (_QWORD *)*v95;
          }
          while (v95);
        }
      }
    }
LABEL_122:
    v95 = operator new(0x20uLL);
    *v95 = 0;
    v95[1] = v85;
    v95[2] = v85;
    v95[3] = 0;
    v98 = (float)(unint64_t)(*(_QWORD *)(v73 + 4528) + 1);
    v276 = (_QWORD *)(v73 + 4520);
    v99 = *(float *)(v73 + 4536);
    if ((((float)(v99 * (float)v90) >= v98) & ~(v90 == 0)) == 0)
    {
      v100 = (v90 & (v90 - 1)) != 0;
      if (v90 < 3)
        v100 = 1;
      v101 = v100 | (2 * v90);
      v102 = vcvtps_u32_f32(v98 / v99);
      if (v101 <= v102)
        prime = v102;
      else
        prime = v101;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v90 = *(_QWORD *)(v73 + 4512);
      }
      if (prime <= v90)
      {
        if (prime >= v90)
          goto LABEL_173;
        v115 = vcvtps_u32_f32((float)*(unint64_t *)(v73 + 4528) / *(float *)(v73 + 4536));
        if (v90 < 3 || (v116 = (uint8x8_t)vcnt_s8((int8x8_t)v90), v116.i16[0] = vaddlv_u8(v116), v116.u32[0] > 1uLL))
        {
          v115 = std::__next_prime(v115);
        }
        else
        {
          v117 = 1 << -(char)__clz(v115 - 1);
          if (v115 >= 2)
            v115 = v117;
        }
        if (prime <= v115)
          prime = v115;
        if (prime >= v90)
          goto LABEL_173;
        if (!prime)
        {
          v122 = *(void **)(v73 + 4504);
          *(_QWORD *)(v73 + 4504) = 0;
          if (v122)
            operator delete(v122);
          *(_QWORD *)(v73 + 4512) = 0;
          goto LABEL_173;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v104 = operator new(8 * prime);
      v105 = *(void **)(v73 + 4504);
      *(_QWORD *)(v73 + 4504) = v104;
      if (v105)
        operator delete(v105);
      v106 = 0;
      *(_QWORD *)(v73 + 4512) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v73 + 4504) + 8 * v106++) = 0;
      while (prime != v106);
      v107 = (_QWORD *)*v276;
      if (!*v276)
      {
LABEL_173:
        v90 = *(_QWORD *)(v73 + 4512);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v85 >= v90)
            v5 = v85 % v90;
          else
            v5 = v85;
        }
        else
        {
          v5 = (v90 - 1) & v85;
        }
        goto LABEL_178;
      }
      v108 = v107[1];
      v109 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v110 = v108 & v109;
        *(_QWORD *)(*(_QWORD *)(v73 + 4504) + 8 * v110) = v276;
        while (1)
        {
          v111 = (_QWORD *)*v107;
          if (!*v107)
            break;
          v112 = v111[1] & v109;
          if (v112 == v110)
          {
            v107 = (_QWORD *)*v107;
          }
          else
          {
            v113 = *(_QWORD *)(v73 + 4504);
            if (*(_QWORD *)(v113 + 8 * v112))
            {
              *v107 = *v111;
              v114 = 8 * v112;
              *v111 = **(_QWORD **)(*(_QWORD *)(v73 + 4504) + v114);
              **(_QWORD **)(*(_QWORD *)(v73 + 4504) + v114) = v111;
            }
            else
            {
              *(_QWORD *)(v113 + 8 * v112) = v107;
              v107 = v111;
              v110 = v112;
            }
          }
        }
        goto LABEL_173;
      }
      if (v108 >= prime)
        v108 %= prime;
      *(_QWORD *)(*(_QWORD *)(v73 + 4504) + 8 * v108) = v276;
      v118 = (_QWORD *)*v107;
      if (!*v107)
        goto LABEL_173;
      while (1)
      {
        v120 = v118[1];
        if (v120 >= prime)
          v120 %= prime;
        if (v120 != v108)
        {
          v121 = *(_QWORD *)(v73 + 4504);
          if (!*(_QWORD *)(v121 + 8 * v120))
          {
            *(_QWORD *)(v121 + 8 * v120) = v107;
            goto LABEL_159;
          }
          *v107 = *v118;
          v119 = 8 * v120;
          *v118 = **(_QWORD **)(*(_QWORD *)(v73 + 4504) + v119);
          **(_QWORD **)(*(_QWORD *)(v73 + 4504) + v119) = v118;
          v118 = v107;
        }
        v120 = v108;
LABEL_159:
        v107 = v118;
        v118 = (_QWORD *)*v118;
        v108 = v120;
        if (!v118)
          goto LABEL_173;
      }
    }
LABEL_178:
    v123 = *(_QWORD *)(v73 + 4504);
    v124 = *(_QWORD **)(v123 + 8 * v5);
    if (v124)
    {
      *v95 = *v124;
LABEL_186:
      *v124 = v95;
      goto LABEL_187;
    }
    *v95 = *v276;
    *v276 = v95;
    *(_QWORD *)(v123 + 8 * v5) = v276;
    if (*v95)
    {
      v125 = *(_QWORD *)(*v95 + 8);
      if ((v90 & (v90 - 1)) != 0)
      {
        if (v125 >= v90)
          v125 %= v90;
      }
      else
      {
        v125 &= v90 - 1;
      }
      v124 = (_QWORD *)(*(_QWORD *)(v73 + 4504) + 8 * v125);
      goto LABEL_186;
    }
LABEL_187:
    ++*(_QWORD *)(v73 + 4528);
LABEL_188:
    v126 = v95[3];
    v95[3] = v88;
    if (v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
    v127 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>> const&>,std::tuple<>>(v73 + 4328, *(unint64_t *)&v316.f64[0], &v316);
    ++v127[3];
    *v277 = v88;
    v4 = v265;
    v2 = v266;
    v5 = v264;
    v92 = v88[1];
    if (v92)
    {
LABEL_99:
      v93 = v88[9];
      goto LABEL_192;
    }
LABEL_191:
    v93 = 0;
LABEL_192:
    v128 = *v289;
    if (v128 == 255)
    {
      if (*(_BYTE *)(v59 + 104))
      {
        v290 = *(_OWORD *)v59;
        v129 = *(double *)(v59 + 24);
        v287 = *(_QWORD *)(v59 + 16);
        v131 = *(double *)(v59 + 32);
        v130 = *(double *)(v59 + 40);
        v133 = *(double *)(v59 + 48);
        v132 = *(double *)(v59 + 56);
        v135 = *(double *)(v59 + 64);
        v134 = *(double *)(v59 + 72);
        v283 = *(double *)(v59 + 80);
        v136 = *(double *)(v59 + 96);
        v278 = *(double *)(v59 + 88);
        v137 = *(float *)(v69 + 8);
        v138 = *(float *)(v69 + 20);
        v139 = *(float *)(v69 + 32);
        v140 = *(float *)(v69 + 44);
        v303 = vcvtq_f64_f32(*(float32x2_t *)v69);
        v304 = v137;
        v305 = 0;
        v306 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 12));
        v307 = v138;
        v308 = 0;
        v309 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 24));
        v310 = v139;
        v311 = 0;
        v312 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 36));
        v313 = v140;
        v314 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v315, (double *)(v59 + 112), v303.f64);
        gm::Matrix<double,4,4>::inverted<int,void>((double *)&v326, v315);
        v141 = (v131 + v131) * v131;
        v142 = (v130 + v130) * v130;
        v143 = (v129 + v129) * v131;
        v144 = (v130 + v130) * v133;
        v145 = v143 - v144;
        v146 = v130 * (v129 + v129);
        v147 = v133 * (v131 + v131);
        v148 = v144 + v143;
        v149 = 1.0 - (v129 + v129) * v129;
        v150 = (v131 + v131) * v130;
        v299[0] = 1.0 - (v141 + v142);
        v299[1] = v148;
        v151 = v133 * (v129 + v129);
        v299[4] = v145;
        v299[5] = v149 - v142;
        v299[8] = v147 + v146;
        v299[9] = v150 - v151;
        v299[2] = v146 - v147;
        v299[6] = v151 + v150;
        v299[10] = v149 - v141;
        v299[3] = 0.0;
        v299[7] = 0.0;
        v299[11] = 0.0;
        v300 = v290;
        v301 = v287;
        v302 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v316.f64, (double *)&v326, v299);
        v152 = v278 - v135;
        v153 = v136 - v134;
        *(double *)v16.i64 = (v283 - v132) * 1.05;
        v154 = (v278 - v135) * 1.05;
        v155 = (v136 - v134) * 1.05;
        if (v283 - v132 < 0.0)
          *(double *)v16.i64 = 0.0;
        v156 = v132 + (v283 - v132 - *(double *)v16.i64) * 0.5;
        if (v152 < 0.0)
          v154 = 0.0;
        v157 = v135 + (v152 - v154) * 0.5;
        if (v153 < 0.0)
          v155 = 0.0;
        v158 = v134 + (v153 - v155) * 0.5;
        v159 = v157 + v154;
        v160 = v158 + v155;
        v161 = v316.f64[0] * (v156 + *(double *)v16.i64);
        v291 = v318.f64[0] * v159 + v161;
        v162 = v320 * v160;
        v163 = v316.f64[1] * (v156 + *(double *)v16.i64);
        v288 = v318.f64[1] * v159 + v163;
        v164 = v321 * v160;
        v165 = *(double *)v317.i64 * (v156 + *(double *)v16.i64);
        v166 = v319 * v159;
        v167 = v322 * v160;
        v168 = v318.f64[0] * v159 + v316.f64[0] * v156;
        v169 = v318.f64[1] * v159 + v316.f64[1] * v156;
        v170 = v319 * v159 + *(double *)v317.i64 * v156;
        v171 = v318.f64[0] * v157 + v161;
        v172 = v318.f64[1] * v157 + v163;
        v173 = v319 * v157;
        v174 = v318.f64[0] * v157 + v316.f64[0] * v156;
        v175 = v318.f64[1] * v157 + v316.f64[1] * v156;
        v176 = v319 * v157 + *(double *)v317.i64 * v156;
        v177 = v320 * v158 + v323;
        v178 = v321 * v158 + v324;
        v179 = v322 * v158 + v325;
        v17 = v168 + v177;
        v18 = v169 + v178;
        v15 = v175 + v178;
        v180 = v174 + v177;
        v181 = v175 + v178;
        *(float *)&v15 = v176 + v179;
        v182 = v168 + v177;
        v183 = v169 + v178;
        *(float *)&v18 = v170 + v179;
        v267 = v181;
        v184 = 1.0
             / sqrtf((float)((float)((float)(v182 - v180) * (float)(v182 - v180))+ (float)((float)(v183 - v181) * (float)(v183 - v181)))+ (float)((float)(*(float *)&v18 - *(float *)&v15) * (float)(*(float *)&v18 - *(float *)&v15)));
        v185 = v166 + v165;
        v186 = v173 + v165;
        v187 = v291 + v162 + v323;
        v271 = v174 + v162 + v323;
        v188 = v288 + v164 + v324;
        v270 = v175 + v164 + v324;
        v189 = v168 + v162 + v323;
        v190 = v170 + v167 + v325;
        v273 = v171 + v162 + v323;
        v191 = v172 + v164 + v324;
        v269 = v176 + v167 + v325;
        *(double *)v19.i64 = v291 + v177;
        *(double *)v20.i64 = v288 + v178;
        v192 = v171 + v177;
        v193 = v172 + v178;
        *(float *)&v178 = v189;
        *(float *)&v177 = v169 + v164 + v324;
        *(float *)&v169 = v190;
        *(float *)&v176 = v180;
        *(float *)&v190 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v178 - v180) * (float)(*(float *)&v178 - v180))+ (float)((float)(*(float *)&v177 - v181) * (float)(*(float *)&v177 - v181)))+ (float)((float)(*(float *)&v169 - *(float *)&v15) * (float)(*(float *)&v169 - *(float *)&v15)));
        v194 = v184 * (float)(v182 - v180);
        *(float *)&v171 = v184 * (float)(v183 - v181);
        *(float *)&v158 = v184 * (float)(*(float *)&v18 - *(float *)&v15);
        v195 = *(float *)&v190 * (float)(*(float *)&v178 - v180);
        v196 = *(float *)&v190 * (float)(*(float *)&v177 - v181);
        *(float *)&v164 = *(float *)&v190 * (float)(*(float *)&v169 - *(float *)&v15);
        *(float *)&v291 = -(float)((float)(v196 * *(float *)&v158) - (float)(*(float *)&v164 * *(float *)&v171));
        *(float *)&v288 = -(float)((float)(*(float *)&v164 * v194) - (float)(v195 * *(float *)&v158));
        v274 = -(float)((float)(v195 * *(float *)&v171) - (float)(v196 * v194));
        *(float *)v19.i32 = *(double *)v19.i64;
        *(float *)v20.i32 = *(double *)v20.i64;
        v197 = v185 + v179;
        v284 = v182;
        v198 = sqrtf((float)((float)((float)(*(float *)v19.i32 - v182) * (float)(*(float *)v19.i32 - v182))+ (float)((float)(*(float *)v20.i32 - v183) * (float)(*(float *)v20.i32 - v183)))+ (float)((float)(v197 - *(float *)&v18) * (float)(v197 - *(float *)&v18)));
        v199 = v186 + v167 + v325;
        v200 = v186 + v179;
        *(float *)&v171 = v187;
        v201 = v188;
        v202 = v185 + v167 + v325;
        *(float *)&v167 = (float)(1.0 / v198) * (float)(*(float *)v19.i32 - v182);
        *(float *)&v185 = (float)(1.0 / v198) * (float)(*(float *)v20.i32 - v183);
        v203 = (float)(1.0 / v198) * (float)(v197 - *(float *)&v18);
        *(float *)&v179 = *(float *)&v171 - v182;
        *(float *)&v190 = 1.0
                        / sqrtf((float)((float)(*(float *)&v179 * *(float *)&v179)+ (float)((float)(v201 - v183) * (float)(v201 - v183)))+ (float)((float)(v202 - *(float *)&v18) * (float)(v202 - *(float *)&v18)));
        v204 = *(float *)&v190 * (float)(*(float *)&v171 - v182);
        *(float *)&v158 = *(float *)&v190 * (float)(v201 - v183);
        v205 = *(float *)&v190 * (float)(v202 - *(float *)&v18);
        v275 = -(float)((float)(*(float *)&v158 * v203) - (float)(v205 * *(float *)&v185));
        *(float *)&v179 = -(float)((float)(v205 * *(float *)&v167)
                                 - (float)((float)(*(float *)&v190 * *(float *)&v179) * v203));
        v206 = -(float)((float)(v204 * *(float *)&v185) - (float)(*(float *)&v158 * *(float *)&v167));
        *(float *)&v192 = v192;
        *(float *)&v185 = v193;
        *(float *)&v190 = v200;
        v268 = v197;
        *(float *)&v200 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v192 - *(float *)v19.i32)* (float)(*(float *)&v192 - *(float *)v19.i32))+ (float)((float)(*(float *)&v185 - *(float *)v20.i32)* (float)(*(float *)&v185 - *(float *)v20.i32)))+ (float)((float)(*(float *)&v190 - v197) * (float)(*(float *)&v190 - v197)));
        *(float *)&v158 = *(float *)&v200 * (float)(*(float *)&v192 - *(float *)v19.i32);
        v207 = *(float *)&v200 * (float)(*(float *)&v185 - *(float *)v20.i32);
        *(float *)&v193 = *(float *)&v200 * (float)(*(float *)&v190 - v197);
        v16.i32[1] = HIDWORD(v273);
        *(float *)v16.i32 = v273;
        *(float *)&v200 = v191;
        *(float *)&v199 = v199;
        *(float *)v16.i32 = *(float *)v16.i32 - *(float *)v19.i32;
        *(float *)&v200 = *(float *)&v200 - *(float *)v20.i32;
        *(float *)&v199 = *(float *)&v199 - v197;
        *(float *)&v191 = 1.0
                        / sqrtf((float)((float)(*(float *)v16.i32 * *(float *)v16.i32)+ (float)(*(float *)&v200 * *(float *)&v200))+ (float)(*(float *)&v199 * *(float *)&v199));
        *(float *)v16.i32 = *(float *)&v191 * *(float *)v16.i32;
        *(float *)&v199 = *(float *)&v191 * *(float *)&v199;
        v272 = -(float)((float)(*(float *)&v199 * *(float *)&v158) - (float)(*(float *)v16.i32 * *(float *)&v193));
        *(float *)&v273 = -(float)((float)((float)(*(float *)&v191 * *(float *)&v200) * *(float *)&v193)
                                 - (float)(*(float *)&v199 * v207));
        *(float *)&v193 = -(float)((float)(*(float *)v16.i32 * v207)
                                 - (float)((float)(*(float *)&v191 * *(float *)&v200) * *(float *)&v158));
        LODWORD(v167) = LODWORD(v176);
        v208 = *(float *)&v15;
        *(float *)&v199 = *(float *)&v15 - *(float *)&v190;
        *(float *)v16.i32 = 1.0
                          / sqrtf((float)((float)((float)(*(float *)&v176 - *(float *)&v192)* (float)(*(float *)&v176 - *(float *)&v192))+ (float)((float)(v267 - *(float *)&v185) * (float)(v267 - *(float *)&v185)))+ (float)(*(float *)&v199 * *(float *)&v199));
        *(float *)&v15 = *(float *)v16.i32 * (float)(*(float *)&v176 - *(float *)&v192);
        v209 = *(float *)v16.i32 * (float)(v267 - *(float *)&v185);
        *(float *)v16.i32 = *(float *)v16.i32 * *(float *)&v199;
        v210 = v271;
        *(float *)&v187 = v270;
        *(float *)&v189 = v269;
        *(float *)&v176 = 1.0
                        / sqrtf((float)((float)((float)(v210 - *(float *)&v192) * (float)(v210 - *(float *)&v192))+ (float)((float)(*(float *)&v187 - *(float *)&v185)* (float)(*(float *)&v187 - *(float *)&v185)))+ (float)((float)(*(float *)&v189 - *(float *)&v190)* (float)(*(float *)&v189 - *(float *)&v190)));
        *(float *)&v199 = *(float *)&v176 * (float)(v210 - *(float *)&v192);
        *(float *)&v188 = *(float *)&v176 * (float)(*(float *)&v187 - *(float *)&v185);
        *(float *)&v176 = *(float *)&v176 * (float)(*(float *)&v189 - *(float *)&v190);
        *(float *)&v191 = -(float)((float)(*(float *)&v188 * *(float *)v16.i32) - (float)(*(float *)&v176 * v209));
        *(float *)&v176 = -(float)((float)(*(float *)&v176 * *(float *)&v15)
                                 - (float)(*(float *)&v199 * *(float *)v16.i32));
        *(float *)&v200 = -(float)((float)(*(float *)&v199 * v209) - (float)(*(float *)&v188 * *(float *)&v15));
        *(float *)&v199 = *(float *)&v169 - *(float *)&v189;
        *(float *)&v169 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v178 - v210) * (float)(*(float *)&v178 - v210))+ (float)((float)(*(float *)&v177 - *(float *)&v187)* (float)(*(float *)&v177 - *(float *)&v187)))+ (float)(*(float *)&v199 * *(float *)&v199));
        v211 = *(float *)&v169 * (float)(*(float *)&v178 - v210);
        *(float *)&v15 = *(float *)&v169 * (float)(*(float *)&v177 - *(float *)&v187);
        *(float *)&v199 = *(float *)&v169 * *(float *)&v199;
        *(float *)&v177 = v201 - *(float *)&v187;
        *(float *)&v188 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v171 - v210) * (float)(*(float *)&v171 - v210))+ (float)(*(float *)&v177 * *(float *)&v177))+ (float)((float)(v202 - *(float *)&v189) * (float)(v202 - *(float *)&v189)));
        v212 = *(float *)&v188 * (float)(*(float *)&v171 - v210);
        *(float *)&v171 = *(float *)&v188 * *(float *)&v177;
        *(float *)&v177 = *(float *)&v188 * (float)(v202 - *(float *)&v189);
        *(float *)&v169 = -(float)((float)(*(float *)&v171 * *(float *)&v199) - (float)(*(float *)&v177 * *(float *)&v15));
        *(float *)&v177 = -(float)((float)(*(float *)&v177 * v211) - (float)(v212 * *(float *)&v199));
        *(float *)&v178 = -(float)((float)(v212 * *(float *)&v15) - (float)(*(float *)&v171 * v211));
        *(float *)&v199 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v192 - *(float *)&v167)* (float)(*(float *)&v192 - *(float *)&v167))+ (float)((float)(*(float *)&v185 - v267) * (float)(*(float *)&v185 - v267)))+ (float)((float)(*(float *)&v190 - v208) * (float)(*(float *)&v190 - v208)));
        v213 = *(float *)&v199 * (float)(*(float *)&v192 - *(float *)&v167);
        *(float *)&v15 = *(float *)&v199 * (float)(*(float *)&v185 - v267);
        *(float *)&v199 = *(float *)&v199 * (float)(*(float *)&v190 - v208);
        *(float *)&v171 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)v19.i32 - *(float *)&v167)* (float)(*(float *)v19.i32 - *(float *)&v167))+ (float)((float)(*(float *)v20.i32 - v267) * (float)(*(float *)v20.i32 - v267)))+ (float)((float)(v268 - v208) * (float)(v268 - v208)));
        *(float *)&v188 = *(float *)&v171 * (float)(*(float *)v19.i32 - *(float *)&v167);
        v214 = *(float *)&v171 * (float)(*(float *)v20.i32 - v267);
        *(float *)&v171 = *(float *)&v171 * (float)(v268 - v208);
        v215 = -(float)((float)(*(float *)&v199 * v214) - (float)(*(float *)&v15 * *(float *)&v171));
        *(float *)&v199 = -(float)((float)(v213 * *(float *)&v171) - (float)(*(float *)&v199 * *(float *)&v188));
        v216 = -(float)((float)(*(float *)&v15 * *(float *)&v188) - (float)(v213 * v214));
        *(float *)&v15 = 1.0
                       / sqrtf((float)((float)(*(float *)&v291 * *(float *)&v291)+ (float)(*(float *)&v288 * *(float *)&v288))+ (float)(v274 * v274));
        *(float *)&v326 = *(float *)&v15 * *(float *)&v291;
        *((float *)&v326 + 1) = *(float *)&v15 * *(float *)&v288;
        *((float *)&v326 + 2) = *(float *)&v15 * v274;
        *((float *)&v326 + 3) = -(float)((float)((float)((float)(*(float *)&v15 * *(float *)&v291) * *(float *)&v167)
                                               + (float)((float)(*(float *)&v15 * *(float *)&v288) * v267))
                                       + (float)((float)(*(float *)&v15 * v274) * v208));
        *(float *)&v15 = 1.0
                       / sqrtf((float)((float)(v275 * v275) + (float)(*(float *)&v179 * *(float *)&v179))+ (float)(v206 * v206));
        *(float *)&v327 = *(float *)&v15 * v275;
        *((float *)&v327 + 1) = *(float *)&v15 * *(float *)&v179;
        *((float *)&v327 + 2) = *(float *)&v15 * v206;
        *((float *)&v327 + 3) = -(float)((float)((float)((float)(*(float *)&v15 * v275) * v284)
                                               + (float)((float)(*(float *)&v15 * *(float *)&v179) * v183))
                                       + (float)((float)(*(float *)&v15 * v206) * *(float *)&v18));
        *(float *)&v15 = 1.0
                       / sqrtf((float)((float)(*(float *)&v273 * *(float *)&v273) + (float)(v272 * v272))+ (float)(*(float *)&v193 * *(float *)&v193));
        *(float *)&v17 = *(float *)&v15 * *(float *)&v273;
        *(float *)&v18 = *(float *)&v15 * v272;
        *(float *)&v15 = *(float *)&v15 * *(float *)&v193;
        *(float *)v19.i32 = -(float)((float)((float)(*(float *)&v17 * *(float *)v19.i32)
                                           + (float)(*(float *)&v18 * *(float *)v20.i32))
                                   + (float)(*(float *)&v15 * v268));
        *(_QWORD *)&v328 = __PAIR64__(LODWORD(v18), LODWORD(v17));
        *((_QWORD *)&v328 + 1) = __PAIR64__(v19.u32[0], LODWORD(v15));
        *(float *)&v15 = 1.0
                       / sqrtf((float)((float)(*(float *)&v191 * *(float *)&v191)+ (float)(*(float *)&v176 * *(float *)&v176))+ (float)(*(float *)&v200 * *(float *)&v200));
        *(float *)&v329 = *(float *)&v15 * *(float *)&v191;
        *((float *)&v329 + 1) = *(float *)&v15 * *(float *)&v176;
        *((float *)&v329 + 2) = *(float *)&v15 * *(float *)&v200;
        *((float *)&v329 + 3) = -(float)((float)((float)((float)(*(float *)&v15 * *(float *)&v191) * *(float *)&v192)
                                               + (float)((float)(*(float *)&v15 * *(float *)&v176) * *(float *)&v185))
                                       + (float)((float)(*(float *)&v15 * *(float *)&v200) * *(float *)&v190));
        *(float *)&v158 = 1.0
                        / sqrtf((float)((float)(*(float *)&v169 * *(float *)&v169)+ (float)(*(float *)&v177 * *(float *)&v177))+ (float)(*(float *)&v178 * *(float *)&v178));
        LODWORD(v18) = 1.0;
        *(float *)&v15 = *(float *)&v158 * *(float *)&v169;
        *(float *)v16.i32 = *(float *)&v158 * *(float *)&v177;
        *(float *)&v158 = *(float *)&v158 * *(float *)&v178;
        *(float *)&v17 = -(float)((float)((float)(*(float *)&v15 * v210) + (float)(*(float *)v16.i32 * *(float *)&v187))
                                + (float)(*(float *)&v158 * *(float *)&v189));
        *(_QWORD *)&v330 = __PAIR64__(v16.u32[0], LODWORD(v15));
        DWORD2(v330) = LODWORD(v158);
        *((float *)&v330 + 3) = *(float *)&v17;
        *(float *)&v158 = 1.0
                        / sqrtf((float)((float)(v215 * v215) + (float)(*(float *)&v199 * *(float *)&v199))+ (float)(v216 * v216));
        *(float *)&v15 = *(float *)&v158 * v215;
        *(float *)v16.i32 = *(float *)&v158 * *(float *)&v199;
        *(float *)&v331 = *(float *)&v158 * v215;
        *((float *)&v331 + 1) = *(float *)&v158 * *(float *)&v199;
        *((float *)&v331 + 2) = *(float *)&v158 * v216;
        *((float *)&v331 + 3) = -(float)((float)((float)((float)(*(float *)&v158 * v215) * *(float *)&v167)
                                               + (float)((float)(*(float *)&v158 * *(float *)&v199) * v267))
                                       + (float)((float)(*(float *)&v158 * v216) * v208));
      }
      else
      {
        v219 = (int8x16_t)vcvtq_f64_f32(v282[1]);
        v316 = vcvtq_f64_f32(*v282);
        v317 = v219;
        v318 = vcvtq_f64_f32(v282[2]);
        altitude::util::computeLocalClipPlanes((uint64_t)&v316, (uint64_t)&v326, 1.05, v219, v15, v16, v17, v18, v19, v20);
      }
      v9 = v279;
      v220 = v327;
      *(_OWORD *)v93 = v326;
      *(_OWORD *)(v93 + 16) = v220;
      v221 = v329;
      *(_OWORD *)(v93 + 32) = v328;
      *(_OWORD *)(v93 + 48) = v221;
      v222 = v331;
      *(_OWORD *)(v93 + 64) = v330;
      *(_OWORD *)(v93 + 80) = v222;
      goto LABEL_211;
    }
    v217 = *(float *)(v286 + 80);
    if (v128 == 2)
    {
      v218 = xmmword_19FFB3580;
      v9 = v279;
      goto LABEL_207;
    }
    v9 = v279;
    if (v128 == 5)
    {
      v218 = xmmword_19FFB4520;
LABEL_207:
      *(_DWORD *)(v93 + 8) = DWORD2(v218);
      *(_QWORD *)v93 = v218;
      *(float *)(v93 + 12) = -v217;
      v223 = 1;
      v224 = 1;
      goto LABEL_209;
    }
    v223 = 0;
    v224 = 0;
LABEL_209:
    v225 = (_OWORD *)(v93 + 16 * v224);
    *v225 = xmmword_19FFB3480;
    v225[1] = xmmword_19FFB3480;
    v225[2] = xmmword_19FFB3480;
    v225[3] = xmmword_19FFB3480;
    v225[4] = xmmword_19FFB3480;
    if ((v223 & 1) == 0)
      *(_OWORD *)(v93 + 80) = xmmword_19FFB3480;
LABEL_211:
    if (v93 && v92)
    {
      v226 = v88[8];
      if (v226 <= v92)
        v226 = v92;
      v88[7] = 0;
      v88[8] = v226;
    }
    v12 = (_QWORD *)v292[4];
    v227 = v298 + 1;
    v298 = v227;
    if (v227 == v12)
    {
      v6 = v280;
    }
    else
    {
      v228 = v293[4];
      v6 = v280;
      do
      {
        v229 = *((unsigned int *)v227 + 1);
        v230 = v229 >> 7;
        if (v229 >> 7 < (v293[5] - v228) >> 3)
        {
          v231 = *(_QWORD *)(v228 + 8 * v230);
          if (v231)
          {
            v232 = v229 & 0x7F;
            v233 = *(unsigned __int16 *)(v231 + 2 * v232);
            v235 = v293[7];
            v234 = v293[8];
            if (v233 < (v234 - v235) >> 3)
            {
              v236 = v235 + 8 * v233;
              if (v236 != v234 && *(_DWORD *)(v236 + 4) == (_DWORD)v229)
              {
                v238 = v294[4];
                if (v230 < (v294[5] - v238) >> 3)
                {
                  v239 = *(_QWORD *)(v238 + 8 * v230);
                  if (v239)
                  {
                    v240 = *(unsigned __int16 *)(v239 + 2 * v232);
                    v242 = v294[7];
                    v241 = v294[8];
                    if (v240 < (v241 - v242) >> 3)
                    {
                      v243 = v242 + 8 * v240;
                      if (v243 != v241 && *(_DWORD *)(v243 + 4) == (_DWORD)v229)
                      {
                        v245 = v295[4];
                        if (v230 < (v295[5] - v245) >> 3)
                        {
                          v246 = *(_QWORD *)(v245 + 8 * v230);
                          if (v246)
                          {
                            v247 = *(unsigned __int16 *)(v246 + 2 * v232);
                            v249 = v295[7];
                            v248 = v295[8];
                            if (v247 < (v248 - v249) >> 3)
                            {
                              v250 = v249 + 8 * v247;
                              if (v250 != v248 && *(_DWORD *)(v250 + 4) == (_DWORD)v229)
                              {
                                v252 = v296[4];
                                if (v230 < (v296[5] - v252) >> 3)
                                {
                                  v253 = *(_QWORD *)(v252 + 8 * v230);
                                  if (v253)
                                  {
                                    v254 = *(unsigned __int16 *)(v253 + 2 * v232);
                                    v256 = v296[7];
                                    v255 = v296[8];
                                    if (v254 < (v255 - v256) >> 3)
                                    {
                                      v257 = v256 + 8 * v254;
                                      if (v257 != v255 && *(_DWORD *)(v257 + 4) == (_DWORD)v229)
                                      {
                                        v258 = v297[4];
                                        if (v230 < (v297[5] - v258) >> 3)
                                        {
                                          v259 = *(_QWORD *)(v258 + 8 * v230);
                                          if (v259)
                                          {
                                            v260 = *(unsigned __int16 *)(v259 + 2 * v232);
                                            v261 = v297[7];
                                            v262 = v297[8];
                                            if (v260 < (v262 - v261) >> 3)
                                            {
                                              v263 = v261 + 8 * v260;
                                              if (*(_DWORD *)(v263 + 4) == (_DWORD)v229 && v263 != v262)
                                              {
                                                v12 = v227;
                                                goto LABEL_255;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v227;
      }
      while (v227 != v12);
      v227 = v12;
LABEL_255:
      v298 = v227;
    }
  }
  while (v285 != v12);
LABEL_256:
  *v281 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
}

void sub_19F72D0C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::BoundData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2523AFF0E364AA00;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2523AFF0E364AA00;
      if (*(_QWORD *)&v3 <= 0x2523AFF0E364AA00uLL)
        v5 = 0x2523AFF0E364AA00uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2523AFF0E364AA00;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2523AFF0E364AA00)
            {
              if (v7[2] == 0x2523AFF0E364AA00)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2523AFF0E364AA00)
          {
            if (v7[2] == 0x2523AFF0E364AA00)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::BoundData]";
  *(_QWORD *)(v11 + 24) = 13;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274508;
  *(_QWORD *)(v11 + 8) = 0x2523AFF0E364AA00;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2523AFF0E364AA00uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2523AFF0E364AA00;
  v15[1] = "md::BoundData]";
  v15[2] = 13;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2523AFF0E364AA00, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F72D2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverClipPlaneData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x78FA727E419141C0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x78FA727E419141C0;
      if (*(_QWORD *)&v3 <= 0x78FA727E419141C0uLL)
        v5 = 0x78FA727E419141C0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x78FA727E419141C0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x78FA727E419141C0)
            {
              if (v7[2] == 0x78FA727E419141C0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x78FA727E419141C0)
          {
            if (v7[2] == 0x78FA727E419141C0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverClipPlaneData]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42724F8;
  *(_QWORD *)(v11 + 8) = 0x78FA727E419141C0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x78FA727E419141C0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x78FA727E419141C0;
  v15[1] = "md::ls::FlyoverClipPlaneData]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x78FA727E419141C0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F72D524(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v28 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = v14 + 240 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  if (*(unsigned __int8 *)(v15 + 104) == *(unsigned __int8 *)(v16 - 136))
  {
    v17 = a1[11];
    if (*(_BYTE *)(v15 + 104))
    {
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 - 216);
      *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 - 208);
      *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 - 200);
      *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 - 192);
      *(_QWORD *)v15 = *(_QWORD *)(v16 - 240);
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 - 232);
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 - 224);
      *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 - 184);
      *(_QWORD *)(v15 + 64) = *(_QWORD *)(v16 - 176);
      *(_QWORD *)(v15 + 72) = *(_QWORD *)(v16 - 168);
      *(_QWORD *)(v15 + 80) = *(_QWORD *)(v16 - 160);
      *(_QWORD *)(v15 + 88) = *(_QWORD *)(v16 - 152);
      *(_QWORD *)(v15 + 96) = *(_QWORD *)(v16 - 144);
      v17 = v16;
    }
  }
  else if (*(_BYTE *)(v15 + 104))
  {
    *(_BYTE *)(v15 + 104) = 0;
    v17 = v16;
  }
  else
  {
    v18 = *(_OWORD *)(v16 - 240);
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 - 224);
    *(_OWORD *)v15 = v18;
    v19 = *(_OWORD *)(v16 - 216);
    *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 - 200);
    *(_OWORD *)(v15 + 24) = v19;
    *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 - 192);
    v20 = *(_OWORD *)(v16 - 184);
    v21 = *(_OWORD *)(v16 - 168);
    *(_OWORD *)(v15 + 88) = *(_OWORD *)(v16 - 152);
    *(_OWORD *)(v15 + 72) = v21;
    *(_OWORD *)(v15 + 56) = v20;
    *(_BYTE *)(v15 + 104) = 1;
    v17 = a1[11];
  }
  v22 = (_QWORD *)(v14 + 240 * v7);
  v22[14] = *(_QWORD *)(v16 - 128);
  v22[15] = *(_QWORD *)(v16 - 120);
  v22[16] = *(_QWORD *)(v16 - 112);
  v22[17] = *(_QWORD *)(v16 - 104);
  v22[18] = *(_QWORD *)(v16 - 96);
  v22[19] = *(_QWORD *)(v16 - 88);
  v22[20] = *(_QWORD *)(v16 - 80);
  v22[21] = *(_QWORD *)(v16 - 72);
  v22[22] = *(_QWORD *)(v16 - 64);
  v22[23] = *(_QWORD *)(v16 - 56);
  v22[24] = *(_QWORD *)(v16 - 48);
  v22[25] = *(_QWORD *)(v16 - 40);
  v22[26] = *(_QWORD *)(v16 - 32);
  v22[27] = *(_QWORD *)(v16 - 24);
  v22[28] = *(_QWORD *)(v16 - 16);
  v22[29] = *(_QWORD *)(v16 - 8);
  a1[11] = v17 - 240;
  v23 = (_QWORD *)a1[28];
  if (!v23)
    return 1;
  v24 = a1[31];
  while (1)
  {
    v30[0] = &v28;
    v30[1] = 1;
    v29 = v24;
    v25 = v23[6];
    if (!v25)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v25 + 48))(v25, &v29, v30);
    v23 = (_QWORD *)*v23;
    if (!v23)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::contains(v26, v27);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::BoundData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::BoundData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::BoundData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::BoundData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42877D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42877D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287820;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287820;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278490;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278490;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  md::VKMRenderResourcesStore *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (***v13)(_QWORD);
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int8x8_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t FlyoverSharedConstantDataHandle;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  int v59;
  id v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  double v70;
  double v71;
  __double2 v72;
  double v73;
  __double2 v74;
  float v75;
  float v76;
  double v77;
  float v78;
  float v79;
  double v80;
  double v81;
  float v82;
  unint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)**a2;
  v4 = (_QWORD *)(*a2)[1];
  if (v3 != v4)
  {
    while (*v3 != 0x41D4E9297E100630)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v6 = 0;
  }
  else
  {
    v6 = (md::VKMRenderResourcesStore *)v3[3];
    v5 = (std::__shared_weak_count *)v3[4];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v10 = ***(uint64_t ****)(a1 + 8);
  if (v10 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v10 != 0x22D45F5AAD4BF408)
  {
    v11 = v10 + 5;
    do
    {
      v12 = *v11;
      v11 += 5;
    }
    while (v12 != 0x22D45F5AAD4BF408);
    v10 = v11 - 5;
  }
  v13 = (uint64_t (***)(_QWORD))v10[3];
  v14 = (std::__shared_weak_count *)v10[4];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v18 = (**v13)(v13);
  md::LayoutContext::frameState((md::LayoutContext *)v18);
  v20 = *(_QWORD **)(v18 + 8);
  v21 = (int8x8_t)v20[1];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8(v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v23 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v21 <= 0x1AF456233693CD46uLL)
        v23 = 0x1AF456233693CD46uLL % *(_QWORD *)&v21;
    }
    else
    {
      v23 = (*(_QWORD *)&v21 - 1) & 0x1AF456233693CD46;
    }
    v24 = *(_QWORD **)(*v20 + 8 * v23);
    if (v24)
    {
      v25 = (_QWORD *)*v24;
      if (v25)
      {
        if (v22.u32[0] < 2uLL)
        {
          v26 = *(_QWORD *)&v21 - 1;
          while (1)
          {
            v28 = v25[1];
            if (v28 == 0x1AF456233693CD46)
            {
              if (v25[2] == 0x1AF456233693CD46)
                goto LABEL_44;
            }
            else if ((v28 & v26) != v23)
            {
              goto LABEL_44;
            }
            v25 = (_QWORD *)*v25;
            if (!v25)
              goto LABEL_44;
          }
        }
        do
        {
          v27 = v25[1];
          if (v27 == 0x1AF456233693CD46)
          {
            if (v25[2] == 0x1AF456233693CD46)
              break;
          }
          else
          {
            if (v27 >= *(_QWORD *)&v21)
              v27 %= *(_QWORD *)&v21;
            if (v27 != v23)
              break;
          }
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
    }
  }
LABEL_44:
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v84, (const Camera *)(v19 + 128));
  v29 = *(_QWORD **)(v18 + 8);
  v30 = v29[1];
  if ((v30 & (v30 - 1)) != 0)
  {
    v32 = 0xE42D19AFCA302E68;
    if (v30 <= 0xE42D19AFCA302E68)
      v32 = 0xE42D19AFCA302E68 % v30;
    v31 = *(_QWORD **)(*v29 + 8 * v32);
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0xE42D19AFCA302E68);
    }
    while (v31[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v31 = *(_QWORD **)(*v29 + 8 * ((v30 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0xE42D19AFCA302E68);
    }
    while (v31[2] != 0xE42D19AFCA302E68);
  }
  v33 = *(unsigned __int8 *)(*(_QWORD *)(v31[5] + 32) + 72);
  FlyoverSharedConstantDataHandle = md::VKMRenderResourcesStore::getFlyoverSharedConstantDataHandle(v6);
  v35 = md::VKMRenderResourcesStore::getConstantData<ggl::FlyoverCommon::Shared>((uint64_t)v6, FlyoverSharedConstantDataHandle);
  v36 = v35;
  v37 = *(_QWORD *)(v35 + 8);
  if (v37)
    v38 = *(_QWORD *)(v35 + 72);
  else
    v38 = 0;
  v39 = *(_QWORD **)(v18 + 8);
  v40 = (int8x8_t)v39[1];
  if (!*(_QWORD *)&v40)
    goto LABEL_80;
  v41 = (uint8x8_t)vcnt_s8(v40);
  v41.i16[0] = vaddlv_u8(v41);
  if (v41.u32[0] > 1uLL)
  {
    v42 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v40 <= 0x1AF456233693CD46uLL)
      v42 = 0x1AF456233693CD46uLL % *(_QWORD *)&v40;
  }
  else
  {
    v42 = (*(_QWORD *)&v40 - 1) & 0x1AF456233693CD46;
  }
  v43 = *(_QWORD **)(*v39 + 8 * v42);
  if (!v43)
    goto LABEL_80;
  v44 = (_QWORD *)*v43;
  if (!v44)
    goto LABEL_80;
  if (v41.u32[0] < 2uLL)
  {
    while (1)
    {
      v46 = v44[1];
      if (v46 == 0x1AF456233693CD46)
      {
        if (v44[2] == 0x1AF456233693CD46)
          goto LABEL_78;
      }
      else if ((v46 & (*(_QWORD *)&v40 - 1)) != v42)
      {
        goto LABEL_80;
      }
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_80;
    }
  }
  while (1)
  {
    v45 = v44[1];
    if (v45 == 0x1AF456233693CD46)
      break;
    if (v45 >= *(_QWORD *)&v40)
      v45 %= *(_QWORD *)&v40;
    if (v45 != v42)
      goto LABEL_80;
LABEL_67:
    v44 = (_QWORD *)*v44;
    if (!v44)
      goto LABEL_80;
  }
  if (v44[2] != 0x1AF456233693CD46)
    goto LABEL_67;
LABEL_78:
  v47 = v44[5];
  if (*(_QWORD *)(v47 + 8) != 0x1AF456233693CD46)
  {
LABEL_80:
    v48 = 0;
    goto LABEL_81;
  }
  v48 = *(_QWORD *)(v47 + 32);
LABEL_81:
  *(float32x4_t *)v38 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v48 + 552)), *(float64x2_t *)(v48 + 568));
  *(float32x4_t *)(v38 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v48 + 584)), *(float64x2_t *)(v48 + 600));
  *(float32x4_t *)(v38 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v48 + 616)), *(float64x2_t *)(v48 + 632));
  *(float32x4_t *)(v38 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v48 + 648)), *(float64x2_t *)(v48 + 664));
  if (!*(_QWORD *)&v40)
    goto LABEL_105;
  v49 = (uint8x8_t)vcnt_s8(v40);
  v49.i16[0] = vaddlv_u8(v49);
  if (v49.u32[0] > 1uLL)
  {
    v50 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v40 <= 0x41E8D6E445F4145uLL)
      v50 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v40;
  }
  else
  {
    v50 = (*(_QWORD *)&v40 - 1) & 0x41E8D6E445F4145;
  }
  v51 = *(_QWORD **)(*v39 + 8 * v50);
  if (!v51)
    goto LABEL_105;
  v52 = (_QWORD *)*v51;
  if (!v52)
    goto LABEL_105;
  if (v49.u32[0] < 2uLL)
  {
    v53 = *(_QWORD *)&v40 - 1;
    while (1)
    {
      v55 = v52[1];
      if (v55 == 0x41E8D6E445F4145)
      {
        if (v52[2] == 0x41E8D6E445F4145)
          goto LABEL_102;
      }
      else if ((v55 & v53) != v50)
      {
        goto LABEL_105;
      }
      v52 = (_QWORD *)*v52;
      if (!v52)
        goto LABEL_105;
    }
  }
  while (2)
  {
    v54 = v52[1];
    if (v54 != 0x41E8D6E445F4145)
    {
      if (v54 >= *(_QWORD *)&v40)
        v54 %= *(_QWORD *)&v40;
      if (v54 != v50)
        goto LABEL_105;
      goto LABEL_91;
    }
    if (v52[2] != 0x41E8D6E445F4145)
    {
LABEL_91:
      v52 = (_QWORD *)*v52;
      if (!v52)
        goto LABEL_105;
      continue;
    }
    break;
  }
LABEL_102:
  v56 = v52[5];
  if (*(_QWORD *)(v56 + 8) == 0x41E8D6E445F4145)
  {
    v57 = *(_QWORD *)(v56 + 32);
    if (v57)
    {
      v58 = *(double *)(v57 + 176);
      *(float32x2_t *)(v38 + 96) = vcvt_f32_f64(*(float64x2_t *)(v57 + 160));
      *(float *)(v38 + 104) = v58;
      v59 = *(_DWORD *)(v57 + 424);
      goto LABEL_106;
    }
  }
LABEL_105:
  v60 = objc_alloc_init(MEMORY[0x1E0D26ED0]);
  v86 = 0.0;
  v87 = 0.0;
  v85 = 0.0;
  objc_msgSend(v60, "calculateGeocentricDirectionForSunX:Y:Z:", &v87, &v86, &v85);
  v61 = v87;
  v62 = v86;
  v63 = v85;
  *(float *)(v38 + 96) = v61;
  *(float *)(v38 + 100) = v62;
  *(float *)(v38 + 104) = v63;

  v59 = 0;
LABEL_106:
  v64 = *(double *)(v48 + 32) < 6378137.0 && v33 == 1;
  *(_DWORD *)(v38 + 112) = v59;
  v65 = -1.0;
  if (!v64)
    v65 = 1.0;
  if (**(_BYTE **)(v18 + 72))
    v65 = 0.0;
  *(float32x2_t *)(v38 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v65);
  *(float *)(v38 + 72) = v65;
  v66 = *(double *)(v48 + 512);
  v67 = *(double *)(v48 + 496) * *(double *)(v48 + 496) + *(double *)(v48 + 504) * *(double *)(v48 + 504);
  v68 = sqrt(v67 + v66 * v66) + -6371008.77;
  v69 = fmaxf(v68, 0.0);
  v70 = sqrt(v67);
  v71 = atan2(v66, v70 * 0.996647189);
  v72 = __sincos_stret(v71);
  v73 = atan2(v66 + v72.__sinval * v72.__sinval * 42841.3115 * v72.__sinval, v70 + v72.__cosval * v72.__cosval * -42697.6727 * v72.__cosval);
  v74 = __sincos_stret(v73);
  v75 = v70 / v74.__cosval - 6378137.0 / sqrt(v74.__sinval * v74.__sinval * -0.00669437999 + 1.0);
  v76 = fmaxf(v75, 1.0);
  v77 = v76;
  v78 = sqrt((float)(v76 * v76) + v76 * 12742017.5);
  v79 = v78 - v69;
  v80 = fmax(v77, 0.0);
  if (v80 <= 8000.0)
    v81 = v80 * 0.000125;
  else
    v81 = 1.0;
  v82 = v79 + (v81 * v81 * (v81 * 2.0 + -3.0) + 1.0) * (float)(v79 * -0.5);
  *(float *)(v38 + 80) = v69;
  *(float *)(v38 + 84) = v82;
  if (v37)
  {
    v83 = *(_QWORD *)(v36 + 64);
    if (v83 <= v37)
      v83 = v37;
    *(_QWORD *)(v36 + 56) = 0;
    *(_QWORD *)(v36 + 64) = v83;
  }
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F72E27C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  unint64_t v5;

  if (v3)
  {
    v5 = *(_QWORD *)(v1 + 64);
    if (v5 <= v3)
      v5 = v3;
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = v5;
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286278;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286278;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x8CADE1E37F052ADDLL;
  result[1] = "md::ls::TileViewMatrix]";
  result[2] = 22;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42862C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42862C0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4530;
  v2[4] = "md::ls::GlobeMatrix]";
  v2[5] = 19;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42779E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42779E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _BOOL4 isValid;
  _QWORD *result;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (***v53)(_QWORD);
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  md::LayoutContext *v58;
  uint64_t v59;
  _QWORD *v60;
  int8x8_t v61;
  uint8x8_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _OWORD *v85;
  _QWORD *v86;
  double *GlobeMatrix;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _OWORD v124[8];
  double v125[16];
  _QWORD v126[62];
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::GlobeMatrix>(v3);
  v125[0] = -1.33557637e-247;
  v6 = *(int8x8_t *)(v3 + 128);
  v117 = v2;
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0x8CADE1E37F052ADDLL;
      if (*(_QWORD *)&v6 <= 0x8CADE1E37F052ADDLL)
        v8 = 0x8CADE1E37F052ADDLL % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0x8CADE1E37F052ADDLL;
    }
    v9 = *(_QWORD **)(*(_QWORD *)(v3 + 120) + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0x8CADE1E37F052ADDLL)
            {
              if (v10[2] == 0x8CADE1E37F052ADDLL)
                goto LABEL_138;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0x8CADE1E37F052ADDLL)
          {
            if (v10[2] == 0x8CADE1E37F052ADDLL)
            {
LABEL_138:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::TileViewMatrix]";
  *(_QWORD *)(v14 + 24) = 22;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E4271898;
  *(_QWORD *)(v14 + 8) = 0x8CADE1E37F052ADDLL;
  *(_QWORD *)(v14 + 248) = v3;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v3 + 120), 0x8CADE1E37F052ADDLL, v125);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v126[0] = 0x8CADE1E37F052ADDLL;
  v126[1] = "md::ls::TileViewMatrix]";
  v126[2] = 22;
  gdc::Registry::_registerStorageDataSignals(v3, 0x8CADE1E37F052ADDLL, (uint64_t)v126, (uint64_t *)(v14 + 104));
LABEL_24:
  v17 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v17 = v5 + 4;
  if (*(_QWORD *)(v14 + 64) - *(_QWORD *)(v14 + 56) < v17[4] - v17[3])
    v17 = (_QWORD *)(v14 + 32);
  v18 = (_QWORD *)v17[3];
  v119 = v17;
  v120 = (_QWORD *)v4;
  v121 = v5;
  v122 = (_QWORD *)v14;
  v123 = v18;
  v118 = (_QWORD *)v17[4];
  if (v118 != v18
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v119))
  {
    v19 = v18 + 1;
    do
    {
      v18 = v19;
      v123 = v19;
      if (v19 == v118)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v119);
      v19 = v18 + 1;
    }
    while (!isValid);
  }
  if (v118 == v18)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    do
    {
      *result = *v18;
      v23 = *v18;
      v24 = HIDWORD(*v18);
      v25 = *v18 >> 39;
      v26 = v5[4];
      if (v25 < (v5[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v25)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v23) & 0x7F)),
            v30 = v5[7],
            v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v24) : (v32 = 0), v32))
      {
        v33 = (unint64_t *)(v5[10] + 8 * v28);
      }
      else
      {
        v33 = (unint64_t *)v5[11];
      }
      v34 = *(_QWORD *)(v14 + 32);
      if (v25 < (*(_QWORD *)(v14 + 40) - v34) >> 3
        && (v35 = *(_QWORD *)(v34 + 8 * v25)) != 0
        && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v23) & 0x7F)),
            v38 = *(_QWORD *)(v14 + 56),
            v37 = *(_QWORD *)(v14 + 64),
            v36 < (v37 - v38) >> 3)
        && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v24) : (v40 = 0), v40))
      {
        v41 = (unint64_t *)(*(_QWORD *)(v14 + 80) + 8 * v36);
      }
      else
      {
        v41 = *(unint64_t **)(v14 + 88);
      }
      v42 = **(_QWORD **)(v2 + 8);
      v43 = *(_QWORD **)v42;
      v44 = *(_QWORD **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x41D4E9297E100630)
        {
          v43 += 5;
          if (v43 == v44)
            goto LABEL_65;
        }
      }
      if (v43 == v44)
      {
LABEL_65:
        v45 = 0;
      }
      else
      {
        v45 = (_QWORD *)v43[3];
        v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(p_shared_owners);
          while (__stxr(v48 + 1, p_shared_owners));
          do
            v49 = __ldaxr(p_shared_owners);
          while (__stlxr(v49 - 1, p_shared_owners));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      v50 = ***(uint64_t ****)(v2 + 8);
      if (v50 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v50 != 0x22D45F5AAD4BF408)
      {
        v51 = v50 + 5;
        do
        {
          v52 = *v51;
          v51 += 5;
        }
        while (v52 != 0x22D45F5AAD4BF408);
        v50 = v51 - 5;
      }
      v53 = (uint64_t (***)(_QWORD))v50[3];
      v54 = (std::__shared_weak_count *)v50[4];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        do
          v57 = __ldaxr(v55);
        while (__stlxr(v57 - 1, v55));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v58 = (md::LayoutContext *)(**v53)(v53);
      md::LayoutContext::frameState(v58);
      v60 = (_QWORD *)*((_QWORD *)v58 + 1);
      v61 = (int8x8_t)v60[1];
      v2 = v117;
      if (v61)
      {
        v62 = (uint8x8_t)vcnt_s8(v61);
        v62.i16[0] = vaddlv_u8(v62);
        if (v62.u32[0] > 1uLL)
        {
          v63 = 0x1AF456233693CD46;
          if (*(_QWORD *)&v61 <= 0x1AF456233693CD46uLL)
            v63 = 0x1AF456233693CD46uLL % *(_QWORD *)&v61;
        }
        else
        {
          v63 = (*(_QWORD *)&v61 - 1) & 0x1AF456233693CD46;
        }
        v64 = *(_QWORD **)(*v60 + 8 * v63);
        if (v64)
        {
          v65 = (_QWORD *)*v64;
          if (v65)
          {
            if (v62.u32[0] < 2uLL)
            {
              v66 = *(_QWORD *)&v61 - 1;
              while (1)
              {
                v68 = v65[1];
                if (v68 == 0x1AF456233693CD46)
                {
                  if (v65[2] == 0x1AF456233693CD46)
                    goto LABEL_97;
                }
                else if ((v68 & v66) != v63)
                {
                  goto LABEL_97;
                }
                v65 = (_QWORD *)*v65;
                if (!v65)
                  goto LABEL_97;
              }
            }
            do
            {
              v67 = v65[1];
              if (v67 == 0x1AF456233693CD46)
              {
                if (v65[2] == 0x1AF456233693CD46)
                  break;
              }
              else
              {
                if (v67 >= *(_QWORD *)&v61)
                  v67 %= *(_QWORD *)&v61;
                if (v67 != v63)
                  break;
              }
              v65 = (_QWORD *)*v65;
            }
            while (v65);
          }
        }
      }
LABEL_97:
      gdc::CameraView::geocentricCameraView((gdc::CameraView *)v126, (const Camera *)(v59 + 128));
      v69 = -(v129 * v131 - v128 * v132) - (v129 * v131 - v128 * v132);
      v70 = -(v127 * v132 - v129 * v130) - (v127 * v132 - v129 * v130);
      v71 = -(v128 * v130 - v127 * v131) - (v128 * v130 - v127 * v131);
      v72 = -(v71 * v130 - (-(v128 - v69 * v132) - v70 * v133));
      v73 = -(v127 + v69 * v133 + v70 * v132 - v71 * v131);
      v74 = v129 + v69 * v131 + v71 * v133;
      v75 = -(v131 * (v131 * -2.0));
      v76 = v132 * -2.0 * v133;
      v77 = v133 * (v131 * -2.0);
      v78 = v130 * -2.0 * v130 + 1.0;
      v79 = v133 * (v130 * -2.0);
      v125[0] = 1.0 - (v75 - v132 * (v132 * -2.0));
      v125[1] = v76 - v131 * (v130 * -2.0);
      v125[4] = -(v131 * (v130 * -2.0)) - v76;
      v125[5] = v78 - -(v132 * (v132 * -2.0));
      v125[8] = v77 - v132 * (v130 * -2.0);
      v125[9] = -(v132 * (v131 * -2.0)) - v79;
      v125[2] = -(v132 * (v130 * -2.0)) - v77;
      v125[6] = v79 - v132 * (v131 * -2.0);
      v125[10] = v78 - v75;
      v125[3] = 0.0;
      v125[7] = 0.0;
      v125[11] = 0.0;
      v125[12] = v73;
      v125[13] = v72;
      v125[14] = -(v74 - v70 * v130);
      v125[15] = 1.0;
      v80 = *v41;
      *(_QWORD *)&v124[0] = v80;
      v81 = v45[1166];
      if (v80 < (unint64_t)((v45[1167] - v81) >> 3)
        && (v82 = *(_QWORD *)(v81 + 8 * v80)) != 0
        && HIDWORD(v80) == HIDWORD(v82))
      {
        v83 = v45[1169] + ((unint64_t)*(_QWORD *)(v81 + 8 * v80) << 8);
        v84 = v45[1170];
      }
      else
      {
        v84 = v45[1170];
        v83 = v84;
      }
      if (v83 == v84)
        v85 = 0;
      else
        v85 = (_OWORD *)v83;
      if (v85)
      {
        v86 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v45 + 1158), v80, v124);
        ++v86[3];
      }
      GlobeMatrix = (double *)md::VKMRenderResourcesStore::getGlobeMatrix((uint64_t)v45, *v33);
      gm::operator*<double,4,4,4>((double *)v124, v125, GlobeMatrix);
      v88 = v124[1];
      *v85 = v124[0];
      v85[1] = v88;
      v89 = v124[3];
      v85[2] = v124[2];
      v85[3] = v89;
      v90 = v124[5];
      v85[4] = v124[4];
      v85[5] = v90;
      v91 = v124[7];
      v85[6] = v124[6];
      v85[7] = v91;
      v18 = (_QWORD *)v119[4];
      v22 = v123 + 1;
      v123 = v22;
      if (v22 != v18)
      {
        v92 = v120[4];
        while (1)
        {
          v93 = *((unsigned int *)v22 + 1);
          v94 = v93 >> 7;
          if (v93 >> 7 < (v120[5] - v92) >> 3)
          {
            v95 = *(_QWORD *)(v92 + 8 * v94);
            if (v95)
            {
              v96 = v93 & 0x7F;
              v97 = *(unsigned __int16 *)(v95 + 2 * v96);
              v99 = v120[7];
              v98 = v120[8];
              if (v97 < (v98 - v99) >> 3)
              {
                v100 = v99 + 8 * v97;
                if (v100 != v98 && *(_DWORD *)(v100 + 4) == (_DWORD)v93)
                {
                  v102 = v121[4];
                  if (v94 < (v121[5] - v102) >> 3)
                  {
                    v103 = *(_QWORD *)(v102 + 8 * v94);
                    if (v103)
                    {
                      v104 = *(unsigned __int16 *)(v103 + 2 * v96);
                      v106 = v121[7];
                      v105 = v121[8];
                      if (v104 < (v105 - v106) >> 3)
                      {
                        v107 = v106 + 8 * v104;
                        if (v107 != v105 && *(_DWORD *)(v107 + 4) == (_DWORD)v93)
                        {
                          v109 = v122[4];
                          if (v94 < (v122[5] - v109) >> 3)
                          {
                            v110 = *(_QWORD *)(v109 + 8 * v94);
                            if (v110)
                            {
                              v111 = *(unsigned __int16 *)(v110 + 2 * v96);
                              v113 = v122[7];
                              v112 = v122[8];
                              if (v111 < (v112 - v113) >> 3)
                              {
                                v114 = v113 + 8 * v111;
                                if (*(_DWORD *)(v114 + 4) == (_DWORD)v93 && v114 != v112)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v22 == v18)
          {
            v22 = v18;
            goto LABEL_36;
          }
        }
        v18 = v22;
LABEL_36:
        v123 = v22;
      }
      result = v116;
    }
    while (v118 != v18);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F72ED70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286D28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286D28;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls20PassToCommandBuffersEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F72EF94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls20PassToCommandBuffersEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0xA7E255916A50AFB1;
    *((_QWORD *)v11 + 1) = "md::ls::PassToCommandBuffers]";
    *((_QWORD *)v11 + 2) = 28;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0xA7E255916A50AFB1;
    *((_QWORD *)v3 + 1) = "md::ls::PassToCommandBuffers]";
    *((_QWORD *)v3 + 2) = 28;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286D70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286D70;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277F38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277F38;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275988;
  v4[1] = a2;
  v15 = 0;
  v5 = ***(_QWORD ****)(a1 + 8);
  if (v5 != *(_QWORD **)(**(_QWORD **)(a1 + 8) + 8))
  {
    while (*v5 != 0xC94DD89A7B09BE9CLL)
      v5 += 5;
  }
  v6 = v5[3];
  v7 = (std::__shared_weak_count *)v5[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v15 = v6;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, 9, 4);
  v16[0] = &off_1E427C0C0;
  v16[1] = &v14;
  v16[2] = &v15;
  v17 = v16;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_14;
  }
  if (v17)
  {
    v12 = 5;
LABEL_14:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F72F37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PassToCommandBuffers &>::Model<ecs2::RuntimeQuery<md::ls::PassToCommandBuffers &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::PassToCommandBuffers &>::Model<ecs2::RuntimeQuery<md::ls::PassToCommandBuffers &>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PassToCommandBuffers>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 8 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::PassToCommandBuffers &>::Model<ecs2::RuntimeQuery<md::ls::PassToCommandBuffers &>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::PassToCommandBuffers>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

uint64_t gdc::Registry::storage<md::ls::PassToCommandBuffers>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA7E255916A50AFB1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA7E255916A50AFB1;
      if (*(_QWORD *)&v3 <= 0xA7E255916A50AFB1)
        v5 = 0xA7E255916A50AFB1 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA7E255916A50AFB1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA7E255916A50AFB1)
            {
              if (v7[2] == 0xA7E255916A50AFB1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA7E255916A50AFB1)
          {
            if (v7[2] == 0xA7E255916A50AFB1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassToCommandBuffers]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3AC8;
  *(_QWORD *)(v11 + 8) = 0xA7E255916A50AFB1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA7E255916A50AFB1, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA7E255916A50AFB1;
  v15[1] = "md::ls::PassToCommandBuffers]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA7E255916A50AFB1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F72F92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287628;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287628;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls20PassToCommandBuffersEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F72FB48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287670;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287670;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42783B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42783B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  char v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275988;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = (int8x8_t)v13[1];
  if (!*(_QWORD *)&v14)
    goto LABEL_52;
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v14 <= 0x41E8D6E445F4145uLL)
      v16 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x41E8D6E445F4145;
  }
  v17 = *(_QWORD **)(*v13 + 8 * v16);
  if (!v17)
    goto LABEL_52;
  v18 = (_QWORD *)*v17;
  if (!v18)
    goto LABEL_52;
  if (v15.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v21 = v18[1];
      if (v21 == 0x41E8D6E445F4145)
      {
        if (v18[2] == 0x41E8D6E445F4145)
          goto LABEL_33;
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_52;
      }
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_52;
    }
  }
  while (1)
  {
    v20 = v18[1];
    if (v20 == 0x41E8D6E445F4145)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_52;
LABEL_22:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_52;
  }
  if (v18[2] != 0x41E8D6E445F4145)
    goto LABEL_22;
LABEL_33:
  v22 = v18[5];
  if (*(_QWORD *)(v22 + 8) == 0x41E8D6E445F4145)
  {
    v23 = *(_QWORD *)(v22 + 32);
    if (v23)
    {
      v36 = *(_BYTE *)(v23 + 228) ^ 1;
      v35 = 0;
      v24 = **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD **)v24;
      v26 = *(_QWORD **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0xC94DD89A7B09BE9CLL)
        {
          v25 += 5;
          if (v25 == v26)
            goto LABEL_46;
        }
      }
      if (v25 == v26)
      {
LABEL_46:
        v28 = 0;
      }
      else
      {
        v28 = v25[3];
        v27 = (std::__shared_weak_count *)v25[4];
        if (v27)
        {
          v29 = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      v35 = v28;
      v37[0] = &off_1E427C390;
      v37[1] = &v36;
      v37[2] = &v35;
      v38 = v37;
      (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v37);
      v32 = v38;
      if (v38 == v37)
      {
        v33 = 4;
        v32 = v37;
LABEL_51:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      else if (v38)
      {
        v33 = 5;
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F72FF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287118;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287118;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287160;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287160;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x45B31C2960E9BCB1;
  v2[1] = "md::ls::VisibilityGroupID]";
  *(_QWORD *)&result = 25;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4540;
  v2[4] = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
  v2[5] = 51;
  v2[6] = 0xFB8BCB8E983A05B1;
  v2[7] = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
  v2[8] = 62;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278130;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278130;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  uint64_t result;
  uint64_t (**v39)();
  uint64_t **v40;
  char *v41;
  uint64_t (***v42)();
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275178;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42751A8;
  v5[1] = a2;
  v6 = *(uint64_t **)**v3;
  if (v6 != *(uint64_t **)(**v3 + 8) && *v6 != 0xD369A4D92C8FFE6CLL)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0xD369A4D92C8FFE6CLL);
    v6 = v7 - 5;
  }
  v9 = v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) + 24);
  v15 = **v3;
  v16 = *(_QWORD **)v15;
  v17 = *(_QWORD **)(v15 + 8);
  if (v16 != v17)
  {
    while (*v16 != 0x41D4E9297E100630)
    {
      v16 += 5;
      if (v16 == v17)
        goto LABEL_23;
    }
  }
  if (v16 == v17)
  {
LABEL_23:
    v19 = 0;
  }
  else
  {
    v19 = v16[3];
    v18 = (std::__shared_weak_count *)v16[4];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  LODWORD(v39) = 5;
  v23 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v19 + 824), 5u, &v39);
  v24 = *(_QWORD **)(v14 + 8);
  v25 = v24[3];
  v26 = v24[4];
  v27 = v26 - v25;
  if (v26 == v25)
    goto LABEL_40;
  v28 = 0;
  v29 = v27 >> 3;
  while (1)
  {
    v30 = *(_QWORD *)(v25 + 8 * v28);
    if (*(_BYTE *)v30 == 3)
    {
      v31 = *(_QWORD *)(v30 + 8);
      v32 = v24[15];
      if (v31 < (v24[16] - v32) >> 3)
        break;
    }
    if (++v28 >= v29)
      goto LABEL_40;
  }
  if (!*(_QWORD *)(v32 + 8 * v31))
    goto LABEL_40;
  v33 = v23 + 24;
  v39 = &off_1E427C1E0;
  v40 = v3;
  v41 = v23 + 24;
  v42 = &v39;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v39);
  v34 = v42;
  if (v42 == &v39)
  {
    v35 = 4;
    v34 = &v39;
    goto LABEL_34;
  }
  if (v42)
  {
    v35 = 5;
LABEL_34:
    (*v34)[v35]();
  }
  v39 = &off_1E427C228;
  v40 = v3;
  v41 = v33;
  v42 = &v39;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v39);
  v36 = v42;
  if (v42 == &v39)
  {
    v37 = 4;
    v36 = &v39;
    goto LABEL_39;
  }
  if (v42)
  {
    v37 = 5;
LABEL_39:
    (*v36)[v37]();
  }
LABEL_40:
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7304B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 4 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::VisibilityGroupID>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x45B31C2960E9BCB1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x45B31C2960E9BCB1;
      if (*(_QWORD *)&v3 <= 0x45B31C2960E9BCB1uLL)
        v5 = 0x45B31C2960E9BCB1uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x45B31C2960E9BCB1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x45B31C2960E9BCB1)
            {
              if (v7[2] == 0x45B31C2960E9BCB1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x45B31C2960E9BCB1)
          {
            if (v7[2] == 0x45B31C2960E9BCB1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::VisibilityGroupID]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42720D8;
  *(_QWORD *)(v11 + 8) = 0x45B31C2960E9BCB1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x45B31C2960E9BCB1uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x45B31C2960E9BCB1;
  v15[1] = "md::ls::VisibilityGroupID]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x45B31C2960E9BCB1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F730AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 4 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42852B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42852B8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285300;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285300;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xC0uLL);
  a1[2] = (char *)(v2 + 24);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4550;
  v2[4] = "md::ls::SliceAssignmentT<md::SliceType::AllShadow>]";
  v2[5] = 50;
  v2[6] = 0x45B31C2960E9BCB1;
  v2[7] = "md::ls::VisibilityGroupID]";
  v2[8] = 25;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 24)
  {
    *(_QWORD *)v3 = 0x5EBA003AC7A96B8ALL;
    v2[10] = "md::ls::SharedRenderableDataHandle]";
    v2[11] = 34;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  if (0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 24) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x5EBA003AC7A96B8ALL;
  *((_QWORD *)v10 + 1) = "md::ls::SharedRenderableDataHandle]";
  *((_QWORD *)v10 + 2) = 34;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xA054AACDFDD6A6BLL;
    *((_QWORD *)v4 + 1) = "md::ls::AppliedWantsDynamicShadowBounds]";
    *((_QWORD *)v4 + 2) = 39;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xA054AACDFDD6A6BLL;
  *((_QWORD *)v21 + 1) = "md::ls::AppliedWantsDynamicShadowBounds]";
  *((_QWORD *)v21 + 2) = 39;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x2523AFF0E364AA00;
    *((_QWORD *)v14 + 1) = "md::BoundData]";
    *((_QWORD *)v14 + 2) = 13;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x2523AFF0E364AA00;
  *((_QWORD *)v32 + 1) = "md::BoundData]";
  *((_QWORD *)v32 + 2) = 13;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x2DE7529E814754ABLL;
    *((_QWORD *)v25 + 1) = "md::ls::BoundZScale]";
    *((_QWORD *)v25 + 2) = 19;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x2DE7529E814754ABLL;
  *((_QWORD *)v43 + 1) = "md::ls::BoundZScale]";
  *((_QWORD *)v43 + 2) = 19;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xA2CB76FD7F023F9CLL;
    *((_QWORD *)v36 + 1) = "md::ls::BoundZAdjust]";
    *((_QWORD *)v36 + 2) = 20;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_92:
    abort();
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 <= 0xAAAAAAAAAAAAAAALL)
    {
      v53 = (char *)operator new(24 * v52);
      goto LABEL_85;
    }
LABEL_93:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v53 = 0;
LABEL_85:
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xA2CB76FD7F023F9CLL;
  *((_QWORD *)v54 + 1) = "md::ls::BoundZAdjust]";
  *((_QWORD *)v54 + 2) = 20;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
}

void sub_19F731708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277200;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277200;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  _DWORD v39[6];
  _DWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274ED8;
  v4[1] = a2;
  v38 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v38 = v9;
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = (int8x8_t)v21[1];
  if (!*(_QWORD *)&v22)
    goto LABEL_47;
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v24 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v22 <= 0x41E8D6E445F4145uLL)
      v24 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v22;
  }
  else
  {
    v24 = (*(_QWORD *)&v22 - 1) & 0x41E8D6E445F4145;
  }
  v25 = *(_QWORD **)(*v21 + 8 * v24);
  if (!v25)
    goto LABEL_47;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_47;
  if (v23.u32[0] < 2uLL)
  {
    v27 = *(_QWORD *)&v22 - 1;
    while (1)
    {
      v29 = v26[1];
      if (v29 == 0x41E8D6E445F4145)
      {
        if (v26[2] == 0x41E8D6E445F4145)
          goto LABEL_45;
      }
      else if ((v29 & v27) != v24)
      {
        goto LABEL_47;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v28 = v26[1];
    if (v28 == 0x41E8D6E445F4145)
      break;
    if (v28 >= *(_QWORD *)&v22)
      v28 %= *(_QWORD *)&v22;
    if (v28 != v24)
      goto LABEL_47;
LABEL_34:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_47;
  }
  if (v26[2] != 0x41E8D6E445F4145)
    goto LABEL_34;
LABEL_45:
  v30 = v26[5];
  if (*(_QWORD *)(v30 + 8) != 0x41E8D6E445F4145)
  {
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_48:
  v39[0] = 4;
  v32 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v38 + 824), 4u, v39);
  if (v31 && !*(_BYTE *)(v31 + 228))
  {
    v33 = v32;
    v34 = operator new(0x20uLL);
    *v34 = &off_1E427BAD8;
    v34[1] = &v38;
    v34[2] = v3;
    v34[3] = v33 + 24;
    v40 = v34;
    (*(void (**)(_QWORD *, _DWORD *))(*v4 + 16))(v4, v39);
    v35 = v40;
    if (v40 == v39)
    {
      v36 = 4;
      v35 = v39;
LABEL_54:
      (*(void (**)(void))(*v35 + 8 * v36))();
    }
    else if (v40)
    {
      v36 = 5;
      goto LABEL_54;
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F731B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

unint64_t *ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t *result;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t *v138;
  uint64_t v139;
  unint64_t *v140;
  _QWORD *v142;
  uint64_t v143[7];
  unint64_t *v144;
  uint64_t v145[8];
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)3>>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::BoundData>(v2);
  v8 = gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(v2);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::BoundZScale>(v2);
  v10 = (_QWORD *)gdc::Registry::storage<md::ls::BoundZAdjust>(v2);
  v145[0] = (uint64_t)v3;
  v145[1] = (uint64_t)v4;
  v145[2] = (uint64_t)v5;
  v145[3] = (uint64_t)v6;
  v145[4] = (uint64_t)v7;
  v145[5] = v8;
  v142 = (_QWORD *)v8;
  v145[6] = (uint64_t)v9;
  v145[7] = (uint64_t)v10;
  gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(v143, v145);
  v11 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v11 = v4 + 4;
  if (v5[8] - v5[7] < v11[4] - v11[3])
    v11 = v5 + 4;
  if (v6[8] - v6[7] < v11[4] - v11[3])
    v11 = v6 + 4;
  if (v7[8] - v7[7] < v11[4] - v11[3])
    v11 = v7 + 4;
  v12 = v144;
  v140 = (unint64_t *)v11[4];
  if (v140 == v144)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_145:
    *result = 0xFFFFFFFF00000000;
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v14 = (_QWORD *)v143[1];
    v138 = result;
    v139 = v143[0];
    v15 = (_QWORD *)v143[2];
    v136 = (_QWORD *)v143[4];
    v137 = (_QWORD *)v143[3];
    v135 = (_QWORD *)v143[5];
    v16 = v142;
    while (1)
    {
      *result = *v12;
      v17 = *v12;
      v18 = HIDWORD(*v12);
      v19 = *v12 >> 39;
      v20 = v3[4];
      if (v19 < (v3[5] - v20) >> 3
        && (v21 = *(_QWORD *)(v20 + 8 * v19)) != 0
        && (v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F)),
            v24 = v3[7],
            v23 = v3[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = v24 + 8 * v22, v25 != v23) ? (v26 = *(_DWORD *)(v25 + 4) == (_DWORD)v18) : (v26 = 0), v26))
      {
        v27 = v3[11];
        v28 = v3[10] + 8 * v22;
      }
      else
      {
        v27 = v3[11];
        v28 = v27;
      }
      if (v28 == v27)
        v29 = 0;
      else
        v29 = v28;
      v30 = v4[4];
      if (v19 < (v4[5] - v30) >> 3
        && (v31 = *(_QWORD *)(v30 + 8 * v19)) != 0
        && (v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            v34 = v4[7],
            v33 = v4[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == (_DWORD)v18) : (v36 = 0), v36))
      {
        v37 = v4[11];
        v38 = v4[10] + 4 * v32;
      }
      else
      {
        v37 = v4[11];
        v38 = v37;
      }
      if (v38 == v37)
        v39 = 0;
      else
        v39 = v38;
      v40 = v5[4];
      if (v19 < (v5[5] - v40) >> 3
        && (v41 = *(_QWORD *)(v40 + 8 * v19)) != 0
        && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            v44 = v5[7],
            v43 = v5[8],
            v42 < (v43 - v44) >> 3)
        && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == (_DWORD)v18) : (v46 = 0), v46))
      {
        v47 = v5[11];
        v48 = v5[10] + 8 * v42;
      }
      else
      {
        v47 = v5[11];
        v48 = v47;
      }
      if (v48 == v47)
        v49 = 0;
      else
        v49 = v48;
      v50 = v6[4];
      if (v19 < (v6[5] - v50) >> 3
        && (v51 = *(_QWORD *)(v50 + 8 * v19)) != 0
        && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            v54 = v6[7],
            v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v18) : (v56 = 0), v56))
      {
        v57 = v6[11];
        v58 = v6[10] + 8 * v52;
      }
      else
      {
        v57 = v6[11];
        v58 = v57;
      }
      if (v58 == v57)
        v59 = 0;
      else
        v59 = v58;
      v60 = v16[4];
      if (v19 < (v16[5] - v60) >> 3
        && (v61 = *(_QWORD *)(v60 + 8 * v19)) != 0
        && (v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            v64 = v16[7],
            v63 = v16[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (v66 = *(_DWORD *)(v65 + 4) == (_DWORD)v18) : (v66 = 0), v66))
      {
        v67 = v16[11];
        v68 = v16[10] + v62;
      }
      else
      {
        v67 = v16[11];
        v68 = v67;
      }
      if (v68 == v67)
        v68 = 0;
      if ((v69 = v7[4], v19 < (v7[5] - v69) >> 3)
        && (v70 = *(_QWORD *)(v69 + 8 * v19)) != 0
        && (v71 = *(unsigned __int16 *)(v70 + 2 * (HIDWORD(v17) & 0x7F)),
            v73 = v7[7],
            v72 = v7[8],
            v71 < (v72 - v73) >> 3)
        && ((v74 = v73 + 8 * v71, v74 != v72) ? (v75 = *(_DWORD *)(v74 + 4) == (_DWORD)v18) : (v75 = 0), v75))
      {
        v76 = v7[11];
        v77 = v7[10] + 24 * v71;
      }
      else
      {
        v76 = v7[11];
        v77 = v76;
      }
      if (v77 == v76)
        v78 = 0;
      else
        v78 = v77;
      v79 = v9[4];
      if (v19 < (v9[5] - v79) >> 3
        && (v80 = *(_QWORD *)(v79 + 8 * v19)) != 0
        && (v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(v17) & 0x7F)),
            v83 = v9[7],
            v82 = v9[8],
            v81 < (v82 - v83) >> 3)
        && (v84 = v83 + 8 * v81, v84 != v82)
        && *(_DWORD *)(v84 + 4) == (_DWORD)v18)
      {
        v85 = v9[11];
        v86 = v9[10] + 4 * v81;
      }
      else
      {
        v85 = v9[11];
        v86 = v85;
      }
      if (v86 == v85)
        v86 = 0;
      v87 = v10[4];
      if (v19 < (v10[5] - v87) >> 3
        && (v88 = *(_QWORD *)(v87 + 8 * v19)) != 0
        && (v89 = *(unsigned __int16 *)(v88 + 2 * (HIDWORD(v17) & 0x7F)),
            v91 = v10[7],
            v90 = v10[8],
            v89 < (v90 - v91) >> 3)
        && (v92 = v91 + 8 * v89, v92 != v90)
        && *(_DWORD *)(v92 + 4) == (_DWORD)v18)
      {
        v93 = v10[11];
        v94 = v10[10] + 4 * v89;
      }
      else
      {
        v93 = v10[11];
        v94 = v93;
      }
      v95 = v94 == v93 ? 0 : v94;
      v147 = v86;
      v148 = v68;
      v146 = v95;
      v96 = *(_QWORD *)(a2 + 24);
      if (!v96)
        break;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v96 + 48))(v96, v29, v39, v49, v59, &v148, v78, &v147, &v146);
      v97 = *(unint64_t **)(v139 + 32);
      v98 = v12 + 1;
      v144 = v12 + 1;
      if (v12 + 1 == v97)
      {
        v16 = v142;
        result = v138;
      }
      else
      {
        v99 = v14[4];
        v16 = v142;
        do
        {
          v100 = *((unsigned int *)v98 + 1);
          v101 = v100 >> 7;
          if (v100 >> 7 < (v14[5] - v99) >> 3)
          {
            v102 = *(_QWORD *)(v99 + 8 * v101);
            if (v102)
            {
              v103 = v100 & 0x7F;
              v104 = *(unsigned __int16 *)(v102 + 2 * v103);
              v106 = v14[7];
              v105 = v14[8];
              if (v104 < (v105 - v106) >> 3)
              {
                v107 = v106 + 8 * v104;
                if (v107 != v105 && *(_DWORD *)(v107 + 4) == (_DWORD)v100)
                {
                  v109 = v15[4];
                  if (v101 < (v15[5] - v109) >> 3)
                  {
                    v110 = *(_QWORD *)(v109 + 8 * v101);
                    if (v110)
                    {
                      v111 = *(unsigned __int16 *)(v110 + 2 * v103);
                      v113 = v15[7];
                      v112 = v15[8];
                      if (v111 < (v112 - v113) >> 3)
                      {
                        v114 = v113 + 8 * v111;
                        if (v114 != v112 && *(_DWORD *)(v114 + 4) == (_DWORD)v100)
                        {
                          v116 = v137[4];
                          if (v101 < (v137[5] - v116) >> 3)
                          {
                            v117 = *(_QWORD *)(v116 + 8 * v101);
                            if (v117)
                            {
                              v118 = *(unsigned __int16 *)(v117 + 2 * v103);
                              v120 = v137[7];
                              v119 = v137[8];
                              if (v118 < (v119 - v120) >> 3)
                              {
                                v121 = v120 + 8 * v118;
                                if (v121 != v119 && *(_DWORD *)(v121 + 4) == (_DWORD)v100)
                                {
                                  v123 = v136[4];
                                  if (v101 < (v136[5] - v123) >> 3)
                                  {
                                    v124 = *(_QWORD *)(v123 + 8 * v101);
                                    if (v124)
                                    {
                                      v125 = *(unsigned __int16 *)(v124 + 2 * v103);
                                      v127 = v136[7];
                                      v126 = v136[8];
                                      if (v125 < (v126 - v127) >> 3)
                                      {
                                        v128 = v127 + 8 * v125;
                                        if (v128 != v126 && *(_DWORD *)(v128 + 4) == (_DWORD)v100)
                                        {
                                          v129 = v135[4];
                                          if (v101 < (v135[5] - v129) >> 3)
                                          {
                                            v130 = *(_QWORD *)(v129 + 8 * v101);
                                            if (v130)
                                            {
                                              v131 = *(unsigned __int16 *)(v130 + 2 * v103);
                                              v133 = v135[7];
                                              v132 = v135[8];
                                              if (v131 < (v132 - v133) >> 3)
                                              {
                                                v134 = v133 + 8 * v131;
                                                if (*(_DWORD *)(v134 + 4) == (_DWORD)v100 && v134 != v132)
                                                {
                                                  v97 = v98;
                                                  goto LABEL_137;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v98;
        }
        while (v98 != v97);
        v98 = v97;
LABEL_137:
        result = v138;
        v144 = v98;
      }
      v12 = v97;
      if (v140 == v97)
        goto LABEL_145;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[8];
  uint64_t v10[8];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)3>>(v1);
  v4 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  v5 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v1);
  v6 = gdc::Registry::storage<md::BoundData>(v1);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v9[4] = v6;
  v9[5] = gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(v1);
  v9[6] = gdc::Registry::storage<md::ls::BoundZScale>(v1);
  v9[7] = gdc::Registry::storage<md::ls::BoundZAdjust>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(v10, v9);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v7 = v2;
  else
    v7 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v6;
  return *(_QWORD *)(v7 + 64) == v10[7];
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)3>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCEB05E103001C9FELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCEB05E103001C9FELL;
      if (*(_QWORD *)&v3 <= 0xCEB05E103001C9FELL)
        v5 = 0xCEB05E103001C9FELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCEB05E103001C9FELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCEB05E103001C9FELL)
            {
              if (v7[2] == 0xCEB05E103001C9FELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCEB05E103001C9FELL)
          {
            if (v7[2] == 0xCEB05E103001C9FELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::AllShadow>]";
  *(_QWORD *)(v11 + 24) = 50;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271E08;
  *(_QWORD *)(v11 + 8) = 0xCEB05E103001C9FELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCEB05E103001C9FELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCEB05E103001C9FELL;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::AllShadow>]";
  v15[2] = 50;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCEB05E103001C9FELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F732564(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xA054AACDFDD6A6BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA054AACDFDD6A6BLL;
      if (*(_QWORD *)&v3 <= 0xA054AACDFDD6A6BuLL)
        v5 = 0xA054AACDFDD6A6BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA054AACDFDD6A6BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA054AACDFDD6A6BLL)
            {
              if (v7[2] == 0xA054AACDFDD6A6BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA054AACDFDD6A6BLL)
          {
            if (v7[2] == 0xA054AACDFDD6A6BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::AppliedWantsDynamicShadowBounds]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273EA8;
  *(_QWORD *)(v11 + 8) = 0xA054AACDFDD6A6BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA054AACDFDD6A6BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA054AACDFDD6A6BLL;
  v15[1] = "md::ls::AppliedWantsDynamicShadowBounds]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA054AACDFDD6A6BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73278C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BoundZScale>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2DE7529E814754ABLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2DE7529E814754ABLL;
      if (*(_QWORD *)&v3 <= 0x2DE7529E814754ABuLL)
        v5 = 0x2DE7529E814754ABuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2DE7529E814754ABLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2DE7529E814754ABLL)
            {
              if (v7[2] == 0x2DE7529E814754ABLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2DE7529E814754ABLL)
          {
            if (v7[2] == 0x2DE7529E814754ABLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::BoundZScale]";
  *(_QWORD *)(v11 + 24) = 19;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271088;
  *(_QWORD *)(v11 + 8) = 0x2DE7529E814754ABLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2DE7529E814754ABuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2DE7529E814754ABLL;
  v15[1] = "md::ls::BoundZScale]";
  v15[2] = 19;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2DE7529E814754ABLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7329B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BoundZAdjust>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA2CB76FD7F023F9CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA2CB76FD7F023F9CLL;
      if (*(_QWORD *)&v3 <= 0xA2CB76FD7F023F9CLL)
        v5 = 0xA2CB76FD7F023F9CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA2CB76FD7F023F9CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA2CB76FD7F023F9CLL)
            {
              if (v7[2] == 0xA2CB76FD7F023F9CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA2CB76FD7F023F9CLL)
          {
            if (v7[2] == 0xA2CB76FD7F023F9CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::BoundZAdjust]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42711D8;
  *(_QWORD *)(v11 + 8) = 0xA2CB76FD7F023F9CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA2CB76FD7F023F9CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA2CB76FD7F023F9CLL;
  v15[1] = "md::ls::BoundZAdjust]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA2CB76FD7F023F9CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F732BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::BoundZScale>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundZScale>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BoundZScale>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundZScale>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283728;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283728;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283770;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283770;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x78uLL);
  a1[2] = (char *)(v2 + 15);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4560;
  v2[4] = "md::ls::VisibilityGroupID]";
  v2[5] = 25;
  v2[6] = 0x8D203CEEEBEC82DELL;
  v2[7] = "md::ls::CanCastShadow]";
  v2[8] = 21;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 15)
  {
    *(_QWORD *)v3 = 0x731F9AB6193E8641;
    v2[10] = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
    v2[11] = 51;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_38;
  if (0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 15) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_39;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x731F9AB6193E8641;
  *((_QWORD *)v10 + 1) = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
  *((_QWORD *)v10 + 2) = 51;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xFB8BCB8E983A05B1;
    *((_QWORD *)v4 + 1) = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
    *((_QWORD *)v4 + 2) = 62;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
    abort();
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = (char *)operator new(24 * v19);
      goto LABEL_31;
    }
LABEL_39:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v20 = 0;
LABEL_31:
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xFB8BCB8E983A05B1;
  *((_QWORD *)v21 + 1) = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
  *((_QWORD *)v21 + 2) = 62;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
}

void sub_19F73356C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276438;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  int8x8_t v25;
  char *v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t result;
  uint64_t (**v44)();
  uint64_t **v45;
  char *v46;
  uint64_t (***v47)();
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274F38;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4274F68;
  v5[1] = a2;
  v6 = *(uint64_t **)**v3;
  if (v6 != *(uint64_t **)(**v3 + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (**v9)(v9);
  v15 = **v3;
  v16 = *(_QWORD **)v15;
  v17 = *(_QWORD **)(v15 + 8);
  if (v16 != v17)
  {
    while (*v16 != 0x41D4E9297E100630)
    {
      v16 += 5;
      if (v16 == v17)
        goto LABEL_23;
    }
  }
  if (v16 == v17)
  {
LABEL_23:
    v19 = 0;
  }
  else
  {
    v19 = v16[3];
    v18 = (std::__shared_weak_count *)v16[4];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  LODWORD(v44) = 3;
  v23 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v19 + 824), 3u, &v44);
  v24 = *(_QWORD **)(v14 + 8);
  v25 = (int8x8_t)v24[1];
  if (!*(_QWORD *)&v25)
    goto LABEL_69;
  v26 = v23;
  v27 = (uint8x8_t)vcnt_s8(v25);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    v28 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v25 <= 0x41E8D6E445F4145uLL)
      v28 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v25;
  }
  else
  {
    v28 = (*(_QWORD *)&v25 - 1) & 0x41E8D6E445F4145;
  }
  v29 = *(_QWORD **)(*v24 + 8 * v28);
  if (!v29)
    goto LABEL_69;
  v30 = (_QWORD *)*v29;
  if (!v30)
    goto LABEL_69;
  if (v27.u32[0] < 2uLL)
  {
    v31 = *(_QWORD *)&v25 - 1;
    while (1)
    {
      v33 = v30[1];
      if (v33 == 0x41E8D6E445F4145)
      {
        if (v30[2] == 0x41E8D6E445F4145)
          goto LABEL_45;
      }
      else if ((v33 & v31) != v28)
      {
        goto LABEL_69;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_69;
    }
  }
  while (1)
  {
    v32 = v30[1];
    if (v32 == 0x41E8D6E445F4145)
      break;
    if (v32 >= *(_QWORD *)&v25)
      v32 %= *(_QWORD *)&v25;
    if (v32 != v28)
      goto LABEL_69;
LABEL_34:
    v30 = (_QWORD *)*v30;
    if (!v30)
      goto LABEL_69;
  }
  if (v30[2] != 0x41E8D6E445F4145)
    goto LABEL_34;
LABEL_45:
  v34 = v30[5];
  if (*(_QWORD *)(v34 + 8) == 0x41E8D6E445F4145)
  {
    v35 = *(_QWORD *)(v34 + 32);
    if (v35)
    {
      if (!*(_BYTE *)(v35 + 228))
      {
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v36, "daVinciAdvancedLightingEnabled") && *(_BYTE *)(v35 + 225))
        {
          v37 = *(_QWORD **)(v14 + 8);
          v38 = v37[1];
          if ((v38 & (v38 - 1)) != 0)
          {
            v40 = 0x8BD499FBD96FBB9ELL;
            if (v38 <= 0x8BD499FBD96FBB9ELL)
              v40 = 0x8BD499FBD96FBB9ELL % v38;
            v39 = *(_QWORD **)(*v37 + 8 * v40);
            do
            {
              do
                v39 = (_QWORD *)*v39;
              while (v39[1] != 0x8BD499FBD96FBB9ELL);
            }
            while (v39[2] != 0x8BD499FBD96FBB9ELL);
          }
          else
          {
            v39 = *(_QWORD **)(*v37 + 8 * ((v38 - 1) & 0x8BD499FBD96FBB9ELL));
            do
            {
              do
                v39 = (_QWORD *)*v39;
              while (v39[1] != 0x8BD499FBD96FBB9ELL);
            }
            while (v39[2] != 0x8BD499FBD96FBB9ELL);
          }
          if (*(_BYTE *)(*(_QWORD *)(v39[5] + 32) + 1))
          {
            v44 = &off_1E427B538;
            v45 = v3;
            v46 = v26 + 24;
            v47 = &v44;
            (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v44);
          }
          else
          {
            v44 = &off_1E427B4F0;
            v45 = v3;
            v46 = v26 + 24;
            v47 = &v44;
            (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v44);
          }
          v41 = v47;
          if (v47 == &v44)
          {
            v42 = 4;
            v41 = &v44;
LABEL_67:
            (*v41)[v42]();
          }
          else if (v47)
          {
            v42 = 5;
            goto LABEL_67;
          }
        }

      }
    }
  }
LABEL_69:
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F733A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *CanCast;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  CanCast = (_QWORD *)gdc::Registry::storage<md::ls::CanCastShadow>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)CanCast;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (CanCast[8] - CanCast[7] < v7[4] - v7[3])
    v7 = CanCast + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = CanCast[4], v17 < (CanCast[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = CanCast[7],
            v41 = CanCast[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = CanCast[11];
        v46 = CanCast[10] + v40;
      }
      else
      {
        v45 = CanCast[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 4 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CanCast;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  CanCast = gdc::Registry::storage<md::ls::CanCastShadow>(v1);
  v5 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = CanCast;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(CanCast + 64) - *(_QWORD *)(CanCast + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = CanCast;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::CanCastShadow>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8D203CEEEBEC82DELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8D203CEEEBEC82DELL;
      if (*(_QWORD *)&v3 <= 0x8D203CEEEBEC82DELL)
        v5 = 0x8D203CEEEBEC82DELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8D203CEEEBEC82DELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8D203CEEEBEC82DELL)
            {
              if (v7[2] == 0x8D203CEEEBEC82DELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8D203CEEEBEC82DELL)
          {
            if (v7[2] == 0x8D203CEEEBEC82DELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CanCastShadow]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271448;
  *(_QWORD *)(v11 + 8) = 0x8D203CEEEBEC82DELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8D203CEEEBEC82DELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8D203CEEEBEC82DELL;
  v15[1] = "md::ls::CanCastShadow]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8D203CEEEBEC82DELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F734240(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *CanCast;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  CanCast = (_QWORD *)gdc::Registry::storage<md::ls::CanCastShadow>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)CanCast;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (CanCast[8] - CanCast[7] < v7[4] - v7[3])
    v7 = CanCast + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = CanCast[4], v17 < (CanCast[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = CanCast[7],
            v41 = CanCast[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = CanCast[11];
        v46 = CanCast[10] + v40;
      }
      else
      {
        v45 = CanCast[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 4 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CanCast;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  CanCast = gdc::Registry::storage<md::ls::CanCastShadow>(v1);
  v5 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = CanCast;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(CanCast + 64) - *(_QWORD *)(CanCast + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = CanCast;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286DB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286DB8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286E00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286E00;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4570;
  v2[4] = "md::ls::IntendedSceneLayer]";
  v2[5] = 26;
  v2[6] = 0x45B31C2960E9BCB1;
  v2[7] = "md::ls::VisibilityGroupID]";
  v2[8] = 25;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0x768C72EB9B71F7ADLL;
    v2[10] = "md::ls::RenderableVisibilityOptions]";
    v2[11] = 35;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x768C72EB9B71F7ADLL;
  *((_QWORD *)v10 + 1) = "md::ls::RenderableVisibilityOptions]";
  *((_QWORD *)v10 + 2) = 35;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xECC498AF223943D5;
    *((_QWORD *)v4 + 1) = "md::ls::MeshLayerTypeV]";
    *((_QWORD *)v4 + 2) = 22;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xECC498AF223943D5;
  *((_QWORD *)v21 + 1) = "md::ls::MeshLayerTypeV]";
  *((_QWORD *)v21 + 2) = 22;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xFB8BCB8E983A05B1;
    *((_QWORD *)v14 + 1) = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
    *((_QWORD *)v14 + 2) = 62;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xFB8BCB8E983A05B1;
  *((_QWORD *)v32 + 1) = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
  *((_QWORD *)v32 + 2) = 62;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F734DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277F80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277F80;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  _BOOL4 v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t result;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274F98;
  v4[1] = a2;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = (int8x8_t)v21[1];
  if (!*(_QWORD *)&v22)
    goto LABEL_47;
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v24 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v22 <= 0x8BD499FBD96FBB9ELL)
      v24 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v22;
  }
  else
  {
    v24 = (*(_QWORD *)&v22 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v25 = *(_QWORD **)(*v21 + 8 * v24);
  if (!v25)
    goto LABEL_47;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_47;
  if (v23.u32[0] < 2uLL)
  {
    v27 = *(_QWORD *)&v22 - 1;
    while (1)
    {
      v29 = v26[1];
      if (v29 == 0x8BD499FBD96FBB9ELL)
      {
        if (v26[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_45;
      }
      else if ((v29 & v27) != v24)
      {
        goto LABEL_47;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v28 = v26[1];
    if (v28 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v28 >= *(_QWORD *)&v22)
      v28 %= *(_QWORD *)&v22;
    if (v28 != v24)
      goto LABEL_47;
LABEL_34:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_47;
  }
  if (v26[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_34;
LABEL_45:
  v30 = v26[5];
  if (*(_QWORD *)(v30 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v31 = *(float **)(v30 + 32);
LABEL_48:
  v32 = v31[4] <= 0.01 && *((_BYTE *)v31 + 3) && *(unsigned __int8 *)v31 != 0;
  LODWORD(v37[0]) = 2;
  v33 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v9 + 824), 2u, v37);
  if (v32)
  {
    v37[0] = &off_1E427C108;
    v37[1] = v3;
    v37[2] = v33 + 24;
    v38 = v37;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v37);
    v34 = v38;
    if (v38 == v37)
    {
      v35 = 4;
      v34 = v37;
LABEL_57:
      (*(void (**)(void))(*v34 + 8 * v35))();
    }
    else if (v38)
    {
      v35 = 5;
      goto LABEL_57;
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7351E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v85[8];
  unint64_t *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  v5 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v2);
  v87 = (_QWORD *)v3;
  v88 = (_QWORD *)v4;
  v89 = (_QWORD *)v5;
  v90 = v6;
  v91 = v7;
  v92 = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v85, (uint64_t *)&v87);
  v9 = v6 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v10 = v3;
  else
    v10 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v5;
  if (v6[8] - v6[7] >= *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v9 = (_QWORD *)(v10 + 32);
  if (v7[8] - v7[7] < v9[4] - v9[3])
    v9 = v7 + 4;
  if (v8[8] - v8[7] < v9[4] - v9[3])
    v9 = v8 + 4;
  v11 = (unint64_t *)v9[4];
  v12 = v86;
  if (v11 == v86)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
LABEL_94:
    *v13 = 0xFFFFFFFF00000000;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v14 = v87;
    v15 = v88;
    v16 = v89;
    v83 = v85[0];
    while (1)
    {
      *v13 = *v12;
      v17 = *v12;
      v18 = HIDWORD(*v12);
      v19 = *v12 >> 39;
      v20 = v14[4];
      if (v19 >= (v14[5] - v20) >> 3)
        goto LABEL_23;
      v21 = *(_QWORD *)(v20 + 8 * v19);
      if (!v21)
        goto LABEL_23;
      v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F));
      v24 = v14[7];
      v23 = v14[8];
      if (v22 >= (v23 - v24) >> 3)
        goto LABEL_23;
      v25 = v24 + 8 * v22;
      if (v25 != v23 && *(_DWORD *)(v25 + 4) == (_DWORD)v18)
      {
        v27 = v14[11];
        v28 = v14[10] + 8 * v22;
      }
      else
      {
LABEL_23:
        v27 = v14[11];
        v28 = v27;
      }
      v29 = v28 == v27 ? 0 : v28;
      if ((v30 = v15[4], v19 < (v15[5] - v30) >> 3)
        && (v31 = *(_QWORD *)(v30 + 8 * v19)) != 0
        && (v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            v34 = v15[7],
            v33 = v15[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == (_DWORD)v18) : (v36 = 0), v36))
      {
        v37 = v15[11];
        v38 = v15[10] + v32;
      }
      else
      {
        v37 = v15[11];
        v38 = v37;
      }
      v39 = v38 == v37 ? 0 : v38;
      if ((v40 = v16[4], v19 < (v16[5] - v40) >> 3)
        && (v41 = *(_QWORD *)(v40 + 8 * v19)) != 0
        && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            v44 = v16[7],
            v43 = v16[8],
            v42 < (v43 - v44) >> 3)
        && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == (_DWORD)v18) : (v46 = 0), v46))
      {
        v47 = v16[11];
        v48 = v16[10] + 8 * v42;
      }
      else
      {
        v47 = v16[11];
        v48 = v47;
      }
      v49 = v48 == v47 ? 0 : v48;
      if ((v50 = v6[4], v19 < (v6[5] - v50) >> 3)
        && (v51 = *(_QWORD *)(v50 + 8 * v19)) != 0
        && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            v54 = v6[7],
            v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v18) : (v56 = 0), v56))
      {
        v57 = v6[11];
        v58 = v6[10] + 4 * v52;
      }
      else
      {
        v57 = v6[11];
        v58 = v57;
      }
      v59 = v58 == v57 ? 0 : v58;
      if ((v60 = v7[4], v19 < (v7[5] - v60) >> 3)
        && (v61 = *(_QWORD *)(v60 + 8 * v19)) != 0
        && (v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            v64 = v7[7],
            v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (v66 = *(_DWORD *)(v65 + 4) == (_DWORD)v18) : (v66 = 0), v66))
      {
        v67 = v7[11];
        v68 = v7[10] + v62;
      }
      else
      {
        v67 = v7[11];
        v68 = v67;
      }
      v69 = v68 == v67 ? 0 : v68;
      if ((v70 = v8[4], v19 < (v8[5] - v70) >> 3)
        && (v71 = *(_QWORD *)(v70 + 8 * v19)) != 0
        && (v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v17) & 0x7F)),
            v74 = v8[7],
            v73 = v8[8],
            v72 < (v73 - v74) >> 3)
        && ((v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == (_DWORD)v18) : (v76 = 0), v76))
      {
        v77 = v8[11];
        v78 = v8[10] + 4 * v72;
      }
      else
      {
        v77 = v8[11];
        v78 = v77;
      }
      v79 = *(_QWORD *)(a2 + 24);
      if (!v79)
        break;
      if (v78 == v77)
        v80 = 0;
      else
        v80 = v78;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v79 + 48))(v79, v29, v39, v49, v59, v69, v80);
      v82 = *(unint64_t **)(v83 + 32);
      while (1)
      {
        v86 = ++v12;
        if (v12 == v82)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v85);
        if ((_DWORD)result)
          goto LABEL_15;
      }
      v12 = v82;
LABEL_15:
      if (v11 == v12)
        goto LABEL_94;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[6];
  uint64_t v11[9];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v1);
  v4 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v1);
  v6 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v1);
  v7 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v11, v10);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v8 = v2;
  else
    v8 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  return *(_QWORD *)(v8 + 64) == v11[8];
}

uint64_t gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x768C72EB9B71F7ADLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x768C72EB9B71F7ADLL;
      if (*(_QWORD *)&v3 <= 0x768C72EB9B71F7ADuLL)
        v5 = 0x768C72EB9B71F7ADuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x768C72EB9B71F7ADLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x768C72EB9B71F7ADLL)
            {
              if (v7[2] == 0x768C72EB9B71F7ADLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x768C72EB9B71F7ADLL)
          {
            if (v7[2] == 0x768C72EB9B71F7ADLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderableVisibilityOptions]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273428;
  *(_QWORD *)(v11 + 8) = 0x768C72EB9B71F7ADLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x768C72EB9B71F7ADuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x768C72EB9B71F7ADLL;
  v15[1] = "md::ls::RenderableVisibilityOptions]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x768C72EB9B71F7ADLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73599C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = *a2 + 32;
  if (!*a2)
    v9 = 0;
  v10 = v4 + 32;
  if (!v4)
    v10 = 0;
  v11 = v5 + 32;
  if (!v5)
    v11 = 0;
  v12 = v6 + 32;
  if (!v6)
    v12 = 0;
  result = v7 + 32;
  if (!v7)
    result = 0;
  v14 = v8 + 32;
  if (!v8)
    v14 = 0;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = v10;
  if (*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = v11;
  if (*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = v12;
  if (*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = result;
  if (*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) < *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v9 = v14;
  *a1 = v9;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  v16 = *(_QWORD *)(v9 + 24);
  v15 = *(_QWORD *)(v9 + 32);
  a1[8] = v16;
  if (v15 != v16)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v17 = v16 + 8;
      do
      {
        a1[8] = v17;
        if (v17 == v15)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(a1);
        v17 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(a1[11] - 4);
  a1[11] -= 4;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285B28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285B28;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285B70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285B70;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4560;
  v2[4] = "md::ls::VisibilityGroupID]";
  v2[5] = 25;
  v2[6] = 0x6CA90C12C415463ALL;
  v2[7] = "md::ls::WantsCulledSlices]";
  v2[8] = 25;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x731F9AB6193E8641;
    v2[10] = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
    v2[11] = 51;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x731F9AB6193E8641;
  *((_QWORD *)v10 + 1) = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
  *((_QWORD *)v10 + 2) = 51;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F735EFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277638;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  unint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (***v44)();
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  char v70;
  uint64_t (**v71)();
  uint64_t v72;
  int v73;
  uint64_t (***v74)();
  uint64_t (**v75)();
  uint64_t v76;
  int v77;
  uint64_t (***v78)();
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  v6 = gdc::Registry::storage<md::ls::WantsCulledSlices>(v3);
  v7 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v3);
  v8 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v8 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v7 + 32);
  v64 = v8;
  v65 = (_QWORD *)v4;
  v66 = v5;
  v67 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v68 = (_QWORD *)v7;
  v69 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v64))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v69 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v64);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v14 = (_QWORD *)result;
  while (v10 != v9)
  {
    *v14 = *v9;
    v16 = *v9;
    v17 = *v9 >> 39;
    v18 = v5[4];
    if (v17 < (v5[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v16) & 0x7F)), v22 = v5[7], v21 = v5[8], v20 < (v21 - v22) >> 3)
      && ((v23 = HIDWORD(v16), v24 = v22 + 8 * v20, v24 != v21)
        ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v23)
        : (v25 = 0),
          v25))
    {
      v26 = (unint64_t *)(v5[10] + 8 * v20);
    }
    else
    {
      v26 = (unint64_t *)v5[11];
    }
    v27 = **(_QWORD **)(a1 + 8);
    v28 = *(_QWORD **)v27;
    v29 = *(_QWORD **)(v27 + 8);
    if (v28 != v29)
    {
      while (*v28 != 0x41D4E9297E100630)
      {
        v28 += 5;
        if (v28 == v29)
          goto LABEL_36;
      }
    }
    if (v28 == v29)
    {
LABEL_36:
      v31 = 0;
    }
    else
    {
      v31 = v28[3];
      v30 = (std::__shared_weak_count *)v28[4];
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    LODWORD(v75) = 7;
    v35 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v31 + 824), 7u, &v75);
    v36 = *(_QWORD **)(a1 + 8);
    v37 = HIDWORD(*v14);
    v38 = (*v14 << 32) | 1;
    v71 = &off_1E427E820;
    v72 = v38;
    v73 = v37;
    v74 = &v71;
    v75 = &off_1E427E820;
    v78 = &v75;
    v76 = v38;
    v77 = v37;
    v79 = 0;
    ecs2::Runtime::queueCommand(v36, (uint64_t)&v75);
    if (v79 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v79])(&v70, &v75);
    v79 = -1;
    v39 = v74;
    if (v74 == &v71)
    {
      v39 = &v71;
      v40 = 4;
    }
    else
    {
      if (!v74)
        goto LABEL_44;
      v40 = 5;
    }
    (*v39)[v40]();
LABEL_44:
    v41 = *(_QWORD **)(a1 + 8);
    v42 = HIDWORD(*v14);
    v43 = (*v14 << 32) | 1;
    v71 = &off_1E4281D90;
    v72 = v43;
    v73 = v42;
    v74 = &v71;
    v75 = &off_1E4281D90;
    v78 = &v75;
    v76 = v43;
    v77 = v42;
    v79 = 0;
    ecs2::Runtime::queueCommand(v41, (uint64_t)&v75);
    if (v79 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v79])(&v70, &v75);
    v79 = -1;
    v44 = v74;
    if (v74 == &v71)
    {
      v44 = &v71;
      v45 = 4;
      goto LABEL_50;
    }
    if (v74)
    {
      v45 = 5;
LABEL_50:
      (*v44)[v45]();
    }
    result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v35 + 24), *v26, *v26);
    v9 = (_QWORD *)v64[4];
    v15 = v69 + 1;
    v69 = v15;
    if (v15 != v9)
    {
      v46 = v65[4];
      while (1)
      {
        v47 = *((unsigned int *)v15 + 1);
        v48 = v47 >> 7;
        if (v47 >> 7 < (v65[5] - v46) >> 3)
        {
          result = *(_QWORD *)(v46 + 8 * v48);
          if (result)
          {
            v49 = v47 & 0x7F;
            result = *(unsigned __int16 *)(result + 2 * v49);
            v51 = v65[7];
            v50 = v65[8];
            if (result < (v50 - v51) >> 3)
            {
              result = v51 + 8 * result;
              if (result != v50 && *(_DWORD *)(result + 4) == (_DWORD)v47)
              {
                result = v66[4];
                if (v48 < (uint64_t)(v66[5] - result) >> 3)
                {
                  result = *(_QWORD *)(result + 8 * v48);
                  if (result)
                  {
                    result = *(unsigned __int16 *)(result + 2 * v49);
                    v54 = v66[7];
                    v53 = v66[8];
                    if (result < (v53 - v54) >> 3)
                    {
                      result = v54 + 8 * result;
                      if (result != v53 && *(_DWORD *)(result + 4) == (_DWORD)v47)
                      {
                        result = v67[4];
                        if (v48 < (uint64_t)(v67[5] - result) >> 3)
                        {
                          result = *(_QWORD *)(result + 8 * v48);
                          if (result)
                          {
                            result = *(unsigned __int16 *)(result + 2 * v49);
                            v57 = v67[7];
                            v56 = v67[8];
                            if (result < (v56 - v57) >> 3)
                            {
                              result = v57 + 8 * result;
                              if (result != v56 && *(_DWORD *)(result + 4) == (_DWORD)v47)
                              {
                                result = v68[4];
                                if (v48 < (uint64_t)(v68[5] - result) >> 3)
                                {
                                  v59 = *(_QWORD *)(result + 8 * v48);
                                  if (v59)
                                  {
                                    v60 = *(unsigned __int16 *)(v59 + 2 * v49);
                                    result = v68[7];
                                    v61 = v68[8];
                                    if (v60 < (uint64_t)(v61 - result) >> 3)
                                    {
                                      v62 = result + 8 * v60;
                                      result = *(unsigned int *)(v62 + 4);
                                      if ((_DWORD)result == (_DWORD)v47 && v62 != v61)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v15 == v9)
        {
          v15 = v9;
          goto LABEL_15;
        }
      }
      v9 = v15;
LABEL_15:
      v69 = v15;
    }
  }
  *v14 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::WantsCulledSlices>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6CA90C12C415463ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6CA90C12C415463ALL;
      if (*(_QWORD *)&v3 <= 0x6CA90C12C415463AuLL)
        v5 = 0x6CA90C12C415463AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6CA90C12C415463ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6CA90C12C415463ALL)
            {
              if (v7[2] == 0x6CA90C12C415463ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6CA90C12C415463ALL)
          {
            if (v7[2] == 0x6CA90C12C415463ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::WantsCulledSlices]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272108;
  *(_QWORD *)(v11 + 8) = 0x6CA90C12C415463ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6CA90C12C415463AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6CA90C12C415463ALL;
  v15[1] = "md::ls::WantsCulledSlices]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6CA90C12C415463ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7366F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283188;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283188;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42831D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42831D0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4560;
  v2[4] = "md::ls::VisibilityGroupID]";
  v2[5] = 25;
  v2[6] = 0x50A14E0778169E99;
  v2[7] = "md::ls::IgnoreCulling]";
  v2[8] = 21;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xD15AF44EFDE875A7;
    v2[10] = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
    v2[11] = 68;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xD15AF44EFDE875A7;
  *((_QWORD *)v10 + 1) = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
  *((_QWORD *)v10 + 2) = 68;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F736B0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276168;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276168;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  unint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  char v65;
  _QWORD v66[2];
  int v67;
  _QWORD *v68;
  _QWORD v69[2];
  int v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  v6 = gdc::Registry::storage<md::ls::IgnoreCulling>(v3);
  v7 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v3);
  v8 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v8 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v7 + 32);
  v59 = v8;
  v60 = (_QWORD *)v4;
  v61 = v5;
  v62 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v63 = (_QWORD *)v7;
  v64 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v59))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v64 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v59);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v14 = (_QWORD *)result;
  if (v10 != v9)
  {
    while (1)
    {
      *v14 = *v9;
      v16 = *v9;
      v17 = *v9 >> 39;
      v18 = v5[4];
      if (v17 < (v5[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v16) & 0x7F)),
            v22 = v5[7],
            v21 = v5[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = HIDWORD(v16), v24 = v22 + 8 * v20, v24 != v21)
          ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v23)
          : (v25 = 0),
            v25))
      {
        v26 = (unint64_t *)(v5[10] + 8 * v20);
      }
      else
      {
        v26 = (unint64_t *)v5[11];
      }
      v27 = **(_QWORD **)(a1 + 8);
      v28 = *(_QWORD **)v27;
      v29 = *(_QWORD **)(v27 + 8);
      if (v28 != v29)
      {
        while (*v28 != 0x41D4E9297E100630)
        {
          v28 += 5;
          if (v28 == v29)
            goto LABEL_36;
        }
      }
      if (v28 == v29)
      {
LABEL_36:
        v31 = 0;
      }
      else
      {
        v31 = v28[3];
        v30 = (std::__shared_weak_count *)v28[4];
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      LODWORD(v69[0]) = 7;
      v35 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v31 + 824), 7u, v69);
      v36 = *(_QWORD **)(a1 + 8);
      v37 = HIDWORD(*v14);
      v38 = (*v14 << 32) | 1;
      v66[0] = &off_1E427E820;
      v66[1] = v38;
      v67 = v37;
      v68 = v66;
      v69[0] = &off_1E427E820;
      v71 = v69;
      v69[1] = v38;
      v70 = v37;
      v72 = 0;
      ecs2::Runtime::queueCommand(v36, (uint64_t)v69);
      if (v72 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v72])(&v65, v69);
      v72 = -1;
      v39 = v68;
      if (v68 == v66)
        break;
      if (v68)
      {
        v40 = 5;
LABEL_43:
        (*(void (**)(void))(*v39 + 8 * v40))();
      }
      result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v35 + 24), *v26, *v26);
      v9 = (_QWORD *)v59[4];
      v15 = v64 + 1;
      v64 = v15;
      if (v15 != v9)
      {
        v41 = v60[4];
        while (1)
        {
          v42 = *((unsigned int *)v15 + 1);
          v43 = v42 >> 7;
          if (v42 >> 7 < (v60[5] - v41) >> 3)
          {
            result = *(_QWORD *)(v41 + 8 * v43);
            if (result)
            {
              v44 = v42 & 0x7F;
              result = *(unsigned __int16 *)(result + 2 * v44);
              v46 = v60[7];
              v45 = v60[8];
              if (result < (v45 - v46) >> 3)
              {
                result = v46 + 8 * result;
                if (result != v45 && *(_DWORD *)(result + 4) == (_DWORD)v42)
                {
                  result = v61[4];
                  if (v43 < (uint64_t)(v61[5] - result) >> 3)
                  {
                    result = *(_QWORD *)(result + 8 * v43);
                    if (result)
                    {
                      result = *(unsigned __int16 *)(result + 2 * v44);
                      v49 = v61[7];
                      v48 = v61[8];
                      if (result < (v48 - v49) >> 3)
                      {
                        result = v49 + 8 * result;
                        if (result != v48 && *(_DWORD *)(result + 4) == (_DWORD)v42)
                        {
                          result = v62[4];
                          if (v43 < (uint64_t)(v62[5] - result) >> 3)
                          {
                            result = *(_QWORD *)(result + 8 * v43);
                            if (result)
                            {
                              result = *(unsigned __int16 *)(result + 2 * v44);
                              v52 = v62[7];
                              v51 = v62[8];
                              if (result < (v51 - v52) >> 3)
                              {
                                result = v52 + 8 * result;
                                if (result != v51 && *(_DWORD *)(result + 4) == (_DWORD)v42)
                                {
                                  result = v63[4];
                                  if (v43 < (uint64_t)(v63[5] - result) >> 3)
                                  {
                                    v54 = *(_QWORD *)(result + 8 * v43);
                                    if (v54)
                                    {
                                      v55 = *(unsigned __int16 *)(v54 + 2 * v44);
                                      result = v63[7];
                                      v56 = v63[8];
                                      if (v55 < (uint64_t)(v56 - result) >> 3)
                                      {
                                        v57 = result + 8 * v55;
                                        result = *(unsigned int *)(v57 + 4);
                                        if ((_DWORD)result == (_DWORD)v42 && v57 != v56)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v15 == v9)
          {
            v15 = v9;
            goto LABEL_15;
          }
        }
        v9 = v15;
LABEL_15:
        v64 = v15;
      }
      if (v10 == v9)
        goto LABEL_80;
    }
    v39 = v66;
    v40 = 4;
    goto LABEL_43;
  }
LABEL_80:
  *v14 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IgnoreCulling>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x50A14E0778169E99;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x50A14E0778169E99;
      if (*(_QWORD *)&v3 <= 0x50A14E0778169E99uLL)
        v5 = 0x50A14E0778169E99uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x50A14E0778169E99;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x50A14E0778169E99)
            {
              if (v7[2] == 0x50A14E0778169E99)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x50A14E0778169E99)
          {
            if (v7[2] == 0x50A14E0778169E99)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IgnoreCulling]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42714D8;
  *(_QWORD *)(v11 + 8) = 0x50A14E0778169E99;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x50A14E0778169E99uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x50A14E0778169E99;
  v15[1] = "md::ls::IgnoreCulling]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x50A14E0778169E99, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73725C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD15AF44EFDE875A7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD15AF44EFDE875A7;
      if (*(_QWORD *)&v3 <= 0xD15AF44EFDE875A7)
        v5 = 0xD15AF44EFDE875A7 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD15AF44EFDE875A7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD15AF44EFDE875A7)
            {
              if (v7[2] == 0xD15AF44EFDE875A7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD15AF44EFDE875A7)
          {
            if (v7[2] == 0xD15AF44EFDE875A7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271D78;
  *(_QWORD *)(v11 + 8) = 0xD15AF44EFDE875A7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD15AF44EFDE875A7, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD15AF44EFDE875A7;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD15AF44EFDE875A7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F737484(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283698;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283698;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42836E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42836E0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xC0uLL);
  a1[2] = (char *)(v2 + 24);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4580;
  v2[4] = "md::BoundData]";
  v2[5] = 13;
  v2[6] = 0x45B31C2960E9BCB1;
  v2[7] = "md::ls::VisibilityGroupID]";
  v2[8] = 25;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 24)
  {
    *(_QWORD *)v3 = 0x5EBA003AC7A96B8ALL;
    v2[10] = "md::ls::SharedRenderableDataHandle]";
    v2[11] = 34;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  if (0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 24) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x5EBA003AC7A96B8ALL;
  *((_QWORD *)v10 + 1) = "md::ls::SharedRenderableDataHandle]";
  *((_QWORD *)v10 + 2) = 34;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x6CA90C12C415463ALL;
    *((_QWORD *)v4 + 1) = "md::ls::WantsCulledSlices]";
    *((_QWORD *)v4 + 2) = 25;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x6CA90C12C415463ALL;
  *((_QWORD *)v21 + 1) = "md::ls::WantsCulledSlices]";
  *((_QWORD *)v21 + 2) = 25;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xEC2A00DC914732D7;
    *((_QWORD *)v14 + 1) = "md::ls::IntendedSceneLayer]";
    *((_QWORD *)v14 + 2) = 26;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xEC2A00DC914732D7;
  *((_QWORD *)v32 + 1) = "md::ls::IntendedSceneLayer]";
  *((_QWORD *)v32 + 2) = 26;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xD15AF44EFDE875A7;
    *((_QWORD *)v25 + 1) = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
    *((_QWORD *)v25 + 2) = 68;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xD15AF44EFDE875A7;
  *((_QWORD *)v43 + 1) = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
  *((_QWORD *)v43 + 2) = 68;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x768C72EB9B71F7ADLL;
    *((_QWORD *)v36 + 1) = "md::ls::RenderableVisibilityOptions]";
    *((_QWORD *)v36 + 2) = 35;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_92:
    abort();
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 <= 0xAAAAAAAAAAAAAAALL)
    {
      v53 = (char *)operator new(24 * v52);
      goto LABEL_85;
    }
LABEL_93:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v53 = 0;
LABEL_85:
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x768C72EB9B71F7ADLL;
  *((_QWORD *)v54 + 1) = "md::ls::RenderableVisibilityOptions]";
  *((_QWORD *)v54 + 2) = 35;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
}

void sub_19F737EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42763F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42763F0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t result;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (***v71)(_QWORD);
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  int8x8_t v77;
  uint8x8_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  int v87;
  char *v88;
  char *v89;
  float *RenderableData;
  _BOOL4 v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (***v95)();
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (***v100)();
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  unint64_t *v109;
  _QWORD *v110;
  _QWORD v112[10];
  _QWORD *v113;
  char v114;
  uint64_t (**v115)();
  uint64_t v116;
  int v117;
  uint64_t (***v118)();
  uint64_t (**v119)();
  uint64_t v120;
  int v121;
  uint64_t (***v122)();
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = gdc::Registry::storage<md::BoundData>(v2);
  v5 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  v6 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v2);
  v7 = gdc::Registry::storage<md::ls::WantsCulledSlices>(v2);
  v8 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  v9 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v2);
  v10 = gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v2);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v11 = v3 + 32;
  else
    v11 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v5 + 32;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v6 + 32;
  v104 = *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56);
  if (v104 < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v7 + 32;
  v103 = *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56);
  if (v103 < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v8 + 32;
  if (*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v9 + 32;
  if (*(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v10 + 32;
  v112[0] = v11;
  v112[1] = v3;
  v107 = (_QWORD *)v5;
  v108 = (_QWORD *)v4;
  v112[2] = v4;
  v112[3] = v5;
  v106 = (_QWORD *)v10;
  v112[4] = v6;
  v112[5] = v7;
  v112[6] = v8;
  v112[7] = v9;
  v13 = *(_QWORD **)(v11 + 24);
  v12 = *(_QWORD **)(v11 + 32);
  v112[8] = v10;
  v113 = v13;
  if (v12 == v13)
  {
    v14 = v108;
  }
  else
  {
    v14 = v108;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v112))
    {
      v15 = v13 + 1;
      do
      {
        v13 = v15;
        v113 = v15;
        if (v15 == v12)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v112);
        v15 = v13 + 1;
      }
      while (!isValid);
    }
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v110 = (_QWORD *)result;
  v105 = v20;
  while (v105 != v13)
  {
    *v110 = *v13;
    v21 = *v13;
    v22 = HIDWORD(*v13);
    v23 = *v13 >> 39;
    v24 = v14[4];
    if (v23 < (v14[5] - v24) >> 3
      && (v25 = *(_QWORD *)(v24 + 8 * v23)) != 0
      && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F)),
          v28 = v14[7],
          v27 = v14[8],
          v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v22) : (v30 = 0), v30))
    {
      v31 = v14[11];
      v32 = v14[10] + 24 * v26;
    }
    else
    {
      v31 = v14[11];
      v32 = v31;
    }
    if (v32 == v31)
      v33 = 0;
    else
      v33 = (float *)v32;
    v34 = v19[4];
    if (v23 < (v19[5] - v34) >> 3
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)),
          v38 = v19[7],
          v37 = v19[8],
          v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v19[10] + 8 * v36;
    }
    else
    {
      v41 = v19[11];
    }
    v42 = v18[4];
    if (v23 < (v18[5] - v42) >> 3
      && (v43 = *(_QWORD *)(v42 + 8 * v23)) != 0
      && (v44 = *(unsigned __int16 *)(v43 + 2 * (HIDWORD(v21) & 0x7F)),
          v46 = v18[7],
          v45 = v18[8],
          v44 < (v45 - v46) >> 3)
      && ((v47 = v46 + 8 * v44, v47 != v45) ? (v48 = *(_DWORD *)(v47 + 4) == (_DWORD)v22) : (v48 = 0), v48))
    {
      v49 = (unint64_t *)(v18[10] + 8 * v44);
    }
    else
    {
      v49 = (unint64_t *)v18[11];
    }
    v50 = v106[4];
    if (v23 < (v106[5] - v50) >> 3
      && (v51 = *(_QWORD *)(v50 + 8 * v23)) != 0
      && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v21) & 0x7F)),
          v54 = v106[7],
          v53 = v106[8],
          v52 < (v53 - v54) >> 3)
      && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v22) : (v56 = 0), v56))
    {
      v57 = v106[11];
      v58 = v106[10] + 4 * v52;
    }
    else
    {
      v57 = v106[11];
      v58 = v57;
    }
    if (v58 == v57)
      v59 = 0;
    else
      v59 = v58;
    v60 = **(_QWORD **)(a1 + 8);
    v61 = *(_QWORD **)v60;
    v62 = *(_QWORD **)(v60 + 8);
    v109 = (unint64_t *)v41;
    if (v61 != v62)
    {
      while (*v61 != 0x41D4E9297E100630)
      {
        v61 += 5;
        if (v61 == v62)
          goto LABEL_76;
      }
    }
    if (v61 == v62)
    {
LABEL_76:
      v63 = 0;
    }
    else
    {
      v63 = v61[3];
      v64 = (std::__shared_weak_count *)v61[4];
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(p_shared_owners);
        while (__stxr(v66 + 1, p_shared_owners));
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    v68 = ***(uint64_t ****)(a1 + 8);
    if (v68 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v68 != 0x22D45F5AAD4BF408)
    {
      v69 = v68 + 5;
      do
      {
        v70 = *v69;
        v69 += 5;
      }
      while (v70 != 0x22D45F5AAD4BF408);
      v68 = v69 - 5;
    }
    v71 = (uint64_t (***)(_QWORD))v68[3];
    v72 = (std::__shared_weak_count *)v68[4];
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      do
        v75 = __ldaxr(v73);
      while (__stlxr(v75 - 1, v73));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v76 = *(_QWORD **)((**v71)(v71) + 8);
    v77 = (int8x8_t)v76[1];
    if (!*(_QWORD *)&v77)
      goto LABEL_115;
    v78 = (uint8x8_t)vcnt_s8(v77);
    v78.i16[0] = vaddlv_u8(v78);
    if (v78.u32[0] > 1uLL)
    {
      v79 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v77 <= 0x8BD499FBD96FBB9ELL)
        v79 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v77;
    }
    else
    {
      v79 = (*(_QWORD *)&v77 - 1) & 0x8BD499FBD96FBB9ELL;
    }
    v80 = *(_QWORD **)(*v76 + 8 * v79);
    if (!v80 || (v81 = (_QWORD *)*v80) == 0)
    {
LABEL_115:
      v86 = 0;
      goto LABEL_116;
    }
    if (v78.u32[0] < 2uLL)
    {
      v82 = *(_QWORD *)&v77 - 1;
      while (1)
      {
        v84 = v81[1];
        if (v84 == 0x8BD499FBD96FBB9ELL)
        {
          if (v81[2] == 0x8BD499FBD96FBB9ELL)
            goto LABEL_113;
        }
        else if ((v84 & v82) != v79)
        {
          goto LABEL_115;
        }
        v81 = (_QWORD *)*v81;
        if (!v81)
          goto LABEL_115;
      }
    }
    while (1)
    {
      v83 = v81[1];
      if (v83 == 0x8BD499FBD96FBB9ELL)
        break;
      if (v83 >= *(_QWORD *)&v77)
        v83 %= *(_QWORD *)&v77;
      if (v83 != v79)
        goto LABEL_115;
LABEL_98:
      v81 = (_QWORD *)*v81;
      if (!v81)
        goto LABEL_115;
    }
    if (v81[2] != 0x8BD499FBD96FBB9ELL)
      goto LABEL_98;
LABEL_113:
    v85 = v81[5];
    if (*(_QWORD *)(v85 + 8) != 0x8BD499FBD96FBB9ELL)
      goto LABEL_115;
    v86 = *(float **)(v85 + 32);
LABEL_116:
    v87 = v86[4] > 0.01 || !*((_BYTE *)v86 + 3) || *(unsigned __int8 *)v86 == 0;
    LODWORD(v119) = 1;
    v88 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v63 + 824), 1u, &v119);
    LODWORD(v119) = 8;
    v89 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v63 + 824), 8u, &v119);
    RenderableData = (float *)md::VKMRenderResourcesStore::getRenderableData(v63, *v49);
    v91 = *(_BYTE *)(v59 + 2) != 0;
    result = geo::Intersect::encloses<float>(RenderableData, v33);
    if ((v91 & ~v87 & 1) != 0)
    {
      v14 = v108;
      if (!(_DWORD)result)
        goto LABEL_139;
      v97 = *(_QWORD **)(a1 + 8);
      v98 = HIDWORD(*v110);
      v99 = (*v110 << 32) | 1;
      v115 = &off_1E427E868;
      v116 = v99;
      v117 = v98;
      v118 = &v115;
      v119 = &off_1E427E868;
      v122 = &v119;
      v120 = v99;
      v121 = v98;
      v123 = 0;
      ecs2::Runtime::queueCommand(v97, (uint64_t)&v119);
      if (v123 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v123])(&v114, &v119);
      v123 = -1;
      v100 = v118;
      if (v118 == &v115)
      {
        v100 = &v115;
        v101 = 4;
LABEL_136:
        (*v100)[v101]();
      }
      else if (v118)
      {
        v101 = 5;
        goto LABEL_136;
      }
      v88 = v89;
      goto LABEL_138;
    }
    v14 = v108;
    if ((_DWORD)result)
    {
      v92 = *(_QWORD **)(a1 + 8);
      v93 = HIDWORD(*v110);
      v94 = (*v110 << 32) | 1;
      v115 = &off_1E427E6B8;
      v116 = v94;
      v117 = v93;
      v118 = &v115;
      v119 = &off_1E427E6B8;
      v122 = &v119;
      v120 = v94;
      v121 = v93;
      v123 = 0;
      ecs2::Runtime::queueCommand(v92, (uint64_t)&v119);
      if (v123 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v123])(&v114, &v119);
      v123 = -1;
      v95 = v118;
      if (v118 == &v115)
      {
        v95 = &v115;
        v96 = 4;
LABEL_134:
        (*v95)[v96]();
      }
      else if (v118)
      {
        v96 = 5;
        goto LABEL_134;
      }
LABEL_138:
      result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v88 + 24), *v109, *v109);
    }
LABEL_139:
    v13 = v113;
    v102 = *(_QWORD **)(v112[0] + 32);
    while (1)
    {
      v113 = ++v13;
      if (v13 == v102)
        break;
      result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v112);
      if ((_DWORD)result)
        goto LABEL_26;
    }
    v13 = v102;
LABEL_26:
    v18 = (_QWORD *)v6;
    v19 = v107;
  }
  *v110 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283A88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283A88;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x5EBA003AC7A96B8ALL;
  result[1] = "md::ls::SharedRenderableDataHandle]";
  result[2] = 34;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283AD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283AD0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xA054AACDFDD6A6BLL;
  v2[1] = "md::ls::AppliedWantsDynamicShadowBounds]";
  *(_QWORD *)&result = 39;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4590;
  v2[4] = "md::BoundData]";
  v2[5] = 13;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42765E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42765E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::BoundData>(v3);
  v6 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v3);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v8 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v67 = v8;
  v68 = (_QWORD *)v4;
  v69 = v5;
  v70 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v71 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v67))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v71 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v67);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v13 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v5[4];
      if (v17 < (v5[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v5[7],
            v21 = v5[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v5[11];
        v26 = v5[10] + 24 * v20;
      }
      else
      {
        v25 = v5[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = (float *)v26;
      v28 = v7[4];
      if (v17 < (v7[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v7[7],
            v31 = v7[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = (unint64_t *)(v7[10] + 8 * v30);
      }
      else
      {
        v35 = (unint64_t *)v7[11];
      }
      v36 = **(_QWORD **)(a1 + 8);
      v37 = *(_QWORD **)v36;
      v38 = *(_QWORD **)(v36 + 8);
      if (v37 != v38)
      {
        while (*v37 != 0x41D4E9297E100630)
        {
          v37 += 5;
          if (v37 == v38)
            goto LABEL_45;
        }
      }
      if (v37 == v38)
      {
LABEL_45:
        v39 = 0;
      }
      else
      {
        v39 = v37[3];
        v40 = (std::__shared_weak_count *)v37[4];
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(p_shared_owners);
          while (__stxr(v42 + 1, p_shared_owners));
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      result = md::VKMRenderResourcesStore::getRenderableData(v39, *v35);
      *(float *)(result + 256) = fminf(*v27, *(float *)(result + 256));
      *(float *)(result + 268) = fmaxf(*(float *)(result + 268), v27[3]);
      *(float *)(result + 260) = fminf(v27[1], *(float *)(result + 260));
      *(float *)(result + 272) = fmaxf(*(float *)(result + 272), v27[4]);
      *(float *)(result + 264) = fminf(v27[2], *(float *)(result + 264));
      *(float *)(result + 276) = fmaxf(*(float *)(result + 276), v27[5]);
      v9 = (_QWORD *)v67[4];
      v14 = v71 + 1;
      v71 = v14;
      if (v14 != v9)
      {
        v45 = v68[4];
        while (1)
        {
          v46 = *((unsigned int *)v14 + 1);
          v47 = v46 >> 7;
          if (v46 >> 7 < (v68[5] - v45) >> 3)
          {
            v48 = *(_QWORD *)(v45 + 8 * v47);
            if (v48)
            {
              v49 = v46 & 0x7F;
              v50 = *(unsigned __int16 *)(v48 + 2 * v49);
              v51 = v68[7];
              result = v68[8];
              if (v50 < (result - v51) >> 3)
              {
                v52 = v51 + 8 * v50;
                if (v52 != result && *(_DWORD *)(v52 + 4) == (_DWORD)v46)
                {
                  v54 = v69[4];
                  result = v69[5] - v54;
                  if (v47 < result >> 3)
                  {
                    v55 = *(_QWORD *)(v54 + 8 * v47);
                    if (v55)
                    {
                      v56 = *(unsigned __int16 *)(v55 + 2 * v49);
                      v57 = v69[7];
                      result = v69[8];
                      if (v56 < (result - v57) >> 3)
                      {
                        v58 = v57 + 8 * v56;
                        if (v58 != result && *(_DWORD *)(v58 + 4) == (_DWORD)v46)
                        {
                          v60 = v70[4];
                          result = v70[5] - v60;
                          if (v47 < result >> 3)
                          {
                            v61 = *(_QWORD *)(v60 + 8 * v47);
                            if (v61)
                            {
                              v62 = *(unsigned __int16 *)(v61 + 2 * v49);
                              v64 = v70[7];
                              v63 = v70[8];
                              result = v63 - v64;
                              if (v62 < (v63 - v64) >> 3)
                              {
                                v65 = v64 + 8 * v62;
                                if (*(_DWORD *)(v65 + 4) == (_DWORD)v46 && v65 != v63)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v9)
          {
            v14 = v9;
            goto LABEL_13;
          }
        }
        v9 = v14;
LABEL_13:
        v71 = v14;
      }
    }
    while (v10 != v9);
  }
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286158;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286158;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x2523AFF0E364AA00;
  v2[1] = "md::BoundData]";
  *(_QWORD *)&result = 13;
  *((_OWORD *)v2 + 1) = xmmword_19FFB45A0;
  v2[4] = "md::BoundData]";
  v2[5] = 13;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42861A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42861A0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xA8uLL);
  a1[2] = (char *)(v2 + 21);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB45B0;
  v2[4] = "md::ls::GeocentricBounds]";
  v2[5] = 24;
  v2[6] = 0xD15AF44EFDE875A7;
  v2[7] = "md::ls::SliceAssignmentT<md::SliceType::AllByPrimitiveAndVisibility>]";
  v2[8] = 68;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 21)
  {
    *(_QWORD *)v3 = 0x1DBDEAE2D8DF6302;
    v2[10] = "md::ls::MeshRenderableTransformConstantDataHandle]";
    v2[11] = 49;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  if (0x5555555555555556 * (((char *)(v2 + 21) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 21) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 21) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x1DBDEAE2D8DF6302;
  *((_QWORD *)v10 + 1) = "md::ls::MeshRenderableTransformConstantDataHandle]";
  *((_QWORD *)v10 + 2) = 49;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x6B3ACE485940A135;
    *((_QWORD *)v4 + 1) = "md::ls::MeshRenderableBounds]";
    *((_QWORD *)v4 + 2) = 28;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x6B3ACE485940A135;
  *((_QWORD *)v21 + 1) = "md::ls::MeshRenderableBounds]";
  *((_QWORD *)v21 + 2) = 28;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x2DE7529E814754ABLL;
    *((_QWORD *)v14 + 1) = "md::ls::BoundZScale]";
    *((_QWORD *)v14 + 2) = 19;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x2DE7529E814754ABLL;
  *((_QWORD *)v32 + 1) = "md::ls::BoundZScale]";
  *((_QWORD *)v32 + 2) = 19;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xA2CB76FD7F023F9CLL;
    *((_QWORD *)v25 + 1) = "md::ls::BoundZAdjust]";
    *((_QWORD *)v25 + 2) = 20;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_74:
    abort();
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 <= 0xAAAAAAAAAAAAAAALL)
    {
      v42 = (char *)operator new(24 * v41);
      goto LABEL_67;
    }
LABEL_75:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v42 = 0;
LABEL_67:
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xA2CB76FD7F023F9CLL;
  *((_QWORD *)v43 + 1) = "md::ls::BoundZAdjust]";
  *((_QWORD *)v43 + 2) = 20;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
}

void sub_19F739514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277950;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274E48;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4274EA8;
  v5[1] = a2;
  v6 = ***(uint64_t ****)(a1 + 8);
  if (v6 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = *(_QWORD **)((**v9)(v9) + 8);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
    goto LABEL_35;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v15 <= 0x1AF456233693CD46uLL)
      v17 = 0x1AF456233693CD46uLL % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0x1AF456233693CD46;
  }
  v18 = *(_QWORD **)(*v14 + 8 * v17);
  if (!v18)
    goto LABEL_35;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_35;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v22 = v19[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v19[2] == 0x1AF456233693CD46)
          goto LABEL_33;
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_35;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v21 == 0x1AF456233693CD46)
      break;
    if (v21 >= *(_QWORD *)&v15)
      v21 %= *(_QWORD *)&v15;
    if (v21 != v17)
      goto LABEL_35;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_35;
  }
  if (v19[2] != 0x1AF456233693CD46)
    goto LABEL_22;
LABEL_33:
  v23 = v19[5];
  if (*(_QWORD *)(v23 + 8) == 0x1AF456233693CD46)
  {
    v24 = *(_QWORD *)(v23 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v24 = 0;
LABEL_36:
  v36 = 0;
  v25 = **(_QWORD **)(a1 + 8);
  v26 = *(_QWORD **)v25;
  v27 = *(_QWORD **)(v25 + 8);
  if (v26 != v27)
  {
    while (*v26 != 0x41D4E9297E100630)
    {
      v26 += 5;
      if (v26 == v27)
        goto LABEL_47;
    }
  }
  if (v26 == v27)
  {
LABEL_47:
    v29 = 0;
  }
  else
  {
    v29 = v26[3];
    v28 = (std::__shared_weak_count *)v26[4];
    if (v28)
    {
      v30 = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v36 = v29;
  if (*(unsigned __int8 *)(v24 + 3776) - 1 > 2)
  {
    v37[0] = &off_1E427BD60;
    v38 = v37;
    (*(void (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v37);
  }
  else
  {
    v37[0] = &off_1E427BD18;
    v37[1] = &v36;
    v38 = v37;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v37);
  }
  v33 = v38;
  if (v38 == v37)
  {
    v34 = 4;
    v33 = v37;
LABEL_55:
    (*(void (**)(_QWORD *))(*v33 + 8 * v34))(v33);
  }
  else if (v38)
  {
    v34 = 5;
    goto LABEL_55;
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F73995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v85[8];
  unint64_t *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v2);
  v5 = gdc::Registry::storage<md::ls::BoundZScale>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::BoundZAdjust>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableBounds>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::BoundData>(v2);
  v87 = (_QWORD *)v3;
  v88 = (_QWORD *)v4;
  v89 = (_QWORD *)v5;
  v90 = v6;
  v91 = v7;
  v92 = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v85, (uint64_t *)&v87);
  v9 = v6 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v10 = v3;
  else
    v10 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v5;
  if (v6[8] - v6[7] >= *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v9 = (_QWORD *)(v10 + 32);
  if (v7[8] - v7[7] < v9[4] - v9[3])
    v9 = v7 + 4;
  if (v8[8] - v8[7] < v9[4] - v9[3])
    v9 = v8 + 4;
  v11 = (unint64_t *)v9[4];
  v12 = v86;
  if (v11 == v86)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
LABEL_94:
    *v13 = 0xFFFFFFFF00000000;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v14 = v87;
    v15 = v88;
    v16 = v89;
    v83 = v85[0];
    while (1)
    {
      *v13 = *v12;
      v17 = *v12;
      v18 = HIDWORD(*v12);
      v19 = *v12 >> 39;
      v20 = v14[4];
      if (v19 >= (v14[5] - v20) >> 3)
        goto LABEL_23;
      v21 = *(_QWORD *)(v20 + 8 * v19);
      if (!v21)
        goto LABEL_23;
      v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F));
      v24 = v14[7];
      v23 = v14[8];
      if (v22 >= (v23 - v24) >> 3)
        goto LABEL_23;
      v25 = v24 + 8 * v22;
      if (v25 != v23 && *(_DWORD *)(v25 + 4) == (_DWORD)v18)
      {
        v27 = v14[11];
        v28 = v14[10] + 8 * v22;
      }
      else
      {
LABEL_23:
        v27 = v14[11];
        v28 = v27;
      }
      v29 = v28 == v27 ? 0 : v28;
      if ((v30 = v15[4], v19 < (v15[5] - v30) >> 3)
        && (v31 = *(_QWORD *)(v30 + 8 * v19)) != 0
        && (v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            v34 = v15[7],
            v33 = v15[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == (_DWORD)v18) : (v36 = 0), v36))
      {
        v37 = v15[11];
        v38 = v15[10] + 4 * v32;
      }
      else
      {
        v37 = v15[11];
        v38 = v37;
      }
      v39 = v38 == v37 ? 0 : v38;
      if ((v40 = v16[4], v19 < (v16[5] - v40) >> 3)
        && (v41 = *(_QWORD *)(v40 + 8 * v19)) != 0
        && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            v44 = v16[7],
            v43 = v16[8],
            v42 < (v43 - v44) >> 3)
        && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == (_DWORD)v18) : (v46 = 0), v46))
      {
        v47 = v16[11];
        v48 = v16[10] + 4 * v42;
      }
      else
      {
        v47 = v16[11];
        v48 = v47;
      }
      v49 = v48 == v47 ? 0 : v48;
      if ((v50 = v6[4], v19 < (v6[5] - v50) >> 3)
        && (v51 = *(_QWORD *)(v50 + 8 * v19)) != 0
        && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            v54 = v6[7],
            v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v18) : (v56 = 0), v56))
      {
        v57 = v6[11];
        v58 = v6[10] + 4 * v52;
      }
      else
      {
        v57 = v6[11];
        v58 = v57;
      }
      v59 = v58 == v57 ? 0 : v58;
      if ((v60 = v7[4], v19 < (v7[5] - v60) >> 3)
        && (v61 = *(_QWORD *)(v60 + 8 * v19)) != 0
        && (v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            v64 = v7[7],
            v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (v66 = *(_DWORD *)(v65 + 4) == (_DWORD)v18) : (v66 = 0), v66))
      {
        v67 = v7[11];
        v68 = v7[10] + 24 * v62;
      }
      else
      {
        v67 = v7[11];
        v68 = v67;
      }
      v69 = v68 == v67 ? 0 : v68;
      if ((v70 = v8[4], v19 < (v8[5] - v70) >> 3)
        && (v71 = *(_QWORD *)(v70 + 8 * v19)) != 0
        && (v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v17) & 0x7F)),
            v74 = v8[7],
            v73 = v8[8],
            v72 < (v73 - v74) >> 3)
        && ((v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == (_DWORD)v18) : (v76 = 0), v76))
      {
        v77 = v8[11];
        v78 = v8[10] + 24 * v72;
      }
      else
      {
        v77 = v8[11];
        v78 = v77;
      }
      v79 = *(_QWORD *)(a2 + 24);
      if (!v79)
        break;
      if (v78 == v77)
        v80 = 0;
      else
        v80 = v78;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 48))(v79, v29, v39, v49, v59, v69, v80);
      v82 = *(unint64_t **)(v83 + 32);
      while (1)
      {
        v86 = ++v12;
        if (v12 == v82)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v85);
        if ((_DWORD)result)
          goto LABEL_15;
      }
      v12 = v82;
LABEL_15:
      if (v11 == v12)
        goto LABEL_94;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[6];
  uint64_t v11[9];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v1);
  v4 = gdc::Registry::storage<md::ls::BoundZScale>(v1);
  v5 = gdc::Registry::storage<md::ls::BoundZAdjust>(v1);
  v6 = gdc::Registry::storage<md::ls::MeshRenderableBounds>(v1);
  v7 = gdc::Registry::storage<md::BoundData>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v11, v10);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v8 = v2;
  else
    v8 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  return *(_QWORD *)(v8 + 64) == v11[8];
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderableBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6B3ACE485940A135;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6B3ACE485940A135;
      if (*(_QWORD *)&v3 <= 0x6B3ACE485940A135uLL)
        v5 = 0x6B3ACE485940A135uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6B3ACE485940A135;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6B3ACE485940A135)
            {
              if (v7[2] == 0x6B3ACE485940A135)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6B3ACE485940A135)
          {
            if (v7[2] == 0x6B3ACE485940A135)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MeshRenderableBounds]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272528;
  *(_QWORD *)(v11 + 8) = 0x6B3ACE485940A135;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6B3ACE485940A135uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6B3ACE485940A135;
  v15[1] = "md::ls::MeshRenderableBounds]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6B3ACE485940A135, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73A134(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  unint64_t *v82;
  unint64_t *v83;
  uint64_t v85[8];
  unint64_t *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = gdc::Registry::storage<md::ls::GeocentricBounds>(v2);
  v5 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableBounds>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::BoundData>(v2);
  v87 = (_QWORD *)v3;
  v88 = (_QWORD *)v4;
  v89 = (_QWORD *)v5;
  v90 = v6;
  v91 = v7;
  v92 = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v85, (uint64_t *)&v87);
  v9 = v6 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v10 = v3;
  else
    v10 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v5;
  if (v6[8] - v6[7] >= *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v9 = (_QWORD *)(v10 + 32);
  if (v7[8] - v7[7] < v9[4] - v9[3])
    v9 = v7 + 4;
  if (v8[8] - v8[7] < v9[4] - v9[3])
    v9 = v8 + 4;
  v11 = v86;
  v83 = (unint64_t *)v9[4];
  if (v83 == v86)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)result;
LABEL_94:
    *v12 = 0xFFFFFFFF00000000;
  }
  else
  {
    v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = v87;
    v14 = v88;
    v15 = v89;
    v16 = v85[0];
    while (1)
    {
      *v12 = *v11;
      v17 = *v11;
      v18 = HIDWORD(*v11);
      v19 = *v11 >> 39;
      v20 = v13[4];
      if (v19 >= (v13[5] - v20) >> 3)
        goto LABEL_23;
      v21 = *(_QWORD *)(v20 + 8 * v19);
      if (!v21)
        goto LABEL_23;
      v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F));
      v24 = v13[7];
      v23 = v13[8];
      if (v22 >= (v23 - v24) >> 3)
        goto LABEL_23;
      v25 = v24 + 8 * v22;
      if (v25 != v23 && *(_DWORD *)(v25 + 4) == (_DWORD)v18)
      {
        v27 = v13[11];
        v28 = v13[10] + 8 * v22;
      }
      else
      {
LABEL_23:
        v27 = v13[11];
        v28 = v27;
      }
      v29 = v28 == v27 ? 0 : v28;
      if ((v30 = v14[4], v19 < (v14[5] - v30) >> 3)
        && (v31 = *(_QWORD *)(v30 + 8 * v19)) != 0
        && (v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            v34 = v14[7],
            v33 = v14[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == (_DWORD)v18) : (v36 = 0), v36))
      {
        v37 = v14[11];
        v38 = v14[10] + 36 * v32;
      }
      else
      {
        v37 = v14[11];
        v38 = v37;
      }
      v39 = v38 == v37 ? 0 : v38;
      if ((v40 = v15[4], v19 < (v15[5] - v40) >> 3)
        && (v41 = *(_QWORD *)(v40 + 8 * v19)) != 0
        && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            v44 = v15[7],
            v43 = v15[8],
            v42 < (v43 - v44) >> 3)
        && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == (_DWORD)v18) : (v46 = 0), v46))
      {
        v47 = v15[11];
        v48 = v15[10] + 4 * v42;
      }
      else
      {
        v47 = v15[11];
        v48 = v47;
      }
      v49 = v48 == v47 ? 0 : v48;
      if ((v50 = v6[4], v19 < (v6[5] - v50) >> 3)
        && (v51 = *(_QWORD *)(v50 + 8 * v19)) != 0
        && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            v54 = v6[7],
            v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v18) : (v56 = 0), v56))
      {
        v57 = v6[11];
        v58 = v6[10] + 8 * v52;
      }
      else
      {
        v57 = v6[11];
        v58 = v57;
      }
      v59 = v58 == v57 ? 0 : v58;
      if ((v60 = v7[4], v19 < (v7[5] - v60) >> 3)
        && (v61 = *(_QWORD *)(v60 + 8 * v19)) != 0
        && (v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            v64 = v7[7],
            v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (v66 = *(_DWORD *)(v65 + 4) == (_DWORD)v18) : (v66 = 0), v66))
      {
        v67 = v7[11];
        v68 = v7[10] + 24 * v62;
      }
      else
      {
        v67 = v7[11];
        v68 = v67;
      }
      v69 = v68 == v67 ? 0 : v68;
      if ((v70 = v8[4], v19 < (v8[5] - v70) >> 3)
        && (v71 = *(_QWORD *)(v70 + 8 * v19)) != 0
        && (v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v17) & 0x7F)),
            v74 = v8[7],
            v73 = v8[8],
            v72 < (v73 - v74) >> 3)
        && ((v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == (_DWORD)v18) : (v76 = 0), v76))
      {
        v77 = v8[11];
        v78 = v8[10] + 24 * v72;
      }
      else
      {
        v77 = v8[11];
        v78 = v77;
      }
      v79 = *(_QWORD *)(a2 + 24);
      if (!v79)
        break;
      if (v78 == v77)
        v80 = 0;
      else
        v80 = v78;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 48))(v79, v29, v39, v49, v59, v69, v80);
      v82 = *(unint64_t **)(v16 + 32);
      while (1)
      {
        v86 = ++v11;
        if (v11 == v82)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v85);
        if ((_DWORD)result)
          goto LABEL_15;
      }
      v11 = v82;
LABEL_15:
      if (v83 == v11)
        goto LABEL_94;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[6];
  uint64_t v11[9];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::GeocentricBounds>(v1);
  v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v1);
  v5 = gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v1);
  v6 = gdc::Registry::storage<md::ls::MeshRenderableBounds>(v1);
  v7 = gdc::Registry::storage<md::BoundData>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v11, v10);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v8 = v2;
  else
    v8 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  return *(_QWORD *)(v8 + 64) == v11[8];
}

uint64_t gdc::Registry::storage<md::ls::GeocentricBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC2ED2352B044903BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC2ED2352B044903BLL;
      if (*(_QWORD *)&v3 <= 0xC2ED2352B044903BLL)
        v5 = 0xC2ED2352B044903BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC2ED2352B044903BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC2ED2352B044903BLL)
            {
              if (v7[2] == 0xC2ED2352B044903BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC2ED2352B044903BLL)
          {
            if (v7[2] == 0xC2ED2352B044903BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::GeocentricBounds]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271B68;
  *(_QWORD *)(v11 + 8) = 0xC2ED2352B044903BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC2ED2352B044903BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC2ED2352B044903BLL;
  v15[1] = "md::ls::GeocentricBounds]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC2ED2352B044903BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73AA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1DBDEAE2D8DF6302;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1DBDEAE2D8DF6302;
      if (*(_QWORD *)&v3 <= 0x1DBDEAE2D8DF6302uLL)
        v5 = 0x1DBDEAE2D8DF6302uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1DBDEAE2D8DF6302;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1DBDEAE2D8DF6302)
            {
              if (v7[2] == 0x1DBDEAE2D8DF6302)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1DBDEAE2D8DF6302)
          {
            if (v7[2] == 0x1DBDEAE2D8DF6302)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MeshRenderableTransformConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 49;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274328;
  *(_QWORD *)(v11 + 8) = 0x1DBDEAE2D8DF6302;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1DBDEAE2D8DF6302uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1DBDEAE2D8DF6302;
  v15[1] = "md::ls::MeshRenderableTransformConstantDataHandle]";
  v15[2] = 49;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1DBDEAE2D8DF6302, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73AC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_DWORD *)(a1[10] + 36 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 9);
  v15 -= 9;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42860C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42860C8;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x2DE7529E814754ABLL;
  v2[1] = "md::ls::BoundZScale]";
  *(_QWORD *)&result = 19;
  *((_OWORD *)v2 + 1) = xmmword_19FFB45C0;
  v2[4] = "md::ls::BoundZAdjust]";
  v2[5] = 20;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286110;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286110;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB45D0;
  v2[4] = "md::ls::MeshRenderableTransformConstantDataHandle]";
  v2[5] = 49;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277908;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277908;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  int v32;
  uint64_t v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42750B8;
  v4[1] = a2;
  v33 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v33 = v9;
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = v21[1];
  if ((v22 & (v22 - 1)) != 0)
  {
    v24 = 0x8BD499FBD96FBB9ELL;
    if (v22 <= 0x8BD499FBD96FBB9ELL)
      v24 = 0x8BD499FBD96FBB9ELL % v22;
    v23 = *(_QWORD **)(*v21 + 8 * v24);
    do
    {
      do
        v23 = (_QWORD *)*v23;
      while (v23[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v23[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v23 = *(_QWORD **)(*v21 + 8 * ((v22 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v23 = (_QWORD *)*v23;
      while (v23[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v23[2] != 0x8BD499FBD96FBB9ELL);
  }
  v25 = *(_QWORD *)(v23[5] + 32);
  v26 = *(_DWORD *)(v25 + 16);
  v31 = *(_DWORD *)(v25 + 20);
  v32 = v26;
  v27 = operator new(0x20uLL);
  *v27 = &off_1E427BCD0;
  v27[1] = &v33;
  v27[2] = &v31;
  v27[3] = &v32;
  v35 = v27;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v34);
  v28 = v35;
  if (v35 == v34)
  {
    v29 = 4;
    v28 = v34;
    goto LABEL_38;
  }
  if (v35)
  {
    v29 = 5;
LABEL_38:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F73B4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::BoundZScale>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::BoundZAdjust>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::BoundZScale,md::ls::BoundZAdjust,md::ls::MeshRenderableTransformConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v5[8] - v5[7] < v3[8] - v3[7])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  if (v4[8] - v4[7] < v7[4] - v7[3])
    v7 = v4 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v5[4], v17 < (v5[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v5[7],
            v31 = v5[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v5[11];
        v36 = v5[10] + 4 * v30;
      }
      else
      {
        v35 = v5[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v6[4], v17 < (v6[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v6[7],
            v41 = v6[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v6[11];
        v46 = v6[10] + 4 * v40;
      }
      else
      {
        v45 = v6[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v4[4], v17 < (v4[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v4[7],
            v51 = v4[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v4[11];
        v56 = v4[10] + 8 * v50;
      }
      else
      {
        v55 = v4[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v1);
  v4 = gdc::Registry::storage<md::ls::BoundZScale>(v1);
  v5 = gdc::Registry::storage<md::ls::BoundZAdjust>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::BoundZScale,md::ls::BoundZAdjust,md::ls::MeshRenderableTransformConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v3;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::BoundZScale,md::ls::BoundZAdjust,md::ls::MeshRenderableTransformConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  v7 = *a2 + 32;
  if (!*a2)
    v7 = 0;
  v8 = v3 + 32;
  if (!v3)
    v8 = 0;
  v9 = v4 + 32;
  if (!v4)
    v9 = 0;
  v10 = v6 + 32;
  if (!v6)
    v10 = 0;
  result = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24) < (unint64_t)(*(_QWORD *)(v7 + 32) - result))
    v7 = v8;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v9;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v10;
  *a1 = v7;
  a1[1] = v5;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  v13 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286818;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286818;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286860;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286860;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB44D0;
  v2[4] = "md::ls::MeshLayerTypeV]";
  v2[5] = 22;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277CB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277CB0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44[4];
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t *v49;
  char v50;
  _QWORD v51[2];
  int v52;
  _QWORD *v53;
  _QWORD v54[2];
  int v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v46, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v44, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v45 != v49)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)result;
    while (1)
    {
      v13 = *v11;
      *v12 = *v11;
      v14 = *v11;
      v15 = v6[4];
      if (v14 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * (v14 >> 39))) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v14) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = HIDWORD(v14), v21 = v19 + 8 * v17, v21 != v18)
          ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v20)
          : (v22 = 0),
            v22))
      {
        v23 = (_BYTE *)(v6[10] + v17);
      }
      else
      {
        v23 = (_BYTE *)v6[11];
      }
      if ((*v23 & 0xFE) != 2)
        goto LABEL_26;
      v24 = *(_QWORD **)(a1 + 8);
      v51[0] = &off_1E42817F0;
      v51[1] = v13 << 32;
      v52 = HIDWORD(v13);
      v53 = v51;
      v54[0] = &off_1E42817F0;
      v56 = v54;
      v54[1] = v13 << 32;
      v55 = HIDWORD(v13);
      v57 = 0;
      ecs2::Runtime::queueCommand(v24, (uint64_t)v54);
      if (v57 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v57])(&v50, v54);
      v57 = -1;
      result = (uint64_t)v53;
      if (v53 == v51)
        break;
      if (v53)
      {
        v25 = 5;
LABEL_25:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v25))();
      }
LABEL_26:
      v26 = v49;
      v11 = *(unint64_t **)(v46 + 32);
      if (++v49 != v11)
      {
        v27 = v47[4];
        v28 = (v47[5] - v27) >> 3;
        v29 = v26 + 2;
        while (1)
        {
          v30 = *((unsigned int *)v29 - 1);
          v31 = v30 >> 7;
          if (v30 >> 7 < v28)
          {
            v32 = *(_QWORD *)(v27 + 8 * v31);
            if (v32)
            {
              v33 = *(unsigned __int16 *)(v32 + 2 * (v30 & 0x7F));
              v34 = v47[7];
              result = v47[8];
              if (v33 < (result - v34) >> 3)
              {
                v35 = v34 + 8 * v33;
                if (v35 != result && *(_DWORD *)(v35 + 4) == (_DWORD)v30)
                {
                  v37 = v48[4];
                  result = v48[5] - v37;
                  if (v31 < result >> 3)
                  {
                    v38 = *(_QWORD *)(v37 + 8 * v31);
                    if (v38)
                    {
                      v39 = *(unsigned __int16 *)(v38 + 2 * (v30 & 0x7F));
                      v41 = v48[7];
                      v40 = v48[8];
                      result = v40 - v41;
                      if (v39 < (v40 - v41) >> 3)
                      {
                        v42 = v41 + 8 * v39;
                        if (v42 != v40 && *(_DWORD *)(v42 + 4) == (_DWORD)v30)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v49 = v29;
          v22 = v29++ == v11;
          if (v22)
            goto LABEL_9;
        }
        v11 = v29 - 1;
      }
LABEL_9:
      if (v45 == v11)
        goto LABEL_48;
    }
    result = (uint64_t)v51;
    v25 = 4;
    goto LABEL_25;
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v12 = (_QWORD *)result;
LABEL_48:
  *v12 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282D08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282D08;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282D50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282D50;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB45E0;
  v2[4] = "md::ls::PrimitiveType]";
  v2[5] = 21;
  v2[6] = 0xA83B1A8F06D3B3DBLL;
  v2[7] = "md::ls::SharedMaterialVisibilityOptionsHandle]";
  v2[8] = 45;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0x768C72EB9B71F7ADLL;
    v2[10] = "md::ls::RenderableVisibilityOptions]";
    v2[11] = 35;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x768C72EB9B71F7ADLL;
  *((_QWORD *)v10 + 1) = "md::ls::RenderableVisibilityOptions]";
  *((_QWORD *)v10 + 2) = 35;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x66C5B6134E34F45DLL;
    *((_QWORD *)v4 + 1) = "md::ls::MarketMask]";
    *((_QWORD *)v4 + 2) = 18;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x66C5B6134E34F45DLL;
  *((_QWORD *)v21 + 1) = "md::ls::MarketMask]";
  *((_QWORD *)v21 + 2) = 18;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x849CB194B84BB63DLL;
    *((_QWORD *)v14 + 1) = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
    *((_QWORD *)v14 + 2) = 45;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x849CB194B84BB63DLL;
  *((_QWORD *)v32 + 1) = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
  *((_QWORD *)v32 + 2) = 45;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F73C4BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275F28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275F28;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (***v10)(_QWORD);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int8x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  int8x8_t v44;
  uint8x8_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  BOOL v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t result;
  char v59;
  BOOL v60;
  uint64_t v61;
  char *v62;
  char v63;
  char v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274DE8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275598;
  v5[1] = a2;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v6, "daVinciRenderLineGeometry");
  v7 = *(uint64_t **)**v3;
  if (v7 != *(uint64_t **)(**v3 + 8) && *v7 != 0x22D45F5AAD4BF408)
  {
    v8 = v7 + 5;
    do
    {
      v9 = *v8;
      v8 += 5;
    }
    while (v9 != 0x22D45F5AAD4BF408);
    v7 = v8 - 5;
  }
  v10 = (uint64_t (***)(_QWORD))v7[3];
  v11 = (std::__shared_weak_count *)v7[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (**v10)(v10);
  v16 = *(_QWORD **)(v15 + 8);
  v17 = (int8x8_t)v16[1];
  if (!*(_QWORD *)&v17)
    goto LABEL_38;
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v17 <= 0x41E8D6E445F4145uLL)
      v19 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v17;
  }
  else
  {
    v19 = (*(_QWORD *)&v17 - 1) & 0x41E8D6E445F4145;
  }
  v20 = *(_QWORD **)(*v16 + 8 * v19);
  if (!v20)
    goto LABEL_38;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_38;
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v17 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x41E8D6E445F4145)
      {
        if (v21[2] == 0x41E8D6E445F4145)
          goto LABEL_33;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_38;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_38;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x41E8D6E445F4145)
      break;
    if (v23 >= *(_QWORD *)&v17)
      v23 %= *(_QWORD *)&v17;
    if (v23 != v19)
      goto LABEL_38;
LABEL_22:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_38;
  }
  if (v21[2] != 0x41E8D6E445F4145)
    goto LABEL_22;
LABEL_33:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) != 0x41E8D6E445F4145 || (v26 = *(_QWORD *)(v25 + 32)) == 0)
  {
LABEL_38:
    v27 = -1;
    goto LABEL_39;
  }
  if (*(_BYTE *)(v26 + 224))
    v27 = 2;
  else
    v27 = 1;
LABEL_39:
  v63 = v27;
  v62 = &v64;
  v28 = **v3;
  v29 = *(_QWORD **)v28;
  v30 = *(_QWORD **)(v28 + 8);
  if (v29 != v30)
  {
    while (*v29 != 0x41D4E9297E100630)
    {
      v29 += 5;
      if (v29 == v30)
        goto LABEL_50;
    }
  }
  if (v29 != v30)
  {
    v31 = (std::__shared_weak_count *)v29[4];
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
LABEL_50:
  v61 = 0;
  v35 = **v3;
  v36 = *(_QWORD **)v35;
  v37 = *(_QWORD **)(v35 + 8);
  if (v36 != v37)
  {
    while (*v36 != 0x4EDAD23DFB014132)
    {
      v36 += 5;
      if (v36 == v37)
        goto LABEL_61;
    }
  }
  if (v36 == v37)
  {
LABEL_61:
    v39 = 0;
  }
  else
  {
    v39 = v36[3];
    v38 = (std::__shared_weak_count *)v36[4];
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v61 = v39;
  v43 = *(_QWORD **)(v15 + 8);
  v44 = (int8x8_t)v43[1];
  if (!*(_QWORD *)&v44)
    goto LABEL_85;
  v45 = (uint8x8_t)vcnt_s8(v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    v46 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v44 <= 0x8BD499FBD96FBB9ELL)
      v46 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v44;
  }
  else
  {
    v46 = (*(_QWORD *)&v44 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v47 = *(_QWORD **)(*v43 + 8 * v46);
  if (!v47)
    goto LABEL_85;
  v48 = (_QWORD *)*v47;
  if (!v48)
    goto LABEL_85;
  if (v45.u32[0] < 2uLL)
  {
    v49 = *(_QWORD *)&v44 - 1;
    while (1)
    {
      v51 = v48[1];
      if (v51 == 0x8BD499FBD96FBB9ELL)
      {
        if (v48[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_83;
      }
      else if ((v51 & v49) != v46)
      {
        goto LABEL_85;
      }
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_85;
    }
  }
  while (2)
  {
    v50 = v48[1];
    if (v50 != 0x8BD499FBD96FBB9ELL)
    {
      if (v50 >= *(_QWORD *)&v44)
        v50 %= *(_QWORD *)&v44;
      if (v50 != v46)
        goto LABEL_85;
      goto LABEL_72;
    }
    if (v48[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_72:
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_85;
      continue;
    }
    break;
  }
LABEL_83:
  v52 = v48[5];
  if (*(_QWORD *)(v52 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v53 = *(float **)(v52 + 32);
    goto LABEL_86;
  }
LABEL_85:
  v53 = 0;
LABEL_86:
  v54 = v53[4] <= 0.01 && *((_BYTE *)v53 + 3) != 0;
  v60 = v54;
  v59 = *(_BYTE *)v53;
  v55 = operator new(0x38uLL);
  *v55 = &off_1E427B220;
  v55[1] = &v62;
  v55[2] = &v59;
  v55[3] = &v61;
  v55[4] = &v60;
  v55[5] = &v63;
  v55[6] = v3;
  v66 = v55;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v65);
  v56 = v66;
  if (v66 == v65)
  {
    v57 = 4;
    v56 = v65;
LABEL_93:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  else if (v66)
  {
    v57 = 5;
    goto LABEL_93;
  }

  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F73CB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a17;
  if (a17 == v20)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialVisibilityOptionsHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialVisibilityOptionsHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 16 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialVisibilityOptionsHandle const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x849CB194B84BB63DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x849CB194B84BB63DLL;
      if (*(_QWORD *)&v3 <= 0x849CB194B84BB63DLL)
        v5 = 0x849CB194B84BB63DLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x849CB194B84BB63DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x849CB194B84BB63DLL)
            {
              if (v7[2] == 0x849CB194B84BB63DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x849CB194B84BB63DLL)
          {
            if (v7[2] == 0x849CB194B84BB63DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
  *(_QWORD *)(v11 + 24) = 45;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274268;
  *(_QWORD *)(v11 + 8) = 0x849CB194B84BB63DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x849CB194B84BB63DLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x849CB194B84BB63DLL;
  v15[1] = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
  v15[2] = 45;
  gdc::Registry::_registerStorageDataSignals(a1, 0x849CB194B84BB63DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73D0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 8);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 16);
  *(_BYTE *)(v14 + 8) = v16;
  a1[11] -= 16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t result;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84[4];
  unint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PrimitiveType>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(v3);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v3);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::MarketMask>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v86, v9, v4, v5, *(_QWORD *)(v9 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v10 = (uint64_t)(v4 + 4);
  else
    v10 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v84, v10, v4, v5, *(_QWORD *)(v10 + 32));
  if (v85 == v89)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)result;
LABEL_90:
    *v12 = 0xFFFFFFFF00000000;
  }
  else
  {
    v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v12 = *v11;
      v13 = *v11;
      v14 = HIDWORD(*v11);
      v15 = v13 >> 39;
      v16 = v4[4];
      if (v13 >> 39 < (v4[5] - v16) >> 3
        && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
        && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)),
            v20 = v4[7],
            v19 = v4[8],
            v18 < (v19 - v20) >> 3)
        && ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v14) : (v22 = 0), v22))
      {
        v23 = v4[11];
        v24 = v4[10] + 8 * v18;
      }
      else
      {
        v23 = v4[11];
        v24 = v23;
      }
      if (v24 == v23)
        v25 = 0;
      else
        v25 = v24;
      v26 = v5[4];
      if (v15 < (v5[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v15)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F)),
            v30 = v5[7],
            v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v14) : (v32 = 0), v32))
      {
        v33 = v5[11];
        v34 = v5[10] + v28;
      }
      else
      {
        v33 = v5[11];
        v34 = v33;
      }
      if (v34 == v33)
        v35 = 0;
      else
        v35 = v34;
      v36 = v6[4];
      if (v15 < (v6[5] - v36) >> 3
        && (v37 = *(_QWORD *)(v36 + 8 * v15)) != 0
        && (v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v13) & 0x7F)),
            v40 = v6[7],
            v39 = v6[8],
            v38 < (v39 - v40) >> 3)
        && ((v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == (_DWORD)v14) : (v42 = 0), v42))
      {
        v43 = v6[11];
        v44 = v6[10] + 8 * v38;
      }
      else
      {
        v43 = v6[11];
        v44 = v43;
      }
      if (v44 == v43)
        v44 = 0;
      v45 = v7[4];
      if (v15 < (v7[5] - v45) >> 3
        && (v46 = *(_QWORD *)(v45 + 8 * v15)) != 0
        && (v47 = *(unsigned __int16 *)(v46 + 2 * (HIDWORD(v13) & 0x7F)),
            v49 = v7[7],
            v48 = v7[8],
            v47 < (v48 - v49) >> 3)
        && ((v50 = v49 + 8 * v47, v50 != v48) ? (v51 = *(_DWORD *)(v50 + 4) == (_DWORD)v14) : (v51 = 0), v51))
      {
        v52 = v7[11];
        v53 = v7[10] + 4 * v47;
      }
      else
      {
        v52 = v7[11];
        v53 = v52;
      }
      if (v53 == v52)
        v53 = 0;
      if ((v54 = v8[4], v15 < (v8[5] - v54) >> 3)
        && (v55 = *(_QWORD *)(v54 + 8 * v15)) != 0
        && (v56 = *(unsigned __int16 *)(v55 + 2 * (HIDWORD(v13) & 0x7F)),
            v58 = v8[7],
            v57 = v8[8],
            v56 < (v57 - v58) >> 3)
        && ((v59 = v58 + 8 * v56, v59 != v57) ? (v60 = *(_DWORD *)(v59 + 4) == (_DWORD)v14) : (v60 = 0), v60))
      {
        v61 = v8[11];
        v62 = v8[10] + v56;
      }
      else
      {
        v61 = v8[11];
        v62 = v61;
      }
      v63 = v62 == v61 ? 0 : v62;
      v91 = v53;
      v92 = v44;
      v90 = v63;
      v64 = *(_QWORD *)(a2 + 24);
      if (!v64)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t *, unint64_t *))(*(_QWORD *)v64 + 48))(v64, v25, v35, &v92, &v91, &v90);
      v66 = v89;
      v11 = *(unint64_t **)(v86 + 32);
      if (++v89 != v11)
      {
        v67 = v87[4];
        v68 = (v87[5] - v67) >> 3;
        v69 = v66 + 2;
        while (1)
        {
          v70 = *((unsigned int *)v69 - 1);
          v71 = v70 >> 7;
          if (v70 >> 7 < v68)
          {
            v72 = *(_QWORD *)(v67 + 8 * v71);
            if (v72)
            {
              v73 = *(unsigned __int16 *)(v72 + 2 * (v70 & 0x7F));
              v74 = v87[7];
              result = v87[8];
              if (v73 < (result - v74) >> 3)
              {
                v75 = v74 + 8 * v73;
                if (v75 != result && *(_DWORD *)(v75 + 4) == (_DWORD)v70)
                {
                  v77 = v88[4];
                  result = v88[5] - v77;
                  if (v71 < result >> 3)
                  {
                    v78 = *(_QWORD *)(v77 + 8 * v71);
                    if (v78)
                    {
                      v79 = *(unsigned __int16 *)(v78 + 2 * (v70 & 0x7F));
                      v81 = v88[7];
                      v80 = v88[8];
                      result = v80 - v81;
                      if (v79 < (v80 - v81) >> 3)
                      {
                        v82 = v81 + 8 * v79;
                        if (v82 != v80 && *(_DWORD *)(v82 + 4) == (_DWORD)v70)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v89 = v69;
          v22 = v69++ == v11;
          if (v22)
            goto LABEL_9;
        }
        v11 = v69 - 1;
      }
LABEL_9:
      if (v85 == v11)
        goto LABEL_90;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];
  _QWORD v8[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PrimitiveType>(v1);
  gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(v1);
  gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v1);
  gdc::Registry::storage<md::ls::MarketMask>(v1);
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v4 = (uint64_t)(v2 + 4);
  else
    v4 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v8, v4, v2, v3, *(_QWORD *)(v4 + 24));
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v5 = (uint64_t)(v2 + 4);
  else
    v5 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v7, v5, v2, v3, *(_QWORD *)(v5 + 32));
  return v7[4] == v8[4];
}

uint64_t gdc::Registry::storage<md::ls::PrimitiveType>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x84C31A2C8E533C36;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x84C31A2C8E533C36;
      if (*(_QWORD *)&v3 <= 0x84C31A2C8E533C36)
        v5 = 0x84C31A2C8E533C36 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x84C31A2C8E533C36;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x84C31A2C8E533C36)
            {
              if (v7[2] == 0x84C31A2C8E533C36)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x84C31A2C8E533C36)
          {
            if (v7[2] == 0x84C31A2C8E533C36)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PrimitiveType]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271688;
  *(_QWORD *)(v11 + 8) = 0x84C31A2C8E533C36;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x84C31A2C8E533C36, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x84C31A2C8E533C36;
  v15[1] = "md::ls::PrimitiveType]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x84C31A2C8E533C36, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73D998(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA83B1A8F06D3B3DBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA83B1A8F06D3B3DBLL;
      if (*(_QWORD *)&v3 <= 0xA83B1A8F06D3B3DBLL)
        v5 = 0xA83B1A8F06D3B3DBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA83B1A8F06D3B3DBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA83B1A8F06D3B3DBLL)
            {
              if (v7[2] == 0xA83B1A8F06D3B3DBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA83B1A8F06D3B3DBLL)
          {
            if (v7[2] == 0xA83B1A8F06D3B3DBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedMaterialVisibilityOptionsHandle]";
  *(_QWORD *)(v11 + 24) = 45;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274238;
  *(_QWORD *)(v11 + 8) = 0xA83B1A8F06D3B3DBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA83B1A8F06D3B3DBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA83B1A8F06D3B3DBLL;
  v15[1] = "md::ls::SharedMaterialVisibilityOptionsHandle]";
  v15[2] = 45;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA83B1A8F06D3B3DBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73DBC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MarketMask>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x66C5B6134E34F45DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x66C5B6134E34F45DLL;
      if (*(_QWORD *)&v3 <= 0x66C5B6134E34F45DuLL)
        v5 = 0x66C5B6134E34F45DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x66C5B6134E34F45DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x66C5B6134E34F45DLL)
            {
              if (v7[2] == 0x66C5B6134E34F45DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x66C5B6134E34F45DLL)
          {
            if (v7[2] == 0x66C5B6134E34F45DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MarketMask]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270F38;
  *(_QWORD *)(v11 + 8) = 0x66C5B6134E34F45DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x66C5B6134E34F45DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x66C5B6134E34F45DLL;
  v15[1] = "md::ls::MarketMask]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x66C5B6134E34F45DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F73DDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MarketMask>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MarketMask>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MarketMask>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MarketMask>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42853D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42853D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32UniqueStyleEmissiveDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F73E2EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32UniqueStyleEmissiveDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0xEBDB618C34E97A19;
    *((_QWORD *)v11 + 1) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
    *((_QWORD *)v11 + 2) = 40;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0xEBDB618C34E97A19;
    *((_QWORD *)v3 + 1) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
    *((_QWORD *)v3 + 2) = 40;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285420;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285420;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x3209EBE3B62CF3D3;
  v2[1] = "md::ls::UniqueMaterialData]";
  *(_QWORD *)&result = 26;
  *((_OWORD *)v2 + 1) = xmmword_19FFB45F0;
  v2[4] = "md::ls::CanUpdateWithStyleZChange]";
  v2[5] = 33;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277290;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277290;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *CanUpdateWithStyle;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  BOOL v68;
  int8x8_t *v69;
  uint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  void **v88;
  uint64_t *v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  int8x16_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  __int128 *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t *v149;
  unint64_t v150;
  uint8x8_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  float v157;
  float v158;
  _BOOL8 v159;
  unint64_t v160;
  unint64_t v161;
  size_t prime;
  unint64_t v163;
  uint8x8_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  float v169;
  float v170;
  float v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint8x8_t v179;
  void **v180;
  _QWORD *v181;
  unint64_t v183;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  _BOOL8 v189;
  unint64_t v190;
  unint64_t v191;
  size_t v192;
  void *v193;
  void *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  size_t v198;
  size_t v199;
  size_t v200;
  _QWORD *v201;
  size_t v202;
  uint64_t v203;
  unint64_t v204;
  uint8x8_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  size_t v209;
  void *v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  uint8x8_t v215;
  void **v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  _BOOL8 v222;
  unint64_t v223;
  unint64_t v224;
  size_t v225;
  void *v226;
  void *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  size_t v231;
  size_t v232;
  size_t v233;
  _QWORD *v234;
  size_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint8x8_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  size_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  uint8x8_t v255;
  unint64_t v256;
  uint64_t v257;
  float16x4_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD **v286;
  _QWORD *v287;
  unint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  float v291;
  float v292;
  _BOOL8 v293;
  unint64_t v294;
  unint64_t v295;
  size_t v296;
  void *v297;
  void *v298;
  uint64_t v299;
  _QWORD *v300;
  size_t v301;
  size_t v302;
  size_t v303;
  _QWORD *v304;
  size_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint8x8_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  size_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  float32x4_t v327;
  _QWORD *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334[3];
  _BYTE v335[12];
  __int32 v336;
  char v337;
  uint64_t v338;
  __int32 v339;
  uint64_t v340;
  std::__shared_weak_count *v341;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  CanUpdateWithStyle = (_QWORD *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(v3);
  v6 = gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(v3);
  v7 = (_QWORD *)v6;
  v8 = v4 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v4[8] - v4[7])
    v8 = (_QWORD *)(v6 + 32);
  if (CanUpdateWithStyle[8] - CanUpdateWithStyle[7] < v8[4] - v8[3])
    v8 = CanUpdateWithStyle + 4;
  v328 = v8;
  v329 = v4;
  v330 = (_QWORD *)v6;
  v331 = CanUpdateWithStyle;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v332 = v10;
  v326 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v328))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v332 = v11;
      if (v11 == v326)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v328);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v326 == v10)
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_556;
  }
  v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v324 = v4;
  v325 = v2;
  v322 = v7;
  v323 = CanUpdateWithStyle;
  v321 = v13;
  do
  {
    *v13 = *v10;
    v15 = *v10;
    v16 = HIDWORD(*v10);
    v17 = *v10 >> 39;
    v18 = v4[4];
    if (v17 < (v4[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v4[7], v21 = v4[8], v20 < (v21 - v22) >> 3)
      && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
    {
      v25 = v4[11];
      v26 = v4[10] + 24 * v20;
    }
    else
    {
      v25 = v4[11];
      v26 = v25;
    }
    if (v26 == v25)
      v27 = 0;
    else
      v27 = (_QWORD *)v26;
    v28 = v7[4];
    if (v17 < (v7[5] - v28) >> 3
      && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
      && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)), v32 = v7[7], v31 = v7[8], v30 < (v31 - v32) >> 3)
      && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
    {
      v35 = v7[11];
      v36 = v7[10] + 8 * v30;
    }
    else
    {
      v35 = v7[11];
      v36 = v35;
    }
    if (v36 == v35)
      v37 = 0;
    else
      v37 = (unint64_t *)v36;
    v38 = CanUpdateWithStyle[4];
    if (v17 < (CanUpdateWithStyle[5] - v38) >> 3
      && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
      && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
          v42 = CanUpdateWithStyle[7],
          v41 = CanUpdateWithStyle[8],
          v40 < (v41 - v42) >> 3)
      && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
    {
      v45 = CanUpdateWithStyle[11];
      v46 = CanUpdateWithStyle[10] + 4 * v40;
    }
    else
    {
      v45 = CanUpdateWithStyle[11];
      v46 = v45;
    }
    if (v46 == v45)
      v47 = 0;
    else
      v47 = (float *)v46;
    v48 = **(_QWORD **)(v2 + 8);
    v49 = *(_QWORD **)v48;
    v50 = *(_QWORD **)(v48 + 8);
    if (v49 != v50)
    {
      while (*v49 != 0x41D4E9297E100630)
      {
        v49 += 5;
        if (v49 == v50)
          goto LABEL_59;
      }
    }
    if (v49 == v50)
    {
LABEL_59:
      v52 = 0;
    }
    else
    {
      v52 = v49[3];
      v51 = (std::__shared_weak_count *)v49[4];
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v54 = __ldxr(p_shared_owners);
        while (__stxr(v54 + 1, p_shared_owners));
        do
          v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
    v56 = **(_QWORD **)(v2 + 8);
    v57 = *(_QWORD **)v56;
    v58 = *(_QWORD **)(v56 + 8);
    if (v57 != v58)
    {
      while (*v57 != 0x4EDAD23DFB014132)
      {
        v57 += 5;
        if (v57 == v58)
          goto LABEL_71;
      }
    }
    if (v57 == v58)
    {
LABEL_71:
      v59 = 0;
    }
    else
    {
      v59 = v57[3];
      v60 = (std::__shared_weak_count *)v57[4];
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        do
          v63 = __ldaxr(v61);
        while (__stlxr(v63 - 1, v61));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
    *(_QWORD *)v335 = *v27;
    v64 = *(_QWORD *)(v59 + 120);
    if (*(unsigned int *)v335 >= (unint64_t)((*(_QWORD *)(v59 + 128) - v64) >> 3))
      goto LABEL_80;
    v65 = *(_QWORD *)(v64 + 8 * *(unsigned int *)v335);
    if (!v65)
      goto LABEL_81;
    if (*(_DWORD *)&v335[4] != HIDWORD(v65)
      || ((v66 = *(_QWORD *)(v59 + 144),
           v67 = (uint64_t *)(v66 + 8 * v65),
           v67 != *(uint64_t **)(v59 + 152))
        ? (v68 = v66 == 0)
        : (v68 = 1),
          v68))
    {
LABEL_80:
      v65 = 0;
    }
    else
    {
      v109 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v59 + 56, *(unint64_t *)v335, v335);
      ++v109[3];
      v65 = *v67;
    }
LABEL_81:
    v69 = *(int8x8_t **)v59;
    v334[0] = v65;
    v334[1] = 0;
    gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v340, v69, v334, 0);
    v70 = v340;
    (*(void (**)(char *__return_ptr, uint64_t, float))(*(_QWORD *)v340 + 1008))(&v337, v340, *v47);
    if (v337)
    {
      v335[0] = 0;
    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, float))(*(_QWORD *)v70 + 200))(v335, v70, *v47);
      if (!v337)
      {
        v71.i32[0] = 0;
        v72.i8[0] = v335[0];
        v102 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v72, v71), 0);
        v72.i64[0] = *(_QWORD *)&v335[4];
        v72.i32[2] = v336;
        v71 = vbslq_s8(v102, (int8x16_t)0, v72);
        goto LABEL_85;
      }
    }
    v71.i64[0] = v338;
    v71.i32[2] = v339;
LABEL_85:
    v327 = (float32x4_t)v71;
    v73 = *v37;
    v74 = *v37;
    v75 = *(_QWORD *)(v52 + 2744);
    if (v74 < (*(_QWORD *)(v52 + 2752) - v75) >> 3
      && ((v76 = *(_QWORD *)(v75 + 8 * v74)) != 0 ? (v77 = HIDWORD(v73) == HIDWORD(v76)) : (v77 = 0), v77))
    {
      v79 = *(_QWORD *)(v52 + 2768) + 24 * v76;
      v78 = *(_QWORD *)(v52 + 2776);
    }
    else
    {
      v78 = *(_QWORD *)(v52 + 2776);
      v79 = v78;
    }
    if (v79 == v78)
      v80 = 0;
    else
      v80 = v79;
    if (v80)
      goto LABEL_104;
    v333 = v27[1];
    v334[0] = v333;
    v81 = md::VKMRenderResourcesStore::addKey<md::StyleEmissiveColorCacheKey>(v52, v334, (unint64_t)&v333);
    v73 = v81;
    *v37 = v81;
    v82 = *(_QWORD *)(v52 + 2744);
    if (v81 < (unint64_t)((*(_QWORD *)(v52 + 2752) - v82) >> 3)
      && (v83 = *(_QWORD *)(v82 + 8 * v81)) != 0
      && HIDWORD(v81) == HIDWORD(v83))
    {
      v84 = *(_QWORD *)(v52 + 2768) + 24 * v83;
      v85 = *(_QWORD *)(v52 + 2776);
    }
    else
    {
      v85 = *(_QWORD *)(v52 + 2776);
      v84 = v85;
    }
    v80 = v84 == v85 ? 0 : v84;
    if (v80)
    {
LABEL_104:
      v86 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>(v52 + 2680, v73, v37);
      ++v86[3];
    }
    *(_QWORD *)(v80 + 8) = v327.i64[0];
    v87 = (uint64_t *)(v80 + 8);
    *(_DWORD *)(v80 + 16) = v327.i32[2];
    *(_QWORD *)v80 = v27[1];
    v88 = (void **)(v52 + 2560);
    v89 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>((_QWORD *)(v52 + 2560), (float *)v80);
    if (v89)
    {
      v90 = v89[5];
      if (v90)
      {
        v334[0] = v89[5];
        v91 = *(_DWORD *)(*(_QWORD *)(v52 + 2448) + 8 * v90);
        v92 = *(_QWORD *)(v52 + 2472);
        v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>> const&>,std::tuple<>>(v52 + 2344, v90, v334);
        ++v93[3];
        v94 = *(_QWORD **)(v92 + 24 * v91);
        goto LABEL_434;
      }
    }
    v95 = *(_QWORD *)(v52 + 2432);
    if (*(_QWORD *)(v52 + 2424) == v95)
    {
      v98 = (-1431655765 * ((*(_QWORD *)(v52 + 2480) - *(_QWORD *)(v52 + 2472)) >> 3)) | 0x100000000;
      v99 = *(uint64_t **)(v52 + 2456);
      v100 = *(_QWORD *)(v52 + 2464);
      if ((unint64_t)v99 >= v100)
      {
        v103 = *(char **)(v52 + 2448);
        v104 = ((char *)v99 - v103) >> 3;
        v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 61)
          goto LABEL_558;
        v106 = v100 - (_QWORD)v103;
        if (v106 >> 2 > v105)
          v105 = v106 >> 2;
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
          v107 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v107 = v105;
        if (v107)
        {
          if (v107 >> 61)
            goto LABEL_557;
          v108 = (char *)operator new(8 * v107);
        }
        else
        {
          v108 = 0;
        }
        v110 = (uint64_t *)&v108[8 * v104];
        *v110 = v98;
        v101 = v110 + 1;
        if (v99 != (uint64_t *)v103)
        {
          v111 = (char *)v99 - v103 - 8;
          if (v111 < 0x58)
            goto LABEL_561;
          if ((unint64_t)(v103 - v108) < 0x20)
            goto LABEL_561;
          v112 = (v111 >> 3) + 1;
          v113 = &v108[(char *)v99 - v103 - 16];
          v114 = v99 - 2;
          v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *(_OWORD *)v114;
            *((_OWORD *)v113 - 1) = *((_OWORD *)v114 - 1);
            *(_OWORD *)v113 = v116;
            v113 -= 32;
            v114 -= 4;
            v115 -= 4;
          }
          while (v115);
          v110 -= v112 & 0x3FFFFFFFFFFFFFFCLL;
          v99 -= v112 & 0x3FFFFFFFFFFFFFFCLL;
          if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_561:
            do
            {
              v117 = *--v99;
              *--v110 = v117;
            }
            while (v99 != (uint64_t *)v103);
          }
          v99 = *(uint64_t **)(v52 + 2448);
        }
        *(_QWORD *)(v52 + 2448) = v110;
        *(_QWORD *)(v52 + 2456) = v101;
        *(_QWORD *)(v52 + 2464) = &v108[8 * v107];
        if (v99)
          operator delete(v99);
      }
      else
      {
        *v99 = v98;
        v101 = v99 + 1;
      }
      *(_QWORD *)(v52 + 2456) = v101;
      v97 = *(v101 - 1);
    }
    else
    {
      v96 = *(_QWORD *)(v95 - 8);
      *(_QWORD *)(v52 + 2432) = v95 - 8;
      *(_DWORD *)(*(_QWORD *)(v52 + 2448) + 8 * v96) = -1431655765
                                                     * ((*(_QWORD *)(v52 + 2480) - *(_QWORD *)(v52 + 2472)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v52 + 2448) + 8 * v96 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v52 + 2448)
                                                                                               + 8 * v96
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      v97 = v96 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v52 + 2448) + 8 * v96 + 4) << 32);
    }
    v118 = *(_QWORD *)(v52 + 2480);
    v119 = *(_QWORD *)(v52 + 2488);
    if (v118 >= v119)
    {
      v121 = *(_QWORD *)(v52 + 2472);
      v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - v121) >> 3) + 1;
      if (v122 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_558;
      v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - v121) >> 3);
      if (2 * v123 > v122)
        v122 = 2 * v123;
      if (v123 >= 0x555555555555555)
        v124 = 0xAAAAAAAAAAAAAAALL;
      else
        v124 = v122;
      if (v124 > 0xAAAAAAAAAAAAAAALL)
LABEL_557:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v125 = (char *)operator new(24 * v124);
      v126 = &v125[8 * ((uint64_t)(v118 - v121) >> 3)];
      v127 = &v125[24 * v124];
      *(_QWORD *)v126 = 0;
      *((_QWORD *)v126 + 1) = 0;
      *((_QWORD *)v126 + 2) = 0;
      v120 = v126 + 24;
      if (v118 == v121)
      {
        *(_QWORD *)(v52 + 2472) = v126;
        *(_QWORD *)(v52 + 2480) = v120;
        *(_QWORD *)(v52 + 2488) = v127;
      }
      else
      {
        do
        {
          v128 = *(_OWORD *)(v118 - 24);
          v118 -= 24;
          *(_OWORD *)(v126 - 24) = v128;
          v126 -= 24;
          *((_QWORD *)v126 + 2) = *(_QWORD *)(v118 + 16);
          *(_QWORD *)(v118 + 8) = 0;
          *(_QWORD *)(v118 + 16) = 0;
        }
        while (v118 != v121);
        v118 = *(_QWORD *)(v52 + 2472);
        v129 = *(_QWORD *)(v52 + 2480);
        *(_QWORD *)(v52 + 2472) = v126;
        *(_QWORD *)(v52 + 2480) = v120;
        *(_QWORD *)(v52 + 2488) = v127;
        while (v129 != v118)
        {
          v130 = *(std::__shared_weak_count **)(v129 - 8);
          if (v130)
          {
            v131 = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v129 -= 24;
        }
      }
      if (v118)
        operator delete((void *)v118);
    }
    else
    {
      *(_QWORD *)v118 = 0;
      *(_QWORD *)(v118 + 8) = 0;
      v120 = (_QWORD *)(v118 + 24);
      *(_QWORD *)(v118 + 16) = 0;
    }
    *(_QWORD *)(v52 + 2480) = v120;
    v133 = *(_QWORD **)(v52 + 2504);
    v134 = *(_QWORD *)(v52 + 2512);
    if ((unint64_t)v133 >= v134)
    {
      v118 = *(_QWORD *)(v52 + 2496);
      v136 = (uint64_t)((uint64_t)v133 - v118) >> 3;
      v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) >> 61)
LABEL_558:
        abort();
      v138 = v134 - v118;
      if (v138 >> 2 > v137)
        v137 = v138 >> 2;
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
        v139 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v139 = v137;
      if (v139)
      {
        if (v139 >> 61)
          goto LABEL_557;
        v140 = (char *)operator new(8 * v139);
      }
      else
      {
        v140 = 0;
      }
      v141 = &v140[8 * v136];
      *(_QWORD *)v141 = v97;
      v135 = v141 + 8;
      if (v133 != (_QWORD *)v118)
      {
        v142 = (unint64_t)v133 - v118 - 8;
        if (v142 < 0x58)
          goto LABEL_562;
        if (v118 - (unint64_t)v140 < 0x20)
          goto LABEL_562;
        v143 = (v142 >> 3) + 1;
        v144 = (_OWORD *)((char *)v133 + (_QWORD)v140 - v118 - 16);
        v145 = (__int128 *)(v133 - 2);
        v146 = v143 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v147 = *v145;
          *(v144 - 1) = *(v145 - 1);
          *v144 = v147;
          v144 -= 2;
          v145 -= 2;
          v146 -= 4;
        }
        while (v146);
        v141 -= 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
        v133 -= v143 & 0x3FFFFFFFFFFFFFFCLL;
        if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_562:
          do
          {
            v148 = *--v133;
            *((_QWORD *)v141 - 1) = v148;
            v141 -= 8;
          }
          while (v133 != (_QWORD *)v118);
        }
      }
      *(_QWORD *)(v52 + 2496) = v141;
      *(_QWORD *)(v52 + 2504) = v135;
      *(_QWORD *)(v52 + 2512) = &v140[8 * v139];
      if (v118)
        operator delete((void *)v118);
    }
    else
    {
      *v133 = v97;
      v135 = v133 + 1;
    }
    v149 = (uint64_t *)(v52 + 2344);
    *(_QWORD *)(v52 + 2504) = v135;
    v150 = *(_QWORD *)(v52 + 2352);
    if (v150)
    {
      v151 = (uint8x8_t)vcnt_s8((int8x8_t)v150);
      v151.i16[0] = vaddlv_u8(v151);
      if (v151.u32[0] > 1uLL)
      {
        v118 = v97;
        if (v97 >= v150)
          v118 = v97 % v150;
      }
      else
      {
        v118 = (v150 - 1) & v97;
      }
      v152 = *(_QWORD **)(*v149 + 8 * v118);
      if (v152)
      {
        v153 = (_QWORD *)*v152;
        if (v153)
        {
          if (v151.u32[0] < 2uLL)
          {
            while (1)
            {
              v155 = v153[1];
              if (v155 == v97)
              {
                if (v153[2] == v97)
                  goto LABEL_240;
              }
              else if ((v155 & (v150 - 1)) != v118)
              {
                goto LABEL_201;
              }
              v153 = (_QWORD *)*v153;
              if (!v153)
                goto LABEL_201;
            }
          }
          do
          {
            v154 = v153[1];
            if (v154 == v97)
            {
              if (v153[2] == v97)
                goto LABEL_240;
            }
            else
            {
              if (v154 >= v150)
                v154 %= v150;
              if (v154 != v118)
                break;
            }
            v153 = (_QWORD *)*v153;
          }
          while (v153);
        }
      }
    }
LABEL_201:
    v156 = (char *)operator new(0x30uLL);
    *(_QWORD *)v156 = 0;
    *((_QWORD *)v156 + 1) = v97;
    *((_QWORD *)v156 + 2) = v97;
    *(_OWORD *)(v156 + 24) = xmmword_19FFB3350;
    v156[40] = 0;
    v157 = (float)(unint64_t)(*(_QWORD *)(v52 + 2368) + 1);
    v158 = *(float *)(v52 + 2376);
    if (!v150 || (float)(v158 * (float)v150) < v157)
    {
      v159 = v150 < 3 || (v150 & (v150 - 1)) != 0;
      v160 = v159 | (2 * v150);
      v161 = vcvtps_u32_f32(v157 / v158);
      if (v160 <= v161)
        prime = v161;
      else
        prime = v160;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v150 = *(_QWORD *)(v52 + 2352);
      }
      if (prime > v150)
        goto LABEL_214;
      if (prime < v150)
      {
        v163 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2368) / *(float *)(v52 + 2376));
        if (v150 < 3 || (v164 = (uint8x8_t)vcnt_s8((int8x8_t)v150), v164.i16[0] = vaddlv_u8(v164), v164.u32[0] > 1uLL))
        {
          v163 = std::__next_prime(v163);
        }
        else
        {
          v165 = 1 << -(char)__clz(v163 - 1);
          if (v163 >= 2)
            v163 = v165;
        }
        if (prime <= v163)
          prime = v163;
        if (prime < v150)
LABEL_214:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v52 + 2344, prime);
      }
      v150 = *(_QWORD *)(v52 + 2352);
      if ((v150 & (v150 - 1)) != 0)
      {
        if (v97 >= v150)
          v118 = v97 % v150;
        else
          v118 = v97;
      }
      else
      {
        v118 = (v150 - 1) & v97;
      }
    }
    v166 = *v149;
    v167 = *(_QWORD **)(*v149 + 8 * v118);
    if (v167)
    {
      *(_QWORD *)v156 = *v167;
LABEL_238:
      *v167 = v156;
      goto LABEL_239;
    }
    *(_QWORD *)v156 = *(_QWORD *)(v52 + 2360);
    *(_QWORD *)(v52 + 2360) = v156;
    *(_QWORD *)(v166 + 8 * v118) = v52 + 2360;
    if (*(_QWORD *)v156)
    {
      v168 = *(_QWORD *)(*(_QWORD *)v156 + 8);
      if ((v150 & (v150 - 1)) != 0)
      {
        if (v168 >= v150)
          v168 %= v150;
      }
      else
      {
        v168 &= v150 - 1;
      }
      v167 = (_QWORD *)(*v149 + 8 * v168);
      goto LABEL_238;
    }
LABEL_239:
    ++*(_QWORD *)(v52 + 2368);
LABEL_240:
    v169 = *(float *)(v80 + 8);
    v170 = *(float *)(v80 + 12);
    v171 = *(float *)(v80 + 16);
    v172 = *(_QWORD *)(v52 + 2568);
    v173 = LODWORD(v169) - 0x61C8864680B583EBLL;
    if (v169 == 0.0)
      v173 = 0x9E3779B97F4A7C15;
    v174 = LODWORD(v170) - 0x61C8864680B583EBLL;
    if (v170 == 0.0)
      v174 = 0x9E3779B97F4A7C15;
    v175 = ((v173 >> 2) + (v173 << 6) + v174) ^ v173;
    v176 = LODWORD(v171) - 0x61C8864680B583EBLL;
    if (v171 == 0.0)
      v176 = 0x9E3779B97F4A7C15;
    v177 = (v176 + (v175 << 6) + (v175 >> 2)) ^ v175;
    v178 = (((v177 << 6) - 0x61C8864680B583EBLL + (v177 >> 2)) ^ v177) - 0x61C8864680B583EBLL;
    if (v172)
    {
      v179 = (uint8x8_t)vcnt_s8((int8x8_t)v172);
      v179.i16[0] = vaddlv_u8(v179);
      if (v179.u32[0] > 1uLL)
      {
        v118 = (((v177 << 6) - 0x61C8864680B583EBLL + (v177 >> 2)) ^ v177) - 0x61C8864680B583EBLL;
        if (v178 >= v172)
          v118 = v178 % v172;
      }
      else
      {
        v118 = v178 & (v172 - 1);
      }
      v180 = (void **)*((_QWORD *)*v88 + v118);
      if (v180)
      {
        v181 = *v180;
        if (*v180)
        {
          if (v179.u32[0] < 2uLL)
          {
            while (1)
            {
              v185 = v181[1];
              if (v185 == v178)
              {
                if (v181[3] == *v87 && *((_DWORD *)v181 + 8) == (unint64_t)*(unsigned int *)(v80 + 16))
                  goto LABEL_339;
              }
              else if ((v185 & (v172 - 1)) != v118)
              {
                goto LABEL_272;
              }
              v181 = (_QWORD *)*v181;
              if (!v181)
                goto LABEL_272;
            }
          }
          do
          {
            v183 = v181[1];
            if (v183 == v178)
            {
              if (v181[3] == *v87 && *((_DWORD *)v181 + 8) == (unint64_t)*(unsigned int *)(v80 + 16))
                goto LABEL_339;
            }
            else
            {
              if (v183 >= v172)
                v183 %= v172;
              if (v183 != v118)
                break;
            }
            v181 = (_QWORD *)*v181;
          }
          while (v181);
        }
      }
    }
LABEL_272:
    v181 = operator new(0x30uLL);
    *v181 = 0;
    v181[1] = v178;
    v181[2] = *(_QWORD *)v80;
    v186 = *v87;
    *((_DWORD *)v181 + 8) = *(_DWORD *)(v80 + 16);
    v181[3] = v186;
    v181[5] = 0;
    v187 = (float)(unint64_t)(*(_QWORD *)(v52 + 2584) + 1);
    v188 = *(float *)(v52 + 2592);
    if (!v172 || (float)(v188 * (float)v172) < v187)
    {
      v189 = (v172 & (v172 - 1)) != 0;
      if (v172 < 3)
        v189 = 1;
      v190 = v189 | (2 * v172);
      v191 = vcvtps_u32_f32(v187 / v188);
      if (v190 <= v191)
        v192 = v191;
      else
        v192 = v190;
      if (v192 == 1)
      {
        v192 = 2;
      }
      else if ((v192 & (v192 - 1)) != 0)
      {
        v192 = std::__next_prime(v192);
        v172 = *(_QWORD *)(v52 + 2568);
      }
      if (v192 <= v172)
      {
        if (v192 >= v172)
          goto LABEL_324;
        v204 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2584) / *(float *)(v52 + 2592));
        if (v172 < 3 || (v205 = (uint8x8_t)vcnt_s8((int8x8_t)v172), v205.i16[0] = vaddlv_u8(v205), v205.u32[0] > 1uLL))
        {
          v204 = std::__next_prime(v204);
        }
        else
        {
          v206 = 1 << -(char)__clz(v204 - 1);
          if (v204 >= 2)
            v204 = v206;
        }
        if (v192 <= v204)
          v192 = v204;
        if (v192 >= v172)
          goto LABEL_324;
        if (!v192)
        {
          v210 = *v88;
          *v88 = 0;
          if (v210)
            operator delete(v210);
          *(_QWORD *)(v52 + 2568) = 0;
          goto LABEL_324;
        }
      }
      if (v192 >> 61)
        goto LABEL_557;
      v193 = operator new(8 * v192);
      v194 = *v88;
      *v88 = v193;
      if (v194)
        operator delete(v194);
      v195 = 0;
      *(_QWORD *)(v52 + 2568) = v192;
      do
        *((_QWORD *)*v88 + v195++) = 0;
      while (v192 != v195);
      v196 = *(_QWORD **)(v52 + 2576);
      if (!v196)
        goto LABEL_324;
      v197 = v52 + 2576;
      v198 = v196[1];
      v199 = v192 - 1;
      if ((v192 & (v192 - 1)) == 0)
      {
        v200 = v198 & v199;
        *((_QWORD *)*v88 + v200) = v197;
        while (1)
        {
          v201 = (_QWORD *)*v196;
          if (!*v196)
            break;
          v202 = v201[1] & v199;
          if (v202 == v200)
          {
            v196 = (_QWORD *)*v196;
          }
          else if (*((_QWORD *)*v88 + v202))
          {
            *v196 = *v201;
            v203 = 8 * v202;
            *v201 = **(_QWORD **)((char *)*v88 + v203);
            **(_QWORD **)((char *)*v88 + v203) = v201;
          }
          else
          {
            *((_QWORD *)*v88 + v202) = v196;
            v196 = v201;
            v200 = v202;
          }
        }
LABEL_324:
        v172 = *(_QWORD *)(v52 + 2568);
        if ((v172 & (v172 - 1)) != 0)
        {
          if (v178 >= v172)
            v118 = v178 % v172;
          else
            v118 = v178;
        }
        else
        {
          v118 = (v172 - 1) & v178;
        }
        goto LABEL_329;
      }
      if (v198 >= v192)
        v198 %= v192;
      *((_QWORD *)*v88 + v198) = v197;
      v207 = (_QWORD *)*v196;
      if (!*v196)
        goto LABEL_324;
      while (1)
      {
        v209 = v207[1];
        if (v209 >= v192)
          v209 %= v192;
        if (v209 != v198)
        {
          if (!*((_QWORD *)*v88 + v209))
          {
            *((_QWORD *)*v88 + v209) = v196;
            goto LABEL_310;
          }
          *v196 = *v207;
          v208 = 8 * v209;
          *v207 = **(_QWORD **)((char *)*v88 + v208);
          **(_QWORD **)((char *)*v88 + v208) = v207;
          v207 = v196;
        }
        v209 = v198;
LABEL_310:
        v196 = v207;
        v207 = (_QWORD *)*v207;
        v198 = v209;
        if (!v207)
          goto LABEL_324;
      }
    }
LABEL_329:
    v211 = *v88;
    v212 = (_QWORD *)*((_QWORD *)*v88 + v118);
    if (v212)
    {
      *v181 = *v212;
LABEL_337:
      *v212 = v181;
      goto LABEL_338;
    }
    *v181 = *(_QWORD *)(v52 + 2576);
    *(_QWORD *)(v52 + 2576) = v181;
    v211[v118] = v52 + 2576;
    if (*v181)
    {
      v213 = *(_QWORD *)(*v181 + 8);
      if ((v172 & (v172 - 1)) != 0)
      {
        if (v213 >= v172)
          v213 %= v172;
      }
      else
      {
        v213 &= v172 - 1;
      }
      v212 = (char *)*v88 + 8 * v213;
      goto LABEL_337;
    }
LABEL_338:
    ++*(_QWORD *)(v52 + 2584);
LABEL_339:
    v181[5] = v97;
    v214 = *(_QWORD *)(v52 + 2608);
    if (v214)
    {
      v215 = (uint8x8_t)vcnt_s8((int8x8_t)v214);
      v215.i16[0] = vaddlv_u8(v215);
      if (v215.u32[0] > 1uLL)
      {
        v118 = v97;
        if (v97 >= v214)
          v118 = v97 % v214;
      }
      else
      {
        v118 = (v214 - 1) & v97;
      }
      v216 = *(void ***)(*(_QWORD *)(v52 + 2600) + 8 * v118);
      if (v216)
      {
        v217 = *v216;
        if (*v216)
        {
          if (v215.u32[0] < 2uLL)
          {
            while (1)
            {
              v219 = v217[1];
              if (v219 == v97)
              {
                if (v217[2] == v97)
                  goto LABEL_426;
              }
              else if ((v219 & (v214 - 1)) != v118)
              {
                goto LABEL_359;
              }
              v217 = (_QWORD *)*v217;
              if (!v217)
                goto LABEL_359;
            }
          }
          do
          {
            v218 = v217[1];
            if (v218 == v97)
            {
              if (v217[2] == v97)
                goto LABEL_426;
            }
            else
            {
              if (v218 >= v214)
                v218 %= v214;
              if (v218 != v118)
                break;
            }
            v217 = (_QWORD *)*v217;
          }
          while (v217);
        }
      }
    }
LABEL_359:
    v217 = operator new(0x30uLL);
    *v217 = 0;
    v217[1] = v97;
    v217[2] = v97;
    v217[3] = 0;
    v217[4] = 0;
    v217[5] = 0;
    v220 = (float)(unint64_t)(*(_QWORD *)(v52 + 2624) + 1);
    v221 = *(float *)(v52 + 2632);
    if (!v214 || (float)(v221 * (float)v214) < v220)
    {
      v222 = (v214 & (v214 - 1)) != 0;
      if (v214 < 3)
        v222 = 1;
      v223 = v222 | (2 * v214);
      v224 = vcvtps_u32_f32(v220 / v221);
      if (v223 <= v224)
        v225 = v224;
      else
        v225 = v223;
      if (v225 == 1)
      {
        v225 = 2;
      }
      else if ((v225 & (v225 - 1)) != 0)
      {
        v225 = std::__next_prime(v225);
        v214 = *(_QWORD *)(v52 + 2608);
      }
      if (v225 <= v214)
      {
        if (v225 >= v214)
          goto LABEL_411;
        v238 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2624) / *(float *)(v52 + 2632));
        if (v214 < 3 || (v239 = (uint8x8_t)vcnt_s8((int8x8_t)v214), v239.i16[0] = vaddlv_u8(v239), v239.u32[0] > 1uLL))
        {
          v238 = std::__next_prime(v238);
        }
        else
        {
          v240 = 1 << -(char)__clz(v238 - 1);
          if (v238 >= 2)
            v238 = v240;
        }
        if (v225 <= v238)
          v225 = v238;
        if (v225 >= v214)
          goto LABEL_411;
        if (!v225)
        {
          v245 = *(void **)(v52 + 2600);
          *(_QWORD *)(v52 + 2600) = 0;
          if (v245)
            operator delete(v245);
          *(_QWORD *)(v52 + 2608) = 0;
          goto LABEL_411;
        }
      }
      if (v225 >> 61)
        goto LABEL_557;
      v226 = operator new(8 * v225);
      v227 = *(void **)(v52 + 2600);
      *(_QWORD *)(v52 + 2600) = v226;
      if (v227)
        operator delete(v227);
      v228 = 0;
      *(_QWORD *)(v52 + 2608) = v225;
      do
        *(_QWORD *)(*(_QWORD *)(v52 + 2600) + 8 * v228++) = 0;
      while (v225 != v228);
      v229 = *(_QWORD **)(v52 + 2616);
      if (!v229)
        goto LABEL_411;
      v230 = v52 + 2616;
      v231 = v229[1];
      v232 = v225 - 1;
      if ((v225 & (v225 - 1)) == 0)
      {
        v233 = v231 & v232;
        *(_QWORD *)(*(_QWORD *)(v52 + 2600) + 8 * v233) = v230;
        while (1)
        {
          v234 = (_QWORD *)*v229;
          if (!*v229)
            break;
          v235 = v234[1] & v232;
          if (v235 == v233)
          {
            v229 = (_QWORD *)*v229;
          }
          else
          {
            v236 = *(_QWORD *)(v52 + 2600);
            if (*(_QWORD *)(v236 + 8 * v235))
            {
              *v229 = *v234;
              v237 = 8 * v235;
              *v234 = **(_QWORD **)(*(_QWORD *)(v52 + 2600) + v237);
              **(_QWORD **)(*(_QWORD *)(v52 + 2600) + v237) = v234;
            }
            else
            {
              *(_QWORD *)(v236 + 8 * v235) = v229;
              v229 = v234;
              v233 = v235;
            }
          }
        }
LABEL_411:
        v214 = *(_QWORD *)(v52 + 2608);
        if ((v214 & (v214 - 1)) != 0)
        {
          if (v97 >= v214)
            v118 = v97 % v214;
          else
            v118 = v97;
        }
        else
        {
          v118 = (v214 - 1) & v97;
        }
        goto LABEL_416;
      }
      if (v231 >= v225)
        v231 %= v225;
      *(_QWORD *)(*(_QWORD *)(v52 + 2600) + 8 * v231) = v230;
      v241 = (_QWORD *)*v229;
      if (!*v229)
        goto LABEL_411;
      while (1)
      {
        v243 = v241[1];
        if (v243 >= v225)
          v243 %= v225;
        if (v243 != v231)
        {
          v244 = *(_QWORD *)(v52 + 2600);
          if (!*(_QWORD *)(v244 + 8 * v243))
          {
            *(_QWORD *)(v244 + 8 * v243) = v229;
            goto LABEL_397;
          }
          *v229 = *v241;
          v242 = 8 * v243;
          *v241 = **(_QWORD **)(*(_QWORD *)(v52 + 2600) + v242);
          **(_QWORD **)(*(_QWORD *)(v52 + 2600) + v242) = v241;
          v241 = v229;
        }
        v243 = v231;
LABEL_397:
        v229 = v241;
        v241 = (_QWORD *)*v241;
        v231 = v243;
        if (!v241)
          goto LABEL_411;
      }
    }
LABEL_416:
    v246 = *(_QWORD *)(v52 + 2600);
    v247 = *(_QWORD **)(v246 + 8 * v118);
    if (v247)
    {
      *v217 = *v247;
    }
    else
    {
      *v217 = *(_QWORD *)(v52 + 2616);
      *(_QWORD *)(v52 + 2616) = v217;
      *(_QWORD *)(v246 + 8 * v118) = v52 + 2616;
      if (!*v217)
        goto LABEL_425;
      v248 = *(_QWORD *)(*v217 + 8);
      if ((v214 & (v214 - 1)) != 0)
      {
        if (v248 >= v214)
          v248 %= v214;
      }
      else
      {
        v248 &= v214 - 1;
      }
      v247 = (_QWORD *)(*(_QWORD *)(v52 + 2600) + 8 * v248);
    }
    *v247 = v217;
LABEL_425:
    ++*(_QWORD *)(v52 + 2624);
LABEL_426:
    v217[3] = *(_QWORD *)v80;
    *((_DWORD *)v217 + 8) = *(_DWORD *)(v80 + 8);
    *((_DWORD *)v217 + 9) = *(_DWORD *)(v80 + 12);
    *((_DWORD *)v217 + 10) = *(_DWORD *)(v80 + 16);
    v249 = *(_QWORD *)(v52 + 2456);
    v250 = *(_QWORD *)(v52 + 2448);
    v334[0] = v97;
    if (v97 >= (unint64_t)((v249 - v250) >> 3)
      || (v251 = *(_QWORD *)(v250 + 8 * v97)) == 0
      || HIDWORD(v97) != HIDWORD(v251)
      || (v252 = (_QWORD *)(*(_QWORD *)(v52 + 2472) + 24 * v251), v252 == *(_QWORD **)(v52 + 2480)))
    {
      v94 = 0;
      goto LABEL_434;
    }
    v94 = (_QWORD *)operator new();
    v253 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v94, qword_1EE54A588, 2, 0, 6, 1);
    v253[25] = ggl::DaVinci::StyleEmissiveColor::reflection(void)::reflection;
    *v253 = &off_1E42B9CB0;
    v254 = *(_QWORD *)(v52 + 2528);
    if (v254)
    {
      v255 = (uint8x8_t)vcnt_s8((int8x8_t)v254);
      v255.i16[0] = vaddlv_u8(v255);
      if (v255.u32[0] > 1uLL)
      {
        v118 = v97;
        if (v97 >= v254)
          v118 = v97 % v254;
      }
      else
      {
        v118 = (v254 - 1) & v97;
      }
      v286 = *(_QWORD ***)(*(_QWORD *)(v52 + 2520) + 8 * v118);
      if (v286)
      {
        v287 = *v286;
        if (*v286)
        {
          if (v255.u32[0] < 2uLL)
          {
            while (1)
            {
              v289 = v287[1];
              if (v289 == v97)
              {
                if (v287[2] == v97)
                  goto LABEL_552;
              }
              else if ((v289 & (v254 - 1)) != v118)
              {
                goto LABEL_485;
              }
              v287 = (_QWORD *)*v287;
              if (!v287)
                goto LABEL_485;
            }
          }
          do
          {
            v288 = v287[1];
            if (v288 == v97)
            {
              if (v287[2] == v97)
                goto LABEL_552;
            }
            else
            {
              if (v288 >= v254)
                v288 %= v254;
              if (v288 != v118)
                break;
            }
            v287 = (_QWORD *)*v287;
          }
          while (v287);
        }
      }
    }
LABEL_485:
    v287 = operator new(0x20uLL);
    v290 = (_QWORD *)(v52 + 2536);
    *v287 = 0;
    v287[1] = v97;
    v287[2] = v97;
    v287[3] = 0;
    v291 = (float)(unint64_t)(*(_QWORD *)(v52 + 2544) + 1);
    v292 = *(float *)(v52 + 2552);
    if (v254 && (float)(v292 * (float)v254) >= v291)
    {
      v97 = v118;
      goto LABEL_542;
    }
    v293 = (v254 & (v254 - 1)) != 0;
    if (v254 < 3)
      v293 = 1;
    v294 = v293 | (2 * v254);
    v295 = vcvtps_u32_f32(v291 / v292);
    if (v294 <= v295)
      v296 = v295;
    else
      v296 = v294;
    if (v296 == 1)
    {
      v296 = 2;
    }
    else if ((v296 & (v296 - 1)) != 0)
    {
      v296 = std::__next_prime(v296);
      v254 = *(_QWORD *)(v52 + 2528);
    }
    if (v296 <= v254)
    {
      if (v296 >= v254)
        goto LABEL_538;
      v308 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2544) / *(float *)(v52 + 2552));
      if (v254 < 3 || (v309 = (uint8x8_t)vcnt_s8((int8x8_t)v254), v309.i16[0] = vaddlv_u8(v309), v309.u32[0] > 1uLL))
      {
        v308 = std::__next_prime(v308);
      }
      else
      {
        v310 = 1 << -(char)__clz(v308 - 1);
        if (v308 >= 2)
          v308 = v310;
      }
      if (v296 <= v308)
        v296 = v308;
      if (v296 >= v254)
        goto LABEL_538;
      if (!v296)
      {
        v315 = *(void **)(v52 + 2520);
        *(_QWORD *)(v52 + 2520) = 0;
        if (v315)
          operator delete(v315);
        *(_QWORD *)(v52 + 2528) = 0;
        goto LABEL_538;
      }
    }
    if (v296 >> 61)
      goto LABEL_557;
    v297 = operator new(8 * v296);
    v298 = *(void **)(v52 + 2520);
    *(_QWORD *)(v52 + 2520) = v297;
    if (v298)
      operator delete(v298);
    v299 = 0;
    *(_QWORD *)(v52 + 2528) = v296;
    do
      *(_QWORD *)(*(_QWORD *)(v52 + 2520) + 8 * v299++) = 0;
    while (v296 != v299);
    v300 = (_QWORD *)*v290;
    if (!*v290)
      goto LABEL_538;
    v301 = v300[1];
    v302 = v296 - 1;
    if ((v296 & (v296 - 1)) != 0)
    {
      if (v301 >= v296)
        v301 %= v296;
      *(_QWORD *)(*(_QWORD *)(v52 + 2520) + 8 * v301) = v290;
      v311 = (_QWORD *)*v300;
      if (!*v300)
        goto LABEL_538;
      while (1)
      {
        v313 = v311[1];
        if (v313 >= v296)
          v313 %= v296;
        if (v313 != v301)
        {
          v314 = *(_QWORD *)(v52 + 2520);
          if (!*(_QWORD *)(v314 + 8 * v313))
          {
            *(_QWORD *)(v314 + 8 * v313) = v300;
            goto LABEL_524;
          }
          *v300 = *v311;
          v312 = 8 * v313;
          *v311 = **(_QWORD **)(*(_QWORD *)(v52 + 2520) + v312);
          **(_QWORD **)(*(_QWORD *)(v52 + 2520) + v312) = v311;
          v311 = v300;
        }
        v313 = v301;
LABEL_524:
        v300 = v311;
        v311 = (_QWORD *)*v311;
        v301 = v313;
        if (!v311)
          goto LABEL_538;
      }
    }
    v303 = v301 & v302;
    *(_QWORD *)(*(_QWORD *)(v52 + 2520) + 8 * v303) = v290;
    while (1)
    {
      v304 = (_QWORD *)*v300;
      if (!*v300)
        break;
      v305 = v304[1] & v302;
      if (v305 == v303)
      {
        v300 = (_QWORD *)*v300;
      }
      else
      {
        v306 = *(_QWORD *)(v52 + 2520);
        if (*(_QWORD *)(v306 + 8 * v305))
        {
          *v300 = *v304;
          v307 = 8 * v305;
          *v304 = **(_QWORD **)(*(_QWORD *)(v52 + 2520) + v307);
          **(_QWORD **)(*(_QWORD *)(v52 + 2520) + v307) = v304;
        }
        else
        {
          *(_QWORD *)(v306 + 8 * v305) = v300;
          v300 = v304;
          v303 = v305;
        }
      }
    }
LABEL_538:
    v254 = *(_QWORD *)(v52 + 2528);
    if ((v254 & (v254 - 1)) != 0)
    {
      if (v97 >= v254)
        v97 %= v254;
    }
    else
    {
      v97 &= v254 - 1;
    }
LABEL_542:
    v316 = *(_QWORD *)(v52 + 2520);
    v317 = *(_QWORD **)(v316 + 8 * v97);
    if (v317)
    {
      *v287 = *v317;
    }
    else
    {
      *v287 = *v290;
      *v290 = v287;
      *(_QWORD *)(v316 + 8 * v97) = v290;
      if (!*v287)
        goto LABEL_551;
      v318 = *(_QWORD *)(*v287 + 8);
      if ((v254 & (v254 - 1)) != 0)
      {
        if (v318 >= v254)
          v318 %= v254;
      }
      else
      {
        v318 &= v254 - 1;
      }
      v317 = (_QWORD *)(*(_QWORD *)(v52 + 2520) + 8 * v318);
    }
    *v317 = v287;
LABEL_551:
    ++*(_QWORD *)(v52 + 2544);
LABEL_552:
    v319 = v287[3];
    v287[3] = v94;
    if (v319)
      (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
    v320 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>> const&>,std::tuple<>>(v52 + 2344, v334[0], v334);
    ++v320[3];
    *v252 = v94;
LABEL_434:
    v256 = v94[1];
    v257 = v94[9];
    v258 = vcvt_f16_f32(v327);
    *(_WORD *)(v257 + 4) = v258.i16[2];
    *(_DWORD *)v257 = v258.i32[0];
    if (v94[8] > v256)
      v256 = v94[8];
    v94[7] = 0;
    v94[8] = v256;
    v259 = v341;
    v4 = v324;
    v2 = v325;
    v7 = v322;
    CanUpdateWithStyle = v323;
    v13 = v321;
    if (v341)
    {
      v260 = (unint64_t *)&v341->__shared_owners_;
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }
    v10 = (_QWORD *)v328[4];
    v14 = v332 + 1;
    v332 = v14;
    if (v14 != v10)
    {
      v262 = v329[4];
      while (1)
      {
        v263 = *((unsigned int *)v14 + 1);
        v264 = v263 >> 7;
        if (v263 >> 7 < (v329[5] - v262) >> 3)
        {
          v265 = *(_QWORD *)(v262 + 8 * v264);
          if (v265)
          {
            v266 = v263 & 0x7F;
            v267 = *(unsigned __int16 *)(v265 + 2 * v266);
            v269 = v329[7];
            v268 = v329[8];
            if (v267 < (v268 - v269) >> 3)
            {
              v270 = v269 + 8 * v267;
              if (v270 != v268 && *(_DWORD *)(v270 + 4) == (_DWORD)v263)
              {
                v272 = v330[4];
                if (v264 < (v330[5] - v272) >> 3)
                {
                  v273 = *(_QWORD *)(v272 + 8 * v264);
                  if (v273)
                  {
                    v274 = *(unsigned __int16 *)(v273 + 2 * v266);
                    v276 = v330[7];
                    v275 = v330[8];
                    if (v274 < (v275 - v276) >> 3)
                    {
                      v277 = v276 + 8 * v274;
                      if (v277 != v275 && *(_DWORD *)(v277 + 4) == (_DWORD)v263)
                      {
                        v279 = v331[4];
                        if (v264 < (v331[5] - v279) >> 3)
                        {
                          v280 = *(_QWORD *)(v279 + 8 * v264);
                          if (v280)
                          {
                            v281 = *(unsigned __int16 *)(v280 + 2 * v266);
                            v283 = v331[7];
                            v282 = v331[8];
                            if (v281 < (v282 - v283) >> 3)
                            {
                              v284 = v283 + 8 * v281;
                              if (*(_DWORD *)(v284 + 4) == (_DWORD)v263 && v284 != v282)
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v10)
        {
          v14 = v10;
          goto LABEL_13;
        }
      }
      v10 = v14;
LABEL_13:
      v332 = v14;
    }
  }
  while (v326 != v10);
LABEL_556:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
}

void sub_19F7401D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = v1[3];
  v1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(v1);
  v5 = *(std::__shared_weak_count **)(v2 - 96);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEBDB618C34E97A19;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEBDB618C34E97A19;
      if (*(_QWORD *)&v3 <= 0xEBDB618C34E97A19)
        v5 = 0xEBDB618C34E97A19 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEBDB618C34E97A19;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEBDB618C34E97A19)
            {
              if (v7[2] == 0xEBDB618C34E97A19)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEBDB618C34E97A19)
          {
            if (v7[2] == 0xEBDB618C34E97A19)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42740B8;
  *(_QWORD *)(v11 + 8) = 0xEBDB618C34E97A19;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEBDB618C34E97A19, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEBDB618C34E97A19;
  v15[1] = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEBDB618C34E97A19, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F74048C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42876B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42876B8;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x849CB194B84BB63DLL;
  v2[1] = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
  *(_QWORD *)&result = 45;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4600;
  v2[4] = "md::ls::UniqueMaterialZIndexHandle]";
  v2[5] = 34;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287700;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287700;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F740774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278400;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278400;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (***v17)(_QWORD);
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t result;
  float v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t *v34;
  float *v35;
  uint64_t (***v36)();
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275358;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275298;
  v5[1] = a2;
  v32 = 0;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x4EDAD23DFB014132)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    v10 = v7[3];
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v32 = v10;
  v14 = ***(uint64_t ****)(a1 + 8);
  if (v14 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v14 != 0x22D45F5AAD4BF408)
  {
    v15 = v14 + 5;
    do
    {
      v16 = *v15;
      v15 += 5;
    }
    while (v16 != 0x22D45F5AAD4BF408);
    v14 = v15 - 5;
  }
  v17 = (uint64_t (***)(_QWORD))v14[3];
  v18 = (std::__shared_weak_count *)v14[4];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = *(_QWORD **)((**v17)(v17) + 8);
  v23 = v22[1];
  if ((v23 & (v23 - 1)) != 0)
  {
    v25 = 0x1AF456233693CD46;
    if (v23 <= 0x1AF456233693CD46)
      v25 = 0x1AF456233693CD46 % v23;
    v24 = *(_QWORD **)(*v22 + 8 * v25);
    do
    {
      do
        v24 = (_QWORD *)*v24;
      while (v24[1] != 0x1AF456233693CD46);
    }
    while (v24[2] != 0x1AF456233693CD46);
  }
  else
  {
    v24 = *(_QWORD **)(*v22 + 8 * ((v23 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v24 = (_QWORD *)*v24;
      while (v24[1] != 0x1AF456233693CD46);
    }
    while (v24[2] != 0x1AF456233693CD46);
  }
  v31 = fmaxf(*(float *)(*(_QWORD *)(v24[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v24[5] + 32) + 3076), 1.0);
  v33 = &off_1E427C3D8;
  v34 = &v32;
  v35 = &v31;
  v36 = &v33;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v33);
  v26 = v36;
  if (v36 == &v33)
  {
    v27 = 4;
    v26 = &v33;
  }
  else
  {
    if (!v36)
      goto LABEL_39;
    v27 = 5;
  }
  (*v26)[v27]();
LABEL_39:
  v33 = &off_1E427C420;
  v34 = &v32;
  v35 = &v31;
  v36 = &v33;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v33);
  v28 = v36;
  if (v36 == &v33)
  {
    v29 = 4;
    v28 = &v33;
    goto LABEL_43;
  }
  if (v36)
  {
    v29 = 5;
LABEL_43:
    (*v28)[v29]();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F740B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 24 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 24 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE515B39146CD9FB7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE515B39146CD9FB7;
      if (*(_QWORD *)&v3 <= 0xE515B39146CD9FB7)
        v5 = 0xE515B39146CD9FB7 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE515B39146CD9FB7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE515B39146CD9FB7)
            {
              if (v7[2] == 0xE515B39146CD9FB7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE515B39146CD9FB7)
          {
            if (v7[2] == 0xE515B39146CD9FB7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueMaterialZIndexHandle]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273308;
  *(_QWORD *)(v11 + 8) = 0xE515B39146CD9FB7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE515B39146CD9FB7, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE515B39146CD9FB7;
  v15[1] = "md::ls::UniqueMaterialZIndexHandle]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE515B39146CD9FB7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F741194(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 24 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 16 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42857C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42857C8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285810;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285810;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x3209EBE3B62CF3D3;
  v2[1] = "md::ls::UniqueMaterialData]";
  *(_QWORD *)&result = 26;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4610;
  v2[4] = "md::ls::DefaultZIndex]";
  v2[5] = 21;
  v2[6] = 0xE115FCB3272B65A3;
  v2[7] = "md::ls::ZIndex]";
  v2[8] = 14;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277488;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  float v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275238;
  v4[1] = a2;
  v30 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x4EDAD23DFB014132)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v30 = v9;
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = v21[1];
  if ((v22 & (v22 - 1)) != 0)
  {
    v24 = 0x1AF456233693CD46;
    if (v22 <= 0x1AF456233693CD46)
      v24 = 0x1AF456233693CD46 % v22;
    v23 = *(_QWORD **)(*v21 + 8 * v24);
    do
    {
      do
        v23 = (_QWORD *)*v23;
      while (v23[1] != 0x1AF456233693CD46);
    }
    while (v23[2] != 0x1AF456233693CD46);
  }
  else
  {
    v23 = *(_QWORD **)(*v21 + 8 * ((v22 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v23 = (_QWORD *)*v23;
      while (v23[1] != 0x1AF456233693CD46);
    }
    while (v23[2] != 0x1AF456233693CD46);
  }
  v29 = fmaxf(*(float *)(*(_QWORD *)(v23[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v23[5] + 32) + 3076), 1.0);
  v25 = operator new(0x20uLL);
  *v25 = &off_1E427BB20;
  v25[1] = &v30;
  v25[2] = &v29;
  v25[3] = v3;
  v32 = v25;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v31);
  v26 = v32;
  if (v32 == v31)
  {
    v27 = 4;
    v26 = v31;
    goto LABEL_38;
  }
  if (v32)
  {
    v27 = 5;
LABEL_38:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F741B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *result;
  uint64_t v66;
  unint64_t v67;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::DefaultZIndex>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::ZIndex>(v3);
  v8 = (unint64_t *)v4[7];
  v7 = (uint64_t *)v4[8];
  v9 = (char *)v7 - (char *)v8;
  if (v7 != (uint64_t *)v8)
  {
    if ((v10 = *((unsigned int *)v8 + 1), v11 = v4[4], v12 = (v4[5] - v11) >> 3, v10 >> 7 >= v12)
      || (v13 = *(_QWORD *)(v11 + 8 * (v10 >> 7))) == 0
      || (v14 = *(unsigned __int16 *)(v13 + 2 * (v10 & 0x7F)), v14 >= v9 >> 3)
      || ((v15 = (uint64_t *)&v8[v14], v15 != v7) ? (v16 = *((_DWORD *)v15 + 1) == (_DWORD)v10) : (v16 = 0), !v16))
    {
      v17 = v9 >> 3;
      v18 = (uint64_t *)(v8 + 1);
      while (v18 != v7)
      {
        v19 = *((unsigned int *)v18 + 1);
        v20 = (uint64_t *)v4[8];
        if (v19 >> 7 < v12)
        {
          v21 = *(_QWORD *)(v11 + 8 * (v19 >> 7));
          v20 = (uint64_t *)v4[8];
          if (v21)
          {
            v22 = *(unsigned __int16 *)(v21 + 2 * (v19 & 0x7F));
            v20 = (uint64_t *)v4[8];
            if (v17 > v22)
            {
              v20 = (uint64_t *)&v8[v22];
              if (*((_DWORD *)v20 + 1) != (_DWORD)v19)
                v20 = (uint64_t *)v4[8];
            }
          }
        }
        ++v18;
        if (v20 != v7)
        {
          v8 = (unint64_t *)(v18 - 1);
          goto LABEL_19;
        }
      }
      goto LABEL_68;
    }
  }
LABEL_19:
  if (v7 == (uint64_t *)v8)
  {
LABEL_68:
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    *result = 0xFFFFFFFF00000000;
    return result;
  }
  v23 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v23 = *v8;
    v25 = *v8;
    v26 = HIDWORD(*v8);
    v27 = *v8 >> 39;
    v28 = v4[4];
    if (v27 < (v4[5] - v28) >> 3
      && (v29 = *(_QWORD *)(v28 + 8 * v27)) != 0
      && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v25) & 0x7F)), v32 = v4[7], v31 = v4[8], v30 < (v31 - v32) >> 3)
      && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v26) : (v34 = 0), v34))
    {
      v35 = v4[11];
      v36 = v4[10] + 24 * v30;
    }
    else
    {
      v35 = v4[11];
      v36 = v35;
    }
    if (v36 == v35)
      v37 = 0;
    else
      v37 = v36;
    v38 = v5[4];
    if (v27 < (v5[5] - v38) >> 3
      && (v39 = *(_QWORD *)(v38 + 8 * v27)) != 0
      && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v25) & 0x7F)), v42 = v5[7], v41 = v5[8], v40 < (v41 - v42) >> 3)
      && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v26) : (v44 = 0), v44))
    {
      v45 = v5[11];
      v46 = v5[10] + v40;
    }
    else
    {
      v45 = v5[11];
      v46 = v45;
    }
    if (v46 == v45)
      v46 = 0;
    if ((v47 = v6[4], v27 < (v6[5] - v47) >> 3)
      && (v48 = *(_QWORD *)(v47 + 8 * v27)) != 0
      && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v25) & 0x7F)), v51 = v6[7], v50 = v6[8], v49 < (v50 - v51) >> 3)
      && ((v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == (_DWORD)v26) : (v53 = 0), v53))
    {
      v54 = v6[11];
      v55 = v6[10] + 8 * v49;
    }
    else
    {
      v54 = v6[11];
      v55 = v54;
    }
    v56 = v55 == v54 ? 0 : v55;
    v66 = v56;
    v67 = v46;
    v57 = *(_QWORD *)(a2 + 24);
    if (!v57)
      break;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)v57 + 48))(v57, v37, &v67, &v66);
    v58 = v4[4];
    v59 = v4[7];
    v24 = (uint64_t *)v4[8];
    v60 = (uint64_t *)(v8 + 1);
    while (v60 != v24)
    {
      v61 = *((unsigned int *)v60 + 1);
      v62 = v4[8];
      if (v61 >> 7 < (v4[5] - v58) >> 3)
      {
        v63 = *(_QWORD *)(v58 + 8 * (v61 >> 7));
        v62 = v4[8];
        if (v63)
        {
          v64 = *(unsigned __int16 *)(v63 + 2 * (v61 & 0x7F));
          v62 = v4[8];
          if (((uint64_t)v24 - v59) >> 3 > v64)
          {
            v62 = v59 + 8 * v64;
            if (*(_DWORD *)(v62 + 4) != (_DWORD)v61)
              v62 = v4[8];
          }
        }
      }
      ++v60;
      if ((uint64_t *)v62 != v24)
      {
        v24 = v60 - 1;
        break;
      }
    }
    v8 = (unint64_t *)v24;
    if (v7 == v24)
      goto LABEL_68;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (_QWORD *)ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::empty();
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  gdc::Registry::storage<md::ls::DefaultZIndex>(v1);
  gdc::Registry::storage<md::ls::ZIndex>(v1);
  v4 = v2[7];
  v3 = v2[8];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v6 = *(unsigned int *)(v4 + 4), v7 = v2[4], v8 = (v2[5] - v7) >> 3, v6 >> 7 >= v8)
      || (v9 = *(_QWORD *)(v7 + 8 * (v6 >> 7))) == 0
      || (v10 = *(unsigned __int16 *)(v9 + 2 * (v6 & 0x7F)), v10 >= v5 >> 3)
      || ((v11 = v4 + 8 * v10, v11 != v3) ? (v12 = *(_DWORD *)(v11 + 4) == (_DWORD)v6) : (v12 = 0), !v12))
    {
      v13 = v5 >> 3;
      v14 = v4 + 8;
      while (v14 != v3)
      {
        v15 = *(unsigned int *)(v14 + 4);
        v16 = v2[8];
        if (v15 >> 7 < v8)
        {
          v17 = *(_QWORD *)(v7 + 8 * (v15 >> 7));
          v16 = v2[8];
          if (v17)
          {
            v18 = *(unsigned __int16 *)(v17 + 2 * (v15 & 0x7F));
            v16 = v2[8];
            if (v13 > v18)
            {
              v16 = v4 + 8 * v18;
              if (*(_DWORD *)(v16 + 4) != (_DWORD)v15)
                v16 = v2[8];
            }
          }
        }
        v14 += 8;
        if (v16 != v3)
        {
          v4 = v14 - 8;
          return v3 == v4;
        }
      }
      v4 = v2[8];
    }
  }
  return v3 == v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283CC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283CC8;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x79DDAE60A4170168;
  result[1] = "md::ls::UpdatesWithStyleZChange]";
  result[2] = 31;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283D10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283D10;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276708;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (***v39)(_QWORD);
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  float v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *result;
  char v62;
  _QWORD v63[2];
  int v64;
  _QWORD *v65;
  _QWORD v66[2];
  int v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UpdatesWithStyleZChange>(*(_QWORD *)(a2 + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 != (uint64_t *)v6)
  {
    if ((v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) == 0
      || (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), !v14))
    {
      v15 = v7 >> 3;
      v16 = (uint64_t *)(v6 + 1);
      do
      {
        if (v16 == v5)
          goto LABEL_73;
        v17 = *((unsigned int *)v16 + 1);
        v18 = (uint64_t *)v3[8];
        if (v17 >> 7 < v10)
        {
          v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
          v18 = (uint64_t *)v3[8];
          if (v19)
          {
            v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            v18 = (uint64_t *)v3[8];
            if (v15 > v20)
            {
              v18 = (uint64_t *)&v6[v20];
              if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
                v18 = (uint64_t *)v3[8];
            }
          }
        }
        ++v16;
      }
      while (v18 == v5);
      v6 = (unint64_t *)(v16 - 1);
    }
  }
  if (v5 != (uint64_t *)v6)
  {
    v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v21 = *v6;
      v23 = *v6;
      v24 = *v6 >> 39;
      v25 = v4[4];
      if (v24 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
          ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
          : (v32 = 0),
            v32))
      {
        v33 = v4[11];
        v34 = v4[10] + 4 * v27;
      }
      else
      {
        v33 = v4[11];
        v34 = v33;
      }
      if (v34 == v33)
        v35 = 0;
      else
        v35 = (float *)v34;
      v36 = ***(uint64_t ****)(a1 + 8);
      if (v36 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v36 != 0x22D45F5AAD4BF408)
      {
        v37 = v36 + 5;
        do
        {
          v38 = *v37;
          v37 += 5;
        }
        while (v38 != 0x22D45F5AAD4BF408);
        v36 = v37 - 5;
      }
      v39 = (uint64_t (***)(_QWORD))v36[3];
      v40 = (std::__shared_weak_count *)v36[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v44 = *(_QWORD **)((**v39)(v39) + 8);
      v45 = v44[1];
      if ((v45 & (v45 - 1)) != 0)
      {
        v47 = 0x1AF456233693CD46;
        if (v45 <= 0x1AF456233693CD46)
          v47 = 0x1AF456233693CD46 % v45;
        v46 = *(_QWORD **)(*v44 + 8 * v47);
        do
        {
          do
            v46 = (_QWORD *)*v46;
          while (v46[1] != 0x1AF456233693CD46);
        }
        while (v46[2] != 0x1AF456233693CD46);
      }
      else
      {
        v46 = *(_QWORD **)(*v44 + 8 * ((v45 - 1) & 0x1AF456233693CD46));
        do
        {
          do
            v46 = (_QWORD *)*v46;
          while (v46[1] != 0x1AF456233693CD46);
        }
        while (v46[2] != 0x1AF456233693CD46);
      }
      v48 = fmaxf(*(float *)(*(_QWORD *)(v46[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v46[5] + 32) + 3076), 1.0);
      if (vabds_f32(*v35, v48) > 0.05)
      {
        *v35 = v48;
        v49 = *(_QWORD **)(a1 + 8);
        v50 = HIDWORD(*v21);
        v51 = LODWORD(v48) | (*v21 << 32);
        v63[0] = &off_1E42802D8;
        v63[1] = v51;
        v64 = v50;
        v65 = v63;
        v66[0] = &off_1E42802D8;
        v68 = v66;
        v66[1] = v51;
        v67 = v50;
        v69 = 0;
        ecs2::Runtime::queueCommand(v49, (uint64_t)v66);
        if (v69 != -1)
          ((void (*)(char *, _QWORD *))off_1E42FB340[v69])(&v62, v66);
        v69 = -1;
        v52 = v65;
        if (v65 == v63)
        {
          v52 = v63;
          v53 = 4;
        }
        else
        {
          if (!v65)
            goto LABEL_63;
          v53 = 5;
        }
        (*(void (**)(void))(*v52 + 8 * v53))();
      }
LABEL_63:
      v54 = v4[4];
      v55 = v4[7];
      v22 = (uint64_t *)v4[8];
      v56 = (uint64_t *)(v6 + 1);
      while (v56 != v22)
      {
        v57 = *((unsigned int *)v56 + 1);
        v58 = v4[8];
        if (v57 >> 7 < (v4[5] - v54) >> 3)
        {
          v59 = *(_QWORD *)(v54 + 8 * (v57 >> 7));
          v58 = v4[8];
          if (v59)
          {
            v60 = *(unsigned __int16 *)(v59 + 2 * (v57 & 0x7F));
            v58 = v4[8];
            if (((uint64_t)v22 - v55) >> 3 > v60)
            {
              v58 = v55 + 8 * v60;
              if (*(_DWORD *)(v58 + 4) != (_DWORD)v57)
                v58 = v4[8];
            }
          }
        }
        ++v56;
        if ((uint64_t *)v58 != v22)
        {
          v22 = v56 - 1;
          break;
        }
      }
      v6 = (unint64_t *)v22;
    }
    while (v5 != v22);
  }
LABEL_73:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::UpdatesWithStyleZChange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x79DDAE60A4170168;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x79DDAE60A4170168;
      if (*(_QWORD *)&v3 <= 0x79DDAE60A4170168uLL)
        v5 = 0x79DDAE60A4170168uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x79DDAE60A4170168;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x79DDAE60A4170168)
            {
              if (v7[2] == 0x79DDAE60A4170168)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x79DDAE60A4170168)
          {
            if (v7[2] == 0x79DDAE60A4170168)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UpdatesWithStyleZChange]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272E88;
  *(_QWORD *)(v11 + 8) = 0x79DDAE60A4170168;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x79DDAE60A4170168uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x79DDAE60A4170168;
  v15[1] = "md::ls::UpdatesWithStyleZChange]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x79DDAE60A4170168, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F742880(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288558;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288558;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32UniqueStyleEmissiveDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F742A9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42885A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42885A0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xCE1B2B8E676E76D8;
  v2[1] = "md::ls::MaterialPendingProcessing]";
  *(_QWORD *)&result = 33;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4620;
  v2[4] = "md::ls::UniqueMaterialData]";
  v2[5] = 26;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278B50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278B50;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int8x8_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (**v52)();
  uint64_t v53;
  uint64_t (***v54)();
  BOOL v55;
  int8x8_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  float v60;
  _QWORD *v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  _QWORD *v64;
  unsigned int v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  float v70;
  _QWORD *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t (***v77)();
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v101;
  unint64_t *v102;
  uint64_t v103[4];
  unint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  char v111;
  uint64_t (**v112)();
  __int128 v113;
  uint64_t (***v114)();
  uint64_t (**v115)();
  __int128 v116;
  uint64_t (***v117)();
  int v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MaterialPendingProcessing>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v7 = (uint64_t)(v4 + 4);
  else
    v7 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v105, v7, v4, v5, *(_QWORD *)(v7 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v103, v8, v4, v5, *(_QWORD *)(v8 + 32));
  if (v104 != v108)
  {
    v10 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v102 = v10;
    while (1)
    {
      *v10 = *v9;
      v11 = *v9;
      v12 = HIDWORD(*v9);
      v13 = v11 >> 39;
      v14 = v6[4];
      if (v11 >> 39 < (v6[5] - v14) >> 3
        && (v15 = *(_QWORD *)(v14 + 8 * v13)) != 0
        && (v16 = *(unsigned __int16 *)(v15 + 2 * (HIDWORD(v11) & 0x7F)),
            v18 = v6[7],
            v17 = v6[8],
            v16 < (v17 - v18) >> 3)
        && ((v19 = v18 + 8 * v16, v19 != v17) ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v12) : (v20 = 0), v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v16;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = v5[4];
      if (v13 < (v5[5] - v24) >> 3
        && (v25 = *(_QWORD *)(v24 + 8 * v13)) != 0
        && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v11) & 0x7F)),
            v28 = v5[7],
            v27 = v5[8],
            v26 < (v27 - v28) >> 3)
        && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v12) : (v30 = 0), v30))
      {
        v31 = v5[11];
        v32 = v5[10] + 24 * v26;
      }
      else
      {
        v31 = v5[11];
        v32 = v31;
      }
      if (v32 == v31)
        v33 = 0;
      else
        v33 = (unint64_t *)v32;
      v34 = **(_QWORD **)(a1 + 8);
      v35 = *(_QWORD **)v34;
      v36 = *(_QWORD **)(v34 + 8);
      if (v35 != v36)
      {
        while (*v35 != 0x41D4E9297E100630)
        {
          v35 += 5;
          if (v35 == v36)
            goto LABEL_43;
        }
      }
      if (v35 == v36)
      {
LABEL_43:
        v37 = 0;
      }
      else
      {
        v37 = (int8x8_t *)v35[3];
        v38 = (std::__shared_weak_count *)v35[4];
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldxr(p_shared_owners);
          while (__stxr(v40 + 1, p_shared_owners));
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      v42 = **(_QWORD **)(a1 + 8);
      v43 = *(_QWORD **)v42;
      v44 = *(_QWORD **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x4EDAD23DFB014132)
        {
          v43 += 5;
          if (v43 == v44)
            goto LABEL_55;
        }
      }
      if (v43 == v44)
      {
LABEL_55:
        v46 = 0;
      }
      else
      {
        v46 = v43[3];
        v45 = (std::__shared_weak_count *)v43[4];
        if (v45)
        {
          v47 = (unint64_t *)&v45->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          do
            v49 = __ldaxr(v47);
          while (__stlxr(v49 - 1, v47));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
      }
      v50 = *v33;
      v112 = (uint64_t (**)())v50;
      v51 = *(_QWORD *)(v46 + 120);
      if (v50 >= (unint64_t)((*(_QWORD *)(v46 + 128) - v51) >> 3))
        goto LABEL_64;
      v52 = *(uint64_t (***)())(v51 + 8 * v50);
      if (!v52)
        goto LABEL_65;
      if (HIDWORD(v50) != HIDWORD(v52)
        || ((v53 = *(_QWORD *)(v46 + 144),
             v54 = (uint64_t (***)())(v53 + 8 * v52),
             v54 != *(uint64_t (****)())(v46 + 152))
          ? (v55 = v53 == 0)
          : (v55 = 1),
            v55))
      {
LABEL_64:
        v52 = 0;
      }
      else
      {
        v101 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v46 + 56, v50, &v112);
        ++v101[3];
        v52 = *v54;
      }
LABEL_65:
      v56 = *(int8x8_t **)v46;
      v115 = v52;
      *(_QWORD *)&v116 = 0;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v109, v56, (uint64_t *)&v115, 0);
      v57 = v109;
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 984))(v109);
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 176))(v57);
      if (((v58 | v59) & 1) == 0)
      {
        v10 = v102;
        if (v23)
        {
          v66 = *(_QWORD **)(a1 + 8);
          v67 = *v102;
          v112 = &off_1E4282918;
          *(_QWORD *)&v113 = v67;
          v114 = &v112;
          v117 = &v115;
          v115 = &off_1E4282918;
          *(_QWORD *)&v116 = v67;
          v118 = 1;
          ecs2::Runtime::queueCommand(v66, (uint64_t)&v115);
          if (v118 != -1)
            ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v118])(&v111, &v115);
          v118 = -1;
          v68 = v114;
          if (v114 == &v112)
          {
            v68 = &v112;
            v69 = 4;
LABEL_96:
            (*v68)[v69]();
          }
          else if (v114)
          {
            v69 = 5;
            goto LABEL_96;
          }
          md::VKMRenderResourcesStore::disconnect<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>(v37, *v23);
        }
LABEL_98:
        v79 = v110;
        if (v110)
          goto LABEL_99;
        goto LABEL_103;
      }
      if (v58)
      {
        v60 = **(float **)(v57 + 48);
        v61 = *(_QWORD **)(v57 + 16);
        v10 = v102;
        if (!v61
          || ((v62 = gms::_Material<ggl::Texture2D>::zoomable(v61, 0x1Cu), v60 < 1.0)
            ? (v63 = v62)
            : (v63 = 0),
              (v63 & 1) == 0))
        {
          v64 = *(_QWORD **)(v57 + 32);
          if (v64)
          {
            v65 = 28;
LABEL_88:
            gms::_Material<ggl::Texture2D>::zoomable(v64, v65);
          }
        }
      }
      else
      {
        v10 = v102;
        if (v59)
        {
          v70 = **(float **)(v57 + 48);
          v71 = *(_QWORD **)(v57 + 16);
          if (!v71
            || ((v72 = gms::_Material<ggl::Texture2D>::zoomable(v71, 7u), v70 < 1.0)
              ? (v73 = v72)
              : (v73 = 0),
                (v73 & 1) == 0))
          {
            v64 = *(_QWORD **)(v57 + 32);
            if (v64)
            {
              v65 = 7;
              goto LABEL_88;
            }
          }
        }
      }
      if (v23)
        goto LABEL_98;
      v115 = (uint64_t (**)())v33[1];
      v112 = v115;
      v74 = md::VKMRenderResourcesStore::addKey<md::StyleEmissiveColorCacheKey>((uint64_t)v37, (uint64_t *)&v115, (unint64_t)&v112);
      v75 = *v10;
      v76 = *(_QWORD **)(a1 + 8);
      v112 = &off_1E4281A78;
      *(_QWORD *)&v113 = v74;
      *((_QWORD *)&v113 + 1) = v75;
      v114 = &v112;
      v117 = &v115;
      v115 = &off_1E4281A78;
      v116 = v113;
      v118 = 0;
      ecs2::Runtime::queueCommand(v76, (uint64_t)&v115);
      if (v118 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v118])(&v111, &v115);
      v118 = -1;
      v77 = v114;
      if (v114 == &v112)
      {
        v77 = &v112;
        v78 = 4;
      }
      else
      {
        if (!v114)
          goto LABEL_98;
        v78 = 5;
      }
      (*v77)[v78]();
      v79 = v110;
      if (v110)
      {
LABEL_99:
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
LABEL_103:
      v82 = v108;
      v9 = *(unint64_t **)(v105 + 32);
      if (++v108 != v9)
      {
        v83 = v106[4];
        v84 = (v106[5] - v83) >> 3;
        v85 = v82 + 2;
        while (1)
        {
          v86 = *((unsigned int *)v85 - 1);
          v87 = v86 >> 7;
          if (v86 >> 7 < v84)
          {
            v88 = *(_QWORD *)(v83 + 8 * v87);
            if (v88)
            {
              v89 = *(unsigned __int16 *)(v88 + 2 * (v86 & 0x7F));
              v91 = v106[7];
              v90 = v106[8];
              if (v89 < (v90 - v91) >> 3)
              {
                v92 = v91 + 8 * v89;
                if (v92 != v90 && *(_DWORD *)(v92 + 4) == (_DWORD)v86)
                {
                  v94 = v107[4];
                  if (v87 < (v107[5] - v94) >> 3)
                  {
                    v95 = *(_QWORD *)(v94 + 8 * v87);
                    if (v95)
                    {
                      v96 = *(unsigned __int16 *)(v95 + 2 * (v86 & 0x7F));
                      v98 = v107[7];
                      v97 = v107[8];
                      if (v96 < (v97 - v98) >> 3)
                      {
                        v99 = v98 + 8 * v96;
                        if (v99 != v97 && *(_DWORD *)(v99 + 4) == (_DWORD)v86)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v108 = v85;
          v20 = v85++ == v9;
          if (v20)
            goto LABEL_9;
        }
        v9 = v85 - 1;
      }
LABEL_9:
      if (v104 == v9)
        goto LABEL_129;
    }
  }
  v10 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_129:
  *v10 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F74330C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::ls::MaterialPendingProcessing>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCE1B2B8E676E76D8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCE1B2B8E676E76D8;
      if (*(_QWORD *)&v3 <= 0xCE1B2B8E676E76D8)
        v5 = 0xCE1B2B8E676E76D8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCE1B2B8E676E76D8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCE1B2B8E676E76D8)
            {
              if (v7[2] == 0xCE1B2B8E676E76D8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCE1B2B8E676E76D8)
          {
            if (v7[2] == 0xCE1B2B8E676E76D8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MaterialPendingProcessing]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273068;
  *(_QWORD *)(v11 + 8) = 0xCE1B2B8E676E76D8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCE1B2B8E676E76D8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCE1B2B8E676E76D8;
  v15[1] = "md::ls::MaterialPendingProcessing]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCE1B2B8E676E76D8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F743568(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286C08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286C08;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286C50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286C50;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xD8uLL);
  a1[2] = (char *)(v2 + 27);
  *v2 = 0x41650A8095FBA956;
  v2[1] = "md::ls::RegisterHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4630;
  v2[4] = "md::ls::EnteringView]";
  v2[5] = 20;
  v2[6] = 0x695C99F828CA9E84;
  v2[7] = "md::ls::BaseMapTileHandle]";
  v2[8] = 25;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 27)
  {
    *(_QWORD *)v3 = 0xFC370D9176A00DEBLL;
    v2[10] = "md::ls::TileRenderableTypeT<md::FlyoverRenderable>]";
    v2[11] = 50;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  if (0x5555555555555556 * (((char *)(v2 + 27) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 27) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 27) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xFC370D9176A00DEBLL;
  *((_QWORD *)v10 + 1) = "md::ls::TileRenderableTypeT<md::FlyoverRenderable>]";
  *((_QWORD *)v10 + 2) = 50;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x52DA3EA752368C9DLL;
    *((_QWORD *)v4 + 1) = "md::ls::MapDataTypeV]";
    *((_QWORD *)v4 + 2) = 20;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x52DA3EA752368C9DLL;
  *((_QWORD *)v21 + 1) = "md::ls::MapDataTypeV]";
  *((_QWORD *)v21 + 2) = 20;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x24B7D588576BB14ELL;
    *((_QWORD *)v14 + 1) = "md::ls::AssociationTileHandle]";
    *((_QWORD *)v14 + 2) = 29;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x24B7D588576BB14ELL;
  *((_QWORD *)v32 + 1) = "md::ls::AssociationTileHandle]";
  *((_QWORD *)v32 + 2) = 29;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x93E8A4F5122D6D07;
    *((_QWORD *)v25 + 1) = "md::ls::GlobeMatrixData]";
    *((_QWORD *)v25 + 2) = 23;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x93E8A4F5122D6D07;
  *((_QWORD *)v43 + 1) = "md::ls::GlobeMatrixData]";
  *((_QWORD *)v43 + 2) = 23;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xBCC33905201D8160;
    *((_QWORD *)v36 + 1) = "md::ls::TileMatrix]";
    *((_QWORD *)v36 + 2) = 18;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xBCC33905201D8160;
  *((_QWORD *)v54 + 1) = "md::ls::TileMatrix]";
  *((_QWORD *)v54 + 2) = 18;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0x53EA4A91D91C8985;
    *((_QWORD *)v47 + 1) = "md::ls::FlyoverOctileKey]";
    *((_QWORD *)v47 + 2) = 24;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_110:
    abort();
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 <= 0xAAAAAAAAAAAAAAALL)
    {
      v64 = (char *)operator new(24 * v63);
      goto LABEL_103;
    }
LABEL_111:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v64 = 0;
LABEL_103:
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0x53EA4A91D91C8985;
  *((_QWORD *)v65 + 1) = "md::ls::FlyoverOctileKey]";
  *((_QWORD *)v65 + 2) = 24;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
}

void sub_19F743F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277EA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277EA8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  int8x8_t v42;
  uint8x8_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42EE578;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (**v8)(v8);
  v14 = *(_QWORD **)(v13 + 8);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
    goto LABEL_35;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0xF014CCE28176CA44;
    if (*(_QWORD *)&v15 <= 0xF014CCE28176CA44)
      v17 = 0xF014CCE28176CA44 % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0xF014CCE28176CA44;
  }
  v18 = *(_QWORD **)(*v14 + 8 * v17);
  if (!v18)
    goto LABEL_35;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_35;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v22 = v19[1];
      if (v22 == 0xF014CCE28176CA44)
      {
        if (v19[2] == 0xF014CCE28176CA44)
          goto LABEL_33;
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_35;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v21 == 0xF014CCE28176CA44)
      break;
    if (v21 >= *(_QWORD *)&v15)
      v21 %= *(_QWORD *)&v15;
    if (v21 != v17)
      goto LABEL_35;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_35;
  }
  if (v19[2] != 0xF014CCE28176CA44)
    goto LABEL_22;
LABEL_33:
  v23 = v19[5];
  if (*(_QWORD *)(v23 + 8) == 0xF014CCE28176CA44)
  {
    v24 = *(_QWORD *)(v23 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v24 = 0;
LABEL_36:
  v57 = 0;
  v58 = v24;
  v25 = **v3;
  v26 = *(_QWORD **)v25;
  v27 = *(_QWORD **)(v25 + 8);
  if (v26 != v27)
  {
    while (*v26 != 0x41D4E9297E100630)
    {
      v26 += 5;
      if (v26 == v27)
        goto LABEL_47;
    }
  }
  if (v26 == v27)
  {
LABEL_47:
    v29 = 0;
  }
  else
  {
    v29 = v26[3];
    v28 = (std::__shared_weak_count *)v26[4];
    if (v28)
    {
      v30 = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v56 = 0;
  v57 = v29;
  v33 = **v3;
  v34 = *(_QWORD **)v33;
  v35 = *(_QWORD **)(v33 + 8);
  if (v34 != v35)
  {
    while (*v34 != 0x348A0B0E758C07C2)
    {
      v34 += 5;
      if (v34 == v35)
        goto LABEL_59;
    }
  }
  if (v34 == v35)
  {
LABEL_59:
    v37 = 0;
  }
  else
  {
    v37 = v34[3];
    v36 = (std::__shared_weak_count *)v34[4];
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v56 = v37;
  v41 = *(_QWORD **)(v13 + 8);
  v42 = (int8x8_t)v41[1];
  if (!*(_QWORD *)&v42)
    goto LABEL_88;
  v43 = (uint8x8_t)vcnt_s8(v42);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    v44 = 0xD3D7935EF848FCE7;
    if (*(_QWORD *)&v42 <= 0xD3D7935EF848FCE7)
      v44 = 0xD3D7935EF848FCE7 % *(_QWORD *)&v42;
  }
  else
  {
    v44 = (*(_QWORD *)&v42 - 1) & 0xD3D7935EF848FCE7;
  }
  v45 = *(_QWORD **)(*v41 + 8 * v44);
  if (!v45)
    goto LABEL_88;
  v46 = (_QWORD *)*v45;
  if (!v46)
    goto LABEL_88;
  if (v43.u32[0] < 2uLL)
  {
    v47 = *(_QWORD *)&v42 - 1;
    while (1)
    {
      v49 = v46[1];
      if (v49 == 0xD3D7935EF848FCE7)
      {
        if (v46[2] == 0xD3D7935EF848FCE7)
          goto LABEL_81;
      }
      else if ((v49 & v47) != v44)
      {
        goto LABEL_88;
      }
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_88;
    }
  }
  while (2)
  {
    v48 = v46[1];
    if (v48 != 0xD3D7935EF848FCE7)
    {
      if (v48 >= *(_QWORD *)&v42)
        v48 %= *(_QWORD *)&v42;
      if (v48 != v44)
        goto LABEL_88;
      goto LABEL_70;
    }
    if (v46[2] != 0xD3D7935EF848FCE7)
    {
LABEL_70:
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_88;
      continue;
    }
    break;
  }
LABEL_81:
  v50 = v46[5];
  if (*(_QWORD *)(v50 + 8) == 0xD3D7935EF848FCE7)
  {
    v55 = *(_QWORD *)(v50 + 32);
    if (v55)
    {
      v51 = operator new(0x30uLL);
      *v51 = &off_1E42F2A40;
      v51[1] = &v57;
      v51[2] = v3;
      v51[3] = &v55;
      v51[4] = &v58;
      v51[5] = &v56;
      v60 = v51;
      (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v59);
      v52 = v60;
      if (v60 == v59)
      {
        v53 = 4;
        v52 = v59;
LABEL_87:
        (*(void (**)(void))(*v52 + 8 * v53))();
      }
      else if (v60)
      {
        v53 = 5;
        goto LABEL_87;
      }
    }
  }
LABEL_88:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7444DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

unint64_t *ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t *result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  _QWORD *v110;
  unint64_t *v111;
  uint64_t v113[11];
  unint64_t *v114;
  uint64_t v115[11];
  unint64_t *v116;
  uint64_t v117[10];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = gdc::Registry::storage<md::ls::RegisterHandle>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::EnteringView>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::MapDataTypeV>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationTileHandle>(v2);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::GlobeMatrixData>(v2);
  v10 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v2);
  v11 = v2;
  v12 = (_QWORD *)v3;
  v13 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverOctileKey>(v11);
  v117[0] = v3;
  v117[1] = (uint64_t)v4;
  v117[2] = (uint64_t)v5;
  v117[3] = (uint64_t)v6;
  v117[4] = (uint64_t)v7;
  v117[5] = (uint64_t)v8;
  v117[6] = (uint64_t)v9;
  v117[7] = (uint64_t)v10;
  v117[8] = (uint64_t)v13;
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::begin(v115, v117);
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::end(v113, v117);
  v14 = v116;
  v111 = v114;
  if (v114 == v116)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_112:
    *result = 0xFFFFFFFF00000000;
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v108 = v115[0];
    v109 = result;
    v110 = v4;
    while (1)
    {
      *result = *v14;
      v16 = *v14;
      v17 = HIDWORD(*v14);
      v18 = *v14 >> 39;
      v19 = v12[4];
      if (v18 >= (v12[5] - v19) >> 3)
        goto LABEL_12;
      v20 = *(_QWORD *)(v19 + 8 * v18);
      if (!v20)
        goto LABEL_12;
      v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F));
      v23 = v12[7];
      v22 = v12[8];
      if (v21 >= (v22 - v23) >> 3)
        goto LABEL_12;
      v24 = v23 + 8 * v21;
      if (v24 != v22 && *(_DWORD *)(v24 + 4) == (_DWORD)v17)
      {
        v26 = v12[11];
        v27 = v12[10] + 8 * v21;
      }
      else
      {
LABEL_12:
        v26 = v12[11];
        v27 = v26;
      }
      v28 = v27 == v26 ? 0 : v27;
      if ((v29 = v4[4], v18 < (v4[5] - v29) >> 3)
        && (v30 = *(_QWORD *)(v29 + 8 * v18)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v16) & 0x7F)),
            v33 = v4[7],
            v32 = v4[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v17) : (v35 = 0), v35))
      {
        v36 = v4[11];
        v37 = v4[10] + v31;
      }
      else
      {
        v36 = v4[11];
        v37 = v36;
      }
      v38 = v37 == v36 ? 0 : v37;
      if ((v39 = v5[4], v18 < (v5[5] - v39) >> 3)
        && (v40 = *(_QWORD *)(v39 + 8 * v18)) != 0
        && (v41 = *(unsigned __int16 *)(v40 + 2 * (HIDWORD(v16) & 0x7F)),
            v43 = v5[7],
            v42 = v5[8],
            v41 < (v42 - v43) >> 3)
        && ((v44 = v43 + 8 * v41, v44 != v42) ? (v45 = *(_DWORD *)(v44 + 4) == (_DWORD)v17) : (v45 = 0), v45))
      {
        v46 = v5[11];
        v47 = v5[10] + 8 * v41;
      }
      else
      {
        v46 = v5[11];
        v47 = v46;
      }
      v48 = v47 == v46 ? 0 : v47;
      if ((v49 = v6[4], v18 < (v6[5] - v49) >> 3)
        && (v50 = *(_QWORD *)(v49 + 8 * v18)) != 0
        && (v51 = *(unsigned __int16 *)(v50 + 2 * (HIDWORD(v16) & 0x7F)),
            v53 = v6[7],
            v52 = v6[8],
            v51 < (v52 - v53) >> 3)
        && ((v54 = v53 + 8 * v51, v54 != v52) ? (v55 = *(_DWORD *)(v54 + 4) == (_DWORD)v17) : (v55 = 0), v55))
      {
        v56 = v6[11];
        v57 = v6[10] + v51;
      }
      else
      {
        v56 = v6[11];
        v57 = v56;
      }
      v58 = v57 == v56 ? 0 : v57;
      if ((v59 = v7[4], v18 < (v7[5] - v59) >> 3)
        && (v60 = *(_QWORD *)(v59 + 8 * v18)) != 0
        && (v61 = *(unsigned __int16 *)(v60 + 2 * (HIDWORD(v16) & 0x7F)),
            v63 = v7[7],
            v62 = v7[8],
            v61 < (v62 - v63) >> 3)
        && ((v64 = v63 + 8 * v61, v64 != v62) ? (v65 = *(_DWORD *)(v64 + 4) == (_DWORD)v17) : (v65 = 0), v65))
      {
        v66 = v7[11];
        v67 = v7[10] + 2 * v61;
      }
      else
      {
        v66 = v7[11];
        v67 = v66;
      }
      v68 = v67 == v66 ? 0 : v67;
      if ((v69 = v8[4], v18 < (v8[5] - v69) >> 3)
        && (v70 = *(_QWORD *)(v69 + 8 * v18)) != 0
        && (v71 = *(unsigned __int16 *)(v70 + 2 * (HIDWORD(v16) & 0x7F)),
            v73 = v8[7],
            v72 = v8[8],
            v71 < (v72 - v73) >> 3)
        && ((v74 = v73 + 8 * v71, v74 != v72) ? (v75 = *(_DWORD *)(v74 + 4) == (_DWORD)v17) : (v75 = 0), v75))
      {
        v76 = v8[11];
        v77 = v8[10] + 8 * v71;
      }
      else
      {
        v76 = v8[11];
        v77 = v76;
      }
      if (v77 == v76)
        v78 = 0;
      else
        v78 = v77;
      v79 = v9[4];
      if (v18 < (v9[5] - v79) >> 3
        && (v80 = *(_QWORD *)(v79 + 8 * v18)) != 0
        && (v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(v16) & 0x7F)),
            v83 = v9[7],
            v82 = v9[8],
            v81 < (v82 - v83) >> 3)
        && (v84 = v83 + 8 * v81, v84 != v82)
        && *(_DWORD *)(v84 + 4) == (_DWORD)v17)
      {
        v85 = v9[11];
        v86 = v9[10] + (v81 << 7);
      }
      else
      {
        v85 = v9[11];
        v86 = v85;
      }
      if (v86 == v85)
        v87 = 0;
      else
        v87 = v86;
      v88 = v10[4];
      if (v18 < (v10[5] - v88) >> 3
        && (v89 = *(_QWORD *)(v88 + 8 * v18)) != 0
        && (v90 = *(unsigned __int16 *)(v89 + 2 * (HIDWORD(v16) & 0x7F)),
            v92 = v10[7],
            v91 = v10[8],
            v90 < (v91 - v92) >> 3)
        && (v93 = v92 + 8 * v90, v93 != v91)
        && *(_DWORD *)(v93 + 4) == (_DWORD)v17)
      {
        v94 = v10[11];
        v95 = v10[10] + 8 * v90;
      }
      else
      {
        v94 = v10[11];
        v95 = v94;
      }
      if (v95 == v94)
        v95 = 0;
      v96 = v13[4];
      if (v18 < (v13[5] - v96) >> 3
        && (v97 = *(_QWORD *)(v96 + 8 * v18)) != 0
        && (v98 = *(unsigned __int16 *)(v97 + 2 * (HIDWORD(v16) & 0x7F)),
            v100 = v13[7],
            v99 = v13[8],
            v98 < (v99 - v100) >> 3)
        && (v101 = v100 + 8 * v98, v101 != v99)
        && *(_DWORD *)(v101 + 4) == (_DWORD)v17)
      {
        v102 = v13[11];
        v103 = v13[10] + 40 * v98;
      }
      else
      {
        v102 = v13[11];
        v103 = v102;
      }
      v104 = *(_QWORD *)(a2 + 24);
      if (!v104)
        break;
      v105 = v12;
      if (v103 == v102)
        v106 = 0;
      else
        v106 = v103;
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v104 + 48))(v104, v28, v38, v48, v58, v68, v78, v87, v95, v106);
      v107 = *(unint64_t **)(v108 + 32);
      while (1)
      {
        v116 = ++v14;
        if (v14 == v107)
          break;
        if (gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v115))
          goto LABEL_4;
      }
      v14 = v107;
LABEL_4:
      v12 = v105;
      result = v109;
      v4 = v110;
      if (v111 == v14)
        goto LABEL_112;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[9];
  uint64_t v4[12];
  uint64_t v5[12];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3[0] = gdc::Registry::storage<md::ls::RegisterHandle>(v1);
  v3[1] = gdc::Registry::storage<md::ls::EnteringView>(v1);
  v3[2] = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  v3[3] = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>(v1);
  v3[4] = gdc::Registry::storage<md::ls::MapDataTypeV>(v1);
  v3[5] = gdc::Registry::storage<md::ls::AssociationTileHandle>(v1);
  v3[6] = gdc::Registry::storage<md::ls::GlobeMatrixData>(v1);
  v3[7] = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  v3[8] = gdc::Registry::storage<md::ls::FlyoverOctileKey>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::begin(v5, v3);
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::end(v4, v3);
  return v4[11] == v5[11];
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  if (*a2)
    v12 = *a2 + 32;
  else
    v12 = 0;
  if (v4)
    v13 = v4 + 32;
  else
    v13 = 0;
  if (v5)
    v14 = v5 + 32;
  else
    v14 = 0;
  if (v6)
    v15 = v6 + 32;
  else
    v15 = 0;
  if (v7)
    v16 = v7 + 32;
  else
    v16 = 0;
  if (v8)
    v17 = v8 + 32;
  else
    v17 = 0;
  if (v9)
    v18 = v9 + 32;
  else
    v18 = 0;
  if (v10)
    result = v10 + 32;
  else
    result = 0;
  v20 = v11 + 32;
  if (!v11)
    v20 = 0;
  if (*(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24) < *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    v12 = v13;
  if (*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) < *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    v12 = v14;
  if (*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24) < *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    v12 = v15;
  if (*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24) < *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    v12 = v16;
  if (*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24) < *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    v12 = v17;
  if (*(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24) < *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    v12 = v18;
  if (*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24) >= *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24))
    result = v12;
  if (*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24) >= *(_QWORD *)(result + 32) - *(_QWORD *)(result + 24))
    v20 = result;
  *a1 = v20;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  v22 = *(_QWORD *)(v20 + 24);
  v21 = *(_QWORD *)(v20 + 32);
  a1[11] = v22;
  if (v21 != v22)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v23 = v22 + 8;
      do
      {
        a1[11] = v23;
        if (v23 == v21)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v23 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t *gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::end(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  v9 = a2[7];
  v10 = a2[8];
  if (*a2)
    v11 = *a2 + 32;
  else
    v11 = 0;
  if (v3)
    v12 = v3 + 32;
  else
    v12 = 0;
  if (v4)
    v13 = v4 + 32;
  else
    v13 = 0;
  if (v5)
    v14 = v5 + 32;
  else
    v14 = 0;
  if (v6)
    v15 = v6 + 32;
  else
    v15 = 0;
  if (v7)
    v16 = v7 + 32;
  else
    v16 = 0;
  if (v8)
    v17 = v8 + 32;
  else
    v17 = 0;
  if (v9)
    v18 = v9 + 32;
  else
    v18 = 0;
  v19 = v10 + 32;
  if (!v10)
    v19 = 0;
  if (*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v12;
  if (*(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v13;
  if (*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v14;
  if (*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v15;
  if (*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v16;
  if (*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v17;
  if (*(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24) >= *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v18 = v11;
  if (*(_QWORD *)(v19 + 32) - *(_QWORD *)(v19 + 24) >= *(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24))
    v19 = v18;
  v20 = *(_QWORD *)(v19 + 32);
  *result = v19;
  result[1] = v2;
  result[2] = v3;
  result[3] = v4;
  result[4] = v5;
  result[5] = v6;
  result[6] = v7;
  result[7] = v8;
  result[8] = v9;
  result[9] = v10;
  result[11] = v20;
  return result;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[11] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v40 = (_QWORD *)a1[5];
  v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3)
    return 0;
  v42 = *(_QWORD *)(v41 + 8 * v3);
  if (!v42)
    return 0;
  v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  v45 = v40[7];
  v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3)
    return 0;
  v46 = 0;
  v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != (_DWORD)v2)
    return v46;
  v48 = (_QWORD *)a1[6];
  v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3)
    return 0;
  v50 = *(_QWORD *)(v49 + 8 * v3);
  if (!v50)
    return 0;
  v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  v53 = v48[7];
  v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3)
    return 0;
  v46 = 0;
  v54 = v53 + 8 * v51;
  if (v54 == v52 || *(_DWORD *)(v54 + 4) != (_DWORD)v2)
    return v46;
  v55 = (_QWORD *)a1[7];
  v56 = v55[4];
  if (v3 >= (v55[5] - v56) >> 3)
    return 0;
  v57 = *(_QWORD *)(v56 + 8 * v3);
  if (!v57)
    return 0;
  v58 = *(unsigned __int16 *)(v57 + 2 * v6);
  v60 = v55[7];
  v59 = v55[8];
  if (v58 >= (v59 - v60) >> 3)
    return 0;
  v46 = 0;
  v61 = v60 + 8 * v58;
  if (v61 == v59 || *(_DWORD *)(v61 + 4) != (_DWORD)v2)
    return v46;
  v62 = (_QWORD *)a1[8];
  v63 = v62[4];
  if (v3 >= (v62[5] - v63) >> 3)
    return 0;
  v64 = *(_QWORD *)(v63 + 8 * v3);
  if (!v64)
    return 0;
  v65 = *(unsigned __int16 *)(v64 + 2 * v6);
  v67 = v62[7];
  v66 = v62[8];
  if (v65 >= (v66 - v67) >> 3)
    return 0;
  v46 = 0;
  v68 = v67 + 8 * v65;
  if (v68 != v66 && *(_DWORD *)(v68 + 4) == (_DWORD)v2)
  {
    v69 = (_QWORD *)a1[9];
    v70 = v69[4];
    if (v3 < (v69[5] - v70) >> 3 && (v71 = *(_QWORD *)(v70 + 8 * v3)) != 0)
    {
      v72 = *(unsigned __int16 *)(v71 + 2 * v6);
      v74 = v69[7];
      v73 = v69[8];
      if (v72 < (v73 - v74) >> 3)
      {
        v75 = v74 + 8 * v72;
        if (*(_DWORD *)(v75 + 4) == (_DWORD)v2)
          v76 = v75;
        else
          v76 = v69[8];
        return v76 != v73;
      }
    }
    else
    {
      v73 = v69[8];
    }
    v76 = v73;
    return v76 != v73;
  }
  return v46;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286B78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286B78;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286BC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286BC0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int128 v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  __int128 v155;
  unint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x1B0uLL);
  a1[2] = (char *)(v2 + 54);
  *v2 = 0x41650A8095FBA956;
  v2[1] = "md::ls::RegisterHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4630;
  v2[4] = "md::ls::EnteringView]";
  v2[5] = 20;
  v2[6] = 0x695C99F828CA9E84;
  v2[7] = "md::ls::BaseMapTileHandle]";
  v2[8] = 25;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 54)
  {
    *(_QWORD *)v3 = 0x24B7D588576BB14ELL;
    v2[10] = "md::ls::AssociationTileHandle]";
    v2[11] = 29;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  if (0x5555555555555556 * (((char *)(v2 + 54) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 54) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 54) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x24B7D588576BB14ELL;
  *((_QWORD *)v10 + 1) = "md::ls::AssociationTileHandle]";
  *((_QWORD *)v10 + 2) = 29;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xC0EF30C6D6B08313;
    *((_QWORD *)v4 + 1) = "md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>]";
    *((_QWORD *)v4 + 2) = 56;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xC0EF30C6D6B08313;
  *((_QWORD *)v21 + 1) = "md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>]";
  *((_QWORD *)v21 + 2) = 56;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x6CC93B0E0603EFDCLL;
    *((_QWORD *)v14 + 1) = "md::ls::TransferStyleAttributeRasterSet]";
    *((_QWORD *)v14 + 2) = 39;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x6CC93B0E0603EFDCLL;
  *((_QWORD *)v32 + 1) = "md::ls::TransferStyleAttributeRasterSet]";
  *((_QWORD *)v32 + 2) = 39;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xE2FCA37BA4379744;
    *((_QWORD *)v25 + 1) = "md::ls::TileUnitsPerMeter]";
    *((_QWORD *)v25 + 2) = 25;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xE2FCA37BA4379744;
  *((_QWORD *)v43 + 1) = "md::ls::TileUnitsPerMeter]";
  *((_QWORD *)v43 + 2) = 25;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x52DA3EA752368C9DLL;
    *((_QWORD *)v36 + 1) = "md::ls::MapDataTypeV]";
    *((_QWORD *)v36 + 2) = 20;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x52DA3EA752368C9DLL;
  *((_QWORD *)v54 + 1) = "md::ls::MapDataTypeV]";
  *((_QWORD *)v54 + 2) = 20;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0xCAC3230B44CECEB9;
    *((_QWORD *)v47 + 1) = "md::ls::TileClippingConstantDataHandle]";
    *((_QWORD *)v47 + 2) = 38;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0xCAC3230B44CECEB9;
  *((_QWORD *)v65 + 1) = "md::ls::TileClippingConstantDataHandle]";
  *((_QWORD *)v65 + 2) = 38;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x414BF8D9069621AELL;
    *((_QWORD *)v58 + 1) = "md::ls::TileViewConstantDataHandle]";
    *((_QWORD *)v58 + 2) = 34;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v75 = (char *)operator new(24 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x414BF8D9069621AELL;
  *((_QWORD *)v76 + 1) = "md::ls::TileViewConstantDataHandle]";
  *((_QWORD *)v76 + 2) = 34;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
  v79 = (unint64_t)a1[2];
  if ((unint64_t)v69 < v79)
  {
    *(_QWORD *)v69 = 0xBCC33905201D8160;
    *((_QWORD *)v69 + 1) = "md::ls::TileMatrix]";
    *((_QWORD *)v69 + 2) = 18;
    v80 = v69 + 24;
    goto LABEL_145;
  }
  v81 = *a1;
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - *a1) >> 3);
  v83 = v82 + 1;
  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v81) >> 3);
  if (2 * v84 > v83)
    v83 = 2 * v84;
  if (v84 >= 0x555555555555555)
    v85 = 0xAAAAAAAAAAAAAAALL;
  else
    v85 = v83;
  if (v85)
  {
    if (v85 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v86 = (char *)operator new(24 * v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = &v86[24 * v82];
  v88 = &v86[24 * v85];
  *(_QWORD *)v87 = 0xBCC33905201D8160;
  *((_QWORD *)v87 + 1) = "md::ls::TileMatrix]";
  *((_QWORD *)v87 + 2) = 18;
  v80 = v87 + 24;
  if (v69 == v81)
  {
    *a1 = v87;
    a1[1] = v80;
    a1[2] = v88;
LABEL_144:
    operator delete(v69);
    goto LABEL_145;
  }
  do
  {
    v89 = *(_OWORD *)(v69 - 24);
    *((_QWORD *)v87 - 1) = *((_QWORD *)v69 - 1);
    *(_OWORD *)(v87 - 24) = v89;
    v87 -= 24;
    v69 -= 24;
  }
  while (v69 != v81);
  v69 = *a1;
  *a1 = v87;
  a1[1] = v80;
  a1[2] = v88;
  if (v69)
    goto LABEL_144;
LABEL_145:
  a1[1] = v80;
  v90 = (unint64_t)a1[2];
  if ((unint64_t)v80 < v90)
  {
    *(_QWORD *)v80 = 0xCF1A54FDD9A1F93FLL;
    *((_QWORD *)v80 + 1) = "md::ls::TileRenderableDataHandle]";
    *((_QWORD *)v80 + 2) = 32;
    v91 = v80 + 24;
    goto LABEL_163;
  }
  v92 = *a1;
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v80 - *a1) >> 3);
  v94 = v93 + 1;
  if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 3);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v97 = (char *)operator new(24 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[24 * v93];
  v99 = &v97[24 * v96];
  *(_QWORD *)v98 = 0xCF1A54FDD9A1F93FLL;
  *((_QWORD *)v98 + 1) = "md::ls::TileRenderableDataHandle]";
  *((_QWORD *)v98 + 2) = 32;
  v91 = v98 + 24;
  if (v80 == v92)
  {
    *a1 = v98;
    a1[1] = v91;
    a1[2] = v99;
LABEL_162:
    operator delete(v80);
    goto LABEL_163;
  }
  do
  {
    v100 = *(_OWORD *)(v80 - 24);
    *((_QWORD *)v98 - 1) = *((_QWORD *)v80 - 1);
    *(_OWORD *)(v98 - 24) = v100;
    v98 -= 24;
    v80 -= 24;
  }
  while (v80 != v92);
  v80 = *a1;
  *a1 = v98;
  a1[1] = v91;
  a1[2] = v99;
  if (v80)
    goto LABEL_162;
LABEL_163:
  a1[1] = v91;
  v101 = (unint64_t)a1[2];
  if ((unint64_t)v91 < v101)
  {
    *(_QWORD *)v91 = 0x684A78DCF1B284C1;
    *((_QWORD *)v91 + 1) = "md::ls::RenderablesCount]";
    *((_QWORD *)v91 + 2) = 24;
    v102 = v91 + 24;
    goto LABEL_181;
  }
  v103 = *a1;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v91 - *a1) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v103) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v108 = (char *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[24 * v104];
  v110 = &v108[24 * v107];
  *(_QWORD *)v109 = 0x684A78DCF1B284C1;
  *((_QWORD *)v109 + 1) = "md::ls::RenderablesCount]";
  *((_QWORD *)v109 + 2) = 24;
  v102 = v109 + 24;
  if (v91 == v103)
  {
    *a1 = v109;
    a1[1] = v102;
    a1[2] = v110;
LABEL_180:
    operator delete(v91);
    goto LABEL_181;
  }
  do
  {
    v111 = *(_OWORD *)(v91 - 24);
    *((_QWORD *)v109 - 1) = *((_QWORD *)v91 - 1);
    *(_OWORD *)(v109 - 24) = v111;
    v109 -= 24;
    v91 -= 24;
  }
  while (v91 != v103);
  v91 = *a1;
  *a1 = v109;
  a1[1] = v102;
  a1[2] = v110;
  if (v91)
    goto LABEL_180;
LABEL_181:
  a1[1] = v102;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v102 < v112)
  {
    *(_QWORD *)v102 = 0xD270E8E58701C515;
    *((_QWORD *)v102 + 1) = "md::ls::TileTransformConstantDataHandle]";
    *((_QWORD *)v102 + 2) = 39;
    v113 = v102 + 24;
    goto LABEL_199;
  }
  v114 = *a1;
  v115 = 0xAAAAAAAAAAAAAAABLL * ((v102 - *a1) >> 3);
  v116 = v115 + 1;
  if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x555555555555555)
    v118 = 0xAAAAAAAAAAAAAAALL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v119 = (char *)operator new(24 * v118);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[24 * v115];
  v121 = &v119[24 * v118];
  *(_QWORD *)v120 = 0xD270E8E58701C515;
  *((_QWORD *)v120 + 1) = "md::ls::TileTransformConstantDataHandle]";
  *((_QWORD *)v120 + 2) = 39;
  v113 = v120 + 24;
  if (v102 == v114)
  {
    *a1 = v120;
    a1[1] = v113;
    a1[2] = v121;
LABEL_198:
    operator delete(v102);
    goto LABEL_199;
  }
  do
  {
    v122 = *(_OWORD *)(v102 - 24);
    *((_QWORD *)v120 - 1) = *((_QWORD *)v102 - 1);
    *(_OWORD *)(v120 - 24) = v122;
    v120 -= 24;
    v102 -= 24;
  }
  while (v102 != v114);
  v102 = *a1;
  *a1 = v120;
  a1[1] = v113;
  a1[2] = v121;
  if (v102)
    goto LABEL_198;
LABEL_199:
  a1[1] = v113;
  v123 = (unint64_t)a1[2];
  if ((unint64_t)v113 < v123)
  {
    *(_QWORD *)v113 = 0xF2296D6406C155CBLL;
    *((_QWORD *)v113 + 1) = "md::ls::TileShadowConstantDataHandle]";
    *((_QWORD *)v113 + 2) = 36;
    v124 = v113 + 24;
    goto LABEL_217;
  }
  v125 = *a1;
  v126 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a1) >> 3);
  v127 = v126 + 1;
  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v125) >> 3);
  if (2 * v128 > v127)
    v127 = 2 * v128;
  if (v128 >= 0x555555555555555)
    v129 = 0xAAAAAAAAAAAAAAALL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v130 = (char *)operator new(24 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = &v130[24 * v126];
  v132 = &v130[24 * v129];
  *(_QWORD *)v131 = 0xF2296D6406C155CBLL;
  *((_QWORD *)v131 + 1) = "md::ls::TileShadowConstantDataHandle]";
  *((_QWORD *)v131 + 2) = 36;
  v124 = v131 + 24;
  if (v113 == v125)
  {
    *a1 = v131;
    a1[1] = v124;
    a1[2] = v132;
LABEL_216:
    operator delete(v113);
    goto LABEL_217;
  }
  do
  {
    v133 = *(_OWORD *)(v113 - 24);
    *((_QWORD *)v131 - 1) = *((_QWORD *)v113 - 1);
    *(_OWORD *)(v131 - 24) = v133;
    v131 -= 24;
    v113 -= 24;
  }
  while (v113 != v125);
  v113 = *a1;
  *a1 = v131;
  a1[1] = v124;
  a1[2] = v132;
  if (v113)
    goto LABEL_216;
LABEL_217:
  a1[1] = v124;
  v134 = (unint64_t)a1[2];
  if ((unint64_t)v124 < v134)
  {
    *(_QWORD *)v124 = 0xB4E92DEB291A7B99;
    *((_QWORD *)v124 + 1) = "md::ls::TilePrepassShadowConstantDataHandle]";
    *((_QWORD *)v124 + 2) = 43;
    v135 = v124 + 24;
    goto LABEL_235;
  }
  v136 = *a1;
  v137 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *a1) >> 3);
  v138 = v137 + 1;
  if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 3);
  if (2 * v139 > v138)
    v138 = 2 * v139;
  if (v139 >= 0x555555555555555)
    v140 = 0xAAAAAAAAAAAAAAALL;
  else
    v140 = v138;
  if (v140)
  {
    if (v140 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v141 = (char *)operator new(24 * v140);
  }
  else
  {
    v141 = 0;
  }
  v142 = &v141[24 * v137];
  v143 = &v141[24 * v140];
  *(_QWORD *)v142 = 0xB4E92DEB291A7B99;
  *((_QWORD *)v142 + 1) = "md::ls::TilePrepassShadowConstantDataHandle]";
  *((_QWORD *)v142 + 2) = 43;
  v135 = v142 + 24;
  if (v124 == v136)
  {
    *a1 = v142;
    a1[1] = v135;
    a1[2] = v143;
LABEL_234:
    operator delete(v124);
    goto LABEL_235;
  }
  do
  {
    v144 = *(_OWORD *)(v124 - 24);
    *((_QWORD *)v142 - 1) = *((_QWORD *)v124 - 1);
    *(_OWORD *)(v142 - 24) = v144;
    v142 -= 24;
    v124 -= 24;
  }
  while (v124 != v136);
  v124 = *a1;
  *a1 = v142;
  a1[1] = v135;
  a1[2] = v143;
  if (v124)
    goto LABEL_234;
LABEL_235:
  a1[1] = v135;
  v145 = (unint64_t)a1[2];
  if ((unint64_t)v135 < v145)
  {
    *(_QWORD *)v135 = 0x33C39664142A0949;
    *((_QWORD *)v135 + 1) = "md::ls::TilePrepassConstantDataHandle]";
    *((_QWORD *)v135 + 2) = 37;
    v146 = v135 + 24;
    goto LABEL_253;
  }
  v147 = *a1;
  v148 = 0xAAAAAAAAAAAAAAABLL * ((v135 - *a1) >> 3);
  v149 = v148 + 1;
  if (v148 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_272;
  v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (_QWORD)v147) >> 3);
  if (2 * v150 > v149)
    v149 = 2 * v150;
  if (v150 >= 0x555555555555555)
    v151 = 0xAAAAAAAAAAAAAAALL;
  else
    v151 = v149;
  if (v151)
  {
    if (v151 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_273;
    v152 = (char *)operator new(24 * v151);
  }
  else
  {
    v152 = 0;
  }
  v153 = &v152[24 * v148];
  v154 = &v152[24 * v151];
  *(_QWORD *)v153 = 0x33C39664142A0949;
  *((_QWORD *)v153 + 1) = "md::ls::TilePrepassConstantDataHandle]";
  *((_QWORD *)v153 + 2) = 37;
  v146 = v153 + 24;
  if (v135 == v147)
  {
    *a1 = v153;
    a1[1] = v146;
    a1[2] = v154;
LABEL_252:
    operator delete(v135);
    goto LABEL_253;
  }
  do
  {
    v155 = *(_OWORD *)(v135 - 24);
    *((_QWORD *)v153 - 1) = *((_QWORD *)v135 - 1);
    *(_OWORD *)(v153 - 24) = v155;
    v153 -= 24;
    v135 -= 24;
  }
  while (v135 != v147);
  v135 = *a1;
  *a1 = v153;
  a1[1] = v146;
  a1[2] = v154;
  if (v135)
    goto LABEL_252;
LABEL_253:
  a1[1] = v146;
  v156 = (unint64_t)a1[2];
  if ((unint64_t)v146 < v156)
  {
    *(_QWORD *)v146 = 0x80A8239313E99C5FLL;
    *((_QWORD *)v146 + 1) = "md::ls::TileStyleCameraConstantDataHandle]";
    *((_QWORD *)v146 + 2) = 41;
    v157 = v146 + 24;
    goto LABEL_271;
  }
  v158 = *a1;
  v159 = 0xAAAAAAAAAAAAAAABLL * ((v146 - *a1) >> 3);
  v160 = v159 + 1;
  if (v159 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_272:
    abort();
  v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (_QWORD)v158) >> 3);
  if (2 * v161 > v160)
    v160 = 2 * v161;
  if (v161 >= 0x555555555555555)
    v162 = 0xAAAAAAAAAAAAAAALL;
  else
    v162 = v160;
  if (v162)
  {
    if (v162 <= 0xAAAAAAAAAAAAAAALL)
    {
      v163 = (char *)operator new(24 * v162);
      goto LABEL_265;
    }
LABEL_273:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v163 = 0;
LABEL_265:
  v164 = &v163[24 * v159];
  v165 = &v163[24 * v162];
  *(_QWORD *)v164 = 0x80A8239313E99C5FLL;
  *((_QWORD *)v164 + 1) = "md::ls::TileStyleCameraConstantDataHandle]";
  *((_QWORD *)v164 + 2) = 41;
  v157 = v164 + 24;
  if (v146 == v158)
  {
    *a1 = v164;
    a1[1] = v157;
    a1[2] = v165;
LABEL_270:
    operator delete(v146);
    goto LABEL_271;
  }
  do
  {
    v166 = *(_OWORD *)(v146 - 24);
    *((_QWORD *)v164 - 1) = *((_QWORD *)v146 - 1);
    *(_OWORD *)(v164 - 24) = v166;
    v164 -= 24;
    v146 -= 24;
  }
  while (v146 != v158);
  v146 = *a1;
  *a1 = v164;
  a1[1] = v157;
  a1[2] = v165;
  if (v146)
    goto LABEL_270;
LABEL_271:
  a1[1] = v157;
}

void sub_19F7463B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277E60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277E60;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  VKDebugSettings *v42;
  uint64_t *v43;
  int8x8_t v44;
  uint8x8_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  BOOL v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t result;
  BOOL v76;
  BOOL v77;
  int v78;
  float v79;
  uint64_t v80;
  _BYTE v81[6];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274C38;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42750E8;
  v5[1] = a2;
  v6 = *(uint64_t **)**v3;
  if (v6 != *(uint64_t **)(**v3 + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (**v9)(v9);
  v15 = *(_QWORD **)(v14 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_35;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0xF014CCE28176CA44;
    if (*(_QWORD *)&v16 <= 0xF014CCE28176CA44)
      v18 = 0xF014CCE28176CA44 % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0xF014CCE28176CA44;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_35;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_35;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0xF014CCE28176CA44)
      {
        if (v20[2] == 0xF014CCE28176CA44)
          goto LABEL_33;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_35;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v22 = v20[1];
    if (v22 == 0xF014CCE28176CA44)
      break;
    if (v22 >= *(_QWORD *)&v16)
      v22 %= *(_QWORD *)&v16;
    if (v22 != v18)
      goto LABEL_35;
LABEL_22:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_35;
  }
  if (v20[2] != 0xF014CCE28176CA44)
    goto LABEL_22;
LABEL_33:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) == 0xF014CCE28176CA44)
  {
    v25 = *(_QWORD *)(v24 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v25 = 0;
LABEL_36:
  v83 = 0;
  v84 = v25;
  v26 = **v3;
  v27 = *(_QWORD **)v26;
  v28 = *(_QWORD **)(v26 + 8);
  if (v27 != v28)
  {
    while (*v27 != 0x41D4E9297E100630)
    {
      v27 += 5;
      if (v27 == v28)
        goto LABEL_47;
    }
  }
  if (v27 == v28)
  {
LABEL_47:
    v30 = 0;
  }
  else
  {
    v30 = v27[3];
    v29 = (std::__shared_weak_count *)v27[4];
    if (v29)
    {
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v82 = 0;
  v83 = v30;
  v34 = **v3;
  v35 = *(_QWORD **)v34;
  v36 = *(_QWORD **)(v34 + 8);
  if (v35 != v36)
  {
    while (*v35 != 0x348A0B0E758C07C2)
    {
      v35 += 5;
      if (v35 == v36)
        goto LABEL_59;
    }
  }
  if (v35 == v36)
  {
LABEL_59:
    v38 = 0;
  }
  else
  {
    v38 = v35[3];
    v37 = (std::__shared_weak_count *)v35[4];
    if (v37)
    {
      v39 = (unint64_t *)&v37->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 - 1, v39));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v82 = v38;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v42 = (VKDebugSettings *)objc_claimAutoreleasedReturnValue();
  md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)v81, v42);

  v43 = *(uint64_t **)(v14 + 8);
  v44 = (int8x8_t)v43[1];
  if (!*(_QWORD *)&v44)
    goto LABEL_142;
  v45 = (uint8x8_t)vcnt_s8(v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    v46 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v44 <= 0x1AF456233693CD46uLL)
      v46 = 0x1AF456233693CD46uLL % *(_QWORD *)&v44;
  }
  else
  {
    v46 = (*(_QWORD *)&v44 - 1) & 0x1AF456233693CD46;
  }
  v47 = *v43;
  v48 = *(_QWORD **)(v47 + 8 * v46);
  if (!v48)
    goto LABEL_83;
  v49 = (_QWORD *)*v48;
  if (!v49)
    goto LABEL_83;
  if (v45.u32[0] < 2uLL)
  {
    while (1)
    {
      v51 = v49[1];
      if (v51 == 0x1AF456233693CD46)
      {
        if (v49[2] == 0x1AF456233693CD46)
          goto LABEL_81;
      }
      else if ((v51 & (*(_QWORD *)&v44 - 1)) != v46)
      {
        goto LABEL_83;
      }
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_83;
    }
  }
  while (1)
  {
    v50 = v49[1];
    if (v50 == 0x1AF456233693CD46)
      break;
    if (v50 >= *(_QWORD *)&v44)
      v50 %= *(_QWORD *)&v44;
    if (v50 != v46)
      goto LABEL_83;
LABEL_70:
    v49 = (_QWORD *)*v49;
    if (!v49)
      goto LABEL_83;
  }
  if (v49[2] != 0x1AF456233693CD46)
    goto LABEL_70;
LABEL_81:
  v52 = v49[5];
  if (*(_QWORD *)(v52 + 8) != 0x1AF456233693CD46)
  {
LABEL_83:
    v53 = 0;
    goto LABEL_84;
  }
  v53 = *(_QWORD *)(v52 + 32);
LABEL_84:
  v80 = v53;
  if (v45.u32[0] > 1uLL)
  {
    v54 = 0xD2404CDD1F9A6950;
    if (*(_QWORD *)&v44 <= 0xD2404CDD1F9A6950)
      v54 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v44;
  }
  else
  {
    v54 = (*(_QWORD *)&v44 - 1) & 0xD2404CDD1F9A6950;
  }
  v55 = *(_QWORD **)(v47 + 8 * v54);
  if (!v55)
    goto LABEL_142;
  v56 = (_QWORD *)*v55;
  if (!*v55)
    goto LABEL_142;
  v57 = *(_QWORD *)&v44 - 1;
  if (v45.u32[0] < 2uLL)
  {
    while (1)
    {
      v58 = v56[1];
      if (v58 == 0xD2404CDD1F9A6950)
      {
        if (v56[2] == 0xD2404CDD1F9A6950)
          goto LABEL_104;
      }
      else if ((v58 & v57) != v54)
      {
        goto LABEL_142;
      }
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_142;
    }
  }
  while (2)
  {
    v59 = v56[1];
    if (v59 != 0xD2404CDD1F9A6950)
    {
      if (v59 >= *(_QWORD *)&v44)
        v59 %= *(_QWORD *)&v44;
      if (v59 != v54)
        goto LABEL_142;
      goto LABEL_98;
    }
    if (v56[2] != 0xD2404CDD1F9A6950)
    {
LABEL_98:
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_142;
      continue;
    }
    break;
  }
LABEL_104:
  v60 = v56[5];
  if (*(_QWORD *)(v60 + 8) != 0xD2404CDD1F9A6950 || !*(_QWORD *)(v60 + 32))
    goto LABEL_142;
  if (v45.u32[0] > 1uLL)
  {
    v61 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v44 <= 0x8BD499FBD96FBB9ELL)
      v61 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v44;
  }
  else
  {
    v61 = v57 & 0x8BD499FBD96FBB9ELL;
  }
  v62 = *(_QWORD **)(v47 + 8 * v61);
  if (!v62)
    goto LABEL_128;
  v63 = (_QWORD *)*v62;
  if (!v63)
    goto LABEL_128;
  if (v45.u32[0] < 2uLL)
  {
    while (1)
    {
      v64 = v63[1];
      if (v64 == 0x8BD499FBD96FBB9ELL)
      {
        if (v63[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_126;
      }
      else if ((v64 & v57) != v61)
      {
        goto LABEL_128;
      }
      v63 = (_QWORD *)*v63;
      if (!v63)
        goto LABEL_128;
    }
  }
  while (2)
  {
    v65 = v63[1];
    if (v65 != 0x8BD499FBD96FBB9ELL)
    {
      if (v65 >= *(_QWORD *)&v44)
        v65 %= *(_QWORD *)&v44;
      if (v65 != v61)
        goto LABEL_128;
      goto LABEL_120;
    }
    if (v63[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_120:
      v63 = (_QWORD *)*v63;
      if (!v63)
        goto LABEL_128;
      continue;
    }
    break;
  }
LABEL_126:
  v66 = v63[5];
  if (*(_QWORD *)(v66 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v67 = *(_QWORD *)(v66 + 32);
    goto LABEL_129;
  }
LABEL_128:
  v67 = 0;
LABEL_129:
  v68 = *(float *)(v67 + 16);
  v78 = *(_DWORD *)(v67 + 20);
  v79 = v68;
  v77 = *(unsigned __int8 *)(v53 + 3776) - 1 < 3;
  v69 = v68 <= 0.01 && *(_BYTE *)(v67 + 3) != 0;
  v76 = v69;
  v70 = operator new(0x50uLL);
  *v70 = &off_1E427C030;
  v70[1] = &v83;
  v70[2] = &v84;
  v70[3] = &v76;
  v70[4] = &v78;
  v70[5] = &v79;
  v70[6] = &v77;
  v70[7] = v3;
  v70[8] = v81;
  v70[9] = &v82;
  v86 = v70;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v85);
  v71 = v86;
  if (v86 == v85)
  {
    v72 = 4;
    v71 = v85;
LABEL_136:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  else if (v86)
  {
    v72 = 5;
    goto LABEL_136;
  }
  v85[0] = &off_1E427C078;
  v85[1] = &v83;
  v85[2] = &v80;
  v86 = v85;
  (*(void (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v85);
  v73 = v86;
  if (v86 == v85)
  {
    v74 = 4;
    v73 = v85;
LABEL_141:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  else if (v86)
  {
    v74 = 5;
    goto LABEL_141;
  }
LABEL_142:
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F746C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v3);
  v6 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  v3 = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v1);
  v4 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

unint64_t *ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t *result;
  _QWORD *v186;
  _QWORD *v187;
  __int128 v188;
  _QWORD *v189;
  unint64_t *v190;
  __int128 v192;
  unint64_t *v193;
  __int128 v194;
  unint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204[14];
  unint64_t *v205;
  _OWORD v206[6];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD v212[10];

  gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::AssociationTileHandle,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>,md::ls::TileUnitsPerMeter,md::ls::MapDataTypeV,md::ls::TileViewConstantDataHandle,md::ls::TileMatrix,md::ls::TileRenderableDataHandle,md::ls::RenderablesCount,md::ls::TileTransformConstantDataHandle,md::ls::TransferStyleAttributeRasterSet,md::ls::TileClippingConstantDataHandle,md::ls::TileShadowConstantDataHandle,md::ls::TilePrepassShadowConstantDataHandle,md::ls::TilePrepassConstantDataHandle,md::ls::TileStyleCameraConstantDataHandle>((uint64_t *)v212, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v196 = v212[1];
  v198 = v212[0];
  v192 = v212[3];
  v194 = v212[2];
  v200 = v212[5];
  v201 = v212[4];
  v188 = v212[6];
  v203 = v212[7];
  v202 = v212[8];
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(v204, v212);
  v206[0] = v198;
  v206[1] = v196;
  v206[2] = v194;
  v206[3] = v192;
  v206[4] = v201;
  v206[5] = v200;
  v2 = *(unint64_t **)(gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(v206)
                            + 32);
  v3 = v205;
  v190 = v2;
  if (v2 == v205)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_203:
    *result = 0xFFFFFFFF00000000;
  }
  else
  {
    v4 = (_QWORD *)v201;
    v5 = (_QWORD *)v192;
    v6 = (_QWORD *)v188;
    v7 = (_QWORD *)v194;
    v8 = (_QWORD *)v196;
    v9 = (_QWORD *)v198;
    v193 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v187 = v12;
    v189 = v11;
    v186 = v10;
    while (1)
    {
      *v193 = *v3;
      v13 = *v3;
      v14 = HIDWORD(*v3);
      v15 = *v3 >> 39;
      v16 = v9[4];
      if (v15 >= (v9[5] - v16) >> 3)
        goto LABEL_12;
      v17 = *(_QWORD *)(v16 + 8 * v15);
      if (!v17)
        goto LABEL_12;
      v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
      v20 = v9[7];
      v19 = v9[8];
      if (v18 >= (v19 - v20) >> 3)
        goto LABEL_12;
      v21 = v20 + 8 * v18;
      if (v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14)
      {
        v23 = v9[11];
        v24 = v9[10] + 8 * v18;
      }
      else
      {
LABEL_12:
        v23 = v9[11];
        v24 = v23;
      }
      v25 = v24 == v23 ? 0 : v24;
      if ((v26 = *(_QWORD *)(*((_QWORD *)&v198 + 1) + 32),
            v15 < (*(_QWORD *)(*((_QWORD *)&v198 + 1) + 40) - v26) >> 3)
        && (v27 = *(_QWORD *)(v26 + 8 * v15)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F)),
            v30 = *(_QWORD *)(*((_QWORD *)&v198 + 1) + 56),
            v29 = *(_QWORD *)(*((_QWORD *)&v198 + 1) + 64),
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v14) : (v32 = 0), v32))
      {
        v33 = *(_QWORD *)(*((_QWORD *)&v198 + 1) + 88);
        v34 = *(_QWORD *)(*((_QWORD *)&v198 + 1) + 80) + v28;
      }
      else
      {
        v33 = *(_QWORD *)(*((_QWORD *)&v198 + 1) + 88);
        v34 = v33;
      }
      v35 = v34 == v33 ? 0 : v34;
      if ((v36 = v8[4], v15 < (v8[5] - v36) >> 3)
        && (v37 = *(_QWORD *)(v36 + 8 * v15)) != 0
        && (v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v13) & 0x7F)),
            v40 = v8[7],
            v39 = v8[8],
            v38 < (v39 - v40) >> 3)
        && ((v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == (_DWORD)v14) : (v42 = 0), v42))
      {
        v43 = v8[11];
        v44 = v8[10] + 8 * v38;
      }
      else
      {
        v43 = v8[11];
        v44 = v43;
      }
      v45 = v44 == v43 ? 0 : v44;
      if ((v46 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 32),
            v15 < (*(_QWORD *)(*((_QWORD *)&v196 + 1) + 40) - v46) >> 3)
        && (v47 = *(_QWORD *)(v46 + 8 * v15)) != 0
        && (v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v13) & 0x7F)),
            v50 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 56),
            v49 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 64),
            v48 < (v49 - v50) >> 3)
        && ((v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == (_DWORD)v14) : (v52 = 0), v52))
      {
        v53 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 88);
        v54 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 80) + 8 * v48;
      }
      else
      {
        v53 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 88);
        v54 = v53;
      }
      v55 = v54 == v53 ? 0 : v54;
      if ((v56 = v7[4], v15 < (v7[5] - v56) >> 3)
        && (v57 = *(_QWORD *)(v56 + 8 * v15)) != 0
        && (v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v13) & 0x7F)),
            v60 = v7[7],
            v59 = v7[8],
            v58 < (v59 - v60) >> 3)
        && ((v61 = v60 + 8 * v58, v61 != v59) ? (v62 = *(_DWORD *)(v61 + 4) == (_DWORD)v14) : (v62 = 0), v62))
      {
        v63 = v7[11];
        v64 = v7[10] + v58;
      }
      else
      {
        v63 = v7[11];
        v64 = v63;
      }
      v65 = v64 == v63 ? 0 : v64;
      v66 = v6[4];
      v199 = v45;
      v197 = v55;
      v195 = v65;
      if (v15 >= (v6[5] - v66) >> 3)
        goto LABEL_67;
      v67 = *(_QWORD *)(v66 + 8 * v15);
      if (!v67)
        goto LABEL_67;
      v68 = *(unsigned __int16 *)(v67 + 2 * (HIDWORD(v13) & 0x7F));
      v70 = v6[7];
      v69 = v6[8];
      if (v68 >= (v69 - v70) >> 3)
        goto LABEL_67;
      v71 = v70 + 8 * v68;
      if (v71 != v69 && *(_DWORD *)(v71 + 4) == (_DWORD)v14)
      {
        v73 = v6[11];
        v74 = v6[10] + 8 * v68;
      }
      else
      {
LABEL_67:
        v73 = v6[11];
        v74 = v73;
      }
      if (v74 == v73)
        v75 = 0;
      else
        v75 = v74;
      v76 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 32);
      if (v15 < (*(_QWORD *)(*((_QWORD *)&v194 + 1) + 40) - v76) >> 3
        && (v77 = *(_QWORD *)(v76 + 8 * v15)) != 0
        && (v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v13) & 0x7F)),
            v80 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 56),
            v79 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 64),
            v78 < (v79 - v80) >> 3)
        && (v81 = v80 + 8 * v78, v81 != v79)
        && *(_DWORD *)(v81 + 4) == (_DWORD)v14)
      {
        v82 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 88);
        v83 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 80) + 12 * v78;
      }
      else
      {
        v82 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 88);
        v83 = v82;
      }
      if (v83 == v82)
        v84 = 0;
      else
        v84 = v83;
      v85 = v5[4];
      if (v15 < (v5[5] - v85) >> 3
        && (v86 = *(_QWORD *)(v85 + 8 * v15)) != 0
        && (v87 = *(unsigned __int16 *)(v86 + 2 * (HIDWORD(v13) & 0x7F)),
            v89 = v5[7],
            v88 = v5[8],
            v87 < (v88 - v89) >> 3)
        && (v90 = v89 + 8 * v87, v90 != v88)
        && *(_DWORD *)(v90 + 4) == (_DWORD)v14)
      {
        v91 = v5[11];
        v92 = v5[10] + 2 * v87;
      }
      else
      {
        v91 = v5[11];
        v92 = v91;
      }
      if (v92 == v91)
        v93 = 0;
      else
        v93 = v92;
      v94 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 32);
      if (v15 < (*(_QWORD *)(*((_QWORD *)&v188 + 1) + 40) - v94) >> 3
        && (v95 = *(_QWORD *)(v94 + 8 * v15)) != 0
        && (v96 = *(unsigned __int16 *)(v95 + 2 * (HIDWORD(v13) & 0x7F)),
            v98 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 56),
            v97 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 64),
            v96 < (v97 - v98) >> 3)
        && (v99 = v98 + 8 * v96, v99 != v97)
        && *(_DWORD *)(v99 + 4) == (_DWORD)v14)
      {
        v100 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 88);
        v101 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 80) + 8 * v96;
      }
      else
      {
        v100 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 88);
        v101 = v100;
      }
      if (v101 == v100)
        v102 = 0;
      else
        v102 = v101;
      v103 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 32);
      if (v15 < (*(_QWORD *)(*((_QWORD *)&v192 + 1) + 40) - v103) >> 3
        && (v104 = *(_QWORD *)(v103 + 8 * v15)) != 0
        && (v105 = *(unsigned __int16 *)(v104 + 2 * (HIDWORD(v13) & 0x7F)),
            v107 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 56),
            v106 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 64),
            v105 < (v106 - v107) >> 3)
        && (v108 = v107 + 8 * v105, v108 != v106)
        && *(_DWORD *)(v108 + 4) == (_DWORD)v14)
      {
        v109 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 88);
        v110 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 80) + 8 * v105;
      }
      else
      {
        v109 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 88);
        v110 = v109;
      }
      if (v110 == v109)
        v111 = 0;
      else
        v111 = v110;
      v112 = v4[4];
      if (v15 < (v4[5] - v112) >> 3
        && (v113 = *(_QWORD *)(v112 + 8 * v15)) != 0
        && (v114 = *(unsigned __int16 *)(v113 + 2 * (HIDWORD(v13) & 0x7F)),
            v116 = v4[7],
            v115 = v4[8],
            v114 < (v115 - v116) >> 3)
        && (v117 = v116 + 8 * v114, v117 != v115)
        && *(_DWORD *)(v117 + 4) == (_DWORD)v14)
      {
        v118 = v4[11];
        v119 = v4[10] + 8 * v114;
      }
      else
      {
        v118 = v4[11];
        v119 = v118;
      }
      if (v119 == v118)
        v120 = 0;
      else
        v120 = v119;
      v121 = v10[4];
      if (v15 < (v10[5] - v121) >> 3
        && (v122 = *(_QWORD *)(v121 + 8 * v15)) != 0
        && (v123 = *(unsigned __int16 *)(v122 + 2 * (HIDWORD(v13) & 0x7F)),
            v125 = v10[7],
            v124 = v10[8],
            v123 < (v124 - v125) >> 3)
        && (v126 = v125 + 8 * v123, v126 != v124)
        && *(_DWORD *)(v126 + 4) == (_DWORD)v14)
      {
        v127 = v10[11];
        v128 = v10[10] + 8 * v123;
      }
      else
      {
        v127 = v10[11];
        v128 = v127;
      }
      if (v128 == v127)
        v129 = 0;
      else
        v129 = v128;
      v130 = v12[4];
      if (v15 < (v12[5] - v130) >> 3
        && (v131 = *(_QWORD *)(v130 + 8 * v15)) != 0
        && (v132 = *(unsigned __int16 *)(v131 + 2 * (HIDWORD(v13) & 0x7F)),
            v133 = v12[7],
            v134 = v12[8],
            v132 < (v134 - v133) >> 3)
        && (v135 = v133 + 8 * v132, v135 != v134)
        && *(_DWORD *)(v135 + 4) == (_DWORD)v14)
      {
        v136 = v12[11];
        v137 = v12[10] + 32 * v132;
      }
      else
      {
        v136 = v12[11];
        v137 = v136;
      }
      if (v137 == v136)
        v138 = 0;
      else
        v138 = v137;
      v139 = v11[4];
      if (v15 < (v11[5] - v139) >> 3
        && (v140 = *(_QWORD *)(v139 + 8 * v15)) != 0
        && (v141 = *(unsigned __int16 *)(v140 + 2 * (HIDWORD(v13) & 0x7F)),
            v143 = v11[7],
            v142 = v11[8],
            v141 < (v142 - v143) >> 3)
        && (v144 = v143 + 8 * v141, v144 != v142)
        && *(_DWORD *)(v144 + 4) == (_DWORD)v14)
      {
        v145 = v11[11];
        v146 = v11[10] + 8 * v141;
      }
      else
      {
        v145 = v11[11];
        v146 = v145;
      }
      if (v146 == v145)
        v147 = 0;
      else
        v147 = v146;
      v148 = *(_QWORD *)(v203 + 32);
      if (v15 < (*(_QWORD *)(v203 + 40) - v148) >> 3
        && (v149 = *(_QWORD *)(v148 + 8 * v15)) != 0
        && (v150 = *(unsigned __int16 *)(v149 + 2 * (HIDWORD(v13) & 0x7F)),
            v152 = *(_QWORD *)(v203 + 56),
            v151 = *(_QWORD *)(v203 + 64),
            v150 < (v151 - v152) >> 3)
        && (v153 = v152 + 8 * v150, v153 != v151)
        && *(_DWORD *)(v153 + 4) == (_DWORD)v14)
      {
        v154 = *(_QWORD *)(v203 + 88);
        v155 = *(_QWORD *)(v203 + 80) + 8 * v150;
      }
      else
      {
        v154 = *(_QWORD *)(v203 + 88);
        v155 = v154;
      }
      if (v155 == v154)
        v156 = 0;
      else
        v156 = v155;
      v157 = *(_QWORD *)(*((_QWORD *)&v203 + 1) + 32);
      if (v15 < (*(_QWORD *)(*((_QWORD *)&v203 + 1) + 40) - v157) >> 3
        && (v158 = *(_QWORD *)(v157 + 8 * v15)) != 0
        && (v159 = *(unsigned __int16 *)(v158 + 2 * (HIDWORD(v13) & 0x7F)),
            v161 = *(_QWORD *)(*((_QWORD *)&v203 + 1) + 56),
            v160 = *(_QWORD *)(*((_QWORD *)&v203 + 1) + 64),
            v159 < (v160 - v161) >> 3)
        && (v162 = v161 + 8 * v159, v162 != v160)
        && *(_DWORD *)(v162 + 4) == (_DWORD)v14)
      {
        v163 = *(_QWORD *)(*((_QWORD *)&v203 + 1) + 88);
        v164 = *(_QWORD *)(*((_QWORD *)&v203 + 1) + 80) + 8 * v159;
      }
      else
      {
        v163 = *(_QWORD *)(*((_QWORD *)&v203 + 1) + 88);
        v164 = v163;
      }
      if (v164 == v163)
        v165 = 0;
      else
        v165 = v164;
      v166 = *(_QWORD *)(v202 + 32);
      if (v15 < (*(_QWORD *)(v202 + 40) - v166) >> 3
        && (v167 = *(_QWORD *)(v166 + 8 * v15)) != 0
        && (v168 = *(unsigned __int16 *)(v167 + 2 * (HIDWORD(v13) & 0x7F)),
            v169 = *(_QWORD *)(v202 + 56),
            v170 = *(_QWORD *)(v202 + 64),
            v168 < (v170 - v169) >> 3)
        && (v171 = v169 + 8 * v168, v171 != v170)
        && *(_DWORD *)(v171 + 4) == (_DWORD)v14)
      {
        v172 = *(_QWORD *)(v202 + 88);
        v173 = *(_QWORD *)(v202 + 80) + 8 * v168;
      }
      else
      {
        v172 = *(_QWORD *)(v202 + 88);
        v173 = v172;
      }
      if (v173 == v172)
        v173 = 0;
      v174 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 32);
      if (v15 < (*(_QWORD *)(*((_QWORD *)&v202 + 1) + 40) - v174) >> 3
        && (v175 = *(_QWORD *)(v174 + 8 * v15)) != 0
        && (v176 = *(unsigned __int16 *)(v175 + 2 * (HIDWORD(v13) & 0x7F)),
            v177 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 56),
            v178 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 64),
            v176 < (v178 - v177) >> 3)
        && (v179 = v177 + 8 * v176, v179 != v178)
        && *(_DWORD *)(v179 + 4) == (_DWORD)v14)
      {
        v180 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 88);
        v181 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 80) + 8 * v176;
      }
      else
      {
        v180 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 88);
        v181 = v180;
      }
      v182 = v181 == v180 ? 0 : v181;
      *(_QWORD *)&v206[0] = v75;
      v210 = v156;
      v211 = v102;
      v209 = v165;
      v208 = v173;
      v207 = v182;
      v183 = *(_QWORD *)(a2 + 24);
      if (!v183)
        break;
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, _OWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v183 + 48))(v183, v25, v35, v199, v197, v195, v206, v84, v93, &v211, v111, v120, v129, v138, v147, &v210, &v209, &v208, &v207);
      v184 = *(unint64_t **)(v204[0] + 32);
      while (1)
      {
        v205 = ++v3;
        if (v3 == v184)
          break;
        if (gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(v204))
          goto LABEL_4;
      }
      v3 = v184;
LABEL_4:
      v12 = v187;
      v11 = v189;
      v4 = (_QWORD *)v201;
      v10 = v186;
      if (v190 == v3)
      {
        result = v193;
        goto LABEL_203;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9[15];
  _OWORD v10[6];
  _OWORD v11[9];

  gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::AssociationTileHandle,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>,md::ls::TileUnitsPerMeter,md::ls::MapDataTypeV,md::ls::TileViewConstantDataHandle,md::ls::TileMatrix,md::ls::TileRenderableDataHandle,md::ls::RenderablesCount,md::ls::TileTransformConstantDataHandle,md::ls::TransferStyleAttributeRasterSet,md::ls::TileClippingConstantDataHandle,md::ls::TileShadowConstantDataHandle,md::ls::TilePrepassShadowConstantDataHandle,md::ls::TilePrepassConstantDataHandle,md::ls::TileStyleCameraConstantDataHandle>((uint64_t *)v11, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v7 = v11[1];
  v8 = v11[0];
  v5 = v11[3];
  v6 = v11[2];
  v3 = v11[5];
  v4 = v11[4];
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(v9, v11);
  v10[0] = v8;
  v10[1] = v7;
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = v4;
  v10[5] = v3;
  v1 = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(v10);
  return *(_QWORD *)(v1 + 32) == v9[14];
}

uint64_t gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::AssociationTileHandle,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>,md::ls::TileUnitsPerMeter,md::ls::MapDataTypeV,md::ls::TileViewConstantDataHandle,md::ls::TileMatrix,md::ls::TileRenderableDataHandle,md::ls::RenderablesCount,md::ls::TileTransformConstantDataHandle,md::ls::TransferStyleAttributeRasterSet,md::ls::TileClippingConstantDataHandle,md::ls::TileShadowConstantDataHandle,md::ls::TilePrepassShadowConstantDataHandle,md::ls::TilePrepassConstantDataHandle,md::ls::TileStyleCameraConstantDataHandle>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = gdc::Registry::storage<md::ls::RegisterHandle>(a2);
  v20 = gdc::Registry::storage<md::ls::EnteringView>(a2);
  v19 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(a2);
  v18 = gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  v17 = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(a2);
  v16 = gdc::Registry::storage<md::ls::TileUnitsPerMeter>(a2);
  v15 = gdc::Registry::storage<md::ls::MapDataTypeV>(a2);
  v14 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(a2);
  v13 = gdc::Registry::storage<md::ls::TileMatrix>(a2);
  v4 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(a2);
  v5 = gdc::Registry::storage<md::ls::RenderablesCount>(a2);
  v6 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(a2);
  v7 = gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>(a2);
  v8 = gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(a2);
  v9 = gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(a2);
  v10 = gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(a2);
  v11 = gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(a2);
  result = gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(a2);
  *a1 = v21;
  a1[1] = v20;
  a1[2] = v19;
  a1[3] = v18;
  a1[4] = v17;
  a1[5] = v16;
  a1[6] = v15;
  a1[7] = v14;
  a1[8] = v13;
  a1[9] = v4;
  a1[10] = v5;
  a1[11] = v6;
  a1[12] = v7;
  a1[13] = v8;
  a1[14] = v9;
  a1[15] = v10;
  a1[16] = v11;
  a1[17] = result;
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[12];

  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v17 = a2[10];
  v18 = a2[9];
  v16 = a2[11];
  v19[0] = *a2;
  v3 = v19[0];
  v19[1] = v4;
  v19[2] = v5;
  v19[3] = v6;
  v19[4] = v7;
  v19[5] = v8;
  v19[6] = v9;
  v19[7] = v10;
  v19[8] = v11;
  v19[9] = v18;
  v19[10] = v17;
  v19[11] = v16;
  result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(v19);
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v18;
  a1[11] = v17;
  a1[12] = v16;
  v14 = *(_QWORD *)(result + 24);
  v13 = *(_QWORD *)(result + 32);
  a1[14] = v14;
  if (v13 != v14)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v15 = v14 + 8;
      do
      {
        a1[14] = v15;
        if (v15 == v13)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(a1);
        v15 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = a1[1];
  if (*a1)
    v2 = *a1 + 32;
  else
    v2 = 0;
  if (v1)
    v3 = v1 + 32;
  else
    v3 = 0;
  v4 = a1[2];
  v5 = a1[3];
  if (v4)
    v6 = v4 + 32;
  else
    v6 = 0;
  if (v5)
    v7 = v5 + 32;
  else
    v7 = 0;
  v8 = a1[4];
  v9 = a1[5];
  if (v8)
    v10 = v8 + 32;
  else
    v10 = 0;
  if (v9)
    v11 = v9 + 32;
  else
    v11 = 0;
  v12 = a1[6];
  v13 = a1[7];
  if (v12)
    v14 = v12 + 32;
  else
    v14 = 0;
  if (v13)
    v15 = v13 + 32;
  else
    v15 = 0;
  v16 = a1[8];
  v17 = a1[9];
  if (v16)
    v18 = v16 + 32;
  else
    v18 = 0;
  if (v17)
    v19 = v17 + 32;
  else
    v19 = 0;
  v21 = a1[10];
  v20 = a1[11];
  v22 = v21 + 32;
  if (!v21)
    v22 = 0;
  v23 = v20 + 32;
  if (!v20)
    v23 = 0;
  if (*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v3;
  if (*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v6;
  if (*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v7;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v10;
  if (*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24) >= *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v11 = v2;
  if (*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) >= *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v14 = v11;
  if (*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24) >= *(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24))
    v15 = v14;
  if (*(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24) >= *(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24))
    v18 = v15;
  if (*(_QWORD *)(v19 + 32) - *(_QWORD *)(v19 + 24) >= *(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24))
    v19 = v18;
  if (*(_QWORD *)(v22 + 32) - *(_QWORD *)(v22 + 24) >= *(_QWORD *)(v19 + 32) - *(_QWORD *)(v19 + 24))
    v22 = v19;
  if (*(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24) >= *(_QWORD *)(v22 + 32) - *(_QWORD *)(v22 + 24))
    return v22;
  else
    return v23;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BOOL8 result;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[14] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v81 = *(_DWORD *)(a1[14] + 4);
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v40 = (_QWORD *)a1[5];
  v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3)
    return 0;
  v42 = *(_QWORD *)(v41 + 8 * v3);
  if (!v42)
    return 0;
  v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  v46 = v40 + 7;
  v44 = v40[7];
  v45 = v46[1];
  if (v43 >= (v45 - v44) >> 3)
    return 0;
  result = 0;
  v48 = v44 + 8 * v43;
  if (v48 == v45 || *(_DWORD *)(v48 + 4) != v81)
    return result;
  v49 = (_QWORD *)a1[6];
  v50 = v49[4];
  if (v3 >= (v49[5] - v50) >> 3)
    return 0;
  v51 = *(_QWORD *)(v50 + 8 * v3);
  if (!v51)
    return 0;
  v52 = *(unsigned __int16 *)(v51 + 2 * v6);
  v55 = v49 + 7;
  v53 = v49[7];
  v54 = v55[1];
  if (v52 >= (v54 - v53) >> 3)
    return 0;
  result = 0;
  v56 = v53 + 8 * v52;
  if (v56 == v54 || *(_DWORD *)(v56 + 4) != v81)
    return result;
  v57 = (_QWORD *)a1[7];
  v58 = v57[4];
  if (v3 >= (v57[5] - v58) >> 3)
    return 0;
  v59 = *(_QWORD *)(v58 + 8 * v3);
  if (!v59)
    return 0;
  v60 = *(unsigned __int16 *)(v59 + 2 * v6);
  v63 = v57 + 7;
  v61 = v57[7];
  v62 = v63[1];
  if (v60 >= (v62 - v61) >> 3)
    return 0;
  result = 0;
  v64 = v61 + 8 * v60;
  if (v64 == v62 || *(_DWORD *)(v64 + 4) != v81)
    return result;
  v65 = (_QWORD *)a1[8];
  v66 = v65[4];
  if (v3 >= (v65[5] - v66) >> 3)
    return 0;
  v67 = *(_QWORD *)(v66 + 8 * v3);
  if (!v67)
    return 0;
  v68 = *(unsigned __int16 *)(v67 + 2 * v6);
  v71 = v65 + 7;
  v69 = v65[7];
  v70 = v71[1];
  if (v68 >= (v70 - v69) >> 3)
    return 0;
  result = 0;
  v72 = v69 + 8 * v68;
  if (v72 == v70 || *(_DWORD *)(v72 + 4) != v81)
    return result;
  v73 = (_QWORD *)a1[9];
  v74 = v73[4];
  if (v3 >= (v73[5] - v74) >> 3)
    return 0;
  v75 = *(_QWORD *)(v74 + 8 * v3);
  if (!v75)
    return 0;
  v76 = *(unsigned __int16 *)(v75 + 2 * v6);
  v79 = v73 + 7;
  v78 = v73[7];
  v77 = v79[1];
  if (v76 >= (v77 - v78) >> 3)
    return 0;
  result = 0;
  v80 = v78 + 8 * v76;
  if (v80 != v77 && *(_DWORD *)(v80 + 4) == v81)
  {
    result = geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((_QWORD *)(a1[10] + 32), v81);
    if (result)
    {
      result = geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((_QWORD *)(a1[11] + 32), v81);
      if (result)
        return geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((_QWORD *)(a1[12] + 32), v81);
    }
  }
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285A08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285A08;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285A50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285A50;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F7483D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42775A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42775A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  char v40;
  float v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275208;
  v4[1] = a2;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 != v7)
  {
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_12:
  v12 = *(uint64_t **)**v3;
  if (v12 != *(uint64_t **)(**v3 + 8) && *v12 != 0x22D45F5AAD4BF408)
  {
    v13 = v12 + 5;
    do
    {
      v14 = *v13;
      v13 += 5;
    }
    while (v14 != 0x22D45F5AAD4BF408);
    v12 = v13 - 5;
  }
  v15 = (uint64_t (***)(_QWORD))v12[3];
  v16 = (std::__shared_weak_count *)v12[4];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *(uint64_t **)((**v15)(v15) + 8);
  v21 = (int8x8_t)v20[1];
  v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = 0xE42D19AFCA302E68 % *(_QWORD *)&v21;
    if (*(_QWORD *)&v21 > 0xE42D19AFCA302E68)
      v23 = 0xE42D19AFCA302E68;
  }
  else
  {
    v23 = (*(_QWORD *)&v21 - 1) & 0xE42D19AFCA302E68;
  }
  v24 = *v20;
  v25 = *(_QWORD **)(v24 + 8 * v23);
  if (!v25)
    goto LABEL_45;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_45;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v26[1];
      if (v28 == 0xE42D19AFCA302E68)
      {
        if (v26[2] == 0xE42D19AFCA302E68)
          goto LABEL_43;
      }
      else if ((v28 & (*(_QWORD *)&v21 - 1)) != v23)
      {
        goto LABEL_45;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_45;
    }
  }
  while (1)
  {
    v27 = v26[1];
    if (v27 == 0xE42D19AFCA302E68)
      break;
    if (v27 >= *(_QWORD *)&v21)
      v27 %= *(_QWORD *)&v21;
    if (v27 != v23)
      goto LABEL_45;
LABEL_32:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_45;
  }
  if (v26[2] != 0xE42D19AFCA302E68)
    goto LABEL_32;
LABEL_43:
  v29 = v26[5];
  if (*(_QWORD *)(v29 + 8) == 0xE42D19AFCA302E68)
  {
    v30 = *(_QWORD *)(v29 + 32);
    goto LABEL_46;
  }
LABEL_45:
  v30 = 0;
LABEL_46:
  if (v22.u32[0] >= 2uLL)
  {
    v32 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v21 <= 0x1AF456233693CD46uLL)
      v32 = 0x1AF456233693CD46uLL % *(_QWORD *)&v21;
    v31 = *(_QWORD **)(v24 + 8 * v32);
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0x1AF456233693CD46);
    }
    while (v31[2] != 0x1AF456233693CD46);
  }
  else
  {
    v31 = *(_QWORD **)(v24 + 8 * ((*(_QWORD *)&v21 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0x1AF456233693CD46);
    }
    while (v31[2] != 0x1AF456233693CD46);
  }
  v41 = fmaxf(*(float *)(*(_QWORD *)(v31[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v31[5] + 32) + 3076), 1.0);
  v40 = 0;
  if (!v30)
    goto LABEL_72;
  v44[0] = &off_1E427BB68;
  v44[1] = &v40;
  v33 = v44;
  v45 = v44;
  v34 = *(_BYTE **)(v30 + 48);
  v35 = *(_BYTE **)(v30 + 56);
  if (v34 == v35)
  {
    v36 = 4;
LABEL_65:
    (*(void (**)(void))(*v33 + 8 * v36))();
    goto LABEL_66;
  }
  do
  {
    LOBYTE(v42[0]) = *v34;
    if (!v45)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v45 + 48))(v45, v42);
    ++v34;
  }
  while (v34 != v35);
  v33 = v45;
  if (v45 == v44)
  {
    v36 = 4;
    v33 = v44;
    goto LABEL_65;
  }
  if (v45)
  {
    v36 = 5;
    goto LABEL_65;
  }
LABEL_66:
  if (v40)
  {
    v42[0] = &off_1E427BBB0;
    v42[1] = v3;
    v42[2] = &v41;
    v43 = v42;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v42);
    v37 = v43;
    if (v43 == v42)
    {
      v38 = 4;
      v37 = v42;
LABEL_71:
      (*(void (**)(void))(*v37 + 8 * v38))();
    }
    else if (v43)
    {
      v38 = 5;
      goto LABEL_71;
    }
  }
LABEL_72:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7488C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::UniqueMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 24 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283B18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283B18;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x41650A8095FBA956;
  result[1] = "md::ls::RegisterHandle]";
  result[2] = 22;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283B60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283B60;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276630;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (***v26)(_QWORD);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  id v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  unint64_t v63;
  _WORD *v64;
  uint64_t *v67;
  int8x8_t v68;
  uint8x8_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int8x8_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *v91;
  double v92;
  void *v93;
  void *v94;
  float v95;
  double v97;
  double v98;
  double v99;
  int v100;
  float v102;
  float v103;
  float v104;
  float v105;
  float16x8_t *v110;
  uint8x8_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float16x8_t *v137;
  _QWORD *v140;
  int8x8_t v141;
  uint8x8_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  __float2 v152;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float16x8_t *v159;
  _QWORD *v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  float v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t result;
  float32x4_t v171;
  float32x4_t v172;
  uint64_t v173;
  uint64_t v174;
  float16x8_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;

  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275778;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0xD369A4D92C8FFE6CLL)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0xD369A4D92C8FFE6CLL);
    v5 = v6 - 5;
  }
  v8 = v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v13)
    goto LABEL_221;
  v14 = ***(uint64_t ****)(a1 + 8);
  if (v14 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v14 != 0xC94DD89A7B09BE9CLL)
  {
    v15 = v14 + 5;
    do
    {
      v16 = *v15;
      v15 += 5;
    }
    while (v16 != 0xC94DD89A7B09BE9CLL);
    v14 = v15 - 5;
  }
  v17 = v14[3];
  v18 = (std::__shared_weak_count *)v14[4];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v23 = ***(uint64_t ****)(a1 + 8);
  if (v23 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v23 != 0x22D45F5AAD4BF408)
  {
    v24 = v23 + 5;
    do
    {
      v25 = *v24;
      v24 += 5;
    }
    while (v25 != 0x22D45F5AAD4BF408);
    v23 = v24 - 5;
  }
  v26 = (uint64_t (***)(_QWORD))v23[3];
  v27 = (std::__shared_weak_count *)v23[4];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v31 = (**v26)(v26);
  v32 = v31;
  v33 = *(_QWORD **)(v31 + 8);
  v34 = v33[1];
  if ((v34 & (v34 - 1)) != 0)
  {
    v36 = 0xE42D19AFCA302E68;
    if (v34 <= 0xE42D19AFCA302E68)
      v36 = 0xE42D19AFCA302E68 % v34;
    v35 = *(_QWORD **)(*v33 + 8 * v36);
    do
    {
      do
        v35 = (_QWORD *)*v35;
      while (v35[1] != 0xE42D19AFCA302E68);
    }
    while (v35[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v35 = *(_QWORD **)(*v33 + 8 * ((v34 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v35 = (_QWORD *)*v35;
      while (v35[1] != 0xE42D19AFCA302E68);
    }
    while (v35[2] != 0xE42D19AFCA302E68);
  }
  _S0 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35[5] + 32) + 32) + 256);
  v38 = v22[183];
  v39 = *(_QWORD *)(v38 + 8);
  __asm { FCVT            H0, S0 }
  **(_WORD **)(v38 + 72) = _S0;
  if (*(_QWORD *)(v38 + 64) > v39)
    v39 = *(_QWORD *)(v38 + 64);
  *(_QWORD *)(v38 + 56) = 0;
  *(_QWORD *)(v38 + 64) = v39;
  v44 = *(id *)v31;
  v45 = (_QWORD *)objc_msgSend(v44, "finalRenderTarget");
  v46 = v45[42];
  if (v46)
  {
    v47 = *(_DWORD *)(v46 + 36);
    goto LABEL_60;
  }
  v48 = v45[11];
  if (v48)
  {
    v49 = v45 + 12;
  }
  else
  {
    v48 = v45[35];
    if (!v48)
    {
      v47 = 0;
      goto LABEL_60;
    }
    v49 = v45 + 36;
  }
  v50 = 80;
  if (*(_DWORD *)(v48 + 56) == 3)
    v50 = 196;
  v51 = *(_DWORD *)(v48 + v50);
  v52 = v51 >> *v49;
  if (v52 <= 1)
    v52 = 1;
  if (v51)
    v47 = v52;
  else
    v47 = 0;
LABEL_60:

  v53 = *(id *)v32;
  v54 = (_QWORD *)objc_msgSend(v53, "finalRenderTarget");
  v55 = v54[42];
  if (v55)
  {
    v56 = *(_DWORD *)(v55 + 40);
    goto LABEL_73;
  }
  v57 = v54[11];
  if (v57)
  {
    v58 = v54 + 12;
  }
  else
  {
    v57 = v54[35];
    if (!v57)
    {
      v56 = 0;
      goto LABEL_73;
    }
    v58 = v54 + 36;
  }
  v59 = 84;
  if (*(_DWORD *)(v57 + 56) == 3)
    v59 = 196;
  v60 = *(_DWORD *)(v57 + v59);
  v61 = v60 >> *v58;
  if (v61 <= 1)
    v61 = 1;
  if (v60)
    v56 = v61;
  else
    v56 = 0;
LABEL_73:

  v62 = *(_QWORD **)(v13 + 320);
  v63 = v62[1];
  v64 = (_WORD *)v62[9];
  _S0 = (float)v47;
  __asm { FCVT            H0, S0 }
  _S1 = (float)v56;
  __asm { FCVT            H1, S1 }
  *v64 = LOWORD(_S0);
  v64[1] = LOWORD(_S1);
  if (v62[8] > v63)
    v63 = v62[8];
  v62[7] = 0;
  v62[8] = v63;
  v67 = *(uint64_t **)(v32 + 8);
  v68 = (int8x8_t)v67[1];
  if (!*(_QWORD *)&v68)
    goto LABEL_221;
  v69 = (uint8x8_t)vcnt_s8(v68);
  v69.i16[0] = vaddlv_u8(v69);
  v70 = v69.u32[0];
  if (v69.u32[0] > 1uLL)
  {
    v71 = 0x7C7EC6C7C111B0D0;
    if (*(_QWORD *)&v68 <= 0x7C7EC6C7C111B0D0uLL)
      v71 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v68;
  }
  else
  {
    v71 = (*(_QWORD *)&v68 - 1) & 0x7C7EC6C7C111B0D0;
  }
  v72 = *(_QWORD **)(*v67 + 8 * v71);
  if (!v72)
    goto LABEL_133;
  v73 = (_QWORD *)*v72;
  if (!v73)
    goto LABEL_133;
  if (v69.u32[0] < 2uLL)
  {
    while (1)
    {
      v75 = v73[1];
      if (v75 == 0x7C7EC6C7C111B0D0)
      {
        if (v73[2] == 0x7C7EC6C7C111B0D0)
          goto LABEL_96;
      }
      else if ((v75 & (*(_QWORD *)&v68 - 1)) != v71)
      {
        goto LABEL_131;
      }
      v73 = (_QWORD *)*v73;
      if (!v73)
        goto LABEL_131;
    }
  }
  while (1)
  {
    v74 = v73[1];
    if (v74 == 0x7C7EC6C7C111B0D0)
      break;
    if (v74 >= *(_QWORD *)&v68)
      v74 %= *(_QWORD *)&v68;
    if (v74 != v71)
      goto LABEL_131;
LABEL_85:
    v73 = (_QWORD *)*v73;
    if (!v73)
      goto LABEL_131;
  }
  if (v73[2] != 0x7C7EC6C7C111B0D0)
    goto LABEL_85;
LABEL_96:
  v76 = v73[5];
  if (*(_QWORD *)(v76 + 8) != 0x7C7EC6C7C111B0D0)
    goto LABEL_131;
  v77 = *(float32x4_t **)(v76 + 32);
  if (!v77)
    goto LABEL_131;
  v171 = v77[1];
  v172 = *v77;
  v78 = v22[148];
  v175 = 0;
  v176 = 0;
  v173 = 0;
  v174 = 0;
  v79 = *(_QWORD *)(v78 + 8);
  v177 = v78;
  v178 = 0;
  v179 = v79;
  v180 = 1;
  if (v79)
    v80 = *(_QWORD *)(v78 + 72);
  else
    v80 = 0;
  v181 = v80;
  ggl::BufferMemory::operator=(&v173, (uint64_t)&v176);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v176);
  *v175 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v171), v172);
  v81 = *(_QWORD **)(v32 + 8);
  v82 = (int8x8_t)v81[1];
  if (!*(_QWORD *)&v82)
    goto LABEL_126;
  v83 = (uint8x8_t)vcnt_s8(v82);
  v83.i16[0] = vaddlv_u8(v83);
  if (v83.u32[0] > 1uLL)
  {
    v84 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v82 <= 0x1AF456233693CD46uLL)
      v84 = 0x1AF456233693CD46uLL % *(_QWORD *)&v82;
  }
  else
  {
    v84 = (*(_QWORD *)&v82 - 1) & 0x1AF456233693CD46;
  }
  v85 = *(_QWORD **)(*v81 + 8 * v84);
  if (!v85)
    goto LABEL_126;
  v86 = (_QWORD *)*v85;
  if (!v86)
    goto LABEL_126;
  if (v83.u32[0] < 2uLL)
  {
    v87 = *(_QWORD *)&v82 - 1;
    while (1)
    {
      v89 = v86[1];
      if (v89 == 0x1AF456233693CD46)
      {
        if (v86[2] == 0x1AF456233693CD46)
          goto LABEL_124;
      }
      else if ((v89 & v87) != v84)
      {
        goto LABEL_126;
      }
      v86 = (_QWORD *)*v86;
      if (!v86)
        goto LABEL_126;
    }
  }
  while (2)
  {
    v88 = v86[1];
    if (v88 != 0x1AF456233693CD46)
    {
      if (v88 >= *(_QWORD *)&v82)
        v88 %= *(_QWORD *)&v82;
      if (v88 != v84)
        goto LABEL_126;
      goto LABEL_113;
    }
    if (v86[2] != 0x1AF456233693CD46)
    {
LABEL_113:
      v86 = (_QWORD *)*v86;
      if (!v86)
        goto LABEL_126;
      continue;
    }
    break;
  }
LABEL_124:
  v90 = v86[5];
  if (*(_QWORD *)(v90 + 8) == 0x1AF456233693CD46)
  {
    v91 = *(double **)(v90 + 32);
    goto LABEL_127;
  }
LABEL_126:
  v91 = 0;
LABEL_127:
  v92 = v91[380];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", *(_OWORD *)&v171, *(_OWORD *)&v172, v173, v174);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = v93;
  v95 = v92;
  if (v95 < 1.0)
    _S9 = 1.0 - v95;
  else
    _S9 = 0.0;
  v97 = v91[62];
  v98 = v91[63];
  v99 = v91[64];
  objc_msgSend(v93, "daVinciHorizonGlowSharpness");
  _S8 = v100;
  objc_msgSend(v94, "daVinciHorizonGlowStrength");
  v102 = 6356752.31 / sqrt(v97 * v97 + v98 * v98 + v99 * v99);
  v103 = v91[122];
  v104 = v91[121];
  v105 = (float)((float)(1.0309 / v103) - (float)(1.0 / v104)) / (float)((float)(1.0 / v103) - (float)(1.0 / v104));
  _S4 = 1.0 / (float)(1.0 - v105);
  _S2 = v105 / (float)(1.0 - v105);
  _S3 = _S4 - _S2;
  _S1 = 1.0 - v102;
  __asm
  {
    FCVT            H4, S9
    FCVT            H3, S3
    FCVT            H2, S2
    FCVT            H1, S1
  }
  v110 = v175;
  v175[1].i16[0] = LOWORD(_S4);
  v110[1].i16[1] = LOWORD(_S3);
  v110[1].i16[2] = LOWORD(_S2);
  v110[1].i16[3] = LOWORD(_S1);
  __asm
  {
    FCVT            H1, S8
    FCVT            H0, S0
  }
  v110[1].i16[4] = LOWORD(_S1);
  v110[1].i16[5] = _S0;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v173);
  v67 = *(uint64_t **)(v32 + 8);
  v68 = (int8x8_t)v67[1];
LABEL_131:
  if (!*(_QWORD *)&v68)
    goto LABEL_221;
  v112 = (uint8x8_t)vcnt_s8(v68);
  v112.i16[0] = vaddlv_u8(v112);
  v70 = v112.u32[0];
LABEL_133:
  if (v70 > 1)
  {
    v113 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v68 <= 0x1AF456233693CD46uLL)
      v113 = 0x1AF456233693CD46uLL % *(_QWORD *)&v68;
  }
  else
  {
    v113 = (*(_QWORD *)&v68 - 1) & 0x1AF456233693CD46;
  }
  v114 = *v67;
  v115 = *(_QWORD **)(v114 + 8 * v113);
  if (!v115)
    goto LABEL_155;
  v116 = (_QWORD *)*v115;
  if (!v116)
    goto LABEL_155;
  if (v70 < 2)
  {
    while (1)
    {
      v118 = v116[1];
      if (v118 == 0x1AF456233693CD46)
      {
        if (v116[2] == 0x1AF456233693CD46)
          goto LABEL_153;
      }
      else if ((v118 & (*(_QWORD *)&v68 - 1)) != v113)
      {
        goto LABEL_155;
      }
      v116 = (_QWORD *)*v116;
      if (!v116)
        goto LABEL_155;
    }
  }
  while (2)
  {
    v117 = v116[1];
    if (v117 != 0x1AF456233693CD46)
    {
      if (v117 >= *(_QWORD *)&v68)
        v117 %= *(_QWORD *)&v68;
      if (v117 != v113)
        goto LABEL_155;
      goto LABEL_142;
    }
    if (v116[2] != 0x1AF456233693CD46)
    {
LABEL_142:
      v116 = (_QWORD *)*v116;
      if (!v116)
        goto LABEL_155;
      continue;
    }
    break;
  }
LABEL_153:
  v119 = v116[5];
  if (*(_QWORD *)(v119 + 8) == 0x1AF456233693CD46)
  {
    v120 = *(_QWORD *)(v119 + 32);
    goto LABEL_156;
  }
LABEL_155:
  v120 = 0;
LABEL_156:
  if (v70 > 1)
  {
    v121 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v68 <= 0x41E8D6E445F4145uLL)
      v121 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v68;
  }
  else
  {
    v121 = (*(_QWORD *)&v68 - 1) & 0x41E8D6E445F4145;
  }
  v122 = *(_QWORD **)(v114 + 8 * v121);
  if (!v122)
    goto LABEL_221;
  v123 = (_QWORD *)*v122;
  if (!v123)
    goto LABEL_221;
  if (v70 < 2)
  {
    v124 = *(_QWORD *)&v68 - 1;
    while (1)
    {
      v126 = v123[1];
      if (v126 == 0x41E8D6E445F4145)
      {
        if (v123[2] == 0x41E8D6E445F4145)
          goto LABEL_176;
      }
      else if ((v126 & v124) != v121)
      {
        goto LABEL_221;
      }
      v123 = (_QWORD *)*v123;
      if (!v123)
        goto LABEL_221;
    }
  }
  while (2)
  {
    v125 = v123[1];
    if (v125 != 0x41E8D6E445F4145)
    {
      if (v125 >= *(_QWORD *)&v68)
        v125 %= *(_QWORD *)&v68;
      if (v125 != v121)
        goto LABEL_221;
      goto LABEL_165;
    }
    if (v123[2] != 0x41E8D6E445F4145)
    {
LABEL_165:
      v123 = (_QWORD *)*v123;
      if (!v123)
        goto LABEL_221;
      continue;
    }
    break;
  }
LABEL_176:
  v127 = v123[5];
  if (*(_QWORD *)(v127 + 8) == 0x41E8D6E445F4145)
  {
    v128 = *(_QWORD *)(v127 + 32);
    if (v128)
    {
      v129 = *(double *)(v120 + 32);
      _S8 = v129 * 0.5;
      _S9 = v129 * 1.5;
      _S10 = *(_DWORD *)(v128 + 192);
      v133 = v22[166];
      v175 = 0;
      v176 = 0;
      v173 = 0;
      v174 = 0;
      v134 = *(_QWORD *)(v133 + 8);
      v177 = v133;
      v178 = 0;
      v179 = v134;
      v180 = 1;
      v135 = v134 ? *(_QWORD *)(v133 + 72) : 0;
      v181 = v135;
      ggl::BufferMemory::operator=(&v173, (uint64_t)&v176);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v176);
      __asm { FCVT            H0, S10 }
      v137 = v175;
      v175->i16[0] = _H0;
      v137->i16[1] = 15360;
      __asm { FCVT            H0, S8 }
      v137->i16[3] = _H0;
      __asm { FCVT            H0, S9 }
      v137->i16[2] = _H0;
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v173);
      v140 = *(_QWORD **)(v32 + 8);
      v141 = (int8x8_t)v140[1];
      if (v141)
      {
        v142 = (uint8x8_t)vcnt_s8(v141);
        v142.i16[0] = vaddlv_u8(v142);
        if (v142.u32[0] > 1uLL)
        {
          v143 = 0x41E8D6E445F4145;
          if (*(_QWORD *)&v141 <= 0x41E8D6E445F4145uLL)
            v143 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v141;
        }
        else
        {
          v143 = (*(_QWORD *)&v141 - 1) & 0x41E8D6E445F4145;
        }
        v144 = *(_QWORD **)(*v140 + 8 * v143);
        if (v144)
        {
          v145 = (_QWORD *)*v144;
          if (v145)
          {
            if (v142.u32[0] < 2uLL)
            {
              v146 = *(_QWORD *)&v141 - 1;
              while (1)
              {
                v148 = v145[1];
                if (v148 == 0x41E8D6E445F4145)
                {
                  if (v145[2] == 0x41E8D6E445F4145)
                    goto LABEL_202;
                }
                else if ((v148 & v146) != v143)
                {
                  goto LABEL_221;
                }
                v145 = (_QWORD *)*v145;
                if (!v145)
                  goto LABEL_221;
              }
            }
            do
            {
              v147 = v145[1];
              if (v147 == 0x41E8D6E445F4145)
              {
                if (v145[2] == 0x41E8D6E445F4145)
                {
LABEL_202:
                  v149 = v145[5];
                  if (*(_QWORD *)(v149 + 8) == 0x41E8D6E445F4145)
                  {
                    v150 = *(_QWORD *)(v149 + 32);
                    if (v150)
                    {
                      v151 = *(double *)(v150 + 80);
                      v152 = __sincosf_stret(v151);
                      _S8 = v152.__sinval;
                      _S9 = v152.__cosval;
                      v155 = v22[156];
                      v175 = 0;
                      v176 = 0;
                      v173 = 0;
                      v174 = 0;
                      v156 = *(_QWORD *)(v155 + 8);
                      v177 = v155;
                      v178 = 0;
                      v179 = v156;
                      v180 = 1;
                      if (v156)
                        v157 = *(_QWORD *)(v155 + 72);
                      else
                        v157 = 0;
                      v181 = v157;
                      ggl::BufferMemory::operator=(&v173, (uint64_t)&v176);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v176);
                      __asm { FCVT            H0, S9 }
                      v159 = v175;
                      __asm { FCVT            H1, S8 }
                      v175->i16[0] = _H0;
                      v159->i16[1] = _H1;
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v173);
                      v161 = *(_QWORD **)(v32 + 8);
                      v162 = v161[1];
                      if ((v162 & (v162 - 1)) != 0)
                      {
                        v164 = 0x8BD499FBD96FBB9ELL;
                        if (v162 <= 0x8BD499FBD96FBB9ELL)
                          v164 = 0x8BD499FBD96FBB9ELL % v162;
                        v163 = *(_QWORD **)(*v161 + 8 * v164);
                        do
                        {
                          do
                            v163 = (_QWORD *)*v163;
                          while (v163[1] != 0x8BD499FBD96FBB9ELL);
                        }
                        while (v163[2] != 0x8BD499FBD96FBB9ELL);
                      }
                      else
                      {
                        v163 = *(_QWORD **)(*v161 + 8 * ((v162 - 1) & 0x8BD499FBD96FBB9ELL));
                        do
                        {
                          do
                            v163 = (_QWORD *)*v163;
                          while (v163[1] != 0x8BD499FBD96FBB9ELL);
                        }
                        while (v163[2] != 0x8BD499FBD96FBB9ELL);
                      }
                      v165 = *(float *)(*(_QWORD *)(v163[5] + 32) + 8);
                      v166 = v22[158];
                      v175 = 0;
                      v176 = 0;
                      v173 = 0;
                      v174 = 0;
                      v167 = *(_QWORD *)(v166 + 8);
                      v177 = v166;
                      v178 = 0;
                      v179 = v167;
                      v180 = 1;
                      if (v167)
                        v168 = *(_QWORD *)(v166 + 72);
                      else
                        v168 = 0;
                      v181 = v168;
                      ggl::BufferMemory::operator=(&v173, (uint64_t)&v176);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v176);
                      _S0 = 1.0 - v165;
                      __asm { FCVT            H0, S0 }
                      v175->i16[0] = LOWORD(_S0);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v173);
                    }
                  }
                  break;
                }
              }
              else
              {
                if (v147 >= *(_QWORD *)&v141)
                  v147 %= *(_QWORD *)&v141;
                if (v147 != v143)
                  break;
              }
              v145 = (_QWORD *)*v145;
            }
            while (v145);
          }
        }
      }
    }
  }
LABEL_221:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F749B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v6;
  va_list va;

  va_start(va, a5);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RegisterHandle &>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::RegisterHandle &>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle &>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RegisterHandle>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 8 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::RegisterHandle &>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle &>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::RegisterHandle>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284EC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284EC8;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xE57C2F66048E40BDLL;
  v2[1] = "md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>]";
  *(_QWORD *)&result = 75;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4640;
  v2[4] = "md::ls::TileClippingConstantDataHandle]";
  v2[5] = 38;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284F10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284F10;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateClippingConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateClippingConstants>(md::ita::UpdateClippingConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xBCC33905201D8160;
  v2[1] = "md::ls::TileMatrix]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4650;
  v2[4] = "md::ls::LayerDataReference]";
  v2[5] = 26;
  v2[6] = 0x14C796C7576DD197;
  v2[7] = "md::ls::SupportsFragmentClip]";
  v2[8] = 28;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277008;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277008;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (***v40)(_QWORD);
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t **v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned __int8 v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  _QWORD *v120;
  BOOL v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::TileMatrix>(v3);
  v5 = gdc::Registry::storage<md::ls::LayerDataReference>(v3);
  v6 = gdc::Registry::storage<md::ls::SupportsFragmentClip>(v3);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>(v3);
  v8 = gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(v3);
  v9 = (_QWORD *)v8;
  v10 = v7 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v11 = v4;
  else
    v11 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v6;
  if (v7[8] - v7[7] >= *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v10 = (_QWORD *)(v11 + 32);
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v8 + 32);
  v12 = (_QWORD *)v10[3];
  v130 = v10;
  v131 = (_QWORD *)v4;
  v132 = (_QWORD *)v5;
  v133 = (_QWORD *)v6;
  v134 = v7;
  v135 = (_QWORD *)v8;
  v136 = v12;
  v129 = (_QWORD *)v10[4];
  if (v129 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v130))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v136 = v13;
      if (v13 == v129)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v130);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  v128 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v129 != v12)
  {
    v127 = v2;
    do
    {
      *v128 = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = v7[11];
        v27 = v7[10] + 8 * v21;
      }
      else
      {
        v26 = v7[11];
        v27 = v26;
      }
      if (v27 == v26)
        v28 = 0;
      else
        v28 = (uint64_t *)v27;
      v29 = v9[4];
      if (v18 < (v9[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v18)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v16) & 0x7F)),
            v33 = v9[7],
            v32 = v9[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v17) : (v35 = 0), v35))
      {
        v36 = (unint64_t *)(v9[10] + 8 * v31);
      }
      else
      {
        v36 = (unint64_t *)v9[11];
      }
      v37 = ***(uint64_t ****)(v2 + 8);
      if (v37 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v37 != 0x22D45F5AAD4BF408)
      {
        v38 = v37 + 5;
        do
        {
          v39 = *v38;
          v38 += 5;
        }
        while (v39 != 0x22D45F5AAD4BF408);
        v37 = v38 - 5;
      }
      v40 = (uint64_t (***)(_QWORD))v37[3];
      v41 = (std::__shared_weak_count *)v37[4];
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v45 = *(_QWORD **)((**v40)(v40) + 8);
      v46 = (int8x8_t)v45[1];
      if (!*(_QWORD *)&v46)
        goto LABEL_75;
      v47 = (uint8x8_t)vcnt_s8(v46);
      v47.i16[0] = vaddlv_u8(v47);
      if (v47.u32[0] > 1uLL)
      {
        v48 = 0x99BED48DEFBBD82BLL;
        if (*(_QWORD *)&v46 <= 0x99BED48DEFBBD82BLL)
          v48 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v46;
      }
      else
      {
        v48 = (*(_QWORD *)&v46 - 1) & 0x99BED48DEFBBD82BLL;
      }
      v49 = *(_QWORD **)(*v45 + 8 * v48);
      if (!v49)
        goto LABEL_75;
      v50 = (_QWORD *)*v49;
      if (!v50)
        goto LABEL_75;
      if (v47.u32[0] < 2uLL)
      {
        v51 = *(_QWORD *)&v46 - 1;
        while (1)
        {
          v53 = v50[1];
          if (v53 == 0x99BED48DEFBBD82BLL)
          {
            if (v50[2] == 0x99BED48DEFBBD82BLL)
              goto LABEL_73;
          }
          else if ((v53 & v51) != v48)
          {
            goto LABEL_75;
          }
          v50 = (_QWORD *)*v50;
          if (!v50)
            goto LABEL_75;
        }
      }
      while (1)
      {
        v52 = v50[1];
        if (v52 == 0x99BED48DEFBBD82BLL)
          break;
        if (v52 >= *(_QWORD *)&v46)
          v52 %= *(_QWORD *)&v46;
        if (v52 != v48)
          goto LABEL_75;
LABEL_60:
        v50 = (_QWORD *)*v50;
        if (!v50)
          goto LABEL_75;
      }
      if (v50[2] != 0x99BED48DEFBBD82BLL)
        goto LABEL_60;
LABEL_73:
      v54 = v50[5];
      if (*(_QWORD *)(v54 + 8) == 0x99BED48DEFBBD82BLL)
      {
        v55 = *(int8x8_t ***)(v54 + 32);
        goto LABEL_76;
      }
LABEL_75:
      v55 = 0;
LABEL_76:
      v56 = **(_QWORD **)(v2 + 8);
      v57 = *(_QWORD **)v56;
      v58 = *(_QWORD **)(v56 + 8);
      if (v57 != v58)
      {
        while (*v57 != 0x41D4E9297E100630)
        {
          v57 += 5;
          if (v57 == v58)
            goto LABEL_87;
        }
      }
      if (v57 == v58)
      {
LABEL_87:
        v59 = 0;
      }
      else
      {
        v59 = (_QWORD *)v57[3];
        v60 = (std::__shared_weak_count *)v57[4];
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
          do
            v63 = __ldaxr(v61);
          while (__stlxr(v63 - 1, v61));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      v64 = *(_QWORD *)(*v28 + 384);
      v65 = *(std::__shared_weak_count **)(*v28 + 392);
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v68 = *(_BYTE *)(*v28 + 48);
        do
          v69 = __ldxr(v66);
        while (__stxr(v69 + 1, v66));
        v70 = md::SceneContext::subtileClipMask(*v55, v64, v68);
        v71 = v70;
        v72 = (unint64_t *)&v65->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (v73)
        {
          if (v70)
          {
LABEL_97:
            if (v71[4] == v71[3] * v71[3])
              v74 = 0;
            else
              v74 = (uint64_t)v71;
            goto LABEL_102;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          if (v71)
            goto LABEL_97;
        }
      }
      else
      {
        v71 = md::SceneContext::subtileClipMask(*v55, v64, *(_BYTE *)(*v28 + 48));
        if (v71)
          goto LABEL_97;
      }
      v74 = 0;
LABEL_102:
      md::BaseMapTileDataRenderable::setSubtileClipMask(*v28, v74);
      v75 = *v36;
      v76 = *(_QWORD *)(*v28 + 248);
      v137 = v75;
      v77 = v59[483];
      if (v75 >= (unint64_t)((v59[484] - v77) >> 3)
        || ((v78 = *(_QWORD *)(v77 + 8 * v75)) != 0 ? (v79 = HIDWORD(v75) == HIDWORD(v78)) : (v79 = 0),
            !v79
         || ((v118 = v59[486],
              v119 = *(_QWORD *)(v77 + 8 * v75),
              v120 = (_QWORD *)(v118 + 24 * v78),
              v120 != (_QWORD *)v59[487])
           ? (v121 = v118 == 0)
           : (v121 = 1),
             v121)))
      {
        v2 = v127;
      }
      else
      {
        v122 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>((uint64_t)(v59 + 475), v75, &v137);
        ++v122[3];
        *v120 = v76;
        v123 = v118 + 24 * v119;
        v124 = *(std::__shared_weak_count **)(v123 + 16);
        *(_QWORD *)(v123 + 8) = 0;
        *(_QWORD *)(v123 + 16) = 0;
        v2 = v127;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
      }
      if (v65)
      {
        v80 = (unint64_t *)&v65->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v12 = (_QWORD *)v130[4];
      v15 = v136 + 1;
      v136 = v15;
      if (v15 != v12)
      {
        v82 = v131[4];
        while (1)
        {
          v83 = *((unsigned int *)v15 + 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < (v131[5] - v82) >> 3)
          {
            v85 = *(_QWORD *)(v82 + 8 * v84);
            if (v85)
            {
              v86 = v83 & 0x7F;
              v87 = *(unsigned __int16 *)(v85 + 2 * v86);
              v89 = v131[7];
              v88 = v131[8];
              if (v87 < (v88 - v89) >> 3)
              {
                v90 = v89 + 8 * v87;
                if (v90 != v88 && *(_DWORD *)(v90 + 4) == (_DWORD)v83)
                {
                  v92 = v132[4];
                  if (v84 < (v132[5] - v92) >> 3)
                  {
                    v93 = *(_QWORD *)(v92 + 8 * v84);
                    if (v93)
                    {
                      v94 = *(unsigned __int16 *)(v93 + 2 * v86);
                      v96 = v132[7];
                      v95 = v132[8];
                      if (v94 < (v95 - v96) >> 3)
                      {
                        v97 = v96 + 8 * v94;
                        if (v97 != v95 && *(_DWORD *)(v97 + 4) == (_DWORD)v83)
                        {
                          v99 = v133[4];
                          if (v84 < (v133[5] - v99) >> 3)
                          {
                            v100 = *(_QWORD *)(v99 + 8 * v84);
                            if (v100)
                            {
                              v101 = *(unsigned __int16 *)(v100 + 2 * v86);
                              v103 = v133[7];
                              v102 = v133[8];
                              if (v101 < (v102 - v103) >> 3)
                              {
                                v104 = v103 + 8 * v101;
                                if (v104 != v102 && *(_DWORD *)(v104 + 4) == (_DWORD)v83)
                                {
                                  v106 = v134[4];
                                  if (v84 < (v134[5] - v106) >> 3)
                                  {
                                    v107 = *(_QWORD *)(v106 + 8 * v84);
                                    if (v107)
                                    {
                                      v108 = *(unsigned __int16 *)(v107 + 2 * v86);
                                      v110 = v134[7];
                                      v109 = v134[8];
                                      if (v108 < (v109 - v110) >> 3)
                                      {
                                        v111 = v110 + 8 * v108;
                                        if (v111 != v109 && *(_DWORD *)(v111 + 4) == (_DWORD)v83)
                                        {
                                          v112 = v135[4];
                                          if (v84 < (v135[5] - v112) >> 3)
                                          {
                                            v113 = *(_QWORD *)(v112 + 8 * v84);
                                            if (v113)
                                            {
                                              v114 = *(unsigned __int16 *)(v113 + 2 * v86);
                                              v115 = v135[7];
                                              v116 = v135[8];
                                              if (v114 < (v116 - v115) >> 3)
                                              {
                                                v117 = v115 + 8 * v114;
                                                if (*(_DWORD *)(v117 + 4) == (_DWORD)v83 && v117 != v116)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v15 == v12)
          {
            v15 = v12;
            goto LABEL_18;
          }
        }
        v12 = v15;
LABEL_18:
        v136 = v15;
      }
    }
    while (v129 != v12);
  }
  *v128 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
}

void sub_19F74A8E0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284928;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284928;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x80A8239313E99C5FLL;
  result[1] = "md::ls::TileStyleCameraConstantDataHandle]";
  result[2] = 41;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284970;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284970;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1},std::allocator<md::ita::UpdateCameraStyleLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateCameraStyleLight>(md::ita::UpdateCameraStyleLight &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F74AA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276D38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276D38;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274AE8;
  v4[1] = a2;
  v37 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v37 = v9;
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD **)((**v16)(v16) + 8);
  v22 = (int8x8_t)v21[1];
  if (!*(_QWORD *)&v22)
    goto LABEL_47;
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v24 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v22 <= 0x1AF456233693CD46uLL)
      v24 = 0x1AF456233693CD46uLL % *(_QWORD *)&v22;
  }
  else
  {
    v24 = (*(_QWORD *)&v22 - 1) & 0x1AF456233693CD46;
  }
  v25 = *(_QWORD **)(*v21 + 8 * v24);
  if (!v25)
    goto LABEL_47;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_47;
  if (v23.u32[0] < 2uLL)
  {
    v27 = *(_QWORD *)&v22 - 1;
    while (1)
    {
      v29 = v26[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v26[2] == 0x1AF456233693CD46)
          goto LABEL_45;
      }
      else if ((v29 & v27) != v24)
      {
        goto LABEL_47;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v28 = v26[1];
    if (v28 == 0x1AF456233693CD46)
      break;
    if (v28 >= *(_QWORD *)&v22)
      v28 %= *(_QWORD *)&v22;
    if (v28 != v24)
      goto LABEL_47;
LABEL_34:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_47;
  }
  if (v26[2] != 0x1AF456233693CD46)
    goto LABEL_34;
LABEL_45:
  v30 = v26[5];
  if (*(_QWORD *)(v30 + 8) == 0x1AF456233693CD46)
  {
    v31 = *(_QWORD *)(v30 + 32);
    goto LABEL_48;
  }
LABEL_47:
  v31 = 0;
LABEL_48:
  v35 = *(_OWORD *)(v31 + 496);
  v36 = *(_QWORD *)(v31 + 512);
  v38[0] = &off_1E427BA48;
  v38[1] = &v37;
  v38[2] = &v35;
  v39 = v38;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v38);
  v32 = v39;
  if (v39 == v38)
  {
    v33 = 4;
    v32 = v38;
LABEL_52:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  else if (v39)
  {
    v33 = 5;
    goto LABEL_52;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F74AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283E78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283E78;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xD270E8E58701C515;
  result[1] = "md::ls::TileTransformConstantDataHandle]";
  result[2] = 39;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283EC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283EC0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileTransforms &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileTransforms>(md::ita::UpdateTileTransforms &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x34AE67B339EEC99CLL;
  v2[1] = "md::ls::TileBounds]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4660;
  v2[4] = "md::ls::TileMatrix]";
  v2[5] = 18;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42767E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42767E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274A88;
  v4[1] = a2;
  v43 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v43 = v9;
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0x22D45F5AAD4BF408)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0x22D45F5AAD4BF408);
    v13 = v14 - 5;
  }
  v16 = (uint64_t (***)(_QWORD))v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(uint64_t **)((**v16)(v16) + 8);
  v22 = (int8x8_t)v21[1];
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v24 = 0x1AF456233693CD46uLL % *(_QWORD *)&v22;
    if (*(_QWORD *)&v22 > 0x1AF456233693CD46uLL)
      v24 = 0x1AF456233693CD46;
  }
  else
  {
    v24 = (*(_QWORD *)&v22 - 1) & 0x1AF456233693CD46;
  }
  v25 = *v21;
  v26 = *(_QWORD **)(v25 + 8 * v24);
  if (!v26)
    goto LABEL_46;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_46;
  if (v23.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v27[2] == 0x1AF456233693CD46)
          goto LABEL_44;
      }
      else if ((v29 & (*(_QWORD *)&v22 - 1)) != v24)
      {
        goto LABEL_46;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0x1AF456233693CD46)
      break;
    if (v28 >= *(_QWORD *)&v22)
      v28 %= *(_QWORD *)&v22;
    if (v28 != v24)
      goto LABEL_46;
LABEL_33:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_46;
  }
  if (v27[2] != 0x1AF456233693CD46)
    goto LABEL_33;
LABEL_44:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) == 0x1AF456233693CD46)
  {
    v31 = *(_QWORD *)(v30 + 32);
    goto LABEL_47;
  }
LABEL_46:
  v31 = 0;
LABEL_47:
  if (v23.u32[0] >= 2uLL)
  {
    v33 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v22 <= 0x8BD499FBD96FBB9ELL)
      v33 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v22;
    v32 = *(_QWORD **)(v25 + 8 * v33);
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v32[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v32[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v32 = *(_QWORD **)(v25 + 8 * ((*(_QWORD *)&v22 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v32[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v32[2] != 0x8BD499FBD96FBB9ELL);
  }
  v34 = *(_QWORD *)(v32[5] + 32);
  v42 = *(unsigned __int8 *)(v31 + 3776) - 1 < 3;
  v35 = *(_DWORD *)(v34 + 16);
  v40 = *(_DWORD *)(v34 + 20);
  v41 = v35;
  v36 = operator new(0x28uLL);
  *v36 = &off_1E427B730;
  v36[1] = &v43;
  v36[2] = &v42;
  v36[3] = &v41;
  v36[4] = &v40;
  v45 = v36;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v44);
  v37 = v45;
  if (v45 == v44)
  {
    v38 = 4;
    v37 = v44;
LABEL_61:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v45)
  {
    v38 = 5;
    goto LABEL_61;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F74B7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::TileBounds>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  v6 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 32 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 8 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::TileBounds>(v1);
  v3 = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  v4 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284538;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284538;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xBBBF2D3465784E7ELL;
  v2[1] = "md::ls::NeedsUpdate<ggl::Tile::View>]";
  *(_QWORD *)&result = 36;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4670;
  v2[4] = "md::ls::TileViewConstantDataHandle]";
  v2[5] = 34;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284580;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284580;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateTileRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateTileRenderables>(md::ita::UpdateTileRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xCF1A54FDD9A1F93FLL;
  v2[1] = "md::ls::TileRenderableDataHandle]";
  *(_QWORD *)&result = 32;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4680;
  v2[4] = "md::ls::BoundsWidth]";
  v2[5] = 19;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276B40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276B40;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42754D8;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = (int8x8_t)v13[1];
  if (!*(_QWORD *)&v14)
    goto LABEL_35;
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v14 <= 0x1AF456233693CD46uLL)
      v16 = 0x1AF456233693CD46uLL % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x1AF456233693CD46;
  }
  v17 = *(_QWORD **)(*v13 + 8 * v16);
  if (!v17)
    goto LABEL_35;
  v18 = (_QWORD *)*v17;
  if (!v18)
    goto LABEL_35;
  if (v15.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v21 = v18[1];
      if (v21 == 0x1AF456233693CD46)
      {
        if (v18[2] == 0x1AF456233693CD46)
          goto LABEL_33;
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_35;
      }
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v20 = v18[1];
    if (v20 == 0x1AF456233693CD46)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_35;
LABEL_22:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_35;
  }
  if (v18[2] != 0x1AF456233693CD46)
    goto LABEL_22;
LABEL_33:
  v22 = v18[5];
  if (*(_QWORD *)(v22 + 8) == 0x1AF456233693CD46)
  {
    v23 = *(_QWORD *)(v22 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v23 = 0;
LABEL_36:
  v36 = 0;
  v37 = v23;
  v24 = **v3;
  v25 = *(_QWORD **)v24;
  v26 = *(_QWORD **)(v24 + 8);
  if (v25 != v26)
  {
    while (*v25 != 0x41D4E9297E100630)
    {
      v25 += 5;
      if (v25 == v26)
        goto LABEL_47;
    }
  }
  if (v25 == v26)
  {
LABEL_47:
    v28 = 0;
  }
  else
  {
    v28 = v25[3];
    v27 = (std::__shared_weak_count *)v25[4];
    if (v27)
    {
      v29 = (unint64_t *)&v27->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v36 = v28;
  v32 = operator new(0x20uLL);
  *v32 = &off_1E427B928;
  v32[1] = &v36;
  v32[2] = &v37;
  v32[3] = v3;
  v39 = v32;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v38);
  v33 = v39;
  if (v39 == v38)
  {
    v34 = 4;
    v33 = v38;
LABEL_52:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v39)
  {
    v34 = 5;
    goto LABEL_52;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F74C210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::BoundsWidth>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsUpdate<ggl::Tile::View>>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 4 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 8 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v1);
  v3 = gdc::Registry::storage<md::ls::BoundsWidth>(v1);
  v4 = gdc::Registry::storage<md::ls::NeedsUpdate<ggl::Tile::View>>(v1);
  v5 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::NeedsUpdate<ggl::Tile::View>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBBBF2D3465784E7ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBBBF2D3465784E7ELL;
      if (*(_QWORD *)&v3 <= 0xBBBF2D3465784E7ELL)
        v5 = 0xBBBF2D3465784E7ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBBBF2D3465784E7ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBBBF2D3465784E7ELL)
            {
              if (v7[2] == 0xBBBF2D3465784E7ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBBBF2D3465784E7ELL)
          {
            if (v7[2] == 0xBBBF2D3465784E7ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NeedsUpdate<ggl::Tile::View>]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271118;
  *(_QWORD *)(v11 + 8) = 0xBBBF2D3465784E7ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBBBF2D3465784E7ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBBBF2D3465784E7ELL;
  v15[1] = "md::ls::NeedsUpdate<ggl::Tile::View>]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBBBF2D3465784E7ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F74C990(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<ggl::Tile::View>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<ggl::Tile::View>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<ggl::Tile::View>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<ggl::Tile::View>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42842F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42842F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284340;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284340;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCommandBuffers>(md::ita::PrepareCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32CommandBufferDescriptionCreationEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F74CC0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276A20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276A20;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t (***v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *result;
  uint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  char v89;
  uint64_t (**v90)();
  __int128 v91;
  uint64_t (***v92)();
  uint64_t (**v93)();
  __int128 v94;
  uint64_t (***v95)();
  int v96;
  uint64_t v97;

  v2 = a1;
  v97 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(*(_QWORD *)(a2 + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 != (uint64_t *)v6)
  {
    if ((v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) == 0
      || (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), !v14))
    {
      v15 = v7 >> 3;
      v16 = (uint64_t *)(v6 + 1);
      do
      {
        if (v16 == v5)
          goto LABEL_103;
        v17 = *((unsigned int *)v16 + 1);
        v18 = (uint64_t *)v3[8];
        if (v17 >> 7 < v10)
        {
          v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
          v18 = (uint64_t *)v3[8];
          if (v19)
          {
            v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            v18 = (uint64_t *)v3[8];
            if (v15 > v20)
            {
              v18 = (uint64_t *)&v6[v20];
              if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
                v18 = (uint64_t *)v3[8];
            }
          }
        }
        ++v16;
      }
      while (v18 == v5);
      v6 = (unint64_t *)(v16 - 1);
    }
  }
  if (v5 != (uint64_t *)v6)
  {
    v88 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v86 = v2;
    do
    {
      *v88 = *v6;
      v22 = *v6;
      v23 = *v6 >> 39;
      v24 = v4[4];
      if (v23 < (v4[5] - v24) >> 3
        && (v25 = *(_QWORD *)(v24 + 8 * v23)) != 0
        && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v22) & 0x7F)),
            v28 = v4[7],
            v27 = v4[8],
            v26 < (v27 - v28) >> 3)
        && ((v29 = HIDWORD(v22), v30 = v28 + 8 * v26, v30 != v27)
          ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v29)
          : (v31 = 0),
            v31))
      {
        v32 = v4[11];
        v33 = v4[10] + 3 * v26;
      }
      else
      {
        v32 = v4[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unsigned __int8 *)v33;
      v35 = **(_QWORD **)(v2 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0xC94DD89A7B09BE9CLL)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = ***(uint64_t ****)(v2 + 8);
      if (v43 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v43 != 0xD369A4D92C8FFE6CLL)
      {
        v44 = v43 + 5;
        do
        {
          v45 = *v44;
          v44 += 5;
        }
        while (v45 != 0xD369A4D92C8FFE6CLL);
        v43 = v44 - 5;
      }
      v46 = v43[3];
      v47 = (std::__shared_weak_count *)v43[4];
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        do
          v50 = __ldaxr(v48);
        while (__stlxr(v50 - 1, v48));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v51 = *(_QWORD **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46) + 24) + 8);
      v52 = v51[3];
      v53 = v51[4];
      v54 = v53 - v52;
      if (v53 == v52)
        goto LABEL_94;
      v55 = 0;
      v56 = *v34;
      v57 = v54 >> 3;
      while (1)
      {
        v58 = *(unsigned __int8 **)(v52 + 8 * v55);
        if (*v58 == (_DWORD)v56)
        {
          v59 = *((_QWORD *)v58 + 1);
          v60 = v51[15];
          if (v59 < (v51[16] - v60) >> 3)
            break;
        }
        if (++v55 >= v57)
          goto LABEL_94;
      }
      v61 = *(_QWORD *)(v60 + 8 * v59);
      if (!v61)
        goto LABEL_94;
      v62 = *(_QWORD **)(*(_QWORD *)(v61 + 24) + 8 * v34[1]);
      if (!v62)
        goto LABEL_94;
      v87 = v34[2];
      v62[4] = 0;
      v63 = v62[9];
      if (v62[10] != v63)
        v62[10] = v63;
      v62[14] = v62[13];
      v62[6] = v62[5];
      v65 = (_QWORD *)v62[25];
      v64 = (_QWORD *)v62[26];
      if (v64 != v65)
      {
        v66 = v64 - 4;
        while (1)
        {
          v68 = (_QWORD *)v66[3];
          if (v66 == v68)
            break;
          if (v68)
          {
            v69 = 5;
LABEL_73:
            (*(void (**)(void))(*v68 + 8 * v69))();
          }
          if (*((_BYTE *)v66 - 28))
            *((_BYTE *)v66 - 28) = 0;
          if (*((_BYTE *)v66 - 32))
            *((_BYTE *)v66 - 32) = 0;
          v67 = v66 - 6;
          v66 -= 10;
          if (v67 == v65)
            goto LABEL_78;
        }
        v68 = v66;
        v69 = 4;
        goto LABEL_73;
      }
LABEL_78:
      v62[26] = v65;
      v70 = v62[29];
      for (i = v62[30]; i != v70; i -= 64)
      {
        v72 = *(_QWORD **)(i - 8);
        if ((_QWORD *)(i - 32) == v72)
        {
          v72 = (_QWORD *)(i - 32);
          v73 = 4;
LABEL_80:
          (*(void (**)(void))(*v72 + 8 * v73))();
          continue;
        }
        if (v72)
        {
          v73 = 5;
          goto LABEL_80;
        }
      }
      v62[30] = v70;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v38 + 16))(v38, v56, v87, v62);
      v2 = v86;
      v74 = *(_QWORD **)(v86 + 8);
      v75 = *v88;
      v90 = &off_1E427F120;
      *(_QWORD *)&v91 = v56;
      *((_QWORD *)&v91 + 1) = v75;
      v92 = &v90;
      v95 = &v93;
      v93 = &off_1E427F120;
      v94 = v91;
      v96 = 0;
      ecs2::Runtime::queueCommand(v74, (uint64_t)&v93);
      if (v96 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v96])(&v89, &v93);
      v96 = -1;
      v76 = v92;
      if (v92 == &v90)
      {
        v76 = &v90;
        v77 = 4;
LABEL_93:
        (*v76)[v77]();
      }
      else if (v92)
      {
        v77 = 5;
        goto LABEL_93;
      }
LABEL_94:
      v78 = v4[4];
      v79 = v4[7];
      v21 = (uint64_t *)v4[8];
      v80 = (uint64_t *)(v6 + 1);
      while (v80 != v21)
      {
        v81 = *((unsigned int *)v80 + 1);
        v82 = v4[8];
        if (v81 >> 7 < (v4[5] - v78) >> 3)
        {
          v83 = *(_QWORD *)(v78 + 8 * (v81 >> 7));
          v82 = v4[8];
          if (v83)
          {
            v84 = *(unsigned __int16 *)(v83 + 2 * (v81 & 0x7F));
            v82 = v4[8];
            if (((uint64_t)v21 - v79) >> 3 > v84)
            {
              v82 = v79 + 8 * v84;
              if (*(_DWORD *)(v82 + 4) != (_DWORD)v81)
                v82 = v4[8];
            }
          }
        }
        ++v80;
        if ((uint64_t *)v82 != v21)
        {
          v21 = v80 - 1;
          break;
        }
      }
      v6 = (unint64_t *)v21;
    }
    while (v5 != v21);
  }
LABEL_103:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284388;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284388;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xF37331D7CF44CB11;
  v2[1] = "md::ls::NeedsTileRenderableDataHandleUpdate]";
  *(_QWORD *)&result = 43;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4690;
  v2[4] = "md::ls::TileRenderableDataHandle]";
  v2[5] = 32;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42843D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42843D0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F74D3D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276A68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276A68;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t result;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274B18;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = (int8x8_t)v13[1];
  if (!*(_QWORD *)&v14)
    goto LABEL_35;
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v14 <= 0x1AF456233693CD46uLL)
      v16 = 0x1AF456233693CD46uLL % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x1AF456233693CD46;
  }
  v17 = *(_QWORD **)(*v13 + 8 * v16);
  if (!v17)
    goto LABEL_35;
  v18 = (_QWORD *)*v17;
  if (!v18)
    goto LABEL_35;
  if (v15.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v21 = v18[1];
      if (v21 == 0x1AF456233693CD46)
      {
        if (v18[2] == 0x1AF456233693CD46)
          goto LABEL_33;
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_35;
      }
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v20 = v18[1];
    if (v20 == 0x1AF456233693CD46)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_35;
LABEL_22:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_35;
  }
  if (v18[2] != 0x1AF456233693CD46)
    goto LABEL_22;
LABEL_33:
  v22 = v18[5];
  if (*(_QWORD *)(v22 + 8) == 0x1AF456233693CD46)
  {
    v23 = *(_QWORD *)(v22 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v23 = 0;
LABEL_36:
  v57 = 0;
  v58 = v23;
  v24 = **v3;
  v25 = *(_QWORD **)v24;
  v26 = *(_QWORD **)(v24 + 8);
  if (v25 != v26)
  {
    while (*v25 != 0x41D4E9297E100630)
    {
      v25 += 5;
      if (v25 == v26)
        goto LABEL_47;
    }
  }
  if (v25 == v26)
  {
LABEL_47:
    v28 = 0;
  }
  else
  {
    v28 = v25[3];
    v27 = (std::__shared_weak_count *)v25[4];
    if (v27)
    {
      v29 = (unint64_t *)&v27->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v57 = v28;
  v32 = v58;
  if (*(_QWORD *)(v58 + 5584))
    v32 = *(_QWORD *)(v58 + 5584);
  v33 = (__int128 *)(v32 + 808);
  v34 = v33[5];
  v53 = v33[4];
  v54 = v34;
  v35 = v33[7];
  v55 = v33[6];
  v56 = v35;
  v36 = v33[1];
  v49 = *v33;
  v50 = v36;
  v37 = v33[3];
  v51 = v33[2];
  v52 = v37;
  v38 = operator new(0x28uLL);
  *v38 = &off_1E427B898;
  v38[1] = &v57;
  v38[2] = &v58;
  v38[3] = &v49;
  v38[4] = v3;
  v60 = v38;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v59);
  v46 = v60;
  if (v60 == v59)
  {
    v47 = 4;
    v46 = v59;
LABEL_54:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v46 + 8 * v47))(v46, v39, v40, v41, v42, v43, v44, v45, v49, *((_QWORD *)&v49 + 1), v50, *((_QWORD *)&v50 + 1), v51, *((_QWORD *)&v51 + 1), v52, *((_QWORD *)&v52 + 1));
  }
  else if (v60)
  {
    v47 = 5;
    goto LABEL_54;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F74D7F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 72);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>(v3);
  v6 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 32 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  v3 = gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>(v1);
  v4 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285348;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285348;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285390;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285390;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRouteLineMaskPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRouteLineMaskPass>(md::ita::PrepareRouteLineMaskPass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277248;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277248;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283338;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283338;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283380;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283380;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSSAOPasses &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSSAOPasses>(md::ita::PrepareSSAOPasses &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276240;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276240;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42839F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42839F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283A40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283A40;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareDepthPrePass>(md::ita::PrepareDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42765A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42765A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t (***std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2))()
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t (***result)();
  uint64_t (**v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)();
  unint64_t v21;
  _QWORD *v22;
  uint64_t (***v23)();
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t (***v27)();
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t (**v33)();
  uint64_t v34;
  int v35;
  uint64_t (***v36)();
  uint64_t (**v37)();
  uint64_t v38;
  int v39;
  uint64_t (***v40)();
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!result)
    goto LABEL_40;
  v12 = result[1];
  v13 = v12[3];
  v14 = v12[4];
  v15 = (char *)v14 - (char *)v13;
  if (v14 == v13)
    goto LABEL_40;
  v16 = 0;
  v17 = v15 >> 3;
  while (1)
  {
    v18 = *((_QWORD *)v13 + v16);
    if (*(_BYTE *)v18 == 3)
    {
      v19 = *(_QWORD *)(v18 + 8);
      v20 = v12[15];
      if (v19 < ((char *)v12[16] - (char *)v20) >> 3)
        break;
    }
    if (++v16 >= v17)
      goto LABEL_40;
  }
  if (!*((_QWORD *)v20 + v19))
    goto LABEL_40;
  v21 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
  v22 = *(_QWORD **)(a1 + 8);
  v33 = &off_1E42819E8;
  v34 = (v21 << 32) | 0x203;
  v35 = HIDWORD(v21);
  v36 = &v33;
  v37 = &off_1E42819E8;
  v40 = &v37;
  v38 = v34;
  v39 = HIDWORD(v21);
  v41 = 0;
  ecs2::Runtime::queueCommand(v22, (uint64_t)&v37);
  if (v41 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v41])(&v32, &v37);
  v41 = -1;
  v23 = v36;
  if (v36 == &v33)
  {
    v24 = 4;
    v23 = &v33;
  }
  else
  {
    if (!v36)
      goto LABEL_26;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_26:
  v25 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
  v26 = *(_QWORD **)(a1 + 8);
  v33 = &off_1E42819E8;
  v34 = (v25 << 32) | 0x303;
  v35 = HIDWORD(v25);
  v36 = &v33;
  v37 = &off_1E42819E8;
  v40 = &v37;
  v38 = v34;
  v39 = HIDWORD(v25);
  v41 = 0;
  ecs2::Runtime::queueCommand(v26, (uint64_t)&v37);
  if (v41 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v41])(&v32, &v37);
  v41 = -1;
  v27 = v36;
  if (v36 == &v33)
  {
    v28 = 4;
    v27 = &v33;
    goto LABEL_32;
  }
  if (v36)
  {
    v28 = 5;
LABEL_32:
    (*v27)[v28]();
  }
  v29 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
  v30 = *(_QWORD **)(a1 + 8);
  v33 = &off_1E42819E8;
  v34 = (v29 << 32) | 0x403;
  v35 = HIDWORD(v29);
  v36 = &v33;
  v37 = &off_1E42819E8;
  v40 = &v37;
  v38 = v34;
  v39 = HIDWORD(v29);
  v41 = 0;
  ecs2::Runtime::queueCommand(v30, (uint64_t)&v37);
  if (v41 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v41])(&v32, &v37);
  v41 = -1;
  result = v36;
  if (v36 == &v33)
  {
    v31 = 4;
    result = &v33;
    goto LABEL_39;
  }
  if (v36)
  {
    v31 = 5;
LABEL_39:
    result = (uint64_t (***)())(*result)[v31]();
  }
LABEL_40:
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42833C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42833C8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283410;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283410;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPass>(md::ita::PrepareShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276288;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276288;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t (***std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2))()
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t (***result)();
  uint64_t (**v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)();
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (***v24)(_QWORD);
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t (**v29)();
  int8x8_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t (***v42)();
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t (***v46)();
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  uint64_t (**v52)();
  uint64_t v53;
  int v54;
  uint64_t (***v55)();
  uint64_t (**v56)();
  uint64_t v57;
  int v58;
  uint64_t (***v59)();
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (result)
  {
    v12 = result[1];
    v13 = v12[3];
    v14 = v12[4];
    v15 = (char *)v14 - (char *)v13;
    if (v14 != v13)
    {
      v16 = 0;
      v17 = v15 >> 3;
      while (1)
      {
        v18 = *((_QWORD *)v13 + v16);
        if (!*(_BYTE *)v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          v20 = v12[15];
          if (v19 < ((char *)v12[16] - (char *)v20) >> 3)
            break;
        }
        if (++v16 >= v17)
          goto LABEL_75;
      }
      if (*((_QWORD *)v20 + v19))
      {
        v21 = ***(uint64_t ****)(a1 + 8);
        if (v21 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v21 != 0x22D45F5AAD4BF408)
        {
          v22 = v21 + 5;
          do
          {
            v23 = *v22;
            v22 += 5;
          }
          while (v23 != 0x22D45F5AAD4BF408);
          v21 = v22 - 5;
        }
        v24 = (uint64_t (***)(_QWORD))v21[3];
        v25 = (std::__shared_weak_count *)v21[4];
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          do
            v28 = __ldaxr(v26);
          while (__stlxr(v28 - 1, v26));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        result = (uint64_t (***)())(**v24)(v24);
        v29 = result[1];
        v30 = (int8x8_t)v29[1];
        if (v30)
        {
          v31 = (uint8x8_t)vcnt_s8(v30);
          v31.i16[0] = vaddlv_u8(v31);
          if (v31.u32[0] > 1uLL)
          {
            v32 = 0x41E8D6E445F4145;
            if (*(_QWORD *)&v30 <= 0x41E8D6E445F4145uLL)
              v32 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v30;
          }
          else
          {
            v32 = (*(_QWORD *)&v30 - 1) & 0x41E8D6E445F4145;
          }
          v33 = (_QWORD *)*((_QWORD *)*v29 + v32);
          if (v33)
          {
            v34 = (_QWORD *)*v33;
            if (v34)
            {
              if (v31.u32[0] < 2uLL)
              {
                v35 = *(_QWORD *)&v30 - 1;
                while (1)
                {
                  v37 = v34[1];
                  if (v37 == 0x41E8D6E445F4145)
                  {
                    if (v34[2] == 0x41E8D6E445F4145)
                      goto LABEL_51;
                  }
                  else if ((v37 & v35) != v32)
                  {
                    goto LABEL_75;
                  }
                  v34 = (_QWORD *)*v34;
                  if (!v34)
                    goto LABEL_75;
                }
              }
              do
              {
                v36 = v34[1];
                if (v36 == 0x41E8D6E445F4145)
                {
                  if (v34[2] == 0x41E8D6E445F4145)
                  {
LABEL_51:
                    v38 = v34[5];
                    if (*(_QWORD *)(v38 + 8) == 0x41E8D6E445F4145)
                    {
                      v39 = *(_QWORD *)(v38 + 32);
                      if (v39)
                      {
                        if (!*(_BYTE *)(v39 + 228))
                        {
                          v40 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
                          v41 = *(_QWORD **)(a1 + 8);
                          v52 = &off_1E42819E8;
                          v53 = (v40 << 32) | 0x200;
                          v54 = HIDWORD(v40);
                          v55 = &v52;
                          v56 = &off_1E42819E8;
                          v59 = &v56;
                          v57 = v53;
                          v58 = HIDWORD(v40);
                          v60 = 0;
                          ecs2::Runtime::queueCommand(v41, (uint64_t)&v56);
                          if (v60 != -1)
                            ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v60])(&v51, &v56);
                          v60 = -1;
                          v42 = v55;
                          if (v55 == &v52)
                          {
                            v43 = 4;
                            v42 = &v52;
LABEL_60:
                            (*v42)[v43]();
                          }
                          else if (v55)
                          {
                            v43 = 5;
                            goto LABEL_60;
                          }
                          v44 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
                          v45 = *(_QWORD **)(a1 + 8);
                          v52 = &off_1E42819E8;
                          v53 = (v44 << 32) | 0x300;
                          v54 = HIDWORD(v44);
                          v55 = &v52;
                          v56 = &off_1E42819E8;
                          v59 = &v56;
                          v57 = v53;
                          v58 = HIDWORD(v44);
                          v60 = 0;
                          ecs2::Runtime::queueCommand(v45, (uint64_t)&v56);
                          if (v60 != -1)
                            ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v60])(&v51, &v56);
                          v60 = -1;
                          v46 = v55;
                          if (v55 == &v52)
                          {
                            v47 = 4;
                            v46 = &v52;
LABEL_67:
                            (*v46)[v47]();
                          }
                          else if (v55)
                          {
                            v47 = 5;
                            goto LABEL_67;
                          }
                          v48 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
                          v49 = *(_QWORD **)(a1 + 8);
                          v52 = &off_1E42819E8;
                          v53 = (v48 << 32) | 0x400;
                          v54 = HIDWORD(v48);
                          v55 = &v52;
                          v56 = &off_1E42819E8;
                          v59 = &v56;
                          v57 = v53;
                          v58 = HIDWORD(v48);
                          v60 = 0;
                          ecs2::Runtime::queueCommand(v49, (uint64_t)&v56);
                          if (v60 != -1)
                            ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v60])(&v51, &v56);
                          v60 = -1;
                          result = v55;
                          if (v55 == &v52)
                          {
                            v50 = 4;
                            result = &v52;
LABEL_74:
                            result = (uint64_t (***)())(*result)[v50]();
                          }
                          else if (v55)
                          {
                            v50 = 5;
                            goto LABEL_74;
                          }
                        }
                      }
                    }
                    break;
                  }
                }
                else
                {
                  if (v36 >= *(_QWORD *)&v30)
                    v36 %= *(_QWORD *)&v30;
                  if (v36 != v32)
                    break;
                }
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
          }
        }
      }
    }
  }
LABEL_75:
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282F48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282F48;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282F90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282F90;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPass>(md::ita::PrepareMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276048;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276048;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  __int16 v12;
  unint64_t *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;
  unint64_t *v22;
  unint64_t v23;
  __int16 v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t *v28;
  unint64_t v29;
  __int16 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t (***v74)(_QWORD);
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  int8x8_t v80;
  __int16 v81;
  uint8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  _QWORD *v93;
  unint64_t v94;
  float v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  __int16 v99;
  char *v100;
  __int16 v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  __int16 v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t (***v121)();
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  __int16 v131;
  __int16 v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  __int16 v141;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t (**v147)();
  _BYTE v148[12];
  char v149;
  __int16 v150;
  char v151;
  uint64_t (***v152)();
  int v153;
  __int16 v154;
  char v155;
  __int16 v156;
  char v157;
  __int16 v158;
  char v159;
  __int16 v160;
  char v161;
  __int16 v162;
  char v163;
  __int16 v164;
  char v165;
  __int16 v166;
  char v167;
  __int16 v168;
  char v169;
  __int16 v170;
  char v171;
  __int16 v172;
  char v173;
  __int16 v174;
  char v175;
  uint64_t (**v176)();
  std::__shared_weak_count *v177;
  int v178;
  uint64_t (***v179)();
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xC94DD89A7B09BE9CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xC94DD89A7B09BE9CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "standardCommandBufferSelector");
  v12 = *((_WORD *)v147[1] + 40);
  if (*(_QWORD *)v148)
  {
    v13 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v15 = *((_WORD *)v147[1] + 41);
  if (*(_QWORD *)v148)
  {
    v16 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v18 = *((_WORD *)v147[1] + 44);
  if (*(_QWORD *)v148)
  {
    v19 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v21 = *((_WORD *)v147[1] + 29);
  if (*(_QWORD *)v148)
  {
    v22 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v24 = *((_WORD *)v147[1] + 35);
  if (*(_QWORD *)v148)
  {
    v25 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v27 = *((_WORD *)v147[1] + 36);
  if (*(_QWORD *)v148)
  {
    v28 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  v133 = v24;
  objc_msgSend(v11, "standardCommandBufferSelector");
  v30 = *((_WORD *)v147[1] + 37);
  if (*(_QWORD *)v148)
  {
    v31 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v144 = *((_WORD *)v147[1] + 38);
  if (*(_QWORD *)v148)
  {
    v33 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v143 = *((_WORD *)v147[1] + 39);
  if (*(_QWORD *)v148)
  {
    v35 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v132 = *((_WORD *)v147[1] + 88);
  if (*(_QWORD *)v148)
  {
    v37 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v131 = *((_WORD *)v147[1] + 89);
  if (*(_QWORD *)v148)
  {
    v39 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v130 = *((_WORD *)v147[1] + 90);
  if (*(_QWORD *)v148)
  {
    v41 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v129 = *((_WORD *)v147[1] + 83);
  if (*(_QWORD *)v148)
  {
    v43 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  HIDWORD(v126) = *((unsigned __int16 *)v147[1] + 84);
  if (*(_QWORD *)v148)
  {
    v45 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  LODWORD(v126) = *((unsigned __int16 *)v147[1] + 85);
  if (*(_QWORD *)v148)
  {
    v47 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector", v126);
  v142 = *((_WORD *)v147[1] + 115);
  if (*(_QWORD *)v148)
  {
    v49 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v141 = *((_WORD *)v147[1] + 116);
  if (*(_QWORD *)v148)
  {
    v51 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v140 = *((_WORD *)v147[1] + 119);
  if (*(_QWORD *)v148)
  {
    v53 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v139 = *((_WORD *)v147[1] + 65);
  if (*(_QWORD *)v148)
  {
    v55 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v138 = *((_WORD *)v147[1] + 66);
  if (*(_QWORD *)v148)
  {
    v57 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v137 = *((_WORD *)v147[1] + 67);
  if (*(_QWORD *)v148)
  {
    v59 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v136 = *((_WORD *)v147[1] + 62);
  if (*(_QWORD *)v148)
  {
    v61 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  objc_msgSend(v11, "standardCommandBufferSelector");
  v135 = *((_WORD *)v147[1] + 63);
  if (*(_QWORD *)v148)
  {
    v63 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  v65 = v27;
  v66 = v21;
  v67 = v18;
  v68 = v12;
  objc_msgSend(v11, "standardCommandBufferSelector");
  v134 = *((_WORD *)v147[1] + 64);
  if (*(_QWORD *)v148)
  {
    v69 = (unint64_t *)(*(_QWORD *)v148 + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v148 + 16))(*(_QWORD *)v148);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v148);
    }
  }
  v71 = ***(uint64_t ****)(a1 + 8);
  if (v71 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v71 != 0x22D45F5AAD4BF408)
  {
    v72 = v71 + 5;
    do
    {
      v73 = *v72;
      v72 += 5;
    }
    while (v73 != 0x22D45F5AAD4BF408);
    v71 = v72 - 5;
  }
  v74 = (uint64_t (***)(_QWORD))v71[3];
  v75 = (std::__shared_weak_count *)v71[4];
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v79 = *(uint64_t **)((**v74)(v74) + 8);
  v80 = (int8x8_t)v79[1];
  v81 = v144;
  if (v80)
  {
    v82 = (uint8x8_t)vcnt_s8(v80);
    v82.i16[0] = vaddlv_u8(v82);
    if (v82.u32[0] > 1uLL)
    {
      v83 = 0x41E8D6E445F4145;
      if (*(_QWORD *)&v80 <= 0x41E8D6E445F4145uLL)
        v83 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v80;
    }
    else
    {
      v83 = (*(_QWORD *)&v80 - 1) & 0x41E8D6E445F4145;
    }
    v84 = *v79;
    v85 = *(_QWORD **)(v84 + 8 * v83);
    if (v85)
    {
      v86 = (_QWORD *)*v85;
      if (*v85)
      {
        v87 = *(_QWORD *)&v80 - 1;
        if (v82.u32[0] >= 2uLL)
        {
          while (1)
          {
            v89 = v86[1];
            if (v89 == 0x41E8D6E445F4145)
            {
              if (v86[2] == 0x41E8D6E445F4145)
              {
LABEL_164:
                v90 = v86[5];
                if (*(_QWORD *)(v90 + 8) != 0x41E8D6E445F4145)
                  goto LABEL_204;
                v91 = *(_QWORD *)(v90 + 32);
                if (!v91)
                  goto LABEL_204;
                if (*(_BYTE *)(v91 + 224))
                {
                  v92 = v133;
                }
                else
                {
                  if (v82.u32[0] >= 2uLL)
                  {
                    v94 = 0x1AF456233693CD46;
                    if (*(_QWORD *)&v80 <= 0x1AF456233693CD46uLL)
                      v94 = 0x1AF456233693CD46uLL % *(_QWORD *)&v80;
                    v93 = *(_QWORD **)(v84 + 8 * v94);
                    do
                    {
                      do
                        v93 = (_QWORD *)*v93;
                      while (v93[1] != 0x1AF456233693CD46);
                    }
                    while (v93[2] != 0x1AF456233693CD46);
                  }
                  else
                  {
                    v93 = *(_QWORD **)(v84 + 8 * (v87 & 0x1AF456233693CD46));
                    do
                    {
                      do
                        v93 = (_QWORD *)*v93;
                      while (v93[1] != 0x1AF456233693CD46);
                    }
                    while (v93[2] != 0x1AF456233693CD46);
                  }
                  v95 = *(double *)(*(_QWORD *)(v93[5] + 32) + 40);
                  if (v95 >= 0.0001)
                  {
                    v15 = v130;
                    v81 = v131;
                    v92 = v132;
                  }
                  else
                  {
                    v92 = v128;
                    v15 = v129;
                    v81 = v127;
                  }
                }
                BYTE2(v147) = 0;
                LOWORD(v147) = v68;
                BYTE5(v147) = 0;
                *(_WORD *)((char *)&v147 + 3) = v15;
                v148[0] = 0;
                HIWORD(v147) = v67;
                v148[3] = 1;
                *(_WORD *)&v148[1] = v66;
                v148[6] = 1;
                *(_WORD *)&v148[4] = v92;
                v148[9] = 1;
                *(_WORD *)&v148[7] = v65;
                v149 = 3;
                *(_WORD *)&v148[10] = v30;
                v151 = 3;
                v150 = v81;
                BYTE2(v152) = 3;
                LOWORD(v152) = v143;
                BYTE5(v152) = 2;
                *(_WORD *)((char *)&v152 + 3) = v30;
                LOBYTE(v153) = 2;
                HIWORD(v152) = v81;
                HIBYTE(v153) = 2;
                *(_WORD *)((char *)&v153 + 1) = v143;
                v155 = 4;
                v154 = v142;
                v157 = 4;
                v156 = v141;
                v159 = 4;
                v158 = v140;
                v161 = 0;
                v160 = v139;
                v163 = 0;
                v162 = v138;
                v165 = 0;
                v164 = v137;
                v167 = 3;
                v166 = v136;
                v169 = 3;
                v168 = v135;
                v171 = 3;
                v170 = v134;
                if (v11)
                {
                  objc_msgSend(v11, "standardCommandBufferSelector");
                  v96 = *((_WORD *)v176[1] + 42);
                  v173 = 1;
                  v172 = v96;
                  objc_msgSend(v11, "standardCommandBufferSelector");
                  v97 = *(_QWORD *)(v145 + 8);
                }
                else
                {
                  v176 = 0;
                  v177 = 0;
                  v97 = MEMORY[8];
                  v98 = *(_WORD *)(MEMORY[8] + 84);
                  v173 = 1;
                  v172 = v98;
                  v145 = 0;
                  v146 = 0;
                }
                v99 = *(_WORD *)(v97 + 86);
                v175 = 3;
                v174 = v99;
                v100 = (char *)operator new(0x45uLL);
                *(_QWORD *)v100 = v147;
                v100[8] = v148[0];
                v100[11] = v148[3];
                *(_WORD *)(v100 + 9) = *(_WORD *)&v148[1];
                v101 = *(_WORD *)&v148[4];
                v100[14] = v148[6];
                *((_WORD *)v100 + 6) = v101;
                v100[17] = v148[9];
                *(_WORD *)(v100 + 15) = *(_WORD *)&v148[7];
                v100[20] = v149;
                *((_WORD *)v100 + 9) = *(_WORD *)&v148[10];
                v100[23] = v151;
                *(_WORD *)(v100 + 21) = v150;
                v100[26] = BYTE2(v152);
                *((_WORD *)v100 + 12) = (_WORD)v152;
                v102 = *(_WORD *)((char *)&v152 + 3);
                v100[29] = BYTE5(v152);
                *(_WORD *)(v100 + 27) = v102;
                v103 = HIWORD(v152);
                v100[32] = v153;
                *((_WORD *)v100 + 15) = v103;
                v104 = *(_WORD *)((char *)&v153 + 1);
                v100[35] = HIBYTE(v153);
                *(_WORD *)(v100 + 33) = v104;
                v105 = v154;
                v100[38] = v155;
                *((_WORD *)v100 + 18) = v105;
                v106 = v156;
                v100[41] = v157;
                *(_WORD *)(v100 + 39) = v106;
                v107 = v158;
                v100[44] = v159;
                *((_WORD *)v100 + 21) = v107;
                v108 = v160;
                v100[47] = v161;
                *(_WORD *)(v100 + 45) = v108;
                v109 = v162;
                v100[50] = v163;
                *((_WORD *)v100 + 24) = v109;
                v110 = v164;
                v100[53] = v165;
                *(_WORD *)(v100 + 51) = v110;
                v111 = v166;
                v100[56] = v167;
                *((_WORD *)v100 + 27) = v111;
                v112 = v168;
                v100[59] = v169;
                *(_WORD *)(v100 + 57) = v112;
                v113 = v170;
                v100[62] = v171;
                *((_WORD *)v100 + 30) = v113;
                v114 = v172;
                v100[65] = v173;
                *(_WORD *)(v100 + 63) = v114;
                v115 = v174;
                v100[68] = v175;
                *((_WORD *)v100 + 33) = v115;
                if (v146)
                {
                  v116 = &v146->__shared_owners_;
                  do
                    v117 = __ldaxr((unint64_t *)v116);
                  while (__stlxr(v117 - 1, (unint64_t *)v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                if (v177)
                {
                  v118 = &v177->__shared_owners_;
                  do
                    v119 = __ldaxr((unint64_t *)v118);
                  while (__stlxr(v119 - 1, (unint64_t *)v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
                v120 = 0;
                while (2)
                {
                  v123 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
                  v124 = *(_QWORD **)(a1 + 8);
                  v125 = (std::__shared_weak_count *)(*(unsigned __int16 *)&v100[v120] | ((unint64_t)v100[v120 + 2] << 16) | (v123 << 32));
                  v176 = &off_1E42819E8;
                  v177 = v125;
                  v178 = HIDWORD(v123);
                  v179 = &v176;
                  v152 = &v147;
                  v147 = &off_1E42819E8;
                  *(_QWORD *)v148 = v125;
                  *(_DWORD *)&v148[8] = HIDWORD(v123);
                  v153 = 0;
                  ecs2::Runtime::queueCommand(v124, (uint64_t)&v147);
                  if (v153 != -1)
                    ((void (*)(uint64_t *, uint64_t (***)()))off_1E42FB340[v153])(&v145, &v147);
                  v153 = -1;
                  v121 = v179;
                  if (v179 != &v176)
                  {
                    if (v179)
                    {
                      v122 = 5;
LABEL_196:
                      (*v121)[v122]();
                    }
                    v120 += 3;
                    if (v120 == 69)
                    {
                      operator delete(v100);
                      goto LABEL_204;
                    }
                    continue;
                  }
                  break;
                }
                v121 = &v176;
                v122 = 4;
                goto LABEL_196;
              }
            }
            else
            {
              if (v89 >= *(_QWORD *)&v80)
                v89 %= *(_QWORD *)&v80;
              if (v89 != v83)
                goto LABEL_204;
            }
            v86 = (_QWORD *)*v86;
            if (!v86)
              goto LABEL_204;
          }
        }
        do
        {
          v88 = v86[1];
          if (v88 == 0x41E8D6E445F4145)
          {
            if (v86[2] == 0x41E8D6E445F4145)
              goto LABEL_164;
          }
          else if ((v88 & v87) != v83)
          {
            break;
          }
          v86 = (_QWORD *)*v86;
        }
        while (v86);
      }
    }
  }
LABEL_204:

  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F74FBE8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(std::__shared_weak_count **)(v2 - 120);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283458;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283458;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42834A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42834A0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1},std::allocator<md::ita::PushLegacyRibbons &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushLegacyRibbons>(md::ita::PushLegacyRibbons &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xE57C2F66048E40BDLL;
  result[1] = "md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>]";
  result[2] = 75;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>,std::allocator<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>,std::allocator<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42762D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>,std::allocator<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42762D0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>,std::allocator<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (***v25)(_QWORD);
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  md::LayoutContext *v30;
  uint64_t v31;
  _QWORD *v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const md::LayoutContext **v50;
  const md::LayoutContext **v51;
  const md::LayoutContext *v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t result;
  _BYTE v58[296];
  const md::LayoutContext *v59;
  BOOL v60;
  uint64_t v61;
  md::LayoutContext *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42755C8;
  v4[1] = a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0xC94DD89A7B09BE9CLL)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0xD369A4D92C8FFE6CLL)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0xD369A4D92C8FFE6CLL);
    v13 = v14 - 5;
  }
  v16 = v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  v62 = 0;
  v22 = ***(uint64_t ****)(a1 + 8);
  if (v22 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v22 != 0x22D45F5AAD4BF408)
  {
    v23 = v22 + 5;
    do
    {
      v24 = *v23;
      v23 += 5;
    }
    while (v24 != 0x22D45F5AAD4BF408);
    v22 = v23 - 5;
  }
  v25 = (uint64_t (***)(_QWORD))v22[3];
  v26 = (std::__shared_weak_count *)v22[4];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v30 = (md::LayoutContext *)(**v25)(v25);
  v62 = v30;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 80))(v9, 9, 0);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 24))(v9, v31, 0, 0);
  v32 = (_QWORD *)*((_QWORD *)v30 + 1);
  v33 = (int8x8_t)v32[1];
  if (!*(_QWORD *)&v33)
    goto LABEL_60;
  v34 = (uint8x8_t)vcnt_s8(v33);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v33 <= 0x8BD499FBD96FBB9ELL)
      v35 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v33;
  }
  else
  {
    v35 = (*(_QWORD *)&v33 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v36 = *(_QWORD **)(*v32 + 8 * v35);
  if (!v36)
    goto LABEL_60;
  v37 = (_QWORD *)*v36;
  if (!v37)
    goto LABEL_60;
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v39 = v37[1];
      if (v39 == 0x8BD499FBD96FBB9ELL)
      {
        if (v37[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_56;
      }
      else if ((v39 & (*(_QWORD *)&v33 - 1)) != v35)
      {
        goto LABEL_60;
      }
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_60;
    }
  }
  while (1)
  {
    v38 = v37[1];
    if (v38 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v38 >= *(_QWORD *)&v33)
      v38 %= *(_QWORD *)&v33;
    if (v38 != v35)
      goto LABEL_60;
LABEL_45:
    v37 = (_QWORD *)*v37;
    if (!v37)
      goto LABEL_60;
  }
  if (v37[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_45;
LABEL_56:
  v40 = v37[5];
  if (*(_QWORD *)(v40 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_60:
    LOBYTE(v41) = 0;
    goto LABEL_61;
  }
  v41 = *(_QWORD *)(v40 + 32);
  if (v41)
  {
    v60 = *(float *)(v41 + 16) <= 0.01 && *(_BYTE *)(v41 + 3) != 0;
    goto LABEL_62;
  }
LABEL_61:
  v60 = v41;
  if (!*(_QWORD *)&v33)
    goto LABEL_97;
LABEL_62:
  v42 = (uint8x8_t)vcnt_s8(v33);
  v42.i16[0] = vaddlv_u8(v42);
  if (v42.u32[0] > 1uLL)
  {
    v43 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v33 <= 0x41E8D6E445F4145uLL)
      v43 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v33;
  }
  else
  {
    v43 = (*(_QWORD *)&v33 - 1) & 0x41E8D6E445F4145;
  }
  v44 = *(_QWORD **)(*v32 + 8 * v43);
  if (!v44)
    goto LABEL_97;
  v45 = (_QWORD *)*v44;
  if (!v45)
    goto LABEL_97;
  if (v42.u32[0] < 2uLL)
  {
    v46 = *(_QWORD *)&v33 - 1;
    while (1)
    {
      v48 = v45[1];
      if (v48 == 0x41E8D6E445F4145)
      {
        if (v45[2] == 0x41E8D6E445F4145)
          goto LABEL_82;
      }
      else if ((v48 & v46) != v43)
      {
        goto LABEL_97;
      }
      v45 = (_QWORD *)*v45;
      if (!v45)
        goto LABEL_97;
    }
  }
  while (2)
  {
    v47 = v45[1];
    if (v47 != 0x41E8D6E445F4145)
    {
      if (v47 >= *(_QWORD *)&v33)
        v47 %= *(_QWORD *)&v33;
      if (v47 != v43)
        goto LABEL_97;
      goto LABEL_71;
    }
    if (v45[2] != 0x41E8D6E445F4145)
    {
LABEL_71:
      v45 = (_QWORD *)*v45;
      if (!v45)
        goto LABEL_97;
      continue;
    }
    break;
  }
LABEL_82:
  v49 = v45[5];
  if (*(_QWORD *)(v49 + 8) == 0x41E8D6E445F4145 && *(_QWORD *)(v49 + 32))
  {
    v50 = *(const md::LayoutContext ***)(v21 + 40);
    v51 = *(const md::LayoutContext ***)(v21 + 48);
    while (v50 != v51)
    {
      v52 = *v50;
      if (*v50)
      {
        if (*((_BYTE *)v52 + 33))
        {
          v53 = *((unsigned __int8 *)v52 + 34);
          if (v53 != 10 && v53 != 53)
          {
            v59 = *v50;
            md::DaVinciGroundRenderLayer::createMeshLayoutContext((md::DaVinciGroundRenderLayer *)v58, v52, v30);
            md::DaVinciGroundRenderLayer::resetRibbonECS(v52);
            v54 = operator new(0x30uLL);
            *v54 = &off_1E427B418;
            v54[1] = &v59;
            v54[2] = &v62;
            v54[3] = v58;
            v54[4] = &v61;
            v54[5] = &v60;
            v64 = v54;
            (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v63);
            v55 = v64;
            if (v64 == v63)
            {
              v56 = 4;
              v55 = v63;
            }
            else
            {
              if (!v64)
                break;
              v56 = 5;
            }
            (*(void (**)(void))(*v55 + 8 * v56))();
            break;
          }
        }
      }
      ++v50;
    }
  }
LABEL_97:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F750454(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v3 - 80);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>::Model<ecs2::RuntimeQuery<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>::Model<ecs2::RuntimeQuery<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 8 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>::Model<ecs2::RuntimeQuery<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42841D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42841D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284220;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284220;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1},std::allocator<md::ita::DeletePendingDeletion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DeletePendingDeletion>(md::ita::DeletePendingDeletion &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x34ACED59D994E35ELL;
  result[1] = "md::ls::PendingDeletion]";
  result[2] = 23;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>,std::allocator<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>,std::allocator<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276990;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>,std::allocator<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276990;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>,std::allocator<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274C98;
  v4[1] = a2;
  v8[0] = &off_1E427B850;
  v8[1] = v3;
  v9 = v8;
  ecs2::Query<md::ls::PendingDeletion const&>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&>>::each((uint64_t)v4, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F750A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PendingDeletion const&>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::PendingDeletion const&>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::PendingDeletion const&>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283DE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283DE8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int128 v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  __int128 v155;
  unint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;
  unint64_t v167;
  char *v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  unint64_t v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  __int128 v188;
  unint64_t v189;
  char *v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  __int128 v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  __int128 v210;
  unint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  __int128 v221;
  unint64_t v222;
  char *v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  __int128 v232;
  unint64_t v233;
  char *v234;
  char *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  __int128 v243;
  unint64_t v244;
  char *v245;
  char *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  __int128 v254;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x270uLL);
  a1[2] = (char *)(v2 + 78);
  *v2 = 0xB6C12FBB402E8E70;
  v2[1] = "md::ls::RenderableMaterialData]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB46A0;
  v2[4] = "md::ls::RampMaterialData]";
  v2[5] = 24;
  v2[6] = 0xA3F884E4E2541296;
  v2[7] = "md::ls::ColorDataHandle]";
  v2[8] = 23;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 78)
  {
    *(_QWORD *)v3 = 0x849CB194B84BB63DLL;
    v2[10] = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
    v2[11] = 45;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  if (0x5555555555555556 * (((char *)(v2 + 78) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 78) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 78) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x849CB194B84BB63DLL;
  *((_QWORD *)v10 + 1) = "md::ls::UniqueMaterialVisibilityOptionsHandle]";
  *((_QWORD *)v10 + 2) = 45;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xE515B39146CD9FB7;
    *((_QWORD *)v4 + 1) = "md::ls::UniqueMaterialZIndexHandle]";
    *((_QWORD *)v4 + 2) = 34;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xE515B39146CD9FB7;
  *((_QWORD *)v21 + 1) = "md::ls::UniqueMaterialZIndexHandle]";
  *((_QWORD *)v21 + 2) = 34;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x60915CB292001F47;
    *((_QWORD *)v14 + 1) = "md::ls::UniqueColorDataHandle]";
    *((_QWORD *)v14 + 2) = 29;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x60915CB292001F47;
  *((_QWORD *)v32 + 1) = "md::ls::UniqueColorDataHandle]";
  *((_QWORD *)v32 + 2) = 29;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x6C7EE74910D42096;
    *((_QWORD *)v25 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
    *((_QWORD *)v25 + 2) = 43;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x6C7EE74910D42096;
  *((_QWORD *)v43 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
  *((_QWORD *)v43 + 2) = 43;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x6E0342375BBCD967;
    *((_QWORD *)v36 + 1) = "md::ls::StyleRouteLineMaskConstantDataHandle]";
    *((_QWORD *)v36 + 2) = 44;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x6E0342375BBCD967;
  *((_QWORD *)v54 + 1) = "md::ls::StyleRouteLineMaskConstantDataHandle]";
  *((_QWORD *)v54 + 2) = 44;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0x7DD7F5B95CA3FF88;
    *((_QWORD *)v47 + 1) = "md::ls::StyleConstantHandle]";
    *((_QWORD *)v47 + 2) = 27;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0x7DD7F5B95CA3FF88;
  *((_QWORD *)v65 + 1) = "md::ls::StyleConstantHandle]";
  *((_QWORD *)v65 + 2) = 27;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0xDC98991DB7473274;
    *((_QWORD *)v58 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
    *((_QWORD *)v58 + 2) = 43;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v75 = (char *)operator new(24 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0xDC98991DB7473274;
  *((_QWORD *)v76 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
  *((_QWORD *)v76 + 2) = 43;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
  v79 = (unint64_t)a1[2];
  if ((unint64_t)v69 < v79)
  {
    *(_QWORD *)v69 = 0xD5AD9B8C3FE62EE8;
    *((_QWORD *)v69 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
    *((_QWORD *)v69 + 2) = 46;
    v80 = v69 + 24;
    goto LABEL_145;
  }
  v81 = *a1;
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - *a1) >> 3);
  v83 = v82 + 1;
  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v81) >> 3);
  if (2 * v84 > v83)
    v83 = 2 * v84;
  if (v84 >= 0x555555555555555)
    v85 = 0xAAAAAAAAAAAAAAALL;
  else
    v85 = v83;
  if (v85)
  {
    if (v85 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v86 = (char *)operator new(24 * v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = &v86[24 * v82];
  v88 = &v86[24 * v85];
  *(_QWORD *)v87 = 0xD5AD9B8C3FE62EE8;
  *((_QWORD *)v87 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
  *((_QWORD *)v87 + 2) = 46;
  v80 = v87 + 24;
  if (v69 == v81)
  {
    *a1 = v87;
    a1[1] = v80;
    a1[2] = v88;
LABEL_144:
    operator delete(v69);
    goto LABEL_145;
  }
  do
  {
    v89 = *(_OWORD *)(v69 - 24);
    *((_QWORD *)v87 - 1) = *((_QWORD *)v69 - 1);
    *(_OWORD *)(v87 - 24) = v89;
    v87 -= 24;
    v69 -= 24;
  }
  while (v69 != v81);
  v69 = *a1;
  *a1 = v87;
  a1[1] = v80;
  a1[2] = v88;
  if (v69)
    goto LABEL_144;
LABEL_145:
  a1[1] = v80;
  v90 = (unint64_t)a1[2];
  if ((unint64_t)v80 < v90)
  {
    *(_QWORD *)v80 = 0xE103B5C60804137ELL;
    *((_QWORD *)v80 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v80 + 2) = 27;
    v91 = v80 + 24;
    goto LABEL_163;
  }
  v92 = *a1;
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v80 - *a1) >> 3);
  v94 = v93 + 1;
  if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 3);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v97 = (char *)operator new(24 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[24 * v93];
  v99 = &v97[24 * v96];
  *(_QWORD *)v98 = 0xE103B5C60804137ELL;
  *((_QWORD *)v98 + 1) = "md::ls::ColorRampDataHandle]";
  *((_QWORD *)v98 + 2) = 27;
  v91 = v98 + 24;
  if (v80 == v92)
  {
    *a1 = v98;
    a1[1] = v91;
    a1[2] = v99;
LABEL_162:
    operator delete(v80);
    goto LABEL_163;
  }
  do
  {
    v100 = *(_OWORD *)(v80 - 24);
    *((_QWORD *)v98 - 1) = *((_QWORD *)v80 - 1);
    *(_OWORD *)(v98 - 24) = v100;
    v98 -= 24;
    v80 -= 24;
  }
  while (v80 != v92);
  v80 = *a1;
  *a1 = v98;
  a1[1] = v91;
  a1[2] = v99;
  if (v80)
    goto LABEL_162;
LABEL_163:
  a1[1] = v91;
  v101 = (unint64_t)a1[2];
  if ((unint64_t)v91 < v101)
  {
    *(_QWORD *)v91 = 0x3218EFD67197A145;
    *((_QWORD *)v91 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v91 + 2) = 21;
    v102 = v91 + 24;
    goto LABEL_181;
  }
  v103 = *a1;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v91 - *a1) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v103) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v108 = (char *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[24 * v104];
  v110 = &v108[24 * v107];
  *(_QWORD *)v109 = 0x3218EFD67197A145;
  *((_QWORD *)v109 + 1) = "md::ls::NormalsHandle]";
  *((_QWORD *)v109 + 2) = 21;
  v102 = v109 + 24;
  if (v91 == v103)
  {
    *a1 = v109;
    a1[1] = v102;
    a1[2] = v110;
LABEL_180:
    operator delete(v91);
    goto LABEL_181;
  }
  do
  {
    v111 = *(_OWORD *)(v91 - 24);
    *((_QWORD *)v109 - 1) = *((_QWORD *)v91 - 1);
    *(_OWORD *)(v109 - 24) = v111;
    v109 -= 24;
    v91 -= 24;
  }
  while (v91 != v103);
  v91 = *a1;
  *a1 = v109;
  a1[1] = v102;
  a1[2] = v110;
  if (v91)
    goto LABEL_180;
LABEL_181:
  a1[1] = v102;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v102 < v112)
  {
    *(_QWORD *)v102 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v102 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v102 + 2) = 17;
    v113 = v102 + 24;
    goto LABEL_199;
  }
  v114 = *a1;
  v115 = 0xAAAAAAAAAAAAAAABLL * ((v102 - *a1) >> 3);
  v116 = v115 + 1;
  if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x555555555555555)
    v118 = 0xAAAAAAAAAAAAAAALL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v119 = (char *)operator new(24 * v118);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[24 * v115];
  v121 = &v119[24 * v118];
  *(_QWORD *)v120 = 0xCBB77B1CBD05D7C5;
  *((_QWORD *)v120 + 1) = "md::ls::UVsHandle]";
  *((_QWORD *)v120 + 2) = 17;
  v113 = v120 + 24;
  if (v102 == v114)
  {
    *a1 = v120;
    a1[1] = v113;
    a1[2] = v121;
LABEL_198:
    operator delete(v102);
    goto LABEL_199;
  }
  do
  {
    v122 = *(_OWORD *)(v102 - 24);
    *((_QWORD *)v120 - 1) = *((_QWORD *)v102 - 1);
    *(_OWORD *)(v120 - 24) = v122;
    v120 -= 24;
    v102 -= 24;
  }
  while (v102 != v114);
  v102 = *a1;
  *a1 = v120;
  a1[1] = v113;
  a1[2] = v121;
  if (v102)
    goto LABEL_198;
LABEL_199:
  a1[1] = v113;
  v123 = (unint64_t)a1[2];
  if ((unint64_t)v113 < v123)
  {
    *(_QWORD *)v113 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v113 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v113 + 2) = 23;
    v124 = v113 + 24;
    goto LABEL_217;
  }
  v125 = *a1;
  v126 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a1) >> 3);
  v127 = v126 + 1;
  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v125) >> 3);
  if (2 * v128 > v127)
    v127 = 2 * v128;
  if (v128 >= 0x555555555555555)
    v129 = 0xAAAAAAAAAAAAAAALL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v130 = (char *)operator new(24 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = &v130[24 * v126];
  v132 = &v130[24 * v129];
  *(_QWORD *)v131 = 0xD443D3DCBB78491ALL;
  *((_QWORD *)v131 + 1) = "md::ls::ElevationHandle]";
  *((_QWORD *)v131 + 2) = 23;
  v124 = v131 + 24;
  if (v113 == v125)
  {
    *a1 = v131;
    a1[1] = v124;
    a1[2] = v132;
LABEL_216:
    operator delete(v113);
    goto LABEL_217;
  }
  do
  {
    v133 = *(_OWORD *)(v113 - 24);
    *((_QWORD *)v131 - 1) = *((_QWORD *)v113 - 1);
    *(_OWORD *)(v131 - 24) = v133;
    v131 -= 24;
    v113 -= 24;
  }
  while (v113 != v125);
  v113 = *a1;
  *a1 = v131;
  a1[1] = v124;
  a1[2] = v132;
  if (v113)
    goto LABEL_216;
LABEL_217:
  a1[1] = v124;
  v134 = (unint64_t)a1[2];
  if ((unint64_t)v124 < v134)
  {
    *(_QWORD *)v124 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v124 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v124 + 2) = 31;
    v135 = v124 + 24;
    goto LABEL_235;
  }
  v136 = *a1;
  v137 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *a1) >> 3);
  v138 = v137 + 1;
  if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 3);
  if (2 * v139 > v138)
    v138 = 2 * v139;
  if (v139 >= 0x555555555555555)
    v140 = 0xAAAAAAAAAAAAAAALL;
  else
    v140 = v138;
  if (v140)
  {
    if (v140 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v141 = (char *)operator new(24 * v140);
  }
  else
  {
    v141 = 0;
  }
  v142 = &v141[24 * v137];
  v143 = &v141[24 * v140];
  *(_QWORD *)v142 = 0xAF179EFD8A4C83D4;
  *((_QWORD *)v142 + 1) = "md::ls::InstanceTransformHandle]";
  *((_QWORD *)v142 + 2) = 31;
  v135 = v142 + 24;
  if (v124 == v136)
  {
    *a1 = v142;
    a1[1] = v135;
    a1[2] = v143;
LABEL_234:
    operator delete(v124);
    goto LABEL_235;
  }
  do
  {
    v144 = *(_OWORD *)(v124 - 24);
    *((_QWORD *)v142 - 1) = *((_QWORD *)v124 - 1);
    *(_OWORD *)(v142 - 24) = v144;
    v142 -= 24;
    v124 -= 24;
  }
  while (v124 != v136);
  v124 = *a1;
  *a1 = v142;
  a1[1] = v135;
  a1[2] = v143;
  if (v124)
    goto LABEL_234;
LABEL_235:
  a1[1] = v135;
  v145 = (unint64_t)a1[2];
  if ((unint64_t)v135 < v145)
  {
    *(_QWORD *)v135 = 0xEBDB618C34E97A19;
    *((_QWORD *)v135 + 1) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
    *((_QWORD *)v135 + 2) = 40;
    v146 = v135 + 24;
    goto LABEL_253;
  }
  v147 = *a1;
  v148 = 0xAAAAAAAAAAAAAAABLL * ((v135 - *a1) >> 3);
  v149 = v148 + 1;
  if (v148 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (_QWORD)v147) >> 3);
  if (2 * v150 > v149)
    v149 = 2 * v150;
  if (v150 >= 0x555555555555555)
    v151 = 0xAAAAAAAAAAAAAAALL;
  else
    v151 = v149;
  if (v151)
  {
    if (v151 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v152 = (char *)operator new(24 * v151);
  }
  else
  {
    v152 = 0;
  }
  v153 = &v152[24 * v148];
  v154 = &v152[24 * v151];
  *(_QWORD *)v153 = 0xEBDB618C34E97A19;
  *((_QWORD *)v153 + 1) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
  *((_QWORD *)v153 + 2) = 40;
  v146 = v153 + 24;
  if (v135 == v147)
  {
    *a1 = v153;
    a1[1] = v146;
    a1[2] = v154;
LABEL_252:
    operator delete(v135);
    goto LABEL_253;
  }
  do
  {
    v155 = *(_OWORD *)(v135 - 24);
    *((_QWORD *)v153 - 1) = *((_QWORD *)v135 - 1);
    *(_OWORD *)(v153 - 24) = v155;
    v153 -= 24;
    v135 -= 24;
  }
  while (v135 != v147);
  v135 = *a1;
  *a1 = v153;
  a1[1] = v146;
  a1[2] = v154;
  if (v135)
    goto LABEL_252;
LABEL_253:
  a1[1] = v146;
  v156 = (unint64_t)a1[2];
  if ((unint64_t)v146 < v156)
  {
    *(_QWORD *)v146 = 0x11BB47B172EB0B40;
    *((_QWORD *)v146 + 1) = "md::ls::NeedsClimateTint]";
    *((_QWORD *)v146 + 2) = 24;
    v157 = v146 + 24;
    goto LABEL_271;
  }
  v158 = *a1;
  v159 = 0xAAAAAAAAAAAAAAABLL * ((v146 - *a1) >> 3);
  v160 = v159 + 1;
  if (v159 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (_QWORD)v158) >> 3);
  if (2 * v161 > v160)
    v160 = 2 * v161;
  if (v161 >= 0x555555555555555)
    v162 = 0xAAAAAAAAAAAAAAALL;
  else
    v162 = v160;
  if (v162)
  {
    if (v162 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v163 = (char *)operator new(24 * v162);
  }
  else
  {
    v163 = 0;
  }
  v164 = &v163[24 * v159];
  v165 = &v163[24 * v162];
  *(_QWORD *)v164 = 0x11BB47B172EB0B40;
  *((_QWORD *)v164 + 1) = "md::ls::NeedsClimateTint]";
  *((_QWORD *)v164 + 2) = 24;
  v157 = v164 + 24;
  if (v146 == v158)
  {
    *a1 = v164;
    a1[1] = v157;
    a1[2] = v165;
LABEL_270:
    operator delete(v146);
    goto LABEL_271;
  }
  do
  {
    v166 = *(_OWORD *)(v146 - 24);
    *((_QWORD *)v164 - 1) = *((_QWORD *)v146 - 1);
    *(_OWORD *)(v164 - 24) = v166;
    v164 -= 24;
    v146 -= 24;
  }
  while (v146 != v158);
  v146 = *a1;
  *a1 = v164;
  a1[1] = v157;
  a1[2] = v165;
  if (v146)
    goto LABEL_270;
LABEL_271:
  a1[1] = v157;
  v167 = (unint64_t)a1[2];
  if ((unint64_t)v157 < v167)
  {
    *(_QWORD *)v157 = 0x28D6AB85FDB5A2BLL;
    *((_QWORD *)v157 + 1) = "md::ls::RenderableAlbedoTexture]";
    *((_QWORD *)v157 + 2) = 31;
    v168 = v157 + 24;
    goto LABEL_289;
  }
  v169 = *a1;
  v170 = 0xAAAAAAAAAAAAAAABLL * ((v157 - *a1) >> 3);
  v171 = v170 + 1;
  if (v170 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167 - (_QWORD)v169) >> 3);
  if (2 * v172 > v171)
    v171 = 2 * v172;
  if (v172 >= 0x555555555555555)
    v173 = 0xAAAAAAAAAAAAAAALL;
  else
    v173 = v171;
  if (v173)
  {
    if (v173 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v174 = (char *)operator new(24 * v173);
  }
  else
  {
    v174 = 0;
  }
  v175 = &v174[24 * v170];
  v176 = &v174[24 * v173];
  *(_QWORD *)v175 = 0x28D6AB85FDB5A2BLL;
  *((_QWORD *)v175 + 1) = "md::ls::RenderableAlbedoTexture]";
  *((_QWORD *)v175 + 2) = 31;
  v168 = v175 + 24;
  if (v157 == v169)
  {
    *a1 = v175;
    a1[1] = v168;
    a1[2] = v176;
LABEL_288:
    operator delete(v157);
    goto LABEL_289;
  }
  do
  {
    v177 = *(_OWORD *)(v157 - 24);
    *((_QWORD *)v175 - 1) = *((_QWORD *)v157 - 1);
    *(_OWORD *)(v175 - 24) = v177;
    v175 -= 24;
    v157 -= 24;
  }
  while (v157 != v169);
  v157 = *a1;
  *a1 = v175;
  a1[1] = v168;
  a1[2] = v176;
  if (v157)
    goto LABEL_288;
LABEL_289:
  a1[1] = v168;
  v178 = (unint64_t)a1[2];
  if ((unint64_t)v168 < v178)
  {
    *(_QWORD *)v168 = 0xD49B968135FE1A73;
    *((_QWORD *)v168 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
    *((_QWORD *)v168 + 2) = 51;
    v179 = v168 + 24;
    goto LABEL_307;
  }
  v180 = *a1;
  v181 = 0xAAAAAAAAAAAAAAABLL * ((v168 - *a1) >> 3);
  v182 = v181 + 1;
  if (v181 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (_QWORD)v180) >> 3);
  if (2 * v183 > v182)
    v182 = 2 * v183;
  if (v183 >= 0x555555555555555)
    v184 = 0xAAAAAAAAAAAAAAALL;
  else
    v184 = v182;
  if (v184)
  {
    if (v184 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v185 = (char *)operator new(24 * v184);
  }
  else
  {
    v185 = 0;
  }
  v186 = &v185[24 * v181];
  v187 = &v185[24 * v184];
  *(_QWORD *)v186 = 0xD49B968135FE1A73;
  *((_QWORD *)v186 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
  *((_QWORD *)v186 + 2) = 51;
  v179 = v186 + 24;
  if (v168 == v180)
  {
    *a1 = v186;
    a1[1] = v179;
    a1[2] = v187;
LABEL_306:
    operator delete(v168);
    goto LABEL_307;
  }
  do
  {
    v188 = *(_OWORD *)(v168 - 24);
    *((_QWORD *)v186 - 1) = *((_QWORD *)v168 - 1);
    *(_OWORD *)(v186 - 24) = v188;
    v186 -= 24;
    v168 -= 24;
  }
  while (v168 != v180);
  v168 = *a1;
  *a1 = v186;
  a1[1] = v179;
  a1[2] = v187;
  if (v168)
    goto LABEL_306;
LABEL_307:
  a1[1] = v179;
  v189 = (unint64_t)a1[2];
  if ((unint64_t)v179 < v189)
  {
    *(_QWORD *)v179 = 0xBAA35DF429A7267FLL;
    *((_QWORD *)v179 + 1) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
    *((_QWORD *)v179 + 2) = 53;
    v190 = v179 + 24;
    goto LABEL_325;
  }
  v191 = *a1;
  v192 = 0xAAAAAAAAAAAAAAABLL * ((v179 - *a1) >> 3);
  v193 = v192 + 1;
  if (v192 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v194 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189 - (_QWORD)v191) >> 3);
  if (2 * v194 > v193)
    v193 = 2 * v194;
  if (v194 >= 0x555555555555555)
    v195 = 0xAAAAAAAAAAAAAAALL;
  else
    v195 = v193;
  if (v195)
  {
    if (v195 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v196 = (char *)operator new(24 * v195);
  }
  else
  {
    v196 = 0;
  }
  v197 = &v196[24 * v192];
  v198 = &v196[24 * v195];
  *(_QWORD *)v197 = 0xBAA35DF429A7267FLL;
  *((_QWORD *)v197 + 1) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
  *((_QWORD *)v197 + 2) = 53;
  v190 = v197 + 24;
  if (v179 == v191)
  {
    *a1 = v197;
    a1[1] = v190;
    a1[2] = v198;
LABEL_324:
    operator delete(v179);
    goto LABEL_325;
  }
  do
  {
    v199 = *(_OWORD *)(v179 - 24);
    *((_QWORD *)v197 - 1) = *((_QWORD *)v179 - 1);
    *(_OWORD *)(v197 - 24) = v199;
    v197 -= 24;
    v179 -= 24;
  }
  while (v179 != v191);
  v179 = *a1;
  *a1 = v197;
  a1[1] = v190;
  a1[2] = v198;
  if (v179)
    goto LABEL_324;
LABEL_325:
  a1[1] = v190;
  v200 = (unint64_t)a1[2];
  if ((unint64_t)v190 < v200)
  {
    *(_QWORD *)v190 = 0x5FF8F613B2E16249;
    *((_QWORD *)v190 + 1) = "md::ls::UniqueMaterialAlbedoTexture]";
    *((_QWORD *)v190 + 2) = 35;
    v201 = v190 + 24;
    goto LABEL_343;
  }
  v202 = *a1;
  v203 = 0xAAAAAAAAAAAAAAABLL * ((v190 - *a1) >> 3);
  v204 = v203 + 1;
  if (v203 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v205 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v200 - (_QWORD)v202) >> 3);
  if (2 * v205 > v204)
    v204 = 2 * v205;
  if (v205 >= 0x555555555555555)
    v206 = 0xAAAAAAAAAAAAAAALL;
  else
    v206 = v204;
  if (v206)
  {
    if (v206 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v207 = (char *)operator new(24 * v206);
  }
  else
  {
    v207 = 0;
  }
  v208 = &v207[24 * v203];
  v209 = &v207[24 * v206];
  *(_QWORD *)v208 = 0x5FF8F613B2E16249;
  *((_QWORD *)v208 + 1) = "md::ls::UniqueMaterialAlbedoTexture]";
  *((_QWORD *)v208 + 2) = 35;
  v201 = v208 + 24;
  if (v190 == v202)
  {
    *a1 = v208;
    a1[1] = v201;
    a1[2] = v209;
LABEL_342:
    operator delete(v190);
    goto LABEL_343;
  }
  do
  {
    v210 = *(_OWORD *)(v190 - 24);
    *((_QWORD *)v208 - 1) = *((_QWORD *)v190 - 1);
    *(_OWORD *)(v208 - 24) = v210;
    v208 -= 24;
    v190 -= 24;
  }
  while (v190 != v202);
  v190 = *a1;
  *a1 = v208;
  a1[1] = v201;
  a1[2] = v209;
  if (v190)
    goto LABEL_342;
LABEL_343:
  a1[1] = v201;
  v211 = (unint64_t)a1[2];
  if ((unint64_t)v201 < v211)
  {
    *(_QWORD *)v201 = 0x1202E9D2D9704CABLL;
    *((_QWORD *)v201 + 1) = "md::ls::UniqueMaterialEmissiveTexture]";
    *((_QWORD *)v201 + 2) = 37;
    v212 = v201 + 24;
    goto LABEL_361;
  }
  v213 = *a1;
  v214 = 0xAAAAAAAAAAAAAAABLL * ((v201 - *a1) >> 3);
  v215 = v214 + 1;
  if (v214 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (_QWORD)v213) >> 3);
  if (2 * v216 > v215)
    v215 = 2 * v216;
  if (v216 >= 0x555555555555555)
    v217 = 0xAAAAAAAAAAAAAAALL;
  else
    v217 = v215;
  if (v217)
  {
    if (v217 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v218 = (char *)operator new(24 * v217);
  }
  else
  {
    v218 = 0;
  }
  v219 = &v218[24 * v214];
  v220 = &v218[24 * v217];
  *(_QWORD *)v219 = 0x1202E9D2D9704CABLL;
  *((_QWORD *)v219 + 1) = "md::ls::UniqueMaterialEmissiveTexture]";
  *((_QWORD *)v219 + 2) = 37;
  v212 = v219 + 24;
  if (v201 == v213)
  {
    *a1 = v219;
    a1[1] = v212;
    a1[2] = v220;
LABEL_360:
    operator delete(v201);
    goto LABEL_361;
  }
  do
  {
    v221 = *(_OWORD *)(v201 - 24);
    *((_QWORD *)v219 - 1) = *((_QWORD *)v201 - 1);
    *(_OWORD *)(v219 - 24) = v221;
    v219 -= 24;
    v201 -= 24;
  }
  while (v201 != v213);
  v201 = *a1;
  *a1 = v219;
  a1[1] = v212;
  a1[2] = v220;
  if (v201)
    goto LABEL_360;
LABEL_361:
  a1[1] = v212;
  v222 = (unint64_t)a1[2];
  if ((unint64_t)v212 < v222)
  {
    *(_QWORD *)v212 = 0xCF2EB3C843EAD89ALL;
    *((_QWORD *)v212 + 1) = "md::ls::UniqueMaterialDiffuseTexture]";
    *((_QWORD *)v212 + 2) = 36;
    v223 = v212 + 24;
    goto LABEL_379;
  }
  v224 = *a1;
  v225 = 0xAAAAAAAAAAAAAAABLL * ((v212 - *a1) >> 3);
  v226 = v225 + 1;
  if (v225 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - (_QWORD)v224) >> 3);
  if (2 * v227 > v226)
    v226 = 2 * v227;
  if (v227 >= 0x555555555555555)
    v228 = 0xAAAAAAAAAAAAAAALL;
  else
    v228 = v226;
  if (v228)
  {
    if (v228 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v229 = (char *)operator new(24 * v228);
  }
  else
  {
    v229 = 0;
  }
  v230 = &v229[24 * v225];
  v231 = &v229[24 * v228];
  *(_QWORD *)v230 = 0xCF2EB3C843EAD89ALL;
  *((_QWORD *)v230 + 1) = "md::ls::UniqueMaterialDiffuseTexture]";
  *((_QWORD *)v230 + 2) = 36;
  v223 = v230 + 24;
  if (v212 == v224)
  {
    *a1 = v230;
    a1[1] = v223;
    a1[2] = v231;
LABEL_378:
    operator delete(v212);
    goto LABEL_379;
  }
  do
  {
    v232 = *(_OWORD *)(v212 - 24);
    *((_QWORD *)v230 - 1) = *((_QWORD *)v212 - 1);
    *(_OWORD *)(v230 - 24) = v232;
    v230 -= 24;
    v212 -= 24;
  }
  while (v212 != v224);
  v212 = *a1;
  *a1 = v230;
  a1[1] = v223;
  a1[2] = v231;
  if (v212)
    goto LABEL_378;
LABEL_379:
  a1[1] = v223;
  v233 = (unint64_t)a1[2];
  if ((unint64_t)v223 < v233)
  {
    *(_QWORD *)v223 = 0x9A2CF0F3E5B1FB4ELL;
    *((_QWORD *)v223 + 1) = "md::ls::TexturesToDisconnect]";
    *((_QWORD *)v223 + 2) = 28;
    v234 = v223 + 24;
    goto LABEL_397;
  }
  v235 = *a1;
  v236 = 0xAAAAAAAAAAAAAAABLL * ((v223 - *a1) >> 3);
  v237 = v236 + 1;
  if (v236 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_416;
  v238 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v233 - (_QWORD)v235) >> 3);
  if (2 * v238 > v237)
    v237 = 2 * v238;
  if (v238 >= 0x555555555555555)
    v239 = 0xAAAAAAAAAAAAAAALL;
  else
    v239 = v237;
  if (v239)
  {
    if (v239 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_417;
    v240 = (char *)operator new(24 * v239);
  }
  else
  {
    v240 = 0;
  }
  v241 = &v240[24 * v236];
  v242 = &v240[24 * v239];
  *(_QWORD *)v241 = 0x9A2CF0F3E5B1FB4ELL;
  *((_QWORD *)v241 + 1) = "md::ls::TexturesToDisconnect]";
  *((_QWORD *)v241 + 2) = 28;
  v234 = v241 + 24;
  if (v223 == v235)
  {
    *a1 = v241;
    a1[1] = v234;
    a1[2] = v242;
LABEL_396:
    operator delete(v223);
    goto LABEL_397;
  }
  do
  {
    v243 = *(_OWORD *)(v223 - 24);
    *((_QWORD *)v241 - 1) = *((_QWORD *)v223 - 1);
    *(_OWORD *)(v241 - 24) = v243;
    v241 -= 24;
    v223 -= 24;
  }
  while (v223 != v235);
  v223 = *a1;
  *a1 = v241;
  a1[1] = v234;
  a1[2] = v242;
  if (v223)
    goto LABEL_396;
LABEL_397:
  a1[1] = v234;
  v244 = (unint64_t)a1[2];
  if ((unint64_t)v234 < v244)
  {
    *(_QWORD *)v234 = 0xE103B5C60804137ELL;
    *((_QWORD *)v234 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v234 + 2) = 27;
    v245 = v234 + 24;
    goto LABEL_415;
  }
  v246 = *a1;
  v247 = 0xAAAAAAAAAAAAAAABLL * ((v234 - *a1) >> 3);
  v248 = v247 + 1;
  if (v247 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_416:
    abort();
  v249 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v244 - (_QWORD)v246) >> 3);
  if (2 * v249 > v248)
    v248 = 2 * v249;
  if (v249 >= 0x555555555555555)
    v250 = 0xAAAAAAAAAAAAAAALL;
  else
    v250 = v248;
  if (v250)
  {
    if (v250 <= 0xAAAAAAAAAAAAAAALL)
    {
      v251 = (char *)operator new(24 * v250);
      goto LABEL_409;
    }
LABEL_417:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v251 = 0;
LABEL_409:
  v252 = &v251[24 * v247];
  v253 = &v251[24 * v250];
  *(_QWORD *)v252 = 0xE103B5C60804137ELL;
  *((_QWORD *)v252 + 1) = "md::ls::ColorRampDataHandle]";
  *((_QWORD *)v252 + 2) = 27;
  v245 = v252 + 24;
  if (v234 == v246)
  {
    *a1 = v252;
    a1[1] = v245;
    a1[2] = v253;
LABEL_414:
    operator delete(v234);
    goto LABEL_415;
  }
  do
  {
    v254 = *(_OWORD *)(v234 - 24);
    *((_QWORD *)v252 - 1) = *((_QWORD *)v234 - 1);
    *(_OWORD *)(v252 - 24) = v254;
    v252 -= 24;
    v234 -= 24;
  }
  while (v234 != v246);
  v234 = *a1;
  *a1 = v252;
  a1[1] = v245;
  a1[2] = v253;
  if (v234)
    goto LABEL_414;
LABEL_415:
  a1[1] = v245;
}

void sub_19F752918(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283E30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283E30;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1},std::allocator<md::ita::DisconnectComponents &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DisconnectComponents>(md::ita::DisconnectComponents &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xDACEFB85CDF2B135;
  v2[1] = "md::ls::RequestReset]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB46B0;
  v2[4] = "md::ls::PendingDeletion]";
  v2[5] = 23;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DisconnectComponents>,std::allocator<ecs2::ForwardToExecute<md::ita::DisconnectComponents>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::DisconnectComponents>,std::allocator<ecs2::ForwardToExecute<md::ita::DisconnectComponents>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276798;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DisconnectComponents>,std::allocator<ecs2::ForwardToExecute<md::ita::DisconnectComponents>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276798;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DisconnectComponents>,std::allocator<ecs2::ForwardToExecute<md::ita::DisconnectComponents>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  md::MaterialResourceStore *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  md::MaterialResourceStore *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t (***v33)();
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t (***v37)();
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t result;
  md::MaterialResourceStore *v46;
  md::MaterialResourceStore *v47;
  md::MaterialResourceStore *v48;
  uint64_t (**v49)();
  md::MaterialResourceStore *v50;
  md::MaterialResourceStore **v51;
  uint64_t (***v52)();
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (md::MaterialResourceStore *)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274C08;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4274CC8;
  v5[1] = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4274D28;
  v6[1] = a2;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E4274CF8;
  v7[1] = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E4274D88;
  v8[1] = a2;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E4274D58;
  v9[1] = a2;
  v10 = **(_QWORD **)v3;
  v11 = *(_QWORD **)v10;
  v12 = *(_QWORD **)(v10 + 8);
  if (v11 != v12)
  {
    while (*v11 != 0x41D4E9297E100630)
    {
      v11 += 5;
      if (v11 == v12)
        goto LABEL_12;
    }
  }
  if (v11 == v12)
  {
LABEL_12:
    v46 = 0;
  }
  else
  {
    v13 = (std::__shared_weak_count *)v11[4];
    v46 = (md::MaterialResourceStore *)v11[3];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v17 = **(_QWORD **)v3;
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0x4EDAD23DFB014132)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_24;
    }
  }
  if (v18 == v19)
  {
LABEL_24:
    v47 = 0;
  }
  else
  {
    v20 = (std::__shared_weak_count *)v18[4];
    v47 = (md::MaterialResourceStore *)v18[3];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v48 = 0;
  v24 = **(_QWORD **)v3;
  v25 = *(_QWORD **)v24;
  v26 = *(_QWORD **)(v24 + 8);
  if (v25 != v26)
  {
    while (*v25 != 0x348A0B0E758C07C2)
    {
      v25 += 5;
      if (v25 == v26)
        goto LABEL_36;
    }
  }
  if (v25 == v26)
  {
LABEL_36:
    v27 = 0;
  }
  else
  {
    v27 = (md::MaterialResourceStore *)v25[3];
    v28 = (std::__shared_weak_count *)v25[4];
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v48 = v27;
  v32 = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v49 = &off_1E427B658;
  v50 = v3;
  v52 = &v49;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v49);
  v33 = v52;
  if (v52 == &v49)
  {
    v34 = 4;
    v33 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_42;
    v34 = 5;
  }
  (*v33)[v34]();
LABEL_42:
  v49 = &off_1E427B9B8;
  v50 = v47;
  v52 = &v49;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v49);
  v35 = v52;
  if (v52 == &v49)
  {
    v36 = 4;
    v35 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_47;
    v36 = 5;
  }
  (*v35)[v36]();
LABEL_47:
  v49 = &off_1E427BA00;
  v50 = v46;
  v52 = &v49;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v6 + 16))(v6, &v49);
  v37 = v52;
  if (v52 == &v49)
  {
    v38 = 4;
    v37 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_52;
    v38 = 5;
  }
  (*v37)[v38]();
LABEL_52:
  v49 = &off_1E427B970;
  v50 = v27;
  v52 = &v49;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v7 + 16))(v7, &v49);
  v39 = v52;
  if (v52 == &v49)
  {
    v40 = 4;
    v39 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_57;
    v40 = 5;
  }
  (*v39)[v40]();
LABEL_57:
  v49 = &off_1E427B6A0;
  v50 = (md::MaterialResourceStore *)&v48;
  v52 = &v49;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v8 + 16))(v8, &v49);
  v41 = v52;
  if (v52 == &v49)
  {
    v42 = 4;
    v41 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_62;
    v42 = 5;
  }
  (*v41)[v42]();
LABEL_62:
  v49 = &off_1E427B6E8;
  v50 = v3;
  v51 = &v48;
  v52 = &v49;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v9 + 16))(v9, &v49);
  v43 = v52;
  if (v52 == &v49)
  {
    v44 = 4;
    v43 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_67;
    v44 = 5;
  }
  (*v43)[v44]();
LABEL_67:
  if ((v32 & 1) == 0)
    md::MaterialResourceStore::reset(v47);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)v3 = 0;
  return result;
}

void sub_19F753030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a15;
  if (a15 == v21)
  {
    v24 = 4;
    v23 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_19F7530E8()
{
  JUMPOUT(0x19F753080);
}

void sub_19F7530F0()
{
  JUMPOUT(0x19F753090);
}

void sub_19F7530F8()
{
  JUMPOUT(0x19F7530A0);
}

void sub_19F753100()
{
  JUMPOUT(0x19F7530B0);
}

void sub_19F753108()
{
  JUMPOUT(0x19F7530C0);
}

void sub_19F753110()
{
  JUMPOUT(0x19F7530D0);
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TexturesToDisconnect>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 24 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TexturesToDisconnect>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *result;
  uint64_t v109;
  uint64_t v111[7];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  gdc::Registry::access<gdc::ecs::Access<gdc::Read<md::ls::PendingDeletion const>,gdc::Write<md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>>>(v111, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v2 = (_QWORD *)v111[0];
  v3 = (_QWORD *)v111[1];
  v4 = (_QWORD *)v111[2];
  v5 = (_QWORD *)v111[3];
  v6 = (_QWORD *)v111[4];
  v7 = (_QWORD *)v111[5];
  v8 = (_QWORD *)v111[6];
  v9 = v111[0] + 32;
  if (!v111[0])
    v9 = 0;
  v11 = *(unint64_t **)(v9 + 24);
  v10 = *(uint64_t **)(v9 + 32);
  v109 = v9;
  if (v10 == (uint64_t *)v11)
    goto LABEL_23;
  v12 = *((unsigned int *)v11 + 1);
  v13 = *(_QWORD *)(v111[0] + 32);
  v14 = (*(_QWORD *)(v111[0] + 40) - v13) >> 3;
  if (v12 >> 7 < v14)
  {
    v15 = *(_QWORD *)(v13 + 8 * (v12 >> 7));
    if (v15)
    {
      v16 = *(unsigned __int16 *)(v15 + 2 * (v12 & 0x7F));
      v18 = *(_QWORD *)(v111[0] + 56);
      v17 = *(_QWORD *)(v111[0] + 64);
      if (v16 < (v17 - v18) >> 3)
      {
        v19 = v18 + 8 * v16;
        if (v19 != v17 && *(_DWORD *)(v19 + 4) == (_DWORD)v12)
          goto LABEL_23;
      }
    }
  }
  v21 = (uint64_t *)(v11 + 1);
  do
  {
    if (v21 == v10)
      goto LABEL_116;
    v24 = *((unsigned int *)v21 + 1);
    if (v24 >> 7 >= v14)
    {
      v22 = *(_QWORD *)(v111[0] + 64);
LABEL_13:
      v23 = v22;
      goto LABEL_14;
    }
    v25 = *(_QWORD *)(v13 + 8 * (v24 >> 7));
    v22 = *(_QWORD *)(v111[0] + 64);
    if (!v25)
      goto LABEL_13;
    v26 = *(unsigned __int16 *)(v25 + 2 * (v24 & 0x7F));
    v27 = *(_QWORD *)(v111[0] + 56);
    if (v26 >= (v22 - v27) >> 3)
      goto LABEL_13;
    v28 = v27 + 8 * v26;
    if (*(_DWORD *)(v28 + 4) == (_DWORD)v24)
      v23 = v28;
    else
      v23 = *(_QWORD *)(v111[0] + 64);
LABEL_14:
    ++v21;
  }
  while (v23 == v22);
  v11 = (unint64_t *)(v21 - 1);
LABEL_23:
  if (v10 == (uint64_t *)v11)
  {
LABEL_116:
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    *result = 0xFFFFFFFF00000000;
    return result;
  }
  v29 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_27:
  *v29 = *v11;
  v31 = *v11;
  v32 = HIDWORD(*v11);
  v33 = *v11 >> 39;
  v34 = v2[4];
  if (v33 < (v2[5] - v34) >> 3
    && (v35 = *(_QWORD *)(v34 + 8 * v33)) != 0
    && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v31) & 0x7F)), v38 = v2[7], v37 = v2[8], v36 < (v37 - v38) >> 3)
    && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v32) : (v40 = 0), v40))
  {
    v41 = v2[11];
    v42 = v2[10] + v36;
  }
  else
  {
    v41 = v2[11];
    v42 = v41;
  }
  if (v42 == v41)
    v43 = 0;
  else
    v43 = v42;
  v44 = v3[4];
  if (v33 < (v3[5] - v44) >> 3
    && (v45 = *(_QWORD *)(v44 + 8 * v33)) != 0
    && (v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v31) & 0x7F)), v48 = v3[7], v47 = v3[8], v46 < (v47 - v48) >> 3)
    && ((v49 = v48 + 8 * v46, v49 != v47) ? (v50 = *(_DWORD *)(v49 + 4) == (_DWORD)v32) : (v50 = 0), v50))
  {
    v51 = v3[11];
    v52 = v3[10] + 24 * v46;
  }
  else
  {
    v51 = v3[11];
    v52 = v51;
  }
  if (v52 == v51)
    v52 = 0;
  v53 = v4[4];
  if (v33 < (v4[5] - v53) >> 3
    && (v54 = *(_QWORD *)(v53 + 8 * v33)) != 0
    && (v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v31) & 0x7F)), v57 = v4[7], v56 = v4[8], v55 < (v56 - v57) >> 3)
    && ((v58 = v57 + 8 * v55, v58 != v56) ? (v59 = *(_DWORD *)(v58 + 4) == (_DWORD)v32) : (v59 = 0), v59))
  {
    v60 = v4[11];
    v61 = v4[10] + 8 * v55;
  }
  else
  {
    v60 = v4[11];
    v61 = v60;
  }
  if (v61 == v60)
    v61 = 0;
  v62 = v5[4];
  if (v33 < (v5[5] - v62) >> 3
    && (v63 = *(_QWORD *)(v62 + 8 * v33)) != 0
    && (v64 = *(unsigned __int16 *)(v63 + 2 * (HIDWORD(v31) & 0x7F)), v66 = v5[7], v65 = v5[8], v64 < (v65 - v66) >> 3)
    && ((v67 = v66 + 8 * v64, v67 != v65) ? (v68 = *(_DWORD *)(v67 + 4) == (_DWORD)v32) : (v68 = 0), v68))
  {
    v69 = v5[11];
    v70 = v5[10] + 8 * v64;
  }
  else
  {
    v69 = v5[11];
    v70 = v69;
  }
  if (v70 == v69)
    v70 = 0;
  v71 = v6[4];
  if (v33 < (v6[5] - v71) >> 3
    && (v72 = *(_QWORD *)(v71 + 8 * v33)) != 0
    && (v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v31) & 0x7F)), v75 = v6[7], v74 = v6[8], v73 < (v74 - v75) >> 3)
    && ((v76 = v75 + 8 * v73, v76 != v74) ? (v77 = *(_DWORD *)(v76 + 4) == (_DWORD)v32) : (v77 = 0), v77))
  {
    v78 = v6[11];
    v79 = v6[10] + 8 * v73;
  }
  else
  {
    v78 = v6[11];
    v79 = v78;
  }
  if (v79 == v78)
    v79 = 0;
  v80 = v7[4];
  if (v33 < (v7[5] - v80) >> 3
    && (v81 = *(_QWORD *)(v80 + 8 * v33)) != 0
    && (v82 = *(unsigned __int16 *)(v81 + 2 * (HIDWORD(v31) & 0x7F)), v84 = v7[7], v83 = v7[8], v82 < (v83 - v84) >> 3)
    && ((v85 = v84 + 8 * v82, v85 != v83) ? (v86 = *(_DWORD *)(v85 + 4) == (_DWORD)v32) : (v86 = 0), v86))
  {
    v87 = v7[11];
    v88 = v7[10] + 8 * v82;
  }
  else
  {
    v87 = v7[11];
    v88 = v87;
  }
  if (v88 == v87)
    v88 = 0;
  v89 = v8[4];
  if (v33 < (v8[5] - v89) >> 3
    && (v90 = *(_QWORD *)(v89 + 8 * v33)) != 0
    && (v91 = *(unsigned __int16 *)(v90 + 2 * (HIDWORD(v31) & 0x7F)), v93 = v8[7], v92 = v8[8], v91 < (v92 - v93) >> 3)
    && (v94 = v93 + 8 * v91, v94 != v92)
    && *(_DWORD *)(v94 + 4) == (_DWORD)v32)
  {
    v95 = v8[11];
    v96 = v8[10] + 8 * v91;
  }
  else
  {
    v95 = v8[11];
    v96 = v95;
  }
  if (v96 == v95)
    v97 = 0;
  else
    v97 = v96;
  v111[0] = v52;
  v116 = v61;
  v114 = v79;
  v115 = v70;
  v112 = v97;
  v113 = v88;
  v98 = *(_QWORD *)(a2 + 24);
  if (v98)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v98 + 48))(v98, v43, v111, &v116, &v115, &v114, &v113, &v112);
    v30 = *(uint64_t **)(v109 + 32);
    v99 = (uint64_t *)(v11 + 1);
    while (1)
    {
      if (v99 == v30)
      {
LABEL_26:
        v11 = (unint64_t *)v30;
        if (v10 == v30)
          goto LABEL_116;
        goto LABEL_27;
      }
      v102 = *((unsigned int *)v99 + 1);
      v103 = v2[4];
      if (v102 >> 7 >= (v2[5] - v103) >> 3)
      {
        v100 = v2[8];
      }
      else
      {
        v104 = *(_QWORD *)(v103 + 8 * (v102 >> 7));
        v100 = v2[8];
        if (v104)
        {
          v105 = *(unsigned __int16 *)(v104 + 2 * (v102 & 0x7F));
          v106 = v2[7];
          if (v105 < (v100 - v106) >> 3)
          {
            v107 = v106 + 8 * v105;
            if (*(_DWORD *)(v107 + 4) == (_DWORD)v102)
              v101 = v107;
            else
              v101 = v2[8];
            goto LABEL_102;
          }
        }
      }
      v101 = v100;
LABEL_102:
      ++v99;
      if (v101 != v100)
      {
        v30 = v99 - 1;
        goto LABEL_26;
      }
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (_QWORD *)ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::empty();
}

BOOL ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[7];

  gdc::Registry::access<gdc::ecs::Access<gdc::Read<md::ls::PendingDeletion const>,gdc::Write<md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>>>(v22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v1 = (_QWORD *)(v22[0] + 32);
  if (!v22[0])
    v1 = 0;
  v3 = v1[3];
  v2 = v1[4];
  if (v2 != v3)
  {
    v4 = *(unsigned int *)(v3 + 4);
    v5 = *(_QWORD *)(v22[0] + 32);
    v6 = (*(_QWORD *)(v22[0] + 40) - v5) >> 3;
    if (v4 >> 7 >= v6)
      goto LABEL_11;
    v7 = *(_QWORD *)(v5 + 8 * (v4 >> 7));
    if (!v7)
      goto LABEL_11;
    v8 = *(unsigned __int16 *)(v7 + 2 * (v4 & 0x7F));
    v10 = *(_QWORD *)(v22[0] + 56);
    v9 = *(_QWORD *)(v22[0] + 64);
    if (v8 >= (v9 - v10) >> 3)
      goto LABEL_11;
    v11 = v10 + 8 * v8;
    if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v4)
    {
LABEL_11:
      v13 = v3 + 8;
      while (1)
      {
        if (v13 == v2)
        {
          v3 = v2;
          return v2 == v3;
        }
        v16 = *(unsigned int *)(v13 + 4);
        if (v16 >> 7 >= v6)
        {
          v14 = *(_QWORD *)(v22[0] + 64);
        }
        else
        {
          v17 = *(_QWORD *)(v5 + 8 * (v16 >> 7));
          v14 = *(_QWORD *)(v22[0] + 64);
          if (v17)
          {
            v18 = *(unsigned __int16 *)(v17 + 2 * (v16 & 0x7F));
            v19 = *(_QWORD *)(v22[0] + 56);
            if (v18 < (v14 - v19) >> 3)
            {
              v20 = v19 + 8 * v18;
              if (*(_DWORD *)(v20 + 4) == (_DWORD)v16)
                v15 = v20;
              else
                v15 = *(_QWORD *)(v22[0] + 64);
              goto LABEL_14;
            }
          }
        }
        v15 = v14;
LABEL_14:
        v13 += 8;
        if (v15 != v14)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
    }
  }
  return v2 == v3;
}

uint64_t gdc::Registry::access<gdc::ecs::Access<gdc::Read<md::ls::PendingDeletion const>,gdc::Write<md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = gdc::Registry::storage<md::ls::PendingDeletion>(a2);
  v5 = gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(a2);
  v6 = gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(a2);
  v7 = gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(a2);
  v8 = gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(a2);
  v9 = gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(a2);
  result = gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(a2);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = result;
  return result;
}

void sub_19F753F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  BOOL v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *result;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165[12];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v2);
  gdc::Registry::storageTuple<md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(v165, v2);
  v4 = (_QWORD *)v165[5];
  v6 = (_QWORD *)v165[6];
  v5 = (_QWORD *)v165[7];
  v7 = (_QWORD *)v165[8];
  v8 = (_QWORD *)v165[9];
  v9 = (_QWORD *)v165[10];
  v10 = (_QWORD *)v165[11];
  v12 = (unint64_t *)v3[7];
  v11 = (uint64_t *)v3[8];
  v13 = (char *)v11 - (char *)v12;
  if (v11 != (uint64_t *)v12)
  {
    if ((v14 = *((unsigned int *)v12 + 1), v15 = v3[4], v16 = (v3[5] - v15) >> 3, v14 >> 7 >= v16)
      || (v17 = *(_QWORD *)(v15 + 8 * (v14 >> 7))) == 0
      || (v18 = *(unsigned __int16 *)(v17 + 2 * (v14 & 0x7F)), v18 >= v13 >> 3)
      || ((v19 = (uint64_t *)&v12[v18], v19 != v11) ? (v20 = *((_DWORD *)v19 + 1) == (_DWORD)v14) : (v20 = 0), !v20))
    {
      v21 = v13 >> 3;
      v22 = (uint64_t *)(v12 + 1);
      while (v22 != v11)
      {
        v23 = *((unsigned int *)v22 + 1);
        v24 = (uint64_t *)v3[8];
        if (v23 >> 7 < v16)
        {
          v25 = *(_QWORD *)(v15 + 8 * (v23 >> 7));
          v24 = (uint64_t *)v3[8];
          if (v25)
          {
            v26 = *(unsigned __int16 *)(v25 + 2 * (v23 & 0x7F));
            v24 = (uint64_t *)v3[8];
            if (v21 > v26)
            {
              v24 = (uint64_t *)&v12[v26];
              if (*((_DWORD *)v24 + 1) != (_DWORD)v23)
                v24 = (uint64_t *)v3[8];
            }
          }
        }
        ++v22;
        if (v24 != v11)
        {
          v12 = (unint64_t *)(v22 - 1);
          goto LABEL_19;
        }
      }
      goto LABEL_164;
    }
  }
LABEL_19:
  if (v11 == (uint64_t *)v12)
  {
LABEL_164:
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    *result = 0xFFFFFFFF00000000;
    return result;
  }
  v162 = v165[1];
  v163 = v165[0];
  v160 = v165[3];
  v161 = v165[2];
  v159 = v165[4];
  v27 = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v29 = (_QWORD *)v159;
  v28 = (_QWORD *)v160;
  v31 = (_QWORD *)v161;
  v30 = (_QWORD *)v162;
  v32 = (_QWORD *)v163;
  v158 = (_QWORD *)v27;
  while (1)
  {
    *v158 = *v12;
    v34 = *v12;
    v35 = HIDWORD(*v12);
    v36 = *v12 >> 39;
    v37 = v3[4];
    if (v36 < (v3[5] - v37) >> 3
      && (v38 = *(_QWORD *)(v37 + 8 * v36)) != 0
      && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v34) & 0x7F)), v41 = v3[7], v40 = v3[8], v39 < (v40 - v41) >> 3)
      && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v35) : (v43 = 0), v43))
    {
      v44 = v3[11];
      v45 = v3[10] + v39;
    }
    else
    {
      v44 = v3[11];
      v45 = v44;
    }
    if (v45 == v44)
      v46 = 0;
    else
      v46 = v45;
    v47 = v32[4];
    if (v36 < (v32[5] - v47) >> 3
      && (v48 = *(_QWORD *)(v47 + 8 * v36)) != 0
      && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v34) & 0x7F)),
          v51 = v32[7],
          v50 = v32[8],
          v49 < (v50 - v51) >> 3)
      && ((v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == (_DWORD)v35) : (v53 = 0), v53))
    {
      v54 = v32[11];
      v55 = v32[10] + 16 * v49;
    }
    else
    {
      v54 = v32[11];
      v55 = v54;
    }
    if (v55 == v54)
      v55 = 0;
    v56 = v30[4];
    if (v36 < (v30[5] - v56) >> 3
      && (v57 = *(_QWORD *)(v56 + 8 * v36)) != 0
      && (v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v34) & 0x7F)),
          v60 = v30[7],
          v59 = v30[8],
          v58 < (v59 - v60) >> 3)
      && ((v61 = v60 + 8 * v58, v61 != v59) ? (v62 = *(_DWORD *)(v61 + 4) == (_DWORD)v35) : (v62 = 0), v62))
    {
      v63 = v30[11];
      v64 = v30[10] + 8 * v58;
    }
    else
    {
      v63 = v30[11];
      v64 = v63;
    }
    if (v64 == v63)
      v64 = 0;
    v65 = v31[4];
    if (v36 < (v31[5] - v65) >> 3
      && (v66 = *(_QWORD *)(v65 + 8 * v36)) != 0
      && (v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(v34) & 0x7F)),
          v69 = v31[7],
          v68 = v31[8],
          v67 < (v68 - v69) >> 3)
      && ((v70 = v69 + 8 * v67, v70 != v68) ? (v71 = *(_DWORD *)(v70 + 4) == (_DWORD)v35) : (v71 = 0), v71))
    {
      v72 = v31[11];
      v73 = v31[10] + 8 * v67;
    }
    else
    {
      v72 = v31[11];
      v73 = v72;
    }
    if (v73 == v72)
      v73 = 0;
    v74 = v28[4];
    if (v36 < (v28[5] - v74) >> 3
      && (v75 = *(_QWORD *)(v74 + 8 * v36)) != 0
      && (v76 = *(unsigned __int16 *)(v75 + 2 * (HIDWORD(v34) & 0x7F)),
          v78 = v28[7],
          v77 = v28[8],
          v76 < (v77 - v78) >> 3)
      && ((v79 = v78 + 8 * v76, v79 != v77) ? (v80 = *(_DWORD *)(v79 + 4) == (_DWORD)v35) : (v80 = 0), v80))
    {
      v81 = v28[11];
      v82 = v28[10] + 8 * v76;
    }
    else
    {
      v81 = v28[11];
      v82 = v81;
    }
    if (v82 == v81)
      v82 = 0;
    v83 = v29[4];
    if (v36 < (v29[5] - v83) >> 3
      && (v84 = *(_QWORD *)(v83 + 8 * v36)) != 0
      && (v85 = *(unsigned __int16 *)(v84 + 2 * (HIDWORD(v34) & 0x7F)),
          v87 = v29[7],
          v86 = v29[8],
          v85 < (v86 - v87) >> 3)
      && ((v88 = v87 + 8 * v85, v88 != v86) ? (v89 = *(_DWORD *)(v88 + 4) == (_DWORD)v35) : (v89 = 0), v89))
    {
      v90 = v29[11];
      v91 = v29[10] + 8 * v85;
    }
    else
    {
      v90 = v29[11];
      v91 = v90;
    }
    if (v91 == v90)
      v91 = 0;
    v92 = v4[4];
    if (v36 < (v4[5] - v92) >> 3
      && (v93 = *(_QWORD *)(v92 + 8 * v36)) != 0
      && (v94 = *(unsigned __int16 *)(v93 + 2 * (HIDWORD(v34) & 0x7F)), v95 = v4[7], v96 = v4[8], v94 < (v96 - v95) >> 3)
      && (v97 = v95 + 8 * v94, v97 != v96)
      && *(_DWORD *)(v97 + 4) == (_DWORD)v35)
    {
      v98 = v4[11];
      v99 = v4[10] + 8 * v94;
    }
    else
    {
      v98 = v4[11];
      v99 = v98;
    }
    if (v99 == v98)
      v99 = 0;
    v100 = v6[4];
    if (v36 < (v6[5] - v100) >> 3
      && (v101 = *(_QWORD *)(v100 + 8 * v36)) != 0
      && (v102 = *(unsigned __int16 *)(v101 + 2 * (HIDWORD(v34) & 0x7F)),
          v104 = v6[7],
          v103 = v6[8],
          v102 < (v103 - v104) >> 3)
      && (v105 = v104 + 8 * v102, v105 != v103)
      && *(_DWORD *)(v105 + 4) == (_DWORD)v35)
    {
      v106 = v6[11];
      v107 = v6[10] + 8 * v102;
    }
    else
    {
      v106 = v6[11];
      v107 = v106;
    }
    if (v107 == v106)
      v107 = 0;
    v108 = v5[4];
    if (v36 < (v5[5] - v108) >> 3
      && (v109 = *(_QWORD *)(v108 + 8 * v36)) != 0
      && (v110 = *(unsigned __int16 *)(v109 + 2 * (HIDWORD(v34) & 0x7F)),
          v112 = v5[7],
          v111 = v5[8],
          v110 < (v111 - v112) >> 3)
      && (v113 = v112 + 8 * v110, v113 != v111)
      && *(_DWORD *)(v113 + 4) == (_DWORD)v35)
    {
      v114 = v5[11];
      v115 = v5[10] + 8 * v110;
    }
    else
    {
      v114 = v5[11];
      v115 = v114;
    }
    if (v115 == v114)
      v115 = 0;
    v116 = v7[4];
    if (v36 < (v7[5] - v116) >> 3
      && (v117 = *(_QWORD *)(v116 + 8 * v36)) != 0
      && (v118 = *(unsigned __int16 *)(v117 + 2 * (HIDWORD(v34) & 0x7F)),
          v120 = v7[7],
          v119 = v7[8],
          v118 < (v119 - v120) >> 3)
      && (v121 = v120 + 8 * v118, v121 != v119)
      && *(_DWORD *)(v121 + 4) == (_DWORD)v35)
    {
      v122 = v7[11];
      v123 = v7[10] + 8 * v118;
    }
    else
    {
      v122 = v7[11];
      v123 = v122;
    }
    if (v123 == v122)
      v123 = 0;
    v124 = v8[4];
    if (v36 < (v8[5] - v124) >> 3
      && (v125 = *(_QWORD *)(v124 + 8 * v36)) != 0
      && (v126 = *(unsigned __int16 *)(v125 + 2 * (HIDWORD(v34) & 0x7F)),
          v128 = v8[7],
          v127 = v8[8],
          v126 < (v127 - v128) >> 3)
      && (v129 = v128 + 8 * v126, v129 != v127)
      && *(_DWORD *)(v129 + 4) == (_DWORD)v35)
    {
      v130 = v8[11];
      v131 = v8[10] + 8 * v126;
    }
    else
    {
      v130 = v8[11];
      v131 = v130;
    }
    if (v131 == v130)
      v131 = 0;
    v132 = v9[4];
    if (v36 < (v9[5] - v132) >> 3
      && (v133 = *(_QWORD *)(v132 + 8 * v36)) != 0
      && (v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v34) & 0x7F)),
          v136 = v9[7],
          v135 = v9[8],
          v134 < (v135 - v136) >> 3)
      && (v137 = v136 + 8 * v134, v137 != v135)
      && *(_DWORD *)(v137 + 4) == (_DWORD)v35)
    {
      v138 = v9[11];
      v139 = v9[10] + 8 * v134;
    }
    else
    {
      v138 = v9[11];
      v139 = v138;
    }
    if (v139 == v138)
      v139 = 0;
    v140 = v10[4];
    if (v36 < (v10[5] - v140) >> 3
      && (v141 = *(_QWORD *)(v140 + 8 * v36)) != 0
      && (v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v34) & 0x7F)),
          v143 = v10[7],
          v144 = v10[8],
          v142 < (v144 - v143) >> 3)
      && (v145 = v143 + 8 * v142, v145 != v144)
      && *(_DWORD *)(v145 + 4) == (_DWORD)v35)
    {
      v146 = v10[11];
      v147 = v10[10] + 8 * v142;
    }
    else
    {
      v146 = v10[11];
      v147 = v146;
    }
    v165[0] = v55;
    v148 = v147 == v146 ? 0 : v147;
    v175 = v73;
    v176 = v64;
    v173 = v91;
    v174 = v82;
    v171 = v107;
    v172 = v99;
    v169 = v123;
    v170 = v115;
    v167 = v139;
    v168 = v131;
    v166 = v148;
    v149 = *(_QWORD *)(a2 + 24);
    if (!v149)
      break;
    (*(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v149 + 48))(v149, v46, v165, &v176, &v175, &v174, &v173, &v172, &v171, &v170, &v169, &v168, &v167, &v166);
    v150 = v3[4];
    v151 = v3[7];
    v33 = (uint64_t *)v3[8];
    v152 = (uint64_t *)(v12 + 1);
    v30 = (_QWORD *)v162;
    v32 = (_QWORD *)v163;
    v28 = (_QWORD *)v160;
    v31 = (_QWORD *)v161;
    v29 = (_QWORD *)v159;
    while (v152 != v33)
    {
      v153 = *((unsigned int *)v152 + 1);
      v154 = v3[8];
      if (v153 >> 7 < (v3[5] - v150) >> 3)
      {
        v155 = *(_QWORD *)(v150 + 8 * (v153 >> 7));
        v154 = v3[8];
        if (v155)
        {
          v156 = *(unsigned __int16 *)(v155 + 2 * (v153 & 0x7F));
          v154 = v3[8];
          if (((uint64_t)v33 - v151) >> 3 > v156)
          {
            v154 = v151 + 8 * v156;
            if (*(_DWORD *)(v154 + 4) != (_DWORD)v153)
              v154 = v3[8];
          }
        }
      }
      ++v152;
      if ((uint64_t *)v154 != v33)
      {
        v33 = v152 - 1;
        break;
      }
    }
    v12 = (unint64_t *)v33;
    if (v11 == v33)
      goto LABEL_164;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (_QWORD *)ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>>::empty();
}

BOOL ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20[12];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v1);
  gdc::Registry::storageTuple<md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(v20, v1);
  v4 = v2[7];
  v3 = v2[8];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v6 = *(unsigned int *)(v4 + 4), v7 = v2[4], v8 = (v2[5] - v7) >> 3, v6 >> 7 >= v8)
      || (v9 = *(_QWORD *)(v7 + 8 * (v6 >> 7))) == 0
      || (v10 = *(unsigned __int16 *)(v9 + 2 * (v6 & 0x7F)), v10 >= v5 >> 3)
      || ((v11 = v4 + 8 * v10, v11 != v3) ? (v12 = *(_DWORD *)(v11 + 4) == (_DWORD)v6) : (v12 = 0), !v12))
    {
      v13 = v5 >> 3;
      v14 = v4 + 8;
      while (v14 != v3)
      {
        v15 = *(unsigned int *)(v14 + 4);
        v16 = v2[8];
        if (v15 >> 7 < v8)
        {
          v17 = *(_QWORD *)(v7 + 8 * (v15 >> 7));
          v16 = v2[8];
          if (v17)
          {
            v18 = *(unsigned __int16 *)(v17 + 2 * (v15 & 0x7F));
            v16 = v2[8];
            if (v13 > v18)
            {
              v16 = v4 + 8 * v18;
              if (*(_DWORD *)(v16 + 4) != (_DWORD)v15)
                v16 = v2[8];
            }
          }
        }
        v14 += 8;
        if (v16 != v3)
        {
          v4 = v14 - 8;
          return v3 == v4;
        }
      }
      v4 = v2[8];
    }
  }
  return v3 == v4;
}

uint64_t gdc::Registry::storageTuple<md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v4 = gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(a2);
  v40 = 0x6E0342375BBCD967;
  v5 = (_QWORD *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0x6E0342375BBCD967;
      if (*(_QWORD *)&v6 <= 0x6E0342375BBCD967uLL)
        v8 = 0x6E0342375BBCD967uLL % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0x6E0342375BBCD967;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == 0x6E0342375BBCD967)
            {
              if (v10[2] == 0x6E0342375BBCD967)
                goto LABEL_48;
            }
            else if ((v12 & (*(_QWORD *)&v6 - 1)) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == 0x6E0342375BBCD967)
          {
            if (v10[2] == 0x6E0342375BBCD967)
            {
LABEL_48:
              v13 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v6)
              v11 %= *(_QWORD *)&v6;
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::StyleRouteLineMaskConstantDataHandle]";
  *(_QWORD *)(v13 + 24) = 44;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4274208;
  *(_QWORD *)(v13 + 8) = 0x6E0342375BBCD967;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(a2 + 120), 0x6E0342375BBCD967uLL, &v40);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v37 = 0x6E0342375BBCD967;
  v38 = "md::ls::StyleRouteLineMaskConstantDataHandle]";
  v39 = 44;
  gdc::Registry::_registerStorageDataSignals(a2, 0x6E0342375BBCD967, (uint64_t)&v37, (uint64_t *)(v13 + 104));
  v6 = *(int8x8_t *)(a2 + 128);
LABEL_24:
  v40 = 0x7DD7F5B95CA3FF88;
  v35 = v4;
  v36 = a1;
  if (v6)
  {
    v16 = (uint8x8_t)vcnt_s8(v6);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = 0x7DD7F5B95CA3FF88;
      if (*(_QWORD *)&v6 <= 0x7DD7F5B95CA3FF88uLL)
        v17 = 0x7DD7F5B95CA3FF88uLL % *(_QWORD *)&v6;
    }
    else
    {
      v17 = (*(_QWORD *)&v6 - 1) & 0x7DD7F5B95CA3FF88;
    }
    v18 = *(_QWORD **)(*v5 + 8 * v17);
    if (v18)
    {
      v19 = (_QWORD *)*v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          v20 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v22 = v19[1];
            if (v22 == 0x7DD7F5B95CA3FF88)
            {
              if (v19[2] == 0x7DD7F5B95CA3FF88)
                goto LABEL_49;
            }
            else if ((v22 & v20) != v17)
            {
              goto LABEL_44;
            }
            v19 = (_QWORD *)*v19;
            if (!v19)
              goto LABEL_44;
          }
        }
        do
        {
          v21 = v19[1];
          if (v21 == 0x7DD7F5B95CA3FF88)
          {
            if (v19[2] == 0x7DD7F5B95CA3FF88)
            {
LABEL_49:
              v23 = v19[3];
              goto LABEL_47;
            }
          }
          else
          {
            if (v21 >= *(_QWORD *)&v6)
              v21 %= *(_QWORD *)&v6;
            if (v21 != v17)
              break;
          }
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_44:
  v23 = operator new();
  *(_QWORD *)(v23 + 16) = "md::ls::StyleConstantHandle]";
  *(_QWORD *)(v23 + 24) = 27;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 128) = 0u;
  *(_DWORD *)(v23 + 144) = 1065353216;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  *(_QWORD *)(v23 + 184) = 0;
  *(_DWORD *)(v23 + 192) = 1065353216;
  *(_OWORD *)(v23 + 200) = 0u;
  *(_OWORD *)(v23 + 216) = 0u;
  *(_QWORD *)(v23 + 232) = 0;
  *(_DWORD *)(v23 + 240) = 1065353216;
  *(_QWORD *)v23 = &off_1E42723A8;
  *(_QWORD *)(v23 + 8) = 0x7DD7F5B95CA3FF88;
  *(_QWORD *)(v23 + 248) = a2;
  v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(a2 + 120), 0x7DD7F5B95CA3FF88uLL, &v40);
  v25 = v24[3];
  v24[3] = v23;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v37 = 0x7DD7F5B95CA3FF88;
  v38 = "md::ls::StyleConstantHandle]";
  v39 = 27;
  gdc::Registry::_registerStorageDataSignals(a2, 0x7DD7F5B95CA3FF88, (uint64_t)&v37, (uint64_t *)(v23 + 104));
LABEL_47:
  v34 = gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(a2);
  v26 = gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(a2);
  v27 = gdc::Registry::storage<md::ls::ColorRampDataHandle>(a2);
  v28 = gdc::Registry::storage<md::ls::NormalsHandle>(a2);
  v29 = gdc::Registry::storage<md::ls::UVsHandle>(a2);
  v30 = gdc::Registry::storage<md::ls::ElevationHandle>(a2);
  v31 = gdc::Registry::storage<md::ls::InstanceTransformHandle>(a2);
  v32 = gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(a2);
  result = gdc::Registry::storage<md::ls::NeedsClimateTint>(a2);
  *v36 = v35;
  v36[1] = v13;
  v36[2] = v23;
  v36[3] = v34;
  v36[4] = v26;
  v36[5] = v27;
  v36[6] = v28;
  v36[7] = v29;
  v36[8] = v30;
  v36[9] = v31;
  v36[10] = v32;
  v36[11] = result;
  return result;
}

void sub_19F754C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::StyleConstantHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleConstantHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleConstantHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleConstantHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *result;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RampMaterialData>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(v2);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueColorDataHandle>(v2);
  v10 = (unint64_t *)v3[7];
  v11 = (uint64_t *)v3[8];
  v12 = (char *)v11 - (char *)v10;
  if (v11 != (uint64_t *)v10)
  {
    if ((v13 = *((unsigned int *)v10 + 1), v14 = v3[4], v15 = (v3[5] - v14) >> 3, v13 >> 7 >= v15)
      || (v16 = *(_QWORD *)(v14 + 8 * (v13 >> 7))) == 0
      || (v17 = *(unsigned __int16 *)(v16 + 2 * (v13 & 0x7F)), v17 >= v12 >> 3)
      || ((v18 = (uint64_t *)&v10[v17], v18 != v11) ? (v19 = *((_DWORD *)v18 + 1) == (_DWORD)v13) : (v19 = 0), !v19))
    {
      v20 = v12 >> 3;
      v21 = (uint64_t *)(v10 + 1);
      while (v21 != v11)
      {
        v22 = *((unsigned int *)v21 + 1);
        v23 = (uint64_t *)v3[8];
        if (v22 >> 7 < v15)
        {
          v24 = *(_QWORD *)(v14 + 8 * (v22 >> 7));
          v23 = (uint64_t *)v3[8];
          if (v24)
          {
            v25 = *(unsigned __int16 *)(v24 + 2 * (v22 & 0x7F));
            v23 = (uint64_t *)v3[8];
            if (v20 > v25)
            {
              v23 = (uint64_t *)&v10[v25];
              if (*((_DWORD *)v23 + 1) != (_DWORD)v22)
                v23 = (uint64_t *)v3[8];
            }
          }
        }
        ++v21;
        if (v23 != v11)
        {
          v10 = (unint64_t *)(v21 - 1);
          goto LABEL_19;
        }
      }
      goto LABEL_110;
    }
  }
LABEL_19:
  if (v11 == (uint64_t *)v10)
  {
LABEL_110:
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    *result = 0xFFFFFFFF00000000;
    return result;
  }
  v26 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v26 = *v10;
    v28 = *v10;
    v29 = HIDWORD(*v10);
    v30 = *v10 >> 39;
    v31 = v3[4];
    if (v30 < (v3[5] - v31) >> 3
      && (v32 = *(_QWORD *)(v31 + 8 * v30)) != 0
      && (v33 = *(unsigned __int16 *)(v32 + 2 * (HIDWORD(v28) & 0x7F)), v35 = v3[7], v34 = v3[8], v33 < (v34 - v35) >> 3)
      && ((v36 = v35 + 8 * v33, v36 != v34) ? (v37 = *(_DWORD *)(v36 + 4) == (_DWORD)v29) : (v37 = 0), v37))
    {
      v38 = v3[11];
      v39 = v3[10] + v33;
    }
    else
    {
      v38 = v3[11];
      v39 = v38;
    }
    if (v39 == v38)
      v40 = 0;
    else
      v40 = v39;
    v41 = v4[4];
    if (v30 < (v4[5] - v41) >> 3
      && (v42 = *(_QWORD *)(v41 + 8 * v30)) != 0
      && (v43 = *(unsigned __int16 *)(v42 + 2 * (HIDWORD(v28) & 0x7F)), v45 = v4[7], v44 = v4[8], v43 < (v44 - v45) >> 3)
      && ((v46 = v45 + 8 * v43, v46 != v44) ? (v47 = *(_DWORD *)(v46 + 4) == (_DWORD)v29) : (v47 = 0), v47))
    {
      v48 = v4[11];
      v49 = v4[10] + 32 * v43;
    }
    else
    {
      v48 = v4[11];
      v49 = v48;
    }
    if (v49 == v48)
      v49 = 0;
    v50 = v5[4];
    if (v30 < (v5[5] - v50) >> 3
      && (v51 = *(_QWORD *)(v50 + 8 * v30)) != 0
      && (v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v28) & 0x7F)), v54 = v5[7], v53 = v5[8], v52 < (v53 - v54) >> 3)
      && ((v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == (_DWORD)v29) : (v56 = 0), v56))
    {
      v57 = v5[11];
      v58 = v5[10] + 32 * v52;
    }
    else
    {
      v57 = v5[11];
      v58 = v57;
    }
    if (v58 == v57)
      v58 = 0;
    v59 = v6[4];
    if (v30 < (v6[5] - v59) >> 3
      && (v60 = *(_QWORD *)(v59 + 8 * v30)) != 0
      && (v61 = *(unsigned __int16 *)(v60 + 2 * (HIDWORD(v28) & 0x7F)), v63 = v6[7], v62 = v6[8], v61 < (v62 - v63) >> 3)
      && ((v64 = v63 + 8 * v61, v64 != v62) ? (v65 = *(_DWORD *)(v64 + 4) == (_DWORD)v29) : (v65 = 0), v65))
    {
      v66 = v6[11];
      v67 = v6[10] + 8 * v61;
    }
    else
    {
      v66 = v6[11];
      v67 = v66;
    }
    if (v67 == v66)
      v67 = 0;
    v68 = v7[4];
    if (v30 < (v7[5] - v68) >> 3
      && (v69 = *(_QWORD *)(v68 + 8 * v30)) != 0
      && (v70 = *(unsigned __int16 *)(v69 + 2 * (HIDWORD(v28) & 0x7F)), v72 = v7[7], v71 = v7[8], v70 < (v71 - v72) >> 3)
      && ((v73 = v72 + 8 * v70, v73 != v71) ? (v74 = *(_DWORD *)(v73 + 4) == (_DWORD)v29) : (v74 = 0), v74))
    {
      v75 = v7[11];
      v76 = v7[10] + 16 * v70;
    }
    else
    {
      v75 = v7[11];
      v76 = v75;
    }
    if (v76 == v75)
      v76 = 0;
    if ((v77 = v8[4], v30 < (v8[5] - v77) >> 3)
      && (v78 = *(_QWORD *)(v77 + 8 * v30)) != 0
      && (v79 = *(unsigned __int16 *)(v78 + 2 * (HIDWORD(v28) & 0x7F)), v81 = v8[7], v80 = v8[8], v79 < (v80 - v81) >> 3)
      && ((v82 = v81 + 8 * v79, v82 != v80) ? (v83 = *(_DWORD *)(v82 + 4) == (_DWORD)v29) : (v83 = 0), v83))
    {
      v84 = v8[11];
      v85 = v8[10] + 24 * v79;
    }
    else
    {
      v84 = v8[11];
      v85 = v84;
    }
    if (v85 == v84)
      v85 = 0;
    v86 = v9[4];
    if (v30 < (v9[5] - v86) >> 3
      && (v87 = *(_QWORD *)(v86 + 8 * v30)) != 0
      && (v88 = *(unsigned __int16 *)(v87 + 2 * (HIDWORD(v28) & 0x7F)), v90 = v9[7], v89 = v9[8], v88 < (v89 - v90) >> 3)
      && (v91 = v90 + 8 * v88, v91 != v89)
      && *(_DWORD *)(v91 + 4) == (_DWORD)v29)
    {
      v92 = v9[11];
      v93 = v9[10] + 8 * v88;
    }
    else
    {
      v92 = v9[11];
      v93 = v92;
    }
    v94 = v93 == v92 ? 0 : v93;
    v109 = v58;
    v110 = v49;
    v107 = v76;
    v108 = v67;
    v105 = v94;
    v106 = v85;
    v95 = *(_QWORD *)(a2 + 24);
    if (!v95)
      break;
    (*(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v95 + 48))(v95, v40, &v110, &v109, &v108, &v107, &v106, &v105);
    v96 = v3[4];
    v97 = v3[7];
    v27 = (uint64_t *)v3[8];
    v98 = (uint64_t *)(v10 + 1);
    while (v98 != v27)
    {
      v99 = *((unsigned int *)v98 + 1);
      v100 = v3[8];
      if (v99 >> 7 < (v3[5] - v96) >> 3)
      {
        v101 = *(_QWORD *)(v96 + 8 * (v99 >> 7));
        v100 = v3[8];
        if (v101)
        {
          v102 = *(unsigned __int16 *)(v101 + 2 * (v99 & 0x7F));
          v100 = v3[8];
          if (((uint64_t)v27 - v97) >> 3 > v102)
          {
            v100 = v97 + 8 * v102;
            if (*(_DWORD *)(v100 + 4) != (_DWORD)v99)
              v100 = v3[8];
          }
        }
      }
      ++v98;
      if ((uint64_t *)v100 != v27)
      {
        v27 = v98 - 1;
        break;
      }
    }
    v10 = (unint64_t *)v27;
    if (v11 == v27)
      goto LABEL_110;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (_QWORD *)ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>>::empty();
}

BOOL ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::PendingDeletion>(v1);
  gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  gdc::Registry::storage<md::ls::RampMaterialData>(v1);
  gdc::Registry::storage<md::ls::ColorDataHandle>(v1);
  gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(v1);
  gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(v1);
  gdc::Registry::storage<md::ls::UniqueColorDataHandle>(v1);
  v4 = v2[7];
  v3 = v2[8];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v6 = *(unsigned int *)(v4 + 4), v7 = v2[4], v8 = (v2[5] - v7) >> 3, v6 >> 7 >= v8)
      || (v9 = *(_QWORD *)(v7 + 8 * (v6 >> 7))) == 0
      || (v10 = *(unsigned __int16 *)(v9 + 2 * (v6 & 0x7F)), v10 >= v5 >> 3)
      || ((v11 = v4 + 8 * v10, v11 != v3) ? (v12 = *(_DWORD *)(v11 + 4) == (_DWORD)v6) : (v12 = 0), !v12))
    {
      v13 = v5 >> 3;
      v14 = v4 + 8;
      while (v14 != v3)
      {
        v15 = *(unsigned int *)(v14 + 4);
        v16 = v2[8];
        if (v15 >> 7 < v8)
        {
          v17 = *(_QWORD *)(v7 + 8 * (v15 >> 7));
          v16 = v2[8];
          if (v17)
          {
            v18 = *(unsigned __int16 *)(v17 + 2 * (v15 & 0x7F));
            v16 = v2[8];
            if (v13 > v18)
            {
              v16 = v4 + 8 * v18;
              if (*(_DWORD *)(v16 + 4) != (_DWORD)v15)
                v16 = v2[8];
            }
          }
        }
        v14 += 8;
        if (v16 != v3)
        {
          v4 = v14 - 8;
          return v3 == v4;
        }
      }
      v4 = v2[8];
    }
  }
  return v3 == v4;
}

void ecs2::Query<md::ls::RequestReset const&>::Model<ecs2::RuntimeQuery<md::ls::RequestReset const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::RequestReset const&>::Model<ecs2::RuntimeQuery<md::ls::RequestReset const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RequestReset>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::RequestReset const&>::Model<ecs2::RuntimeQuery<md::ls::RequestReset const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::RequestReset>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286308;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286308;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F7559EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286350;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286350;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1},std::allocator<md::ita::UpdateResourcesAfterRebuild &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateResourcesAfterRebuild>(md::ita::UpdateResourcesAfterRebuild &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xD853A1C6BA9D5FEDLL;
  v2[1] = "md::ls::SupportsRebuildingRenderables]";
  *(_QWORD *)&result = 37;
  *((_OWORD *)v2 + 1) = xmmword_19FFB46C0;
  v2[4] = "md::ls::EnteringView]";
  v2[5] = 20;
  v2[6] = 0x24B7D588576BB14ELL;
  v2[7] = "md::ls::AssociationTileHandle]";
  v2[8] = 29;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277A28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277A28;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  uint64_t **v31;
  uint64_t (***v32)();
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275508;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275958;
  v5[1] = a2;
  v28 = 0;
  v6 = **v3;
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x41D4E9297E100630)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    v10 = v7[3];
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v27 = 0;
  v28 = v10;
  v14 = **v3;
  v15 = *(_QWORD **)v14;
  v16 = *(_QWORD **)(v14 + 8);
  if (v15 != v16)
  {
    while (*v15 != 0x4EDAD23DFB014132)
    {
      v15 += 5;
      if (v15 == v16)
        goto LABEL_24;
    }
  }
  if (v15 == v16)
  {
LABEL_24:
    v18 = 0;
  }
  else
  {
    v18 = v15[3];
    v17 = (std::__shared_weak_count *)v15[4];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v27 = v18;
  v29 = &off_1E427BE38;
  v30 = &v28;
  v31 = v3;
  v32 = &v29;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v29);
  v22 = v32;
  if (v32 == &v29)
  {
    v23 = 4;
    v22 = &v29;
  }
  else
  {
    if (!v32)
      goto LABEL_30;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_30:
  v29 = &off_1E427BE80;
  v30 = &v27;
  v31 = v3;
  v32 = &v29;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v29);
  v24 = v32;
  if (v32 == &v29)
  {
    v25 = 4;
    v24 = &v29;
    goto LABEL_34;
  }
  if (v32)
  {
    v25 = 5;
LABEL_34:
    (*v24)[v25]();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F755E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::UniqueMaterialData &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData &>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 24 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData &>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::EnteringView>(v3);
  v6 = gdc::Registry::storage<md::ls::AssociationTileHandle>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>(v1);
  v3 = gdc::Registry::storage<md::ls::EnteringView>(v1);
  v4 = gdc::Registry::storage<md::ls::AssociationTileHandle>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42840B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42840B8;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x684A78DCF1B284C1;
  result[1] = "md::ls::RenderablesCount]";
  result[2] = 24;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284100;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284100;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfReadyToProcess &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfReadyToProcess>(md::ita::CheckIfReadyToProcess &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0x41650A8095FBA956;
  v2[1] = "md::ls::RegisterHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB46D0;
  v2[4] = "md::ls::MapDataTypeV]";
  v2[5] = 20;
  v2[6] = 0xD14836FBCB6E3943;
  v2[7] = "md::ls::CheckIfReadyToProcess]";
  v2[8] = 29;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0x53EA4A91D91C8985;
    v2[10] = "md::ls::FlyoverOctileKey]";
    v2[11] = 24;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x53EA4A91D91C8985;
  *((_QWORD *)v10 + 1) = "md::ls::FlyoverOctileKey]";
  *((_QWORD *)v10 + 2) = 24;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x695C99F828CA9E84;
    *((_QWORD *)v4 + 1) = "md::ls::BaseMapTileHandle]";
    *((_QWORD *)v4 + 2) = 25;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x695C99F828CA9E84;
  *((_QWORD *)v21 + 1) = "md::ls::BaseMapTileHandle]";
  *((_QWORD *)v21 + 2) = 25;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xF3801DCCD1DDBED8;
    *((_QWORD *)v14 + 1) = "md::ls::WillEnterView]";
    *((_QWORD *)v14 + 2) = 21;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xF3801DCCD1DDBED8;
  *((_QWORD *)v32 + 1) = "md::ls::WillEnterView]";
  *((_QWORD *)v32 + 2) = 21;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F756B98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276900;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  int8x8_t v42;
  uint8x8_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t result;
  void *__p;
  void *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];
  _BYTE *v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274C68;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (**v8)(v8);
  v14 = *(uint64_t **)(v13 + 8);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
  {
    v18 = 0;
    v74 = 0;
    goto LABEL_60;
  }
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0xF014CCE28176CA44;
    if (*(_QWORD *)&v15 <= 0xF014CCE28176CA44)
      v17 = 0xF014CCE28176CA44 % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0xF014CCE28176CA44;
  }
  v19 = *v14;
  v20 = *(_QWORD **)(v19 + 8 * v17);
  if (!v20)
    goto LABEL_36;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_36;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0xF014CCE28176CA44)
      {
        if (v21[2] == 0xF014CCE28176CA44)
          goto LABEL_34;
      }
      else if ((v23 & (*(_QWORD *)&v15 - 1)) != v17)
      {
        goto LABEL_36;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_36;
    }
  }
  while (1)
  {
    v22 = v21[1];
    if (v22 == 0xF014CCE28176CA44)
      break;
    if (v22 >= *(_QWORD *)&v15)
      v22 %= *(_QWORD *)&v15;
    if (v22 != v17)
      goto LABEL_36;
LABEL_23:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_36;
  }
  if (v21[2] != 0xF014CCE28176CA44)
    goto LABEL_23;
LABEL_34:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0xF014CCE28176CA44)
  {
    v25 = *(_QWORD *)(v24 + 32);
    goto LABEL_37;
  }
LABEL_36:
  v25 = 0;
LABEL_37:
  v74 = v25;
  if (v16.u32[0] > 1uLL)
  {
    v26 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v15 <= 0x8BD499FBD96FBB9ELL)
      v26 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v15;
  }
  else
  {
    v26 = (*(_QWORD *)&v15 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v27 = *(_QWORD **)(v19 + 8 * v26);
  if (!v27)
    goto LABEL_59;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_59;
  if (v16.u32[0] < 2uLL)
  {
    v29 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v31 = v28[1];
      if (v31 == 0x8BD499FBD96FBB9ELL)
      {
        if (v28[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_57;
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_59;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_59;
    }
  }
  while (2)
  {
    v30 = v28[1];
    if (v30 != 0x8BD499FBD96FBB9ELL)
    {
      if (v30 >= *(_QWORD *)&v15)
        v30 %= *(_QWORD *)&v15;
      if (v30 != v26)
        goto LABEL_59;
      goto LABEL_46;
    }
    if (v28[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_46:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_59;
      continue;
    }
    break;
  }
LABEL_57:
  v32 = v28[5];
  if (*(_QWORD *)(v32 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v18 = *(_QWORD *)(v32 + 32);
    goto LABEL_60;
  }
LABEL_59:
  v18 = 0;
LABEL_60:
  v73 = 0;
  v33 = **v3;
  v34 = *(_QWORD **)v33;
  v35 = *(_QWORD **)(v33 + 8);
  if (v34 != v35)
  {
    while (*v34 != 0x41D4E9297E100630)
    {
      v34 += 5;
      if (v34 == v35)
        goto LABEL_71;
    }
  }
  if (v34 == v35)
  {
LABEL_71:
    v37 = 0;
  }
  else
  {
    v37 = v34[3];
    v36 = (std::__shared_weak_count *)v34[4];
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v73 = v37;
  v41 = *(uint64_t **)(v13 + 8);
  v42 = (int8x8_t)v41[1];
  if (!*(_QWORD *)&v42)
  {
    v72 = 0;
    v71 = 0;
    goto LABEL_130;
  }
  v43 = (uint8x8_t)vcnt_s8(v42);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    v44 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v42 <= 0xE42D19AFCA302E68)
      v44 = 0xE42D19AFCA302E68 % *(_QWORD *)&v42;
  }
  else
  {
    v44 = (*(_QWORD *)&v42 - 1) & 0xE42D19AFCA302E68;
  }
  v45 = *v41;
  v46 = *(_QWORD **)(v45 + 8 * v44);
  if (!v46)
    goto LABEL_96;
  v47 = (_QWORD *)*v46;
  if (!v47)
    goto LABEL_96;
  if (v43.u32[0] < 2uLL)
  {
    while (1)
    {
      v49 = v47[1];
      if (v49 == 0xE42D19AFCA302E68)
      {
        if (v47[2] == 0xE42D19AFCA302E68)
          goto LABEL_94;
      }
      else if ((v49 & (*(_QWORD *)&v42 - 1)) != v44)
      {
        goto LABEL_96;
      }
      v47 = (_QWORD *)*v47;
      if (!v47)
        goto LABEL_96;
    }
  }
  while (2)
  {
    v48 = v47[1];
    if (v48 != 0xE42D19AFCA302E68)
    {
      if (v48 >= *(_QWORD *)&v42)
        v48 %= *(_QWORD *)&v42;
      if (v48 != v44)
        goto LABEL_96;
      goto LABEL_83;
    }
    if (v47[2] != 0xE42D19AFCA302E68)
    {
LABEL_83:
      v47 = (_QWORD *)*v47;
      if (!v47)
        goto LABEL_96;
      continue;
    }
    break;
  }
LABEL_94:
  v50 = v47[5];
  if (*(_QWORD *)(v50 + 8) == 0xE42D19AFCA302E68)
  {
    v51 = *(_QWORD *)(v50 + 32);
    goto LABEL_97;
  }
LABEL_96:
  v51 = 0;
LABEL_97:
  if (v43.u32[0] > 1uLL)
  {
    v52 = 0xD3D7935EF848FCE7;
    if (*(_QWORD *)&v42 <= 0xD3D7935EF848FCE7)
      v52 = 0xD3D7935EF848FCE7 % *(_QWORD *)&v42;
  }
  else
  {
    v52 = (*(_QWORD *)&v42 - 1) & 0xD3D7935EF848FCE7;
  }
  v53 = *(_QWORD **)(v45 + 8 * v52);
  if (!v53)
    goto LABEL_119;
  v54 = (_QWORD *)*v53;
  if (!v54)
    goto LABEL_119;
  if (v43.u32[0] < 2uLL)
  {
    v55 = *(_QWORD *)&v42 - 1;
    while (1)
    {
      v57 = v54[1];
      if (v57 == 0xD3D7935EF848FCE7)
      {
        if (v54[2] == 0xD3D7935EF848FCE7)
          goto LABEL_117;
      }
      else if ((v57 & v55) != v52)
      {
        goto LABEL_119;
      }
      v54 = (_QWORD *)*v54;
      if (!v54)
        goto LABEL_119;
    }
  }
  while (2)
  {
    v56 = v54[1];
    if (v56 != 0xD3D7935EF848FCE7)
    {
      if (v56 >= *(_QWORD *)&v42)
        v56 %= *(_QWORD *)&v42;
      if (v56 != v52)
        goto LABEL_119;
      goto LABEL_106;
    }
    if (v54[2] != 0xD3D7935EF848FCE7)
    {
LABEL_106:
      v54 = (_QWORD *)*v54;
      if (!v54)
        goto LABEL_119;
      continue;
    }
    break;
  }
LABEL_117:
  v58 = v54[5];
  if (*(_QWORD *)(v58 + 8) == 0xD3D7935EF848FCE7)
  {
    v59 = *(_QWORD *)(v58 + 32);
    goto LABEL_120;
  }
LABEL_119:
  v59 = 0;
LABEL_120:
  v72 = v59;
  v71 = 0;
  if (!v51)
    goto LABEL_130;
  v77[0] = &off_1E427B7C0;
  v77[1] = &v71;
  v60 = v77;
  v78 = v77;
  v61 = *(_BYTE **)(v51 + 48);
  v62 = *(_BYTE **)(v51 + 56);
  if (v61 == v62)
  {
    v63 = 4;
LABEL_129:
    (*(void (**)(void))(*v60 + 8 * v63))();
    goto LABEL_130;
  }
  do
  {
    v75[0] = *v61;
    if (!v78)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_QWORD *, _BYTE *))(*v78 + 48))(v78, v75);
    ++v61;
  }
  while (v61 != v62);
  v60 = v78;
  if (v78 == v77)
  {
    v63 = 4;
    v60 = v77;
    goto LABEL_129;
  }
  if (v78)
  {
    v63 = 5;
    goto LABEL_129;
  }
LABEL_130:
  v71 |= *(_BYTE *)(v18 + 6);
  __p = 0;
  v69 = 0;
  v70 = 0;
  v64 = operator new(0x38uLL);
  *v64 = &off_1E427B808;
  v64[1] = &v73;
  v64[2] = &v74;
  v64[3] = &v72;
  v64[4] = &__p;
  v64[5] = &v71;
  v64[6] = v3;
  v76 = v64;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v75);
  v65 = v76;
  if (v76 == v75)
  {
    v66 = 4;
    v65 = v75;
LABEL_134:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  else if (v76)
  {
    v66 = 5;
    goto LABEL_134;
  }
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F757358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  char *v24;
  char *v26;
  uint64_t v27;

  v26 = a19;
  if (a19 == v24)
  {
    v27 = 4;
    v26 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

unint64_t *ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t *result;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t *v123;
  uint64_t v125[6];
  unint64_t *v126;
  uint64_t v127[7];
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RegisterHandle>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MapDataTypeV>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverOctileKey>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::WillEnterView>(v2);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::RenderablesCount>(v2);
  v127[0] = (uint64_t)v3;
  v127[1] = (uint64_t)v4;
  v127[2] = (uint64_t)v5;
  v127[3] = (uint64_t)v6;
  v127[4] = (uint64_t)v7;
  v127[5] = (uint64_t)v8;
  v127[6] = (uint64_t)v9;
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::RenderablesCount,md::ls::MapDataTypeV const,md::ls::CheckIfReadyToProcess const>,gdc::Any<md::ls::FlyoverOctileKey const,md::ls::BaseMapTileHandle const,md::ls::WillEnterView const>,gdc::None<>>::begin(v125, v127);
  v10 = v3 + 4;
  if (v9[8] - v9[7] < v3[8] - v3[7])
    v10 = v9 + 4;
  if (v4[8] - v4[7] < v10[4] - v10[3])
    v10 = v4 + 4;
  if (v5[8] - v5[7] < v10[4] - v10[3])
    v10 = v5 + 4;
  v11 = v126;
  v123 = (unint64_t *)v10[4];
  if (v123 == v126)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_130:
    *result = 0xFFFFFFFF00000000;
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)v125[1];
    v14 = (_QWORD *)v125[2];
    v120 = (_QWORD *)v125[3];
    v121 = v125[0];
    v119 = (_QWORD *)v125[4];
    v122 = result;
    while (1)
    {
      *result = *v11;
      v15 = *v11;
      v16 = HIDWORD(*v11);
      v17 = *v11 >> 39;
      v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v3[7],
            v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
        v25 = v3[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = v26;
      v28 = v9[4];
      if (v17 < (v9[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v9[7],
            v31 = v9[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v9[11];
        v36 = v9[10] + 32 * v30;
      }
      else
      {
        v35 = v9[11];
        v36 = v35;
      }
      if (v36 == v35)
        v37 = 0;
      else
        v37 = v36;
      v38 = v4[4];
      if (v17 < (v4[5] - v38) >> 3
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v4[7],
            v41 = v4[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v4[11];
        v46 = v4[10] + 2 * v40;
      }
      else
      {
        v45 = v4[11];
        v46 = v45;
      }
      if (v46 == v45)
        v47 = 0;
      else
        v47 = v46;
      v48 = v5[4];
      if (v17 < (v5[5] - v48) >> 3
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v5[7],
            v51 = v5[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v5[11];
        v56 = v5[10] + 8 * v50;
      }
      else
      {
        v55 = v5[11];
        v56 = v55;
      }
      if (v56 == v55)
        v57 = 0;
      else
        v57 = v56;
      v58 = v6[4];
      if (v17 < (v6[5] - v58) >> 3
        && (v59 = *(_QWORD *)(v58 + 8 * v17)) != 0
        && (v60 = *(unsigned __int16 *)(v59 + 2 * (HIDWORD(v15) & 0x7F)),
            v62 = v6[7],
            v61 = v6[8],
            v60 < (v61 - v62) >> 3)
        && ((v63 = v62 + 8 * v60, v63 != v61) ? (v64 = *(_DWORD *)(v63 + 4) == (_DWORD)v16) : (v64 = 0), v64))
      {
        v65 = v6[11];
        v66 = v6[10] + 40 * v60;
      }
      else
      {
        v65 = v6[11];
        v66 = v65;
      }
      if (v66 == v65)
        v66 = 0;
      if ((v67 = v7[4], v17 < (v7[5] - v67) >> 3)
        && (v68 = *(_QWORD *)(v67 + 8 * v17)) != 0
        && (v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            v71 = v7[7],
            v70 = v7[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == (_DWORD)v16) : (v73 = 0), v73))
      {
        v74 = v7[11];
        v75 = v7[10] + 8 * v69;
      }
      else
      {
        v74 = v7[11];
        v75 = v74;
      }
      if (v75 == v74)
        v75 = 0;
      v76 = v8[4];
      if (v17 < (v8[5] - v76) >> 3
        && (v77 = *(_QWORD *)(v76 + 8 * v17)) != 0
        && (v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v15) & 0x7F)),
            v80 = v8[7],
            v79 = v8[8],
            v78 < (v79 - v80) >> 3)
        && (v81 = v80 + 8 * v78, v81 != v79)
        && *(_DWORD *)(v81 + 4) == (_DWORD)v16)
      {
        v82 = v8[11];
        v83 = v8[10] + v78;
      }
      else
      {
        v82 = v8[11];
        v83 = v82;
      }
      v84 = v83 == v82 ? 0 : v83;
      v129 = v75;
      v130 = v66;
      v128 = v84;
      v85 = *(_QWORD *)(a2 + 24);
      if (!v85)
        break;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, unint64_t *))(*(_QWORD *)v85 + 48))(v85, v27, v37, v47, v57, &v130, &v129, &v128);
      v86 = *(unint64_t **)(v121 + 32);
      v87 = v11 + 1;
      v126 = v11 + 1;
      if (v11 + 1 == v86)
      {
        result = v122;
      }
      else
      {
        v88 = v13[4];
        result = v122;
        do
        {
          v89 = *((unsigned int *)v87 + 1);
          v90 = v89 >> 7;
          if (v89 >> 7 < (v13[5] - v88) >> 3)
          {
            v91 = *(_QWORD *)(v88 + 8 * v90);
            if (v91)
            {
              v92 = v89 & 0x7F;
              v93 = *(unsigned __int16 *)(v91 + 2 * v92);
              v95 = v13[7];
              v94 = v13[8];
              if (v93 < (v94 - v95) >> 3)
              {
                v96 = v95 + 8 * v93;
                if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v89)
                {
                  v98 = v14[4];
                  if (v90 < (v14[5] - v98) >> 3)
                  {
                    v99 = *(_QWORD *)(v98 + 8 * v90);
                    if (v99)
                    {
                      v100 = *(unsigned __int16 *)(v99 + 2 * v92);
                      v102 = v14[7];
                      v101 = v14[8];
                      if (v100 < (v101 - v102) >> 3)
                      {
                        v103 = v102 + 8 * v100;
                        if (v103 != v101 && *(_DWORD *)(v103 + 4) == (_DWORD)v89)
                        {
                          v105 = v120[4];
                          if (v90 < (v120[5] - v105) >> 3)
                          {
                            v106 = *(_QWORD *)(v105 + 8 * v90);
                            if (v106)
                            {
                              v107 = *(unsigned __int16 *)(v106 + 2 * v92);
                              v109 = v120[7];
                              v108 = v120[8];
                              if (v107 < (v108 - v109) >> 3)
                              {
                                v110 = v109 + 8 * v107;
                                if (v110 != v108 && *(_DWORD *)(v110 + 4) == (_DWORD)v89)
                                {
                                  v112 = v119[4];
                                  if (v90 < (v119[5] - v112) >> 3)
                                  {
                                    v113 = *(_QWORD *)(v112 + 8 * v90);
                                    if (v113)
                                    {
                                      v114 = *(unsigned __int16 *)(v113 + 2 * v92);
                                      v116 = v119[7];
                                      v115 = v119[8];
                                      if (v114 < (v115 - v116) >> 3)
                                      {
                                        v117 = v116 + 8 * v114;
                                        if (*(_DWORD *)(v117 + 4) == (_DWORD)v89 && v117 != v115)
                                        {
                                          v86 = v87;
                                          goto LABEL_122;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v87;
        }
        while (v87 != v86);
        v87 = v86;
LABEL_122:
        v126 = v87;
      }
      v11 = v86;
      if (v123 == v86)
        goto LABEL_130;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::RenderablesCount &,md::ls::MapDataTypeV const&,md::ls::CheckIfReadyToProcess const&,md::ls::FlyoverOctileKey const*,md::ls::BaseMapTileHandle const*,md::ls::WillEnterView const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[7];
  uint64_t v12[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::RegisterHandle>(v1);
  v3 = gdc::Registry::storage<md::ls::MapDataTypeV>(v1);
  v4 = gdc::Registry::storage<md::ls::CheckIfReadyToProcess>(v1);
  v5 = gdc::Registry::storage<md::ls::FlyoverOctileKey>(v1);
  v6 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  v7 = gdc::Registry::storage<md::ls::WillEnterView>(v1);
  v8 = gdc::Registry::storage<md::ls::RenderablesCount>(v1);
  v11[0] = v2;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v5;
  v11[4] = v6;
  v11[5] = v7;
  v11[6] = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::RenderablesCount,md::ls::MapDataTypeV const,md::ls::CheckIfReadyToProcess const>,gdc::Any<md::ls::FlyoverOctileKey const,md::ls::BaseMapTileHandle const,md::ls::WillEnterView const>,gdc::None<>>::begin(v12, v11);
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v9 = v2;
  else
    v9 = v8;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56))
    v9 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56))
    v9 = v4;
  return *(_QWORD *)(v9 + 64) == v12[6];
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::RenderablesCount,md::ls::MapDataTypeV const,md::ls::CheckIfReadyToProcess const>,gdc::Any<md::ls::FlyoverOctileKey const,md::ls::BaseMapTileHandle const,md::ls::WillEnterView const>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2[6];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = *a2 + 32;
  if (!*a2)
    v7 = 0;
  v8 = v3 + 32;
  if (!v3)
    v8 = 0;
  v9 = v5 + 32;
  if (!v5)
    v9 = 0;
  v10 = v6 + 32;
  if (!v6)
    v10 = 0;
  result = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24) < (unint64_t)(*(_QWORD *)(v7 + 32) - result))
    v7 = v8;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v9;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v10;
  *a1 = v7;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v5;
  a1[4] = v6;
  v13 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287C58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287C58;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287CA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287CA0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteUniqueMaterial &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteUniqueMaterial>(md::ita::CheckIfShouldDeleteUniqueMaterial &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xDACEFB85CDF2B135;
  v2[1] = "md::ls::RequestReset]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB46E0;
  v2[4] = "md::ls::UniqueMaterialData]";
  v2[5] = 26;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42786D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42786D0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  char v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274C08;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275208;
  v5[1] = a2;
  v6 = *(uint64_t **)**v3;
  if (v6 != *(uint64_t **)(**v3 + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (void (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  (**v9)(v9);
  v14 = **v3;
  v15 = *(_QWORD **)v14;
  v16 = *(_QWORD **)(v14 + 8);
  if (v15 != v16)
  {
    while (*v15 != 0x41D4E9297E100630)
    {
      v15 += 5;
      if (v15 == v16)
        goto LABEL_23;
    }
  }
  if (v15 != v16)
  {
    v17 = (std::__shared_weak_count *)v15[4];
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
LABEL_23:
  v41 = 0;
  v21 = **v3;
  v22 = *(_QWORD **)v21;
  v23 = *(_QWORD **)(v21 + 8);
  if (v22 != v23)
  {
    while (*v22 != 0x4EDAD23DFB014132)
    {
      v22 += 5;
      if (v22 == v23)
        goto LABEL_34;
    }
  }
  if (v22 == v23)
  {
LABEL_34:
    v25 = 0;
  }
  else
  {
    v25 = v22[3];
    v24 = (std::__shared_weak_count *)v22[4];
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v41 = v25;
  v29 = **v3;
  v30 = *(_QWORD **)v29;
  v31 = *(_QWORD **)(v29 + 8);
  if (v30 != v31)
  {
    while (*v30 != 0x348A0B0E758C07C2)
    {
      v30 += 5;
      if (v30 == v31)
        goto LABEL_46;
    }
  }
  if (v30 != v31)
  {
    v32 = (std::__shared_weak_count *)v30[4];
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      do
        v35 = __ldaxr(v33);
      while (__stlxr(v35 - 1, v33));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
LABEL_46:
  v40 = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4) ^ 1;
  v36 = operator new(0x20uLL);
  *v36 = &off_1E427C540;
  v36[1] = &v41;
  v36[2] = &v40;
  v36[3] = v3;
  v43 = v36;
  (*(void (**)(_QWORD *, _BYTE *))(*v5 + 16))(v5, v42);
  v37 = v43;
  if (v43 == v42)
  {
    v38 = 4;
    v37 = v42;
    goto LABEL_50;
  }
  if (v43)
  {
    v38 = 5;
LABEL_50:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F75811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286AE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286AE8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286B30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286B30;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfShouldDeleteRenderable &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfShouldDeleteRenderable>(md::ita::CheckIfShouldDeleteRenderable &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB46F0;
  v2[4] = "md::ls::AssociationHandle]";
  v2[5] = 25;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277E18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277E18;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274F08;
  v4[1] = a2;
  v5 = *(uint64_t **)**v3;
  if (v5 != *(uint64_t **)(**v3 + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (void (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (**v8)(v8);
  v31 = 0;
  v13 = **v3;
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x41D4E9297E100630)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_23;
    }
  }
  if (v14 == v15)
  {
LABEL_23:
    v17 = 0;
  }
  else
  {
    v17 = v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v31 = v17;
  v21 = **v3;
  v22 = *(_QWORD **)v21;
  v23 = *(_QWORD **)(v21 + 8);
  if (v22 != v23)
  {
    while (*v22 != 0x4EDAD23DFB014132)
    {
      v22 += 5;
      if (v22 == v23)
        goto LABEL_35;
    }
  }
  if (v22 != v23)
  {
    v24 = (std::__shared_weak_count *)v22[4];
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
LABEL_35:
  v32[0] = &off_1E427BFE8;
  v32[1] = &v31;
  v32[2] = v3;
  v33 = v32;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v32);
  v28 = v33;
  if (v33 == v32)
  {
    v29 = 4;
    v28 = v32;
    goto LABEL_39;
  }
  if (v33)
  {
    v29 = 5;
LABEL_39:
    (*(void (**)(_QWORD *))(*v28 + 8 * v29))(v28);
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F7585DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 16 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::AssociationHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42EE530;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42EE530;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  _BOOL4 v36;
  int v37;
  BOOL v38;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)**a2;
  if (v3 != (_QWORD *)(*a2)[1])
  {
    while (*v3 != 0x3815A15069F224CDLL)
      v3 += 5;
  }
  v5 = v3[3];
  v4 = (std::__shared_weak_count *)v3[4];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *(_QWORD **)(v5 + 56);
  v10 = (int8x8_t)v9[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = *(_QWORD *)&v10 - 1;
    v13 = *(_QWORD *)&v10 != 1;
    if (v11.u32[0] < 2uLL)
      v13 = (v10.i8[0] & 1) == 0;
    v14 = *(uint64_t ***)(*v9 + 8 * v13);
    if (v14)
    {
      v15 = *v14;
      if (v15)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v15[1];
            if (v16 == 1)
            {
              if (*((_BYTE *)v15 + 16) == 1)
                goto LABEL_51;
            }
            else if ((v16 & v12) != v13)
            {
              goto LABEL_28;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_28;
          }
        }
        while (1)
        {
          v17 = v15[1];
          if (v17 == 1)
          {
            if (*((_BYTE *)v15 + 16) == 1)
            {
LABEL_51:
              v18 = *((unsigned __int8 *)v15 + 17) != 0;
              goto LABEL_30;
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v10)
              v17 %= *(_QWORD *)&v10;
            if (v17 != v13)
            {
LABEL_28:
              v18 = 0;
              goto LABEL_30;
            }
          }
          v15 = (uint64_t *)*v15;
          if (!v15)
            goto LABEL_28;
        }
      }
    }
    v18 = 0;
LABEL_30:
    v19 = (uint8x8_t)vcnt_s8(v10);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = 2;
      if (*(_QWORD *)&v10 <= 2uLL)
        v20 = 2uLL % *(_QWORD *)&v10;
    }
    else
    {
      v20 = (v10.i8[0] - 1) & 2;
    }
    v21 = *(uint64_t ***)(*v9 + 8 * v20);
    if (v21)
    {
      v22 = *v21;
      if (v22)
      {
        if (v19.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v22[1];
            if (v23 == 2)
            {
              if (*((_BYTE *)v22 + 16) == 2)
                goto LABEL_80;
            }
            else if ((v23 & v12) != v20)
            {
              goto LABEL_52;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_52;
          }
        }
        do
        {
          v24 = v22[1];
          if (v24 == 2)
          {
            if (*((_BYTE *)v22 + 16) == 2)
            {
LABEL_80:
              v25 = *((_BYTE *)v22 + 17) != 0;
              goto LABEL_53;
            }
          }
          else
          {
            if (v24 >= *(_QWORD *)&v10)
              v24 %= *(_QWORD *)&v10;
            if (v24 != v20)
              break;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_52:
  v25 = 0;
LABEL_53:
  v26 = ***(uint64_t ****)(a1 + 8);
  if (v26 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v26 != 0xD369A4D92C8FFE6CLL)
  {
    v27 = v26 + 5;
    do
    {
      v28 = *v27;
      v27 += 5;
    }
    while (v28 != 0xD369A4D92C8FFE6CLL);
    v26 = v27 - 5;
  }
  v29 = v26[3];
  v30 = (std::__shared_weak_count *)v26[4];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  v36 = v34 == 5 || v34 == 12;
  v37 = v18 && v25 || v18 && (v34 != 12 ? (v38 = v34 == 5) : (v38 = 1), !v38) || v25 && v36;
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(_QWORD *)(a1 + 8) + 16), 47386, v37);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(_QWORD *)(a1 + 8) + 16), 6966, v37);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(_QWORD *)(a1 + 8) + 16), 25691, v37);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(_QWORD *)(a1 + 8) + 16), 434, v37);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F7590B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;
  std::mutex *v13;

  std::mutex::unlock(v13);

  _Unwind_Resume(a1);
}

void sub_19F759194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKMapImageCanvas;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F7593D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19F7594A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void *v10;

  if (a10)
    std::__shared_weak_count::__release_weak(a10);

  _Unwind_Resume(a1);
}

void sub_19F75957C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F75983C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F759854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_19F759A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F759B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::OverlayContainer::addOverlay(md::OverlayContainer *this, VKOverlay *a2)
{
  VKOverlay *v3;

  v3 = a2;
  std::mutex::lock((std::mutex *)((char *)this + 232));
  md::OverlayContainer::_insertOverlay((uint64_t)this, v3, *((char **)this + 3 * -[VKOverlay level](v3, "level") + 21));
  std::mutex::unlock((std::mutex *)((char *)this + 232));

}

void sub_19F759B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::OverlayContainer::_insertOverlay(uint64_t a1, void *a2, char *a3)
{
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t (**v39)();
  unint64_t v40;
  uint64_t (**v41)();
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  char *v48;
  uint64_t (**v49)();
  uint64_t v50;
  char *v51;
  void **v52;
  void **v53;
  void **v54;
  void *v55;
  void *v56;
  unint64_t v57;
  char *v58;
  void *v59;
  uint64_t (**v60)();
  uint64_t (**v61)();
  uint64_t (**v62)();
  uint64_t (*v63)();
  unint64_t v64;
  id *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  id v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  char *v83;
  _QWORD *v84;
  uint64_t (**v85)();
  char *v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t (**v89)();
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t (***v93)();
  id *v94;
  char *v95;
  uint64_t (**v96)();
  unint64_t v97;
  void *v98;
  uint64_t (**v99)();
  uint64_t (**v100)();
  char *v101;
  uint64_t (**v102)();
  _QWORD *v103;
  _QWORD v104[3];
  _QWORD *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v98 = v6;
  v7 = objc_msgSend(v6, "level");
  v8 = a1 + 24 * v7;
  v11 = *(_QWORD *)(v8 + 160);
  v10 = (uint64_t (***)())(v8 + 160);
  v9 = v11;
  v13 = (unint64_t *)(v10 + 1);
  v12 = (uint64_t)v10[1];
  if (v11 == v12)
    goto LABEL_12;
  while ((geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(v9 + 8), &v98) & 1) == 0)
  {
    v9 += 24;
    if (v9 == v12)
    {
      v9 = v12;
      break;
    }
  }
  v14 = v9;
  v9 = *v13;
  if (v14 == *v13)
  {
LABEL_12:
    if ((char *)v9 == a3)
    {
      v39 = (uint64_t (**)())v6;
      v99 = &off_1E42B54F0;
      v100 = v39;
      v40 = *v13;
      if (*v13 >= *(_QWORD *)(a1 + 24 * v7 + 176))
      {
        v42 = std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>((void **)v10, (uint64_t)&v99);
        v41 = v100;
      }
      else
      {
        *(_QWORD *)v40 = &off_1E42B54F0;
        *(_QWORD *)(v40 + 8) = 0;
        objc_storeStrong((id *)(v40 + 8), a2);

        v41 = 0;
        v42 = (char *)(v40 + 24);
      }
      *v13 = (unint64_t)v42;

      goto LABEL_89;
    }
    v17 = v6;
    v18 = (char *)*v10;
    v19 = a3 - (char *)*v10;
    v20 = v19 / 24;
    v21 = (uint64_t)&(*v10)[3 * (v19 / 24)];
    v22 = *v13;
    v23 = a1 + 24 * v7;
    v26 = *(_QWORD *)(v23 + 176);
    v25 = (_QWORD *)(v23 + 176);
    v24 = v26;
    v97 = v7;
    if (*v13 < v26)
    {
      if (v21 == v22)
      {
        *(_QWORD *)v21 = &off_1E42B54F0;
        v48 = &v18[24 * v20];
        *((_QWORD *)v48 + 1) = 0;
        objc_storeStrong((id *)v48 + 1, a2);

        *v13 = v21 + 24;
      }
      else
      {
        v92 = a2;
        v94 = (id *)*v10;
        v27 = v22 - 24;
        v91 = v19 / 24;
        if (v22 < 0x18)
        {
          v32 = *v13;
        }
        else
        {
          v28 = *v13;
          do
          {
            v29 = v28;
            *(_QWORD *)v28 = &off_1E42B54F0;
            *(_QWORD *)(v28 + 8) = 0;
            v30 = v28 + 8;
            objc_storeStrong((id *)(v28 + 8), *(id *)(v27 + 8));
            v31 = *(void **)(v27 + 8);
            *(_QWORD *)(v27 + 8) = 0;

            v27 += 24;
            v28 = v30 + 16;
          }
          while (v27 < v22);
          v32 = v29 + 24;
        }
        *v13 = v32;
        if (v22 != v21 + 24)
        {
          v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (v21 + 24)) >> 3);
          v65 = (id *)(v22 - 16);
          v66 = (uint64_t)&v94[3 * v91 - 2];
          v67 = 24 * v64;
          do
          {
            objc_storeStrong(v65, *(id *)(v66 + v67));
            v68 = *(void **)(v66 + v67);
            *(_QWORD *)(v66 + v67) = 0;

            v65 -= 3;
            v67 -= 24;
          }
          while (v67);
        }
        objc_storeStrong(&v94[3 * v91 + 1], v92);

      }
LABEL_88:
      v7 = v97;
      goto LABEL_89;
    }
    v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v18) >> 3) + 1;
    if (v43 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v18) >> 3);
    if (2 * v44 > v43)
      v43 = 2 * v44;
    if (v44 >= 0x555555555555555)
      v45 = 0xAAAAAAAAAAAAAAALL;
    else
      v45 = v43;
    v103 = v25;
    v93 = (uint64_t (***)())v25;
    v95 = v18;
    if (v45)
    {
      v90 = v19;
      if (v45 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v46 = v19 / 24;
      v47 = (uint64_t (**)())operator new(24 * v45);
      v20 = v46;
      v19 = v90;
    }
    else
    {
      v47 = 0;
    }
    v49 = &v47[3 * v20];
    v99 = v47;
    v100 = v49;
    v101 = (char *)v49;
    v102 = &v47[3 * v45];
    if (v20 != v45)
    {
      v96 = &v47[3 * v45];
LABEL_71:
      *v49 = (uint64_t (*)())&off_1E42B54F0;
      v49[1] = 0;
      objc_storeStrong((id *)v49 + 1, a2);

      v51 = (char *)(v49 + 3);
      v101 = (char *)(v49 + 3);
      v52 = (void **)*v10;
      if (*v10 != (uint64_t (**)())v21)
      {
        v53 = (void **)v21;
        do
        {
          *(v49 - 3) = (uint64_t (*)())&off_1E42B54F0;
          v49 -= 3;
          v49[1] = 0;
          v55 = *(v53 - 2);
          v54 = v53 - 2;
          objc_storeStrong((id *)v49 + 1, v55);
          v56 = *v54;
          *v54 = 0;

          v53 = v54 - 1;
        }
        while (v53 != v52);
      }
      v100 = v49;
      v57 = *v13;
      if (*v13 != v21)
      {
        do
        {
          v58 = v51;
          *(_QWORD *)v51 = &off_1E42B54F0;
          *((_QWORD *)v51 + 1) = 0;
          objc_storeStrong((id *)v51 + 1, *(id *)(v21 + 8));
          v59 = *(void **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;

          v21 += 24;
          v51 += 24;
        }
        while (v21 != v57);
        v51 = v58 + 24;
        v49 = v100;
        v21 = *v13;
      }
      v60 = *v10;
      *v10 = v49;
      *v13 = (unint64_t)v51;
      *v93 = v96;
      if ((uint64_t (**)())v21 != v60)
      {
        v61 = (uint64_t (**)())(v21 - 24);
        v62 = (uint64_t (**)())(v21 - 24);
        do
        {
          v63 = *v62;
          v62 -= 3;
          (*(void (**)(uint64_t (**)()))v63)(v61);
          v35 = v61 == v60;
          v61 = v62;
        }
        while (!v35);
      }
      if (v60)
        operator delete(v60);
      goto LABEL_88;
    }
    if (v19 >= 1)
    {
      v96 = &v47[3 * v45];
      v50 = v20 + 2;
      if (v20 >= -1)
        v50 = v20 + 1;
      v49 -= 3 * (v50 >> 1);
      v100 = v49;
      goto LABEL_71;
    }
    if (v95 == a3)
      v88 = 1;
    else
      v88 = 2 * v20;
    if (v88 <= 0xAAAAAAAAAAAAAAALL)
    {
      v89 = (uint64_t (**)())operator new(24 * v88);
      v49 = &v89[3 * (v88 >> 2)];
      v99 = v89;
      v100 = v49;
      v101 = (char *)v49;
      v102 = &v89[3 * v88];
      v96 = v102;
      if (v47)
        operator delete(v47);
      goto LABEL_71;
    }
LABEL_121:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v15 = v14 + 24;
  if ((char *)v9 == a3)
  {
    if ((char *)v15 != a3)
    {
      while (1)
      {
        v36 = v14 + 24;
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v14, v14 + 24);
        if ((char *)(v14 + 48) == a3)
          break;
        if (v36 == v15)
          v15 = v14 + 48;
        v14 += 24;
      }
      if (v36 != v15)
      {
        v37 = v15;
        while (1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v36, v15);
          v15 += 24;
          v38 = v36 + 24 == v37;
          if ((char *)v15 == a3)
          {
            if (v36 + 24 == v37)
              break;
            v15 = v37 + 24;
            v36 += 48;
            while (1)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v36 - 24, v37);
              v38 = v36 == v37;
              if ((char *)v15 != a3)
                break;
              v35 = v36 == v37;
              v36 += 24;
              if (v35)
                goto LABEL_89;
            }
          }
          else
          {
            v36 += 24;
          }
          if (v38)
            v37 = v15;
        }
      }
    }
  }
  else if ((char *)v15 != a3)
  {
    while (1)
    {
      v16 = v14 + 24;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v14, v14 + 24);
      if ((char *)(v14 + 48) == a3)
        break;
      if (v16 == v15)
        v15 = v14 + 48;
      v14 += 24;
    }
    if (v16 != v15)
    {
      v33 = v15;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v16, v15);
        v15 += 24;
        v34 = v16 + 24 == v33;
        if ((char *)v15 == a3)
        {
          if (v16 + 24 == v33)
            break;
          v15 = v33 + 24;
          v16 += 48;
          while (1)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v16 - 24, v33);
            v34 = v16 == v33;
            if ((char *)v15 != a3)
              break;
            v35 = v16 == v33;
            v16 += 24;
            if (v35)
              goto LABEL_89;
          }
        }
        else
        {
          v16 += 24;
        }
        if (v34)
          v33 = v15;
      }
    }
  }
LABEL_89:
  v69 = *(_QWORD *)(a1 + 208);
  v70 = *(_QWORD *)(a1 + 216);
  if (v69 == v70)
  {
    v71 = *(_QWORD *)(a1 + 208);
  }
  else
  {
    while ((geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(v69 + 8), &v98) & 1) == 0)
    {
      v69 += 24;
      if (v69 == v70)
      {
        v69 = v70;
        break;
      }
    }
    v71 = v69;
    v69 = *(_QWORD *)(a1 + 216);
  }
  v72 = v98;
  if (v71 == v69)
  {
    objc_msgSend(v98, "replaceMapContentInRect");
    if (vabdd_f64(v82, *MEMORY[0x1E0D266E8]) < 0.00000001
      && vabdd_f64(v79, *(double *)(MEMORY[0x1E0D266E8] + 8)) < 0.00000001
      && vabdd_f64(v80, *(double *)(MEMORY[0x1E0D266E8] + 16)) < 0.00000001
      && vabdd_f64(v81, *(double *)(MEMORY[0x1E0D266E8] + 24)) < 0.00000001)
    {
      *(_BYTE *)(a1 + 344) = 1;
      v83 = v72;
      v99 = &off_1E42B54F0;
      v100 = (uint64_t (**)())v83;
      v84 = *(_QWORD **)(a1 + 216);
      if ((unint64_t)v84 >= *(_QWORD *)(a1 + 224))
      {
        v86 = std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>((void **)(a1 + 208), (uint64_t)&v99);
        v85 = v100;
      }
      else
      {
        *v84 = &off_1E42B54F0;
        v84[1] = v83;

        v85 = 0;
        v86 = (char *)(v84 + 3);
      }
      *(_QWORD *)(a1 + 216) = v86;

    }
  }
  v73 = objc_msgSend(v72, "areResourcesRequired", v90);
  if (v7 <= 1)
  {
    v74 = *(_QWORD *)(a1 + 16 * v7 + 8 * v73);
    if (v74)
    {
      v75 = v72;
      v105 = 0;
      v76 = operator new(0x28uLL);
      *v76 = &off_1E42CD730;
      v76[1] = a1;
      v76[2] = v75;
      v76[3] = v74;
      v76[4] = v7;
      v105 = v76;
      md::OverlayContainer::queueCommand(a1, 0, v104);
      v77 = v105;
      if (v105 == v104)
      {
        v78 = 4;
        v77 = v104;
      }
      else
      {
        if (!v105)
          goto LABEL_109;
        v78 = 5;
      }
      (*(void (**)(void))(*v77 + 8 * v78))();
    }
  }
LABEL_109:
  if (objc_msgSend(v72, "areResourcesRequired"))
  {
    v87 = objc_msgSend(v72, "identifier");
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a1 + 296, v87, v87);
  }
  *(_BYTE *)(a1 + 345) = 1;
  ++*(_DWORD *)(a1 + 348);

}

void sub_19F75A41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::__split_buffer<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~__split_buffer((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F75A54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  id *v12;
  id *v13;
  void *v14;
  id *v15;
  id *v16;
  id *v17;
  void (**v18)(id *);
  BOOL v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v9 = &v7[24 * v6];
  v8 = &v7[24 * v2];
  *(_QWORD *)v8 = &off_1E42B54F0;
  v10 = v8 + 24;
  *((_QWORD *)v8 + 1) = 0;
  objc_storeStrong((id *)v8 + 1, *(id *)(a2 + 8));
  v11 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v8 - 3) = &off_1E42B54F0;
    v8 -= 24;
    *((_QWORD *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    v14 = *(v12 - 2);
    *(v12 - 2) = 0;

    v12 -= 3;
  }
  while (v12 != v13);
  v12 = (id *)*a1;
  v15 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v15 != v12)
  {
    v16 = v15 - 3;
    v17 = v15 - 3;
    do
    {
      v18 = (void (**)(id *))*v17;
      v17 -= 3;
      (*v18)(v16);
      v19 = v16 == v12;
      v16 = v17;
    }
    while (!v19);
  }
  if (v12)
LABEL_18:
    operator delete(v12);
  return v10;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(uint64_t a1, uint64_t a2)
{
  id *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = (id *)(a1 + 8);
  v4 = *(id *)(a1 + 8);
  v5 = *v3;
  *v3 = 0;

  objc_storeStrong(v3, *(id *)(a2 + 8));
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  v7 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  v8 = v4;

}

void md::OverlayContainer::queueCommand(uint64_t a1, char a2, _QWORD *a3)
{
  std::mutex *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;

  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 112) == v7)
  {
    v8 = **(_QWORD **)(a1 + 352);
    if (v8)
    {
      LOBYTE(v33) = 1;
      md::MapEngine::setNeedsTick(v8, &v33);
      v7 = *(_QWORD *)(a1 + 120);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 112);
    }
  }
  v9 = *(_QWORD *)(a1 + 128);
  if (v7 < v9)
  {
    *(_BYTE *)v7 = a2;
    v10 = v7 + 8;
    v11 = a3[3];
    if (v11)
    {
      if ((_QWORD *)v11 == a3)
      {
        *(_QWORD *)(v7 + 32) = v10;
        (*(void (**)(_QWORD))(*(_QWORD *)a3[3] + 24))(a3[3]);
        goto LABEL_26;
      }
      v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
    }
    *(_QWORD *)(v7 + 32) = v11;
LABEL_26:
    v22 = (char *)(v7 + 40);
    *(_QWORD *)(a1 + 120) = v7 + 40;
    goto LABEL_47;
  }
  v12 = *(_QWORD *)(a1 + 112);
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v12) >> 3);
  if (v13 + 1 > 0x666666666666666)
    abort();
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v12) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x333333333333333)
    v16 = 0x666666666666666;
  else
    v16 = v15;
  v36 = a1 + 128;
  if (v16)
  {
    if (v16 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v17 = operator new(40 * v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v17[5 * v13];
  v33 = v17;
  v34 = v18;
  *(_QWORD *)&v35 = v18;
  *((_QWORD *)&v35 + 1) = &v17[5 * v16];
  *v18 = a2;
  v19 = v18 + 8;
  v20 = (_QWORD *)a3[3];
  if (!v20)
  {
    v17[5 * v13 + 4] = 0;
    goto LABEL_24;
  }
  if (v20 != a3)
  {
    v17[5 * v13 + 4] = (*(uint64_t (**)(_QWORD *, _BYTE *))(*v20 + 16))(v20, v19);
LABEL_24:
    v21 = (char *)&v17[5 * v13];
    goto LABEL_28;
  }
  v17[5 * v13 + 4] = v19;
  (*(void (**)(_QWORD *))(*a3 + 24))(a3);
  v18 = v34;
  v21 = (char *)v35;
LABEL_28:
  v22 = v21 + 40;
  *(_QWORD *)&v35 = v21 + 40;
  v24 = *(char **)(a1 + 112);
  v23 = *(char **)(a1 + 120);
  if (v23 != v24)
  {
    v25 = 0;
    do
    {
      v26 = &v18[v25];
      v27 = &v23[v25];
      v18[v25 - 40] = v23[v25 - 40];
      v28 = *(char **)&v23[v25 - 8];
      if (v28)
      {
        if (v27 - 32 == v28)
        {
          *((_QWORD *)v26 - 1) = v26 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v27 - 1) + 24))(*((_QWORD *)v27 - 1));
        }
        else
        {
          *((_QWORD *)v26 - 1) = v28;
          *((_QWORD *)v27 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v26 - 1) = 0;
      }
      v25 -= 40;
    }
    while (&v23[v25] != v24);
    v23 = *(char **)(a1 + 112);
    v29 = *(char **)(a1 + 120);
    *(_QWORD *)(a1 + 112) = &v18[v25];
    v30 = (char *)v35;
    *(_OWORD *)(a1 + 120) = v35;
    v22 = v30;
    while (1)
    {
      if (v29 == v23)
        goto LABEL_45;
      v31 = (char *)*((_QWORD *)v29 - 1);
      if (v29 - 32 == v31)
        break;
      if (v31)
      {
        v32 = 5;
        goto LABEL_38;
      }
LABEL_39:
      v29 -= 40;
    }
    v31 = v29 - 32;
    v32 = 4;
LABEL_38:
    (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
    goto LABEL_39;
  }
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v22;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)&v35 + 1);
LABEL_45:
  if (v23)
    operator delete(v23);
LABEL_47:
  *(_QWORD *)(a1 + 120) = v22;
  std::mutex::unlock(v6);
}

void sub_19F75AA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::IconMeshDescriptor>::~__split_buffer((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  void *v4;

  v2 = (char *)operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)v2 = &off_1E42CD730;
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 2) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  return v2;
}

__n128 std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)a2 = &off_1E42CD730;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0,std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  id v3;
  char v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  id v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33[2];
  void *v34[2];
  int v35;
  void *v36[2];
  void *__p[2];
  int v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(id *)(a1 + 16);
  if ((objc_msgSend(v3, "canProvideVectorData") & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    objc_msgSend(v3, "rasterTileProvider");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v4 = 3;
    }
    else
    {
      objc_msgSend(v3, "customTileProvider");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
        v4 = 4;
      else
        v4 = 1;
    }
  }

  v7 = *(id *)(a1 + 16);
  objc_msgSend(*(id *)(a1 + 16), "rasterTileProvider");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 16), "customTileProvider");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v10 == 0;

  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v7;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E42D9B90;
  v13[1] = &off_1E42B54F0;
  v14 = v12;
  v13[2] = v14;

  v46 = v13;
  v43[0] = &off_1E42D9B48;
  v43[1] = v2;
  v44 = v43;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)__p = 0u;
  v38 = 1065353216;
  std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v36, v4, v4);
  md::OverlayLayerDataSource::conditionalInvalidate(v11, v45, v43, v9, (uint64_t)v36);
  v15 = __p[0];
  if (__p[0])
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = v36[0];
  v36[0] = 0;
  if (v17)
    operator delete(v17);
  v18 = v44;
  if (v44 == v43)
  {
    v19 = 4;
    v18 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_20;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_20:
  v20 = v46;
  if (v46 == v45)
  {
    v21 = 4;
    v20 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_25;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_25:
  if (*(_QWORD *)(a1 + 32) != 1)
    goto LABEL_40;
  v22 = *(_QWORD *)(v2 + 32);
  v23 = v14;
  v42 = 0;
  v24 = operator new(0x20uLL);
  *v24 = &off_1E4289E60;
  v24[1] = &off_1E42B54F0;
  v25 = v23;
  v24[2] = v25;

  v42 = v24;
  v39[0] = &off_1E4289EA8;
  v39[1] = v2;
  v40 = v39;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 1065353216;
  std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v33, v4, v4);
  md::OverlayLayerDataSource::conditionalInvalidate(v22, v41, v39, v9, (uint64_t)v33);
  v26 = v34[0];
  if (v34[0])
  {
    do
    {
      v27 = (_QWORD *)*v26;
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v28 = v33[0];
  v33[0] = 0;
  if (v28)
    operator delete(v28);
  v29 = v40;
  if (v40 == v39)
  {
    v30 = 4;
    v29 = v39;
    goto LABEL_34;
  }
  if (v40)
  {
    v30 = 5;
LABEL_34:
    (*(void (**)(_QWORD *))(*v29 + 8 * v30))(v29);
  }
  v31 = v42;
  if (v42 == v41)
  {
    v32 = 4;
    v31 = v41;
    goto LABEL_39;
  }
  if (v42)
  {
    v32 = 5;
LABEL_39:
    (*(void (**)(_QWORD *))(*v31 + 8 * v32))(v31);
  }
LABEL_40:

}

void sub_19F75AECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>(uint64_t a1, unsigned __int8 a2, char a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_BYTE *)v13 + 16) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F75B338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289EA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289EA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#4}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, const md::OverlayTileData **a2)
{
  return md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), *a2) ^ 1;
}

uint64_t md::OverlayContainer::_isOverlayTileInCurrentScene(uint64_t this, const md::OverlayTileData *a2)
{
  uint64_t *v2;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t *v9;
  unsigned __int16 *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  const md::OverlayTileData *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;

  if (this)
  {
    v2 = *(uint64_t **)(this + 120);
    if (v2)
    {
      v4 = *((unsigned __int16 *)a2 + 12);
      v5 = *v2;
      if ((v6 & 1) == 0
      {
        qword_1ECE2F300 = 0;
        qword_1ECE2F2F8 = 0;
        md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
        __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      if (v7 != v8)
      {
        v10 = v7;
        while (*v10 != v4)
        {
          v10 += 16;
          if (v10 == v8)
            goto LABEL_15;
        }
        if (v10 == v8)
        {
          v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
        }
        else
        {
          while (*v7 != v4)
          {
            v7 += 16;
            if (v7 == v8)
            {
              v7 = v8;
              break;
            }
          }
          v9 = (uint64_t *)(v7 + 4);
        }
      }
LABEL_15:
      v13 = (uint64_t *)*v9;
      v11 = v9 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        do
        {
          v15 = (const md::OverlayTileData *)v12[4];
          v14 = (std::__shared_weak_count *)v12[5];
          if (!v14)
            goto LABEL_24;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
            if (v15 == a2)
              return 1;
          }
          else
          {
LABEL_24:
            if (v15 == a2)
              return 1;
          }
          v19 = (uint64_t *)v12[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (uint64_t *)v12[2];
              v21 = *v20 == (_QWORD)v12;
              v12 = v20;
            }
            while (!v21);
          }
          v12 = v20;
        }
        while (v20 != v11);
      }
    }
    return 0;
  }
  return this;
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E4289E60;
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

  return a1;
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E4289E60;
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E4289E60;
  v2[1] = &off_1E42B54F0;
  v2[2] = *(id *)(a1 + 16);
  return v2;
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  id v3;
  void *v4;

  *a2 = &off_1E4289E60;
  a2[1] = &off_1E42B54F0;
  a2[2] = 0;
  v3 = *(id *)(a1 + 16);
  v4 = (void *)a2[2];
  a2[2] = v3;

}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#3}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *(unsigned __int8 *)(*(_QWORD *)a2 + 169) | 0x200000000;
  v4[0] = *(unsigned int *)(*(_QWORD *)a2 + 176) | ((unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 172) << 32);
  v4[1] = v2;
  return objc_msgSend(*(id *)(a1 + 16), "canPossiblyDrawKey:", v4);
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9B48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9B48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, const md::OverlayTileData **a2)
{
  return md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), *a2) ^ 1;
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42D9B90;
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

  return a1;
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42D9B90;
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E42D9B90;
  v2[1] = &off_1E42B54F0;
  v2[2] = *(id *)(a1 + 16);
  return v2;
}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  id v3;
  void *v4;

  *a2 = &off_1E42D9B90;
  a2[1] = &off_1E42B54F0;
  a2[2] = 0;
  v3 = *(id *)(a1 + 16);
  v4 = (void *)a2[2];
  a2[2] = v3;

}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

}

void std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B54F0;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::_insertOverlay(VKOverlay *,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *(unsigned __int8 *)(*(_QWORD *)a2 + 169) | 0x200000000;
  v4[0] = *(unsigned int *)(*(_QWORD *)a2 + 176) | ((unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 172) << 32);
  v4[1] = v2;
  return objc_msgSend(*(id *)(a1 + 16), "canPossiblyDrawKey:", v4);
}

uint64_t std::__split_buffer<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B54F0;

  return a1;
}

void geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B54F0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *__p;

  v2 = a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (*((_DWORD *)v6 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            v6 = (uint64_t *)*v6;
            if (!v6)
              return;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (*((_DWORD *)v6 + 4) == a2)
            {
LABEL_22:
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v6);
              if (__p)
                operator delete(__p);
              return;
            }
          }
          else
          {
            if (v8 >= v2)
              v8 %= v2;
            if (v8 != v4)
              return;
          }
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
    }
  }
}

void std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0,std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0,std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CD6E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0,std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CD6E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0,std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0>,void ()(void)>::operator()(uint64_t a1))()
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (***result)();
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  void *v22[2];
  int v23;
  void *v24[2];
  void *__p[2];
  int v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t (**v29)();
  int v30;
  uint64_t (***v31)();
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t (**v34)();
  int v35;
  uint64_t (***v36)();
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v35 = v3;
  v36 = &v34;
  v32[0] = &off_1E42D9AB8;
  v32[1] = v2;
  v33 = v32;
  v34 = &off_1E42D9B00;
  v5 = *(unsigned __int8 *)(a1 + 32);
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)__p = 0u;
  v26 = 1065353216;
  std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v24, *(_BYTE *)(a1 + 33), *(_BYTE *)(a1 + 33));
  md::OverlayLayerDataSource::conditionalInvalidate(v4, &v34, v32, v5 != 0, (uint64_t)v24);
  v6 = __p[0];
  if (__p[0])
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = v24[0];
  v24[0] = 0;
  if (v8)
    operator delete(v8);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_10;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_10:
  result = v36;
  if (v36 == &v34)
  {
    v12 = 4;
    result = &v34;
  }
  else
  {
    if (!v36)
      goto LABEL_15;
    v12 = 5;
  }
  result = (uint64_t (***)())(*result)[v12]();
LABEL_15:
  if (*(_QWORD *)(a1 + 40) != 1)
    return result;
  v13 = *(_QWORD *)(v2 + 32);
  v30 = v3;
  v31 = &v29;
  v27[0] = &off_1E42D9AB8;
  v27[1] = v2;
  v28 = v27;
  v29 = &off_1E42D9B00;
  v14 = *(unsigned __int8 *)(a1 + 32);
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)v22 = 0u;
  v23 = 1065353216;
  std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v21, *(_BYTE *)(a1 + 33), *(_BYTE *)(a1 + 33));
  md::OverlayLayerDataSource::conditionalInvalidate(v13, &v29, v27, v14 != 0, (uint64_t)v21);
  v15 = v22[0];
  if (v22[0])
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = v21[0];
  v21[0] = 0;
  if (v17)
    operator delete(v17);
  v18 = v28;
  if (v28 == v27)
  {
    v19 = 4;
    v18 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
LABEL_25:
  result = v31;
  if (v31 == &v29)
  {
    v20 = 4;
    result = &v29;
  }
  else
  {
    if (!v31)
      return result;
    v20 = 5;
  }
  return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v20])(result);
}

void sub_19F75BE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v28 = __p;
  if (__p)
  {
    do
    {
      v29 = (_QWORD *)*v28;
      operator delete(v28);
      v28 = v29;
    }
    while (v29);
  }
  if (a9)
    operator delete(a9);
  v30 = a23;
  if (a23 == &a20)
  {
    v31 = 4;
    v30 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_10;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_10:
  v32 = a27;
  if (a27 == &a24)
  {
    v33 = 4;
    v32 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_15;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_15:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9AB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9AB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#2}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, const md::OverlayTileData **a2)
{
  return md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), *a2) ^ 1;
}

void std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E42D9B00;
  result[2] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E42D9B00;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

BOOL std::__function::__func<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1},std::allocator<md::OverlayContainer::removeOverlay(VKOverlay *)::$_0::operator() const(void)::{lambda(std::shared_ptr<md::OverlayTileData> const&)#1}>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v2 = *a2 + 752;
  v3 = (_QWORD *)v2;
  do
  {
    v3 = (_QWORD *)v3[1];
    if (v3 == (_QWORD *)v2)
      break;
    v5 = (_DWORD *)v3[16];
    v4 = (_DWORD *)v3[17];
    if (v5 != v4)
    {
      while (*v5 != *(_DWORD *)(a1 + 8))
      {
        if (++v5 == v4)
        {
          v5 = (_DWORD *)v3[17];
          break;
        }
      }
    }
  }
  while (v5 == v4);
  return v3 != (_QWORD *)v2;
}

void std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = 3 * a4;
    v8 = operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    for (a1[2] = &v8[v7]; a2 != a3; v8 += 3)
    {
      *v8 = &off_1E42B54F0;
      v8[1] = 0;
      v9 = *(id *)(a2 + 8);
      v10 = (void *)v8[1];
      v8[1] = v9;

      a2 += 24;
    }
    a1[1] = v8;
  }
}

uint64_t std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CD778;
  if (*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 0;

  return a1;
}

void std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CD778;
  if (*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 0;

  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  void *v4;

  v2 = (char *)operator new(0x40uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)v2 = &off_1E42CD778;
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 2) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  v2[56] = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    v2[57] = *(_BYTE *)(a1 + 57);
    v2[56] = 1;
  }
  v2[58] = *(_BYTE *)(a1 + 58);
  return v2;
}

id std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)a2 = &off_1E42CD778;
  *(_QWORD *)(a2 + 8) = v4;
  result = v5;
  *(_QWORD *)(a2 + 16) = result;
  v7 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 56) = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a2 + 57) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_BYTE *)(a2 + 58) = *(_BYTE *)(a1 + 58);
  return result;
}

void std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 0;

}

void std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 0;

  operator delete((void *)a1);
}

void std::__function::__func<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  id v5;
  void *v6;
  void *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  char v24;
  void *v25;
  id v26;
  char v27;
  void *v28;
  _BOOL4 v29;
  void *v30;
  _BOOL4 v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  void *v52[2];
  void *v53[2];
  int v54;
  char v55;
  char v56;
  void *v57[2];
  void *__p[2];
  int v59;
  char v60;
  char v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
    v51 = *(_BYTE *)(a1 + 57);
  v4 = *(unsigned __int8 *)(a1 + 58);
  v5 = *(id *)(a1 + 16);
  objc_msgSend(v5, "rasterTileProvider");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  v8 = (__int128 *)(a1 + 24);
  if (v6)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 24) + 56);
    v10 = *(_QWORD *)(v9 + 56);
    v11 = *(_QWORD *)(v9 + 64);
    if (v10 != v11)
    {
      while (*(_WORD *)v10 != 35)
      {
        v10 += 24;
        if (v10 == v11)
          goto LABEL_23;
      }
    }
    if (v10 != v11)
    {
      v13 = *(_QWORD **)(v10 + 8);
      v12 = *(std::__shared_weak_count **)(v10 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (!v13)
        goto LABEL_18;
      LODWORD(v57[0]) = objc_msgSend(v6, "providerID");
      v66[0] = &off_1E42CD7C0;
      v66[1] = v57;
      v66[2] = v8;
      v67 = v66;
      gdc::ResourceStore::clearResources(v13, (uint64_t)v66);
      v16 = v67;
      if (v67 == v66)
      {
        v17 = 4;
        v16 = v66;
      }
      else
      {
        if (!v67)
        {
LABEL_18:
          if (v12)
          {
            v18 = (unint64_t *)&v12->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          goto LABEL_23;
        }
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
      goto LABEL_18;
    }
  }
LABEL_23:
  v20 = objc_msgSend(v5, "level");
  v21 = objc_msgSend(v5, "areResourcesRequired");
  if (v20 > 1)
    goto LABEL_76;
  v22 = *(_QWORD *)(v2 + 16 * v20 + 8 * v21);
  if (!v22)
    goto LABEL_76;
  objc_msgSend(v5, "rasterTileProvider");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
  {
    v24 = 0;
  }
  else
  {
    objc_msgSend(v5, "customTileProvider");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v25 == 0;

  }
  v26 = v5;
  if ((objc_msgSend(v26, "canProvideVectorData") & 1) != 0)
  {
    v27 = 2;
  }
  else
  {
    objc_msgSend(v26, "rasterTileProvider");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v28 == 0;

    if (v29)
    {
      objc_msgSend(v26, "customTileProvider");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v30 == 0;

      if (v31)
        v27 = 1;
      else
        v27 = 4;
    }
    else
    {
      v27 = 3;
    }
  }

  if (v4)
  {
    v60 = 0;
    if (v3)
    {
      v61 = v51;
      v60 = 1;
    }
    v64[0] = &off_1E42CD808;
    v64[1] = v2;
    v65 = v64;
    *(_OWORD *)v57 = 0u;
    *(_OWORD *)__p = 0u;
    v59 = 1065353216;
    std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v57, v27, v27);
    md::OverlayLayerDataSource::invalidateRect(v22, v8, &v60, v64, v24, (uint64_t)v57);
    v32 = __p[0];
    if (__p[0])
    {
      do
      {
        v33 = (_QWORD *)*v32;
        operator delete(v32);
        v32 = v33;
      }
      while (v33);
    }
    v34 = v57[0];
    v57[0] = 0;
    if (v34)
      operator delete(v34);
    v35 = v65;
    if (v65 == v64)
    {
      v36 = 4;
      v35 = v64;
    }
    else
    {
      if (!v65)
      {
LABEL_56:
        if (objc_msgSend(v26, "level") != 1)
          goto LABEL_76;
        v42 = *(_QWORD *)(v2 + 32);
        v55 = 0;
        if (v3)
        {
          v56 = v51;
          v55 = 1;
        }
        v62[0] = &off_1E42CD850;
        v62[1] = v2;
        v63 = v62;
        *(_OWORD *)v52 = 0u;
        *(_OWORD *)v53 = 0u;
        v54 = 1065353216;
        std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v52, v27, v27);
        md::OverlayLayerDataSource::invalidateRect(v42, v8, &v55, v62, v24, (uint64_t)v52);
        v43 = v53[0];
        if (v53[0])
        {
          do
          {
            v44 = (_QWORD *)*v43;
            operator delete(v43);
            v43 = v44;
          }
          while (v44);
        }
        goto LABEL_69;
      }
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
    goto LABEL_56;
  }
  v60 = 0;
  if (v3)
  {
    v61 = v51;
    v60 = 1;
  }
  v64[0] = &off_1E4279B10;
  v65 = v64;
  *(_OWORD *)v57 = 0u;
  *(_OWORD *)__p = 0u;
  v59 = 1065353216;
  std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v57, v27, v27);
  md::OverlayLayerDataSource::invalidateRect(v22, v8, &v60, v64, v24, (uint64_t)v57);
  v37 = __p[0];
  if (__p[0])
  {
    do
    {
      v38 = (_QWORD *)*v37;
      operator delete(v37);
      v37 = v38;
    }
    while (v38);
  }
  v39 = v57[0];
  v57[0] = 0;
  if (v39)
    operator delete(v39);
  v40 = v65;
  if (v65 == v64)
  {
    v41 = 4;
    v40 = v64;
    goto LABEL_63;
  }
  if (v65)
  {
    v41 = 5;
LABEL_63:
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
  if (objc_msgSend(v26, "level") != 1)
    goto LABEL_76;
  v45 = *(_QWORD *)(v2 + 32);
  v55 = 0;
  if (v3)
  {
    v56 = v51;
    v55 = 1;
  }
  v62[0] = &off_1E4279B58;
  v63 = v62;
  *(_OWORD *)v52 = 0u;
  *(_OWORD *)v53 = 0u;
  v54 = 1065353216;
  std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>((uint64_t)v52, v27, v27);
  md::OverlayLayerDataSource::invalidateRect(v45, v8, &v55, v62, v24, (uint64_t)v52);
  v46 = v53[0];
  if (v53[0])
  {
    do
    {
      v47 = (_QWORD *)*v46;
      operator delete(v46);
      v46 = v47;
    }
    while (v47);
  }
LABEL_69:
  v48 = v52[0];
  v52[0] = 0;
  if (v48)
    operator delete(v48);
  v49 = v63;
  if (v63 == v62)
  {
    v50 = 4;
    v49 = v62;
    goto LABEL_75;
  }
  if (v63)
  {
    v50 = 5;
LABEL_75:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
LABEL_76:

}

void sub_19F75C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, _QWORD *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;

  v33 = __p;
  if (__p)
  {
    do
    {
      v34 = (_QWORD *)*v33;
      operator delete(v33);
      v33 = v34;
    }
    while (v34);
  }
  if (a11)
    operator delete(a11);
  v35 = a26;
  if (a26 == &a23)
  {
    v36 = 4;
    v35 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_10;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_10:

  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4279B58;
  return result;
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4279B58;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()()
{
  return 0;
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4279B10;
  return result;
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4279B10;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()()
{
  return 0;
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD850;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, const md::OverlayTileData **a2)
{
  return md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), *a2) ^ 1;
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD808;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD808;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, const md::OverlayTileData **a2)
{
  return md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), *a2) ^ 1;
}

void std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CD7C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CD7C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidateRect(VKOverlay *,gm::Box<double,2> const&,geo::optional<unsigned char>,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int32x2_t *v2;
  __int32 v4;
  unsigned int v5;
  double *v6;
  _BYTE *v7;
  int v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[4];
  int32x2_t v18;

  v2 = *(int32x2_t **)(a2 + 8);
  if (v2[1].i32[1] != **(_DWORD **)(a1 + 8))
    return 0;
  v4 = v2[1].i32[0];
  v5 = v2[2].u32[0];
  v17[0] = -1;
  v17[1] = v4;
  v18 = vrev64_s32(*v2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  md::TileAdjustmentHelpers::adjustTileForSize(v5, 0x200u, (uint64_t)v17, &v14);
  if (v14 == v15)
  {
LABEL_11:
    v12 = 0;
  }
  else
  {
    v6 = *(double **)(a1 + 16);
    v7 = v14;
    while (1)
    {
      v8 = 1 << v7[1];
      v9 = 1.0 / (double)v8;
      v10 = v9 * (double)*((int *)v7 + 2);
      if (v10 + v9 > *v6 && v10 < v6[2])
      {
        v11 = v9 * (double)(v8 + ~*((_DWORD *)v7 + 1));
        if (v11 + v9 > v6[1] && v11 < v6[3])
          break;
      }
      v7 += 24;
      if (v7 == v15)
        goto LABEL_11;
    }
    v12 = 1;
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_19F75CDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void md::OverlayContainer::invalidate(md::OverlayContainer *this, VKOverlay *a2, __int16 a3, int a4)
{
  VKOverlay *v7;
  _QWORD *v8;
  __int16 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v13 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E42CD5C8;
  v8[1] = this;
  v8[2] = v7;
  if (a4)
    v9 = 256;
  else
    v9 = 0;
  *((_WORD *)v8 + 12) = v9 | a3;
  v13 = v8;
  md::OverlayContainer::queueCommand((uint64_t)this, 3, v12);
  v10 = v13;
  if (v13 == v12)
  {
    v11 = 4;
    v10 = v12;
    goto LABEL_8;
  }
  if (v13)
  {
    v11 = 5;
LABEL_8:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

}

void sub_19F75CEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x20uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E42CD5C8;
  v2[1] = v3;
  v2[2] = v4;
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

id std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)a2 = &off_1E42CD5C8;
  *(_QWORD *)(a2 + 8) = v4;
  result = v5;
  *(_QWORD *)(a2 + 16) = result;
  *(_WORD *)(a2 + 24) = *(_WORD *)(a1 + 24);
  return result;
}

void std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::invalidate(VKOverlay *,BOOL,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  char v22;
  void *v23;
  id v24;
  char v25;
  void *v26;
  _BOOL4 v27;
  void *v28;
  _BOOL4 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *v52[2];
  void *v53;
  void *v54[2];
  void *__p;
  void *v56[2];
  void *v57[2];
  int v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = *(id *)(a1 + 16);
  objc_msgSend(v4, "rasterTileProvider");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 24) + 56);
    v8 = *(_QWORD *)(v7 + 56);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8 != v9)
    {
      while (*(_WORD *)v8 != 35)
      {
        v8 += 24;
        if (v8 == v9)
          goto LABEL_21;
      }
    }
    if (v8 != v9)
    {
      v10 = *(_QWORD **)(v8 + 8);
      v11 = *(std::__shared_weak_count **)(v8 + 16);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if (!v10)
        goto LABEL_16;
      LODWORD(v56[0]) = objc_msgSend(v5, "providerID");
      v63[0] = &off_1E42CD610;
      v63[1] = v56;
      v64 = v63;
      gdc::ResourceStore::clearResources(v10, (uint64_t)v63);
      v14 = v64;
      if (v64 == v63)
      {
        v15 = 4;
        v14 = v63;
      }
      else
      {
        if (!v64)
        {
LABEL_16:
          if (v11)
          {
            v16 = (unint64_t *)&v11->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          goto LABEL_21;
        }
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_16;
    }
  }
LABEL_21:
  if (objc_msgSend(v4, "areResourcesRequired"))
  {
    v18 = objc_msgSend(v4, "level");
    if (v18 > 1)
      goto LABEL_77;
    v19 = *(_QWORD *)(v1 + 16 * v18 + 8);
    if (!v19)
      goto LABEL_77;
  }
  else
  {
    v20 = objc_msgSend(v4, "level");
    if (v20 > 1)
      goto LABEL_77;
    v19 = *(_QWORD *)(v1 + 16 * v20);
    if (!v19)
      goto LABEL_77;
  }
  objc_msgSend(v4, "rasterTileProvider");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21)
  {
    v22 = 0;
  }
  else
  {
    objc_msgSend(v4, "customTileProvider");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v23 == 0;

  }
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)v57 = 0u;
  v58 = 1065353216;
  if (v3)
  {
    LOWORD(v54[0]) = 258;
    std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__assign_unique<md::OverlayTileDataType const*>((uint64_t)v56, (unsigned __int8 *)v54, (unsigned __int8 *)v54 + 2);
  }
  else
  {
    v24 = v4;
    if ((objc_msgSend(v24, "canProvideVectorData") & 1) != 0)
    {
      v25 = 2;
    }
    else
    {
      objc_msgSend(v24, "rasterTileProvider");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = v26 == 0;

      if (v27)
      {
        objc_msgSend(v24, "customTileProvider");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v28 == 0;

        if (v29)
          v25 = 1;
        else
          v25 = 4;
      }
      else
      {
        v25 = 3;
      }
    }

    LOBYTE(v54[0]) = v25;
    std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__assign_unique<md::OverlayTileDataType const*>((uint64_t)v56, (unsigned __int8 *)v54, (unsigned __int8 *)v54 + 1);
  }
  if (!v2)
  {
    v61[0] = &off_1E4279A80;
    v62 = v61;
    std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v54, (uint64_t)v56);
    md::OverlayLayerDataSource::invalidate(v19, v61, v22, (uint64_t)v54);
    v35 = __p;
    if (__p)
    {
      do
      {
        v36 = (_QWORD *)*v35;
        operator delete(v35);
        v35 = v36;
      }
      while (v36);
    }
    v37 = v54[0];
    v54[0] = 0;
    if (v37)
      operator delete(v37);
    v38 = v62;
    if (v62 == v61)
    {
      v39 = 4;
      v38 = v61;
    }
    else
    {
      if (!v62)
      {
LABEL_63:
        if (objc_msgSend(v4, "level") != 1)
          goto LABEL_73;
        v43 = *(_QWORD *)(v1 + 32);
        v59[0] = &off_1E4279AC8;
        v60 = v59;
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v52, (uint64_t)v56);
        md::OverlayLayerDataSource::invalidate(v43, v59, v22, (uint64_t)v52);
        v44 = v53;
        if (v53)
        {
          do
          {
            v45 = (_QWORD *)*v44;
            operator delete(v44);
            v44 = v45;
          }
          while (v45);
        }
        goto LABEL_66;
      }
      v39 = 5;
    }
    (*(void (**)(void))(*v38 + 8 * v39))();
    goto LABEL_63;
  }
  v61[0] = &off_1E42CD658;
  v61[1] = v1;
  v62 = v61;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v54, (uint64_t)v56);
  md::OverlayLayerDataSource::invalidate(v19, v61, v22, (uint64_t)v54);
  v30 = __p;
  if (__p)
  {
    do
    {
      v31 = (_QWORD *)*v30;
      operator delete(v30);
      v30 = v31;
    }
    while (v31);
  }
  v32 = v54[0];
  v54[0] = 0;
  if (v32)
    operator delete(v32);
  v33 = v62;
  if (v62 == v61)
  {
    v34 = 4;
    v33 = v61;
    goto LABEL_56;
  }
  if (v62)
  {
    v34 = 5;
LABEL_56:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  if (objc_msgSend(v4, "level") != 1)
    goto LABEL_73;
  v40 = *(_QWORD *)(v1 + 32);
  v59[0] = &off_1E42CD6A0;
  v59[1] = v1;
  v60 = v59;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v52, (uint64_t)v56);
  md::OverlayLayerDataSource::invalidate(v40, v59, v22, (uint64_t)v52);
  v41 = v53;
  if (v53)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
LABEL_66:
  v46 = v52[0];
  v52[0] = 0;
  if (v46)
    operator delete(v46);
  v47 = v60;
  if (v60 == v59)
  {
    v48 = 4;
    v47 = v59;
    goto LABEL_72;
  }
  if (v60)
  {
    v48 = 5;
LABEL_72:
    (*(void (**)(_QWORD *))(*v47 + 8 * v48))(v47);
  }
LABEL_73:
  v49 = v57[0];
  if (v57[0])
  {
    do
    {
      v50 = (_QWORD *)*v49;
      operator delete(v49);
      v49 = v50;
    }
    while (v50);
  }
  v51 = v56[0];
  v56[0] = 0;
  if (v51)
    operator delete(v51);
LABEL_77:

}

void sub_19F75D534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  v34 = __p;
  if (__p)
  {
    do
    {
      v35 = (_QWORD *)*v34;
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
  if (a9)
    operator delete(a9);
  v36 = a27;
  if (a27 == &a24)
  {
    v37 = 4;
    v36 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_10;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_10:
  v38 = a21;
  if (a21)
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  if (a19)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__assign_unique<md::OverlayTileDataType const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  char v34;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (!v9)
    {
      while (1)
      {
        v11 = *v4;
        *((_BYTE *)v8 + 16) = v11;
        v10 = (_QWORD *)*v8;
        v8[1] = v11;
        v12 = *(_QWORD *)(a1 + 8);
        if (v12)
        {
          v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            v14 = v11;
            if (v12 <= v11)
              v14 = v11 % v12;
          }
          else
          {
            v14 = ((_DWORD)v12 - 1) & v11;
          }
          v15 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v14);
          if (v15)
          {
            v16 = *v15;
            if (v16)
            {
              if (v13.u32[0] < 2uLL)
              {
                while (1)
                {
                  v18 = v16[1];
                  if (v18 == (uint64_t *)v11)
                  {
                    if (*((unsigned __int8 *)v16 + 16) == (_DWORD)v11)
                      goto LABEL_67;
                  }
                  else if (((unint64_t)v18 & (v12 - 1)) != v14)
                  {
                    goto LABEL_30;
                  }
                  v16 = (uint64_t **)*v16;
                  if (!v16)
                    goto LABEL_30;
                }
              }
              do
              {
                v17 = (unint64_t)v16[1];
                if (v17 == v11)
                {
                  if (*((unsigned __int8 *)v16 + 16) == (_DWORD)v11)
                    goto LABEL_67;
                }
                else
                {
                  if (v17 >= v12)
                    v17 %= v12;
                  if (v17 != v14)
                    break;
                }
                v16 = (uint64_t **)*v16;
              }
              while (v16);
            }
          }
        }
LABEL_30:
        v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v20 = *(float *)(a1 + 32);
        if (!v12 || (float)(v20 * (float)v12) < v19)
        {
          v21 = (v12 & (v12 - 1)) != 0;
          if (v12 < 3)
            v21 = 1;
          v22 = v21 | (2 * v12);
          v23 = vcvtps_u32_f32(v19 / v20);
          if (v22 <= v23)
            prime = v23;
          else
            prime = v22;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v12 = *(_QWORD *)(a1 + 8);
          }
          if (prime > v12)
            goto LABEL_42;
          if (prime < v12)
          {
            v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
            {
              v25 = std::__next_prime(v25);
            }
            else
            {
              v27 = 1 << -(char)__clz(v25 - 1);
              if (v25 >= 2)
                v25 = v27;
            }
            if (prime <= v25)
              prime = v25;
            if (prime < v12)
LABEL_42:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
          }
        }
        v28 = *(int8x8_t *)(a1 + 8);
        v29 = v8[1];
        v30 = (uint8x8_t)vcnt_s8(v28);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&v28)
            v29 %= *(_QWORD *)&v28;
        }
        else
        {
          v29 &= *(_QWORD *)&v28 - 1;
        }
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
        if (v31)
        {
          *v8 = *v31;
        }
        else
        {
          *v8 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v8;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = a1 + 16;
          if (!*v8)
            goto LABEL_66;
          v32 = *(_QWORD *)(*v8 + 8);
          if (v30.u32[0] > 1uLL)
          {
            if (v32 >= *(_QWORD *)&v28)
              v32 %= *(_QWORD *)&v28;
          }
          else
          {
            v32 &= *(_QWORD *)&v28 - 1;
          }
          v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
        }
        *v31 = v8;
LABEL_66:
        ++*(_QWORD *)(a1 + 24);
LABEL_67:
        ++v4;
        if (v10)
        {
          v8 = v10;
          if (v4 != a3)
            continue;
        }
        goto LABEL_69;
      }
    }
    v10 = v8;
LABEL_69:
    if (v10)
    {
      do
      {
        v33 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v33;
      }
      while (v33);
    }
  }
  while (v4 != a3)
  {
    v34 = *v4++;
    std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>(a1, v34, v34);
  }
}

uint64_t std::unordered_set<md::OverlayTileDataType>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<md::OverlayTileDataType,std::hash<md::OverlayTileDataType>,std::equal_to<md::OverlayTileDataType>,std::allocator<md::OverlayTileDataType>>::__emplace_unique_key_args<md::OverlayTileDataType,md::OverlayTileDataType const&>(a1, *((_BYTE *)i + 16), *((_BYTE *)i + 16));
  return a1;
}

void sub_19F75DB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4279AC8;
  return result;
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4279AC8;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_4>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 0;
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4279A80;
  return result;
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4279A80;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_3>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 0;
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD6A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD6A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_2>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  const md::OverlayTileData *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int isOverlayTileInCurrentScene;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(const md::OverlayTileData **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  isOverlayTileInCurrentScene = md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return isOverlayTileInCurrentScene ^ 1u;
}

void sub_19F75DDC0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD658;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD658;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_1>,BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  const md::OverlayTileData *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int isOverlayTileInCurrentScene;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(const md::OverlayTileData **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  isOverlayTileInCurrentScene = md::OverlayContainer::_isOverlayTileInCurrentScene(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336), v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return isOverlayTileInCurrentScene ^ 1u;
}

void sub_19F75DEEC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD610;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD610;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0,std::allocator<md::OverlayContainer::_invalidate(VKOverlay *,BOOL,BOOL)::$_0>,BOOL ()(gdc::ResourceKey const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(_QWORD *)(a2 + 8) + 12) == **(_DWORD **)(a1 + 8);
}

void md::OverlayContainer::computeTileExclusionAreas(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  double *v23;
  double v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  double *v55;
  double v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1[20];
  v5 = a1[21];
  if (v4 != v5)
  {
    v6 = MEMORY[0x1E0D266E8];
    do
    {
      v8 = *(id *)(v4 + 8);
      objc_msgSend(v8, "replaceMapContentInRect");
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v16 = v15;

      if ((GEOMapRectIsNull() & 1) == 0)
      {
        v17 = *(double *)(v6 + 16);
        v18 = *(double *)(v6 + 24);
        v19 = v10 / v17;
        v20 = 1.0 - (v16 + v12) / v18;
        v21 = 1.0 - v12 / v18;
        v23 = (double *)a2[1];
        v22 = (unint64_t)a2[2];
        v24 = (v14 + v10) / v17;
        if ((unint64_t)v23 < v22)
        {
          *v23 = v19;
          v23[1] = v20;
          v23[2] = v24;
          v23[3] = v21;
          *((_OWORD *)v23 + 2) = xmmword_19FFB4700;
          v7 = (char *)(v23 + 8);
          v23[6] = 0.0;
          v23[7] = 0.0;
        }
        else
        {
          v25 = (double *)*a2;
          v26 = ((char *)v23 - (_BYTE *)*a2) >> 6;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 58)
LABEL_46:
            abort();
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 5 > v27)
            v27 = v28 >> 5;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0)
            v29 = 0x3FFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            if (v29 >> 58)
LABEL_47:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v30 = (char *)operator new(v29 << 6);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[64 * v26];
          *(double *)v31 = v19;
          *((double *)v31 + 1) = v20;
          *((double *)v31 + 2) = v24;
          *((double *)v31 + 3) = v21;
          *((_OWORD *)v31 + 2) = xmmword_19FFB4700;
          *((_QWORD *)v31 + 6) = 0;
          *((_QWORD *)v31 + 7) = 0;
          v32 = v31;
          if (v23 != v25)
          {
            do
            {
              v33 = *((_OWORD *)v23 - 4);
              v34 = *((_OWORD *)v23 - 3);
              v35 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v32 - 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v32 - 1) = v35;
              *((_OWORD *)v32 - 4) = v33;
              *((_OWORD *)v32 - 3) = v34;
              v32 -= 64;
              v23 -= 8;
            }
            while (v23 != v25);
            v23 = (double *)*a2;
          }
          v7 = v31 + 64;
          *a2 = v32;
          a2[1] = v31 + 64;
          a2[2] = &v30[64 * v29];
          if (v23)
            operator delete(v23);
        }
        a2[1] = v7;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  v36 = a1[23];
  v37 = a1[24];
  if (v36 != v37)
  {
    v38 = MEMORY[0x1E0D266E8];
    do
    {
      v40 = *(id *)(v36 + 8);
      objc_msgSend(v40, "replaceMapContentInRect");
      v42 = v41;
      v44 = v43;
      v46 = v45;
      v48 = v47;

      if ((GEOMapRectIsNull() & 1) == 0)
      {
        v49 = *(double *)(v38 + 16);
        v50 = *(double *)(v38 + 24);
        v51 = v42 / v49;
        v52 = 1.0 - (v48 + v44) / v50;
        v53 = 1.0 - v44 / v50;
        v55 = (double *)a2[1];
        v54 = (unint64_t)a2[2];
        v56 = (v46 + v42) / v49;
        if ((unint64_t)v55 < v54)
        {
          *v55 = v51;
          v55[1] = v52;
          v55[2] = v56;
          v55[3] = v53;
          *((_OWORD *)v55 + 2) = xmmword_19FFB4710;
          v39 = (char *)(v55 + 8);
          v55[6] = 0.0;
          v55[7] = 0.0;
        }
        else
        {
          v57 = (double *)*a2;
          v58 = ((char *)v55 - (_BYTE *)*a2) >> 6;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 58)
            goto LABEL_46;
          v60 = v54 - (_QWORD)v57;
          if (v60 >> 5 > v59)
            v59 = v60 >> 5;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFC0)
            v61 = 0x3FFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            if (v61 >> 58)
              goto LABEL_47;
            v62 = (char *)operator new(v61 << 6);
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[64 * v58];
          *(double *)v63 = v51;
          *((double *)v63 + 1) = v52;
          *((double *)v63 + 2) = v56;
          *((double *)v63 + 3) = v53;
          *((_OWORD *)v63 + 2) = xmmword_19FFB4710;
          *((_QWORD *)v63 + 6) = 0;
          *((_QWORD *)v63 + 7) = 0;
          v64 = v63;
          if (v55 != v57)
          {
            do
            {
              v65 = *((_OWORD *)v55 - 4);
              v66 = *((_OWORD *)v55 - 3);
              v67 = *((_OWORD *)v55 - 1);
              *((_OWORD *)v64 - 2) = *((_OWORD *)v55 - 2);
              *((_OWORD *)v64 - 1) = v67;
              *((_OWORD *)v64 - 4) = v65;
              *((_OWORD *)v64 - 3) = v66;
              v64 -= 64;
              v55 -= 8;
            }
            while (v55 != v57);
            v55 = (double *)*a2;
          }
          v39 = v63 + 64;
          *a2 = v64;
          a2[1] = v63 + 64;
          a2[2] = &v62[64 * v61];
          if (v55)
            operator delete(v55);
        }
        a2[1] = v39;
      }
      v36 += 24;
    }
    while (v36 != v37);
  }
}

void sub_19F75E308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::OverlayContainer::visitOverlays(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void (**v11)(char *);
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (**v19)(char *);
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (std::mutex *)(a1 + 232);
  std::mutex::lock((std::mutex *)(a1 + 232));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v20, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3));
  std::mutex::unlock(v4);
  v5 = v20;
  v6 = v21;
  if (v20 != v21)
  {
    v7 = v20;
    while (1)
    {
      v23 = 0;
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        goto LABEL_26;
      (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v7, &v23);
      v7 += 24;
      if (v7 == v6)
      {
        if (!v5)
          goto LABEL_13;
        if (v5 != v6)
        {
          v9 = v6 - 24;
          v10 = v6 - 24;
          do
          {
            v11 = *(void (***)(char *))v10;
            v10 -= 24;
            (*v11)(v9);
            v12 = v9 == v5;
            v9 = v10;
          }
          while (!v12);
          v5 = v20;
        }
        goto LABEL_12;
      }
    }
  }
  if (v20)
LABEL_12:
    operator delete(v5);
LABEL_13:
  std::mutex::lock(v4);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v20, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3));
  std::mutex::unlock(v4);
  v13 = v20;
  v14 = v21;
  if (v20 != v21)
  {
    v15 = v20;
    while (1)
    {
      v23 = 1;
      v16 = *(_QWORD *)(a2 + 24);
      if (!v16)
        break;
      (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v16 + 48))(v16, v15, &v23);
      v15 += 24;
      if (v15 == v14)
      {
        if (!v13)
          return;
        if (v13 != v14)
        {
          v17 = v14 - 24;
          v18 = v14 - 24;
          do
          {
            v19 = *(void (***)(char *))v18;
            v18 -= 24;
            (*v19)(v17);
            v12 = v17 == v13;
            v17 = v18;
          }
          while (!v12);
          v13 = v20;
        }
        goto LABEL_24;
      }
    }
LABEL_26:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  if (v20)
LABEL_24:
    operator delete(v13);
}

void sub_19F75E4DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F75E4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F75E62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F75E6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F75E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void md::MarkerFeatureHandle::~MarkerFeatureHandle(md::MarkerFeatureHandle *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t *std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void md::ARFeatureShadowExternalMeshLabelPart::~ARFeatureShadowExternalMeshLabelPart(md::ARFeatureShadowExternalMeshLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::ExternalMeshLabelPart::~ExternalMeshLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARFeatureShadowExternalMeshLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                       + 40))(mdm::Allocator::instance(void)::alloc, this, 952);
}

float md::ARFeatureShadowExternalMeshLabelPart::updateWithStyle(md::ARFeatureShadowExternalMeshLabelPart *this, LabelManager *a2)
{
  float result;

  result = *(float *)(**((_QWORD **)this + 4) + 172);
  *((float *)this + 236) = result;
  return result;
}

uint64_t md::ARFeatureShadowExternalMeshLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  void *v36;
  __int128 v37;
  _OWORD v38[8];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  double v48[12];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  result = md::ExternalMeshLabelPart::layoutForStaging((_QWORD *)a1);
  if ((_DWORD)result == 37)
  {
    if (*(float *)(a1 + 664) >= *(float *)(a1 + 656) && *(float *)(a1 + 668) >= *(float *)(a1 + 660))
    {
      v8 = *(double **)(a1 + 56);
      v9 = v8[4];
      v10 = v8[5];
      v11 = v9 + v9;
      v12 = (v9 + v9) * v9;
      v13 = (v10 + v10) * v10;
      v15 = *((_QWORD *)v8 + 2);
      v14 = v8[3];
      v16 = (v14 + v14) * v9;
      v17 = v8[6];
      v18 = *((_QWORD *)v8 + 7);
      v19 = (v10 + v10) * v17;
      v20 = v16 - v19;
      v21 = v10 * (v14 + v14);
      v22 = v19 + v16;
      v23 = v17 * v11;
      v48[0] = 1.0 - (v12 + v13);
      v48[1] = v22;
      v24 = 1.0 - (v14 + v14) * v14;
      v48[4] = v20;
      v48[5] = v24 - v13;
      v25 = v17 * v11 + v21;
      v26 = v11 * v10;
      v27 = v17 * (v14 + v14);
      v48[8] = v25;
      v48[9] = v26 - v27;
      v48[2] = v21 - v23;
      v48[6] = v27 + v26;
      v48[10] = v24 - v12;
      v48[3] = 0.0;
      v48[7] = 0.0;
      v48[11] = 0.0;
      v49 = *(_OWORD *)v8;
      v50 = v15;
      v51 = 0x3FF0000000000000;
      v42 = 0u;
      v44 = 0u;
      v46 = 0u;
      v45 = 0u;
      v43 = 0u;
      v41 = 0u;
      v40 = 0u;
      v47 = 0x3FF0000000000000;
      v28 = *((_QWORD *)v8 + 8);
      v29 = *((_QWORD *)v8 + 9);
      v39 = v18;
      *(_QWORD *)&v42 = v28;
      *((_QWORD *)&v44 + 1) = v29;
      gm::operator*<double,4,4,4>((double *)v38, v48, (double *)&v39);
      v31 = v38[1];
      *(_OWORD *)(a1 + 816) = v38[0];
      *(_OWORD *)(a1 + 832) = v31;
      v32 = v38[3];
      *(_OWORD *)(a1 + 848) = v38[2];
      *(_OWORD *)(a1 + 864) = v32;
      v33 = v38[5];
      *(_OWORD *)(a1 + 880) = v38[4];
      *(_OWORD *)(a1 + 896) = v33;
      v34 = v38[7];
      *(_OWORD *)(a1 + 912) = v38[6];
      *(_OWORD *)(a1 + 928) = v34;
      *(_DWORD *)(a1 + 304) = *a4;
      *(_DWORD *)(a1 + 308) = a4[1];
      v35 = *(void **)(a1 + 232);
      if (v35)
      {
        free(v35);
        *(_QWORD *)(a1 + 232) = 0;
      }
      v36 = *(void **)(a1 + 240);
      if (v36)
      {
        free(v36);
        *(_QWORD *)(a1 + 240) = 0;
      }
      v37 = *(_OWORD *)(a1 + 656);
      *(_OWORD *)(a1 + 72) = v37;
      *(_DWORD *)(a1 + 280) = *a3;
      *(_DWORD *)(a1 + 284) = a3[1];
      *(_DWORD *)(a1 + 104) = *a3;
      LODWORD(v37) = a3[1];
      *(_DWORD *)(a1 + 108) = v37;
      md::CollisionObject::setupShapeData(a1 + 72, *(double *)&v37, *(double *)&v34, v30);
      *(_QWORD *)(a1 + 184) = a1 + 816;
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 944);
      return 37;
    }
    else
    {
      return 13;
    }
  }
  return result;
}

float md::ARFeatureShadowExternalMeshLabelPart::updateForDisplay(md::ARFeatureShadowExternalMeshLabelPart *this)
{
  float result;

  *((_OWORD *)this + 42) = *((_OWORD *)this + 41);
  result = *((float *)this + 236);
  *((float *)this + 237) = result;
  return result;
}

uint64_t md::ARFeatureShadowExternalMeshLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t v12;
  float64x2_t v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  float64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  void *v35;
  __int128 v36;
  _OWORD v38[8];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  double v48[12];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v5 = *(_QWORD *)(a1 + 576);
  if (!v5)
    return 26;
  v9 = *(__int128 **)(a1 + 64);
  v10 = *((_QWORD *)v9 + 6);
  v11 = *((_QWORD *)v9 + 9);
  v12.f32[0] = *(float *)(a1 + 680) - *(float *)(a1 + 672);
  v12.f32[1] = (float)(*(float *)(a1 + 684) - *(float *)(a1 + 676)) * 0.5;
  v13 = vmulq_f64(*(float64x2_t *)((char *)v9 + 56), vcvtq_f64_f32(v12));
  v14 = *v9;
  v15 = v9[2];
  *(_OWORD *)(v5 + 48) = v9[1];
  *(_OWORD *)(v5 + 64) = v15;
  *(_QWORD *)(v5 + 80) = v10;
  *(_OWORD *)(v5 + 32) = v14;
  *(float64x2_t *)(v5 + 88) = v13;
  *(_QWORD *)(v5 + 104) = v11;
  v16 = *((double *)v9 + 4);
  v17 = *((double *)v9 + 5);
  v13.f64[0] = v16 + v16;
  *(double *)&v14 = (v16 + v16) * v16;
  *(double *)&v15 = (v17 + v17) * v17;
  v19 = *((_QWORD *)v9 + 2);
  v18 = *((double *)v9 + 3);
  v20 = (v18 + v18) * v16;
  v21 = *((double *)v9 + 6);
  v22 = *((_QWORD *)v9 + 7);
  v23 = (v17 + v17) * v21;
  v24 = v17 * (v18 + v18);
  v25 = 1.0 - (v18 + v18) * v18;
  v26 = v13.f64[0] * v17;
  v48[0] = 1.0 - (*(double *)&v14 + *(double *)&v15);
  v48[1] = v23 + v20;
  v48[4] = v20 - v23;
  v48[5] = v25 - *(double *)&v15;
  v48[8] = v21 * v13.f64[0] + v24;
  v48[9] = v26 - v21 * (v18 + v18);
  v48[2] = v24 - v21 * v13.f64[0];
  v48[6] = v21 * (v18 + v18) + v26;
  v48[10] = v25 - *(double *)&v14;
  v48[3] = 0.0;
  v48[7] = 0.0;
  v48[11] = 0.0;
  v49 = *v9;
  v50 = v19;
  v51 = 0x3FF0000000000000;
  v42 = 0u;
  v44 = 0u;
  v46 = 0u;
  v45 = 0u;
  v43 = 0u;
  v41 = 0u;
  v40 = 0u;
  v47 = 0x3FF0000000000000;
  v27 = *((_QWORD *)v9 + 8);
  v28 = *((_QWORD *)v9 + 9);
  v39 = v22;
  *(_QWORD *)&v42 = v27;
  *((_QWORD *)&v44 + 1) = v28;
  gm::operator*<double,4,4,4>((double *)v38, v48, (double *)&v39);
  v30 = v38[1];
  *(_OWORD *)(a1 + 688) = v38[0];
  *(_OWORD *)(a1 + 704) = v30;
  v31 = v38[3];
  *(_OWORD *)(a1 + 720) = v38[2];
  *(_OWORD *)(a1 + 736) = v31;
  v32 = v38[5];
  *(_OWORD *)(a1 + 752) = v38[4];
  *(_OWORD *)(a1 + 768) = v32;
  v33 = v38[7];
  *(_OWORD *)(a1 + 784) = v38[6];
  *(_OWORD *)(a1 + 800) = v33;
  *(_DWORD *)(a1 + 544) = *a5;
  *(_DWORD *)(a1 + 548) = a5[1];
  v34 = *(void **)(a1 + 472);
  if (v34)
  {
    free(v34);
    *(_QWORD *)(a1 + 472) = 0;
  }
  v35 = *(void **)(a1 + 480);
  if (v35)
  {
    free(v35);
    *(_QWORD *)(a1 + 480) = 0;
  }
  v36 = *(_OWORD *)(a1 + 672);
  *(_OWORD *)(a1 + 312) = v36;
  *(_DWORD *)(a1 + 520) = *a4;
  *(_DWORD *)(a1 + 524) = a4[1];
  *(_DWORD *)(a1 + 344) = *a4;
  LODWORD(v36) = a4[1];
  *(_DWORD *)(a1 + 348) = v36;
  md::CollisionObject::setupShapeData(a1 + 312, *(double *)&v36, *(double *)&v33, v29);
  *(_QWORD *)(a1 + 424) = a1 + 688;
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a1 + 948);
  return 37;
}

uint64_t md::ARFeatureShadowExternalMeshLabelPart::stagingModelMatrix(md::ARFeatureShadowExternalMeshLabelPart *this)
{
  return (uint64_t)this + 816;
}

uint64_t md::ARFeatureShadowExternalMeshLabelPart::modelMatrix(md::ARFeatureShadowExternalMeshLabelPart *this)
{
  return (uint64_t)this + 688;
}

char *md::ARFeatureShadowExternalMeshLabelPart::debugString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3D40;
  strcpy(result, "ARFeatureShadowExternalMeshLabelPart");
  return result;
}

uint64_t md::ARFeatureShadowExternalMeshLabelPart::ARFeatureShadowExternalMeshLabelPart(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E429AD10;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = a2;
  *(_QWORD *)(a1 + 600) = a3;
  if (a3)
  {
    v8 = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
      v7 = xmmword_19FFB2E30;
    }
  }
  *(_QWORD *)a1 = off_1E42AAAA8;
  *(_OWORD *)(a1 + 656) = v7;
  *(_OWORD *)(a1 + 672) = v7;
  *(_QWORD *)(a1 + 944) = 0;
  return a1;
}

void md::UniLineLabelFeature::~UniLineLabelFeature(md::UniLineLabelFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4298180;
  *((_QWORD *)this + 55) = &unk_1E4298438;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::LineLabelFeature::~LineLabelFeature(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4298180;
  *((_QWORD *)this + 55) = &unk_1E4298438;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::LineLabelFeature::~LineLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

__int128 *md::UniLineLabelFeature::updateText(md::UniLineLabelFeature *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;

  v3 = a3;
  v22 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 44) == *((_QWORD *)this + 45) && geo::codec::featureGetNativeShieldCount(a2))
  {
    md::UniLineLabelFeature::shieldsForFeature(&v19, a2, v3);
    v6 = (uint64_t *)((char *)this + 352);
    v7 = *((_QWORD *)this + 44);
    if (v7)
    {
      v8 = *((_QWORD *)this + 45);
      v9 = *((_QWORD *)this + 44);
      if (v8 != v7)
      {
        do
        {
          if (*(char *)(v8 - 25) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 - 24) + 40))(*(_QWORD *)(v8 - 24), *(_QWORD *)(v8 - 48), *(_QWORD *)(v8 - 32) & 0x7FFFFFFFFFFFFFFFLL);
          v8 -= 48;
        }
        while (v8 != v7);
        v9 = *v6;
      }
      *((_QWORD *)this + 45) = v7;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 47) + 40))(*((_QWORD *)this + 47), v9, *((_QWORD *)this + 46) - v9);
      *v6 = 0;
      *((_QWORD *)this + 45) = 0;
      *((_QWORD *)this + 46) = 0;
    }
    *((_OWORD *)this + 22) = v19;
    *((_QWORD *)this + 46) = v20;
  }
  v10 = *((_QWORD *)this + 48);
  for (i = *((_QWORD *)this + 49); i != v10; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), *(_QWORD *)(i - 32), *(_QWORD *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), *(_QWORD *)(i - 64), *(_QWORD *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((_QWORD *)this + 49) = v10;
  v12 = *((_QWORD *)this + 24);
  *(_QWORD *)&v19 = &off_1E427A068;
  *((_QWORD *)&v19 + 1) = this;
  result = &v19;
  v20 = v3;
  v21 = &v19;
  v14 = *(_QWORD *)(v12 + 128);
  v15 = *(_QWORD *)(v12 + 136);
  if (v14 == v15)
  {
    v16 = 4;
    return (__int128 *)(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v16))(result, a2, a3);
  }
  do
  {
    v17 = *(_QWORD *)(v14 + 16);
    for (j = *(_QWORD *)(v14 + 24); v17 != j; v17 += 8)
    {
      if (!v21)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v21 + 48))(v21, v17);
    }
    v14 += 112;
  }
  while (v14 != v15);
  result = v21;
  if (v21 == &v19)
  {
    v16 = 4;
    result = &v19;
    return (__int128 *)(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v16))(result, a2, a3);
  }
  else if (v21)
  {
    v16 = 5;
    return (__int128 *)(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v16))(result, a2, a3);
  }
  return result;
}

void sub_19F75F740(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F75F74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
  _Unwind_Resume(exception_object);
}

uint64_t (***md::UniLineLabelFeature::updateText(uint64_t (***result)(), uint64_t *a2))()
{
  uint64_t (***v2)();
  uint64_t v3;
  int v4;
  uint64_t (**v5)();
  uint64_t (**i)();
  _QWORD *v7;
  _QWORD *v8;
  char v10;
  uint64_t (**v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t (***v18)();
  __int128 v19;
  uint64_t (**v20)();
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t (**v25)();
  uint64_t (*v26)();
  uint64_t (**v27)();
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t (***v35)();
  unint64_t v36;
  uint64_t (**v37)();
  uint64_t (**v38)();
  uint64_t v39;
  uint64_t (***v40)();
  uint64_t (**v41)();
  __int128 v42;
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t (**v45)();
  uint64_t (***v46)();
  char v47;
  uint64_t (**v48)();
  uint64_t (***v49)();
  __int128 v50;
  uint64_t (***v51)();
  uint64_t v52;

  v2 = result;
  v52 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(unsigned __int8 *)(*a2 + 176);
  if (v4 != 14)
  {
    v8 = *(_QWORD **)(v3 + 184);
    v7 = *(_QWORD **)(v3 + 192);
    if (v7 == v8 || result[44] != result[45])
      return result;
    if (v4 == 2)
    {
      v10 = 1;
    }
    else
    {
      if (v4 != 13 && v4 != 9)
      {
        v47 = 0;
LABEL_34:
        v17 = result + 45;
        v18 = result + 47;
        v46 = result + 47;
        while (1)
        {
          v22 = (_BYTE *)*v8;
          v23 = *v8 + 8;
          v25 = v2[45];
          v24 = v2[46];
          if (v25 >= v24)
          {
            v27 = v2[44];
            v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v27) >> 4);
            v29 = v28 + 1;
            if (v28 + 1 > 0x555555555555555)
              goto LABEL_70;
            v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v27) >> 4);
            if (2 * v30 > v29)
              v29 = 2 * v30;
            if (v30 >= 0x2AAAAAAAAAAAAAALL)
              v31 = 0x555555555555555;
            else
              v31 = v29;
            v51 = v18;
            if (v31)
              v32 = (*((uint64_t (**)(uint64_t (**)(), uint64_t, uint64_t))**v18 + 2))(*v18, 48 * v31, 8);
            else
              v32 = 0;
            result = (uint64_t (***)())(v32 + 48 * v28);
            v48 = (uint64_t (**)())v32;
            v49 = result;
            *(_QWORD *)&v50 = result;
            *((_QWORD *)&v50 + 1) = v32 + 48 * v31;
            if (v32)
            {
              v33 = *((_QWORD *)v22 + 6);
              result[3] = (uint64_t (**)())*((_QWORD *)v22 + 4);
              if ((char)v22[31] < 0)
              {
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(result, *((void **)v22 + 1), *((_QWORD *)v22 + 2));
                result = v49;
                v35 = (uint64_t (***)())v50;
              }
              else
              {
                v34 = *(_OWORD *)v23;
                result[2] = *(uint64_t (***)())(v23 + 16);
                *(_OWORD *)result = v34;
                v35 = (uint64_t (***)())(v32 + 48 * v28);
              }
              v36 = v32 + 48 * v28;
              *(_QWORD *)(v36 + 32) = v33;
              *(_DWORD *)(v36 + 40) = 0;
              *(_BYTE *)(v36 + 44) = v47;
            }
            else
            {
              v35 = result;
            }
            v20 = (uint64_t (**)())(v35 + 6);
            *(_QWORD *)&v50 = v35 + 6;
            v37 = v2[44];
            v38 = v2[45];
            v18 = v46;
            if (v38 == v37)
            {
              v2[44] = (uint64_t (**)())result;
              v2[45] = v20;
              v44 = v2[46];
              v2[46] = (uint64_t (**)())*((_QWORD *)&v50 + 1);
            }
            else
            {
              v39 = 0;
              do
              {
                v40 = &result[v39];
                v41 = &v38[v39];
                v42 = *(_OWORD *)&v38[v39 - 4];
                *((_OWORD *)v40 - 3) = *(_OWORD *)&v38[v39 - 6];
                *((_OWORD *)v40 - 2) = v42;
                *(v41 - 5) = 0;
                *(v41 - 4) = 0;
                *(v41 - 6) = 0;
                *(v40 - 2) = (uint64_t (**)())v38[v39 - 2];
                *((_DWORD *)v40 - 2) = v38[v39 - 1];
                *((_BYTE *)v40 - 4) = BYTE4(v38[v39 - 1]);
                v39 -= 6;
              }
              while (&v38[v39] != v37);
              v38 = v2[44];
              v43 = v2[45];
              v2[44] = (uint64_t (**)())&result[v39];
              v44 = v2[46];
              v45 = (uint64_t (**)())v50;
              *v17 = v50;
              v20 = v45;
              while (v43 != v38)
              {
                if (*((char *)v43 - 25) < 0)
                  result = (uint64_t (***)())(*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*(v43 - 3) + 40))(*(v43 - 3), *(v43 - 6), (unint64_t)*(v43 - 4) & 0x7FFFFFFFFFFFFFFFLL);
                v43 -= 6;
              }
            }
            if (v38)
              result = (uint64_t (***)())(*((uint64_t (**)(uint64_t (**)(), uint64_t (**)(), int64_t))**v51
                                                    + 5))(*v51, v38, (char *)v44 - (char *)v38);
          }
          else
          {
            if (v25)
            {
              v26 = (uint64_t (*)())*((_QWORD *)v22 + 6);
              v25[3] = (uint64_t (*)())*((_QWORD *)v22 + 4);
              if ((char)v22[31] < 0)
              {
                result = (uint64_t (***)())std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v25, *((void **)v22 + 1), *((_QWORD *)v22 + 2));
              }
              else
              {
                v19 = *(_OWORD *)v23;
                v25[2] = *(uint64_t (**)())(v23 + 16);
                *(_OWORD *)v25 = v19;
              }
              v25[4] = v26;
              *((_DWORD *)v25 + 10) = 0;
              *((_BYTE *)v25 + 44) = v47;
            }
            v20 = v25 + 6;
            *(_QWORD *)v17 = v25 + 6;
          }
          *(_QWORD *)v17 = v20;
          v21 = (_BYTE *)*v8;
          v8 += 2;
          *((_BYTE *)v20 - 8) = v21[56];
          *((_BYTE *)v20 - 7) = v21[57];
          *((_BYTE *)v20 - 6) = v21[58];
          *((_BYTE *)v20 - 5) = v21[59];
          if (v8 == v7)
            return result;
        }
      }
      v10 = 2;
    }
    v47 = v10;
    goto LABEL_34;
  }
  v5 = result[48];
  for (i = result[49]; i != v5; i -= 8)
  {
    if (*((char *)i - 9) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*(i - 1) + 40))(*(i - 1), *(i - 4), (unint64_t)*(i - 2) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*((char *)i - 41) & 0x80000000) == 0)
        continue;
    }
    else if ((*((char *)i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*(i - 5) + 40))(*(i - 5), *(i - 8), (unint64_t)*(i - 6) & 0x7FFFFFFFFFFFFFFFLL);
  }
  v2[49] = v5;
  v11 = v2[24];
  v48 = &off_1E427A0B0;
  v49 = v2;
  result = &v48;
  *((_QWORD *)&v50 + 1) = &v48;
  v12 = v11[16];
  v13 = v11[17];
  if (v12 == v13)
  {
    v14 = 4;
    return (uint64_t (***)())(*result)[v14]();
  }
  while (2)
  {
    v15 = *((_QWORD *)v12 + 2);
    v16 = *((_QWORD *)v12 + 3);
    if (v15 != v16)
    {
      while (*((_QWORD *)&v50 + 1))
      {
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)&v50 + 1) + 48))(*((_QWORD *)&v50 + 1), v15);
        v15 += 8;
        if (v15 == v16)
          goto LABEL_21;
      }
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
LABEL_70:
      abort();
    }
LABEL_21:
    v12 = (uint64_t (*)())((char *)v12 + 112);
    if (v12 != v13)
      continue;
    break;
  }
  result = (uint64_t (***)())*((_QWORD *)&v50 + 1);
  if (*((uint64_t (****)())&v50 + 1) == &v48)
  {
    v14 = 4;
    result = &v48;
    return (uint64_t (***)())(*result)[v14]();
  }
  else if (*((_QWORD *)&v50 + 1))
  {
    v14 = 5;
    return (uint64_t (***)())(*result)[v14]();
  }
  return result;
}

void sub_19F75FBF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void sub_19F75FBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__split_buffer<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F75FC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void md::UniLineLabelFeature::populateFeatureInfo(md::UniLineLabelFeature *this, md::LabelFeatureInfo *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  void **v8;
  size_t v9;
  __int128 v10;
  size_t v11;
  __int128 *v12;
  __int128 *v13;
  size_t v14;
  uint64_t v15;
  __int128 *v16;
  void **v17;
  size_t v18;
  __int128 v19;
  size_t v20;
  __int128 *v21;
  __int128 *v22;
  size_t v23;

  v4 = (char *)a2 + 16;
  if (!*((_QWORD *)a2 + 2))
  {
    std::mutex::lock((std::mutex *)((char *)this + 8));
    v5 = *((_QWORD *)this + 19);
    if (v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v4);
    std::mutex::unlock((std::mutex *)((char *)this + 8));
  }
  *((_DWORD *)a2 + 16) = -1431655765 * ((*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 4);
  v6 = *((_QWORD *)this + 57);
  if (v6)
  {
    v7 = (__int128 *)(v6 + 240);
    v8 = (void **)((char *)a2 + 72);
    if ((md::LabelFeatureInfo *)((char *)a2 + 72) != (md::LabelFeatureInfo *)(v6 + 240))
    {
      v9 = *(unsigned __int8 *)(v6 + 263);
      if (*((char *)a2 + 95) < 0)
      {
        v12 = *(__int128 **)(v6 + 240);
        v11 = *(_QWORD *)(v6 + 248);
        if ((v9 & 0x80u) == 0)
          v13 = v7;
        else
          v13 = v12;
        if ((v9 & 0x80u) == 0)
          v14 = v9;
        else
          v14 = v11;
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v8, v13, v14);
      }
      else if ((v9 & 0x80) != 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v8, *(void **)(v6 + 240), *(_QWORD *)(v6 + 248));
      }
      else
      {
        v10 = *v7;
        *((_QWORD *)a2 + 11) = *(_QWORD *)(v6 + 256);
        *(_OWORD *)v8 = v10;
      }
    }
    v15 = *((_QWORD *)this + 57);
    v16 = (__int128 *)(v15 + 272);
    v17 = (void **)((char *)a2 + 104);
    if ((md::LabelFeatureInfo *)((char *)a2 + 104) != (md::LabelFeatureInfo *)(v15 + 272))
    {
      v18 = *(unsigned __int8 *)(v15 + 295);
      if (*((char *)a2 + 127) < 0)
      {
        v21 = *(__int128 **)(v15 + 272);
        v20 = *(_QWORD *)(v15 + 280);
        if ((v18 & 0x80u) == 0)
          v22 = v16;
        else
          v22 = v21;
        if ((v18 & 0x80u) == 0)
          v23 = v18;
        else
          v23 = v20;
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v17, v22, v23);
      }
      else if ((v18 & 0x80) != 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v17, *(void **)(v15 + 272), *(_QWORD *)(v15 + 280));
      }
      else
      {
        v19 = *v16;
        *((_QWORD *)a2 + 15) = *(_QWORD *)(v15 + 288);
        *(_OWORD *)v17 = v19;
      }
    }
  }
}

void sub_19F75FD9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::UniLineLabelFeature::featureID(md::UniLineLabelFeature *this)
{
  return *((_QWORD *)this + 61);
}

BOOL md::UniLineLabelFeature::isOnRouteFeature(md::UniLineLabelFeature *this)
{
  return *((_BYTE *)this + 448) == 14;
}

uint64_t md::UniLineLabelFeature::debugString@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  const void **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unsigned __int8 *v34;
  double v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  void *__p[2];
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v61[0] = MEMORY[0x1E0DE4FE0] + 64;
  v53 = v12;
  *(uint64_t *)((char *)&v53 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v53 + *(_QWORD *)(v53 - 24));
  std::ios_base::init(v14, &v54);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v53 = v10 + 24;
  v61[0] = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  v54 = MEMORY[0x1E0DE4FB8] + 16;
  v58 = 0u;
  v59 = 0u;
  v60 = 16;
  {
    v47 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v50 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v49) = 4;
  strcpy((char *)v48, "Road");
  md::LineLabelFeature::debugRoadString(__p, (uint64_t)a1, a2, a3, a4, (uint64_t)v48);
  if ((v52 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v52 & 0x80u) == 0)
    v18 = v52;
  else
    v18 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)v17, v18);
  if ((char)v52 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_18:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v50 + 40))(v50, v48[0], v49 & 0x7FFFFFFFFFFFFFFFLL);
    goto LABEL_10;
  }
  if (SHIBYTE(v49) < 0)
    goto LABEL_18;
LABEL_10:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Road Attributes:\n", 17);
  if (!(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v24 = a1[29];
    v23 = a1 + 29;
    v22 = v24;
    if (v24)
    {
      v25 = *a3;
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)(v22 + 32);
        v28 = v27 >= v25;
        if (v27 >= v25)
          v29 = (uint64_t *)v22;
        else
          v29 = (uint64_t *)(v22 + 8);
        if (v28)
          v26 = (_QWORD *)v22;
        v22 = *v29;
      }
      while (*v29);
      if (v26 != v23 && v25 >= *((_DWORD *)v26 + 8))
      {
        v30 = v26[5];
        v31 = (std::__shared_weak_count *)v26[6];
        v48[0] = v30;
        v48[1] = v31;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
        }
        if (v30)
        {
          if ((v34 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 200))(v30),
                v36 = v34,
                *(_QWORD *)v34)
            && *((_DWORD *)v34 + 10) == *(_DWORD *)(*(_QWORD *)v34 + 252)
            && (v37 = (uint64_t *)*((_QWORD *)v34 + 3)) != 0
            && (*((__int16 *)v34 + 17) & 0x80000000) == 0
            || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v34, v34[164], v35),
                *(_QWORD *)v36)
            && *((_DWORD *)v36 + 10) == *(_DWORD *)(*(_QWORD *)v36 + 252)
            && (v37 = (uint64_t *)*((_QWORD *)v36 + 3)) != 0)
          {
            if ((*((__int16 *)v36 + 17) & 0x80000000) == 0)
            {
              v38 = *v37;
              if (v38)
              {
                if (!*(_BYTE *)(v38 + 32))
                {
                  v39 = *(_QWORD *)(v38 + 16);
                  if (v39)
                  {
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"  RoadClass=", 12);
                    LOBYTE(__p[0]) = *(_BYTE *)(v39 + 151);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)__p, 1);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"\n", 1);
                  }
                }
              }
            }
          }
        }
        if (v31)
        {
          v40 = (unint64_t *)&v31->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
    }
  }
  if ((v60 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1) < v57)
    {
      *((_QWORD *)&v59 + 1) = v57;
      v20 = v57;
    }
    v21 = (const void **)&v56;
  }
  else
  {
    if ((v60 & 8) == 0)
    {
      v19 = 0;
      a5[23] = 0;
      goto LABEL_60;
    }
    v21 = (const void **)v55;
    v20 = v55[2];
  }
  v42 = *v21;
  v19 = v20 - (_QWORD)*v21;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v19 >= 0x17)
  {
    v43 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v43 = v19 | 7;
    v44 = v43 + 1;
    v45 = operator new(v43 + 1);
    *((_QWORD *)a5 + 1) = v19;
    *((_QWORD *)a5 + 2) = v44 | 0x8000000000000000;
    *(_QWORD *)a5 = v45;
    a5 = v45;
    goto LABEL_59;
  }
  a5[23] = v19;
  if (v19)
LABEL_59:
    memmove(a5, v42, v19);
LABEL_60:
  a5[v19] = 0;
  v53 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v53 + *(_QWORD *)(v53 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v54 = v15 + 16;
  if (SBYTE7(v59) < 0)
    operator delete((void *)v58);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v61);
}

void sub_19F76024C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t md::UniLineLabelFeature::isPickedStateStylable(md::UniLineLabelFeature *this)
{
  return 0;
}

void md::UniLineLabelFeature::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4)
{
  void *v7;
  gss::Allocator *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    v7 = (void *)MEMORY[0x1E0CB3940];
    v8 = (gss::Allocator *)(a1 + 416);
    md::HighlightHelper::debugAttributesToString(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringWithFormat:", CFSTR("{%@}"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v10);

    md::LabelFeature::debugClientAttributesToString((uint64_t *)v8, *(_QWORD *)(a3 + 336));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%@}"), v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addObject:", v12);

    }
  }
  else
  {
    md::LineLabelFeature::debugPopulateAttributeStrings(a1, v13, a3, a4);
  }

}

void sub_19F7603F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

unsigned int **md::UniLineLabelFeature::debugPopulateStyleAttributes(uint64_t a1, unsigned int *a2)
{
  unsigned int **result;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    md::createFeatureAttributeSet((gss::Allocator *)&v7, (uint64_t *)(a1 + 416));
    result = (unsigned int **)std::__hash_table<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::__emplace_unique_key_args<gss::FeatureAttributeSet,gss::FeatureAttributeSet>((unint64_t)a2, v7, v8, (uint64_t)&v7);
    if (v7)
    {
      v8 = v7;
      return (unsigned int **)(*((uint64_t (**)(unsigned int **, unsigned int *, uint64_t))*v10 + 5))(v10, v7, v9 - (_QWORD)v7);
    }
  }
  else
  {
    v7 = (unsigned int *)&off_1E4279768;
    v8 = a2;
    v10 = &v7;
    std::mutex::lock((std::mutex *)(a1 + 8));
    v5 = *(_QWORD *)(a1 + 152);
    if (v5)
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v5 + 24))(v5, &v7);
    std::mutex::unlock((std::mutex *)(a1 + 8));
    result = v10;
    if (v10 == &v7)
    {
      v6 = 4;
      result = &v7;
    }
    else
    {
      if (!v10)
        return result;
      v6 = 5;
    }
    return (unsigned int **)(*(uint64_t (**)(void))&(*result)[2 * v6])();
  }
  return result;
}

void sub_19F760558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  std::mutex *v13;
  std::mutex *v14;
  uint64_t *v16;
  uint64_t v17;

  v14 = v13;
  std::mutex::unlock(v14);
  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(a1);
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
  _Unwind_Resume(a1);
}

uint64_t md::UniLineLabelFeature::textIndexForFeature(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  double v11;
  int v12;
  double v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  __int128 *v17;
  size_t v18;
  size_t v19;
  __int128 *v20;
  __int128 *v21;
  size_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 __dst;
  uint64_t v36;
  uint64_t v37;

  __dst = 0uLL;
  v36 = 0;
  {
    v24 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v24, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v37 = mdm::Allocator::instance(void)::alloc;
  v32 = 0uLL;
  v33 = 0;
  {
    v25 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v34 = mdm::Allocator::instance(void)::alloc;
  if (*(_BYTE *)(a1 + 449) != 1)
  {
    v9 = *(_QWORD *)(a1 + 472);
    if (v9)
    {
      if (&__dst != (__int128 *)(v9 + 8))
      {
        if (*(char *)(v9 + 31) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&__dst, *(void **)(v9 + 8), *(_QWORD *)(v9 + 16));
          v9 = *(_QWORD *)(a1 + 472);
        }
        else
        {
          v10 = *(_OWORD *)(v9 + 8);
          v36 = *(_QWORD *)(v9 + 24);
          __dst = v10;
        }
      }
      v17 = (__int128 *)(v9 + 40);
      if (&v32 != (__int128 *)(v9 + 40))
      {
        v18 = *(unsigned __int8 *)(v9 + 63);
        if (SHIBYTE(v33) < 0)
        {
          v20 = *(__int128 **)(v9 + 40);
          v19 = *(_QWORD *)(v9 + 48);
          if ((v18 & 0x80u) == 0)
            v21 = v17;
          else
            v21 = v20;
          if ((v18 & 0x80u) == 0)
            v22 = v18;
          else
            v22 = v19;
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v32, v21, v22);
        }
        else if ((v18 & 0x80) != 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&v32, *(void **)(v9 + 40), *(_QWORD *)(v9 + 48));
        }
        else
        {
          v32 = *v17;
          v33 = *(_QWORD *)(v9 + 56);
        }
      }
    }
    else
    {
      v11 = md::LabelFeature::textFromFeature(&v26, a2, a3, (uint64_t)&v32, 0);
      if (SHIBYTE(v36) < 0)
        (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)v37 + 40))(v37, __dst, v36 & 0x7FFFFFFFFFFFFFFFLL, v11);
      __dst = v26;
      v36 = v27;
    }
    v28 = v37;
    if (SHIBYTE(v36) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v26, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      v26 = __dst;
      v27 = v36;
    }
    v31 = v34;
    if (SHIBYTE(v33) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v29, (void *)v32, *((unint64_t *)&v32 + 1));
    }
    else
    {
      v29 = v32;
      v30 = v33;
    }
    v16 = md::LineLabelFeature::textIndexForText((uint64_t *)a1, (uint64_t)&v26);
    if (SHIBYTE(v30) < 0)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v29, v30 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v27) & 0x80000000) == 0)
      {
LABEL_68:
        if (SHIBYTE(v33) < 0)
          goto LABEL_73;
        goto LABEL_69;
      }
    }
    else if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 40))(v28, v26, v27 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v33) < 0)
      goto LABEL_73;
    goto LABEL_69;
  }
  v8 = md::LabelFeature::textFromFeature(&v26, a2, a3, (uint64_t)&v32, 0);
  if (SHIBYTE(v36) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)v37 + 40))(v37, __dst, v36 & 0x7FFFFFFFFFFFFFFFLL, v8);
  v36 = v27;
  __dst = v26;
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if (HIBYTE(v27))
    {
      v26 = __dst;
      v27 = v36;
      v28 = v37;
      goto LABEL_18;
    }
LABEL_20:
    v12 = 255;
    goto LABEL_24;
  }
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_20;
  v28 = v37;
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v26, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_18:
  v31 = v34;
  if (SHIBYTE(v33) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v29, (void *)v32, *((unint64_t *)&v32 + 1));
  }
  else
  {
    v29 = v32;
    v30 = v33;
  }
  v12 = md::LineLabelFeature::textIndexForText((uint64_t *)a1, (uint64_t)&v26);
  if (SHIBYTE(v30) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v29, v30 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 40))(v28, v26, v27 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_24:
  v13 = md::LabelFeature::textFromFeature(&v26, a2, a3, (uint64_t)&v32, 1u);
  if (SHIBYTE(v36) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)v37 + 40))(v37, __dst, v36 & 0x7FFFFFFFFFFFFFFFLL, v13);
  v36 = v27;
  __dst = v26;
  v14 = HIBYTE(v27);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if (!HIBYTE(v27))
      goto LABEL_39;
    v26 = __dst;
    v27 = v36;
    v28 = v37;
LABEL_31:
    v31 = v34;
    if (SHIBYTE(v33) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v29, (void *)v32, *((unint64_t *)&v32 + 1));
    }
    else
    {
      v29 = v32;
      v30 = v33;
    }
    v15 = md::LineLabelFeature::textIndexForText((uint64_t *)a1, (uint64_t)&v26);
    if (SHIBYTE(v30) < 0)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v29, v30 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        goto LABEL_38;
    }
    else if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_38:
      v14 = v15 != 255;
      goto LABEL_39;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 40))(v28, v26, v27 & 0x7FFFFFFFFFFFFFFFLL);
    goto LABEL_38;
  }
  if (*((_QWORD *)&__dst + 1))
  {
    v28 = v37;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v26, (void *)__dst, *((unint64_t *)&__dst + 1));
    goto LABEL_31;
  }
  v14 = 0;
LABEL_39:
  if (((v12 != 255) & v14) != 0)
    v16 = v12;
  else
    v16 = -1;
  if (SHIBYTE(v33) < 0)
  {
LABEL_73:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 40))(v34, v32, v33 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v36) < 0)
      goto LABEL_74;
    return v16;
  }
LABEL_69:
  if (SHIBYTE(v36) < 0)
LABEL_74:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 40))(v37, __dst, v36 & 0x7FFFFFFFFFFFFFFFLL);
  return v16;
}

void sub_19F760B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (SHIBYTE(a11) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(a19) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v20 - 41) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((SHIBYTE(a19) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, a17, a19 & 0x7FFFFFFFFFFFFFFFLL);
  if ((*(char *)(v20 - 41) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 - 40) + 40))(*(_QWORD *)(v20 - 40), *(_QWORD *)(v20 - 64), *(_QWORD *)(v20 - 48) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

uint64_t md::UniLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const FeatureStyleAttributes *v8;
  std::__shared_weak_count *v9;

  md::UniLineLabelFeature::mergeAdditionalAttributes(&v8, *(_QWORD *)(a1 + 472), *(const FeatureStyleAttributes **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v3 = md::LineLabelFeature::styleIndexForAttributes(a1, (uint64_t *)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19F760CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::UniLineLabelFeature::textIndexForFeature(uint64_t a1, uint64_t *a2, int a3)
{
  return md::UniLineLabelFeature::textIndexForFeature(a1 - 440, a2, a3);
}

uint64_t `non-virtual thunk to'md::UniLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const FeatureStyleAttributes *v8;
  std::__shared_weak_count *v9;

  v2 = a1 - 440;
  md::UniLineLabelFeature::mergeAdditionalAttributes(&v8, *(_QWORD *)(a1 + 32), *(const FeatureStyleAttributes **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v3 = md::LineLabelFeature::styleIndexForAttributes(v2, (uint64_t *)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19F760D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::UniLineLabelFeature::mergeAdditionalAttributes(const FeatureStyleAttributes **a1, uint64_t a2, const FeatureStyleAttributes *a3, uint64_t a4)
{
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int8 v14;
  unint64_t *v15;
  unint64_t v16;
  int *v17;
  int v18;

  if (a2)
  {
    v6 = operator new(8uLL);
    *(_QWORD *)v6 = 0x100010002;
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E42DAB40;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), a3);
    v8 = v7[57];
    v9 = *((_QWORD *)v7 + 3);
    if (v7[57])
    {
      v10 = *v6;
      if (v8 >= 0x20)
      {
        v11 = 0;
        v17 = (int *)*((_QWORD *)v7 + 3);
        while (1)
        {
          v18 = *v17;
          v17 += 2;
          if (v18 == v10)
            break;
          if (v8 == ++v11)
            goto LABEL_17;
        }
      }
      else
      {
        v11 = 0;
        v12 = (int *)*((_QWORD *)v7 + 3);
        while (1)
        {
          v13 = *v12;
          v12 += 2;
          if (v13 == v10)
            break;
          if (v8 == ++v11)
            goto LABEL_7;
        }
      }
      *(_DWORD *)(v9 + 8 * v11 + 4) = v6[1];
    }
    else
    {
LABEL_7:
      *(_QWORD *)(v9 + 8 * v8) = *(_QWORD *)v6;
      v14 = v7[57] + 1;
      v7[57] = v14;
      qsort(*((void **)v7 + 3), v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_17:
    *a1 = (const FeatureStyleAttributes *)(v7 + 24);
    a1[1] = (const FeatureStyleAttributes *)v7;
    operator delete(v6);
  }
  else
  {
    *a1 = a3;
    a1[1] = (const FeatureStyleAttributes *)a4;
    if (a4)
    {
      v15 = (unint64_t *)(a4 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
}

void sub_19F760F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::__emplace_unique_key_args<gss::FeatureAttributeSet,gss::FeatureAttributeSet>(unint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *i;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  int8x8_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;

  v6 = result;
  v7 = (char *)a3 - (char *)a2;
  v8 = ((char *)a3 - (char *)a2) >> 3;
  if (a3 != a2)
  {
    v9 = a2;
    do
    {
      v10 = ((v8 << 6) - 0x61C8864680B583EBLL + (v8 >> 2) + *v9) ^ v8;
      v8 = (*((unsigned __int16 *)v9 + 2) - 0x61C8864680B583EBLL + (v10 << 6) + (v10 >> 2)) ^ v10;
      v9 += 2;
    }
    while (v9 != a3);
  }
  v11 = *(_QWORD *)(result + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v11)
        v4 = v8 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)result + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v8)
            {
              v22 = v14[2];
              v21 = v14[3];
              if (v21 - v22 == v7)
              {
                if (v22 == v21)
                  return result;
                for (i = a2; *(_DWORD *)v22 == *i && *(unsigned __int16 *)(v22 + 4) == *((unsigned __int16 *)i + 2); i += 2)
                {
                  v22 += 8;
                  if (v22 == v21)
                    return result;
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v4)
            {
              goto LABEL_42;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_42;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v8)
          {
            v17 = v14[2];
            v16 = v14[3];
            if (v16 - v17 == v7)
            {
              if (v17 == v16)
                return result;
              for (j = a2; *(_DWORD *)v17 == *j && *(unsigned __int16 *)(v17 + 4) == *((unsigned __int16 *)j + 2); j += 2)
              {
                v17 += 8;
                if (v17 == v16)
                  return result;
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_42:
  v36 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 48, 8);
  *v36 = 0;
  v36[1] = v8;
  v36[2] = 0;
  v36[3] = 0;
  v36[4] = 0;
  result = gss::Allocator::instance((gss::Allocator *)v36);
  v36[5] = result;
  if (v36 + 2 != (uint64_t *)a4)
    result = std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v36 + 2, *(_QWORD *)a4, *(_QWORD **)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v25 = (float)(unint64_t)(*(_QWORD *)(v6 + 40) + 1);
  v26 = *(float *)(v6 + 48);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      v30 = v29;
    else
      v30 = v28;
    if (v30 == 1)
    {
      v30 = 2;
    }
    else if ((v30 & (v30 - 1)) != 0)
    {
      result = std::__next_prime(v30);
      v30 = result;
    }
    v31 = *(int8x8_t *)(v6 + 8);
    if (v30 > *(_QWORD *)&v31)
      goto LABEL_56;
    if (v30 < *(_QWORD *)&v31)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 40) / *(float *)(v6 + 48));
      if (*(_QWORD *)&v31 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v31), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v33 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v33;
      }
      if (v30 <= result)
        v30 = result;
      if (v30 < *(_QWORD *)&v31)
LABEL_56:
        result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v6, v30);
    }
    v11 = *(_QWORD *)(v6 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v4 = v8 % v11;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
  }
  v34 = *(uint64_t **)(*(_QWORD *)v6 + 8 * v4);
  if (v34)
  {
    *v36 = *v34;
    *v34 = (uint64_t)v36;
  }
  else
  {
    *v36 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v36;
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v4) = v6 + 24;
    if (*v36)
    {
      v35 = *(_QWORD *)(*v36 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v35 >= v11)
          v35 %= v11;
      }
      else
      {
        v35 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v35) = v36;
    }
  }
  ++*(_QWORD *)(v6 + 40);
  return result;
}

void sub_19F761350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<gss::FeatureAttributeSet,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<gss::FeatureAttributeSet,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<gss::FeatureAttributeSet,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<gss::FeatureAttributeSet,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        *(_QWORD *)(v2 + 24) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), v3, *(_QWORD *)(v2 + 32) - v3);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 48);
  }
  return a1;
}

uint64_t std::__split_buffer<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 25) < 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 - 24) + 40))(*(_QWORD *)(v2 - 24), *(_QWORD *)(v2 - 48), *(_QWORD *)(v2 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::__function::__func<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A0B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A0B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(std::shared_ptr<md::LabelExternalRoadFeature> const&,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 __dst;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(*a2 + 32) == 1)
  {
    v2 = *(uint64_t **)(*a2 + 24);
    if (v2)
    {
      v3 = *v2;
      if (v3)
      {
        if (*(char *)(v3 + 263) < 0)
        {
          if (!*(_QWORD *)(v3 + 248))
            return result;
        }
        else if (!*(_BYTE *)(v3 + 263))
        {
          return result;
        }
        v4 = *(uint64_t **)(result + 8);
        if ((v5 & 1) == 0)
        {
          v10 = v3;
          v11 = a2;
          v3 = v10;
          a2 = v11;
          if (v8)
          {
            v9 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
            v3 = v10;
            a2 = v11;
          }
        }
        v6 = mdm::Allocator::instance(void)::alloc;
        v7 = *a2;
        v14 = *(_QWORD *)(v3 + 264);
        if (*(char *)(v3 + 263) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)(v3 + 240), *(_QWORD *)(v3 + 248));
        }
        else
        {
          __dst = *(_OWORD *)(v3 + 240);
          v13 = *(_QWORD *)(v3 + 256);
        }
        v17 = 0;
        v18 = v6;
        v15 = 0;
        v16 = 0;
        result = md::LineLabelFeature::textIndexForText(v4, (uint64_t)&__dst);
        *(_BYTE *)(v7 + 38) = result;
        if (SHIBYTE(v13) < 0)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 40))(v14, __dst, v13 & 0x7FFFFFFFFFFFFFFFLL);
      }
    }
  }
  return result;
}

void sub_19F761638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (SHIBYTE(a13) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void md::UniLineLabelFeature::shieldsForFeature(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *__s;
  char *v55;
  __int128 v56;
  _QWORD *v57;

  v6 = a1 + 3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  *v6 = mdm::Allocator::instance(void)::alloc;
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 72) >= 8u)
      v9 = 8;
    else
      v9 = *(unsigned __int8 *)(a2 + 72);
    v10 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) < v9)
    {
      v11 = a1[1];
      v12 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 48 * v9, 8);
      v13 = v12 + v11 - v10;
      v14 = v12 + 48 * v9;
      v15 = *a1;
      v16 = a1[1];
      if (v16 == *a1)
      {
        *a1 = v13;
        a1[1] = v13;
        v22 = a1[2];
        a1[2] = v14;
      }
      else
      {
        v17 = 0;
        do
        {
          v18 = v13 + v17;
          v19 = v16 + v17;
          v20 = *(_OWORD *)(v16 + v17 - 32);
          *(_OWORD *)(v18 - 48) = *(_OWORD *)(v16 + v17 - 48);
          *(_OWORD *)(v18 - 32) = v20;
          *(_QWORD *)(v19 - 40) = 0;
          *(_QWORD *)(v19 - 32) = 0;
          *(_QWORD *)(v19 - 48) = 0;
          *(_QWORD *)(v18 - 16) = *(_QWORD *)(v16 + v17 - 16);
          *(_DWORD *)(v18 - 8) = *(_DWORD *)(v16 + v17 - 8);
          *(_BYTE *)(v18 - 4) = *(_BYTE *)(v16 + v17 - 4);
          v17 -= 48;
        }
        while (v16 + v17 != v15);
        v16 = *a1;
        v21 = a1[1];
        *a1 = v13 + v17;
        a1[1] = v13;
        v22 = a1[2];
        a1[2] = v14;
        while (v21 != v16)
        {
          if (*(char *)(v21 - 25) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v21 - 24) + 40))(*(_QWORD *)(v21 - 24), *(_QWORD *)(v21 - 48), *(_QWORD *)(v21 - 32) & 0x7FFFFFFFFFFFFFFFLL);
          v21 -= 48;
        }
      }
      if (v16)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 40))(*v6, v16, v22 - v16);
    }
    if (*(_BYTE *)(a2 + 72))
    {
      v23 = 0;
      v49 = v6;
      do
      {
        v53 = 0;
        __s = 0;
        geo::codec::featureGetNativeShield(a2, v23, &__s, &v53, 0);
        localizedLabel(&v50, (uint64_t *)a2, __s, a3, 0);
        v24 = v53;
        if (!v53)
        {
          v25 = HIBYTE(v51);
          v26 = SHIBYTE(v51);
          if (v51 < 0)
            v25 = *((_QWORD *)&v50 + 1);
          if (!v25)
            goto LABEL_58;
        }
        v28 = a1[1];
        v27 = a1[2];
        if (v28 >= v27)
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a1) >> 4);
          v30 = v29 + 1;
          if (v29 + 1 > 0x555555555555555)
            abort();
          v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a1) >> 4);
          if (2 * v31 > v30)
            v30 = 2 * v31;
          if (v31 >= 0x2AAAAAAAAAAAAAALL)
            v32 = 0x555555555555555;
          else
            v32 = v30;
          v57 = v6;
          if (v32)
            v33 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, 48 * v32, 8);
          else
            v33 = 0;
          v34 = &v33[48 * v29];
          __s = v33;
          v55 = v34;
          *(_QWORD *)&v56 = v34;
          *((_QWORD *)&v56 + 1) = &v33[48 * v32];
          if (v33)
          {
            v35 = v53;
            *((_QWORD *)v34 + 3) = v52;
            if (SHIBYTE(v51) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v34, (void *)v50, *((unint64_t *)&v50 + 1));
              v34 = v55;
              v36 = (char *)v56;
            }
            else
            {
              *(_OWORD *)v34 = v50;
              *((_QWORD *)v34 + 2) = v51;
              v36 = &v33[48 * v29];
            }
            v38 = &v33[48 * v29];
            *((_QWORD *)v38 + 4) = v35;
            *((_DWORD *)v38 + 10) = 0;
            v38[44] = 1;
          }
          else
          {
            v36 = v34;
          }
          v37 = v36 + 48;
          *(_QWORD *)&v56 = v36 + 48;
          v39 = *a1;
          v40 = a1[1];
          v6 = v49;
          if (v40 == *a1)
          {
            *a1 = v34;
            a1[1] = v37;
            v46 = a1[2];
            a1[2] = *((_QWORD *)&v56 + 1);
            if (v40)
              goto LABEL_56;
          }
          else
          {
            v41 = 0;
            do
            {
              v42 = &v34[v41];
              v43 = v40 + v41;
              v44 = *(_OWORD *)(v40 + v41 - 32);
              *((_OWORD *)v42 - 3) = *(_OWORD *)(v40 + v41 - 48);
              *((_OWORD *)v42 - 2) = v44;
              *(_QWORD *)(v43 - 40) = 0;
              *(_QWORD *)(v43 - 32) = 0;
              *(_QWORD *)(v43 - 48) = 0;
              *((_QWORD *)v42 - 2) = *(_QWORD *)(v40 + v41 - 16);
              *((_DWORD *)v42 - 2) = *(_DWORD *)(v40 + v41 - 8);
              *(v42 - 4) = *(_BYTE *)(v40 + v41 - 4);
              v41 -= 48;
            }
            while (v40 + v41 != v39);
            v40 = *a1;
            v45 = a1[1];
            *a1 = &v34[v41];
            v46 = a1[2];
            v47 = (char *)v56;
            *(_OWORD *)(a1 + 1) = v56;
            v37 = v47;
            while (v45 != v40)
            {
              if (*(char *)(v45 - 25) < 0)
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v45 - 24) + 40))(*(_QWORD *)(v45 - 24), *(_QWORD *)(v45 - 48), *(_QWORD *)(v45 - 32) & 0x7FFFFFFFFFFFFFFFLL);
              v45 -= 48;
            }
            if (v40)
LABEL_56:
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v57 + 40))(*v57, v40, v46 - v40);
          }
        }
        else
        {
          if (v28)
          {
            *(_QWORD *)(v28 + 24) = v52;
            if (SHIBYTE(v51) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v28, (void *)v50, *((unint64_t *)&v50 + 1));
            }
            else
            {
              *(_OWORD *)v28 = v50;
              *(_QWORD *)(v28 + 16) = v51;
            }
            *(_QWORD *)(v28 + 32) = v24;
            *(_DWORD *)(v28 + 40) = 0;
            *(_BYTE *)(v28 + 44) = 1;
          }
          v37 = (char *)(v28 + 48);
          a1[1] = v28 + 48;
        }
        a1[1] = v37;
        v26 = SHIBYTE(v51);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*a1] >> 4) > 7)
        {
          if (SHIBYTE(v51) < 0)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v52 + 40))(v52, v50, v51 & 0x7FFFFFFFFFFFFFFFLL);
          return;
        }
LABEL_58:
        if (v26 < 0)
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v52 + 40))(v52, v50, v51 & 0x7FFFFFFFFFFFFFFFLL);
        ++v23;
      }
      while (v23 < *(unsigned __int8 *)(a2 + 72));
    }
  }
}

void sub_19F761B64(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427A068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427A068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_BYTE *)(*a2 + 32))
  {
    if (*(_QWORD *)(v2 + 16))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 664))(*(_QWORD *)(result + 8));
      *(_BYTE *)(v2 + 38) = result;
    }
  }
  return result;
}

uint64_t *std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 - 24) + 40))(*(_QWORD *)(v3 - 24), *(_QWORD *)(v3 - 48), *(_QWORD *)(v3 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t md::UniLineLabelFeature::newAnnotationPart(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  __int16 v39;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  _BYTE v49[3];
  __int16 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  geo::codec::VectorTile *v59;
  std::__shared_weak_count *v60;

  v10 = *(_QWORD *)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 48);
  v12 = atomic_load((unsigned __int8 *)(a3 + 1240));
  v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v10 + 552))(v10, v11, 0, v12 & 1, a2);
  v14 = *v13;
  if (*v13)
  {
    v15 = v13;
    v16 = *(float **)(v14 + 288);
    if (v16)
    {
      if (vabds_f32(v16[2], *(float *)(v14 + 104)) >= 0.01)
      {
        md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(*v13, (uint64_t)v16, 6);
        v16 = *(float **)(v14 + 288);
      }
    }
    else
    {
      v16 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(*v13, 6);
      *(_QWORD *)(v14 + 288) = v16;
    }
    v17 = *(_QWORD *)v16;
    if (*(float *)(*(_QWORD *)v16 + 100) <= 0.0 || !(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 120))(*a5))
      return 0;
    v48 = *(_BYTE *)(a3 + 404);
    v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 120))(*a5);
    v19 = *v15;
    v20 = *(_QWORD *)(*v15 + 264);
    if (!v20)
    {
      v21 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*v15);
      v20 = *v21;
      *(_QWORD *)(v19 + 264) = *v21;
    }
    if (*(_DWORD *)(v20 + 12))
      v22 = *(_DWORD *)(v20 + 12);
    else
      v22 = 4;
    if (!v18)
    {
      LOBYTE(v51) = 0;
      v58 = 0;
      return 0;
    }
    v23 = *(unsigned __int8 *)(v20 + 64);
    v59 = 0;
    v60 = 0;
    v24 = *(std::__shared_weak_count **)(v18 + 8);
    if (v24)
    {
      v60 = std::__shared_weak_count::lock(v24);
      if (v60)
        v59 = *(geo::codec::VectorTile **)v18;
    }
    md::LabelFeature::tileAnnotationText(&v51, &v59, *(_DWORD *)(v18 + 140), *(unsigned __int8 *)(v18 + 150), v22, v23);
    v25 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (!v58)
      return 0;
    v28 = md::LineLabelFeature::textIndexForText(a1, (uint64_t)&v51);
    if (v58)
    {
      if (SHIBYTE(v56) < 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 40))(v57, v55, v56 & 0x7FFFFFFFFFFFFFFFLL);
      if (SHIBYTE(v53) < 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 40))(v54, v51, v53 & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v28 == 255)
      return 0;
    v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1);
    v30 = (unsigned __int8 *)a1[20];
    v31 = (unsigned __int8 *)a1[21];
    if (v29 > 0x6DB6DB6DB6DB6DB7 * ((v31 - v30) >> 3))
    {
      md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
      v30 = (unsigned __int8 *)a1[20];
      v31 = (unsigned __int8 *)a1[21];
    }
    md::TextDataStore::textDataForZoom(&v51, v30, v31, v28, v17 + 72);
    v32 = v51;
    if (v51)
    {
      v33 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v33->__shared_owners_ = 0;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
      v59 = (geo::codec::VectorTile *)md::LabelText::LabelText((uint64_t)&v33[1], v32, (uint64_t)v52, v48);
      v60 = v33;
      {
        v47 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 1488, 8);
      v35 = (*(uint64_t (**)(uint64_t *))(*a1 + 264))(a1);
      v36 = *v15;
      if (*a4)
      {
        v37 = 0;
        v38 = 0;
        v39 = 9;
      }
      else
      {
        v37 = *(_BYTE *)(a3 + 317);
        v38 = *(_BYTE *)(a3 + 318);
        v39 = *(_WORD *)(a3 + 320);
      }
      v50 = v39;
      v49[0] = v37;
      v49[1] = v38;
      v49[2] = 0;
      md::CurvedTextLabelPart::CurvedTextLabelPart(v14, v35, &v59, a2, a3, v36, a5, (uint64_t)v49, 0.0, a4, 1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 176))(v14, 5);
      v41 = v60;
      if (v60)
      {
        v42 = (unint64_t *)&v60->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    else
    {
      v14 = 0;
    }
    v44 = v52;
    if (v52)
    {
      v45 = (unint64_t *)&v52->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (!v32)
      return 0;
  }
  return v14;
}

void sub_19F762168(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v6 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v4, 1488);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void sub_19F7621B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F7621C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *md::UniLineLabelFeature::newTextAndAnnotationPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v17;

  v11 = (unsigned __int8 *)md::UniLineLabelFeature::newTextPart(a1, a2, a3, a4, a5, a6);
  v12 = md::UniLineLabelFeature::newAnnotationPart((uint64_t *)a1, a2, a3, a5, a6);
  v13 = v12;
  if (v11)
  {
    if (v12)
    {
      {
        v17 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 720, 8);
      md::LineTextWithAuxLabelPart::LineTextWithAuxLabelPart(v15, a6, v11, v13);
      return (unsigned __int8 *)v15;
    }
    else
    {
      return v11;
    }
  }
  return (unsigned __int8 *)v13;
}

void sub_19F7622E4(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 720);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

unsigned __int8 *md::UniLineLabelFeature::newTextAndShieldPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6)
{
  unsigned __int8 *v11;
  uint64_t v12;
  md::LabelPart *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v11 = (unsigned __int8 *)md::UniLineLabelFeature::newTextPart(a1, a2, a3, a4, a5, a6);
  v12 = md::UniLineLabelFeature::newShieldPart((uint64_t)a1, a2, a3, a4, a6);
  v13 = (md::LabelPart *)v12;
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v12 + 200))(&v22, v12);
      v14 = v22;
      v15 = v23;
      if (v22)
      {
        v23 = v22;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, v22, v24 - v22);
      }
      if (v14 == v15)
      {
        {
          v21 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 704, 8);
        md::MultipleShieldLabelPart::MultipleShieldLabelPart(v16, a6);
        if (v16)
          md::CompositeLabelPart::addLabelPart(v16, v13);
      }
      else
      {
        v16 = (uint64_t)v13;
      }
      {
        v20 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 720, 8);
      md::LineTextWithAuxLabelPart::LineTextWithAuxLabelPart((uint64_t)v13, a6, v11, v16);
    }
    else
    {
      return v11;
    }
  }
  return (unsigned __int8 *)v13;
}

void sub_19F7624F8(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 704);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::UniLineLabelFeature::newArrowPart(uint64_t a1, uint64_t a2, md::LabelStyle *a3, _QWORD *a4, char a5)
{
  uint64_t v10;
  int v11;
  uint64_t *v12;
  int v13;
  _BOOL4 v15;
  const char *v16;
  unsigned __int8 v17;
  size_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 __dst;
  uint64_t v49;
  uint64_t v50;

  v10 = *((_QWORD *)a3 + 33);
  if (v10)
  {
    v11 = *(char *)(v10 + 95);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v12 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)a3);
    v10 = *v12;
    *((_QWORD *)a3 + 33) = *v12;
    v11 = *(char *)(v10 + 95);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_3:
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_8:
      v13 = *(_DWORD *)(a1 + 196);
      v15 = v13 == 10 || (v13 - 1) < 4;
      if (v15)
        v16 = "roadArrow_hybrid";
      else
        v16 = "roadArrow_standard";
      if ((v17 & 1) == 0)
      {
        v45 = v16;
        v16 = v45;
        if (v43)
        {
          v44 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
          v16 = v45;
        }
      }
      v50 = mdm::Allocator::instance(void)::alloc;
      if (v15)
        v18 = 16;
      else
        v18 = 18;
      HIBYTE(v49) = v18;
      memcpy(&__dst, v16, v18);
      *((_BYTE *)&__dst + v18) = 0;
      md::LabelStyle::namedIcon(&v46, a3, a1, a2, (void **)&__dst, 0);
      if (SHIBYTE(v49) < 0)
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v50 + 40))(v50, __dst, v49 & 0x7FFFFFFFFFFFFFFFLL);
        if (!v46)
          goto LABEL_49;
      }
      else if (!v46)
      {
        goto LABEL_49;
      }
      goto LABEL_23;
    }
  }
  if (!*(_QWORD *)(v10 + 80))
    goto LABEL_8;
LABEL_4:
  md::LabelStyle::namedIcon(&v46, a3, a1, a2, (void **)(v10 + 72), 0);
  if (!v46)
  {
LABEL_49:
    v20 = 0;
    v38 = v47;
    if (!v47)
      return v20;
    goto LABEL_50;
  }
LABEL_23:
  {
    v42 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 920, 8);
  md::IconLabelPart::IconLabelPart(v20, &v46);
  *(_QWORD *)v21 = off_1E428ECF8;
  *(_OWORD *)(v21 + 768) = 0u;
  *(_OWORD *)(v21 + 784) = xmmword_19FFB3960;
  *(_DWORD *)(v21 + 800) = 1065353216;
  *(_QWORD *)(v21 + 804) = 0;
  *(_QWORD *)(v21 + 820) = 0;
  *(_QWORD *)(v21 + 812) = 0;
  *(_DWORD *)(v21 + 828) = 0;
  *(_BYTE *)(v21 + 832) = 9;
  *(_DWORD *)(v20 + 833) = 0;
  v22 = (_OWORD *)(v21 + 840);
  *(_QWORD *)(v21 + 848) = 0;
  *(_QWORD *)(v21 + 840) = 0;
  *(_OWORD *)(v20 + 856) = xmmword_19FFB3960;
  *(_DWORD *)(v21 + 872) = 1065353216;
  *(_QWORD *)(v21 + 876) = 0;
  *(_QWORD *)(v21 + 892) = 0;
  *(_QWORD *)(v21 + 884) = 0;
  *(_DWORD *)(v21 + 900) = 0;
  *(_BYTE *)(v21 + 904) = 9;
  *(_DWORD *)(v20 + 905) = 0;
  *(_DWORD *)(v21 + 912) = 0;
  *(_BYTE *)(v21 + 916) = a5;
  *(_BYTE *)(v21 + 917) = 0;
  v23 = *a4;
  v24 = a4[1];
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v27 = *(std::__shared_weak_count **)(v20 + 776);
    *(_QWORD *)(v20 + 768) = v23;
    *(_QWORD *)(v20 + 776) = v24;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    *(_QWORD *)(v20 + 768) = v23;
    *(_QWORD *)(v20 + 776) = 0;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a4 + 16))(&__dst);
  v30 = __dst;
  __dst = 0uLL;
  v31 = *(std::__shared_weak_count **)(v20 + 848);
  *v22 = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_61;
  v35 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (*(_BYTE *)(v20 + 916))
      goto LABEL_43;
  }
  else
  {
LABEL_61:
    if (*(_BYTE *)(v20 + 916))
    {
LABEL_43:
      v37 = 0;
      *(_BYTE *)(v20 + 664) = 2;
      goto LABEL_46;
    }
  }
  v37 = 1;
LABEL_46:
  *(_BYTE *)(v20 + 557) = v37;
  *(_BYTE *)(v20 + 656) = v37;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 176))(v20, 1);
  v38 = v47;
  if (!v47)
    return v20;
LABEL_50:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  return v20;
}

void sub_19F762994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (SHIBYTE(a15) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a16 + 40))(a16, a13, a15 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F7629C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  md::IconLabelPart *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  mdm::Allocator *v19;
  uint64_t v20;

  v13 = (std::__shared_weak_count *)*((_QWORD *)v11 + 106);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)v11 + 97);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  md::IconLabelPart::~IconLabelPart(v11);
  v20 = mdm::Allocator::instance(v19);
  (*(void (**)(uint64_t, md::IconLabelPart *, uint64_t))(*(_QWORD *)v20 + 40))(v20, v11, 920);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

unsigned __int8 *md::UniLineLabelFeature::newTextAndTravelArrowPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, md::LabelStyle *a4, _BYTE *a5, _QWORD *a6)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v16;

  v10 = (unsigned __int8 *)md::UniLineLabelFeature::newTextPart(a1, a2, a3, (uint64_t)a4, a5, a6);
  v11 = md::UniLineLabelFeature::newArrowPart(a2, a3, a4, a6, 0);
  v12 = v11;
  if (v10)
  {
    if (v11)
    {
      {
        v16 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 720, 8);
      md::LineTextWithAuxLabelPart::LineTextWithAuxLabelPart(v14, a6, v10, v12);
      return (unsigned __int8 *)v14;
    }
    else
    {
      return v10;
    }
  }
  return (unsigned __int8 *)v12;
}

void sub_19F762B74(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 720);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 55) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      return a1;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  return a1;
}

uint64_t md::UniLineLabelFeature::UniLineLabelFeature(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  char *v37;
  _OWORD *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 v50;
  unint64_t v52;
  int *v53;
  int v54;
  __int128 v55;

  v10 = md::LineLabelFeature::LineLabelFeature(a1, 2, 0);
  *(_QWORD *)v10 = &off_1E4298180;
  *(_QWORD *)(v10 + 440) = &unk_1E4298438;
  *(_WORD *)(v10 + 448) = 2;
  *(_BYTE *)(v10 + 450) = 0;
  *(_OWORD *)(v10 + 456) = 0u;
  *(_OWORD *)(v10 + 472) = 0u;
  *(_QWORD *)(v10 + 488) = 0;
  v11 = a2[3];
  v12 = a2[4];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(a1 + 424);
  *(_QWORD *)(a1 + 416) = v11;
  *(_QWORD *)(a1 + 424) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v11 = *(_QWORD *)(a1 + 416);
  }
  if (!v11)
  {
    v37 = (char *)operator new(0x40uLL);
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = 0;
    *(_QWORD *)v37 = &off_1E42DAB40;
    *(_OWORD *)(v37 + 24) = 0u;
    *(_OWORD *)(v37 + 40) = 0u;
    *(_DWORD *)(v37 + 55) = 0;
    v38 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    *((_QWORD *)v37 + 3) = v38;
    if (v38)
    {
      *(_QWORD *)&v39 = -1;
      *((_QWORD *)&v39 + 1) = -1;
      v38[14] = v39;
      v38[15] = v39;
      v38[12] = v39;
      v38[13] = v39;
      v38[10] = v39;
      v38[11] = v39;
      v38[8] = v39;
      v38[9] = v39;
      v38[6] = v39;
      v38[7] = v39;
      v38[4] = v39;
      v38[5] = v39;
      v38[2] = v39;
      v38[3] = v39;
      *v38 = v39;
      v38[1] = v39;
    }
    v40 = *(std::__shared_weak_count **)(a1 + 424);
    *(_QWORD *)(a1 + 416) = v37 + 24;
    *(_QWORD *)(a1 + 424) = v37;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  *(_QWORD *)(a1 + 488) = a2[5];
  v18 = *(_QWORD *)(a5 + 96);
  if (v18)
  {
    *(_BYTE *)(a1 + 450) = 1;
    v19 = *(_QWORD *)(a5 + 104);
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(a1 + 480);
    *(_QWORD *)(a1 + 472) = v18;
    *(_QWORD *)(a1 + 480) = v19;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = *(_QWORD **)(a1 + 472);
    *(_QWORD *)(a1 + 488) = *v25;
    md::UniLineLabelFeature::mergeAdditionalAttributes((const FeatureStyleAttributes **)&v55, (uint64_t)v25, *(const FeatureStyleAttributes **)(a1 + 416), *(_QWORD *)(a1 + 424));
    v26 = v55;
    v55 = 0uLL;
    v27 = *(std::__shared_weak_count **)(a1 + 424);
    *(_OWORD *)(a1 + 416) = v26;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    if (*((_QWORD *)&v55 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v33 = *(_QWORD *)(a1 + 416);
  v34 = *(unsigned __int8 *)(v33 + 33);
  if (*(_BYTE *)(v33 + 33))
  {
    v35 = *(_DWORD **)v33;
    if (*v35 == 185)
    {
      v36 = 0;
LABEL_44:
      if ((v35[2 * v36 + 1] & 0xFD) == 0)
      {
        *(_BYTE *)(a1 + 449) = 2;
        *(_BYTE *)(a1 + 216) = 1;
        goto LABEL_49;
      }
    }
    else
    {
      v36 = 0;
      v43 = v35 + 2;
      while (v34 - 1 != v36)
      {
        v44 = *v43;
        v43 += 2;
        ++v36;
        if (v44 == 185)
        {
          if (v36 >= v34)
            break;
          goto LABEL_44;
        }
      }
    }
  }
  v45 = a2[3];
  v46 = *(unsigned __int8 *)(v45 + 33);
  if (*(_BYTE *)(v45 + 33))
  {
    v47 = *(_DWORD **)v45;
    if (**(_DWORD **)v45 == 2)
    {
LABEL_48:
      *(_BYTE *)(a1 + 449) = 1;
    }
    else
    {
      v52 = 0;
      v53 = v47 + 2;
      while (v46 - 1 != v52)
      {
        v54 = *v53;
        v53 += 2;
        ++v52;
        if (v54 == 2)
        {
          if (v52 < v46)
            goto LABEL_48;
          break;
        }
      }
    }
  }
LABEL_49:
  v48 = *(_QWORD *)(a1 + 192);
  *(_BYTE *)(v48 + 122) = *(_BYTE *)(a1 + 449);
  md::LabelLineStore::addRoadFeature(v48, a2, a3, a4, a5, a1 + 440);
  v49 = *(unsigned __int8 **)(a1 + 192);
  v50 = atomic_load(v49 + 80);
  if ((v50 & 1) != 0)
    md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v49);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, *(unsigned __int8 *)(a5 + 88));
  return a1;
}

void sub_19F762FD8(_Unwind_Exception *a1)
{
  md::LineLabelFeature *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v1 + 60);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)v1 + 58);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  md::LineLabelFeature::~LineLabelFeature(v1);
  _Unwind_Resume(a1);
}

uint64_t *md::UniLineLabelFeature::UniLineLabelFeature(uint64_t *a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  char *v22;
  _OWORD *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v7 = md::LineLabelFeature::LineLabelFeature((uint64_t)a1, *(_BYTE *)(*a2 + 176), a3);
  *(_QWORD *)v7 = &off_1E4298180;
  *(_QWORD *)(v7 + 440) = &unk_1E4298438;
  v8 = *a2;
  *(_BYTE *)(v7 + 448) = *(_BYTE *)(*a2 + 176);
  *(_WORD *)(v7 + 449) = 0;
  v9 = a2[1];
  *(_QWORD *)(v7 + 456) = v8;
  *(_QWORD *)(v7 + 464) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v8 = a1[57];
  }
  a1[59] = 0;
  a1[60] = 0;
  a1[61] = 0;
  v12 = *(_QWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a1[53];
  a1[52] = v12;
  a1[53] = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v12 = a1[52];
  }
  if (!v12)
  {
    v22 = (char *)operator new(0x40uLL);
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = &off_1E42DAB40;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_DWORD *)(v22 + 55) = 0;
    v23 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    *((_QWORD *)v22 + 3) = v23;
    if (v23)
    {
      *(_QWORD *)&v24 = -1;
      *((_QWORD *)&v24 + 1) = -1;
      v23[14] = v24;
      v23[15] = v24;
      v23[12] = v24;
      v23[13] = v24;
      v23[10] = v24;
      v23[11] = v24;
      v23[8] = v24;
      v23[9] = v24;
      v23[6] = v24;
      v23[7] = v24;
      v23[4] = v24;
      v23[5] = v24;
      v23[2] = v24;
      v23[3] = v24;
      *v23 = v24;
      v23[1] = v24;
    }
    v25 = (std::__shared_weak_count *)a1[53];
    a1[52] = (uint64_t)(v22 + 24);
    a1[53] = (uint64_t)v22;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  md::LabelLineStore::addExternalRoadFeature(a1[24], a2);
  v19 = (unsigned __int8 *)a1[24];
  v20 = atomic_load(v19 + 80);
  if ((v20 & 1) != 0)
    md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v19);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*a1 + 40))(a1, a2, a4);
  return a1;
}

void sub_19F763294(_Unwind_Exception *a1)
{
  md::LineLabelFeature *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v1 + 60);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)v1 + 58);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  md::LineLabelFeature::~LineLabelFeature(v1);
  _Unwind_Resume(a1);
}

void md::MercatorRouteCollider::~MercatorRouteCollider(md::MercatorRouteCollider *this)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E429B218;
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = (char *)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40960023A9);
  }
}

{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E429B218;
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = (char *)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40960023A9);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::MercatorRouteCollider::intersectRouteWithFrustum(uint64_t a1@<X0>, double *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v6;
  id v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  int v15;
  int v16;

  v6 = *(uint64_t ***)(a1 + 8);
  v7 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v8 = *v6;
  v9 = v6[1];
  if (*v6 != v9)
  {
    v10 = 0;
    do
    {
      v12 = *v8;
      v8 += 2;
      v11 = v12;
      if (*(id *)(v12 + 8) == v7)
        v10 = v11;
    }
    while (v8 != v9);
    if (v10)
    {
      v13 = v7;
      v14 = 0;
      v15 = objc_msgSend(v7, "pointCount") - 1;
      v16 = 0;
      md::RouteCollisionObject<md::MercatorPointSource>::intersectWithFrustum(v10, a2, (uint64_t)&v14, (uint64_t)a4);
      v7 = v13;
    }
  }

}

void sub_19F7635A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void md::MercatorRouteCollider::intersectRouteWithFrustum(uint64_t a1@<X0>, double *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t **v8;
  id v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v8 = *(uint64_t ***)(a1 + 8);
  v9 = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v15 = v9;
  if (objc_msgSend(v9, "pointCount"))
  {
    v10 = *v8;
    v11 = v8[1];
    if (*v8 != v11)
    {
      v12 = 0;
      do
      {
        v14 = *v10;
        v10 += 2;
        v13 = v14;
        if (*(id *)(v14 + 8) == v15)
          v12 = v13;
      }
      while (v10 != v11);
      if (v12)
        md::RouteCollisionObject<md::MercatorPointSource>::intersectWithFrustum(v12, a2, a4, (uint64_t)a5);
    }
  }

}

void sub_19F763660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

uint64_t md::MercatorRouteCollider::computeRayBoundsOfRouteSectionWithinFrustum(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int *a5, _OWORD *a6)
{
  uint64_t **v9;
  int v10;
  int v11;
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v20[2];

  v9 = *(uint64_t ***)(a1 + 8);
  v11 = *a5;
  v10 = a5[1];
  v12 = a3;
  if (!objc_msgSend(v12, "pointCount"))
    goto LABEL_9;
  v13 = *v9;
  v14 = v9[1];
  if (*v9 == v14)
    goto LABEL_9;
  v15 = 0;
  do
  {
    v17 = *v13;
    v13 += 2;
    v16 = v17;
    if (*(id *)(v17 + 8) == v12)
      v15 = v16;
  }
  while (v13 != v14);
  if (v15)
  {
    *a6 = xmmword_19FFB2E00;
    v20[0] = md::RouteCollisionObject<md::MercatorPointSource>::segmentIndexForVertexIndex(v15, v11, 0);
    v20[1] = md::RouteCollisionObject<md::MercatorPointSource>::segmentIndexForVertexIndex(v15, v10, 1);
    md::RouteCollisionObject<md::MercatorPointSource>::computeRayBoundsWithinFrustum(a2, a4, *(_QWORD *)(v15 + 72), (unsigned __int16 *)v20, (uint64_t)a6);
    v18 = 1;
  }
  else
  {
LABEL_9:
    v18 = 0;
  }

  return v18;
}

void sub_19F763774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::RouteCollisionObject<md::MercatorPointSource>::segmentIndexForVertexIndex(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned int v7;
  id v8;
  int v9;
  int v10;

  v3 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v3)
  {
LABEL_7:
    v10 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a2 - (a3 == 1);
    while (1)
    {
      v8 = *(id *)(v3 + 8 * v5);
      if (objc_msgSend(v8, "startPointIndex") <= v7
        && objc_msgSend(v8, "endPointIndex") > v7)
      {
        break;
      }

      v5 = ++v6;
      v3 = *(_QWORD *)(a1 + 48);
      if (v6 >= (unint64_t)((*(_QWORD *)(a1 + 56) - v3) >> 3))
        goto LABEL_7;
    }
    v9 = v7 - objc_msgSend(v8, "startPointIndex");

    v10 = v9 << 16;
  }
  return v10 | v6;
}

void sub_19F76383C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::RouteCollisionObject<md::MercatorPointSource>::computeRayBoundsWithinFrustum(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  double *v9;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  _OWORD v32[3];

  v9 = (double *)result;
  __asm { FMOV            V0.2D, #0.5 }
  v31 = _Q0;
  while (!*(_DWORD *)a3)
  {
    v15 = a4[2];
    v16 = *(unsigned __int16 *)(a3 + 72);
    if (v15 < v16 || v15 == v16 && a4[3] < *(unsigned __int16 *)(a3 + 74))
      return result;
    v17 = *a4;
    v18 = *(unsigned __int16 *)(a3 + 76);
    if (v17 > v18 || v17 == v18 && a4[1] > *(unsigned __int16 *)(a3 + 78))
      return result;
    memset(&v32[1], 0, 32);
    v32[0] = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)&v32[1] + 8) = *(_OWORD *)(a3 + 40);
    result = geo::Intersect::encloses<double>(v9, (double *)v32);
    if (!(_DWORD)result)
      return result;
    v19 = *(double *)(a5 + 8);
    if (v19 >= *(double *)a5)
    {
      v20 = *(float64x2_t *)(a3 + 24);
      v21 = vsubq_f64(*(float64x2_t *)(a3 + 40), v20);
      v22 = *(float64x2_t *)(a2 + 24);
      v23 = vaddvq_f64(vmulq_f64(v22, vsubq_f64(vmlaq_f64(v20, v31, v21), *(float64x2_t *)a2)))
          - *(double *)(a2 + 40) * *(double *)(a2 + 16);
      v20.f64[0] = vaddvq_f64(vmulq_f64(vabsq_f64(v22), vmaxnmq_f64(v21, (float64x2_t)0))) * 0.5;
      v21.f64[0] = v23 - v20.f64[0];
      v24 = v20.f64[0] + v23;
      if (*(double *)a5 <= v21.f64[0] && v24 <= v19)
        return result;
    }
    result = md::RouteCollisionObject<md::MercatorPointSource>::computeRayBoundsWithinFrustum(v9, a2, *(_QWORD *)(a3 + 8), a4, a5);
    a3 = *(_QWORD *)(a3 + 16);
  }
  v26 = *(float64x2_t *)(a3 + 24);
  v27 = vsubq_f64(*(float64x2_t *)(a3 + 40), v26);
  v28 = *(float64x2_t *)(a2 + 24);
  v29 = vaddvq_f64(vmulq_f64(v28, vsubq_f64(vmlaq_f64(v26, v31, v27), *(float64x2_t *)a2)))
      - *(double *)(a2 + 40) * *(double *)(a2 + 16);
  v26.f64[0] = vaddvq_f64(vmulq_f64(vabsq_f64(v28), vmaxnmq_f64(v27, (float64x2_t)0))) * 0.5;
  v27.f64[0] = v29 - v26.f64[0];
  v28.f64[1] = *(float64_t *)(a5 + 8);
  v28.f64[0] = v29 - v26.f64[0];
  v27.f64[1] = v29 + v26.f64[0];
  v30.f64[0] = *(float64_t *)a5;
  v30.f64[1] = v29 + v26.f64[0];
  *(int8x16_t *)a5 = vbslq_s8((int8x16_t)vcgtq_f64(v28, v30), *(int8x16_t *)a5, (int8x16_t)v27);
  return result;
}

void md::RouteCollisionObject<md::MercatorPointSource>::intersectWithFrustum(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  double v17;
  _BOOL4 v18;
  _DWORD *v19;
  float v20;
  float *v21;
  float *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  float *v29;
  uint64_t v30;
  float v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  float *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  int v68;
  int v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  float *v96;
  uint64_t v97;
  _DWORD v98[2];
  double v99[3];
  float *v100;
  float *v101;
  uint64_t v102;

  v100 = 0;
  v101 = 0;
  v102 = 0;
  v8 = *(_DWORD *)(a3 + 8);
  v9 = *(_DWORD *)a3;
  if (v8 > *(_DWORD *)a3
    || (v10 = *(_DWORD *)a3, v8 == v9) && (v10 = *(_DWORD *)(a3 + 8), *(float *)(a3 + 12) > *(float *)(a3 + 4)))
  {
    if (v9 >= objc_msgSend(*(id *)(a1 + 8), "pointCount") - 1)
      return;
    v10 = *(_DWORD *)a3;
  }
  v11 = md::RouteCollisionObject<md::MercatorPointSource>::segmentIndexForVertexIndex(a1, v10, 0);
  v12 = v11;
  v97 = a3;
  if (*(float *)(a3 + 12) <= 0.0)
    v13 = *(_DWORD *)(a3 + 8);
  else
    v13 = *(_DWORD *)(a3 + 8) + 1;
  v14 = (unsigned __int16)v11;
  v15 = md::RouteCollisionObject<md::MercatorPointSource>::segmentIndexForVertexIndex(a1, v13, 1);
  if (v14 < (unsigned __int16)v15
    || (v16 = v12, v14 == (unsigned __int16)v15) && (v16 = v12, HIWORD(v12) < HIWORD(v15)))
  {
    v16 = v15;
  }
  v99[0] = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v12, 0);
  v99[1] = v17;
  v99[2] = 0.0;
  md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v16, 1);
  v18 = geo::Intersect::encloses<double>(a2, v99);
  v19 = *(_DWORD **)(a1 + 72);
  v98[0] = v12;
  v98[1] = v16;
  md::RouteCollisionObject<md::MercatorPointSource>::intersectWithFrustumEdges(a1, a2, v19, (unsigned __int16 *)v98, (uint64_t)&v100);
  v21 = v100;
  v22 = v101;
  v23 = ((char *)v101 - (char *)v100) >> 3;
  v24 = 126 - 2 * __clz(v23);
  v25 = (char *)((char *)v101 - (char *)v100);
  if (v101 == v100)
    v26 = 0;
  else
    v26 = v24;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *,false>((uint64_t)v100, v101, v26, 1, v20);
  v27 = v97;
  if ((unint64_t)v25 < 9)
  {
    v29 = v21;
    goto LABEL_29;
  }
  v28 = *((_DWORD *)v21 + 2);
  v29 = v21;
  if (v28 >= *(_DWORD *)v97 && (v28 != *(_DWORD *)v97 || v21[3] >= *(float *)(v97 + 4)))
    goto LABEL_25;
  v30 = (char *)v22 - (char *)(v21 + 4);
  if (v22 != v21 + 4)
    memmove(v21, v21 + 4, (char *)v22 - (char *)(v21 + 4));
  v22 -= 4;
  v101 = (float *)((char *)v21 + v30);
  if ((unint64_t)v30 >= 9)
  {
    v23 = v30 >> 3;
LABEL_25:
    v31 = v21[2 * v23 - 4];
    v32 = *(_DWORD *)(v97 + 8);
    if (LODWORD(v31) > v32 || LODWORD(v31) == v32 && v21[2 * v23 - 3] > *(float *)(v97 + 12))
    {
      v22 -= 4;
      v101 = v22;
      v27 = v97;
    }
  }
LABEL_29:
  if (v22 == v29)
  {
    v22 = v29;
  }
  else
  {
    if (*(_DWORD *)v29 < *(_DWORD *)v27 || *(_DWORD *)v29 == *(_DWORD *)v27 && v29[1] < *(float *)(v27 + 4))
      *(_QWORD *)v29 = *(_QWORD *)v27;
    v33 = *((_DWORD *)v22 - 2);
    v34 = *(_DWORD *)(v27 + 8);
    if (v33 > v34 || v33 == v34 && *(v22 - 1) > *(float *)(v27 + 12))
    {
      *((_QWORD *)v22 - 1) = *(_QWORD *)(v27 + 8);
      v29 = v100;
      v22 = v101;
    }
  }
  v35 = ((unint64_t)((((char *)v22 - (char *)v29) >> 3) + 1) >> 1) + v18;
  v36 = *(char **)a4;
  v96 = v29;
  if (v35 > (uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 4)
  {
    if (v35 >> 60)
      abort();
    v37 = *(_BYTE **)(a4 + 8);
    v38 = (char *)operator new(16 * v35);
    v39 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFF0];
    v40 = v39;
    if (v37 != v36)
    {
      v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v40 = v41 - 16;
        *((_OWORD *)v41 - 1) = *((_OWORD *)v37 - 1);
        v37 -= 16;
        v41 -= 16;
      }
      while (v37 != v36);
    }
    *(_QWORD *)a4 = v40;
    *(_QWORD *)(a4 + 8) = v39;
    *(_QWORD *)(a4 + 16) = &v38[16 * v35];
    v29 = v96;
    if (v36)
      operator delete(v36);
  }
  v42 = v29;
  if (!v18)
    goto LABEL_75;
  if (v29 != v22)
  {
    v44 = *(char **)(a4 + 8);
    v43 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v44 >= v43)
    {
      v50 = *(char **)a4;
      v51 = (uint64_t)&v44[-*(_QWORD *)a4] >> 4;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 60)
        abort();
      v53 = v43 - (_QWORD)v50;
      if (v53 >> 3 > v52)
        v52 = v53 >> 3;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
        v54 = 0xFFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54 >> 60)
        goto LABEL_123;
      v55 = (char *)operator new(16 * v54);
      v56 = &v55[16 * v51];
      v29 = v96;
      v57 = *(_QWORD *)v96;
      *(_QWORD *)v56 = *(_QWORD *)v27;
      *((_QWORD *)v56 + 1) = v57;
      v46 = v56 + 16;
      if (v44 == v50)
      {
        v58 = v56;
      }
      else
      {
        do
        {
          v58 = v56 - 16;
          *((_OWORD *)v56 - 1) = *((_OWORD *)v44 - 1);
          v44 -= 16;
          v56 -= 16;
        }
        while (v44 != v50);
      }
      *(_QWORD *)a4 = v58;
      *(_QWORD *)(a4 + 8) = v46;
      *(_QWORD *)(a4 + 16) = &v55[16 * v54];
      if (v50)
        operator delete(v50);
    }
    else
    {
      v45 = *(_QWORD *)v29;
      *(_QWORD *)v44 = *(_QWORD *)v27;
      *((_QWORD *)v44 + 1) = v45;
      v46 = v44 + 16;
    }
    v42 = v29 + 2;
    *(_QWORD *)(a4 + 8) = v46;
LABEL_75:
    if (v42 == v22)
      goto LABEL_112;
    while (1)
    {
      v67 = (uint64_t *)(v42 + 2);
      v69 = *(_DWORD *)v42;
      v68 = *((_DWORD *)v42 + 1);
      if (v42 + 2 == v22)
        break;
      v71 = *(char **)(a4 + 8);
      v70 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v71 < v70)
      {
        v65 = *v67;
        *(_DWORD *)v71 = v69;
        *((_DWORD *)v71 + 1) = v68;
        *((_QWORD *)v71 + 1) = v65;
        v66 = v71 + 16;
      }
      else
      {
        v72 = *(char **)a4;
        v73 = (uint64_t)&v71[-*(_QWORD *)a4] >> 4;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 60)
          abort();
        v75 = v70 - (_QWORD)v72;
        if (v75 >> 3 > v74)
          v74 = v75 >> 3;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
          v76 = 0xFFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76 >> 60)
          goto LABEL_123;
        v77 = (char *)operator new(16 * v76);
        v78 = *v67;
        v79 = &v77[16 * v73];
        *(_DWORD *)v79 = v69;
        *((_DWORD *)v79 + 1) = v68;
        *((_QWORD *)v79 + 1) = v78;
        if (v71 == v72)
        {
          v81 = &v77[16 * v73];
        }
        else
        {
          v80 = &v77[16 * v73];
          do
          {
            v81 = v80 - 16;
            *((_OWORD *)v80 - 1) = *((_OWORD *)v71 - 1);
            v71 -= 16;
            v80 -= 16;
          }
          while (v71 != v72);
        }
        v66 = v79 + 16;
        *(_QWORD *)a4 = v81;
        *(_QWORD *)(a4 + 8) = v79 + 16;
        *(_QWORD *)(a4 + 16) = &v77[16 * v76];
        if (v72)
          operator delete(v72);
      }
      v42 += 4;
      *(_QWORD *)(a4 + 8) = v66;
      if (v42 == v22)
        goto LABEL_111;
    }
    v83 = *(char **)(a4 + 8);
    v82 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v83 < v82)
    {
      v84 = *(_QWORD *)(v97 + 8);
      *(_DWORD *)v83 = v69;
      *((_DWORD *)v83 + 1) = v68;
      *((_QWORD *)v83 + 1) = v84;
      v85 = v83 + 16;
      goto LABEL_110;
    }
    v86 = *(char **)a4;
    v87 = (uint64_t)&v83[-*(_QWORD *)a4] >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      abort();
    v89 = v82 - (_QWORD)v86;
    if (v89 >> 3 > v88)
      v88 = v89 >> 3;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
      v90 = 0xFFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    if (!(v90 >> 60))
    {
      v91 = (char *)operator new(16 * v90);
      v92 = &v91[16 * v87];
      v93 = *(_QWORD *)(v97 + 8);
      *(_DWORD *)v92 = v69;
      *((_DWORD *)v92 + 1) = v68;
      *((_QWORD *)v92 + 1) = v93;
      v85 = v92 + 16;
      if (v83 == v86)
      {
        v94 = v92;
      }
      else
      {
        do
        {
          v94 = v92 - 16;
          *((_OWORD *)v92 - 1) = *((_OWORD *)v83 - 1);
          v83 -= 16;
          v92 -= 16;
        }
        while (v83 != v86);
      }
      *(_QWORD *)a4 = v94;
      *(_QWORD *)(a4 + 8) = v85;
      *(_QWORD *)(a4 + 16) = &v91[16 * v90];
      if (v86)
        operator delete(v86);
LABEL_110:
      *(_QWORD *)(a4 + 8) = v85;
LABEL_111:
      v29 = v96;
LABEL_112:
      if (!v29)
        return;
      goto LABEL_113;
    }
LABEL_123:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v48 = *(char **)(a4 + 8);
  v47 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v48 >= v47)
  {
    v59 = *(char **)a4;
    v60 = (uint64_t)&v48[-*(_QWORD *)a4] >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      abort();
    v62 = v47 - (_QWORD)v59;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 60)
        goto LABEL_123;
      v64 = (char *)operator new(16 * v63);
    }
    else
    {
      v64 = 0;
    }
    v95 = &v64[16 * v60];
    *(_OWORD *)v95 = *(_OWORD *)v27;
    v49 = v95 + 16;
    if (v48 != v59)
    {
      do
      {
        *((_OWORD *)v95 - 1) = *((_OWORD *)v48 - 1);
        v95 -= 16;
        v48 -= 16;
      }
      while (v48 != v59);
      v48 = *(char **)a4;
    }
    *(_QWORD *)a4 = v95;
    *(_QWORD *)(a4 + 8) = v49;
    *(_QWORD *)(a4 + 16) = &v64[16 * v63];
    if (v48)
      operator delete(v48);
  }
  else
  {
    *(_OWORD *)v48 = *(_OWORD *)v27;
    v49 = v48 + 16;
  }
  *(_QWORD *)(a4 + 8) = v49;
  v29 = v100;
  if (v100)
  {
LABEL_113:
    v101 = v29;
    operator delete(v29);
  }
}

void sub_19F764154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

double md::MercatorPointSource::segmentWorldPoint(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v4;
  id v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned int v9;
  double v10;
  double v12;
  double v13;

  v4 = HIWORD(a2);
  v5 = *(id *)(a1 + 8 * (unsigned __int16)a2);
  v6 = objc_msgSend(v5, "points");
  if (v5)
  {
    objc_msgSend(v5, "bounds");
    v7 = v12;
    v8 = v13;
  }
  else
  {
    v8 = 0.0;
    v7 = 0.0;
  }
  v9 = v4;
  if (a3 == 1)
    v9 = v4 + 1;
  v10 = (v7 + v8 * *(float *)(v6 + 12 * v9)) / *MEMORY[0x1E0D266F8];

  return v10;
}

void sub_19F764288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL geo::Intersect::encloses<double>(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  if (a1[3] + *a1 * *a2 + a1[1] * v3 + a1[2] * v4 < 0.0)
    return 0;
  if (a1[7] + a1[4] * v2 + a1[5] * v3 + a1[6] * v4 < 0.0)
    return 0;
  if (a1[11] + a1[8] * v2 + a1[9] * v3 + a1[10] * v4 < 0.0)
    return 0;
  if (a1[15] + a1[12] * v2 + a1[13] * v3 + a1[14] * v4 < 0.0)
    return 0;
  if (a1[19] + a1[16] * v2 + a1[17] * v3 + a1[18] * v4 >= 0.0)
    return a1[23] + a1[20] * v2 + a1[21] * v3 + a1[22] * v4 >= 0.0;
  return 0;
}

void md::RouteCollisionObject<md::MercatorPointSource>::intersectWithFrustumEdges(uint64_t a1, double *a2, _DWORD *a3, unsigned __int16 *a4, uint64_t a5)
{
  _DWORD *v7;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  float v30;
  int v31;
  float v32;
  float v33;
  int v34;
  unint64_t v35;
  float *v36;
  char *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  float *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  float v54;
  unint64_t v55;
  float *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  float *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  float *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  double v77;
  double v78;
  _OWORD v79[3];

  v7 = a3;
  if (*a3)
  {
LABEL_10:
    v14 = v7[14];
    if (!(_DWORD)v14)
      return;
    v15 = 0;
    while (1)
    {
      v17 = (unsigned __int16 *)(*((_QWORD *)v7 + 8) + 4 * v15);
      v18 = *v17;
      v19 = v17[1];
      v20 = *a4;
      if (v20 >= v18 && (v20 != (_DWORD)v18 || a4[1] > v19))
        goto LABEL_15;
      v22 = a4[2];
      if (v22 <= v18 && (v22 != (_DWORD)v18 || a4[3] < v19))
        goto LABEL_15;
      v24 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v18 | (v19 << 16), 0);
      v26 = v25;
      v27 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v18 | (v19 << 16), 1);
      *(double *)v79 = v24;
      *((double *)v79 + 1) = v26;
      *(_QWORD *)&v79[1] = 0;
      *((double *)&v79[1] + 1) = v27 - v24;
      *(double *)&v79[2] = v28 - v26;
      *((_QWORD *)&v79[2] + 1) = 0;
      v77 = 0.0;
      v78 = 0.0;
      if (geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(a2, (double *)v79, 2u, &v78, &v77))break;
LABEL_14:
      v14 = v7[14];
LABEL_15:
      if (++v15 >= v14)
        return;
    }
    v29 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 8 * v18), "startPointIndex") + v19;
    if (v78 <= 0.0)
    {
LABEL_59:
      if (v77 >= 1.0)
        goto LABEL_14;
      v54 = v77;
      if (v54 >= 1.0)
      {
        v29 += vcvtms_u32_f32(v54);
        v54 = v54 - floorf(v54);
      }
      v56 = *(float **)(a5 + 8);
      v55 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v56 < v55)
      {
        *(_DWORD *)v56 = v29;
        v56[1] = v54;
        v16 = (char *)(v56 + 2);
LABEL_13:
        *(_QWORD *)(a5 + 8) = v16;
        goto LABEL_14;
      }
      v57 = *(float **)a5;
      v58 = (uint64_t)v56 - *(_QWORD *)a5;
      v59 = v58 >> 3;
      v60 = (v58 >> 3) + 1;
      if (v60 >> 61)
LABEL_85:
        abort();
      v61 = v55 - (_QWORD)v57;
      if (v61 >> 2 > v60)
        v60 = v61 >> 2;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      v76 = v60;
      if (v60)
      {
        v74 = (uint64_t)v56 - *(_QWORD *)a5;
        if (v60 >> 61)
LABEL_86:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v62 = (char *)operator new(8 * v60);
        v58 = v74;
      }
      else
      {
        v62 = 0;
      }
      v63 = (float *)&v62[8 * v59];
      *(_DWORD *)v63 = v29;
      v63[1] = v54;
      if (v56 == v57)
      {
        v57 = v56;
        v65 = &v62[8 * v59];
      }
      else
      {
        v64 = (char *)(v56 - 2) - (char *)v57;
        if (v64 < 0x58)
        {
          v65 = &v62[8 * v59];
          goto LABEL_80;
        }
        v65 = &v62[8 * v59];
        if ((unint64_t)((char *)v56 - &v62[v58]) < 0x20)
          goto LABEL_89;
        v66 = (v64 >> 3) + 1;
        v67 = &v62[8 * v59 - 16];
        v68 = v56 - 4;
        v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *(_OWORD *)v68;
          *((_OWORD *)v67 - 1) = *((_OWORD *)v68 - 1);
          *(_OWORD *)v67 = v70;
          v67 -= 32;
          v68 -= 8;
          v69 -= 4;
        }
        while (v69);
        v65 = (char *)&v63[-2 * (v66 & 0x3FFFFFFFFFFFFFFCLL)];
        v56 -= 2 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_89:
          do
          {
LABEL_80:
            v71 = *((_QWORD *)v56 - 1);
            v56 -= 2;
            *((_QWORD *)v65 - 1) = v71;
            v65 -= 8;
          }
          while (v56 != v57);
          v57 = *(float **)a5;
        }
      }
      v16 = (char *)(v63 + 2);
      *(_QWORD *)a5 = v65;
      *(_QWORD *)(a5 + 8) = v63 + 2;
      *(_QWORD *)(a5 + 16) = &v62[8 * v76];
      if (v57)
        operator delete(v57);
      goto LABEL_13;
    }
    v30 = v78;
    v31 = v29 + vcvtms_u32_f32(v30);
    v32 = v30 - floorf(v30);
    if (v30 >= 1.0)
      v33 = v32;
    else
      v33 = v78;
    if (v30 >= 1.0)
      v34 = v31;
    else
      v34 = v29;
    v36 = *(float **)(a5 + 8);
    v35 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v36 < v35)
    {
      *(_DWORD *)v36 = v34;
      v36[1] = v33;
      v37 = (char *)(v36 + 2);
LABEL_58:
      *(_QWORD *)(a5 + 8) = v37;
      goto LABEL_59;
    }
    v38 = *(float **)a5;
    v39 = (uint64_t)v36 - *(_QWORD *)a5;
    v40 = v39 >> 3;
    v41 = (v39 >> 3) + 1;
    if (v41 >> 61)
      goto LABEL_85;
    v42 = v35 - (_QWORD)v38;
    if (v42 >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    v75 = v41;
    if (v41)
    {
      v72 = (uint64_t)v36 - *(_QWORD *)a5;
      v73 = v34;
      if (v41 >> 61)
        goto LABEL_86;
      v43 = (char *)operator new(8 * v41);
      v34 = v73;
      v39 = v72;
    }
    else
    {
      v43 = 0;
    }
    v44 = (float *)&v43[8 * v40];
    *(_DWORD *)v44 = v34;
    v44[1] = v33;
    if (v36 == v38)
    {
      v38 = v36;
      v47 = &v43[8 * v40];
      v46 = v75;
      goto LABEL_56;
    }
    v45 = (char *)(v36 - 2) - (char *)v38;
    v46 = v75;
    if (v45 >= 0x58)
    {
      v47 = &v43[8 * v40];
      if ((unint64_t)((char *)v36 - &v43[v39]) >= 0x20)
      {
        v48 = (v45 >> 3) + 1;
        v49 = &v43[8 * v40 - 16];
        v50 = v36 - 4;
        v51 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v50;
          *((_OWORD *)v49 - 1) = *((_OWORD *)v50 - 1);
          *(_OWORD *)v49 = v52;
          v49 -= 32;
          v50 -= 8;
          v51 -= 4;
        }
        while (v51);
        v47 = (char *)&v44[-2 * (v48 & 0x3FFFFFFFFFFFFFFCLL)];
        v36 -= 2 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_56;
      }
    }
    else
    {
      v47 = &v43[8 * v40];
    }
    do
    {
      v53 = *((_QWORD *)v36 - 1);
      v36 -= 2;
      *((_QWORD *)v47 - 1) = v53;
      v47 -= 8;
    }
    while (v36 != v38);
    v38 = *(float **)a5;
LABEL_56:
    v37 = (char *)(v44 + 2);
    *(_QWORD *)a5 = v47;
    *(_QWORD *)(a5 + 8) = v44 + 2;
    *(_QWORD *)(a5 + 16) = &v43[8 * v46];
    if (v38)
      operator delete(v38);
    goto LABEL_58;
  }
  while (1)
  {
    v10 = a4[2];
    v11 = *((unsigned __int16 *)v7 + 36);
    if (v10 < v11 || v10 == v11 && a4[3] < *((unsigned __int16 *)v7 + 37))
      break;
    v12 = *a4;
    v13 = *((unsigned __int16 *)v7 + 38);
    if (v12 > v13 || v12 == v13 && a4[1] > *((unsigned __int16 *)v7 + 39))
      break;
    memset(&v79[1], 0, 32);
    v79[0] = *(_OWORD *)(v7 + 6);
    *(_OWORD *)((char *)&v79[1] + 8) = *(_OWORD *)(v7 + 10);
    if (geo::Intersect::encloses<double>(a2, (double *)v79) != 2)
      break;
    md::RouteCollisionObject<md::MercatorPointSource>::intersectWithFrustumEdges(a1, a2, *((_QWORD *)v7 + 1), a4, a5);
    v7 = (_DWORD *)*((_QWORD *)v7 + 2);
    if (*v7)
      goto LABEL_10;
  }
}

float std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *,false>(uint64_t a1, float *a2, uint64_t a3, char a4, float result)
{
  float *v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  unint64_t k;
  unsigned int v21;
  float *m;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  float *j;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  float *v85;
  unsigned int v86;
  float *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;

float std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>(float *a1, unsigned int *a2, float *a3)
{
  unsigned int v3;
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  if (*a2 < *(_DWORD *)a1 || v3 == *(_DWORD *)a1 && (result = *((float *)a2 + 1), result < a1[1]))
  {
    if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && (result = a3[1], result < *((float *)a2 + 1)))
    {
      v5 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a3;
LABEL_17:
      *(_QWORD *)a3 = v5;
      return result;
    }
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*(_DWORD *)a3 < v5
      || *(_DWORD *)a3 == (_DWORD)v5 && (result = *((float *)&v5 + 1), a3[1] < *((float *)&v5 + 1)))
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_17;
    }
  }
  else if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && (result = a3[1], result < *((float *)a2 + 1)))
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && (result = *((float *)a2 + 1), result < a1[1]))
    {
      v7 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
    }
  }
  return result;
}

float std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>(float *a1, unsigned int *a2, float *a3, float *a4, float *a5)
{
  float result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>(a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && (result = a4[1], result < a3[1]))
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && (result = a3[1], result < *((float *)a2 + 1)))
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && (result = *((float *)a2 + 1), result < a1[1]))
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 == *(_DWORD *)a4 && (result = a5[1], result < a4[1]))
  {
    v14 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v14;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && (result = a4[1], result < a3[1]))
    {
      v15 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v15;
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && (result = a3[1], result < *((float *)a2 + 1)))
      {
        v16 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v16;
        if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && (result = *((float *)a2 + 1), result < a1[1]))
        {
          v17 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      if (v6 < *(_DWORD *)a1 || v6 == *(_DWORD *)a1 && *(float *)(a2 - 4) < *(float *)(a1 + 4))
      {
        v7 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)a1, (unsigned int *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      v17 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)a1, (unsigned int *)(a1 + 8), (float *)(a1 + 16));
      v18 = *(_DWORD *)(a2 - 8);
      v19 = *(_DWORD *)(a1 + 16);
      if (v18 < v19 || v18 == v19 && *(float *)(a2 - 4) < *(float *)(a1 + 20))
      {
        v20 = *v17;
        *v17 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v20;
        v21 = *(_DWORD *)(a1 + 8);
        if (*(_DWORD *)v17 < v21 || *(_DWORD *)v17 == v21 && *(float *)(a1 + 20) < *(float *)(a1 + 12))
        {
          v23 = *(_QWORD *)(a1 + 8);
          v22 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = v23;
          if (*(_DWORD *)a1 > v22
            || *(_DWORD *)a1 == (_DWORD)v22 && *(float *)(a1 + 4) > *((float *)&v22 + 1))
          {
            v24 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v22;
            *(_QWORD *)(a1 + 8) = v24;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)a1, (unsigned int *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24), (float *)(a2 - 8));
      return 1;
    default:
      v8 = a1 + 16;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)a1, (unsigned int *)(a1 + 8), (float *)(a1 + 16));
      v9 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 < *(_DWORD *)v8)
      break;
    if (v13 == *(_DWORD *)v8)
    {
      v14 = *(float *)(v9 + 4);
      if (v14 < *(float *)(v8 + 4))
        goto LABEL_11;
    }
LABEL_8:
    v8 = v9;
    v10 += 8;
    v9 += 8;
    if (v9 == a2)
      return 1;
  }
  v14 = *(float *)(v9 + 4);
LABEL_11:
  *(_QWORD *)v9 = *(_QWORD *)v8;
  v12 = a1;
  if (v8 != a1)
  {
    v15 = v10;
    while (1)
    {
      v16 = *(_DWORD *)(a1 + v15 + 8);
      if (v13 >= v16)
      {
        if (v13 != v16)
        {
          v12 = v8;
          goto LABEL_7;
        }
        if (*(float *)(a1 + v15 + 12) <= v14)
          break;
      }
      v8 -= 8;
      *(_QWORD *)(a1 + v15 + 16) = *(_QWORD *)(a1 + v15 + 8);
      v15 -= 8;
      if (v15 == -16)
      {
        v12 = a1;
        goto LABEL_7;
      }
    }
    v12 = a1 + v15 + 16;
  }
LABEL_7:
  *(_DWORD *)v12 = v13;
  *(float *)(v12 + 4) = v14;
  if (++v11 != 8)
    goto LABEL_8;
  return v9 + 8 == a2;
}

void md::GeocentricRouteCollider::~GeocentricRouteCollider(md::GeocentricRouteCollider *this)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E429E7E8;
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = (char *)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40960023A9);
  }
}

{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E429E7E8;
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = (char *)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40960023A9);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::GeocentricRouteCollider::intersectRouteWithFrustum(uint64_t a1@<X0>, double *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v6;
  id v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  int v15;
  int v16;

  v6 = *(uint64_t ***)(a1 + 8);
  v7 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v8 = *v6;
  v9 = v6[1];
  if (*v6 != v9)
  {
    v10 = 0;
    do
    {
      v12 = *v8;
      v8 += 2;
      v11 = v12;
      if (*(id *)(v12 + 8) == v7)
        v10 = v11;
    }
    while (v8 != v9);
    if (v10)
    {
      v13 = v7;
      v14 = 0;
      v15 = objc_msgSend(v7, "pointCount") - 1;
      v16 = 0;
      md::RouteCollisionObject<md::GeocentricPointSource>::intersectWithFrustum(v10, a2, (uint64_t)&v14, (uint64_t)a4);
      v7 = v13;
    }
  }

}

void sub_19F76597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void md::GeocentricRouteCollider::intersectRouteWithFrustum(uint64_t a1@<X0>, double *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t **v8;
  id v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v8 = *(uint64_t ***)(a1 + 8);
  v9 = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v15 = v9;
  if (objc_msgSend(v9, "pointCount"))
  {
    v10 = *v8;
    v11 = v8[1];
    if (*v8 != v11)
    {
      v12 = 0;
      do
      {
        v14 = *v10;
        v10 += 2;
        v13 = v14;
        if (*(id *)(v14 + 8) == v15)
          v12 = v13;
      }
      while (v10 != v11);
      if (v12)
        md::RouteCollisionObject<md::GeocentricPointSource>::intersectWithFrustum(v12, a2, a4, (uint64_t)a5);
    }
  }

}

void sub_19F765A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

uint64_t md::GeocentricRouteCollider::computeRayBoundsOfRouteSectionWithinFrustum(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int *a5, _OWORD *a6)
{
  uint64_t **v9;
  int v10;
  int v11;
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v20[2];

  v9 = *(uint64_t ***)(a1 + 8);
  v11 = *a5;
  v10 = a5[1];
  v12 = a3;
  if (!objc_msgSend(v12, "pointCount"))
    goto LABEL_9;
  v13 = *v9;
  v14 = v9[1];
  if (*v9 == v14)
    goto LABEL_9;
  v15 = 0;
  do
  {
    v17 = *v13;
    v13 += 2;
    v16 = v17;
    if (*(id *)(v17 + 8) == v12)
      v15 = v16;
  }
  while (v13 != v14);
  if (v15)
  {
    *a6 = xmmword_19FFB2E00;
    v20[0] = md::RouteCollisionObject<md::GeocentricPointSource>::segmentIndexForVertexIndex(v15, v11, 0);
    v20[1] = md::RouteCollisionObject<md::GeocentricPointSource>::segmentIndexForVertexIndex(v15, v10, 1);
    md::RouteCollisionObject<md::GeocentricPointSource>::computeRayBoundsWithinFrustum(a2, a4, *(_QWORD *)(v15 + 72), (unsigned __int16 *)v20, (uint64_t)a6);
    v18 = 1;
  }
  else
  {
LABEL_9:
    v18 = 0;
  }

  return v18;
}

void sub_19F765B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::RouteCollisionObject<md::GeocentricPointSource>::segmentIndexForVertexIndex(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned int v7;
  id v8;
  int v9;
  int v10;

  v3 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v3)
  {
LABEL_7:
    v10 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a2 - (a3 == 1);
    while (1)
    {
      v8 = *(id *)(v3 + 8 * v5);
      if (objc_msgSend(v8, "startPointIndex") <= v7
        && objc_msgSend(v8, "endPointIndex") > v7)
      {
        break;
      }

      v5 = ++v6;
      v3 = *(_QWORD *)(a1 + 48);
      if (v6 >= (unint64_t)((*(_QWORD *)(a1 + 56) - v3) >> 3))
        goto LABEL_7;
    }
    v9 = v7 - objc_msgSend(v8, "startPointIndex");

    v10 = v9 << 16;
  }
  return v10 | v6;
}

void sub_19F765C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::RouteCollisionObject<md::GeocentricPointSource>::computeRayBoundsWithinFrustum(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  double *v9;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64_t v27;
  float64x2_t v28;
  float64_t v29;
  float64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64_t v40;
  float64x2_t v41;
  float64_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;

  v9 = (double *)result;
  __asm { FMOV            V0.2D, #0.5 }
  v45 = _Q0;
  while (!*(_DWORD *)a3)
  {
    v15 = a4[2];
    v16 = *(unsigned __int16 *)(a3 + 88);
    if (v15 < v16 || v15 == v16 && a4[3] < *(unsigned __int16 *)(a3 + 90))
      return result;
    v17 = *a4;
    v18 = *(unsigned __int16 *)(a3 + 92);
    if (v17 > v18 || v17 == v18 && a4[1] > *(unsigned __int16 *)(a3 + 94))
      return result;
    v46 = *(_OWORD *)(a3 + 24);
    v47 = *(_QWORD *)(a3 + 40);
    v48 = *(_OWORD *)(a3 + 48);
    v49 = *(_QWORD *)(a3 + 64);
    result = geo::Intersect::encloses<double>(v9, (double *)&v46);
    if (!(_DWORD)result)
      return result;
    v19 = *(double *)(a5 + 8);
    if (v19 >= *(double *)a5)
    {
      v20 = *(double *)(a3 + 24);
      v21 = *(double *)(a3 + 48) - v20;
      v22 = *(double *)(a2 + 24);
      v23 = *(float64x2_t *)(a3 + 32);
      v24 = vsubq_f64(*(float64x2_t *)(a3 + 56), v23);
      v25 = *(float64x2_t *)(a2 + 32);
      v26 = vmulq_f64(v25, vsubq_f64(vmlaq_f64(v23, v45, v24), *(float64x2_t *)(a2 + 8)));
      v27 = v26.f64[0] + v22 * (v20 + v21 * 0.5 - *(double *)a2) + v26.f64[1];
      v28 = vmulq_f64(vabsq_f64(v25), vmaxnmq_f64(v24, (float64x2_t)0));
      v29 = (v28.f64[0] + fabs(v22) * fmax(v21, 0.0) + v28.f64[1]) * 0.5;
      v30 = v27 - v29;
      v31 = v29 + v27;
      if (*(double *)a5 <= v30 && v31 <= v19)
        return result;
    }
    result = md::RouteCollisionObject<md::GeocentricPointSource>::computeRayBoundsWithinFrustum(v9, a2, *(_QWORD *)(a3 + 8), a4, a5);
    a3 = *(_QWORD *)(a3 + 16);
  }
  v33 = *(double *)(a3 + 24);
  v34 = *(double *)(a3 + 48) - v33;
  v35 = *(double *)(a2 + 24);
  v36 = *(float64x2_t *)(a3 + 32);
  v37 = vsubq_f64(*(float64x2_t *)(a3 + 56), v36);
  v38 = *(float64x2_t *)(a2 + 32);
  v39 = vmulq_f64(v38, vsubq_f64(vmlaq_f64(v36, v45, v37), *(float64x2_t *)(a2 + 8)));
  v40 = v39.f64[0] + v35 * (v33 + v34 * 0.5 - *(double *)a2) + v39.f64[1];
  v41 = vmulq_f64(vabsq_f64(v38), vmaxnmq_f64(v37, (float64x2_t)0));
  v42 = (v41.f64[0] + fabs(v35) * fmax(v34, 0.0) + v41.f64[1]) * 0.5;
  *(double *)v43.i64 = v40 - v42;
  v44.f64[1] = *(float64_t *)(a5 + 8);
  v44.f64[0] = v40 - v42;
  *(double *)&v43.i64[1] = v40 + v42;
  v41.f64[0] = *(float64_t *)a5;
  v41.f64[1] = v40 + v42;
  *(int8x16_t *)a5 = vbslq_s8((int8x16_t)vcgtq_f64(v44, v41), *(int8x16_t *)a5, v43);
  return result;
}

void md::RouteCollisionObject<md::GeocentricPointSource>::intersectWithFrustum(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  double v17;
  double v18;
  _BOOL4 v19;
  _DWORD *v20;
  float v21;
  float *v22;
  float *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  float *v30;
  uint64_t v31;
  float v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  float *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  int v69;
  int v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  float *v97;
  uint64_t v98;
  _DWORD v99[2];
  double v100[3];
  float *v101;
  float *v102;
  uint64_t v103;

  v101 = 0;
  v102 = 0;
  v103 = 0;
  v8 = *(_DWORD *)(a3 + 8);
  v9 = *(_DWORD *)a3;
  if (v8 > *(_DWORD *)a3
    || (v10 = *(_DWORD *)a3, v8 == v9) && (v10 = *(_DWORD *)(a3 + 8), *(float *)(a3 + 12) > *(float *)(a3 + 4)))
  {
    if (v9 >= objc_msgSend(*(id *)(a1 + 8), "pointCount") - 1)
      return;
    v10 = *(_DWORD *)a3;
  }
  v11 = md::RouteCollisionObject<md::GeocentricPointSource>::segmentIndexForVertexIndex(a1, v10, 0);
  v12 = v11;
  v98 = a3;
  if (*(float *)(a3 + 12) <= 0.0)
    v13 = *(_DWORD *)(a3 + 8);
  else
    v13 = *(_DWORD *)(a3 + 8) + 1;
  v14 = (unsigned __int16)v11;
  v15 = md::RouteCollisionObject<md::GeocentricPointSource>::segmentIndexForVertexIndex(a1, v13, 1);
  if (v14 < (unsigned __int16)v15
    || (v16 = v12, v14 == (unsigned __int16)v15) && (v16 = v12, HIWORD(v12) < HIWORD(v15)))
  {
    v16 = v15;
  }
  v100[0] = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v12, 0);
  v100[1] = v17;
  v100[2] = v18;
  md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v16, 1);
  v19 = geo::Intersect::encloses<double>(a2, v100);
  v20 = *(_DWORD **)(a1 + 72);
  v99[0] = v12;
  v99[1] = v16;
  md::RouteCollisionObject<md::GeocentricPointSource>::intersectWithFrustumEdges(a1, a2, v20, (unsigned __int16 *)v99, (uint64_t)&v101);
  v22 = v101;
  v23 = v102;
  v24 = ((char *)v102 - (char *)v101) >> 3;
  v25 = 126 - 2 * __clz(v24);
  v26 = (char *)((char *)v102 - (char *)v101);
  if (v102 == v101)
    v27 = 0;
  else
    v27 = v25;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *,false>((uint64_t)v101, v102, v27, 1, v21);
  v28 = v98;
  if ((unint64_t)v26 < 9)
  {
    v30 = v22;
    goto LABEL_29;
  }
  v29 = *((_DWORD *)v22 + 2);
  v30 = v22;
  if (v29 >= *(_DWORD *)v98 && (v29 != *(_DWORD *)v98 || v22[3] >= *(float *)(v98 + 4)))
    goto LABEL_25;
  v31 = (char *)v23 - (char *)(v22 + 4);
  if (v23 != v22 + 4)
    memmove(v22, v22 + 4, (char *)v23 - (char *)(v22 + 4));
  v23 -= 4;
  v102 = (float *)((char *)v22 + v31);
  if ((unint64_t)v31 >= 9)
  {
    v24 = v31 >> 3;
LABEL_25:
    v32 = v22[2 * v24 - 4];
    v33 = *(_DWORD *)(v98 + 8);
    if (LODWORD(v32) > v33 || LODWORD(v32) == v33 && v22[2 * v24 - 3] > *(float *)(v98 + 12))
    {
      v23 -= 4;
      v102 = v23;
      v28 = v98;
    }
  }
LABEL_29:
  if (v23 == v30)
  {
    v23 = v30;
  }
  else
  {
    if (*(_DWORD *)v30 < *(_DWORD *)v28 || *(_DWORD *)v30 == *(_DWORD *)v28 && v30[1] < *(float *)(v28 + 4))
      *(_QWORD *)v30 = *(_QWORD *)v28;
    v34 = *((_DWORD *)v23 - 2);
    v35 = *(_DWORD *)(v28 + 8);
    if (v34 > v35 || v34 == v35 && *(v23 - 1) > *(float *)(v28 + 12))
    {
      *((_QWORD *)v23 - 1) = *(_QWORD *)(v28 + 8);
      v30 = v101;
      v23 = v102;
    }
  }
  v36 = ((unint64_t)((((char *)v23 - (char *)v30) >> 3) + 1) >> 1) + v19;
  v37 = *(char **)a4;
  v97 = v30;
  if (v36 > (uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 4)
  {
    if (v36 >> 60)
      abort();
    v38 = *(_BYTE **)(a4 + 8);
    v39 = (char *)operator new(16 * v36);
    v40 = &v39[(v38 - v37) & 0xFFFFFFFFFFFFFFF0];
    v41 = v40;
    if (v38 != v37)
    {
      v42 = &v39[(v38 - v37) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v41 = v42 - 16;
        *((_OWORD *)v42 - 1) = *((_OWORD *)v38 - 1);
        v38 -= 16;
        v42 -= 16;
      }
      while (v38 != v37);
    }
    *(_QWORD *)a4 = v41;
    *(_QWORD *)(a4 + 8) = v40;
    *(_QWORD *)(a4 + 16) = &v39[16 * v36];
    v30 = v97;
    if (v37)
      operator delete(v37);
  }
  v43 = v30;
  if (!v19)
    goto LABEL_75;
  if (v30 != v23)
  {
    v45 = *(char **)(a4 + 8);
    v44 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v45 >= v44)
    {
      v51 = *(char **)a4;
      v52 = (uint64_t)&v45[-*(_QWORD *)a4] >> 4;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 60)
        abort();
      v54 = v44 - (_QWORD)v51;
      if (v54 >> 3 > v53)
        v53 = v54 >> 3;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
        v55 = 0xFFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55 >> 60)
        goto LABEL_123;
      v56 = (char *)operator new(16 * v55);
      v57 = &v56[16 * v52];
      v30 = v97;
      v58 = *(_QWORD *)v97;
      *(_QWORD *)v57 = *(_QWORD *)v28;
      *((_QWORD *)v57 + 1) = v58;
      v47 = v57 + 16;
      if (v45 == v51)
      {
        v59 = v57;
      }
      else
      {
        do
        {
          v59 = v57 - 16;
          *((_OWORD *)v57 - 1) = *((_OWORD *)v45 - 1);
          v45 -= 16;
          v57 -= 16;
        }
        while (v45 != v51);
      }
      *(_QWORD *)a4 = v59;
      *(_QWORD *)(a4 + 8) = v47;
      *(_QWORD *)(a4 + 16) = &v56[16 * v55];
      if (v51)
        operator delete(v51);
    }
    else
    {
      v46 = *(_QWORD *)v30;
      *(_QWORD *)v45 = *(_QWORD *)v28;
      *((_QWORD *)v45 + 1) = v46;
      v47 = v45 + 16;
    }
    v43 = v30 + 2;
    *(_QWORD *)(a4 + 8) = v47;
LABEL_75:
    if (v43 == v23)
      goto LABEL_112;
    while (1)
    {
      v68 = (uint64_t *)(v43 + 2);
      v70 = *(_DWORD *)v43;
      v69 = *((_DWORD *)v43 + 1);
      if (v43 + 2 == v23)
        break;
      v72 = *(char **)(a4 + 8);
      v71 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v72 < v71)
      {
        v66 = *v68;
        *(_DWORD *)v72 = v70;
        *((_DWORD *)v72 + 1) = v69;
        *((_QWORD *)v72 + 1) = v66;
        v67 = v72 + 16;
      }
      else
      {
        v73 = *(char **)a4;
        v74 = (uint64_t)&v72[-*(_QWORD *)a4] >> 4;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 60)
          abort();
        v76 = v71 - (_QWORD)v73;
        if (v76 >> 3 > v75)
          v75 = v76 >> 3;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
          v77 = 0xFFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77 >> 60)
          goto LABEL_123;
        v78 = (char *)operator new(16 * v77);
        v79 = *v68;
        v80 = &v78[16 * v74];
        *(_DWORD *)v80 = v70;
        *((_DWORD *)v80 + 1) = v69;
        *((_QWORD *)v80 + 1) = v79;
        if (v72 == v73)
        {
          v82 = &v78[16 * v74];
        }
        else
        {
          v81 = &v78[16 * v74];
          do
          {
            v82 = v81 - 16;
            *((_OWORD *)v81 - 1) = *((_OWORD *)v72 - 1);
            v72 -= 16;
            v81 -= 16;
          }
          while (v72 != v73);
        }
        v67 = v80 + 16;
        *(_QWORD *)a4 = v82;
        *(_QWORD *)(a4 + 8) = v80 + 16;
        *(_QWORD *)(a4 + 16) = &v78[16 * v77];
        if (v73)
          operator delete(v73);
      }
      v43 += 4;
      *(_QWORD *)(a4 + 8) = v67;
      if (v43 == v23)
        goto LABEL_111;
    }
    v84 = *(char **)(a4 + 8);
    v83 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v84 < v83)
    {
      v85 = *(_QWORD *)(v98 + 8);
      *(_DWORD *)v84 = v70;
      *((_DWORD *)v84 + 1) = v69;
      *((_QWORD *)v84 + 1) = v85;
      v86 = v84 + 16;
      goto LABEL_110;
    }
    v87 = *(char **)a4;
    v88 = (uint64_t)&v84[-*(_QWORD *)a4] >> 4;
    v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 60)
      abort();
    v90 = v83 - (_QWORD)v87;
    if (v90 >> 3 > v89)
      v89 = v90 >> 3;
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
      v91 = 0xFFFFFFFFFFFFFFFLL;
    else
      v91 = v89;
    if (!(v91 >> 60))
    {
      v92 = (char *)operator new(16 * v91);
      v93 = &v92[16 * v88];
      v94 = *(_QWORD *)(v98 + 8);
      *(_DWORD *)v93 = v70;
      *((_DWORD *)v93 + 1) = v69;
      *((_QWORD *)v93 + 1) = v94;
      v86 = v93 + 16;
      if (v84 == v87)
      {
        v95 = v93;
      }
      else
      {
        do
        {
          v95 = v93 - 16;
          *((_OWORD *)v93 - 1) = *((_OWORD *)v84 - 1);
          v84 -= 16;
          v93 -= 16;
        }
        while (v84 != v87);
      }
      *(_QWORD *)a4 = v95;
      *(_QWORD *)(a4 + 8) = v86;
      *(_QWORD *)(a4 + 16) = &v92[16 * v91];
      if (v87)
        operator delete(v87);
LABEL_110:
      *(_QWORD *)(a4 + 8) = v86;
LABEL_111:
      v30 = v97;
LABEL_112:
      if (!v30)
        return;
      goto LABEL_113;
    }
LABEL_123:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v49 = *(char **)(a4 + 8);
  v48 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v49 >= v48)
  {
    v60 = *(char **)a4;
    v61 = (uint64_t)&v49[-*(_QWORD *)a4] >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      abort();
    v63 = v48 - (_QWORD)v60;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    if (v64)
    {
      if (v64 >> 60)
        goto LABEL_123;
      v65 = (char *)operator new(16 * v64);
    }
    else
    {
      v65 = 0;
    }
    v96 = &v65[16 * v61];
    *(_OWORD *)v96 = *(_OWORD *)v28;
    v50 = v96 + 16;
    if (v49 != v60)
    {
      do
      {
        *((_OWORD *)v96 - 1) = *((_OWORD *)v49 - 1);
        v96 -= 16;
        v49 -= 16;
      }
      while (v49 != v60);
      v49 = *(char **)a4;
    }
    *(_QWORD *)a4 = v96;
    *(_QWORD *)(a4 + 8) = v50;
    *(_QWORD *)(a4 + 16) = &v65[16 * v64];
    if (v49)
      operator delete(v49);
  }
  else
  {
    *(_OWORD *)v49 = *(_OWORD *)v28;
    v50 = v49 + 16;
  }
  *(_QWORD *)(a4 + 8) = v50;
  v30 = v101;
  if (v101)
  {
LABEL_113:
    v102 = v30;
    operator delete(v30);
  }
}

void sub_19F766574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

double md::GeocentricPointSource::segmentWorldPoint(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v4;
  id v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  float *v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  __double2 v18;
  double v19;
  double v21;
  double v22;
  double v23;
  double v24;

  v4 = HIWORD(a2);
  v5 = *(id *)(a1 + 8 * (unsigned __int16)a2);
  v6 = objc_msgSend(v5, "points");
  if (v5)
  {
    objc_msgSend(v5, "bounds");
    v7 = v22;
    v8 = v21;
    v10 = v23;
    v9 = v24;
  }
  else
  {
    v9 = 0.0;
    v7 = 0.0;
    v10 = 0.0;
    v8 = 0.0;
  }
  v11 = v4;
  if (a3 == 1)
    v11 = v4 + 1;
  v12 = (float *)(v6 + 12 * v11);
  v13 = (v8 + v10 * *v12) * 6.28318531 / *MEMORY[0x1E0D266F8];
  v14 = exp(3.14159265 - (v7 + v9 * (float)(1.0 - v12[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
  v15 = atan(v14) * 2.0 + -1.57079633;
  v16 = fmod(v13, 6.28318531);
  v17 = fmod(v16 + 6.28318531, 6.28318531) + -3.14159265;
  v18 = __sincos_stret(v15);
  v19 = 6378137.0
      / sqrt(v18.__sinval * v18.__sinval * -0.00669437999 + 1.0)
      * v18.__cosval
      * __sincos_stret(v17).__cosval;

  return v19;
}

void sub_19F766758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RouteCollisionObject<md::GeocentricPointSource>::intersectWithFrustumEdges(uint64_t a1, double *a2, _DWORD *a3, unsigned __int16 *a4, uint64_t a5)
{
  _DWORD *v7;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  float v33;
  int v34;
  float v35;
  float v36;
  int v37;
  unint64_t v38;
  float *v39;
  char *v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  float *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  float *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  float v57;
  unint64_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  float *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  float *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  double v81;
  __int128 v82;
  double v83;
  __int128 v84;
  double v85;

  v7 = a3;
  if (*a3)
  {
LABEL_10:
    v14 = v7[18];
    if (!(_DWORD)v14)
      return;
    v15 = 0;
    while (1)
    {
      v17 = (unsigned __int16 *)(*((_QWORD *)v7 + 10) + 4 * v15);
      v18 = *v17;
      v19 = v17[1];
      v20 = *a4;
      if (v20 >= v18 && (v20 != (_DWORD)v18 || a4[1] > v19))
        goto LABEL_15;
      v22 = a4[2];
      if (v22 <= v18 && (v22 != (_DWORD)v18 || a4[3] < v19))
        goto LABEL_15;
      v24 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v18 | (v19 << 16), 0);
      v26 = v25;
      v28 = v27;
      v29 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v18 | (v19 << 16), 1);
      *(double *)&v82 = v24;
      *((double *)&v82 + 1) = v26;
      v83 = v28;
      *(double *)&v84 = v29 - v24;
      *((double *)&v84 + 1) = v30 - v26;
      v85 = v31 - v28;
      v80 = 0.0;
      v81 = 0.0;
      if (geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(a2, (double *)&v82, 2u, &v81, &v80))break;
LABEL_14:
      v14 = v7[18];
LABEL_15:
      if (++v15 >= v14)
        return;
    }
    v32 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 8 * v18), "startPointIndex") + v19;
    if (v81 <= 0.0)
    {
LABEL_59:
      if (v80 >= 1.0)
        goto LABEL_14;
      v57 = v80;
      if (v57 >= 1.0)
      {
        v32 += vcvtms_u32_f32(v57);
        v57 = v57 - floorf(v57);
      }
      v59 = *(float **)(a5 + 8);
      v58 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v59 < v58)
      {
        *(_DWORD *)v59 = v32;
        v59[1] = v57;
        v16 = (char *)(v59 + 2);
LABEL_13:
        *(_QWORD *)(a5 + 8) = v16;
        goto LABEL_14;
      }
      v60 = *(float **)a5;
      v61 = (uint64_t)v59 - *(_QWORD *)a5;
      v62 = v61 >> 3;
      v63 = (v61 >> 3) + 1;
      if (v63 >> 61)
LABEL_85:
        abort();
      v64 = v58 - (_QWORD)v60;
      if (v64 >> 2 > v63)
        v63 = v64 >> 2;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      v79 = v63;
      if (v63)
      {
        v77 = (uint64_t)v59 - *(_QWORD *)a5;
        if (v63 >> 61)
LABEL_86:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v65 = (char *)operator new(8 * v63);
        v61 = v77;
      }
      else
      {
        v65 = 0;
      }
      v66 = (float *)&v65[8 * v62];
      *(_DWORD *)v66 = v32;
      v66[1] = v57;
      if (v59 == v60)
      {
        v60 = v59;
        v68 = &v65[8 * v62];
      }
      else
      {
        v67 = (char *)(v59 - 2) - (char *)v60;
        if (v67 < 0x58)
        {
          v68 = &v65[8 * v62];
          goto LABEL_80;
        }
        v68 = &v65[8 * v62];
        if ((unint64_t)((char *)v59 - &v65[v61]) < 0x20)
          goto LABEL_89;
        v69 = (v67 >> 3) + 1;
        v70 = &v65[8 * v62 - 16];
        v71 = v59 - 4;
        v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73 = *(_OWORD *)v71;
          *((_OWORD *)v70 - 1) = *((_OWORD *)v71 - 1);
          *(_OWORD *)v70 = v73;
          v70 -= 32;
          v71 -= 8;
          v72 -= 4;
        }
        while (v72);
        v68 = (char *)&v66[-2 * (v69 & 0x3FFFFFFFFFFFFFFCLL)];
        v59 -= 2 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
        if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_89:
          do
          {
LABEL_80:
            v74 = *((_QWORD *)v59 - 1);
            v59 -= 2;
            *((_QWORD *)v68 - 1) = v74;
            v68 -= 8;
          }
          while (v59 != v60);
          v60 = *(float **)a5;
        }
      }
      v16 = (char *)(v66 + 2);
      *(_QWORD *)a5 = v68;
      *(_QWORD *)(a5 + 8) = v66 + 2;
      *(_QWORD *)(a5 + 16) = &v65[8 * v79];
      if (v60)
        operator delete(v60);
      goto LABEL_13;
    }
    v33 = v81;
    v34 = v32 + vcvtms_u32_f32(v33);
    v35 = v33 - floorf(v33);
    if (v33 >= 1.0)
      v36 = v35;
    else
      v36 = v81;
    if (v33 >= 1.0)
      v37 = v34;
    else
      v37 = v32;
    v39 = *(float **)(a5 + 8);
    v38 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v39 < v38)
    {
      *(_DWORD *)v39 = v37;
      v39[1] = v36;
      v40 = (char *)(v39 + 2);
LABEL_58:
      *(_QWORD *)(a5 + 8) = v40;
      goto LABEL_59;
    }
    v41 = *(float **)a5;
    v42 = (uint64_t)v39 - *(_QWORD *)a5;
    v43 = v42 >> 3;
    v44 = (v42 >> 3) + 1;
    if (v44 >> 61)
      goto LABEL_85;
    v45 = v38 - (_QWORD)v41;
    if (v45 >> 2 > v44)
      v44 = v45 >> 2;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    v78 = v44;
    if (v44)
    {
      v75 = (uint64_t)v39 - *(_QWORD *)a5;
      v76 = v37;
      if (v44 >> 61)
        goto LABEL_86;
      v46 = (char *)operator new(8 * v44);
      v37 = v76;
      v42 = v75;
    }
    else
    {
      v46 = 0;
    }
    v47 = (float *)&v46[8 * v43];
    *(_DWORD *)v47 = v37;
    v47[1] = v36;
    if (v39 == v41)
    {
      v41 = v39;
      v50 = &v46[8 * v43];
      v49 = v78;
      goto LABEL_56;
    }
    v48 = (char *)(v39 - 2) - (char *)v41;
    v49 = v78;
    if (v48 >= 0x58)
    {
      v50 = &v46[8 * v43];
      if ((unint64_t)((char *)v39 - &v46[v42]) >= 0x20)
      {
        v51 = (v48 >> 3) + 1;
        v52 = &v46[8 * v43 - 16];
        v53 = v39 - 4;
        v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *(_OWORD *)v53;
          *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
          *(_OWORD *)v52 = v55;
          v52 -= 32;
          v53 -= 8;
          v54 -= 4;
        }
        while (v54);
        v50 = (char *)&v47[-2 * (v51 & 0x3FFFFFFFFFFFFFFCLL)];
        v39 -= 2 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_56;
      }
    }
    else
    {
      v50 = &v46[8 * v43];
    }
    do
    {
      v56 = *((_QWORD *)v39 - 1);
      v39 -= 2;
      *((_QWORD *)v50 - 1) = v56;
      v50 -= 8;
    }
    while (v39 != v41);
    v41 = *(float **)a5;
LABEL_56:
    v40 = (char *)(v47 + 2);
    *(_QWORD *)a5 = v50;
    *(_QWORD *)(a5 + 8) = v47 + 2;
    *(_QWORD *)(a5 + 16) = &v46[8 * v49];
    if (v41)
      operator delete(v41);
    goto LABEL_58;
  }
  while (1)
  {
    v10 = a4[2];
    v11 = *((unsigned __int16 *)v7 + 44);
    if (v10 < v11 || v10 == v11 && a4[3] < *((unsigned __int16 *)v7 + 45))
      break;
    v12 = *a4;
    v13 = *((unsigned __int16 *)v7 + 46);
    if (v12 > v13 || v12 == v13 && a4[1] > *((unsigned __int16 *)v7 + 47))
      break;
    v82 = *(_OWORD *)(v7 + 6);
    v83 = *((double *)v7 + 5);
    v84 = *((_OWORD *)v7 + 3);
    v85 = *((double *)v7 + 8);
    if (geo::Intersect::encloses<double>(a2, (double *)&v82) != 2)
      break;
    md::RouteCollisionObject<md::GeocentricPointSource>::intersectWithFrustumEdges(a1, a2, *((_QWORD *)v7 + 1), a4, a5);
    v7 = (_DWORD *)*((_QWORD *)v7 + 2);
    if (*v7)
      goto LABEL_10;
  }
}

md::PointSource *md::PointSource::PointSource(md::PointSource *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v3 = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  -[GEOComposedRoute sections](v3, "sections");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  v6 = *((_QWORD *)this + 1);
  v7 = (v6 - *(_QWORD *)this) >> 3;
  if (v5 > v7)
  {
    std::vector<GEOComposedRouteSection * {__strong}>::__append(this, v5 - v7);
LABEL_8:
    v10 = 0;
    v11 = 1;
    do
    {
      -[GEOComposedRoute sections](v3, "sections");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectAtIndexedSubscript:", v10);
      v13 = objc_claimAutoreleasedReturnValue();

      v14 = *(void **)(*(_QWORD *)this + 8 * v10);
      *(_QWORD *)(*(_QWORD *)this + 8 * v10) = v13;

      v10 = v11++;
    }
    while (v5 > v10);
    goto LABEL_10;
  }
  if (v5 < v7)
  {
    v8 = *(_QWORD *)this + 8 * v5;
    while (v6 != v8)
    {
      v9 = *(void **)(v6 - 8);
      v6 -= 8;

    }
    *((_QWORD *)this + 1) = v8;
  }
  if (v5)
    goto LABEL_8;
LABEL_10:

  return this;
}

void sub_19F766D74(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;
  void *v3;

  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<GEOComposedRouteSection * {__strong}>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  void *v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_26:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 <= 0x77
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_33;
      }
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 32;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v21;
        v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v21 + 1) = 0uLL;
        v21 -= 32;
        *((_OWORD *)v20 - 1) = v24;
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
      v26 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      while (v26 != v6)
      {
        v27 = (void *)*((_QWORD *)v26 - 1);
        v26 -= 8;

      }
      if (v6)
        goto LABEL_26;
    }
  }
}

void std::vector<md::PointSource::SegmentIndex>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      v7 = v5;
    }
    else
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_31;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_31;
      v19 = (v18 >> 2) + 1;
      v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
        v7 = *(char **)a1;
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void md::RouteCollisionObject<md::MercatorPointSource>::buildTopDownAABBTree(uint64_t a1, char **a2, int *a3, int *a4)
{
  uint64_t **v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  unsigned int v42;
  BOOL v43;
  int *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int *v49;
  int v50;
  _QWORD v51[2];

  v8 = (uint64_t **)(a1 + 88);
  while (1)
  {
    v9 = *(char **)(a1 + 120);
    if (!v9)
    {
      v10 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 112), 0x160B39uLL);
      v11 = v10;
      v12 = *(uint64_t **)(a1 + 88);
      v13 = v8;
      v14 = v8;
      if (v12)
      {
        while (1)
        {
          while (1)
          {
            v14 = (uint64_t **)v12;
            v15 = v12[4];
            if ((unint64_t)v10 >= v15)
              break;
            v12 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_11;
          }
          if (v15 >= (unint64_t)v10)
            break;
          v12 = v14[1];
          if (!v12)
          {
            v13 = v14 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v16 = (uint64_t *)operator new(0x28uLL);
        v16[4] = (uint64_t)v11;
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v13 = v16;
        v17 = **(_QWORD **)(a1 + 80);
        if (v17)
        {
          *(_QWORD *)(a1 + 80) = v17;
          v18 = *v13;
        }
        else
        {
          v18 = v16;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 88), v18);
        ++*(_QWORD *)(a1 + 96);
      }
      v9 = *(char **)(a1 + 120);
      v19 = 80 * *(_QWORD *)(a1 + 104) - 80;
      if ((v19 & 0x8000000000000000) == 0)
      {
        v20 = &v11[v19];
        v21 = &v11[v19];
        do
        {
          *(_QWORD *)v21 = v9;
          v21 -= 80;
          v9 = v20;
          v20 = v21;
        }
        while (v21 >= v11);
        v9 = v21 + 80;
      }
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)v9;
    *a2 = v9;
    if (a3 == a4)
    {
      v24 = -1.79769313e308;
      v25 = 1.79769313e308;
      v22 = 1.79769313e308;
      v23 = -1.79769313e308;
    }
    else
    {
      v22 = 1.79769313e308;
      v23 = -1.79769313e308;
      v24 = -1.79769313e308;
      v25 = 1.79769313e308;
      v26 = a3;
      do
      {
        v27 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), *v26, 0);
        v28 = fmin(v27, v25);
        v29 = fmax(v24, v27);
        v31 = fmin(v30, v22);
        v32 = fmax(v23, v30);
        v33 = *v26++;
        v34 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v33, 1);
        v25 = fmin(v34, v28);
        v24 = fmax(v29, v34);
        v22 = fmin(v35, v31);
        v23 = fmax(v32, v35);
      }
      while (v26 != a4);
    }
    *((double *)v9 + 3) = v25;
    *((double *)v9 + 4) = v22;
    *((double *)v9 + 5) = v24;
    *((double *)v9 + 6) = v23;
    v50 = 0;
    LODWORD(v51[0]) = -1;
    if (a3 >= a4)
    {
      v46 = 0xFFFFFFFFLL;
    }
    else
    {
      LOWORD(v36) = 0;
      LOWORD(v37) = 0;
      v38 = 0xFFFF;
      LOWORD(v39) = -1;
      v40 = a3;
      do
      {
        v42 = *(unsigned __int16 *)v40;
        v43 = v42 == (unsigned __int16)v39;
        if (v42 > (unsigned __int16)v39 || (v44 = v40, v43) && (v44 = v40, v38 < *((unsigned __int16 *)v40 + 1)))
          v44 = (int *)v51;
        v39 = *v44;
        LODWORD(v51[0]) = v39;
        v45 = v42 == (unsigned __int16)v37;
        if (v42 < (unsigned __int16)v37
          || (v41 = v40, v45) && (v41 = v40, *((unsigned __int16 *)v40 + 1) < (unsigned __int16)v36))
        {
          v41 = &v50;
        }
        v38 = WORD1(v39);
        v37 = *v41;
        v50 = v37;
        ++v40;
        v36 = WORD1(v37);
      }
      while (v40 < a4);
      v46 = v39 | (v37 << 32);
    }
    v47 = a4 - a3;
    *((_QWORD *)v9 + 9) = v46;
    if (v47 <= 4)
      break;
    *(_DWORD *)v9 = 0;
    *((_DWORD *)v9 + 14) = v47;
    *((_QWORD *)v9 + 8) = 0;
    v48 = (v47 + (unint64_t)(v47 < 0)) >> 1;
    v49 = &a3[v48];
    v51[0] = a1;
    v51[1] = fmax(v23 - v22, 0.0) > fmax(v24 - v25, 0.0);
    if (v49 != a4)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::MercatorPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,2> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(a3, &a3[v48], a4, (int *)v51);
    md::RouteCollisionObject<md::MercatorPointSource>::buildTopDownAABBTree(a1, v9 + 8, a3, v49);
    a2 = (char **)(v9 + 16);
    a3 = v49;
  }
  *(_DWORD *)v9 = 1;
  *((_DWORD *)v9 + 14) = v47;
  *((_QWORD *)v9 + 8) = a3;
}

uint64_t geo::Pool<md::RouteCollisionObject<md::MercatorPointSource>::Node>::~Pool(uint64_t a1)
{
  geo::Pool<md::RouteCollisionObject<md::MercatorPointSource>::Node>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19F767494(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void geo::Pool<md::RouteCollisionObject<md::MercatorPointSource>::Node>::disposeElements(uint64_t a1)
{
  _QWORD *i;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = &v14;
  for (i = *(_QWORD **)(a1 + 40); i; *(_QWORD *)(a1 + 40) = i)
  {
    v8 = &v14;
    v9 = &v14;
    if (v14)
    {
      v10 = v14;
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v10;
          v11 = v10[4];
          if ((unint64_t)i >= v11)
            break;
          v10 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_20;
        }
        if (v11 >= (unint64_t)i)
          break;
        v10 = v9[1];
        if (!v10)
        {
          v8 = v9 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      v12 = (uint64_t *)operator new(0x28uLL);
      v12[4] = (uint64_t)i;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v9;
      *v8 = v12;
      if (*v13)
      {
        v13 = (uint64_t **)*v13;
        v12 = *v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v14, v12);
      ++v15;
      i = *(_QWORD **)(a1 + 40);
    }
    i = (_QWORD *)*i;
  }
  v3 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      free((void *)v4[4]);
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v14);
}

void sub_19F767604(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::MercatorPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,2> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(int *a1, int *a2, int *a3, int *a4)
{
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  int v28;
  int *v29;
  uint64_t v30;
  int *v31;
  int *j;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float *v41;
  double v42;
  double v43;
  double v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float *v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  id v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  int *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  id v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float *v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  unint64_t v111;
  id v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float *v118;
  double v119;
  double v120;
  double v121;
  unint64_t v122;
  id v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int *v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  uint64_t v134;
  double v135;
  double v136;
  int v137;
  int v138;
  int *v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  double v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  uint64_t v154;
  double v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  double v160;
  double v161;
  uint64_t v162;
  double v163;
  double v164;
  int *k;
  uint64_t v166;
  uint64_t v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  double v172;
  double v173;
  int v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  id v178;
  uint64_t v179;
  double v180;
  double v181;
  double v182;
  double v183;
  float *v184;
  double v185;
  double v186;
  double v187;
  unint64_t v188;
  id v189;
  uint64_t v190;
  double v191;
  double v192;
  double v193;
  double v194;
  uint64_t v195;
  double v196;
  double v197;
  double v198;
  unint64_t v199;
  id v200;
  uint64_t v201;
  double v202;
  double v203;
  double v204;
  double v205;
  float *v206;
  double v207;
  double v208;
  double v209;
  unint64_t v210;
  id v211;
  uint64_t v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  uint64_t v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  uint64_t v226;
  double v227;
  double v228;
  uint64_t v229;
  unint64_t v230;
  id v231;
  uint64_t v232;
  double v233;
  double v234;
  double v235;
  double v236;
  float *v237;
  double v238;
  double v239;
  double v240;
  unint64_t v241;
  id v242;
  uint64_t v243;
  double v244;
  double v245;
  double v246;
  double v247;
  uint64_t v248;
  double v249;
  double v250;
  double v251;
  unint64_t v252;
  id v253;
  uint64_t v254;
  double v255;
  double v256;
  double v257;
  double v258;
  float *v259;
  double v260;
  double v261;
  double v262;
  unint64_t v263;
  id v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  double v268;
  double v269;
  double v270;
  uint64_t v271;
  double v272;
  double v273;
  int v274;
  int *v275;
  int *v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  double v280;
  int v281;
  double v282;
  double v283;
  uint64_t v284;
  double v285;
  double v286;
  int v287;
  int *v288;
  int *i;
  int *v291;
  int *v292;
  int v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  double v298;
  double v299;

  v291 = a3;
  if (a3 == a2)
    return;
  do
  {
    v6 = v291 - a1;
    if (v6 < 2)
      return;
    if (v6 == 3)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::MercatorPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,2> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(a1, a1 + 1, v291 - 1, a4);
      return;
    }
    if (v6 == 2)
    {
      v266 = *(_QWORD *)a4;
      *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *(v291 - 1), 0);
      *((_QWORD *)&v295 + 1) = v267;
      v268 = *((double *)&v295 + a4[2]);
      v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v266 + 128), *(v291 - 1), 1);
      v299 = v269;
      v270 = (*(&v298 + a4[2]) + v268) * 0.5;
      *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v266 + 128), *a1, 0);
      *((_QWORD *)&v295 + 1) = v271;
      v272 = *((double *)&v295 + a4[2]);
      v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v266 + 128), *a1, 1);
      v299 = v273;
      if (v270 < (*(&v298 + a4[2]) + v272) * 0.5)
      {
        v274 = *a1;
        *a1 = *(v291 - 1);
        *(v291 - 1) = v274;
      }
      return;
    }
    if ((char *)v291 - (char *)a1 <= 31)
    {
      for (; a1 != v291 - 1; ++a1)
      {
        v275 = v291;
        if (a1 != v291)
        {
          v276 = a1 + 1;
          v275 = a1;
          if (a1 + 1 != v291)
          {
            v275 = a1;
            v277 = a1 + 1;
            do
            {
              v278 = *(_QWORD *)a4;
              *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v276, 0);
              *((_QWORD *)&v295 + 1) = v279;
              v280 = *((double *)&v295 + a4[2]);
              v281 = *v277++;
              v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v278 + 128), v281, 1);
              v299 = v282;
              v283 = (*(&v298 + a4[2]) + v280) * 0.5;
              *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v278 + 128), *v275, 0);
              *((_QWORD *)&v295 + 1) = v284;
              v285 = *((double *)&v295 + a4[2]);
              v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v278 + 128), *v275, 1);
              v299 = v286;
              if (v283 < (*(&v298 + a4[2]) + v285) * 0.5)
                v275 = v276;
              v276 = v277;
            }
            while (v277 != v291);
          }
        }
        if (a1 != v275)
        {
          v287 = *a1;
          *a1 = *v275;
          *v275 = v287;
        }
      }
      return;
    }
    v7 = &a1[v6 >> 1];
    v8 = v291 - 1;
    v293 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::MercatorPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,2> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(a1, v7, v291 - 1, a4);
    v9 = *(_QWORD *)a4;
    *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a1, 0);
    *((_QWORD *)&v295 + 1) = v10;
    v11 = *((double *)&v295 + a4[2]);
    v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v9 + 128), *a1, 1);
    v299 = v12;
    v13 = (*(&v298 + a4[2]) + v11) * 0.5;
    *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v9 + 128), *v7, 0);
    *((_QWORD *)&v295 + 1) = v14;
    v15 = *((double *)&v295 + a4[2]);
    v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v9 + 128), *v7, 1);
    v299 = v16;
    if (v13 >= (*(&v298 + a4[2]) + v15) * 0.5)
    {
      v17 = v291 - 2;
      do
      {
        if (v17 == a1)
        {
          v149 = *(_QWORD *)a4;
          *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a1, 0);
          *((_QWORD *)&v295 + 1) = v150;
          v151 = *((double *)&v295 + a4[2]);
          v140 = a1 + 1;
          v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v149 + 128), *a1, 1);
          v299 = v152;
          v153 = (*(&v298 + a4[2]) + v151) * 0.5;
          *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v149 + 128), *v8, 0);
          *((_QWORD *)&v295 + 1) = v154;
          v155 = *((double *)&v295 + a4[2]);
          v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v149 + 128), *v8, 1);
          v299 = v156;
          if (v153 >= (*(&v298 + a4[2]) + v155) * 0.5)
          {
            if (v140 == v8)
              return;
            while (1)
            {
              v157 = *(_QWORD *)a4;
              *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a1, 0);
              *((_QWORD *)&v295 + 1) = v158;
              v159 = *((double *)&v295 + a4[2]);
              v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v157 + 128), *a1, 1);
              v299 = v160;
              v161 = (*(&v298 + a4[2]) + v159) * 0.5;
              *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v157 + 128), *v140, 0);
              *((_QWORD *)&v295 + 1) = v162;
              v163 = *((double *)&v295 + a4[2]);
              v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v157 + 128), *v140, 1);
              v299 = v164;
              if (v161 < (*(&v298 + a4[2]) + v163) * 0.5)
                break;
              if (++v140 == v8)
                return;
            }
            v174 = *v140;
            *v140++ = *v8;
            *v8 = v174;
          }
          if (v140 == v8)
            return;
          while (1)
          {
            v176 = *(_QWORD *)a4;
            v177 = *a1;
            v178 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)*a1);
            v179 = objc_msgSend(v178, "points");
            if (v178)
            {
              objc_msgSend(v178, "bounds");
              v180 = *((double *)&v295 + 1);
              v181 = *(double *)&v295;
              v183 = *((double *)&v296 + 1);
              v182 = *(double *)&v297;
            }
            else
            {
              v296 = 0u;
              v297 = 0u;
              v182 = 0.0;
              v180 = 0.0;
              v183 = 0.0;
              v181 = 0.0;
              v295 = 0u;
            }
            v184 = (float *)(v179 + 12 * (v177 >> 16));
            v185 = (v181 + v183 * *v184) / *MEMORY[0x1E0D266F8];
            v186 = 1.0 - (v180 + v182 * (float)(1.0 - v184[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

            v298 = v185;
            v299 = v186;
            v187 = *(&v298 + a4[2]);
            v188 = *a1;
            v189 = *(id *)(*(_QWORD *)(v176 + 128) + 8 * (unsigned __int16)*a1);
            v190 = objc_msgSend(v189, "points");
            if (v189)
            {
              objc_msgSend(v189, "bounds");
              v191 = *((double *)&v295 + 1);
              v192 = *(double *)&v295;
              v194 = *((double *)&v296 + 1);
              v193 = *(double *)&v297;
            }
            else
            {
              v296 = 0u;
              v297 = 0u;
              v193 = 0.0;
              v191 = 0.0;
              v194 = 0.0;
              v192 = 0.0;
              v295 = 0u;
            }
            v195 = v190 + 12 * (v188 >> 16);
            v196 = (v192 + v194 * *(float *)(v195 + 12)) / *MEMORY[0x1E0D266F8];
            v197 = 1.0 - (v191 + v193 * (float)(1.0 - *(float *)(v195 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

            *(double *)&v295 = v196;
            *((double *)&v295 + 1) = v197;
            v198 = *((double *)&v295 + a4[2]);
            v199 = *v140;
            v200 = *(id *)(*(_QWORD *)(v176 + 128) + 8 * (unsigned __int16)*v140);
            v201 = objc_msgSend(v200, "points");
            if (v200)
            {
              objc_msgSend(v200, "bounds");
              v202 = *((double *)&v295 + 1);
              v203 = *(double *)&v295;
              v205 = *((double *)&v296 + 1);
              v204 = *(double *)&v297;
            }
            else
            {
              v296 = 0u;
              v297 = 0u;
              v204 = 0.0;
              v202 = 0.0;
              v205 = 0.0;
              v203 = 0.0;
              v295 = 0u;
            }
            v206 = (float *)(v201 + 12 * (v199 >> 16));
            v207 = (v203 + v205 * *v206) / *MEMORY[0x1E0D266F8];
            v208 = 1.0 - (v202 + v204 * (float)(1.0 - v206[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

            v298 = v207;
            v299 = v208;
            v209 = *(&v298 + a4[2]);
            v210 = *v140;
            v211 = *(id *)(*(_QWORD *)(v176 + 128) + 8 * (unsigned __int16)*v140);
            v212 = objc_msgSend(v211, "points");
            if (v211)
            {
              objc_msgSend(v211, "bounds");
              v213 = *((double *)&v295 + 1);
              v214 = *(double *)&v295;
              v216 = *((double *)&v296 + 1);
              v215 = *(double *)&v297;
            }
            else
            {
              v296 = 0u;
              v297 = 0u;
              v215 = 0.0;
              v213 = 0.0;
              v216 = 0.0;
              v214 = 0.0;
              v295 = 0u;
            }
            v217 = (v198 + v187) * 0.5;
            v218 = v212 + 12 * (v210 >> 16);
            v219 = (v214 + v216 * *(float *)(v218 + 12)) / *MEMORY[0x1E0D266F8];
            v220 = 1.0 - (v213 + v215 * (float)(1.0 - *(float *)(v218 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

            *(double *)&v295 = v219;
            *((double *)&v295 + 1) = v220;
            if (v217 < (*((double *)&v295 + a4[2]) + v209) * 0.5)
            {
              do
              {
                v229 = *(_QWORD *)a4;
                v230 = *a1;
                v231 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)*a1);
                v232 = objc_msgSend(v231, "points");
                if (v231)
                {
                  objc_msgSend(v231, "bounds");
                  v233 = *((double *)&v295 + 1);
                  v234 = *(double *)&v295;
                  v236 = *((double *)&v296 + 1);
                  v235 = *(double *)&v297;
                }
                else
                {
                  v296 = 0u;
                  v297 = 0u;
                  v235 = 0.0;
                  v233 = 0.0;
                  v236 = 0.0;
                  v234 = 0.0;
                  v295 = 0u;
                }
                v237 = (float *)(v232 + 12 * (v230 >> 16));
                v238 = (v234 + v236 * *v237) / *MEMORY[0x1E0D266F8];
                v239 = 1.0 - (v233 + v235 * (float)(1.0 - v237[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

                v298 = v238;
                v299 = v239;
                v240 = *(&v298 + a4[2]);
                v241 = *a1;
                v242 = *(id *)(*(_QWORD *)(v229 + 128) + 8 * (unsigned __int16)*a1);
                v243 = objc_msgSend(v242, "points");
                if (v242)
                {
                  objc_msgSend(v242, "bounds");
                  v244 = *((double *)&v295 + 1);
                  v245 = *(double *)&v295;
                  v247 = *((double *)&v296 + 1);
                  v246 = *(double *)&v297;
                }
                else
                {
                  v296 = 0u;
                  v297 = 0u;
                  v246 = 0.0;
                  v244 = 0.0;
                  v247 = 0.0;
                  v245 = 0.0;
                  v295 = 0u;
                }
                v248 = v243 + 12 * (v241 >> 16);
                v249 = (v245 + v247 * *(float *)(v248 + 12)) / *MEMORY[0x1E0D266F8];
                v250 = 1.0
                     - (v244 + v246 * (float)(1.0 - *(float *)(v248 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

                *(double *)&v295 = v249;
                *((double *)&v295 + 1) = v250;
                v251 = *((double *)&v295 + a4[2]);
                v252 = *(v8 - 1);
                v253 = *(id *)(*(_QWORD *)(v229 + 128) + 8 * (unsigned __int16)*(v8 - 1));
                v254 = objc_msgSend(v253, "points");
                if (v253)
                {
                  objc_msgSend(v253, "bounds");
                  v255 = *((double *)&v295 + 1);
                  v256 = *(double *)&v295;
                  v258 = *((double *)&v296 + 1);
                  v257 = *(double *)&v297;
                }
                else
                {
                  v296 = 0u;
                  v297 = 0u;
                  v257 = 0.0;
                  v255 = 0.0;
                  v258 = 0.0;
                  v256 = 0.0;
                  v295 = 0u;
                }
                v259 = (float *)(v254 + 12 * (v252 >> 16));
                v260 = (v256 + v258 * *v259) / *MEMORY[0x1E0D266F8];
                v261 = 1.0 - (v255 + v257 * (float)(1.0 - v259[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

                v298 = v260;
                v299 = v261;
                v262 = *(&v298 + a4[2]);
                v263 = *(v8 - 1);
                v264 = *(id *)(*(_QWORD *)(v229 + 128) + 8 * (unsigned __int16)*(v8 - 1));
                v265 = objc_msgSend(v264, "points");
                if (v264)
                {
                  objc_msgSend(v264, "bounds");
                  v222 = *((double *)&v295 + 1);
                  v224 = *(double *)&v295;
                  v223 = *((double *)&v296 + 1);
                  v221 = *(double *)&v297;
                }
                else
                {
                  v296 = 0u;
                  v297 = 0u;
                  v221 = 0.0;
                  v222 = 0.0;
                  v223 = 0.0;
                  v224 = 0.0;
                  v295 = 0u;
                }
                --v8;
                v225 = (v251 + v240) * 0.5;
                v226 = v265 + 12 * (v263 >> 16);
                v227 = (v224 + v223 * *(float *)(v226 + 12)) / *MEMORY[0x1E0D266F8];
                v228 = 1.0
                     - (v222 + v221 * (float)(1.0 - *(float *)(v226 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

                *(double *)&v295 = v227;
                *((double *)&v295 + 1) = v228;
              }
              while (v225 < (*((double *)&v295 + a4[2]) + v262) * 0.5);
              if (v140 >= v8)
              {
                if (v140 <= a2)
                  goto LABEL_108;
                return;
              }
              v175 = *v140;
              *v140 = *v8;
              *v8 = v175;
            }
            ++v140;
          }
        }
        v18 = v17;
        v19 = *(_QWORD *)a4;
        *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v17, 0);
        *((_QWORD *)&v295 + 1) = v20;
        v21 = *((double *)&v295 + a4[2]);
        v22 = *v17--;
        v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v19 + 128), v22, 1);
        v299 = v23;
        v24 = (*(&v298 + a4[2]) + v21) * 0.5;
        *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v19 + 128), *v7, 0);
        *((_QWORD *)&v295 + 1) = v25;
        v26 = *((double *)&v295 + a4[2]);
        v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v19 + 128), *v7, 1);
        v299 = v27;
      }
      while (v24 >= (*(&v298 + a4[2]) + v26) * 0.5);
      v28 = *a1;
      *a1 = *v18;
      *v18 = v28;
      ++v293;
      v8 = v18;
    }
    v29 = a1 + 1;
    if (a1 + 1 >= v8)
    {
      v126 = 1;
      v127 = v291;
    }
    else
    {
      v288 = a1 + 1;
      v30 = 1;
      for (i = a1; ; a1 = i)
      {
        v31 = v7;
        v294 = v30;
        for (j = &a1[v30]; ; ++j)
        {
          v33 = *(_QWORD *)a4;
          v34 = *j;
          v35 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)*j);
          v36 = objc_msgSend(v35, "points");
          if (v35)
          {
            objc_msgSend(v35, "bounds");
            v37 = *((double *)&v295 + 1);
            v38 = *(double *)&v295;
            v40 = *((double *)&v296 + 1);
            v39 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v39 = 0.0;
            v37 = 0.0;
            v40 = 0.0;
            v38 = 0.0;
            v295 = 0u;
          }
          v41 = (float *)(v36 + 12 * (v34 >> 16));
          v42 = (v38 + v40 * *v41) / *MEMORY[0x1E0D266F8];
          v43 = 1.0 - (v37 + v39 * (float)(1.0 - v41[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          v298 = v42;
          v299 = v43;
          v44 = *(&v298 + a4[2]);
          v45 = *j;
          v46 = *(id *)(*(_QWORD *)(v33 + 128) + 8 * (unsigned __int16)*j);
          v47 = objc_msgSend(v46, "points");
          if (v46)
          {
            objc_msgSend(v46, "bounds");
            v48 = *((double *)&v295 + 1);
            v49 = *(double *)&v295;
            v51 = *((double *)&v296 + 1);
            v50 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v50 = 0.0;
            v48 = 0.0;
            v51 = 0.0;
            v49 = 0.0;
            v295 = 0u;
          }
          v52 = v47 + 12 * (v45 >> 16);
          v53 = (v49 + v51 * *(float *)(v52 + 12)) / *MEMORY[0x1E0D266F8];
          v54 = 1.0 - (v48 + v50 * (float)(1.0 - *(float *)(v52 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          *(double *)&v295 = v53;
          *((double *)&v295 + 1) = v54;
          v55 = *((double *)&v295 + a4[2]);
          v56 = *v31;
          v57 = *(id *)(*(_QWORD *)(v33 + 128) + 8 * (unsigned __int16)*v31);
          v58 = objc_msgSend(v57, "points");
          if (v57)
          {
            objc_msgSend(v57, "bounds");
            v59 = *((double *)&v295 + 1);
            v60 = *(double *)&v295;
            v62 = *((double *)&v296 + 1);
            v61 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v61 = 0.0;
            v59 = 0.0;
            v62 = 0.0;
            v60 = 0.0;
            v295 = 0u;
          }
          v63 = (float *)(v58 + 12 * (v56 >> 16));
          v64 = (v60 + v62 * *v63) / *MEMORY[0x1E0D266F8];
          v65 = 1.0 - (v59 + v61 * (float)(1.0 - v63[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          v298 = v64;
          v299 = v65;
          v66 = *(&v298 + a4[2]);
          v67 = *v31;
          v68 = *(id *)(*(_QWORD *)(v33 + 128) + 8 * (unsigned __int16)*v31);
          v69 = objc_msgSend(v68, "points");
          if (v68)
          {
            objc_msgSend(v68, "bounds");
            v70 = *((double *)&v295 + 1);
            v71 = *(double *)&v295;
            v73 = *((double *)&v296 + 1);
            v72 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v72 = 0.0;
            v70 = 0.0;
            v73 = 0.0;
            v71 = 0.0;
            v295 = 0u;
          }
          v74 = (v55 + v44) * 0.5;
          v75 = v69 + 12 * (v67 >> 16);
          v76 = (v71 + v73 * *(float *)(v75 + 12)) / *MEMORY[0x1E0D266F8];
          v77 = 1.0 - (v70 + v72 * (float)(1.0 - *(float *)(v75 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          *(double *)&v295 = v76;
          *((double *)&v295 + 1) = v77;
          if (v74 >= (*((double *)&v295 + a4[2]) + v66) * 0.5)
            break;
          ++v294;
        }
        v78 = v8;
        do
        {
          v87 = *(_QWORD *)a4;
          v89 = *--v8;
          v88 = v89;
          v90 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)v89);
          v91 = objc_msgSend(v90, "points");
          if (v90)
          {
            objc_msgSend(v90, "bounds");
            v92 = *((double *)&v295 + 1);
            v93 = *(double *)&v295;
            v95 = *((double *)&v296 + 1);
            v94 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v94 = 0.0;
            v92 = 0.0;
            v95 = 0.0;
            v93 = 0.0;
            v295 = 0u;
          }
          v96 = (float *)(v91 + 12 * (v88 >> 16));
          v97 = (v93 + v95 * *v96) / *MEMORY[0x1E0D266F8];
          v98 = 1.0 - (v92 + v94 * (float)(1.0 - v96[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          v298 = v97;
          v299 = v98;
          v99 = *(&v298 + a4[2]);
          v100 = *(v78 - 1);
          v101 = *(id *)(*(_QWORD *)(v87 + 128) + 8 * (unsigned __int16)v100);
          v102 = objc_msgSend(v101, "points");
          if (v101)
          {
            objc_msgSend(v101, "bounds");
            v103 = *((double *)&v295 + 1);
            v104 = *(double *)&v295;
            v106 = *((double *)&v296 + 1);
            v105 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v105 = 0.0;
            v103 = 0.0;
            v106 = 0.0;
            v104 = 0.0;
            v295 = 0u;
          }
          v107 = v102 + 12 * (v100 >> 16);
          v108 = (v104 + v106 * *(float *)(v107 + 12)) / *MEMORY[0x1E0D266F8];
          v109 = 1.0 - (v103 + v105 * (float)(1.0 - *(float *)(v107 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          *(double *)&v295 = v108;
          *((double *)&v295 + 1) = v109;
          v110 = *((double *)&v295 + a4[2]);
          v111 = *v31;
          v112 = *(id *)(*(_QWORD *)(v87 + 128) + 8 * (unsigned __int16)*v31);
          v113 = objc_msgSend(v112, "points");
          if (v112)
          {
            objc_msgSend(v112, "bounds");
            v114 = *((double *)&v295 + 1);
            v115 = *(double *)&v295;
            v117 = *((double *)&v296 + 1);
            v116 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v116 = 0.0;
            v114 = 0.0;
            v117 = 0.0;
            v115 = 0.0;
            v295 = 0u;
          }
          v118 = (float *)(v113 + 12 * (v111 >> 16));
          v119 = (v115 + v117 * *v118) / *MEMORY[0x1E0D266F8];
          v120 = 1.0 - (v114 + v116 * (float)(1.0 - v118[1])) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          v298 = v119;
          v299 = v120;
          v121 = *(&v298 + a4[2]);
          v122 = *v31;
          v123 = *(id *)(*(_QWORD *)(v87 + 128) + 8 * (unsigned __int16)*v31);
          v124 = objc_msgSend(v123, "points");
          if (v123)
          {
            objc_msgSend(v123, "bounds");
            v80 = *((double *)&v295 + 1);
            v82 = *(double *)&v295;
            v81 = *((double *)&v296 + 1);
            v79 = *(double *)&v297;
          }
          else
          {
            v296 = 0u;
            v297 = 0u;
            v79 = 0.0;
            v80 = 0.0;
            v81 = 0.0;
            v82 = 0.0;
            v295 = 0u;
          }
          v83 = (v110 + v99) * 0.5;
          v84 = v124 + 12 * (v122 >> 16);
          v85 = (v82 + v81 * *(float *)(v84 + 12)) / *MEMORY[0x1E0D266F8];
          v86 = 1.0 - (v80 + v79 * (float)(1.0 - *(float *)(v84 + 16))) / *(double *)(MEMORY[0x1E0D266F8] + 8);

          *(double *)&v295 = v85;
          *((double *)&v295 + 1) = v86;
          v78 = v8;
        }
        while (v83 >= (*((double *)&v295 + a4[2]) + v121) * 0.5);
        if (j >= v8)
          break;
        v125 = *j;
        *j = *v8;
        *v8 = v125;
        ++v293;
        if (v31 == j)
          v7 = v8;
        else
          v7 = v31;
        v30 = v294 + 1;
      }
      a1 = i;
      v127 = v291;
      v7 = v31;
      v29 = v288;
      v126 = v294;
    }
    v128 = &a1[v126];
    v292 = v127;
    if (v128 == v7)
      goto LABEL_52;
    v129 = *(_QWORD *)a4;
    *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v7, 0);
    *((_QWORD *)&v295 + 1) = v130;
    v131 = *((double *)&v295 + a4[2]);
    v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v129 + 128), *v7, 1);
    v299 = v132;
    v133 = (*(&v298 + a4[2]) + v131) * 0.5;
    *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v129 + 128), *v128, 0);
    *((_QWORD *)&v295 + 1) = v134;
    v135 = *((double *)&v295 + a4[2]);
    v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v129 + 128), *v128, 1);
    v299 = v136;
    if (v133 >= (*(&v298 + a4[2]) + v135) * 0.5)
    {
LABEL_52:
      v138 = v293;
    }
    else
    {
      v137 = *v128;
      *v128 = *v7;
      *v7 = v137;
      v138 = v293 + 1;
    }
    if (v128 == a2)
      return;
    if (!v138)
    {
      if (v128 <= a2)
      {
        for (k = v128 + 1; k != v292; ++k)
        {
          v166 = *(_QWORD *)a4;
          *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *k, 0);
          *((_QWORD *)&v295 + 1) = v167;
          v168 = *((double *)&v295 + a4[2]);
          v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v166 + 128), *k, 1);
          v299 = v169;
          v170 = (*(&v298 + a4[2]) + v168) * 0.5;
          *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v166 + 128), *(k - 1), 0);
          *((_QWORD *)&v295 + 1) = v171;
          v172 = *((double *)&v295 + a4[2]);
          v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v166 + 128), *(k - 1), 1);
          v299 = v173;
          if (v170 < (*(&v298 + a4[2]) + v172) * 0.5)
            goto LABEL_55;
        }
        return;
      }
      if (v126 == 1)
        return;
      while (1)
      {
        v141 = *(_QWORD *)a4;
        *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v29, 0);
        *((_QWORD *)&v295 + 1) = v142;
        v143 = *((double *)&v295 + a4[2]);
        v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v141 + 128), *v29, 1);
        v299 = v144;
        v145 = (*(&v298 + a4[2]) + v143) * 0.5;
        *(_QWORD *)&v295 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v141 + 128), *(v29 - 1), 0);
        *((_QWORD *)&v295 + 1) = v146;
        v147 = *((double *)&v295 + a4[2]);
        v298 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v141 + 128), *(v29 - 1), 1);
        v299 = v148;
        if (v145 < (*(&v298 + a4[2]) + v147) * 0.5)
          break;
        if (++v29 == v128)
          return;
      }
    }
LABEL_55:
    v139 = v292;
    if (v128 > a2)
      v139 = &a1[v126];
    v291 = v139;
    if (v128 <= a2)
      v140 = v128 + 1;
    else
      v140 = a1;
LABEL_108:
    a1 = v140;
  }
  while (v291 != a2);
}

void sub_19F76898C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::MercatorPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,2> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  int v51;
  double v53;
  uint64_t v54;
  double v55;
  uint64_t v56;

  v8 = *(_QWORD *)a4;
  v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a2, 0);
  v56 = v9;
  v10 = *(&v55 + a4[2]);
  v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v8 + 128), *a2, 1);
  v54 = v11;
  v12 = (*(&v53 + a4[2]) + v10) * 0.5;
  v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v8 + 128), *a1, 0);
  v56 = v13;
  v14 = *(&v55 + a4[2]);
  v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v8 + 128), *a1, 1);
  v54 = v15;
  v16 = *(_QWORD *)a4;
  if (v12 < (*(&v53 + a4[2]) + v14) * 0.5)
  {
    v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a3, 0);
    v56 = v17;
    v18 = *(&v55 + a4[2]);
    v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a3, 1);
    v54 = v19;
    v20 = (*(&v53 + a4[2]) + v18) * 0.5;
    v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a2, 0);
    v56 = v21;
    v22 = *(&v55 + a4[2]);
    v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a2, 1);
    v54 = v23;
    v24 = *a1;
    if (v20 < (*(&v53 + a4[2]) + v22) * 0.5)
    {
      *a1 = *a3;
      *a3 = v24;
      return 1;
    }
    *a1 = *a2;
    *a2 = v24;
    v43 = *(_QWORD *)a4;
    v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a3, 0);
    v56 = v44;
    v45 = *(&v55 + a4[2]);
    v25 = 1;
    v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v43 + 128), *a3, 1);
    v54 = v46;
    v47 = (*(&v53 + a4[2]) + v45) * 0.5;
    v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v43 + 128), *a2, 0);
    v56 = v48;
    v49 = *(&v55 + a4[2]);
    v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v43 + 128), *a2, 1);
    v54 = v50;
    if (v47 >= (*(&v53 + a4[2]) + v49) * 0.5)
      return v25;
    v51 = *a2;
    *a2 = *a3;
    *a3 = v51;
    return 2;
  }
  v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a3, 0);
  v56 = v26;
  v27 = *(&v55 + a4[2]);
  v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a3, 1);
  v54 = v28;
  v29 = (*(&v53 + a4[2]) + v27) * 0.5;
  v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a2, 0);
  v56 = v30;
  v31 = *(&v55 + a4[2]);
  v25 = 0;
  v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v16 + 128), *a2, 1);
  v54 = v32;
  if (v29 < (*(&v53 + a4[2]) + v31) * 0.5)
  {
    v33 = *a2;
    *a2 = *a3;
    *a3 = v33;
    v34 = *(_QWORD *)a4;
    v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a2, 0);
    v56 = v35;
    v36 = *(&v55 + a4[2]);
    v25 = 1;
    v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v34 + 128), *a2, 1);
    v54 = v37;
    v38 = (*(&v53 + a4[2]) + v36) * 0.5;
    v55 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v34 + 128), *a1, 0);
    v56 = v39;
    v40 = *(&v55 + a4[2]);
    v53 = md::MercatorPointSource::segmentWorldPoint(*(_QWORD *)(v34 + 128), *a1, 1);
    v54 = v41;
    if (v38 < (*(&v53 + a4[2]) + v40) * 0.5)
    {
      v42 = *a1;
      *a1 = *a2;
      *a2 = v42;
      return 2;
    }
  }
  return v25;
}

void std::__shared_ptr_emplace<md::RouteCollisionObject<md::MercatorPointSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteCollisionObject<md::MercatorPointSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RouteCollisionObject<md::MercatorPointSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 160);
    v4 = *(void **)(a1 + 152);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v4);
  }
  geo::Pool<md::RouteCollisionObject<md::MercatorPointSource>::Node>::disposeElements(a1 + 104);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 112));
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(void **)(a1 + 72);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 8);
        v7 -= 8;

      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v8);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(_QWORD *)(a1 + 56) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 24) = &off_1E42B4C30;

}

void sub_19F768EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 112));
  _Unwind_Resume(a1);
}

void md::RouteCollisionObject<md::GeocentricPointSource>::buildTopDownAABBTree(uint64_t a1, char **a2, int *a3, int *a4)
{
  uint64_t **v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  double v22;
  double v23;
  double v24;
  int *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  double v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int *v46;
  int *v47;
  unsigned int v48;
  BOOL v49;
  int *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  _BOOL8 v57;
  int *v58;
  uint64_t v59;
  int v60;
  _QWORD v61[2];

  v8 = (uint64_t **)(a1 + 88);
  while (1)
  {
    v9 = *(char **)(a1 + 120);
    if (!v9)
    {
      v10 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 112), 0x160B39uLL);
      v11 = v10;
      v12 = *(uint64_t **)(a1 + 88);
      v13 = v8;
      v14 = v8;
      if (v12)
      {
        while (1)
        {
          while (1)
          {
            v14 = (uint64_t **)v12;
            v15 = v12[4];
            if ((unint64_t)v10 >= v15)
              break;
            v12 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_11;
          }
          if (v15 >= (unint64_t)v10)
            break;
          v12 = v14[1];
          if (!v12)
          {
            v13 = v14 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v16 = (uint64_t *)operator new(0x28uLL);
        v16[4] = (uint64_t)v11;
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v13 = v16;
        v17 = **(_QWORD **)(a1 + 80);
        if (v17)
        {
          *(_QWORD *)(a1 + 80) = v17;
          v18 = *v13;
        }
        else
        {
          v18 = v16;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 88), v18);
        ++*(_QWORD *)(a1 + 96);
      }
      v9 = *(char **)(a1 + 120);
      v19 = 96 * *(_QWORD *)(a1 + 104) - 96;
      if ((v19 & 0x8000000000000000) == 0)
      {
        v20 = &v11[v19];
        v21 = &v11[v19];
        do
        {
          *(_QWORD *)v21 = v9;
          v21 -= 96;
          v9 = v20;
          v20 = v21;
        }
        while (v21 >= v11);
        v9 = v21 + 96;
      }
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)v9;
    *a2 = v9;
    if (a3 == a4)
    {
      v23 = 1.79769313e308;
      v28 = -1.79769313e308;
      v27 = -1.79769313e308;
      v22 = -1.79769313e308;
      v24 = 1.79769313e308;
      v26 = 1.79769313e308;
    }
    else
    {
      v22 = -1.79769313e308;
      v23 = 1.79769313e308;
      v24 = 1.79769313e308;
      v25 = a3;
      v26 = 1.79769313e308;
      v27 = -1.79769313e308;
      v28 = -1.79769313e308;
      do
      {
        v29 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), *v25, 0);
        v30 = fmin(v29, v26);
        v31 = fmax(v22, v29);
        v33 = fmin(v32, v24);
        v34 = fmax(v27, v32);
        v36 = fmin(v35, v23);
        v37 = fmax(v28, v35);
        v38 = *v25++;
        v39 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(a1 + 128), v38, 1);
        v26 = fmin(v39, v30);
        v22 = fmax(v31, v39);
        v24 = fmin(v40, v33);
        v27 = fmax(v34, v40);
        v23 = fmin(v41, v36);
        v28 = fmax(v37, v41);
      }
      while (v25 != a4);
    }
    *((double *)v9 + 3) = v26;
    *((double *)v9 + 4) = v24;
    *((double *)v9 + 5) = v23;
    *((double *)v9 + 6) = v22;
    *((double *)v9 + 7) = v27;
    *((double *)v9 + 8) = v28;
    v60 = 0;
    LODWORD(v61[0]) = -1;
    if (a3 >= a4)
    {
      v52 = 0xFFFFFFFFLL;
    }
    else
    {
      LOWORD(v42) = 0;
      LOWORD(v43) = 0;
      v44 = 0xFFFF;
      LOWORD(v45) = -1;
      v46 = a3;
      do
      {
        v48 = *(unsigned __int16 *)v46;
        v49 = v48 == (unsigned __int16)v45;
        if (v48 > (unsigned __int16)v45 || (v50 = v46, v49) && (v50 = v46, v44 < *((unsigned __int16 *)v46 + 1)))
          v50 = (int *)v61;
        v45 = *v50;
        LODWORD(v61[0]) = v45;
        v51 = v48 == (unsigned __int16)v43;
        if (v48 < (unsigned __int16)v43
          || (v47 = v46, v51) && (v47 = v46, *((unsigned __int16 *)v46 + 1) < (unsigned __int16)v42))
        {
          v47 = &v60;
        }
        v44 = WORD1(v45);
        v43 = *v47;
        v60 = v43;
        ++v46;
        v42 = WORD1(v43);
      }
      while (v46 < a4);
      v52 = v45 | (v43 << 32);
    }
    v53 = a4 - a3;
    *((_QWORD *)v9 + 11) = v52;
    if (v53 <= 4)
      break;
    *(_DWORD *)v9 = 0;
    *((_DWORD *)v9 + 18) = v53;
    *((_QWORD *)v9 + 10) = 0;
    v54 = fmax(v22 - v26, 0.0);
    v55 = fmax(v27 - v24, 0.0);
    v56 = fmax(v28 - v23, 0.0);
    v57 = v55 > v54;
    if (v55 > v54)
      v54 = v55;
    v58 = &a3[(v53 + (unint64_t)(v53 < 0)) >> 1];
    if (v56 <= v54)
      v59 = v57;
    else
      v59 = 2;
    v61[0] = a1;
    v61[1] = v59;
    if (v58 != a4)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::GeocentricPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,3> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(a3, v58, a4, (int *)v61);
    md::RouteCollisionObject<md::GeocentricPointSource>::buildTopDownAABBTree(a1, v9 + 8, a3, v58);
    a2 = (char **)(v9 + 16);
    a3 = v58;
  }
  *(_DWORD *)v9 = 1;
  *((_DWORD *)v9 + 18) = v53;
  *((_QWORD *)v9 + 10) = a3;
}

uint64_t geo::Pool<md::RouteCollisionObject<md::GeocentricPointSource>::Node>::~Pool(uint64_t a1)
{
  geo::Pool<md::RouteCollisionObject<md::GeocentricPointSource>::Node>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19F769278(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void geo::Pool<md::RouteCollisionObject<md::GeocentricPointSource>::Node>::disposeElements(uint64_t a1)
{
  _QWORD *i;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = &v14;
  for (i = *(_QWORD **)(a1 + 40); i; *(_QWORD *)(a1 + 40) = i)
  {
    v8 = &v14;
    v9 = &v14;
    if (v14)
    {
      v10 = v14;
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v10;
          v11 = v10[4];
          if ((unint64_t)i >= v11)
            break;
          v10 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_20;
        }
        if (v11 >= (unint64_t)i)
          break;
        v10 = v9[1];
        if (!v10)
        {
          v8 = v9 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      v12 = (uint64_t *)operator new(0x28uLL);
      v12[4] = (uint64_t)i;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v9;
      *v8 = v12;
      if (*v13)
      {
        v13 = (uint64_t **)*v13;
        v12 = *v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v14, v12);
      ++v15;
      i = *(_QWORD **)(a1 + 40);
    }
    i = (_QWORD *)*i;
  }
  v3 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      free((void *)v4[4]);
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v14);
}

void sub_19F7693E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::GeocentricPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,3> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(int *a1, int *a2, int *a3, int *a4)
{
  float v6;
  unint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  int v37;
  int *v38;
  uint64_t v39;
  int *v40;
  int *i;
  uint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float *v50;
  long double v51;
  long double v52;
  double v53;
  long double v54;
  double v55;
  __double2 v56;
  double v57;
  __double2 v58;
  double v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  long double v68;
  long double v69;
  double v70;
  long double v71;
  double v72;
  __double2 v73;
  double v74;
  __double2 v75;
  double v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  float *v84;
  long double v85;
  long double v86;
  double v87;
  long double v88;
  double v89;
  __double2 v90;
  double v91;
  __double2 v92;
  double v93;
  unint64_t v94;
  id v95;
  uint64_t v96;
  float v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t v103;
  long double v104;
  long double v105;
  double v106;
  long double v107;
  double v108;
  __double2 v109;
  double v110;
  __double2 v111;
  int *v112;
  float v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  long double v120;
  long double v121;
  double v122;
  long double v123;
  double v124;
  __double2 v125;
  double v126;
  __double2 v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  id v131;
  uint64_t v132;
  float v133;
  double v134;
  double v135;
  double v136;
  double v137;
  float *v138;
  long double v139;
  long double v140;
  double v141;
  long double v142;
  double v143;
  __double2 v144;
  double v145;
  __double2 v146;
  double v147;
  unint64_t v148;
  id v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  uint64_t v155;
  long double v156;
  long double v157;
  double v158;
  long double v159;
  double v160;
  __double2 v161;
  double v162;
  __double2 v163;
  double v164;
  unint64_t v165;
  id v166;
  uint64_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  float *v172;
  long double v173;
  long double v174;
  double v175;
  long double v176;
  double v177;
  __double2 v178;
  double v179;
  __double2 v180;
  double v181;
  unint64_t v182;
  id v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  int *v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  double v193;
  double v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  double v199;
  double v200;
  int v201;
  int v202;
  int *v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  double v215;
  double v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  double v221;
  double v222;
  double v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  double v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  double v233;
  double v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  double v239;
  double v240;
  int *j;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  double v246;
  double v247;
  double v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  double v252;
  double v253;
  int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  id v258;
  uint64_t v259;
  double v260;
  double v261;
  double v262;
  double v263;
  float *v264;
  long double v265;
  long double v266;
  double v267;
  long double v268;
  double v269;
  __double2 v270;
  double v271;
  __double2 v272;
  double v273;
  unint64_t v274;
  id v275;
  uint64_t v276;
  double v277;
  double v278;
  double v279;
  double v280;
  uint64_t v281;
  long double v282;
  long double v283;
  double v284;
  long double v285;
  double v286;
  __double2 v287;
  double v288;
  __double2 v289;
  double v290;
  unint64_t v291;
  id v292;
  uint64_t v293;
  double v294;
  double v295;
  double v296;
  double v297;
  float *v298;
  long double v299;
  long double v300;
  double v301;
  long double v302;
  double v303;
  __double2 v304;
  double v305;
  __double2 v306;
  double v307;
  unint64_t v308;
  id v309;
  uint64_t v310;
  double v311;
  double v312;
  double v313;
  double v314;
  uint64_t v315;
  long double v316;
  long double v317;
  double v318;
  long double v319;
  double v320;
  __double2 v321;
  double v322;
  __double2 v323;
  float v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  uint64_t v330;
  long double v331;
  long double v332;
  double v333;
  long double v334;
  double v335;
  __double2 v336;
  double v337;
  __double2 v338;
  uint64_t v339;
  unint64_t v340;
  id v341;
  uint64_t v342;
  float v343;
  double v344;
  double v345;
  double v346;
  double v347;
  float *v348;
  long double v349;
  long double v350;
  double v351;
  long double v352;
  double v353;
  __double2 v354;
  double v355;
  __double2 v356;
  double v357;
  unint64_t v358;
  id v359;
  uint64_t v360;
  double v361;
  double v362;
  double v363;
  double v364;
  uint64_t v365;
  long double v366;
  long double v367;
  double v368;
  long double v369;
  double v370;
  __double2 v371;
  double v372;
  __double2 v373;
  double v374;
  unint64_t v375;
  id v376;
  uint64_t v377;
  double v378;
  double v379;
  double v380;
  double v381;
  float *v382;
  long double v383;
  long double v384;
  double v385;
  long double v386;
  double v387;
  __double2 v388;
  double v389;
  __double2 v390;
  double v391;
  unint64_t v392;
  id v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  double v398;
  double v399;
  double v400;
  double v401;
  uint64_t v402;
  uint64_t v403;
  double v404;
  double v405;
  double v406;
  int v407;
  int *v408;
  int *v409;
  int *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  double v414;
  int v415;
  double v416;
  double v417;
  double v418;
  uint64_t v419;
  uint64_t v420;
  double v421;
  double v422;
  double v423;
  int v424;
  int *v425;
  int *v427;
  int *v428;
  int *v429;
  int v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  double v435;
  double v436;
  double v437;

  v428 = a3;
  if (a3 == a2)
    return;
  v6 = 1.0;
  do
  {
    v7 = v428 - a1;
    if (v7 < 2)
      return;
    if (v7 == 3)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::GeocentricPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,3> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(a1, a1 + 1, v428 - 1, a4);
      return;
    }
    if (v7 == 2)
    {
      v395 = *(_QWORD *)a4;
      *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *(v428 - 1), 0);
      *((_QWORD *)&v432 + 1) = v396;
      *(_QWORD *)&v433 = v397;
      v398 = *((double *)&v432 + a4[2]);
      v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v395 + 128), *(v428 - 1), 1);
      v436 = v399;
      v437 = v400;
      v401 = (*(&v435 + a4[2]) + v398) * 0.5;
      *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v395 + 128), *a1, 0);
      *((_QWORD *)&v432 + 1) = v402;
      *(_QWORD *)&v433 = v403;
      v404 = *((double *)&v432 + a4[2]);
      v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v395 + 128), *a1, 1);
      v436 = v405;
      v437 = v406;
      if (v401 < (*(&v435 + a4[2]) + v404) * 0.5)
      {
        v407 = *a1;
        *a1 = *(v428 - 1);
        *(v428 - 1) = v407;
      }
      return;
    }
    if ((char *)v428 - (char *)a1 <= 31)
    {
      for (; a1 != v428 - 1; ++a1)
      {
        v408 = v428;
        if (a1 != v428)
        {
          v409 = a1 + 1;
          v408 = a1;
          if (a1 + 1 != v428)
          {
            v408 = a1;
            v410 = a1 + 1;
            do
            {
              v411 = *(_QWORD *)a4;
              *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v409, 0);
              *((_QWORD *)&v432 + 1) = v412;
              *(_QWORD *)&v433 = v413;
              v414 = *((double *)&v432 + a4[2]);
              v415 = *v410++;
              v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v411 + 128), v415, 1);
              v436 = v416;
              v437 = v417;
              v418 = (*(&v435 + a4[2]) + v414) * 0.5;
              *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v411 + 128), *v408, 0);
              *((_QWORD *)&v432 + 1) = v419;
              *(_QWORD *)&v433 = v420;
              v421 = *((double *)&v432 + a4[2]);
              v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v411 + 128), *v408, 1);
              v436 = v422;
              v437 = v423;
              if (v418 < (*(&v435 + a4[2]) + v421) * 0.5)
                v408 = v409;
              v409 = v410;
            }
            while (v410 != v428);
          }
        }
        if (a1 != v408)
        {
          v424 = *a1;
          *a1 = *v408;
          *v408 = v424;
        }
      }
      return;
    }
    v8 = &a1[v7 >> 1];
    v9 = v428 - 1;
    v430 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::GeocentricPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,3> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(a1, v8, v428 - 1, a4);
    v10 = *(_QWORD *)a4;
    *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a1, 0);
    *((_QWORD *)&v432 + 1) = v11;
    *(_QWORD *)&v433 = v12;
    v13 = *((double *)&v432 + a4[2]);
    v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v10 + 128), *a1, 1);
    v436 = v14;
    v437 = v15;
    v16 = (*(&v435 + a4[2]) + v13) * 0.5;
    *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v10 + 128), *v8, 0);
    *((_QWORD *)&v432 + 1) = v17;
    *(_QWORD *)&v433 = v18;
    v19 = *((double *)&v432 + a4[2]);
    v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v10 + 128), *v8, 1);
    v436 = v20;
    v437 = v21;
    if (v16 >= (*(&v435 + a4[2]) + v19) * 0.5)
    {
      v22 = v428 - 2;
      do
      {
        if (v22 == a1)
        {
          v217 = *(_QWORD *)a4;
          *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a1, 0);
          *((_QWORD *)&v432 + 1) = v218;
          *(_QWORD *)&v433 = v219;
          v220 = *((double *)&v432 + a4[2]);
          v204 = a1 + 1;
          v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v217 + 128), *a1, 1);
          v436 = v221;
          v437 = v222;
          v223 = (*(&v435 + a4[2]) + v220) * 0.5;
          *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v217 + 128), *v9, 0);
          *((_QWORD *)&v432 + 1) = v224;
          *(_QWORD *)&v433 = v225;
          v226 = *((double *)&v432 + a4[2]);
          v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v217 + 128), *v9, 1);
          v436 = v227;
          v437 = v228;
          if (v223 >= (*(&v435 + a4[2]) + v226) * 0.5)
          {
            if (v204 == v9)
              return;
            while (1)
            {
              v229 = *(_QWORD *)a4;
              *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a1, 0);
              *((_QWORD *)&v432 + 1) = v230;
              *(_QWORD *)&v433 = v231;
              v232 = *((double *)&v432 + a4[2]);
              v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v229 + 128), *a1, 1);
              v436 = v233;
              v437 = v234;
              v235 = (*(&v435 + a4[2]) + v232) * 0.5;
              *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v229 + 128), *v204, 0);
              *((_QWORD *)&v432 + 1) = v236;
              *(_QWORD *)&v433 = v237;
              v238 = *((double *)&v432 + a4[2]);
              v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v229 + 128), *v204, 1);
              v436 = v239;
              v437 = v240;
              if (v235 < (*(&v435 + a4[2]) + v238) * 0.5)
                break;
              if (++v204 == v9)
                return;
            }
            v254 = *v204;
            *v204++ = *v9;
            *v9 = v254;
          }
          if (v204 == v9)
            return;
          while (1)
          {
            v256 = *(_QWORD *)a4;
            v257 = *a1;
            v258 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)*a1);
            v259 = objc_msgSend(v258, "points");
            if (v258)
            {
              objc_msgSend(v258, "bounds");
              v260 = *((double *)&v432 + 1);
              v261 = *(double *)&v432;
              v263 = *((double *)&v433 + 1);
              v262 = *(double *)&v434;
            }
            else
            {
              v433 = 0u;
              v434 = 0u;
              v262 = 0.0;
              v260 = 0.0;
              v263 = 0.0;
              v261 = 0.0;
              v432 = 0u;
            }
            v264 = (float *)(v259 + 12 * (v257 >> 16));
            v265 = (v261 + v263 * *v264) * 6.28318531 / *MEMORY[0x1E0D266F8];
            v266 = exp(3.14159265- (v260 + v262 * (float)(1.0 - v264[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
            v267 = atan(v266) * 2.0 + -1.57079633;
            v268 = fmod(v265, 6.28318531);
            v269 = fmod(v268 + 6.28318531, 6.28318531) + -3.14159265;
            v270 = __sincos_stret(v267);
            v271 = 6378137.0 / sqrt(v270.__sinval * v270.__sinval * -0.00669437999 + 1.0);
            v272 = __sincos_stret(v269);

            v435 = v271 * v270.__cosval * v272.__cosval;
            v436 = v271 * v270.__cosval * v272.__sinval;
            v437 = v270.__sinval * 0.99330562 * v271;
            v273 = *(&v435 + a4[2]);
            v274 = *a1;
            v275 = *(id *)(*(_QWORD *)(v256 + 128) + 8 * (unsigned __int16)*a1);
            v276 = objc_msgSend(v275, "points");
            if (v275)
            {
              objc_msgSend(v275, "bounds");
              v277 = *((double *)&v432 + 1);
              v278 = *(double *)&v432;
              v280 = *((double *)&v433 + 1);
              v279 = *(double *)&v434;
            }
            else
            {
              v433 = 0u;
              v434 = 0u;
              v279 = 0.0;
              v277 = 0.0;
              v280 = 0.0;
              v278 = 0.0;
              v432 = 0u;
            }
            v281 = v276 + 12 * (v274 >> 16);
            v282 = (v278 + v280 * *(float *)(v281 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
            v283 = exp(3.14159265- (v277 + v279 * (float)(1.0 - *(float *)(v281 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
            v284 = atan(v283) * 2.0 + -1.57079633;
            v285 = fmod(v282, 6.28318531);
            v286 = fmod(v285 + 6.28318531, 6.28318531) + -3.14159265;
            v287 = __sincos_stret(v284);
            v288 = 6378137.0 / sqrt(v287.__sinval * v287.__sinval * -0.00669437999 + 1.0);
            v289 = __sincos_stret(v286);

            *(double *)&v432 = v288 * v287.__cosval * v289.__cosval;
            *((double *)&v432 + 1) = v288 * v287.__cosval * v289.__sinval;
            *(double *)&v433 = v287.__sinval * 0.99330562 * v288;
            v290 = *((double *)&v432 + a4[2]);
            v291 = *v204;
            v292 = *(id *)(*(_QWORD *)(v256 + 128) + 8 * (unsigned __int16)*v204);
            v293 = objc_msgSend(v292, "points");
            if (v292)
            {
              objc_msgSend(v292, "bounds");
              v294 = *((double *)&v432 + 1);
              v295 = *(double *)&v432;
              v297 = *((double *)&v433 + 1);
              v296 = *(double *)&v434;
            }
            else
            {
              v433 = 0u;
              v434 = 0u;
              v296 = 0.0;
              v294 = 0.0;
              v297 = 0.0;
              v295 = 0.0;
              v432 = 0u;
            }
            v298 = (float *)(v293 + 12 * (v291 >> 16));
            v299 = (v295 + v297 * *v298) * 6.28318531 / *MEMORY[0x1E0D266F8];
            v300 = exp(3.14159265- (v294 + v296 * (float)(1.0 - v298[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
            v301 = atan(v300) * 2.0 + -1.57079633;
            v302 = fmod(v299, 6.28318531);
            v303 = fmod(v302 + 6.28318531, 6.28318531) + -3.14159265;
            v304 = __sincos_stret(v301);
            v305 = 6378137.0 / sqrt(v304.__sinval * v304.__sinval * -0.00669437999 + 1.0);
            v306 = __sincos_stret(v303);

            v435 = v305 * v304.__cosval * v306.__cosval;
            v436 = v305 * v304.__cosval * v306.__sinval;
            v437 = v304.__sinval * 0.99330562 * v305;
            v307 = *(&v435 + a4[2]);
            v308 = *v204;
            v309 = *(id *)(*(_QWORD *)(v256 + 128) + 8 * (unsigned __int16)*v204);
            v310 = objc_msgSend(v309, "points");
            if (v309)
            {
              objc_msgSend(v309, "bounds");
              v311 = *((double *)&v432 + 1);
              v312 = *(double *)&v432;
              v314 = *((double *)&v433 + 1);
              v313 = *(double *)&v434;
            }
            else
            {
              v433 = 0u;
              v434 = 0u;
              v313 = 0.0;
              v311 = 0.0;
              v314 = 0.0;
              v312 = 0.0;
              v432 = 0u;
            }
            v315 = v310 + 12 * (v308 >> 16);
            v316 = (v312 + v314 * *(float *)(v315 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
            v317 = exp(3.14159265- (v311 + v313 * (float)(1.0 - *(float *)(v315 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
            v318 = atan(v317) * 2.0 + -1.57079633;
            v319 = fmod(v316, 6.28318531);
            v320 = fmod(v319 + 6.28318531, 6.28318531) + -3.14159265;
            v321 = __sincos_stret(v318);
            v322 = 6378137.0 / sqrt(v321.__sinval * v321.__sinval * -0.00669437999 + 1.0);
            v323 = __sincos_stret(v320);

            *(double *)&v432 = v322 * v321.__cosval * v323.__cosval;
            *((double *)&v432 + 1) = v322 * v321.__cosval * v323.__sinval;
            *(double *)&v433 = v321.__sinval * 0.99330562 * v322;
            if ((v290 + v273) * 0.5 < (*((double *)&v432 + a4[2]) + v307) * 0.5)
            {
              do
              {
                v339 = *(_QWORD *)a4;
                v340 = *a1;
                v341 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)*a1);
                v342 = objc_msgSend(v341, "points");
                if (v341)
                {
                  objc_msgSend(v341, "bounds");
                  v343 = 1.0;
                  v344 = *((double *)&v432 + 1);
                  v345 = *(double *)&v432;
                  v347 = *((double *)&v433 + 1);
                  v346 = *(double *)&v434;
                }
                else
                {
                  v433 = 0u;
                  v434 = 0u;
                  v346 = 0.0;
                  v344 = 0.0;
                  v347 = 0.0;
                  v345 = 0.0;
                  v432 = 0u;
                  v343 = 1.0;
                }
                v348 = (float *)(v342 + 12 * (v340 >> 16));
                v349 = (v345 + v347 * *v348) * 6.28318531 / *MEMORY[0x1E0D266F8];
                v350 = exp(3.14159265- (v344 + v346 * (float)(v343 - v348[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
                v351 = atan(v350) * 2.0 + -1.57079633;
                v352 = fmod(v349, 6.28318531);
                v353 = fmod(v352 + 6.28318531, 6.28318531) + -3.14159265;
                v354 = __sincos_stret(v351);
                v355 = 6378137.0 / sqrt(v354.__sinval * v354.__sinval * -0.00669437999 + 1.0);
                v356 = __sincos_stret(v353);

                v435 = v355 * v354.__cosval * v356.__cosval;
                v436 = v355 * v354.__cosval * v356.__sinval;
                v437 = v354.__sinval * 0.99330562 * v355;
                v357 = *(&v435 + a4[2]);
                v358 = *a1;
                v359 = *(id *)(*(_QWORD *)(v339 + 128) + 8 * (unsigned __int16)*a1);
                v360 = objc_msgSend(v359, "points");
                if (v359)
                {
                  objc_msgSend(v359, "bounds");
                  v361 = *((double *)&v432 + 1);
                  v362 = *(double *)&v432;
                  v364 = *((double *)&v433 + 1);
                  v363 = *(double *)&v434;
                }
                else
                {
                  v433 = 0u;
                  v434 = 0u;
                  v363 = 0.0;
                  v361 = 0.0;
                  v364 = 0.0;
                  v362 = 0.0;
                  v432 = 0u;
                }
                v365 = v360 + 12 * (v358 >> 16);
                v366 = (v362 + v364 * *(float *)(v365 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
                v367 = exp(3.14159265- (v361 + v363 * (float)(v343 - *(float *)(v365 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
                v368 = atan(v367) * 2.0 + -1.57079633;
                v369 = fmod(v366, 6.28318531);
                v370 = fmod(v369 + 6.28318531, 6.28318531) + -3.14159265;
                v371 = __sincos_stret(v368);
                v372 = 6378137.0 / sqrt(v371.__sinval * v371.__sinval * -0.00669437999 + 1.0);
                v373 = __sincos_stret(v370);

                *(double *)&v432 = v372 * v371.__cosval * v373.__cosval;
                *((double *)&v432 + 1) = v372 * v371.__cosval * v373.__sinval;
                *(double *)&v433 = v371.__sinval * 0.99330562 * v372;
                v374 = *((double *)&v432 + a4[2]);
                v375 = *(v9 - 1);
                v376 = *(id *)(*(_QWORD *)(v339 + 128) + 8 * (unsigned __int16)*(v9 - 1));
                v377 = objc_msgSend(v376, "points");
                if (v376)
                {
                  objc_msgSend(v376, "bounds");
                  v378 = *((double *)&v432 + 1);
                  v379 = *(double *)&v432;
                  v381 = *((double *)&v433 + 1);
                  v380 = *(double *)&v434;
                }
                else
                {
                  v433 = 0u;
                  v434 = 0u;
                  v380 = 0.0;
                  v378 = 0.0;
                  v381 = 0.0;
                  v379 = 0.0;
                  v432 = 0u;
                }
                v382 = (float *)(v377 + 12 * (v375 >> 16));
                v383 = (v379 + v381 * *v382) * 6.28318531 / *MEMORY[0x1E0D266F8];
                v384 = exp(3.14159265- (v378 + v380 * (float)(v343 - v382[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
                v385 = atan(v384) * 2.0 + -1.57079633;
                v386 = fmod(v383, 6.28318531);
                v387 = fmod(v386 + 6.28318531, 6.28318531) + -3.14159265;
                v388 = __sincos_stret(v385);
                v389 = 6378137.0 / sqrt(v388.__sinval * v388.__sinval * -0.00669437999 + 1.0);
                v390 = __sincos_stret(v387);

                v435 = v389 * v388.__cosval * v390.__cosval;
                v436 = v389 * v388.__cosval * v390.__sinval;
                v437 = v388.__sinval * 0.99330562 * v389;
                v391 = *(&v435 + a4[2]);
                v392 = *(v9 - 1);
                v393 = *(id *)(*(_QWORD *)(v339 + 128) + 8 * (unsigned __int16)*(v9 - 1));
                v394 = objc_msgSend(v393, "points");
                if (v393)
                {
                  objc_msgSend(v393, "bounds");
                  v324 = 1.0;
                  v326 = *((double *)&v432 + 1);
                  v328 = *(double *)&v432;
                  v327 = *((double *)&v433 + 1);
                  v325 = *(double *)&v434;
                }
                else
                {
                  v324 = 1.0;
                  v433 = 0u;
                  v434 = 0u;
                  v325 = 0.0;
                  v326 = 0.0;
                  v327 = 0.0;
                  v328 = 0.0;
                  v432 = 0u;
                }
                --v9;
                v329 = (v374 + v357) * 0.5;
                v330 = v394 + 12 * (v392 >> 16);
                v331 = (v328 + v327 * *(float *)(v330 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
                v332 = exp(3.14159265- (v326 + v325 * (float)(v324 - *(float *)(v330 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
                v333 = atan(v332) * 2.0 + -1.57079633;
                v334 = fmod(v331, 6.28318531);
                v335 = fmod(v334 + 6.28318531, 6.28318531) + -3.14159265;
                v336 = __sincos_stret(v333);
                v337 = 6378137.0 / sqrt(v336.__sinval * v336.__sinval * -0.00669437999 + 1.0);
                v338 = __sincos_stret(v335);

                *(double *)&v432 = v337 * v336.__cosval * v338.__cosval;
                *((double *)&v432 + 1) = v337 * v336.__cosval * v338.__sinval;
                *(double *)&v433 = v336.__sinval * 0.99330562 * v337;
              }
              while (v329 < (*((double *)&v432 + a4[2]) + v391) * 0.5);
              if (v204 >= v9)
              {
                v6 = 1.0;
                if (v204 <= a2)
                  goto LABEL_109;
                return;
              }
              v255 = *v204;
              *v204 = *v9;
              *v9 = v255;
            }
            ++v204;
          }
        }
        v23 = v22;
        v24 = *(_QWORD *)a4;
        *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v22, 0);
        *((_QWORD *)&v432 + 1) = v25;
        *(_QWORD *)&v433 = v26;
        v27 = *((double *)&v432 + a4[2]);
        v28 = *v22--;
        v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v24 + 128), v28, 1);
        v436 = v29;
        v437 = v30;
        v31 = (*(&v435 + a4[2]) + v27) * 0.5;
        *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v24 + 128), *v8, 0);
        *((_QWORD *)&v432 + 1) = v32;
        *(_QWORD *)&v433 = v33;
        v34 = *((double *)&v432 + a4[2]);
        v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v24 + 128), *v8, 1);
        v436 = v35;
        v437 = v36;
      }
      while (v31 >= (*(&v435 + a4[2]) + v34) * 0.5);
      v37 = *a1;
      *a1 = *v23;
      *v23 = v37;
      ++v430;
      v9 = v23;
    }
    v38 = a1 + 1;
    if (a1 + 1 >= v9)
    {
      v186 = 1;
      v187 = v428;
    }
    else
    {
      v425 = a1 + 1;
      v39 = 1;
      v427 = a1;
      while (1)
      {
        v40 = v8;
        v431 = v39;
        for (i = &a1[v39]; ; ++i)
        {
          v42 = *(_QWORD *)a4;
          v43 = *i;
          v44 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)*i);
          v45 = objc_msgSend(v44, "points");
          if (v44)
          {
            objc_msgSend(v44, "bounds");
            v46 = *((double *)&v432 + 1);
            v47 = *(double *)&v432;
            v49 = *((double *)&v433 + 1);
            v48 = *(double *)&v434;
          }
          else
          {
            v433 = 0u;
            v434 = 0u;
            v48 = 0.0;
            v46 = 0.0;
            v49 = 0.0;
            v47 = 0.0;
            v432 = 0u;
          }
          v50 = (float *)(v45 + 12 * (v43 >> 16));
          v51 = (v47 + v49 * *v50) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v52 = exp(3.14159265 - (v46 + v48 * (float)(v6 - v50[1]))
                               * 6.28318531
                               / *(double *)(MEMORY[0x1E0D266F8] + 8));
          v53 = atan(v52) * 2.0 + -1.57079633;
          v54 = fmod(v51, 6.28318531);
          v55 = fmod(v54 + 6.28318531, 6.28318531) + -3.14159265;
          v56 = __sincos_stret(v53);
          v57 = 6378137.0 / sqrt(v56.__sinval * v56.__sinval * -0.00669437999 + 1.0);
          v58 = __sincos_stret(v55);

          v435 = v57 * v56.__cosval * v58.__cosval;
          v436 = v57 * v56.__cosval * v58.__sinval;
          v437 = v56.__sinval * 0.99330562 * v57;
          v59 = *(&v435 + a4[2]);
          v60 = *i;
          v61 = *(id *)(*(_QWORD *)(v42 + 128) + 8 * (unsigned __int16)*i);
          v62 = objc_msgSend(v61, "points");
          if (v61)
          {
            objc_msgSend(v61, "bounds");
            v63 = *((double *)&v432 + 1);
            v64 = *(double *)&v432;
            v66 = *((double *)&v433 + 1);
            v65 = *(double *)&v434;
          }
          else
          {
            v433 = 0u;
            v434 = 0u;
            v65 = 0.0;
            v63 = 0.0;
            v66 = 0.0;
            v64 = 0.0;
            v432 = 0u;
          }
          v67 = v62 + 12 * (v60 >> 16);
          v68 = (v64 + v66 * *(float *)(v67 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v69 = exp(3.14159265- (v63 + v65 * (float)(v6 - *(float *)(v67 + 16))) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
          v70 = atan(v69) * 2.0 + -1.57079633;
          v71 = fmod(v68, 6.28318531);
          v72 = fmod(v71 + 6.28318531, 6.28318531) + -3.14159265;
          v73 = __sincos_stret(v70);
          v74 = 6378137.0 / sqrt(v73.__sinval * v73.__sinval * -0.00669437999 + 1.0);
          v75 = __sincos_stret(v72);

          *(double *)&v432 = v74 * v73.__cosval * v75.__cosval;
          *((double *)&v432 + 1) = v74 * v73.__cosval * v75.__sinval;
          *(double *)&v433 = v73.__sinval * 0.99330562 * v74;
          v76 = *((double *)&v432 + a4[2]);
          v77 = *v40;
          v78 = *(id *)(*(_QWORD *)(v42 + 128) + 8 * (unsigned __int16)*v40);
          v79 = objc_msgSend(v78, "points");
          if (v78)
          {
            objc_msgSend(v78, "bounds");
            v80 = *((double *)&v432 + 1);
            v81 = *(double *)&v432;
            v83 = *((double *)&v433 + 1);
            v82 = *(double *)&v434;
          }
          else
          {
            v433 = 0u;
            v434 = 0u;
            v82 = 0.0;
            v80 = 0.0;
            v83 = 0.0;
            v81 = 0.0;
            v432 = 0u;
          }
          v84 = (float *)(v79 + 12 * (v77 >> 16));
          v85 = (v81 + v83 * *v84) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v86 = exp(3.14159265 - (v80 + v82 * (float)(v6 - v84[1]))
                               * 6.28318531
                               / *(double *)(MEMORY[0x1E0D266F8] + 8));
          v87 = atan(v86) * 2.0 + -1.57079633;
          v88 = fmod(v85, 6.28318531);
          v89 = fmod(v88 + 6.28318531, 6.28318531) + -3.14159265;
          v90 = __sincos_stret(v87);
          v91 = 6378137.0 / sqrt(v90.__sinval * v90.__sinval * -0.00669437999 + 1.0);
          v92 = __sincos_stret(v89);

          v435 = v91 * v90.__cosval * v92.__cosval;
          v436 = v91 * v90.__cosval * v92.__sinval;
          v437 = v90.__sinval * 0.99330562 * v91;
          v93 = *(&v435 + a4[2]);
          v94 = *v40;
          v95 = *(id *)(*(_QWORD *)(v42 + 128) + 8 * (unsigned __int16)*v40);
          v96 = objc_msgSend(v95, "points");
          if (v95)
          {
            objc_msgSend(v95, "bounds");
            v97 = 1.0;
            v98 = *((double *)&v432 + 1);
            v99 = *(double *)&v432;
            v101 = *((double *)&v433 + 1);
            v100 = *(double *)&v434;
          }
          else
          {
            v97 = 1.0;
            v433 = 0u;
            v434 = 0u;
            v100 = 0.0;
            v98 = 0.0;
            v101 = 0.0;
            v99 = 0.0;
            v432 = 0u;
          }
          v102 = (v76 + v59) * 0.5;
          v103 = v96 + 12 * (v94 >> 16);
          v104 = (v99 + v101 * *(float *)(v103 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v105 = exp(3.14159265- (v98 + v100 * (float)(v97 - *(float *)(v103 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
          v106 = atan(v105) * 2.0 + -1.57079633;
          v107 = fmod(v104, 6.28318531);
          v108 = fmod(v107 + 6.28318531, 6.28318531) + -3.14159265;
          v109 = __sincos_stret(v106);
          v110 = 6378137.0 / sqrt(v109.__sinval * v109.__sinval * -0.00669437999 + 1.0);
          v111 = __sincos_stret(v108);

          *(double *)&v432 = v110 * v109.__cosval * v111.__cosval;
          *((double *)&v432 + 1) = v110 * v109.__cosval * v111.__sinval;
          *(double *)&v433 = v109.__sinval * 0.99330562 * v110;
          if (v102 >= (*((double *)&v432 + a4[2]) + v93) * 0.5)
            break;
          ++v431;
          v6 = 1.0;
        }
        v112 = v9;
        do
        {
          v128 = *(_QWORD *)a4;
          v130 = *--v9;
          v129 = v130;
          v131 = *(id *)(*(_QWORD *)(*(_QWORD *)a4 + 128) + 8 * (unsigned __int16)v130);
          v132 = objc_msgSend(v131, "points");
          if (v131)
          {
            objc_msgSend(v131, "bounds");
            v133 = 1.0;
            v134 = *((double *)&v432 + 1);
            v135 = *(double *)&v432;
            v137 = *((double *)&v433 + 1);
            v136 = *(double *)&v434;
          }
          else
          {
            v433 = 0u;
            v434 = 0u;
            v136 = 0.0;
            v134 = 0.0;
            v137 = 0.0;
            v135 = 0.0;
            v432 = 0u;
            v133 = 1.0;
          }
          v138 = (float *)(v132 + 12 * (v129 >> 16));
          v139 = (v135 + v137 * *v138) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v140 = exp(3.14159265- (v134 + v136 * (float)(v133 - v138[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
          v141 = atan(v140) * 2.0 + -1.57079633;
          v142 = fmod(v139, 6.28318531);
          v143 = fmod(v142 + 6.28318531, 6.28318531) + -3.14159265;
          v144 = __sincos_stret(v141);
          v145 = 6378137.0 / sqrt(v144.__sinval * v144.__sinval * -0.00669437999 + 1.0);
          v146 = __sincos_stret(v143);

          v435 = v145 * v144.__cosval * v146.__cosval;
          v436 = v145 * v144.__cosval * v146.__sinval;
          v437 = v144.__sinval * 0.99330562 * v145;
          v147 = *(&v435 + a4[2]);
          v148 = *(v112 - 1);
          v149 = *(id *)(*(_QWORD *)(v128 + 128) + 8 * (unsigned __int16)v148);
          v150 = objc_msgSend(v149, "points");
          if (v149)
          {
            objc_msgSend(v149, "bounds");
            v151 = *((double *)&v432 + 1);
            v152 = *(double *)&v432;
            v154 = *((double *)&v433 + 1);
            v153 = *(double *)&v434;
          }
          else
          {
            v433 = 0u;
            v434 = 0u;
            v153 = 0.0;
            v151 = 0.0;
            v154 = 0.0;
            v152 = 0.0;
            v432 = 0u;
          }
          v155 = v150 + 12 * (v148 >> 16);
          v156 = (v152 + v154 * *(float *)(v155 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v157 = exp(3.14159265- (v151 + v153 * (float)(v133 - *(float *)(v155 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
          v158 = atan(v157) * 2.0 + -1.57079633;
          v159 = fmod(v156, 6.28318531);
          v160 = fmod(v159 + 6.28318531, 6.28318531) + -3.14159265;
          v161 = __sincos_stret(v158);
          v162 = 6378137.0 / sqrt(v161.__sinval * v161.__sinval * -0.00669437999 + 1.0);
          v163 = __sincos_stret(v160);

          *(double *)&v432 = v162 * v161.__cosval * v163.__cosval;
          *((double *)&v432 + 1) = v162 * v161.__cosval * v163.__sinval;
          *(double *)&v433 = v161.__sinval * 0.99330562 * v162;
          v164 = *((double *)&v432 + a4[2]);
          v165 = *v40;
          v166 = *(id *)(*(_QWORD *)(v128 + 128) + 8 * (unsigned __int16)*v40);
          v167 = objc_msgSend(v166, "points");
          if (v166)
          {
            objc_msgSend(v166, "bounds");
            v168 = *((double *)&v432 + 1);
            v169 = *(double *)&v432;
            v171 = *((double *)&v433 + 1);
            v170 = *(double *)&v434;
          }
          else
          {
            v433 = 0u;
            v434 = 0u;
            v170 = 0.0;
            v168 = 0.0;
            v171 = 0.0;
            v169 = 0.0;
            v432 = 0u;
          }
          v172 = (float *)(v167 + 12 * (v165 >> 16));
          v173 = (v169 + v171 * *v172) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v174 = exp(3.14159265- (v168 + v170 * (float)(v133 - v172[1])) * 6.28318531 / *(double *)(MEMORY[0x1E0D266F8] + 8));
          v175 = atan(v174) * 2.0 + -1.57079633;
          v176 = fmod(v173, 6.28318531);
          v177 = fmod(v176 + 6.28318531, 6.28318531) + -3.14159265;
          v178 = __sincos_stret(v175);
          v179 = 6378137.0 / sqrt(v178.__sinval * v178.__sinval * -0.00669437999 + 1.0);
          v180 = __sincos_stret(v177);

          v435 = v179 * v178.__cosval * v180.__cosval;
          v436 = v179 * v178.__cosval * v180.__sinval;
          v437 = v178.__sinval * 0.99330562 * v179;
          v181 = *(&v435 + a4[2]);
          v182 = *v40;
          v183 = *(id *)(*(_QWORD *)(v128 + 128) + 8 * (unsigned __int16)*v40);
          v184 = objc_msgSend(v183, "points");
          if (v183)
          {
            objc_msgSend(v183, "bounds");
            v113 = 1.0;
            v115 = *((double *)&v432 + 1);
            v117 = *(double *)&v432;
            v116 = *((double *)&v433 + 1);
            v114 = *(double *)&v434;
          }
          else
          {
            v113 = 1.0;
            v433 = 0u;
            v434 = 0u;
            v114 = 0.0;
            v115 = 0.0;
            v116 = 0.0;
            v117 = 0.0;
            v432 = 0u;
          }
          v118 = (v164 + v147) * 0.5;
          v119 = v184 + 12 * (v182 >> 16);
          v120 = (v117 + v116 * *(float *)(v119 + 12)) * 6.28318531 / *MEMORY[0x1E0D266F8];
          v121 = exp(3.14159265- (v115 + v114 * (float)(v113 - *(float *)(v119 + 16)))* 6.28318531/ *(double *)(MEMORY[0x1E0D266F8] + 8));
          v122 = atan(v121) * 2.0 + -1.57079633;
          v123 = fmod(v120, 6.28318531);
          v124 = fmod(v123 + 6.28318531, 6.28318531) + -3.14159265;
          v125 = __sincos_stret(v122);
          v126 = 6378137.0 / sqrt(v125.__sinval * v125.__sinval * -0.00669437999 + 1.0);
          v127 = __sincos_stret(v124);

          *(double *)&v432 = v126 * v125.__cosval * v127.__cosval;
          *((double *)&v432 + 1) = v126 * v125.__cosval * v127.__sinval;
          *(double *)&v433 = v125.__sinval * 0.99330562 * v126;
          v112 = v9;
        }
        while (v118 >= (*((double *)&v432 + a4[2]) + v181) * 0.5);
        if (i >= v9)
          break;
        v185 = *i;
        *i = *v9;
        *v9 = v185;
        ++v430;
        if (v40 == i)
          v8 = v9;
        else
          v8 = v40;
        v39 = v431 + 1;
        a1 = v427;
        v6 = 1.0;
      }
      a1 = v427;
      v187 = v428;
      v6 = 1.0;
      v8 = v40;
      v38 = v425;
      v186 = v431;
    }
    v188 = &a1[v186];
    v429 = v187;
    if (v188 == v8)
      goto LABEL_53;
    v189 = *(_QWORD *)a4;
    *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v8, 0);
    *((_QWORD *)&v432 + 1) = v190;
    *(_QWORD *)&v433 = v191;
    v192 = *((double *)&v432 + a4[2]);
    v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v189 + 128), *v8, 1);
    v436 = v193;
    v437 = v194;
    v195 = (*(&v435 + a4[2]) + v192) * 0.5;
    *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v189 + 128), *v188, 0);
    *((_QWORD *)&v432 + 1) = v196;
    *(_QWORD *)&v433 = v197;
    v198 = *((double *)&v432 + a4[2]);
    v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v189 + 128), *v188, 1);
    v436 = v199;
    v437 = v200;
    if (v195 >= (*(&v435 + a4[2]) + v198) * 0.5)
    {
LABEL_53:
      v202 = v430;
    }
    else
    {
      v201 = *v188;
      *v188 = *v8;
      *v8 = v201;
      v202 = v430 + 1;
    }
    if (v188 == a2)
      return;
    if (!v202)
    {
      if (v188 <= a2)
      {
        for (j = v188 + 1; j != v429; ++j)
        {
          v242 = *(_QWORD *)a4;
          *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *j, 0);
          *((_QWORD *)&v432 + 1) = v243;
          *(_QWORD *)&v433 = v244;
          v245 = *((double *)&v432 + a4[2]);
          v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v242 + 128), *j, 1);
          v436 = v246;
          v437 = v247;
          v248 = (*(&v435 + a4[2]) + v245) * 0.5;
          *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v242 + 128), *(j - 1), 0);
          *((_QWORD *)&v432 + 1) = v249;
          *(_QWORD *)&v433 = v250;
          v251 = *((double *)&v432 + a4[2]);
          v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v242 + 128), *(j - 1), 1);
          v436 = v252;
          v437 = v253;
          if (v248 < (*(&v435 + a4[2]) + v251) * 0.5)
            goto LABEL_56;
        }
        return;
      }
      if (v186 == 1)
        return;
      while (1)
      {
        v205 = *(_QWORD *)a4;
        *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *v38, 0);
        *((_QWORD *)&v432 + 1) = v206;
        *(_QWORD *)&v433 = v207;
        v208 = *((double *)&v432 + a4[2]);
        v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v205 + 128), *v38, 1);
        v436 = v209;
        v437 = v210;
        v211 = (*(&v435 + a4[2]) + v208) * 0.5;
        *(_QWORD *)&v432 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v205 + 128), *(v38 - 1), 0);
        *((_QWORD *)&v432 + 1) = v212;
        *(_QWORD *)&v433 = v213;
        v214 = *((double *)&v432 + a4[2]);
        v435 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v205 + 128), *(v38 - 1), 1);
        v436 = v215;
        v437 = v216;
        if (v211 < (*(&v435 + a4[2]) + v214) * 0.5)
          break;
        if (++v38 == v188)
          return;
      }
    }
LABEL_56:
    v203 = v429;
    if (v188 > a2)
      v203 = &a1[v186];
    v428 = v203;
    if (v188 <= a2)
      v204 = v188 + 1;
    else
      v204 = a1;
LABEL_109:
    a1 = v204;
  }
  while (v428 != a2);
}

