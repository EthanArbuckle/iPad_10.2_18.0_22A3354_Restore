void std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8900;
  a2[1] = v2;
  return result;
}

void std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 != *(_QWORD *)(v2 + 48))
  {
    v4 = *(_QWORD *)(v2 + 48);
    do
    {
      if (*(_QWORD *)v3)
      {
        v5 = *(_QWORD *)(*(_QWORD *)v3 + 328);
        if (v5)
          *(_BYTE *)(v5 + 282) = 0;
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  v6 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 88);
  if (v6)
  {
    v7 = 7;
    md::MapEngine::setNeedsTick(v6, &v7);
  }
}

void sub_19F538014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19F5380BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F53828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)ReachabilityCallbacker;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F538480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<ReachabilityCallbacker * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4FB0;

  return a1;
}

void geo::_retain_ptr<ReachabilityCallbacker * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4FB0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ReachabilityChangedObserver::ReachabilityChangedObserver(_QWORD *a1, _QWORD *a2, void *a3)
{
  id v5;
  ReachabilityCallbacker *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *a1 = &off_1E42B4FB0;
  a1[1] = 0;
  v6 = [ReachabilityCallbacker alloc];
  v7 = a2[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a2)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v14 = (_BYTE *)v7;
    goto LABEL_6;
  }
  v14 = v13;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v13);
LABEL_6:
  v8 = -[ReachabilityCallbacker initWithListener:queue:](v6, "initWithListener:queue:", v13, v5);
  v9 = (void *)a1[1];
  a1[1] = v8;

  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_10;
  }
  if (v14)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  return a1;
}

void sub_19F53863C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v15)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  *(_QWORD *)v13 = v16;

  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::VSCommon::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::VSCommon::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::VSCommon::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSCommon::Mesh::~Mesh(ggl::VSCommon::Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VSCommon::Mesh::~Mesh(ggl::VSCommon::Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::VSCommon::Mesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::VSCommon::Mesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::VSCommon::Vertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::VSCommon::Vertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VSCommon::Mesh::Mesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
      }
      ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE577990 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BE178;
  *(_QWORD *)(a1 + 16) = &unk_1E42BE198;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BCF78;
  *(_QWORD *)(a1 + 16) = &unk_1E42BCF98;
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::GlobeAtmosphere::AtmosphereMesh::~AtmosphereMesh(ggl::GlobeAtmosphere::AtmosphereMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::GlobeAtmosphere::AtmosphereMesh::~AtmosphereMesh(ggl::GlobeAtmosphere::AtmosphereMesh *this)
{
  ggl::Mesh::~Mesh((ggl::GlobeAtmosphere::AtmosphereMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::GlobeAtmosphere::AtmosphereMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::GlobeAtmosphere::BasePipelineState::BasePipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::GlobeAtmosphereShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GlobeAtmosphere::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE44D88 = 1;
          }
          ggl::GlobeAtmosphere::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57C5B8 = &ggl::GlobeAtmosphere::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE57C5C0 = 0;
          if ((v97 & 1) == 0
          {
            ggl::GlobeAtmosphere::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::GlobeAtmosphere::AtmosphereConstants::reflection(void)::reflection;
            unk_1EE57C5F0 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          }
          qword_1EE57C5C8 = (uint64_t)&ggl::GlobeAtmosphere::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EE57C5D0 = xmmword_19FFB35C0;
        }
      }
      ggl::GlobeAtmosphere::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlobeAtmosphere::BasePipelineSetup::typedReflection(void)::ref;
      ggl::GlobeAtmosphereShader::typedReflection(v92);
      qword_1ECE2F640 = (uint64_t)&ggl::GlobeAtmosphereShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::GlobeAtmosphere::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57C660 = 0;
        qword_1EE57C668 = (uint64_t)"";
        dword_1EE57C670 = 0;
        qword_1EE57C678 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57C680 = 1;
      }
      qword_1ECE2F648 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F650 = 1;
      qword_1ECE2F658 = 0;
      unk_1ECE2F660 = 0;
      qword_1ECE2F668 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F670 = 0;
      if ((v95 & 1) == 0
      {
        ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57C600 = 0;
        qword_1EE57C608 = (uint64_t)"constants";
        dword_1EE57C610 = 3;
        qword_1EE57C618 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantConstantsBinding(void)::reflection;
        unk_1EE57C620 = xmmword_19FFB37E0;
        qword_1EE57C630 = 1;
        unk_1EE57C638 = "lightConfig";
        dword_1EE57C640 = 3;
        qword_1EE57C648 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantLightConfigBinding(void)::reflection;
        unk_1EE57C650 = 4;
      }
      qword_1ECE2F678 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE2F680 = 2;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::GlobeAtmosphere::BasePipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B71E8;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::GlobeAtmosphere::BasePipelineSetup::~BasePipelineSetup(ggl::GlobeAtmosphere::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::GlobeAtmosphere::BasePipelineSetup::constantDataIsEnabled(ggl::GlobeAtmosphere::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::GlobeAtmosphere::BasePipelineSetup::textureIsEnabled(ggl::GlobeAtmosphere::BasePipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::GlobeAtmosphere::BasePipelineSetup::BasePipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42B71B8;
  return a1;
}

void sub_19F539B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F539BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F539C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::TextIconLabelPart::~TextIconLabelPart(md::TextIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::IconLabelPart::~IconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::TextIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, this, 768);
}

uint64_t md::IconLabelPart::stagingModelMatrix(md::IconLabelPart *this)
{
  return *((_QWORD *)this + 92);
}

uint64_t md::IconLabelPart::modelMatrix(md::IconLabelPart *this)
{
  return *((_QWORD *)this + 91);
}

uint64_t md::IconLabelPart::partType(md::IconLabelPart *this)
{
  return 6;
}

uint64_t md::TextIconLabelPart::debugString@<X0>(md::TextIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  unint64_t v26;
  void *__p[2];
  __int128 v28;
  int v29;
  uint64_t v30[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v30[0] = MEMORY[0x1E0DE4FE0] + 64;
  v22 = v7;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, &v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v4 + 24;
  v30[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v23 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  v29 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"TextIcon(", 9);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 32))(*((_QWORD *)this + 80));
  if (v11)
    v12 = (const char *)v11;
  else
    v12 = "";
  v13 = strlen(v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)")", 1);
  if ((v29 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v15 = v26;
    }
    v16 = (const void **)&v25;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v14 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    v16 = (const void **)v24;
    v15 = v24[2];
  }
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_18;
  }
  a2[23] = v14;
  if (v14)
LABEL_18:
    memmove(a2, v17, v14);
LABEL_19:
  a2[v14] = 0;
  v22 = *v6;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v6[3];
  v23 = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v30);
}

void sub_19F53A03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19F53A064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::ImageLabelPart::setLayerOffset(uint64_t this, char a2)
{
  *(_BYTE *)(this + 633) = a2;
  return this;
}

uint64_t md::ImageLabelPart::publicName(md::ImageLabelPart *this)
{
  return 0;
}

float md::TextIconLabelPart::styleBrightness(md::TextIconLabelPart *this, const md::LabelStyle *a2)
{
  return *((float *)a2 + 27);
}

void karo::media::DigitalTerrainModel::~DigitalTerrainModel(karo::media::DigitalTerrainModel *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C3548;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::media::Image::~Image((karo::media::DigitalTerrainModel *)((char *)this + 8));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C3548;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::media::Image::~Image((karo::media::DigitalTerrainModel *)((char *)this + 8));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelRenderLayer::prune(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;

  v1 = result;
  v2 = (uint64_t *)(result + 56);
  *(_DWORD *)(result + 160) = 0;
  v3 = *(uint64_t **)(result + 112);
  if (v3)
  {
    v4 = 0;
    do
    {
      while (!*((_BYTE *)v3 + 64))
      {
        v8 = v3[6];
        if (!v8 || *(_QWORD *)(v8 + 8) == -1)
          break;
        v3[7] = (uint64_t)v2;
        v3 = (uint64_t *)*v3;
        ++v4;
        if (!v3)
          goto LABEL_15;
      }
      v5 = (uint64_t *)*v3;
      result = std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v16, (_QWORD *)(v1 + 88), v3);
      v6 = v16;
      if (v16)
      {
        if (v18)
        {
          v7 = *(std::__shared_weak_count **)(v16 + 48);
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
        }
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v17 + 40))(*v17, v6, 72);
      }
      v3 = v5;
    }
    while (v5);
  }
  else
  {
    v4 = 0;
  }
LABEL_15:
  *(_DWORD *)(v1 + 156) = v4;
  if (*(_QWORD *)(v1 + 72))
  {
    v9 = *(_QWORD *)(v1 + 56);
    v10 = *(uint64_t **)(v1 + 64);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(v1 + 72) = 0;
    if (v10 != v2)
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        v13 = (std::__shared_weak_count *)v10[6];
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v1 + 80) + 40))(*(_QWORD *)(v1 + 80), v10, 56);
        v10 = v12;
      }
      while (v12 != v2);
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 3)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[5];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 4;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear(uint64_t result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v1 = (uint64_t *)result;
  if (*(_QWORD *)(result + 72))
  {
    v2 = *(_QWORD **)(result + 56);
    if (v2)
    {
      do
      {
        v8 = (_QWORD *)*v2;
        v9 = (std::__shared_weak_count *)v2[6];
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v1[8] + 40))(v1[8], v2, 72);
        v2 = v8;
      }
      while (v8);
    }
    v1[7] = 0;
    v3 = v1[5];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[4] + 8 * i) = 0;
    }
    v1[9] = 0;
  }
  if (v1[2])
  {
    v5 = *v1;
    v6 = (uint64_t *)v1[1];
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    v1[2] = 0;
    if (v6 != v1)
    {
      do
      {
        v10 = (uint64_t *)v6[1];
        v11 = (std::__shared_weak_count *)v6[6];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v6, 56);
        v6 = v10;
      }
      while (v10 != v1);
    }
  }
  *(uint64_t *)((char *)v1 + 100) = 0;
  *(uint64_t *)((char *)v1 + 92) = 0;
  return result;
}

uint64_t std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(std::__shared_weak_count **)(result + 264);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)v1[26];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)v1[24];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(v1 + 3));
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::LabelTileSet::~LabelTileSet(md::LabelTileSet *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v29)
      return;
  }
  else
  {
LABEL_45:
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v29)
      return;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

uint64_t *std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::find<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = *((unsigned __int16 *)a2 + 12);
  v11 = ((v9 << 6) + v10 + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = ((v9 << 6) + v10 + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(_QWORD *)&v2)
      v13 = v11 % *(_QWORD *)&v2;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v2 - 1);
  }
  v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v18 = result[1];
        if (v11 == v18)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && *((unsigned __int16 *)result + 20) == v10)
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = result[1];
      if (v11 == v17)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && *((unsigned __int16 *)result + 20) == v10)
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(_QWORD *)&v2)
          v17 %= *(_QWORD *)&v2;
        if (v17 != v13)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::__emplace_unique_key_args<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  v13 = *((unsigned __int16 *)a2 + 12);
  v14 = ((v12 << 6) + v13 + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
  v15 = *((_QWORD *)a1 + 1);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = ((v12 << 6) + v13 + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
      if (v14 >= v15)
        v3 = v14 % v15;
    }
    else
    {
      v3 = v14 & (v15 - 1);
    }
    v17 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
      v18 = *v17;
      if (v18)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v18[1];
            if (v20 == v14)
            {
              if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v18 + 20) == __PAIR64__(v10, v9)
                && *((unsigned __int16 *)v18 + 20) == v13)
              {
                return;
              }
            }
            else if ((v20 & (v15 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v18 = (uint64_t *)*v18;
            if (!v18)
              goto LABEL_27;
          }
        }
        do
        {
          v19 = v18[1];
          if (v19 == v14)
          {
            if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v18 + 20) == __PAIR64__(v10, v9)
              && *((unsigned __int16 *)v18 + 20) == v13)
            {
              return;
            }
          }
          else
          {
            if (v19 >= v15)
              v19 %= v15;
            if (v19 != v3)
              break;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_27:
  v21 = operator new(0x30uLL);
  *v21 = 0;
  v21[1] = v14;
  *((_WORD *)v21 + 8) = *(_WORD *)a3;
  *(_QWORD *)((char *)v21 + 20) = *(_QWORD *)(a3 + 4);
  *((_WORD *)v21 + 20) = *(_WORD *)(a3 + 24);
  v22 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v23 = a1[8];
  if (!v15 || (float)(v23 * (float)v15) < v22)
  {
    v24 = 1;
    if (v15 >= 3)
      v24 = (v15 & (v15 - 1)) != 0;
    v25 = v24 | (2 * v15);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v15 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v15)
    {
      if (prime >= v15)
        goto LABEL_64;
      v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v15 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime >= v15)
      {
        v15 = *((_QWORD *)a1 + 1);
LABEL_64:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15)
            v3 = v14 % v15;
          else
            v3 = v14;
        }
        else
        {
          v3 = (v15 - 1) & v14;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        v48 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v48)
          operator delete(v48);
        v15 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30++) = 0;
    while (prime != v30);
    v32 = (uint64_t *)(a1 + 4);
    v31 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v31)
    {
LABEL_63:
      v15 = prime;
      goto LABEL_64;
    }
    v33 = v31[1];
    v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v35 = v33 & v34;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v32;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v37 = i[1] & v34;
        if (v37 == v35)
        {
          v31 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *v31 = *i;
          v38 = 8 * v37;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v38);
          **(_QWORD **)(*(_QWORD *)a1 + v38) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v31;
          v31 = i;
          v35 = v37;
        }
      }
      goto LABEL_63;
    }
    if (v33 >= prime)
      v33 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v32;
    v42 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_63;
    while (1)
    {
      v44 = v42[1];
      if (v44 >= prime)
        v44 %= prime;
      if (v44 != v33)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v31;
          goto LABEL_68;
        }
        *v31 = *v42;
        v43 = 8 * v44;
        *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
        **(_QWORD **)(*(_QWORD *)a1 + v43) = v42;
        v42 = v31;
      }
      v44 = v33;
LABEL_68:
      v31 = v42;
      v42 = (_QWORD *)*v42;
      v33 = v44;
      if (!v42)
        goto LABEL_63;
    }
  }
LABEL_77:
  v45 = *(_QWORD **)a1;
  v46 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v46)
  {
    *v21 = *v46;
LABEL_85:
    *v46 = v21;
    goto LABEL_86;
  }
  *v21 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v21;
  v45[v3] = a1 + 4;
  if (*v21)
  {
    v47 = *(_QWORD *)(*v21 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v47 >= v15)
        v47 %= v15;
    }
    else
    {
      v47 &= v15 - 1;
    }
    v46 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_85;
  }
LABEL_86:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F53AF84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile&,std::unique_ptr<md::LabelMapTileSourceData>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  void *v49;

  v8 = *a2;
  v9 = a2[1];
  v10 = (v9
       + ((v8 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v8 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v8 - 0x61C8864680B583EBLL);
  v11 = *((int *)a2 + 1);
  v12 = *((int *)a2 + 2);
  v13 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  v14 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
  v15 = a1[1];
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v4 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
      if (v14 >= v15)
        v4 = v14 % v15;
    }
    else
    {
      v4 = v14 & (v15 - 1);
    }
    v17 = *(void ***)(*a1 + 8 * v4);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v18[1];
            if (v20 == v14)
            {
              if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v9, v8)
                && *(_QWORD *)((char *)v18 + 20) == __PAIR64__(v12, v11))
              {
                return v18;
              }
            }
            else if ((v20 & (v15 - 1)) != v4)
            {
              goto LABEL_25;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              goto LABEL_25;
          }
        }
        do
        {
          v19 = v18[1];
          if (v19 == v14)
          {
            if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v9, v8)
              && *(_QWORD *)((char *)v18 + 20) == __PAIR64__(v12, v11))
            {
              return v18;
            }
          }
          else
          {
            if (v19 >= v15)
              v19 %= v15;
            if (v19 != v4)
              break;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_25:
  v21 = a1 + 2;
  v18 = operator new(0x30uLL);
  *v18 = 0;
  v18[1] = v14;
  *((_WORD *)v18 + 8) = *(_WORD *)a3;
  *(_QWORD *)((char *)v18 + 20) = *(_QWORD *)(a3 + 4);
  v22 = *a4;
  *a4 = 0;
  v18[5] = v22;
  v23 = (float)(unint64_t)(a1[3] + 1);
  v24 = *((float *)a1 + 8);
  if (!v15 || (float)(v24 * (float)v15) < v23)
  {
    v25 = 1;
    if (v15 >= 3)
      v25 = (v15 & (v15 - 1)) != 0;
    v26 = v25 | (2 * v15);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v15 = a1[1];
    }
    if (prime <= v15)
    {
      if (prime >= v15)
        goto LABEL_62;
      v39 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v15 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime >= v15)
      {
        v15 = a1[1];
LABEL_62:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15)
            v4 = v14 % v15;
          else
            v4 = v14;
        }
        else
        {
          v4 = (v15 - 1) & v14;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        v49 = (void *)*a1;
        *a1 = 0;
        if (v49)
          operator delete(v49);
        v15 = 0;
        a1[1] = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v29 = operator new(8 * prime);
    v30 = (void *)*a1;
    *a1 = (uint64_t)v29;
    if (v30)
      operator delete(v30);
    v31 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v31++) = 0;
    while (prime != v31);
    v32 = (_QWORD *)*v21;
    if (!*v21)
    {
LABEL_61:
      v15 = prime;
      goto LABEL_62;
    }
    v33 = v32[1];
    v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v35 = v33 & v34;
      *(_QWORD *)(*a1 + 8 * v35) = v21;
      for (i = (_QWORD *)*v32; *v32; i = (_QWORD *)*v32)
      {
        v37 = i[1] & v34;
        if (v37 == v35)
        {
          v32 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v37))
        {
          *v32 = *i;
          v38 = 8 * v37;
          *i = **(_QWORD **)(*a1 + v38);
          **(_QWORD **)(*a1 + v38) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v37) = v32;
          v32 = i;
          v35 = v37;
        }
      }
      goto LABEL_61;
    }
    if (v33 >= prime)
      v33 %= prime;
    *(_QWORD *)(*a1 + 8 * v33) = v21;
    v42 = (_QWORD *)*v32;
    if (!*v32)
      goto LABEL_61;
    while (1)
    {
      v44 = v42[1];
      if (v44 >= prime)
        v44 %= prime;
      if (v44 != v33)
      {
        if (!*(_QWORD *)(*a1 + 8 * v44))
        {
          *(_QWORD *)(*a1 + 8 * v44) = v32;
          goto LABEL_66;
        }
        *v32 = *v42;
        v43 = 8 * v44;
        *v42 = **(_QWORD **)(*a1 + v43);
        **(_QWORD **)(*a1 + v43) = v42;
        v42 = v32;
      }
      v44 = v33;
LABEL_66:
      v32 = v42;
      v42 = (_QWORD *)*v42;
      v33 = v44;
      if (!v42)
        goto LABEL_61;
    }
  }
LABEL_75:
  v45 = *a1;
  v46 = *(_QWORD **)(*a1 + 8 * v4);
  if (v46)
  {
    *v18 = *v46;
LABEL_83:
    *v46 = v18;
    goto LABEL_84;
  }
  *v18 = *v21;
  *v21 = v18;
  *(_QWORD *)(v45 + 8 * v4) = v21;
  if (*v18)
  {
    v47 = *(_QWORD *)(*v18 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v47 >= v15)
        v47 %= v15;
    }
    else
    {
      v47 &= v15 - 1;
    }
    v46 = (_QWORD *)(*a1 + 8 * v47);
    goto LABEL_83;
  }
LABEL_84:
  ++a1[3];
  return v18;
}

void sub_19F53B4B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[5];
      v2[5] = 0;
      if (v3)
        std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v3);
    }
    operator delete(v2);
  }
  return a1;
}

void std::allocate_shared[abi:nn180100]<md::StandardLabelMapTile,std::allocator<md::StandardLabelMapTile>,geo::QuadTile const&,void>(md::LabelMapTile **a1, const QuadTile *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  md::LabelMapTile *v6;
  std::__shared_weak_count *shared_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x220uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC5F0;
  v6 = md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v4[1], a2);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E429A570;
  LODWORD(v4[21].__shared_weak_owners_) = 0;
  v4[22].__shared_owners_ = 0;
  v4[22].__vftable = 0;
  *a1 = v6;
  a1[1] = (md::LabelMapTile *)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t std::optional<std::shared_ptr<md::StandardLabelMapTile>>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 24);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 32);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 72);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::StandardGlobeLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD2A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StandardGlobeLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD2A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::StandardGlobeLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::FlyoverLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FlyoverLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::FlyoverLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::StandardLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StandardLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::StandardLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD538;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD4F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD4F0;
  a2[1] = v2;
  return result;
}

uint64_t *md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::~LabelCachingStore(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = (_QWORD *)a1[7];
  if (v2)
  {
    do
    {
      v8 = (_QWORD *)*v2;
      v9 = (std::__shared_weak_count *)v2[6];
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[8] + 40))(a1[8], v2, 72);
      v2 = v8;
    }
    while (v8);
  }
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[6] + 40))(a1[6], v3, 8 * a1[5]);
  if (a1[2])
  {
    v4 = *a1;
    v5 = (uint64_t *)a1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != a1)
    {
      do
      {
        v10 = (uint64_t *)v5[1];
        v11 = (std::__shared_weak_count *)v5[6];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v5, 56);
        v5 = v10;
      }
      while (v10 != a1);
    }
  }
  return a1;
}

void md::ContourLineLabelFeature::~ContourLineLabelFeature(md::ContourLineLabelFeature *this)
{
  md::LineLabelFeature::~LineLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ContourLineLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  int v43;
  float v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v5 = *((_QWORD *)a1 + 29);
  if (!v5)
    goto LABEL_12;
  v11 = *(_DWORD *)(a3 + 48);
  v12 = (_QWORD *)((char *)a1 + 232);
  do
  {
    v13 = *(_DWORD *)(v5 + 32);
    v14 = v13 >= v11;
    if (v13 >= v11)
      v15 = (uint64_t *)v5;
    else
      v15 = (uint64_t *)(v5 + 8);
    if (v14)
      v12 = (_QWORD *)v5;
    v5 = *v15;
  }
  while (*v15);
  if (v12 == (_QWORD *)((char *)a1 + 232) || v11 < *((_DWORD *)v12 + 8))
  {
LABEL_12:
    v16 = 0;
    v62 = 0;
    v63 = 0;
    return v16;
  }
  v18 = v12[5];
  v19 = (std::__shared_weak_count *)v12[6];
  v62 = v18;
  v63 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (!v18 || *(float *)(a4 + 236) == 0.0 || *((_QWORD *)a1 + 48) == *((_QWORD *)a1 + 49))
  {
    v16 = 0;
    if (!v19)
      return v16;
    goto LABEL_75;
  }
  v22 = *(unsigned __int8 *)(a3 + 404);
  v23 = *((unsigned __int8 *)a1 + 448);
  v24 = *(_QWORD *)(a4 + 280);
  if (v24)
  {
    if (vabds_f32(*(float *)(v24 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a4, v24, 0);
      v24 = *(_QWORD *)(a4 + 280);
    }
  }
  else
  {
    v24 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(_QWORD *)(a4 + 280) = v24;
  }
  v25 = *(_QWORD *)v24;
  v26 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
  v27 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
  v28 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  if (v26 > 0x6DB6DB6DB6DB6DB7 * ((v28 - v27) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    v27 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
    v28 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v60, v27, v28, v23, v25 + 72);
  v29 = v60;
  if (v60)
  {
    v30 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v30->__shared_owners_ = 0;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v31 = md::LabelText::LabelText((uint64_t)&v30[1], v29, (uint64_t)v61, v22);
    v58 = v31;
    v59 = v30;
    v32 = *((_QWORD *)a1 + 24);
    if (v22 >= 0x17)
      v33 = 23;
    else
      v33 = v22;
    v34 = atomic_load((unsigned __int8 *)(v32 + 224 + v33));
    if (v34 == 254)
    {
      if (*(_BYTE *)(v32 + 289))
        v35 = 24;
      else
        v35 = 5;
      v36 = *(unsigned __int8 **)(v32 + 128);
      v37 = *(_QWORD *)(v32 + 136) - (_QWORD)v36;
      if (v37)
      {
        v38 = 0;
        v39 = v37 / 112;
        if (v39 <= 1)
          v40 = 1;
        else
          v40 = v39;
        v34 = -1;
        v41 = 1000.0;
        while (1)
        {
          v42 = *v36;
          v36 += 112;
          v43 = v33 - v42;
          if ((_DWORD)v33 == v42)
            break;
          if (v43 >= 0)
            v31 = v43;
          else
            v31 = -v43;
          if (v31 <= v35)
          {
            v44 = (float)v43;
            if (v43 < 0)
              v44 = (float)v43 * -0.8;
            if (v44 < v41)
              v34 = v38;
            v41 = fminf(v44, v41);
          }
          if (v40 == ++v38)
            goto LABEL_56;
        }
        v34 = v38;
      }
      else
      {
        v34 = -1;
      }
LABEL_56:
      atomic_store(v34, (unsigned __int8 *)(v32 + 224 + v33));
    }
    else
    {
      v34 = (char)v34;
    }
    if (v34 < 0 || ((v45 = *(_QWORD *)(v32 + 128), v58) ? (v46 = v45 == 0) : (v46 = 1), v46))
    {
      v16 = 0;
    }
    else
    {
      v47 = mdm::Allocator::instance((mdm::Allocator *)v31);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, 1488, 8);
      v48 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 264))(a1);
      md::CurvedTextLabelPart::CurvedTextLabelPart(v16, v48, &v58, a2, a3, a4, &v62, (uint64_t)&v57, 0.0, a5, 0);
    }
    v49 = v59;
    if (v59)
    {
      v50 = (unint64_t *)&v59->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v52 = v61;
  if (v61)
  {
    v53 = (unint64_t *)&v61->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v19 = v63;
  if (v63)
  {
LABEL_75:
    v55 = (unint64_t *)&v19->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v16;
}

void sub_19F53BE6C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v5 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v3, 1488);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::ContourLineLabelFeature::updateText(md::ContourLineLabelFeature *this, const void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  size_t v11;
  __int128 *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23[8];
  uint64_t (**v24)();
  uint64_t v25;
  uint64_t v26;
  __int128 __dst;
  uint64_t v28;
  uint64_t v29;

  v3 = *((_QWORD *)this + 48);
  for (i = *((_QWORD *)this + 49); i != v3; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), *(_QWORD *)(i - 32), *(_QWORD *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), *(_QWORD *)(i - 64), *(_QWORD *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((_QWORD *)this + 49) = v3;
  __dst = 0uLL;
  v28 = 0;
  {
    v14 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v14, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  {
    v15 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  v24 = &off_1E42B5470;
  v25 = 0;
  v26 = 0;
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = objc_msgSend(v8, "usesMetricSystem");

  md::LabelValueFormatter::formatElevation(&v16, v23, 1u, 0x100000000, 0, *((float *)this + 113));
  v9 = SHIBYTE(v17);
  v10 = (void *)v16;
  if (v17 >= 0)
    v11 = HIBYTE(v17);
  else
    v11 = *((_QWORD *)&v16 + 1);
  if (v17 >= 0)
    v12 = &v16;
  else
    v12 = (__int128 *)v16;
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&__dst, v12, v11);
  if (v9 < 0)
    operator delete(v10);
  v18 = v29;
  if (SHIBYTE(v28) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v16, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v16 = __dst;
    v17 = v28;
  }
  v21 = 0;
  v22 = v7;
  v19 = 0;
  v20 = 0;
  result = md::LineLabelFeature::textIndexForText((uint64_t *)this, (uint64_t)&v16);
  *((_BYTE *)this + 448) = result;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      return result;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v29 + 40))(v29, __dst, v28 & 0x7FFFFFFFFFFFFFFFLL);
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 40))(v18, v16, v17 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v28) < 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v29 + 40))(v29, __dst, v28 & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

void sub_19F53C148(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 - 56) + 40))(*(_QWORD *)(v1 - 56), *(_QWORD *)(v1 - 80), *(_QWORD *)(v1 - 64) & 0x7FFFFFFFFFFFFFFFLL);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::ContourLineLabelFeature::labelFeatureType(md::ContourLineLabelFeature *this)
{
  return 4;
}

uint64_t md::ContourLineLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **v17;
  uint64_t v18;
  char v19;
  size_t v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  v34 = v12;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v14, &v35);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v34 = v10 + 24;
  v42[0] = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  v35 = MEMORY[0x1E0DE4FB8] + 16;
  v39 = 0u;
  v40 = 0u;
  v41 = 16;
  {
    v28 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v28, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v31 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v30) = 11;
  strcpy((char *)v29, "ContourLine");
  md::LineLabelFeature::debugRoadString(__p, a1, a2, a3, a4, (uint64_t)v29);
  if ((v33 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v33 & 0x80u) == 0)
    v18 = v33;
  else
    v18 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)v17, v18);
  if (((char)v33 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_14:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v29[0], v30 & 0x7FFFFFFFFFFFFFFFLL);
    v19 = v41;
    if ((v41 & 0x10) == 0)
      goto LABEL_11;
LABEL_15:
    v21 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1) < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v21 = v38;
    }
    v22 = (const void **)&v37;
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v30) < 0)
    goto LABEL_14;
LABEL_10:
  v19 = v41;
  if ((v41 & 0x10) != 0)
    goto LABEL_15;
LABEL_11:
  if ((v19 & 8) == 0)
  {
    v20 = 0;
    a5[23] = 0;
    goto LABEL_27;
  }
  v22 = (const void **)v36;
  v21 = v36[2];
LABEL_19:
  v23 = *v22;
  v20 = v21 - (_QWORD)*v22;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    *((_QWORD *)a5 + 1) = v20;
    *((_QWORD *)a5 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)a5 = v26;
    a5 = v26;
    goto LABEL_26;
  }
  a5[23] = v20;
  if (v20)
LABEL_26:
    memmove(a5, v23, v20);
LABEL_27:
  a5[v20] = 0;
  v34 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v35 = v15 + 16;
  if (SBYTE7(v40) < 0)
    operator delete((void *)v39);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v42);
}

void sub_19F53C4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  if (SHIBYTE(a12) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a13 + 40))(a13, a10, a12 & 0x7FFFFFFFFFFFFFFFLL);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t md::ContourLineLabelFeature::textIndexForFeature()
{
  return 0;
}

uint64_t md::ContourLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  return md::LineLabelFeature::styleIndexForAttributes(a1, (uint64_t *)(a2 + 32));
}

uint64_t `non-virtual thunk to'md::ContourLineLabelFeature::textIndexForFeature()
{
  return 0;
}

uint64_t `non-virtual thunk to'md::ContourLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  return md::LineLabelFeature::styleIndexForAttributes(a1 - 440, (uint64_t *)(a2 + 32));
}

uint64_t md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

void std::__shared_ptr_emplace<md::LabelText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::RoadLayerDataSource::~RoadLayerDataSource(md::RoadLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E4297950;
  *((_QWORD *)this + 97) = &off_1E42B4D50;

  *(_QWORD *)this = off_1E429DEE0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E4297950;
  *((_QWORD *)this + 97) = &off_1E42B4D50;

  *(_QWORD *)this = off_1E429DEE0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RoadLayerDataSource::useOptionalResources(md::RoadLayerDataSource *this)
{
  return *((unsigned __int8 *)this + 801);
}

uint64_t md::RoadLayerDataSource::shouldFilterFeature()
{
  return 0;
}

uint64_t __Block_byref_object_copy__2020(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__2021(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__5_2022(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__6_2023(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__7_2024(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__8_2025(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t __Block_byref_object_copy__9_2026(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__10_2027(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void `anonymous namespace'::addContourLinesToBatches(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  gss::Allocator *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  _BOOL4 v23;
  NSObject *v25;
  unsigned int *v26;
  uint64_t *v27;
  unsigned int v28;
  char hasValueForKeyAtEnd;
  float v30;
  _BOOL4 v31;
  char v33;
  float v34;
  _BOOL4 v35;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v64;
  unsigned __int8 v65[12];
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  __int128 v72;
  uint8_t buf[32];

  v4 = *a3;
  v62 = a3[1];
  if (*a3 != v62)
  {
    v7 = a3[4];
    v8 = *(_QWORD *)(v7 + 8);
    v61 = *(_QWORD *)(v7 + 32);
    while (1)
    {
      v9 = *a4;
      md::createFeatureAttributeSet((gss::Allocator *)&v67, (uint64_t *)(v4 + 32));
      *(_QWORD *)&buf[7] = 0;
      *(_QWORD *)buf = 0;
      buf[15] = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v72, v9, (gss::FeatureAttributeSet *)&v67, (gss::QueryOverrides *)buf);
      if (buf[14])
        v11 = 1;
      else
        v11 = *(_QWORD *)buf == 0;
      if (!v11)
      {
        v12 = gss::Allocator::instance(v10);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
      }
      if (v67)
      {
        v68 = (std::__shared_weak_count *)v67;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 40))(v70, v67, v69 - v67);
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      v13 = v72;
      *(_OWORD *)buf = v72;
      if (*((_QWORD *)&v72 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        v68 = v14;
        do
          v17 = __ldxr(v15);
        while (__stxr(v17 + 1, v15));
      }
      else
      {
        v68 = 0;
      }
      v67 = v13;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      if (v13)
        LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v69);
      v71 = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        LODWORD(v13) = v71;
      }
      if (!(_DWORD)v13)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v25 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_DEBUG, "Road Layer Data Source: failed to resolve style for contours (assuming solid)", buf, 2u);
        }

        v26 = (unsigned int *)(v4 + 20);
        if (!*(_DWORD *)(v4 + 20))
          goto LABEL_96;
        v27 = (uint64_t *)(v61 + 16 * *(unsigned int *)(v4 + 16));
LABEL_86:
        v50 = 0;
        do
        {
          v51 = *v27;
          v52 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
          v64 = v72;
          if (*((_QWORD *)&v72 + 1))
          {
            v53 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          v55 = v27[1];
          buf[0] = 0;
          v65[0] = 0;
          if (v52)
          {
            v56 = (unint64_t *)&v52->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          ++v50;
          v27 += 2;
        }
        while (v50 < *v26);
        goto LABEL_96;
      }
      v20 = *(_QWORD *)(v67 + 24);
      v21 = *(float **)v20;
      if (!*(_QWORD *)v20)
        break;
      v22 = *v21;
      v23 = *v21 == 1.0;
      if (!*(_BYTE *)(v20 + 10))
        goto LABEL_42;
      if (v22 == 0.0 || v22 == 1.0)
        goto LABEL_42;
LABEL_43:
      hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v67 + 24), 0x12Cu, 0);
      v28 = 1;
      if ((hasValueForKeyAtEnd & 1) != 0)
        goto LABEL_74;
LABEL_44:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v20, 0x12Cu, v28) & 1) != 0)
        goto LABEL_57;
      if (!v21)
      {
        v31 = 0;
LABEL_54:
        v28 = *(unsigned __int8 *)(v20 + v31 + 11);
        if (v28 != 2)
          goto LABEL_56;
        goto LABEL_55;
      }
      v30 = *v21;
      v31 = *v21 == 1.0;
      if (!*(_BYTE *)(v20 + 10))
        goto LABEL_54;
      if (v30 == 0.0 || v30 == 1.0)
        goto LABEL_54;
LABEL_55:
      v33 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v20, 0x12Du, 0);
      v28 = 1;
      if ((v33 & 1) != 0)
        goto LABEL_74;
LABEL_56:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v20, 0x12Du, v28) & 1) != 0)
      {
LABEL_57:
        v28 = 1;
        goto LABEL_74;
      }
      if (v21)
      {
        v34 = *v21;
        v35 = *v21 == 1.0;
        if (*(_BYTE *)(v20 + 10))
        {
          if (v34 != 0.0 && v34 != 1.0)
          {
LABEL_68:
            buf[0] = 1;
            v65[0] = 1;
            v38 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v20, 0x96u, 0, buf);
            v39 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v20, 0x96u, 1u, v65);
            if (v34 >= 1.0)
              v40 = (int *)v39;
            else
              v40 = (int *)v38;
            v41 = *v40;
            goto LABEL_73;
          }
        }
      }
      else
      {
        v35 = 0;
      }
      v37 = *(unsigned __int8 *)(v20 + v35 + 11);
      v34 = 0.0;
      if (v37 == 2)
        goto LABEL_68;
      LOBYTE(v41) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v20, 0x96u, v37, 0);
LABEL_73:
      v28 = v41 == 1;
LABEL_74:
      v26 = (unsigned int *)(v4 + 20);
      if (*(_DWORD *)(v4 + 20))
      {
        v27 = (uint64_t *)(v61 + 16 * *(unsigned int *)(v4 + 16));
        if (!v28)
          goto LABEL_86;
        v42 = 0;
        do
        {
          v43 = *v27;
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
          v66 = v72;
          if (*((_QWORD *)&v72 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = v27[1];
          buf[0] = 0;
          v65[0] = 0;
          if (v44)
          {
            v48 = (unint64_t *)&v44->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          ++v42;
          v27 += 2;
        }
        while (v42 < *v26);
      }
LABEL_96:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v67);
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v4 += 56;
      if (v4 == v62)
        return;
    }
    v23 = 0;
LABEL_42:
    v28 = *(unsigned __int8 *)(v20 + v23 + 11);
    if (v28 != 2)
      goto LABEL_44;
    goto LABEL_43;
  }
}

void sub_19F53CE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a22);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>>(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  v5 = result;
  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return result;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 56, 8);
  v15 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(result + 24) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v20 = *(float *)(v5 + 48);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    if (v24 == 1)
    {
      v24 = 2;
    }
    else if ((v24 & (v24 - 1)) != 0)
    {
      result = std::__next_prime(v24);
      v24 = result;
    }
    v25 = *(int8x8_t *)(v5 + 8);
    if (v24 > *(_QWORD *)&v25)
      goto LABEL_37;
    if (v24 < *(_QWORD *)&v25)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(_QWORD *)&v25 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v25), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v27 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v27;
      }
      if (v24 <= result)
        v24 = result;
      if (v24 < *(_QWORD *)&v25)
LABEL_37:
        result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v24);
    }
    v9 = *(_QWORD *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v28 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v28)
  {
    *(_QWORD *)v15 = *v28;
LABEL_61:
    *v28 = v15;
    goto LABEL_62;
  }
  *(_QWORD *)v15 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v15;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v15)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v28 = (unint64_t *)(*(_QWORD *)v5 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19F53D2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>::~pair(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

BOOL gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(uint64_t a1, unsigned int a2, int *a3, unsigned int a4)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int16 ***v12;
  unsigned __int16 **v13;
  unint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned __int16 v26;

  result = gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*(_QWORD *)(a1 + 16 * a4 + 16), a2, a3);
  if (result)
  {
    v9 = a1 + 16 * a4;
    if (*(_WORD *)(v9 + 56))
    {
      v10 = *(uint64_t **)(v9 + 48);
      v11 = &v10[*(unsigned __int16 *)(v9 + 56)];
      do
      {
        v12 = *(unsigned __int16 ****)(*v10 + 72);
        if (v12)
        {
          v13 = *v12;
          v14 = *((unsigned __int16 *)*v12 + 5);
          if (v14)
          {
            v15 = *v13;
            if (*((_BYTE *)v13 + 15))
            {
              if (v14 >= 0x1E)
              {
                v20 = *v13;
                v21 = v14;
                do
                {
                  v22 = v21 >> 1;
                  v23 = &v20[v21 >> 1];
                  v25 = *v23;
                  v24 = v23 + 1;
                  v21 += ~(v21 >> 1);
                  if (v25 < a2)
                    v20 = v24;
                  else
                    v21 = v22;
                }
                while (v21);
                if (v20 == &v15[v14]
                  || *v20 != a2
                  || (_DWORD)v14 == (unsigned __int16)((unint64_t)((char *)v20 - (char *)v15) >> 1))
                {
                  goto LABEL_4;
                }
              }
              else
              {
                v16 = 0;
                while (1)
                {
                  v17 = v15[v16];
                  if (v17 >= a2)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_4;
                }
                if (v17 == a2)
                  v26 = v16;
                else
                  v26 = v14;
                if ((_DWORD)v14 == v26)
                  goto LABEL_4;
              }
            }
            else
            {
              v18 = 2 * v14;
              v19 = *v13;
              while (*v19 != a2)
              {
                ++v19;
                v18 -= 2;
                if (!v18)
                {
                  v19 = &v15[v14];
                  break;
                }
              }
              if ((_DWORD)v14 == (unsigned __int16)((unint64_t)((char *)v19 - (char *)v15) >> 1))
                goto LABEL_4;
            }
            result = gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*v10, a2, a3);
            if (!result)
              return result;
          }
        }
LABEL_4:
        ++v10;
      }
      while (v10 != v11);
    }
    return 1;
  }
  return result;
}

BOOL gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(uint64_t a1, unsigned int a2, int *a3)
{
  *a3 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0, 0);
  return *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 1u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 2u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 3u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 4u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 5u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 6u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 7u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 8u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 9u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xAu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xBu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xCu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xDu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xEu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xFu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x10u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x11u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x12u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x13u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x14u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x15u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x16u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x17u, 0) == *(float *)a3;
}

void `anonymous namespace'::addPatternedRibbonTo(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  unsigned __int8 v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  BOOL v23;
  unint64_t v24;
  const float *v25;
  __int128 v26;
  float *v27;
  unint64_t v28;
  const float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  void (***v48)(_QWORD);
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  unsigned int v55;
  void (***v56)(_QWORD);
  float32x4x2_t v57;
  float32x4x3_t v58;

  v15 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v14 & 1) == 0)
  {
    v15 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v50)
    {
      v51 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v51, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v15 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v15 + 299) + 16))(*((_QWORD *)v15 + 299), 120, 8);
  v17 = v16;
  *(_OWORD *)(v16 + 49) = 0u;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_QWORD *)(v16 + 56) = a4;
  *(_QWORD *)v16 = off_1E42AF588;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  if (!a4)
  {
    *(_QWORD *)v16 = off_1E42909B0;
    v22 = (_BYTE *)(v16 + 97);
    *(_WORD *)(v16 + 96) = 0;
    v21 = (_BYTE *)(v16 + 96);
    v56 = (void (***)(_QWORD))v16;
    goto LABEL_18;
  }
  *(_QWORD *)(v16 + 88) = a4;
  {
    v52 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v52, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 12 * a4, 8);
  *(_QWORD *)(v17 + 72) = v19;
  *(_BYTE *)(v17 + 64) = 1;
  v20 = *(_QWORD *)(v17 + 88);
  *(_QWORD *)v17 = off_1E42909B0;
  *(_WORD *)(v17 + 96) = 0;
  v21 = (_BYTE *)(v17 + 96);
  v22 = (_BYTE *)(v17 + 97);
  v56 = (void (***)(_QWORD))v17;
  if (v20)
  {
    if (v20 < 8 || (v19 < a5 + 8 * v20 ? (v23 = v19 + 12 * v20 > a5) : (v23 = 0), v23))
    {
      v24 = 0;
    }
    else
    {
      v24 = v20 & 0xFFFFFFFFFFFFFFF8;
      v25 = (const float *)(a5 + 32);
      v26 = 0uLL;
      v27 = (float *)v19;
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v29 = v25 - 8;
        v57 = vld2q_f32(v29);
        *(float32x4x2_t *)v58.val[0].f32 = vld2q_f32(v25);
        v58.val[2] = 0uLL;
        v30 = v27 + 24;
        vst3q_f32(v27, *(float32x4x3_t *)(&v26 - 2));
        v31 = v27 + 12;
        vst3q_f32(v31, v58);
        v25 += 16;
        v27 = v30;
        v28 -= 8;
      }
      while (v28);
      if (v20 == v24)
        goto LABEL_18;
    }
    v32 = v20 - v24;
    v33 = (_DWORD *)(12 * v24 + v19 + 8);
    v34 = (uint64_t *)(a5 + 8 * v24);
    do
    {
      v35 = *v34++;
      *((_QWORD *)v33 - 1) = v35;
      *v33 = 0;
      v33 += 3;
      --v32;
    }
    while (v32);
  }
LABEL_18:
  v36 = *a6;
  *v21 = v36;
  if (v36)
  {
    *(_DWORD *)(v17 + 100) = *((_DWORD *)a6 + 1);
    *(_DWORD *)(v17 + 104) = *((_DWORD *)a6 + 2);
  }
  v37 = *a7;
  *v22 = v37;
  if (v37)
  {
    *(_DWORD *)(v17 + 108) = *((_DWORD *)a7 + 1);
    *(_DWORD *)(v17 + 112) = *((_DWORD *)a7 + 2);
  }
  v38 = *a2;
  v39 = (std::__shared_weak_count *)a2[1];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
  }
  v54[0] = v38;
  v54[1] = v39;
  v55 = a3;
  v42 = std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PatternedBatchKey,std::piecewise_construct_t const&,std::tuple<md::PatternedBatchKey const&>,std::tuple<>>(a1, v38, a3, (uint64_t)v54);
  v43 = v42;
  v44 = (uint64_t *)v42[6];
  if ((unint64_t)v44 >= v42[7])
  {
    v45 = std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>((uint64_t)(v42 + 5), (uint64_t *)&v56);
  }
  else
  {
    if (v44)
    {
      v56 = 0;
      *v44 = v17;
    }
    v45 = v44 + 1;
  }
  v43[6] = v45;
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    (**v48)(v48);
    if ((v49 & 1) == 0)
    {
      {
        v53 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v48, 120);
  }
}

void sub_19F53DC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (***a12)(_QWORD))
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>::~unique_ptr[abi:nn180100](&a12);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::addRoadRibbonTo(uint64_t *a1, uint64_t *a2, int a3, unint64_t a4, unint64_t a5, char a6, char a7, char a8, unsigned __int8 *a9, unsigned __int8 *a10)
{
  unsigned __int8 v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  void (***v41)(_QWORD);
  unsigned __int8 v42;
  BOOL v43;
  uint64_t v44;
  const float *v45;
  __int128 v46;
  float *v47;
  unint64_t v48;
  const float *v49;
  float *v50;
  float *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];
  int v57;
  char v58;
  void (***v59)(_QWORD);
  float32x4x2_t v60;
  float32x4x3_t v61;

  v19 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v18 & 1) == 0)
  {
    v19 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v52)
    {
      v53 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v19 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v19 + 299) + 16))(*((_QWORD *)v19 + 299), 120, 8);
  v21 = v20;
  *(_OWORD *)(v20 + 49) = 0u;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_QWORD *)(v20 + 56) = a4;
  *(_QWORD *)v20 = off_1E42AF588;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *(_QWORD *)(v20 + 72) = 0;
  if (a4)
  {
    *(_QWORD *)(v20 + 88) = a4;
    {
      v54 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v54, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v23 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 12 * a4, 8);
    *(_QWORD *)(v21 + 72) = v23;
    *(_BYTE *)(v21 + 64) = 1;
  }
  else
  {
    v23 = 0;
  }
  *(_QWORD *)v21 = off_1E428BC18;
  *(_WORD *)(v21 + 98) = 0;
  v59 = (void (***)(_QWORD))v21;
  *(_BYTE *)(v21 + 96) = a6;
  *(_BYTE *)(v21 + 97) = a7;
  *(_QWORD *)(v21 + 88) = a4;
  if (a4)
  {
    if (a4 <= 0x1B)
      goto LABEL_8;
    v25 = 0;
    v24 = 0;
    v43 = !is_mul_ok(a4 - 1, 0xCuLL);
    v44 = 12 * (a4 - 1);
    if (v23 + v44 < v23
      || v23 + 8 + v44 < v23 + 8
      || (_DWORD)a4 == 0x100000000
      || (a4 - 1) >> 32
      || v23 + 4 + v44 < v23 + 4
      || v43)
    {
      goto LABEL_9;
    }
    if (v23 < a5 + 8 * a4 && v23 + 12 * a4 > a5)
    {
LABEL_8:
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v24 = a4 & 0xFFFFFFFFFFFFFFF8;
      v45 = (const float *)(a5 + 32);
      v46 = 0uLL;
      v47 = (float *)v23;
      v48 = a4 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v49 = v45 - 8;
        v60 = vld2q_f32(v49);
        *(float32x4x2_t *)v61.val[0].f32 = vld2q_f32(v45);
        v61.val[2] = 0uLL;
        v50 = v47 + 24;
        vst3q_f32(v47, *(float32x4x3_t *)(&v46 - 2));
        v51 = v47 + 12;
        vst3q_f32(v51, v61);
        v45 += 16;
        v47 = v50;
        v48 -= 8;
      }
      while (v48);
      v25 = a4 & 0xFFFFFFF8;
      if (v24 == a4)
        goto LABEL_11;
    }
LABEL_9:
    v26 = v25 + 1;
    do
    {
      v27 = *(_QWORD *)(a5 + 8 * v24);
      v28 = v23 + 12 * v24;
      *(_QWORD *)v28 = v27;
      *(_DWORD *)(v28 + 8) = 0;
      v24 = v26++;
    }
    while (v24 < a4);
  }
LABEL_11:
  v29 = *a9;
  *(_BYTE *)(v21 + 98) = v29;
  if (v29)
  {
    *(_DWORD *)(v21 + 100) = *((_DWORD *)a9 + 1);
    *(_DWORD *)(v21 + 104) = *((_DWORD *)a9 + 2);
  }
  v30 = *a10;
  *(_BYTE *)(v21 + 99) = v30;
  if (v30)
  {
    *(_DWORD *)(v21 + 108) = *((_DWORD *)a10 + 1);
    *(_DWORD *)(v21 + 112) = *((_DWORD *)a10 + 2);
  }
  v31 = *a2;
  v32 = (std::__shared_weak_count *)a2[1];
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  v56[0] = v31;
  v56[1] = (uint64_t)v32;
  v57 = a3;
  v58 = a8;
  v35 = std::__hash_table<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::hash<md::RoadBatchKey>,std::equal_to<md::RoadBatchKey>,true>,std::__unordered_map_equal<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::equal_to<md::RoadBatchKey>,std::hash<md::RoadBatchKey>,true>,std::allocator<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RoadBatchKey,std::piecewise_construct_t const&,std::tuple<md::RoadBatchKey const&>,std::tuple<>>(a1, v56, (uint64_t)v56);
  v36 = v35;
  v37 = (uint64_t *)v35[6];
  if ((unint64_t)v37 >= v35[7])
  {
    v38 = std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>((uint64_t)(v35 + 5), (uint64_t *)&v59);
  }
  else
  {
    if (v37)
    {
      v59 = 0;
      *v37 = v21;
    }
    v38 = v37 + 1;
  }
  v36[6] = (uint64_t)v38;
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v41 = v59;
  v59 = 0;
  if (v41)
  {
    (**v41)(v41);
    if ((v42 & 1) == 0)
    {
      {
        v55 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v41, 120);
  }
}

void sub_19F53E0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (***a12)(_QWORD))
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>::~unique_ptr[abi:nn180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19F53E314(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C40520EE663);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RoadTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RoadTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RoadTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *__copy_helper_block_ea8_96c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE112c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[13];
  result[12] = a2[12];
  result[13] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[15];
  result[14] = a2[14];
  result[15] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_96c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE112c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  unsigned __int8 v32;
  uint64_t v33;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 <= 0x57
    || ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (unint64_t)&v14[v16],
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *(_QWORD *)v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 2;
  v23 = v14 - 32;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *(_OWORD *)v23;
    v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(char **)a1;
  v28 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v31 = (void (***)(_QWORD))*((_QWORD *)v28 - 1);
    v28 -= 8;
    v30 = v31;
    *(_QWORD *)v28 = 0;
    if (v31)
    {
      (**v30)(v30);
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v30, 120);
    }
  }
LABEL_32:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - (_QWORD)v14);
  return v12;
}

void (****std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(_QWORD)))(_QWORD)
{
  void (***v2)(_QWORD);
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v2, 120);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v3 = (_QWORD *)__p[5];
    if (v3)
    {
      v4 = (_QWORD *)__p[6];
      v5 = __p[5];
      if (v4 != v3)
      {
        do
        {
          v7 = (void (***)(_QWORD, uint64_t))*--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              v9 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 120);
          }
        }
        while (v4 != v3);
        v5 = __p[5];
      }
      __p[6] = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)__p[8] + 40))(__p[8], v5, __p[7] - v5);
    }
    v10 = (std::__shared_weak_count *)__p[3];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    goto LABEL_20;
  }
  if (__p)
LABEL_20:
    operator delete(__p);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
      v4 = (std::__shared_weak_count *)v2[3];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), v2, 56);
  }
  return a1;
}

__n128 __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v2 = *(_OWORD *)(a2 + 144);
  v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  result = *(__n128 *)(a2 + 224);
  v5 = *(_OWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v5;
  *(_OWORD *)(a1 + 256) = v6;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__14_2032(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__15_2033(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

void ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke(uint64_t a1, std::__shared_weak_count **this, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, int a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, char a15, uint64_t a16, char a17)
{
  int v23;
  geo::codec *v26;
  geo::codec *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  uint64_t v36;
  gss::Allocator *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  _QWORD v59[5];
  __int128 v60;
  __int128 v61;
  std::__shared_weak_count **v62;
  uint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  float v71;
  int v72;
  int v73;
  char v74;
  char v75;
  char v76;
  __int128 v77;
  _QWORD v78[2];
  unsigned __int8 v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;

  v23 = (int)a3;
  v88 = 0;
  v26 = geo::codec::multiSectionFeatureCharacteristicPoints(this, (GeoCodecsRoadFeature *)&v88, a3);
  v27 = v26;
  if (!v88)
  {
    v30 = 0;
    v28 = 0;
LABEL_7:
    if (v28 != v88)
      goto LABEL_10;
LABEL_8:
    v31 = 0;
    v30 = 0;
    goto LABEL_13;
  }
  v28 = 0;
  v29 = 0;
  while (*((_DWORD *)v26 + 25 * v28 + 2) != a4)
  {
    v28 = v29 + 1;
    v29 = v28;
    v30 = v28;
    if (v88 <= v28)
      goto LABEL_7;
  }
  v30 = v29;
  if (v28 == v88)
    goto LABEL_8;
LABEL_10:
  v32 = v30 + 1;
  do
  {
    v31 = v32;
    if (v88 <= v32)
      break;
    v33 = *((_DWORD *)v26 + 25 * v32++ + 2);
  }
  while (v33 == a4);
LABEL_13:
  v34 = 0;
  v35 = 0;
  v86 = 0;
  v87 = 0;
  if (*(_DWORD *)(a1 + 128) != 4)
  {
LABEL_37:
    v59[0] = MEMORY[0x1E0C809B0];
    v59[1] = 3321888768;
    v59[2] = ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_2;
    v59[3] = &unk_1E42E9378;
    v74 = a17;
    v59[4] = *(_QWORD *)(a1 + 32);
    v62 = this;
    v63 = a7;
    v75 = a8;
    v68 = a5;
    v69 = a6;
    v70 = a4;
    v71 = a9;
    v76 = a15;
    v64 = v35;
    v65 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v48 = __ldxr(p_shared_owners);
      while (__stxr(v48 + 1, p_shared_owners));
    }
    v49 = *(_DWORD *)(a1 + 128);
    v50 = *(_QWORD *)(a1 + 120);
    v60 = *(_OWORD *)(a1 + 40);
    v61 = *(_OWORD *)(a1 + 56);
    v72 = v49;
    v73 = v23;
    v66 = v50;
    v67 = a16;
    md::splitRoadSectionByZ(a11, a14, (uint64_t)v27 + 100 * v30, v31 - v30, v59, a9, a10);
    v51 = v65;
    if (v65)
    {
      v52 = (unint64_t *)&v65->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    goto LABEL_47;
  }
  v57 = a8;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)(*(_QWORD *)a7 + 240), (unsigned int **)(a1 + 72), &v82);
  a8 = a6;
  v36 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)((char *)&v77 + 7) = 0;
  *(_QWORD *)&v77 = 0;
  HIBYTE(v77) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v80, v36, (gss::FeatureAttributeSet *)&v82, (gss::QueryOverrides *)&v77);
  v38 = v23;
  if (!BYTE14(v77) && (_QWORD)v77)
  {
    v39 = gss::Allocator::instance(v37);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 40))(v39, v77, WORD6(v77));
  }
  v40 = v80;
  v41 = v81;
  v86 = v80;
  v87 = v81;
  if (v81)
  {
    v42 = (unint64_t *)&v81->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    *((_QWORD *)&v77 + 1) = v41;
    do
      v44 = __ldxr(v42);
    while (__stxr(v44 + 1, v42));
  }
  else
  {
    *((_QWORD *)&v77 + 1) = 0;
  }
  v78[0] = 0;
  v78[1] = 0;
  *(_QWORD *)&v77 = v40;
  v79 = 0;
  if (v40)
    LODWORD(v40) = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v40 + 48))(v40, v78);
  v79 = v40;
  if (v41)
  {
    v45 = (unint64_t *)&v41->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    LODWORD(v40) = v79;
  }
  v23 = v38;
  a6 = a8;
  LOBYTE(a8) = v57;
  if ((_DWORD)v40 && md::trafficVisibleAtSpeed((uint64_t)&v77, v57))
  {
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v77);
    if (v82)
    {
      v83 = v82;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 40))(v85, v82, v84 - v82);
    }
    v35 = v86;
    v34 = v87;
    goto LABEL_37;
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v77);
  if (v82)
  {
    v83 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 40))(v85, v82, v84 - v82);
  }
LABEL_47:
  v54 = v87;
  if (v87)
  {
    v55 = (unint64_t *)&v87->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_19F53F4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v32;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a30);
  v32 = *(_QWORD *)(v30 - 160);
  if (v32)
  {
    *(_QWORD *)(v30 - 152) = v32;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v30 - 136) + 40))(*(_QWORD *)(v30 - 136), v32, *(_QWORD *)(v30 - 144) - v32);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 - 128);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_24(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  char v13[24];
  char v14;

  v4 = operator new();
  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = (uint64_t *)a1[8];
  v7 = (uint64_t *)a1[9];
  v13[0] = 0;
  v14 = 0;
  md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::RibbonLayer((_QWORD *)v4, a2, *(uint64_t **)(v5 + 64), v6, v7, v13, 0);
  *(_QWORD *)v4 = &off_1E4297080;
  *(_QWORD *)(v4 + 152) = 0;
  *(_BYTE *)(v4 + 160) = 0;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v4;
  v8 = operator new();
  v9 = (uint64_t *)a1[8];
  v10 = *(_QWORD *)(a1[7] + 8);
  v11 = (uint64_t *)a1[9];
  v13[0] = 0;
  v14 = 0;
  result = md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::RibbonLayer((char *)v8, a2, *(uint64_t **)(v10 + 64), v9, v11, (uint64_t)v13);
  *(_QWORD *)v8 = &off_1E4292430;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v8;
  return result;
}

void sub_19F53F684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C40B1729FB1);
  _Unwind_Resume(a1);
}

uint64_t md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::RibbonLayer(char *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *i;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  unsigned __int8 v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void *v91;
  _QWORD *v92;
  unsigned __int8 v93;
  _QWORD *v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  ggl::SolidTraffic::BasePipelineSetup *v125;
  ggl::SolidTraffic::BasePipelineSetup *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  ggl::SolidTraffic::BasePipelineSetup *v136;
  uint64_t *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  ggl::SolidTraffic::BasePipelineSetup *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  uint64_t *v156;
  int64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t *v174;
  std::vector<unsigned int>::pointer begin;
  int64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t *v179;
  int64_t v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  unsigned __int8 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void (***v208)(_QWORD);
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  std::vector<unsigned int>::pointer v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  uint64_t *v217;
  int64_t v218;
  unint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  malloc_zone_t *v236;
  uint64_t v237;
  unsigned __int8 v238;
  uint64_t v239;
  geo::read_write_lock *v240;
  const char *v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 v246;
  uint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  BOOL v262;
  unint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  _OWORD *v266;
  __int128 *v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  _QWORD *v272;
  void *v273;
  uint64_t v274;
  unsigned __int8 v275;
  uint64_t v276;
  unsigned __int8 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int8x16_t *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t *v289;
  _QWORD *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  uint64_t *v298;
  char *v299;
  char *v300;
  char *v301;
  unint64_t v302;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  unsigned __int8 v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  unsigned __int8 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  geo::read_write_lock *v337;
  const char *v338;
  malloc_zone_t *zone;
  unsigned __int8 v340;
  unsigned __int8 v341;
  unsigned __int8 v342;
  int v343;
  char v344;
  int64_t v345;
  _QWORD *v346;
  char *v347;
  _QWORD *v348;
  char *v349;
  char *v350;
  _QWORD *v351;
  _QWORD **v352;
  _QWORD **v353;
  _QWORD *v354;
  _QWORD **v355;
  _QWORD **v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  unint64_t v360;
  uint64_t v361;
  char *v362;
  float *v363;
  float v364;
  uint64_t v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  uint64_t v373;
  float *v374;
  uint64_t v375;
  uint64_t v376;
  double v377;
  float v378;
  float v379;
  unint64_t v380;
  float v381;
  float v382;
  uint64_t v383;
  float *v384;
  float v385;
  float v386;
  float *v387;
  uint64_t v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  double v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  _BYTE *v402;
  char *v403;
  unint64_t v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  _OWORD *v408;
  char *v409;
  uint64_t v410;
  __int128 v411;
  gdc::GlobeTileGrid *v412;
  gdc::GlobeTileGrid *v413;
  gdc::GlobeTileGrid *v414;
  uint64_t v415;
  char *v416;
  uint64_t *v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  gdc::GlobeTileGrid *v424;
  uint64_t v425;
  float *v426;
  float v427;
  unsigned int v428;
  float v429;
  unsigned int v430;
  float *v431;
  float v432;
  float v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  std::__shared_count v441;
  unsigned __int8 v442;
  char *v443;
  unint64_t *v444;
  __int128 v445;
  unsigned __int8 v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  char *v456;
  _QWORD *v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  _BYTE *v464;
  uint64_t *v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  _OWORD *v469;
  char *v470;
  uint64_t v471;
  __int128 v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  _QWORD *v488;
  _QWORD *v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  std::__shared_weak_count *end;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  _QWORD *v501;
  int v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t *v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t *v510;
  unint64_t v511;
  uint64_t v512;
  float v513;
  uint64_t **v514;
  uint64_t **v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  __int128 v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  __int128 v532;
  uint64_t v533;
  uint64_t v534;
  std::__shared_weak_count **v535;
  std::__shared_weak_count **v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  std::__shared_weak_count *v540;
  uint64_t shared_weak_owners;
  int8x16_t v542;
  unint64_t v543;
  char *v544;
  unsigned int *v545;
  unint64_t v546;
  unint64_t v547;
  float v548;
  float32x2_t v549;
  int8x16_t v550;
  int32x4_t *v551;
  float32x4_t v552;
  unint64_t v553;
  float32x4_t v554;
  const float *i32;
  int32x4_t v556;
  int32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  unint64_t v564;
  float32x2_t *v565;
  float32x2_t v566;
  float32x2_t v567;
  double v568;
  float v569;
  float *v570;
  float v571;
  uint64_t v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float v577;
  float v578;
  float *v579;
  unint64_t v580;
  uint64_t v581;
  int32x2_t v582;
  unint64_t v583;
  float *v584;
  float v585;
  float v586;
  float *v587;
  unint64_t v588;
  float v589;
  float32x2_t v590;
  unint64_t v591;
  float v592;
  float v593;
  float v594;
  float v595;
  unsigned int v596;
  float *v597;
  float v598;
  float v599;
  float v600;
  float v601;
  float v602;
  float v603;
  float v604;
  float v605;
  float v606;
  double v607;
  float v608;
  float v609;
  float32x2_t v610;
  float v611;
  float v612;
  unint64_t v613;
  float v614;
  uint64_t v615;
  float32x2_t v616;
  __float2 v617;
  __float2 v618;
  __float2 v619;
  float *v620;
  float *v621;
  float v622;
  float v623;
  float v624;
  float v625;
  float v626;
  float v627;
  float v628;
  unint64_t shared_owners;
  unint64_t v630;
  int16x8_t v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _WORD *v636;
  uint64_t v637;
  unint64_t v638;
  _WORD *v639;
  __int16 v640;
  unint64_t v641;
  __int16 v642;
  __int16 v643;
  uint64_t v644;
  _WORD *v645;
  unint64_t v646;
  int64x2_t v647;
  int64x2_t v648;
  int64x2_t v649;
  int64x2_t v650;
  __int16 *v651;
  unint64_t v652;
  int64x2_t v653;
  unint64_t v654;
  unint64_t v655;
  unsigned __int8 v656;
  _QWORD *v657;
  _QWORD *v658;
  _QWORD *v659;
  void (***v660)(_QWORD, _QWORD *);
  void (***v661)(_QWORD, _QWORD *);
  unsigned __int8 v662;
  uint64_t v663;
  unint64_t v664;
  unint64_t v665;
  _QWORD *v666;
  int v667;
  int v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  _QWORD *v673;
  int v674;
  int v675;
  unint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t result;
  uint64_t v680;
  uint64_t v681;
  uint64_t **v682;
  _QWORD *v684;
  uint64_t **v685;
  uint64_t *v686;
  std::__shared_weak_count **v687;
  std::__shared_weak_count **v688;
  uint64_t v689;
  uint64_t v690;
  const QuadTile *v691;
  uint64_t v692;
  gdc::GlobeTileGrid **v693;
  unint64_t v694;
  void **v696;
  _QWORD *v698;
  uint64_t *v701;
  _QWORD *v702;
  uint64_t *v703;
  _QWORD **v704;
  float v705;
  char *v706;
  std::vector<unsigned int>::pointer v707;
  char *v708;
  uint64_t *v709;
  _QWORD *v710;
  float v711;
  void *v712;
  char *v713;
  char *v714;
  float v715;
  uint64_t *v716;
  uint64_t *v717;
  _QWORD **v718;
  float v719;
  uint64_t *v720;
  _QWORD *v721;
  unint64_t v722;
  float v723;
  uint64_t *v724;
  uint64_t *v725;
  unint64_t v726;
  unint64_t v727;
  uint64_t v728;
  float v729;
  float v730;
  char *v731;
  uint64_t v732;
  uint64_t *v733;
  float v734;
  __int32 v735;
  std::vector<unsigned int> v736;
  void *v737[3];
  __int128 v738;
  unint64_t v739;
  unint64_t v740;
  __int16 v741;
  uint64_t v742;
  __int128 v743;
  unint64_t v744;
  unint64_t v745;
  __int16 v746;
  uint64_t v747;
  void *__p;
  std::__shared_weak_count *v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  uint64_t v756;
  std::vector<unsigned int> v757;
  float32x2_t v758;
  std::__compressed_pair<unsigned int *> v759;
  __int128 v760;
  uint64_t v761;
  __int16 v762;
  unint64_t v763;
  uint64_t v764[3];
  int16x8x2_t v765;
  float32x4x2_t v766;

  v703 = a3;
  if (a3)
  {
    v9 = 0;
    v709 = 0;
    v701 = 0;
    while (1)
    {
      v749 = 0;
      __p = 0;
      {
        v333 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v333, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v750 = (unint64_t)mdm::Allocator::instance(void)::alloc;
      {
        v334 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v334, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v751 = (unint64_t)mdm::Allocator::instance(void)::alloc;
      LODWORD(v752) = 1065353216;
      v12 = (uint64_t *)v703[6];
      v13 = (uint64_t *)v703[7];
      while (v12 != v13)
      {
        v15 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v12 + 88), *(float **)(*v12 + 72), 0);
        v16 = v15;
        v17 = v15;
        v18 = (unint64_t)v749;
        if (v749)
        {
          v19 = (uint8x8_t)vcnt_s8((int8x8_t)v749);
          v19.i16[0] = vaddlv_u8(v19);
          if (v19.u32[0] > 1uLL)
          {
            v7 = v15;
            if ((unint64_t)v749 <= v15)
              v7 = v15 % (unint64_t)v749;
          }
          else
          {
            v7 = ((_DWORD)v749 - 1) & v15;
          }
          v20 = (uint64_t *)*((_QWORD *)__p + v7);
          if (v20)
          {
            v21 = *v20;
            if (*v20)
            {
              if (v19.u32[0] < 2uLL)
              {
                while (1)
                {
                  v23 = *(_QWORD *)(v21 + 8);
                  if (v23 == v15)
                  {
                    if (*(_DWORD *)(v21 + 16) == v15)
                      goto LABEL_91;
                  }
                  else if ((v23 & ((unint64_t)&v749[-1].__shared_weak_owners_ + 7)) != v7)
                  {
                    goto LABEL_31;
                  }
                  v21 = *(_QWORD *)v21;
                  if (!v21)
                    goto LABEL_31;
                }
              }
              do
              {
                v22 = *(_QWORD *)(v21 + 8);
                if (v22 == v15)
                {
                  if (*(_DWORD *)(v21 + 16) == v15)
                    goto LABEL_91;
                }
                else
                {
                  if (v22 >= (unint64_t)v749)
                    v22 %= (unint64_t)v749;
                  if (v22 != v7)
                    break;
                }
                v21 = *(_QWORD *)v21;
              }
              while (v21);
            }
          }
        }
LABEL_31:
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v751 + 16))(v751, 56, 8);
        v757.__begin_ = (std::vector<unsigned int>::pointer)v21;
        v757.__end_ = (std::vector<unsigned int>::pointer)&v751;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = v17;
        *(_DWORD *)(v21 + 16) = v16;
        *(_QWORD *)(v21 + 32) = 0;
        *(_QWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        {
          v79 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v21 + 48) = mdm::Allocator::instance(void)::alloc;
        LOBYTE(v757.__end_cap_.__value_) = 1;
        v25 = (float)(unint64_t)(*((_QWORD *)&v751 + 1) + 1);
        if (!v18 || (float)(*(float *)&v752 * (float)v18) < v25)
        {
          v26 = (v18 & (v18 - 1)) != 0;
          if (v18 < 3)
            v26 = 1;
          v27 = v26 | (2 * v18);
          v28 = vcvtps_u32_f32(v25 / *(float *)&v752);
          if (v27 <= v28)
            prime = (int8x8_t)v28;
          else
            prime = (int8x8_t)v27;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v18 = (unint64_t)v749;
          if (*(_QWORD *)&prime <= (unint64_t)v749)
          {
            if (*(_QWORD *)&prime < (unint64_t)v749)
            {
              v40 = vcvtps_u32_f32((float)*((unint64_t *)&v751 + 1) / *(float *)&v752);
              if ((unint64_t)v749 < 3
                || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v749), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
              {
                v40 = std::__next_prime(v40);
              }
              else
              {
                v42 = 1 << -(char)__clz(v40 - 1);
                if (v40 >= 2)
                  v40 = v42;
              }
              if (*(_QWORD *)&prime <= v40)
                prime = (int8x8_t)v40;
              if (*(_QWORD *)&prime >= v18)
              {
                v18 = (unint64_t)v749;
              }
              else
              {
                if (prime)
                  goto LABEL_44;
                v78 = __p;
                __p = 0;
                if (v78)
                  (*(void (**)(_QWORD, void *, uint64_t))(*(_QWORD *)v750 + 40))(v750, v78, 8 * (_QWORD)v749);
                v18 = 0;
                v749 = 0;
              }
            }
LABEL_68:
            if ((v18 & (v18 - 1)) != 0)
            {
              if (v18 <= v17)
                v7 = v17 % v18;
              else
                v7 = v17;
            }
            else
            {
              v7 = ((_DWORD)v18 - 1) & v17;
            }
            goto LABEL_81;
          }
LABEL_44:
          v30 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v750 + 16))(v750, 8 * *(_QWORD *)&prime, 8);
          v31 = __p;
          __p = v30;
          if (v31)
            (*(void (**)(_QWORD, void *, uint64_t))(*(_QWORD *)v750 + 40))(v750, v31, 8 * (_QWORD)v749);
          v32 = 0;
          v749 = (std::__shared_weak_count *)prime;
          do
            *((_QWORD *)__p + v32++) = 0;
          while (*(_QWORD *)&prime != v32);
          v33 = (_QWORD **)*((_QWORD *)&v750 + 1);
          if (!*((_QWORD *)&v750 + 1))
            goto LABEL_67;
          v34 = *(_QWORD *)(*((_QWORD *)&v750 + 1) + 8);
          v35 = *(_QWORD *)&prime - 1;
          if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
          {
            v36 = v34 & v35;
            *((_QWORD *)__p + v36) = (char *)&v750 + 8;
            for (i = *v33; *v33; i = *v33)
            {
              v38 = i[1] & v35;
              if (v38 == v36)
              {
                v33 = (_QWORD **)i;
              }
              else if (*((_QWORD *)__p + v38))
              {
                *v33 = (_QWORD *)*i;
                v39 = 8 * v38;
                *i = **(_QWORD **)((char *)__p + v39);
                **(_QWORD **)((char *)__p + v39) = i;
              }
              else
              {
                *((_QWORD *)__p + v38) = v33;
                v33 = (_QWORD **)i;
                v36 = v38;
              }
            }
            goto LABEL_67;
          }
          if (v34 >= *(_QWORD *)&prime)
            v34 %= *(_QWORD *)&prime;
          *((_QWORD *)__p + v34) = (char *)&v750 + 8;
          v43 = *v33;
          if (!*v33)
          {
LABEL_67:
            v18 = (unint64_t)prime;
            goto LABEL_68;
          }
          while (2)
          {
            v45 = v43[1];
            if (v45 >= *(_QWORD *)&prime)
              v45 %= *(_QWORD *)&prime;
            if (v45 != v34)
            {
              if (!*((_QWORD *)__p + v45))
              {
                *((_QWORD *)__p + v45) = v33;
LABEL_72:
                v33 = (_QWORD **)v43;
                v43 = (_QWORD *)*v43;
                v34 = v45;
                if (!v43)
                  goto LABEL_67;
                continue;
              }
              *v33 = (_QWORD *)*v43;
              v44 = 8 * v45;
              *v43 = **(_QWORD **)((char *)__p + v44);
              **(_QWORD **)((char *)__p + v44) = v43;
              v43 = v33;
            }
            break;
          }
          v45 = v34;
          goto LABEL_72;
        }
LABEL_81:
        v46 = (uint64_t *)*((_QWORD *)__p + v7);
        if (v46)
        {
          *(_QWORD *)v21 = *v46;
LABEL_89:
          *v46 = v21;
          goto LABEL_90;
        }
        *(_QWORD *)v21 = *((_QWORD *)&v750 + 1);
        *((_QWORD *)&v750 + 1) = v21;
        *((_QWORD *)__p + v7) = (char *)&v750 + 8;
        if (*(_QWORD *)v21)
        {
          v47 = *(_QWORD *)(*(_QWORD *)v21 + 8);
          if ((v18 & (v18 - 1)) != 0)
          {
            if (v47 >= v18)
              v47 %= v18;
          }
          else
          {
            v47 &= v18 - 1;
          }
          v46 = (uint64_t *)((char *)__p + 8 * v47);
          goto LABEL_89;
        }
LABEL_90:
        ++*((_QWORD *)&v751 + 1);
LABEL_91:
        v48 = *(_QWORD **)(v21 + 32);
        v49 = *(_QWORD *)(v21 + 40);
        if ((unint64_t)v48 < v49)
        {
          if (v48)
          {
            v50 = *v12;
            *v12 = 0;
            *v48 = v50;
          }
          v14 = v48 + 1;
          goto LABEL_9;
        }
        v51 = *(_QWORD *)(v21 + 24);
        v52 = ((uint64_t)v48 - v51) >> 3;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61)
          abort();
        v54 = v49 - v51;
        if (v54 >> 2 > v53)
          v53 = v54 >> 2;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 48) + 16))(*(_QWORD *)(v21 + 48), 8 * v55, 8);
          v57 = (_QWORD *)(v56 + 8 * v52);
          v58 = v56 + 8 * v55;
          if (v56)
          {
            v59 = *v12;
            *v12 = 0;
            *v57 = v59;
          }
        }
        else
        {
          v58 = 0;
          v57 = (_QWORD *)(8 * v52);
        }
        v14 = v57 + 1;
        v60 = *(_QWORD **)(v21 + 24);
        v61 = *(_QWORD *)(v21 + 32);
        if ((_QWORD *)v61 == v60)
        {
          *(_QWORD *)(v21 + 24) = v57;
          *(_QWORD *)(v21 + 32) = v14;
          v67 = *(_QWORD *)(v21 + 40);
          *(_QWORD *)(v21 + 40) = v58;
          goto LABEL_118;
        }
        v62 = v61 - (_QWORD)v60 - 8;
        if (v62 <= 0x47
          || (v63 = v62 >> 3, v61 - 8 * v63 - 8 < (unint64_t)v57) && (unint64_t)&v57[-v63 - 1] < v61)
        {
          v64 = *(_QWORD **)(v21 + 32);
          do
          {
LABEL_109:
            v65 = *--v64;
            *v64 = 0;
            *--v57 = v65;
          }
          while (v64 != v60);
          goto LABEL_110;
        }
        v71 = v63 + 1;
        v72 = (v63 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v64 = (_QWORD *)(v61 - 8 * v72);
        v73 = v57 - 2;
        v74 = (__int128 *)(v61 - 32);
        v75 = v72;
        do
        {
          v77 = *v74;
          v76 = v74[1];
          *v74 = 0uLL;
          v74[1] = 0uLL;
          v74 -= 2;
          *(v73 - 1) = v77;
          *v73 = v76;
          v73 -= 2;
          v75 -= 4;
        }
        while (v75);
        v57 -= v72;
        if (v71 != v72)
          goto LABEL_109;
LABEL_110:
        v61 = *(_QWORD *)(v21 + 24);
        v66 = *(_QWORD **)(v21 + 32);
        *(_QWORD *)(v21 + 24) = v57;
        *(_QWORD *)(v21 + 32) = v14;
        v67 = *(_QWORD *)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v58;
        while (v66 != (_QWORD *)v61)
        {
          v68 = *--v66;
          v7 = v68;
          *v66 = 0;
          if (v68)
          {
            (**(void (***)(uint64_t))v7)(v7);
            {
              v70 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v70, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
          }
        }
LABEL_118:
        if (v61)
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v21 + 48) + 40))(*(_QWORD *)(v21 + 48), v61, v67 - v61);
LABEL_9:
        *(_QWORD *)(v21 + 32) = v14;
        ++v12;
      }
      v80 = operator new();
      v81 = 0uLL;
      *(_OWORD *)(v80 + 144) = 0u;
      *(_QWORD *)v80 = &off_1E42AF148;
      *(_QWORD *)(v80 + 8) = 0;
      *(_QWORD *)(v80 + 64) = 0;
      *(_QWORD *)(v80 + 40) = 0;
      *(_QWORD *)(v80 + 48) = 0;
      *(_QWORD *)(v80 + 32) = "";
      *(_DWORD *)(v80 + 56) = 0;
      *(_DWORD *)(v80 + 72) = 1065353216;
      *(_OWORD *)(v80 + 80) = 0u;
      *(_OWORD *)(v80 + 96) = 0u;
      *(int64x2_t *)(v80 + 112) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v80 + 128) = 0;
      *(_QWORD *)(v80 + 16) = &off_1E42AF548;
      *(_BYTE *)(v80 + 136) = 1;
      *(_OWORD *)(v80 + 160) = 0u;
      *(_OWORD *)(v80 + 176) = 0u;
      if ((v82 & 1) == 0)
      {
        v81 = 0uLL;
        if (v335)
        {
          v336 = operator new();
          *(_QWORD *)(v336 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v336 + 24) = "GeoGL";
          *(_OWORD *)(v336 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v336 = &off_1E42B5668;
          *(_QWORD *)(v336 + 8) = "GeoGL";
          *(_OWORD *)(v336 + 72) = 0u;
          *(_OWORD *)(v336 + 88) = 0u;
          *(_OWORD *)(v336 + 104) = 0u;
          *(_OWORD *)(v336 + 120) = 0u;
          *(_OWORD *)(v336 + 136) = 0u;
          *(_OWORD *)(v336 + 152) = 0u;
          *(_OWORD *)(v336 + 168) = 0u;
          *(_OWORD *)(v336 + 184) = 0u;
          *(_OWORD *)(v336 + 200) = 0u;
          *(_OWORD *)(v336 + 216) = 0u;
          *(_OWORD *)(v336 + 232) = 0u;
          *(_QWORD *)(v336 + 248) = 0;
          *(_OWORD *)(v336 + 56) = 0u;
          v337 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v336 + 56), 0);
          if ((_DWORD)v337)
            geo::read_write_lock::logFailure(v337, (uint64_t)"initialization", v338);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v336 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v336 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v336;
          v81 = 0uLL;
        }
      }
      *(_QWORD *)(v80 + 192) = ggl::Allocator::instance(void)::alloc;
      *(_OWORD *)(v80 + 200) = v81;
      *(_OWORD *)(v80 + 216) = v81;
      *(_QWORD *)(v80 + 232) = 0;
      *(_QWORD *)(v80 + 240) = 32;
      v83 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
      *v83 = 0;
      v83[1] = 0;
      *(_QWORD *)(v80 + 224) = v83;
      *(_QWORD *)(v80 + 232) = v83;
      *(_QWORD *)(v80 + 256) = 0;
      *(_QWORD *)(v80 + 264) = 0;
      *(_QWORD *)(v80 + 248) = 0;
      *(_BYTE *)(v80 + 272) = 1;
      *(_QWORD *)v80 = &off_1E428C700;
      *(_QWORD *)(v80 + 280) = v703[2];
      v84 = v703[3];
      *(_QWORD *)(v80 + 288) = v84;
      if (v84)
      {
        v85 = (unint64_t *)(v84 + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = v703[4];
      *(_DWORD *)(v80 + 304) = *((_DWORD *)v703 + 10);
      *(_QWORD *)(v80 + 296) = v87;
      *(_QWORD *)v80 = &off_1E4292410;
      v88 = v80 + 312;
      v89 = v80 + 320;
      *(_QWORD *)(v80 + 312) = 0;
      *(_QWORD *)(v80 + 320) = 0;
      +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
      v90 = a1;
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      *(_BYTE *)(v80 + 329) = *(_BYTE *)(objc_msgSend(v91, "gglDevice") + 20);

      if (*(_BYTE *)(v80 + 329))
      {
        v92 = (_QWORD *)operator new();
        if ((v93 & 1) == 0
        {
          if ((v340 & 1) == 0
          {
            if ((v342 & 1) == 0
            {
              ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TrafficBase::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43B40 = 1;
          }
          ggl::SolidTraffic::BaseMaskedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE39088 = &ggl::SolidTraffic::pipelineDataBaseMaskedPipelineDeviceStructs(void)::ref;
          qword_1ECE39090 = 0;
          if ((v341 & 1) == 0
          {
            ggl::SolidTraffic::pipelineDataBaseMaskedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE390E0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE390E8 = (uint64_t)ggl::TrafficBase::Style::reflection(void)::reflection;
          }
          qword_1ECE39098 = (uint64_t)&ggl::SolidTraffic::pipelineDataBaseMaskedPipelineConstantStructs(void)::ref;
          unk_1ECE390A0 = xmmword_19FFB35E0;
          v90 = a1;
        }
        ggl::PipelineSetup::PipelineSetup((uint64_t)v92, (uint64_t)&ggl::SolidTraffic::BaseMaskedPipelineSetup::typedReflection(void)::ref);
        *v92 = &off_1E42B6420;
        v94 = *(_QWORD **)v88;
        *(_QWORD *)v88 = v92;
        if (v94)
        {
          (*(void (**)(_QWORD *))(*v94 + 8))(v94);
          v92 = *(_QWORD **)v88;
        }
        v7 = (uint64_t)operator new(0xE8uLL);
        *(_QWORD *)(v7 + 8) = 0;
        v95 = (unint64_t *)(v7 + 8);
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = &off_1E42E1088;
        v6 = (unint64_t)ggl::TrafficBase::Style::reflection(void)::reflection;
        v96 = ggl::BufferData::BufferData(v7 + 24, qword_1EE5583D8, 2, 1, 6, 1);
        *(_QWORD *)(v7 + 224) = ggl::TrafficBase::Style::reflection(void)::reflection;
        *(_QWORD *)(v7 + 24) = &off_1E42B8CF0;
        v97 = v92[8];
        *(_QWORD *)(v97 + 32) = v96;
        *(_QWORD *)(v97 + 40) = 0;
        v98 = v92[20];
        do
          v99 = __ldxr(v95);
        while (__stxr(v99 + 1, v95));
        v100 = *(std::__shared_weak_count **)(v98 + 40);
        *(_QWORD *)(v98 + 32) = v96;
        *(_QWORD *)(v98 + 40) = v7;
        if (v100)
        {
          p_shared_owners = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(p_shared_owners);
          while (__stlxr(v102 - 1, p_shared_owners));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        do
          v103 = __ldaxr(v95);
        while (__stlxr(v103 - 1, v95));
        if (!v103)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
        }
        v104 = *(_QWORD **)v88;
        v105 = *(uint64_t **)(*(_QWORD *)v88 + 64);
        v105[1] = 0;
        v106 = *a4;
        *v105 = *a4;
        v107 = (_QWORD *)v104[20];
        v108 = a4[1];
        v109 = v709;
        if (v108)
        {
          v110 = (unint64_t *)(v108 + 8);
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v112 = (std::__shared_weak_count *)v107[1];
        *v107 = v106;
        v107[1] = v108;
        if (v112)
        {
          v113 = (unint64_t *)&v112->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v115 = *(_QWORD *)v88;
        v116 = *(_QWORD *)(*(_QWORD *)v88 + 64);
        *(_QWORD *)(v116 + 24) = 0;
        v117 = *a5;
        *(_QWORD *)(v116 + 16) = *a5;
        v118 = *(_QWORD *)(v115 + 160);
        v119 = a5[1];
        if (v119)
        {
          v120 = (unint64_t *)(v119 + 8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v122 = *(std::__shared_weak_count **)(v118 + 24);
        *(_QWORD *)(v118 + 16) = v117;
        *(_QWORD *)(v118 + 24) = v119;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
LABEL_196:
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
      }
      else
      {
        v125 = (ggl::SolidTraffic::BasePipelineSetup *)operator new();
        ggl::SolidTraffic::BasePipelineSetup::BasePipelineSetup(v125);
        v126 = *(ggl::SolidTraffic::BasePipelineSetup **)v89;
        *(_QWORD *)v89 = v125;
        if (v126)
        {
          (*(void (**)(ggl::SolidTraffic::BasePipelineSetup *))(*(_QWORD *)v126 + 8))(v126);
          v125 = *(ggl::SolidTraffic::BasePipelineSetup **)v89;
        }
        v127 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v127->__shared_owners_ = 0;
        v128 = (unint64_t *)&v127->__shared_owners_;
        v127->__shared_weak_owners_ = 0;
        v127->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1088;
        v6 = (unint64_t)ggl::TrafficBase::Style::reflection(void)::reflection;
        v129 = ggl::BufferData::BufferData((uint64_t)&v127[1], qword_1EE5583D8, 2, 1, 6, 1);
        v127[9].__shared_owners_ = (uint64_t)ggl::TrafficBase::Style::reflection(void)::reflection;
        v127[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8CF0;
        v130 = *((_QWORD *)v125 + 8);
        *(_QWORD *)(v130 + 32) = v129;
        *(_QWORD *)(v130 + 40) = 0;
        v131 = *((_QWORD *)v125 + 20);
        do
          v132 = __ldxr(v128);
        while (__stxr(v132 + 1, v128));
        v7 = *(_QWORD *)(v131 + 40);
        *(_QWORD *)(v131 + 32) = v129;
        *(_QWORD *)(v131 + 40) = v127;
        if (v7)
        {
          v133 = (unint64_t *)(v7 + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
          }
        }
        do
          v135 = __ldaxr(v128);
        while (__stlxr(v135 - 1, v128));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
        v136 = *(ggl::SolidTraffic::BasePipelineSetup **)v89;
        v137 = *(uint64_t **)(*(_QWORD *)v89 + 64);
        v137[1] = 0;
        v138 = *a4;
        *v137 = *a4;
        v139 = (_QWORD *)*((_QWORD *)v136 + 20);
        v140 = a4[1];
        if (v140)
        {
          v141 = (unint64_t *)(v140 + 8);
          do
            v142 = __ldxr(v141);
          while (__stxr(v142 + 1, v141));
        }
        v143 = (std::__shared_weak_count *)v139[1];
        *v139 = v138;
        v139[1] = v140;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v146 = *(ggl::SolidTraffic::BasePipelineSetup **)v89;
        v147 = *(_QWORD *)(*(_QWORD *)v89 + 64);
        *(_QWORD *)(v147 + 24) = 0;
        v148 = *a5;
        *(_QWORD *)(v147 + 16) = *a5;
        v149 = *((_QWORD *)v146 + 20);
        v150 = a5[1];
        if (v150)
        {
          v151 = (unint64_t *)(v150 + 8);
          do
            v152 = __ldxr(v151);
          while (__stxr(v152 + 1, v151));
        }
        v122 = *(std::__shared_weak_count **)(v149 + 24);
        *(_QWORD *)(v149 + 16) = v148;
        *(_QWORD *)(v149 + 24) = v150;
        if (v122)
        {
          v153 = (unint64_t *)&v122->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          v88 = v80 + 320;
          v109 = v709;
          if (!v154)
            goto LABEL_196;
        }
        else
        {
          v88 = v80 + 320;
          v109 = v709;
        }
      }
      *(_QWORD *)(v80 + 48) = *(_QWORD *)v88;
      v155 = md::TrafficBatchKey::hash((md::TrafficBatchKey *)(v80 + 280));
      *(_BYTE *)(v80 + 328) = v155 ^ BYTE2(v155) ^ ((unsigned __int16)(v155 ^ HIWORD(v155)) >> 8);
      if (v109 < v701)
      {
        *v109 = v80;
        v156 = v109 + 1;
        goto LABEL_223;
      }
      v157 = (char *)v109 - (char *)v9;
      v158 = v109 - v9;
      v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 61)
        abort();
      if (((char *)v701 - (char *)v9) >> 2 > v159)
        v159 = ((char *)v701 - (char *)v9) >> 2;
      if ((unint64_t)((char *)v701 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
        v160 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v160 = v159;
      if (v160)
      {
        if (v160 >> 61)
          goto LABEL_838;
        v161 = (char *)operator new(8 * v160);
      }
      else
      {
        v161 = 0;
      }
      v6 = (unint64_t)&v161[8 * v158];
      *(_QWORD *)v6 = v80;
      v156 = (uint64_t *)(v6 + 8);
      if (v709 == v9)
      {
        v90 = a1;
      }
      else
      {
        v162 = (char *)(v709 - 1) - (char *)v9;
        if (v162 >= 0x58)
        {
          if ((unint64_t)((char *)v709 - &v161[v157]) >= 0x20)
          {
            v164 = (v162 >> 3) + 1;
            v163 = &v709[-(v164 & 0x3FFFFFFFFFFFFFFCLL)];
            v165 = &v161[8 * v158 - 16];
            v166 = v709 - 2;
            v167 = v164 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v168 = *(_OWORD *)v166;
              *((_OWORD *)v165 - 1) = *((_OWORD *)v166 - 1);
              *(_OWORD *)v165 = v168;
              v165 -= 32;
              v166 -= 4;
              v167 -= 4;
            }
            while (v167);
            v6 -= 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
            v90 = a1;
            if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_220;
          }
          else
          {
            v163 = v709;
            v90 = a1;
          }
        }
        else
        {
          v163 = v709;
          v90 = a1;
        }
        do
        {
          v169 = *--v163;
          *(_QWORD *)(v6 - 8) = v169;
          v6 -= 8;
        }
        while (v163 != v9);
      }
LABEL_220:
      v701 = (uint64_t *)&v161[8 * v160];
      if (v9)
        operator delete(v9);
      v9 = (uint64_t *)v6;
LABEL_223:
      v709 = v156;
      v720 = (uint64_t *)*((_QWORD *)&v750 + 1);
      v724 = v9;
      if (*((_QWORD *)&v750 + 1))
      {
        v170 = 0;
        v731 = 0;
        v171 = 0;
        while (1)
        {
          v172 = operator new();
          *(_QWORD *)(v172 + 96) = 0;
          *(_OWORD *)(v172 + 64) = 0u;
          *(_OWORD *)(v172 + 80) = 0u;
          *(_OWORD *)(v172 + 32) = 0u;
          *(_OWORD *)(v172 + 48) = 0u;
          *(_OWORD *)v172 = 0u;
          *(_OWORD *)(v172 + 16) = 0u;
          *(_BYTE *)(v172 + 48) = 1;
          *(_QWORD *)(v172 + 56) = 0;
          *(_QWORD *)(v172 + 64) = 0;
          *(_QWORD *)(v172 + 72) = 0;
          {
            v280 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v280, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          *(_QWORD *)(v172 + 80) = mdm::Allocator::instance(void)::alloc;
          *(_DWORD *)(v172 + 96) = 0;
          v757.__begin_ = (std::vector<unsigned int>::pointer)v172;
          if (v171 < (uint64_t *)v731)
          {
            v757.__begin_ = 0;
            *v171 = v172;
            v174 = v171 + 1;
            begin = v757.__begin_;
            if (!v757.__begin_)
              goto LABEL_282;
LABEL_270:
            v201 = *((_QWORD *)begin + 7);
            if (v201)
            {
              v6 = *((_QWORD *)begin + 8);
              v202 = *((_QWORD *)begin + 7);
              if (v6 != v201)
              {
                do
                {
                  v203 = *(_QWORD *)(v6 - 8);
                  v6 -= 8;
                  v7 = v203;
                  *(_QWORD *)v6 = 0;
                  if (v203)
                  {
                    (**(void (***)(uint64_t, uint64_t))v7)(v7, v202);
                    if ((v204 & 1) == 0
                    {
                      v205 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                  }
                }
                while (v6 != v201);
                v202 = *((_QWORD *)begin + 7);
              }
              *((_QWORD *)begin + 8) = v201;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)begin + 10) + 40))(*((_QWORD *)begin + 10), v202, *((_QWORD *)begin + 9) - v202);
            }
            MEMORY[0x1A1AF4E00](begin, 0x1020C4010FC18DELL);
            goto LABEL_282;
          }
          v176 = (char *)v171 - (char *)v170;
          v7 = v171 - v170;
          v177 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 61)
            abort();
          if ((v731 - (char *)v170) >> 2 > v177)
            v177 = (v731 - (char *)v170) >> 2;
          v6 = (unint64_t)(v731 - (char *)v170) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v177;
          if (v6)
          {
            if (v6 >> 61)
              goto LABEL_838;
            v178 = (char *)operator new(8 * v6);
          }
          else
          {
            v178 = 0;
          }
          v179 = (uint64_t *)&v178[8 * v7];
          v757.__begin_ = 0;
          *v179 = v172;
          v174 = v179 + 1;
          v180 = (char *)v171 - (char *)v170;
          if (v171 != v170)
            break;
LABEL_267:
          v731 = &v178[8 * v6];
          if (v170)
            operator delete(v170);
          v170 = v179;
          begin = v757.__begin_;
          if (v757.__begin_)
            goto LABEL_270;
LABEL_282:
          *(_DWORD *)(*(v174 - 1) + 96) = *((_DWORD *)v720 + 4);
          v206 = v720[3];
          v728 = v720[4];
          if (v206 != v728)
          {
            v207 = 0;
            while (1)
            {
              v208 = *(void (****)(_QWORD))v206;
              v209 = *(_QWORD *)(*(_QWORD *)v206 + 88);
              if ((unint64_t)(v209 + v207) <= 0x5999)
              {
                v6 = *(v174 - 1);
                goto LABEL_347;
              }
              v210 = operator new();
              *(_QWORD *)(v210 + 96) = 0;
              *(_OWORD *)(v210 + 64) = 0u;
              *(_OWORD *)(v210 + 80) = 0u;
              *(_OWORD *)(v210 + 32) = 0u;
              *(_OWORD *)(v210 + 48) = 0u;
              *(_OWORD *)v210 = 0u;
              *(_OWORD *)(v210 + 16) = 0u;
              *(_BYTE *)(v210 + 48) = 1;
              *(_QWORD *)(v210 + 56) = 0;
              *(_QWORD *)(v210 + 64) = 0;
              *(_QWORD *)(v210 + 72) = 0;
              {
                v279 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v279, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              *(_QWORD *)(v210 + 80) = mdm::Allocator::instance(void)::alloc;
              *(_DWORD *)(v210 + 96) = 0;
              v757.__begin_ = (std::vector<unsigned int>::pointer)v210;
              if (v174 >= (uint64_t *)v731)
                break;
              v757.__begin_ = 0;
              *v174++ = v210;
              v212 = v757.__begin_;
              if (v757.__begin_)
                goto LABEL_334;
LABEL_346:
              v207 = 0;
              v6 = *(v174 - 1);
              *(_DWORD *)(v6 + 96) = *((_DWORD *)v720 + 4);
              v208 = *(void (****)(_QWORD))v206;
              v209 = *(_QWORD *)(*(_QWORD *)v206 + 88);
LABEL_347:
              *(_QWORD *)v206 = 0;
              v248 = *(_QWORD **)(v6 + 64);
              v249 = *(_QWORD *)(v6 + 72);
              if ((unint64_t)v248 < v249)
              {
                if (v248)
                {
                  *v248 = v208;
                  v208 = 0;
                }
                v250 = v248 + 1;
                goto LABEL_384;
              }
              v251 = *(_QWORD *)(v6 + 56);
              v252 = ((uint64_t)v248 - v251) >> 3;
              v253 = v252 + 1;
              if ((unint64_t)(v252 + 1) >> 61)
                abort();
              v254 = v249 - v251;
              if (v254 >> 2 > v253)
                v253 = v254 >> 2;
              if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8)
                v7 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v7 = v253;
              if (v7)
              {
                v255 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 16))(*(_QWORD *)(v6 + 80), 8 * v7, 8);
                v256 = (_QWORD *)(v255 + 8 * v252);
                v257 = v255 + 8 * v7;
                if (v255)
                {
                  *v256 = v208;
                  v208 = 0;
                }
              }
              else
              {
                v257 = 0;
                v256 = (_QWORD *)(8 * v252);
              }
              v250 = v256 + 1;
              v258 = *(_QWORD **)(v6 + 56);
              v259 = *(_QWORD *)(v6 + 64);
              if ((_QWORD *)v259 == v258)
              {
                *(_QWORD *)(v6 + 56) = v256;
                *(_QWORD *)(v6 + 64) = v250;
                v273 = *(void **)(v6 + 72);
                *(_QWORD *)(v6 + 72) = v257;
                if (!v259)
                  goto LABEL_384;
                goto LABEL_383;
              }
              v260 = v259 - (_QWORD)v258 - 8;
              v717 = v170;
              if (v260 <= 0x47
                || ((v261 = v260 >> 3, v259 - 8 * v261 - 8 < (unint64_t)v256)
                  ? (v262 = (unint64_t)&v256[-v261 - 1] >= v259)
                  : (v262 = 1),
                    !v262))
              {
                v265 = *(_QWORD **)(v6 + 64);
                do
                {
LABEL_373:
                  v271 = *--v265;
                  *v265 = 0;
                  *--v256 = v271;
                }
                while (v265 != v258);
                goto LABEL_374;
              }
              v263 = v261 + 1;
              v264 = (v261 + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v265 = (_QWORD *)(v259 - 8 * v264);
              v266 = v256 - 2;
              v267 = (__int128 *)(v259 - 32);
              v268 = v264;
              do
              {
                v270 = *v267;
                v269 = v267[1];
                *v267 = 0uLL;
                v267[1] = 0uLL;
                v267 -= 2;
                *(v266 - 1) = v270;
                *v266 = v269;
                v266 -= 2;
                v268 -= 4;
              }
              while (v268);
              v256 -= v264;
              if (v263 != v264)
                goto LABEL_373;
LABEL_374:
              v259 = *(_QWORD *)(v6 + 56);
              v272 = *(_QWORD **)(v6 + 64);
              *(_QWORD *)(v6 + 56) = v256;
              *(_QWORD *)(v6 + 64) = v250;
              v273 = *(void **)(v6 + 72);
              *(_QWORD *)(v6 + 72) = v257;
              if (v272 == (_QWORD *)v259)
              {
                v170 = v717;
                if (!v259)
                  goto LABEL_384;
              }
              else
              {
                v712 = v273;
                do
                {
                  v274 = *--v272;
                  v7 = v274;
                  *v272 = 0;
                  if (v274)
                  {
                    (**(void (***)(uint64_t))v7)(v7);
                    if ((v275 & 1) == 0
                    {
                      v276 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v276, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                  }
                }
                while (v272 != (_QWORD *)v259);
                v273 = v712;
                v170 = v717;
                if (!v259)
                  goto LABEL_384;
              }
LABEL_383:
              (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v259, (unint64_t)v273 - v259);
LABEL_384:
              *(_QWORD *)(v6 + 64) = v250;
              if (v208)
              {
                (**v208)(v208);
                {
                  v278 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v278, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v208, 104);
              }
              v207 += v209;
              v206 += 8;
              if (v206 == v728)
                goto LABEL_225;
            }
            v7 = (char *)v174 - (char *)v170;
            v213 = v174 - v170;
            v214 = v213 + 1;
            if ((unint64_t)(v213 + 1) >> 61)
              abort();
            if ((v731 - (char *)v170) >> 2 > v214)
              v214 = (v731 - (char *)v170) >> 2;
            if ((unint64_t)(v731 - (char *)v170) >= 0x7FFFFFFFFFFFFFF8)
              v215 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v215 = v214;
            if (v215)
            {
              if (v215 >> 61)
                goto LABEL_838;
              v216 = (char *)operator new(8 * v215);
            }
            else
            {
              v216 = 0;
            }
            v217 = (uint64_t *)&v216[8 * v213];
            v757.__begin_ = 0;
            *v217 = v210;
            v716 = v217 + 1;
            v218 = (char *)v174 - (char *)v170;
            if (v174 != v170)
            {
              v219 = v218 - 8;
              if ((unint64_t)(v218 - 8) < 0x138)
              {
                v220 = v174;
                goto LABEL_305;
              }
              v222 = v219 & 0xFFFFFFFFFFFFFFF8;
              if ((uint64_t *)((char *)v174 - (v219 & 0xFFFFFFFFFFFFFFF8) - 8) > v174 - 1)
              {
                v220 = v174;
                goto LABEL_305;
              }
              if (&v216[v7 - 8 - v222] > &v216[v7 - 8])
              {
                v220 = v174;
                goto LABEL_305;
              }
              v223 = v219 >> 3;
              if (&v174[-v223 - 1] < v217)
              {
                v224 = (unint64_t)&v216[v7 - v222 - 8];
                v220 = v174;
                if (v224 < (unint64_t)v174)
                  goto LABEL_849;
              }
              v225 = v223 + 1;
              v220 = &v174[-(v225 & 0x3FFFFFFFFFFFFFFCLL)];
              v226 = &v216[8 * v213 - 16];
              v227 = v174 - 4;
              v228 = v225 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v230 = *(_OWORD *)v227;
                v229 = *((_OWORD *)v227 + 1);
                *(_OWORD *)v227 = 0uLL;
                *((_OWORD *)v227 + 1) = 0uLL;
                v227 -= 4;
                *((_OWORD *)v226 - 1) = v230;
                *(_OWORD *)v226 = v229;
                v226 -= 32;
                v228 -= 4;
              }
              while (v228);
              v217 -= v225 & 0x3FFFFFFFFFFFFFFCLL;
              if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_849:
                do
                {
LABEL_305:
                  v221 = *--v220;
                  *v220 = 0;
                  *--v217 = v221;
                }
                while (v220 != v170);
              }
              do
              {
                v233 = *--v174;
                v232 = v233;
                *v174 = 0;
                if (v233)
                {
                  v234 = *(_QWORD **)(v232 + 56);
                  if (v234)
                  {
                    v235 = *(_QWORD **)(v232 + 64);
                    v231 = *(_QWORD *)(v232 + 56);
                    if (v235 != v234)
                    {
                      do
                      {
                        v237 = *--v235;
                        v7 = v237;
                        *v235 = 0;
                        if (v237)
                        {
                          (**(void (***)(uint64_t, uint64_t))v7)(v7, v231);
                          if ((v238 & 1) == 0
                          {
                            v239 = operator new();
                            *(_QWORD *)(v239 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v239 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v239 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v239 = &off_1E42B5668;
                            *(_QWORD *)(v239 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v239 + 72) = 0u;
                            *(_OWORD *)(v239 + 88) = 0u;
                            *(_OWORD *)(v239 + 104) = 0u;
                            *(_OWORD *)(v239 + 120) = 0u;
                            *(_OWORD *)(v239 + 136) = 0u;
                            *(_OWORD *)(v239 + 152) = 0u;
                            *(_OWORD *)(v239 + 168) = 0u;
                            *(_OWORD *)(v239 + 184) = 0u;
                            *(_OWORD *)(v239 + 200) = 0u;
                            *(_OWORD *)(v239 + 216) = 0u;
                            *(_OWORD *)(v239 + 232) = 0u;
                            *(_QWORD *)(v239 + 248) = 0;
                            v732 = v239;
                            *(_OWORD *)(v239 + 56) = 0u;
                            v240 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v239 + 56), 0);
                            if ((_DWORD)v240)
                              geo::read_write_lock::logFailure(v240, (uint64_t)"initialization", v241);
                            v236 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v732 + 48) = v236;
                            malloc_set_zone_name(v236, "VectorKitLabels");
                            *(_QWORD *)(v732 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v732;
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                        }
                      }
                      while (v235 != v234);
                      v231 = *(_QWORD *)(v232 + 56);
                    }
                    *(_QWORD *)(v232 + 64) = v234;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v232 + 80) + 40))(*(_QWORD *)(v232 + 80), v231, *(_QWORD *)(v232 + 72) - v231);
                  }
                  MEMORY[0x1A1AF4E00](v232, 0x1020C4010FC18DELL);
                }
              }
              while (v174 != v170);
            }
            v731 = &v216[8 * v215];
            if (v170)
              operator delete(v170);
            v170 = v217;
            v174 = v716;
            v212 = v757.__begin_;
            if (!v757.__begin_)
              goto LABEL_346;
LABEL_334:
            v242 = (_QWORD *)*((_QWORD *)v212 + 7);
            if (v242)
            {
              v243 = (_QWORD *)*((_QWORD *)v212 + 8);
              v244 = *((_QWORD *)v212 + 7);
              if (v243 != v242)
              {
                do
                {
                  v245 = *--v243;
                  v7 = v245;
                  *v243 = 0;
                  if (v245)
                  {
                    (**(void (***)(uint64_t, uint64_t))v7)(v7, v244);
                    if ((v246 & 1) == 0
                    {
                      v247 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v247, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                  }
                }
                while (v243 != v242);
                v244 = *((_QWORD *)v212 + 7);
              }
              *((_QWORD *)v212 + 8) = v242;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v212 + 10) + 40))(*((_QWORD *)v212 + 10), v244, *((_QWORD *)v212 + 9) - v244);
            }
            MEMORY[0x1A1AF4E00](v212, 0x1020C4010FC18DELL);
            goto LABEL_346;
          }
LABEL_225:
          v9 = v724;
          v171 = v174;
          v90 = a1;
          v720 = (uint64_t *)*v720;
          if (!v720)
            goto LABEL_401;
        }
        v181 = v180 - 8;
        if ((unint64_t)(v180 - 8) < 0x138)
        {
          v182 = v171;
          goto LABEL_243;
        }
        v184 = v181 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v171 - (v181 & 0xFFFFFFFFFFFFFFF8) - 8) > v171 - 1)
        {
          v182 = v171;
          goto LABEL_243;
        }
        if (&v178[v176 - 8 - v184] > &v178[v176 - 8])
        {
          v182 = v171;
          goto LABEL_243;
        }
        v185 = v181 >> 3;
        if (&v171[-v185 - 1] < v179)
        {
          v186 = (unint64_t)&v178[v176 - v184 - 8];
          v182 = v171;
          if (v186 < (unint64_t)v171)
            goto LABEL_850;
        }
        v187 = v185 + 1;
        v182 = &v171[-(v187 & 0x3FFFFFFFFFFFFFFCLL)];
        v188 = &v178[8 * v7 - 16];
        v189 = v171 - 4;
        v190 = v187 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v192 = *(_OWORD *)v189;
          v191 = *((_OWORD *)v189 + 1);
          *(_OWORD *)v189 = 0uLL;
          *((_OWORD *)v189 + 1) = 0uLL;
          v189 -= 4;
          *((_OWORD *)v188 - 1) = v192;
          *(_OWORD *)v188 = v191;
          v188 -= 32;
          v190 -= 4;
        }
        while (v190);
        v179 -= v187 & 0x3FFFFFFFFFFFFFFCLL;
        if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_850:
          do
          {
LABEL_243:
            v183 = *--v182;
            *v182 = 0;
            *--v179 = v183;
          }
          while (v182 != v170);
        }
        do
        {
          v195 = *--v171;
          v194 = v195;
          *v171 = 0;
          if (v195)
          {
            v196 = *(_QWORD **)(v194 + 56);
            if (v196)
            {
              v197 = *(_QWORD **)(v194 + 64);
              v193 = *(_QWORD *)(v194 + 56);
              if (v197 != v196)
              {
                do
                {
                  v198 = *--v197;
                  v7 = v198;
                  *v197 = 0;
                  if (v198)
                  {
                    (**(void (***)(uint64_t, uint64_t))v7)(v7, v193);
                    if ((v199 & 1) == 0
                    {
                      v200 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v200, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                  }
                }
                while (v197 != v196);
                v193 = *(_QWORD *)(v194 + 56);
              }
              *(_QWORD *)(v194 + 64) = v196;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v194 + 80) + 40))(*(_QWORD *)(v194 + 80), v193, *(_QWORD *)(v194 + 72) - v193);
            }
            MEMORY[0x1A1AF4E00](v194, 0x1020C4010FC18DELL);
          }
        }
        while (v171 != v170);
        goto LABEL_267;
      }
      v174 = 0;
      v170 = 0;
LABEL_401:
      v281 = *(v709 - 1);
      v282 = *(_QWORD *)(v281 + 248);
      v283 = *(int8x16_t **)(v281 + 256);
      v284 = 126 - 2 * __clz(((uint64_t)v283->i64 - v282) >> 3);
      if (v283 == (int8x16_t *)v282)
        v285 = 0;
      else
        v285 = v284;
      std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v282, v283, v285, 1);
      v286 = v170;
      if (v170 == v174)
      {
        if (!v174)
          goto LABEL_4;
      }
      else
      {
        do
        {
          v6 = *(v709 - 1);
          v7 = *v286;
          *v286 = 0;
          *(_QWORD *)&v743 = v7;
          v289 = *(uint64_t **)(v6 + 256);
          v288 = *(_QWORD *)(v6 + 264);
          if ((unint64_t)v289 >= v288)
          {
            v291 = *(_QWORD *)(v6 + 248);
            v292 = (char *)v289 - v291;
            v293 = ((uint64_t)v289 - v291) >> 3;
            if ((unint64_t)(v293 + 1) >> 61)
              abort();
            v294 = v288 - v291;
            v295 = v294 >> 2;
            if (v294 >> 2 <= (unint64_t)(v293 + 1))
              v295 = v293 + 1;
            if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8)
              v296 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v296 = v295;
            v733 = v286;
            if (v296)
            {
              if (v296 >> 61)
                goto LABEL_838;
              v297 = (char *)operator new(8 * v296);
            }
            else
            {
              v297 = 0;
            }
            v298 = (uint64_t *)&v297[8 * v293];
            v299 = &v297[8 * v296];
            *(_QWORD *)&v743 = 0;
            *v298 = v7;
            v290 = v298 + 1;
            v300 = *(char **)(v6 + 248);
            v301 = *(char **)(v6 + 256);
            if (v301 == v300)
            {
              *(_QWORD *)(v6 + 248) = v298;
              *(_QWORD *)(v6 + 256) = v290;
              *(_QWORD *)(v6 + 264) = v299;
            }
            else
            {
              v302 = v301 - v300 - 8;
              if (v302 <= 0x77)
                goto LABEL_851;
              if (&v301[-(v302 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v298
                && &v292[(_QWORD)v297 - (v302 & 0xFFFFFFFFFFFFFFF8) - 8] < v301)
              {
                goto LABEL_851;
              }
              v304 = (v302 >> 3) + 1;
              v305 = &v297[8 * v293 - 16];
              v306 = v301 - 32;
              v307 = v304 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v309 = *(_OWORD *)v306;
                v308 = *((_OWORD *)v306 + 1);
                *(_OWORD *)v306 = 0uLL;
                *((_OWORD *)v306 + 1) = 0uLL;
                v306 -= 32;
                *((_OWORD *)v305 - 1) = v309;
                *(_OWORD *)v305 = v308;
                v305 -= 32;
                v307 -= 4;
              }
              while (v307);
              v298 -= v304 & 0x3FFFFFFFFFFFFFFCLL;
              v301 -= 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
              if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_851:
                do
                {
                  v310 = *((_QWORD *)v301 - 1);
                  v301 -= 8;
                  *(_QWORD *)v301 = 0;
                  *--v298 = v310;
                }
                while (v301 != v300);
              }
              v301 = *(char **)(v6 + 248);
              v311 = *(char **)(v6 + 256);
              *(_QWORD *)(v6 + 248) = v298;
              *(_QWORD *)(v6 + 256) = v290;
              *(_QWORD *)(v6 + 264) = v299;
              while (v311 != v301)
              {
                v314 = *((_QWORD *)v311 - 1);
                v311 -= 8;
                v313 = v314;
                *(_QWORD *)v311 = 0;
                if (v314)
                {
                  v315 = *(_QWORD **)(v313 + 56);
                  if (v315)
                  {
                    v316 = v170;
                    v317 = *(_QWORD **)(v313 + 64);
                    v312 = *(_QWORD *)(v313 + 56);
                    if (v317 != v315)
                    {
                      do
                      {
                        v318 = *--v317;
                        v7 = v318;
                        *v317 = 0;
                        if (v318)
                        {
                          (**(void (***)(uint64_t, uint64_t))v7)(v7, v312);
                          if ((v319 & 1) == 0
                          {
                            v320 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v320, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                        }
                      }
                      while (v317 != v315);
                      v312 = *(_QWORD *)(v313 + 56);
                    }
                    *(_QWORD *)(v313 + 64) = v315;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v313 + 80) + 40))(*(_QWORD *)(v313 + 80), v312, *(_QWORD *)(v313 + 72) - v312);
                    v170 = v316;
                  }
                  MEMORY[0x1A1AF4E00](v313, 0x1020C4010FC18DELL);
                }
              }
            }
            v9 = v724;
            if (v301)
              operator delete(v301);
            v286 = v733;
          }
          else
          {
            *(_QWORD *)&v743 = 0;
            *v289 = v7;
            v290 = v289 + 1;
          }
          *(_QWORD *)(v6 + 256) = v290;
          v321 = v743;
          *(_QWORD *)&v743 = 0;
          v90 = a1;
          if (v321)
          {
            v6 = *(_QWORD *)(v321 + 56);
            if (v6)
            {
              v322 = *(_QWORD **)(v321 + 64);
              v287 = *(_QWORD *)(v321 + 56);
              if (v322 != (_QWORD *)v6)
              {
                do
                {
                  v323 = *--v322;
                  v7 = v323;
                  *v322 = 0;
                  if (v323)
                  {
                    (**(void (***)(uint64_t, uint64_t))v7)(v7, v287);
                    if ((v324 & 1) == 0
                    {
                      v325 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v325, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                  }
                }
                while (v322 != (_QWORD *)v6);
                v287 = *(_QWORD *)(v321 + 56);
              }
              *(_QWORD *)(v321 + 64) = v6;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v321 + 80) + 40))(*(_QWORD *)(v321 + 80), v287, *(_QWORD *)(v321 + 72) - v287);
              v90 = a1;
            }
            MEMORY[0x1A1AF4E00](v321, 0x1020C4010FC18DELL);
          }
          ++v286;
        }
        while (v286 != v174);
        if (!v170)
          goto LABEL_4;
        do
        {
          v328 = *--v174;
          v327 = v328;
          *v174 = 0;
          if (v328)
          {
            v329 = *(_QWORD *)(v327 + 56);
            if (v329)
            {
              v6 = *(_QWORD *)(v327 + 64);
              v326 = *(_QWORD *)(v327 + 56);
              if (v6 != v329)
              {
                do
                {
                  v330 = *(_QWORD *)(v6 - 8);
                  v6 -= 8;
                  v7 = v330;
                  *(_QWORD *)v6 = 0;
                  if (v330)
                  {
                    (**(void (***)(uint64_t, uint64_t))v7)(v7, v326);
                    if ((v331 & 1) == 0
                    {
                      v332 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v332, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
                  }
                }
                while (v6 != v329);
                v326 = *(_QWORD *)(v327 + 56);
              }
              *(_QWORD *)(v327 + 64) = v329;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v327 + 80) + 40))(*(_QWORD *)(v327 + 80), v326, *(_QWORD *)(v327 + 72) - v326);
            }
            MEMORY[0x1A1AF4E00](v327, 0x1020C4010FC18DELL);
          }
        }
        while (v174 != v170);
      }
      operator delete(v170);
LABEL_4:
      std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&__p);
      v703 = (uint64_t *)*v703;
      if (!v703)
        goto LABEL_499;
    }
  }
  v90 = a1;
  v9 = 0;
  v709 = 0;
LABEL_499:
  v343 = *(unsigned __int8 *)(a6 + 24);
  if (*(_BYTE *)(a6 + 24))
  {
    LOBYTE(v6) = *(_BYTE *)(a6 + 1);
    v344 = *(_BYTE *)a6;
    v8 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v344 = 0;
  }
  *(_QWORD *)v90 = &off_1E42AF388;
  *((_QWORD *)v90 + 1) = 0;
  *((_QWORD *)v90 + 2) = 0;
  *((_QWORD *)v90 + 3) = 0;
  v345 = (char *)v709 - (char *)v9;
  if (v709 == v9)
  {
    v698 = 0;
    v348 = 0;
  }
  else
  {
    if (v345 < 0)
      abort();
    v346 = operator new((char *)v709 - (char *)v9);
    *((_QWORD *)v90 + 1) = v346;
    *((_QWORD *)v90 + 2) = v346;
    v347 = (char *)&v346[v345 >> 3];
    *((_QWORD *)v90 + 3) = v347;
    v348 = v346;
    memcpy(v346, v9, v345);
    v698 = v347;
    *((_QWORD *)v90 + 2) = v347;
  }
  *((_OWORD *)v90 + 2) = 0u;
  *((_QWORD *)v90 + 9) = 0;
  v693 = (gdc::GlobeTileGrid **)(v90 + 72);
  v90[80] = 0;
  v90[104] = 0;
  *((_OWORD *)v90 + 3) = 0u;
  v696 = (void **)(v90 + 32);
  v90[64] = 0;
  if (v343)
  {
    v90[80] = v344;
    v90[81] = v6;
    *(_QWORD *)(v90 + 84) = v8;
    v90[104] = 1;
  }
  v725 = v9;
  if (v348 == v698)
  {
    v349 = 0;
    v350 = 0;
    goto LABEL_604;
  }
  v691 = (const QuadTile *)(v90 + 80);
  v349 = 0;
  v350 = 0;
  v708 = 0;
  while (2)
  {
    v702 = v348;
    v351 = (_QWORD *)*v348;
    v351[1] = v90;
    v353 = (_QWORD **)v351[31];
    v352 = (_QWORD **)v351[32];
    v704 = v352;
LABEL_514:
    if (v353 != v352)
    {
      v706 = v350;
      v713 = v349;
      v710 = v353;
      v354 = *v353;
      v354[1] = **v353;
      v354[3] = v354[2];
      v354[5] = v354[4];
      v749 = 0;
      __p = 0;
      *(_QWORD *)&v750 = 0;
      memset(&v757, 0, sizeof(v757));
      v356 = (_QWORD **)v354[7];
      v355 = (_QWORD **)v354[8];
      if (v356 == v355)
        goto LABEL_552;
      v718 = (_QWORD **)v354[8];
      v721 = v354;
LABEL_520:
      v359 = *v356;
      *(_QWORD *)&v743 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v359, &__p, &v757, (uint64_t *)&v743);
      v360 = v743;
      v361 = v743 - 2;
      if ((unint64_t)v743 < 2)
        goto LABEL_519;
      v362 = (char *)__p;
      v363 = (float *)((char *)__p + 8);
      v364 = *(float *)__p;
      v365 = 1;
      while (1)
      {
        if (vabds_f32(*v363, v364) >= 1.0e-10)
        {
          v370 = v363[1] - *((float *)__p + 1);
          goto LABEL_528;
        }
        v366 = *((float *)__p + 1);
        v367 = v363[1];
        if (vabds_f32(v367, v366) >= 1.0e-10)
          break;
        ++v365;
        v363 += 2;
        if ((_QWORD)v743 == v365)
        {
          v368 = 0.0;
          v369 = 1.0;
          goto LABEL_529;
        }
      }
      v370 = v367 - v366;
LABEL_528:
      v371 = *v363 - v364;
      v372 = 1.0 / sqrtf((float)(v371 * v371) + (float)(v370 * v370));
      v369 = v372 * v371;
      v368 = v372 * v370;
LABEL_529:
      v373 = v743 - 1;
      if ((unint64_t)(v743 - 1) < 2)
      {
        v395 = 4;
        goto LABEL_549;
      }
      v374 = (float *)((char *)__p + 16);
      v375 = 1;
      v376 = 2;
      while (1)
      {
        v381 = v369;
        v382 = v368;
        v383 = v375 + 1;
        if (v375 + 1 < v360)
        {
          v384 = (float *)&v362[8 * v375];
          v385 = *v384;
          v386 = v384[1];
          v387 = v374;
          v388 = v361;
          while (vabds_f32(*v387, v385) < 1.0e-10)
          {
            v389 = v387[1];
            if (vabds_f32(v389, v386) >= 1.0e-10)
              goto LABEL_543;
            v387 += 2;
            if (!--v388)
              goto LABEL_544;
          }
          v389 = v387[1];
LABEL_543:
          v390 = v389 - v386;
          v391 = *v387 - v385;
          v392 = 1.0 / sqrtf((float)(v391 * v391) + (float)(v390 * v390));
          v369 = v392 * v391;
          v368 = v392 * v390;
        }
LABEL_544:
        v393 = atan2f(v368, v369);
        v378 = v393 - atan2f(v382, v381);
        v394 = v378;
        if (v378 > 3.14159265)
        {
          v377 = -6.28318531;
        }
        else
        {
          if (v394 >= -3.14159265)
            goto LABEL_533;
          v377 = 6.28318531;
        }
        v378 = v394 + v377;
LABEL_533:
        v379 = fmaxf(ceilf(fabsf(v378) * 1.2732), 1.0);
        v380 = 2;
        if ((unint64_t)v379 >= 2)
          v380 = 2 * (unint64_t)v379;
        v376 += v380;
        --v361;
        v374 += 2;
        v375 = v383;
        if (v383 == v373)
        {
          v395 = v376 + 2;
          v262 = (unint64_t)(v376 + 2) >= 0x10000;
          v90 = a1;
          v9 = v725;
          if (v262)
          {
            v359[2] = v359[1];
            v357 = v359[3];
          }
          else
          {
LABEL_549:
            v396 = 3 * v395 + v359[3];
            v359[2] = v359[1] + v395;
            v357 = v396 - 6;
          }
          v355 = v718;
          v354 = v721;
          v359[4] = v357;
          v359[6] = v359[5];
LABEL_519:
          v358 = *v356++;
          v354[1] = v358[2] + v354[1] - v358[1];
          v354[3] = v358[4] + v354[3] - v358[3];
          v354[5] = v358[6] + v354[5] - v358[5];
          if (v356 != v355)
            goto LABEL_520;
          if (v757.__begin_)
            operator delete(v757.__begin_);
LABEL_552:
          v349 = v713;
          if (__p)
            operator delete(__p);
          v397 = v710;
          v398 = *v710;
          if (v706 < v708)
          {
            *(_QWORD *)v706 = v398;
            v350 = v706 + 8;
            goto LABEL_513;
          }
          v399 = (v706 - v713) >> 3;
          v400 = v399 + 1;
          if ((unint64_t)(v399 + 1) >> 61)
            abort();
          if ((v708 - v713) >> 2 > v400)
            v400 = (v708 - v713) >> 2;
          if ((unint64_t)(v708 - v713) >= 0x7FFFFFFFFFFFFFF8)
            v401 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v401 = v400;
          if (v401)
          {
            if (!(v401 >> 61))
            {
              v402 = operator new(8 * v401);
              goto LABEL_565;
            }
LABEL_838:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v402 = 0;
LABEL_565:
          v403 = &v402[8 * v399];
          *(_QWORD *)v403 = v398;
          v350 = v403 + 8;
          if (v706 == v713)
          {
            v90 = a1;
            goto LABEL_571;
          }
          v404 = v706 - 8 - v713;
          if (v404 < 0x168
            || &v402[v706 - v713 - 8 - (v404 & 0xFFFFFFFFFFFFFFF8)] > &v402[v706 - v713 - 8]
            || &v706[-(v404 & 0xFFFFFFFFFFFFFFF8) - 8] > v706 - 8
            || (unint64_t)(v713 - v402) < 0x20)
          {
            v405 = v706;
            v90 = a1;
            do
            {
LABEL_568:
              v406 = *((_QWORD *)v405 - 1);
              v405 -= 8;
              *((_QWORD *)v403 - 1) = v406;
              v403 -= 8;
            }
            while (v405 != v713);
            goto LABEL_571;
          }
          v407 = (v404 >> 3) + 1;
          v405 = &v706[-8 * (v407 & 0x3FFFFFFFFFFFFFFCLL)];
          v408 = &v402[8 * v399 - 16];
          v409 = v706 - 16;
          v410 = v407 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v411 = *(_OWORD *)v409;
            *(v408 - 1) = *((_OWORD *)v409 - 1);
            *v408 = v411;
            v408 -= 2;
            v409 -= 32;
            v410 -= 4;
          }
          while (v410);
          v403 -= 8 * (v407 & 0x3FFFFFFFFFFFFFFCLL);
          v90 = a1;
          if (v407 != (v407 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_568;
LABEL_571:
          v708 = &v402[8 * v401];
          if (v713)
            operator delete(v713);
          v349 = v403;
          v397 = v710;
LABEL_513:
          v353 = (_QWORD **)(v397 + 1);
          v352 = v704;
          goto LABEL_514;
        }
      }
    }
    v348 = v702 + 1;
    if (v702 + 1 != v698)
      continue;
    break;
  }
  if (!v90[64])
    goto LABEL_604;
  v412 = (gdc::GlobeTileGrid *)operator new();
  v413 = v412;
  if (!v90[104])
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  gdc::GlobeTileGrid::GlobeTileGrid(v412, v691);
  v414 = *v693;
  *v693 = v413;
  if (v414)
  {
    v415 = *((_QWORD *)v414 + 323);
    if (v415)
      MEMORY[0x1A1AF4DE8](v415, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v414, 0x1020C4007FF0C4BLL);
    v413 = *v693;
  }
  *((_QWORD *)v413 + 323) = operator new[]();
  if (v349 != v350)
  {
    v416 = v349;
    do
    {
      v417 = *(uint64_t **)(*(_QWORD *)v416 + 56);
      v418 = *(uint64_t **)(*(_QWORD *)v416 + 64);
      while (v417 != v418)
      {
        v419 = *v417;
        v420 = *(_QWORD *)(*v417 + 80);
        if (v420)
        {
          v421 = *(_QWORD *)(v419 + 88);
          if (v421)
          {
            v422 = 0;
            v423 = *(_QWORD *)(v419 + 72);
            v424 = *v693;
            v425 = *((_QWORD *)*v693 + 323);
            v426 = (float *)(v423 + 4);
            do
            {
              v427 = *((float *)v424 + 648) * *(float *)(v420 + 4 * v422);
              v428 = vcvts_n_u32_f32(*(v426 - 1), 2uLL);
              if (v428 >= 3)
                v428 = 3;
              v429 = *v426;
              v426 += 2;
              v430 = vcvts_n_u32_f32(v429, 2uLL);
              if (v430 >= 3)
                v430 = 3;
              v431 = (float *)(v425 + 8 * (v428 | (4 * v430)));
              v432 = fminf(v427, *v431);
              v433 = fmaxf(v431[1], v427);
              *v431 = v432;
              v431[1] = v433;
              ++v422;
            }
            while (v421 > v422);
          }
        }
        ++v417;
      }
      v416 += 8;
    }
    while (v416 != v350);
  }
  gdc::GlobeTileGrid::endBuildingHeightRange(*v693);
LABEL_604:
  v434 = 0;
  v435 = 0;
  v436 = 0;
  v437 = 0;
  v714 = v349;
  v438 = (v350 - v349) >> 3;
  v722 = v438;
  do
  {
    if (v435 == v438
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v714[8 * v435] + 8) + v437 - **(_QWORD **)&v714[8 * v435]) >= 0x10000)
    {
      v439 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v439->__shared_owners_ = 0;
      v440 = (unint64_t *)&v439->__shared_owners_;
      v439->__shared_weak_owners_ = 0;
      v439->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB50;
      v439[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v439[1].__shared_owners_ = 20;
      LODWORD(v439[1].__shared_weak_owners_) = 1;
      v439[2].__vftable = 0;
      v439[2].__shared_owners_ = 0;
      v439[2].__shared_weak_owners_ = 0;
      v439[3].__vftable = (std::__shared_weak_count_vtbl *)(20 * v437);
      v441 = (std::__shared_count)0;
      *(_OWORD *)&v439[3].__shared_owners_ = 0u;
      v439[4].std::__shared_count = 0u;
      v439[4].__shared_weak_owners_ = 0;
      if ((v442 & 1) == 0)
      {
        v441 = (std::__shared_count)0;
        if (v502)
        {
          v503 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v503, "GeoGL", 0xA3D02C1100000005);
          v441 = (std::__shared_count)0;
        }
      }
      v439[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
      v439[5].__shared_owners_ = 0;
      *((std::__shared_count *)v439 + 11) = v441;
      v439[8].std::__shared_count = v441;
      v439[8].__shared_weak_owners_ = 0;
      v439[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v439 + 10) = v441;
      v439[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v439[5].__shared_weak_owners_) = 0;
      v439[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B77A0;
      v439[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v439[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::TrafficBase::defaultVboReflection;
      v439[9].__shared_owners_ = (uint64_t)&unk_1E42B77C0;
      __p = &v439[1];
      v749 = v439;
      v443 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v443 + 1) = 0;
      v444 = (unint64_t *)(v443 + 8);
      *((_QWORD *)v443 + 2) = 0;
      *((_QWORD *)v443 + 3) = &off_1E42B5748;
      *(_QWORD *)v443 = &off_1E42DF1E8;
      *((_QWORD *)v443 + 4) = 2;
      *((_DWORD *)v443 + 10) = 257;
      *((_QWORD *)v443 + 6) = 0;
      *((_QWORD *)v443 + 7) = 0;
      *((_QWORD *)v443 + 8) = 0;
      *((_QWORD *)v443 + 9) = 2 * v436;
      v445 = 0uLL;
      *((_OWORD *)v443 + 5) = 0u;
      *((_OWORD *)v443 + 6) = 0u;
      *((_QWORD *)v443 + 14) = 0;
      if ((v446 & 1) == 0)
      {
        v445 = 0uLL;
        if (v504)
        {
          v505 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v505, "GeoGL", 0xA3D02C1100000005);
          v445 = 0uLL;
        }
      }
      *((_QWORD *)v443 + 15) = ggl::Allocator::instance(void)::alloc;
      *((_QWORD *)v443 + 16) = 0;
      *((_OWORD *)v443 + 11) = v445;
      *((_OWORD *)v443 + 12) = v445;
      *((_QWORD *)v443 + 26) = 0;
      *((_QWORD *)v443 + 27) = -1;
      *((_OWORD *)v443 + 10) = v445;
      *((_OWORD *)v443 + 9) = xmmword_19FFB2DD0;
      *((_DWORD *)v443 + 34) = 0;
      *((_DWORD *)v443 + 60) = 0;
      *((_QWORD *)v443 + 3) = &off_1E42B6B88;
      *((_QWORD *)v443 + 4) = 2;
      *((_QWORD *)v443 + 28) = &unk_1E42B6BA8;
      *((_QWORD *)v443 + 29) = "BatchType/IData";
      v757.__begin_ = (std::vector<unsigned int>::pointer)(v443 + 24);
      v757.__end_ = (std::vector<unsigned int>::pointer)v443;
      v447 = operator new();
      v448 = v447;
      *(_QWORD *)&v743 = v439 + 1;
      *((_QWORD *)&v743 + 1) = v439;
      do
        v449 = __ldxr(v440);
      while (__stxr(v449 + 1, v440));
      *(_QWORD *)&v738 = v443 + 24;
      *((_QWORD *)&v738 + 1) = v443;
      v9 = v725;
      do
        v450 = __ldxr(v444);
      while (__stxr(v450 + 1, v444));
      ggl::TrafficBase::BaseMesh::BaseMesh(v447, (uint64_t)"BatchType/Mesh", (uint64_t *)&v743, (uint64_t *)&v738);
      do
        v451 = __ldaxr(v444);
      while (__stlxr(v451 - 1, v444));
      if (v451)
      {
        v452 = (std::__shared_weak_count *)*((_QWORD *)&v743 + 1);
        if (!*((_QWORD *)&v743 + 1))
          goto LABEL_624;
      }
      else
      {
        (*(void (**)(char *))(*(_QWORD *)v443 + 16))(v443);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v443);
        v452 = (std::__shared_weak_count *)*((_QWORD *)&v743 + 1);
        if (!*((_QWORD *)&v743 + 1))
          goto LABEL_624;
      }
      v453 = (unint64_t *)&v452->__shared_owners_;
      do
        v454 = __ldaxr(v453);
      while (__stlxr(v454 - 1, v453));
      if (!v454)
      {
        ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
        std::__shared_weak_count::__release_weak(v452);
      }
LABEL_624:
      v456 = (char *)*((_QWORD *)a1 + 5);
      v455 = *((_QWORD *)a1 + 6);
      if ((unint64_t)v456 < v455)
      {
        *(_QWORD *)v456 = v448;
        v457 = v456 + 8;
        goto LABEL_648;
      }
      v458 = (char *)*v696;
      v459 = v456 - (_BYTE *)*v696;
      v460 = v459 >> 3;
      v461 = (v459 >> 3) + 1;
      if (v461 >> 61)
        abort();
      v462 = v455 - (_QWORD)v458;
      if (v462 >> 2 > v461)
        v461 = v462 >> 2;
      if ((unint64_t)v462 >= 0x7FFFFFFFFFFFFFF8)
        v463 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v463 = v461;
      if (v463)
      {
        if (v463 >> 61)
          goto LABEL_838;
        v464 = operator new(8 * v463);
      }
      else
      {
        v464 = 0;
      }
      v465 = (uint64_t *)&v464[8 * v460];
      *v465 = v448;
      v457 = v465 + 1;
      if (v456 == v458)
      {
        v458 = v456;
        v9 = v725;
        goto LABEL_646;
      }
      v466 = v456 - 8 - v458;
      if (v466 >= 0x58)
      {
        v467 = v456 - &v464[v459];
        v9 = v725;
        if (v467 >= 0x20)
        {
          v468 = (v466 >> 3) + 1;
          v469 = &v464[8 * v460 - 16];
          v470 = v456 - 16;
          v471 = v468 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v472 = *(_OWORD *)v470;
            *(v469 - 1) = *((_OWORD *)v470 - 1);
            *v469 = v472;
            v469 -= 2;
            v470 -= 32;
            v471 -= 4;
          }
          while (v471);
          v465 -= v468 & 0x3FFFFFFFFFFFFFFCLL;
          v456 -= 8 * (v468 & 0x3FFFFFFFFFFFFFFCLL);
          if (v468 == (v468 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_646;
        }
      }
      else
      {
        v9 = v725;
      }
      do
      {
        v473 = *((_QWORD *)v456 - 1);
        v456 -= 8;
        *--v465 = v473;
      }
      while (v456 != v458);
      v458 = (char *)*v696;
LABEL_646:
      *((_QWORD *)a1 + 4) = v465;
      *((_QWORD *)a1 + 5) = v457;
      *((_QWORD *)a1 + 6) = &v464[8 * v463];
      if (v458)
        operator delete(v458);
LABEL_648:
      *((_QWORD *)a1 + 5) = v457;
      v90 = a1;
      if (v434 < v435)
      {
        v474 = 0;
        v475 = v434;
        do
        {
          v476 = *(_QWORD *)&v714[8 * v475];
          v477 = *(_QWORD *)(v476 + 32);
          v478 = v477 + v474;
          v479 = *(_QWORD *)(v476 + 40) + v474;
          *(_QWORD *)(v476 + 32) = v478;
          *(_QWORD *)(v476 + 40) = v479;
          v474 = v479 - v477;
          ++v475;
        }
        while (v435 != v475);
        v480 = 0;
        do
        {
          v481 = *(uint64_t **)&v714[8 * v434];
          v482 = *v481;
          v483 = *v481 + v480;
          v484 = v481[1] + v480;
          *v481 = v483;
          v481[1] = v484;
          v485 = v481[2];
          v486 = v485 + v474;
          v487 = v481[3] + v474;
          v481[2] = v486;
          v481[3] = v487;
          v481[11] = v448;
          v488 = (_QWORD *)v481[7];
          v489 = (_QWORD *)v481[8];
          if (v488 != v489)
          {
            v490 = v481[4];
            do
            {
              v491 = (_QWORD *)*v488++;
              v492 = v491[2] - v491[1];
              v491[1] = v483;
              v483 += v492;
              v493 = v491[4] - v491[3];
              v491[2] = v483;
              v491[3] = v486;
              v486 += v493;
              v494 = v491[6] - v491[5];
              v491[4] = v486;
              v491[5] = v490;
              v490 += v494;
              v491[6] = v490;
            }
            while (v488 != v489);
          }
          v480 = v484 - v482;
          v474 = v487 - v485;
          ++v434;
        }
        while (v434 != v435);
      }
      end = (std::__shared_weak_count *)v757.__end_;
      v438 = v722;
      if (!v757.__end_)
        goto LABEL_661;
      v496 = (unint64_t *)(v757.__end_ + 2);
      do
        v497 = __ldaxr(v496);
      while (__stlxr(v497 - 1, v496));
      if (!v497)
      {
        ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
        std::__shared_weak_count::__release_weak(end);
        v498 = v749;
        if (v749)
          goto LABEL_662;
      }
      else
      {
LABEL_661:
        v498 = v749;
        if (v749)
        {
LABEL_662:
          v499 = (unint64_t *)&v498->__shared_owners_;
          do
            v500 = __ldaxr(v499);
          while (__stlxr(v500 - 1, v499));
          if (!v500)
          {
            ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
            std::__shared_weak_count::__release_weak(v498);
          }
        }
      }
      v437 = 0;
      v436 = 0;
      v434 = v435;
    }
    if (v435 < v438)
    {
      v501 = *(_QWORD **)&v714[8 * v435];
      v437 = v501[1] + v437 - *v501;
      v436 = v501[3] + v436 + v501[5] - (v501[2] + v501[4]);
    }
    ++v435;
  }
  while (v435 <= v438);
  if (v714)
    operator delete(v714);
  if (v9)
    operator delete(v9);
  *(_QWORD *)v90 = &off_1E428C860;
  *((_QWORD *)v90 + 14) = *a4;
  v506 = a4[1];
  *((_QWORD *)v90 + 15) = v506;
  if (v506)
  {
    v507 = (unint64_t *)(v506 + 8);
    do
      v508 = __ldxr(v507);
    while (__stxr(v508 + 1, v507));
  }
  *((_QWORD *)v90 + 16) = *a5;
  v509 = a5[1];
  *((_QWORD *)v90 + 17) = v509;
  if (v509)
  {
    v510 = (unint64_t *)(v509 + 8);
    do
      v511 = __ldxr(v510);
    while (__stxr(v511 + 1, v510));
  }
  *((_QWORD *)v90 + 18) = 0;
  v512 = *((_QWORD *)v90 + 1);
  v680 = *((_QWORD *)v90 + 2);
  if (v512 != v680)
  {
    v513 = 1.0;
    do
    {
      v515 = *(uint64_t ***)(*(_QWORD *)v512 + 248);
      v514 = *(uint64_t ***)(*(_QWORD *)v512 + 256);
      v681 = v512;
      v682 = v514;
      while (v515 != v514)
      {
        v516 = 0;
        v517 = **(_QWORD **)((*v515)[11] + 64);
        v686 = *v515;
        v518 = **v515;
        v519 = (*v515)[1];
        v743 = 0uLL;
        v520 = *(_QWORD *)(v517 + 8);
        v521 = v520 * v518;
        v522 = v520 * v519;
        if (v520 * v519 != v520 * v518)
        {
          if (a2 && *(_BYTE *)(v517 + 17) != 2)
            v516 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v517, v521, v520 * v519, 1, 1);
          else
            v516 = *(_QWORD *)(v517 + 72) + v521;
        }
        v685 = v515;
        *(_QWORD *)&v523 = a2;
        *((_QWORD *)&v523 + 1) = v517;
        v743 = v523;
        v744 = v521;
        v745 = v522;
        v747 = v516;
        v746 = 257;
        v524 = v686[2];
        v526 = v686[4];
        v525 = v686[5];
        if (v525 == v526)
        {
          v525 = v686[3];
        }
        else
        {
          if (v526 < v524)
            v524 = v686[4];
          if (v686[3] > v525)
            v525 = v686[3];
        }
        v527 = 0;
        v528 = *(_QWORD *)(v686[11] + 96);
        v738 = 0uLL;
        v529 = *(_QWORD *)(v528 + 8);
        v530 = v529 * v524;
        v531 = v529 * v525;
        if (v529 * v525 != v529 * v524)
        {
          if (a2 && *(_BYTE *)(v528 + 17) != 2)
            v527 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v528, v529 * v524, v531, 1, 1);
          else
            v527 = *(_QWORD *)(v528 + 72) + v530;
        }
        *(_QWORD *)&v532 = a2;
        *((_QWORD *)&v532 + 1) = v528;
        v738 = v532;
        v739 = v530;
        v740 = v531;
        v742 = v527;
        v741 = 257;
        v533 = v686[2];
        v534 = v686[4];
        memset(v737, 0, sizeof(v737));
        memset(&v736, 0, sizeof(v736));
        v535 = (std::__shared_weak_count **)v686[7];
        v684 = v686 + 7;
        v536 = (std::__shared_weak_count **)v686[8];
        if (v535 != v536)
        {
          v537 = v527 + 2 * v534 - 2 * v524;
          v538 = v527 + 2 * v533 - 2 * v524;
          v687 = (std::__shared_weak_count **)v686[8];
          while (1)
          {
            v540 = *v535;
            __p = v90;
            v749 = v540;
            v750 = xmmword_19FFB2F80;
            v751 = xmmword_19FFB3450;
            v752 = xmmword_19FFB2FB0;
            v753 = xmmword_19FFB2F60;
            v754 = xmmword_19FFB2F70;
            v755 = xmmword_19FFB3460;
            v764[0] = v516;
            shared_weak_owners = v540->__shared_weak_owners_;
            if (shared_weak_owners != v540->__shared_owners_)
              break;
            v539 = v540->__shared_weak_owners_;
LABEL_710:
            v516 += 20 * (v539 - shared_weak_owners);
            v538 += 2 * (v540[1].__shared_owners_ - (unint64_t)v540[1].__vftable);
            v537 += 2 * ((uint64_t)v540[2].__vftable - v540[1].__shared_weak_owners_);
            if (++v535 == v536)
              goto LABEL_786;
          }
          v763 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v540, v737, &v736, (uint64_t *)&v763);
          v543 = v763;
          if (v763 >= 2)
          {
            v694 = v763 - 2;
            v688 = v535;
            v544 = (char *)v737[0];
            v707 = v736.__begin_;
            v756 = v516;
            v545 = *(unsigned int **)v737[0];
            v546 = v763 - 1;
            if (v763 >= 9)
            {
              v547 = v546 & 0xFFFFFFFFFFFFFFF8;
              v542.i64[1] = *(_QWORD *)v737[0];
              v550 = (int8x16_t)vdupq_lane_s32((int32x2_t)v545, 0);
              v551 = (int32x4_t *)((char *)v737[0] + 40);
              v552 = 0uLL;
              v553 = v546 & 0xFFFFFFFFFFFFFFF8;
              v554 = 0uLL;
              do
              {
                i32 = (const float *)v551[-2].i32;
                v766 = vld2q_f32(i32);
                v557 = *v551;
                v556 = v551[1];
                v551 += 4;
                v558 = (float32x4_t)vuzp1q_s32(v557, v556);
                v559 = (float32x4_t)vuzp2q_s32(v557, v556);
                v560 = vsubq_f32(v766.val[0], (float32x4_t)vextq_s8(v550, (int8x16_t)v766.val[0], 0xCuLL));
                v561 = vsubq_f32(v558, (float32x4_t)vextq_s8((int8x16_t)v766.val[0], (int8x16_t)v558, 0xCuLL));
                v562 = vsubq_f32(v766.val[1], (float32x4_t)vextq_s8(v542, (int8x16_t)v766.val[1], 0xCuLL));
                v766.val[0] = vsubq_f32(v559, (float32x4_t)vextq_s8((int8x16_t)v766.val[1], (int8x16_t)v559, 0xCuLL));
                v552 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v560, v560), v562, v562)), v552);
                v554 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v561, v561), v766.val[0], v766.val[0])), v554);
                v542 = (int8x16_t)v559;
                v550 = (int8x16_t)v558;
                v553 -= 8;
              }
              while (v553);
              v563 = vaddq_f32(v554, v552);
              v548 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v563, v563));
              if (v546 != v547)
              {
                v549 = (float32x2_t)vextq_s8((int8x16_t)v556, (int8x16_t)v556, 8uLL).u64[0];
                goto LABEL_719;
              }
            }
            else
            {
              v547 = 0;
              v548 = 0.0;
              v549 = *(float32x2_t *)v737[0];
LABEL_719:
              v564 = ~v547 + v763;
              v565 = (float32x2_t *)((char *)v737[0] + 8 * v547 + 8);
              do
              {
                v566 = *v565++;
                v567 = vsub_f32(v566, v549);
                v548 = sqrtf(vaddv_f32(vmul_f32(v567, v567))) + v548;
                v549 = v566;
                --v564;
              }
              while (v564);
            }
            v568 = v548;
            v569 = v513 / v548;
            if (v568 <= 1.0e-10)
              v569 = 0.0;
            v705 = v569;
            v570 = (float *)((char *)v737[0] + 8);
            v571 = sqrtf((float)((float)(*((float *)v737[0] + 2) - *(float *)&v545)* (float)(*((float *)v737[0] + 2) - *(float *)&v545))+ (float)((float)(*((float *)v737[0] + 3) - *((float *)&v545 + 1))* (float)(*((float *)v737[0] + 3) - *((float *)&v545 + 1))));
            v572 = 1;
            while (vabds_f32(*v570, *(float *)&v545) < 1.0e-10)
            {
              v573 = v570[1];
              if (vabds_f32(v573, *((float *)&v545 + 1)) >= 1.0e-10)
                goto LABEL_729;
              ++v572;
              v570 += 2;
              if (v763 == v572)
              {
                v574 = 1.0;
                v575 = 0.0;
                goto LABEL_730;
              }
            }
            v573 = v570[1];
LABEL_729:
            v576 = v573 - *((float *)&v545 + 1);
            v577 = *v570 - *(float *)&v545;
            v578 = v513 / sqrtf((float)(v577 * v577) + (float)(v576 * v576));
            v574 = v578 * v577;
            v575 = v578 * v576;
LABEL_730:
            v689 = v538;
            v690 = v537;
            v692 = v516;
            v726 = __PAIR64__(LODWORD(v575), LODWORD(v574));
            v757.__begin_ = (std::vector<unsigned int>::pointer)*v736.__begin_;
            v757.__end_ = v545;
            v761 = 0;
            *(float *)&v759.__value_ = -v575;
            *((float *)&v759.__value_ + 1) = v574;
            v762 = 0;
            *(float *)&v757.__end_cap_.__value_ = -v575;
            *((float *)&v757.__end_cap_.__value_ + 1) = v574;
            v758.f32[0] = v575;
            v758.f32[1] = -v574;
            v760 = xmmword_19FFB2FB0;
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v764, (uint64_t)&v757);
            if (v546 < 2)
            {
              v583 = v543 - 1;
              v582 = (int32x2_t)v726;
            }
            else
            {
              v579 = (float *)(v544 + 16);
              v580 = v694;
              v581 = 1;
              v582 = (int32x2_t)v726;
              do
              {
                v757.__begin_ = (std::vector<unsigned int>::pointer)v707[v581];
                v584 = (float *)&v544[8 * v581];
                v585 = *v584;
                v586 = v584[1];
                if (++v581 >= v543)
                {
LABEL_739:
                  v590 = (float32x2_t)vdup_lane_s32(v582, 1);
                  v591 = (unint64_t)v582;
                  v592 = *(float *)v582.i32;
                }
                else
                {
                  v587 = v579;
                  v588 = v580;
                  while (vabds_f32(*v587, v585) < 1.0e-10)
                  {
                    v589 = v587[1];
                    if (vabds_f32(v589, v586) >= 1.0e-10)
                      goto LABEL_741;
                    v587 += 2;
                    if (!--v588)
                      goto LABEL_739;
                  }
                  v589 = v587[1];
LABEL_741:
                  v593 = v589 - v586;
                  v594 = *v587 - v585;
                  v595 = v513 / sqrtf((float)(v594 * v594) + (float)(v593 * v593));
                  v592 = v595 * v594;
                  *(float *)&v596 = v595 * v593;
                  v591 = __PAIR64__(v595 * v593, LODWORD(v592));
                  v590 = (float32x2_t)__PAIR64__(v582.u32[1], v596);
                }
                v597 = (float *)&v544[8 * v581];
                v598 = v592 + *(float *)v582.i32;
                v599 = vaddv_f32(v590);
                v600 = (float)(v598 * v598) + (float)(v599 * v599);
                v727 = v591;
                v719 = *v597;
                v715 = v597[1];
                v711 = *(float *)v582.i32;
                if (v600 <= 0.0)
                {
                  v603 = *(float *)&v582.i32[1];
                  v602 = *(float *)v582.i32;
                }
                else
                {
                  v601 = v513 / sqrtf(v600);
                  v602 = -(float)(v599 * v601);
                  v603 = v601 * v598;
                }
                v604 = v590.f32[1];
                v757.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v586), LODWORD(v585));
                v723 = v571;
                *(float *)&v761 = v571;
                *((float *)&v761 + 1) = v571 * v705;
                v760 = xmmword_19FFB2FB0;
                v759.__value_ = (unsigned int *)__PAIR64__(LODWORD(v603), LODWORD(v602));
                HIBYTE(v762) = 1;
                v729 = v590.f32[0];
                v734 = v592;
                v605 = atan2f(v590.f32[0], v592);
                v606 = v605 - atan2f(v604, v711);
                v607 = v606;
                if (v606 <= 3.14159265)
                {
                  v608 = -1.0;
                  if (v607 < -3.14159265)
                    v606 = v607 + 6.28318531;
                }
                else
                {
                  v606 = v607 + -6.28318531;
                  v608 = -1.0;
                }
                v609 = sqrtf(fmaxf(-(float)(v608+ (float)((float)((float)(v602 * v734) + (float)(v603 * v729))* (float)((float)(v602 * v734) + (float)(v603 * v729)))), 0.1));
                v610.f32[0] = v602 / v609;
                v611 = v603 / v609;
                v612 = fabsf(v606);
                v613 = (unint64_t)fmaxf(ceilf(v612 * 1.2732), v513);
                if (v613 < 2)
                {
                  v757.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v611), v610.u32[0]);
                  v758.f32[0] = -v610.f32[0];
                  v758.f32[1] = -v611;
                  md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v764, (uint64_t)&v757);
                }
                else
                {
                  v614 = v513 / (float)((float)v613 + v608);
                  v615 = 0;
                  if (v612 >= 1.5708)
                  {
                    do
                    {
                      v618 = __sincosf_stret((float)((float)(v614 * (float)(int)v615) + -0.5) * v606);
                      *(float *)&v759.__value_ = -(float)((float)(v603 * v618.__sinval) - (float)(v602 * v618.__cosval));
                      *((float *)&v759.__value_ + 1) = (float)(v602 * v618.__sinval) + (float)(v603 * v618.__cosval);
                      v757.__end_cap_ = v759;
                      v758.f32[0] = -(float)((float)(v602 * v618.__cosval) - (float)(v603 * v618.__sinval));
                      v758.f32[1] = -*((float *)&v759.__value_ + 1);
                      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v764, (uint64_t)&v757);
                      HIBYTE(v762) = 0;
                      ++v615;
                    }
                    while (v613 != v615);
                  }
                  else if (v606 >= 0.0)
                  {
                    v730 = v611;
                    v735 = v610.i32[0];
                    do
                    {
                      v619 = __sincosf_stret((float)((float)(v614 * (float)(int)v615) + -0.5) * v606);
                      *(float *)&v759.__value_ = -(float)((float)(v603 * v619.__sinval) - (float)(v602 * v619.__cosval));
                      *((float *)&v759.__value_ + 1) = (float)(v602 * v619.__sinval) + (float)(v603 * v619.__cosval);
                      v757.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v730), v735);
                      v758.f32[0] = -(float)((float)(v602 * v619.__cosval) - (float)(v603 * v619.__sinval));
                      v758.f32[1] = -*((float *)&v759.__value_ + 1);
                      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v764, (uint64_t)&v757);
                      ++v615;
                    }
                    while (v613 != v615);
                  }
                  else
                  {
                    v610.f32[1] = v611;
                    v616 = vneg_f32(v610);
                    do
                    {
                      v617 = __sincosf_stret((float)((float)(v614 * (float)(int)v615) + -0.5) * v606);
                      *(float *)&v759.__value_ = -(float)((float)(v603 * v617.__sinval) - (float)(v602 * v617.__cosval));
                      *((float *)&v759.__value_ + 1) = (float)(v602 * v617.__sinval) + (float)(v603 * v617.__cosval);
                      v757.__end_cap_ = v759;
                      v758 = v616;
                      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v764, (uint64_t)&v757);
                      ++v615;
                    }
                    while (v613 != v615);
                  }
                }
                v571 = sqrtf((float)((float)(v719 - v585) * (float)(v719 - v585))+ (float)((float)(v715 - v586) * (float)(v715 - v586)))+ v723;
                --v580;
                v579 += 2;
                v583 = v543 - 1;
                v513 = 1.0;
                v582 = (int32x2_t)v727;
              }
              while (v581 != v546);
            }
            v620 = (float *)&v544[8 * v583];
            v621 = (float *)&v544[8 * v694];
            v622 = *v620;
            if (vabds_f32(*v620, *v621) >= 1.0e-10)
            {
              v624 = v620[1];
              v626 = v624 - v621[1];
              v90 = a1;
              v537 = v690;
              v516 = v692;
              v536 = v687;
              v535 = v688;
              v538 = v689;
            }
            else
            {
              v623 = v621[1];
              v624 = v620[1];
              v90 = a1;
              v537 = v690;
              v516 = v692;
              v536 = v687;
              v535 = v688;
              v538 = v689;
              if (vabds_f32(v624, v623) < 1.0e-10)
              {
                v625 = *(float *)&v582.i32[1];
                goto LABEL_767;
              }
              v626 = v624 - v623;
            }
            v627 = v622 - *v621;
            v628 = v513 / sqrtf((float)(v627 * v627) + (float)(v626 * v626));
            *(float *)v582.i32 = v628 * v627;
            v625 = v628 * v626;
LABEL_767:
            *(float *)&v757.__end_cap_.__value_ = -v625;
            HIDWORD(v757.__end_cap_.__value_) = v582.i32[0];
            v758.f32[0] = v625;
            v758.f32[1] = -*(float *)v582.i32;
            HIBYTE(v762) = 0;
            v757.__begin_ = (std::vector<unsigned int>::pointer)v707[v583];
            v757.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v624), LODWORD(v622));
            *(float *)&v759.__value_ = -v625;
            HIDWORD(v759.__value_) = v582.i32[0];
            *(float *)&v761 = v571;
            *((float *)&v761 + 1) = v571 * v705;
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v764, (uint64_t)&v757);
            shared_owners = v540->__shared_owners_;
            v630 = v540->__shared_weak_owners_ - shared_owners;
            v631.i64[0] = 0x1000100010001;
            v631.i64[1] = 0x1000100010001;
            if (v630 >= 4)
            {
              v632 = v630 >> 1;
              v633 = v540->__shared_owners_;
              v634 = (v630 >> 1) - 1;
              if (v630 >= 6)
              {
                v637 = 0;
                v638 = v634 & 0xFFFFFFFFFFFFFFFELL;
                v639 = (_WORD *)(v538 + 12);
                do
                {
                  v640 = shared_owners + 2 * v637;
                  *(v639 - 6) = v640;
                  *v639 = v640 + 2;
                  *(v639 - 5) = v640 + 1;
                  v639[1] = v640 + 3;
                  *(v639 - 4) = v640 + 2;
                  v639[2] = v640 + 4;
                  *(v639 - 3) = v640 + 1;
                  v639[3] = v640 + 3;
                  *(v639 - 2) = v640 + 3;
                  v639[4] = v640 + 5;
                  v637 += 2;
                  *(v639 - 1) = v640 + 2;
                  v639[5] = v640 + 4;
                  v639 += 12;
                }
                while (v638 != v637);
                if (v634 != v638)
                {
                  v635 = v634 | 1;
                  LODWORD(v633) = 2 * (v634 & 0xFFFFFFFE) + shared_owners;
                  v636 = (_WORD *)(v538 + 12 * (v634 & 0xFFFFFFFFFFFFFFFELL));
                  goto LABEL_774;
                }
              }
              else
              {
                v635 = 1;
                v636 = (_WORD *)v538;
LABEL_774:
                v641 = v632 - v635;
                do
                {
                  *v636 = v633;
                  v642 = v633 + 1;
                  v636[1] = v633 + 1;
                  v643 = v633 + 3;
                  LODWORD(v633) = v633 + 2;
                  v636[2] = v633;
                  v636[3] = v642;
                  v636[4] = v643;
                  v636[5] = v633;
                  v636 += 6;
                  --v641;
                }
                while (v641);
              }
              if (v540[2].__vftable != (std::__shared_weak_count_vtbl *)v540[1].__shared_weak_owners_)
              {
                if (v630 >= 0x12)
                {
                  v646 = v634 & 0xFFFFFFFFFFFFFFF8;
                  v647 = (int64x2_t)xmmword_19FFB3420;
                  v648 = (int64x2_t)xmmword_19FFB3430;
                  v649 = (int64x2_t)xmmword_19FFB3440;
                  v650 = (int64x2_t)xmmword_19FFB2DB0;
                  v651 = (__int16 *)v537;
                  v652 = v634 & 0xFFFFFFFFFFFFFFF8;
                  v653 = vdupq_n_s64(shared_owners);
                  do
                  {
                    v765.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v653, vaddq_s64(v650, v650)), (int32x4_t)vaddq_s64(v653, vaddq_s64(v649, v649))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v653, vaddq_s64(v648, v648)), (int32x4_t)vaddq_s64(v653, vaddq_s64(v647, v647))));
                    v765.val[0] = vaddq_s16(v765.val[1], v631);
                    vst2q_s16(v651, v765);
                    v651 += 16;
                    v765.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v648 = vaddq_s64(v648, (int64x2_t)v765.val[0]);
                    v649 = vaddq_s64(v649, (int64x2_t)v765.val[0]);
                    v650 = vaddq_s64(v650, (int64x2_t)v765.val[0]);
                    v647 = vaddq_s64(v647, (int64x2_t)v765.val[0]);
                    v652 -= 8;
                  }
                  while (v652);
                  if (v634 != v646)
                  {
                    v644 = v646 | 1;
                    v645 = (_WORD *)(v537 + 4 * (v634 & 0xFFFFFFFFFFFFFFF8));
                    goto LABEL_783;
                  }
                }
                else
                {
                  v644 = 1;
                  v645 = (_WORD *)v537;
LABEL_783:
                  v654 = v632 - v644;
                  v655 = shared_owners + 2 * v644;
                  do
                  {
                    *v645 = v655 - 2;
                    v645[1] = v655;
                    v655 += 2;
                    v645 += 2;
                    --v654;
                  }
                  while (v654);
                }
              }
            }
          }
          v540 = *v535;
          shared_weak_owners = (*v535)->__shared_owners_;
          v539 = (*v535)->__shared_weak_owners_;
          goto LABEL_710;
        }
LABEL_786:
        {
          v678 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v678, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v657 = (_QWORD *)*v684;
        if (*v684)
        {
          v658 = (_QWORD *)v686[8];
          v659 = (_QWORD *)*v684;
          if (v658 != v657)
          {
            do
            {
              v661 = (void (***)(_QWORD, _QWORD *))*--v658;
              v660 = v661;
              *v658 = 0;
              if (v661)
              {
                (**v660)(v660, v659);
                {
                  v663 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v663, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v660, 104);
              }
            }
            while (v658 != v657);
            v659 = (_QWORD *)*v684;
          }
          v686[8] = (uint64_t)v657;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v686[10] + 40))(v686[10], v659, v686[9] - (_QWORD)v659);
          *v684 = 0;
          v686[8] = 0;
          v686[9] = 0;
        }
        *v684 = 0;
        v686[8] = 0;
        v686[9] = 0;
        if (v736.__begin_)
          operator delete(v736.__begin_);
        if (v737[0])
          operator delete(v737[0]);
        if (v742)
        {
          v665 = v739;
          v664 = v740;
          if (v740 != v739)
          {
            v666 = (_QWORD *)*((_QWORD *)&v738 + 1);
            v667 = v741;
            v668 = HIBYTE(v741);
            if ((_QWORD)v738 && *(_BYTE *)(*((_QWORD *)&v738 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v738 + 64))(v738, v742);
            if (v667 && !v668)
            {
              v669 = v666[7];
              v670 = v666[8];
              if (v670 == v669)
                v669 = v666[10] - v666[9];
              if (v665 < v669)
                v669 = v665;
              if (v670 <= v664)
                v670 = v664;
              if (v670 == v669)
                v670 = v669 + v666[10] - v666[9];
              v666[7] = v669;
              v666[8] = v670;
            }
          }
        }
        if (v747)
        {
          v672 = v744;
          v671 = v745;
          if (v745 != v744)
          {
            v673 = (_QWORD *)*((_QWORD *)&v743 + 1);
            v674 = v746;
            v675 = HIBYTE(v746);
            if ((_QWORD)v743 && *(_BYTE *)(*((_QWORD *)&v743 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v743 + 64))(v743, v747);
            if (v674 && !v675)
            {
              v676 = v673[7];
              v677 = v673[8];
              if (v677 == v676)
                v676 = v673[10] - v673[9];
              if (v672 < v676)
                v676 = v672;
              if (v677 <= v671)
                v677 = v671;
              if (v677 == v676)
                v677 = v676 + v673[10] - v673[9];
              v673[7] = v676;
              v673[8] = v677;
            }
          }
        }
        v515 = v685 + 1;
        v514 = v682;
      }
      v512 = v681 + 8;
    }
    while (v681 + 8 != v680);
  }
  return (uint64_t)v90;
}

void sub_19F543740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  uint64_t v51;
  void *v52;
  void *v54;
  void *v55;

  MEMORY[0x1A1AF4E00](v51, 0x1020C4007FF0C4BLL);
  if (v52)
    operator delete(v52);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a27);
  v54 = *a31;
  if (*a31)
  {
    *(_QWORD *)(a30 + 40) = v54;
    operator delete(v54);
  }
  v55 = *a24;
  if (*a24)
  {
    *(_QWORD *)(a30 + 16) = v55;
    operator delete(v55);
    if (!a51)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a51)
  {
    goto LABEL_3;
  }
  operator delete(a51);
  goto LABEL_3;
}

void md::CasedTrafficLayer::~CasedTrafficLayer(md::CasedTrafficLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C860;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C860;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF388;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C860;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C860;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 104);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 104);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 104);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 104);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 104);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 104);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 104);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 104);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 104);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 104);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 104);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 104);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 104);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 104);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 104);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 104);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 104);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 104);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t __copy_helper_block_ea8_72c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE104c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  a1[9] = 0;
  a1[10] = 0;
  result = a2[12];
  a1[11] = 0;
  a1[12] = result;
  v5 = (char *)a2[9];
  v6 = (char *)a2[10];
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      abort();
    v8 = v7 >> 3;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    a1[9] = result;
    a1[10] = result;
    a1[11] = result + 8 * v8;
    do
    {
      if (result)
        *(_QWORD *)result = *(_QWORD *)v5;
      v5 += 8;
      result += 8;
    }
    while (v5 != v6);
    a1[10] = result;
  }
  v9 = a2[14];
  a1[13] = a2[13];
  a1[14] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void __destroy_helper_block_ea8_72c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE104c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 72);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 80) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v5, *(_QWORD *)(a1 + 88) - v5);
  }
}

void ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_2(uint64_t a1, int a2, char *a3, int a4, int a5, float a6, float a7, double a8, int8x16_t a9)
{
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v25;
  uint64_t v26;
  float32x2_t *v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  float v51;
  float v52;
  uint64_t v53[2];
  __int16 v54[2];
  int v55;
  int v56;
  uint64_t v57[2];
  _BYTE v58[32];

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(a1 + 144))
    goto LABEL_32;
  if (*(unsigned __int8 *)(v16 + 144) != *(unsigned __int8 *)(a1 + 145))
    goto LABEL_32;
  if (*(_DWORD *)(v16 + 148) != *(_DWORD *)(a1 + 120))
    goto LABEL_32;
  if (*(unsigned __int8 *)(v16 + 272) != *(unsigned __int8 *)(a1 + 146))
    goto LABEL_32;
  v17 = *(_DWORD *)(a1 + 124);
  if (*(_DWORD *)(v16 + 152) != v17)
    goto LABEL_32;
  v18 = *(float *)(a1 + 132);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(v16 + 168);
  if (v20)
  {
    if (*(unsigned __int8 *)(v19 + 153) != *(unsigned __int8 *)(v20 + 153))
      goto LABEL_32;
  }
  if (*(_BYTE *)(v16 + 273) && **(_QWORD **)(a1 + 80) != *(_QWORD *)(v16 + 192)
    || *(_QWORD *)(a1 + 88) != *(_QWORD *)(v16 + 208)
    || *(_DWORD *)(v16 + 244) != a2)
  {
    goto LABEL_32;
  }
  v21 = *(_QWORD *)(v16 + 56);
  if (*(_QWORD *)(v16 + 48) == v21)
    goto LABEL_51;
  if (v20 != v19 || *(_DWORD *)(v16 + 180) != (unint64_t)*(unsigned int *)(a1 + 128))
    goto LABEL_32;
  v22 = *(float *)(v16 + 184);
  if (v17 < 0)
  {
    if (v22 < v18 || (float)(v22 - v18) > 1.0)
      goto LABEL_32;
  }
  else if (v22 > v18 || (float)(v18 - v22) > 1.0)
  {
LABEL_32:
    if (*(_DWORD *)(a1 + 136) == 4)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v58[0] = 0;
      v58[24] = 0;
      v57[0] = 0;
      v57[1] = 0;
      v54[0] = 255;
      v55 = 0;
      v56 = 0;
      md::TrafficAccum::flushToRibbonCollection((unint64_t *)(v16 + 48), (uint64_t *)(v30 + 48), (uint64_t)v58, v57, (unsigned __int8 *)v54);
    }
    else
    {
      md::TrafficAccum::flushToRibbonCollection(v16 + 48, *(_QWORD *)(a1 + 104), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48));
    }
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48;
    v32 = *(_DWORD *)(a1 + 140);
    v33 = *(_BYTE *)(a1 + 145);
    v34 = *(_DWORD *)(a1 + 120);
    v35 = *(_DWORD *)(a1 + 124);
    v36 = *(_QWORD *)(a1 + 72);
    v37 = *(uint64_t **)(a1 + 80);
    v38 = *v37;
    v39 = (std::__shared_weak_count *)v37[1];
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    v42 = *(std::__shared_weak_count **)(a1 + 96);
    v53[0] = *(_QWORD *)(a1 + 88);
    v53[1] = (uint64_t)v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      md::TrafficAccum::reset(v31, v36, v32, v33, v34, v35, v38, (uint64_t)v39, v53, a2, *(_BYTE *)(a1 + 146));
      do
        v45 = __ldaxr(v43);
      while (__stlxr(v45 - 1, v43));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    else
    {
      md::TrafficAccum::reset(v31, v36, v32, v33, v34, v35, v38, (uint64_t)v39, v53, a2, *(_BYTE *)(a1 + 146));
    }
    if (v39)
    {
      v46 = (unint64_t *)&v39->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    goto LABEL_51;
  }
  *(float *)&a8 = ceilf(v18);
  v25 = floorf(v18);
  if (v17 <= 0)
    *(float *)&a8 = v25;
  *(double *)a9.i64 = vabds_f32(*(float *)&a8, v18);
  v26 = *(_QWORD *)(v16 + 224);
  if (*(double *)a9.i64 <= 0.01)
  {
    v28 = *(float32x2_t *)(v26 + 8 * (int)*(float *)&a8);
  }
  else
  {
    v27 = (float32x2_t *)(v26 + 8 * (int)v25);
    a8 = COERCE_DOUBLE(vsub_f32(v27[1], *v27));
    v28 = vmla_n_f32(*v27, *(float32x2_t *)&a8, v18 - v25);
  }
  v29 = vsub_f32(*(float32x2_t *)(v21 - 8), v28);
  if (vaddv_f32(vmul_f32(v29, v29)) >= 0.0001)
    goto LABEL_32;
LABEL_51:
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v49 = *(_DWORD *)(a1 + 140);
  v50 = *(_DWORD *)(a1 + 128);
  *(_QWORD *)(v48 + 168) = *(_QWORD *)(a1 + 72);
  *(_DWORD *)(v48 + 176) = v49;
  *(_DWORD *)(v48 + 180) = v50;
  *(float *)(v48 + 184) = a7;
  if (a5)
  {
    v51 = a7;
    v52 = a6;
  }
  else
  {
    v51 = a6;
    v52 = a7;
  }
  md::TrafficAccum::addPoints((float32x2_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), a3, 0, 0, a4, *(float **)(a1 + 112), v51, v52, a8, a9);
}

void sub_19F5467A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_88c68_ZTSNSt3__110shared_ptrIN3gss15StylesheetQueryINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_88c68_ZTSNSt3__110shared_ptrIN3gss15StylesheetQueryINS1_10PropertyIDEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 96);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::AROcclusionGenerationLogic::~AROcclusionGenerationLogic(md::AROcclusionGenerationLogic *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42A28C8;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42A28C8;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::AROcclusionGenerationLogic::didBecomeInactive(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = this[19];
  if (v2 != this[18])
  {
    v3 = 0;
    v2 = this[18];
    do
    {
      this = (_QWORD *)gdc::Registry::destroy(v1[21], *(_QWORD *)(v2 + 8 * v3++));
      v2 = v1[18];
    }
    while (v3 < (v1[19] - v2) >> 3);
  }
  v1[19] = v2;
  v1[16] = v1[15];
  return this;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::AROcclusionGenerationContext]";
  v4[3] = 32;
  v4[4] = result;
  *v4 = &off_1E42B1428;
  v4[1] = 0xA822B3A972ECE7CDLL;
  *a2 = v4;
  return result;
}

void sub_19F546A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0xA822B3A972ECE7CDLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::AROcclusionGenerationLogic::runBeforeLayout(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  int8x8_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  double v15;
  unsigned int v16;
  void *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  double *v31;
  double *v32;
  double *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  double *v38;
  __int128 v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  __int128 v49;
  double v50;
  double v51;
  __int128 v52;
  gdc::Registry *v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  __int128 v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  char v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t i;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _OWORD *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  _QWORD *v109;
  unint64_t *v110;
  char *v111;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t *v119;
  __int128 v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t *v127;
  _QWORD *v128;
  char v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t j;
  uint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  size_t v141;
  char *v142;
  _QWORD *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  char v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  size_t v160;
  char *v161;
  char *v162;
  char *v163;
  _QWORD *k;
  uint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _BYTE *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  unint64_t *v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  NSObject *v183;
  id v184;
  int64x2_t v185;
  uint64_t v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  unint64_t v201;
  double v202;
  __int128 v203;
  double v204;
  gdc::Registry *v205;
  double v206[2];
  double v207;
  __int128 v208;
  __int128 v209;
  _QWORD v210[6];
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  unint64_t *v214;
  uint64_t v215;
  __int128 v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  _BYTE buf[24];
  double v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  double v226;
  double v227;
  double v228;
  uint64_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 64) != 2)
    return;
  v4 = (int8x8_t *)a3[1];
  if (a1[18] != a1[19])
  {
    v5 = v4[14];
    if (!*(_QWORD *)&v5)
      return;
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    v7 = (v5.i8[0] & 1) == 0;
    v8 = *(_QWORD *)&v5 - 1;
    if (v6.u32[0] >= 2uLL)
      v7 = *(_QWORD *)&v5 != 1;
    v9 = *(uint64_t ***)(*(_QWORD *)&v4[13] + 8 * v7);
    if (!v9)
      return;
    v10 = *v9;
    if (!v10)
      return;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v11 = v10[1];
        if (v11 == 1)
        {
          if (*((_DWORD *)v10 + 4) == 1)
            goto LABEL_22;
        }
        else if ((v11 & v8) != v7)
        {
          return;
        }
        v10 = (uint64_t *)*v10;
        if (!v10)
          return;
      }
    }
    while (1)
    {
      v12 = v10[1];
      if (v12 == 1)
      {
        if (*((_DWORD *)v10 + 4) == 1)
          break;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return;
    }
  }
LABEL_22:
  v13 = *(id *)&v4[5];
  objc_msgSend(v13, "routeInfo");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "route");
  v184 = (id)objc_claimAutoreleasedReturnValue();

  if (!v184)
  {
    v19 = a1[19];
    if (v19 != a1[18])
    {
      v20 = 0;
      v19 = a1[18];
      do
      {
        gdc::Registry::destroy(a1[21], *(_QWORD *)(v19 + 8 * v20++));
        v19 = a1[18];
      }
      while (v20 < (a1[19] - v19) >> 3);
    }
    a1[19] = v19;
    a1[16] = a1[15];
    goto LABEL_175;
  }
  objc_msgSend(v184, "distance");
  v16 = (v15 * 0.5);
  v17 = (void *)a1[15];
  a1[16] = v17;
  if ((void *)a1[17] == v17 && v16)
  {
    v18 = (char *)operator new(0x18uLL);
    a1[15] = v18;
    a1[16] = v18;
    a1[17] = v18 + 24;
    if (v17)
      operator delete(v17);
  }
  else if (!v16)
  {
LABEL_170:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v183 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "false";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/AROcclusionGenerationLogic.mm";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v221) = 46;
      _os_log_impl(&dword_19F029000, v183, OS_LOG_TYPE_ERROR, "There should always be at least 1 position to build occlusion boxes for: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }

    goto LABEL_175;
  }
  objc_msgSend(v184, "pointWithAltitudeCorrectionAtRouteCoordinate:", objc_msgSend(v184, "coordinateAtOffset:", 0.0));
  v22 = v21;
  v24 = v23;
  v26 = tan(v25 * 0.00872664626 + 0.785398163);
  v27 = v22 * 0.00277777778 + 0.5;
  v28 = log(v26) * 0.159154943 + 0.5;
  v29 = v24 * 0.0000000249532021;
  v31 = (double *)a1[16];
  v30 = a1[17];
  if ((unint64_t)v31 >= v30)
  {
    v33 = (double *)a1[15];
    v34 = 0xAAAAAAAAAAAAAAABLL * (v31 - v33) + 1;
    if (v34 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v33) >> 3);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x555555555555555)
      v36 = 0xAAAAAAAAAAAAAAALL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 > 0xAAAAAAAAAAAAAAALL)
LABEL_177:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v37 = (char *)operator new(24 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = (double *)&v37[8 * (v31 - v33)];
    *v38 = v27;
    v38[1] = v28;
    v38[2] = v29;
    v32 = v38 + 3;
    if (v31 != v33)
    {
      do
      {
        v39 = *(_OWORD *)(v31 - 3);
        *(v38 - 1) = *(v31 - 1);
        *(_OWORD *)(v38 - 3) = v39;
        v38 -= 3;
        v31 -= 3;
      }
      while (v31 != v33);
      v31 = (double *)a1[15];
    }
    a1[15] = v38;
    a1[16] = v32;
    a1[17] = &v37[24 * v36];
    if (v31)
      operator delete(v31);
  }
  else
  {
    *v31 = v27;
    v31[1] = v28;
    v32 = v31 + 3;
    v31[2] = v29;
  }
  a1[16] = v32;
  v40 = (double *)a1[15];
  if (v40 == v32)
    goto LABEL_170;
  v41 = a1[19];
  if (v41 != a1[18])
  {
    v42 = 0;
    v41 = a1[18];
    do
    {
      gdc::Registry::destroy(a1[21], *(_QWORD *)(v41 + 8 * v42++));
      v41 = a1[18];
    }
    while (v42 < (a1[19] - v41) >> 3);
    v40 = (double *)a1[15];
    v32 = (double *)a1[16];
  }
  a1[19] = v41;
  if (0xAAAAAAAAAAAAAAABLL * (v32 - v40) - 3 > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_175:

    return;
  }
  v185 = vdupq_n_s64(0x3E5ACB157F7410BCuLL);
  v43 = 1;
  while (1)
  {
    v186 = v43;
    v45 = &v40[3 * v43];
    v46 = *(v45 - 3);
    v47 = *(v45 - 2);
    v48 = *(v45 - 1);
    v197 = *v45;
    v198 = v45[2];
    v199 = v45[1];
    v200 = v48 + -0.0000000748596064;
    v202 = v46 + (*v45 - v46) * 0.5;
    v204 = v48 + -0.0000000748596064 + (v198 - v48) * 0.5;
    *(_OWORD *)buf = xmmword_19FFB32C0;
    v222 = xmmword_19FFB33A0;
    v221 = 0.0;
    *(_QWORD *)&buf[16] = 0;
    v223 = 0u;
    v224 = 0u;
    v225 = xmmword_19FFB32C0;
    v226 = v46 + (v197 - v46) * 0.5;
    v227 = v47 + (v199 - v47) * 0.5;
    v228 = v204;
    *(double *)&v229 = 1.0;
    v211 = 0u;
    v212 = 0u;
    v209 = 0u;
    memset(v210, 0, 40);
    v208 = 0u;
    v207 = 0.0000000249532021;
    v210[0] = 0x3E5ACB157F7410BCLL;
    v213 = 0x3FF0000000000000;
    v210[5] = 0x3E5ACB157F7410BCLL;
    gm::operator*<double,4,4,4>(v206, (double *)buf, &v207);
    gm::Matrix<double,4,4>::inverted<int,void>((double *)buf, v206);
    v187 = *(double *)&buf[8];
    v188 = *(double *)buf;
    v49 = v222;
    v195 = v226;
    v196 = *(double *)&v224;
    v193 = v227;
    v194 = *((double *)&v224 + 1);
    v50 = *(double *)&buf[16];
    v51 = v221;
    v52 = v223;
    v191 = v228;
    v192 = *(double *)&v225;
    v189 = *(double *)&v229;
    v190 = *((double *)&v225 + 1);
    v53 = (gdc::Registry *)a1[21];
    v207 = v202;
    *(double *)&v208 = v47 + (v199 - v47) * 0.5;
    *((double *)&v208 + 1) = v204;
    v210[0] = 0;
    v209 = 0uLL;
    *(_OWORD *)&v210[1] = xmmword_19FFB37F0;
    *(int64x2_t *)&v210[3] = v185;
    v54 = (double *)operator new(0xC0uLL);
    v55 = v190 * v200 + v189;
    v56 = v190 * (v198 + -0.0000000748596064) + v189;
    v57 = v192 * v200 + v191;
    v58 = v192 * (v198 + -0.0000000748596064) + v191;
    v59 = v51 * v46 + *((double *)&v52 + 1) * v47 + v55;
    v60 = v51 * v197 + *((double *)&v52 + 1) * (v199 + 0.000000124766011) + v56;
    v61 = v51 * v197 + *((double *)&v52 + 1) * v199 + v56;
    v62 = 1.0 / (v51 * v46 + *((double *)&v52 + 1) * (v47 + 0.000000124766011) + v55);
    v63 = v62 * (v50 * v46 + *(double *)&v52 * (v47 + 0.000000124766011) + v57);
    v64 = v194 * v200 + v193;
    v65 = v62 * (v187 * v46 + *((double *)&v49 + 1) * (v47 + 0.000000124766011) + v64);
    v66 = v196 * v200 + v195;
    v67 = v62 * (v188 * v46 + *(double *)&v49 * (v47 + 0.000000124766011) + v66);
    v68 = v194 * (v198 + -0.0000000748596064) + v193;
    v69 = v196 * (v198 + -0.0000000748596064) + v195;
    v70 = 1.0 / v60;
    v71 = v70 * (v50 * v197 + *(double *)&v52 * (v199 + 0.000000124766011) + v58);
    v72 = v70 * (v187 * v197 + *((double *)&v49 + 1) * (v199 + 0.000000124766011) + v68);
    v73 = v70 * (v188 * v197 + *(double *)&v49 * (v199 + 0.000000124766011) + v69);
    v74 = 1.0 / v59;
    v75 = v74 * (v50 * v46 + *(double *)&v52 * v47 + v57);
    v76 = 1.0 / v61;
    v77 = v76 * (v50 * v197 + *(double *)&v52 * v199 + v58);
    v78 = v76 * (v187 * v197 + *((double *)&v49 + 1) * v199 + v68);
    v79 = v76 * (v188 * v197 + *(double *)&v49 * v199 + v69);
    v54[11] = v63 + -100.0;
    v54[12] = v79;
    *v54 = v79;
    v54[1] = v78;
    v54[13] = v78;
    v54[14] = v77;
    v80 = v74 * (v187 * v46 + *((double *)&v49 + 1) * v47 + v64);
    v81 = v74 * (v188 * v46 + *(double *)&v49 * v47 + v66);
    v54[2] = v77 + -100.0;
    v54[3] = v81;
    v54[15] = v81;
    v54[16] = v80;
    v54[4] = v80;
    v54[5] = v75 + -100.0;
    v54[17] = v75;
    v54[18] = v73;
    v54[6] = v73;
    v54[7] = v72;
    v54[19] = v72;
    v54[20] = v71;
    v54[8] = v71 + -100.0;
    v54[9] = v67;
    v54[21] = v67;
    v54[22] = v65;
    v54[10] = v65;
    v54[23] = v63;
    *(_QWORD *)&v82 = v54;
    *((_QWORD *)&v82 + 1) = v54 + 24;
    v203 = v82;
    v83 = gdc::Registry::create(v53);
    v205 = v53;
    v84 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>((uint64_t)v53);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v84, v83, (__int128 *)&v207);
    v85 = (uint64_t *)gdc::Registry::storage<arComponents::CustomBoxCreateDesc>((uint64_t)v53);
    v218 = v83;
    v86 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v85 + 4, (uint64_t)&v218);
    if ((v87 & 1) != 0)
      break;
    v88 = v85[10] + 24 * (((uint64_t)v86 - v85[7]) >> 3);
    v89 = *(void **)v88;
    if (*(_QWORD *)v88)
    {
      *(_QWORD *)(v88 + 8) = v89;
      operator delete(v89);
      *(_QWORD *)v88 = 0;
      *(_QWORD *)(v88 + 8) = 0;
      *(_QWORD *)(v88 + 16) = 0;
    }
    *(_OWORD *)v88 = v203;
    *(_QWORD *)(v88 + 16) = v54 + 24;
    v90 = v85[31];
    if (v88 == v85[11])
    {
      *(_QWORD *)&v203 = 0;
      i = (uint64_t)v205;
      v109 = (_QWORD *)v85[22];
      if (v109)
        goto LABEL_91;
    }
    else
    {
      v91 = (_QWORD *)v85[16];
      for (i = (uint64_t)v205; v91; v91 = (_QWORD *)*v91)
      {
        v214 = &v218;
        v215 = 1;
        v219 = v90;
        v93 = v91[6];
        if (!v93)
          goto LABEL_176;
        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v93 + 48))(v93, &v219, &v214);
      }
      *(_QWORD *)&v203 = 0;
    }
LABEL_93:
    v127 = (uint64_t *)gdc::Registry::storage<arComponents::UseForOcclusionTest>(i);
    v218 = v83;
    v128 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v127 + 4, (uint64_t)&v218);
    if ((v129 & 1) != 0)
    {
      v135 = (_BYTE *)v127[11];
      v134 = v127[12];
      if ((unint64_t)v135 >= v134)
      {
        v137 = (char *)v127[10];
        v138 = v135 - v137;
        v139 = v135 - v137 + 1;
        if (v139 < 0)
          goto LABEL_178;
        v140 = v134 - (_QWORD)v137;
        if (2 * v140 > v139)
          v139 = 2 * v140;
        if (v140 >= 0x3FFFFFFFFFFFFFFFLL)
          v141 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        if (v141)
          v142 = (char *)operator new(v141);
        else
          v142 = 0;
        v144 = &v142[v138];
        v136 = (uint64_t)&v142[v138 + 1];
        v145 = (char *)(v137 - v135);
        if (v137 == v135)
          v145 = 0;
        v127[10] = (uint64_t)&v145[(_QWORD)v144];
        v127[11] = v136;
        v127[12] = (uint64_t)&v142[v141];
        if (v137)
          operator delete(v137);
      }
      else
      {
        v136 = (uint64_t)(v135 + 1);
      }
      j = (uint64_t)v205;
      v127[11] = v136;
      v130 = v127[31];
      v143 = (_QWORD *)v127[22];
      if (v143)
      {
LABEL_117:
        do
        {
          v214 = &v218;
          v215 = 1;
          v219 = v130;
          v146 = v143[6];
          if (!v146)
            goto LABEL_176;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v146 + 48))(v146, &v219, &v214);
          v143 = (_QWORD *)*v143;
        }
        while (v143);
      }
    }
    else
    {
      v130 = v127[31];
      if (v127[10] + (((uint64_t)v128 - v127[7]) >> 3) == v127[11])
      {
        j = (uint64_t)v205;
        v143 = (_QWORD *)v127[22];
        if (v143)
          goto LABEL_117;
      }
      else
      {
        v131 = (_QWORD *)v127[16];
        for (j = (uint64_t)v205; v131; v131 = (_QWORD *)*v131)
        {
          v214 = &v218;
          v215 = 1;
          v219 = v130;
          v133 = v131[6];
          if (!v133)
            goto LABEL_176;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v133 + 48))(v133, &v219, &v214);
        }
      }
    }
    v147 = (uint64_t *)gdc::Registry::storage<arComponents::AddToWorldIntersectorPending>(j);
    v218 = v83;
    v148 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v147 + 4, (uint64_t)&v218);
    if ((v149 & 1) != 0)
    {
      v154 = (_BYTE *)v147[11];
      v153 = v147[12];
      if ((unint64_t)v154 >= v153)
      {
        v156 = (char *)v147[10];
        v157 = v154 - v156;
        v158 = v154 - v156 + 1;
        if (v158 < 0)
LABEL_178:
          abort();
        v159 = v153 - (_QWORD)v156;
        if (2 * v159 > v158)
          v158 = 2 * v159;
        if (v159 >= 0x3FFFFFFFFFFFFFFFLL)
          v160 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v160 = v158;
        if (v160)
          v161 = (char *)operator new(v160);
        else
          v161 = 0;
        v162 = &v161[v160];
        v155 = (uint64_t)&v161[v157 + 1];
        v163 = (char *)(v156 - v154);
        if (v156 == v154)
          v163 = 0;
        v147[10] = (uint64_t)&v161[v157 + (_QWORD)v163];
        v147[11] = v155;
        v147[12] = (uint64_t)v162;
        if (v156)
          operator delete(v156);
      }
      else
      {
        v155 = (uint64_t)(v154 + 1);
      }
      v147[11] = v155;
      v150 = v147[31];
    }
    else
    {
      v150 = v147[31];
      if (v147[10] + (((uint64_t)v148 - v147[7]) >> 3) != v147[11])
      {
        v151 = (_QWORD *)v147[16];
        if (v151)
        {
          while (1)
          {
            v214 = &v218;
            v215 = 1;
            v219 = v150;
            v152 = v151[6];
            if (!v152)
              goto LABEL_176;
            (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v152 + 48))(v152, &v219, &v214);
            v151 = (_QWORD *)*v151;
            if (!v151)
              goto LABEL_144;
          }
        }
        goto LABEL_144;
      }
    }
    for (k = (_QWORD *)v147[22]; k; k = (_QWORD *)*k)
    {
      v214 = &v218;
      v215 = 1;
      v219 = v150;
      v165 = k[6];
      if (!v165)
        goto LABEL_176;
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v165 + 48))(v165, &v219, &v214);
    }
LABEL_144:
    if ((_QWORD)v203)
      operator delete((void *)v203);
    v167 = (unint64_t *)a1[19];
    v166 = a1[20];
    if ((unint64_t)v167 < v166)
    {
      *v167 = v83;
      v44 = v167 + 1;
    }
    else
    {
      v168 = v83;
      v169 = (unint64_t *)a1[18];
      v170 = v167 - v169;
      v171 = v170 + 1;
      if ((unint64_t)(v170 + 1) >> 61)
        abort();
      v172 = v166 - (_QWORD)v169;
      if (v172 >> 2 > v171)
        v171 = v172 >> 2;
      if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
        v173 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v173 = v171;
      if (v173)
      {
        if (v173 >> 61)
          goto LABEL_177;
        v174 = operator new(8 * v173);
      }
      else
      {
        v174 = 0;
      }
      v175 = (unint64_t *)&v174[8 * v170];
      *v175 = v168;
      v44 = v175 + 1;
      if (v167 == v169)
      {
        v169 = v167;
      }
      else
      {
        v176 = (char *)(v167 - 1) - (char *)v169;
        if (v176 < 0x58)
          goto LABEL_184;
        if ((unint64_t)((char *)v169 - v174) < 0x20)
          goto LABEL_184;
        v177 = (v176 >> 3) + 1;
        v178 = &v174[8 * v170 - 16];
        v179 = v167 - 2;
        v180 = v177 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v181 = *(_OWORD *)v179;
          *(v178 - 1) = *((_OWORD *)v179 - 1);
          *v178 = v181;
          v178 -= 2;
          v179 -= 4;
          v180 -= 4;
        }
        while (v180);
        v175 -= v177 & 0x3FFFFFFFFFFFFFFCLL;
        v167 -= v177 & 0x3FFFFFFFFFFFFFFCLL;
        if (v177 != (v177 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_184:
          do
          {
            v182 = *--v167;
            *--v175 = v182;
          }
          while (v167 != v169);
          v169 = (unint64_t *)a1[18];
        }
      }
      a1[18] = v175;
      a1[19] = v44;
      a1[20] = &v174[8 * v173];
      if (v169)
        operator delete(v169);
    }
    a1[19] = v44;
    v43 = v186 + 1;
    v40 = (double *)a1[15];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[16] - (_QWORD)v40) >> 3) - 1 <= v186 + 1)
      goto LABEL_175;
  }
  v94 = v85[12];
  v95 = (_QWORD *)v85[11];
  if ((unint64_t)v95 < v94)
  {
    *v95 = 0;
    v95[1] = 0;
    v95[2] = 0;
    v96 = operator new(0xC0uLL);
    *v95 = v96;
    v95[1] = v96;
    v95[2] = v96 + 12;
    v97 = *((_OWORD *)v54 + 9);
    v96[8] = *((_OWORD *)v54 + 8);
    v96[9] = v97;
    v98 = *((_OWORD *)v54 + 11);
    v96[10] = *((_OWORD *)v54 + 10);
    v96[11] = v98;
    v99 = *((_OWORD *)v54 + 5);
    v96[4] = *((_OWORD *)v54 + 4);
    v96[5] = v99;
    v100 = *((_OWORD *)v54 + 7);
    v96[6] = *((_OWORD *)v54 + 6);
    v96[7] = v100;
    v101 = *((_OWORD *)v54 + 1);
    *v96 = *(_OWORD *)v54;
    v96[1] = v101;
    v102 = *((_OWORD *)v54 + 3);
    v96[2] = *((_OWORD *)v54 + 2);
    v96[3] = v102;
    v95[1] = v96 + 12;
    v103 = v95 + 3;
    v85[11] = (uint64_t)(v95 + 3);
    i = (uint64_t)v53;
    goto LABEL_90;
  }
  v104 = (_QWORD *)v85[10];
  v105 = 0xAAAAAAAAAAAAAAABLL * (v95 - v104) + 1;
  if (v105 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v104) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  v217 = v85 + 12;
  v201 = v83;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_177;
    v108 = (unint64_t *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v110 = &v108[v95 - v104];
  v214 = v108;
  v215 = (uint64_t)v110;
  v111 = (char *)&v108[3 * v107];
  *(_QWORD *)&v216 = v110;
  *((_QWORD *)&v216 + 1) = v111;
  v110[1] = 0;
  v110[2] = 0;
  *v110 = 0;
  v112 = operator new(0xC0uLL);
  v110[2] = (unint64_t)(v112 + 12);
  v113 = *((_OWORD *)v54 + 9);
  v112[8] = *((_OWORD *)v54 + 8);
  v112[9] = v113;
  v114 = *((_OWORD *)v54 + 11);
  v112[10] = *((_OWORD *)v54 + 10);
  v112[11] = v114;
  v115 = *((_OWORD *)v54 + 5);
  v112[4] = *((_OWORD *)v54 + 4);
  v112[5] = v115;
  v116 = *((_OWORD *)v54 + 7);
  v112[6] = *((_OWORD *)v54 + 6);
  v112[7] = v116;
  v117 = *((_OWORD *)v54 + 1);
  *v112 = *(_OWORD *)v54;
  v112[1] = v117;
  v118 = *((_OWORD *)v54 + 3);
  v112[2] = *((_OWORD *)v54 + 2);
  v112[3] = v118;
  *v110 = (unint64_t)v112;
  v110[1] = (unint64_t)(v112 + 12);
  v103 = v110 + 3;
  *(_QWORD *)&v216 = v110 + 3;
  if (v95 == v104)
  {
    v85[10] = (uint64_t)v110;
    v85[11] = (uint64_t)v103;
    v85[12] = (uint64_t)v111;
    v83 = v201;
    i = (uint64_t)v205;
    goto LABEL_88;
  }
  do
  {
    v119 = v110;
    *(v110 - 2) = 0;
    *(v110 - 1) = 0;
    v120 = *(_OWORD *)(v95 - 3);
    v95 -= 3;
    *(_OWORD *)(v110 - 3) = v120;
    v110 -= 3;
    *(v119 - 1) = v95[2];
    *v95 = 0;
    v95[1] = 0;
    v95[2] = 0;
  }
  while (v95 != v104);
  v95 = (_QWORD *)v85[10];
  v121 = (_QWORD *)v85[11];
  v85[10] = (uint64_t)v110;
  v122 = (_QWORD *)v216;
  *(_OWORD *)(v85 + 11) = v216;
  v103 = v122;
  i = (uint64_t)v205;
  if (v121 != v95)
  {
    v123 = v121;
    v83 = v201;
    do
    {
      v125 = (void *)*(v123 - 3);
      v123 -= 3;
      v124 = v125;
      if (v125)
      {
        *(v121 - 2) = v124;
        operator delete(v124);
      }
      v121 = v123;
    }
    while (v123 != v95);
LABEL_88:
    if (!v95)
      goto LABEL_90;
    goto LABEL_89;
  }
  v83 = v201;
  if (v95)
LABEL_89:
    operator delete(v95);
LABEL_90:
  v85[11] = (uint64_t)v103;
  v90 = v85[31];
  v109 = (_QWORD *)v85[22];
  if (!v109)
    goto LABEL_93;
LABEL_91:
  while (1)
  {
    v214 = &v218;
    v215 = 1;
    v219 = v90;
    v126 = v109[6];
    if (!v126)
      break;
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v126 + 48))(v126, &v219, &v214);
    v109 = (_QWORD *)*v109;
    if (!v109)
      goto LABEL_93;
  }
LABEL_176:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F547CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v29 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v29);
  if ((v6 & 1) != 0)
  {
    v12 = (_OWORD *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v17 = (_OWORD *)a1[10];
      v18 = 0xCCCCCCCCCCCCCCCDLL * (v12 - v17) + 1;
      if (v18 > 0x333333333333333)
        goto LABEL_32;
      v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v17) >> 4);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x199999999999999)
        v20 = 0x333333333333333;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 > 0x333333333333333)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = (char *)operator new(80 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[16 * (v12 - v17)];
      *((_QWORD *)v22 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v22 = *a3;
      *(_OWORD *)(v22 + 24) = *(__int128 *)((char *)a3 + 24);
      *((_QWORD *)v22 + 5) = *((_QWORD *)a3 + 5);
      *((_QWORD *)v22 + 6) = *((_QWORD *)a3 + 6);
      *(_OWORD *)(v22 + 56) = *(__int128 *)((char *)a3 + 56);
      *((_QWORD *)v22 + 9) = *((_QWORD *)a3 + 9);
      v16 = v22 + 80;
      if (v12 != v17)
      {
        do
        {
          v23 = *(v12 - 5);
          *((_QWORD *)v22 - 8) = *((_QWORD *)v12 - 8);
          *((_OWORD *)v22 - 5) = v23;
          v24 = *(_OWORD *)((char *)v12 - 56);
          *((_QWORD *)v22 - 5) = *((_QWORD *)v12 - 5);
          *(_OWORD *)(v22 - 56) = v24;
          *((_QWORD *)v22 - 4) = *((_QWORD *)v12 - 4);
          v25 = *(_OWORD *)((char *)v12 - 24);
          *((_QWORD *)v22 - 1) = *((_QWORD *)v12 - 1);
          *(_OWORD *)(v22 - 24) = v25;
          v22 -= 80;
          v12 -= 5;
        }
        while (v12 != v17);
        v12 = (_OWORD *)a1[10];
      }
      a1[10] = (uint64_t)v22;
      a1[11] = (uint64_t)v16;
      a1[12] = (uint64_t)&v21[80 * v20];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *a3;
      *((_QWORD *)v12 + 2) = *((_QWORD *)a3 + 2);
      *v12 = v13;
      v14 = *(__int128 *)((char *)a3 + 24);
      *((_QWORD *)v12 + 5) = *((_QWORD *)a3 + 5);
      *(_OWORD *)((char *)v12 + 24) = v14;
      *((_QWORD *)v12 + 6) = *((_QWORD *)a3 + 6);
      v15 = *(__int128 *)((char *)a3 + 56);
      *((_QWORD *)v12 + 9) = *((_QWORD *)a3 + 9);
      *(_OWORD *)((char *)v12 + 56) = v15;
      v16 = v12 + 5;
    }
    a1[11] = (uint64_t)v16;
  }
  else
  {
    v7 = (_QWORD *)(a1[10] + 80 * (((uint64_t)v5 - a1[7]) >> 3));
    v7[3] = *((_QWORD *)a3 + 3);
    v7[4] = *((_QWORD *)a3 + 4);
    v7[5] = *((_QWORD *)a3 + 5);
    v7[6] = *((_QWORD *)a3 + 6);
    *v7 = *(_QWORD *)a3;
    v7[1] = *((_QWORD *)a3 + 1);
    v7[2] = *((_QWORD *)a3 + 2);
    v7[7] = *((_QWORD *)a3 + 7);
    v7[8] = *((_QWORD *)a3 + 8);
    v7[9] = *((_QWORD *)a3 + 9);
    if (v7 != (_QWORD *)a1[11])
    {
      v8 = (_QWORD *)a1[16];
      if (v8)
      {
        v9 = a1[31];
        while (1)
        {
          v31 = &v29;
          v32 = 1;
          v30 = v9;
          v10 = v8[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v30, &v31);
          v8 = (_QWORD *)*v8;
          if (!v8)
            return;
        }
LABEL_31:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_32:
        abort();
      }
      return;
    }
  }
  v26 = (_QWORD *)a1[22];
  if (v26)
  {
    v27 = a1[31];
    while (1)
    {
      v31 = &v29;
      v32 = 1;
      v30 = v27;
      v28 = v26[6];
      if (!v28)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v28 + 48))(v28, &v30, &v31);
      v26 = (_QWORD *)*v26;
      if (!v26)
        return;
    }
    goto LABEL_31;
  }
}

uint64_t gdc::Registry::storage<arComponents::CustomBoxCreateDesc>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x95BAF39EB8C7C7A3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x95BAF39EB8C7C7A3;
      if (*(_QWORD *)&v3 <= 0x95BAF39EB8C7C7A3)
        v5 = 0x95BAF39EB8C7C7A3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x95BAF39EB8C7C7A3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x95BAF39EB8C7C7A3)
            {
              if (v7[2] == 0x95BAF39EB8C7C7A3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x95BAF39EB8C7C7A3)
          {
            if (v7[2] == 0x95BAF39EB8C7C7A3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CustomBoxCreateDesc]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1DE8;
  *(_QWORD *)(v11 + 8) = 0x95BAF39EB8C7C7A3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x95BAF39EB8C7C7A3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x95BAF39EB8C7C7A3;
  v15[1] = "arComponents::CustomBoxCreateDesc]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0x95BAF39EB8C7C7A3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F54832C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::UseForOcclusionTest>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x141C685A574F9941;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x141C685A574F9941;
      if (*(_QWORD *)&v3 <= 0x141C685A574F9941uLL)
        v5 = 0x141C685A574F9941uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x141C685A574F9941;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x141C685A574F9941)
            {
              if (v7[2] == 0x141C685A574F9941)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x141C685A574F9941)
          {
            if (v7[2] == 0x141C685A574F9941)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::UseForOcclusionTest]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1E78;
  *(_QWORD *)(v11 + 8) = 0x141C685A574F9941;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x141C685A574F9941uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x141C685A574F9941;
  v15[1] = "arComponents::UseForOcclusionTest]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0x141C685A574F9941, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F548554(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AddToWorldIntersectorPending>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD37C9F66680751FBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD37C9F66680751FBLL;
      if (*(_QWORD *)&v3 <= 0xD37C9F66680751FBLL)
        v5 = 0xD37C9F66680751FBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD37C9F66680751FBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD37C9F66680751FBLL)
            {
              if (v7[2] == 0xD37C9F66680751FBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD37C9F66680751FBLL)
          {
            if (v7[2] == 0xD37C9F66680751FBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AddToWorldIntersectorPending]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2508;
  *(_QWORD *)(v11 + 8) = 0xD37C9F66680751FBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD37C9F66680751FBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD37C9F66680751FBLL;
  v15[1] = "arComponents::AddToWorldIntersectorPending]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD37C9F66680751FBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F54877C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t std::__split_buffer<arComponents::CustomBoxCreateDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3)
    return 0;
  v3 = *(_QWORD *)(*a1 + 8 * v2);
  if (!v3)
    return 0;
  v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3)
    return 0;
  v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7)
    return 0;
  v11 = a1[6] + 24 * v5;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (_QWORD *)v8);
  v12 = a1[7];
  if (v11 != v12 - 24)
  {
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>(v11, *(_QWORD *)(v12 - 24), *(char **)(v12 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 - 16) - *(_QWORD *)(v12 - 24)) >> 3));
    v12 = a1[7];
  }
  v14 = v12 - 24;
  v13 = *(void **)(v12 - 24);
  if (v13)
  {
    *(_QWORD *)(v12 - 16) = v13;
    operator delete(v13);
  }
  a1[7] = v14;
  return 1;
}

char *std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *i;
  __int128 v52;

  v6 = (char *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < __sz)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_47;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_47:
      abort();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = (_QWORD *)(a1 + 8);
    goto LABEL_46;
  }
  v18 = *(char **)(a1 + 8);
  v17 = (_QWORD *)(a1 + 8);
  v14 = v18;
  v19 = v18 - result;
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
  if (v20 >= __sz)
  {
    if ((char *)a2 == a3)
    {
      v25 = result;
    }
    else
    {
      v24 = (unint64_t)&a3[-a2 - 24];
      if (v24 >= 0x108)
      {
        v38 = v24 / 0x18;
        v39 = 24 * v38 + 24;
        if ((unint64_t)result < a2 + v39 && (unint64_t)&result[v39] > a2)
        {
          v25 = result;
        }
        else
        {
          v41 = v38 + 1;
          v42 = (v38 + 1) & 0x1FFFFFFFFFFFFFFCLL;
          v25 = &result[24 * v42];
          v43 = result;
          v44 = (_OWORD *)a2;
          v45 = v42;
          do
          {
            v46 = v44[1];
            v48 = v44[4];
            v47 = v44[5];
            v49 = v44[2];
            v50 = v44[3];
            *(_OWORD *)v43 = *v44;
            *((_OWORD *)v43 + 1) = v46;
            *((_OWORD *)v43 + 2) = v49;
            *((_OWORD *)v43 + 3) = v50;
            v44 += 6;
            *((_OWORD *)v43 + 4) = v48;
            *((_OWORD *)v43 + 5) = v47;
            v43 += 96;
            v45 -= 4;
          }
          while (v45);
          if (v41 == v42)
            goto LABEL_45;
          v6 = (char *)(a2 + 24 * v42);
        }
      }
      else
      {
        v25 = result;
      }
      do
      {
        *(_QWORD *)v25 = *(_QWORD *)v6;
        *((_QWORD *)v25 + 1) = *((_QWORD *)v6 + 1);
        *((_QWORD *)v25 + 2) = *((_QWORD *)v6 + 2);
        v25 += 24;
        v6 += 24;
      }
      while (v6 != a3);
    }
LABEL_45:
    v16 = v25 - result;
    v14 = result;
    goto LABEL_46;
  }
  v21 = (char *)(a2 + 24 * v20);
  if (v14 != result)
  {
    v22 = v19 - 24;
    if (v22 >= 0x108)
    {
      v26 = v22 / 0x18;
      v27 = 24 * v26 + 24;
      if ((unint64_t)result < a2 + v27 && (unint64_t)&result[v27] > a2)
      {
        v23 = result;
      }
      else
      {
        v29 = v26 + 1;
        v30 = (v26 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v23 = &result[24 * v30];
        v31 = (_OWORD *)a2;
        v32 = v30;
        do
        {
          v33 = v31[1];
          v35 = v31[4];
          v34 = v31[5];
          v36 = v31[2];
          v37 = v31[3];
          *(_OWORD *)result = *v31;
          *((_OWORD *)result + 1) = v33;
          *((_OWORD *)result + 2) = v36;
          *((_OWORD *)result + 3) = v37;
          v31 += 6;
          *((_OWORD *)result + 4) = v35;
          *((_OWORD *)result + 5) = v34;
          result += 96;
          v32 -= 4;
        }
        while (v32);
        if (v29 == v30)
          goto LABEL_40;
        v6 = (char *)(a2 + 24 * v30);
      }
    }
    else
    {
      v23 = result;
    }
    do
    {
      *(_QWORD *)v23 = *(_QWORD *)v6;
      *((_QWORD *)v23 + 1) = *((_QWORD *)v6 + 1);
      *((_QWORD *)v23 + 2) = *((_QWORD *)v6 + 2);
      v6 += 24;
      v23 += 24;
    }
    while (v6 != v21);
  }
LABEL_40:
  for (i = v14; v21 != a3; v21 += 24)
  {
    v52 = *(_OWORD *)v21;
    *((_QWORD *)i + 2) = *((_QWORD *)v21 + 2);
    *(_OWORD *)i = v52;
    i += 24;
  }
  v16 = i - v14;
LABEL_46:
  *v17 = &v14[v16];
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x37F8C546A65FE3EELL;
    if (a2 <= 0x37F8C546A65FE3EELL)
      v3 = 0x37F8C546A65FE3EELL % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x37F8C546A65FE3EELL;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x37F8C546A65FE3EELL)
      {
        if (v6[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x37F8C546A65FE3EELL)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x37F8C546A65FE3EELL)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x1B8B241A8D896A1DLL;
    if (a2 <= 0x1B8B241A8D896A1DLL)
      v11 = 0x1B8B241A8D896A1DLL % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x1B8B241A8D896A1DLL)
      {
        if (v13[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x1B8B241A8D896A1DLL)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x1B8B241A8D896A1DLL)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::AROcclusionGenerationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1428;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::AROcclusionGenerationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1428;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::AROcclusionGenerationContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::RealisticHybridMapEngineMode::~RealisticHybridMapEngineMode(md::RealisticHybridMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

md::RealisticHybridMapEngineMode *md::RealisticHybridMapEngineMode::RealisticHybridMapEngineMode(md::RealisticHybridMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[2];

  v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 9);
  *(_QWORD *)v2 = &off_1E429DA38;
  *(_WORD *)(v2 + 224) = 257;
  if (!*(_BYTE *)(v2 + 64))
    *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 9) = 0x3FE0C152382D7365;
  *(_QWORD *)this = &off_1E42A5D70;
  *((_BYTE *)this + 49) = 0;
  *((_DWORD *)this + 13) = 21;
  LOBYTE(v6) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v6)+ 17) = 0;
  LOBYTE(v6) = 1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 1u, &v6)+ 17) = 0;
  LOBYTE(v6) = 4;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 4u, &v6)+ 17) = 0;
  LOBYTE(v6) = 6;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 6u, &v6)+ 17) = 0;
  LOBYTE(v6) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v6)+ 17) = 0;
  LOBYTE(v6) = 7;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 7u, &v6)+ 17) = 0;
  LOBYTE(v6) = 5;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 5u, &v6)+ 17) = 1;
  LOBYTE(v6) = 3;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v6)+ 17) = 2;
  LODWORD(v6) = 65576;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x28u, &v6)+ 18) = 65538;
  v21 = 0x79FE0BD9535D5C4DLL;
  v22 = "md::AnchorLogic]";
  v23[0] = 15;
  *(_QWORD *)&v18 = 0x63B6FE00C0848868;
  *((_QWORD *)&v18 + 1) = "md::AnchorContext]";
  v19 = 17;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F87F0;
  v8 = unk_1E42F8800;
  v9 = xmmword_1E42F8810;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8E88;
  v17 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v18 = 0x8E629317B3523E63;
  *((_QWORD *)&v18 + 1) = "md::CameraLogic]";
  v19 = 15;
  *(_QWORD *)&v15 = 0x1AF456233693CD46;
  *((_QWORD *)&v15 + 1) = "md::CameraContext]";
  *(_QWORD *)&v16 = 17;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8820;
  *(_QWORD *)&v8 = 20;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v21 = 0x17767EADC5B287BLL;
  v22 = "md::ElevationLogic]";
  v23[0] = 18;
  *(_QWORD *)&v18 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v18 + 1) = "md::ElevationContext]";
  v19 = 20;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F88C8;
  v8 = unk_1E42F88D8;
  v9 = xmmword_1E42F88E8;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F88F8;
  v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  v21 = 0x4AC7AB7561675F6;
  v22 = "md::GridLogic]";
  v23[0] = 13;
  *(_QWORD *)&v18 = 0x336A901A15BB7353;
  *((_QWORD *)&v18 + 1) = "md::GridContext]";
  v19 = 15;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C28;
  *(_QWORD *)&v8 = 21;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8B38;
  v17 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v15 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v15 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v16 = 21;
  *(_QWORD *)&v6 = 0x13043386C0978CC2;
  *((_QWORD *)&v6 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v7 = 23;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v18 + 1) = "md::TileSelectionLogic]";
  v19 = 22;
  *(_QWORD *)&v15 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v15 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v16 = 24;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 3;
  v9 = xmmword_1E42F8B10;
  v10 = unk_1E42F8B20;
  *(_QWORD *)&v11 = 21;
  v7 = xmmword_1E42F8AF0;
  v8 = unk_1E42F8B00;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v3 = 0xCBF29CE484222325;
  v4 = 0x26u;
  do
    v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_927[v4++]);
  while (v4 != 368);
  v21 = v3;
  v22 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v23[0] = 330;
  *(_QWORD *)&v18 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v18 + 1) = "md::ResolvedTileSelectionContext]";
  v19 = 32;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8B38;
  *(_QWORD *)&v8 = 24;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8B50;
  v17 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v18 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v18 + 1) = "md::PendingSceneLogic]";
  v19 = 21;
  *(_QWORD *)&v15 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v15 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v16 = 23;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 5;
  v11 = xmmword_1E42F8BA8;
  v12 = *(_OWORD *)&off_1E42F8BB8;
  v13 = xmmword_1E42F8BC8;
  v14 = 25;
  v7 = xmmword_1E42F8B68;
  v8 = unk_1E42F8B78;
  v9 = xmmword_1E42F8B88;
  v10 = unk_1E42F8B98;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v21 = 0x2B7C4502BD3C99C6;
  v22 = "md::ResolvedSceneLogic]";
  v23[0] = 22;
  *(_QWORD *)&v18 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v18 + 1) = "md::SceneContext]";
  v19 = 16;
  v20 = 1;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C10;
  v17 = 23;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F8BE0;
  v8 = unk_1E42F8BF0;
  v9 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v15, (uint64_t)&v6);
  *(_QWORD *)&v15 = 0xD2443A61CED86C69;
  *((_QWORD *)&v15 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v16 = 17;
  *(_QWORD *)&v6 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v6 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v7 = 19;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v15 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v15 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v16 = 14;
  *(_QWORD *)&v6 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v6 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v7 = 21;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  v21 = 0x20A1ED17D78F322BLL;
  v22 = "md::LabelsLogic]";
  v23[0] = 15;
  *(_QWORD *)&v18 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v18 + 1) = "md::LabelsContext]";
  v19 = 17;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C28;
  *(_QWORD *)&v8 = 21;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C40;
  v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v15 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v15 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v16 = 18;
  *(_QWORD *)&v6 = 0x7851AF310F49C988;
  *((_QWORD *)&v6 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v7 = 25;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v18 + 1) = "md::MapZoomLevelStyleLogic]";
  v19 = 26;
  *(_QWORD *)&v15 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v15 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v16 = 33;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F8898;
  v8 = unk_1E42F88A8;
  v9 = xmmword_1E42F88B8;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xEA624BC935BAF297;
  *((_QWORD *)&v18 + 1) = "md::mun::MuninLogic]";
  v19 = 19;
  *(_QWORD *)&v15 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v15 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v16 = 21;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 3;
  v9 = xmmword_1E42F8D08;
  v10 = unk_1E42F8D18;
  *(_QWORD *)&v11 = 20;
  v7 = xmmword_1E42F8CE8;
  v8 = unk_1E42F8CF8;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 1, (uint64_t)&v6, (uint64_t)&v21);
  return this;
}

void sub_19F549D94(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::ARAssetOcclusionMeshData::~ARAssetOcclusionMeshData(md::ARAssetOcclusionMeshData *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E42A0020;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *((_QWORD *)this + 23);
    v4 = (void *)*((_QWORD *)this + 22);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 23);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v2;
    operator delete(v4);
  }
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8 != *((void **)this + 6))
    free(v8);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E42A0020;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *((_QWORD *)this + 23);
    v4 = (void *)*((_QWORD *)this + 22);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 23);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v2;
    operator delete(v4);
  }
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8 != *((void **)this + 6))
    free(v8);
  JUMPOUT(0x1A1AF4E00);
}

void md::ARAssetOcclusionMeshData::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *ChildNode;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[7];
  int v10;
  _BYTE v11[8];
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[7];
  int v18;
  __int128 v19[2];

  gdc::LayerData::createDebugNode(a1, a2);
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)&v19[0] = v4;
  *(__int128 *)((char *)v19 + 8) = xmmword_19FFB3800;
  strcpy(v4, "ARAssetOcclusionMeshData");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, v19);
  operator delete(v4);
  BYTE7(v19[1]) = 19;
  strcpy((char *)v19, "UsesOcclusionMeshes");
  v6 = *(unsigned __int8 *)(a1 + 200);
  v18 = 0;
  memset(&v17[4], 0, 24);
  v17[0] = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v17);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
  BYTE7(v19[1]) = 18;
  strcpy((char *)v19, "OcclusionMeshCount");
  v14 = 0;
  v15 = 0;
  v16 = 1;
  v13 = 0;
  v12 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v11);
  v8 = *(_QWORD *)(a1 + 168);
  BYTE7(v19[1]) = 7;
  strcpy((char *)v19, "AssetId");
  v10 = 1;
  memset(&v9[4], 0, 24);
  v9[1] = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v9);
}

void sub_19F54A0A0(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

char *std::vector<md::OcclusionMesh>::__emplace_back_slow_path<std::vector<gm::Matrix<float,3,1>>>(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = v8 + 24;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = v8;
      *((_QWORD *)v8 - 2) = 0;
      *((_QWORD *)v8 - 1) = 0;
      v14 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((_QWORD *)v13 - 1) = *((_QWORD *)v12 + 2);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
    while (v12 != v11);
    v12 = *a1;
    v15 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 != v12)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void geo::DiscreteOrientedPolytope<arComponents::XY26DOPTraits<float>>::extractVertices(uint64_t a1, char **a2, uint64_t a3, float32x4_t a4, double a5, int32x4_t a6)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32_t v16;
  float v17;
  float v18;
  float32_t v19;
  float v20;
  float v21;
  float v22;
  float32x4_t v23;
  unint64_t v24;
  const float *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int *v30;
  char *v31;
  uint64_t v32;
  float32x4_t v33;
  int v34;
  _BYTE *v35;
  unsigned __int8 *v36;
  float32x4_t v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  __int128 v47;
  __int128 v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char **v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  unint64_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x2_t *v83;
  float *v84;
  float32x2_t v85;
  float v86;
  float32x4_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  unsigned __int8 *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int v106;
  char *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned __int8 *v114;
  unsigned __int8 v115;
  unsigned int v116;
  unint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 v119;
  BOOL v120;
  unsigned __int8 *v121;
  unsigned __int8 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  unsigned __int8 *v141;
  __int128 v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  __int128 v155;
  unsigned __int8 *v156;
  float32x4_t v157;
  unsigned __int8 *v158;
  __int128 v159;
  __int128 v160;
  __int128 v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  __int128 v170;
  unsigned __int8 *v171;
  __int128 v172;
  unsigned __int8 *v173;
  float32x4_t v174;
  float32x4_t v175;
  float *v176;
  int8x16_t v177;
  __int128 v178;
  int8x16_t v179;
  unsigned __int8 *v180;
  float32x4_t v181;
  unsigned __int8 *v182;
  __int128 v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  int v228;

  v7 = 0;
  v8 = 0;
  a4.i32[0] = *(_DWORD *)(a3 + 12);
  v9 = *(float *)(a3 + 16);
  a6.i32[0] = *(_DWORD *)(a3 + 20);
  v10 = *(float *)(a3 + 24);
  v11 = v9 + v9;
  v12 = (float)(v9 + v9) * v9;
  v13 = (float)(*(float *)a6.i32 + *(float *)a6.i32) * *(float *)a6.i32;
  v14 = (float)(a4.f32[0] + a4.f32[0]) * v9;
  v15 = (float)(*(float *)a6.i32 + *(float *)a6.i32) * v10;
  v16 = v14 - v15;
  v17 = *(float *)a6.i32 * (float)(a4.f32[0] + a4.f32[0]);
  v18 = v10 * v11;
  v19 = v15 + v14;
  v20 = 1.0 - (float)((float)(a4.f32[0] + a4.f32[0]) * a4.f32[0]);
  v21 = v11 * *(float *)a6.i32;
  v22 = v10 * (float)(a4.f32[0] + a4.f32[0]);
  v23.i32[1] = 0;
  v23.f32[0] = v17 - (float)(v10 * v11);
  v23.f32[2] = v16;
  v23.f32[3] = v20 - v13;
  a4.i64[0] = *(_QWORD *)a3;
  a4.i32[2] = *(_DWORD *)(a3 + 8);
  v166 = a4;
  LODWORD(v24) = 0;
  v25 = (const float *)(a3 + 36);
  a6.i32[0] = *(_DWORD *)(a3 + 28);
  v26 = (float32x4_t)vzip1q_s32(a6, a6);
  v27.i32[3] = 0;
  v27.f32[0] = 1.0 - (float)(v12 + v13);
  v27.f32[1] = v19;
  v27.f32[2] = v22 + v21;
  v179 = (int8x16_t)vmulq_f32(v26, v23);
  v181 = vmulq_f32(v26, v27);
  HIDWORD(v24) = *(_DWORD *)(a3 + 32);
  v28 = (float32x4_t)vzip1q_s32((int32x4_t)v24, (int32x4_t)v24);
  v175 = vmulq_f32(v28, v27);
  v177 = (int8x16_t)vmulq_f32(v28, v23);
  v29 = vld1q_dup_f32(v25);
  v174 = v29;
  v30 = (int *)(a1 + 4);
  do
  {
    v218 = xmmword_19FFB3590;
    v219 = xmmword_19FFB3590;
    v220 = xmmword_19FFB36A0;
    v221 = xmmword_19FFB36B0;
    v222 = xmmword_19FFB36C0;
    v223 = xmmword_19FFB36D0;
    v224 = xmmword_19FFB36E0;
    v225 = xmmword_19FFB36F0;
    v226 = xmmword_19FFB3700;
    v227 = 0x3E8483EDBF7746EDLL;
    v228 = 0;
    v31 = (char *)&v192 + v7;
    v32 = *(_QWORD *)((char *)&v218 + v8);
    v33.i32[0] = *(v30 - 1);
    v34 = *v30;
    *((_DWORD *)v31 + 2) = *(_DWORD *)((char *)&v218 + v8 + 8);
    *(_QWORD *)v31 = v32;
    v218 = xmmword_19FFB3590;
    v219 = xmmword_19FFB3590;
    v220 = xmmword_19FFB36A0;
    v221 = xmmword_19FFB36B0;
    v222 = xmmword_19FFB36C0;
    v223 = xmmword_19FFB36D0;
    v224 = xmmword_19FFB36E0;
    v225 = xmmword_19FFB36F0;
    v226 = xmmword_19FFB3700;
    v227 = 0x3E8483EDBF7746EDLL;
    v228 = 0;
    v33.i32[1] = *(_DWORD *)((char *)&v218 + v8);
    v33.i64[1] = *(_QWORD *)((char *)&v218 + v8 + 4);
    *(float32x4_t *)(v31 + 12) = vnegq_f32(v33);
    *((_DWORD *)v31 + 7) = v34;
    v8 += 12;
    v7 += 32;
    v30 += 2;
  }
  while (v8 != 156);
  v35 = operator new(3uLL);
  *(_WORD *)v35 = 257;
  v35[2] = 1;
  v36 = (unsigned __int8 *)operator new(0x1AuLL);
  v37.i32[3] = 0;
  v37.f32[0] = v18 + v17;
  v37.f32[1] = v21 - v22;
  v37.f32[2] = v20 - v12;
  v168 = vaddq_f32(v175, (float32x4_t)vextq_s8(v177, v177, 8uLL));
  v169 = vmulq_f32(v174, v37);
  v167 = vaddq_f32(v181, (float32x4_t)vextq_s8(v179, v179, 8uLL));
  *(_QWORD *)(v36 + 3) = 0;
  v38 = v36 + 3;
  *(_QWORD *)(v36 + 11) = 0;
  v39 = v36 + 11;
  *(_QWORD *)(v36 + 18) = 0;
  v40 = v36 + 18;
  *(_WORD *)v36 = 257;
  v41 = v36 + 27;
  v36[2] = 1;
  v42 = v36 + 2;
  v43 = v36 + 26;
  operator delete(v35);
  v44 = v36 + 25;
  v45 = v36 + 24;
  v46 = v36 + 23;
  v47 = v192;
  v48 = v193;
  v49 = v36 + 22;
  v50 = v36 + 21;
  v51 = v36 + 20;
  v52 = v36 + 19;
  v178 = v194;
  v172 = v195;
  v53 = v36 + 17;
  v54 = v36 + 16;
  v55 = v36 + 15;
  v56 = v36 + 14;
  v170 = v196;
  v162 = v197;
  v57 = v36 + 13;
  v58 = v36 + 10;
  v141 = v36 + 9;
  v155 = v198;
  v142 = v199;
  v143 = v36 + 8;
  v156 = v36 + 7;
  v163 = v36 + 6;
  v171 = v36 + 5;
  v139 = v201;
  v140 = v200;
  v173 = v36 + 4;
  v180 = v36 + 1;
  v137 = v203;
  v138 = v202;
  v135 = v205;
  v136 = v204;
  v133 = v207;
  v134 = v206;
  v131 = v209;
  v132 = v208;
  v129 = v211;
  v130 = v210;
  v127 = v213;
  v128 = v212;
  v176 = (float *)(a1 + 4);
  v59 = v36 + 12;
  v125 = v215;
  v126 = v214;
  v123 = v217;
  v124 = v216;
  v61 = xmmword_19FFB36A0;
  v60 = xmmword_19FFB3590;
  v63 = xmmword_19FFB36C0;
  v62 = xmmword_19FFB36B0;
  v65 = xmmword_19FFB36E0;
  v64 = xmmword_19FFB36D0;
  v67 = xmmword_19FFB3700;
  v66 = xmmword_19FFB36F0;
  v68 = a2;
  v153 = v36 + 2;
  v154 = v36 + 25;
  v151 = v36 + 23;
  v152 = v36 + 24;
  v159 = v193;
  v160 = v192;
  v158 = v36 + 14;
  v165 = v36 + 13;
  v182 = v36 + 10;
  v149 = v36 + 21;
  v150 = v36 + 22;
  v147 = v36 + 19;
  v148 = v36 + 20;
  v145 = v36 + 16;
  v146 = v36 + 17;
  v144 = v36 + 15;
  v164 = v36 + 12;
  while (1)
  {
    if (*v36)
    {
      v183 = v47;
      v69 = 1;
    }
    else
    {
      v69 = 0;
    }
    if (*v180)
      *(&v183 + v69++) = v48;
    if (!*v42 || (*(&v183 + v69) = v178, ++v69, v69 != 3))
    {
      if (!*v38 || (*(&v183 + v69) = v172, ++v69, v69 != 3))
      {
        if (!*v173 || (*(&v183 + v69) = v170, ++v69, v69 != 3))
        {
          if (!*v171 || (*(&v183 + v69) = v162, ++v69, v69 != 3))
          {
            if (!*v163 || (*(&v183 + v69) = v155, ++v69, v69 != 3))
            {
              if (!*v156 || (*(&v183 + v69) = v142, ++v69, v69 != 3))
              {
                if (!*v143 || (*(&v183 + v69) = v140, ++v69, v69 != 3))
                {
                  if (!*v141 || (*(&v183 + v69) = v139, ++v69, v69 != 3))
                  {
                    if (!*v58 || (*(&v183 + v69) = v138, ++v69, v69 != 3))
                    {
                      if (!*v39 || (*(&v183 + v69) = v137, ++v69, v69 != 3))
                      {
                        if (!*v59 || (*(&v183 + v69) = v136, ++v69, v69 != 3))
                        {
                          if (!*v57 || (*(&v183 + v69) = v135, ++v69, v69 != 3))
                          {
                            if (!*v56 || (*(&v183 + v69) = v134, ++v69, v69 != 3))
                            {
                              if (!*v55 || (*(&v183 + v69) = v133, ++v69, v69 != 3))
                              {
                                if (!*v54 || (*(&v183 + v69) = v132, ++v69, v69 != 3))
                                {
                                  if (!*v53 || (*(&v183 + v69) = v131, ++v69, v69 != 3))
                                  {
                                    if (!*v40 || (*(&v183 + v69) = v130, ++v69, v69 != 3))
                                    {
                                      if (!*v52 || (*(&v183 + v69) = v129, ++v69, v69 != 3))
                                      {
                                        if (!*v51 || (*(&v183 + v69) = v128, ++v69, v69 != 3))
                                        {
                                          if (!*v50 || (*(&v183 + v69) = v127, ++v69, v69 != 3))
                                          {
                                            if (!*v49 || (*(&v183 + v69) = v126, ++v69, v69 != 3))
                                            {
                                              if (!*v46 || (*(&v183 + v69) = v125, ++v69, v69 != 3))
                                              {
                                                if (!*v45 || (*(&v183 + v69) = v124, ++v69, v69 != 3))
                                                {
                                                  if (*v44)
                                                    *(&v183 + v69) = v123;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v70 = -(float)((float)(v189 * v186) - (float)(v190 * v185));
    v71 = -(float)((float)(v184 * v190) - (float)(v188 * v186));
    v72 = -(float)((float)(v188 * v185) - (float)(v184 * v189));
    v73 = (float)((float)(*(float *)&v183 * v70) + (float)(v71 * *((float *)&v183 + 1)))
        + (float)(*((float *)&v183 + 2) * v72);
    if (fabsf(v73) >= 0.00000011921)
    {
      v74 = 0;
      v75 = 0;
      v76 = -(float)((float)(v191 * v184) - (float)(v187 * v188));
      v77 = -(float)((float)(v191 * v185) - (float)(v187 * v189));
      v78 = -(float)((float)(v191 * v186) - (float)(v187 * v190));
      v79 = -(float)((float)((float)(*((float *)&v183 + 3) * v72) + (float)(v76 * *((float *)&v183 + 1)))
                   - (float)(v77 * *(float *)&v183));
      v80 = (float)-(float)((float)((float)(*((float *)&v183 + 3) * v70) + (float)(v77 * *((float *)&v183 + 2)))
                          - (float)(v78 * *((float *)&v183 + 1)))
          * (float)(1.0 / v73);
      v81 = (float)-(float)((float)((float)(*((float *)&v183 + 3) * v71) + (float)(v78 * *(float *)&v183))
                          - (float)(v76 * *((float *)&v183 + 2)))
          * (float)(1.0 / v73);
      v82 = v79 * (float)(1.0 / v73);
      v83 = (float32x2_t *)((char *)&v218 + 4);
      v84 = v176;
      do
      {
        v218 = v60;
        v219 = v60;
        v220 = v61;
        v221 = v62;
        v222 = v63;
        v223 = v64;
        v224 = v65;
        v225 = v66;
        v226 = v67;
        v227 = 0x3E8483EDBF7746EDLL;
        v228 = 0;
        v85 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v82), LODWORD(v81)), *v83);
        v86 = (float)(v85.f32[0] + (float)(v80 * v83[-1].f32[1])) + v85.f32[1];
        if ((float)(v86 - *(v84 - 1)) < 0.0)
          break;
        if ((float)(v86 - *v84) > 0.0)
          break;
        v74 = v75 > 0xB;
        v84 += 2;
        v83 = (float32x2_t *)((char *)v83 + 12);
        ++v75;
      }
      while (v75 != 13);
      if (v74)
      {
        v87 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v166, v167, v80), v168, v81), v169, v82), 1.0/ (float)((float)((float)((float)(v167.f32[3] * v80) + 1.0) + (float)(v168.f32[3] * v81))+ (float)(v169.f32[3] * v82)));
        v89 = v68[1];
        v88 = (unint64_t)v68[2];
        if ((unint64_t)v89 >= v88)
        {
          v91 = v43;
          v92 = v41;
          v93 = v40;
          v94 = v39;
          v95 = v38;
          v96 = v36;
          v97 = *v68;
          v98 = 0xAAAAAAAAAAAAAAABLL * ((v89 - *v68) >> 2);
          v99 = v98 + 1;
          if (v98 + 1 > 0x1555555555555555)
            abort();
          v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (_QWORD)v97) >> 2);
          if (2 * v100 > v99)
            v99 = 2 * v100;
          if (v100 >= 0xAAAAAAAAAAAAAAALL)
            v101 = 0x1555555555555555;
          else
            v101 = v99;
          if (v101)
          {
            if (v101 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v157 = v87;
            v102 = (char *)operator new(12 * v101);
            v61 = xmmword_19FFB36A0;
            v60 = xmmword_19FFB3590;
            v63 = xmmword_19FFB36C0;
            v62 = xmmword_19FFB36B0;
            v65 = xmmword_19FFB36E0;
            v64 = xmmword_19FFB36D0;
            v67 = xmmword_19FFB3700;
            v66 = xmmword_19FFB36F0;
            v68 = a2;
            v48 = v159;
            v47 = v160;
            v56 = v158;
            v58 = v182;
            v87 = v157;
          }
          else
          {
            v102 = 0;
          }
          v103 = &v102[12 * v98];
          *(_QWORD *)v103 = v87.i64[0];
          *((_DWORD *)v103 + 2) = v87.i32[2];
          v104 = v103;
          v36 = v96;
          if (v89 != v97)
          {
            do
            {
              v105 = *(_QWORD *)(v89 - 12);
              v89 -= 12;
              v106 = *((_DWORD *)v89 + 2);
              *(_QWORD *)(v104 - 12) = v105;
              v104 -= 12;
              *((_DWORD *)v104 + 2) = v106;
            }
            while (v89 != v97);
            v89 = *v68;
          }
          v38 = v95;
          v39 = v94;
          v107 = &v102[12 * v101];
          v90 = v103 + 12;
          *v68 = v104;
          v68[1] = v103 + 12;
          v68[2] = v107;
          v40 = v93;
          v43 = v91;
          if (v89)
          {
            operator delete(v89);
            v58 = v182;
            v56 = v158;
            v48 = v159;
            v47 = v160;
            v68 = a2;
            v67 = xmmword_19FFB3700;
            v66 = xmmword_19FFB36F0;
            v65 = xmmword_19FFB36E0;
            v64 = xmmword_19FFB36D0;
            v63 = xmmword_19FFB36C0;
            v62 = xmmword_19FFB36B0;
            v61 = xmmword_19FFB36A0;
            v60 = xmmword_19FFB3590;
          }
          v41 = v92;
          v42 = v153;
          v44 = v154;
          v46 = v151;
          v45 = v152;
          v50 = v149;
          v49 = v150;
          v52 = v147;
          v51 = v148;
          v54 = v145;
          v53 = v146;
          v55 = v144;
        }
        else
        {
          *((_DWORD *)v89 + 2) = v87.i32[2];
          *(_QWORD *)v89 = v87.i64[0];
          v90 = v89 + 12;
        }
        v59 = v164;
        v68[1] = v90;
        v57 = v165;
      }
    }
    v108 = *v44;
    v109 = *v45;
    if (v108 < v109)
    {
      v110 = -1;
      v111 = v45;
      v112 = *v45;
      goto LABEL_91;
    }
    v112 = *v46;
    if (v109 < v112)
    {
      v110 = -2;
      v111 = v46;
      goto LABEL_91;
    }
    v113 = *v49;
    if (v112 < v113)
    {
      v110 = -3;
      v111 = v49;
LABEL_88:
      v112 = v113;
      goto LABEL_91;
    }
    v112 = *v50;
    if (v113 < v112)
    {
      v110 = -4;
      v111 = v50;
      goto LABEL_91;
    }
    v113 = *v51;
    if (v112 < v113)
    {
      v110 = -5;
      v111 = v51;
      goto LABEL_88;
    }
    v112 = *v52;
    if (v113 < v112)
    {
      v110 = -6;
      v111 = v52;
      goto LABEL_91;
    }
    v113 = *v40;
    if (v112 < v113)
    {
      v110 = -7;
      v111 = v40;
      goto LABEL_88;
    }
    v112 = *v53;
    if (v113 < v112)
    {
      v110 = -8;
      v111 = v53;
      goto LABEL_91;
    }
    v113 = *v54;
    if (v112 < v113)
    {
      v110 = -9;
      v111 = v54;
      goto LABEL_88;
    }
    v112 = *v55;
    if (v113 < v112)
    {
      v110 = -10;
      v111 = v55;
      goto LABEL_91;
    }
    v113 = *v56;
    if (v112 < v113)
    {
      v110 = -11;
      v111 = v56;
      goto LABEL_88;
    }
    v112 = *v57;
    if (v113 < v112)
    {
      v110 = -12;
      v111 = v57;
      goto LABEL_91;
    }
    v113 = *v59;
    if (v112 < v113)
    {
      v110 = -13;
      v111 = v59;
      goto LABEL_88;
    }
    v112 = *v39;
    if (v113 < v112)
    {
      v110 = -14;
      v111 = v39;
      goto LABEL_91;
    }
    v113 = *v58;
    if (v112 < v113)
    {
      v110 = -15;
      v111 = v58;
      goto LABEL_88;
    }
    v111 = v141;
    v112 = *v141;
    if (v113 < v112)
    {
      v110 = -16;
      goto LABEL_91;
    }
    v111 = v143;
    v113 = *v143;
    if (v112 < v113)
    {
      v110 = -17;
      goto LABEL_88;
    }
    v111 = v156;
    v112 = *v156;
    if (v113 < v112)
    {
      v110 = -18;
      goto LABEL_91;
    }
    v111 = v163;
    v113 = *v163;
    if (v112 < v113)
    {
      v110 = -19;
      goto LABEL_88;
    }
    v111 = v171;
    v112 = *v171;
    if (v113 < v112)
    {
      v110 = -20;
      goto LABEL_91;
    }
    v111 = v173;
    v113 = *v173;
    if (v112 < v113)
    {
      v110 = -21;
      goto LABEL_88;
    }
    v112 = *v38;
    if (v113 < v112)
    {
      v110 = -22;
      v111 = v38;
      goto LABEL_91;
    }
    v113 = *v42;
    if (v112 < v113)
    {
      v110 = -23;
      v111 = v42;
      goto LABEL_88;
    }
    v111 = v180;
    v112 = *v180;
    if (v113 >= v112)
      break;
    v110 = -24;
LABEL_91:
    v114 = v43;
    do
    {
      v116 = *--v114;
      v115 = v116;
    }
    while (v116 >= v112);
    *v111 = v115;
    *v114 = v112;
    v58 = v182;
    if (v108 >= v109)
    {
      v117 = (unint64_t)&v41[v110];
      v118 = v44;
      do
      {
        v119 = *(_BYTE *)(v117 - 1);
        *(_BYTE *)(v117 - 1) = *v118;
        *v118-- = v119;
        v120 = v117++ >= (unint64_t)v118;
      }
      while (!v120);
    }
  }
  v113 = *v36;
  if (v112 < v113)
  {
    v110 = -25;
    v111 = v36;
    goto LABEL_88;
  }
  v121 = v36 + 1;
  do
  {
    v122 = *(v121 - 1);
    *(v121 - 1) = *v44;
    *v44-- = v122;
    v120 = v121++ >= v44;
  }
  while (!v120);
  operator delete(v36);
}

void sub_19F54AF94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::LayerData::~LayerData(gdc::LayerData *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2 != *((void **)this + 6))
    free(v2);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2 != *((void **)this + 6))
    free(v2);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2 != *((void **)this + 6))
    free(v2);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1D80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1D80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float32x2_t v4;
  float v5;
  float v6;
  float v7;
  _OWORD v8[9];
  uint64_t v9;
  int v10;

  v2 = 0;
  v3 = (float *)(*(_QWORD *)(result + 8) + 4);
  do
  {
    v8[0] = xmmword_19FFB3590;
    v8[1] = xmmword_19FFB3590;
    v8[2] = xmmword_19FFB36A0;
    v8[3] = xmmword_19FFB36B0;
    v8[4] = xmmword_19FFB36C0;
    v8[5] = xmmword_19FFB36D0;
    v8[6] = xmmword_19FFB36E0;
    v8[7] = xmmword_19FFB36F0;
    v8[8] = xmmword_19FFB3700;
    v9 = 0x3E8483EDBF7746EDLL;
    v10 = 0;
    v4 = vmul_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)((char *)v8 + v2 + 4));
    v5 = (float)(v4.f32[0] + (float)(*(float *)a2 * *(float *)((char *)v8 + v2))) + v4.f32[1];
    v6 = fminf(v5, *(v3 - 1));
    v7 = fmaxf(*v3, v5);
    *(v3 - 1) = v6;
    *v3 = v7;
    v2 += 12;
    v3 += 2;
  }
  while (v2 != 156);
  return result;
}

void std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1D38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1D38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  char **v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v3 = *(char ***)(a1 + 8);
  v5 = v3[1];
  v4 = (unint64_t)v3[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *v3;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v3) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(12 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[12 * v9];
    *(_QWORD *)v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        v15 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v16 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v5 != v8);
      v5 = *v3;
    }
    *v3 = v14;
    v3[1] = v7;
    v3[2] = &v13[12 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
  }
  v3[1] = v7;
}

void *_getConfigStoreStringKeysForStateCapture()
{
  return &unk_1E4347E90;
}

uint64_t VectorKitConfig_GetUserDefaultStringKeysForWatchSync()
{
  return MEMORY[0x1E0C9AA60];
}

uint64_t VectorKitConfig_GetConfigStoreStringKeysForWatchSync()
{
  return MEMORY[0x1E0C9AA60];
}

uint64_t ggl::crc32::compute<19ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  return ggl::crc32::crc32Table[v15 ^ a1[17]] ^ ~(v15 >> 8);
}

uint64_t ggl::Circle::FillPipelineState::FillPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::CircleShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1ECE43A80 = 1;
          }
          ggl::Circle::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          unk_1ECE3BFF0 = &ggl::Circle::pipelineDataFillPipelineDeviceStructs(void)::ref;
          qword_1ECE3BFF8 = 0;
          if ((v97 & 1) == 0
          {
            ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Circle::Style::reflection(void)::reflection;
            *(_QWORD *)algn_1ECE3C028 = ggl::Circle::View::reflection(void)::reflection;
            qword_1ECE3C030 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1ECE3C000 = (uint64_t)&ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1ECE3C008 = xmmword_19FFB3410;
        }
      }
      ggl::Circle::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Circle::FillPipelineSetup::typedReflection(void)::ref;
      ggl::CircleShader::typedReflection(v92);
      qword_1ECE2F598 = (uint64_t)&ggl::CircleShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::Circle::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5819E8 = 0;
        qword_1EE5819F0 = (uint64_t)"";
        dword_1EE5819F8 = 0;
        qword_1EE581A00 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1EE581A08 = 1;
      }
      qword_1ECE2F5A0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE2F5A8 = 1;
      qword_1ECE2F5B0 = 0;
      unk_1ECE2F5B8 = 0;
      qword_1ECE2F5C0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F5C8 = 0;
      if ((v95 & 1) == 0
      {
        ggl::Circle::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE581958 = 0;
        qword_1EE581960 = (uint64_t)"style";
        dword_1EE581968 = 3;
        qword_1EE581970 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
        unk_1EE581978 = xmmword_19FFB3720;
        qword_1EE581988 = 1;
        unk_1EE581990 = "view";
        dword_1EE581998 = 3;
        qword_1EE5819A0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        unk_1EE5819A8 = xmmword_19FFB2DB0;
        qword_1EE5819B8 = 2;
        unk_1EE5819C0 = "alphaTint";
        dword_1EE5819C8 = 3;
        qword_1EE5819D0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE5819D8 = 1;
      }
      qword_1ECE2F5D0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F5D8 = 3;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Circle::FillPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42BC188;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Circle::FillPipelineSetup::~FillPipelineSetup(ggl::Circle::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Circle::FillPipelineSetup::constantDataIsEnabled(ggl::Circle::FillPipelineSetup *this, unint64_t a2)
{
  if (a2 < 2)
    return 1;
  if (a2 == 2)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 304) != 0;
  return 0;
}

uint64_t ggl::Circle::FillPipelineSetup::textureIsEnabled(ggl::Circle::FillPipelineSetup *this)
{
  return 0;
}

uint64_t ggl::Circle::FillPipelineSetup::FillPipelineSetup(ggl::Circle::FillPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
      unk_1ECE43A80 = 1;
    }
    ggl::Circle::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
    unk_1ECE3BFF0 = &ggl::Circle::pipelineDataFillPipelineDeviceStructs(void)::ref;
    qword_1ECE3BFF8 = 0;
    if ((v5 & 1) == 0
    {
      ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Circle::Style::reflection(void)::reflection;
      *(_QWORD *)algn_1ECE3C028 = ggl::Circle::View::reflection(void)::reflection;
      qword_1ECE3C030 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    }
    qword_1ECE3C000 = (uint64_t)&ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1ECE3C008 = xmmword_19FFB3410;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::Circle::FillPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42BC158;
  return result;
}

__n128 *karo::media::C3mSceneGraph::push_back(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 *result;

  v3 = *(__n128 **)(a1 + 32);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 40))
  {
    result = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 24, *a2);
  }
  else
  {
    v4 = a2->n128_u64[1];
    v3->n128_u64[0] = a2->n128_u64[0];
    v3->n128_u64[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    result = v3 + 1;
  }
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void md::DaVinciHikingRenderLayer::~DaVinciHikingRenderLayer(md::DaVinciHikingRenderLayer *this)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E42A06A8;
  v2 = (uint64_t *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v2[15]);
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1A1AF4E00](v2, 0x1020C40455D1DCFLL);
  }
  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(this);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E42A06A8;
  v2 = (uint64_t *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v2[15]);
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1A1AF4E00](v2, 0x1020C40455D1DCFLL);
  }
  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::DaVinciHikingRenderLayer::layout(md::DaVinciHikingRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  float v42;
  uint64_t *v43;
  int8x8_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  float v58;
  float v59;
  void *v60;
  float v61;
  int v62;
  void *v63;
  int v64;
  void *v65;
  char v66;
  void *v67;
  int v68;
  uint64_t v69;
  float v70;
  _QWORD *v71;
  int8x8_t v72;
  uint8x8_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id *v92;
  id v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t **v102;
  char v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  __n128 v112;
  uint64_t (***v113)();
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  __n128 v118;
  uint64_t (***v119)();
  uint64_t v120;
  BOOL v121;
  const QuadTile *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  md::TrailJunctionsResource *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t (***v141)();
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *result;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  _BYTE v163[68];
  int v164;
  int v165;
  char v166;
  uint64_t (*v167)();
  char v168;
  uint64_t v169;
  char v170;
  char v171;
  char v172;
  char v173;
  int v174;
  __int16 v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t (**v179)();
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  uint64_t (***v182)();
  char v183;
  char v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  char v190;
  char v191;
  char v192;
  int v193;
  char v194;
  _QWORD v195[3];
  _QWORD *v196;
  _QWORD v197[3];
  _QWORD *v198;
  _QWORD v199[3];
  _QWORD *v200;
  uint64_t (**v201)();
  uint64_t *v202;
  _QWORD *v203;
  uint64_t (***v204)();
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v197[0] = &off_1E42D2008;
  v197[1] = a2;
  v198 = v197;
  v195[0] = &off_1E42D2050;
  v195[1] = a2;
  v196 = v195;
  v200 = v199;
  v199[0] = &off_1E42D2050;
  v199[1] = a2;
  std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v197);
  v3 = v196;
  if (v196 == v195)
  {
    v4 = 4;
    v3 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v198;
  if (v198 == v197)
  {
    v6 = 4;
    v5 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (uint64_t *)*((_QWORD *)a2 + 1);
  v8 = (int8x8_t)v7[1];
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = 0x92F3DC114CADB853 % *(_QWORD *)&v8;
    if (*(_QWORD *)&v8 > 0x92F3DC114CADB853)
      v10 = 0x92F3DC114CADB853;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & 0x92F3DC114CADB853;
  }
  v11 = *v7;
  v12 = *(_QWORD **)(v11 + 8 * v10);
  if (!v12)
    goto LABEL_33;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_33;
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x92F3DC114CADB853)
      {
        if (v13[2] == 0x92F3DC114CADB853)
          goto LABEL_31;
      }
      else if ((v15 & (*(_QWORD *)&v8 - 1)) != v10)
      {
        goto LABEL_33;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_33;
    }
  }
  while (1)
  {
    v14 = v13[1];
    if (v14 == 0x92F3DC114CADB853)
      break;
    if (v14 >= *(_QWORD *)&v8)
      v14 %= *(_QWORD *)&v8;
    if (v14 != v10)
      goto LABEL_33;
LABEL_20:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_33;
  }
  if (v13[2] != 0x92F3DC114CADB853)
    goto LABEL_20;
LABEL_31:
  v16 = v13[5];
  if (*(_QWORD *)(v16 + 8) == 0x92F3DC114CADB853)
  {
    v17 = *(_QWORD *)(v16 + 32);
    goto LABEL_34;
  }
LABEL_33:
  v17 = 0;
LABEL_34:
  if (v9.u32[0] >= 2uLL)
  {
    v19 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v8 <= 0xC97B9E962ADF4AD4)
      v19 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v8;
    v18 = *(_QWORD **)(v11 + 8 * v19);
    do
    {
      do
        v18 = (_QWORD *)*v18;
      while (v18[1] != 0xC97B9E962ADF4AD4);
    }
    while (v18[2] != 0xC97B9E962ADF4AD4);
  }
  else
  {
    v18 = *(_QWORD **)(v11 + 8 * ((*(_QWORD *)&v8 - 1) & 0xC97B9E962ADF4AD4));
    do
    {
      do
        v18 = (_QWORD *)*v18;
      while (v18[1] != 0xC97B9E962ADF4AD4);
    }
    while (v18[2] != 0xC97B9E962ADF4AD4);
  }
  v20 = *(uint64_t **)(v18[5] + 32);
  v21 = *v20;
  v22 = v20[1];
  if (v21 != v22)
  {
    while (*(_BYTE *)v21 != 34)
    {
      v21 += 16;
      if (v21 == v22)
        goto LABEL_50;
    }
  }
  if (v21 == v22)
LABEL_50:
    v161 = 0;
  else
    v161 = *(_QWORD *)(v21 + 8);
  v23 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  v178 = 0;
  v24 = (unsigned __int8 *)*((_QWORD *)this + 51);
  v25 = *(_QWORD **)(v23 + 8);
  v26 = v25[3];
  v27 = v25[4];
  if (v27 == v26)
  {
    v39 = 0;
    v177 = 0;
    v178 = 0;
    if (*((_QWORD *)this + 52) - (_QWORD)v24 > 2uLL)
      goto LABEL_70;
  }
  else
  {
    v28 = 0;
    while (1)
    {
      v29 = *(unsigned __int8 **)(v26 + 8 * v28);
      if (*v29 == *v24)
      {
        v30 = *((_QWORD *)v29 + 1);
        v31 = v25[15];
        if (v30 < (v25[16] - v31) >> 3)
          break;
      }
      if (++v28 >= (unint64_t)((v27 - v26) >> 3))
      {
        v32 = 0;
        goto LABEL_59;
      }
    }
    v32 = *(_QWORD *)(v31 + 8 * v30);
    if (v32)
      v32 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8 * v24[1]);
LABEL_59:
    v177 = 0;
    v178 = v32;
    if (*((_QWORD *)this + 52) - (_QWORD)v24 > 2uLL)
    {
      v33 = v27 - v26;
      if (v27 == v26)
      {
LABEL_69:
        v39 = 0;
      }
      else
      {
        v34 = 0;
        v35 = v33 >> 3;
        while (1)
        {
          v36 = *(unsigned __int8 **)(v26 + 8 * v34);
          if (*v36 == v24[2])
          {
            v37 = *((_QWORD *)v36 + 1);
            v38 = v25[15];
            if (v37 < (v25[16] - v38) >> 3)
              break;
          }
          if (++v34 >= v35)
            goto LABEL_69;
        }
        v39 = *(_QWORD **)(v38 + 8 * v37);
        if (v39)
          v39 = *(_QWORD **)(v39[3] + 8 * v24[3]);
      }
LABEL_70:
      v177 = v39;
      v40 = v39[9];
      if (v39[10] != v40)
        v39[10] = v40;
    }
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "trailJunctionElevationOffset");
  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::updateZScaleAndOffset((uint64_t **)this + 34, a2, v42);

  v43 = (uint64_t *)*((_QWORD *)a2 + 1);
  v44 = (int8x8_t)v43[1];
  v45 = (uint8x8_t)vcnt_s8(v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    v46 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v44;
    if (*(_QWORD *)&v44 > 0x8BD499FBD96FBB9ELL)
      v46 = 0x8BD499FBD96FBB9ELL;
  }
  else
  {
    v46 = (*(_QWORD *)&v44 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v47 = *v43;
  v48 = *(_QWORD **)(v47 + 8 * v46);
  if (!v48)
    goto LABEL_94;
  v49 = (_QWORD *)*v48;
  if (!v49)
    goto LABEL_94;
  if (v45.u32[0] < 2uLL)
  {
    while (1)
    {
      v51 = v49[1];
      if (v51 == 0x8BD499FBD96FBB9ELL)
      {
        if (v49[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_92;
      }
      else if ((v51 & (*(_QWORD *)&v44 - 1)) != v46)
      {
        goto LABEL_94;
      }
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v50 = v49[1];
    if (v50 != 0x8BD499FBD96FBB9ELL)
    {
      if (v50 >= *(_QWORD *)&v44)
        v50 %= *(_QWORD *)&v44;
      if (v50 != v46)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v49[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_81:
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v52 = v49[5];
  if (*(_QWORD *)(v52 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v53 = *(_QWORD *)(v52 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v53 = 0;
LABEL_95:
  if (v45.u32[0] >= 2uLL)
  {
    v55 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v44 <= 0x1AF456233693CD46uLL)
      v55 = 0x1AF456233693CD46uLL % *(_QWORD *)&v44;
    v54 = *(_QWORD **)(v47 + 8 * v55);
    do
    {
      do
        v54 = (_QWORD *)*v54;
      while (v54[1] != 0x1AF456233693CD46);
    }
    while (v54[2] != 0x1AF456233693CD46);
  }
  else
  {
    v54 = *(_QWORD **)(v47 + 8 * ((*(_QWORD *)&v44 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v54 = (_QWORD *)*v54;
      while (v54[1] != 0x1AF456233693CD46);
    }
    while (v54[2] != 0x1AF456233693CD46);
  }
  v56 = *(_QWORD *)(v54[5] + 32);
  v57 = *(unsigned __int8 *)(v56 + 3776) - 1;
  HIDWORD(v158) = v57 < 3;
  if (*((_BYTE *)this + 34) != 38)
  {
    v58 = *(float *)(v56 + 3076);
    v59 = *(float *)(v56 + 3080);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "daVinciGlobeSplinedMaxZoom");
    v62 = fmaxf(v59 + v58, 1.0) > (float)(v61 + 1.0);

    HIDWORD(v158) = (v57 < 3) & ~v62;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "enableTileClipping");

  LODWORD(v158) = *(float *)(v53 + 16) <= 0.01 && *(_BYTE *)(v53 + 3) != 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v158);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend(v65, "daVinciEnableRibbonAntialiasing");

  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v163, a2);
  v173 = 0;
  v174 = 1065353216;
  v175 = 0;
  v176 = 0;
  v163[56] = 0;
  v170 = 1;
  v172 = v66;
  v171 = v159;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "ribbonCrispness");
  v164 = v68;

  v168 = v160;
  v69 = *((_QWORD *)this + 47);
  v165 = *(_DWORD *)(*(_QWORD *)(v69 + 120) + 8);
  v176 = v69;
  v70 = 1.0;
  if (*((_BYTE *)this + 34) == 37)
    v70 = *(float *)(v17 + 4);
  v174 = LODWORD(v70);
  LOBYTE(v175) = 1;
  v71 = (_QWORD *)*((_QWORD *)a2 + 1);
  v72 = (int8x8_t)v71[1];
  if (!*(_QWORD *)&v72)
    goto LABEL_136;
  v73 = (uint8x8_t)vcnt_s8(v72);
  v73.i16[0] = vaddlv_u8(v73);
  if (v73.u32[0] > 1uLL)
  {
    v74 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v72 <= 0xDFC317497CF9A4BFLL)
      v74 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v72;
  }
  else
  {
    v74 = (*(_QWORD *)&v72 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v75 = *(_QWORD **)(*v71 + 8 * v74);
  if (!v75)
    goto LABEL_136;
  v76 = (_QWORD *)*v75;
  if (!v76)
    goto LABEL_136;
  if (v73.u32[0] < 2uLL)
  {
    while (1)
    {
      v78 = v76[1];
      if (v78 == 0xDFC317497CF9A4BFLL)
      {
        if (v76[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_133;
      }
      else if ((v78 & (*(_QWORD *)&v72 - 1)) != v74)
      {
        goto LABEL_136;
      }
      v76 = (_QWORD *)*v76;
      if (!v76)
        goto LABEL_136;
    }
  }
  while (1)
  {
    v77 = v76[1];
    if (v77 == 0xDFC317497CF9A4BFLL)
      break;
    if (v77 >= *(_QWORD *)&v72)
      v77 %= *(_QWORD *)&v72;
    if (v77 != v74)
      goto LABEL_136;
LABEL_122:
    v76 = (_QWORD *)*v76;
    if (!v76)
      goto LABEL_136;
  }
  if (v76[2] != 0xDFC317497CF9A4BFLL)
    goto LABEL_122;
LABEL_133:
  v79 = v76[5];
  if (*(_QWORD *)(v79 + 8) != 0xDFC317497CF9A4BFLL)
  {
LABEL_136:
    LOBYTE(v80) = 0;
    goto LABEL_137;
  }
  v80 = *(_QWORD *)(v79 + 32);
  if (v80)
    LOBYTE(v80) = *(_BYTE *)(v80 + 64) != 0;
LABEL_137:
  v166 = v80;
  v81 = *(_QWORD *)(v23 + 160);
  if (v81)
  {
    v82 = *(_QWORD *)(v81 + 32);
    v83 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 96);
    if (v82 < (*(_QWORD *)(*(_QWORD *)(v23 + 8) + 104) - v83) >> 3)
    {
      v81 = *(_QWORD *)(*(_QWORD *)(v83 + 8 * v82) + 16);
      goto LABEL_140;
    }
    v81 = 0;
    v167 = 0;
    if (!*(_QWORD *)&v72)
      goto LABEL_175;
  }
  else
  {
LABEL_140:
    v167 = (uint64_t (*)())v81;
    if (!*(_QWORD *)&v72)
      goto LABEL_175;
  }
  v84 = (uint8x8_t)vcnt_s8(v72);
  v84.i16[0] = vaddlv_u8(v84);
  if (v84.u32[0] > 1uLL)
  {
    v85 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v72 <= 0xA60DDA5A69582425)
      v85 = 0xA60DDA5A69582425 % *(_QWORD *)&v72;
  }
  else
  {
    v85 = (*(_QWORD *)&v72 - 1) & 0xA60DDA5A69582425;
  }
  v86 = *(_QWORD **)(*v71 + 8 * v85);
  if (v86)
  {
    v87 = (_QWORD *)*v86;
    if (v87)
    {
      if (v84.u32[0] < 2uLL)
      {
        v88 = *(_QWORD *)&v72 - 1;
        while (1)
        {
          v90 = v87[1];
          if (v90 == 0xA60DDA5A69582425)
          {
            if (v87[2] == 0xA60DDA5A69582425)
              goto LABEL_163;
          }
          else if ((v90 & v88) != v85)
          {
            goto LABEL_175;
          }
          v87 = (_QWORD *)*v87;
          if (!v87)
            goto LABEL_175;
        }
      }
      do
      {
        v89 = v87[1];
        if (v89 == 0xA60DDA5A69582425)
        {
          if (v87[2] == 0xA60DDA5A69582425)
          {
LABEL_163:
            v91 = v87[5];
            if (*(_QWORD *)(v91 + 8) == 0xA60DDA5A69582425)
            {
              v92 = *(id **)(v91 + 32);
              if (v92 && v81 == 0)
              {
                v94 = *v92;
                objc_msgSend(v94, "textureManager");
                v95 = v180;
                v167 = *v179;
                if (v180)
                {
                  p_shared_owners = (unint64_t *)&v180->__shared_owners_;
                  do
                    v97 = __ldaxr(p_shared_owners);
                  while (__stlxr(v97 - 1, p_shared_owners));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }

              }
            }
            break;
          }
        }
        else
        {
          if (v89 >= *(_QWORD *)&v72)
            v89 %= *(_QWORD *)&v72;
          if (v89 != v85)
            break;
        }
        v87 = (_QWORD *)*v87;
      }
      while (v87);
    }
  }
LABEL_175:
  v98 = (uint64_t *)*((_QWORD *)this + 50);
  v99 = *v98;
  v100 = v98[1];
  if (*v98 != v100)
  {
    do
    {
      md::RoadStyle::layout(*(unint64_t **)(v99 + 32), (uint64_t)v163);
      v99 += 48;
    }
    while (v99 != v100);
  }
  v101 = (uint64_t **)*((_QWORD *)this + 34);
  v102 = (uint64_t **)*((_QWORD *)this + 35);
  if (v101 != v102)
  {
    v103 = 0;
    while (1)
    {
      v104 = *v101;
      if (v64)
        v105 = v104[31];
      else
        v105 = 0;
      v106 = v104[48];
      v107 = *(_QWORD *)(v106 + 736);
      v108 = *(_QWORD *)(v106 + 720);
      if (!(v107 | v108))
      {
        v169 = v105;
        goto LABEL_208;
      }
      md::DaVinciCenterLineRoadsTileData::updateViewAndTransformConstantData(v106, v104[27], v104[29]);
      v169 = v105;
      if (v107)
      {
        v109 = *(_QWORD *)(v107 + 200);
        v110 = *((_QWORD *)this + 47);
        if (v109)
          v111 = v109 == v110;
        else
          v111 = 0;
        if (!v111)
          md::RoadLayer::setSharedResources((_QWORD *)v107, v110);
        md::RoadLayer::layout(v107, (uint64_t)v163);
        v179 = &off_1E42D43C0;
        v180 = (std::__shared_weak_count *)v178;
        v182 = &v179;
        md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v107 + 8), *(_QWORD **)(v107 + 16), &v179, v112);
        v113 = v182;
        if (v182 == &v179)
        {
          v113 = &v179;
          v114 = 4;
        }
        else
        {
          if (!v182)
            goto LABEL_197;
          v114 = 5;
        }
        (*v113)[v114]();
      }
LABEL_197:
      if (!v108)
        goto LABEL_208;
      md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)&v179, a2);
      v190 = 1;
      v191 = v159;
      v192 = v160;
      v189 = v105;
      v193 = v174;
      v194 = v175;
      v115 = *(_QWORD *)(v108 + 192);
      v116 = *((_QWORD *)this + 46);
      if (v115)
        v117 = v115 == v116;
      else
        v117 = 0;
      if (!v117)
        *(_QWORD *)(v108 + 192) = v116;
      md::PatternedLayer::layout(v108, (uint64_t)&v179);
      v201 = &off_1E42D4408;
      v202 = (uint64_t *)v178;
      v204 = &v201;
      md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v108 + 8), *(_QWORD **)(v108 + 16), &v201, v118);
      v119 = v204;
      if (v204 == &v201)
      {
        v119 = &v201;
        v120 = 4;
      }
      else
      {
        if (!v204)
          goto LABEL_208;
        v120 = 5;
      }
      (*v119)[v120]();
LABEL_208:
      if (v104[50])
        v121 = v161 == 0;
      else
        v121 = 1;
      if (!v121)
      {
        md::JunctionLayoutContext::JunctionLayoutContext((md::JunctionLayoutContext *)&v179, a2);
        v124 = v104[29];
        v123 = v104[30];
        if (v123)
        {
          v125 = (unint64_t *)(v123 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v127 = v188;
        v187 = v124;
        v188 = (std::__shared_weak_count *)v123;
        if (!v127)
          goto LABEL_219;
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
          v131 = v104[27];
          v130 = v104[28];
          if (v130)
            goto LABEL_220;
        }
        else
        {
LABEL_219:
          v131 = v104[27];
          v130 = v104[28];
          if (v130)
          {
LABEL_220:
            v132 = (unint64_t *)(v130 + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
        }
        v134 = v186;
        v185 = v131;
        v186 = (std::__shared_weak_count *)v130;
        if (v134)
        {
          v135 = (unint64_t *)&v134->__shared_owners_;
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        v184 = v168;
        v183 = v171;
        v137 = (md::TrailJunctionsResource *)v104[50];
        v138 = *((_QWORD *)v137 + 14);
        v139 = *((_QWORD *)this + 54);
        if (v138)
          v140 = v138 == v139;
        else
          v140 = 0;
        if (!v140)
          *((_QWORD *)v137 + 14) = v139;
        md::TrailJunctionsResource::updateWithContext(v137, (const md::JunctionLayoutContext *)&v179, v122);
        v201 = &off_1E42D2098;
        v202 = &v178;
        v203 = &v177;
        v204 = &v201;
        md::TrailJunctionsResource::collectRenderItems((uint64_t)v137, (uint64_t)&v201);
        v141 = v204;
        if (v204 == &v201)
        {
          v141 = &v201;
          v142 = 4;
LABEL_236:
          (*v141)[v142]();
        }
        else if (v204)
        {
          v142 = 5;
          goto LABEL_236;
        }
        v143 = v188;
        if (!v188)
          goto LABEL_241;
        v144 = (unint64_t *)&v188->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
          v146 = v186;
          if (v186)
          {
LABEL_242:
            v147 = (unint64_t *)&v146->__shared_owners_;
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
        }
        else
        {
LABEL_241:
          v146 = v186;
          if (v186)
            goto LABEL_242;
        }
        v149 = v181;
        if (v181)
        {
          v150 = (unint64_t *)&v181->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        v103 = 1;
      }
      if (++v101 == v102)
        goto LABEL_255;
    }
  }
  v103 = 0;
LABEL_255:
  v152 = *(_QWORD *)(v178 + 72);
  v153 = *(uint64_t **)(v178 + 80);
  v154 = 126 - 2 * __clz((uint64_t)((uint64_t)v153 - v152) >> 3);
  if (v153 == (uint64_t *)v152)
    v155 = 0;
  else
    v155 = v154;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v152, v153, v155, 1);
  if ((v103 & 1) != 0 && v177)
    ggl::CommandBuffer::stableSortRenderItems((__n128 *)v177[9], (char *)v177[10]);
  if (!v200)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v200 + 48))(v200);
  result = v200;
  if (v200 == v199)
  {
    v157 = 4;
    result = v199;
  }
  else
  {
    if (!v200)
      return result;
    v157 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v157))();
}

void sub_19F54D0D8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 176));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DaVinciCenterlineRoadsLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::JunctionLayoutContext::~JunctionLayoutContext(md::JunctionLayoutContext *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D2098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D2098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::operator()(uint64_t a1, ggl::RenderItem **a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  ggl::RenderItem *v5;
  int v6;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  v5 = *a2;
  v6 = *a3;
  *((_QWORD *)v5 + 6) = 0;
  if (v6)
  {
    result = *v3;
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  }
  result = *v4;
  if (*v4)
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4408;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D43C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2050;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2050;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DaVinciCenterlineRoadsLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2008;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2008;
  a2[1] = v2;
  return result;
}

void std::default_delete<md::RoadStyling>::operator()[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (!*a1)
LABEL_18:
    JUMPOUT(0x1A1AF4E00);
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
  {
LABEL_17:
    a1[1] = v2;
    operator delete(v4);
    goto LABEL_18;
  }
  while (1)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
    if (!v5)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
      if (v8)
      {
LABEL_10:
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
LABEL_9:
      v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
      if (v8)
        goto LABEL_10;
    }
    v3 -= 48;
    if (v3 == v2)
    {
      v4 = *a1;
      goto LABEL_17;
    }
  }
}

void md::RoadSharedPipelineStates::~RoadSharedPipelineStates(md::RoadSharedPipelineStates *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v14)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v14 + 104));
    v15 = *(std::__shared_weak_count **)(v14 + 8);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    MEMORY[0x1A1AF4E00](v14, 0x1020C40AD78EA61);
  }
}

_QWORD *md::DaVinciHikingRenderLayer::DaVinciHikingRenderLayer(_QWORD *a1, int a2, uint64_t a3, void *a4)
{
  id v7;
  float v8;
  float v9;
  double v10;
  int BOOL;
  double v12;
  md::TrailJunctionRenderable::SharedResources *v13;
  uint64_t v14;
  id v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;

  v7 = a4;
  v8 = -2.0;
  v9 = -2.0;
  if (a2 == 37)
  {
    if (GEOConfigGetBOOL())
    {
      GEOConfigGetDouble();
      v8 = v10;
    }
    BOOL = GEOConfigGetBOOL();
    v9 = -2.0;
    if (BOOL)
    {
      GEOConfigGetDouble();
      v9 = v12;
    }
  }
  md::DaVinciCenterLineRoadsRenderLayer::DaVinciCenterLineRoadsRenderLayer((uint64_t)a1, a2, a3, v7, v8, v9);
  *a1 = &off_1E42A06A8;
  a1[54] = 0;
  v13 = (md::TrailJunctionRenderable::SharedResources *)operator new();
  v14 = objc_msgSend(v7, "shaderLibrary");
  v15 = *(id *)(a3 + 104);
  md::TrailJunctionRenderable::SharedResources::SharedResources(v13, *(const ggl::StandardLibrary **)(*(_QWORD *)(v14 + 80) + 296), *(const RenderTargetFormat **)(*(_QWORD *)(v14 + 80) + 304), (__int128 *)objc_msgSend(v15, "format"), 1);
  v16 = (uint64_t *)a1[54];
  a1[54] = v13;
  if (v16)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v16[15]);
    v17 = (std::__shared_weak_count *)v16[2];
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *v16;
    *v16 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    MEMORY[0x1A1AF4E00](v16, 0x1020C40455D1DCFLL);
  }

  return a1;
}

void sub_19F54DBC8(_Unwind_Exception *a1)
{
  void *v1;
  md::DaVinciCenterLineRoadsRenderLayer *v2;
  uint64_t v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;

  MEMORY[0x1A1AF4E00](v3, 0x1020C40455D1DCFLL);
  v5 = (uint64_t *)*((_QWORD *)v2 + 54);
  *((_QWORD *)v2 + 54) = 0;
  if (v5)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v5[15]);
    v6 = (std::__shared_weak_count *)v5[2];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *v5;
    *v5 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    MEMORY[0x1A1AF4E00](v5, 0x1020C40455D1DCFLL);
  }
  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(v2);

  _Unwind_Resume(a1);
}

void md::mun::cameraFrameFromStorefront(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v24;
  double v25;
  double v26;
  _BYTE v27[40];
  double v28;
  double v29;
  double v30;
  double v31;

  v3 = a2;
  objc_msgSend(v3, "lookAt");
  v4 = *(double *)v27;
  objc_msgSend(v3, "lookAt");
  v5 = *((double *)&v24 + 1);
  objc_msgSend(v3, "lookAt");
  objc_msgSend(v3, "imageryInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "position");
    v8 = *(double *)&v27[8];
    v9 = *(double *)v27;
    v10 = *(double *)&v27[16];
  }
  else
  {
    memset(v27, 0, sizeof(v27));
    v10 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
  }

  v11 = 1.0 / sqrt(v9 * v9 + v8 * v8 + v10 * v10);
  v12 = v11 * v9;
  v13 = v11 * v8;
  v14 = v11 * v10;
  v15 = 1.0 / sqrt((v4 - v9) * (v4 - v9) + (v5 - v8) * (v5 - v8) + (v23 - v10) * (v23 - v10));
  v16 = -((v4 - v9) * v15);
  v17 = -((v5 - v8) * v15);
  v18 = -((v23 - v10) * v15);
  v19 = -(v17 * v14 - v18 * v13);
  v20 = -(v18 * v12 - v16 * v14);
  v21 = -(v16 * v13 - v17 * v12);
  v22 = 1.0 / sqrt(v19 * v19 + v20 * v20 + v21 * v21);
  *(double *)v27 = v22 * v19;
  *(double *)&v27[8] = v22 * v20;
  *(double *)&v27[16] = v22 * v21;
  *(double *)&v27[24] = -(v22 * v20 * v18 - v22 * v21 * v17);
  *(double *)&v27[32] = -(v22 * v21 * v16 - v22 * v19 * v18);
  v28 = -(v22 * v19 * v17 - v22 * v20 * v16);
  v29 = v16;
  v30 = v17;
  v31 = v18;
  gm::quaternionFromRotationMatrix<double>((double *)&v24, (double *)v27);
  *(double *)v27 = v9;
  *(double *)&v27[8] = v8;
  *(double *)&v27[16] = v10;
  *(_OWORD *)&v27[24] = v24;
  v28 = v25;
  v29 = v26;
  gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset(a1, (double *)v27);

}

void sub_19F54DE44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset(uint64_t a1, double *a2)
{
  __int128 v4;
  long double v5;
  int8x16_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int8x16_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  double v19;
  __double2 v20;
  double v21;
  __double2 v22;
  double v23;
  long double v24;
  long double v25;
  double result;
  double v27;
  double v28;
  _BYTE v29[24];
  double v30;
  double v31;
  double v32;
  double v33;
  __int128 v34;
  double v35;

  v34 = *(_OWORD *)a2;
  v35 = a2[2];
  v4 = v34;
  v5 = v35;
  gdc::CameraFrame<geo::Radians,double>::createLocalEcefFrame((uint64_t)v29, (uint64_t)&v34);
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = v7 * v33 + v8 * v32 - (v9 * v31 + v10 * v30);
  v12 = v8 * v33 + v9 * v30 - (v7 * v32 + v10 * v31);
  v13 = v7 * v31 + v9 * v33 - (v8 * v30 + v10 * v32);
  v14 = v7 * v30 + v8 * v31 + v9 * v32 + v10 * v33;
  *(double *)v15.i64 = -(v11 * v14 - v13 * v12) * -2.0;
  if (fabs(*(double *)v15.i64) >= 1.0)
  {
    v6.i64[0] = 0x3FF921FB54442D18;
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    *(_QWORD *)&v16 = vbslq_s8((int8x16_t)vnegq_f64(v17), v6, v15).u64[0];
  }
  else
  {
    v16 = asin(*(long double *)v15.i64);
  }
  v28 = v16;
  v27 = atan2(v14 * v13 + v11 * v12 + v14 * v13 + v11 * v12, 1.0 - (v11 * v11 + v13 * v13) * 2.0);
  v18 = sqrt(*(double *)&v4 * *(double *)&v4 + *((double *)&v4 + 1) * *((double *)&v4 + 1));
  v19 = atan2(v5, v18 * 0.996647189);
  v20 = __sincos_stret(v19);
  v21 = atan2(v5 + v20.__sinval * v20.__sinval * 42841.3115 * v20.__sinval, v18 + v20.__cosval * v20.__cosval * -42697.6727 * v20.__cosval);
  v22 = __sincos_stret(v21);
  v23 = v18 / v22.__cosval + -6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
  v24 = atan2(*((long double *)&v4 + 1), *(long double *)&v4);
  v25 = atan2(v14 * v12 + v11 * v13 + v14 * v12 + v11 * v13, 1.0 - (v11 * v11 + v12 * v12) * 2.0);
  *(double *)a1 = v21;
  *(long double *)(a1 + 8) = v24;
  *(double *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = -v28;
  *(long double *)(a1 + 40) = v25;
  result = -v27;
  *(double *)(a1 + 48) = -v27;
  return result;
}

void gdc::CameraFrame<geo::Radians,double>::createLocalEcefFrame(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  gdc::CameraFrame<geo::Radians,double>::createLocalEcefBasis(&v22, (double *)a2);
  v4 = v30 + v26 + v22;
  if (v4 <= 0.0)
  {
    if (v22 <= v26 || v22 <= v30)
    {
      v11 = sqrt(1.0 - (v26 + v22) + v30);
      v12 = 1.0 / (v11 + v11);
      v13 = (v28 + v24) * v12;
      v14 = (v29 + v27) * v12;
      v15 = v11 * 0.5;
      v16 = (v23 - v25) * v12;
      v17 = sqrt(v26 + 1.0 - (v22 + v30));
      v18 = 1.0 / (v17 + v17);
      v7 = v17 * 0.5;
      v9 = (v28 - v24) * v18;
      if (v26 > v30)
        v6 = (v25 + v23) * v18;
      else
        v6 = v13;
      if (v26 > v30)
      {
        v8 = (v29 + v27) * v18;
      }
      else
      {
        v7 = v14;
        v8 = v15;
      }
      if (v26 <= v30)
        v9 = v16;
    }
    else
    {
      v19 = sqrt(v22 + 1.0 - (v26 + v30));
      v20 = v19 + v19;
      v6 = v19 * 0.5;
      v21 = 1.0 / v20;
      v7 = (v25 + v23) * (1.0 / v20);
      v8 = (v28 + v24) * v21;
      v9 = (v27 - v29) * v21;
    }
  }
  else
  {
    v5 = 0.5 / sqrt(v4 + 1.0);
    v6 = v5 * (v27 - v29);
    v7 = v5 * (v28 - v24);
    v8 = v5 * (v23 - v25);
    v9 = 0.25 / v5;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(double *)(a1 + 24) = v6;
  *(double *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = v8;
  *(double *)(a1 + 48) = v9;
}

long double gdc::CameraFrame<geo::Radians,double>::createLocalEcefBasis(double *a1, double *a2)
{
  long double v3;
  long double v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  __double2 v11;
  double v12;
  __double2 v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  long double result;
  double v29;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v29 = v3 * v3 + v4 * v4;
  v6 = sqrt(v29);
  v7 = atan2(v5, v6 * 0.996647189);
  v8 = atan2(v4, v3);
  v9 = __sincos_stret(v7);
  v10 = atan2(v5 + v9.__sinval * v9.__sinval * 42841.3115 * v9.__sinval, v6 + v9.__cosval * v9.__cosval * -42697.6727 * v9.__cosval);
  v11 = __sincos_stret(v10);
  v12 = v6 / v11.__cosval;
  v13 = __sincos_stret(v8 + 0.00001);
  v14 = 1.0 / sqrt(v29 + v5 * v5);
  v15 = v14 * v3;
  v16 = v14 * v4;
  v17 = v14 * v5;
  a1[4] = v16;
  a1[5] = v17;
  v18 = -(v3 - v12 * v11.__cosval * v13.__cosval);
  v19 = -(v4 - v12 * v11.__cosval * v13.__sinval);
  v20 = -(v5 - (v12 + -42697.6727 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0)) * v11.__sinval);
  v21 = 1.0 / sqrt(v18 * v18 + v19 * v19 + v20 * v20);
  v22 = v21 * v18;
  v23 = v21 * v19;
  v24 = v21 * v20;
  v25 = -(v24 * v16 - v23 * v17);
  v26 = -(v22 * v17 - v24 * v15);
  v27 = -(v23 * v15 - v22 * v16);
  a1[6] = v25;
  a1[7] = v26;
  a1[8] = v27;
  *a1 = -(v26 * v17 - v27 * v16);
  a1[1] = -(v27 * v15 - v25 * v17);
  result = -(v25 * v16 - v26 * v15);
  a1[2] = result;
  a1[3] = v15;
  return result;
}

uint64_t md::RoadPosition::debugString@<X0>(md::RoadPosition *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  float *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  size_t v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  unint64_t v29;
  void *__p[2];
  __int128 v31;
  int v32;
  uint64_t v33[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33[0] = MEMORY[0x1E0DE4FE0] + 64;
  v25 = v7;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v9, &v26);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v25 = v4 + 24;
  v33[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v26 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  v32 = 16;
  v11 = (float *)(*(uint64_t (**)(md::RoadPosition *))(*(_QWORD *)this + 56))(this);
  md::LabelPoint::mercatorPoint((md::LabelPoint *)v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"(", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
  std::ostream::operator<<();
  if (v11[10] != 3.4028e38)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"), ", 3);
  v13 = *((unsigned __int8 *)this + 9);
  if (v13 <= 8)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)off_1E42ECCF8[v13], qword_19FFB8900[v13]);
  v14 = *((unsigned __int8 *)this + 45);
  if (v14 <= 2)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)off_1E42ECD40[v14], 1);
  if ((*(unsigned int (**)(md::RoadPosition *))(*(_QWORD *)this + 80))(this))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"[Reversed]", 10);
  if ((*(unsigned int (**)(md::RoadPosition *))(*(_QWORD *)this + 88))(this))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"[HasAntn]", 9);
  v15 = 0;
  v16 = 1;
  do
  {
    if ((((unint64_t)*((unsigned int *)this + 3) >> v15) & 1) != 0)
    {
      if ((v16 & 1) == 0)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)",", 1);
      std::ostream::operator<<();
      v16 = 0;
    }
    ++v15;
  }
  while (v15 != 24);
  if ((v32 & 0x10) != 0)
  {
    v18 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) < v29)
    {
      *((_QWORD *)&v31 + 1) = v29;
      v18 = v29;
    }
    v19 = (const void **)&v28;
  }
  else
  {
    if ((v32 & 8) == 0)
    {
      v17 = 0;
      a2[23] = 0;
      goto LABEL_32;
    }
    v19 = (const void **)v27;
    v18 = v27[2];
  }
  v20 = *v19;
  v17 = v18 - (_QWORD)*v19;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
    goto LABEL_31;
  }
  a2[23] = v17;
  if (v17)
LABEL_31:
    memmove(a2, v20, v17);
LABEL_32:
  a2[v17] = 0;
  v25 = *v6;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v6[3];
  v26 = v10 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v33);
}

void sub_19F54E6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::TrailJunctionsResource::updateWithContext(md::TrailJunctionsResource *this, const md::JunctionLayoutContext *a2, const QuadTile *a3)
{
  _QWORD *v3;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float *v18;
  float v19;
  BOOL v20;
  int v21;
  char v22;
  char v23;
  BOOL v24;
  float v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  float *v29;
  float v30;
  BOOL v31;
  int v32;
  char v33;
  char v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  float *v39;
  float v40;
  int v41;
  char v42;
  char v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  float *v48;
  float v49;
  int v50;
  char v51;
  char v52;
  char v53;
  float v54;
  unsigned int v55;
  unint64_t v56;
  float v57;
  float *v58;
  float v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unint64_t v65;
  float v66;
  float *v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  unint64_t v74;
  float v75;
  float *v76;
  float v77;
  unsigned int v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unint64_t v83;
  float v84;
  float *v85;
  float v86;
  unsigned int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  unint64_t v94;
  float v95;
  float *v96;
  float v97;
  unsigned int v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  unsigned int v104;
  float *v105;
  float v106;
  int v107;
  char v108;
  char v109;
  float v110;
  BOOL v111;
  int v112;
  int v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t *i;
  float *v118;
  float32x4_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  _QWORD v124[2];
  unsigned __int8 v125;
  BOOL v126[9];

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3)
  {
    v119 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v118 = (float *)((char *)this + 56);
    do
    {
      v6 = v3[2];
      v122 = v3 + 2;
      v7 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(v118, v6, &v122);
      v8 = (_QWORD *)v3[2];
      v9 = (std::__shared_weak_count *)v3[3];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v120 = v8;
        v121 = v9;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v123 = v9;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v120 = (_QWORD *)v3[2];
        v121 = 0;
        v123 = 0;
      }
      v122 = v8;
      v124[0] = 0;
      v124[1] = 0;
      v125 = 0;
      if (v8)
        LODWORD(v8) = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v8 + 48))(v8, v124);
      v125 = v8;
      if (v9)
      {
        v14 = (unint64_t *)&v9->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        LODWORD(v8) = v125;
      }
      if ((_DWORD)v8)
      {
        v16 = v122[3];
        if ((int)*((float *)a2 + 6) >= 0x17)
          v17 = 23;
        else
          v17 = (int)*((float *)a2 + 6);
        v18 = *(float **)v16;
        if (*(_QWORD *)v16
          && (v19 = *v18, LODWORD(v18) = *v18 == 1.0, *(_BYTE *)(v16 + 10))
          && (v19 != 0.0 ? (v20 = v19 == 1.0) : (v20 = 1), !v20)
          || (v21 = *(unsigned __int8 *)(v16 + v18 + 11), v19 = 0.0, v21 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          v22 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v16, 0x6Cu, v17, 0, &v120);
          v23 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v16, 0x6Cu, v17, 1, v126);
          if (v19 < 1.0)
            v23 = v22;
        }
        else
        {
          v23 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v122[3], 0x6Cu, v17, v21, 0);
        }
        v25 = *((float *)a2 + 6);
        if (v23)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x5Cu, 2u, fminf(fmaxf(v25, 0.0), 23.0));
        }
        else
        {
          if ((int)v25 >= 0x17)
            v26 = 23;
          else
            v26 = (int)v25;
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x5Cu, v26, 2u, 0);
        }
        *(float32x4_t *)((char *)v7 + 36) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v120)), v119);
        v27 = v122[3];
        if ((int)*((float *)a2 + 6) >= 0x17)
          v28 = 23;
        else
          v28 = (int)*((float *)a2 + 6);
        v29 = *(float **)v27;
        if (*(_QWORD *)v27
          && (v30 = *v29, LODWORD(v29) = *v29 == 1.0, *(_BYTE *)(v27 + 10))
          && (v30 != 0.0 ? (v31 = v30 == 1.0) : (v31 = 1), !v31)
          || (v32 = *(unsigned __int8 *)(v27 + v29 + 11), v30 = 0.0, v32 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          v33 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v27, 0x6Bu, v28, 0, &v120);
          v34 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v27, 0x6Bu, v28, 1, v126);
          if (v30 < 1.0)
            v34 = v33;
        }
        else
        {
          v34 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v122[3], 0x6Bu, v28, v32, 0);
        }
        v35 = *((float *)a2 + 6);
        if (v34)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x5Du, 2u, fminf(fmaxf(v35, 0.0), 23.0));
        }
        else
        {
          if ((int)v35 >= 0x17)
            v36 = 23;
          else
            v36 = (int)v35;
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x5Du, v36, 2u, 0);
        }
        *(float32x4_t *)(v7 + 7) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v120)), v119);
        v37 = v122[3];
        if ((int)*((float *)a2 + 6) >= 0x17)
          v38 = 23;
        else
          v38 = (int)*((float *)a2 + 6);
        v39 = *(float **)v37;
        if (*(_QWORD *)v37
          && (v40 = *v39, LODWORD(v39) = *v39 == 1.0, *(_BYTE *)(v37 + 10))
          && v40 != 0.0
          && v40 != 1.0
          || (v41 = *(unsigned __int8 *)(v37 + v39 + 11), v40 = 0.0, v41 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v37, 0x197u, v38, 0, &v120);
          v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v37, 0x197u, v38, 1, v126);
          if (v40 < 1.0)
            v43 = v42;
        }
        else
        {
          v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v122[3], 0x197u, v38, v41, 0);
        }
        v44 = *((float *)a2 + 6);
        if (v43)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x193u, 2u, fminf(fmaxf(v44, 0.0), 23.0));
        }
        else
        {
          if ((int)v44 >= 0x17)
            v45 = 23;
          else
            v45 = (int)v44;
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x193u, v45, 2u, 0);
        }
        *(float32x4_t *)((char *)v7 + 76) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v120)), v119);
        v46 = v122[3];
        if ((int)*((float *)a2 + 6) >= 0x17)
          v47 = 23;
        else
          v47 = (int)*((float *)a2 + 6);
        v48 = *(float **)v46;
        if (*(_QWORD *)v46
          && (v49 = *v48, LODWORD(v48) = *v48 == 1.0, *(_BYTE *)(v46 + 10))
          && v49 != 0.0
          && v49 != 1.0
          || (v50 = *(unsigned __int8 *)(v46 + v48 + 11), v49 = 0.0, v50 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          v51 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v46, 0x1CFu, v47, 0, &v120);
          v52 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v46, 0x1CFu, v47, 1, v126);
          if (v49 >= 1.0)
            v53 = v52;
          else
            v53 = v51;
        }
        else
        {
          v53 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v122[3], 0x1CFu, v47, v50, 0);
        }
        v54 = *((float *)a2 + 6);
        if (v53)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x1CDu, 2u, fminf(fmaxf(v54, 0.0), 23.0));
        }
        else
        {
          if ((int)v54 >= 0x17)
            v55 = 23;
          else
            v55 = (int)v54;
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x1CDu, v55, 2u, 0);
        }
        *((float32x4_t *)v7 + 6) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v120)), v119);
        v56 = v122[3];
        v57 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        v58 = *(float **)v56;
        if (*(_QWORD *)v56
          && (v59 = *v58, LODWORD(v58) = *v58 == 1.0, *(_BYTE *)(v56 + 10))
          && v59 != 0.0
          && v59 != 1.0
          || (v60 = *(unsigned __int8 *)(v56 + v58 + 11), v59 = 0.0, v60 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v56, 0x5Eu, 0, (BOOL *)&v120, v57);
          v62 = v61;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v56, 0x5Eu, 1u, v126, v57);
          v64 = v62 + (float)((float)(v63 - v62) * v59);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v122[3], 0x5Eu, v60, 0, v57);
        }
        *((float *)v7 + 8) = v64;
        v65 = v122[3];
        v66 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        v67 = *(float **)v65;
        if (*(_QWORD *)v65
          && (v68 = *v67, LODWORD(v67) = *v67 == 1.0, *(_BYTE *)(v65 + 10))
          && v68 != 0.0
          && v68 != 1.0
          || (v69 = *(unsigned __int8 *)(v65 + v67 + 11), v68 = 0.0, v69 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v65, 0x61u, 0, (BOOL *)&v120, v66);
          v71 = v70;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v65, 0x61u, 1u, v126, v66);
          v73 = v71 + (float)((float)(v72 - v71) * v68);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v122[3], 0x61u, v69, 0, v66);
        }
        *((float *)v7 + 13) = v73;
        v74 = v122[3];
        v75 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        v76 = *(float **)v74;
        if (*(_QWORD *)v74
          && (v77 = *v76, LODWORD(v76) = *v76 == 1.0, *(_BYTE *)(v74 + 10))
          && v77 != 0.0
          && v77 != 1.0
          || (v78 = *(unsigned __int8 *)(v74 + v76 + 11), v77 = 0.0, v78 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v74, 0x194u, 0, (BOOL *)&v120, v75);
          v80 = v79;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v74, 0x194u, 1u, v126, v75);
          v82 = v80 + (float)((float)(v81 - v80) * v77);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v122[3], 0x194u, v78, 0, v75);
        }
        *((float *)v7 + 18) = v82;
        v83 = v122[3];
        v84 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        v85 = *(float **)v83;
        if (*(_QWORD *)v83
          && (v86 = *v85, LODWORD(v85) = *v85 == 1.0, *(_BYTE *)(v83 + 10))
          && v86 != 0.0
          && v86 != 1.0
          || (v87 = *(unsigned __int8 *)(v83 + v85 + 11), v86 = 0.0, v87 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v83, 0x1CEu, 0, (BOOL *)&v120, v84);
          v89 = v88;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v83, 0x1CEu, 1u, v126, v84);
          v91 = v89 + (float)((float)(v90 - v89) * v86);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v122[3], 0x1CEu, v87, 0, v84);
        }
        *((float *)v7 + 23) = v91;
        v92 = *((float *)a2 + 6);
        if (v53)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x12Au, 2u, fminf(fmaxf(v92, 0.0), 23.0));
        }
        else
        {
          if ((int)v92 >= 0x17)
            v93 = 23;
          else
            v93 = (int)v92;
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, v122[3], 0x12Au, v93, 2u, 0);
        }
        *(float32x4_t *)((char *)v7 + 124) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v120)), v119);
        v94 = v122[3];
        v95 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        v96 = *(float **)v94;
        if (*(_QWORD *)v94
          && (v97 = *v96, LODWORD(v96) = *v96 == 1.0, *(_BYTE *)(v94 + 10))
          && v97 != 0.0
          && v97 != 1.0
          || (v98 = *(unsigned __int8 *)(v94 + v96 + 11), v97 = 0.0, v98 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v94, 0x129u, 0, (BOOL *)&v120, v95);
          v100 = v99;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v94, 0x129u, 1u, v126, v95);
          v102 = v100 + (float)((float)(v101 - v100) * v97);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v122[3], 0x129u, v98, 0, v95);
        }
        *((float *)v7 + 30) = v102;
        *((_DWORD *)v7 + 35) = 0;
        *((_DWORD *)v7 + 40) = 0;
        *((_DWORD *)v7 + 45) = 0;
        v103 = v122[3];
        if ((int)*((float *)a2 + 6) >= 0x17)
          v104 = 23;
        else
          v104 = (int)*((float *)a2 + 6);
        v105 = *(float **)v103;
        if (*(_QWORD *)v103
          && (v106 = *v105, LODWORD(v105) = *v105 == 1.0, *(_BYTE *)(v103 + 10))
          && v106 != 0.0
          && v106 != 1.0
          || (v107 = *(unsigned __int8 *)(v103 + v105 + 11), v106 = 0.0, v107 == 2))
        {
          LOBYTE(v120) = 1;
          v126[0] = 1;
          v108 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v103, 0x5Bu, v104, 0, &v120);
          v109 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v103, 0x5Bu, v104, 1, v126);
          if (v106 < 1.0)
            v109 = v108;
          if (!v109)
          {
LABEL_156:
            v24 = 0;
            *((_BYTE *)v7 + 116) = 0;
            v113 = *((_DWORD *)a2 + 7);
            *((_DWORD *)v7 + 28) = v113;
            *((_BYTE *)v7 + 204) = 0;
            *((_DWORD *)v7 + 50) = v113;
            goto LABEL_157;
          }
        }
        else if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v122[3], 0x5Bu, v104, v107, 0))
        {
          goto LABEL_156;
        }
        v110 = *((float *)v7 + 8);
        v24 = *((float *)v7 + 30) > 0.0;
        v111 = v110 <= 0.0;
        *((_BYTE *)v7 + 116) = v110 > 0.0;
        v112 = *((_DWORD *)a2 + 7);
        *((_DWORD *)v7 + 28) = v112;
        *((_BYTE *)v7 + 204) = v24;
        *((_DWORD *)v7 + 50) = v112;
        if (!v111)
          v24 = 1;
      }
      else
      {
        v24 = 0;
      }
LABEL_157:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v122);
      if (!v9)
        goto LABEL_161;
      v114 = (unint64_t *)&v9->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v24)
        {
LABEL_162:
          v116 = (uint64_t *)v3[4];
          for (i = (uint64_t *)v3[5]; v116 != i; v116 += 2)
          {
            if (*((_BYTE *)v7 + 116))
              md::TrailJunctionRenderable::writePass(*v116, 0, (uint64_t)a2, (uint64_t)(v7 + 4), *((_QWORD *)this + 14));
            if (*((_BYTE *)v7 + 204))
              md::TrailJunctionRenderable::writePass(*v116, 1u, (uint64_t)a2, (uint64_t)(v7 + 15), *((_QWORD *)this + 14));
          }
        }
      }
      else
      {
LABEL_161:
        if (v24)
          goto LABEL_162;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
}

void sub_19F54F360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v51;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 208, 8);
  v12 = (_QWORD *)v15;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = v8;
  v16 = *a3;
  *(_QWORD *)(v15 + 16) = **a3;
  v17 = v16[1];
  *(_QWORD *)(v15 + 24) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_OWORD *)(v15 + 192) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_DWORD *)(v15 + 48) = 1065353216;
  *(_QWORD *)(v15 + 52) = 0;
  *(_QWORD *)(v15 + 60) = 0;
  *(_DWORD *)(v15 + 68) = 1065353216;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 80) = 0;
  *(_DWORD *)(v15 + 88) = 1065353216;
  *(_QWORD *)(v15 + 100) = 0;
  *(_QWORD *)(v15 + 92) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v15 + 108) = _D0;
  *(_QWORD *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 128) = 0;
  *(_DWORD *)(v15 + 136) = 1065353216;
  *(_QWORD *)(v15 + 148) = 0;
  *(_QWORD *)(v15 + 140) = 0;
  *(_DWORD *)(v15 + 156) = 1065353216;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_DWORD *)(v15 + 176) = 1065353216;
  *(_QWORD *)(v15 + 188) = 0;
  *(_QWORD *)(v15 + 180) = 0;
  *(_QWORD *)(v15 + 196) = _D0;
  v25 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v26 = a1[12];
  if (!v9 || (float)(v26 * (float)v9) < v25)
  {
    v27 = 1;
    if (v9 >= 3)
      v27 = (v9 & (v9 - 1)) != 0;
    v28 = v27 | (2 * v9);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = *((_QWORD *)a1 + 1);
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_61;
      v42 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v9 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_61:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_74;
      }
      if (!prime)
      {
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v51)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v51, 8 * *((_QWORD *)a1 + 1));
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_61;
      }
    }
    v31 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v32 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v31;
    if (v32)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v32, 8 * *((_QWORD *)a1 + 1));
    v33 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33++) = 0;
    while (prime != v33);
    v35 = (uint64_t *)(a1 + 6);
    v34 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v34)
    {
LABEL_60:
      v9 = prime;
      goto LABEL_61;
    }
    v36 = v34[1];
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v35;
      for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
      {
        v40 = i[1] & v37;
        if (v40 == v38)
        {
          v34 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *v34 = *i;
          v41 = 8 * v40;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v34;
          v34 = i;
          v38 = v40;
        }
      }
      goto LABEL_60;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v35;
    v45 = (_QWORD *)*v34;
    if (!*v34)
      goto LABEL_60;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v36)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v47))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v34;
          goto LABEL_65;
        }
        *v34 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)a1 + v46);
        **(_QWORD **)(*(_QWORD *)a1 + v46) = v45;
        v45 = v34;
      }
      v47 = v36;
LABEL_65:
      v34 = v45;
      v45 = (_QWORD *)*v45;
      v36 = v47;
      if (!v45)
        goto LABEL_60;
    }
  }
LABEL_74:
  v48 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v48)
  {
    *v12 = *v48;
LABEL_82:
    *v48 = v12;
    goto LABEL_83;
  }
  *v12 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v12;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*v12)
  {
    v49 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v49 >= v9)
        v49 %= v9;
    }
    else
    {
      v49 &= v9 - 1;
    }
    v48 = (_QWORD *)(*(_QWORD *)a1 + 8 * v49);
    goto LABEL_82;
  }
LABEL_83:
  ++*((_QWORD *)a1 + 5);
  return v12;
}

void sub_19F54F97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 24);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 208);
  }
  return a1;
}

void md::TrailJunctionsResource::collectRenderItems(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  float *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  altitude::FlyoverBorderRenderable *v12;
  char v13;
  _QWORD *v14;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v4 = (float *)(a1 + 56);
    do
    {
      v5 = v2[2];
      v14 = v2 + 2;
      v6 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(v4, v5, &v14);
      v7 = v2[4];
      v8 = v2[5];
      if (v7 != v8)
      {
        v9 = v6;
        do
        {
          if (*((_BYTE *)v9 + 116))
          {
            v14 = *(_QWORD **)(*(_QWORD *)v7 + 112);
            v13 = 0;
            v10 = *(_QWORD *)(a2 + 24);
            if (!v10)
              goto LABEL_14;
            (*(void (**)(uint64_t, _QWORD **, char *))(*(_QWORD *)v10 + 48))(v10, &v14, &v13);
          }
          if (*((_BYTE *)v9 + 204))
          {
            v14 = *(_QWORD **)(*(_QWORD *)v7 + 120);
            v13 = 1;
            v11 = *(_QWORD *)(a2 + 24);
            if (!v11)
            {
LABEL_14:
              std::__throw_bad_function_call[abi:nn180100]();
              altitude::FlyoverBorderRenderable::~FlyoverBorderRenderable(v12);
              return;
            }
            (*(void (**)(uint64_t, _QWORD **, char *))(*(_QWORD *)v11 + 48))(v11, &v14, &v13);
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void altitude::FlyoverBorderRenderable::~FlyoverBorderRenderable(altitude::FlyoverBorderRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::Renderable::~Renderable(altitude::Renderable *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E42C3938;
  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_QWORD *)this = &off_1E42C3688;
}

{
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverBorderRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEDC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEDC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::FlyoverBorder::FlyoverBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverBorder::FlyoverBorderPipelineSetup>,std::allocator<ggl::FlyoverBorder::FlyoverBorderPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverBorder::FlyoverBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverBorder::FlyoverBorderPipelineSetup>,std::allocator<ggl::FlyoverBorder::FlyoverBorderPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t altitude::FlyoverBorderRenderable::FlyoverBorderRenderable(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, std::__shared_weak_count_vtbl **a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, _DWORD *a11)
{
  char v14;
  uint64_t v15;
  ggl::FlyoverBorder::FlyoverBorderPipelineSetup *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  uint64_t v69;
  int8x16_t v70;
  double v71;
  int8x16_t v72;
  double v73;
  double v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _OWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  _DWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *shared_owners;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v144;
  int v145;
  unsigned __int8 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  geo::read_write_lock *v150;
  const char *v151;
  malloc_zone_t *zone;
  int v153;
  uint64_t v154;
  uint64_t v155;
  geo::read_write_lock *v156;
  const char *v157;
  malloc_zone_t *v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  __int128 v169;
  _OWORD v170[5];
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v14 = *(_BYTE *)(a8 + 96);
  v15 = operator new();
  *(_QWORD *)v15 = &off_1E42B59B0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = "";
  *(_DWORD *)(v15 + 40) = 0;
  *(_DWORD *)(v15 + 56) = 1065353216;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(int64x2_t *)(v15 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v15 + 112) = 0;
  v16 = (ggl::FlyoverBorder::FlyoverBorderPipelineSetup *)operator new();
  ggl::FlyoverBorder::FlyoverBorderPipelineSetup::FlyoverBorderPipelineSetup(v16);
  v17 = (std::__shared_weak_count *)operator new();
  v18 = v17;
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7838;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &off_1E42C3938;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFF00000003;
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = -1;
  *(_BYTE *)(a1 + 180) = 1;
  *(_QWORD *)(a1 + 184) = v15;
  *(_QWORD *)(a1 + 192) = v16;
  *(_QWORD *)(a1 + 200) = v17;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v163 = _Q0;
  *(_OWORD *)(a1 + 232) = _Q0;
  v164 = a1 + 256;
  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  *(_QWORD *)a1 = &off_1E42C5C60;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_BYTE *)(a1 + 312) = v14;
  v27 = *(_QWORD *)(a1 + 192);
  v28 = *(uint64_t **)(v27 + 64);
  v28[1] = 0;
  v29 = *a2;
  *v28 = *a2;
  v30 = *(_QWORD **)(v27 + 160);
  v31 = a2[1];
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)v30[1];
  *v30 = v29;
  v30[1] = v31;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v37->__shared_owners_ = 0;
  v38 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
  v39 = ggl::BufferData::BufferData((uint64_t)&v37[1], qword_1EE550AB8, 2, 1, 6, 1);
  v37[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
  v37[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
  v40 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v40 + 16) = v39;
  *(_QWORD *)(v40 + 24) = 0;
  v41 = *(_QWORD *)(v27 + 160);
  do
    v42 = __ldxr(v38);
  while (__stxr(v42 + 1, v38));
  v43 = *(std::__shared_weak_count **)(v41 + 24);
  *(_QWORD *)(v41 + 16) = v39;
  *(_QWORD *)(v41 + 24) = v37;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  do
    v46 = __ldaxr(v38);
  while (__stlxr(v46 - 1, v38));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  v47 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__shared_weak_owners_ = 0;
  v47->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
  v49 = ggl::BufferData::BufferData((uint64_t)&v47[1], qword_1EE550C18, 2, 1, 6, 1);
  v47[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
  v50 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v50 + 32) = v49;
  *(_QWORD *)(v50 + 40) = 0;
  v51 = *(_QWORD *)(v27 + 160);
  do
    v52 = __ldxr(v48);
  while (__stxr(v52 + 1, v48));
  v53 = *(std::__shared_weak_count **)(v51 + 40);
  *(_QWORD *)(v51 + 32) = v49;
  *(_QWORD *)(v51 + 40) = v47;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v48);
  while (__stlxr(v56 - 1, v48));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  v57 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v57->__shared_owners_ = 0;
  v58 = (unint64_t *)&v57->__shared_owners_;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
  v59 = ggl::BufferData::BufferData((uint64_t)&v57[1], qword_1EE550B78, 2, 1, 6, 1);
  v57[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
  v60 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v60 + 48) = v59;
  *(_QWORD *)(v60 + 56) = 0;
  v61 = *(_QWORD *)(v27 + 160);
  do
    v62 = __ldxr(v58);
  while (__stxr(v62 + 1, v58));
  v63 = *(std::__shared_weak_count **)(v61 + 56);
  *(_QWORD *)(v61 + 48) = v59;
  *(_QWORD *)(v61 + 56) = v57;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  do
    v66 = __ldaxr(v58);
  while (__stlxr(v66 - 1, v58));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  v67 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v67->__shared_owners_ = 0;
  v68 = (unint64_t *)&v67->__shared_owners_;
  v67->__shared_weak_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
  v69 = ggl::BufferData::BufferData((uint64_t)&v67[1], qword_1EE550BD8, 2, 1, 6, 1);
  v67[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
  v67[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
  v77 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v77 + 64) = v69;
  *(_QWORD *)(v77 + 72) = 0;
  v78 = *(_QWORD *)(v27 + 160);
  do
    v79 = __ldxr(v68);
  while (__stxr(v79 + 1, v68));
  v80 = *(std::__shared_weak_count **)(v78 + 72);
  *(_QWORD *)(v78 + 64) = v69;
  *(_QWORD *)(v78 + 72) = v67;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  do
    v83 = __ldaxr(v68);
  while (__stlxr(v83 - 1, v68));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  **(_QWORD **)(v27 + 96) = a2[32];
  altitude::util::computeLocalClipPlanes(a4, (uint64_t)&v169, 1.04999995, v70, v71, v72, v73, v74, v75, v76);
  v84 = *(_QWORD *)(v27 + 64);
  v85 = *(_QWORD **)(v84 + 32);
  v86 = v85[1];
  v87 = (_OWORD *)v85[9];
  *v87 = v169;
  v87[1] = v170[0];
  v87[2] = v170[1];
  v87[3] = v170[2];
  v87[4] = v170[3];
  v87[5] = v170[4];
  if (v85[8] > v86)
    v86 = v85[8];
  v85[7] = 0;
  v85[8] = v86;
  v88 = *(_QWORD **)(v84 + 64);
  v89 = v88[1];
  v90 = (_DWORD *)v88[9];
  *v90 = *a11;
  v90[1] = a11[1];
  v90[2] = *a10;
  v90[3] = a10[1];
  if (v88[8] > v89)
    v89 = v88[8];
  v88[7] = 0;
  v88[8] = v89;
  v91 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v91->__shared_owners_ = 0;
  v92 = (unint64_t *)&v91->__shared_owners_;
  v91->__shared_weak_owners_ = 0;
  v91->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEDC0;
  v93 = *a5;
  v94 = (std::__shared_weak_count *)a5[1];
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v97 = (std::__shared_weak_count *)a6[1];
  v159 = *a6;
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  if ((v100 & 1) == 0)
  {
    v144 = v93;
    v93 = v144;
    if (v145)
    {
      if ((v146 & 1) == 0
      {
        ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverBorder::vertexReflection;
      }
      ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::attributesReflection(void)::r;
      unk_1EE5761F8 = 1;
      v93 = v144;
    }
  }
  v91[3].__shared_weak_owners_ = 0;
  v91[2].__shared_owners_ = 0;
  v91[2].__shared_weak_owners_ = 0;
  LODWORD(v91[3].__vftable) = 0;
  v91[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
  v91[1].__shared_owners_ = (uint64_t)"/meshes/flyover";
  v91[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
  v91[2].__vftable = 0;
  v91[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::typedReflection(void)::r;
  v91[4].__vftable = 0;
  v91[4].__shared_owners_ = 0;
  if ((v101 & 1) == 0)
  {
    v161 = v93;
    v93 = v161;
    if (v147)
    {
      v148 = operator new();
      *(_QWORD *)(v148 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v148 + 24) = "GeoGL";
      *(_OWORD *)(v148 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v148 = &off_1E42B5668;
      *(_QWORD *)(v148 + 8) = "GeoGL";
      *(_OWORD *)(v148 + 72) = 0u;
      *(_OWORD *)(v148 + 88) = 0u;
      *(_OWORD *)(v148 + 104) = 0u;
      *(_OWORD *)(v148 + 120) = 0u;
      *(_OWORD *)(v148 + 136) = 0u;
      *(_OWORD *)(v148 + 152) = 0u;
      *(_OWORD *)(v148 + 168) = 0u;
      *(_OWORD *)(v148 + 184) = 0u;
      *(_OWORD *)(v148 + 200) = 0u;
      *(_OWORD *)(v148 + 216) = 0u;
      *(_OWORD *)(v148 + 232) = 0u;
      *(_QWORD *)(v148 + 248) = 0;
      v149 = v148;
      *(_OWORD *)(v148 + 56) = 0u;
      v150 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v148 + 56), 0);
      if ((_DWORD)v150)
        geo::read_write_lock::logFailure(v150, (uint64_t)"initialization", v151);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v149 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v149 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v149;
      v93 = v161;
    }
  }
  v102 = ggl::Allocator::instance(void)::alloc;
  v91[6].__vftable = 0;
  v91[5].__vftable = 0;
  v91[5].__shared_owners_ = 0;
  v91[4].__shared_weak_owners_ = v102;
  if ((v102 & 1) == 0)
  {
    v162 = v93;
    v93 = v162;
    if (v153)
    {
      v154 = operator new();
      *(_QWORD *)(v154 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v154 + 24) = "GeoGL";
      *(_OWORD *)(v154 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v154 = &off_1E42B5668;
      *(_QWORD *)(v154 + 8) = "GeoGL";
      *(_OWORD *)(v154 + 72) = 0u;
      *(_OWORD *)(v154 + 88) = 0u;
      *(_OWORD *)(v154 + 104) = 0u;
      *(_OWORD *)(v154 + 120) = 0u;
      *(_OWORD *)(v154 + 136) = 0u;
      *(_OWORD *)(v154 + 152) = 0u;
      *(_OWORD *)(v154 + 168) = 0u;
      *(_OWORD *)(v154 + 184) = 0u;
      *(_OWORD *)(v154 + 200) = 0u;
      *(_OWORD *)(v154 + 216) = 0u;
      *(_OWORD *)(v154 + 232) = 0u;
      *(_QWORD *)(v154 + 248) = 0;
      v155 = v154;
      *(_OWORD *)(v154 + 56) = 0u;
      v156 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v154 + 56), 0);
      if ((_DWORD)v156)
        geo::read_write_lock::logFailure(v156, (uint64_t)"initialization", v157);
      v158 = malloc_create_zone(0, 0);
      *(_QWORD *)(v155 + 48) = v158;
      malloc_set_zone_name(v158, "GeoGL");
      *(_QWORD *)(v155 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v155;
      v93 = v162;
    }
  }
  v91[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
  v91[6].__shared_weak_owners_ = 0;
  v91[5].__shared_weak_owners_ = (uint64_t)&v91[6];
  v91[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BD538;
  v91[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BD558;
  *(_QWORD *)&v169 = v93;
  *((_QWORD *)&v169 + 1) = v94;
  if (v94)
  {
    v103 = (unint64_t *)&v94->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)&v91[3].__shared_weak_owners_, (uint64_t *)&v169, (uint64_t *)v170, 1uLL);
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v97)
  {
    v108 = (unint64_t *)&v97->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  shared_owners = (std::__shared_weak_count *)v91[5].__shared_owners_;
  v91[5].__vftable = v159;
  v91[5].__shared_owners_ = (uint64_t)v97;
  if (shared_owners)
  {
    v111 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  v91[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B64B0;
  v91[1].__shared_weak_owners_ = (uint64_t)&unk_1E42B64D0;
  if (v97)
  {
    v113 = (unint64_t *)&v97->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v115 = v91 + 1;
  if (v94)
  {
    v116 = (unint64_t *)&v94->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  do
    v118 = __ldxr(v92);
  while (__stxr(v118 + 1, v92));
  do
    v119 = __ldxr(v92);
  while (__stxr(v119 + 1, v92));
  v120 = *(std::__shared_weak_count **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v115;
  *(_QWORD *)(a1 + 224) = v91;
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = *(_QWORD *)(a1 + 184);
  if (v123)
    *(_QWORD *)(v123 + 64) = v115;
  do
    v124 = __ldaxr(v92);
  while (__stlxr(v124 - 1, v92));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
  }
  if (*(_BYTE *)(a1 + 312))
    v125 = a2 + 31;
  else
    v125 = a2 + 30;
  *(_QWORD *)(a1 + 208) = *v125;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
  *(_OWORD *)(a1 + 232) = v163;
  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 64) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) = *(_QWORD *)(a1 + 208);
  do
    v126 = __ldaxr(v92);
  while (__stlxr(v126 - 1, v92));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
  }
  *(_QWORD *)a1 = &off_1E42C6100;
  v127 = *(_QWORD **)(a1 + 256);
  v128 = *(_QWORD *)(a1 + 264) - (_QWORD)v127;
  if (v128 > 0x17)
  {
    if (v128 != 24)
      *(_QWORD *)(a1 + 264) = v127 + 3;
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append(v164, 3 - (v128 >> 3));
    v127 = *(_QWORD **)v164;
  }
  *v127 = a7;
  *(_QWORD *)(*(_QWORD *)v164 + 8) = a8;
  *(_QWORD *)(*(_QWORD *)v164 + 16) = a9;
  v130 = a2[10];
  v129 = a2[11];
  if (v129)
  {
    v131 = (unint64_t *)(v129 + 8);
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v133 = *(std::__shared_weak_count **)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v130;
  *(_QWORD *)(a1 + 288) = v129;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v137 = a2[12];
  v136 = a2[13];
  if (v136)
  {
    v138 = (unint64_t *)(v136 + 8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  v140 = *(std::__shared_weak_count **)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v137;
  *(_QWORD *)(a1 + 304) = v136;
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 192), *(_QWORD *)(a1 + 280), *(std::__shared_weak_count **)(a1 + 288));
  return a1;
}

void altitude::FlyoverBorderRenderable::setup(uint64_t a1, double *a2, uint64_t a3, float a4)
{
  ggl::PipelineSetup *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _QWORD *v58;
  unint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  float32x4_t v83;
  float32x4_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98[16];
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107[7];
  float64x2_t v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  if (*(_BYTE *)(a1 + 312))
  {
    v8 = *(ggl::PipelineSetup **)(a1 + 192);
    v9 = *(_QWORD *)(a1 + 296);
    v10 = *(std::__shared_weak_count **)(a1 + 304);
LABEL_3:
    ggl::Flyover::FlyoverPipelineSetup::setState(v8, v9, v10);
    goto LABEL_4;
  }
  if (a4 < 1.0)
  {
    v8 = *(ggl::PipelineSetup **)(a1 + 192);
    v9 = *(_QWORD *)(a1 + 296);
    if (*((_QWORD *)v8 + 2) != v9)
    {
      v10 = *(std::__shared_weak_count **)(a1 + 304);
      goto LABEL_3;
    }
  }
  if (a4 >= 1.0)
  {
    v8 = *(ggl::PipelineSetup **)(a1 + 192);
    v9 = *(_QWORD *)(a1 + 280);
    if (*((_QWORD *)v8 + 2) != v9)
    {
      v10 = *(std::__shared_weak_count **)(a1 + 288);
      goto LABEL_3;
    }
  }
LABEL_4:
  v11 = a2[10];
  v12 = a2[11];
  v13 = a2[12];
  v15 = a2[8];
  v14 = a2[9];
  v17 = a2[6];
  v16 = a2[7];
  v18 = -(v15 * v11 - v16 * v12) - (v15 * v11 - v16 * v12);
  v19 = -(v17 * v12 - v15 * v14) - (v17 * v12 - v15 * v14);
  v20 = -(v16 * v14 - v17 * v11) - (v16 * v14 - v17 * v11);
  v21 = -(v20 * v14 - (-(v16 - v18 * v12) - v19 * v13));
  v22 = -(v17 + v18 * v13 + v19 * v12 - v20 * v11);
  v23 = -(v15 + v18 * v11 + v20 * v13 - v19 * v14);
  v24 = v11 * -2.0;
  v25 = -(v11 * (v11 * -2.0));
  v26 = 1.0 - (v25 - v12 * (v12 * -2.0));
  v27 = v14 * -2.0;
  v28 = -(v11 * (v14 * -2.0));
  v29 = v12 * -2.0 * v13;
  v30 = v28 - v29;
  v31 = -(v12 * (v14 * -2.0));
  v32 = v13 * v24 - v12 * (v14 * -2.0);
  v33 = v29 + v28;
  v34 = v14 * -2.0 * v14 + 1.0;
  v35 = v34 - -(v12 * (v12 * -2.0));
  v36 = -(v12 * v24);
  v99.f64[0] = v26;
  v99.f64[1] = v33;
  v101.f64[0] = v30;
  v101.f64[1] = v35;
  v103.f64[0] = v32;
  v103.f64[1] = v36 - v13 * v27;
  v100.f64[0] = v31 - v13 * v24;
  v102 = (float64x2_t)COERCE_UNSIGNED_INT64(v13 * v27 + v36);
  v104.f64[0] = v34 - v25;
  v100.f64[1] = 0.0;
  v104.f64[1] = 0.0;
  v105.f64[0] = v22;
  v105.f64[1] = v21;
  v106.f64[0] = v23;
  v106.f64[1] = 1.0;
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v127 = 0u;
  v129 = 0u;
  v131 = 0u;
  v130 = 0u;
  v128 = 0u;
  v126 = 0u;
  v125 = 0u;
  v132 = 0x3FF0000000000000;
  v38 = *(_QWORD *)(a1 + 240);
  v124 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)&v127 = v38;
  *((_QWORD *)&v129 + 1) = *(_QWORD *)(a1 + 248);
  v39 = *(double *)(v37 + 32);
  v40 = *(double *)(v37 + 40);
  v41 = *(double *)(v37 + 48);
  v42 = v39 + v39;
  v43 = (v39 + v39) * v39;
  v44 = (v40 + v40) * v40;
  v46 = *(_QWORD *)(v37 + 16);
  v45 = *(double *)(v37 + 24);
  v47 = v45 + v45;
  v48 = (v45 + v45) * v39;
  v49 = (v40 + v40) * v41;
  v50 = v48 - v49;
  v51 = v40 * (v45 + v45);
  v52 = v41 * v42;
  v53 = v49 + v48;
  v54 = v41 * v42 + v51;
  v55 = 1.0 - (v45 + v45) * v45;
  v56 = v42 * v40;
  v57 = v41 * v47;
  v109 = 1.0 - (v43 + v44);
  v110 = v53;
  v113 = v50;
  v114 = v55 - v44;
  v117 = v54;
  v118 = v56 - v57;
  v111 = v51 - v52;
  v115 = v57 + v56;
  v119 = v55 - v43;
  v112 = 0;
  v116 = 0;
  v120 = 0;
  v121 = *(_OWORD *)v37;
  v122 = v46;
  v123 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v98, &v109, (double *)&v124);
  gm::operator*<double,4,4,4>(v107[0].f64, v99.f64, v98);
  if (*(_BYTE *)(a1 + 312) || a4 < 1.0)
    *(_QWORD *)(*(_QWORD *)(a1 + 184) + 48) = (unint64_t)((v108.f64[0] + a2[118] * -0.1)
                                                                 * 1.84467441e19
                                                                 / (a2[118]
                                                                  * 1.6)
                                                                 + 1.84467441e19);
  v58 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 64) + 16);
  v59 = v58[1];
  if (v59)
    v60 = (float32x4_t *)v58[9];
  else
    v60 = 0;
  v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[2]), v107[3]);
  *v60 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[0]), v107[1]);
  v60[1] = v61;
  v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[6]), v108);
  v60[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[4]), v107[5]);
  v60[3] = v62;
  v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v127 = 0u;
  v129 = 0u;
  v131 = 0u;
  v130 = 0u;
  v128 = 0u;
  v126 = 0u;
  v125 = 0u;
  v132 = 0x3FF0000000000000;
  v64 = *(_QWORD *)(a1 + 240);
  v124 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)&v127 = v64;
  *((_QWORD *)&v129 + 1) = *(_QWORD *)(a1 + 248);
  v65 = *(double *)(v63 + 32);
  v66 = *(double *)(v63 + 40);
  v67 = *(double *)(v63 + 48);
  v68 = v65 + v65;
  v69 = (v65 + v65) * v65;
  v70 = (v66 + v66) * v66;
  v72 = *(_QWORD *)(v63 + 16);
  v71 = *(double *)(v63 + 24);
  v73 = (v71 + v71) * v65;
  v74 = (v66 + v66) * v67;
  v75 = v73 - v74;
  v76 = v66 * (v71 + v71);
  v77 = v67 * v68;
  v78 = v74 + v73;
  v79 = v67 * v68 + v76;
  v80 = 1.0 - (v71 + v71) * v71;
  v81 = v68 * v66;
  v82 = v67 * (v71 + v71);
  v109 = 1.0 - (v69 + v70);
  v110 = v78;
  v113 = v75;
  v114 = v80 - v70;
  v117 = v79;
  v118 = v81 - v82;
  v111 = v76 - v77;
  v115 = v82 + v81;
  v119 = v80 - v69;
  v112 = 0;
  v116 = 0;
  v120 = 0;
  v121 = *(_OWORD *)v63;
  v122 = v72;
  v123 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v99.f64, &v109, (double *)&v124);
  v83 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101), v102);
  v60[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v99), v100);
  v60[5] = v83;
  v84 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v105), v106);
  v60[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v103), v104);
  v60[7] = v84;
  if (v59)
  {
    v85 = v58[8];
    if (v85 <= v59)
      v85 = v59;
    v58[7] = 0;
    v58[8] = v85;
  }
  v86 = *(_QWORD *)(a1 + 192);
  v87 = *(_QWORD *)(*(_QWORD *)(v86 + 64) + 48);
  v88 = *(_QWORD *)(v87 + 8);
  **(float **)(v87 + 72) = a4;
  if (*(_QWORD *)(v87 + 64) > v88)
    v88 = *(_QWORD *)(v87 + 64);
  *(_QWORD *)(v87 + 56) = 0;
  *(_QWORD *)(v87 + 64) = v88;
  v89 = *(char **)(a1 + 256);
  v90 = *(char **)(a1 + 264);
  if (v89 != v90)
  {
    v91 = v90 - v89 - 8;
    v92 = *(char **)(a1 + 256);
    if (v91 < 8)
      goto LABEL_25;
    v93 = (v91 >> 3) + 1;
    v94 = (uint64_t *)(v89 + 8);
    v95 = v93 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v96 = *v94;
      *(_QWORD *)(*(v94 - 1) + 88) = a3;
      *(_QWORD *)(v96 + 88) = a3;
      v94 += 2;
      v95 -= 2;
    }
    while (v95);
    if (v93 != (v93 & 0x3FFFFFFFFFFFFFFELL))
    {
      v92 = &v89[8 * (v93 & 0x3FFFFFFFFFFFFFFELL)];
      do
      {
LABEL_25:
        v97 = *(_QWORD *)v92;
        v92 += 8;
        *(_QWORD *)(v97 + 88) = a3;
      }
      while (v92 != v90);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v86 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v89 + 16);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 96) + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                                                                            + 16);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 96) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16)
                                                                            + 16);
}

void md::OverlayContainer::~OverlayContainer(md::OverlayContainer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void *v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  void (**v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;

  v2 = (_QWORD *)*((_QWORD *)this + 39);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v4)
    operator delete(v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 232));
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 26);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 27);
    v7 = (void *)*((_QWORD *)this + 26);
    if (v6 != v5)
    {
      v8 = v6 - 3;
      v9 = v6 - 3;
      do
      {
        v10 = *v9;
        v9 -= 3;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v5;
    operator delete(v7);
  }
  v12 = (void (***)(_QWORD))*((_QWORD *)this + 23);
  if (v12)
  {
    v13 = (void (***)(_QWORD))*((_QWORD *)this + 24);
    v14 = (void *)*((_QWORD *)this + 23);
    if (v13 != v12)
    {
      v15 = v13 - 3;
      v16 = v13 - 3;
      do
      {
        v17 = *v16;
        v16 -= 3;
        (*v17)(v15);
        v11 = v15 == v12;
        v15 = v16;
      }
      while (!v11);
      v14 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v12;
    operator delete(v14);
  }
  v18 = (void (***)(_QWORD))*((_QWORD *)this + 20);
  if (v18)
  {
    v19 = (void (***)(_QWORD))*((_QWORD *)this + 21);
    v20 = (void *)*((_QWORD *)this + 20);
    if (v19 != v18)
    {
      v21 = v19 - 3;
      v22 = v19 - 3;
      do
      {
        v23 = *v22;
        v22 -= 3;
        (*v23)(v21);
        v11 = v21 == v18;
        v21 = v22;
      }
      while (!v11);
      v20 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v18;
    operator delete(v20);
  }
  v24 = *((_QWORD *)this + 17);
  if (v24)
  {
    v25 = *((_QWORD *)this + 18);
    v26 = (void *)*((_QWORD *)this + 17);
    if (v25 == v24)
    {
LABEL_36:
      *((_QWORD *)this + 18) = v24;
      operator delete(v26);
      goto LABEL_37;
    }
    while (1)
    {
      v27 = *(_QWORD **)(v25 - 8);
      if ((_QWORD *)(v25 - 32) == v27)
      {
        v27 = (_QWORD *)(v25 - 32);
        v28 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_31;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_31:
      v25 -= 40;
      if (v25 == v24)
      {
        v26 = (void *)*((_QWORD *)this + 17);
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  v29 = *((_QWORD *)this + 14);
  if (v29)
  {
    v30 = *((_QWORD *)this + 15);
    v31 = (void *)*((_QWORD *)this + 14);
    if (v30 == v29)
    {
LABEL_47:
      *((_QWORD *)this + 15) = v29;
      operator delete(v31);
      goto LABEL_48;
    }
    while (1)
    {
      v32 = *(_QWORD **)(v30 - 8);
      if ((_QWORD *)(v30 - 32) == v32)
      {
        v32 = (_QWORD *)(v30 - 32);
        v33 = 4;
      }
      else
      {
        if (!v32)
          goto LABEL_42;
        v33 = 5;
      }
      (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_42:
      v30 -= 40;
      if (v30 == v29)
      {
        v31 = (void *)*((_QWORD *)this + 14);
        goto LABEL_47;
      }
    }
  }
LABEL_48:
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
}

void std::default_delete<md::RouteOverlayContainer>::operator()[abi:nn180100](uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 56));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 32));
  v2 = *(char **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(char **)(a1 + 8);
    v4 = *(char **)a1;
    if (v3 != v2)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *(char **)a1;
    }
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ResourceManager::addResourceFetcher<md::S2TileFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, uint64_t *a6, float a7)
{
  id v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  id v19;
  unint64_t v20;
  id v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  id v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[2];
  _QWORD v32[3];
  uint64_t v33;
  std::__shared_weak_count *v34;

  v13 = a3;
  v14 = operator new();
  v16 = *a6;
  v15 = (std::__shared_weak_count *)a6[1];
  v30 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = v13;
    LOWORD(v31[0]) = a5;
    v33 = v16;
    v34 = v15;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  else
  {
    v21 = v13;
    LOWORD(v31[0]) = a5;
    v33 = v16;
    v34 = 0;
  }
  v32[0] = &off_1E42B4B10;
  v32[1] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v14, v13, a4, (unsigned __int16 *)v31, 1, &v33, (uint64_t)v32, a7);
  v32[0] = &off_1E42B4B10;
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)v14 = &off_1E428E670;
  v24 = (std::__shared_weak_count *)operator new(0x38uLL);
  v24->__shared_owners_ = 0;
  v25 = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v26 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v24[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v24[1].__shared_weak_owners_ = (uint64_t)v26;
  v31[0] = (uint64_t)&v24[1];
  v31[1] = (uint64_t)v24;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v14, a5, v31);
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 - 1, v25));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_BYTE *)(v14 + 616) = 0;

  if (v30)
  {
    v28 = (unint64_t *)&v30->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 104))(v14);
  atomic_store(a2, (unint64_t *)(v14 + 104));
  v32[0] = v14;
  gdc::ResourceManager::addResourceFetcher(a1, v32);
  if (v32[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v32[0] + 8))(v32[0]);

}

void sub_19F551F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);

  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher<md::GEOFlyoverTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,VKSharedResources * {__strong}>(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, uint64_t *a6, void *a7, float a8)
{
  id v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  id v24;
  id v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  id v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count_vtbl *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  id v44;
  std::__shared_weak_count *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  uint64_t v49;
  std::__shared_weak_count *v50;

  v15 = a3;
  v44 = a7;
  v16 = operator new();
  v18 = *a6;
  v17 = (std::__shared_weak_count *)a6[1];
  v45 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = v15;
    v22 = v44;
    LOWORD(v46) = a5;
    v49 = v18;
    v50 = v17;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  else
  {
    v24 = v15;
    v25 = v44;
    LOWORD(v46) = a5;
    v49 = v18;
    v50 = 0;
  }
  v48[0] = &off_1E42B4B10;
  v48[1] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v16, v15, a4, (unsigned __int16 *)&v46, 1, &v49, (uint64_t)v48, a8);
  v48[0] = &off_1E42B4B10;
  if (v17)
  {
    v26 = (unint64_t *)&v17->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)v16 = &off_1E42A6BF8;
  *(_BYTE *)(v16 + 618) = 0;
  *(_BYTE *)(v16 + 616) = 0;
  *(_BYTE *)(v16 + 617) = a5 != 50;
  if (a5 == 20)
  {
LABEL_16:
    v28 = (std::__shared_weak_count *)operator new(0x30uLL);
    v28->__shared_owners_ = 0;
    v29 = (unint64_t *)&v28->__shared_owners_;
    v28->__shared_weak_owners_ = 0;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC20;
    v28[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E428BA80;
    v30 = operator new(0x38uLL);
    v30[1] = 0;
    v30[2] = 0;
    *v30 = &off_1E42DD7E0;
    v30[3] = &off_1E42A5A38;
    v31 = objc_alloc_init(MEMORY[0x1E0D276B0]);
    v30[4] = &off_1E42B4EB0;
    v30[5] = v31;
    v28[1].__shared_owners_ = (uint64_t)(v30 + 3);
    v28[1].__shared_weak_owners_ = (uint64_t)v30;
    v46 = &v28[1].__vftable;
    v47 = v28;
    gdc::ResourceFetcher::setDecoder((_QWORD *)v16, a5, (uint64_t *)&v46);
    do
      v32 = __ldaxr(v29);
    while (__stlxr(v32 - 1, v29));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      v33 = v28;
LABEL_27:
      std::__shared_weak_count::__release_weak(v33);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  if (a5 != 48)
  {
    if (a5 != 50)
      goto LABEL_28;
    goto LABEL_16;
  }
  v34 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v34->__shared_owners_ = 0;
  v35 = (unint64_t *)&v34->__shared_owners_;
  v34->__shared_weak_owners_ = 0;
  v34->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBBA8;
  v36 = v44;
  v34[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4293FB8;
  v37 = (std::__shared_weak_count_vtbl *)v36;
  v38 = v37;
  v34[1].__shared_owners_ = (uint64_t)&off_1E429DEB8;
  v34[1].__shared_weak_owners_ = (uint64_t)&off_1E42B4D50;
  if (v37)
    v39 = v37;
  else
    v39 = 0;
  v34[2].__vftable = v39;
  v40 = v39;
  v34[2].__shared_weak_owners_ = (uint64_t)&off_1E4299000;
  v34[3].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B4D50;
  v34[3].__shared_owners_ = (uint64_t)v38;
  v34[4].std::__shared_count = 0u;
  *(_OWORD *)&v34[4].__shared_weak_owners_ = 0u;
  LODWORD(v34[5].__shared_owners_) = 1065353216;
  v34[5].__shared_weak_owners_ = 850045863;
  v34[6].std::__shared_count = 0u;
  *(_OWORD *)&v34[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v34[7].__shared_owners_ = 0u;
  v34[8].__vftable = 0;

  v46 = &v34[1].__vftable;
  v47 = v34;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v16, 48, (uint64_t *)&v46);
  do
    v41 = __ldaxr(v35);
  while (__stlxr(v41 - 1, v35));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    v33 = v34;
    goto LABEL_27;
  }
LABEL_28:

  if (v45)
  {
    v42 = (unint64_t *)&v45->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 104))(v16);
  atomic_store(a2, (unint64_t *)(v16 + 104));
  v48[0] = v16;
  gdc::ResourceManager::addResourceFetcher(a1, v48);
  if (v48[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v48[0] + 8))(v48[0]);

}

void sub_19F55245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  id *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v19;

  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(v15);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x1A1AF4E00](v15, 0x10A1C404F795E9FLL);

  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher<md::S2RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, uint64_t *a6, float a7)
{
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  id v18;
  unint64_t v19;
  id v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v25 = a3;
  v13 = operator new();
  v15 = *a6;
  v14 = (std::__shared_weak_count *)a6[1];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = v25;
    v26 = v15;
    v27 = v14;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  else
  {
    v20 = v25;
    v26 = v15;
    v27 = 0;
  }
  md::RasterTileResourceFetcher::RasterTileResourceFetcher((_QWORD *)v13, v25, a4, a5, &v26, 0, a7);
  if (v14)
  {
    v21 = (unint64_t *)&v14->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)v13 = &off_1E42A44A0;
  *(_BYTE *)(v13 + 628) = 0;
  *(_BYTE *)(v13 + 632) = 0;
  *(_BYTE *)(v13 + 616) = 0;

  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
  atomic_store(a2, (unint64_t *)(v13 + 104));
  v26 = v13;
  gdc::ResourceManager::addResourceFetcher(a1, &v26);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);

}

void sub_19F552764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);

  _Unwind_Resume(a1);
}

void gdc::LayerDataStore::~LayerDataStore(gdc::LayerDataStore *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _BYTE *v9;
  void *v10;
  _BYTE *v11;
  void *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  gdc::LayerDataStore *v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  _BYTE *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  gdc::LayerDataStore *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;

  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((_QWORD *)this + 28);
  if (v5)
  {
    v6 = *((_QWORD *)this + 29);
    v7 = (void *)*((_QWORD *)this + 28);
    if (v6 != v5)
    {
      do
      {
        if (*(_BYTE *)(v6 - 16))
          *(_BYTE *)(v6 - 16) = 0;
        v8 = *(void **)(v6 - 96);
        if (v8 != *(void **)(v6 - 80))
          free(v8);
        v6 -= 112;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v5;
    operator delete(v7);
  }
  v9 = (_BYTE *)*((_QWORD *)this + 25);
  if (v9)
  {
    do
    {
      if (v9[112])
        v9[112] = 0;
      v18 = *(_BYTE **)v9;
      v19 = (void *)*((_QWORD *)v9 + 4);
      if (v19 != *((void **)v9 + 6))
        free(v19);
      operator delete(v9);
      v9 = v18;
    }
    while (v18);
  }
  v10 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_BYTE *)*((_QWORD *)this + 20);
  if (v11)
  {
    while (1)
    {
      v20 = *(_BYTE **)v11;
      v21 = (std::__shared_weak_count *)*((_QWORD *)v11 + 17);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
          break;
      }
      if (v11[112])
        goto LABEL_39;
LABEL_40:
      v24 = (void *)*((_QWORD *)v11 + 4);
      if (v24 != *((void **)v11 + 6))
        free(v24);
      operator delete(v11);
      v11 = v20;
      if (!v20)
        goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v11[112])
      goto LABEL_40;
LABEL_39:
    v11[112] = 0;
    goto LABEL_40;
  }
LABEL_20:
  v12 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v12)
    operator delete(v12);
  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  v13 = (_BYTE *)*((_QWORD *)this + 5);
  if (v13)
  {
    do
    {
      if (v13[112])
        v13[112] = 0;
      v25 = *(_BYTE **)v13;
      v26 = (void *)*((_QWORD *)v13 + 4);
      if (v26 != *((void **)v13 + 6))
        free(v26);
      operator delete(v13);
      v13 = v25;
    }
    while (v25);
  }
  v14 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
    operator delete(v14);
  if (*((_QWORD *)this + 2))
  {
    v15 = *(_QWORD *)this;
    v16 = (gdc::LayerDataStore *)*((_QWORD *)this + 1);
    v17 = *(_QWORD *)v16;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(*(_QWORD *)this + 8);
    **(_QWORD **)(v15 + 8) = v17;
    *((_QWORD *)this + 2) = 0;
    if (v16 != this)
    {
      while (1)
      {
        v27 = (gdc::LayerDataStore *)*((_QWORD *)v16 + 1);
        v28 = (std::__shared_weak_count *)*((_QWORD *)v16 + 17);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
            break;
        }
        if (*((_BYTE *)v16 + 112))
          goto LABEL_55;
LABEL_56:
        v31 = (void *)*((_QWORD *)v16 + 4);
        if (v31 != *((void **)v16 + 6))
          free(v31);
        operator delete(v16);
        v16 = v27;
        if (v27 == this)
          return;
      }
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (!*((_BYTE *)v16 + 112))
        goto LABEL_56;
LABEL_55:
      *((_BYTE *)v16 + 112) = 0;
      goto LABEL_56;
    }
  }
}

gdc::LayerDataStore **std::unique_ptr<gdc::LayerDataStore>::~unique_ptr[abi:nn180100](gdc::LayerDataStore **a1)
{
  gdc::LayerDataStore *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::LayerDataStore::~LayerDataStore(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t *std::unique_ptr<md::ElevationRequestUpdater>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40509EF904);
  }
  return a1;
}

uint64_t *std::unique_ptr<ReachabilityChangedObserver>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 8), "clearListener");
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 8) = 0;

      v3 = *(void **)(v2 + 8);
    }
    *(_QWORD *)v2 = &off_1E42B4FB0;

    MEMORY[0x1A1AF4E00](v2, 0x80C40B49F1EBBLL);
  }
  return a1;
}

void sub_19F552BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &off_1E42B4FB0;

  _Unwind_Resume(a1);
}

void **geo::linear_map<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>,std::equal_to<md::MapDataType>,std::allocator<std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>>,std::vector<std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  gdc::LayerDataStore *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (gdc::LayerDataStore *)*((_QWORD *)v3 - 1);
        *((_QWORD *)v3 - 1) = 0;
        if (v5)
        {
          gdc::LayerDataStore::~LayerDataStore(v5);
          MEMORY[0x1A1AF4E00]();
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **geo::linear_map<md::MapDataType,std::unique_ptr<gdc::DataKeyRequester>,std::equal_to<md::MapDataType>,std::allocator<std::pair<md::MapDataType,std::unique_ptr<gdc::DataKeyRequester>>>,std::vector<std::pair<md::MapDataType,std::unique_ptr<gdc::DataKeyRequester>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        *((_QWORD *)v3 - 1) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D42A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4258;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    gdc::ResourceManager::clearFailedResources(*(gdc::ResourceManager **)(v1 + 56), *(gdc::ResourceManager **)(v1 + 64));
}

void std::__shared_ptr_pointer<md::DaVinciGroundMetaData *,std::shared_ptr<md::DaVinciGroundMetaData>::__shared_ptr_default_delete<md::DaVinciGroundMetaData,md::DaVinciGroundMetaData>,std::allocator<md::DaVinciGroundMetaData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::DaVinciGroundMetaData *,std::shared_ptr<md::DaVinciGroundMetaData>::__shared_ptr_default_delete<md::DaVinciGroundMetaData,md::DaVinciGroundMetaData>,std::allocator<md::DaVinciGroundMetaData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

void _ZNSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42ECD68;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_E7__cloneEPNS0_6__baseISS_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42ECD68;
}

uint64_t _ZNSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_EclESO_SR_OS4_()
{
  return 0;
}

uint64_t std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>::~pair(uint64_t a1)
{
  gdc::LayerDataStore *v2;

  v2 = *(gdc::LayerDataStore **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    gdc::LayerDataStore::~LayerDataStore(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__shared_ptr_pointer<md::FlyoverMetaData *,std::shared_ptr<md::FlyoverMetaData>::__shared_ptr_default_delete<md::FlyoverMetaData,md::FlyoverMetaData>,std::allocator<md::FlyoverMetaData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::FlyoverMetaData *std::__shared_ptr_pointer<md::FlyoverMetaData *,std::shared_ptr<md::FlyoverMetaData>::__shared_ptr_default_delete<md::FlyoverMetaData,md::FlyoverMetaData>,std::allocator<md::FlyoverMetaData>>::__on_zero_shared(uint64_t a1)
{
  md::FlyoverMetaData *result;

  result = *(md::FlyoverMetaData **)(a1 + 24);
  if (result)
  {
    md::FlyoverMetaData::~FlyoverMetaData(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<md::FlyoverRegionManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FlyoverRegionManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::FlyoverRegionManager>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    std::mutex::~mutex((std::mutex *)(v1 + 48));
    std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D4210;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D41C8;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D41C8;
}

uint64_t geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5090;

  return a1;
}

void geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5090;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::OverlayContainer *,std::shared_ptr<md::OverlayContainer>::__shared_ptr_default_delete<md::OverlayContainer,md::OverlayContainer>,std::allocator<md::OverlayContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::OverlayContainer *std::__shared_ptr_pointer<md::OverlayContainer *,std::shared_ptr<md::OverlayContainer>::__shared_ptr_default_delete<md::OverlayContainer,md::OverlayContainer>,std::allocator<md::OverlayContainer>>::__on_zero_shared(uint64_t a1)
{
  md::OverlayContainer *result;

  result = *(md::OverlayContainer **)(a1 + 24);
  if (result)
  {
    md::OverlayContainer::~OverlayContainer(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::World::~World(md::World *this)
{
  NSObject *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  NSObject *v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t k;
  uint64_t v13;
  uint64_t v14;
  uint64_t m;
  gdc::LayerDataStore *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  gdc::LayerDataStore *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  md::World *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v59 = 134217984;
    v60 = this;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "Destroy World:%p", (uint8_t *)&v59, 0xCu);
  }

  (*(void (**)(_QWORD))(**((_QWORD **)this + 46) + 48))(*((_QWORD *)this + 46));
  v3 = (_OWORD *)*((_QWORD *)this + 34);
  *v3 = 0u;
  v3[1] = 0u;
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 8);
  for (i = *(_QWORD *)(v4 + 16); v5 != i; v5 += 24)
    gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v5 + 8));
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(v4 + 56));
  md::TaskContext::flushTileDecodeQueues(*(md::TaskContext **)this);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v7 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v59) = 0;
    _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "~World clear data sources", (uint8_t *)&v59, 2u);
  }

  v8 = *((_QWORD *)this + 4);
  for (j = *((_QWORD *)this + 5); j != v8; j -= 16)
  {
    v10 = *(_QWORD *)(j - 8);
    *(_QWORD *)(j - 8) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  *((_QWORD *)this + 5) = v8;
  v11 = *((_QWORD *)this + 7);
  for (k = *((_QWORD *)this + 8); k != v11; k -= 16)
  {
    v13 = *(_QWORD *)(k - 8);
    *(_QWORD *)(k - 8) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  *((_QWORD *)this + 8) = v11;
  v14 = *((_QWORD *)this + 10);
  for (m = *((_QWORD *)this + 11); m != v14; m -= 16)
  {
    v16 = *(gdc::LayerDataStore **)(m - 8);
    *(_QWORD *)(m - 8) = 0;
    if (v16)
    {
      gdc::LayerDataStore::~LayerDataStore(v16);
      MEMORY[0x1A1AF4E00]();
    }
  }
  *((_QWORD *)this + 11) = v14;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v17 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    LOWORD(v59) = 0;
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_INFO, "~World layerDataManager reset", (uint8_t *)&v59, 2u);
  }

  v18 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *((_QWORD *)this + 36) = &off_1E42B5090;

  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v32)
  {
    objc_msgSend(*(id *)(v32 + 8), "clearListener");
    v33 = *(void **)(v32 + 8);
    if (v33)
    {
      *(_QWORD *)(v32 + 8) = 0;

      v33 = *(void **)(v32 + 8);
    }
    *(_QWORD *)v32 = &off_1E42B4FB0;

    MEMORY[0x1A1AF4E00](v32, 0x80C40B49F1EBBLL);
  }
  v34 = (_QWORD *)*((_QWORD *)this + 29);
  if (v34)
  {
    do
    {
      v35 = (_QWORD *)*v34;
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
  v36 = (void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v36)
    operator delete(v36);
  v37 = (void *)*((_QWORD *)this + 24);
  if (v37)
  {
    *((_QWORD *)this + 25) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 21);
  if (v38)
  {
    *((_QWORD *)this + 22) = v38;
    operator delete(v38);
  }
  v39 = (_QWORD *)*((_QWORD *)this + 18);
  if (v39)
  {
    do
    {
      v40 = (_QWORD *)*v39;
      operator delete(v39);
      v39 = v40;
    }
    while (v40);
  }
  v41 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v41)
    operator delete(v41);
  v42 = *((_QWORD *)this + 10);
  if (v42)
  {
    v43 = *((_QWORD *)this + 11);
    v44 = (void *)*((_QWORD *)this + 10);
    if (v43 != v42)
    {
      do
      {
        v45 = *(gdc::LayerDataStore **)(v43 - 8);
        *(_QWORD *)(v43 - 8) = 0;
        if (v45)
        {
          gdc::LayerDataStore::~LayerDataStore(v45);
          MEMORY[0x1A1AF4E00]();
        }
        v43 -= 16;
      }
      while (v43 != v42);
      v44 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v42;
    operator delete(v44);
  }
  v46 = *((_QWORD *)this + 7);
  if (v46)
  {
    v47 = *((_QWORD *)this + 8);
    v48 = (void *)*((_QWORD *)this + 7);
    if (v47 != v46)
    {
      do
      {
        v49 = *(_QWORD *)(v47 - 8);
        *(_QWORD *)(v47 - 8) = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        v47 -= 16;
      }
      while (v47 != v46);
      v48 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v46;
    operator delete(v48);
  }
  v50 = *((_QWORD *)this + 4);
  if (v50)
  {
    v51 = *((_QWORD *)this + 5);
    v52 = (void *)*((_QWORD *)this + 4);
    if (v51 != v50)
    {
      do
      {
        v53 = *(_QWORD *)(v51 - 8);
        *(_QWORD *)(v51 - 8) = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
        v51 -= 16;
      }
      while (v51 != v50);
      v52 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v50;
    operator delete(v52);
  }
  v54 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v55)
    std::default_delete<md::RouteOverlayContainer>::operator()[abi:nn180100](v55);
  v56 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_19F553704(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  *(_QWORD *)v2 = &off_1E42B4FB0;

  _Unwind_Resume(a1);
}

void md::World::clearAllData(md::World *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t k;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t m;

  v2 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); v2 != i; v2 += 16)
    gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v2 + 8));
  v4 = *((_QWORD *)this + 10);
  for (j = *((_QWORD *)this + 11); v4 != j; v4 += 16)
    gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v4 + 8));
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*((_QWORD *)this + 3) + 56));
  v6 = (_QWORD **)*((_QWORD *)this + 42);
  if (v6)
  {
    v7 = *v6;
    v8 = (_QWORD **)(*v6 + 1);
    std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(*v8);
    *v7 = v8;
    v7[2] = 0;
    *v8 = 0;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 44);
  if (v9)
  {
    if (v9[6])
    {
      v10 = (_QWORD *)v9[5];
      if (v10)
      {
        do
        {
          v11 = (_QWORD *)*v10;
          operator delete(v10);
          v10 = v11;
        }
        while (v11);
      }
      v9[5] = 0;
      v12 = v9[4];
      if (v12)
      {
        for (k = 0; k != v12; ++k)
          *(_QWORD *)(v9[3] + 8 * k) = 0;
      }
      v9[6] = 0;
    }
    if (v9[10])
    {
      v15 = v9[8];
      v14 = (uint64_t *)v9[9];
      v16 = *v14;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
      **(_QWORD **)(v15 + 8) = v16;
      v9[10] = 0;
      if (v14 != v9 + 8)
      {
        do
        {
          v17 = (uint64_t *)v14[1];
          operator delete(v14);
          v14 = v17;
        }
        while (v17 != v9 + 8);
      }
    }
    if (v9[14])
    {
      v18 = (_QWORD *)v9[13];
      if (v18)
      {
        do
        {
          v19 = (_QWORD *)*v18;
          operator delete(v18);
          v18 = v19;
        }
        while (v19);
      }
      v9[13] = 0;
      v20 = v9[12];
      if (v20)
      {
        for (m = 0; m != v20; ++m)
          *(_QWORD *)(v9[11] + 8 * m) = 0;
      }
      v9[14] = 0;
    }
  }
}

void md::World::createDebugNode(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v4;
  char *ChildNode;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t **v10;
  void **v11;
  unint64_t v12;
  const std::string::value_type *v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  __int16 *v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  void **v47;
  char *v48;
  void **v49;
  void *v50;
  void **v51;
  void **v52;
  void *v53;
  void **v54;
  void **v55;
  void *v56;
  void **v57;
  void **v58;
  char *v59;
  void **v60;
  void *v61;
  void **v62;
  void **v63;
  void *v64;
  void **v65;
  void **v66;
  void *v67;
  void **v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  std::string::size_type v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void **v76;
  void **v77;
  void *v78;
  void **v79;
  void **v80;
  void *v81;
  void **v82;
  void **v83;
  void *v84;
  void **v85;
  void **v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void **v95;
  _QWORD *v96;
  char *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  void **v100;
  void **v101;
  void *v102;
  void **v103;
  void **v104;
  void *v105;
  void **v106;
  void **v107;
  void *v108;
  void **v109;
  char *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  void **v113;
  void **v114;
  void *v115;
  void **v116;
  void **v117;
  void *v118;
  void **v119;
  void **v120;
  void *v121;
  void **v122;
  _QWORD *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  std::string::size_type v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  std::string *v145;
  __int128 v146;
  void **v147;
  void **v148;
  void *v149;
  char *v150;
  void **v151;
  void **v152;
  void *v153;
  void **v154;
  void **v155;
  void *v156;
  void **v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  const std::string::value_type *v162;
  uint64_t v163;
  uint64_t v164;
  std::string *v165;
  void **v166;
  void **v167;
  void *v168;
  char *v169;
  const std::string::value_type *v170;
  void **v171;
  void **v172;
  void *v173;
  void **v174;
  void **v175;
  void *v176;
  void **v177;
  _QWORD *v178;
  char *v179;
  char *v180;
  unsigned __int8 *v181;
  char *v182;
  void **v183;
  void **v184;
  void *v185;
  void **v186;
  void **v187;
  void *v188;
  void **v189;
  void **v190;
  void *v191;
  void **v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  BOOL v195;
  char *v196;
  unsigned __int8 *v197;
  char *v198;
  const char *v199;
  uint64_t v200;
  const std::string::value_type *v201;
  uint64_t v202;
  void **v203;
  void **v204;
  void *v205;
  const char *v206;
  void **v207;
  void **v208;
  void *v209;
  void **v210;
  void **v211;
  void *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void **v217;
  void **j;
  void *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void **v225;
  void **k;
  char *v228;
  uint64_t v229;
  char *v230;
  _QWORD *v231;
  uint64_t v233;
  char v234[17];
  _WORD v235[36];
  char v236;
  _QWORD v237[7];
  int v238;
  void *v239;
  void **v240;
  char *v241;
  char v242[8];
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  char v248[8];
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  void *v254;
  char *v255;
  char *v256;
  char v257[8];
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  char v263[17];
  _BYTE v264[9];
  _OWORD v265[3];
  char v266;
  char v267[8];
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  _QWORD v273[7];
  int v274;
  std::string v275;
  std::string v276;
  int v277;
  char v278[23];
  char v279;
  _BYTE __dst[32];
  std::string __p;
  int v282;
  void *v283;
  void **v284;
  std::string v285;
  void *v286;
  uint64_t v287;
  _BYTE v288[55];
  char v289;
  uint64_t v290;

  v290 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0x646C726F57;
  *(_WORD *)(a1 + 23) = 5;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  if (a2[30])
  {
    v4 = (char *)operator new(0x28uLL);
    *(_QWORD *)__dst = v4;
    *(_OWORD *)&__dst[8] = xmmword_19FFB3840;
    strcpy(v4, "ActiveDataDownloadRangeByTileSize");
    ChildNode = gdc::DebugTreeNode::createChildNode(a1, (__int128 *)__dst);
    operator delete(v4);
    for (i = (uint64_t *)a2[29]; i; i = (uint64_t *)*i)
    {
      std::to_string((std::string *)__dst, *((_DWORD *)i + 4));
      v9 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)__dst);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __dst[23] = 3;
      strcpy(__dst, "Min");
      v7 = *((unsigned int *)i + 5);
      v251 = 0;
      v252 = 0;
      v250 = 0;
      v253 = 1;
      v249 = v7;
      gdc::DebugTreeNode::addProperty((uint64_t)v9, (uint64_t)__dst, (uint64_t)v248);
      v8 = *((unsigned int *)i + 6);
      __dst[23] = 3;
      strcpy(__dst, "Max");
      v245 = 0;
      v246 = 0;
      v244 = 0;
      v247 = 1;
      v243 = v8;
      gdc::DebugTreeNode::addProperty((uint64_t)v9, (uint64_t)__dst, (uint64_t)v242);
    }
  }
  v239 = 0;
  v240 = 0;
  v241 = 0;
  v10 = (uint64_t **)a2[18];
  if (v10)
  {
    v11 = 0;
    do
    {
      v12 = *((unsigned __int16 *)v10 + 8);
      v13 = "<Invalid>";
      if (v12 <= 0x51)
        v13 = off_1E42F61C0[v12];
      memset(&__p, 0, sizeof(__p));
      v282 = 4;
      std::string::__assign_external(&__p, v13);
      if (v11 >= (void **)v241)
      {
        v16 = (void **)v239;
        v17 = ((char *)v11 - (_BYTE *)v239) >> 6;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 58)
          abort();
        v19 = v241 - (_BYTE *)v239;
        if ((v241 - (_BYTE *)v239) >> 5 > v18)
          v18 = v19 >> 5;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
          v20 = 0x3FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20 >> 58)
LABEL_478:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = (char *)operator new(v20 << 6);
        v22 = &v21[64 * v17];
        *(_OWORD *)v22 = *(_OWORD *)__dst;
        *(_OWORD *)(v22 + 9) = *(_OWORD *)&__dst[9];
        *(std::string *)(v22 + 32) = __p;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        *((_DWORD *)v22 + 14) = v282;
        v23 = v22 + 64;
        __p.__r_.__value_.__r.__words[2] = 0;
        if (v11 == v16)
        {
          v239 = v22;
          v240 = (void **)(v22 + 64);
          v241 = &v21[64 * v20];
        }
        else
        {
          do
          {
            v24 = *((_OWORD *)v11 - 4);
            *(_OWORD *)(v22 - 55) = *(_OWORD *)((char *)v11 - 55);
            *((_OWORD *)v22 - 4) = v24;
            v25 = *((_OWORD *)v11 - 2);
            *((_QWORD *)v22 - 2) = *(v11 - 2);
            *((_OWORD *)v22 - 2) = v25;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            *((_DWORD *)v22 - 2) = *((_DWORD *)v11 - 2);
            v22 -= 64;
            v11 -= 8;
          }
          while (v11 != v16);
          v11 = (void **)v239;
          v26 = v240;
          v239 = v22;
          v240 = (void **)v23;
          v241 = &v21[64 * v20];
          while (v26 != v11)
          {
            if (*((char *)v26 - 9) < 0)
              operator delete(*(v26 - 4));
            v26 -= 8;
          }
        }
        if (v11)
          operator delete(v11);
        v11 = (void **)v23;
      }
      else
      {
        v14 = *(_OWORD *)__dst;
        *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)&__dst[9];
        *(_OWORD *)v11 = v14;
        v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[6] = (void *)__p.__r_.__value_.__r.__words[2];
        *((_OWORD *)v11 + 2) = v15;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v11 + 14) = v282;
        v11 += 8;
      }
      v240 = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  strcpy(__dst, "Active Map Data Layers");
  __dst[23] = 22;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__dst, (uint64_t *)&v239);
  __dst[23] = 6;
  strcpy(__dst, "Layers");
  v230 = gdc::DebugTreeNode::createChildNode(a1, (__int128 *)__dst);
  v27 = &md::MapDataTypeList;
  do
  {
    v28 = (unsigned __int16)*v27;
    v29 = "<Invalid>";
    if (v28 <= 0x51)
      v29 = off_1E42F61C0[v28];
    v30 = strlen(v29);
    if (v30 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = operator new(v33 + 1);
      *(_QWORD *)&__dst[16] = v34 | 0x8000000000000000;
      *(_QWORD *)__dst = v32;
      *(_QWORD *)&__dst[8] = v31;
LABEL_46:
      memmove(v32, v29, v31);
      goto LABEL_47;
    }
    __dst[23] = v30;
    v32 = __dst;
    if (v30)
      goto LABEL_46;
LABEL_47:
    v32[v31] = 0;
    v35 = gdc::DebugTreeNode::createChildNode((uint64_t)v230, (__int128 *)__dst);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __dst[23] = 6;
    strcpy(__dst, "Active");
    v36 = (int8x8_t)a2[17];
    if (v36)
    {
      v37 = (uint8x8_t)vcnt_s8(v36);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        v38 = v28;
        if (*(_QWORD *)&v36 <= v28)
          v38 = v28 % *(_QWORD *)&v36;
      }
      else
      {
        v38 = (v36.i32[0] - 1) & v28;
      }
      v39 = *(uint64_t ***)(a2[16] + 8 * v38);
      if (v39)
      {
        v39 = (uint64_t **)*v39;
        if (v39)
        {
          if (v37.u32[0] < 2uLL)
          {
            v40 = *(_QWORD *)&v36 - 1;
            while (1)
            {
              v42 = v39[1];
              if (v42 == (uint64_t *)v28)
              {
                if (*((unsigned __int16 *)v39 + 8) == (_DWORD)v28)
                  goto LABEL_70;
              }
              else if (((unint64_t)v42 & v40) != v38)
              {
                goto LABEL_69;
              }
              v39 = (uint64_t **)*v39;
              if (!v39)
                goto LABEL_70;
            }
          }
          do
          {
            v41 = (unint64_t)v39[1];
            if (v41 == v28)
            {
              if (*((unsigned __int16 *)v39 + 8) == (_DWORD)v28)
                break;
            }
            else
            {
              if (v41 >= *(_QWORD *)&v36)
                v41 %= *(_QWORD *)&v36;
              if (v41 != v38)
                goto LABEL_69;
            }
            v39 = (uint64_t **)*v39;
          }
          while (v39);
        }
      }
    }
    else
    {
LABEL_69:
      v39 = 0;
    }
LABEL_70:
    memset(&v237[4], 0, 24);
    v238 = 0;
    v237[0] = v39 != 0;
    gdc::DebugTreeNode::addProperty((uint64_t)v35, (uint64_t)__dst, (uint64_t)v237);
    v43 = (unsigned __int16 *)a2[4];
    v44 = (unsigned __int16 *)a2[5];
    if (v43 != v44)
    {
      while ((_DWORD)v28 != *v43)
      {
        v43 += 8;
        if (v43 == v44)
          goto LABEL_73;
      }
      if (v43 != v44)
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v43 + 1) + 72))(__dst, *((_QWORD *)v43 + 1), a3);
        gdc::DebugTreeNode::addChildNode(v35, (__int128 *)__dst);
        v58 = (void **)v283;
        if (v283)
        {
          v59 = v35;
          v60 = v284;
          v61 = v283;
          if (v284 != v283)
          {
            do
            {
              v62 = (void **)*(v60 - 3);
              if (v62)
              {
                v63 = (void **)*(v60 - 2);
                v64 = *(v60 - 3);
                if (v63 != v62)
                {
                  do
                  {
                    if (*((char *)v63 - 1) < 0)
                      operator delete(*(v63 - 3));
                    v63 -= 3;
                  }
                  while (v63 != v62);
                  v64 = *(v60 - 3);
                }
                *(v60 - 2) = v62;
                operator delete(v64);
              }
              v65 = (void **)*(v60 - 6);
              if (v65)
              {
                v66 = (void **)*(v60 - 5);
                v67 = *(v60 - 6);
                if (v66 != v65)
                {
                  do
                  {
                    if (*((char *)v66 - 9) < 0)
                      operator delete(*(v66 - 4));
                    v66 -= 8;
                  }
                  while (v66 != v65);
                  v67 = *(v60 - 6);
                }
                *(v60 - 5) = v65;
                operator delete(v67);
              }
              v68 = v60 - 10;
              if (*((char *)v60 - 57) < 0)
                operator delete(*v68);
              v60 -= 10;
            }
            while (v68 != v58);
            v61 = v283;
          }
          v284 = v58;
          operator delete(v61);
          v35 = v59;
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__s.__data_[15] < 0)
        {
          operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_73;
        }
        else if ((__dst[23] & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete(*(void **)__dst);
      }
    }
LABEL_73:
    v45 = (unsigned __int16 *)a2[7];
    v46 = (unsigned __int16 *)a2[8];
    if (v45 != v46)
    {
      while ((_DWORD)v28 != *v45)
      {
        v45 += 8;
        if (v45 == v46)
          goto LABEL_127;
      }
    }
    if (v45 != v46)
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v45 + 1) + 56))(__dst, *((_QWORD *)v45 + 1), a3);
      gdc::DebugTreeNode::addChildNode(v35, (__int128 *)__dst);
      v47 = (void **)v283;
      if (v283)
      {
        v48 = v35;
        v49 = v284;
        v50 = v283;
        if (v284 != v283)
        {
          do
          {
            v51 = (void **)*(v49 - 3);
            if (v51)
            {
              v52 = (void **)*(v49 - 2);
              v53 = *(v49 - 3);
              if (v52 != v51)
              {
                do
                {
                  if (*((char *)v52 - 1) < 0)
                    operator delete(*(v52 - 3));
                  v52 -= 3;
                }
                while (v52 != v51);
                v53 = *(v49 - 3);
              }
              *(v49 - 2) = v51;
              operator delete(v53);
            }
            v54 = (void **)*(v49 - 6);
            if (v54)
            {
              v55 = (void **)*(v49 - 5);
              v56 = *(v49 - 6);
              if (v55 != v54)
              {
                do
                {
                  if (*((char *)v55 - 9) < 0)
                    operator delete(*(v55 - 4));
                  v55 -= 8;
                }
                while (v55 != v54);
                v56 = *(v49 - 6);
              }
              *(v49 - 5) = v54;
              operator delete(v56);
            }
            v57 = v49 - 10;
            if (*((char *)v49 - 57) < 0)
              operator delete(*v57);
            v49 -= 10;
          }
          while (v57 != v47);
          v50 = v283;
        }
        v284 = v47;
        operator delete(v50);
        v35 = v48;
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_127;
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_127;
      }
      operator delete(*(void **)__dst);
    }
LABEL_127:
    v69 = (unsigned __int16 *)a2[10];
    v70 = (unsigned __int16 *)a2[11];
    if (v69 != v70)
    {
      while ((_DWORD)v28 != *v69)
      {
        v69 += 8;
        if (v69 == v70)
          goto LABEL_36;
      }
    }
    if (v69 != v70)
    {
      v228 = v35;
      v71 = *((_QWORD *)v69 + 1);
      strcpy(v263, "Layer Data Store");
      *(_WORD *)v264 = 16;
      memset(v265, 0, sizeof(v265));
      v266 = 0;
      __dst[23] = 4;
      strcpy(__dst, "Size");
      v72 = *(_QWORD *)(v71 + 48);
      *(_QWORD *)v288 = 0;
      *(_QWORD *)&v288[8] = 0;
      v287 = 0;
      *(_DWORD *)&v288[16] = 1;
      v285.__r_.__value_.__l.__size_ = v72;
      gdc::DebugTreeNode::addProperty((uint64_t)v263, (uint64_t)__dst, (uint64_t)&v285);
      __dst[23] = 4;
      strcpy(__dst, "Data");
      v73 = gdc::DebugTreeNode::createChildNode((uint64_t)v263, (__int128 *)__dst);
      v74 = *(_QWORD *)(v71 + 8);
      if (v74 != v71)
      {
        v75 = v73;
        do
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v74 + 128) + 24))(__dst, *(_QWORD *)(v74 + 128), a3);
          gdc::DebugTreeNode::addChildNode(v75, (__int128 *)__dst);
          v76 = (void **)v283;
          if (v283)
          {
            v77 = v284;
            v78 = v283;
            if (v284 != v283)
            {
              do
              {
                v79 = (void **)*(v77 - 3);
                if (v79)
                {
                  v80 = (void **)*(v77 - 2);
                  v81 = *(v77 - 3);
                  if (v80 != v79)
                  {
                    do
                    {
                      if (*((char *)v80 - 1) < 0)
                        operator delete(*(v80 - 3));
                      v80 -= 3;
                    }
                    while (v80 != v79);
                    v81 = *(v77 - 3);
                  }
                  *(v77 - 2) = v79;
                  operator delete(v81);
                }
                v82 = (void **)*(v77 - 6);
                if (v82)
                {
                  v83 = (void **)*(v77 - 5);
                  v84 = *(v77 - 6);
                  if (v83 != v82)
                  {
                    do
                    {
                      if (*((char *)v83 - 9) < 0)
                        operator delete(*(v83 - 4));
                      v83 -= 8;
                    }
                    while (v83 != v82);
                    v84 = *(v77 - 6);
                  }
                  *(v77 - 5) = v82;
                  operator delete(v84);
                }
                v85 = v77 - 10;
                if (*((char *)v77 - 57) < 0)
                  operator delete(*v85);
                v77 -= 10;
              }
              while (v85 != v76);
              v78 = v283;
            }
            v284 = v76;
            operator delete(v78);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
          if (__p.__r_.__value_.__s.__data_[15] < 0)
          {
            operator delete(*(void **)&__dst[24]);
            if ((__dst[23] & 0x80000000) != 0)
              goto LABEL_162;
          }
          else if ((__dst[23] & 0x80000000) != 0)
          {
LABEL_162:
            operator delete(*(void **)__dst);
          }
          v74 = *(_QWORD *)(v74 + 8);
        }
        while (v74 != v71);
      }
      gdc::DebugTreeNode::addChildNode(v228, (__int128 *)v263);
      v86 = *(void ***)((char *)&v265[1] + 9);
      if (*(_QWORD *)((char *)&v265[1] + 9))
      {
        v87 = *(_QWORD *)((char *)&v265[2] + 1);
        v88 = *(void **)((char *)&v265[1] + 9);
        if (*(_QWORD *)((char *)&v265[2] + 1) != *(_QWORD *)((char *)&v265[1] + 9))
        {
          do
          {
            v89 = *(_QWORD *)(v87 - 24);
            if (v89)
            {
              v90 = *(_QWORD *)(v87 - 16);
              v91 = *(void **)(v87 - 24);
              if (v90 != v89)
              {
                do
                {
                  if (*(char *)(v90 - 1) < 0)
                    operator delete(*(void **)(v90 - 24));
                  v90 -= 24;
                }
                while (v90 != v89);
                v91 = *(void **)(v87 - 24);
              }
              *(_QWORD *)(v87 - 16) = v89;
              operator delete(v91);
            }
            v92 = *(_QWORD *)(v87 - 48);
            if (v92)
            {
              v93 = *(_QWORD *)(v87 - 40);
              v94 = *(void **)(v87 - 48);
              if (v93 != v92)
              {
                do
                {
                  if (*(char *)(v93 - 9) < 0)
                    operator delete(*(void **)(v93 - 32));
                  v93 -= 64;
                }
                while (v93 != v92);
                v94 = *(void **)(v87 - 48);
              }
              *(_QWORD *)(v87 - 40) = v92;
              operator delete(v94);
            }
            v95 = (void **)(v87 - 80);
            if (*(char *)(v87 - 57) < 0)
              operator delete(*v95);
            v87 -= 80;
          }
          while (v95 != v86);
          v88 = *(void **)((char *)&v265[1] + 9);
        }
        *(_QWORD *)((char *)&v265[2] + 1) = v86;
        operator delete(v88);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v265 + 1));
      if (SLOBYTE(v265[0]) < 0)
      {
        operator delete(*(void **)&v264[1]);
        if ((v264[0] & 0x80000000) == 0)
          goto LABEL_36;
      }
      else if ((v264[0] & 0x80000000) == 0)
      {
        goto LABEL_36;
      }
      operator delete(*(void **)v263);
    }
LABEL_36:
    ++v27;
  }
  while (v27 != &md::MapResourceTypeList);
  v96 = *(_QWORD **)(a2[3] + 56);
  strcpy(v234, "Resource Manager");
  v235[0] = 16;
  memset(&v235[12], 0, 48);
  v236 = 0;
  __dst[23] = 18;
  strcpy(__dst, "RequestsInProgress");
  v97 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (__int128 *)__dst);
  v231 = v96;
  v98 = (unsigned __int8 *)v96[13];
  if (v98)
  {
    v99 = 0;
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v98 + 16);
      gdc::DebugTreeNode::addChildNode(v97, (__int128 *)__dst);
      v100 = (void **)v283;
      if (v283)
      {
        v101 = v284;
        v102 = v283;
        if (v284 != v283)
        {
          do
          {
            v103 = (void **)*(v101 - 3);
            if (v103)
            {
              v104 = (void **)*(v101 - 2);
              v105 = *(v101 - 3);
              if (v104 != v103)
              {
                do
                {
                  if (*((char *)v104 - 1) < 0)
                    operator delete(*(v104 - 3));
                  v104 -= 3;
                }
                while (v104 != v103);
                v105 = *(v101 - 3);
              }
              *(v101 - 2) = v103;
              operator delete(v105);
            }
            v106 = (void **)*(v101 - 6);
            if (v106)
            {
              v107 = (void **)*(v101 - 5);
              v108 = *(v101 - 6);
              if (v107 != v106)
              {
                do
                {
                  if (*((char *)v107 - 9) < 0)
                    operator delete(*(v107 - 4));
                  v107 -= 8;
                }
                while (v107 != v106);
                v108 = *(v101 - 6);
              }
              *(v101 - 5) = v106;
              operator delete(v108);
            }
            v109 = v101 - 10;
            if (*((char *)v101 - 57) < 0)
              operator delete(*v109);
            v101 -= 10;
          }
          while (v109 != v100);
          v102 = v283;
        }
        v284 = v100;
        operator delete(v102);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_229;
      }
      else if ((__dst[23] & 0x80000000) != 0)
      {
LABEL_229:
        operator delete(*(void **)__dst);
      }
      ++v99;
      v98 = *(unsigned __int8 **)v98;
      if (!v98)
        goto LABEL_231;
    }
  }
  v99 = 0;
LABEL_231:
  __dst[23] = 5;
  strcpy(__dst, "Count");
  v271 = 0;
  v270 = 0;
  v272 = 1;
  v269 = 0;
  v268 = v99;
  gdc::DebugTreeNode::addProperty((uint64_t)v97, (uint64_t)__dst, (uint64_t)v267);
  __dst[23] = 14;
  strcpy(__dst, "FailedRequests");
  v110 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (__int128 *)__dst);
  gdc::DebugTreeNode::DebugTreeNode((std::string *)v263, (const gdc::DebugTreeNode *)v110);
  v111 = (unsigned __int8 *)v231[18];
  if (v111)
  {
    v112 = 0;
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v111 + 16);
      gdc::DebugTreeNode::addChildNode(v263, (__int128 *)__dst);
      v113 = (void **)v283;
      if (v283)
      {
        v114 = v284;
        v115 = v283;
        if (v284 != v283)
        {
          do
          {
            v116 = (void **)*(v114 - 3);
            if (v116)
            {
              v117 = (void **)*(v114 - 2);
              v118 = *(v114 - 3);
              if (v117 != v116)
              {
                do
                {
                  if (*((char *)v117 - 1) < 0)
                    operator delete(*(v117 - 3));
                  v117 -= 3;
                }
                while (v117 != v116);
                v118 = *(v114 - 3);
              }
              *(v114 - 2) = v116;
              operator delete(v118);
            }
            v119 = (void **)*(v114 - 6);
            if (v119)
            {
              v120 = (void **)*(v114 - 5);
              v121 = *(v114 - 6);
              if (v120 != v119)
              {
                do
                {
                  if (*((char *)v120 - 9) < 0)
                    operator delete(*(v120 - 4));
                  v120 -= 8;
                }
                while (v120 != v119);
                v121 = *(v114 - 6);
              }
              *(v114 - 5) = v119;
              operator delete(v121);
            }
            v122 = v114 - 10;
            if (*((char *)v114 - 57) < 0)
              operator delete(*v122);
            v114 -= 10;
          }
          while (v122 != v113);
          v115 = v283;
        }
        v284 = v113;
        operator delete(v115);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_261;
      }
      else if ((__dst[23] & 0x80000000) != 0)
      {
LABEL_261:
        operator delete(*(void **)__dst);
      }
      ++v112;
      v111 = *(unsigned __int8 **)v111;
      if (!v111)
        goto LABEL_263;
    }
  }
  v112 = 0;
LABEL_263:
  __dst[23] = 5;
  strcpy(__dst, "Count");
  v260 = 0;
  v261 = 0;
  v262 = 1;
  v259 = 0;
  v258 = v112;
  gdc::DebugTreeNode::addProperty((uint64_t)v263, (uint64_t)__dst, (uint64_t)v257);
  v123 = (_QWORD *)v231[23];
  v254 = 0;
  v255 = 0;
  v256 = 0;
  if (v123)
  {
    v124 = 0;
    v125 = 0;
    v126 = 0;
    do
    {
      while (1)
      {
        v129 = v123[2];
        v285.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 7) = 0;
        if (v126 >= v125)
          break;
        v127 = *(_QWORD *)__dst;
        *((_QWORD *)v126 + 1) = v129;
        *((_QWORD *)v126 + 2) = v127;
        v126[24] = __dst[8];
        v128 = v285.__r_.__value_.__r.__words[0];
        *((_QWORD *)v126 + 4) = 0;
        *((_QWORD *)v126 + 5) = v128;
        *(_QWORD *)(v126 + 47) = *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 7);
        v126[55] = 0;
        *((_DWORD *)v126 + 14) = 1;
        v126 += 64;
        v123 = (_QWORD *)*v123;
        if (!v123)
          goto LABEL_285;
      }
      v130 = (v126 - v124) >> 6;
      v131 = v130 + 1;
      if ((unint64_t)(v130 + 1) >> 58)
      {
        v255 = v126;
        v256 = v125;
        v254 = v124;
        abort();
      }
      if ((v125 - v124) >> 5 > v131)
        v131 = (v125 - v124) >> 5;
      if ((unint64_t)(v125 - v124) >= 0x7FFFFFFFFFFFFFC0)
        v132 = 0x3FFFFFFFFFFFFFFLL;
      else
        v132 = v131;
      if (v132 >> 58)
        goto LABEL_478;
      v133 = (char *)operator new(v132 << 6);
      v134 = &v133[64 * v130];
      *((_QWORD *)v134 + 1) = v129;
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 4) = 0;
      v285.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 7) = 0;
      *((_DWORD *)v134 + 14) = 1;
      if (v126 == v124)
      {
        v136 = v134;
      }
      else
      {
        v135 = v126;
        v136 = v134;
        do
        {
          v137 = *((_OWORD *)v135 - 4);
          *(_OWORD *)(v136 - 55) = *(_OWORD *)(v135 - 55);
          *((_OWORD *)v136 - 4) = v137;
          v138 = *((_OWORD *)v135 - 2);
          *((_QWORD *)v136 - 2) = *((_QWORD *)v135 - 2);
          *((_OWORD *)v136 - 2) = v138;
          *((_QWORD *)v135 - 3) = 0;
          *((_QWORD *)v135 - 2) = 0;
          *((_QWORD *)v135 - 4) = 0;
          *((_DWORD *)v136 - 2) = *((_DWORD *)v135 - 2);
          v136 -= 64;
          v135 -= 64;
        }
        while (v135 != v124);
        do
        {
          if (*(v126 - 9) < 0)
            operator delete(*((void **)v126 - 4));
          v126 -= 64;
        }
        while (v126 != v124);
      }
      v125 = &v133[64 * v132];
      v126 = v134 + 64;
      if (v124)
        operator delete(v124);
      v124 = v136;
      v123 = (_QWORD *)*v123;
    }
    while (v123);
LABEL_285:
    v255 = v126;
    v256 = v125;
    v254 = v124;
  }
  __dst[23] = 18;
  strcpy(__dst, "Cancelled Requests");
  gdc::DebugTreeNode::addProperty((uint64_t)v234, (uint64_t)__dst, (uint64_t *)&v254);
  __dst[23] = 8;
  strcpy(__dst, "Fetchers");
  v139 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (__int128 *)__dst);
  v141 = v231[4];
  v140 = v231[5];
  if (v141 != v140)
  {
    v142 = v139;
    v229 = v231[5];
    do
    {
      v143 = *(_QWORD *)(v141 + 8);
      LOWORD(v273[0]) = *(_WORD *)v141;
      v144 = v231[46];
      if (!v144)
      {
LABEL_479:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v144 + 48))(&v275, v144, v273);
      v145 = std::string::insert(&v275, 0, "Fetcher ", 8uLL);
      v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
      v285.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v146;
      v145->__r_.__value_.__l.__size_ = 0;
      v145->__r_.__value_.__r.__words[2] = 0;
      v145->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v143 + 80))(__dst, v143, &v285, a3);
      gdc::DebugTreeNode::addChildNode(v142, (__int128 *)__dst);
      v147 = (void **)v283;
      if (v283)
      {
        v148 = v284;
        v149 = v283;
        if (v284 != v283)
        {
          v150 = v142;
          do
          {
            v151 = (void **)*(v148 - 3);
            if (v151)
            {
              v152 = (void **)*(v148 - 2);
              v153 = *(v148 - 3);
              if (v152 != v151)
              {
                do
                {
                  if (*((char *)v152 - 1) < 0)
                    operator delete(*(v152 - 3));
                  v152 -= 3;
                }
                while (v152 != v151);
                v153 = *(v148 - 3);
              }
              *(v148 - 2) = v151;
              operator delete(v153);
            }
            v154 = (void **)*(v148 - 6);
            if (v154)
            {
              v155 = (void **)*(v148 - 5);
              v156 = *(v148 - 6);
              if (v155 != v154)
              {
                do
                {
                  if (*((char *)v155 - 9) < 0)
                    operator delete(*(v155 - 4));
                  v155 -= 8;
                }
                while (v155 != v154);
                v156 = *(v148 - 6);
              }
              *(v148 - 5) = v154;
              operator delete(v156);
            }
            v157 = v148 - 10;
            if (*((char *)v148 - 57) < 0)
              operator delete(*v157);
            v148 -= 10;
          }
          while (v157 != v147);
          v149 = v283;
          v142 = v150;
          v140 = v229;
        }
        v284 = v147;
        operator delete(v149);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_317:
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_288;
          goto LABEL_321;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_317;
      }
      operator delete(*(void **)__dst);
      if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_288:
        operator delete(v285.__r_.__value_.__l.__data_);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_322;
        goto LABEL_289;
      }
LABEL_321:
      if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
LABEL_322:
        operator delete(v275.__r_.__value_.__l.__data_);
LABEL_289:
      v141 += 16;
    }
    while (v141 != v140);
  }
  __dst[23] = 14;
  strcpy(__dst, "ResourceStores");
  v158 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (__int128 *)__dst);
  v160 = v231[7];
  v159 = v231[8];
  if (v160 != v159)
  {
    v161 = v158;
    v162 = "Store ";
    v233 = v231[8];
    do
    {
      v163 = *(_QWORD *)(v160 + 8);
      LOWORD(v273[0]) = *(_WORD *)v160;
      v164 = v231[46];
      if (!v164)
        goto LABEL_479;
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v164 + 48))(&v275, v164, v273);
      v165 = std::string::insert(&v275, 0, v162, 6uLL);
      v285 = *v165;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      gdc::ResourceStore::createDebugNode((std::string *)__dst, v163, (uint64_t)&v285);
      gdc::DebugTreeNode::addChildNode(v161, (__int128 *)__dst);
      v166 = (void **)v283;
      if (v283)
      {
        v167 = v284;
        v168 = v283;
        if (v284 != v283)
        {
          v169 = v161;
          v170 = v162;
          do
          {
            v171 = (void **)*(v167 - 3);
            if (v171)
            {
              v172 = (void **)*(v167 - 2);
              v173 = *(v167 - 3);
              if (v172 != v171)
              {
                do
                {
                  if (*((char *)v172 - 1) < 0)
                    operator delete(*(v172 - 3));
                  v172 -= 3;
                }
                while (v172 != v171);
                v173 = *(v167 - 3);
              }
              *(v167 - 2) = v171;
              operator delete(v173);
            }
            v174 = (void **)*(v167 - 6);
            if (v174)
            {
              v175 = (void **)*(v167 - 5);
              v176 = *(v167 - 6);
              if (v175 != v174)
              {
                do
                {
                  if (*((char *)v175 - 9) < 0)
                    operator delete(*(v175 - 4));
                  v175 -= 8;
                }
                while (v175 != v174);
                v176 = *(v167 - 6);
              }
              *(v167 - 5) = v174;
              operator delete(v176);
            }
            v177 = v167 - 10;
            if (*((char *)v167 - 57) < 0)
              operator delete(*v177);
            v167 -= 10;
          }
          while (v177 != v166);
          v168 = v283;
          v162 = v170;
          v161 = v169;
          v159 = v233;
        }
        v284 = v166;
        operator delete(v168);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_354:
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_325;
          goto LABEL_358;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_354;
      }
      operator delete(*(void **)__dst);
      if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_325:
        operator delete(v285.__r_.__value_.__l.__data_);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_359;
        goto LABEL_326;
      }
LABEL_358:
      if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
LABEL_359:
        operator delete(v275.__r_.__value_.__l.__data_);
LABEL_326:
      v160 += 24;
    }
    while (v160 != v159);
  }
  v178 = (_QWORD *)v231[38];
  v179 = (char *)operator new(0x20uLL);
  strcpy(v179, "Resource Status Container");
  std::string::__init_copy_ctor_external(&v285, v179, 0x19uLL);
  LOBYTE(v286) = 0;
  memset(&v288[7], 0, 48);
  v289 = 0;
  operator delete(v179);
  __dst[23] = 18;
  strcpy(__dst, "ActiveResourceKeys");
  v180 = gdc::DebugTreeNode::createChildNode((uint64_t)&v285, (__int128 *)__dst);
  v181 = (unsigned __int8 *)v178[6];
  if (v181 != (unsigned __int8 *)(v178 + 7))
  {
    v182 = v180;
    do
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v181 + 32);
      gdc::DebugTreeNode::addChildNode(v182, (__int128 *)__dst);
      v183 = (void **)v283;
      if (v283)
      {
        v184 = v284;
        v185 = v283;
        if (v284 != v283)
        {
          do
          {
            v186 = (void **)*(v184 - 3);
            if (v186)
            {
              v187 = (void **)*(v184 - 2);
              v188 = *(v184 - 3);
              if (v187 != v186)
              {
                do
                {
                  if (*((char *)v187 - 1) < 0)
                    operator delete(*(v187 - 3));
                  v187 -= 3;
                }
                while (v187 != v186);
                v188 = *(v184 - 3);
              }
              *(v184 - 2) = v186;
              operator delete(v188);
            }
            v189 = (void **)*(v184 - 6);
            if (v189)
            {
              v190 = (void **)*(v184 - 5);
              v191 = *(v184 - 6);
              if (v190 != v189)
              {
                do
                {
                  if (*((char *)v190 - 9) < 0)
                    operator delete(*(v190 - 4));
                  v190 -= 8;
                }
                while (v190 != v189);
                v191 = *(v184 - 6);
              }
              *(v184 - 5) = v189;
              operator delete(v191);
            }
            v192 = v184 - 10;
            if (*((char *)v184 - 57) < 0)
              operator delete(*v192);
            v184 -= 10;
          }
          while (v192 != v183);
          v185 = v283;
        }
        v284 = v183;
        operator delete(v185);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_389:
          v193 = (unsigned __int8 *)*((_QWORD *)v181 + 1);
          if (v193)
            goto LABEL_393;
          goto LABEL_395;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_389;
      }
      operator delete(*(void **)__dst);
      v193 = (unsigned __int8 *)*((_QWORD *)v181 + 1);
      if (v193)
      {
        do
        {
LABEL_393:
          v194 = v193;
          v193 = *(unsigned __int8 **)v193;
        }
        while (v193);
        goto LABEL_362;
      }
      do
      {
LABEL_395:
        v194 = (unsigned __int8 *)*((_QWORD *)v181 + 2);
        v195 = *(_QWORD *)v194 == (_QWORD)v181;
        v181 = v194;
      }
      while (!v195);
LABEL_362:
      v181 = v194;
    }
    while (v194 != (unsigned __int8 *)(v178 + 7));
  }
  __dst[23] = 6;
  strcpy(__dst, "Status");
  v196 = gdc::DebugTreeNode::createChildNode((uint64_t)&v285, (__int128 *)__dst);
  v197 = (unsigned __int8 *)v178[3];
  if (v197)
  {
    v198 = v196;
    v199 = "<Invalid>";
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v197 + 16);
      v279 = 6;
      strcpy(v278, "Status");
      v200 = *((unsigned int *)v197 + 28);
      v201 = v199;
      if (v200 <= 4)
        v201 = off_1E42FB258[v200];
      memset(&v276, 0, sizeof(v276));
      v277 = 4;
      std::string::__assign_external(&v276, v201);
      gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v278, (uint64_t)&v275);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v276.__r_.__value_.__l.__data_);
      v202 = *((_QWORD *)v197 + 15);
      v279 = 8;
      strcpy(v278, "RefCount");
      memset(&v273[4], 0, 24);
      v274 = 0;
      v273[0] = v202;
      gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v278, (uint64_t)v273);
      gdc::DebugTreeNode::addChildNode(v198, (__int128 *)__dst);
      v203 = (void **)v283;
      if (v283)
      {
        v204 = v284;
        v205 = v283;
        if (v284 != v283)
        {
          v206 = v199;
          do
          {
            v207 = (void **)*(v204 - 3);
            if (v207)
            {
              v208 = (void **)*(v204 - 2);
              v209 = *(v204 - 3);
              if (v208 != v207)
              {
                do
                {
                  if (*((char *)v208 - 1) < 0)
                    operator delete(*(v208 - 3));
                  v208 -= 3;
                }
                while (v208 != v207);
                v209 = *(v204 - 3);
              }
              *(v204 - 2) = v207;
              operator delete(v209);
            }
            v210 = (void **)*(v204 - 6);
            if (v210)
            {
              v211 = (void **)*(v204 - 5);
              v212 = *(v204 - 6);
              if (v211 != v210)
              {
                do
                {
                  if (*((char *)v211 - 9) < 0)
                    operator delete(*(v211 - 4));
                  v211 -= 8;
                }
                while (v211 != v210);
                v212 = *(v204 - 6);
              }
              *(v204 - 5) = v210;
              operator delete(v212);
            }
            v213 = v204 - 10;
            if (*((char *)v204 - 57) < 0)
              operator delete(*v213);
            v204 -= 10;
          }
          while (v213 != v203);
          v205 = v283;
          v199 = v206;
        }
        v284 = v203;
        operator delete(v205);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_401;
LABEL_432:
        operator delete(*(void **)__dst);
        v197 = *(unsigned __int8 **)v197;
        if (!v197)
          break;
      }
      else
      {
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_432;
LABEL_401:
        v197 = *(unsigned __int8 **)v197;
        if (!v197)
          break;
      }
    }
  }
  gdc::DebugTreeNode::addChildNode(v234, (__int128 *)&v285);
  v214 = *(_QWORD *)&v288[32];
  if (*(_QWORD *)&v288[32])
  {
    v215 = *(_QWORD *)&v288[40];
    v216 = *(void **)&v288[32];
    if (*(_QWORD *)&v288[40] != *(_QWORD *)&v288[32])
    {
      do
      {
        v215 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v215);
      }
      while (v215 != v214);
      v216 = *(void **)&v288[32];
    }
    *(_QWORD *)&v288[40] = v214;
    operator delete(v216);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v288[8]);
  if ((v288[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_440;
LABEL_449:
    operator delete(v285.__r_.__value_.__l.__data_);
    v217 = (void **)v254;
    if (!v254)
      goto LABEL_450;
LABEL_441:
    for (j = (void **)v255; j != v217; j -= 8)
    {
      if (*((char *)j - 9) < 0)
        operator delete(*(j - 4));
    }
    operator delete(v217);
    v219 = *(void **)((char *)&v265[1] + 9);
    if (!*(_QWORD *)((char *)&v265[1] + 9))
      goto LABEL_455;
LABEL_451:
    v220 = *(_QWORD *)((char *)&v265[2] + 1);
    v221 = v219;
    if (*(void **)((char *)&v265[2] + 1) != v219)
    {
      do
      {
        v220 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v220);
      }
      while ((void *)v220 != v219);
      v221 = *(void **)((char *)&v265[1] + 9);
    }
    *(_QWORD *)((char *)&v265[2] + 1) = v219;
    operator delete(v221);
    goto LABEL_455;
  }
  operator delete(v286);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_449;
LABEL_440:
  v217 = (void **)v254;
  if (v254)
    goto LABEL_441;
LABEL_450:
  v219 = *(void **)((char *)&v265[1] + 9);
  if (*(_QWORD *)((char *)&v265[1] + 9))
    goto LABEL_451;
LABEL_455:
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v265 + 1));
  if (SLOBYTE(v265[0]) < 0)
  {
    operator delete(*(void **)&v264[1]);
    if ((v264[0] & 0x80000000) != 0)
      goto LABEL_467;
  }
  else
  {
    if ((v264[0] & 0x80000000) == 0)
      goto LABEL_457;
LABEL_467:
    operator delete(*(void **)v263);
  }
LABEL_457:
  gdc::DebugTreeNode::addChildNode((_QWORD *)a1, (__int128 *)v234);
  v222 = *(_QWORD *)((char *)&v235[24] + 1);
  if (*(_QWORD *)((char *)&v235[24] + 1))
  {
    v223 = *(_QWORD *)((char *)&v235[28] + 1);
    v224 = *(void **)((char *)&v235[24] + 1);
    if (*(_QWORD *)((char *)&v235[28] + 1) != *(_QWORD *)((char *)&v235[24] + 1))
    {
      do
      {
        v223 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v223);
      }
      while (v223 != v222);
      v224 = *(void **)((char *)&v235[24] + 1);
    }
    *(_QWORD *)((char *)&v235[28] + 1) = v222;
    operator delete(v224);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v235[12] + 1));
  if (SLOBYTE(v235[12]) < 0)
  {
    operator delete(*(void **)((char *)v235 + 1));
    if (SLOBYTE(v235[0]) < 0)
      goto LABEL_469;
LABEL_464:
    v225 = (void **)v239;
    if (v239)
    {
LABEL_470:
      for (k = v240; k != v225; k -= 8)
      {
        if (*((char *)k - 9) < 0)
          operator delete(*(k - 4));
      }
      operator delete(v225);
    }
  }
  else
  {
    if ((SLOBYTE(v235[0]) & 0x80000000) == 0)
      goto LABEL_464;
LABEL_469:
    operator delete(*(void **)v234);
    v225 = (void **)v239;
    if (v239)
      goto LABEL_470;
  }
}

void sub_19F5558B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, gdc::DebugTreeNode *a9)
{
  gdc::DebugTreeNode::~DebugTreeNode(a9);
  _Unwind_Resume(a1);
}

void md::World::getDsmTileData(md::World *this, const QuadTile *a2, const QuadTile *a3, int *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (a2 != a3)
  {
    while (*(_WORD *)&a2->_type != 77)
    {
      a2 = (const QuadTile *)((char *)a2 + 16);
      if (a2 == a3)
        return;
    }
  }
  if (a2 != a3)
  {
    v6 = *(_QWORD **)&a2->_xIdx;
    if (v6)
    {
      v7 = (_QWORD *)v6[1];
      if (v7 != v6)
      {
        v8 = 0;
        do
        {
          v9 = v7[16];
          v10 = (std::__shared_weak_count *)v7[17];
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldxr(p_shared_owners);
            while (__stxr(v12 + 1, p_shared_owners));
          }
          if (*(unsigned __int8 *)(v9 + 168) != *(unsigned __int8 *)a4)
            goto LABEL_37;
          v13 = *(unsigned __int8 *)(v9 + 169);
          v14 = *((unsigned __int8 *)a4 + 1);
          v15 = v14 >= v13;
          v16 = v14 - v13;
          if (v16 != 0 && v15)
          {
            if (*(_DWORD *)(v9 + 172) != a4[1] >> v16 || *(_DWORD *)(v9 + 176) != a4[2] >> v16)
              goto LABEL_37;
          }
          else if (v16 || *(_DWORD *)(v9 + 172) != a4[1] || *(_DWORD *)(v9 + 176) != a4[2])
          {
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v9 + 720);
          if (v17)
          {
            if (v8 < *(unsigned __int8 *)(v17 + 57))
              goto LABEL_24;
          }
          else
          {
            v23 = *(_QWORD *)(v9 + 736);
            if (v23 && v8 < *(unsigned __int8 *)(v23 + 57))
            {
              v17 = *(_QWORD *)(v9 + 736);
              if (v17)
              {
LABEL_24:
                v8 = *(unsigned __int8 *)(v17 + 57);
                if (v10)
                  goto LABEL_25;
              }
              else
              {
                v8 = 0;
                if (!v10)
                  goto LABEL_27;
LABEL_25:
                v18 = (unint64_t *)&v10->__shared_owners_;
                do
                  v19 = __ldxr(v18);
                while (__stxr(v19 + 1, v18));
              }
LABEL_27:
              v20 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
              *(_QWORD *)this = v9;
              *((_QWORD *)this + 1) = v10;
              if (v20)
              {
                v21 = (unint64_t *)&v20->__shared_owners_;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
            }
          }
LABEL_37:
          if (v10)
          {
            v24 = (unint64_t *)&v10->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = (_QWORD *)v7[1];
        }
        while (v7 != v6);
      }
    }
  }
}

float md::BezierEase::BezierEase(uint64_t a1, float *a2, float *a3, double a4, double a5, double a6, double a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float result;

  v7 = *a2;
  *(float *)&a5 = *a3 * 3.0;
  *(float *)&a7 = *a2 * 3.0;
  v8 = (float)(*(float *)&a7 + 1.0) - *(float *)&a5;
  *(float *)&a5 = *(float *)&a5 - (float)(*a2 * 6.0);
  *(float *)(a1 + 44) = v8;
  *(_DWORD *)(a1 + 48) = LODWORD(a5);
  *(_DWORD *)(a1 + 52) = LODWORD(a7);
  v9 = a2[1];
  v10 = a3[1] * 3.0;
  *(float *)(a1 + 56) = (float)((float)(v9 * 3.0) + 1.0) - v10;
  *(float *)(a1 + 60) = v10 - (float)(v9 * 6.0);
  *(float *)(a1 + 64) = v9 * 3.0;
  *(_DWORD *)a1 = 0;
  v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  v12 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  *(float32x4_t *)(a1 + 4) = vmulq_f32(vmlaq_f32(v12, (float32x4_t)xmmword_19FFB3860, vmlaq_n_f32(v11, (float32x4_t)xmmword_19FFB3860, v8)), (float32x4_t)xmmword_19FFB3860);
  *(float32x4_t *)(a1 + 20) = vmulq_f32(vmlaq_f32(v12, (float32x4_t)xmmword_19FFB3870, vmlaq_n_f32(v11, (float32x4_t)xmmword_19FFB3870, v8)), (float32x4_t)xmmword_19FFB3870);
  result = (float)(*(float *)&a7 + 1.0) + (float)(v7 * -3.0);
  *(float *)(a1 + 36) = (float)(*(float *)&a7 + (float)((float)(*(float *)&a5 + (float)(v8 * 0.9)) * 0.9)) * 0.9;
  *(float *)(a1 + 40) = result;
  return result;
}

float md::BezierEase::value(md::BezierEase *this, float a2)
{
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v27;
  float v28;
  float v29;
  float v31;
  float v33;
  float v34;
  float v35;
  float v38;
  float v39;
  float v40;
  BOOL v43;
  float v44;
  float v45;

  if (a2 <= 0.0 || a2 >= 1.0)
    return fminf(fmaxf(a2, 0.0), 1.0);
  v4 = *((float *)this + 1);
  if (v4 >= a2)
  {
    v5 = 0;
  }
  else
  {
    v4 = *((float *)this + 2);
    if (v4 >= a2)
    {
      v5 = 1;
    }
    else
    {
      v4 = *((float *)this + 3);
      if (v4 >= a2)
      {
        v5 = 2;
      }
      else
      {
        v4 = *((float *)this + 4);
        if (v4 >= a2)
        {
          v5 = 3;
        }
        else
        {
          v4 = *((float *)this + 5);
          if (v4 >= a2)
          {
            v5 = 4;
          }
          else
          {
            v4 = *((float *)this + 6);
            if (v4 >= a2)
            {
              v5 = 5;
            }
            else
            {
              v4 = *((float *)this + 7);
              if (v4 >= a2)
              {
                v5 = 6;
              }
              else
              {
                v4 = *((float *)this + 8);
                if (v4 >= a2)
                {
                  v5 = 7;
                }
                else
                {
                  v4 = *((float *)this + 9);
                  if (v4 >= a2)
                  {
                    v5 = 8;
                  }
                  else
                  {
                    v4 = *((float *)this + 10);
                    if (v4 >= a2)
                    {
                      v5 = 9;
                    }
                    else
                    {
                      v4 = *((float *)this + 11);
                      v5 = 10;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v6 = (float)((float)(a2 - *((float *)this + v5)) / (float)(v4 - *((float *)this + v5))) + (float)v5;
  v7 = v6 * 0.1;
  v8 = *((float *)this + 11);
  v9 = *((float *)this + 12);
  v10 = *((float *)this + 13);
  v11 = -(float)(a2
               - (float)((float)(v10 + (float)((float)(v9 + (float)(v8 * (float)(v6 * 0.1))) * (float)(v6 * 0.1)))
                       * (float)(v6 * 0.1)));
  v12 = v6 * 0.3;
  v13 = v9 + v9;
  v14 = v10 + (float)((float)((float)(v9 + v9) + (float)(v12 * v8)) * v7);
  v15 = fabsf(v14);
  if (fabsf(v11) >= 0.0001 && v15 >= 0.00001)
  {
    v17 = (float)v5 * 0.1;
    v18 = v17 + 0.1;
    v19 = v7 - (float)(v11 / v14);
    if (v19 <= v17 || v19 >= v18)
    {
      if (v11 > 0.0)
        v18 = v7;
      else
        v17 = v7;
      v19 = (float)(v18 + v17) * 0.5;
    }
    v21 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v19 * v8)) * v19)) * v19));
    v22 = v8 * 3.0;
    v23 = v10 + (float)((float)(v13 + (float)((float)(v8 * 3.0) * v19)) * v19);
    v24 = fabsf(v23);
    if (fabsf(v21) >= 0.0001 && v24 >= 0.00001)
    {
      v7 = v19 - (float)(v21 / v23);
      if (v7 <= v17 || v7 >= v18)
      {
        if (v21 > 0.0)
          v18 = v19;
        else
          v17 = v19;
        v7 = (float)(v18 + v17) * 0.5;
      }
      v27 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v7 * v8)) * v7)) * v7));
      v28 = v10 + (float)((float)(v13 + (float)(v22 * v7)) * v7);
      v29 = fabsf(v28);
      if (fabsf(v27) < 0.0001 || v29 < 0.00001)
        return (float)(*((float *)this + 16)
                     + (float)((float)(*((float *)this + 15) + (float)(*((float *)this + 14) * v7)) * v7))
             * v7;
      v31 = v7 - (float)(v27 / v28);
      if (v31 <= v17 || v31 >= v18)
      {
        if (v27 > 0.0)
          v18 = v7;
        else
          v17 = v7;
        v31 = (float)(v18 + v17) * 0.5;
      }
      v33 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v31 * v8)) * v31)) * v31));
      v34 = v10 + (float)((float)(v13 + (float)(v22 * v31)) * v31);
      v35 = fabsf(v34);
      if (fabsf(v33) < 0.0001 || v35 < 0.00001)
      {
        v7 = v31;
        return (float)(*((float *)this + 16)
                     + (float)((float)(*((float *)this + 15) + (float)(*((float *)this + 14) * v7)) * v7))
             * v7;
      }
      v19 = v31 - (float)(v33 / v34);
      if (v19 <= v17 || v19 >= v18)
      {
        if (v33 > 0.0)
          v18 = v31;
        else
          v17 = v31;
        v19 = (float)(v18 + v17) * 0.5;
      }
      v38 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v19 * v8)) * v19)) * v19));
      v39 = v10 + (float)((float)(v13 + (float)(v22 * v19)) * v19);
      v40 = fabsf(v39);
      if (fabsf(v38) >= 0.0001 && v40 >= 0.00001)
      {
        v7 = v19 - (float)(v38 / v39);
        if (v7 <= v17 || v7 >= v18)
        {
          v43 = v38 <= 0.0;
          if (v38 <= 0.0)
            v44 = v19;
          else
            v44 = v17;
          if (v43)
            v45 = v18;
          else
            v45 = v19;
          v7 = (float)(v45 + v44) * 0.5;
        }
        return (float)(*((float *)this + 16)
                     + (float)((float)(*((float *)this + 15) + (float)(*((float *)this + 14) * v7)) * v7))
             * v7;
      }
    }
    v7 = v19;
  }
  return (float)(*((float *)this + 16)
               + (float)((float)(*((float *)this + 15) + (float)(*((float *)this + 14) * v7)) * v7))
       * v7;
}

void md::PendingSceneLogic::~PendingSceneLogic(md::PendingSceneLogic *this)
{
  md::PendingSceneLogic::~PendingSceneLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _BYTE *v39;
  void *v40;
  _BYTE *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  void *v47;
  _BYTE *v48;
  void *v49;
  void *v50;

  *(_QWORD *)this = &off_1E4292BA8;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 33) + 48))(*((_QWORD *)this + 33));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 34) + 48))(*((_QWORD *)this + 34));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 46);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v7)
    operator delete(v7);
  v8 = *((_QWORD *)this + 41);
  if (v8)
  {
    v9 = *((_QWORD *)this + 42);
    v10 = (void *)*((_QWORD *)this + 41);
    if (v9 != v8)
    {
      do
      {
        if (*(_QWORD *)(v9 - 8))
        {
          v11 = *(_QWORD *)(v9 - 24);
          v12 = *(uint64_t **)(v9 - 16);
          v13 = *v12;
          *(_QWORD *)(v13 + 8) = *(_QWORD *)(v11 + 8);
          **(_QWORD **)(v11 + 8) = v13;
          *(_QWORD *)(v9 - 8) = 0;
          if (v12 != (uint64_t *)(v9 - 24))
          {
            do
            {
              v15 = (uint64_t *)v12[1];
              v14 = v12[2];
              v12[2] = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              operator delete(v12);
              v12 = v15;
            }
            while (v15 != (uint64_t *)(v9 - 24));
          }
        }
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 41);
    }
    *((_QWORD *)this + 42) = v8;
    operator delete(v10);
  }
  v16 = *((_QWORD *)this + 38);
  if (v16)
  {
    v17 = *((_QWORD *)this + 39);
    v18 = (void *)*((_QWORD *)this + 38);
    if (v17 != v16)
    {
      do
      {
        if (*(_QWORD *)(v17 - 8))
        {
          v19 = *(_QWORD *)(v17 - 24);
          v20 = *(uint64_t **)(v17 - 16);
          v21 = *v20;
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(v19 + 8);
          **(_QWORD **)(v19 + 8) = v21;
          *(_QWORD *)(v17 - 8) = 0;
          if (v20 != (uint64_t *)(v17 - 24))
          {
            do
            {
              v23 = (uint64_t *)v20[1];
              v22 = v20[2];
              v20[2] = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              operator delete(v20);
              v20 = v23;
            }
            while (v23 != (uint64_t *)(v17 - 24));
          }
        }
        v17 -= 32;
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 38);
    }
    *((_QWORD *)this + 39) = v16;
    operator delete(v18);
  }
  v24 = *((_QWORD *)this + 35);
  if (v24)
  {
    v25 = *((_QWORD *)this + 36);
    v26 = (void *)*((_QWORD *)this + 35);
    if (v25 != v24)
    {
      do
      {
        if (*(_QWORD *)(v25 - 8))
        {
          v27 = *(_QWORD *)(v25 - 24);
          v28 = *(uint64_t **)(v25 - 16);
          v29 = *v28;
          *(_QWORD *)(v29 + 8) = *(_QWORD *)(v27 + 8);
          **(_QWORD **)(v27 + 8) = v29;
          *(_QWORD *)(v25 - 8) = 0;
          if (v28 != (uint64_t *)(v25 - 24))
          {
            do
            {
              v31 = (uint64_t *)v28[1];
              v30 = v28[2];
              v28[2] = 0;
              if (v30)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              operator delete(v28);
              v28 = v31;
            }
            while (v31 != (uint64_t *)(v25 - 24));
          }
        }
        v25 -= 32;
      }
      while (v25 != v24);
      v26 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v24;
    operator delete(v26);
  }
  v32 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (_QWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v34)
  {
    v35 = geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::~MarkedLRUCache(v34);
    MEMORY[0x1A1AF4E00](v35, 0x10A0C40F417E19ELL);
  }
  v36 = *((_QWORD *)this + 24);
  if (v36)
  {
    v37 = *((_QWORD *)this + 25);
    v38 = (void *)*((_QWORD *)this + 24);
    if (v37 != v36)
    {
      do
      {
        v39 = *(_BYTE **)(v37 - 24);
        if (v39)
        {
          do
          {
            if (v39[112])
              v39[112] = 0;
            v41 = *(_BYTE **)v39;
            v42 = (void *)*((_QWORD *)v39 + 4);
            if (v42 != *((void **)v39 + 6))
              free(v42);
            operator delete(v39);
            v39 = v41;
          }
          while (v41);
        }
        v40 = *(void **)(v37 - 40);
        *(_QWORD *)(v37 - 40) = 0;
        if (v40)
          operator delete(v40);
        v37 -= 48;
      }
      while (v37 != v36);
      v38 = (void *)*((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 25) = v36;
    operator delete(v38);
  }
  v43 = *((_QWORD *)this + 21);
  if (v43)
  {
    v44 = *((_QWORD *)this + 22);
    v45 = (void *)*((_QWORD *)this + 21);
    if (v44 != v43)
    {
      do
      {
        v46 = *(_BYTE **)(v44 - 24);
        if (v46)
        {
          do
          {
            if (v46[112])
              v46[112] = 0;
            v48 = *(_BYTE **)v46;
            v49 = (void *)*((_QWORD *)v46 + 4);
            if (v49 != *((void **)v46 + 6))
              free(v49);
            operator delete(v46);
            v46 = v48;
          }
          while (v48);
        }
        v47 = *(void **)(v44 - 40);
        *(_QWORD *)(v44 - 40) = 0;
        if (v47)
          operator delete(v47);
        v44 -= 48;
      }
      while (v44 != v43);
      v45 = (void *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 22) = v43;
    operator delete(v45);
  }
  v50 = (void *)*((_QWORD *)this + 18);
  if (v50)
  {
    *((_QWORD *)this + 19) = v50;
    operator delete(v50);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::PendingSceneLogic::prune(uint64_t a1)
{
  uint64_t v1;
  unint64_t prime;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 216);
  prime = vcvtps_u32_f32(256.0 / *(float *)(v1 + 56));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v3 = *(int8x8_t *)(v1 + 32);
  if (prime > *(_QWORD *)&v3)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v3)
  {
    v4 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 48) / *(float *)(v1 + 56));
    if (*(_QWORD *)&v3 < 3uLL || (v5 = (uint8x8_t)vcnt_s8(v3), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      v4 = std::__next_prime(v4);
    }
    else
    {
      v6 = 1 << -(char)__clz(v4 - 1);
      if (v4 >= 2)
        v4 = v6;
    }
    if (prime <= v4)
      prime = v4;
    if (prime < *(_QWORD *)&v3)
LABEL_16:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v1 + 24, prime);
  }
}

uint64_t md::PendingSceneLogic::didBecomeInactive(uint64_t this)
{
  *(_QWORD *)(this + 120) = 0;
  return this;
}

void md::PendingSceneLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  char *v4;
  __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  std::string *v11;
  void *v12;
  std::string::size_type size;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _BYTE *v32;
  unint64_t v33;
  const void **v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  unint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  size_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const std::string::value_type *v58;
  int v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  void **v65;
  void *v66;
  void **v67;
  void **v68;
  void *v69;
  void **v70;
  void **v71;
  void *v72;
  void **v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void **v82;
  uint64_t v83;
  void **v84;
  std::ios_base *v85;
  _QWORD *v86;
  _QWORD *v87;
  size_t v88;
  _BYTE *v89;
  unint64_t v90;
  const void **v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  void **v111;
  void **v112;
  void *v113;
  void **v114;
  void **v115;
  void *v116;
  void **v117;
  void **v118;
  void *v119;
  void **v120;
  uint64_t **v121;
  uint64_t v122;
  const char *v123;
  size_t v124;
  size_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t **i;
  unint64_t v131;
  const char *v132;
  size_t v133;
  size_t v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t **v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  size_t v144;
  size_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t **j;
  unint64_t v151;
  const char *v152;
  size_t v153;
  size_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  std::string::size_type v158;
  char *v159;
  char *v160;
  unint64_t v161;
  const char *v162;
  size_t v163;
  size_t v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char v173;
  void *v174;
  size_t *v175;
  size_t v176;
  uint64_t v177;
  void **v178;
  void **v179;
  void *v180;
  void **v181;
  void **v182;
  void *v183;
  void **v184;
  void **v185;
  void *v186;
  void **v187;
  char *v188;
  char *v189;
  BOOL v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  _QWORD v195[4];
  char *v196;
  _QWORD *v197;
  void *__p;
  __int16 *v199;
  int v200;
  uint64_t v201;
  void **v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  char *ChildNode;
  void ***v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  void ***v216;
  unint64_t *v217;
  std::string *v218;
  _BYTE *v219;
  unsigned __int16 *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  __int128 v224;
  _BYTE v225[72];
  char v226;
  std::string v227;
  _DWORD v228[2];
  std::string v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  void **v233;
  int v234;
  void *v235;
  void **v236;
  char v237[8];
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  size_t v243[2];
  unint64_t v244;
  _QWORD v245[7];
  int v246;
  _QWORD v247[7];
  int v248;
  _QWORD v249[7];
  int v250;
  _BYTE __dst[32];
  void *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  void *v256;
  void **v257;
  char v258[32];
  unint64_t v259;
  char v260;
  int v261;
  __int128 __src;
  char *v263;
  char v264[32];
  __int128 v265;
  char *v266;
  int v267;
  size_t v268[2];
  uint64_t v269;
  void *v270;
  char v271;
  int v272;
  _QWORD v273[4];
  _BYTE v274[24];
  int v275;
  _BYTE v276[24];
  void *v277;
  unint64_t v278;
  void **v279;
  unint64_t v280;
  void *v281;
  void **v282;
  char v283;
  unint64_t v284;
  int v285;
  uint64_t v286;

  v201 = a2;
  strcpy((char *)a3, "PendingSceneLogic");
  *(_WORD *)(a3 + 23) = 17;
  *(_OWORD *)(a3 + 47) = 0u;
  *(_OWORD *)(a3 + 63) = 0u;
  *(_OWORD *)(a3 + 79) = 0u;
  *(_BYTE *)(a3 + 95) = 0;
  v3 = *(_QWORD **)(a1 + 120);
  if (!v3)
    return;
  v197 = (_QWORD *)*v3;
  strcpy((char *)&v224, "Scene Context");
  v196 = (char *)&v232 + 7;
  strcpy(v225, "\r");
  v211 = &v286;
  v4 = &v276[8];
  memset(&v225[24], 0, 48);
  v212 = &v281;
  v208 = &v279;
  v202 = &v277;
  v226 = 0;
  v218 = (std::string *)&v270;
  v219 = v274;
  v216 = (void ***)&v254;
  v217 = &v259;
  v214 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v210 = *MEMORY[0x1E0DE4F60];
  v205 = &v252;
  qmemcpy(v195, "al TilesVirtual Tile SetScene Ti", sizeof(v195));
  v215 = xmmword_19FFB3880;
  v213 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v209 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5 = &md::TileSelectionTileSetTypeList;
  v204 = MEMORY[0x1E0DE4FE0] + 64;
  v203 = MEMORY[0x1E0DE4FB8] + 16;
  v223 = &v276[8];
  do
  {
    v7 = (unsigned __int16 *)v197[14];
    v6 = (unsigned __int16 *)v197[15];
    v8 = (unsigned __int16)*v5;
    v199 = v5;
    if (v7 != v6)
    {
      while ((_DWORD)v8 != *v7)
      {
        v7 += 56;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
    *((_BYTE *)&v227.__r_.__value_.__s + 23) = 14;
    v227.__r_.__value_.__r.__words[0] = v195[3];
    *(std::string::size_type *)((char *)v227.__r_.__value_.__r.__words + 6) = v195[2];
    v9 = "<Invalid>";
    v227.__r_.__value_.__s.__data_[14] = 0;
    if (v8 <= 8)
      v9 = off_1E42F6158[v8];
    v10 = strlen(v9);
    v11 = std::string::append(&v227, v9, v10);
    v12 = (void *)v11->__r_.__value_.__r.__words[0];
    size = v11->__r_.__value_.__l.__size_;
    v228[0] = v11->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v228 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
    v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    __p = v12;
    v200 = v14;
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v229, (const std::string::value_type *)v12, size);
    }
    else
    {
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      v229.__r_.__value_.__l.__size_ = size;
      LODWORD(v229.__r_.__value_.__r.__words[2]) = v228[0];
      *(_DWORD *)((char *)&v229.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v228 + 3);
      *((_BYTE *)&v229.__r_.__value_.__s + 23) = v14;
    }
    LOBYTE(v230) = 0;
    *(_OWORD *)v196 = 0u;
    *((_OWORD *)v196 + 1) = 0u;
    *((_OWORD *)v196 + 2) = 0u;
    v196[48] = 0;
    v276[23] = 13;
    *(_QWORD *)v276 = v195[1];
    *(_QWORD *)&v276[5] = v195[0];
    v276[13] = 0;
    ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)&v229, (__int128 *)v276);
    v15 = (uint64_t *)*((_QWORD *)v7 + 13);
    v17 = *v15;
    v16 = v15[1];
    v222 = *v15;
    if (*v15 != v16)
    {
      v18 = *(unsigned __int8 *)(v17 + 113);
      v19 = *(_DWORD *)(v17 + 116);
      v20 = *(_DWORD *)(v17 + 120);
      v21 = v17 + 144;
      v222 = v17;
      v22 = *(unsigned __int8 *)(v17 + 112);
      while (1)
      {
        if (v21 == v16)
        {
          v222 = v16;
          goto LABEL_24;
        }
        if (*(unsigned __int8 *)(v21 + 112) != v22)
          break;
        v222 += 144;
        if (*(unsigned __int8 *)(v21 + 113) == v18 && *(_DWORD *)(v21 + 116) == v19)
        {
          v23 = *(_DWORD *)(v21 + 120);
          v21 += 144;
          if (v23 == v20)
            continue;
        }
        goto LABEL_24;
      }
      v222 = v21;
    }
LABEL_24:
    v24 = v16;
    v220 = v7;
    v206 = v16;
LABEL_27:
    if (v17 != v24)
    {
      v26 = MEMORY[0x1E0DE4FE0];
      v27 = MEMORY[0x1E0DE4FE0] + 64;
      v286 = MEMORY[0x1E0DE4FE0] + 64;
      *(_QWORD *)v276 = v214;
      *(_QWORD *)&v276[*(_QWORD *)(v214 - 24)] = v213;
      v28 = (std::ios_base *)&v276[*(_QWORD *)(*(_QWORD *)v276 - 24)];
      std::ios_base::init(v28, v4);
      v28[1].__vftable = 0;
      v28[1].__fmtflags_ = -1;
      *(_QWORD *)v276 = v26 + 24;
      v286 = v27;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&v276[8] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)v212 = 0u;
      *((_OWORD *)v212 + 1) = 0u;
      v285 = 16;
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)".", 1);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
      std::ostream::operator<<();
      if ((v285 & 0x10) != 0)
      {
        v33 = v284;
        v34 = (const void **)v208;
        if (v284 < v280)
        {
          v284 = v280;
          v33 = v280;
          v34 = (const void **)v208;
        }
      }
      else
      {
        if ((v285 & 8) == 0)
        {
          v31 = 0;
          __dst[23] = 0;
          v32 = __dst;
          goto LABEL_42;
        }
        v33 = v278;
        v34 = (const void **)v202;
      }
      v35 = *v34;
      v31 = v33 - (_QWORD)*v34;
      if (v31 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v31 >= 0x17)
      {
        v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17)
          v36 = v31 | 7;
        v37 = v36 + 1;
        v32 = operator new(v36 + 1);
        *(_QWORD *)&__dst[16] = v37 | 0x8000000000000000;
        *(_QWORD *)__dst = v32;
        *(_QWORD *)&__dst[8] = v31;
        v4 = v223;
      }
      else
      {
        __dst[23] = v33 - *(_BYTE *)v34;
        v32 = __dst;
        if (!v31)
        {
LABEL_42:
          v32[v31] = 0;
          v221 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)__dst);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          while (1)
          {
            if (v17 == v222)
            {
              *(_QWORD *)v276 = v210;
              *(_QWORD *)&v276[*(_QWORD *)(v210 - 24)] = v209;
              *(_QWORD *)&v276[8] = MEMORY[0x1E0DE4FB8] + 16;
              if (v283 < 0)
                operator delete(v281);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1A1AF4D64](v211);
              v25 = v206;
              if (v206 != v222)
              {
                v74 = v222 + 144;
                v25 = v222;
                while (1)
                {
                  if (v74 == v206)
                  {
                    v25 = v206;
                    goto LABEL_26;
                  }
                  if (*(unsigned __int8 *)(v74 + 112) != *(unsigned __int8 *)(v222 + 112))
                    break;
                  v25 += 144;
                  if (*(unsigned __int8 *)(v74 + 113) == *(unsigned __int8 *)(v222 + 113)
                    && *(_DWORD *)(v74 + 116) == *(_DWORD *)(v222 + 116))
                  {
                    v75 = *(_DWORD *)(v74 + 120);
                    v74 += 144;
                    if (v75 == *(_DWORD *)(v222 + 120))
                      continue;
                  }
                  goto LABEL_26;
                }
                v25 = v74;
              }
LABEL_26:
              v24 = *(_QWORD *)(*((_QWORD *)v7 + 13) + 8);
              v17 = v222;
              v222 = v25;
              goto LABEL_27;
            }
            v38 = *(_WORD *)(v17 + 8);
            v39 = *(_QWORD *)(v17 + 136);
            v40 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(*((_QWORD *)v7 + 13) + 24), v38);
            if (0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v40 + 1) - *(_QWORD *)v40) >> 4) <= v39)
              goto LABEL_362;
            v41 = *(_QWORD *)(*(_QWORD *)v40 + 144 * v39 + 112);
            v42 = *(_QWORD *)(v17 + 136);
            v43 = *((_QWORD *)v7 + 13);
            v44 = *(unsigned __int16 **)(v43 + 24);
            v45 = *(unsigned __int16 **)(v43 + 32);
            v46 = v44;
            if (v44 != v45)
            {
              v46 = v44;
              while (*v46 != v38)
              {
                v46 += 16;
                if (v46 == v45)
                  goto LABEL_57;
              }
            }
            if (v46 == v45)
            {
LABEL_57:
              v49 = 0;
              if (v44 != v45)
              {
LABEL_58:
                while (*v44 != v38)
                {
                  v44 += 16;
                  if (v44 == v45)
                  {
                    v44 = v45;
                    break;
                  }
                }
              }
            }
            else
            {
              v48 = v46 + 4;
              v47 = *((_QWORD *)v46 + 1);
              if (0x8E38E38E38E38E39 * ((*((_QWORD *)v48 + 1) - v47) >> 4) <= v42)
                goto LABEL_362;
              v49 = *(unsigned int *)(v47 + 144 * v42 + 128);
              if (v44 != v45)
                goto LABEL_58;
            }
            v50 = *((_QWORD *)v44 + 1);
            if (0x8E38E38E38E38E39 * ((*((_QWORD *)v44 + 2) - v50) >> 4) <= v42)
LABEL_362:
              abort();
            v51 = "<Invalid>";
            if (v38 <= 0x51u)
              v51 = off_1E42F61C0[v38];
            v52 = strlen(v51);
            if (v52 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v53 = v52;
            if (v52 >= 0x17)
              break;
            __dst[23] = v52;
            v54 = __dst;
            if (v52)
              goto LABEL_71;
LABEL_72:
            v54[v53] = 0;
            v57 = gdc::DebugTreeNode::createChildNode((uint64_t)v221, (__int128 *)__dst);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            __dst[23] = 8;
            strcpy(__dst, "Has Data");
            *((_QWORD *)v219 + 1) = 0;
            *((_QWORD *)v219 + 2) = 0;
            *(_QWORD *)v219 = 0;
            *((_DWORD *)v219 + 6) = 0;
            v273[0] = v41 != 0;
            gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)__dst, (uint64_t)v273);
            __dst[23] = 6;
            strcpy(__dst, "Status");
            v58 = "<Invalid>";
            v4 = v223;
            if (v49 <= 3)
              v58 = off_1E42F61A0[v49];
            v218->__r_.__value_.__r.__words[0] = 0;
            v218->__r_.__value_.__l.__size_ = 0;
            v218->__r_.__value_.__r.__words[2] = 0;
            v272 = 4;
            std::string::__assign_external(v218, v58);
            gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)__dst, (uint64_t)v268);
            if (v271 < 0)
              operator delete(v270);
            __dst[23] = 4;
            strcpy(__dst, "Tile");
            gdc::Tiled::stringFromLayerDataKey((gdc::Tiled *)&__src, (const gdc::LayerDataRequestKey *)v17);
            v265 = 0uLL;
            v266 = 0;
            v267 = 4;
            v59 = SHIBYTE(v263);
            if (SHIBYTE(v263) < 0)
            {
              std::string::__assign_no_alias<true>(&v265, (void *)__src, *((size_t *)&__src + 1));
            }
            else
            {
              v265 = __src;
              v266 = v263;
            }
            gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)__dst, (uint64_t)v264);
            if (SHIBYTE(v266) < 0)
            {
              operator delete((void *)v265);
              if ((v59 & 0x80000000) == 0)
                goto LABEL_83;
            }
            else if ((v59 & 0x80000000) == 0)
            {
              goto LABEL_83;
            }
            operator delete((void *)__src);
LABEL_83:
            v60 = (char *)operator new(0x20uLL);
            *(_QWORD *)__dst = v60;
            *(_OWORD *)&__dst[8] = v215;
            strcpy(v60, "External Dependency Bitfield");
            v61 = *(_QWORD *)(v50 + 144 * v42 + 136);
            v62 = 0x3130303030303030;
            if ((v61 & 1) == 0)
              v62 = 0x3030303030303030;
            if ((v61 & 2) != 0)
              v62 |= 0x31000000000000uLL;
            if ((v61 & 4) != 0)
              v62 |= 0x310000000000uLL;
            if ((v61 & 8) != 0)
              v62 |= 0x3100000000uLL;
            if ((v61 & 0x10) != 0)
              v62 = v62 & 0xFFFFFFFF00FFFFFFLL | 0x31000000;
            if ((v61 & 0x20) != 0)
              v62 = v62 & 0xFFFFFFFFFF00FFFFLL | 0x310000;
            if ((v61 & 0x40) != 0)
              v62 = v62 & 0xFFFFFFFFFFFF00FFLL | 0x3100;
            v217[1] = 0;
            v217[2] = 0;
            *v217 = 0;
            v261 = 4;
            if ((v61 & 0x80) != 0)
              v63 = v62 & 0xFFFFFFFFFFFFFF00 | 0x31;
            else
              v63 = v62;
            v259 = v63;
            v260 = 8;
            gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)__dst, (uint64_t)v258);
            operator delete(v60);
            gdc::LayerDataRequestKey::createDebugNode((uint64_t)__dst, (unsigned __int8 *)v17);
            gdc::DebugTreeNode::addChildNode(v57, (__int128 *)__dst);
            v64 = (void **)v256;
            v7 = v220;
            if (v256)
            {
              v65 = v257;
              v66 = v256;
              if (v257 != v256)
              {
                do
                {
                  v67 = (void **)*(v65 - 3);
                  if (v67)
                  {
                    v68 = (void **)*(v65 - 2);
                    v69 = *(v65 - 3);
                    if (v68 != v67)
                    {
                      do
                      {
                        if (*((char *)v68 - 1) < 0)
                          operator delete(*(v68 - 3));
                        v68 -= 3;
                      }
                      while (v68 != v67);
                      v69 = *(v65 - 3);
                    }
                    *(v65 - 2) = v67;
                    operator delete(v69);
                  }
                  v70 = (void **)*(v65 - 6);
                  if (v70)
                  {
                    v71 = (void **)*(v65 - 5);
                    v72 = *(v65 - 6);
                    if (v71 != v70)
                    {
                      do
                      {
                        if (*((char *)v71 - 9) < 0)
                          operator delete(*(v71 - 4));
                        v71 -= 8;
                      }
                      while (v71 != v70);
                      v72 = *(v65 - 6);
                    }
                    *(v65 - 5) = v70;
                    operator delete(v72);
                  }
                  v73 = v65 - 10;
                  if (*((char *)v65 - 57) < 0)
                    operator delete(*v73);
                  v65 -= 10;
                }
                while (v73 != v64);
                v66 = v256;
                v4 = v223;
              }
              v257 = v64;
              operator delete(v66);
            }
            std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v216);
            if (SHIBYTE(v253) < 0)
            {
              operator delete(*(void **)&__dst[24]);
              if ((__dst[23] & 0x80000000) == 0)
                goto LABEL_45;
            }
            else if ((__dst[23] & 0x80000000) == 0)
            {
              goto LABEL_45;
            }
            operator delete(*(void **)__dst);
LABEL_45:
            v17 += 144;
          }
          v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v55 = v52 | 7;
          v56 = v55 + 1;
          v54 = operator new(v55 + 1);
          *(_QWORD *)&__dst[16] = v56 | 0x8000000000000000;
          *(_QWORD *)__dst = v54;
          *(_QWORD *)&__dst[8] = v53;
LABEL_71:
          memcpy(v54, v51, v53);
          goto LABEL_72;
        }
      }
      memmove(v32, v35, v31);
      goto LABEL_42;
    }
    v76 = (char *)operator new(0x20uLL);
    *(_QWORD *)v276 = v76;
    *(_OWORD *)&v276[8] = xmmword_19FFB3890;
    strcpy(v76, "Finish Loading Required Layers");
    v77 = *((unsigned __int8 *)v220 + 8);
    v250 = 0;
    memset(&v249[4], 0, 24);
    v249[0] = v77;
    gdc::DebugTreeNode::addProperty((uint64_t)&v229, (uint64_t)v276, (uint64_t)v249);
    operator delete(v76);
    v78 = (char *)operator new(0x20uLL);
    *(_QWORD *)v276 = v78;
    *(_OWORD *)&v276[8] = xmmword_19FFB34B0;
    strcpy(v78, "Finish Loading All Layers");
    v79 = *((unsigned __int8 *)v220 + 9);
    v248 = 0;
    memset(&v247[4], 0, 24);
    v247[0] = v79;
    gdc::DebugTreeNode::addProperty((uint64_t)&v229, (uint64_t)v276, (uint64_t)v247);
    operator delete(v78);
    v276[23] = 16;
    strcpy(v276, "Has Failed Tiles");
    v80 = *((unsigned __int8 *)v220 + 10);
    memset(&v245[4], 0, 24);
    v246 = 0;
    v245[0] = v80;
    gdc::DebugTreeNode::addProperty((uint64_t)&v229, (uint64_t)v276, (uint64_t)v245);
    v81 = (_QWORD *)*((_QWORD *)v220 + 10);
    __src = 0uLL;
    v263 = 0;
    v82 = 0;
    if (v81)
    {
      while (1)
      {
        v286 = v204;
        *(_QWORD *)v276 = v214;
        *(_QWORD *)&v276[*(_QWORD *)(v214 - 24)] = v213;
        v85 = (std::ios_base *)&v276[*(_QWORD *)(*(_QWORD *)v276 - 24)];
        std::ios_base::init(v85, v4);
        v85[1].__vftable = 0;
        v85[1].__fmtflags_ = -1;
        *(_QWORD *)v276 = MEMORY[0x1E0DE4FE0] + 24;
        v286 = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        *(_QWORD *)&v276[8] = v203;
        *(_OWORD *)v212 = 0u;
        *((_OWORD *)v212 + 1) = 0u;
        v285 = 16;
        v86 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)".", 1);
        v87 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)".", 1);
        std::ostream::operator<<();
        if ((v285 & 0x10) != 0)
        {
          v90 = v284;
          v91 = (const void **)v208;
          if (v284 < v280)
          {
            v284 = v280;
            v90 = v280;
            v91 = (const void **)v208;
          }
        }
        else
        {
          if ((v285 & 8) == 0)
          {
            v88 = 0;
            HIBYTE(v244) = 0;
            v89 = v243;
            goto LABEL_158;
          }
          v90 = v278;
          v91 = (const void **)v202;
        }
        v92 = *v91;
        v88 = v90 - (_QWORD)*v91;
        if (v88 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v88 >= 0x17)
          break;
        HIBYTE(v244) = v90 - *(_BYTE *)v91;
        v89 = v243;
        if (v88)
          goto LABEL_157;
LABEL_158:
        v95 = v205;
        v89[v88] = 0;
        *(_QWORD *)v205 = 0;
        *((_QWORD *)v205 + 1) = 0;
        *((_QWORD *)v205 + 2) = 0;
        v255 = 4;
        v96 = SHIBYTE(v244);
        if (SHIBYTE(v244) < 0)
        {
          v95 = std::string::__assign_no_alias<true>(v95, (void *)v243[0], v243[1]);
        }
        else
        {
          *(_OWORD *)v95 = *(_OWORD *)v243;
          v95[2] = v244;
        }
        v97 = (char *)*((_QWORD *)&__src + 1);
        if (*((_QWORD *)&__src + 1) < (unint64_t)v263)
        {
          v98 = *(_OWORD *)__dst;
          *(_OWORD *)(*((_QWORD *)&__src + 1) + 9) = *(_OWORD *)&__dst[9];
          *(_OWORD *)v97 = v98;
          v99 = *(_OWORD *)v95;
          *((_QWORD *)v97 + 6) = v95[2];
          *((_OWORD *)v97 + 2) = v99;
          v95[1] = 0;
          v95[2] = 0;
          *v95 = 0;
          *((_DWORD *)v97 + 14) = v255;
          v82 = (void **)(v97 + 64);
          goto LABEL_179;
        }
        v100 = (char *)__src;
        v101 = (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 6;
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 58)
          abort();
        v103 = (uint64_t)&v263[-__src];
        if ((uint64_t)&v263[-__src] >> 5 > v102)
          v102 = v103 >> 5;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFC0)
          v104 = 0x3FFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104 >> 58)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v105 = (char *)operator new(v104 << 6);
        v106 = &v105[64 * v101];
        *(_OWORD *)v106 = *(_OWORD *)__dst;
        v107 = &v105[64 * v104];
        *(_OWORD *)(v106 + 9) = *(_OWORD *)&__dst[9];
        *((_OWORD *)v106 + 2) = *(_OWORD *)v205;
        *((_QWORD *)v106 + 6) = *((_QWORD *)v205 + 2);
        *(_QWORD *)v205 = 0;
        *((_QWORD *)v205 + 1) = 0;
        *((_DWORD *)v106 + 14) = v255;
        v82 = (void **)(v106 + 64);
        *((_QWORD *)v205 + 2) = 0;
        if (v97 == v100)
        {
          *(_QWORD *)&__src = &v105[64 * v101];
          *((_QWORD *)&__src + 1) = v106 + 64;
          v263 = v107;
          if (v97)
            goto LABEL_178;
        }
        else
        {
          v108 = v97;
          do
          {
            v109 = *((_OWORD *)v108 - 4);
            *(_OWORD *)(v106 - 55) = *(_OWORD *)(v108 - 55);
            *((_OWORD *)v106 - 4) = v109;
            v110 = *((_OWORD *)v108 - 2);
            *((_QWORD *)v106 - 2) = *((_QWORD *)v108 - 2);
            *((_OWORD *)v106 - 2) = v110;
            *((_QWORD *)v108 - 3) = 0;
            *((_QWORD *)v108 - 2) = 0;
            *((_QWORD *)v108 - 4) = 0;
            *((_DWORD *)v106 - 2) = *((_DWORD *)v108 - 2);
            v106 -= 64;
            v108 -= 64;
          }
          while (v108 != v100);
          *(_QWORD *)&__src = v106;
          *((_QWORD *)&__src + 1) = v82;
          v263 = v107;
          do
          {
            if (*(v97 - 9) < 0)
              operator delete(*((void **)v97 - 4));
            v97 -= 64;
          }
          while (v97 != v100);
          v97 = v100;
          if (v100)
LABEL_178:
            operator delete(v97);
        }
LABEL_179:
        *((_QWORD *)&__src + 1) = v82;
        if (SHIBYTE(v254) < 0)
        {
          operator delete(v252);
          if (v96 < 0)
LABEL_184:
            operator delete((void *)v243[0]);
        }
        else if (v96 < 0)
        {
          goto LABEL_184;
        }
        *(_QWORD *)v276 = v210;
        *(_QWORD *)&v276[*(_QWORD *)(v210 - 24)] = v209;
        *(_QWORD *)&v276[8] = MEMORY[0x1E0DE4FB8] + 16;
        if (v283 < 0)
          operator delete(v281);
        v4 = v223;
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AF4D64](v211);
        v81 = (_QWORD *)*v81;
        if (!v81)
          goto LABEL_141;
      }
      v93 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v88 | 7) != 0x17)
        v93 = v88 | 7;
      v94 = v93 + 1;
      v89 = operator new(v93 + 1);
      v244 = v94 | 0x8000000000000000;
      v243[0] = (size_t)v89;
      v243[1] = v88;
LABEL_157:
      memmove(v89, v92, v88);
      goto LABEL_158;
    }
LABEL_141:
    v276[23] = 8;
    strcpy(v276, "Tile Set");
    gdc::DebugTreeNode::addProperty((uint64_t)&v229, (uint64_t)v276, (uint64_t *)&__src);
    v276[23] = 19;
    strcpy(v276, "Tile Selection Size");
    v83 = *((unsigned int *)v220 + 14);
    v240 = 0;
    v241 = 0;
    v239 = 0;
    v242 = 1;
    v238 = v83;
    gdc::DebugTreeNode::addProperty((uint64_t)&v229, (uint64_t)v276, (uint64_t)v237);
    v84 = (void **)__src;
    if ((_QWORD)__src)
    {
      while (v82 != v84)
      {
        if (*((char *)v82 - 9) < 0)
          operator delete(*(v82 - 4));
        v82 -= 8;
      }
      operator delete(v84);
    }
    gdc::DebugTreeNode::addChildNode(&v224, (__int128 *)&v229);
    v111 = (void **)v235;
    if (v235)
    {
      v112 = v236;
      v113 = v235;
      if (v236 != v235)
      {
        do
        {
          v114 = (void **)*(v112 - 3);
          if (v114)
          {
            v115 = (void **)*(v112 - 2);
            v116 = *(v112 - 3);
            if (v115 != v114)
            {
              do
              {
                if (*((char *)v115 - 1) < 0)
                  operator delete(*(v115 - 3));
                v115 -= 3;
              }
              while (v115 != v114);
              v116 = *(v112 - 3);
            }
            *(v112 - 2) = v114;
            operator delete(v116);
          }
          v117 = (void **)*(v112 - 6);
          if (v117)
          {
            v118 = (void **)*(v112 - 5);
            v119 = *(v112 - 6);
            if (v118 != v117)
            {
              do
              {
                if (*((char *)v118 - 9) < 0)
                  operator delete(*(v118 - 4));
                v118 -= 8;
              }
              while (v118 != v117);
              v119 = *(v112 - 6);
            }
            *(v112 - 5) = v117;
            operator delete(v119);
          }
          v120 = v112 - 10;
          if (*((char *)v112 - 57) < 0)
            operator delete(*v120);
          v112 -= 10;
        }
        while (v120 != v111);
        v113 = v235;
        v4 = v223;
      }
      v236 = v111;
      operator delete(v113);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v233);
    if (SHIBYTE(v232) < 0)
      operator delete(v230);
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v229.__r_.__value_.__l.__data_);
      if (v200 < 0)
        goto LABEL_3;
LABEL_222:
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_223;
      goto LABEL_4;
    }
    if ((v200 & 0x80000000) == 0)
      goto LABEL_222;
LABEL_3:
    operator delete(__p);
    if ((SHIBYTE(v227.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_223:
    operator delete(v227.__r_.__value_.__l.__data_);
LABEL_4:
    v5 = v199 + 1;
  }
  while (v199 + 1 != (__int16 *)&unk_1A007D9DA);
  strcpy(v276, "Required Loading Stats");
  v276[23] = 22;
  v223 = gdc::DebugTreeNode::createChildNode((uint64_t)&v224, (__int128 *)v276);
  v121 = (uint64_t **)v197[51];
  if (v121)
  {
    while (1)
    {
      v122 = *((unsigned int *)v121 + 4);
      v123 = "<Invalid>";
      if (v122 <= 3)
        v123 = off_1E42F61A0[v122];
      v124 = strlen(v123);
      if (v124 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v125 = v124;
      if (v124 >= 0x17)
        break;
      v276[23] = v124;
      v126 = v276;
      if (v124)
        goto LABEL_236;
LABEL_237:
      v126[v125] = 0;
      v129 = gdc::DebugTreeNode::createChildNode((uint64_t)v223, (__int128 *)v276);
      if ((v276[23] & 0x80000000) == 0)
      {
        i = (uint64_t **)v121[5];
        if (i)
          goto LABEL_243;
        goto LABEL_226;
      }
      operator delete(*(void **)v276);
      for (i = (uint64_t **)v121[5]; i; i = (uint64_t **)*i)
      {
LABEL_243:
        v131 = *((unsigned __int16 *)i + 8);
        v132 = "<Invalid>";
        if (v131 <= 0x51)
          v132 = off_1E42F61C0[v131];
        v133 = strlen(v132);
        if (v133 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v134 = v133;
        if (v133 >= 0x17)
        {
          v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v133 | 7) != 0x17)
            v136 = v133 | 7;
          v137 = v136 + 1;
          v135 = operator new(v136 + 1);
          *(_QWORD *)&v276[16] = v137 | 0x8000000000000000;
          *(_QWORD *)v276 = v135;
          *(_QWORD *)&v276[8] = v134;
        }
        else
        {
          v276[23] = v133;
          v135 = v276;
          if (!v133)
            goto LABEL_253;
        }
        memcpy(v135, v132, v134);
LABEL_253:
        v135[v134] = 0;
        v138 = *((int *)i + 6);
        v253 = 0;
        v254 = 0;
        v252 = 0;
        v255 = 0;
        *(_QWORD *)__dst = v138;
        gdc::DebugTreeNode::addProperty((uint64_t)v129, (uint64_t)v276, (uint64_t)__dst);
        if ((v276[23] & 0x80000000) != 0)
          operator delete(*(void **)v276);
      }
LABEL_226:
      v121 = (uint64_t **)*v121;
      if (!v121)
        goto LABEL_255;
    }
    v127 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v124 | 7) != 0x17)
      v127 = v124 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    *(_QWORD *)&v276[16] = v128 | 0x8000000000000000;
    *(_QWORD *)v276 = v126;
    *(_QWORD *)&v276[8] = v125;
LABEL_236:
    memcpy(v126, v123, v125);
    goto LABEL_237;
  }
LABEL_255:
  strcpy(v276, "Optional Loading Stats");
  v276[23] = 22;
  v139 = gdc::DebugTreeNode::createChildNode((uint64_t)&v224, (__int128 *)v276);
  v140 = (uint64_t **)v197[46];
  if (v140)
  {
    v141 = (uint64_t)v139;
    while (1)
    {
      v142 = *((unsigned int *)v140 + 4);
      v143 = "<Invalid>";
      if (v142 <= 3)
        v143 = off_1E42F61A0[v142];
      v144 = strlen(v143);
      if (v144 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v145 = v144;
      if (v144 >= 0x17)
        break;
      v276[23] = v144;
      v146 = v276;
      if (v144)
        goto LABEL_267;
LABEL_268:
      v146[v145] = 0;
      v149 = gdc::DebugTreeNode::createChildNode(v141, (__int128 *)v276);
      if ((v276[23] & 0x80000000) == 0)
      {
        j = (uint64_t **)v140[5];
        if (j)
          goto LABEL_274;
        goto LABEL_257;
      }
      operator delete(*(void **)v276);
      for (j = (uint64_t **)v140[5]; j; j = (uint64_t **)*j)
      {
LABEL_274:
        v151 = *((unsigned __int16 *)j + 8);
        v152 = "<Invalid>";
        if (v151 <= 0x51)
          v152 = off_1E42F61C0[v151];
        v153 = strlen(v152);
        if (v153 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v154 = v153;
        if (v153 >= 0x17)
        {
          v156 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v153 | 7) != 0x17)
            v156 = v153 | 7;
          v157 = v156 + 1;
          v155 = operator new(v156 + 1);
          *(_QWORD *)&v276[16] = v157 | 0x8000000000000000;
          *(_QWORD *)v276 = v155;
          *(_QWORD *)&v276[8] = v154;
        }
        else
        {
          v276[23] = v153;
          v155 = v276;
          if (!v153)
            goto LABEL_284;
        }
        memcpy(v155, v152, v154);
LABEL_284:
        v155[v154] = 0;
        v158 = *((int *)j + 6);
        v232 = 0;
        v233 = 0;
        v231 = 0;
        v234 = 0;
        v229.__r_.__value_.__r.__words[0] = v158;
        gdc::DebugTreeNode::addProperty((uint64_t)v149, (uint64_t)v276, (uint64_t)&v229);
        if ((v276[23] & 0x80000000) != 0)
          operator delete(*(void **)v276);
      }
LABEL_257:
      v140 = (uint64_t **)*v140;
      if (!v140)
        goto LABEL_286;
    }
    v147 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v144 | 7) != 0x17)
      v147 = v144 | 7;
    v148 = v147 + 1;
    v146 = operator new(v147 + 1);
    *(_QWORD *)&v276[16] = v148 | 0x8000000000000000;
    *(_QWORD *)v276 = v146;
    *(_QWORD *)&v276[8] = v145;
LABEL_267:
    memcpy(v146, v143, v145);
    goto LABEL_268;
  }
LABEL_286:
  v276[23] = 10;
  strcpy(v276, "Scene Info");
  v159 = gdc::DebugTreeNode::createChildNode((uint64_t)&v224, (__int128 *)v276);
  v160 = (char *)v197[6];
  v221 = (char *)v197[7];
  v222 = (uint64_t)v159;
  if (v160 != v221)
  {
    while (1)
    {
      v161 = *(unsigned __int16 *)v160;
      v162 = "<Invalid>";
      if (v161 <= 0x51)
        v162 = off_1E42F61C0[v161];
      v163 = strlen(v162);
      if (v163 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v164 = v163;
      v223 = v160;
      if (v163 >= 0x17)
        break;
      v276[23] = v163;
      v165 = v276;
      if (v163)
        goto LABEL_298;
LABEL_299:
      v165[v164] = 0;
      v168 = gdc::DebugTreeNode::createChildNode(v222, (__int128 *)v276);
      if ((v276[23] & 0x80000000) != 0)
        operator delete(*(void **)v276);
      v276[23] = 6;
      strcpy(v276, "inView");
      v169 = gdc::DebugTreeNode::createChildNode((uint64_t)v168, (__int128 *)v276);
      v170 = (char *)*((_QWORD *)v223 + 1);
      v171 = v223 + 16;
      if (v170 != v223 + 16)
      {
        v172 = v169;
        while (1)
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v170 + 4) + 24))(v276, *((_QWORD *)v170 + 4), v201);
          gdc::Tiled::stringFromLayerDataKey((gdc::Tiled *)v268, (const gdc::LayerDataRequestKey *)(*((_QWORD *)v170 + 4) + 16));
          v173 = HIBYTE(v269);
          if ((v276[23] & 0x80000000) == 0)
            break;
          v174 = (void *)v268[0];
          if (v269 >= 0)
            v175 = v268;
          else
            v175 = (size_t *)v268[0];
          if (v269 >= 0)
            v176 = HIBYTE(v269);
          else
            v176 = v268[1];
          std::string::__assign_no_alias<false>((void **)v276, v175, v176);
          if (v173 < 0)
            goto LABEL_316;
LABEL_317:
          HIBYTE(v269) = 5;
          strcpy((char *)v268, "World");
          v177 = v170[48];
          memset(v274, 0, sizeof(v274));
          v275 = 0;
          v273[0] = v177;
          gdc::DebugTreeNode::addProperty((uint64_t)v276, (uint64_t)v268, (uint64_t)v273);
          gdc::DebugTreeNode::addChildNode(v172, (__int128 *)v276);
          v178 = (void **)v281;
          if (v281)
          {
            v179 = v282;
            v180 = v281;
            if (v282 != v281)
            {
              do
              {
                v181 = (void **)*(v179 - 3);
                if (v181)
                {
                  v182 = (void **)*(v179 - 2);
                  v183 = *(v179 - 3);
                  if (v182 != v181)
                  {
                    do
                    {
                      if (*((char *)v182 - 1) < 0)
                        operator delete(*(v182 - 3));
                      v182 -= 3;
                    }
                    while (v182 != v181);
                    v183 = *(v179 - 3);
                  }
                  *(v179 - 2) = v181;
                  operator delete(v183);
                }
                v184 = (void **)*(v179 - 6);
                if (v184)
                {
                  v185 = (void **)*(v179 - 5);
                  v186 = *(v179 - 6);
                  if (v185 != v184)
                  {
                    do
                    {
                      if (*((char *)v185 - 9) < 0)
                        operator delete(*(v185 - 4));
                      v185 -= 8;
                    }
                    while (v185 != v184);
                    v186 = *(v179 - 6);
                  }
                  *(v179 - 5) = v184;
                  operator delete(v186);
                }
                v187 = v179 - 10;
                if (*((char *)v179 - 57) < 0)
                  operator delete(*v187);
                v179 -= 10;
              }
              while (v187 != v178);
              v180 = v281;
            }
            v282 = v178;
            operator delete(v180);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v279);
          if (SHIBYTE(v278) < 0)
          {
            operator delete(v277);
            if ((v276[23] & 0x80000000) == 0)
            {
LABEL_343:
              v188 = (char *)*((_QWORD *)v170 + 1);
              if (v188)
                goto LABEL_347;
              goto LABEL_349;
            }
          }
          else if ((v276[23] & 0x80000000) == 0)
          {
            goto LABEL_343;
          }
          operator delete(*(void **)v276);
          v188 = (char *)*((_QWORD *)v170 + 1);
          if (v188)
          {
            do
            {
LABEL_347:
              v189 = v188;
              v188 = *(char **)v188;
            }
            while (v188);
            goto LABEL_303;
          }
          do
          {
LABEL_349:
            v189 = (char *)*((_QWORD *)v170 + 2);
            v190 = *(_QWORD *)v189 == (_QWORD)v170;
            v170 = v189;
          }
          while (!v190);
LABEL_303:
          v170 = v189;
          if (v189 == v171)
            goto LABEL_288;
        }
        if ((v269 & 0x8000000000000000) == 0)
        {
          *(_OWORD *)v276 = *(_OWORD *)v268;
          *(_QWORD *)&v276[16] = v269;
          goto LABEL_317;
        }
        v174 = (void *)v268[0];
        std::string::__assign_no_alias<true>(v276, (void *)v268[0], v268[1]);
LABEL_316:
        operator delete(v174);
        goto LABEL_317;
      }
LABEL_288:
      v160 = v223 + 32;
      if (v223 + 32 == v221)
        goto LABEL_352;
    }
    v166 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v163 | 7) != 0x17)
      v166 = v163 | 7;
    v167 = v166 + 1;
    v165 = operator new(v166 + 1);
    *(_QWORD *)&v276[16] = v167 | 0x8000000000000000;
    *(_QWORD *)v276 = v165;
    *(_QWORD *)&v276[8] = v164;
LABEL_298:
    memmove(v165, v162, v164);
    goto LABEL_299;
  }
LABEL_352:
  gdc::DebugTreeNode::addChildNode((_QWORD *)a3, &v224);
  v191 = *(_QWORD *)&v225[49];
  if (*(_QWORD *)&v225[49])
  {
    v192 = *(_QWORD *)&v225[57];
    v193 = *(void **)&v225[49];
    if (*(_QWORD *)&v225[57] != *(_QWORD *)&v225[49])
    {
      do
      {
        v192 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v192);
      }
      while (v192 != v191);
      v193 = *(void **)&v225[49];
    }
    *(_QWORD *)&v225[57] = v191;
    operator delete(v193);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v225[25]);
  if ((v225[24] & 0x80000000) == 0)
  {
    if ((v225[0] & 0x80000000) == 0)
      return;
LABEL_361:
    operator delete((void *)v224);
    return;
  }
  operator delete(*(void **)&v225[1]);
  if ((v225[0] & 0x80000000) != 0)
    goto LABEL_361;
}

void sub_19F557D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, gdc::DebugTreeNode *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void **a67;
  void *__p;
  uint64_t a71;
  void *v72;
  uint64_t v73;
  void *v74;

  v72 = __p;
  if (__p)
  {
    v73 = a71;
    v74 = __p;
    if ((void *)a71 != __p)
    {
      do
      {
        v73 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v73);
      }
      while ((void *)v73 != v72);
      v74 = __p;
    }
    a71 = (uint64_t)v72;
    operator delete(v74);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&a67);
  if (a66 < 0)
    operator delete(a61);
  if (a60 < 0)
    operator delete(a55);
  gdc::DebugTreeNode::~DebugTreeNode(a10);
  _Unwind_Resume(a1);
}

double md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  v4[2] = "md::PendingSceneContext]";
  v4[3] = 23;
  v4[4] = v5;
  *v4 = &off_1E42B0FA0;
  v4[1] = 0x9F2276D081C2CB20;
  *a2 = v4;
  return result;
}

void sub_19F5580F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[6];

  if (*(_QWORD *)(a3 + 8) == 0x9F2276D081C2CB20 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::PendingSceneLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t j;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *k;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *m;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *n;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  double v57;
  uint64_t *ii;
  uint64_t *jj;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  int v69;
  _QWORD *v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t kk;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t mm;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t nn;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t i1;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t i2;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t i3;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t i4;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t i5;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t i6;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t prime;
  int8x8_t v165;
  unint64_t v166;
  uint8x8_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t i7;
  _BYTE *v171;
  void *v172;
  _BYTE *v173;
  void *v174;
  uint64_t v175;
  uint64_t i8;
  _BYTE *v177;
  void *v178;
  _BYTE *v179;
  void *v180;
  unsigned __int8 v181;
  _QWORD *v182;
  unsigned __int16 *v183;
  unsigned __int16 *v184;
  unsigned __int16 *v185;
  int v186;
  _QWORD *v187;
  unsigned __int16 *v188;
  unsigned __int16 *v189;
  unsigned __int16 *v190;
  unsigned __int16 *v191;
  uint64_t v192;
  uint64_t *i9;
  uint64_t *v194;
  int8x8_t v195;
  BOOL v196;
  unint64_t v197;
  uint8x8_t v198;
  unint64_t v199;
  unsigned __int16 **v200;
  unsigned __int16 *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint8x8_t v207;
  unsigned __int16 *v208;
  unsigned __int16 *v209;
  void **v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int16 v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unsigned __int16 *v219;
  unsigned __int16 *v220;
  uint64_t v221;
  unsigned __int16 *v222;
  unsigned __int16 *v223;
  _QWORD *v224;
  _QWORD *v225;
  void *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unsigned __int16 *v235;
  unsigned __int16 *v236;
  uint64_t v237;
  unsigned __int16 *v238;
  unsigned __int16 *v239;
  _QWORD *v240;
  _QWORD *v241;
  void *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  void *v249;
  _QWORD *v250;
  _QWORD *v251;
  void *v252;
  double v253;
  uint64_t v254;
  uint64_t i10;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t i11;
  uint64_t **i12;
  unsigned __int16 *v261;
  unsigned __int16 *v262;
  uint64_t i13;
  uint64_t **i14;
  unsigned __int16 *v265;
  unsigned __int16 *v266;
  uint64_t v267;
  unsigned __int16 *v268;
  unsigned __int16 *v269;
  double v270;
  int v271;
  uint64_t v272;
  unsigned __int16 *v273;
  unsigned __int16 *v274;
  uint64_t *v275;
  void *v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  int v282;
  _DWORD *v283;
  double v284;
  uint64_t v285;
  uint64_t i15;
  _BYTE *v287;
  void *v288;
  _BYTE *v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  unsigned __int8 *v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  unsigned __int8 *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  unsigned __int8 *v307;
  uint64_t v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  int v313;
  unsigned __int8 *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  unsigned __int8 *v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  int v325;
  unsigned __int8 *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  unsigned __int8 *v331;
  uint64_t v332;
  int v333;
  int v334;
  int v335;
  uint64_t v336;
  int v337;
  unsigned __int8 *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  unsigned __int8 *v343;
  uint64_t v344;
  int v345;
  int v346;
  int v347;
  uint64_t v348;
  int v349;
  unsigned __int8 *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  unsigned __int8 *v355;
  uint64_t v356;
  int v357;
  int v358;
  int v359;
  uint64_t v360;
  int v361;
  unsigned __int8 *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  unsigned __int8 *v367;
  uint64_t v368;
  int v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  unsigned __int8 *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  unsigned __int8 *v379;
  uint64_t v380;
  int v381;
  int v382;
  int v383;
  uint64_t v384;
  int v385;
  unsigned __int8 *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  unsigned __int8 *v391;
  uint64_t v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  int v397;
  unsigned __int8 *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  BOOL v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t i17;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t i16;
  unsigned int v417;
  char v418;
  double v419;
  unsigned int v420;
  double v421;
  double v422;
  int v423;
  int v424;
  int v425;
  signed int v426;
  int v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  double v433;
  uint64_t v434;
  int v435;
  int v436;
  _QWORD *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t i18;
  uint64_t v441;
  unsigned __int16 *v442;
  unsigned __int16 *v443;
  unsigned __int16 *v444;
  int v445;
  uint64_t v446;
  uint64_t **v447;
  unsigned __int16 *v448;
  unsigned __int16 *v449;
  _QWORD *v450;
  unsigned __int8 *v451;
  uint64_t v452;
  _QWORD *v453;
  NSObject *v454;
  _BYTE *v455;
  __int128 *v456;
  _QWORD *v457;
  uint64_t v458;
  unsigned __int8 *v459;
  uint64_t v460;
  void *v461;
  _BYTE *v462;
  char *v463;
  char *v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  __int128 v469;
  unint64_t v470;
  char v471;
  void *v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t i19;
  uint64_t **i20;
  unsigned __int16 *v480;
  unsigned __int16 *v481;
  uint64_t i23;
  uint64_t **i24;
  unsigned __int16 *v484;
  unsigned __int16 *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  __int128 *v567;
  __int128 *v568;
  uint64_t v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  int v589;
  BOOL v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t i21;
  uint64_t **i22;
  unsigned __int16 *v595;
  unsigned __int16 *v596;
  uint64_t v597;
  _BYTE *v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  BOOL v602;
  unint64_t v603;
  _BYTE *v604;
  uint64_t v605;
  _BYTE *v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  BOOL v610;
  unint64_t v611;
  _BYTE *v612;
  uint64_t v613;
  _QWORD *result;
  uint64_t v615;
  int v616;
  int v617;
  unsigned int v618;
  unsigned __int16 **v619;
  unsigned __int16 **v620;
  int v622;
  char v623;
  uint64_t v624;
  unsigned __int16 *v625;
  uint64_t v626;
  unsigned __int16 *v627;
  unsigned __int16 *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unsigned __int16 *v632;
  uint64_t v633;
  _QWORD *v634;
  unsigned __int16 *v635;
  unsigned __int8 *v636;
  unsigned __int8 *v637;
  unsigned __int8 *v638;
  unsigned __int8 *v639;
  unsigned __int8 *v640;
  unsigned __int8 *v641;
  unsigned __int8 *v642[3];
  _QWORD *v643;
  _QWORD *v644;
  void *v645[2];
  void *v646[2];
  int v647;
  __int128 v648;
  void *v649[4];
  _QWORD v650[3];
  _QWORD *v651;
  _QWORD v652[3];
  _QWORD *v653;
  _QWORD v654[3];
  _QWORD *v655;
  uint8_t v656[4];
  _BYTE *v657;
  __int16 v658;
  __int128 *v659;
  _BYTE buf[32];
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  uint64_t v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  uint64_t v680;
  char v681;
  uint64_t v682;
  char v683;
  uint64_t v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  int v690;
  uint64_t v691;
  __int128 v692;
  __int128 v693;
  _OWORD v694[30];
  uint64_t v695;
  double v696[51];

  v696[48] = *(double *)MEMORY[0x1E0C80C00];
  v652[0] = &off_1E42CE588;
  v652[1] = a2;
  v653 = v652;
  v650[0] = &off_1E42CE5D0;
  v650[1] = a2;
  v651 = v650;
  v655 = v654;
  v654[0] = &off_1E42CE5D0;
  v654[1] = a2;
  _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v652);
  v7 = v651;
  if (v651 == v650)
  {
    v8 = 4;
    v7 = v650;
  }
  else
  {
    if (!v651)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v653;
  if (v653 == v652)
  {
    v10 = 4;
    v9 = v652;
  }
  else
  {
    if (!v653)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = *a3;
  v630 = a3[1];
  v12 = (uint64_t *)a3[3];
  v626 = a3[2];
  md::SceneStateManager::clear(*(md::SceneStateManager **)(a1 + 392));
  v624 = v11;
  if (*(_BYTE *)(v11 + 128))
  {
    v13 = *(_QWORD *)(a1 + 392);
    md::SceneStateManager::clear((md::SceneStateManager *)v13);
    v15 = *(_QWORD *)(v13 + 48);
    v14 = *(_QWORD *)(v13 + 56);
    if (v14 != v15)
    {
      do
      {
        v16 = v14 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v14 - 16));
        v14 = v16;
      }
      while (v16 != v15);
    }
    *(_QWORD *)(v13 + 56) = v15;
    *(_BYTE *)(v13 + 280) = 0;
    v17 = *(_QWORD **)(a1 + 128);
    v18 = v17[4];
    for (i = v17[5]; v18 != i; v18 += 16)
      gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v18 + 8));
    v21 = v17[10];
    for (j = v17[11]; v21 != j; v21 += 16)
      gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v21 + 8));
  }
  v22 = *(_QWORD **)(a1 + 280);
  for (k = *(_QWORD **)(a1 + 288); v22 != k; v22 += 4)
  {
    v24 = v22 + 1;
    v25 = v22[3];
    if (v25 < 2)
    {
      if (!v25)
      {
        v31 = operator new(0x18uLL);
        *v31 = 0;
        v31[1] = 0;
        v31[1] = v24;
        v31[2] = 0;
        v32 = v22[1];
        *v31 = v32;
        *(_QWORD *)(v32 + 8) = v31;
        v22[1] = v31;
        v22[3] = 1;
      }
    }
    else
    {
      v26 = *(uint64_t **)(v22[2] + 8);
      if (v26 != v24)
      {
        v27 = *v24;
        v28 = *v26;
        *(_QWORD *)(v28 + 8) = *(_QWORD *)(*v24 + 8);
        **(_QWORD **)(v27 + 8) = v28;
        do
        {
          v29 = (uint64_t *)v26[1];
          --v22[3];
          v30 = v26[2];
          v26[2] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          operator delete(v26);
          v26 = v29;
        }
        while (v29 != v24);
      }
    }
  }
  v33 = *(_QWORD **)(a1 + 304);
  for (m = *(_QWORD **)(a1 + 312); v33 != m; v33 += 4)
  {
    v35 = v33 + 1;
    v36 = v33[3];
    if (v36 < 2)
    {
      if (!v36)
      {
        v42 = operator new(0x18uLL);
        *v42 = 0;
        v42[1] = 0;
        v42[1] = v35;
        v42[2] = 0;
        v43 = v33[1];
        *v42 = v43;
        *(_QWORD *)(v43 + 8) = v42;
        v33[1] = v42;
        v33[3] = 1;
      }
    }
    else
    {
      v37 = *(uint64_t **)(v33[2] + 8);
      if (v37 != v35)
      {
        v38 = *v35;
        v39 = *v37;
        *(_QWORD *)(v39 + 8) = *(_QWORD *)(*v35 + 8);
        **(_QWORD **)(v38 + 8) = v39;
        do
        {
          v40 = (uint64_t *)v37[1];
          --v33[3];
          v41 = v37[2];
          v37[2] = 0;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          operator delete(v37);
          v37 = v40;
        }
        while (v40 != v35);
      }
    }
  }
  v44 = *(_QWORD **)(a1 + 328);
  for (n = *(_QWORD **)(a1 + 336); v44 != n; v44 += 4)
  {
    v46 = v44 + 1;
    v47 = v44[3];
    if (v47 < 2)
    {
      if (!v47)
      {
        v53 = operator new(0x18uLL);
        *v53 = 0;
        v53[1] = 0;
        v53[1] = v46;
        v53[2] = 0;
        v54 = v44[1];
        *v53 = v54;
        *(_QWORD *)(v54 + 8) = v53;
        v44[1] = v53;
        v44[3] = 1;
      }
    }
    else
    {
      v48 = *(uint64_t **)(v44[2] + 8);
      if (v48 != v46)
      {
        v49 = *v46;
        v50 = *v48;
        *(_QWORD *)(v50 + 8) = *(_QWORD *)(*v46 + 8);
        **(_QWORD **)(v49 + 8) = v50;
        do
        {
          v51 = (uint64_t *)v48[1];
          --v44[3];
          v52 = v48[2];
          v48[2] = 0;
          if (v52)
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
          operator delete(v48);
          v48 = v51;
        }
        while (v51 != v46);
      }
    }
  }
  v55.n128_f32[0] = md::LayoutContext::frameState(a2);
  v57 = *(double *)(v56 + 88);
  for (ii = *(uint64_t **)(v624 + 64); ii; ii = (uint64_t *)*ii)
  {
    v63 = *((unsigned __int16 *)ii + 8);
    v64 = *(_QWORD **)(a1 + 392);
    v65 = (unsigned __int16 *)v64[14];
    v66 = (unsigned __int16 *)v64[15];
    if (v65 != v66)
    {
      while (*v65 != v63)
      {
        v65 += 56;
        if (v65 == v66)
        {
          v65 = (unsigned __int16 *)v64[15];
          break;
        }
      }
    }
    *((_DWORD *)v65 + 14) = *((_DWORD *)ii + 6);
    if (v65 + 28 != (unsigned __int16 *)(ii + 3))
    {
      *((_DWORD *)v65 + 24) = *((_DWORD *)ii + 16);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)v65 + 8, (uint64_t *)ii[6]);
      v64 = *(_QWORD **)(a1 + 392);
    }
    v68 = (unsigned __int16 *)v64[17];
    v67 = (unsigned __int16 *)v64[18];
    if (v68 != v67)
    {
      while (*v68 != v63)
      {
        v68 += 56;
        if (v68 == v67)
        {
          v68 = v67;
          break;
        }
      }
    }
    *((_DWORD *)v68 + 14) = *((_DWORD *)ii + 18);
    if (v68 + 28 != (unsigned __int16 *)(ii + 9))
    {
      *((_DWORD *)v68 + 24) = *((_DWORD *)ii + 28);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)v68 + 8, (uint64_t *)ii[12]);
    }
  }
  for (jj = *(uint64_t **)(v624 + 104); jj; jj = (uint64_t *)*jj)
  {
    v69 = *((unsigned __int16 *)jj + 8);
    v70 = *(_QWORD **)(a1 + 392);
    v71 = (unsigned __int16 *)v70[14];
    v72 = (unsigned __int16 *)v70[15];
    if (v71 != v72)
    {
      while (*v71 != v69)
      {
        v71 += 56;
        if (v71 == v72)
        {
          v71 = (unsigned __int16 *)v70[15];
          break;
        }
      }
    }
    *((_DWORD *)v71 + 14) = *((_DWORD *)jj + 6);
    if (v71 + 28 != (unsigned __int16 *)(jj + 3))
    {
      *((_DWORD *)v71 + 24) = *((_DWORD *)jj + 16);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)v71 + 8, (uint64_t *)jj[6]);
      v70 = *(_QWORD **)(a1 + 392);
    }
    v74 = (unsigned __int16 *)v70[17];
    v73 = (unsigned __int16 *)v70[18];
    if (v74 != v73)
    {
      while (*v74 != v69)
      {
        v74 += 56;
        if (v74 == v73)
        {
          v74 = v73;
          break;
        }
      }
    }
    *((_DWORD *)v74 + 14) = *((_DWORD *)jj + 18);
    if (v74 + 28 != (unsigned __int16 *)(jj + 9))
    {
      *((_DWORD *)v74 + 24) = *((_DWORD *)jj + 28);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)v74 + 8, (uint64_t *)jj[12]);
    }
  }
  v60 = *v12;
  v61 = v12[1];
  v62 = *v12;
  if (*v12 != v61)
  {
    v62 = *v12;
    while (*(_BYTE *)v62 != 30)
    {
      v62 += 16;
      if (v62 == v61)
        goto LABEL_88;
    }
  }
  if (v62 == v61 || !*(_QWORD *)(v62 + 8))
  {
LABEL_88:
    v75 = 0;
    if (v60 != v61)
    {
LABEL_89:
      while (*(_BYTE *)v60 != 37)
      {
        v60 += 16;
        if (v60 == v61)
          goto LABEL_96;
      }
    }
  }
  else
  {
    v75 = *(_QWORD *)(a1 + 224);
    if (v60 != v61)
      goto LABEL_89;
  }
  if (v60 != v61
    && *(_QWORD *)(v60 + 8)
    && (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 120))(a1, v55) != 1)
  {
    v75 = 0;
  }
LABEL_96:
  if (*(_QWORD *)(a1 + 232) != v75)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v76 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      v77 = *(_QWORD *)(a1 + 232);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v77;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v75;
      _os_log_impl(&dword_19F029000, v76, OS_LOG_TYPE_INFO, "ResolvedImplicationDelay updated (from:%lld to:%lld)", buf, 0x16u);
    }

    *(_QWORD *)(a1 + 232) = v75;
    if (v75 <= 0)
      geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::clear(*(_QWORD **)(a1 + 216));
  }
  v78 = *(_QWORD **)(a1 + 392);
  v79 = (_QWORD *)v78[20];
  v80 = (_QWORD *)v78[21];
  v81 = v79;
  if (v79 != v80)
  {
    v81 = (_QWORD *)v78[20];
    while (*(_WORD *)v81)
    {
      v81 += 14;
      if (v81 == v80)
      {
        v81 = (_QWORD *)v78[21];
        break;
      }
    }
  }
  if (v81[11])
  {
    v82 = (_QWORD *)v81[10];
    if (v82)
    {
      do
      {
        v83 = (_QWORD *)*v82;
        operator delete(v82);
        v82 = v83;
      }
      while (v83);
    }
    v81[10] = 0;
    v84 = v81[9];
    if (v84)
    {
      for (kk = 0; kk != v84; ++kk)
        *(_QWORD *)(v81[8] + 8 * kk) = 0;
    }
    v81[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v86 = v80;
  if (v79 != v80)
  {
    v86 = v79;
    while (*(_WORD *)v86 != 1)
    {
      v86 += 14;
      if (v86 == v80)
      {
        v86 = v80;
        break;
      }
    }
  }
  if (v86[11])
  {
    v87 = (_QWORD *)v86[10];
    if (v87)
    {
      do
      {
        v88 = (_QWORD *)*v87;
        operator delete(v87);
        v87 = v88;
      }
      while (v88);
    }
    v86[10] = 0;
    v89 = v86[9];
    if (v89)
    {
      for (mm = 0; mm != v89; ++mm)
        *(_QWORD *)(v86[8] + 8 * mm) = 0;
    }
    v86[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v91 = v80;
  if (v79 != v80)
  {
    v91 = v79;
    while (*(_WORD *)v91 != 2)
    {
      v91 += 14;
      if (v91 == v80)
      {
        v91 = v80;
        break;
      }
    }
  }
  if (v91[11])
  {
    v92 = (_QWORD *)v91[10];
    if (v92)
    {
      do
      {
        v93 = (_QWORD *)*v92;
        operator delete(v92);
        v92 = v93;
      }
      while (v93);
    }
    v91[10] = 0;
    v94 = v91[9];
    if (v94)
    {
      for (nn = 0; nn != v94; ++nn)
        *(_QWORD *)(v91[8] + 8 * nn) = 0;
    }
    v91[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v96 = v80;
  if (v79 != v80)
  {
    v96 = v79;
    while (*(_WORD *)v96 != 3)
    {
      v96 += 14;
      if (v96 == v80)
      {
        v96 = v80;
        break;
      }
    }
  }
  if (v96[11])
  {
    v97 = (_QWORD *)v96[10];
    if (v97)
    {
      do
      {
        v98 = (_QWORD *)*v97;
        operator delete(v97);
        v97 = v98;
      }
      while (v98);
    }
    v96[10] = 0;
    v99 = v96[9];
    if (v99)
    {
      for (i1 = 0; i1 != v99; ++i1)
        *(_QWORD *)(v96[8] + 8 * i1) = 0;
    }
    v96[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v101 = v80;
  if (v79 != v80)
  {
    v101 = v79;
    while (*(_WORD *)v101 != 4)
    {
      v101 += 14;
      if (v101 == v80)
      {
        v101 = v80;
        break;
      }
    }
  }
  if (v101[11])
  {
    v102 = (_QWORD *)v101[10];
    if (v102)
    {
      do
      {
        v103 = (_QWORD *)*v102;
        operator delete(v102);
        v102 = v103;
      }
      while (v103);
    }
    v101[10] = 0;
    v104 = v101[9];
    if (v104)
    {
      for (i2 = 0; i2 != v104; ++i2)
        *(_QWORD *)(v101[8] + 8 * i2) = 0;
    }
    v101[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v106 = v80;
  if (v79 != v80)
  {
    v106 = v79;
    while (*(_WORD *)v106 != 5)
    {
      v106 += 14;
      if (v106 == v80)
      {
        v106 = v80;
        break;
      }
    }
  }
  if (v106[11])
  {
    v107 = (_QWORD *)v106[10];
    if (v107)
    {
      do
      {
        v108 = (_QWORD *)*v107;
        operator delete(v107);
        v107 = v108;
      }
      while (v108);
    }
    v106[10] = 0;
    v109 = v106[9];
    if (v109)
    {
      for (i3 = 0; i3 != v109; ++i3)
        *(_QWORD *)(v106[8] + 8 * i3) = 0;
    }
    v106[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v111 = v80;
  if (v79 != v80)
  {
    v111 = v79;
    while (*(_WORD *)v111 != 6)
    {
      v111 += 14;
      if (v111 == v80)
      {
        v111 = v80;
        break;
      }
    }
  }
  if (v111[11])
  {
    v112 = (_QWORD *)v111[10];
    if (v112)
    {
      do
      {
        v113 = (_QWORD *)*v112;
        operator delete(v112);
        v112 = v113;
      }
      while (v113);
    }
    v111[10] = 0;
    v114 = v111[9];
    if (v114)
    {
      for (i4 = 0; i4 != v114; ++i4)
        *(_QWORD *)(v111[8] + 8 * i4) = 0;
    }
    v111[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  v116 = v80;
  if (v79 != v80)
  {
    v116 = v79;
    while (*(_WORD *)v116 != 7)
    {
      v116 += 14;
      if (v116 == v80)
      {
        v116 = v80;
        break;
      }
    }
  }
  if (v116[11])
  {
    v117 = (_QWORD *)v116[10];
    if (v117)
    {
      do
      {
        v118 = (_QWORD *)*v117;
        operator delete(v117);
        v117 = v118;
      }
      while (v118);
    }
    v116[10] = 0;
    v119 = v116[9];
    if (v119)
    {
      for (i5 = 0; i5 != v119; ++i5)
        *(_QWORD *)(v116[8] + 8 * i5) = 0;
    }
    v116[11] = 0;
    v78 = *(_QWORD **)(a1 + 392);
    v79 = (_QWORD *)v78[20];
    v80 = (_QWORD *)v78[21];
  }
  while (1)
  {
    if (v79 == v80)
    {
      if (!v80[11])
        goto LABEL_211;
      goto LABEL_205;
    }
    if (*(_WORD *)v79 == 8)
      break;
    v79 += 14;
  }
  v80 = v79;
  if (!v79[11])
    goto LABEL_211;
LABEL_205:
  v121 = (_QWORD *)v80[10];
  if (v121)
  {
    do
    {
      v122 = (_QWORD *)*v121;
      operator delete(v121);
      v121 = v122;
    }
    while (v122);
  }
  v80[10] = 0;
  v123 = v80[9];
  if (v123)
  {
    for (i6 = 0; i6 != v123; ++i6)
      *(_QWORD *)(v80[8] + 8 * i6) = 0;
  }
  v80[11] = 0;
  v78 = *(_QWORD **)(a1 + 392);
LABEL_211:
  v125 = v78[14];
  v126 = v78[15];
  v127 = v125;
  if (v125 != v126)
  {
    v127 = v78[14];
    while (*(_WORD *)v127)
    {
      v127 += 112;
      if (v127 == v126)
      {
        v127 = v78[15];
        break;
      }
    }
  }
  v128 = *(_DWORD *)(v127 + 88);
  v129 = v78[17];
  v130 = v78[18];
  v131 = v129;
  if (v129 != v130)
  {
    v131 = v129;
    while (*(_WORD *)v131)
    {
      v131 += 112;
      if (v131 == v130)
      {
        v131 = v130;
        break;
      }
    }
  }
  v132 = *(_DWORD *)(v131 + 88) + v128;
  v133 = v125;
  if (v125 != v126)
  {
    v133 = v125;
    while (*(_WORD *)v133 != 1)
    {
      v133 += 112;
      if (v133 == v126)
      {
        v133 = v126;
        break;
      }
    }
  }
  v134 = v132 + *(_DWORD *)(v133 + 88);
  v135 = v129;
  if (v129 != v130)
  {
    v135 = v129;
    while (*(_WORD *)v135 != 1)
    {
      v135 += 112;
      if (v135 == v130)
      {
        v135 = v130;
        break;
      }
    }
  }
  v136 = v134 + *(_DWORD *)(v135 + 88);
  v137 = v125;
  if (v125 != v126)
  {
    v137 = v125;
    while (*(_WORD *)v137 != 2)
    {
      v137 += 112;
      if (v137 == v126)
      {
        v137 = v126;
        break;
      }
    }
  }
  v138 = v136 + *(_DWORD *)(v137 + 88);
  v139 = v129;
  if (v129 != v130)
  {
    v139 = v129;
    while (*(_WORD *)v139 != 2)
    {
      v139 += 112;
      if (v139 == v130)
      {
        v139 = v130;
        break;
      }
    }
  }
  v140 = v138 + *(_DWORD *)(v139 + 88);
  v141 = v125;
  if (v125 != v126)
  {
    v141 = v125;
    while (*(_WORD *)v141 != 3)
    {
      v141 += 112;
      if (v141 == v126)
      {
        v141 = v126;
        break;
      }
    }
  }
  v142 = v140 + *(_DWORD *)(v141 + 88);
  v143 = v129;
  if (v129 != v130)
  {
    v143 = v129;
    while (*(_WORD *)v143 != 3)
    {
      v143 += 112;
      if (v143 == v130)
      {
        v143 = v130;
        break;
      }
    }
  }
  v144 = v142 + *(_DWORD *)(v143 + 88);
  v145 = v125;
  if (v125 != v126)
  {
    v145 = v125;
    while (*(_WORD *)v145 != 4)
    {
      v145 += 112;
      if (v145 == v126)
      {
        v145 = v126;
        break;
      }
    }
  }
  v146 = v144 + *(_DWORD *)(v145 + 88);
  v147 = v129;
  if (v129 != v130)
  {
    v147 = v129;
    while (*(_WORD *)v147 != 4)
    {
      v147 += 112;
      if (v147 == v130)
      {
        v147 = v130;
        break;
      }
    }
  }
  v148 = v146 + *(_DWORD *)(v147 + 88);
  v149 = v125;
  if (v125 != v126)
  {
    v149 = v125;
    while (*(_WORD *)v149 != 5)
    {
      v149 += 112;
      if (v149 == v126)
      {
        v149 = v126;
        break;
      }
    }
  }
  v150 = v148 + *(_DWORD *)(v149 + 88);
  v151 = v129;
  if (v129 != v130)
  {
    v151 = v129;
    while (*(_WORD *)v151 != 5)
    {
      v151 += 112;
      if (v151 == v130)
      {
        v151 = v130;
        break;
      }
    }
  }
  v152 = v150 + *(_DWORD *)(v151 + 88);
  v153 = v125;
  if (v125 != v126)
  {
    v153 = v125;
    while (*(_WORD *)v153 != 6)
    {
      v153 += 112;
      if (v153 == v126)
      {
        v153 = v126;
        break;
      }
    }
  }
  v154 = v152 + *(_DWORD *)(v153 + 88);
  v155 = v129;
  if (v129 != v130)
  {
    v155 = v129;
    while (*(_WORD *)v155 != 6)
    {
      v155 += 112;
      if (v155 == v130)
      {
        v155 = v130;
        break;
      }
    }
  }
  v156 = v154 + *(_DWORD *)(v155 + 88);
  v157 = v125;
  if (v125 != v126)
  {
    v157 = v125;
    while (*(_WORD *)v157 != 7)
    {
      v157 += 112;
      if (v157 == v126)
      {
        v157 = v126;
        break;
      }
    }
  }
  v158 = v156 + *(_DWORD *)(v157 + 88);
  v159 = v129;
  if (v129 != v130)
  {
    v159 = v129;
    while (*(_WORD *)v159 != 7)
    {
      v159 += 112;
      if (v159 == v130)
      {
        v159 = v130;
        break;
      }
    }
  }
  v160 = v158 + *(_DWORD *)(v159 + 88);
  if (v125 != v126)
  {
    while (*(_WORD *)v125 != 8)
    {
      v125 += 112;
      if (v125 == v126)
      {
        v125 = v126;
        break;
      }
    }
  }
  v161 = v160 + *(_DWORD *)(v125 + 88);
  if (v129 != v130)
  {
    while (*(_WORD *)v129 != 8)
    {
      v129 += 112;
      if (v129 == v130)
      {
        v129 = v130;
        break;
      }
    }
  }
  v162 = (v161 + *(_DWORD *)(v129 + 88));
  v163 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(v163 + 48) < v162)
  {
    prime = vcvtps_u32_f32((float)v162 / *(float *)(v163 + 56));
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v165 = *(int8x8_t *)(v163 + 32);
    if (prime > *(_QWORD *)&v165)
      goto LABEL_305;
    if (prime < *(_QWORD *)&v165)
    {
      v166 = vcvtps_u32_f32((float)*(unint64_t *)(v163 + 48) / *(float *)(v163 + 56));
      if (*(_QWORD *)&v165 < 3uLL
        || (v167 = (uint8x8_t)vcnt_s8(v165), v167.i16[0] = vaddlv_u8(v167), v167.u32[0] > 1uLL))
      {
        v166 = std::__next_prime(v166);
      }
      else
      {
        v168 = 1 << -(char)__clz(v166 - 1);
        if (v166 >= 2)
          v166 = v168;
      }
      if (prime <= v166)
        prime = v166;
      if (prime < *(_QWORD *)&v165)
LABEL_305:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v163 + 24, prime);
    }
  }
  v169 = *(_QWORD *)(a1 + 192);
  v620 = (unsigned __int16 **)(a1 + 192);
  for (i7 = *(_QWORD *)(a1 + 200); i7 != v169; i7 -= 48)
  {
    v171 = *(_BYTE **)(i7 - 24);
    if (v171)
    {
      do
      {
        if (v171[112])
          v171[112] = 0;
        v173 = *(_BYTE **)v171;
        v174 = (void *)*((_QWORD *)v171 + 4);
        if (v174 != *((void **)v171 + 6))
          free(v174);
        operator delete(v171);
        v171 = v173;
      }
      while (v173);
    }
    v172 = *(void **)(i7 - 40);
    *(_QWORD *)(i7 - 40) = 0;
    if (v172)
      operator delete(v172);
  }
  v175 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 200) = v169;
  v619 = (unsigned __int16 **)(a1 + 168);
  for (i8 = *(_QWORD *)(a1 + 176); i8 != v175; i8 -= 48)
  {
    v177 = *(_BYTE **)(i8 - 24);
    if (v177)
    {
      do
      {
        if (v177[112])
          v177[112] = 0;
        v179 = *(_BYTE **)v177;
        v180 = (void *)*((_QWORD *)v177 + 4);
        if (v180 != *((void **)v177 + 6))
          free(v180);
        operator delete(v177);
        v177 = v179;
      }
      while (v179);
    }
    v178 = *(void **)(i8 - 40);
    *(_QWORD *)(i8 - 40) = 0;
    if (v178)
      operator delete(v178);
  }
  *(_QWORD *)(a1 + 176) = v175;
  v622 = *(unsigned __int8 *)(v624 + 129);
  if ((v181 & 1) == 0
  {
    md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty = 0;
    *(_QWORD *)algn_1EE586798 = 0;
    qword_1EE5867A0 = 0;
    __cxa_atexit((void (*)(void *))geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map, &md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, &dword_19F029000);
  }
  v182 = *(_QWORD **)(a1 + 128);
  v634 = (_QWORD *)v182[3];
  v184 = (unsigned __int16 *)v182[21];
  v183 = (unsigned __int16 *)v182[22];
  v629 = a1;
  if (v184 != v183)
  {
    v185 = v183;
    do
    {
      v186 = *v184;
      v187 = *(_QWORD **)(a1 + 392);
      v189 = (unsigned __int16 *)v187[14];
      v188 = (unsigned __int16 *)v187[15];
      if (v189 != v188)
      {
        while (*v189 != v186)
        {
          v189 += 56;
          if (v189 == v188)
          {
            v189 = (unsigned __int16 *)v187[15];
            break;
          }
        }
      }
      v191 = (unsigned __int16 *)v187[17];
      v190 = (unsigned __int16 *)v187[18];
      if (v191 != v190)
      {
        while (*v191 != v186)
        {
          v191 += 56;
          if (v191 == v190)
          {
            v191 = v190;
            break;
          }
        }
      }
      v192 = *(_QWORD *)(a1 + 128);
      v648 = 0u;
      *(_OWORD *)v649 = 0u;
      LODWORD(v649[2]) = 1065353216;
      for (i9 = *(uint64_t **)(v192 + 144); i9; i9 = (uint64_t *)*i9)
      {
        v196 = *((unsigned __int16 *)i9 + 10) != v186 || *((_BYTE *)i9 + 18) == 2;
        if (!v196)
          std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)&v648, *((_WORD *)i9 + 8), *((_WORD *)i9 + 8));
      }
      v194 = *(uint64_t **)(v630 + 16);
      if (v194)
      {
        v195 = *(int8x8_t *)((char *)&v648 + 8);
        if (*((_QWORD *)&v648 + 1))
        {
          v635 = v189 + 28;
          v632 = v191 + 28;
LABEL_361:
          v197 = *((unsigned __int16 *)v194 + 8);
          v198 = (uint8x8_t)vcnt_s8(v195);
          v198.i16[0] = vaddlv_u8(v198);
          if (v198.u32[0] > 1uLL)
          {
            v199 = *((unsigned __int16 *)v194 + 8);
            if (*(_QWORD *)&v195 <= v197)
              v199 = v197 % *(_QWORD *)&v195;
          }
          else
          {
            v199 = (v195.i32[0] - 1) & v197;
          }
          v200 = *(unsigned __int16 ***)(v648 + 8 * v199);
          if (v200)
          {
            v201 = *v200;
            if (*v200)
            {
              if (v198.u32[0] < 2uLL)
              {
                v202 = *(_QWORD *)&v195 - 1;
                while (1)
                {
                  v204 = *((_QWORD *)v201 + 1);
                  if (v204 == v197)
                  {
                    if (v201[8] == (_DWORD)v197)
                      goto LABEL_381;
                  }
                  else if ((v204 & v202) != v199)
                  {
                    goto LABEL_449;
                  }
                  v201 = *(unsigned __int16 **)v201;
                  if (!v201)
                    goto LABEL_449;
                }
              }
              do
              {
                v203 = *((_QWORD *)v201 + 1);
                if (v203 == v197)
                {
                  if (v201[8] == (_DWORD)v197)
                  {
LABEL_381:
                    *(_OWORD *)v645 = 0u;
                    *(_OWORD *)v646 = 0u;
                    v647 = 1065353216;
                    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)v645, v197, v197);
                    v205 = *((_QWORD *)&v648 + 1);
                    v206 = *((_QWORD *)v201 + 1);
                    v207 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v648 + 8));
                    v207.i16[0] = vaddlv_u8(v207);
                    if (v207.u32[0] >= 2uLL)
                    {
                      if (v206 >= *((_QWORD *)&v648 + 1))
                        v206 %= *((_QWORD *)&v648 + 1);
                    }
                    else
                    {
                      v206 &= *((_QWORD *)&v648 + 1) - 1;
                    }
                    v208 = *(unsigned __int16 **)v201;
                    v209 = *(unsigned __int16 **)(v648 + 8 * v206);
                    do
                    {
                      v210 = (void **)v209;
                      v209 = *(unsigned __int16 **)v209;
                    }
                    while (v209 != v201);
                    if (v210 == v649)
                      goto LABEL_398;
                    v211 = (unint64_t)v210[1];
                    if (v207.u32[0] > 1uLL)
                    {
                      if (v211 >= *((_QWORD *)&v648 + 1))
                        v211 %= *((_QWORD *)&v648 + 1);
                    }
                    else
                    {
                      v211 &= *((_QWORD *)&v648 + 1) - 1;
                    }
                    if (v211 == v206)
                    {
LABEL_400:
                      if (v208)
                      {
                        v212 = *((_QWORD *)v208 + 1);
                        goto LABEL_402;
                      }
                    }
                    else
                    {
LABEL_398:
                      if (!v208)
                        goto LABEL_399;
                      v212 = *((_QWORD *)v208 + 1);
                      if (v207.u32[0] > 1uLL)
                      {
                        v213 = *((_QWORD *)v208 + 1);
                        if (v212 >= *((_QWORD *)&v648 + 1))
                          v213 = v212 % *((_QWORD *)&v648 + 1);
                      }
                      else
                      {
                        v213 = v212 & (*((_QWORD *)&v648 + 1) - 1);
                      }
                      if (v213 != v206)
                      {
LABEL_399:
                        *(_QWORD *)(v648 + 8 * v206) = 0;
                        v208 = *(unsigned __int16 **)v201;
                        goto LABEL_400;
                      }
LABEL_402:
                      if (v207.u32[0] > 1uLL)
                      {
                        if (v212 >= v205)
                          v212 %= v205;
                      }
                      else
                      {
                        v212 &= v205 - 1;
                      }
                      if (v212 != v206)
                      {
                        *(_QWORD *)(v648 + 8 * v212) = v210;
                        v208 = *(unsigned __int16 **)v201;
                      }
                    }
                    *v210 = v208;
                    --v649[1];
                    operator delete(v201);
                    v214 = *((_WORD *)v194 + 8);
                    *(_WORD *)buf = v186;
                    LOWORD(v642[0]) = v214;
                    LOBYTE(v639) = 0;
                    v215 = v194[6];
                    v216 = (_QWORD *)v629;
                    if (v215)
                    {
                      (*(void (**)(_QWORD **__return_ptr, uint64_t, _BYTE *, unsigned __int8 **, unsigned __int8 **, unsigned __int16 *))(*(_QWORD *)v215 + 48))(&v644, v215, buf, v642, &v639, v635);
                      v217 = v644;
                      if (v644)
                      {
                        v218 = *((_QWORD *)v189 + 13);
                        v220 = *(unsigned __int16 **)(v629 + 280);
                        v219 = *(unsigned __int16 **)(v629 + 288);
                        if (v220 != v219)
                        {
                          while (*v220 != v186)
                          {
                            v220 += 16;
                            if (v220 == v219)
                              goto LABEL_425;
                          }
                        }
                        if (v220 == v219)
                        {
LABEL_425:
                          v644 = 0;
                          (*(void (**)(_QWORD *))(*v217 + 8))(v217);
                        }
                        else
                        {
                          v644[8] = v635;
                          v221 = *(_QWORD *)(v629 + 392);
                          v222 = *(unsigned __int16 **)(v221 + 112);
                          v223 = *(unsigned __int16 **)(v221 + 120);
                          if (v222 != v223)
                          {
                            do
                            {
                              if (*v222 == v186)
                                goto LABEL_419;
                              v222 += 56;
                            }
                            while (v222 != v223);
                            v222 = v223;
                          }
LABEL_419:
                          v217[9] = v222 + 28;
                          v217[7] = v189 + 8;
                          v217[1] = v218;
                          std::unordered_set<unsigned short>::unordered_set((uint64_t)buf, (uint64_t)v645);
                          gdc::SelectionContext::setLayerDataTypes((uint64_t)v217, (uint64_t *)buf);
                          v224 = *(_QWORD **)&buf[16];
                          if (*(_QWORD *)&buf[16])
                          {
                            do
                            {
                              v225 = (_QWORD *)*v224;
                              operator delete(v224);
                              v224 = v225;
                            }
                            while (v225);
                          }
                          v226 = *(void **)buf;
                          *(_QWORD *)buf = 0;
                          if (v226)
                            operator delete(v226);
                          v227 = v644;
                          v644 = 0;
                          v228 = operator new(0x18uLL);
                          v228[2] = v227;
                          v230 = *((_QWORD *)v220 + 1);
                          v229 = v220 + 4;
                          *v228 = v230;
                          v228[1] = v229;
                          *(_QWORD *)(v230 + 8) = v228;
                          *v229 = v228;
                          ++v229[2];
                          v216 = (_QWORD *)v629;
                        }
                      }
                      else
                      {
                        v644 = 0;
                      }
                      v231 = *((_WORD *)v194 + 8);
                      *(_WORD *)buf = v186;
                      LOWORD(v642[0]) = v231;
                      LOBYTE(v639) = 1;
                      v232 = v194[6];
                      if (v232)
                      {
                        (*(void (**)(_QWORD **__return_ptr, uint64_t, _BYTE *, unsigned __int8 **, unsigned __int8 **, unsigned __int16 *))(*(_QWORD *)v232 + 48))(&v643, v232, buf, v642, &v639, v632);
                        v233 = v643;
                        if (v643)
                        {
                          v234 = *((_QWORD *)v191 + 13);
                          v236 = (unsigned __int16 *)v216[38];
                          v235 = (unsigned __int16 *)v216[39];
                          if (v236 != v235)
                          {
                            while (*v236 != v186)
                            {
                              v236 += 16;
                              if (v236 == v235)
                                goto LABEL_444;
                            }
                          }
                          if (v236 != v235)
                          {
                            v643[8] = v632;
                            v237 = v216[49];
                            v238 = *(unsigned __int16 **)(v237 + 112);
                            v239 = *(unsigned __int16 **)(v237 + 120);
                            if (v238 != v239)
                            {
                              do
                              {
                                if (*v238 == v186)
                                  goto LABEL_437;
                                v238 += 56;
                              }
                              while (v238 != v239);
                              v238 = v239;
                            }
LABEL_437:
                            v233[9] = v238 + 28;
                            v233[7] = v191 + 8;
                            v233[1] = v234;
                            std::unordered_set<unsigned short>::unordered_set((uint64_t)buf, (uint64_t)v645);
                            gdc::SelectionContext::setLayerDataTypes((uint64_t)v233, (uint64_t *)buf);
                            v240 = *(_QWORD **)&buf[16];
                            if (*(_QWORD *)&buf[16])
                            {
                              do
                              {
                                v241 = (_QWORD *)*v240;
                                operator delete(v240);
                                v240 = v241;
                              }
                              while (v241);
                            }
                            v242 = *(void **)buf;
                            *(_QWORD *)buf = 0;
                            if (v242)
                              operator delete(v242);
                            v243 = v643;
                            v643 = 0;
                            v244 = operator new(0x18uLL);
                            v244[2] = v243;
                            v246 = *((_QWORD *)v236 + 1);
                            v245 = v236 + 4;
                            *v244 = v246;
                            v244[1] = v245;
                            *(_QWORD *)(v246 + 8) = v244;
                            *v245 = v244;
                            ++v245[2];
                            v247 = v646[0];
                            if (!v646[0])
                            {
LABEL_447:
                              v249 = v645[0];
                              v645[0] = 0;
                              if (v249)
                                operator delete(v249);
                              break;
                            }
                            do
                            {
LABEL_446:
                              v248 = (_QWORD *)*v247;
                              operator delete(v247);
                              v247 = v248;
                            }
                            while (v248);
                            goto LABEL_447;
                          }
LABEL_444:
                          v643 = 0;
                          (*(void (**)(_QWORD *))(*v233 + 8))(v233);
                        }
                        else
                        {
                          v643 = 0;
                        }
                        v247 = v646[0];
                        if (!v646[0])
                          goto LABEL_447;
                        goto LABEL_446;
                      }
                    }
                    std::__throw_bad_function_call[abi:nn180100]();
LABEL_990:
                    __break(1u);
                  }
                }
                else
                {
                  if (v203 >= *(_QWORD *)&v195)
                    v203 %= *(_QWORD *)&v195;
                  if (v203 != v199)
                    break;
                }
                v201 = *(unsigned __int16 **)v201;
              }
              while (v201);
            }
          }
LABEL_449:
          while (1)
          {
            v194 = (uint64_t *)*v194;
            if (!v194)
              break;
            v195 = *(int8x8_t *)((char *)&v648 + 8);
            if (*((_QWORD *)&v648 + 1))
              goto LABEL_361;
          }
        }
        else
        {
          do
            v194 = (uint64_t *)*v194;
          while (v194);
        }
      }
      a1 = v629;
      md::PendingSceneLogic::updateSelectionContextMap(v186, *(unsigned __int16 **)(v629 + 280), *(unsigned __int16 **)(v629 + 288), (uint64_t)(v189 + 8), (uint64_t)(v189 + 28), *((void **)v189 + 13), (uint64_t)&v648);
      md::PendingSceneLogic::updateSelectionContextMap(v186, *(unsigned __int16 **)(a1 + 304), *(unsigned __int16 **)(a1 + 312), (uint64_t)(v191 + 8), (uint64_t)(v191 + 28), *((void **)v191 + 13), (uint64_t)&v648);
      v250 = v649[0];
      if (v649[0])
      {
        do
        {
          v251 = (_QWORD *)*v250;
          operator delete(v250);
          v250 = v251;
        }
        while (v251);
      }
      v252 = (void *)v648;
      *(_QWORD *)&v648 = 0;
      if (v252)
        operator delete(v252);
      ++v184;
    }
    while (v184 != v185);
  }
  v253 = v57 * 1000.0;
  v254 = *(_QWORD *)(a1 + 280);
  for (i10 = *(_QWORD *)(a1 + 288); v254 != i10; v254 += 32)
  {
    for (i11 = *(_QWORD *)(v254 + 16); i11 != v254 + 8; i11 = *(_QWORD *)(i11 + 8))
    {
      for (i12 = *(uint64_t ***)(*(_QWORD *)(i11 + 16) + 32); i12; i12 = (uint64_t **)*i12)
      {
        v261 = (unsigned __int16 *)v634[1];
        v262 = (unsigned __int16 *)v634[2];
        if (v261 != v262)
        {
          while (*((unsigned __int16 *)i12 + 8) != *v261)
          {
            v261 += 12;
            if (v261 == v262)
              goto LABEL_465;
          }
        }
        if (v261 != v262)
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v261 + 2) + 24))(*((_QWORD *)v261 + 2), *(_QWORD *)(i11 + 16), 0);
LABEL_465:
        ;
      }
    }
  }
  v256 = (uint64_t)v253;
  v618 = v622 - 1;
  if ((v622 - 1) < 3)
  {
    v257 = *(_QWORD *)(a1 + 304);
    v258 = *(_QWORD *)(a1 + 312);
    while (v257 != v258)
    {
      for (i13 = *(_QWORD *)(v257 + 16); i13 != v257 + 8; i13 = *(_QWORD *)(i13 + 8))
      {
        for (i14 = *(uint64_t ***)(*(_QWORD *)(i13 + 16) + 32); i14; i14 = (uint64_t **)*i14)
        {
          v265 = (unsigned __int16 *)v634[1];
          v266 = (unsigned __int16 *)v634[2];
          if (v265 != v266)
          {
            while (*((unsigned __int16 *)i14 + 8) != *v265)
            {
              v265 += 12;
              if (v265 == v266)
                goto LABEL_479;
            }
          }
          if (v265 != v266)
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v265 + 2) + 24))(*((_QWORD *)v265 + 2), *(_QWORD *)(i13 + 16), 0);
LABEL_479:
          ;
        }
      }
      v257 += 32;
    }
  }
  gdc::LayerDataManager::preloadLayerDataKeys(*(uint64_t **)(v634[8] + 40), v619);
  if (*(uint64_t *)(a1 + 232) < 1)
  {
    gdc::LayerDataManager::createDataRequests((uint64_t)v634, (uint64_t *)(a1 + 280), v619, (uint64_t)v253);
    if ((v622 & 0xFE) == 2)
      gdc::LayerDataManager::createDataRequests((uint64_t)v634, (uint64_t *)(a1 + 304), (unsigned __int16 **)&md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, (uint64_t)v253);
    v271 = 1;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 64) = *(_QWORD *)(a1 + 216);
    v267 = *(_QWORD *)(a1 + 128);
    v268 = *(unsigned __int16 **)(v267 + 168);
    v269 = *(unsigned __int16 **)(v267 + 176);
    if (v268 == v269)
    {
      geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::purge(*(_QWORD **)(a1 + 216));
      v271 = 1;
    }
    else
    {
      v270 = 0.0;
      LOBYTE(v271) = 1;
      do
      {
        v272 = *(_QWORD *)(a1 + 392);
        v273 = *(unsigned __int16 **)(v272 + 112);
        v274 = *(unsigned __int16 **)(v272 + 120);
        if (v273 != v274)
        {
          while (*v273 != *v268)
          {
            v273 += 56;
            if (v273 == v274)
            {
              v273 = v274;
              break;
            }
          }
        }
        v275 = (uint64_t *)*((_QWORD *)v273 + 13);
        v277 = *v275;
        v276 = (void *)v275[1];
        v645[0] = (void *)v277;
        v646[0] = v276;
        if ((void *)v277 == v276)
        {
LABEL_501:
          v283 = (_DWORD *)v277;
        }
        else
        {
          v278 = *(unsigned __int8 *)(v277 + 113);
          v279 = *(_DWORD *)(v277 + 116);
          v280 = *(_DWORD *)(v277 + 120);
          v281 = v277 + 144;
          v282 = *(unsigned __int8 *)(v277 + 112);
          while ((void *)v281 != v276)
          {
            v283 = (_DWORD *)v281;
            v277 += 144;
            if (*(unsigned __int8 *)(v281 + 112) != v282
              || *(unsigned __int8 *)(v281 + 113) != v278
              || *(_DWORD *)(v281 + 116) != v279)
            {
              goto LABEL_501;
            }
            v281 += 144;
            if (v283[30] != v280)
              goto LABEL_502;
          }
          v283 = v276;
        }
LABEL_502:
        v645[1] = v283;
        v642[1] = (unsigned __int8 *)v276;
        v642[2] = (unsigned __int8 *)v276;
        v642[0] = (unsigned __int8 *)v276;
        md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, (unsigned __int8 **)v645, v642, v256, v620);
        v271 = v271 & (buf[0] != 0);
        v284 = fmax(v270, *(double *)&buf[8]);
        if (*(_DWORD *)&buf[20])
          v270 = v284;
        ++v268;
      }
      while (v268 != v269);
      geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::purge(*(_QWORD **)(a1 + 216));
      if (v270 > 0.0)
        (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 264) + 24))(*(_QWORD *)(a1 + 264), 0, v270 * 0.001);
    }
    gdc::LayerDataManager::createDataRequests((uint64_t)v634, v620, v619, v256);
    if (v622 == 3)
    {
      gdc::LayerDataManager::createDataRequests((uint64_t)v634, (uint64_t *)(a1 + 304), (unsigned __int16 **)&md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, v256);
    }
    else if (v622 == 2)
    {
      v285 = *(_QWORD *)(a1 + 192);
      for (i15 = *(_QWORD *)(a1 + 200); i15 != v285; i15 -= 48)
      {
        v287 = *(_BYTE **)(i15 - 24);
        if (v287)
        {
          do
          {
            if (v287[112])
              v287[112] = 0;
            v289 = *(_BYTE **)v287;
            v290 = (void *)*((_QWORD *)v287 + 4);
            if (v290 != *((void **)v287 + 6))
              free(v290);
            operator delete(v287);
            v287 = v289;
          }
          while (v289);
        }
        v288 = *(void **)(i15 - 40);
        *(_QWORD *)(i15 - 40) = 0;
        if (v288)
          operator delete(v288);
      }
      *(_QWORD *)(a1 + 200) = v285;
      v291 = *(_QWORD *)(a1 + 392);
      v292 = *(_QWORD *)(v291 + 112);
      v293 = *(_QWORD *)(v291 + 120);
      if (v292 != v293)
      {
        while (*(_WORD *)v292)
        {
          v292 += 112;
          if (v292 == v293)
          {
            v292 = v293;
            break;
          }
        }
      }
      v294 = *(uint64_t **)(v292 + 104);
      v296 = *v294;
      v295 = (unsigned __int8 *)v294[1];
      v639 = (unsigned __int8 *)v296;
      v641 = v295;
      if ((unsigned __int8 *)v296 == v295)
      {
LABEL_539:
        v302 = (unsigned __int8 *)v296;
      }
      else
      {
        v297 = *(unsigned __int8 *)(v296 + 113);
        v298 = *(_DWORD *)(v296 + 116);
        v299 = *(_DWORD *)(v296 + 120);
        v300 = v296 + 144;
        v301 = *(unsigned __int8 *)(v296 + 112);
        while ((unsigned __int8 *)v300 != v295)
        {
          v302 = (unsigned __int8 *)v300;
          v296 += 144;
          if (*(unsigned __int8 *)(v300 + 112) != v301
            || *(unsigned __int8 *)(v300 + 113) != v297
            || *(_DWORD *)(v300 + 116) != v298)
          {
            goto LABEL_539;
          }
          v300 += 144;
          if (*((_DWORD *)v302 + 30) != v299)
            goto LABEL_540;
        }
        v302 = v295;
      }
LABEL_540:
      v640 = v302;
      v637 = v295;
      v638 = v295;
      v636 = v295;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v303 = *(_QWORD *)(a1 + 392);
      v304 = *(_QWORD *)(v303 + 112);
      v305 = *(_QWORD *)(v303 + 120);
      if (v304 != v305)
      {
        while (*(_WORD *)v304 != 1)
        {
          v304 += 112;
          if (v304 == v305)
          {
            v304 = v305;
            break;
          }
        }
      }
      v306 = *(uint64_t **)(v304 + 104);
      v308 = *v306;
      v307 = (unsigned __int8 *)v306[1];
      v639 = (unsigned __int8 *)v308;
      v641 = v307;
      if ((unsigned __int8 *)v308 == v307)
      {
LABEL_552:
        v314 = (unsigned __int8 *)v308;
      }
      else
      {
        v309 = *(unsigned __int8 *)(v308 + 113);
        v310 = *(_DWORD *)(v308 + 116);
        v311 = *(_DWORD *)(v308 + 120);
        v312 = v308 + 144;
        v313 = *(unsigned __int8 *)(v308 + 112);
        while ((unsigned __int8 *)v312 != v307)
        {
          v314 = (unsigned __int8 *)v312;
          v308 += 144;
          if (*(unsigned __int8 *)(v312 + 112) != v313
            || *(unsigned __int8 *)(v312 + 113) != v309
            || *(_DWORD *)(v312 + 116) != v310)
          {
            goto LABEL_552;
          }
          v312 += 144;
          if (*((_DWORD *)v314 + 30) != v311)
            goto LABEL_553;
        }
        v314 = v307;
      }
LABEL_553:
      v640 = v314;
      v637 = v307;
      v638 = v307;
      v636 = v307;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v315 = *(_QWORD *)(a1 + 392);
      v316 = *(_QWORD *)(v315 + 112);
      v317 = *(_QWORD *)(v315 + 120);
      if (v316 != v317)
      {
        while (*(_WORD *)v316 != 2)
        {
          v316 += 112;
          if (v316 == v317)
          {
            v316 = v317;
            break;
          }
        }
      }
      v318 = *(uint64_t **)(v316 + 104);
      v320 = *v318;
      v319 = (unsigned __int8 *)v318[1];
      v639 = (unsigned __int8 *)v320;
      v641 = v319;
      if ((unsigned __int8 *)v320 == v319)
      {
LABEL_565:
        v326 = (unsigned __int8 *)v320;
      }
      else
      {
        v321 = *(unsigned __int8 *)(v320 + 113);
        v322 = *(_DWORD *)(v320 + 116);
        v323 = *(_DWORD *)(v320 + 120);
        v324 = v320 + 144;
        v325 = *(unsigned __int8 *)(v320 + 112);
        while ((unsigned __int8 *)v324 != v319)
        {
          v326 = (unsigned __int8 *)v324;
          v320 += 144;
          if (*(unsigned __int8 *)(v324 + 112) != v325
            || *(unsigned __int8 *)(v324 + 113) != v321
            || *(_DWORD *)(v324 + 116) != v322)
          {
            goto LABEL_565;
          }
          v324 += 144;
          if (*((_DWORD *)v326 + 30) != v323)
            goto LABEL_566;
        }
        v326 = v319;
      }
LABEL_566:
      v640 = v326;
      v637 = v319;
      v638 = v319;
      v636 = v319;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v327 = *(_QWORD *)(a1 + 392);
      v328 = *(_QWORD *)(v327 + 112);
      v329 = *(_QWORD *)(v327 + 120);
      if (v328 != v329)
      {
        while (*(_WORD *)v328 != 3)
        {
          v328 += 112;
          if (v328 == v329)
          {
            v328 = v329;
            break;
          }
        }
      }
      v330 = *(uint64_t **)(v328 + 104);
      v332 = *v330;
      v331 = (unsigned __int8 *)v330[1];
      v639 = (unsigned __int8 *)v332;
      v641 = v331;
      if ((unsigned __int8 *)v332 == v331)
      {
LABEL_578:
        v338 = (unsigned __int8 *)v332;
      }
      else
      {
        v333 = *(unsigned __int8 *)(v332 + 113);
        v334 = *(_DWORD *)(v332 + 116);
        v335 = *(_DWORD *)(v332 + 120);
        v336 = v332 + 144;
        v337 = *(unsigned __int8 *)(v332 + 112);
        while ((unsigned __int8 *)v336 != v331)
        {
          v338 = (unsigned __int8 *)v336;
          v332 += 144;
          if (*(unsigned __int8 *)(v336 + 112) != v337
            || *(unsigned __int8 *)(v336 + 113) != v333
            || *(_DWORD *)(v336 + 116) != v334)
          {
            goto LABEL_578;
          }
          v336 += 144;
          if (*((_DWORD *)v338 + 30) != v335)
            goto LABEL_579;
        }
        v338 = v331;
      }
LABEL_579:
      v640 = v338;
      v637 = v331;
      v638 = v331;
      v636 = v331;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v339 = *(_QWORD *)(a1 + 392);
      v340 = *(_QWORD *)(v339 + 112);
      v341 = *(_QWORD *)(v339 + 120);
      if (v340 != v341)
      {
        while (*(_WORD *)v340 != 4)
        {
          v340 += 112;
          if (v340 == v341)
          {
            v340 = v341;
            break;
          }
        }
      }
      v342 = *(uint64_t **)(v340 + 104);
      v344 = *v342;
      v343 = (unsigned __int8 *)v342[1];
      v639 = (unsigned __int8 *)v344;
      v641 = v343;
      if ((unsigned __int8 *)v344 == v343)
      {
LABEL_591:
        v350 = (unsigned __int8 *)v344;
      }
      else
      {
        v345 = *(unsigned __int8 *)(v344 + 113);
        v346 = *(_DWORD *)(v344 + 116);
        v347 = *(_DWORD *)(v344 + 120);
        v348 = v344 + 144;
        v349 = *(unsigned __int8 *)(v344 + 112);
        while ((unsigned __int8 *)v348 != v343)
        {
          v350 = (unsigned __int8 *)v348;
          v344 += 144;
          if (*(unsigned __int8 *)(v348 + 112) != v349
            || *(unsigned __int8 *)(v348 + 113) != v345
            || *(_DWORD *)(v348 + 116) != v346)
          {
            goto LABEL_591;
          }
          v348 += 144;
          if (*((_DWORD *)v350 + 30) != v347)
            goto LABEL_592;
        }
        v350 = v343;
      }
LABEL_592:
      v640 = v350;
      v637 = v343;
      v638 = v343;
      v636 = v343;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v351 = *(_QWORD *)(a1 + 392);
      v352 = *(_QWORD *)(v351 + 112);
      v353 = *(_QWORD *)(v351 + 120);
      if (v352 != v353)
      {
        while (*(_WORD *)v352 != 5)
        {
          v352 += 112;
          if (v352 == v353)
          {
            v352 = v353;
            break;
          }
        }
      }
      v354 = *(uint64_t **)(v352 + 104);
      v356 = *v354;
      v355 = (unsigned __int8 *)v354[1];
      v639 = (unsigned __int8 *)v356;
      v641 = v355;
      if ((unsigned __int8 *)v356 == v355)
      {
LABEL_604:
        v362 = (unsigned __int8 *)v356;
      }
      else
      {
        v357 = *(unsigned __int8 *)(v356 + 113);
        v358 = *(_DWORD *)(v356 + 116);
        v359 = *(_DWORD *)(v356 + 120);
        v360 = v356 + 144;
        v361 = *(unsigned __int8 *)(v356 + 112);
        while ((unsigned __int8 *)v360 != v355)
        {
          v362 = (unsigned __int8 *)v360;
          v356 += 144;
          if (*(unsigned __int8 *)(v360 + 112) != v361
            || *(unsigned __int8 *)(v360 + 113) != v357
            || *(_DWORD *)(v360 + 116) != v358)
          {
            goto LABEL_604;
          }
          v360 += 144;
          if (*((_DWORD *)v362 + 30) != v359)
            goto LABEL_605;
        }
        v362 = v355;
      }
LABEL_605:
      v640 = v362;
      v637 = v355;
      v638 = v355;
      v636 = v355;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v363 = *(_QWORD *)(a1 + 392);
      v364 = *(_QWORD *)(v363 + 112);
      v365 = *(_QWORD *)(v363 + 120);
      if (v364 != v365)
      {
        while (*(_WORD *)v364 != 6)
        {
          v364 += 112;
          if (v364 == v365)
          {
            v364 = v365;
            break;
          }
        }
      }
      v366 = *(uint64_t **)(v364 + 104);
      v368 = *v366;
      v367 = (unsigned __int8 *)v366[1];
      v639 = (unsigned __int8 *)v368;
      v641 = v367;
      if ((unsigned __int8 *)v368 == v367)
      {
LABEL_617:
        v374 = (unsigned __int8 *)v368;
      }
      else
      {
        v369 = *(unsigned __int8 *)(v368 + 113);
        v370 = *(_DWORD *)(v368 + 116);
        v371 = *(_DWORD *)(v368 + 120);
        v372 = v368 + 144;
        v373 = *(unsigned __int8 *)(v368 + 112);
        while ((unsigned __int8 *)v372 != v367)
        {
          v374 = (unsigned __int8 *)v372;
          v368 += 144;
          if (*(unsigned __int8 *)(v372 + 112) != v373
            || *(unsigned __int8 *)(v372 + 113) != v369
            || *(_DWORD *)(v372 + 116) != v370)
          {
            goto LABEL_617;
          }
          v372 += 144;
          if (*((_DWORD *)v374 + 30) != v371)
            goto LABEL_618;
        }
        v374 = v367;
      }
LABEL_618:
      v640 = v374;
      v637 = v367;
      v638 = v367;
      v636 = v367;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v375 = *(_QWORD *)(a1 + 392);
      v376 = *(_QWORD *)(v375 + 112);
      v377 = *(_QWORD *)(v375 + 120);
      if (v376 != v377)
      {
        while (*(_WORD *)v376 != 7)
        {
          v376 += 112;
          if (v376 == v377)
          {
            v376 = v377;
            break;
          }
        }
      }
      v378 = *(uint64_t **)(v376 + 104);
      v380 = *v378;
      v379 = (unsigned __int8 *)v378[1];
      v639 = (unsigned __int8 *)v380;
      v641 = v379;
      if ((unsigned __int8 *)v380 == v379)
      {
LABEL_630:
        v386 = (unsigned __int8 *)v380;
      }
      else
      {
        v381 = *(unsigned __int8 *)(v380 + 113);
        v382 = *(_DWORD *)(v380 + 116);
        v383 = *(_DWORD *)(v380 + 120);
        v384 = v380 + 144;
        v385 = *(unsigned __int8 *)(v380 + 112);
        while ((unsigned __int8 *)v384 != v379)
        {
          v386 = (unsigned __int8 *)v384;
          v380 += 144;
          if (*(unsigned __int8 *)(v384 + 112) != v385
            || *(unsigned __int8 *)(v384 + 113) != v381
            || *(_DWORD *)(v384 + 116) != v382)
          {
            goto LABEL_630;
          }
          v384 += 144;
          if (*((_DWORD *)v386 + 30) != v383)
            goto LABEL_631;
        }
        v386 = v379;
      }
LABEL_631:
      v640 = v386;
      v637 = v379;
      v638 = v379;
      v636 = v379;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      v387 = *(_QWORD *)(a1 + 392);
      v388 = *(_QWORD *)(v387 + 112);
      v389 = *(_QWORD *)(v387 + 120);
      if (v388 != v389)
      {
        while (*(_WORD *)v388 != 8)
        {
          v388 += 112;
          if (v388 == v389)
          {
            v388 = v389;
            break;
          }
        }
      }
      v390 = *(uint64_t **)(v388 + 104);
      v392 = *v390;
      v391 = (unsigned __int8 *)v390[1];
      v639 = (unsigned __int8 *)v392;
      v641 = v391;
      if ((unsigned __int8 *)v392 == v391)
      {
LABEL_643:
        v398 = (unsigned __int8 *)v392;
      }
      else
      {
        v393 = *(unsigned __int8 *)(v392 + 113);
        v394 = *(_DWORD *)(v392 + 116);
        v395 = *(_DWORD *)(v392 + 120);
        v396 = v392 + 144;
        v397 = *(unsigned __int8 *)(v392 + 112);
        while ((unsigned __int8 *)v396 != v391)
        {
          v398 = (unsigned __int8 *)v396;
          v392 += 144;
          if (*(unsigned __int8 *)(v396 + 112) != v397
            || *(unsigned __int8 *)(v396 + 113) != v393
            || *(_DWORD *)(v396 + 116) != v394)
          {
            goto LABEL_643;
          }
          v396 += 144;
          if (*((_DWORD *)v398 + 30) != v395)
            goto LABEL_644;
        }
        v398 = v391;
      }
LABEL_644:
      v640 = v398;
      v637 = v391;
      v638 = v391;
      v636 = v391;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v639, &v636, v256, v620);
      gdc::LayerDataManager::createDataRequests((uint64_t)v634, v620, (unsigned __int16 **)&md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, v256);
    }
  }
  v399 = *(_QWORD *)(a1 + 240);
  v623 = v271;
  if (v399 <= 0)
  {
    if (!*(_QWORD *)(a1 + 376))
      goto LABEL_707;
    v408 = (_QWORD *)(a1 + 376);
    v413 = *(_QWORD **)(a1 + 368);
    if (v413)
    {
      do
      {
        v414 = (_QWORD *)*v413;
        operator delete(v413);
        v413 = v414;
      }
      while (v414);
    }
    *(_QWORD *)(a1 + 368) = 0;
    v415 = *(_QWORD *)(a1 + 360);
    if (v415)
    {
      for (i16 = 0; i16 != v415; ++i16)
        *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * i16) = 0;
    }
    goto LABEL_706;
  }
  v400 = *(_QWORD *)(a1 + 256);
  if (v400 == 0x7FFFFFFFFFFFFFFFLL && *(unsigned __int8 *)(a1 + 248) == v271)
  {
    md::PendingSceneLogic::_prefetchData(a1, v630, v256);
    goto LABEL_707;
  }
  v401 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24);
  if (*(_QWORD *)(v626 + 5584))
    v402 = *(_QWORD *)(v626 + 5584);
  else
    v402 = v626;
  v404 = *(_QWORD *)(v401 + 8);
  v403 = *(_QWORD *)(v401 + 16);
  if (v404 != v403)
  {
    v405 = v404 + 24;
    do
    {
      v406 = *(_QWORD *)(*(_QWORD *)(v405 - 16) + 64);
      if (v406)
        v407 = 1;
      else
        v407 = v405 == v403;
      v405 += 24;
    }
    while (!v407);
    if (v406)
    {
      (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 272) + 24))(*(_QWORD *)(a1 + 272), 0, (double)v399 * 0.001);
      *(_QWORD *)(a1 + 256) = v256;
      if (!*(_QWORD *)(a1 + 376))
        goto LABEL_707;
      v408 = (_QWORD *)(a1 + 376);
      v409 = *(_QWORD **)(a1 + 368);
      if (v409)
      {
        do
        {
          v410 = (_QWORD *)*v409;
          operator delete(v409);
          v409 = v410;
        }
        while (v410);
      }
      *(_QWORD *)(a1 + 368) = 0;
      v411 = *(_QWORD *)(a1 + 360);
      if (v411)
      {
        for (i17 = 0; i17 != v411; ++i17)
          *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * i17) = 0;
      }
LABEL_706:
      *v408 = 0;
      goto LABEL_707;
    }
  }
  if ((v271 & 1) == 0)
  {
    (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 272) + 24))(*(_QWORD *)(a1 + 272), 0, (double)v399 * 0.001);
    *(_QWORD *)(a1 + 256) = v256;
    if (!*(_QWORD *)(a1 + 376))
      goto LABEL_707;
    v408 = (_QWORD *)(a1 + 376);
    v437 = *(_QWORD **)(a1 + 368);
    if (v437)
    {
      do
      {
        v438 = (_QWORD *)*v437;
        operator delete(v437);
        v437 = v438;
      }
      while (v438);
    }
    *(_QWORD *)(a1 + 368) = 0;
    v439 = *(_QWORD *)(a1 + 360);
    if (v439)
    {
      for (i18 = 0; i18 != v439; ++i18)
        *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * i18) = 0;
    }
    goto LABEL_706;
  }
  if (v256 - v399 >= v400)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 40))(*(_QWORD *)(a1 + 272));
    *(_QWORD *)(a1 + 256) = 0x7FFFFFFFFFFFFFFFLL;
    v417 = vcvtms_s32_f32(*(float *)(v626 + 3076));
    if (v417 <= 1)
      v418 = 1;
    else
      v418 = v417;
    v419 = (double)(1 << v418);
    v420 = *(_DWORD *)(a1 + 252);
    v421 = (double)v420;
    v422 = floor(v419 - *(double *)(v402 + 504) * v419) - (double)v420;
    v423 = (1 << v418) - 1;
    if (((int)v422 & ~((int)v422 >> 31)) >= v423)
      v424 = (1 << v418) - 1;
    else
      v424 = (int)v422 & ~((int)v422 >> 31);
    v425 = 2 * v420;
    v426 = v424 + 2 * v420;
    if (v426 <= v424)
      v426 = v424;
    if (v426 >= v423)
      v427 = (1 << v418) - 1;
    else
      v427 = v426;
    v428 = *(_QWORD **)(a1 + 392);
    v430 = v428[14];
    v429 = v428[15];
    if (v430 != v429)
    {
      while (*(_WORD *)v430)
      {
        v430 += 112;
        if (v430 == v429)
        {
          v430 = v428[15];
          break;
        }
      }
    }
    v431 = v428[20];
    v432 = v428[21];
    if (v431 != v432)
    {
      while (*(_WORD *)v431)
      {
        v431 += 112;
        if (v431 == v432)
        {
          v431 = v432;
          break;
        }
      }
    }
    v433 = *(double *)(v402 + 496);
    v434 = a1 + 352;
    if (a1 + 352 != v431 + 64)
    {
      *(_DWORD *)(a1 + 384) = *(_DWORD *)(v431 + 96);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)(a1 + 352), *(uint64_t **)(v431 + 80));
    }
    v435 = (int)(floor(v433 * v419) - v421);
    v436 = v425 + v435;
    if (v425 + v435 >= v435 && v424 <= v427)
    {
      v616 = v427 + 1;
      do
      {
        v617 = v424;
        do
        {
          buf[0] = -1;
          buf[1] = v418;
          *(_DWORD *)&buf[4] = v617;
          *(_DWORD *)&buf[8] = v435;
          if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((_QWORD *)(v430 + 64), buf))std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile>(v434, buf, (uint64_t)buf);
          ++v617;
        }
        while (v616 != v617);
        v196 = v435++ == v436;
      }
      while (!v196);
    }
    a1 = v629;
    md::PendingSceneLogic::_prefetchData(v629, v630, v256);
  }
LABEL_707:
  v441 = *(_QWORD *)(a1 + 128);
  v442 = *(unsigned __int16 **)(v441 + 168);
  v625 = *(unsigned __int16 **)(v441 + 176);
  if (v442 != v625)
  {
    while (1)
    {
      v443 = *(unsigned __int16 **)(a1 + 280);
      v444 = *(unsigned __int16 **)(a1 + 288);
      v627 = v442;
      if (v443 != v444)
      {
        v445 = *v442;
        while (v445 != *v443)
        {
          v443 += 16;
          if (v443 == v444)
            goto LABEL_709;
        }
      }
      if (v443 != v444)
      {
        v446 = *((_QWORD *)v443 + 2);
        v628 = v443 + 4;
        if ((unsigned __int16 *)v446 != v443 + 4)
          break;
      }
LABEL_709:
      v442 = v627 + 1;
      if (v627 + 1 == v625)
        goto LABEL_778;
    }
    while (1)
    {
      v631 = v446;
      v633 = *(_QWORD *)(v446 + 16);
      v447 = *(uint64_t ***)(v633 + 32);
      if (v447)
        break;
LABEL_718:
      a1 = v629;
      v446 = *(_QWORD *)(v631 + 8);
      if ((unsigned __int16 *)v446 == v628)
        goto LABEL_709;
    }
    while (1)
    {
      v448 = (unsigned __int16 *)v634[1];
      v449 = (unsigned __int16 *)v634[2];
      if (v448 != v449)
      {
        while (*((unsigned __int16 *)v447 + 8) != *v448)
        {
          v448 += 12;
          if (v448 == v449)
            goto LABEL_721;
        }
      }
      if (v448 != v449)
      {
        v450 = (_QWORD *)*((_QWORD *)v448 + 1);
        v451 = (unsigned __int8 *)v450[31];
        v452 = v450[32];
        if (v451 != (unsigned __int8 *)v452)
          break;
      }
LABEL_721:
      v447 = (uint64_t **)*v447;
      if (!v447)
        goto LABEL_718;
    }
    v453 = (_QWORD *)(*(_QWORD *)(v633 + 8) + 48);
    while (1)
    {
      while (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v453, v451))
      {
        v451 += 208;
        if (v451 == (unsigned __int8 *)v452)
          goto LABEL_721;
      }
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v454 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str((std::string *)buf, (unsigned __int16 *)v451);
        if (buf[23] >= 0)
          v455 = buf;
        else
          v455 = *(_BYTE **)buf;
        gdc::ResourceKey::keysInt32Str((std::string *)&v648, v451 + 112);
        v456 = &v648;
        if (SHIBYTE(v649[0]) < 0)
          v456 = (__int128 *)v648;
        *(_DWORD *)v656 = 136315394;
        v657 = v455;
        v658 = 2080;
        v659 = v456;
        _os_log_impl(&dword_19F029000, v454, OS_LOG_TYPE_DEBUG, "cleaning up extended key: %s (resource:%s) ", v656, 0x16u);
        if (SHIBYTE(v649[0]) < 0)
        {
          operator delete((void *)v648);
          if ((buf[23] & 0x80000000) == 0)
            goto LABEL_743;
        }
        else if ((buf[23] & 0x80000000) == 0)
        {
          goto LABEL_743;
        }
        operator delete(*(void **)buf);
      }
LABEL_743:
      v457 = std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(v450[34] + 8, v451 + 112, (uint64_t)(v451 + 112));
      --v457[15];
      v458 = (uint64_t)(v451 + 208);
      v459 = (unsigned __int8 *)v450[32];
      if (v451 + 208 != v459)
      {
        v460 = 0;
        v452 = (uint64_t)v451;
        while (1)
        {
          gdc::LayerDataRequestKey::operator=(v452, v458);
          *(_QWORD *)(v452 + 112) = *(_QWORD *)(v458 + 112);
          v461 = *(void **)(v452 + 120);
          if (v461 != *(void **)(v452 + 136))
            free(v461);
          v462 = (_BYTE *)(v452 + 152);
          *(_QWORD *)(v452 + 136) = v452 + 152;
          v463 = *(char **)(v458 + 120);
          if (v463 == *(char **)(v458 + 136))
          {
            *(_QWORD *)(v452 + 120) = v462;
            v464 = *(char **)(v458 + 128);
            v465 = v464 - v463;
            *(_QWORD *)(v452 + 128) = &v462[v464 - v463];
            if (v464 != v463)
            {
              if (v465 >= 8 && (unint64_t)(&v451[208 * v460 + 152] - (unsigned __int8 *)v463) >= 0x20)
              {
                if (v465 < 0x20)
                {
                  v466 = 0;
                  goto LABEL_759;
                }
                v467 = 0;
                v466 = v465 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v468 = v452 + v467;
                  v469 = *(_OWORD *)&v463[v467 + 16];
                  *(_OWORD *)(v468 + 152) = *(_OWORD *)&v463[v467];
                  *(_OWORD *)(v468 + 168) = v469;
                  v467 += 32;
                }
                while (v466 != v467);
                if (v465 == v466)
                  goto LABEL_746;
                if ((v465 & 0x18) != 0)
                {
LABEL_759:
                  v470 = v465 & 0xFFFFFFFFFFFFFFF8;
                  v462 += v465 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    *(_QWORD *)(v452 + v466 + 152) = *(_QWORD *)&v463[v466];
                    v466 += 8;
                  }
                  while (v470 != v466);
                  if (v465 == v470)
                    goto LABEL_746;
                  v463 += v470;
                }
                else
                {
                  v463 += v466;
                  v462 += v466;
                }
              }
              do
              {
                v471 = *v463++;
                *v462++ = v471;
              }
              while (v463 != v464);
            }
          }
          else
          {
            *(_QWORD *)(v452 + 120) = v463;
            *(_QWORD *)(v452 + 128) = *(_QWORD *)(v458 + 128);
            *(_OWORD *)(v458 + 120) = 0u;
            *(_OWORD *)(v458 + 136) = 0u;
          }
LABEL_746:
          *(_QWORD *)(v452 + 144) = *(_QWORD *)(v458 + 144);
          *(_QWORD *)(v452 + 184) = *(_QWORD *)(v458 + 184);
          *(_OWORD *)(v452 + 192) = *(_OWORD *)(v458 + 192);
          v458 += 208;
          v452 += 208;
          ++v460;
          if ((unsigned __int8 *)v458 == v459)
          {
            v458 = v450[32];
            goto LABEL_769;
          }
        }
      }
      v452 = (uint64_t)v451;
LABEL_769:
      while (v458 != v452)
      {
        v472 = *(void **)(v458 - 88);
        if (v472 != *(void **)(v458 - 72))
          free(v472);
        if (*(_BYTE *)(v458 - 112))
          *(_BYTE *)(v458 - 112) = 0;
        v473 = *(void **)(v458 - 192);
        if (v473 != *(void **)(v458 - 176))
          free(v473);
        v458 -= 208;
      }
      v450[32] = v452;
      if (v451 == (unsigned __int8 *)v452)
        goto LABEL_721;
    }
  }
LABEL_778:
  v474 = *(_QWORD *)(a1 + 280);
  v475 = *(_QWORD *)(a1 + 288);
  if (v474 != v475)
  {
    do
    {
      for (i19 = *(_QWORD *)(v474 + 16); i19 != v474 + 8; i19 = *(_QWORD *)(i19 + 8))
      {
        for (i20 = *(uint64_t ***)(*(_QWORD *)(i19 + 16) + 32); i20; i20 = (uint64_t **)*i20)
        {
          v480 = (unsigned __int16 *)v634[1];
          v481 = (unsigned __int16 *)v634[2];
          if (v480 != v481)
          {
            while (*((unsigned __int16 *)i20 + 8) != *v480)
            {
              v480 += 12;
              if (v480 == v481)
                goto LABEL_787;
            }
          }
          if (v480 != v481)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v480 + 1) + 40))(*((_QWORD *)v480 + 1), *(_QWORD *)(*(_QWORD *)(i19 + 16) + 8));
LABEL_787:
          ;
        }
      }
      v474 += 32;
    }
    while (v474 != v475);
    v591 = *(_QWORD *)(a1 + 280);
    v592 = *(_QWORD *)(a1 + 288);
    while (v591 != v592)
    {
      for (i21 = *(_QWORD *)(v591 + 16); i21 != v591 + 8; i21 = *(_QWORD *)(i21 + 8))
      {
        for (i22 = *(uint64_t ***)(*(_QWORD *)(i21 + 16) + 32); i22; i22 = (uint64_t **)*i22)
        {
          v595 = (unsigned __int16 *)v634[1];
          v596 = (unsigned __int16 *)v634[2];
          if (v595 != v596)
          {
            while (*((unsigned __int16 *)i22 + 8) != *v595)
            {
              v595 += 12;
              if (v595 == v596)
                goto LABEL_938;
            }
          }
          if (v595 != v596)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v595 + 1) + 48))(*((_QWORD *)v595 + 1), *(_QWORD *)(i21 + 16));
LABEL_938:
          ;
        }
      }
      v591 += 32;
    }
  }
  if (v618 < 3)
  {
    v476 = *(_QWORD *)(a1 + 304);
    v477 = *(_QWORD *)(a1 + 312);
    while (v476 != v477)
    {
      for (i23 = *(_QWORD *)(v476 + 16); i23 != v476 + 8; i23 = *(_QWORD *)(i23 + 8))
      {
        for (i24 = *(uint64_t ***)(*(_QWORD *)(i23 + 16) + 32); i24; i24 = (uint64_t **)*i24)
        {
          v484 = (unsigned __int16 *)v634[1];
          v485 = (unsigned __int16 *)v634[2];
          if (v484 != v485)
          {
            while (*((unsigned __int16 *)i24 + 8) != *v484)
            {
              v484 += 12;
              if (v484 == v485)
                goto LABEL_801;
            }
          }
          if (v484 != v485)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v484 + 1) + 40))(*((_QWORD *)v484 + 1), *(_QWORD *)(*(_QWORD *)(i23 + 16) + 8));
LABEL_801:
          ;
        }
      }
      v476 += 32;
    }
  }
  *(_BYTE *)(a1 + 248) = v623;
  v486 = *(_QWORD *)(a1 + 392);
  v487 = *(_QWORD *)(v486 + 112);
  v488 = *(_QWORD *)(v486 + 120);
  if (v487 != v488)
  {
    while (*(_WORD *)v487)
    {
      v487 += 112;
      if (v487 == v488)
      {
        v487 = v488;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v487 + 104));
  v489 = *(_QWORD *)(a1 + 392);
  v490 = *(_QWORD *)(v489 + 136);
  v491 = *(_QWORD *)(v489 + 144);
  if (v490 != v491)
  {
    while (*(_WORD *)v490)
    {
      v490 += 112;
      if (v490 == v491)
      {
        v490 = v491;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v490 + 104));
  v492 = *(_QWORD *)(a1 + 392);
  v493 = *(_QWORD *)(v492 + 160);
  v494 = *(_QWORD *)(v492 + 168);
  if (v493 != v494)
  {
    while (*(_WORD *)v493)
    {
      v493 += 112;
      if (v493 == v494)
      {
        v493 = v494;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v493 + 104));
  v495 = *(_QWORD *)(a1 + 392);
  v496 = *(_QWORD *)(v495 + 112);
  v497 = *(_QWORD *)(v495 + 120);
  if (v496 != v497)
  {
    while (*(_WORD *)v496 != 1)
    {
      v496 += 112;
      if (v496 == v497)
      {
        v496 = v497;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v496 + 104));
  v498 = *(_QWORD *)(a1 + 392);
  v499 = *(_QWORD *)(v498 + 136);
  v500 = *(_QWORD *)(v498 + 144);
  if (v499 != v500)
  {
    while (*(_WORD *)v499 != 1)
    {
      v499 += 112;
      if (v499 == v500)
      {
        v499 = v500;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v499 + 104));
  v501 = *(_QWORD *)(a1 + 392);
  v502 = *(_QWORD *)(v501 + 160);
  v503 = *(_QWORD *)(v501 + 168);
  if (v502 != v503)
  {
    while (*(_WORD *)v502 != 1)
    {
      v502 += 112;
      if (v502 == v503)
      {
        v502 = v503;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v502 + 104));
  v504 = *(_QWORD *)(a1 + 392);
  v505 = *(_QWORD *)(v504 + 112);
  v506 = *(_QWORD *)(v504 + 120);
  if (v505 != v506)
  {
    while (*(_WORD *)v505 != 2)
    {
      v505 += 112;
      if (v505 == v506)
      {
        v505 = v506;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v505 + 104));
  v507 = *(_QWORD *)(a1 + 392);
  v508 = *(_QWORD *)(v507 + 136);
  v509 = *(_QWORD *)(v507 + 144);
  if (v508 != v509)
  {
    while (*(_WORD *)v508 != 2)
    {
      v508 += 112;
      if (v508 == v509)
      {
        v508 = v509;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v508 + 104));
  v510 = *(_QWORD *)(a1 + 392);
  v511 = *(_QWORD *)(v510 + 160);
  v512 = *(_QWORD *)(v510 + 168);
  if (v511 != v512)
  {
    while (*(_WORD *)v511 != 2)
    {
      v511 += 112;
      if (v511 == v512)
      {
        v511 = v512;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v511 + 104));
  v513 = *(_QWORD *)(a1 + 392);
  v514 = *(_QWORD *)(v513 + 112);
  v515 = *(_QWORD *)(v513 + 120);
  if (v514 != v515)
  {
    while (*(_WORD *)v514 != 3)
    {
      v514 += 112;
      if (v514 == v515)
      {
        v514 = v515;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v514 + 104));
  v516 = *(_QWORD *)(a1 + 392);
  v517 = *(_QWORD *)(v516 + 136);
  v518 = *(_QWORD *)(v516 + 144);
  if (v517 != v518)
  {
    while (*(_WORD *)v517 != 3)
    {
      v517 += 112;
      if (v517 == v518)
      {
        v517 = v518;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v517 + 104));
  v519 = *(_QWORD *)(a1 + 392);
  v520 = *(_QWORD *)(v519 + 160);
  v521 = *(_QWORD *)(v519 + 168);
  if (v520 != v521)
  {
    while (*(_WORD *)v520 != 3)
    {
      v520 += 112;
      if (v520 == v521)
      {
        v520 = v521;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v520 + 104));
  v522 = *(_QWORD *)(a1 + 392);
  v523 = *(_QWORD *)(v522 + 112);
  v524 = *(_QWORD *)(v522 + 120);
  if (v523 != v524)
  {
    while (*(_WORD *)v523 != 4)
    {
      v523 += 112;
      if (v523 == v524)
      {
        v523 = v524;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v523 + 104));
  v525 = *(_QWORD *)(a1 + 392);
  v526 = *(_QWORD *)(v525 + 136);
  v527 = *(_QWORD *)(v525 + 144);
  if (v526 != v527)
  {
    while (*(_WORD *)v526 != 4)
    {
      v526 += 112;
      if (v526 == v527)
      {
        v526 = v527;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v526 + 104));
  v528 = *(_QWORD *)(a1 + 392);
  v529 = *(_QWORD *)(v528 + 160);
  v530 = *(_QWORD *)(v528 + 168);
  if (v529 != v530)
  {
    while (*(_WORD *)v529 != 4)
    {
      v529 += 112;
      if (v529 == v530)
      {
        v529 = v530;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v529 + 104));
  v531 = *(_QWORD *)(a1 + 392);
  v532 = *(_QWORD *)(v531 + 112);
  v533 = *(_QWORD *)(v531 + 120);
  if (v532 != v533)
  {
    while (*(_WORD *)v532 != 5)
    {
      v532 += 112;
      if (v532 == v533)
      {
        v532 = v533;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v532 + 104));
  v534 = *(_QWORD *)(a1 + 392);
  v535 = *(_QWORD *)(v534 + 136);
  v536 = *(_QWORD *)(v534 + 144);
  if (v535 != v536)
  {
    while (*(_WORD *)v535 != 5)
    {
      v535 += 112;
      if (v535 == v536)
      {
        v535 = v536;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v535 + 104));
  v537 = *(_QWORD *)(a1 + 392);
  v538 = *(_QWORD *)(v537 + 160);
  v539 = *(_QWORD *)(v537 + 168);
  if (v538 != v539)
  {
    while (*(_WORD *)v538 != 5)
    {
      v538 += 112;
      if (v538 == v539)
      {
        v538 = v539;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v538 + 104));
  v540 = *(_QWORD *)(a1 + 392);
  v541 = *(_QWORD *)(v540 + 112);
  v542 = *(_QWORD *)(v540 + 120);
  if (v541 != v542)
  {
    while (*(_WORD *)v541 != 6)
    {
      v541 += 112;
      if (v541 == v542)
      {
        v541 = v542;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v541 + 104));
  v543 = *(_QWORD *)(a1 + 392);
  v544 = *(_QWORD *)(v543 + 136);
  v545 = *(_QWORD *)(v543 + 144);
  if (v544 != v545)
  {
    while (*(_WORD *)v544 != 6)
    {
      v544 += 112;
      if (v544 == v545)
      {
        v544 = v545;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v544 + 104));
  v546 = *(_QWORD *)(a1 + 392);
  v547 = *(_QWORD *)(v546 + 160);
  v548 = *(_QWORD *)(v546 + 168);
  if (v547 != v548)
  {
    while (*(_WORD *)v547 != 6)
    {
      v547 += 112;
      if (v547 == v548)
      {
        v547 = v548;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v547 + 104));
  v549 = *(_QWORD *)(a1 + 392);
  v550 = *(_QWORD *)(v549 + 112);
  v551 = *(_QWORD *)(v549 + 120);
  if (v550 != v551)
  {
    while (*(_WORD *)v550 != 7)
    {
      v550 += 112;
      if (v550 == v551)
      {
        v550 = v551;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v550 + 104));
  v552 = *(_QWORD *)(a1 + 392);
  v553 = *(_QWORD *)(v552 + 136);
  v554 = *(_QWORD *)(v552 + 144);
  if (v553 != v554)
  {
    while (*(_WORD *)v553 != 7)
    {
      v553 += 112;
      if (v553 == v554)
      {
        v553 = v554;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v553 + 104));
  v555 = *(_QWORD *)(a1 + 392);
  v556 = *(_QWORD *)(v555 + 160);
  v557 = *(_QWORD *)(v555 + 168);
  if (v556 != v557)
  {
    while (*(_WORD *)v556 != 7)
    {
      v556 += 112;
      if (v556 == v557)
      {
        v556 = v557;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v556 + 104));
  v558 = *(_QWORD *)(a1 + 392);
  v559 = *(_QWORD *)(v558 + 112);
  v560 = *(_QWORD *)(v558 + 120);
  if (v559 != v560)
  {
    while (*(_WORD *)v559 != 8)
    {
      v559 += 112;
      if (v559 == v560)
      {
        v559 = v560;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v559 + 104));
  v561 = *(_QWORD *)(a1 + 392);
  v562 = *(_QWORD *)(v561 + 136);
  v563 = *(_QWORD *)(v561 + 144);
  if (v562 != v563)
  {
    while (*(_WORD *)v562 != 8)
    {
      v562 += 112;
      if (v562 == v563)
      {
        v562 = v563;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v562 + 104));
  v564 = *(_QWORD *)(a1 + 392);
  v565 = *(_QWORD *)(v564 + 160);
  v566 = *(_QWORD *)(v564 + 168);
  if (v565 != v566)
  {
    while (*(_WORD *)v565 != 8)
    {
      v565 += 112;
      if (v565 == v566)
      {
        v565 = v566;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v565 + 104));
  md::SceneStateManager::updateTileSets(*(md::SceneStateManager **)(a1 + 392));
  v567 = *(__int128 **)(a1 + 144);
  v568 = *(__int128 **)(a1 + 152);
  if (v567 == v568)
  {
    v590 = 0;
  }
  else
  {
    do
    {
      if (*(_QWORD *)(v626 + 5584))
        v569 = *(_QWORD *)(v626 + 5584);
      else
        v569 = v626;
      v648 = *v567;
      v649[0] = 0;
      *(_OWORD *)&v649[1] = v567[1];
      v649[3] = 0;
      if (*(_BYTE *)(v569 + 3776))
      {
        gdc::CameraView::mercatorCameraView((gdc::CameraView *)buf, (const Camera *)v569);
      }
      else
      {
        buf[0] = *(_BYTE *)v569;
        *(_QWORD *)&buf[8] = *(_QWORD *)(v569 + 8);
        v570 = *(_OWORD *)(v569 + 32);
        *(_OWORD *)&buf[16] = *(_OWORD *)(v569 + 16);
        v661 = v570;
        v571 = *(_OWORD *)(v569 + 64);
        v662 = *(_OWORD *)(v569 + 48);
        v663 = v571;
        v573 = *(_OWORD *)(v569 + 96);
        v572 = *(_OWORD *)(v569 + 112);
        v574 = *(_OWORD *)(v569 + 80);
        v667 = *(_QWORD *)(v569 + 128);
        v665 = v573;
        v666 = v572;
        v664 = v574;
        v668 = *(_OWORD *)(v569 + 136);
        v575 = *(_OWORD *)(v569 + 152);
        v576 = *(_OWORD *)(v569 + 168);
        v577 = *(_OWORD *)(v569 + 200);
        v671 = *(_OWORD *)(v569 + 184);
        v672 = v577;
        v669 = v575;
        v670 = v576;
        v578 = *(_OWORD *)(v569 + 216);
        v579 = *(_OWORD *)(v569 + 232);
        v580 = *(_OWORD *)(v569 + 264);
        v675 = *(_OWORD *)(v569 + 248);
        v676 = v580;
        v673 = v578;
        v674 = v579;
        v581 = *(_OWORD *)(v569 + 280);
        v582 = *(_OWORD *)(v569 + 296);
        v583 = *(_OWORD *)(v569 + 312);
        v680 = *(_QWORD *)(v569 + 328);
        v678 = v582;
        v679 = v583;
        v677 = v581;
        v681 = 0;
        if (*(_BYTE *)(v569 + 336))
        {
          v682 = *(_QWORD *)(v569 + 344);
          v681 = 1;
        }
        v683 = 0;
        if (*(_BYTE *)(v569 + 352))
        {
          v684 = *(_QWORD *)(v569 + 360);
          v683 = 1;
        }
        v584 = *(_OWORD *)(v569 + 384);
        v685 = *(_OWORD *)(v569 + 368);
        v686 = v584;
        v585 = *(_OWORD *)(v569 + 400);
        v586 = *(_OWORD *)(v569 + 416);
        v587 = *(_OWORD *)(v569 + 432);
        v690 = *(_DWORD *)(v569 + 448);
        v688 = v586;
        v689 = v587;
        v687 = v585;
        v691 = *(_QWORD *)(v569 + 456);
        v588 = *(_OWORD *)(v569 + 480);
        v692 = *(_OWORD *)(v569 + 464);
        v693 = v588;
        geo::View<double>::View((uint64_t)v694, (__int128 *)(v569 + 496), (double *)(v569 + 552), (__int128 *)(v569 + 680), (_WORD *)(v569 + 952), *(_DWORD *)(v569 + 956), *(double *)(v569 + 936));
        v694[29] = *(_OWORD *)(v569 + 960);
        v695 = *(_QWORD *)(v569 + 976);
        memcpy(v696, (const void *)(v569 + 984), 0x180uLL);
      }
      v589 = geo::Intersect::encloses<double>(v696, (double *)&v648);
      v590 = v589 != 0;
      if (v589)
        break;
      v567 += 4;
    }
    while (v567 != v568);
  }
  v597 = *(_QWORD *)(v629 + 392);
  *(_BYTE *)(v597 + 280) = v590;
  if (v597 + 184 != v624)
  {
    v598 = *(_BYTE **)v624;
    v599 = (uint64_t)(*(_QWORD *)(v624 + 8) - *(_QWORD *)v624) >> 1;
    v600 = *(_QWORD *)(v597 + 184);
    v601 = (*(_QWORD *)(v597 + 192) - v600) >> 1;
    v602 = v599 >= v601;
    v603 = v599 - v601;
    if (v603 != 0 && v602)
    {
      std::vector<md::TileSelectionTileSetType>::__append(v597 + 184, v603);
      v598 = *(_BYTE **)v624;
    }
    else if (!v602)
    {
      *(_QWORD *)(v597 + 192) = v600 + 2 * v599;
    }
    v604 = *(_BYTE **)(v624 + 8);
    if (v604 != v598)
      memmove(*(void **)(v597 + 184), v598, v604 - v598);
  }
  md::SceneStateManager::updateMerged((md::SceneStateManager *)v597);
  v605 = *(_QWORD *)(v629 + 392);
  if (v605 + 208 != v624 + 24)
  {
    v606 = *(_BYTE **)(v624 + 24);
    v607 = (uint64_t)(*(_QWORD *)(v624 + 32) - (_QWORD)v606) >> 1;
    v608 = *(_QWORD *)(v605 + 208);
    v609 = (*(_QWORD *)(v605 + 216) - v608) >> 1;
    v610 = v607 >= v609;
    v611 = v607 - v609;
    if (v611 != 0 && v610)
    {
      std::vector<md::TileSelectionTileSetType>::__append(v605 + 208, v611);
      v606 = *(_BYTE **)(v624 + 24);
    }
    else if (!v610)
    {
      *(_QWORD *)(v605 + 216) = v608 + 2 * v607;
    }
    v612 = *(_BYTE **)(v624 + 32);
    if (v612 != v606)
      memmove(*(void **)(v605 + 208), v606, v612 - v606);
  }
  md::SceneStateManager::updateMerged((md::SceneStateManager *)v605);
  v613 = *(_QWORD *)(v629 + 392);
  if (v613 + 256 != a1 + 144)
  {
    std::vector<md::TileExclusionArea>::__assign_with_size[abi:nn180100]<md::TileExclusionArea*,md::TileExclusionArea*>((_QWORD *)(v613 + 256), *(char **)(v629 + 144), *(char **)(v629 + 152), (uint64_t)(*(_QWORD *)(v629 + 152) - *(_QWORD *)(v629 + 144)) >> 6);
    v613 = *(_QWORD *)(v629 + 392);
  }
  *(_WORD *)(v613 + 282) = *(_WORD *)(v624 + 130);
  *(_QWORD *)(v629 + 120) = a4;
  if (!v655)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_990;
  }
  (*(void (**)(_QWORD *))(*v655 + 48))(v655);
  result = v655;
  if (v655 == v654)
  {
    v615 = 4;
    result = v654;
  }
  else
  {
    if (!v655)
      return result;
    v615 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v615))();
}

void sub_19F55B8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a57);
  _Unwind_Resume(a1);
}

void md::PendingSceneLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;
  int v5;
  _QWORD *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;

  for (i = *(uint64_t **)(*(_QWORD *)a3 + 64); i; i = (uint64_t *)*i)
  {
    v5 = *((unsigned __int16 *)i + 8);
    v6 = *(_QWORD **)(a1 + 392);
    v7 = (unsigned __int16 *)v6[14];
    v8 = (unsigned __int16 *)v6[15];
    if (v7 != v8)
    {
      while (*v7 != v5)
      {
        v7 += 56;
        if (v7 == v8)
        {
          v7 = (unsigned __int16 *)v6[15];
          break;
        }
      }
    }
    *((_DWORD *)v7 + 14) = *((_DWORD *)i + 6);
    if (v7 + 28 != (unsigned __int16 *)(i + 3))
    {
      *((_DWORD *)v7 + 24) = *((_DWORD *)i + 16);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)v7 + 8, (uint64_t *)i[6]);
      v6 = *(_QWORD **)(a1 + 392);
    }
    v10 = (unsigned __int16 *)v6[17];
    v9 = (unsigned __int16 *)v6[18];
    if (v10 != v9)
    {
      while (*v10 != v5)
      {
        v10 += 56;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
    *((_DWORD *)v10 + 14) = *((_DWORD *)i + 18);
    if (v10 + 28 != (unsigned __int16 *)(i + 9))
    {
      *((_DWORD *)v10 + 24) = *((_DWORD *)i + 28);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)v10 + 8, (uint64_t *)i[12]);
    }
  }
}

uint64_t md::PendingSceneLogic::debugConsoleString@<X0>(md::LayoutContext *a1@<X3>, uint64_t a2@<X0>, md::PendingSceneLogic *a3@<X8>)
{
  return md::PendingSceneLogic::createDebugConsoleString(a3, a1, *(md::SceneContext **)(a2 + 128), a1);
}

uint64_t md::PendingSceneLogic::createDebugConsoleString(md::PendingSceneLogic *this, const md::LayoutContext *a2, md::SceneContext *a3, md::World *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int16 *i;
  unsigned __int16 *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  const char *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  int v33;
  BOOL v34;
  unsigned __int16 *v35;
  _QWORD *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  const char *v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  int v46;
  BOOL v47;
  unsigned __int16 *v48;
  _QWORD *v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  int v58;
  BOOL v59;
  unsigned __int16 *v60;
  const char *v61;
  _QWORD *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  BOOL v72;
  unsigned __int16 *v73;
  const char *v74;
  unsigned __int16 *v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  const char *v79;
  size_t v80;
  const char *v81;
  const char *v82;
  const char *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  size_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned __int16 *v95;
  uint64_t **v96;
  uint64_t v97;
  unsigned __int16 *v98;
  unsigned __int16 *v99;
  const char *v100;
  size_t v101;
  _QWORD *v102;
  _QWORD *v103;
  size_t v104;
  unint64_t v105;
  const void **v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  md::PendingSceneLogic *v110;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  int v116;
  uint64_t v117;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[93];
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[3];
  uint64_t v123;
  unint64_t v124;
  __int128 __p;
  __int128 v126;
  int v127;
  uint64_t v128[20];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v128[0] = MEMORY[0x1E0DE4FE0] + 64;
  v120 = v7;
  *(uint64_t *)((char *)&v120 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v120 + *(_QWORD *)(v120 - 24));
  std::ios_base::init(v9, &v121);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v120 = v5 + 24;
  v128[0] = v6;
  std::streambuf::basic_streambuf();
  v121 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v126 = 0u;
  v127 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n=== Tile Selection ===\n", 24);
  v11 = *(_BYTE **)(*(_QWORD *)a2 + 232);
  v10 = *(_BYTE **)(*(_QWORD *)a2 + 240);
  v12 = v10 - v11;
  if (v10 == v11)
  {
    v113 = 0;
    v114 = 0;
    v16 = 1;
  }
  else
  {
    if (v12 < 0)
      abort();
    v13 = (char *)operator new(v10 - v11);
    v14 = 2 * (v12 >> 1);
    v114 = (unsigned __int16 *)&v13[v14];
    memcpy(v13, v11, v12);
    v15 = (unsigned __int16 *)v13;
    v16 = v14 == 0;
    v113 = v15;
    if (v14)
    {
      do
      {
        v17 = *v15;
        v19 = *(unsigned __int16 **)(*(_QWORD *)a2 + 112);
        for (i = *(unsigned __int16 **)(*(_QWORD *)a2 + 120); v19 != i; v19 += 56)
        {
          if (*v19 == (_DWORD)v17)
            break;
        }
        v20 = "<Invalid>";
        if (v17 <= 8)
          v20 = off_1E42F6158[v17];
        v21 = strlen(v20);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v20, v21);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)": ", 2);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"\n", 1);
        ++v15;
      }
      while (v15 != v114);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n=== Scene State ===\n", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Required Layers: ", 17);
  v23 = *(_QWORD **)a2;
  v24 = *(unsigned __int16 **)(*(_QWORD *)a2 + 184);
  v25 = *(unsigned __int16 **)(*(_QWORD *)a2 + 192);
  if (v24 == v25)
  {
LABEL_21:
    v29 = (unsigned __int16 *)v23[26];
    v30 = (unsigned __int16 *)v23[27];
    if (v29 == v30)
      goto LABEL_33;
    v32 = (unsigned __int16 *)v23[14];
    v31 = (unsigned __int16 *)v23[15];
    do
    {
      v35 = v32;
      if (v32 != v31)
      {
        v35 = v32;
        while (*v35 != *v29)
        {
          v35 += 56;
          if (v35 == v31)
          {
            v35 = v31;
            break;
          }
        }
      }
      v33 = *((unsigned __int8 *)v35 + 8);
      ++v29;
      if (v33)
        v34 = v29 == v30;
      else
        v34 = 1;
    }
    while (!v34);
    if (v33)
LABEL_33:
      v27 = "Y";
    else
      v27 = "N";
  }
  else
  {
    v26 = (unsigned __int16 *)v23[15];
    v27 = "N";
    while (1)
    {
      v28 = (unsigned __int16 *)v23[14];
      if (v28 != v26)
      {
        v28 = (unsigned __int16 *)v23[14];
        while (*v28 != *v24)
        {
          v28 += 56;
          if (v28 == v26)
          {
            v28 = (unsigned __int16 *)v23[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v28 + 8))
        break;
      if (++v24 == v25)
        goto LABEL_21;
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v27, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"All Layers: ", 12);
  v36 = *(_QWORD **)a2;
  v37 = *(unsigned __int16 **)(*(_QWORD *)a2 + 184);
  v38 = *(unsigned __int16 **)(*(_QWORD *)a2 + 192);
  if (v37 == v38)
  {
LABEL_44:
    v42 = (unsigned __int16 *)v36[26];
    v43 = (unsigned __int16 *)v36[27];
    if (v42 == v43)
      goto LABEL_56;
    v45 = (unsigned __int16 *)v36[14];
    v44 = (unsigned __int16 *)v36[15];
    do
    {
      v48 = v45;
      if (v45 != v44)
      {
        v48 = v45;
        while (*v48 != *v42)
        {
          v48 += 56;
          if (v48 == v44)
          {
            v48 = v44;
            break;
          }
        }
      }
      v46 = *((unsigned __int8 *)v48 + 9);
      ++v42;
      if (v46)
        v47 = v42 == v43;
      else
        v47 = 1;
    }
    while (!v47);
    if (v46)
LABEL_56:
      v40 = "Y";
    else
      v40 = "N";
  }
  else
  {
    v39 = (unsigned __int16 *)v36[15];
    v40 = "N";
    while (1)
    {
      v41 = (unsigned __int16 *)v36[14];
      if (v41 != v39)
      {
        v41 = (unsigned __int16 *)v36[14];
        while (*v41 != *v37)
        {
          v41 += 56;
          if (v41 == v39)
          {
            v41 = (unsigned __int16 *)v36[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v41 + 9))
        break;
      if (++v37 == v38)
        goto LABEL_44;
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v40, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Failed Tiles: ", 14);
  v49 = *(_QWORD **)a2;
  v50 = *(unsigned __int16 **)(*(_QWORD *)a2 + 184);
  v51 = *(unsigned __int16 **)(*(_QWORD *)a2 + 192);
  if (v50 != v51)
  {
    v52 = (unsigned __int16 *)v49[15];
    do
    {
      v53 = (unsigned __int16 *)v49[14];
      if (v53 != v52)
      {
        v53 = (unsigned __int16 *)v49[14];
        while (*v50 != *v53)
        {
          v53 += 56;
          if (v53 == v52)
          {
            v53 = (unsigned __int16 *)v49[15];
            break;
          }
        }
      }
      if (*((_BYTE *)v53 + 10))
        goto LABEL_79;
      ++v50;
    }
    while (v50 != v51);
  }
  v54 = (unsigned __int16 *)v49[26];
  v55 = (unsigned __int16 *)v49[27];
  if (v54 != v55)
  {
    v57 = (unsigned __int16 *)v49[14];
    v56 = (unsigned __int16 *)v49[15];
    do
    {
      v60 = v57;
      if (v57 != v56)
      {
        v60 = v57;
        while (*v54 != *v60)
        {
          v60 += 56;
          if (v60 == v56)
          {
            v60 = v56;
            break;
          }
        }
      }
      v58 = *((unsigned __int8 *)v60 + 10);
      ++v54;
      if (v58)
        v59 = 1;
      else
        v59 = v54 == v55;
    }
    while (!v59);
    if (v58)
    {
LABEL_79:
      v61 = "Y";
      goto LABEL_81;
    }
  }
  v61 = "N";
LABEL_81:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v61, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Tiles to Render: ", 17);
  v62 = *(_QWORD **)a2;
  v63 = *(unsigned __int16 **)(*(_QWORD *)a2 + 184);
  v64 = *(unsigned __int16 **)(*(_QWORD *)a2 + 192);
  if (v63 != v64)
  {
    v65 = (unsigned __int16 *)v62[15];
    do
    {
      v66 = (unsigned __int16 *)v62[14];
      if (v66 != v65)
      {
        v66 = (unsigned __int16 *)v62[14];
        while (*v66 != *v63)
        {
          v66 += 56;
          if (v66 == v65)
          {
            v66 = (unsigned __int16 *)v62[15];
            break;
          }
        }
      }
      if (*((_QWORD *)v66 + 5))
        goto LABEL_102;
      ++v63;
    }
    while (v63 != v64);
  }
  v67 = (unsigned __int16 *)v62[26];
  v68 = (unsigned __int16 *)v62[27];
  if (v67 != v68)
  {
    v70 = (unsigned __int16 *)v62[14];
    v69 = (unsigned __int16 *)v62[15];
    do
    {
      v73 = v70;
      if (v70 != v69)
      {
        v73 = v70;
        while (*v73 != *v67)
        {
          v73 += 56;
          if (v73 == v69)
          {
            v73 = v69;
            break;
          }
        }
      }
      v71 = *((_QWORD *)v73 + 5);
      ++v67;
      if (v71)
        v72 = 1;
      else
        v72 = v67 == v68;
    }
    while (!v72);
    if (v71)
    {
LABEL_102:
      v74 = "Y";
      goto LABEL_104;
    }
  }
  v74 = "N";
LABEL_104:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v74, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
  if (!v16)
  {
    v75 = v113;
    do
    {
      v76 = *v75;
      v78 = *(_BYTE **)(*(_QWORD *)a2 + 112);
      v77 = *(_BYTE **)(*(_QWORD *)a2 + 120);
      if (v78 != v77)
      {
        while (*(unsigned __int16 *)v78 != (_DWORD)v76)
        {
          v78 += 112;
          if (v78 == v77)
          {
            v78 = *(_BYTE **)(*(_QWORD *)a2 + 120);
            break;
          }
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n=== ", 5);
      v79 = "<Invalid>";
      if (v76 <= 8)
        v79 = off_1E42F6158[v76];
      v80 = strlen(v79);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v79, v80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)" ===\n", 5);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Required Layers: ", 17);
      if (v78[8])
        v81 = "Y";
      else
        v81 = "N";
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v81, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"All Layers: ", 12);
      if (v78[9])
        v82 = "Y";
      else
        v82 = "N";
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v82, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Failed Tiles: ", 14);
      if (v78[10])
        v83 = "Y";
      else
        v83 = "N";
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v83, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Tiles to Render: ", 17);
      v84 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)"\n", 1);
      ++v75;
    }
    while (v75 != v114);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n=== Metal Resources ===\n", 25);
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = objc_msgSend(v85, "device");

  v87 = *(_QWORD *)(v86 + 8);
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 80);
    if (v88)
    {
      v89 = (uint64_t **)(v88 + 168);
      while (1)
      {
        v89 = (uint64_t **)*v89;
        if (!v89)
          break;
        v90 = strlen((const char *)v89[2]);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v89[2], v90);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)": ", 2);
        v91 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)" (", 2);
        v92 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)" MB) \n", 6);
      }
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n=== Memory ===\n", 16);
  task_info_outCnt = 264;
  if (!task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Footprint: ", 11);
    v93 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)" MB \n", 5);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"Footprint Peak: ", 16);
    v94 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)" MB \n", 5);
  }
  v117 = 0;
  v116 = 0;
  malloc_get_all_zones();
  v95 = v113;
  if (a3)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n=== Tile Cache ===\n", 20);
    v96 = (uint64_t **)*((_QWORD *)a3 + 18);
    while (v96)
    {
      v97 = *((unsigned __int16 *)v96 + 8);
      v98 = (unsigned __int16 *)*((_QWORD *)a3 + 10);
      v99 = (unsigned __int16 *)*((_QWORD *)a3 + 11);
      if (v98 != v99)
      {
        while (*v98 != (_DWORD)v97)
        {
          v98 += 8;
          if (v98 == v99)
            goto LABEL_140;
        }
      }
      if (v98 == v99)
      {
LABEL_140:
        if (MEMORY[0x30])
        {
LABEL_141:
          v100 = "<Invalid>";
          if (v97 <= 0x51)
            v100 = off_1E42F61C0[v97];
          v101 = strlen(v100);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v100, v101);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)": ", 2);
          v102 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v102, (uint64_t)" (estimated ", 12);
          v103 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v103, (uint64_t)" KB)\n", 5);
        }
      }
      else if (*(_QWORD *)(*((_QWORD *)v98 + 1) + 48))
      {
        goto LABEL_141;
      }
      v96 = (uint64_t **)*v96;
      v95 = v113;
    }
  }
  if ((v127 & 0x10) != 0)
  {
    v105 = *((_QWORD *)&v126 + 1);
    if (*((_QWORD *)&v126 + 1) < v124)
    {
      *((_QWORD *)&v126 + 1) = v124;
      v105 = v124;
    }
    v106 = (const void **)&v123;
  }
  else
  {
    if ((v127 & 8) == 0)
    {
      v104 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_159;
    }
    v106 = (const void **)v122;
    v105 = v122[2];
  }
  v107 = *v106;
  v104 = v105 - (_QWORD)*v106;
  if (v104 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v104 >= 0x17)
  {
    v108 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v108 = v104 | 7;
    v109 = v108 + 1;
    v110 = (md::PendingSceneLogic *)operator new(v108 + 1);
    *((_QWORD *)this + 1) = v104;
    *((_QWORD *)this + 2) = v109 | 0x8000000000000000;
    *(_QWORD *)this = v110;
    this = v110;
    goto LABEL_158;
  }
  *((_BYTE *)this + 23) = v104;
  if (v104)
LABEL_158:
    memmove(this, v107, v104);
LABEL_159:
  *((_BYTE *)this + v104) = 0;
  if (v95)
    operator delete(v95);
  v120 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v120 + *(_QWORD *)(v120 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v121 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v126) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v128);
}

void sub_19F55C834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;

  if (v69)
    operator delete(v69);
  std::ostringstream::~ostringstream((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SceneLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

_QWORD *std::vector<md::TileExclusionArea>::__assign_with_size[abi:nn180100]<md::TileExclusionArea*,md::TileExclusionArea*>(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 6)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 6;
    if (v18 >= __sz)
    {
      v25 = *result;
      if (a2 != a3)
      {
        do
        {
          *(_QWORD *)v25 = *(_QWORD *)v6;
          *(_QWORD *)(v25 + 8) = *((_QWORD *)v6 + 1);
          *(_QWORD *)(v25 + 16) = *((_QWORD *)v6 + 2);
          *(_QWORD *)(v25 + 24) = *((_QWORD *)v6 + 3);
          v26 = *((_OWORD *)v6 + 3);
          *(_OWORD *)(v25 + 32) = *((_OWORD *)v6 + 2);
          *(_OWORD *)(v25 + 48) = v26;
          v25 += 64;
          v6 += 64;
        }
        while (v6 != a3);
      }
      v15 = v25 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[64 * v18];
      if (v17 != v9)
      {
        do
        {
          *(_QWORD *)v9 = *(_QWORD *)v6;
          *((_QWORD *)v9 + 1) = *((_QWORD *)v6 + 1);
          *((_QWORD *)v9 + 2) = *((_QWORD *)v6 + 2);
          *((_QWORD *)v9 + 3) = *((_QWORD *)v6 + 3);
          v20 = *((_OWORD *)v6 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v6 + 2);
          *((_OWORD *)v9 + 3) = v20;
          v6 += 64;
          v9 += 64;
        }
        while (v6 != v19);
        v9 = *v16;
      }
      v21 = v9;
      if (v19 != a3)
      {
        v21 = v9;
        do
        {
          v22 = *(_OWORD *)v19;
          v23 = *((_OWORD *)v19 + 1);
          v24 = *((_OWORD *)v19 + 3);
          *((_OWORD *)v21 + 2) = *((_OWORD *)v19 + 2);
          *((_OWORD *)v21 + 3) = v24;
          *(_OWORD *)v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          v21 += 64;
          v19 += 64;
        }
        while (v19 != a3);
      }
      v15 = v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_25;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_25:
      abort();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, ((a3 - v6 - 64) & 0xFFFFFFFFFFFFFFC0) + 64);
      v14 = &v9[((a3 - v6 - 64) & 0xFFFFFFFFFFFFFFC0) + 64];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void **geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _BYTE *v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_BYTE *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          do
          {
            if (v5[112])
              v5[112] = 0;
            v7 = *(_BYTE **)v5;
            v8 = (void *)*((_QWORD *)v5 + 4);
            if (v8 != *((void **)v5 + 6))
              free(v8);
            operator delete(v5);
            v5 = v7;
          }
          while (v7);
        }
        v6 = (void *)*((_QWORD *)v3 - 5);
        *((_QWORD *)v3 - 5) = 0;
        if (v6)
          operator delete(v6);
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::PendingSceneLogic::updateSelectionContextMap(int a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15[2];
  void *v16[2];
  void *__p[2];
  int v18;
  __int128 v19;

  if (a2 != a3)
  {
    while (*a2 != a1)
    {
      a2 += 16;
      if (a2 == a3)
        return;
    }
  }
  if (a2 != a3)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16);
    if (v8)
    {
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)__p = 0u;
      v18 = 1065353216;
      v15[0] = &off_1E42B46D8;
      v15[1] = a6;
      *(_QWORD *)&v19 = a4;
      *((_QWORD *)&v19 + 1) = a5;
      *(_QWORD *)(v8 + 8) = a6;
      if ((void **)v8 == v15)
      {
        *(_OWORD *)(v8 + 56) = v19;
        v15[0] = &off_1E42B0978;
      }
      else
      {
        *(_DWORD *)(v8 + 48) = 1065353216;
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned short,void *> *>>((_QWORD *)(v8 + 16), 0);
        v9 = __p[0];
        *(_OWORD *)(v8 + 56) = v19;
        v15[0] = &off_1E42B0978;
        if (v9)
        {
          do
          {
            v10 = (_QWORD *)*v9;
            operator delete(v9);
            v9 = v10;
          }
          while (v10);
        }
      }
      v11 = v16[0];
      v16[0] = 0;
      if (v11)
        operator delete(v11);
      std::unordered_set<unsigned short>::unordered_set((uint64_t)v15, a7);
      gdc::SelectionContext::setLayerDataTypes(v8, (uint64_t *)v15);
      v12 = v16[0];
      if (v16[0])
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = v15[0];
      v15[0] = 0;
      if (v14)
        operator delete(v14);
    }
  }
}

void sub_19F55CD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  gdc::TileSetSelectionContext::~TileSetSelectionContext((gdc::TileSetSelectionContext *)va);
  _Unwind_Resume(a1);
}

void geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::purge(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  int8x8_t v12;
  uint64_t *v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;

  v1 = a1[1];
  v2 = (_QWORD *)a1[8];
  if ((_QWORD *)v1 != v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a1[6];
    v7 = a1 + 3;
    v8 = (uint64_t **)(a1 + 5);
    while (v5 != v6)
    {
      v9 = *(_QWORD *)(v1 + 136);
      v10 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v7, (unsigned __int8 *)(v1 + 16));
      if (v10)
      {
        v11 = v10;
        v12 = (int8x8_t)a1[4];
        v13 = v10[1];
        v14 = (uint8x8_t)vcnt_s8(v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          if ((unint64_t)v13 >= *(_QWORD *)&v12)
            v13 = (uint64_t *)((unint64_t)v13 % *(_QWORD *)&v12);
        }
        else
        {
          v13 = (uint64_t *)((*(_QWORD *)&v12 - 1) & (unint64_t)v13);
        }
        v15 = *(uint64_t ***)(*v7 + 8 * (_QWORD)v13);
        do
        {
          v16 = v15;
          v15 = (uint64_t **)*v15;
        }
        while (v15 != v10);
        if (v16 == v8)
          goto LABEL_24;
        v17 = v16[1];
        if (v14.u32[0] > 1uLL)
        {
          if ((unint64_t)v17 >= *(_QWORD *)&v12)
            v17 = (uint64_t *)((unint64_t)v17 % *(_QWORD *)&v12);
        }
        else
        {
          v17 = (uint64_t *)((unint64_t)v17 & (*(_QWORD *)&v12 - 1));
        }
        if (v17 != v13)
        {
LABEL_24:
          if (!*v10)
            goto LABEL_25;
          v18 = (*v10)[1];
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
          }
          else
          {
            v18 &= *(_QWORD *)&v12 - 1;
          }
          if ((uint64_t *)v18 != v13)
LABEL_25:
            *(_QWORD *)(*v7 + 8 * (_QWORD)v13) = 0;
        }
        v19 = *v10;
        if (*v10)
        {
          v20 = (uint64_t *)v19[1];
          if (v14.u32[0] > 1uLL)
          {
            if ((unint64_t)v20 >= *(_QWORD *)&v12)
              v20 = (uint64_t *)((unint64_t)v20 % *(_QWORD *)&v12);
          }
          else
          {
            v20 = (uint64_t *)((unint64_t)v20 & (*(_QWORD *)&v12 - 1));
          }
          if (v20 != v13)
          {
            *(_QWORD *)(*v7 + 8 * (_QWORD)v20) = v16;
            v19 = *v10;
          }
        }
        *v16 = v19;
        *v10 = 0;
        --a1[6];
        if (*((_BYTE *)v10 + 112))
          *((_BYTE *)v10 + 112) = 0;
        v21 = v10[4];
        if (v21 != v11[6])
          free(v21);
        operator delete(v11);
        v2 = (_QWORD *)a1[8];
      }
      v4 += v9;
      v1 = *(_QWORD *)(v1 + 8);
      ++v5;
      if ((_QWORD *)v1 == v2)
        goto LABEL_38;
    }
    v2 = (_QWORD *)v1;
LABEL_38:
    v22 = (_QWORD *)a1[1];
    if (v22 != v2)
    {
      v23 = *v2;
      v24 = *v22;
      *(_QWORD *)(v24 + 8) = *(_QWORD *)(*v2 + 8);
      **(_QWORD **)(v23 + 8) = v24;
      do
      {
        v25 = (_QWORD *)v22[1];
        --a1[2];
        if (*((_BYTE *)v22 + 112))
          *((_BYTE *)v22 + 112) = 0;
        v26 = (void *)v22[4];
        if (v26 != (void *)v22[6])
          free(v26);
        operator delete(v22);
        v22 = v25;
      }
      while (v25 != v2);
    }
    v27 = a1[9];
    v28 = v27 >= v4;
    v29 = v27 - v4;
    if (!v28)
      v29 = 0;
    a1[9] = v29;
  }
}

void md::PendingSceneLogic::extractFullyImplicatedData(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4, uint64_t a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  double v11;
  unsigned __int8 *v12;
  int8x8_t *v13;
  int8x8_t v14;
  uint64_t *v15;
  uint8x8_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  size_t v22;
  const void *v23;
  uint64_t *v24;
  uint64_t *v25;
  size_t v26;
  const void *v27;
  int8x8_t *v28;
  int8x8_t v29;
  int8x8_t v30;
  uint64_t *v31;
  int8x8_t *v32;
  int8x8_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  _QWORD *v36;
  int8x8_t v37;
  int8x8_t v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  int8x8_t v42;
  int8x8_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  int8x8_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t ***v53;
  uint64_t **v54;
  int v55;
  int v56;
  uint64_t *v57;
  void *v58;
  size_t v59;
  unint64_t v60;
  uint64_t *v61;
  size_t v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  int v66;
  int8x8_t *v67;
  int8x8_t *v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  size_t prime;
  int8x8_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  int8x8_t *v79;
  int8x8_t *v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  double v84;
  unsigned __int16 *v85;
  unsigned __int8 *v86;
  int v87;
  double *v89;
  unsigned __int8 *v91;
  size_t v92;
  uint64_t *v93;
  uint64_t *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  void *v99;
  void *v100;
  unsigned __int8 *v104;
  unsigned __int8 v105;
  uint64_t v106;
  void *v107;
  void *v108;
  char v109;
  int v110;
  __int128 v111;
  unsigned __int8 v112[8];
  unsigned __int16 v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t *v117;
  char v118;
  int v119;
  _BYTE v120[24];
  int8x8_t *v121;
  int8x8_t *v122;
  char v123;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v89 = (double *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  if (a6)
  {
    v7 = a2;
    v8 = a1;
    v10 = *a3;
    v9 = a3[1];
    v91 = a3[2];
    v11 = 0.0;
    while (1)
    {
LABEL_4:
      v12 = v9;
      if (v10 == *a4)
        return;
      v104 = v9;
      if (v10 == v9)
        goto LABEL_154;
      do
      {
        v13 = *(int8x8_t **)(v7 + 216);
        v14 = v13[4];
        if (!*(_QWORD *)&v14)
          goto LABEL_39;
        v15 = (uint64_t *)*((_QWORD *)v10 + 13);
        v16 = (uint8x8_t)vcnt_s8(v14);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v6 = (uint64_t *)*((_QWORD *)v10 + 13);
          if ((unint64_t)v15 >= *(_QWORD *)&v14)
            v6 = (uint64_t *)((unint64_t)v15 % *(_QWORD *)&v14);
        }
        else
        {
          v6 = (uint64_t *)((*(_QWORD *)&v14 - 1) & (unint64_t)v15);
        }
        v17 = *(uint64_t ****)(*(_QWORD *)&v13[3] + 8 * (_QWORD)v6);
        if (!v17)
          goto LABEL_39;
        v18 = *v17;
        if (!*v17)
          goto LABEL_39;
        if (v16.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v14 - 1;
          while (1)
          {
            v24 = v18[1];
            if (v24 == v15)
            {
              if (*((unsigned __int8 *)v18 + 16) == *v10
                && *((unsigned __int16 *)v18 + 12) == *((unsigned __int16 *)v10 + 4)
                && v18[12] == *((uint64_t **)v10 + 10))
              {
                v25 = v18[4];
                v26 = (char *)v18[5] - (char *)v25;
                v27 = (const void *)*((_QWORD *)v10 + 2);
                if (v26 == *((_QWORD *)v10 + 3) - (_QWORD)v27 && !memcmp(v25, v27, v26))
                  goto LABEL_34;
              }
            }
            else if ((uint64_t *)((unint64_t)v24 & v19) != v6)
            {
              goto LABEL_39;
            }
            v18 = (uint64_t **)*v18;
            if (!v18)
              goto LABEL_39;
          }
        }
        while (1)
        {
          v20 = v18[1];
          if (v20 == v15)
            break;
          if ((unint64_t)v20 >= *(_QWORD *)&v14)
            v20 = (uint64_t *)((unint64_t)v20 % *(_QWORD *)&v14);
          if (v20 != v6)
            goto LABEL_39;
LABEL_16:
          v18 = (uint64_t **)*v18;
          if (!v18)
            goto LABEL_39;
        }
        if (*((unsigned __int8 *)v18 + 16) != *v10)
          goto LABEL_16;
        if (*((unsigned __int16 *)v18 + 12) != *((unsigned __int16 *)v10 + 4))
          goto LABEL_16;
        if (v18[12] != *((uint64_t **)v10 + 10))
          goto LABEL_16;
        v21 = v18[4];
        v22 = (char *)v18[5] - (char *)v21;
        v23 = (const void *)*((_QWORD *)v10 + 2);
        if (v22 != *((_QWORD *)v10 + 3) - (_QWORD)v23 || memcmp(v21, v23, v22))
          goto LABEL_16;
LABEL_34:
        v6 = v18[16];
        v28 = (int8x8_t *)operator new(0x90uLL);
        *v28 = 0;
        v28[1] = 0;
        v28[2].i8[0] = *((_BYTE *)v6 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v28[3], (uint64_t)(v6 + 3));
        v28[14].i8[0] = 0;
        if (*((_BYTE *)v6 + 112))
        {
          v28[14].i32[1] = *((_DWORD *)v6 + 29);
          v28[14].i8[0] = 1;
        }
        v28[15] = (int8x8_t)v6[15];
        *(_OWORD *)v28[16].i8 = *((_OWORD *)v6 + 8);
        v29 = *v13;
        *(_QWORD *)(*(_QWORD *)&v29 + 8) = v28;
        *v28 = v29;
        *v13 = (int8x8_t)v28;
        v28[1] = (int8x8_t)v13;
        v30 = v13[2];
        v13[2] = (int8x8_t)(*(_QWORD *)&v30 + 1);
        v31 = (uint64_t *)v13[8];
        if (v31 == v6)
        {
          v32 = (int8x8_t *)v6[1];
          goto LABEL_145;
        }
        v32 = v28;
        if (v31 == (uint64_t *)v13)
LABEL_145:
          v13[8] = (int8x8_t)v32;
        v82 = *v6;
        *(_QWORD *)(v82 + 8) = v6[1];
        *(_QWORD *)v6[1] = v82;
        v13[2] = v30;
        if (*((_BYTE *)v6 + 112))
          *((_BYTE *)v6 + 112) = 0;
        v83 = (void *)v6[4];
        if (v83 != (void *)v6[6])
          free(v83);
        operator delete(v6);
        v18[16] = (uint64_t *)v28;
        v13 = *(int8x8_t **)(v7 + 216);
        if (v28 != v13)
        {
          v84 = fmax((double)(*(_QWORD *)(v7 + 232) - a5 + *(_QWORD *)&v28[16]), 0.0);
          v11 = fmax(v11, v84);
          *v89 = v11;
          if (v84 <= 0.0)
          {
            ++*(_DWORD *)(v8 + 16);
            v85 = geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::operator[](a6, *((_WORD *)v10 + 4));
            std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v85, v10, (uint64_t)v10);
          }
          else
          {
            ++*(_DWORD *)(v8 + 20);
          }
          goto LABEL_142;
        }
LABEL_39:
        ++*(_DWORD *)(v8 + 20);
        v105 = *v10;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v106, (uint64_t)(v10 + 8));
        v109 = 0;
        if (v10[96])
        {
          v110 = *((_DWORD *)v10 + 25);
          v109 = 1;
        }
        *(_QWORD *)&v111 = *((_QWORD *)v10 + 13);
        *((_QWORD *)&v111 + 1) = a5;
        v112[0] = v105;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v113, (uint64_t)&v106);
        v118 = 0;
        if (v109)
        {
          v119 = v110;
          v118 = 1;
        }
        *(_OWORD *)v120 = v111;
        *(_QWORD *)&v120[16] = 0;
        v33 = v13 + 3;
        v34 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(&v13[3], v112);
        if (!v34)
        {
          v41 = operator new(0x90uLL);
          *v41 = 0;
          v41[1] = 0;
          *((_BYTE *)v41 + 16) = v112[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v41 + 3), (uint64_t)&v113);
          *((_BYTE *)v41 + 112) = 0;
          if (v118)
          {
            *((_DWORD *)v41 + 29) = v119;
            *((_BYTE *)v41 + 112) = 1;
          }
          v41[15] = *(_QWORD *)v120;
          *((_OWORD *)v41 + 8) = *(_OWORD *)&v120[8];
          v42 = *v13;
          *(_QWORD *)(*(_QWORD *)&v42 + 8) = v41;
          *v41 = v42;
          *v13 = (int8x8_t)v41;
          v41[1] = v13;
          ++*(_QWORD *)&v13[2];
          v43 = (int8x8_t *)v13[8];
          *(_QWORD *)&v13[9] += *(_QWORD *)&v120[16];
          if (v43 == v13)
            v13[8] = (int8x8_t)v41;
          v44 = *(_QWORD *)v120;
          v45 = (unint64_t)v13[4];
          if (v45)
          {
            v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
            v46.i16[0] = vaddlv_u8(v46);
            if (v46.u32[0] > 1uLL)
            {
              v6 = *(uint64_t **)v120;
              if (*(_QWORD *)v120 >= v45)
                v6 = (uint64_t *)(*(_QWORD *)v120 % v45);
            }
            else
            {
              v6 = (uint64_t *)((v45 - 1) & *(_QWORD *)v120);
            }
            v53 = *(uint64_t ****)(*(_QWORD *)v33 + 8 * (_QWORD)v6);
            if (v53)
            {
              v54 = *v53;
              if (*v53)
              {
                v55 = v112[0];
                v56 = v113;
                v57 = v117;
                v58 = v114;
                v59 = v115 - (_QWORD)v114;
                if (v46.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v64 = v54[1];
                    if (v64 == (uint64_t *)v44)
                    {
                      if (*((unsigned __int8 *)v54 + 16) == v55
                        && *((unsigned __int16 *)v54 + 12) == v56
                        && v54[12] == v57)
                      {
                        v65 = v54[4];
                        if ((char *)v54[5] - (char *)v65 == v59)
                        {
                          v100 = v58;
                          v92 = v59;
                          v94 = v57;
                          v96 = v56;
                          v98 = v55;
                          v66 = memcmp(v65, v58, v59);
                          v59 = v92;
                          v57 = v94;
                          v58 = v100;
                          v56 = v96;
                          v55 = v98;
                          if (!v66)
                            goto LABEL_133;
                        }
                      }
                    }
                    else if ((uint64_t *)((unint64_t)v64 & (v45 - 1)) != v6)
                    {
                      goto LABEL_91;
                    }
                    v54 = (uint64_t **)*v54;
                    if (!v54)
                      goto LABEL_91;
                  }
                }
                while (1)
                {
                  v60 = (unint64_t)v54[1];
                  if (v60 == v44)
                  {
                    if (*((unsigned __int8 *)v54 + 16) == v55
                      && *((unsigned __int16 *)v54 + 12) == v56
                      && v54[12] == v57)
                    {
                      v61 = v54[4];
                      if ((char *)v54[5] - (char *)v61 == v59)
                      {
                        v99 = v58;
                        v62 = v59;
                        v95 = v56;
                        v97 = v55;
                        v93 = v57;
                        v63 = memcmp(v61, v58, v59);
                        v59 = v62;
                        v58 = v99;
                        v57 = v93;
                        v56 = v95;
                        v55 = v97;
                        if (!v63)
                          goto LABEL_133;
                      }
                    }
                  }
                  else
                  {
                    if (v60 >= v45)
                      v60 %= v45;
                    if ((uint64_t *)v60 != v6)
                    {
LABEL_91:
                      v33 = v13 + 3;
                      break;
                    }
                  }
                  v54 = (uint64_t **)*v54;
                  if (!v54)
                    goto LABEL_91;
                }
              }
            }
          }
          v67 = (int8x8_t *)operator new(0x88uLL);
          v68 = v13 + 5;
          v121 = v67;
          v122 = v13 + 5;
          *v67 = 0;
          v67[1] = (int8x8_t)v44;
          v67[2].i8[0] = v112[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v67[3], (uint64_t)&v113);
          v67[14].i8[0] = 0;
          if (v118)
          {
            v67[14].i32[1] = v119;
            v67[14].i8[0] = 1;
          }
          v67[15] = *(int8x8_t *)v120;
          v67[16] = (int8x8_t)v41;
          v123 = 1;
          v69 = (float)(unint64_t)(*(_QWORD *)&v13[6] + 1);
          v70 = *(float *)v13[7].i32;
          if (!v45 || (float)(v70 * (float)v45) < v69)
          {
            v71 = v45 < 3 || (v45 & (v45 - 1)) != 0;
            v72 = v71 | (2 * v45);
            v73 = vcvtps_u32_f32(v69 / v70);
            if (v72 <= v73)
              prime = v73;
            else
              prime = v72;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v75 = v13[4];
            if (prime > *(_QWORD *)&v75)
              goto LABEL_107;
            if (prime < *(_QWORD *)&v75)
            {
              v76 = vcvtps_u32_f32((float)(unint64_t)v13[6] / *(float *)v13[7].i32);
              if (*(_QWORD *)&v75 < 3uLL
                || (v77 = (uint8x8_t)vcnt_s8(v75), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
              {
                v76 = std::__next_prime(v76);
              }
              else
              {
                v78 = 1 << -(char)__clz(v76 - 1);
                if (v76 >= 2)
                  v76 = v78;
              }
              if (prime <= v76)
                prime = v76;
              if (prime < *(_QWORD *)&v75)
LABEL_107:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v33, prime);
            }
            v45 = (unint64_t)v13[4];
            if ((v45 & (v45 - 1)) != 0)
            {
              if (v44 >= v45)
                v6 = (uint64_t *)(v44 % v45);
              else
                v6 = (uint64_t *)v44;
            }
            else
            {
              v6 = (uint64_t *)((v45 - 1) & v44);
            }
          }
          v79 = *(int8x8_t **)(*(_QWORD *)v33 + 8 * (_QWORD)v6);
          v80 = v121;
          if (v79)
          {
            *v121 = *v79;
            goto LABEL_131;
          }
          *v121 = *v68;
          *v68 = (int8x8_t)v80;
          *(_QWORD *)(*(_QWORD *)v33 + 8 * (_QWORD)v6) = v68;
          if (*v80)
          {
            v81 = *(_QWORD *)(*(_QWORD *)v80 + 8);
            if ((v45 & (v45 - 1)) != 0)
            {
              if (v81 >= v45)
                v81 %= v45;
            }
            else
            {
              v81 &= v45 - 1;
            }
            v79 = (int8x8_t *)(*(_QWORD *)v33 + 8 * v81);
LABEL_131:
            *v79 = (int8x8_t)v80;
          }
          ++*(_QWORD *)&v13[6];
          goto LABEL_133;
        }
        v35 = v34;
        v6 = v34[16];
        v36 = operator new(0x90uLL);
        *v36 = 0;
        v36[1] = 0;
        *((_BYTE *)v36 + 16) = v112[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v36 + 3), (uint64_t)&v113);
        *((_BYTE *)v36 + 112) = 0;
        if (v118)
        {
          *((_DWORD *)v36 + 29) = v119;
          *((_BYTE *)v36 + 112) = 1;
        }
        v36[15] = *(_QWORD *)v120;
        *((_OWORD *)v36 + 8) = *(_OWORD *)&v120[8];
        v37 = *v13;
        *(_QWORD *)(*(_QWORD *)&v37 + 8) = v36;
        *v36 = v37;
        *v13 = (int8x8_t)v36;
        v36[1] = v13;
        v38 = v13[2];
        v13[2] = (int8x8_t)(*(_QWORD *)&v38 + 1);
        v39 = (uint64_t *)v13[8];
        if (v39 == v6)
        {
          v40 = (_QWORD *)v6[1];
          goto LABEL_57;
        }
        v40 = v36;
        if (v39 == (uint64_t *)v13)
LABEL_57:
          v13[8] = (int8x8_t)v40;
        v47 = v6[17];
        v48 = v13[9];
        v49 = *(_QWORD *)&v48 >= v47;
        v50 = *(_QWORD *)&v48 - v47;
        if (!v49)
          v50 = 0;
        v13[9] = (int8x8_t)(v50 + *(_QWORD *)&v120[16]);
        v51 = *v6;
        *(_QWORD *)(v51 + 8) = v6[1];
        *(_QWORD *)v6[1] = v51;
        v13[2] = v38;
        if (*((_BYTE *)v6 + 112))
          *((_BYTE *)v6 + 112) = 0;
        v52 = (void *)v6[4];
        if (v52 != (void *)v6[6])
          free(v52);
        operator delete(v6);
        v35[16] = v36;
LABEL_133:
        if (v118)
          v118 = 0;
        v8 = a1;
        v7 = a2;
        if (v114 != v116)
          free(v114);
        if (v109)
          v109 = 0;
        if (v107 != v108)
          free(v107);
        *(_BYTE *)a1 = 0;
        v11 = fmax(*(double *)(a1 + 8), (double)*(uint64_t *)(a2 + 232));
        *(double *)(a1 + 8) = v11;
LABEL_142:
        v12 = v104;
        v10 += 144;
      }
      while (v10 != v104);
LABEL_154:
      v10 = v12;
      v9 = v91;
      if (v91 != v12)
      {
        v9 = v12 + 144;
        v86 = v12;
        while (1)
        {
          v86 += 144;
          if (v9 == v91)
          {
            v9 = v91;
            v10 = v12;
            goto LABEL_4;
          }
          if (v9[112] != v12[112])
            break;
          if (v9[113] == v12[113] && *((_DWORD *)v9 + 29) == *((_DWORD *)v12 + 29))
          {
            v87 = *((_DWORD *)v9 + 30);
            v9 += 144;
            if (v87 == *((_DWORD *)v12 + 30))
              continue;
          }
          v10 = v12;
          v9 = v86;
          goto LABEL_4;
        }
        v10 = v12;
      }
    }
  }
}

void sub_19F55DA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v51 - 128));
  if (a41 != a43)
    free(a41);
  if (a26 != a28)
    free(a26);
  _Unwind_Resume(a1);
}

void md::PendingSceneLogic::_prefetchData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  void **v11;
  uint64_t v12;
  uint64_t *k;
  uint64_t *v14;
  int8x8_t v15;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  void **v28;
  void **v29;
  void **v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t **j;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  unsigned __int8 v62;
  _QWORD *v64;
  void *v65[2];
  void *v66[2];
  int v67;
  void *v68[2];
  void *v69[2];
  int v70;
  char v71;
  __int16 v72;
  void *v73[2];
  void *__p;

  if (!*(_QWORD *)(a1 + 376))
    return;
  v4 = *(_QWORD **)(a1 + 128);
  v5 = (unsigned __int16 *)v4[21];
  v6 = (unsigned __int16 *)v4[22];
  if (v5 == v6)
  {
LABEL_98:
    a2 = v4[3];
    v8 = (uint64_t *)(a1 + 328);
    v56 = *(_QWORD *)(a1 + 328);
    v57 = *(_QWORD *)(a1 + 336);
    while (v56 != v57)
    {
      for (i = *(_QWORD *)(v56 + 16); i != v56 + 8; i = *(_QWORD *)(i + 8))
      {
        for (j = *(uint64_t ***)(*(_QWORD *)(i + 16) + 32); j; j = (uint64_t **)*j)
        {
          v60 = *(unsigned __int16 **)(a2 + 8);
          v61 = *(unsigned __int16 **)(a2 + 16);
          if (v60 != v61)
          {
            while (*((unsigned __int16 *)j + 8) != *v60)
            {
              v60 += 12;
              if (v60 == v61)
                goto LABEL_106;
            }
          }
          if (v60 != v61)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v60 + 2) + 24))(*((_QWORD *)v60 + 2), *(_QWORD *)(i + 16), 1);
LABEL_106:
          ;
        }
      }
      v56 += 32;
    }
    if ((v62 & 1) == 0)
      goto LABEL_117;
    goto LABEL_114;
  }
  while (1)
  {
    v8 = (uint64_t *)*v5;
    v9 = *(_QWORD *)(a1 + 392);
    v11 = *(void ***)(v9 + 160);
    v10 = *(unsigned __int16 **)(v9 + 168);
    if (v11 != (void **)v10)
    {
      while (*(unsigned __int16 *)v11 != (_DWORD)v8)
      {
        v11 += 14;
        if (v11 == (void **)v10)
        {
          v11 = (void **)v10;
          break;
        }
      }
    }
    v12 = *(_QWORD *)(a1 + 128);
    *(_OWORD *)v68 = 0u;
    *(_OWORD *)v69 = 0u;
    v70 = 1065353216;
    for (k = *(uint64_t **)(v12 + 144); k; k = (uint64_t *)*k)
    {
      if (*((unsigned __int16 *)k + 10) == (_DWORD)v8 && *((_BYTE *)k + 18) != 2)
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)v68, *((_WORD *)k + 8), *((_WORD *)k + 8));
    }
    v14 = *(uint64_t **)(a2 + 16);
    if (!v14)
      goto LABEL_93;
    v15 = (int8x8_t)v68[1];
    if (v68[1])
      break;
    do
      v14 = (uint64_t *)*v14;
    while (v14);
LABEL_93:
    md::PendingSceneLogic::updateSelectionContextMap((int)v8, *(unsigned __int16 **)(a1 + 328), *(unsigned __int16 **)(a1 + 336), 0, (uint64_t)(v11 + 7), v11[13], (uint64_t)v68);
    v53 = v69[0];
    if (v69[0])
    {
      do
      {
        v54 = (_QWORD *)*v53;
        operator delete(v53);
        v53 = v54;
      }
      while (v54);
    }
    v55 = v68[0];
    v68[0] = 0;
    if (v55)
      operator delete(v55);
    if (++v5 == v6)
    {
      v4 = *(_QWORD **)(a1 + 128);
      goto LABEL_98;
    }
  }
LABEL_20:
  v17 = *((unsigned __int16 *)v14 + 8);
  v18 = (uint8x8_t)vcnt_s8(v15);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = *((unsigned __int16 *)v14 + 8);
    if (*(_QWORD *)&v15 <= v17)
      v19 = v17 % *(_QWORD *)&v15;
  }
  else
  {
    v19 = (v15.i32[0] - 1) & v17;
  }
  v20 = (void **)*((_QWORD *)v68[0] + v19);
  if (!v20 || (v21 = (void **)*v20) == 0)
  {
LABEL_90:
    while (1)
    {
      v14 = (uint64_t *)*v14;
      if (!v14)
        goto LABEL_93;
      v15 = (int8x8_t)v68[1];
      if (v68[1])
        goto LABEL_20;
    }
  }
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v24 = (unint64_t)v21[1];
      if (v24 == v17)
      {
        if (*((unsigned __int16 *)v21 + 8) == (_DWORD)v17)
          goto LABEL_40;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_90;
      }
      v21 = (void **)*v21;
      if (!v21)
        goto LABEL_90;
    }
  }
  while (2)
  {
    v23 = (unint64_t)v21[1];
    if (v23 != v17)
    {
      if (v23 >= *(_QWORD *)&v15)
        v23 %= *(_QWORD *)&v15;
      if (v23 != v19)
        goto LABEL_90;
      goto LABEL_29;
    }
    if (*((unsigned __int16 *)v21 + 8) != (_DWORD)v17)
    {
LABEL_29:
      v21 = (void **)*v21;
      if (!v21)
        goto LABEL_90;
      continue;
    }
    break;
  }
LABEL_40:
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)v66 = 0u;
  v67 = 1065353216;
  std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)v65, v17, v17);
  v25 = (unint64_t)v68[1];
  v26 = (unint64_t)v21[1];
  v27 = (uint8x8_t)vcnt_s8((int8x8_t)v68[1]);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] >= 2uLL)
  {
    if ((void *)v26 >= v68[1])
      v26 %= (unint64_t)v68[1];
  }
  else
  {
    v26 &= (unint64_t)v68[1] - 1;
  }
  v28 = (void **)*v21;
  v29 = (void **)*((_QWORD *)v68[0] + v26);
  do
  {
    v30 = v29;
    v29 = (void **)*v29;
  }
  while (v29 != v21);
  if (v30 == v69)
    goto LABEL_57;
  v31 = (unint64_t)v30[1];
  if (v27.u32[0] > 1uLL)
  {
    if ((void *)v31 >= v68[1])
      v31 %= (unint64_t)v68[1];
  }
  else
  {
    v31 &= (unint64_t)v68[1] - 1;
  }
  if (v31 == v26)
  {
LABEL_59:
    if (v28)
    {
      v32 = (unint64_t)v28[1];
      goto LABEL_61;
    }
  }
  else
  {
LABEL_57:
    if (!v28)
      goto LABEL_58;
    v32 = (unint64_t)v28[1];
    if (v27.u32[0] > 1uLL)
    {
      v33 = (unint64_t)v28[1];
      if ((void *)v32 >= v68[1])
        v33 = v32 % (unint64_t)v68[1];
    }
    else
    {
      v33 = v32 & ((unint64_t)v68[1] - 1);
    }
    if (v33 != v26)
    {
LABEL_58:
      *((_QWORD *)v68[0] + v26) = 0;
      v28 = (void **)*v21;
      goto LABEL_59;
    }
LABEL_61:
    if (v27.u32[0] > 1uLL)
    {
      if (v32 >= v25)
        v32 %= v25;
    }
    else
    {
      v32 &= v25 - 1;
    }
    if (v32 != v26)
    {
      *((_QWORD *)v68[0] + v32) = v30;
      v28 = (void **)*v21;
    }
  }
  *v30 = v28;
  --v69[1];
  operator delete(v21);
  v34 = *((_WORD *)v14 + 8);
  LOWORD(v73[0]) = (_WORD)v8;
  v72 = v34;
  v71 = 2;
  v35 = v14[6];
  if (v35)
  {
    (*(void (**)(_QWORD **__return_ptr, uint64_t, void **, __int16 *, char *, unsigned __int16 *))(*(_QWORD *)v35 + 48))(&v64, v35, v73, &v72, &v71, (unsigned __int16 *)v11 + 28);
    v36 = v64;
    if (v64)
    {
      v37 = v11[13];
      v39 = *(unsigned __int16 **)(a1 + 328);
      v38 = *(unsigned __int16 **)(a1 + 336);
      if (v39 != v38)
      {
        while (*v39 != (_DWORD)v8)
        {
          v39 += 16;
          if (v39 == v38)
            goto LABEL_85;
        }
      }
      if (v39 == v38)
      {
LABEL_85:
        v64 = 0;
        (*(void (**)(_QWORD *))(*v36 + 8))(v36);
      }
      else
      {
        v64[8] = v11 + 7;
        v40 = *(_QWORD *)(a1 + 392);
        v41 = *(unsigned __int16 **)(v40 + 112);
        v42 = *(unsigned __int16 **)(v40 + 120);
        if (v41 != v42)
        {
          do
          {
            if (*v41 == (_DWORD)v8)
              goto LABEL_78;
            v41 += 56;
          }
          while (v41 != v42);
          v41 = v42;
        }
LABEL_78:
        v36[9] = v41 + 28;
        v36[7] = 0;
        v36[1] = v37;
        std::unordered_set<unsigned short>::unordered_set((uint64_t)v73, (uint64_t)v65);
        gdc::SelectionContext::setLayerDataTypes((uint64_t)v36, (uint64_t *)v73);
        v43 = __p;
        if (__p)
        {
          do
          {
            v44 = (_QWORD *)*v43;
            operator delete(v43);
            v43 = v44;
          }
          while (v44);
        }
        v45 = v73[0];
        v73[0] = 0;
        if (v45)
          operator delete(v45);
        v46 = v64;
        v64 = 0;
        v47 = operator new(0x18uLL);
        v47[2] = v46;
        v49 = *((_QWORD *)v39 + 1);
        v48 = v39 + 4;
        *v47 = v49;
        v47[1] = v48;
        *(_QWORD *)(v49 + 8) = v47;
        *v48 = v47;
        ++v48[2];
      }
      v50 = v66[0];
      if (v66[0])
      {
        do
        {
LABEL_87:
          v51 = (_QWORD *)*v50;
          operator delete(v50);
          v50 = v51;
        }
        while (v51);
      }
    }
    else
    {
      v64 = 0;
      v50 = v66[0];
      if (v66[0])
        goto LABEL_87;
    }
    v52 = v65[0];
    v65[0] = 0;
    if (v52)
      operator delete(v52);
    goto LABEL_90;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
LABEL_117:
  {
    md::PendingSceneLogic::_prefetchData(md::ResolvedTileSelectionContext const&,md::PendingSceneContext &,long long)::kEmpty = 0;
    *(_QWORD *)algn_1EE5867B8 = 0;
    qword_1EE5867C0 = 0;
    __cxa_atexit((void (*)(void *))geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map, &md::PendingSceneLogic::_prefetchData(md::ResolvedTileSelectionContext const&,md::PendingSceneContext &,long long)::kEmpty, &dword_19F029000);
  }
LABEL_114:
  gdc::LayerDataManager::createDataRequests(a2, v8, (unsigned __int16 **)&md::PendingSceneLogic::_prefetchData(md::ResolvedTileSelectionContext const&,md::PendingSceneContext &,long long)::kEmpty, a3);
}

void sub_19F55E098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (a12)
      (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a13);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  int v11;
  int v12;
  uint64_t *v13;
  const void *v14;
  size_t v15;
  unint64_t v16;
  uint64_t *v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  const void *v22;
  size_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  const void *v40;
  uint64_t *v41;
  uint64_t *v42;

  v6 = *((_QWORD *)a2 + 13);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *((_QWORD *)a2 + 13);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *a2;
        v12 = *((unsigned __int16 *)a2 + 4);
        v13 = (uint64_t *)*((_QWORD *)a2 + 10);
        v14 = (const void *)*((_QWORD *)a2 + 2);
        v15 = *((_QWORD *)a2 + 3) - (_QWORD)v14;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v10[1];
            if (v20 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                v21 = v10[4];
                if ((char *)v10[5] - (char *)v21 == v15)
                {
                  v40 = v14;
                  v42 = v13;
                  v22 = v14;
                  v23 = v15;
                  v24 = memcmp(v21, v22, v15);
                  v15 = v23;
                  v14 = v40;
                  v13 = v42;
                  if (!v24)
                    return;
                }
              }
            }
            else if (((unint64_t)v20 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = (unint64_t)v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              v17 = v10[4];
              if ((char *)v10[5] - (char *)v17 == v15)
              {
                v18 = v15;
                v41 = v13;
                v19 = memcmp(v17, v14, v15);
                v15 = v18;
                v13 = v41;
                if (!v19)
                  return;
              }
            }
          }
          else
          {
            if (v16 >= v7)
              v16 %= v7;
            if (v16 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x80uLL);
  *v26 = 0;
  v26[1] = v6;
  *((_BYTE *)v26 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 3), a3 + 8);
  *((_BYTE *)v26 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v26 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v26 + 112) = 1;
  }
  v26[15] = *(_QWORD *)(a3 + 104);
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v7 || (float)(v28 * (float)v7) < v27)
  {
    v29 = 1;
    if (v7 >= 3)
      v29 = (v7 & (v7 - 1)) != 0;
    v30 = v29 | (2 * v7);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_45;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_45:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v37 = *(_QWORD *)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v26 = *v38;
LABEL_69:
    *v38 = v26;
    goto LABEL_70;
  }
  *v26 = *v25;
  *v25 = v26;
  *(_QWORD *)(v37 + 8 * v3) = v25;
  if (*v26)
  {
    v39 = *(_QWORD *)(*v26 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F55E4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 112))
        *(_BYTE *)(v2 + 112) = 0;
      v3 = *(void **)(v2 + 32);
      if (v3 != *(void **)(v2 + 48))
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>::~pair(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v5;
  void *v6;

  v2 = *(_BYTE **)(a1 + 24);
  if (v2)
  {
    do
    {
      if (v2[112])
        v2[112] = 0;
      v5 = *(_BYTE **)v2;
      v6 = (void *)*((_QWORD *)v2 + 4);
      if (v6 != *((void **)v2 + 6))
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100](uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v5;
  void *v6;

  v2 = *(_BYTE **)(a1 + 16);
  if (v2)
  {
    do
    {
      if (v2[112])
        v2[112] = 0;
      v5 = *(_BYTE **)v2;
      v6 = (void *)*((_QWORD *)v2 + 4);
      if (v6 != *((void **)v2 + 6))
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void gdc::TileSetSelectionContext::~TileSetSelectionContext(gdc::TileSetSelectionContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42B0978;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    operator delete(v4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42B0978;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::SelectionContext::~SelectionContext(gdc::SelectionContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42B0978;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    operator delete(v4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42B0978;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x1A1AF4E00);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  size_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t *j;
  size_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t *i;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = *(unsigned __int16 *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = v10;
    else
      prime = v9;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v5)
      goto LABEL_105;
    if (prime >= v5)
      goto LABEL_40;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = operator new(8 * prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v14 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      v16 = a1 + 16;
      v15 = *(uint64_t ***)(a1 + 16);
      if (v15)
      {
        v17 = (size_t)v15[1];
        v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime)
            v17 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
          for (i = *v15; *v15; i = *v15)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v17)
            {
              v15 = (uint64_t **)i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (uint64_t *)*v38;
                }
                while (v38 && *((unsigned __int16 *)i + 8) == *((unsigned __int16 *)v38 + 8));
                *v15 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v15;
                v15 = (uint64_t **)i;
                v17 = v37;
              }
            }
          }
        }
        else
        {
          v19 = v17 & v18;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
          for (j = *v15; *v15; j = *v15)
          {
            v21 = j[1] & v18;
            if (v21 == v19)
            {
              v15 = (uint64_t **)j;
            }
            else
            {
              v22 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
              {
                do
                {
                  v23 = v22;
                  v22 = (uint64_t *)*v22;
                }
                while (v22 && *((unsigned __int16 *)j + 8) == *((unsigned __int16 *)v22 + 8));
                *v15 = v22;
                v24 = 8 * v21;
                *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
                **(_QWORD **)(*(_QWORD *)a1 + v24) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
                v15 = (uint64_t **)j;
                v19 = v21;
              }
            }
          }
        }
      }
      v5 = prime;
    }
    else
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    v41 = v4;
    if (v5 <= v4)
      v41 = v4 % v5;
    v42 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v41);
    if (!v42)
    {
      v35 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      if (v48 < v5)
        goto LABEL_78;
      goto LABEL_77;
    }
    v43 = 0;
    do
    {
      v35 = v42;
      v42 = (uint64_t *)*v42;
      if (!v42)
        break;
      v46 = v42[1];
      v47 = v46;
      if (v46 >= v5)
        v47 = v46 % v5;
      if (v47 != v41)
        break;
      v44 = v46 == v4 && *((unsigned __int16 *)v42 + 8) == *(unsigned __int16 *)(a2 + 16);
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v30 = (v5 - 1) & v4;
    v31 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v30);
    if (!v31)
    {
      v35 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      goto LABEL_75;
    }
    v32 = 0;
    do
    {
      v35 = v31;
      v31 = (uint64_t *)*v31;
      if (!v31)
        break;
      v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30)
        break;
      v33 = v36 == v4 && *((unsigned __int16 *)v31 + 8) == *(unsigned __int16 *)(a2 + 16);
      v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  v48 = *(_QWORD *)(a2 + 8);
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5)
LABEL_77:
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_92;
    v49 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *(_QWORD *)a2 = *v35;
  *v35 = a2;
  if (*(_QWORD *)a2)
  {
    v49 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

void geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::clear(_QWORD *a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t i;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  void *v11;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (_BYTE *)a1[1];
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != (_BYTE *)a1)
    {
      do
      {
        if (v3[112])
          v3[112] = 0;
        v8 = (_BYTE *)*((_QWORD *)v3 + 1);
        v9 = (void *)*((_QWORD *)v3 + 4);
        if (v9 != *((void **)v3 + 6))
          free(v9);
        operator delete(v3);
        v3 = v8;
      }
      while (v8 != (_BYTE *)a1);
    }
  }
  if (a1[6])
  {
    v5 = (_BYTE *)a1[5];
    if (v5)
    {
      do
      {
        if (v5[112])
          v5[112] = 0;
        v10 = *(_BYTE **)v5;
        v11 = (void *)*((_QWORD *)v5 + 4);
        if (v11 != *((void **)v5 + 6))
          free(v11);
        operator delete(v5);
        v5 = v10;
      }
      while (v10);
    }
    a1[5] = 0;
    v6 = a1[4];
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(a1[3] + 8 * i) = 0;
    }
    a1[6] = 0;
  }
  a1[8] = a1;
  a1[9] = 0;
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE5D0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE5D0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SceneLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE588;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE588;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_117;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x64780CBD71DF7CF5;
    if (a3 <= 0x64780CBD71DF7CF5)
      v4 = 0x64780CBD71DF7CF5 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x64780CBD71DF7CF5;
  }
  v9 = *(_QWORD **)(a2 + 8 * v4);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x64780CBD71DF7CF5)
      {
        if (v10[2] == 0x64780CBD71DF7CF5)
          goto LABEL_23;
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x64780CBD71DF7CF5)
      break;
    if (v11 >= a3)
      v11 %= a3;
    if (v11 != v4)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x64780CBD71DF7CF5)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x64780CBD71DF7CF5)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v14 = 0x8677AD8BA9352C1DLL;
    if (a3 <= 0x8677AD8BA9352C1DLL)
      v14 = 0x8677AD8BA9352C1DLL % a3;
  }
  else
  {
    v14 = (a3 - 1) & 0x8677AD8BA9352C1DLL;
  }
  v15 = *(_QWORD **)(a2 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x8677AD8BA9352C1DLL)
      {
        if (v16[2] == 0x8677AD8BA9352C1DLL)
          goto LABEL_46;
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0x8677AD8BA9352C1DLL)
    {
      if (v17 >= a3)
        v17 %= a3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x8677AD8BA9352C1DLL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x8677AD8BA9352C1DLL)
  {
    v6 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v20 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v20 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v20 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v21 = *(_QWORD **)(a2 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0x1AF456233693CD46)
      {
        if (v22[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v23 = v22[1];
    if (v23 != 0x1AF456233693CD46)
    {
      if (v23 >= a3)
        v23 %= a3;
      if (v23 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0x1AF456233693CD46)
  {
    v8 = *(_QWORD *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v26 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4)
      v26 = 0xC97B9E962ADF4AD4 % a3;
  }
  else
  {
    v26 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  v27 = *(_QWORD **)(a2 + 8 * v26);
  if (!v27)
    goto LABEL_94;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == 0xC97B9E962ADF4AD4)
      {
        if (v28[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_92;
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v29 = v28[1];
    if (v29 != 0xC97B9E962ADF4AD4)
    {
      if (v29 >= a3)
        v29 %= a3;
      if (v29 != v26)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v28[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_81:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0xC97B9E962ADF4AD4)
  {
    v5 = *(_QWORD *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v32 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988)
      v32 = 0x7851AF310F49C988 % a3;
  }
  else
  {
    v32 = (a3 - 1) & 0x7851AF310F49C988;
  }
  v33 = *(_QWORD **)(a2 + 8 * v32);
  if (!v33)
    goto LABEL_117;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == 0x7851AF310F49C988)
      {
        if (v34[2] == 0x7851AF310F49C988)
          goto LABEL_115;
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_117;
    }
  }
  while (1)
  {
    v35 = v34[1];
    if (v35 == 0x7851AF310F49C988)
      break;
    if (v35 >= a3)
      v35 %= a3;
    if (v35 != v32)
      goto LABEL_117;
LABEL_104:
    v34 = (_QWORD *)*v34;
    if (!v34)
      goto LABEL_117;
  }
  if (v34[2] != 0x7851AF310F49C988)
    goto LABEL_104;
LABEL_115:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0x7851AF310F49C988)
  {
LABEL_117:
    v38 = 0;
    goto LABEL_118;
  }
  v38 = *(_QWORD *)(v37 + 32);
LABEL_118:
  *result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::PendingSceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E42B0FA0;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x60C40149E097CLL);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::PendingSceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42B0FA0;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    MEMORY[0x1A1AF4E00](v1, 0x60C40149E097CLL);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::PendingSceneContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F55F8F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 392);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 352);
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map((void **)(v1 + 328));
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map((void **)(v1 + 304));
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map((void **)(v1 + 280));
  v3 = *(_QWORD *)(v1 + 272);
  *(_QWORD *)(v1 + 272) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v1 + 264) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>>::~unique_ptr[abi:nn180100]((_QWORD **)(v1 + 216));
  geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map((void **)(v1 + 192));
  geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map((void **)(v1 + 168));
  v5 = *(void **)(v1 + 144);
  if (v5)
  {
    *(_QWORD *)(v1 + 152) = v5;
    operator delete(v5);
  }
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

_QWORD *geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::~MarkedLRUCache(_QWORD *a1)
{
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  void *v11;

  v2 = (_BYTE *)a1[5];
  if (v2)
  {
    do
    {
      if (v2[112])
        v2[112] = 0;
      v8 = *(_BYTE **)v2;
      v9 = (void *)*((_QWORD *)v2 + 4);
      if (v9 != *((void **)v2 + 6))
        free(v9);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = (void *)a1[3];
  a1[3] = 0;
  if (v3)
    operator delete(v3);
  if (a1[2])
  {
    v4 = *a1;
    v5 = (_BYTE *)a1[1];
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != (_BYTE *)a1)
    {
      do
      {
        if (v5[112])
          v5[112] = 0;
        v10 = (_BYTE *)*((_QWORD *)v5 + 1);
        v11 = (void *)*((_QWORD *)v5 + 4);
        if (v11 != *((void **)v5 + 6))
          free(v11);
        operator delete(v5);
        v5 = v10;
      }
      while (v10 != (_BYTE *)a1);
    }
  }
  return a1;
}

void **geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_QWORD *)v3 - 1))
        {
          v5 = *((_QWORD *)v3 - 3);
          v6 = (uint64_t *)*((_QWORD *)v3 - 2);
          v7 = *v6;
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
          **(_QWORD **)(v5 + 8) = v7;
          *((_QWORD *)v3 - 1) = 0;
          if (v6 != (uint64_t *)(v3 - 24))
          {
            do
            {
              v9 = (char *)v6[1];
              v8 = v6[2];
              v6[2] = 0;
              if (v8)
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
              operator delete(v6);
              v6 = (uint64_t *)v9;
            }
            while (v9 != v3 - 24);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD **std::unique_ptr<geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>>::~unique_ptr[abi:nn180100](_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::~MarkedLRUCache(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40F417E19ELL);
  }
  return a1;
}

uint64_t *std::list<std::unique_ptr<gdc::SelectionContext>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::emplace<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>(unsigned __int16 **a1, unsigned __int16 a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unsigned __int16 *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  v54 = &v54;
  v55 = &v54;
  v56 = 0;
  v4 = a3[2];
  if (v4)
  {
    v6 = (_QWORD *)*a3;
    v5 = (uint64_t *)a3[1];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    *(_QWORD *)v6[1] = v7;
    v8 = v54;
    v54[1] = v5;
    *v5 = (uint64_t)v8;
    v54 = v6;
    v6[1] = &v54;
    v56 = v4;
    a3[2] = 0;
    v9 = v4;
  }
  else
  {
    v9 = 0;
    v6 = &v54;
  }
  v12 = *a1;
  v11 = a1[1];
  v13 = *a1;
  if (*a1 != v11)
  {
    while (*v13 != a2)
    {
      v13 += 16;
      if (v13 == v11)
        goto LABEL_9;
    }
  }
  if (v13 != v11)
  {
LABEL_13:
    if (!v4)
      return;
    goto LABEL_45;
  }
LABEL_9:
  v14 = a1[2];
  if (v11 < v14)
  {
    *v11 = a2;
    *((_QWORD *)v11 + 1) = v11 + 4;
    *((_QWORD *)v11 + 2) = v11 + 4;
    *((_QWORD *)v11 + 3) = 0;
    v15 = v56;
    if (v56)
    {
      v17 = v54;
      v16 = v55;
      v18 = *v55;
      *(_QWORD *)(v18 + 8) = v54[1];
      *(_QWORD *)v17[1] = v18;
      v19 = *((_QWORD *)v11 + 1);
      *(_QWORD *)(v19 + 8) = v16;
      *v16 = v19;
      *((_QWORD *)v11 + 1) = v17;
      v17[1] = v11 + 4;
      *((_QWORD *)v11 + 3) = v15;
    }
    v4 = 0;
    a1[1] = v11 + 16;
    goto LABEL_13;
  }
  v20 = ((char *)v11 - (char *)v12) >> 5;
  v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 59)
    abort();
  v22 = (char *)v14 - (char *)v12;
  if (v22 >> 4 > v21)
    v21 = v22 >> 4;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
    v23 = 0x7FFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
  {
    if (v23 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = (char *)operator new(32 * v23);
  }
  else
  {
    v24 = 0;
  }
  v25 = &v24[32 * v20];
  *(_WORD *)v25 = a2;
  v26 = (uint64_t *)(v25 + 8);
  *(int64x2_t *)(v25 + 8) = vdupq_n_s64((unint64_t)(v25 + 8));
  *((_QWORD *)v25 + 3) = 0;
  if (v9)
  {
    v27 = v55;
    v28 = *v55;
    *(_QWORD *)(v28 + 8) = v6[1];
    *(_QWORD *)v6[1] = v28;
    v29 = *v26;
    *(_QWORD *)(v29 + 8) = v27;
    *v27 = v29;
    *v26 = (uint64_t)v6;
    v6[1] = v26;
    *((_QWORD *)v25 + 3) = v9;
    v56 = 0;
  }
  v30 = &v24[32 * v23];
  v31 = v25 + 32;
  if (v12 != v11)
  {
    v32 = 0;
    do
    {
      v33 = &v25[v32 * 2];
      v34 = &v11[v32];
      *((_WORD *)v33 - 16) = v11[v32 - 16];
      v35 = &v25[v32 * 2 - 24];
      *((_QWORD *)v33 - 3) = v35;
      *((_QWORD *)v33 - 2) = v35;
      *((_QWORD *)v33 - 1) = 0;
      v36 = *(_QWORD *)&v11[v32 - 4];
      if (v36)
      {
        v38 = *((_QWORD *)v34 - 3);
        v37 = (uint64_t *)*((_QWORD *)v34 - 2);
        v39 = *v37;
        *(_QWORD *)(v39 + 8) = *(_QWORD *)(v38 + 8);
        **(_QWORD **)(v38 + 8) = v39;
        v40 = *(_QWORD *)v35;
        *(_QWORD *)(v40 + 8) = v37;
        *v37 = v40;
        *(_QWORD *)v35 = v38;
        *(_QWORD *)(v38 + 8) = v35;
        *((_QWORD *)v33 - 1) = v36;
        *((_QWORD *)v34 - 1) = 0;
      }
      v32 -= 16;
    }
    while (&v11[v32] != v12);
    v25 += v32 * 2;
  }
  v41 = *a1;
  v42 = a1[1];
  *a1 = (unsigned __int16 *)v25;
  a1[1] = (unsigned __int16 *)v31;
  a1[2] = (unsigned __int16 *)v30;
  while (v42 != v41)
  {
    if (*((_QWORD *)v42 - 1))
    {
      v43 = *((_QWORD *)v42 - 3);
      v44 = (unsigned __int16 *)*((_QWORD *)v42 - 2);
      v45 = *(_QWORD *)v44;
      *(_QWORD *)(v45 + 8) = *(_QWORD *)(v43 + 8);
      **(_QWORD **)(v43 + 8) = v45;
      *((_QWORD *)v42 - 1) = 0;
      if (v44 != v42 - 12)
      {
        do
        {
          v47 = (unsigned __int16 *)*((_QWORD *)v44 + 1);
          v46 = *((_QWORD *)v44 + 2);
          *((_QWORD *)v44 + 2) = 0;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          operator delete(v44);
          v44 = v47;
        }
        while (v47 != v42 - 12);
      }
    }
    v42 -= 16;
  }
  if (v41)
    operator delete(v41);
  v48 = v56;
  a1[1] = (unsigned __int16 *)v31;
  if (v48)
  {
LABEL_45:
    v49 = v54;
    v50 = v55;
    v51 = *v55;
    *(_QWORD *)(v51 + 8) = v54[1];
    *(_QWORD *)v49[1] = v51;
    v56 = 0;
    if (v50 != &v54)
    {
      do
      {
        v53 = (_QWORD *)v50[1];
        v52 = v50[2];
        v50[2] = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        operator delete(v50);
        v50 = v53;
      }
      while (v53 != &v54);
    }
  }
}

void sub_19F55FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>::~pair(&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE660;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 136);
  if (v1)
  {
    v2 = 8;
    md::MapEngine::setNeedsTick(v1, &v2);
  }
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE618;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE618;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 136);
  if (v1)
  {
    v2 = 8;
    md::MapEngine::setNeedsTick(v1, &v2);
  }
}

_QWORD *std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>::~pair(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;

  if (a1[3])
  {
    v2 = a1 + 1;
    v3 = a1[1];
    v4 = (uint64_t *)a1[2];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[3] = 0;
    if (v4 != a1 + 1)
    {
      do
      {
        v8 = (uint64_t *)v4[1];
        v7 = v4[2];
        v4[2] = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        operator delete(v4);
        v4 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<md::SceneStateManager *,std::shared_ptr<md::SceneStateManager>::__shared_ptr_default_delete<md::SceneStateManager,md::SceneStateManager>,std::allocator<md::SceneStateManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::SceneStateManager *,std::shared_ptr<md::SceneStateManager>::__shared_ptr_default_delete<md::SceneStateManager,md::SceneStateManager>,std::allocator<md::SceneStateManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void altitude::OverlayTileComponent::~OverlayTileComponent(std::__shared_weak_count **this)
{
  altitude::OverlayTileComponent::~OverlayTileComponent(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t shared_owners;

  *this = (std::__shared_weak_count *)&off_1E42C5950;
  altitude::OverlayTileComponent::destroyOverlayElementsAndData((altitude::OverlayTileComponent *)this);
  v2 = this[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = this[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = this[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = this[14];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = this[12];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = this[12];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  *this = (std::__shared_weak_count *)off_1E42C4248;
  v14 = this[6];
  v15 = this[7];
  if (v14 == v15)
  {
    if (v14)
    {
LABEL_23:
      this[7] = v14;
      operator delete(v14);
    }
  }
  else
  {
    do
    {
      shared_owners = v14->__shared_owners_;
      if (shared_owners)
        (*(void (**)(uint64_t))(*(_QWORD *)shared_owners + 8))(shared_owners);
      v14 = (std::__shared_weak_count *)((char *)v14 + 16);
    }
    while (v14 != v15);
    v14 = this[6];
    if (v14)
      goto LABEL_23;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[4]);
}

uint64_t altitude::TileComponent::setRenderStamp(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 72) = a2;
  return this;
}

uint64_t altitude::TileComponent::renderStamp(altitude::TileComponent *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t altitude::OverlayTileComponent::hasLoadedData(altitude::OverlayTileComponent *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 168))
  {
    result = *((_QWORD *)this + 11) != 0;
    if (!*((_BYTE *)this + 169))
      return result;
  }
  else
  {
    result = 1;
    if (!*((_BYTE *)this + 169))
      return result;
  }
  if (*((_QWORD *)this + 13))
    return result;
  else
    return 0;
}

uint64_t altitude::OverlayTileComponent::hasLoadedFallbackData(altitude::OverlayTileComponent *this)
{
  return 0;
}

uint64_t altitude::OverlayTileComponent::needsFallbackData(altitude::OverlayTileComponent *this)
{
  return 0;
}

double *altitude::OverlayTileComponent::willBeDrawn(double *result, uint64_t a2, double *a3)
{
  double *v4;
  uint64_t v5;
  char v6;
  char v7;
  double v8;
  double **v9;
  double **v10;
  double *v11;
  _QWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;

  v4 = result;
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = v4[2 * v5 + 11];
    if (v8 != 0.0)
    {
      v9 = *(double ***)(*(_QWORD *)&v8 + 48);
      v10 = *(double ***)(*(_QWORD *)&v8 + 56);
      while (v9 != v10)
      {
        v11 = *v9;
        v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)*v9 + 24) + 64) + 16);
        v13 = v12[1];
        if (v13)
          v14 = (_DWORD *)v12[9];
        else
          v14 = 0;
        v16 = a3[10];
        v15 = a3[11];
        v17 = a3[12];
        v18 = a3[9];
        v87 = a3[8];
        v20 = a3[6];
        v19 = a3[7];
        v77 = -(v87 * v16 - v19 * v15) - (v87 * v16 - v19 * v15);
        v78 = -(v20 * v15 - v87 * v18) - (v20 * v15 - v87 * v18);
        v79 = v20;
        v80 = -(v19 * v18 - v20 * v16) - (v19 * v18 - v20 * v16);
        v81 = v19;
        v21 = -(v16 * (v16 * -2.0));
        v22 = v15 * -2.0 * v17;
        v85 = -(v16 * (v18 * -2.0)) - v22;
        v86 = 1.0 - (v21 - v15 * (v15 * -2.0));
        v23 = v17 * (v16 * -2.0);
        v24 = v22 - v16 * (v18 * -2.0);
        v25 = v18 * -2.0 * v18 + 1.0;
        v26 = v25 - -(v15 * (v15 * -2.0));
        v27 = v17 * (v18 * -2.0);
        v82 = -(v15 * (v16 * -2.0)) - v27;
        v83 = v23 - v15 * (v18 * -2.0);
        v28 = -(v15 * (v18 * -2.0)) - v23;
        v29 = v27 - v15 * (v16 * -2.0);
        v84 = v25 - v21;
        result = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v11 + 24))(v11);
        v30 = v11[31];
        v31 = result[4];
        v32 = result[5];
        v33 = result[6];
        v34 = v31 + v31;
        v35 = (v31 + v31) * v31;
        v36 = (v32 + v32) * v32;
        v37 = v35 + v36;
        v38 = result[2];
        v39 = result[3];
        v40 = v39 + v39;
        v41 = (v39 + v39) * v31;
        v42 = (v32 + v32) * v33;
        v43 = v41 - v42;
        v44 = v42 + v41;
        v45 = v32 * (v39 + v39);
        v46 = v34 * v32;
        v47 = v33 * v34;
        v48 = 1.0 - (v39 + v39) * v39;
        v49 = v33 * v40;
        v50 = v48 - v36;
        v51 = v48 - v35;
        v52 = (v47 + v45) * v30;
        v53 = (v46 - v49) * v30;
        v54 = v51 * v30;
        v55 = -(v81 + v78 * v17 + v80 * v18 - v77 * v15);
        v56 = v11[29];
        v57 = v11[30];
        v58 = -(v79 + v77 * v17 + v78 * v15 - v80 * v16);
        v59 = result[1];
        v60 = v56 - v37 * v56;
        v61 = v43 * v57;
        v62 = v44 * v56;
        v63 = v50 * v57;
        v64 = v60 * v86 + v62 * v85;
        v65 = v61 * v86 + v63 * v85;
        v66 = v60 * v24 + v62 * v26;
        v67 = v61 * v24 + v63 * v26;
        v68 = v61 * v28 + v63 * v29;
        v69 = v49 + v46;
        v70 = (v45 - v47) * v56;
        v71 = v69 * v57;
        v72 = v58 + *result * v86 + v59 * v85 + v38 * v83;
        v73 = v55 + *result * v24 + v59 * v26 + v38 * v82;
        v74 = v60 * v28 + v62 * v29 + v70 * v84;
        v75 = *result * v28 - (v87 + v77 * v16 + v80 * v17 - v78 * v18) + v59 * v29 + v38 * v84;
        *(float *)&v62 = v64 + v70 * v83;
        *(float *)&v70 = v66 + v70 * v82;
        *v14 = LODWORD(v62);
        v14[1] = LODWORD(v70);
        *(float *)&v74 = v74;
        v14[2] = LODWORD(v74);
        *(float *)&v74 = v65 + v71 * v83;
        *(float *)&v62 = v67 + v71 * v82;
        v14[4] = LODWORD(v74);
        v14[5] = LODWORD(v62);
        *(float *)&v74 = v68 + v71 * v84;
        v14[6] = LODWORD(v74);
        *(float *)&v74 = v54 * v83 + v52 * v86 + v53 * v85;
        *(float *)&v62 = v54 * v82 + v52 * v24 + v53 * v26;
        v14[8] = LODWORD(v74);
        v14[9] = LODWORD(v62);
        *(float *)&v74 = v54 * v84 + v52 * v28 + v53 * v29;
        v14[10] = LODWORD(v74);
        *(float *)&v74 = v72;
        *(float *)&v54 = v73;
        v14[12] = LODWORD(v74);
        v14[13] = LODWORD(v54);
        *(float *)&v75 = v75;
        v14[14] = LODWORD(v75);
        v14[3] = 0;
        v14[7] = 0;
        v14[11] = 0;
        v14[15] = 1065353216;
        if (v13)
        {
          v76 = v12[8];
          if (v76 <= v13)
            v76 = v13;
          v12[7] = 0;
          v12[8] = v76;
        }
        ++v9;
      }
    }
    v6 = 0;
    v5 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t altitude::OverlayTileComponent::collectRenderItems(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v7 = result;
  v8 = *(_QWORD *)(result + 88);
  if (v8)
  {
    v9 = *(_QWORD **)(a3 + 8);
    v11 = v9[3];
    v10 = v9[4];
    if (v10 == v11)
      goto LABEL_9;
    v12 = 0;
    while (1)
    {
      v13 = *(unsigned __int8 **)(v11 + 8 * v12);
      if (*v13 == *(_WORD *)(*(_QWORD *)(a6 + 8) + 28))
      {
        v14 = *((_QWORD *)v13 + 1);
        v15 = v9[15];
        if (v14 < (v9[16] - v15) >> 3)
          break;
      }
      if (++v12 >= (unint64_t)((v10 - v11) >> 3))
        goto LABEL_9;
    }
    v16 = *(_QWORD *)(v15 + 8 * v14);
    if (!v16)
LABEL_9:
      v17 = 0;
    else
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(a6 + 8) + 28)));
    v18 = *(_QWORD *)(v8 + 48);
    v19 = *(_QWORD *)(v8 + 56);
    if (v18 != v19)
    {
      while (1)
      {
        if (!*(_BYTE *)(*(_QWORD *)v18 + 180))
          goto LABEL_14;
        v21 = *(_QWORD *)(*(_QWORD *)v18 + 184);
        v22 = *(_QWORD **)(v17 + 80);
        v23 = *(_QWORD *)(v17 + 88);
        if ((unint64_t)v22 >= v23)
          break;
        if (v22)
          *v22 = v21;
        v20 = v22 + 1;
LABEL_13:
        *(_QWORD *)(v17 + 80) = v20;
LABEL_14:
        v18 += 8;
        if (v18 == v19)
          goto LABEL_41;
      }
      v24 = *(_QWORD *)(v17 + 72);
      v25 = ((uint64_t)v22 - v24) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
LABEL_82:
        abort();
      v27 = v23 - v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      if (v26)
      {
        v28 = 8 * v26;
        result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v17 + 96) + 16))(*(_QWORD *)(v17 + 96), 8 * v26, 8);
        v29 = (_QWORD *)(result + 8 * v25);
        v26 = result + v28;
        if (result)
          *v29 = v21;
      }
      else
      {
        v29 = (_QWORD *)(8 * v25);
      }
      v31 = *(_QWORD *)(v17 + 72);
      v30 = *(_QWORD *)(v17 + 80);
      v32 = v30 - v31;
      if (v30 == v31)
      {
        v34 = v29;
        goto LABEL_39;
      }
      v33 = v32 - 8;
      if ((unint64_t)(v32 - 8) < 0x38)
      {
        v34 = v29;
      }
      else
      {
        v34 = v29;
        if ((unint64_t)(v30 - (_QWORD)v29) >= 0x20)
        {
          v35 = (v33 >> 3) + 1;
          v36 = v29 - 2;
          v37 = (__int128 *)(v30 - 16);
          v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          v34 = &v29[-(v35 & 0x3FFFFFFFFFFFFFFCLL)];
          v30 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_38;
        }
      }
      do
      {
        v40 = *(_QWORD *)(v30 - 8);
        v30 -= 8;
        *--v34 = v40;
      }
      while (v30 != v31);
LABEL_38:
      v30 = *(_QWORD *)(v17 + 72);
LABEL_39:
      v20 = v29 + 1;
      *(_QWORD *)(v17 + 72) = v34;
      *(_QWORD *)(v17 + 80) = v29 + 1;
      v41 = *(_QWORD *)(v17 + 88);
      *(_QWORD *)(v17 + 88) = v26;
      if (v30)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 96) + 40))(*(_QWORD *)(v17 + 96), v30, v41 - v30);
      goto LABEL_13;
    }
  }
LABEL_41:
  v42 = *(_QWORD *)(v7 + 104);
  if (v42)
  {
    v43 = *(_QWORD **)(a3 + 8);
    v45 = v43[3];
    v44 = v43[4];
    if (v44 == v45)
      goto LABEL_49;
    v46 = 0;
    while (1)
    {
      v47 = *(unsigned __int8 **)(v45 + 8 * v46);
      if (*v47 == *(_WORD *)(*(_QWORD *)(a6 + 8) + 32))
      {
        v48 = *((_QWORD *)v47 + 1);
        v49 = v43[15];
        if (v48 < (v43[16] - v49) >> 3)
          break;
      }
      if (++v46 >= (unint64_t)((v44 - v45) >> 3))
        goto LABEL_49;
    }
    v50 = *(_QWORD *)(v49 + 8 * v48);
    if (!v50)
LABEL_49:
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(a6 + 8) + 32)));
    v52 = *(_QWORD *)(v42 + 48);
    v53 = *(_QWORD *)(v42 + 56);
    if (v52 != v53)
    {
      while (1)
      {
        if (!*(_BYTE *)(*(_QWORD *)v52 + 180))
          goto LABEL_54;
        v55 = *(_QWORD *)(*(_QWORD *)v52 + 184);
        v56 = *(_QWORD **)(v51 + 80);
        v57 = *(_QWORD *)(v51 + 88);
        if ((unint64_t)v56 >= v57)
          break;
        if (v56)
          *v56 = v55;
        v54 = v56 + 1;
LABEL_53:
        *(_QWORD *)(v51 + 80) = v54;
LABEL_54:
        v52 += 8;
        if (v52 == v53)
          return result;
      }
      v58 = *(_QWORD *)(v51 + 72);
      v59 = ((uint64_t)v56 - v58) >> 3;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61)
        goto LABEL_82;
      v61 = v57 - v58;
      if (v61 >> 2 > v60)
        v60 = v61 >> 2;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      if (v60)
      {
        v62 = 8 * v60;
        result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v51 + 96) + 16))(*(_QWORD *)(v51 + 96), 8 * v60, 8);
        v63 = (_QWORD *)(result + 8 * v59);
        v60 = result + v62;
        if (result)
          *v63 = v55;
      }
      else
      {
        v63 = (_QWORD *)(8 * v59);
      }
      v65 = *(_QWORD *)(v51 + 72);
      v64 = *(_QWORD *)(v51 + 80);
      v66 = v64 - v65;
      if (v64 == v65)
      {
        v68 = v63;
        goto LABEL_79;
      }
      v67 = v66 - 8;
      if ((unint64_t)(v66 - 8) < 0x38)
      {
        v68 = v63;
      }
      else
      {
        v68 = v63;
        if ((unint64_t)(v64 - (_QWORD)v63) >= 0x20)
        {
          v69 = (v67 >> 3) + 1;
          v70 = v63 - 2;
          v71 = (__int128 *)(v64 - 16);
          v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v73 = *v71;
            *(v70 - 1) = *(v71 - 1);
            *v70 = v73;
            v70 -= 2;
            v71 -= 2;
            v72 -= 4;
          }
          while (v72);
          v68 = &v63[-(v69 & 0x3FFFFFFFFFFFFFFCLL)];
          v64 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_78;
        }
      }
      do
      {
        v74 = *(_QWORD *)(v64 - 8);
        v64 -= 8;
        *--v68 = v74;
      }
      while (v64 != v65);
LABEL_78:
      v64 = *(_QWORD *)(v51 + 72);
LABEL_79:
      v54 = v63 + 1;
      *(_QWORD *)(v51 + 72) = v68;
      *(_QWORD *)(v51 + 80) = v63 + 1;
      v75 = *(_QWORD *)(v51 + 88);
      *(_QWORD *)(v51 + 88) = v60;
      if (v64)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v51 + 96) + 40))(*(_QWORD *)(v51 + 96), v64, v75 - v64);
      goto LABEL_53;
    }
  }
  return result;
}

uint64_t altitude::TileComponent::prepareTileSetOperation()
{
  return 1;
}

BOOL altitude::OverlayTileComponent::destroyOverlayElementsAndData(altitude::OverlayTileComponent *this)
{
  uint64_t v2;
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 11);
  v3 = v2 != 0;
  if (v2)
  {
    v11 = 0;
    v12 = 0;
    altitude::OverlayTileComponent::setOverlayElement((uint64_t)this, 0, &v11);
  }
  if (*((_QWORD *)this + 15))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::OverlayTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                           + 424)
                                                                             + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (*((_QWORD *)this + 15))
        (*(void (**)(_QWORD, _QWORD, altitude::OverlayTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                               + 424)
                                                                                 + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    }
    v3 = 1;
  }
  *((_BYTE *)this + 168) = 1;
  if (*((_QWORD *)this + 13))
  {
    v11 = 0;
    v12 = 0;
    v3 = 1;
    altitude::OverlayTileComponent::setOverlayElement((uint64_t)this, 1u, &v11);
  }
  if (*((_QWORD *)this + 17))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::OverlayTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                           + 424)
                                                                             + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (*((_QWORD *)this + 17))
        (*(void (**)(_QWORD, _QWORD, altitude::OverlayTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                               + 424)
                                                                                 + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    }
    v3 = 1;
  }
  *((_BYTE *)this + 169) = 1;
  return v3;
}

void altitude::OverlayTileComponent::setOverlayElement(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count **v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  v6 = a1 + 16 * a2;
  v9 = *(_QWORD *)(v6 + 88);
  v8 = (_QWORD *)(v6 + 88);
  v7 = v9;
  v11 = (std::__shared_weak_count **)(v8 + 1);
  v10 = (std::__shared_weak_count *)v8[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v7)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 424), *(_QWORD *)(a1 + 16), a1);
  v15 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = a2;
  *v8 = v15;
  v19 = *v11;
  *v11 = v14;
  if (!v19)
    goto LABEL_13;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = *a3;
    if (!*a3)
      goto LABEL_19;
  }
  else
  {
LABEL_13:
    v22 = *a3;
    if (!*a3)
    {
LABEL_19:
      v25 = 0;
      goto LABEL_20;
    }
  }
  v23 = *(uint64_t **)(v22 + 48);
  v24 = *(uint64_t **)(v22 + 56);
  if (v23 == v24)
    goto LABEL_19;
  v25 = 0;
  do
  {
    v26 = *v23++;
    v27 = *(_QWORD *)(v26 + 216);
    v25 += (*(_QWORD *)(**(_QWORD **)(v27 + 64) + 48) - *(_QWORD *)(**(_QWORD **)(v27 + 64) + 40))
         * *(_QWORD *)(**(_QWORD **)(v27 + 64) + 8)
         + (*(_QWORD *)(*(_QWORD *)(v27 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(v27 + 96) + 40))
         * *(_QWORD *)(*(_QWORD *)(v27 + 96) + 8);
  }
  while (v23 != v24);
LABEL_20:
  *(_QWORD *)(a1 + 8 * v18 + 152) = v25;
  if (*v8)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 424), *(_QWORD *)(a1 + 16), a1);
  if (v10)
  {
    v28 = (unint64_t *)&v10->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t karo::media::ImageLoader::loadFromChunk(int *a1, pwin_jpg *this, unsigned __int8 *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  int v12;
  unsigned __int16 *v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned __int16 *v18;
  int v20;
  int v21;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  int *v38;
  unsigned __int8 *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  ggl::Data *v42;
  uint64_t v43;
  ggl::Data **v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  uint64_t v57;

  result = 0;
  v57 = *MEMORY[0x1E0C80C00];
  if (this && a3)
  {
    if ((unint64_t)a3 >= 0xB
      && *(unsigned __int8 *)this == 255
      && *((unsigned __int8 *)this + 1) == 216
      && *((unsigned __int8 *)this + 2) == 255
      && *((unsigned __int8 *)this + 3) == 224
      && *((_BYTE *)this + 6) == 74
      && *((_BYTE *)this + 7) == 70
      && *((_BYTE *)this + 8) == 73
      && *((_BYTE *)this + 9) == 70
      && !*((_BYTE *)this + 10))
    {
      goto LABEL_56;
    }
    v11 = *((unsigned __int8 *)a4 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *((_QWORD *)a4 + 1);
    if (v11 != 3)
      goto LABEL_39;
    v13 = *(unsigned __int16 **)a4;
    if (v12 >= 0)
      v13 = a4;
    v14 = *v13 == 28778 && *((_BYTE *)v13 + 2) == 103;
    if (v14 || ((v15 = *v13, v16 = *((unsigned __int8 *)v13 + 2), v15 == 20554) ? (v17 = v16 == 71) : (v17 = 0), v17))
    {
LABEL_56:
      if ((karo::media::JpegLoaderFig::loadFromChunk(a1, this, a3, a5, (int *)a5) & 1) != 0)
        return 1;
      return karo::media::JpegLoaderPwin::loadFromChunk(a1, this, a3, a5, v33);
    }
    else
    {
LABEL_39:
      if (*(_DWORD *)this == 1196314761 && *((_DWORD *)this + 1) == 169478669)
        return (uint64_t)karo::media::PngLoader::loadFromChunk(a1, this, (size_t)a3, a5);
      if (v11 == 3)
      {
        v18 = v12 >= 0 ? a4 : *(unsigned __int16 **)a4;
        if (*v18 == 28272 && *((_BYTE *)v18 + 2) == 103)
          return (uint64_t)karo::media::PngLoader::loadFromChunk(a1, this, (size_t)a3, a5);
        v20 = *v18;
        v21 = *((unsigned __int8 *)v18 + 2);
        if (v20 == 20048 && v21 == 71)
          return (uint64_t)karo::media::PngLoader::loadFromChunk(a1, this, (size_t)a3, a5);
      }
      if (*(_DWORD *)this == 1554098963)
      {
        v23 = *((unsigned __int8 *)this + 4);
        v24 = *((unsigned __int8 *)this + 5);
        v25 = *((unsigned __int8 *)this + 6);
        if ((v23 - 13) < 0xFFFFFFF6
          || v24 < 3
          || v24 > 0xC
          || (v25 < 3 ? (v26 = v25 == 1) : (v26 = 1), v26 ? (v27 = 0) : (v27 = 1), v25 > 0xC || v27))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v34 = GEOGetVectorKitVKDefaultLog_log;
          result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            v51 = 67109632;
            v52 = v23;
            v53 = 1024;
            v54 = v24;
            v55 = 1024;
            v56 = v25;
            v35 = "Not recognized as ASTC data %d x %d x %d";
            v36 = v34;
            v37 = 20;
LABEL_67:
            _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&v51, v37);
            return 0;
          }
        }
        else
        {
          v28 = *(unsigned __int16 *)((char *)this + 7);
          v29 = *((unsigned __int8 *)this + 9);
          v30 = *((unsigned __int16 *)this + 5);
          v31 = *((unsigned __int8 *)this + 12);
          if (v23 == 4 && v24 == 4)
          {
            v32 = 15;
LABEL_109:
            karo::media::Image::setFormat(a5, v32);
            v38 = *(int **)(a5 + 8);
            if (v38)
            {
              *v38 = v28 | (v29 << 16);
              v38[1] = v30 | (v31 << 16);
            }
            v39 = a3 - 16;
            v40 = (std::__shared_weak_count *)operator new(0x30uLL);
            v40->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v40->__shared_owners_;
            v40->__shared_weak_owners_ = 0;
            v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
            v42 = ggl::Data::Data((ggl::Data *)&v40[1], (const unsigned __int8 *)this + 16, (size_t)v39);
            v43 = *(_QWORD *)(a5 + 8);
            if (v43)
            {
              v44 = *(ggl::Data ***)(v43 + 16);
              do
                v45 = __ldxr(p_shared_owners);
              while (__stxr(v45 + 1, p_shared_owners));
              v46 = (std::__shared_weak_count *)v44[1];
              *v44 = v42;
              v44[1] = (ggl::Data *)v40;
              if (v46)
              {
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
            }
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            return 1;
          }
          if (v23 == 5 && v24 == 4)
          {
            v32 = 16;
            goto LABEL_109;
          }
          if (v23 == 5 && v24 == 5)
          {
            v32 = 17;
            goto LABEL_109;
          }
          if (v23 == 6 && v24 == 5)
          {
            v32 = 18;
            goto LABEL_109;
          }
          if (v23 == 6 && v24 == 6)
          {
            v32 = 19;
            goto LABEL_109;
          }
          if (v23 == 8 && v24 == 5)
          {
            v32 = 20;
            goto LABEL_109;
          }
          if (v23 == 8 && v24 == 6)
          {
            v32 = 21;
            goto LABEL_109;
          }
          if (v23 == 8 && v24 == 8)
          {
            v32 = 22;
            goto LABEL_109;
          }
          if (v23 == 10 && v24 == 5)
          {
            v32 = 23;
            goto LABEL_109;
          }
          if (v23 == 10 && v24 == 6)
          {
            v32 = 24;
            goto LABEL_109;
          }
          if (v23 == 10 && v24 == 8)
          {
            v32 = 25;
            goto LABEL_109;
          }
          if (v23 == 10 && v24 == 10)
          {
            v32 = 26;
            goto LABEL_109;
          }
          if (v23 == 12 && v24 == 10)
          {
            v32 = 27;
            goto LABEL_109;
          }
          if (v23 == 12 && v24 == 12)
          {
            v32 = 28;
            goto LABEL_109;
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v50 = GEOGetVectorKitVKDefaultLog_log;
          result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            v51 = 67109376;
            v52 = v23;
            v53 = 1024;
            v54 = v24;
            v35 = "ASTC, Invalid block size combination %d x %d";
            v36 = v50;
            v37 = 14;
            goto LABEL_67;
          }
        }
      }
      else
      {
        if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a4, "astc")
          || std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a4, "ASTC"))
        {
          return 0;
        }
        result = karo::media::ImageIOLoader::supportsFile(this, (size_t)a3);
        if ((_DWORD)result)
          return karo::media::ImageIOLoader::loadFromChunk(this, (size_t)a3, a5);
      }
    }
  }
  return result;
}

BOOL karo::media::ImageLoader::supportsFileType(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  int v7;
  int v8;
  _BOOL8 result;
  _DWORD *v11;
  _DWORD *v12;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 != 4)
  {
    if (v1 != 3)
      return 0;
    v3 = v2 >= 0 ? (unsigned __int16 *)a1 : *(unsigned __int16 **)a1;
    if ((*v3 != 28778 || *((_BYTE *)v3 + 2) != 103)
      && (*v3 != 20554 || *((_BYTE *)v3 + 2) != 71)
      && (*v3 != 28272 || *((_BYTE *)v3 + 2) != 103))
    {
      v7 = *v3;
      v8 = *((unsigned __int8 *)v3 + 2);
      if (v7 != 20048 || v8 != 71)
        return 0;
    }
    return 1;
  }
  v11 = *(_DWORD **)a1;
  if (v2 >= 0)
    v11 = (_DWORD *)a1;
  if (*v11 == 1668576097 || *v11 == 1129599809)
    return 1;
  if (v2 >= 0)
    v12 = (_DWORD *)a1;
  else
    v12 = *(_DWORD **)a1;
  result = *v12 == 1718183272;
  if (*v12 != 1718183272)
    return *v12 == 1179206984;
  return result;
}

void md::EntityDebugHighlightLogic::~EntityDebugHighlightLogic(md::EntityDebugHighlightLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A1D88;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A1D88;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  if (*(_QWORD *)(a3 + 8) == 0xE75FAB3171C16149 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::EntityDebugHighlightLogic::debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char v27;
  std::locale::id *v28;
  const std::locale::facet *v29;
  unsigned __int8 v30;
  const std::locale::facet *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 *v50;
  unint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *i;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int *v85;
  unsigned int v86;
  unsigned int v87;
  const char *v88;
  size_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  int *v122;
  unsigned int v123;
  unsigned int v124;
  const char *v125;
  const char *v126;
  _QWORD *v127;
  const char *v128;
  size_t v129;
  const char *v130;
  size_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *j;
  _QWORD *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  int *v155;
  unsigned int v156;
  unsigned int v157;
  const char *v158;
  const char *v159;
  _QWORD *v160;
  const char *v161;
  size_t v162;
  const char *v163;
  size_t v164;
  _QWORD *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  size_t v172;
  unint64_t v173;
  const void **v174;
  const void *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  int v180;
  int v181;
  int8x8_t **v182;
  _QWORD *__dst;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[3];
  uint64_t v188;
  unint64_t v189;
  void *__p[2];
  __int128 v191;
  int v192;
  uint64_t v193[19];
  std::locale v194;
  std::locale v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  char v198;

  if (!*(_BYTE *)(result + 272))
  {
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  v4 = result;
  v182 = *(int8x8_t ***)(a2 + 24);
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v193[0] = MEMORY[0x1E0DE4FE0] + 64;
  v185 = v7;
  *(uint64_t *)((char *)&v185 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v185 + *(_QWORD *)(v185 - 24));
  std::ios_base::init(v9, &v186);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v185 = v5 + 24;
  v193[0] = v6;
  std::streambuf::basic_streambuf();
  v186 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v191 = 0u;
  v192 = 16;
  if (!*(_BYTE *)(v4 + 272))
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  v10 = *(_QWORD *)(v4 + 152);
  v11 = *(_QWORD *)(v4 + 160);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\n=== Components ===\n", 20);
  __dst = a3;
  v12 = *(_QWORD **)(v10 + 136);
  if (v12)
  {
    v13 = v11 >> 39;
    v184 = HIDWORD(v11) & 0x7F;
    while (1)
    {
      v15 = (_QWORD *)v12[3];
      if (!(*(unsigned int (**)(_QWORD *, unint64_t))(*v15 + 24))(v15, v11))
        goto LABEL_8;
      v16 = v15[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, v15[2], v15[3]);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\n", 1);
      if (v16 <= (uint64_t)0xF44C196EC679B51BLL)
        break;
      if (v16 <= 0x1F5CA557A3AFA83ELL)
      {
        if (v16 == 0xF44C196EC679B51CLL)
        {
          v91 = (_QWORD *)gdc::Registry::storage<md::components::Visibility>(v10);
          v92 = v91[4];
          if (v13 >= (v91[5] - v92) >> 3)
            goto LABEL_8;
          v93 = *(_QWORD *)(v92 + 8 * v13);
          if (!v93)
            goto LABEL_8;
          v94 = *(unsigned __int16 *)(v93 + 2 * v184);
          v96 = v91[7];
          v95 = v91[8];
          if (v94 >= (v95 - v96) >> 3)
            goto LABEL_8;
          v97 = v96 + 8 * v94;
          if (v97 == v95 || *(_DWORD *)(v97 + 4) != HIDWORD(v11))
            goto LABEL_8;
          v99 = v91[10];
          if (!v99 || v99 + v94 == v91[11])
            goto LABEL_8;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tIsVisible:", 11);
          v14 = (uint64_t *)std::ostream::operator<<();
          goto LABEL_7;
        }
        if (v16 != 0x1049843FF67503A0)
          goto LABEL_8;
        v17 = (_QWORD *)gdc::Registry::storage<md::components::MarketMask>(v10);
        v18 = v17[4];
        if (v13 >= (v17[5] - v18) >> 3)
          goto LABEL_8;
        v19 = *(_QWORD *)(v18 + 8 * v13);
        if (!v19)
          goto LABEL_8;
        v20 = *(unsigned __int16 *)(v19 + 2 * v184);
        v22 = v17[7];
        v21 = v17[8];
        if (v20 >= (v21 - v22) >> 3)
          goto LABEL_8;
        v23 = v22 + 8 * v20;
        if (v23 == v21 || *(_DWORD *)(v23 + 4) != HIDWORD(v11))
          goto LABEL_8;
        v25 = v17[10];
        if (!v25)
          goto LABEL_8;
        v26 = (char *)(v25 + v20);
        if (v25 + v20 == v17[11])
          goto LABEL_8;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tmask:", 6);
        v27 = *v26;
        std::ios_base::getloc((const std::ios_base *)((char *)&v185 + *(_QWORD *)(v185 - 24)));
        v28 = (std::locale::id *)MEMORY[0x1E0DE4A90];
        v29 = std::locale::use_facet(&v195, MEMORY[0x1E0DE4A90]);
        v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 48);
        std::ios_base::getloc((const std::ios_base *)((char *)&v185 + *(_QWORD *)(v185 - 24)));
        v31 = std::locale::use_facet(&v194, v28);
        v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 49);
        v198 = 8;
        v196 = 0x101010101010101 * v30;
        LOBYTE(v197) = 0;
        if ((v27 & 1) == 0)
        {
          if ((v27 & 2) == 0)
            goto LABEL_26;
LABEL_137:
          BYTE6(v196) = v32;
          if ((v27 & 4) != 0)
            goto LABEL_138;
LABEL_27:
          if ((v27 & 8) == 0)
            goto LABEL_28;
LABEL_139:
          BYTE4(v196) = v32;
          if ((v27 & 0x10) != 0)
            goto LABEL_140;
LABEL_29:
          if ((v27 & 0x20) == 0)
            goto LABEL_30;
LABEL_141:
          BYTE2(v196) = v32;
          if ((v27 & 0x40) != 0)
            goto LABEL_142;
LABEL_31:
          if ((v27 & 0x80) == 0)
            goto LABEL_32;
LABEL_143:
          LOBYTE(v196) = v32;
          goto LABEL_32;
        }
        HIBYTE(v196) = v32;
        if ((v27 & 2) != 0)
          goto LABEL_137;
LABEL_26:
        if ((v27 & 4) == 0)
          goto LABEL_27;
LABEL_138:
        BYTE5(v196) = v32;
        if ((v27 & 8) != 0)
          goto LABEL_139;
LABEL_28:
        if ((v27 & 0x10) == 0)
          goto LABEL_29;
LABEL_140:
        BYTE3(v196) = v32;
        if ((v27 & 0x20) != 0)
          goto LABEL_141;
LABEL_30:
        if ((v27 & 0x40) == 0)
          goto LABEL_31;
LABEL_142:
        BYTE1(v196) = v32;
        if (v27 < 0)
          goto LABEL_143;
LABEL_32:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)&v196, 8);
        if (v198 < 0)
          operator delete((void *)v196);
        std::locale::~locale(&v194);
        std::locale::~locale(&v195);
        v14 = &v185;
LABEL_7:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
        goto LABEL_8;
      }
      if (v16 == 0x1F5CA557A3AFA83FLL)
      {
        v100 = (_QWORD *)gdc::Registry::storage<md::components::FlexSelectionInfo>(v10);
        v101 = v100[4];
        if (v13 >= (v100[5] - v101) >> 3)
          goto LABEL_8;
        v102 = *(_QWORD *)(v101 + 8 * v13);
        if (!v102)
          goto LABEL_8;
        v103 = *(unsigned __int16 *)(v102 + 2 * v184);
        v105 = v100[7];
        v104 = v100[8];
        if (v103 >= (v104 - v105) >> 3)
          goto LABEL_8;
        v106 = v105 + 8 * v103;
        if (v106 == v104 || *(_DWORD *)(v106 + 4) != HIDWORD(v11))
          goto LABEL_8;
        v108 = v100[10];
        if (!v108 || v108 + 4 * v103 == v100[11])
          goto LABEL_8;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tflexDistance:", 14);
        v14 = (uint64_t *)std::ostream::operator<<();
        goto LABEL_7;
      }
      if (v16 == 0x299DE7A80C80C439)
      {
        v42 = (_QWORD *)gdc::Registry::storage<md::components::Material>(v10);
        v43 = v42[4];
        if (v13 < (v42[5] - v43) >> 3)
        {
          v44 = *(_QWORD *)(v43 + 8 * v13);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * v184);
            v47 = v42[7];
            v46 = v42[8];
            if (v45 < (v46 - v47) >> 3)
            {
              v48 = v47 + 8 * v45;
              if (v48 != v46 && *(_DWORD *)(v48 + 4) == HIDWORD(v11))
              {
                v50 = (__int16 *)v42[10];
                if (v50)
                {
                  v51 = (unint64_t *)&v50[12 * v45];
                  if (v51 != (unint64_t *)v42[11])
                  {
                    gms::MaterialManager<ggl::Texture2D>::getMaterialSheet(&v196, *v182, *v51);
                    v52 = v196;
                    if (v196)
                    {
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tSheet:", 7);
                      v53 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"\n", 1);
                      v54 = (uint64_t)&v50[12 * v45 + 4];
                      if (*(_QWORD *)v54)
                      {
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tSource Material:", 17);
                        v55 = *(_QWORD *)(*(_QWORD *)v54 + 16);
                        v56 = *(std::__shared_weak_count **)(*(_QWORD *)v54 + 24);
                        if (v56)
                        {
                          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
                          do
                            v58 = __ldxr(p_shared_owners);
                          while (__stxr(v58 + 1, p_shared_owners));
                        }
                        v59 = *(_QWORD **)(v52 + 48);
                        for (i = *(_QWORD **)(v52 + 40); i != v59; i += 2)
                        {
                          if (*i == v55)
                            break;
                        }
                        v61 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)"\n", 1);
                        if (v56)
                        {
                          v62 = (unint64_t *)&v56->__shared_owners_;
                          do
                            v63 = __ldaxr(v62);
                          while (__stlxr(v63 - 1, v62));
                          if (!v63)
                          {
                            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                            std::__shared_weak_count::__release_weak(v56);
                          }
                        }
                        v64 = (_QWORD *)v196;
                        v65 = *(_QWORD *)(*(_QWORD *)v54 + 16);
                        v66 = *(std::__shared_weak_count **)(*(_QWORD *)v54 + 24);
                        if (v66)
                        {
                          v67 = (unint64_t *)&v66->__shared_owners_;
                          do
                            v68 = __ldxr(v67);
                          while (__stxr(v68 + 1, v67));
                        }
                        v69 = v64[2];
                        if (!v69)
                          goto LABEL_145;
                        v70 = (char *)v64[5];
                        v71 = (char *)v64[6];
                        v72 = v70;
                        if (v70 != v71)
                        {
                          while (*(_QWORD *)v72 != v65)
                          {
                            v72 += 16;
                            if (v72 == v71)
                            {
                              v72 = v71;
                              break;
                            }
                          }
                        }
                        if (v72 == v71)
LABEL_145:
                          v73 = 0;
                        else
                          v73 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v69 + 16))(v69, (unint64_t)(v72 - v70) >> 4);
                        if (v66)
                        {
                          v120 = (unint64_t *)&v66->__shared_owners_;
                          do
                            v121 = __ldaxr(v120);
                          while (__stlxr(v121 - 1, v120));
                          if (!v121)
                          {
                            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                            std::__shared_weak_count::__release_weak(v66);
                          }
                        }
                        v179 = v54;
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t\tattrs:[\n", 10);
                        if (v73)
                        {
                          v180 = *(unsigned __int16 *)(v73 + 10);
                          if (*(_WORD *)(v73 + 10))
                          {
                            v122 = 0;
                            v123 = 0;
                            LOWORD(v124) = *(_WORD *)(v73 + 10);
                            do
                            {
                              if (v123 < (unsigned __int16)v124)
                              {
                                v122 = (int *)(*(_QWORD *)v73 + 4 * v123);
                                v50 = (__int16 *)(*(_QWORD *)v73 + *(unsigned __int16 *)(v73 + 8) + 2 * v123);
                              }
                              v125 = gss::to_string(*v122);
                              v126 = gss::to_string(*v122, *v50);
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t\t  ", 4);
                              v127 = (_QWORD *)std::ostream::operator<<();
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v127, (uint64_t)":", 1);
                              std::ostream::operator<<();
                              if (v125 && v126)
                              {
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"(", 1);
                                v128 = gss::to_string(*v122);
                                v129 = strlen(v128);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)v128, v129);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)":", 1);
                                v130 = gss::to_string(*v122, *v50);
                                v131 = strlen(v130);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)v130, v131);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)")", 1);
                              }
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\n", 1);
                              v124 = *(unsigned __int16 *)(v73 + 10);
                              if (v123 + 1 < v124)
                                ++v123;
                              else
                                v123 = *(unsigned __int16 *)(v73 + 10);
                            }
                            while (v123 != v180);
                          }
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t\t]\n", 4);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tTarget Material:", 17);
                        v132 = v196;
                        v133 = *(_QWORD *)(*(_QWORD *)v179 + 32);
                        v134 = *(std::__shared_weak_count **)(*(_QWORD *)v179 + 40);
                        if (v134)
                        {
                          v135 = (unint64_t *)&v134->__shared_owners_;
                          do
                            v136 = __ldxr(v135);
                          while (__stxr(v136 + 1, v135));
                        }
                        v138 = *(_QWORD **)(v132 + 40);
                        v137 = *(_QWORD **)(v132 + 48);
                        for (j = v138; j != v137; j += 2)
                        {
                          if (*j == v133)
                            break;
                        }
                        v140 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v140, (uint64_t)"\n", 1);
                        if (v134)
                        {
                          v141 = (unint64_t *)&v134->__shared_owners_;
                          do
                            v142 = __ldaxr(v141);
                          while (__stlxr(v142 - 1, v141));
                          if (!v142)
                          {
                            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                            std::__shared_weak_count::__release_weak(v134);
                          }
                        }
                        v143 = (_QWORD *)v196;
                        v144 = *(_QWORD *)(*(_QWORD *)v179 + 16);
                        v145 = *(std::__shared_weak_count **)(*(_QWORD *)v179 + 24);
                        if (v145)
                        {
                          v146 = (unint64_t *)&v145->__shared_owners_;
                          do
                            v147 = __ldxr(v146);
                          while (__stxr(v147 + 1, v146));
                        }
                        v148 = v143[2];
                        if (!v148)
                          goto LABEL_184;
                        v149 = (char *)v143[5];
                        v150 = (char *)v143[6];
                        v151 = v149;
                        if (v149 != v150)
                        {
                          while (*(_QWORD *)v151 != v144)
                          {
                            v151 += 16;
                            if (v151 == v150)
                            {
                              v151 = v150;
                              break;
                            }
                          }
                        }
                        if (v151 == v150)
LABEL_184:
                          v152 = 0;
                        else
                          v152 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v148 + 16))(v148, (unint64_t)(v151 - v149) >> 4);
                        if (v145)
                        {
                          v153 = (unint64_t *)&v145->__shared_owners_;
                          do
                            v154 = __ldaxr(v153);
                          while (__stlxr(v154 - 1, v153));
                          if (!v154)
                          {
                            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                            std::__shared_weak_count::__release_weak(v145);
                          }
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t\tattrs:[\n", 10);
                        if (v152)
                        {
                          v181 = *(unsigned __int16 *)(v152 + 10);
                          if (*(_WORD *)(v152 + 10))
                          {
                            v155 = 0;
                            v156 = 0;
                            LOWORD(v157) = *(_WORD *)(v152 + 10);
                            do
                            {
                              if (v156 < (unsigned __int16)v157)
                              {
                                v155 = (int *)(*(_QWORD *)v152 + 4 * v156);
                                v50 = (__int16 *)(*(_QWORD *)v152 + *(unsigned __int16 *)(v152 + 8) + 2 * v156);
                              }
                              v158 = gss::to_string(*v155);
                              v159 = gss::to_string(*v155, *v50);
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t\t  ", 4);
                              v160 = (_QWORD *)std::ostream::operator<<();
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)":", 1);
                              std::ostream::operator<<();
                              if (v158 && v159)
                              {
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"(", 1);
                                v161 = gss::to_string(*v155);
                                v162 = strlen(v161);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)v161, v162);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)":", 1);
                                v163 = gss::to_string(*v155, *v50);
                                v164 = strlen(v163);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)v163, v164);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)")", 1);
                              }
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\n", 1);
                              v157 = *(unsigned __int16 *)(v152 + 10);
                              if (v156 + 1 < v157)
                                ++v156;
                              else
                                v156 = *(unsigned __int16 *)(v152 + 10);
                            }
                            while (v156 != v181);
                          }
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t\t]\n", 4);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tBlend Factor:", 14);
                        v165 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v165, (uint64_t)"\n", 1);
                        goto LABEL_205;
                      }
                      v118 = "\tMaterial: NONE\n";
                      v119 = 16;
                    }
                    else
                    {
                      v118 = "\tSheet: NOT_AVAILABLE\n";
                      v119 = 22;
                    }
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)v118, v119);
LABEL_205:
                    v166 = v197;
                    if (v197)
                    {
                      v167 = (unint64_t *)&v197->__shared_owners_;
                      do
                        v168 = __ldaxr(v167);
                      while (__stlxr(v168 - 1, v167));
                      if (!v168)
                      {
                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                        std::__shared_weak_count::__release_weak(v166);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_8:
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_210;
    }
    switch(v16)
    {
      case 0xA4F4C87C991FC6E0:
        v74 = (_QWORD *)gdc::Registry::storage<md::components::ClientState>(v10);
        v75 = v74[4];
        if (v13 < (v74[5] - v75) >> 3)
        {
          v76 = *(_QWORD *)(v75 + 8 * v13);
          if (v76)
          {
            v77 = *(unsigned __int16 *)(v76 + 2 * v184);
            v79 = v74[7];
            v78 = v74[8];
            if (v77 < (v78 - v79) >> 3)
            {
              v80 = v79 + 8 * v77;
              if (v80 != v78 && *(_DWORD *)(v80 + 4) == HIDWORD(v11))
              {
                v82 = v74[10];
                if (v82)
                {
                  v83 = v82 + 16 * v77;
                  if (v83 != v74[11])
                  {
                    v84 = *(unsigned __int16 *)(v83 + 10);
                    if (*(_WORD *)(v83 + 10))
                    {
                      v85 = 0;
                      v86 = 0;
                      LOWORD(v87) = *(_WORD *)(v83 + 10);
                      do
                      {
                        if (v86 < (unsigned __int16)v87)
                          v85 = (int *)(*(_QWORD *)v83 + 4 * v86);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\t(", 2);
                        v88 = gss::to_string(*v85);
                        v89 = strlen(v88);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)v88, v89);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)",", 1);
                        v90 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)")\n", 2);
                        v87 = *(unsigned __int16 *)(v83 + 10);
                        if (v86 + 1 < v87)
                          ++v86;
                        else
                          v86 = *(unsigned __int16 *)(v83 + 10);
                      }
                      while (v86 != v84);
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_8;
      case 0xAE13B930655B4EC8:
        v109 = (_QWORD *)gdc::Registry::storage<md::components::Building>(v10);
        v110 = v109[4];
        if (v13 >= (v109[5] - v110) >> 3)
          goto LABEL_8;
        v111 = *(_QWORD *)(v110 + 8 * v13);
        if (!v111)
          goto LABEL_8;
        v112 = *(unsigned __int16 *)(v111 + 2 * v184);
        v114 = v109[7];
        v113 = v109[8];
        if (v112 >= (v113 - v114) >> 3)
          goto LABEL_8;
        v115 = v114 + 8 * v112;
        if (v115 == v113 || *(_DWORD *)(v115 + 4) != HIDWORD(v11))
          goto LABEL_8;
        v117 = v109[10];
        if (!v117 || v117 + 8 * v112 == v109[11])
          goto LABEL_8;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tid:", 4);
        break;
      case 0xD7CF92E7713C257ALL:
        v33 = (_QWORD *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(v10);
        v34 = v33[4];
        if (v13 >= (v33[5] - v34) >> 3)
          goto LABEL_8;
        v35 = *(_QWORD *)(v34 + 8 * v13);
        if (!v35)
          goto LABEL_8;
        v36 = *(unsigned __int16 *)(v35 + 2 * v184);
        v38 = v33[7];
        v37 = v33[8];
        if (v36 >= (v37 - v38) >> 3)
          goto LABEL_8;
        v39 = v38 + 8 * v36;
        if (v39 == v37 || *(_DWORD *)(v39 + 4) != HIDWORD(v11))
          goto LABEL_8;
        v41 = v33[10];
        if (!v41 || v41 + 96 * v36 == v33[11])
          goto LABEL_8;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v185, (uint64_t)"\tassetId:", 9);
        break;
      default:
        goto LABEL_8;
    }
    v14 = (uint64_t *)std::ostream::operator<<();
    goto LABEL_7;
  }
LABEL_210:
  if ((v192 & 0x10) != 0)
  {
    v173 = *((_QWORD *)&v191 + 1);
    v169 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v170 = __dst;
    v171 = MEMORY[0x1E0DE4FB8];
    if (*((_QWORD *)&v191 + 1) < v189)
    {
      *((_QWORD *)&v191 + 1) = v189;
      v173 = v189;
    }
    v174 = (const void **)&v188;
  }
  else
  {
    v169 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v170 = __dst;
    v171 = MEMORY[0x1E0DE4FB8];
    if ((v192 & 8) == 0)
    {
      v172 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_225;
    }
    v174 = (const void **)v187;
    v173 = v187[2];
  }
  v175 = *v174;
  v172 = v173 - (_QWORD)*v174;
  if (v172 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v172 >= 0x17)
  {
    v176 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17)
      v176 = v172 | 7;
    v177 = v176 + 1;
    v178 = operator new(v176 + 1);
    v170[1] = v172;
    v170[2] = v177 | 0x8000000000000000;
    *v170 = v178;
    v170 = v178;
  }
  else
  {
    *((_BYTE *)v170 + 23) = v172;
    if (!v172)
      goto LABEL_225;
  }
  memmove(v170, v175, v172);
LABEL_225:
  *((_BYTE *)v170 + v172) = 0;
  v185 = *v169;
  *(uint64_t *)((char *)&v185 + *(_QWORD *)(v185 - 24)) = v169[3];
  v186 = v171 + 16;
  if (SBYTE7(v191) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v193);
}

void sub_19F5628C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  va_list va;

  va_start(va, a10);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = *(std::__shared_weak_count **)(v11 - 104);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::FlexSelectionInfo>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1F5CA557A3AFA83FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1F5CA557A3AFA83FLL;
      if (*(_QWORD *)&v3 <= 0x1F5CA557A3AFA83FuLL)
        v5 = 0x1F5CA557A3AFA83FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1F5CA557A3AFA83FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1F5CA557A3AFA83FLL)
            {
              if (v7[2] == 0x1F5CA557A3AFA83FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1F5CA557A3AFA83FLL)
          {
            if (v7[2] == 0x1F5CA557A3AFA83FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::FlexSelectionInfo]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B30D8;
  *(_QWORD *)(v11 + 8) = 0x1F5CA557A3AFA83FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1F5CA557A3AFA83FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1F5CA557A3AFA83FLL;
  v15[1] = "md::components::FlexSelectionInfo]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1F5CA557A3AFA83FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F562C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::Building>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::Building>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Building>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::Building>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  double v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  double v78;
  double v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v88;
  double v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  double v104;
  double v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;

  v7 = result;
LABEL_2:
  v8 = (_QWORD *)(a2 - 40);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v53 = *(double *)v9;
        if (*(double *)v8 < *(double *)v9)
        {
          v54 = *(_QWORD *)(v9 + 32);
          *(_QWORD *)v9 = *v8;
          v55 = *(_DWORD *)(a2 - 32);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 - 8);
          v56 = *(_OWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = v55;
          *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 - 28);
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 - 24);
          *(_DWORD *)(v9 + 20) = *(_DWORD *)(a2 - 20);
          v57 = *(_QWORD *)(v9 + 24);
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(v9 + 28) = *(_DWORD *)(a2 - 12);
          *(double *)(a2 - 40) = v53;
          *(_OWORD *)(a2 - 32) = v56;
          *(_QWORD *)(a2 - 16) = v57;
          *(_QWORD *)(a2 - 8) = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9, v9 + 40, a2 - 40);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9, v9 + 40, v9 + 80, a2 - 40);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,0>(v9, v9 + 40, v9 + 80, v9 + 120, a2 - 40);
      default:
        if (v10 <= 959)
        {
          v58 = v9 + 40;
          v60 = v9 == a2 || v58 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v9;
              do
              {
                v64 = v58;
                v65 = *(double *)(v62 + 40);
                v66 = *(double *)v62;
                if (v65 < *(double *)v62)
                {
                  v67 = *(_OWORD *)(v62 + 48);
                  v68 = *(_QWORD *)(v62 + 64);
                  v69 = v61;
                  v70 = *(_QWORD *)(v62 + 72);
                  do
                  {
                    v71 = v9 + v69;
                    *(double *)(v71 + 40) = v66;
                    *(_QWORD *)(v71 + 48) = *(_QWORD *)(v9 + v69 + 8);
                    *(_DWORD *)(v71 + 56) = *(_DWORD *)(v9 + v69 + 16);
                    *(_QWORD *)(v71 + 60) = *(_QWORD *)(v9 + v69 + 20);
                    *(_DWORD *)(v71 + 68) = *(_DWORD *)(v9 + v69 + 28);
                    *(_QWORD *)(v71 + 72) = *(_QWORD *)(v9 + v69 + 32);
                    if (!v69)
                    {
                      v63 = v9;
                      goto LABEL_71;
                    }
                    v66 = *(double *)(v71 - 40);
                    v69 -= 40;
                  }
                  while (v65 < v66);
                  v63 = v9 + v69 + 40;
LABEL_71:
                  *(double *)v63 = v65;
                  *(_OWORD *)(v63 + 8) = v67;
                  *(_QWORD *)(v63 + 24) = v68;
                  *(_QWORD *)(v63 + 32) = v70;
                }
                v58 = v64 + 40;
                v61 += 40;
                v62 = v64;
              }
              while (v64 + 40 != a2);
            }
          }
          else if (!v60)
          {
            v110 = v9 + 16;
            do
            {
              v111 = v58;
              v112 = *(double *)(v7 + 40);
              v113 = *(double *)v7;
              if (v112 < *(double *)v7)
              {
                v114 = *(_OWORD *)(v7 + 48);
                v115 = *(_QWORD *)(v7 + 64);
                v116 = v110;
                v117 = *(_QWORD *)(v7 + 72);
                do
                {
                  *(double *)(v116 + 24) = v113;
                  *(_QWORD *)(v116 + 32) = *(_QWORD *)(v116 - 8);
                  *(_DWORD *)(v116 + 40) = *(_DWORD *)v116;
                  *(_QWORD *)(v116 + 44) = *(_QWORD *)(v116 + 4);
                  *(_DWORD *)(v116 + 52) = *(_DWORD *)(v116 + 12);
                  *(_QWORD *)(v116 + 56) = *(_QWORD *)(v116 + 16);
                  v113 = *(double *)(v116 - 56);
                  v116 -= 40;
                }
                while (v112 < v113);
                *(double *)(v116 + 24) = v112;
                *(_OWORD *)(v116 + 32) = v114;
                *(_QWORD *)(v116 + 48) = v115;
                *(_QWORD *)(v116 + 56) = v117;
              }
              v58 = v111 + 40;
              v110 += 40;
              v7 = v111;
            }
            while (v111 + 40 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v72 = (unint64_t)(v11 - 2) >> 1;
            v73 = v72;
            do
            {
              v74 = v73;
              if (v72 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = v9 + 40 * v75;
                if (2 * v74 + 2 < v11 && *(double *)v76 < *(double *)(v76 + 40))
                {
                  v76 += 40;
                  v75 = 2 * v74 + 2;
                }
                v77 = v9 + 40 * v74;
                v78 = *(double *)v76;
                v79 = *(double *)v77;
                if (*(double *)v76 >= *(double *)v77)
                {
                  v80 = *(_OWORD *)(v77 + 8);
                  v81 = *(_QWORD *)(v77 + 24);
                  v82 = *(_QWORD *)(v77 + 32);
                  do
                  {
                    v83 = v77;
                    v77 = v76;
                    *(double *)v83 = v78;
                    *(_DWORD *)(v83 + 8) = *(_DWORD *)(v76 + 8);
                    *(_DWORD *)(v83 + 12) = *(_DWORD *)(v76 + 12);
                    *(_DWORD *)(v83 + 16) = *(_DWORD *)(v76 + 16);
                    *(_DWORD *)(v83 + 20) = *(_DWORD *)(v76 + 20);
                    *(_DWORD *)(v83 + 24) = *(_DWORD *)(v76 + 24);
                    *(_DWORD *)(v83 + 28) = *(_DWORD *)(v76 + 28);
                    *(_QWORD *)(v83 + 32) = *(_QWORD *)(v76 + 32);
                    if (v72 < v75)
                      break;
                    v84 = 2 * v75;
                    v75 = (2 * v75) | 1;
                    v76 = v9 + 40 * v75;
                    v85 = v84 + 2;
                    if (v85 < v11)
                    {
                      result = v76 + 40;
                      if (*(double *)v76 < *(double *)(v76 + 40))
                      {
                        v76 += 40;
                        v75 = v85;
                      }
                    }
                    v78 = *(double *)v76;
                  }
                  while (*(double *)v76 >= v79);
                  *(double *)v77 = v79;
                  *(_OWORD *)(v77 + 8) = v80;
                  *(_QWORD *)(v77 + 24) = v81;
                  *(_QWORD *)(v77 + 32) = v82;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            v86 = v10 / 0x28uLL;
            do
            {
              v88 = 0;
              v89 = *(double *)v9;
              v91 = *(_DWORD *)(v9 + 8);
              v90 = *(_DWORD *)(v9 + 12);
              v93 = *(_DWORD *)(v9 + 16);
              v92 = *(_DWORD *)(v9 + 20);
              v95 = *(_DWORD *)(v9 + 24);
              v94 = *(_DWORD *)(v9 + 28);
              v96 = v9;
              v97 = *(_QWORD *)(v9 + 32);
              do
              {
                v98 = v96;
                v96 += 40 * v88 + 40;
                v99 = 2 * v88;
                v88 = (2 * v88) | 1;
                v100 = v99 + 2;
                if (v100 < v86 && *(double *)v96 < *(double *)(v96 + 40))
                {
                  v96 += 40;
                  v88 = v100;
                }
                *(_QWORD *)v98 = *(_QWORD *)v96;
                *(_DWORD *)(v98 + 8) = *(_DWORD *)(v96 + 8);
                *(_DWORD *)(v98 + 12) = *(_DWORD *)(v96 + 12);
                *(_DWORD *)(v98 + 16) = *(_DWORD *)(v96 + 16);
                *(_DWORD *)(v98 + 20) = *(_DWORD *)(v96 + 20);
                *(_DWORD *)(v98 + 24) = *(_DWORD *)(v96 + 24);
                *(_DWORD *)(v98 + 28) = *(_DWORD *)(v96 + 28);
                *(_QWORD *)(v98 + 32) = *(_QWORD *)(v96 + 32);
              }
              while (v88 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
              if (v96 == a2 - 40)
              {
                *(double *)v96 = v89;
                *(_DWORD *)(v96 + 8) = v91;
                *(_DWORD *)(v96 + 12) = v90;
                *(_DWORD *)(v96 + 16) = v93;
                *(_DWORD *)(v96 + 20) = v92;
                *(_DWORD *)(v96 + 24) = v95;
                *(_DWORD *)(v96 + 28) = v94;
                *(_QWORD *)(v96 + 32) = v97;
              }
              else
              {
                *(_QWORD *)v96 = *(_QWORD *)(a2 - 40);
                *(_DWORD *)(v96 + 8) = *(_DWORD *)(a2 - 32);
                *(_DWORD *)(v96 + 12) = *(_DWORD *)(a2 - 28);
                *(_DWORD *)(v96 + 16) = *(_DWORD *)(a2 - 24);
                *(_DWORD *)(v96 + 20) = *(_DWORD *)(a2 - 20);
                *(_DWORD *)(v96 + 24) = *(_DWORD *)(a2 - 16);
                *(_DWORD *)(v96 + 28) = *(_DWORD *)(a2 - 12);
                *(_QWORD *)(v96 + 32) = *(_QWORD *)(a2 - 8);
                *(double *)(a2 - 40) = v89;
                *(_DWORD *)(a2 - 32) = v91;
                *(_DWORD *)(a2 - 28) = v90;
                *(_DWORD *)(a2 - 24) = v93;
                *(_DWORD *)(a2 - 20) = v92;
                *(_DWORD *)(a2 - 16) = v95;
                *(_DWORD *)(a2 - 12) = v94;
                *(_QWORD *)(a2 - 8) = v97;
                v101 = v96 - v9 + 40;
                if (v101 >= 41)
                {
                  v102 = (v101 / 0x28uLL - 2) >> 1;
                  v103 = v9 + 40 * v102;
                  v104 = *(double *)v103;
                  v105 = *(double *)v96;
                  if (*(double *)v103 < *(double *)v96)
                  {
                    v106 = *(_OWORD *)(v96 + 8);
                    v107 = *(_QWORD *)(v96 + 24);
                    v108 = *(_QWORD *)(v96 + 32);
                    do
                    {
                      v109 = v96;
                      v96 = v103;
                      *(double *)v109 = v104;
                      *(_DWORD *)(v109 + 8) = *(_DWORD *)(v103 + 8);
                      *(_DWORD *)(v109 + 12) = *(_DWORD *)(v103 + 12);
                      *(_DWORD *)(v109 + 16) = *(_DWORD *)(v103 + 16);
                      *(_DWORD *)(v109 + 20) = *(_DWORD *)(v103 + 20);
                      *(_DWORD *)(v109 + 24) = *(_DWORD *)(v103 + 24);
                      *(_DWORD *)(v109 + 28) = *(_DWORD *)(v103 + 28);
                      *(_QWORD *)(v109 + 32) = *(_QWORD *)(v103 + 32);
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                      v103 = v9 + 40 * v102;
                      v104 = *(double *)v103;
                    }
                    while (*(double *)v103 < v105);
                    *(double *)v96 = v105;
                    *(_OWORD *)(v96 + 8) = v106;
                    *(_QWORD *)(v96 + 24) = v107;
                    *(_QWORD *)(v96 + 32) = v108;
                  }
                }
              }
              a2 -= 40;
            }
            while (v86-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_QWORD *)(v9 + 40 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x1401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>((uint64_t)v13, v7, a2 - 40);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v7, (uint64_t)v13, a2 - 40);
          v14 = v7 + 40 * v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v7 + 40, v14 - 40, a2 - 80);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v7 + 80, v7 + 40 + 40 * v12, a2 - 120);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v14 - 40, (uint64_t)v13, v7 + 40 + 40 * v12);
          v15 = *(double *)v7;
          v16 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)v7 = *v13;
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(v14 + 32);
          *(double *)v13 = v15;
          v17 = *(_OWORD *)(v7 + 8);
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(v14 + 8);
          *(_OWORD *)(v14 + 8) = v17;
          *(_QWORD *)&v17 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(v14 + 24);
          *(_QWORD *)(v14 + 24) = v17;
          *(_QWORD *)(v14 + 32) = v16;
        }
        --a3;
        v18 = *(double *)v7;
        if ((a4 & 1) == 0 && *(double *)(v7 - 40) >= v18)
        {
          if (v18 >= *(double *)v8)
          {
            v39 = v7 + 40;
            do
            {
              v9 = v39;
              if (v39 >= a2)
                break;
              v39 += 40;
            }
            while (v18 >= *(double *)v9);
          }
          else
          {
            v9 = v7;
            do
            {
              v38 = *(double *)(v9 + 40);
              v9 += 40;
            }
            while (v18 >= v38);
          }
          v40 = a2;
          if (v9 < a2)
          {
            v40 = a2;
            do
            {
              v41 = *(double *)(v40 - 40);
              v40 -= 40;
            }
            while (v18 < v41);
          }
          v42 = *(_OWORD *)(v7 + 8);
          v43 = *(_QWORD *)(v7 + 24);
          v44 = *(_QWORD *)(v7 + 32);
          if (v9 < v40)
          {
            v45 = *(double *)v9;
            v46 = *(double *)v40;
            do
            {
              v47 = *(_QWORD *)(v9 + 32);
              *(double *)v9 = v46;
              v48 = *(_DWORD *)(v40 + 8);
              *(_QWORD *)(v9 + 32) = *(_QWORD *)(v40 + 32);
              v49 = *(_OWORD *)(v9 + 8);
              *(_DWORD *)(v9 + 8) = v48;
              *(_DWORD *)(v9 + 12) = *(_DWORD *)(v40 + 12);
              *(_DWORD *)(v9 + 16) = *(_DWORD *)(v40 + 16);
              *(_DWORD *)(v9 + 20) = *(_DWORD *)(v40 + 20);
              v50 = *(_QWORD *)(v9 + 24);
              *(_DWORD *)(v9 + 24) = *(_DWORD *)(v40 + 24);
              *(_DWORD *)(v9 + 28) = *(_DWORD *)(v40 + 28);
              *(double *)v40 = v45;
              *(_OWORD *)(v40 + 8) = v49;
              *(_QWORD *)(v40 + 24) = v50;
              *(_QWORD *)(v40 + 32) = v47;
              do
              {
                v51 = *(double *)(v9 + 40);
                v9 += 40;
                v45 = v51;
              }
              while (v18 >= v51);
              do
              {
                v52 = *(double *)(v40 - 40);
                v40 -= 40;
                v46 = v52;
              }
              while (v18 < v52);
            }
            while (v9 < v40);
          }
          if (v9 - 40 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v9 - 40);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 32);
            *(_DWORD *)(v7 + 12) = *(_DWORD *)(v9 - 28);
            *(_DWORD *)(v7 + 16) = *(_DWORD *)(v9 - 24);
            *(_DWORD *)(v7 + 20) = *(_DWORD *)(v9 - 20);
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v9 - 16);
            *(_DWORD *)(v7 + 28) = *(_DWORD *)(v9 - 12);
            *(_QWORD *)(v7 + 32) = *(_QWORD *)(v9 - 8);
          }
          a4 = 0;
          *(double *)(v9 - 40) = v18;
          *(_OWORD *)(v9 - 32) = v42;
          *(_QWORD *)(v9 - 16) = v43;
          *(_QWORD *)(v9 - 8) = v44;
          continue;
        }
        v19 = *(_OWORD *)(v7 + 8);
        v20 = *(_QWORD *)(v7 + 24);
        v21 = v7;
        v22 = *(_QWORD *)(v7 + 32);
        do
        {
          v23 = v21;
          v24 = *(double *)(v21 + 40);
          v21 += 40;
          v25 = v24;
        }
        while (v24 < v18);
        v26 = (double *)a2;
        if (v23 == v7)
        {
          v26 = (double *)a2;
          do
          {
            if (v21 >= (unint64_t)v26)
              break;
            v28 = *(v26 - 5);
            v26 -= 5;
          }
          while (v28 >= v18);
        }
        else
        {
          do
          {
            v27 = *(v26 - 5);
            v26 -= 5;
          }
          while (v27 >= v18);
        }
        if (v21 >= (unint64_t)v26)
        {
          v9 = v21;
        }
        else
        {
          v29 = *v26;
          v9 = v21;
          v30 = v26;
          do
          {
            v31 = *(_QWORD *)(v9 + 32);
            *(double *)v9 = v29;
            v32 = *((_DWORD *)v30 + 2);
            *(double *)(v9 + 32) = v30[4];
            v33 = *(_OWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = v32;
            *(_DWORD *)(v9 + 12) = *((_DWORD *)v30 + 3);
            *(_DWORD *)(v9 + 16) = *((_DWORD *)v30 + 4);
            *(_DWORD *)(v9 + 20) = *((_DWORD *)v30 + 5);
            v34 = *(_QWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = *((_DWORD *)v30 + 6);
            *(_DWORD *)(v9 + 28) = *((_DWORD *)v30 + 7);
            *v30 = v25;
            *(_OWORD *)(v30 + 1) = v33;
            *((_QWORD *)v30 + 3) = v34;
            *((_QWORD *)v30 + 4) = v31;
            do
            {
              v35 = *(double *)(v9 + 40);
              v9 += 40;
              v25 = v35;
            }
            while (v35 < v18);
            do
            {
              v36 = *(v30 - 5);
              v30 -= 5;
              v29 = v36;
            }
            while (v36 >= v18);
          }
          while (v9 < (unint64_t)v30);
        }
        if (v9 - 40 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v9 - 40);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 32);
          *(_DWORD *)(v7 + 12) = *(_DWORD *)(v9 - 28);
          *(_DWORD *)(v7 + 16) = *(_DWORD *)(v9 - 24);
          *(_DWORD *)(v7 + 20) = *(_DWORD *)(v9 - 20);
          *(_DWORD *)(v7 + 24) = *(_DWORD *)(v9 - 16);
          *(_DWORD *)(v7 + 28) = *(_DWORD *)(v9 - 12);
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(v9 - 8);
        }
        *(double *)(v9 - 40) = v18;
        *(_OWORD *)(v9 - 32) = v19;
        *(_QWORD *)(v9 - 16) = v20;
        *(_QWORD *)(v9 - 8) = v22;
        if (v21 < (unint64_t)v26)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,false>(v7, v9 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v7, v9 - 40);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9, a2);
        if (!(_DWORD)result)
        {
          if (v37)
            continue;
          goto LABEL_32;
        }
        a2 = v9 - 40;
        if (!v37)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(double *)a2;
  v4 = *(double *)result;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v5 < v3)
    {
      v13 = *(_QWORD *)(a2 + 32);
      *(double *)a2 = v5;
      v14 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      v15 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v14;
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      v16 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 24) = v16;
      *(_QWORD *)(a3 + 32) = v13;
      v17 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        v18 = *(_QWORD *)(result + 32);
        *(_QWORD *)result = *(_QWORD *)a2;
        v19 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
        v20 = *(_OWORD *)(result + 8);
        *(_DWORD *)(result + 8) = v19;
        *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
        v21 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
        *(double *)a2 = v17;
        *(_OWORD *)(a2 + 8) = v20;
        *(_QWORD *)(a2 + 24) = v21;
        *(_QWORD *)(a2 + 32) = v18;
      }
    }
  }
  else
  {
    v7 = *(_DWORD *)(result + 8);
    v6 = *(_DWORD *)(result + 12);
    v9 = *(_DWORD *)(result + 16);
    v8 = *(_DWORD *)(result + 20);
    v11 = *(_DWORD *)(result + 24);
    v10 = *(_DWORD *)(result + 28);
    v12 = *(_QWORD *)(result + 32);
    if (v5 >= v3)
    {
      *(double *)result = v3;
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(double *)a2 = v4;
      *(_DWORD *)(a2 + 8) = v7;
      *(_DWORD *)(a2 + 12) = v6;
      *(_DWORD *)(a2 + 16) = v9;
      *(_DWORD *)(a2 + 20) = v8;
      *(_DWORD *)(a2 + 24) = v11;
      *(_DWORD *)(a2 + 28) = v10;
      *(_QWORD *)(a2 + 32) = v12;
      if (*(double *)a3 >= v4)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    }
    else
    {
      *(double *)result = v5;
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(result + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(result + 20) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(result + 28) = *(_DWORD *)(a3 + 28);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 32);
    }
    *(double *)a3 = v4;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 16) = v9;
    *(_DWORD *)(a3 + 20) = v8;
    *(_DWORD *)(a3 + 24) = v11;
    *(_DWORD *)(a3 + 28) = v10;
    *(_QWORD *)(a3 + 32) = v12;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a2, a3);
  v9 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    v10 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v11 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(a4 + 20);
    v13 = *(_QWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
    *(double *)a4 = v9;
    *(_OWORD *)(a4 + 8) = v12;
    *(_QWORD *)(a4 + 24) = v13;
    *(_QWORD *)(a4 + 32) = v10;
    v14 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      v15 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      v17 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v16;
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      v18 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(double *)a3 = v14;
      *(_OWORD *)(a3 + 8) = v17;
      *(_QWORD *)(a3 + 24) = v18;
      *(_QWORD *)(a3 + 32) = v15;
      v19 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v20 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v21 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v21;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        v23 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(double *)a2 = v19;
        *(_OWORD *)(a2 + 8) = v22;
        *(_QWORD *)(a2 + 24) = v23;
        *(_QWORD *)(a2 + 32) = v20;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  double v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a2, a3, a4);
  v11 = *(double *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    v12 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v13 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 32);
    v14 = *(_OWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a5 + 20);
    v15 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(a5 + 28);
    *(double *)a5 = v11;
    *(_OWORD *)(a5 + 8) = v14;
    *(_QWORD *)(a5 + 24) = v15;
    *(_QWORD *)(a5 + 32) = v12;
    v16 = *(double *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      v17 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v18 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      v19 = *(_OWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v18;
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(a4 + 20);
      v20 = *(_QWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
      *(double *)a4 = v16;
      *(_OWORD *)(a4 + 8) = v19;
      *(_QWORD *)(a4 + 24) = v20;
      *(_QWORD *)(a4 + 32) = v17;
      v21 = *(double *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        v22 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v23 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        v24 = *(_OWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v23;
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
        v25 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
        *(double *)a3 = v21;
        *(_OWORD *)(a3 + 8) = v24;
        *(_QWORD *)(a3 + 24) = v25;
        *(_QWORD *)(a3 + 32) = v22;
        v26 = *(double *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          v27 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v28 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v29 = *(_OWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v28;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
          v30 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
          *(double *)a2 = v26;
          *(_OWORD *)(a2 + 8) = v29;
          *(_QWORD *)(a2 + 24) = v30;
          *(_QWORD *)(a2 + 32) = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(double *)(a2 - 40);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v8 = *(_QWORD *)(a1 + 32);
        *(double *)a1 = v6;
        v9 = *(_DWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 8);
        v10 = *(_OWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 28);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 - 20);
        v11 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 12);
        *(double *)(a2 - 40) = v7;
        *(_OWORD *)(a2 - 32) = v10;
        *(_QWORD *)(a2 - 16) = v11;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,0>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = (double *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a1 + 40, a1 + 80);
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v17 = *(double *)v13;
    v18 = *v12;
    if (*(double *)v13 < *v12)
    {
      v19 = *(_OWORD *)(v13 + 8);
      v20 = *(_QWORD *)(v13 + 24);
      v21 = v14;
      v22 = *(_QWORD *)(v13 + 32);
      do
      {
        v23 = a1 + v21;
        *(double *)(v23 + 120) = v18;
        *(_QWORD *)(v23 + 128) = *(_QWORD *)(a1 + v21 + 88);
        *(_DWORD *)(v23 + 136) = *(_DWORD *)(a1 + v21 + 96);
        *(_QWORD *)(v23 + 140) = *(_QWORD *)(a1 + v21 + 100);
        *(_DWORD *)(v23 + 148) = *(_DWORD *)(a1 + v21 + 108);
        *(_QWORD *)(v23 + 152) = *(_QWORD *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          v16 = a1;
          goto LABEL_7;
        }
        v18 = *(double *)(v23 + 40);
        v21 -= 40;
      }
      while (v17 < v18);
      v16 = a1 + v21 + 120;
LABEL_7:
      *(double *)v16 = v17;
      *(_OWORD *)(v16 + 8) = v19;
      *(_QWORD *)(v16 + 24) = v20;
      *(_QWORD *)(v16 + 32) = v22;
      if (++v15 == 8)
        return v13 + 40 == a2;
    }
    v12 = (double *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
}

_QWORD *gdc::ManagedObjectHolder<md::EntityDebugHighlightContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::DebugDrawContext *v2;

  *a1 = &off_1E42B1388;
  v2 = (md::DebugDrawContext *)a1[4];
  if (v2)
  {
    md::DebugDrawContext::~DebugDrawContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t gdc::ObjectHolder<md::EntityDebugHighlightContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::DisplayLinkVerificationLogic::~DisplayLinkVerificationLogic(md::DisplayLinkVerificationLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::DisplayLinkVerificationContext]";
  v4[3] = 34;
  v4[4] = result;
  *v4 = &off_1E42B1540;
  v4[1] = 0x42BE82C40F9A8F80;
  *a2 = v4;
  return result;
}

void sub_19F5642D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v7 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x1AF456233693CD46)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::DisplayLinkVerificationLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3)
{
  void *v6;
  int v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  int v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t, const char *);
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _BYTE v35[10];
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "layoutContinuously");

  if (v7)
  {
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
  }
  else
  {
    v8 = *(double **)(a3 + 8);
    if (v8)
    {
      v9 = v8 + 1;
      v10 = CACurrentMediaTime();
      v11 = (double *)(a1 + 128);
      if (*(double *)(a1 + 160) == v8[5]
        && *(double *)(a1 + 168) == v8[6]
        && *(double *)(a1 + 176) == v8[7]
        && *(double *)(a1 + 152) == v8[4]
        && *v11 == *v9
        && *(double *)(a1 + 136) == v8[2]
        && *(double *)(a1 + 144) == v8[3]
        && (v12 = *(_DWORD *)(a1 + 192), md::LayoutContext::frameState(a2), v12 == *(_DWORD *)(v13 + 120)))
      {
        v14 = v10 - *(double *)(a1 + 184);
        if (v14 >= 30.0)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v15 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v34 = 134218754;
            *(double *)v35 = v14;
            *(_WORD *)&v35[8] = 2080;
            v36 = "false";
            v37 = 2080;
            v38 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/DisplayLinkVerificationLogic.mm";
            v39 = 1024;
            v40 = 65;
            _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "DisplayLink has been running for %f seconds with the camera frame moving: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v34, 0x26u);
          }

          v16 = **(uint64_t ***)(a1 + 120);
          if (v16 != *(uint64_t **)(*(_QWORD *)(a1 + 120) + 8) && *v16 != 0x4BCD00F88A8100BELL)
          {
            v17 = v16 + 5;
            do
            {
              v18 = *v17;
              v17 += 5;
            }
            while (v18 != 0x4BCD00F88A8100BELL);
            v16 = v17 - 5;
          }
          v19 = (void (***)(_QWORD, uint64_t, const char *))v16[3];
          v20 = (std::__shared_weak_count *)v16[4];
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          (**v19)(v19, 1, "");
          *(double *)(a1 + 184) = v10;
        }
      }
      else
      {
        *(double *)(a1 + 184) = v10;
        v24 = *(_DWORD *)(a1 + 192);
        md::LayoutContext::frameState(a2);
        if (v24 != *(_DWORD *)(v25 + 120))
        {
          if (GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::onceToken[0] != -1)
            dispatch_once(GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::onceToken, &__block_literal_global_2354);
          v26 = (id)GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::log;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            v27 = *(_DWORD *)(a1 + 192);
            md::LayoutContext::frameState(a2);
            v29 = *(_DWORD *)(v28 + 120);
            v34 = 67109376;
            *(_DWORD *)v35 = v27;
            *(_WORD *)&v35[4] = 1024;
            *(_DWORD *)&v35[6] = v29;
            _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_INFO, "DisplayLinkStamp changed %u -> %u", (uint8_t *)&v34, 0xEu);
          }

        }
      }
      md::LayoutContext::frameState(a2);
      *(_DWORD *)(a1 + 192) = *(_DWORD *)(v30 + 120);
      v31 = *(_OWORD *)v9;
      v32 = *((_OWORD *)v9 + 1);
      v33 = *((_OWORD *)v9 + 2);
      *(double *)(a1 + 176) = v9[6];
      *(_OWORD *)(a1 + 144) = v32;
      *(_OWORD *)(a1 + 160) = v33;
      *(_OWORD *)v11 = v31;
    }
  }
}

void sub_19F564D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void ___ZL46GEOGetVectorKitDisplayLinkVerificationLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "DisplayLinkVerificationLogic");
  v1 = (void *)GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::log;
  GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::log = (uint64_t)v0;

}

_QWORD *gdc::ManagedObjectHolder<md::DisplayLinkVerificationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1540;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::DisplayLinkVerificationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1540;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::DisplayLinkVerificationContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_73;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_60;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_60:
      v7 = prime;
      goto LABEL_61;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_60;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_65;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_65:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_60;
    }
  }
  if (prime >= v7)
    goto LABEL_61;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_61;
    }
    goto LABEL_36;
  }
  v7 = a1[1];
LABEL_61:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_73:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v6);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_81:
    *v37 = v10;
    goto LABEL_82;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v6) = v13;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_81;
  }
LABEL_82:
  ++a1[3];
  return v10;
}

void sub_19F5653BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E820;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E820;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAC1208F38C3ADC06;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAC1208F38C3ADC06;
      if (*(_QWORD *)&v3 <= 0xAC1208F38C3ADC06)
        v5 = 0xAC1208F38C3ADC06 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAC1208F38C3ADC06;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAC1208F38C3ADC06)
            {
              if (v7[2] == 0xAC1208F38C3ADC06)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAC1208F38C3ADC06)
          {
            if (v7[2] == 0xAC1208F38C3ADC06)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::Main>]";
  *(_QWORD *)(v11 + 24) = 45;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271E98;
  *(_QWORD *)(v11 + 8) = 0xAC1208F38C3ADC06;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAC1208F38C3ADC06, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAC1208F38C3ADC06;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::Main>]";
  v15[2] = 45;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAC1208F38C3ADC06, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F565884(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281D90;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281D90;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::InView>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::InView>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA219A074B7259E0FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA219A074B7259E0FLL;
      if (*(_QWORD *)&v3 <= 0xA219A074B7259E0FLL)
        v5 = 0xA219A074B7259E0FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA219A074B7259E0FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA219A074B7259E0FLL)
            {
              if (v7[2] == 0xA219A074B7259E0FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA219A074B7259E0FLL)
          {
            if (v7[2] == 0xA219A074B7259E0FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::InView]";
  *(_QWORD *)(v11 + 24) = 14;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274388;
  *(_QWORD *)(v11 + 8) = 0xA219A074B7259E0FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA219A074B7259E0FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA219A074B7259E0FLL;
  v15[1] = "md::ls::InView]";
  v15[2] = 14;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA219A074B7259E0FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F565EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::InView>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InView>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InView>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InView>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E868;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E868;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xFB8BCB8E983A05B1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xFB8BCB8E983A05B1;
      if (*(_QWORD *)&v3 <= 0xFB8BCB8E983A05B1)
        v5 = 0xFB8BCB8E983A05B1 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xFB8BCB8E983A05B1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xFB8BCB8E983A05B1)
            {
              if (v7[2] == 0xFB8BCB8E983A05B1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xFB8BCB8E983A05B1)
          {
            if (v7[2] == 0xFB8BCB8E983A05B1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
  *(_QWORD *)(v11 + 24) = 62;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271EC8;
  *(_QWORD *)(v11 + 8) = 0xFB8BCB8E983A05B1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xFB8BCB8E983A05B1, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xFB8BCB8E983A05B1;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledMainNotFiltered>]";
  v15[2] = 62;
  gdc::Registry::_registerStorageDataSignals(a1, 0xFB8BCB8E983A05B1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5664FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E6B8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E6B8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x731F9AB6193E8641;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x731F9AB6193E8641;
      if (*(_QWORD *)&v3 <= 0x731F9AB6193E8641uLL)
        v5 = 0x731F9AB6193E8641uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x731F9AB6193E8641;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x731F9AB6193E8641)
            {
              if (v7[2] == 0x731F9AB6193E8641)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x731F9AB6193E8641)
          {
            if (v7[2] == 0x731F9AB6193E8641)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
  *(_QWORD *)(v11 + 24) = 51;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271DA8;
  *(_QWORD *)(v11 + 8) = 0x731F9AB6193E8641;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x731F9AB6193E8641uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x731F9AB6193E8641;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledMain>]";
  v15[2] = 51;
  gdc::Registry::_registerStorageDataSignals(a1, 0x731F9AB6193E8641, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F566B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::operator()(uint64_t result, uint64_t a2, unsigned __int8 *a3, unint64_t *a4, uint64_t a5, _BYTE *a6)
{
  int v7;
  uint64_t v10;
  _QWORD **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (***v16)();
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  char v23;
  uint64_t (**v24)();
  uint64_t v25;
  int v26;
  uint64_t (***v27)();
  uint64_t (**v28)();
  uint64_t v29;
  int v30;
  uint64_t (***v31)();
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a6 != 3 && *(_BYTE *)(a5 + 2) != 0)
  {
    v7 = *a3;
    if (v7 == 3 || v7 == 0)
    {
      v10 = result;
      v11 = *(_QWORD ***)(result + 8);
      v12 = (uint64_t *)ecs2::Runtime::_localEntity();
      v13 = *v12;
      v14 = (*v12 << 32) | 1;
      v24 = &off_1E427E700;
      v25 = v14;
      v26 = HIDWORD(v13);
      v27 = &v24;
      v28 = &off_1E427E700;
      v31 = &v28;
      v29 = v14;
      v30 = HIDWORD(v13);
      v32 = 0;
      ecs2::Runtime::queueCommand(v15, (uint64_t)&v28);
      if (v32 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v32])(&v23, &v28);
      v32 = -1;
      v16 = v27;
      if (v27 == &v24)
      {
        v17 = 4;
        v16 = &v24;
      }
      else
      {
        if (!v27)
          goto LABEL_17;
        v17 = 5;
      }
      (*v16)[v17]();
LABEL_17:
      v18 = *v11;
      v19 = HIDWORD(*v12);
      v20 = (*v12 << 32) | 1;
      v24 = &off_1E4281D90;
      v25 = v20;
      v26 = v19;
      v27 = &v24;
      v28 = &off_1E4281D90;
      v31 = &v28;
      v29 = v20;
      v30 = v19;
      v32 = 0;
      ecs2::Runtime::queueCommand(v18, (uint64_t)&v28);
      if (v32 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v32])(&v23, &v28);
      v32 = -1;
      v21 = v27;
      if (v27 == &v24)
      {
        v22 = 4;
        v21 = &v24;
      }
      else
      {
        if (!v27)
          return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(v10 + 16), *a4, *a4);
        v22 = 5;
      }
      (*v21)[v22]();
      return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(v10 + 16), *a4, *a4);
    }
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E700;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E700;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF5773E2F171FA967;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF5773E2F171FA967;
      if (*(_QWORD *)&v3 <= 0xF5773E2F171FA967)
        v5 = 0xF5773E2F171FA967 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF5773E2F171FA967;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF5773E2F171FA967)
            {
              if (v7[2] == 0xF5773E2F171FA967)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF5773E2F171FA967)
          {
            if (v7[2] == 0xF5773E2F171FA967)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::CulledUnflattenedMain>]";
  *(_QWORD *)(v11 + 24) = 62;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271DD8;
  *(_QWORD *)(v11 + 8) = 0xF5773E2F171FA967;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF5773E2F171FA967, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF5773E2F171FA967;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledUnflattenedMain>]";
  v15[2] = 62;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF5773E2F171FA967, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5673D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281B08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281B08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

uint64_t gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x65937AC5D2157F71;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x65937AC5D2157F71;
      if (*(_QWORD *)&v3 <= 0x65937AC5D2157F71uLL)
        v5 = 0x65937AC5D2157F71uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x65937AC5D2157F71;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x65937AC5D2157F71)
            {
              if (v7[2] == 0x65937AC5D2157F71)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x65937AC5D2157F71)
          {
            if (v7[2] == 0x65937AC5D2157F71)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ColorCorrectionFactorConstantHandle]";
  *(_QWORD *)(v11 + 24) = 43;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274118;
  *(_QWORD *)(v11 + 8) = 0x65937AC5D2157F71;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x65937AC5D2157F71uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x65937AC5D2157F71;
  v15[1] = "md::ls::ColorCorrectionFactorConstantHandle]";
  v15[2] = 43;
  gdc::Registry::_registerStorageDataSignals(a1, 0x65937AC5D2157F71, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F567A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::FlyoverRegionManager::Internal::updateTriggers(uint64_t ***this)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  const xmlDoc *v6;
  xmlDoc *v7;
  xmlNodePtr RootElement;
  _xmlNode *v9;
  char v10;
  uint64_t ***v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t ***v17;
  uint64_t ***v18;
  _QWORD *v19;
  uint64_t **v20;
  const xmlNode *children;
  void (**v22)(void);
  xmlChar *Prop;
  xmlChar *v24;
  xmlChar *v25;
  xmlChar *v26;
  double v27;
  double v28;
  double v29;
  __double2 v30;
  double v31;
  double v32;
  __double2 v33;
  double v34;
  __int128 v35;
  __int128 v36;
  xmlChar *v37;
  unint64_t v38;
  xmlChar *v39;
  size_t v40;
  size_t v41;
  __int128 *p_dst;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  xmlChar *v51;
  size_t v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  xmlChar *v62;
  int v63;
  char v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  uint64_t *v71;
  void *v72;
  __int16 v73;
  char *v74;
  char *v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _WORD *v81;
  unint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  unint64_t v86;
  __int128 v87;
  __int16 v88;
  unint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t **v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  __int128 v98;
  float v99;
  float v100;
  _BOOL4 v101;
  unint64_t v102;
  unint64_t v103;
  size_t prime;
  void *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  size_t v109;
  size_t v110;
  size_t v111;
  _QWORD *i;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint8x8_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  size_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  _QWORD *v128;
  xmlChar *v129;
  md::FlyoverRegionManager::Internal *v130;
  xmlDoc *v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  void *v136;
  xmlChar *v137;
  const char *__s;
  xmlChar *v139;
  xmlChar *v140;
  xmlChar *v141;
  xmlChar *v142;
  char *v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t **v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  unint64_t v151;
  void *__p[2];
  unint64_t v153;
  uint64_t v154;
  void *v155;
  char v156;
  uint64_t v157;
  __int128 __dst;
  unint64_t v159;
  uint64_t v160;
  _BYTE v161[56];
  void *v162;
  char v163;
  uint64_t v164;
  _QWORD v165[13];
  char v166;
  uint64_t v167;
  std::string v168;
  __int128 v169;
  int v170;
  void *v171[2];
  _BYTE *v172;
  _BYTE v173[40];
  std::__shared_weak_count *v174[2];
  uint64_t **v175;
  uint64_t *v176;
  uint64_t **v177;

  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0D27410], "sharedManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dataForResourceWithName:fallbackBundle:", CFSTR("altitude.xml"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v176 = 0;
      v177 = 0;
      v175 = &v176;
      v5 = objc_retainAutorelease(v4);
      v6 = xmlParseMemory((const char *)objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"));
      v7 = (xmlDoc *)v6;
      if (v6)
      {
        RootElement = xmlDocGetRootElement(v6);
        if (RootElement && (v9 = RootElement->children) != 0)
        {
          while (xmlStrncmp(v9->name, (const xmlChar *)"triggers", 8))
          {
            v9 = v9->next;
            if (!v9)
              goto LABEL_8;
          }
          v130 = (md::FlyoverRegionManager::Internal *)this;
          v131 = v7;
          v132 = v5;
          children = v9->children;
          if (children)
          {
            v136 = (void *)*MEMORY[0x1E0DE4F50];
            v134 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            v135 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
            v22 = (void (**)(void))MEMORY[0x1E0DE8D30];
            v133 = MEMORY[0x1E0DE4FB8] + 16;
            while (1)
            {
              memset(&v168, 0, sizeof(v168));
              v171[1] = 0;
              v172 = 0;
              v171[0] = 0;
              *(_DWORD *)v173 = 0;
              v174[0] = 0;
              v174[1] = 0;
              Prop = xmlGetProp(children, (const xmlChar *)"name");
              if (Prop)
                break;
LABEL_209:
              if (v174[1])
                std::__shared_weak_count::__release_weak(v174[1]);
              if (v171[0])
              {
                v171[1] = v171[0];
                operator delete(v171[0]);
              }
              if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v168.__r_.__value_.__l.__data_);
              children = children->next;
              if (!children)
                goto LABEL_224;
            }
            v141 = Prop;
            std::string::__assign_external(&v168, (const std::string::value_type *)Prop);
            v24 = xmlGetProp(children, (const xmlChar *)"altitude");
            v25 = xmlGetProp(children, (const xmlChar *)"latitude");
            v139 = v25;
            v26 = xmlGetProp(children, (const xmlChar *)"longitude");
            v142 = v26;
            v143 = (char *)xmlGetProp(children, (const xmlChar *)"radius");
            if (!v24 || !v25 || !v26 || !v143)
            {
LABEL_200:
              if (v143)
                (*v22)();
              if (v26)
                ((void (*)(xmlChar *))*v22)(v26);
              if (v25)
                ((void (*)(xmlChar *))*v22)(v25);
              if (v24)
                ((void (*)(xmlChar *))*v22)(v24);
              ((void (*)(xmlChar *))*v22)(v141);
              goto LABEL_209;
            }
            v27 = atof((const char *)v25);
            v28 = atof((const char *)v26);
            v29 = atof((const char *)v24);
            v30 = __sincos_stret(v27);
            v31 = 6378137.0 / sqrt(v30.__sinval * v30.__sinval * -0.00669437999 + 1.0);
            v32 = (v31 + v29) * v30.__cosval;
            v33 = __sincos_stret(v28);
            v34 = atof(v143);
            *(double *)&v35 = v32 * v33.__cosval;
            *((double *)&v35 + 1) = v32 * v33.__sinval;
            *(double *)&v36 = (v29 + v31 * 0.99330562) * v30.__sinval;
            *((double *)&v36 + 1) = v34;
            *(_OWORD *)&v173[8] = v35;
            *(_OWORD *)&v173[24] = v36;
            v37 = xmlGetProp(children, (const xmlChar *)"meta_levels");
            v137 = v37;
            v38 = (unint64_t)xmlGetProp(children, (const xmlChar *)"meta_region");
            v140 = (xmlChar *)v38;
            v39 = xmlGetProp(children, (const xmlChar *)"meta_zmax");
            if (!v37 || !v38 || !v39)
            {
LABEL_194:
              if (v39)
                (*v22)();
              if (v38)
                ((void (*)(unint64_t))*v22)(v38);
              if (v37)
                ((void (*)(xmlChar *))*v22)(v37);
              goto LABEL_200;
            }
            __s = (const char *)v39;
            v40 = strlen((const char *)v37);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v43 = v40 | 7;
              v44 = v43 + 1;
              p_dst = (__int128 *)operator new(v43 + 1);
              v159 = v44 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
              *((_QWORD *)&__dst + 1) = v41;
            }
            else
            {
              HIBYTE(v159) = v40;
              p_dst = &__dst;
              if (!v40)
              {
LABEL_41:
                *((_BYTE *)p_dst + v41) = 0;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v165, &__dst);
                if (SHIBYTE(v159) < 0)
                  operator delete((void *)__dst);
                v45 = strlen(__s);
                if (v45 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                v46 = (void *)v45;
                if (v45 >= 0x17)
                {
                  v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v45 | 7) != 0x17)
                    v49 = v45 | 7;
                  v50 = v49 + 1;
                  v47 = operator new(v49 + 1);
                  __p[1] = v46;
                  v153 = v50 | 0x8000000000000000;
                  __p[0] = v47;
                  v48 = __s;
                }
                else
                {
                  HIBYTE(v153) = v45;
                  v47 = __p;
                  v48 = __s;
                  if (!v45)
                  {
LABEL_51:
                    *((_BYTE *)v46 + (_QWORD)v47) = 0;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&__dst, (__int128 *)__p);
                    v51 = v24;
                    if (SHIBYTE(v153) < 0)
                      operator delete(__p[0]);
                    if (!*(_DWORD *)((char *)&v165[4] + *(_QWORD *)(v165[0] - 24)))
                    {
                      while (!*(_DWORD *)&v161[*(_QWORD *)(__dst - 24)])
                      {
                        LODWORD(__p[0]) = 0;
                        LODWORD(v150) = 0;
                        MEMORY[0x1A1AF49B0](v165, __p);
                        MEMORY[0x1A1AF49B0](&__dst, &v150);
                        v73 = LOBYTE(__p[0]) | (unsigned __int16)((_WORD)v150 << 8);
                        v74 = (char *)v171[1];
                        if (v171[1] < v172)
                        {
                          *(_WORD *)v171[1] = v73;
                          v72 = v74 + 2;
                          v26 = v142;
                        }
                        else
                        {
                          v75 = (char *)v171[0];
                          v76 = (char *)v171[1] - (char *)v171[0];
                          if ((char *)v171[1] - (char *)v171[0] <= -3)
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          v77 = v76 >> 1;
                          if (v172 - (char *)v171[0] <= (unint64_t)((v76 >> 1) + 1))
                            v78 = v77 + 1;
                          else
                            v78 = v172 - (char *)v171[0];
                          if ((unint64_t)(v172 - (char *)v171[0]) >= 0x7FFFFFFFFFFFFFFELL)
                            v79 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v79 = v78;
                          if (v79)
                          {
                            if (v79 < 0)
                              goto LABEL_229;
                            v80 = operator new(2 * v79);
                          }
                          else
                          {
                            v80 = 0;
                          }
                          v81 = &v80[2 * v77];
                          *v81 = v73;
                          v72 = v81 + 1;
                          if (v74 == v75)
                          {
                            v75 = v74;
                            v26 = v142;
                          }
                          else
                          {
                            v82 = v74 - 2 - v75;
                            v26 = v142;
                            if (v82 < 0x1E)
                              goto LABEL_235;
                            if (v74 - v80 - (v76 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
                              goto LABEL_235;
                            v83 = (v82 >> 1) + 1;
                            v84 = &v80[2 * v77 - 16];
                            v85 = v74 - 16;
                            v86 = v83 & 0xFFFFFFFFFFFFFFF0;
                            do
                            {
                              v87 = *(_OWORD *)v85;
                              *(v84 - 1) = *((_OWORD *)v85 - 1);
                              *v84 = v87;
                              v84 -= 2;
                              v85 -= 32;
                              v86 -= 16;
                            }
                            while (v86);
                            v81 -= v83 & 0xFFFFFFFFFFFFFFF0;
                            v74 -= 2 * (v83 & 0xFFFFFFFFFFFFFFF0);
                            if (v83 != (v83 & 0xFFFFFFFFFFFFFFF0))
                            {
LABEL_235:
                              do
                              {
                                v88 = *((_WORD *)v74 - 1);
                                v74 -= 2;
                                *--v81 = v88;
                              }
                              while (v74 != v75);
                              v75 = (char *)v171[0];
                            }
                          }
                          v171[0] = v81;
                          v171[1] = v72;
                          v172 = &v80[2 * v79];
                          if (v75)
                            operator delete(v75);
                          v51 = v24;
                          v38 = (unint64_t)v140;
                        }
                        v171[1] = v72;
                        if (*(_DWORD *)((char *)&v165[4] + *(_QWORD *)(v165[0] - 24)))
                          break;
                      }
                    }
                    v24 = v51;
                    v52 = strlen((const char *)v38);
                    if (v52 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    v53 = v52;
                    if (v52 >= 0x17)
                    {
                      v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v52 | 7) != 0x17)
                        v55 = v52 | 7;
                      v56 = v55 + 1;
                      v54 = operator new(v55 + 1);
                      *((_QWORD *)&v150 + 1) = v53;
                      v151 = v56 | 0x8000000000000000;
                      *(_QWORD *)&v150 = v54;
                    }
                    else
                    {
                      HIBYTE(v151) = v52;
                      v54 = &v150;
                      if (!v52)
                        goto LABEL_62;
                    }
                    memmove(v54, (const void *)v38, v53);
LABEL_62:
                    *((_BYTE *)v54 + v53) = 0;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)__p, &v150);
                    v22 = (void (**)(void))MEMORY[0x1E0DE8D30];
                    if (SHIBYTE(v151) < 0)
                      operator delete((void *)v150);
                    LODWORD(v150) = 0;
                    v148 = 0;
                    v149 = 0;
                    v57 = MEMORY[0x1A1AF49B0](__p, &v150);
                    v58 = MEMORY[0x1A1AF49B0](v57, (char *)&v149 + 4);
                    v59 = MEMORY[0x1A1AF49B0](v58, &v149);
                    v60 = MEMORY[0x1A1AF49B0](v59, (char *)&v148 + 4);
                    v61 = (_QWORD *)MEMORY[0x1A1AF49B0](v60, &v148);
                    if ((*((_BYTE *)v61 + *(_QWORD *)(*v61 - 24) + 32) & 5) != 0
                      || (LOBYTE(v169) = v150,
                          *(_QWORD *)((char *)&v169 + 4) = __PAIR64__(v149, HIDWORD(v149)),
                          HIDWORD(v169) = HIDWORD(v148),
                          v170 = v148,
                          (v62 = xmlGetProp(children, (const xmlChar *)"region")) == 0))
                    {
LABEL_187:
                      __p[0] = v136;
                      *(void **)((char *)__p + *((_QWORD *)v136 - 3)) = v135;
                      v153 = v134;
                      v154 = v133;
                      if (v156 < 0)
                        operator delete(v155);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A1AF4D64](&v157);
                      *(_QWORD *)&__dst = v136;
                      *(_QWORD *)((char *)&__dst + *((_QWORD *)v136 - 3)) = v135;
                      v126 = MEMORY[0x1E0DE4FB8] + 16;
                      v159 = v134;
                      v160 = MEMORY[0x1E0DE4FB8] + 16;
                      if (v163 < 0)
                        operator delete(v162);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A1AF4D64](&v164);
                      v165[0] = v136;
                      *(_QWORD *)((char *)v165 + *((_QWORD *)v136 - 3)) = v135;
                      v165[2] = v134;
                      v165[3] = v126;
                      if (v166 < 0)
                        operator delete((void *)v165[11]);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A1AF4D64](&v167);
                      v25 = v139;
                      v38 = (unint64_t)v140;
                      v37 = v137;
                      v39 = (xmlChar *)__s;
                      goto LABEL_194;
                    }
                    v129 = v62;
                    v63 = atoi((const char *)v62);
                    *(_DWORD *)v173 = v63;
                    v64 = v150;
                    v65 = v176;
                    v66 = &v176;
                    v67 = &v176;
                    if (v176)
                    {
                      v68 = v63;
                      while (1)
                      {
                        while (1)
                        {
                          v66 = (uint64_t **)v65;
                          v69 = *((unsigned __int8 *)v65 + 32);
                          if (v69 <= v150)
                            break;
                          v65 = *v66;
                          v67 = v66;
                          if (!*v66)
                            goto LABEL_73;
                        }
                        if (v69 >= v150)
                          break;
                        v65 = v66[1];
                        if (!v65)
                        {
                          v67 = v66 + 1;
                          goto LABEL_73;
                        }
                      }
                      v70 = (char *)v66;
                    }
                    else
                    {
LABEL_73:
                      v70 = (char *)operator new(0x50uLL);
                      v70[32] = v64;
                      *(_OWORD *)(v70 + 40) = 0u;
                      *(_OWORD *)(v70 + 56) = 0u;
                      *((_DWORD *)v70 + 18) = 1065353216;
                      *(_QWORD *)v70 = 0;
                      *((_QWORD *)v70 + 1) = 0;
                      *((_QWORD *)v70 + 2) = v66;
                      *v67 = (uint64_t *)v70;
                      v71 = (uint64_t *)v70;
                      if (*v175)
                      {
                        v175 = (uint64_t **)*v175;
                        v71 = *v67;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v176, v71);
                      v177 = (uint64_t **)((char *)v177 + 1);
                      v68 = *(_DWORD *)v173;
                    }
                    v89 = v68;
                    v90 = *((_QWORD *)v70 + 6);
                    if (v90)
                    {
                      v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
                      v91.i16[0] = vaddlv_u8(v91);
                      if (v91.u32[0] > 1uLL)
                      {
                        v92 = v68;
                        if (v90 <= v68)
                          v92 = v68 % v90;
                      }
                      else
                      {
                        v92 = ((_DWORD)v90 - 1) & v68;
                      }
                      v38 = v92;
                      v93 = *(uint64_t ***)(*((_QWORD *)v70 + 5) + 8 * v92);
                      if (v93)
                      {
                        v94 = *v93;
                        if (v94)
                        {
                          if (v91.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v96 = v94[1];
                              if (v96 == v68)
                              {
                                if (*((_DWORD *)v94 + 4) == v68)
                                  goto LABEL_186;
                              }
                              else if ((v96 & (v90 - 1)) != v38)
                              {
                                goto LABEL_125;
                              }
                              v94 = (uint64_t *)*v94;
                              if (!v94)
                                goto LABEL_125;
                            }
                          }
                          do
                          {
                            v95 = v94[1];
                            if (v95 == v68)
                            {
                              if (*((_DWORD *)v94 + 4) == v68)
                                goto LABEL_186;
                            }
                            else
                            {
                              if (v95 >= v90)
                                v95 %= v90;
                              if (v95 != v92)
                                break;
                            }
                            v94 = (uint64_t *)*v94;
                          }
                          while (v94);
                        }
                      }
                    }
LABEL_125:
                    v97 = (char *)operator new(0x98uLL);
                    v128 = v70 + 56;
                    *(_QWORD *)v97 = 0;
                    *((_QWORD *)v97 + 1) = v68;
                    *((_DWORD *)v97 + 4) = v68;
                    *((std::string *)v97 + 1) = v168;
                    memset(&v168, 0, sizeof(v168));
                    *((_OWORD *)v97 + 3) = v169;
                    *((_DWORD *)v97 + 16) = v170;
                    *(_OWORD *)(v97 + 72) = *(_OWORD *)v171;
                    *((_QWORD *)v97 + 11) = v172;
                    v171[1] = 0;
                    v172 = 0;
                    v171[0] = 0;
                    *((_QWORD *)v97 + 16) = *(_QWORD *)&v173[32];
                    v98 = *(_OWORD *)&v173[16];
                    *((_OWORD *)v97 + 6) = *(_OWORD *)v173;
                    *((_OWORD *)v97 + 7) = v98;
                    *(_OWORD *)(v97 + 136) = *(_OWORD *)v174;
                    v174[0] = 0;
                    v174[1] = 0;
                    v99 = (float)(unint64_t)(*((_QWORD *)v70 + 8) + 1);
                    v100 = *((float *)v70 + 18);
                    if (v90 && (float)(v100 * (float)v90) >= v99)
                    {
LABEL_176:
                      v123 = *((_QWORD *)v70 + 5);
                      v124 = *(_QWORD **)(v123 + 8 * v38);
                      if (v124)
                      {
                        *(_QWORD *)v97 = *v124;
                      }
                      else
                      {
                        *(_QWORD *)v97 = *v128;
                        *v128 = v97;
                        *(_QWORD *)(v123 + 8 * v38) = v128;
                        if (!*(_QWORD *)v97)
                          goto LABEL_185;
                        v125 = *(_QWORD *)(*(_QWORD *)v97 + 8);
                        if ((v90 & (v90 - 1)) != 0)
                        {
                          if (v125 >= v90)
                            v125 %= v90;
                        }
                        else
                        {
                          v125 &= v90 - 1;
                        }
                        v124 = (_QWORD *)(*((_QWORD *)v70 + 5) + 8 * v125);
                      }
                      *v124 = v97;
LABEL_185:
                      ++*((_QWORD *)v70 + 8);
LABEL_186:
                      v22 = (void (**)(void))MEMORY[0x1E0DE8D30];
                      ((void (*)(xmlChar *))*MEMORY[0x1E0DE8D30])(v129);
                      goto LABEL_187;
                    }
                    v101 = v90 >= 3 && (v90 & (v90 - 1)) == 0;
                    v102 = (2 * v90) | !v101;
                    v103 = vcvtps_u32_f32(v99 / v100);
                    if (v102 <= v103)
                      prime = v103;
                    else
                      prime = v102;
                    if (prime == 1)
                    {
                      prime = 2;
                    }
                    else if ((prime & (prime - 1)) != 0)
                    {
                      prime = std::__next_prime(prime);
                    }
                    v90 = *((_QWORD *)v70 + 6);
                    if (prime <= v90)
                    {
                      if (prime >= v90)
                        goto LABEL_163;
                      v116 = vcvtps_u32_f32((float)*((unint64_t *)v70 + 8) / *((float *)v70 + 18));
                      if (v90 < 3
                        || (v117 = (uint8x8_t)vcnt_s8((int8x8_t)v90), v117.i16[0] = vaddlv_u8(v117), v117.u32[0] > 1uLL))
                      {
                        v116 = std::__next_prime(v116);
                      }
                      else
                      {
                        v118 = 1 << -(char)__clz(v116 - 1);
                        if (v116 >= 2)
                          v116 = v118;
                      }
                      if (prime <= v116)
                        prime = v116;
                      if (prime >= v90)
                      {
                        v90 = *((_QWORD *)v70 + 6);
LABEL_163:
                        if ((v90 & (v90 - 1)) != 0)
                        {
                          if (v90 <= v89)
                            v38 = v89 % v90;
                          else
                            v38 = v89;
                        }
                        else
                        {
                          v38 = ((_DWORD)v90 - 1) & v89;
                        }
                        goto LABEL_176;
                      }
                      if (!prime)
                      {
                        v127 = (void *)*((_QWORD *)v70 + 5);
                        *((_QWORD *)v70 + 5) = 0;
                        if (v127)
                          operator delete(v127);
                        v90 = 0;
                        *((_QWORD *)v70 + 6) = 0;
                        goto LABEL_163;
                      }
                    }
                    if (prime >> 61)
LABEL_229:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v105 = operator new(8 * prime);
                    v106 = (void *)*((_QWORD *)v70 + 5);
                    *((_QWORD *)v70 + 5) = v105;
                    if (v106)
                      operator delete(v106);
                    v107 = 0;
                    *((_QWORD *)v70 + 6) = prime;
                    do
                      *(_QWORD *)(*((_QWORD *)v70 + 5) + 8 * v107++) = 0;
                    while (prime != v107);
                    v108 = (_QWORD *)*v128;
                    if (!*v128)
                    {
LABEL_162:
                      v90 = prime;
                      goto LABEL_163;
                    }
                    v109 = v108[1];
                    v110 = prime - 1;
                    if ((prime & (prime - 1)) == 0)
                    {
                      v111 = v109 & v110;
                      *(_QWORD *)(*((_QWORD *)v70 + 5) + 8 * v111) = v128;
                      for (i = (_QWORD *)*v108; *v108; i = (_QWORD *)*v108)
                      {
                        v113 = i[1] & v110;
                        if (v113 == v111)
                        {
                          v108 = i;
                        }
                        else
                        {
                          v114 = *((_QWORD *)v70 + 5);
                          if (*(_QWORD *)(v114 + 8 * v113))
                          {
                            *v108 = *i;
                            v115 = 8 * v113;
                            *i = **(_QWORD **)(*((_QWORD *)v70 + 5) + v115);
                            **(_QWORD **)(*((_QWORD *)v70 + 5) + v115) = i;
                          }
                          else
                          {
                            *(_QWORD *)(v114 + 8 * v113) = v108;
                            v108 = i;
                            v111 = v113;
                          }
                        }
                      }
                      goto LABEL_162;
                    }
                    if (v109 >= prime)
                      v109 %= prime;
                    *(_QWORD *)(*((_QWORD *)v70 + 5) + 8 * v109) = v128;
                    v119 = (_QWORD *)*v108;
                    if (!*v108)
                      goto LABEL_162;
                    while (1)
                    {
                      v121 = v119[1];
                      if (v121 >= prime)
                        v121 %= prime;
                      if (v121 != v109)
                      {
                        v122 = *((_QWORD *)v70 + 5);
                        if (!*(_QWORD *)(v122 + 8 * v121))
                        {
                          *(_QWORD *)(v122 + 8 * v121) = v108;
                          goto LABEL_167;
                        }
                        *v108 = *v119;
                        v120 = 8 * v121;
                        *v119 = **(_QWORD **)(*((_QWORD *)v70 + 5) + v120);
                        **(_QWORD **)(*((_QWORD *)v70 + 5) + v120) = v119;
                        v119 = v108;
                      }
                      v121 = v109;
LABEL_167:
                      v108 = v119;
                      v119 = (_QWORD *)*v119;
                      v109 = v121;
                      if (!v119)
                        goto LABEL_162;
                    }
                  }
                }
                memmove(v47, v48, (size_t)v46);
                goto LABEL_51;
              }
            }
            memmove(p_dst, v37, v41);
            goto LABEL_41;
          }
LABEL_224:
          v144 = v175;
          v145 = v176;
          v146 = v177;
          if (v177)
          {
            v176[2] = (uint64_t)&v145;
            v175 = &v176;
            v10 = 1;
            v176 = 0;
            v177 = 0;
          }
          else
          {
            v144 = &v145;
            v10 = 1;
          }
          v5 = v132;
          this = (uint64_t ***)v130;
          v7 = v131;
        }
        else
        {
LABEL_8:
          v10 = 0;
          LOBYTE(v144) = 0;
        }
        v147 = v10;
        xmlFreeDoc(v7);
      }
      else
      {
        LOBYTE(v144) = 0;
        v147 = 0;
      }

      if (v147)
      {
        v12 = this[3];
        v11 = this + 3;
        v13 = v145;
        *v11 = v144;
        v14 = v11[1];
        v11[1] = (uint64_t **)v13;
        v144 = v12;
        v145 = (uint64_t *)v14;
        v15 = v11[2];
        v16 = v146;
        v11[2] = v146;
        v146 = v15;
        v17 = (uint64_t ***)(v13 + 2);
        if (!v16)
          v17 = v11;
        *v17 = (uint64_t **)(v11 + 1);
        if (v15)
          v18 = (uint64_t ***)(v14 + 2);
        else
          v18 = &v144;
        *v18 = &v145;

        goto LABEL_21;
      }

    }
  }
  if (this[5])
  {
    v20 = this[4];
    v19 = this + 4;
    *(v19 - 1) = v19;
    *v19 = 0;
    v19[1] = 0;
  }
LABEL_21:

}

void sub_19F568B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xmlDoc *cur, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p)
{
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  std::__shared_weak_count *v57;
  void *v58;

  v57 = *(std::__shared_weak_count **)(v53 + 144);
  if (v57)
  {
    std::__shared_weak_count::__release_weak(v57);
    v58 = *(void **)(v53 + 72);
    if (!v58)
    {
LABEL_3:
      if ((*(char *)(v53 + 47) & 0x80000000) == 0)
      {
LABEL_5:
        operator delete((void *)v53);
        ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a12);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x270]);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x388]);
        ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a33);
        if (a37)
          ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a37);
        if (a31)
          ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a31);
        ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a42);
        if (a41)
        {
          ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a41);
          if (!a36)
          {
LABEL_15:
            if (!v52)
              goto LABEL_17;
            goto LABEL_16;
          }
        }
        else if (!a36)
        {
          goto LABEL_15;
        }
        ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a36);
        if (!v52)
        {
LABEL_17:
          ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a40);
          xmlFreeDoc(cur);

          _Unwind_Resume(a1);
        }
LABEL_16:
        ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(v52);
        goto LABEL_17;
      }
LABEL_4:
      operator delete(*v54);
      goto LABEL_5;
    }
  }
  else
  {
    v58 = *(void **)(v53 + 72);
    if (!v58)
      goto LABEL_3;
  }
  *(_QWORD *)(v53 + 80) = v58;
  operator delete(v58);
  if ((*(char *)(v53 + 47) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void std::__tree<std::__value_type<unsigned char,std::unordered_map<unsigned int,`anonymous namespace'::Trigger>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::unordered_map<unsigned int,`anonymous namespace'::Trigger>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::unordered_map<unsigned int,`anonymous namespace'::Trigger>>>>::destroy(_QWORD *a1)
{
  char *v2;
  void *v3;
  char *v4;
  std::__shared_weak_count *v5;
  void *v6;

  if (a1)
  {
    v2 = (char *)a1[7];
    if (v2)
    {
      do
      {
        v4 = *(char **)v2;
        v5 = (std::__shared_weak_count *)*((_QWORD *)v2 + 18);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v6 = (void *)*((_QWORD *)v2 + 9);
        if (v6)
        {
          *((_QWORD *)v2 + 10) = v6;
          operator delete(v6);
        }
        if (v2[47] < 0)
          operator delete(*((void **)v2 + 3));
        operator delete(v2);
        v2 = v4;
      }
      while (v4);
    }
    v3 = (void *)a1[5];
    a1[5] = 0;
    if (v3)
      operator delete(v3);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(a1[1]);
    if (a1[13])
    {
      v2 = a1[11];
      v3 = (_QWORD *)a1[12];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
      **(_QWORD **)(v2 + 8) = v4;
      a1[13] = 0;
      if (v3 != a1 + 11)
      {
        do
        {
          v8 = (_QWORD *)v3[1];
          if (*((_BYTE *)v3 + 64))
          {
            v9 = (std::__shared_weak_count *)v3[6];
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(p_shared_owners);
              while (__stlxr(v11 - 1, p_shared_owners));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
          }
          operator delete(v3);
          v3 = v8;
        }
        while (v8 != a1 + 11);
      }
    }
    v5 = (_QWORD *)a1[8];
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = (void *)a1[6];
    a1[6] = 0;
    if (v7)
      operator delete(v7);
    operator delete(a1);
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = MEMORY[0x1E0DE4FD0];
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  v6 = a1 + 16;
  v7 = a1 + 24;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v6 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  v15 = *a2;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v15;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 24;
  std::stringbuf::__init_buf_ptrs[abi:nn180100](v7);
  return a1;
}

void sub_19F569138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::Trigger::~Trigger(_anonymous_namespace_::Trigger *this)
{
  std::__shared_weak_count *v2;
  void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

std::string *std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v3 >= v7)
    {
      result = *(std::string **)(a1 + 64);
      *(_QWORD *)(a1 + 72) = v7;
LABEL_14:
      result->__r_.__value_.__s.__data_[v7] = 0;
      LODWORD(v8) = *(char *)(a1 + 87);
      if ((v8 & 0x80000000) != 0)
        goto LABEL_15;
LABEL_12:
      v8 = v8;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_14;
    }
  }
  result = std::string::append(result, v7 - v3, 0);
  LODWORD(v8) = *(char *)(a1 + 87);
  if ((v8 & 0x80000000) == 0)
    goto LABEL_12;
LABEL_15:
  v8 = *(_QWORD *)(a1 + 72);
LABEL_16:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) != 0)
  {
    if (v5 >> 31)
    {
      v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
      v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
      v5 = v5 - v10 - 0x7FFFFFFF;
      *(_QWORD *)(a1 + 48) = v4;
    }
    if (v5)
      *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void md::FlyoverRegionManager::Internal::getRegionArea(md::FlyoverRegionManager::Internal *this, QuadTile *a2, uint64_t a3)
{
  QuadTile *v4;
  int *v5;
  int *p_xIdx;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  int *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int32x2_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int *v46;
  unsigned int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t *v50;
  int *v51;
  int *v52;
  BOOL v53;
  uint64_t *v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  int *v65;
  unsigned int v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t *v69;
  int *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t **v76;
  unsigned int v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::mutex *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  _QWORD *v88;
  char *v89;
  md::FlyoverRegionManager::Internal *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  int v101;
  _DWORD *v102;
  _DWORD *v103;
  int v104;
  int v105;
  unint64_t v106;
  _QWORD *v107;
  _DWORD *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t *v118;
  unsigned int v119;
  uint64_t **v120;
  uint64_t **v121;
  unsigned int v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t *v134;
  unsigned int v135;
  int *v136;
  unsigned int v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  QuadTile *v147;
  std::mutex *v149;
  int32x2_t v150;
  unsigned __int8 *v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  char v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  char v159;
  __int128 v160;
  int v161;
  char v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  int v165;
  char v166;
  __int128 v167;
  int v168;
  unsigned __int8 v169[4];
  int32x2_t v170;

  v4 = a2;
  v149 = (std::mutex *)&a2[2];
  std::mutex::lock((std::mutex *)&a2[2]);
  v5 = *(int **)&v4[1]._type;
  if (v5 == &v4[1]._xIdx)
  {
LABEL_130:
    v84 = v149;
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    goto LABEL_131;
  }
  p_xIdx = &v4->_xIdx;
  v152 = &v4->_xIdx;
  v153 = a3;
  while (1)
  {
    v7 = *((unsigned __int8 *)v5 + 32);
    if (*(unsigned __int8 *)(a3 + 1) >= v7)
      break;
LABEL_69:
    v51 = (int *)*((_QWORD *)v5 + 1);
    if (v51)
    {
      do
      {
        v52 = v51;
        v51 = *(int **)v51;
      }
      while (v51);
    }
    else
    {
      do
      {
        v52 = (int *)*((_QWORD *)v5 + 2);
        v53 = *(_QWORD *)v52 == (_QWORD)v5;
        v5 = v52;
      }
      while (!v53);
    }
    v5 = v52;
    if (v52 == &v4[1]._xIdx)
      goto LABEL_130;
  }
  v8 = *(uint64_t **)p_xIdx;
  v9 = (uint64_t **)p_xIdx;
  v10 = (uint64_t **)p_xIdx;
  if (*(_QWORD *)p_xIdx)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = *((unsigned __int8 *)v8 + 32);
        if (v7 >= v11)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_12;
      }
      if (v11 >= v7)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_12;
      }
    }
    v12 = v10;
  }
  else
  {
LABEL_12:
    v12 = operator new(0x70uLL);
    v12[32] = v7;
    *((_QWORD *)v12 + 5) = 512;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_DWORD *)v12 + 20) = 1065353216;
    *((_QWORD *)v12 + 11) = v12 + 88;
    *((_QWORD *)v12 + 12) = v12 + 88;
    *((_QWORD *)v12 + 13) = 0;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v10;
    *v9 = (uint64_t *)v12;
    v13 = **(_QWORD **)&v4->_type;
    v14 = (uint64_t *)v12;
    if (v13)
    {
      *(_QWORD *)&v4->_type = v13;
      v14 = *v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v14);
    ++v4->_hash;
  }
  v15 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)v12 + 6, (unsigned __int8 *)v153);
  if (v15)
  {
    v16 = (char *)*((_QWORD *)v12 + 12);
    v17 = (char *)v15[5];
    if (v16 != v17)
    {
      v18 = (char *)*((_QWORD *)v17 + 1);
      if (v18 != v16)
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)(v19 + 8) = v18;
        **((_QWORD **)v17 + 1) = v19;
        v20 = *(_QWORD *)v16;
        *(_QWORD *)(v20 + 8) = v17;
        *(_QWORD *)v17 = v20;
        *(_QWORD *)v16 = v17;
        *((_QWORD *)v17 + 1) = v16;
        v16 = (char *)*((_QWORD *)v12 + 12);
      }
    }
  }
  else
  {
    v16 = v12 + 88;
  }
  v21 = *(uint64_t **)p_xIdx;
  v22 = *((unsigned __int8 *)v5 + 32);
  v23 = p_xIdx;
  if (*(_QWORD *)p_xIdx)
  {
    while (1)
    {
      while (1)
      {
        v23 = (int *)v21;
        v24 = *((unsigned __int8 *)v21 + 32);
        if (v22 >= v24)
          break;
        v21 = *(uint64_t **)v23;
        p_xIdx = v23;
        if (!*(_QWORD *)v23)
          goto LABEL_28;
      }
      if (v24 >= v22)
        break;
      v21 = (uint64_t *)*((_QWORD *)v23 + 1);
      if (!v21)
      {
        p_xIdx = v23 + 2;
        goto LABEL_28;
      }
    }
    v25 = v23;
  }
  else
  {
LABEL_28:
    v25 = operator new(0x70uLL);
    v25[32] = v22;
    *((_QWORD *)v25 + 5) = 512;
    *((_OWORD *)v25 + 3) = 0u;
    *((_OWORD *)v25 + 4) = 0u;
    *((_DWORD *)v25 + 20) = 1065353216;
    *((_QWORD *)v25 + 11) = v25 + 88;
    *((_QWORD *)v25 + 12) = v25 + 88;
    *((_QWORD *)v25 + 13) = 0;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v23;
    *(_QWORD *)p_xIdx = v25;
    v26 = **(_QWORD **)&v4->_type;
    v27 = (uint64_t *)v25;
    if (v26)
    {
      *(_QWORD *)&v4->_type = v26;
      v27 = *(uint64_t **)p_xIdx;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v27);
    ++v4->_hash;
  }
  p_xIdx = &v4->_xIdx;
  a3 = v153;
  if (v16 != v25 + 88)
  {
    if (v16[64])
    {
      v90 = this;
      v84 = v149;
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 24) = 0;
      if (v16[64])
      {
        *(_QWORD *)this = *((_QWORD *)v16 + 5);
        v91 = *((_QWORD *)v16 + 6);
        *((_QWORD *)this + 1) = v91;
        if (v91)
        {
          v92 = (unint64_t *)(v91 + 8);
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
LABEL_190:
        *((_DWORD *)v90 + 4) = *((_DWORD *)v16 + 14);
        *((_BYTE *)v90 + 24) = 1;
        goto LABEL_131;
      }
      goto LABEL_131;
    }
    goto LABEL_69;
  }
  v28 = *(unsigned __int8 *)(v153 + 1);
  v29 = *((unsigned __int8 *)v5 + 32);
  if (*(_BYTE *)(v153 + 1))
  {
    v30 = (v28 - v29);
    if (v28 < v30)
      v30 = *(unsigned __int8 *)(v153 + 1);
    LOBYTE(v28) = v28 - v30;
    v31 = vshl_s32(*(int32x2_t *)(v153 + 4), vneg_s32(vdup_n_s32(v30)));
  }
  else
  {
    v31 = *(int32x2_t *)(v153 + 4);
  }
  v169[0] = *(_BYTE *)v153;
  v169[1] = v28;
  v150 = v31;
  v170 = v31;
  v32 = *(_QWORD *)v152;
  v33 = &v4->_xIdx;
  v34 = &v4->_xIdx;
  if (*(_QWORD *)v152)
  {
    while (1)
    {
      while (1)
      {
        v34 = (int *)v32;
        v35 = *(unsigned __int8 *)(v32 + 32);
        if (v29 >= v35)
          break;
        v32 = *(_QWORD *)v34;
        v33 = v34;
        if (!*(_QWORD *)v34)
          goto LABEL_47;
      }
      if (v35 >= v29)
        break;
      v32 = *((_QWORD *)v34 + 1);
      if (!v32)
      {
        v33 = v34 + 2;
        goto LABEL_47;
      }
    }
    v36 = v34;
  }
  else
  {
LABEL_47:
    v36 = operator new(0x70uLL);
    v36[32] = v29;
    *((_QWORD *)v36 + 5) = 512;
    *((_OWORD *)v36 + 3) = 0u;
    *((_OWORD *)v36 + 4) = 0u;
    *((_DWORD *)v36 + 20) = 1065353216;
    *((_QWORD *)v36 + 11) = v36 + 88;
    *((_QWORD *)v36 + 12) = v36 + 88;
    *((_QWORD *)v36 + 13) = 0;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v34;
    *(_QWORD *)v33 = v36;
    v37 = **(_QWORD **)&v4->_type;
    v38 = (uint64_t *)v36;
    if (v37)
    {
      *(_QWORD *)&v4->_type = v37;
      v38 = *(uint64_t **)v33;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v38);
    ++v4->_hash;
  }
  v39 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)v36 + 6, v169);
  if (v39)
  {
    v16 = (char *)*((_QWORD *)v36 + 12);
    v40 = (char *)v39[5];
    if (v16 != v40)
    {
      v41 = (char *)*((_QWORD *)v40 + 1);
      if (v41 != v16)
      {
        v42 = *(_QWORD *)v40;
        *(_QWORD *)(v42 + 8) = v41;
        **((_QWORD **)v40 + 1) = v42;
        v43 = *(_QWORD *)v16;
        *(_QWORD *)(v43 + 8) = v40;
        *(_QWORD *)v40 = v43;
        *(_QWORD *)v16 = v40;
        *((_QWORD *)v40 + 1) = v16;
        v16 = (char *)*((_QWORD *)v36 + 12);
      }
    }
  }
  else
  {
    v16 = v36 + 88;
  }
  v44 = *(_QWORD *)v152;
  v45 = *((unsigned __int8 *)v5 + 32);
  v46 = &v4->_xIdx;
  if (*(_QWORD *)v152)
  {
    while (1)
    {
      while (1)
      {
        v46 = (int *)v44;
        v47 = *(unsigned __int8 *)(v44 + 32);
        if (v45 >= v47)
          break;
        v44 = *(_QWORD *)v46;
        p_xIdx = v46;
        if (!*(_QWORD *)v46)
          goto LABEL_63;
      }
      if (v47 >= v45)
        break;
      v44 = *((_QWORD *)v46 + 1);
      if (!v44)
      {
        p_xIdx = v46 + 2;
        goto LABEL_63;
      }
    }
    v48 = v46;
  }
  else
  {
LABEL_63:
    v48 = operator new(0x70uLL);
    v48[32] = v45;
    *((_QWORD *)v48 + 5) = 512;
    *((_OWORD *)v48 + 3) = 0u;
    *((_OWORD *)v48 + 4) = 0u;
    *((_DWORD *)v48 + 20) = 1065353216;
    *((_QWORD *)v48 + 11) = v48 + 88;
    *((_QWORD *)v48 + 12) = v48 + 88;
    *((_QWORD *)v48 + 13) = 0;
    *(_QWORD *)v48 = 0;
    *((_QWORD *)v48 + 1) = 0;
    *((_QWORD *)v48 + 2) = v46;
    *(_QWORD *)p_xIdx = v48;
    v49 = **(_QWORD **)&v4->_type;
    v50 = (uint64_t *)v48;
    if (v49)
    {
      *(_QWORD *)&v4->_type = v49;
      v50 = *(uint64_t **)p_xIdx;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v50);
    ++v4->_hash;
  }
  p_xIdx = &v4->_xIdx;
  a3 = v153;
  if (v16 != v48 + 88)
  {
    if (v16[64])
    {
      v90 = this;
      v84 = v149;
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 24) = 0;
      if (v16[64])
      {
        *(_QWORD *)this = *((_QWORD *)v16 + 5);
        v126 = *((_QWORD *)v16 + 6);
        *((_QWORD *)this + 1) = v126;
        if (v126)
        {
          v127 = (unint64_t *)(v126 + 8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
        }
        goto LABEL_190;
      }
LABEL_131:
      std::mutex::unlock(v84);
      return;
    }
    goto LABEL_69;
  }
  v54 = (uint64_t *)*((_QWORD *)v5 + 7);
  if (!v54)
  {
LABEL_96:
    v63 = *(_QWORD *)v152;
    v64 = *((unsigned __int8 *)v5 + 32);
    v65 = &v4->_xIdx;
    if (*(_QWORD *)v152)
    {
      while (1)
      {
        while (1)
        {
          v65 = (int *)v63;
          v66 = *(unsigned __int8 *)(v63 + 32);
          if (v64 >= v66)
            break;
          v63 = *(_QWORD *)v65;
          p_xIdx = v65;
          if (!*(_QWORD *)v65)
            goto LABEL_103;
        }
        if (v66 >= v64)
          break;
        v63 = *((_QWORD *)v65 + 1);
        if (!v63)
        {
          p_xIdx = v65 + 2;
          goto LABEL_103;
        }
      }
      v67 = v65;
    }
    else
    {
LABEL_103:
      v67 = operator new(0x70uLL);
      v67[32] = v64;
      *((_QWORD *)v67 + 5) = 512;
      *((_OWORD *)v67 + 3) = 0u;
      *((_OWORD *)v67 + 4) = 0u;
      *((_DWORD *)v67 + 20) = 1065353216;
      *((_QWORD *)v67 + 11) = v67 + 88;
      *((_QWORD *)v67 + 12) = v67 + 88;
      *((_QWORD *)v67 + 13) = 0;
      *(_QWORD *)v67 = 0;
      *((_QWORD *)v67 + 1) = 0;
      *((_QWORD *)v67 + 2) = v65;
      *(_QWORD *)p_xIdx = v67;
      v68 = **(_QWORD **)&v4->_type;
      v69 = (uint64_t *)v67;
      if (v68)
      {
        *(_QWORD *)&v4->_type = v68;
        v69 = *(uint64_t **)p_xIdx;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v69);
      ++v4->_hash;
    }
    LOBYTE(v157) = 0;
    v159 = 0;
    geo::Cache<geo::QuadTile,std::optional<md::FlyoverRegionManager::Internal::RegionArea>,geo::QuadTileHash,geo::LRUPolicy>::insert((uint64_t)(v67 + 40), (unsigned __int8 *)v153, &v157);
    v70 = &v4->_xIdx;
    if (v159)
    {
      v71 = v158;
      if (v158)
      {
        p_shared_owners = (unint64_t *)&v158->__shared_owners_;
        do
          v73 = __ldaxr(p_shared_owners);
        while (__stlxr(v73 - 1, p_shared_owners));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
    }
    v74 = *(_QWORD *)v152;
    v75 = *((unsigned __int8 *)v5 + 32);
LABEL_115:
    v76 = (uint64_t **)v70;
    if (v74)
    {
      while (1)
      {
        v70 = (int *)v74;
        v77 = *(unsigned __int8 *)(v74 + 32);
        if (v75 < v77)
        {
          v74 = *(_QWORD *)v70;
          goto LABEL_115;
        }
        if (v77 >= v75)
          break;
        v74 = *((_QWORD *)v70 + 1);
        if (!v74)
        {
          v76 = (uint64_t **)(v70 + 2);
          goto LABEL_120;
        }
      }
      v78 = v70;
    }
    else
    {
LABEL_120:
      v78 = operator new(0x70uLL);
      v78[32] = v75;
      *((_QWORD *)v78 + 5) = 512;
      *((_OWORD *)v78 + 3) = 0u;
      *((_OWORD *)v78 + 4) = 0u;
      *((_DWORD *)v78 + 20) = 1065353216;
      *((_QWORD *)v78 + 11) = v78 + 88;
      *((_QWORD *)v78 + 12) = v78 + 88;
      *((_QWORD *)v78 + 13) = 0;
      *(_QWORD *)v78 = 0;
      *((_QWORD *)v78 + 1) = 0;
      *((_QWORD *)v78 + 2) = v70;
      *v76 = (uint64_t *)v78;
      v79 = **(_QWORD **)&v4->_type;
      v80 = (uint64_t *)v78;
      if (v79)
      {
        *(_QWORD *)&v4->_type = v79;
        v80 = *v76;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v80);
      ++v4->_hash;
    }
    a3 = v153;
    LOBYTE(v154) = 0;
    v156 = 0;
    geo::Cache<geo::QuadTile,std::optional<md::FlyoverRegionManager::Internal::RegionArea>,geo::QuadTileHash,geo::LRUPolicy>::insert((uint64_t)(v78 + 40), v169, &v154);
    p_xIdx = &v4->_xIdx;
    if (v156)
    {
      v81 = v155;
      if (v155)
      {
        v82 = (unint64_t *)&v155->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
    goto LABEL_69;
  }
  while (1)
  {
    v55 = -1 << *((_BYTE *)v54 + 48);
    v56 = ~v55 - v150.i32[0];
    v58 = *((_DWORD *)v54 + 13);
    v57 = *((_DWORD *)v54 + 14);
    v59 = (*((_DWORD *)v54 + 15) + v58) & ~v55;
    if (v58 <= v59)
    {
      if (v58 > v56 || v59 < v56)
        goto LABEL_77;
    }
    else if (v58 < v56 || v59 > v56)
    {
      goto LABEL_77;
    }
    v62 = (*((_DWORD *)v54 + 16) + v57) & ~v55;
    if (v57 <= v62)
      break;
    if (v57 >= v150.i32[1] && v62 <= v150.i32[1])
      goto LABEL_132;
LABEL_77:
    v54 = (uint64_t *)*v54;
    if (!v54)
      goto LABEL_96;
  }
  if (v57 > v150.i32[1] || v62 < v150.i32[1])
    goto LABEL_77;
LABEL_132:
  v167 = 0uLL;
  v85 = (std::__shared_weak_count *)v54[18];
  if (v85 && (v86 = std::__shared_weak_count::lock(v85), (*((_QWORD *)&v167 + 1) = v86) != 0))
  {
    v87 = v86;
    v88 = (_QWORD *)v54[17];
    *(_QWORD *)&v167 = v88;
    v168 = *((_DWORD *)v54 + 4);
    v89 = (char *)v86;
    if (!v88)
      goto LABEL_142;
  }
  else
  {
    v87 = 0;
    v168 = *((_DWORD *)v54 + 4);
LABEL_142:
    v89 = (char *)operator new(0x118uLL);
    *((_QWORD *)v89 + 1) = 0;
    *((_QWORD *)v89 + 2) = 0;
    *(_QWORD *)v89 = &off_1E42DE3B0;
    *(_OWORD *)(v89 + 24) = 0u;
    v88 = v89 + 24;
    *(_OWORD *)(v89 + 40) = 0u;
    *(_OWORD *)(v89 + 56) = 0u;
    *(_OWORD *)(v89 + 72) = 0u;
    *(_OWORD *)(v89 + 88) = 0u;
    *(_OWORD *)(v89 + 120) = 0u;
    *(_OWORD *)(v89 + 136) = 0u;
    *(_OWORD *)(v89 + 152) = 0u;
    *(_OWORD *)(v89 + 168) = 0u;
    *(_OWORD *)(v89 + 216) = 0u;
    *(_OWORD *)(v89 + 232) = 0u;
    *(_OWORD *)(v89 + 248) = 0u;
    *(_OWORD *)(v89 + 264) = 0u;
    *(_OWORD *)(v89 + 200) = 0u;
    *(_OWORD *)(v89 + 184) = 0u;
    *(_OWORD *)(v89 + 104) = 0u;
    *((_DWORD *)v89 + 8) = 1140850688;
    *(_OWORD *)(v89 + 36) = 0u;
    *(_OWORD *)(v89 + 68) = 0u;
    *(_OWORD *)(v89 + 52) = 0u;
    *(_QWORD *)(v89 + 84) = 0x186A000000000;
    *((_QWORD *)v89 + 13) = 0;
    *((_QWORD *)v89 + 14) = 0;
    *((_QWORD *)v89 + 12) = v89 + 104;
    *(_QWORD *)(v89 + 124) = 0;
    *(_QWORD *)(v89 + 132) = 0;
    *((_QWORD *)v89 + 18) = 0;
    *((_QWORD *)v89 + 19) = 0;
    *((_QWORD *)v89 + 20) = 0;
    *((_QWORD *)v89 + 21) = -1;
    *((_QWORD *)v89 + 24) = 0;
    *((_QWORD *)v89 + 23) = 0;
    *((_QWORD *)v89 + 22) = v89 + 184;
    MEMORY[0x1A1AF4B00](v89 + 200);
    *((_QWORD *)v89 + 33) = 0;
    *((_QWORD *)v89 + 34) = 0;
    *(_QWORD *)&v167 = v89 + 24;
    *((_QWORD *)&v167 + 1) = v89;
    p_xIdx = &v4->_xIdx;
    if (!v87)
      goto LABEL_148;
    v94 = (unint64_t *)&v87->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
    v89 = (char *)*((_QWORD *)&v167 + 1);
    v88 = (_QWORD *)v167;
    if (*((_QWORD *)&v167 + 1))
    {
LABEL_148:
      v96 = (unint64_t *)(v89 + 16);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v98 = (std::__shared_weak_count *)v54[18];
    v54[17] = (uint64_t)v88;
    v54[18] = (uint64_t)v89;
    if (v98)
      std::__shared_weak_count::__release_weak(v98);
    v100 = (unsigned __int8 *)v54[9];
    v99 = (unsigned __int8 *)v54[10];
    if (v100 != v99)
    {
      v146 = v89;
      v147 = v4;
      v101 = 0;
      v102 = (_DWORD *)v88[16];
      v151 = (unsigned __int8 *)v54[10];
      do
      {
        v104 = *v100;
        v105 = v100[1];
        v106 = v88[17];
        if ((unint64_t)v102 < v106)
        {
          *v102 = v104;
          v102[1] = v101;
          v103 = v102 + 3;
          v102[2] = v105;
        }
        else
        {
          v107 = v88;
          v108 = (_DWORD *)v88[15];
          v109 = 0xAAAAAAAAAAAAAAABLL * (v102 - v108) + 1;
          if (v109 > 0x1555555555555555)
            abort();
          v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (_QWORD)v108) >> 2);
          if (2 * v110 > v109)
            v109 = 2 * v110;
          if (v110 >= 0xAAAAAAAAAAAAAAALL)
            v111 = 0x1555555555555555;
          else
            v111 = v109;
          if (v111)
          {
            if (v111 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v112 = (char *)operator new(12 * v111);
          }
          else
          {
            v112 = 0;
          }
          v113 = &v112[4 * (v102 - v108)];
          *(_DWORD *)v113 = v104;
          *((_DWORD *)v113 + 1) = v101;
          *((_DWORD *)v113 + 2) = v105;
          v114 = v113;
          if (v102 == v108)
          {
            p_xIdx = v152;
            v88 = v107;
          }
          else
          {
            p_xIdx = v152;
            do
            {
              v115 = *(_QWORD *)(v102 - 3);
              v102 -= 3;
              v116 = v102[2];
              *(_QWORD *)(v114 - 12) = v115;
              v114 -= 12;
              *((_DWORD *)v114 + 2) = v116;
            }
            while (v102 != v108);
            v88 = v107;
            v102 = (_DWORD *)v107[15];
          }
          v103 = v113 + 12;
          v88[15] = v114;
          v88[16] = v113 + 12;
          v88[17] = &v112[12 * v111];
          v4 = v147;
          if (v102)
            operator delete(v102);
          v99 = v151;
        }
        v88[16] = v103;
        v101 = v100[1] + 1;
        v100 += 2;
        v102 = v103;
      }
      while (v100 != v99);
      v89 = v146;
    }
  }
  v117 = (uint64_t)v88;
  v118 = *(uint64_t **)p_xIdx;
  v119 = *((unsigned __int8 *)v5 + 32);
  v120 = (uint64_t **)p_xIdx;
  v121 = (uint64_t **)p_xIdx;
  if (*(_QWORD *)p_xIdx)
  {
    while (1)
    {
      while (1)
      {
        v121 = (uint64_t **)v118;
        v122 = *((unsigned __int8 *)v118 + 32);
        if (v119 >= v122)
          break;
        v118 = *v121;
        v120 = v121;
        if (!*v121)
          goto LABEL_183;
      }
      if (v122 >= v119)
        break;
      v118 = v121[1];
      if (!v118)
      {
        v120 = v121 + 1;
        goto LABEL_183;
      }
    }
    v123 = v121;
  }
  else
  {
LABEL_183:
    v123 = operator new(0x70uLL);
    v123[32] = v119;
    *((_QWORD *)v123 + 5) = 512;
    *((_OWORD *)v123 + 3) = 0u;
    *((_OWORD *)v123 + 4) = 0u;
    *((_DWORD *)v123 + 20) = 1065353216;
    *((_QWORD *)v123 + 11) = v123 + 88;
    *((_QWORD *)v123 + 12) = v123 + 88;
    *((_QWORD *)v123 + 13) = 0;
    *(_QWORD *)v123 = 0;
    *((_QWORD *)v123 + 1) = 0;
    *((_QWORD *)v123 + 2) = v121;
    *v120 = (uint64_t *)v123;
    v124 = **(_QWORD **)&v4->_type;
    v125 = (uint64_t *)v123;
    if (v124)
    {
      *(_QWORD *)&v4->_type = v124;
      v125 = *v120;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v125);
    ++v4->_hash;
    v89 = (char *)*((_QWORD *)&v167 + 1);
    v117 = v167;
  }
  v163 = v117;
  v164 = (std::__shared_weak_count *)v89;
  if (v89)
  {
    v129 = (unint64_t *)(v89 + 8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
  }
  v165 = v168;
  v166 = 1;
  geo::Cache<geo::QuadTile,std::optional<md::FlyoverRegionManager::Internal::RegionArea>,geo::QuadTileHash,geo::LRUPolicy>::insert((uint64_t)(v123 + 40), (unsigned __int8 *)v153, &v163);
  if (v166)
  {
    v131 = v164;
    if (v164)
    {
      v132 = (unint64_t *)&v164->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  v134 = *(uint64_t **)p_xIdx;
  v135 = *((unsigned __int8 *)v5 + 32);
  v136 = p_xIdx;
  if (*(_QWORD *)p_xIdx)
  {
    while (1)
    {
      while (1)
      {
        v136 = (int *)v134;
        v137 = *((unsigned __int8 *)v134 + 32);
        if (v135 >= v137)
          break;
        v134 = *(uint64_t **)v136;
        p_xIdx = v136;
        if (!*(_QWORD *)v136)
          goto LABEL_208;
      }
      if (v137 >= v135)
        break;
      v134 = (uint64_t *)*((_QWORD *)v136 + 1);
      if (!v134)
      {
        p_xIdx = v136 + 2;
        goto LABEL_208;
      }
    }
    v138 = v136;
  }
  else
  {
LABEL_208:
    v138 = operator new(0x70uLL);
    v138[32] = v135;
    *((_QWORD *)v138 + 5) = 512;
    *((_OWORD *)v138 + 3) = 0u;
    *((_OWORD *)v138 + 4) = 0u;
    *((_DWORD *)v138 + 20) = 1065353216;
    *((_QWORD *)v138 + 11) = v138 + 88;
    *((_QWORD *)v138 + 12) = v138 + 88;
    *((_QWORD *)v138 + 13) = 0;
    *(_QWORD *)v138 = 0;
    *((_QWORD *)v138 + 1) = 0;
    *((_QWORD *)v138 + 2) = v136;
    *(_QWORD *)p_xIdx = v138;
    v139 = **(_QWORD **)&v4->_type;
    v140 = (uint64_t *)v138;
    if (v139)
    {
      *(_QWORD *)&v4->_type = v139;
      v140 = *(uint64_t **)p_xIdx;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v4->_xIdx, v140);
    ++v4->_hash;
  }
  v160 = v167;
  if (*((_QWORD *)&v167 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  v161 = v168;
  v162 = 1;
  geo::Cache<geo::QuadTile,std::optional<md::FlyoverRegionManager::Internal::RegionArea>,geo::QuadTileHash,geo::LRUPolicy>::insert((uint64_t)(v138 + 40), v169, (uint64_t *)&v160);
  if (v162)
  {
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
    if (*((_QWORD *)&v160 + 1))
    {
      v144 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
  }
  *(_OWORD *)this = v167;
  *((_DWORD *)this + 4) = v168;
  *((_BYTE *)this + 24) = 1;
  std::mutex::unlock(v149);
}

void geo::Cache<geo::QuadTile,std::optional<md::FlyoverRegionManager::Internal::RegionArea>,geo::QuadTileHash,geo::LRUPolicy>::insert(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unsigned __int8 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t prime;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  _QWORD *i;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  size_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t j;
  unsigned __int8 *v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  unsigned __int8 **v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  int v87;
  char v88;
  _BYTE __p[24];
  uint64_t v90;
  std::__shared_weak_count *v91;
  int v92;
  char v93;
  void *v94;

  v6 = (void **)(a1 + 8);
  LOBYTE(v85) = 0;
  v88 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v7 = (std::__shared_weak_count *)a3[1];
    v85 = *a3;
    v86 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v87 = *((_DWORD *)a3 + 4);
    v88 = 1;
  }
  v10 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(a1 + 8), a2);
  if (v10)
  {
    v11 = v10;
    v12 = (_QWORD *)v10[5];
    v13 = *v12;
    *(_QWORD *)(v13 + 8) = v12[1];
    *(_QWORD *)v12[1] = v13;
    --*(_QWORD *)(a1 + 64);
    if (*((_BYTE *)v12 + 64))
    {
      v3 = (std::__shared_weak_count *)v12[6];
      if (v3)
      {
        v14 = (unint64_t *)&v3->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v12);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v11);
    if (*(_QWORD *)__p)
      operator delete(*(void **)__p);
  }
  v16 = (char *)operator new(0x48uLL);
  v17 = v16;
  v18 = a2[1];
  v19 = *a2;
  v16[16] = v19;
  v16[17] = v18;
  v20 = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(v16 + 20) = v20;
  v16[40] = 0;
  v16[64] = 0;
  if (v88)
  {
    *((_QWORD *)v16 + 5) = v85;
    *((_QWORD *)v16 + 6) = v86;
    if (v86)
    {
      v21 = (unint64_t *)&v86->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v19 = *a2;
      v20 = *(_QWORD *)(a2 + 4);
    }
    *((_DWORD *)v16 + 14) = v87;
    v16[64] = 1;
  }
  v23 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)v16 = a1 + 48;
  *((_QWORD *)v16 + 1) = v23;
  *v23 = v16;
  v24 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = v24;
  v25 = a2[1];
  v26 = (v25
       + ((v19 - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)v19 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v19 - 0x61C8864680B583EBLL);
  v27 = v20;
  v28 = ((v26 << 6) + (int)v20 + (v26 >> 2) - 0x61C8864680B583EBLL) ^ v26;
  v29 = HIDWORD(v20);
  v30 = (v28 << 6) + SHIDWORD(v20) + (v28 >> 2) - 0x61C8864680B583EBLL;
  v31 = v30 ^ v28;
  v32 = *(_QWORD *)(a1 + 16);
  v84 = (unsigned __int8 **)(a1 + 48);
  if (v32)
  {
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v3 = (std::__shared_weak_count *)(v30 ^ v28);
      v34 = v30 ^ v28;
      if (v31 >= v32)
        v3 = (std::__shared_weak_count *)(v31 % v32);
    }
    else
    {
      v34 = v30 ^ v28;
      v3 = (std::__shared_weak_count *)(v31 & (v32 - 1));
    }
    v35 = (uint64_t **)*((_QWORD *)*v6 + (_QWORD)v3);
    if (v35)
    {
      v36 = *v35;
      if (v36)
      {
        if (v33.u32[0] < 2uLL)
        {
          while (1)
          {
            v38 = v36[1];
            if (v38 == v34)
            {
              if (__PAIR64__(*((unsigned __int8 *)v36 + 17), *((unsigned __int8 *)v36 + 16)) == __PAIR64__(v25, v19)
                && *((_DWORD *)v36 + 5) == v27
                && *((_DWORD *)v36 + 6) == v29)
              {
                goto LABEL_107;
              }
            }
            else if ((std::__shared_weak_count *)(v38 & (v32 - 1)) != v3)
            {
              goto LABEL_47;
            }
            v36 = (uint64_t *)*v36;
            if (!v36)
              goto LABEL_47;
          }
        }
        do
        {
          v37 = v36[1];
          if (v37 == v34)
          {
            if (__PAIR64__(*((unsigned __int8 *)v36 + 17), *((unsigned __int8 *)v36 + 16)) == __PAIR64__(v25, v19)
              && *((_DWORD *)v36 + 5) == v27
              && *((_DWORD *)v36 + 6) == v29)
            {
              goto LABEL_107;
            }
          }
          else
          {
            if (v37 >= v32)
              v37 %= v32;
            if ((std::__shared_weak_count *)v37 != v3)
              break;
          }
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
    }
  }
  else
  {
    v34 = v30 ^ v28;
  }
LABEL_47:
  v39 = operator new(0x30uLL);
  *v39 = 0;
  v39[1] = v34;
  *((_BYTE *)v39 + 16) = v19;
  *((_BYTE *)v39 + 17) = v25;
  *(_QWORD *)((char *)v39 + 20) = *(_QWORD *)(a2 + 4);
  v39[5] = v17;
  v40 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v41 = *(float *)(a1 + 40);
  if (!v32 || (float)(v41 * (float)v32) < v40)
  {
    v42 = 1;
    if (v32 >= 3)
      v42 = (v32 & (v32 - 1)) != 0;
    v43 = v42 | (2 * v32);
    v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44)
      prime = v44;
    else
      prime = v43;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v32 = *(_QWORD *)(a1 + 16);
    }
    if (prime <= v32)
    {
      if (prime >= v32)
        goto LABEL_84;
      v57 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v32 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
      {
        v57 = std::__next_prime(v57);
      }
      else
      {
        v59 = 1 << -(char)__clz(v57 - 1);
        if (v57 >= 2)
          v57 = v59;
      }
      if (prime <= v57)
        prime = v57;
      if (prime >= v32)
      {
        v32 = *(_QWORD *)(a1 + 16);
LABEL_84:
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v34 >= v32)
            v3 = (std::__shared_weak_count *)(v34 % v32);
          else
            v3 = (std::__shared_weak_count *)v34;
        }
        else
        {
          v3 = (std::__shared_weak_count *)((v32 - 1) & v34);
        }
        goto LABEL_97;
      }
      if (!prime)
      {
        v83 = *v6;
        *v6 = 0;
        if (v83)
          operator delete(v83);
        v32 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        goto LABEL_84;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v46 = operator new(8 * prime);
    v47 = *v6;
    *v6 = v46;
    if (v47)
      operator delete(v47);
    v48 = 0;
    *(_QWORD *)(a1 + 16) = prime;
    do
      *((_QWORD *)*v6 + v48++) = 0;
    while (prime != v48);
    v50 = a1 + 24;
    v49 = *(_QWORD **)(a1 + 24);
    if (!v49)
    {
LABEL_83:
      v32 = prime;
      goto LABEL_84;
    }
    v51 = v49[1];
    v52 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v53 = v51 & v52;
      *((_QWORD *)*v6 + v53) = v50;
      for (i = (_QWORD *)*v49; *v49; i = (_QWORD *)*v49)
      {
        v55 = i[1] & v52;
        if (v55 == v53)
        {
          v49 = i;
        }
        else if (*((_QWORD *)*v6 + v55))
        {
          *v49 = *i;
          v56 = 8 * v55;
          *i = **(_QWORD **)((char *)*v6 + v56);
          **(_QWORD **)((char *)*v6 + v56) = i;
        }
        else
        {
          *((_QWORD *)*v6 + v55) = v49;
          v49 = i;
          v53 = v55;
        }
      }
      goto LABEL_83;
    }
    if (v51 >= prime)
      v51 %= prime;
    *((_QWORD *)*v6 + v51) = v50;
    v60 = (_QWORD *)*v49;
    if (!*v49)
      goto LABEL_83;
    while (1)
    {
      v62 = v60[1];
      if (v62 >= prime)
        v62 %= prime;
      if (v62 != v51)
      {
        if (!*((_QWORD *)*v6 + v62))
        {
          *((_QWORD *)*v6 + v62) = v49;
          goto LABEL_88;
        }
        *v49 = *v60;
        v61 = 8 * v62;
        *v60 = **(_QWORD **)((char *)*v6 + v61);
        **(_QWORD **)((char *)*v6 + v61) = v60;
        v60 = v49;
      }
      v62 = v51;
LABEL_88:
      v49 = v60;
      v60 = (_QWORD *)*v60;
      v51 = v62;
      if (!v60)
        goto LABEL_83;
    }
  }
LABEL_97:
  v63 = *v6;
  v64 = (_QWORD *)*((_QWORD *)*v6 + (_QWORD)v3);
  if (v64)
  {
    *v39 = *v64;
LABEL_105:
    *v64 = v39;
    goto LABEL_106;
  }
  *v39 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v39;
  v63[(_QWORD)v3] = a1 + 24;
  if (*v39)
  {
    v65 = *(_QWORD *)(*v39 + 8);
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v65 >= v32)
        v65 %= v32;
    }
    else
    {
      v65 &= v32 - 1;
    }
    v64 = (char *)*v6 + 8 * v65;
    goto LABEL_105;
  }
LABEL_106:
  ++*(_QWORD *)(a1 + 32);
LABEL_107:
  if (v88)
  {
    if (v86)
    {
      v66 = (unint64_t *)&v86->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  for (j = *(_QWORD *)(a1 + 64); j > *(_QWORD *)a1; j = *(_QWORD *)(a1 + 64))
  {
    v69 = *v84;
    *(_WORD *)__p = *((_WORD *)*v84 + 8);
    *(_QWORD *)&__p[4] = *(_QWORD *)(v69 + 20);
    LOBYTE(v90) = 0;
    v93 = 0;
    v70 = v69[64];
    if (v69[64])
    {
      v71 = (std::__shared_weak_count *)*((_QWORD *)v69 + 6);
      v90 = *((_QWORD *)v69 + 5);
      v91 = v71;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
        v74 = *(unsigned __int8 **)(a1 + 48);
        v70 = v74[64];
        j = *(_QWORD *)(a1 + 64);
      }
      else
      {
        v70 = 1;
        v74 = v69;
      }
      v92 = *((_DWORD *)v69 + 14);
      v93 = 1;
      v69 = v74;
    }
    v75 = *(_QWORD *)v69;
    *(_QWORD *)(v75 + 8) = *((_QWORD *)v69 + 1);
    **((_QWORD **)v69 + 1) = v75;
    *(_QWORD *)(a1 + 64) = j - 1;
    if (v70)
    {
      v76 = (std::__shared_weak_count *)*((_QWORD *)v69 + 6);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    operator delete(v69);
    v79 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v6, __p);
    if (v79)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v94, v6, v79);
      if (v94)
        operator delete(v94);
    }
    if (v93)
    {
      v80 = v91;
      if (v91)
      {
        v81 = (unint64_t *)&v91->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
    }
  }
}

void sub_19F56AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  std::optional<md::FlyoverRegionManager::Internal::RegionArea>::~optional((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::optional<md::FlyoverRegionManager::Internal::RegionArea>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmArea>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(std::__shared_weak_count **)(a1 + 272);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 200));
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*(_QWORD **)(a1 + 184));
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(void **)(a1 + 64);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(_QWORD *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 -= 32;
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v8);
  }
  v10 = *(void **)(a1 + 40);
  if (v10)
  {
    *(_QWORD *)(a1 + 48) = v10;
    operator delete(v10);
  }
}

void md::RegionMetaLayerDataSource::~RegionMetaLayerDataSource(md::RegionMetaLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::RegionMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  geo::codec::VectorTile **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  int64x2_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  int64x2_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  void *v97;
  void *v98;
  int64x2_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  unint64_t v124;
  int v125;
  _QWORD *v126;
  _QWORD *v127;
  int64x2_t v128;
  float *v129;
  float *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int16 *v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  float32x4_t v139;
  const float *v140;
  float32x4_t v141;
  uint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  const float *v149;
  float v150;
  float v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  int64x2_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  void *v171;
  void *v172;
  void *v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  int64x2_t *v178;
  uint64_t v179;
  _QWORD *v180;
  char *v181;
  int64x2_t v182;
  uint64_t v183;
  int64x2_t v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char *v187;
  _BYTE __p[48];
  _BYTE v189[32];
  _BYTE *v190;
  float32x4x2_t v191;
  float32x4x2_t v192;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 46)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_17;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_17:
    v9 = 0;
LABEL_18:
    v185 = 0;
    if (v9)
      goto LABEL_19;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v7 + 112);
  v8 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v8)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v185 = v8;
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
    if (!v9)
      goto LABEL_15;
LABEL_19:
    v16 = operator new(0x300uLL);
    v16[1] = 0;
    v16[2] = 0;
    *v16 = &off_1E42DBE10;
    memset(__p, 0, 24);
    v17 = (geo::codec::VectorTile **)(v9 + 144);
    v176 = a3;
    v177 = v16 + 3;
    md::MapTileData::MapTileData((uint64_t)(v16 + 3), a1, (uint64_t)__p, v9 + 144, 1);
    v16[3] = &off_1E4295DD8;
    v16[82] = &unk_1E4295E18;
    v178 = (int64x2_t *)(v16 + 93);
    v16[93] = 0;
    v16[95] = 0;
    v16[94] = 0;
    v18 = *(uint64_t **)(v9 + 144);
    v19 = (uint64_t *)geo::codec::VectorTile::regionFeatures((geo::codec::VectorTile *)v18);
    v20 = *v19;
    v21 = v19[1];
    if (*v19 == v21)
      goto LABEL_42;
    v22 = v21 - v20 - 128;
    if (v22 > 0x7F)
    {
      v24 = 0;
      v25 = 0;
      v26 = (v22 >> 7) + 1;
      v27 = (_QWORD *)(v20 + 136);
      v28 = v26 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        if (*(v27 - 16))
          ++v24;
        if (*v27)
          ++v25;
        v27 += 32;
        v28 -= 2;
      }
      while (v28);
      v23 = v25 + v24;
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFELL))
        goto LABEL_33;
      v20 += (v26 & 0x3FFFFFFFFFFFFFELL) << 7;
    }
    else
    {
      v23 = 0;
    }
    do
    {
      if (*(_QWORD *)(v20 + 8))
        ++v23;
      v20 += 128;
    }
    while (v20 != v21);
LABEL_33:
    v29 = v16[95];
    v30 = v16[93];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v30) >> 4) < v23)
    {
      if (v23 > 0x555555555555555)
        abort();
      v31 = v16[94];
      *(_QWORD *)&__p[32] = v16 + 95;
      v32 = (char *)operator new(48 * v23);
      v33 = &v32[v31 - v30];
      if (v31 == v30)
      {
        v36 = vdupq_n_s64(v30);
        v34 = &v32[v31 - v30];
      }
      else
      {
        v34 = &v32[v31 - v30];
        do
        {
          v35 = *(_OWORD *)(v31 - 48);
          *((_QWORD *)v34 - 4) = *(_QWORD *)(v31 - 32);
          *((_OWORD *)v34 - 3) = v35;
          *(_OWORD *)(v34 - 24) = *(_OWORD *)(v31 - 24);
          *((_QWORD *)v34 - 1) = *(_QWORD *)(v31 - 8);
          v34 -= 48;
          *(_QWORD *)(v31 - 24) = 0;
          *(_QWORD *)(v31 - 16) = 0;
          *(_QWORD *)(v31 - 8) = 0;
          v31 -= 48;
        }
        while (v31 != v30);
        v36 = *v178;
        v29 = v16[95];
      }
      v16[93] = v34;
      v16[94] = v33;
      *(int64x2_t *)&__p[8] = v36;
      v16[95] = &v32[48 * v23];
      *(_QWORD *)&__p[24] = v29;
      *(_QWORD *)__p = v36.i64[0];
      std::__split_buffer<md::MetaDataRegion>::__destruct_at_end[abi:nn180100]((uint64_t)__p, v36.i64[0]);
      if (*(_QWORD *)__p)
        operator delete(*(void **)__p);
    }
LABEL_42:
    v180 = v16;
    v37 = (uint64_t *)geo::codec::VectorTile::regionFeatures(*v17);
    v38 = *v37;
    v179 = v37[1];
    if (*v37 == v179)
    {
LABEL_195:
      *v176 = v177;
      v176[1] = v180;
      v15 = v185;
      if (!v185)
        return;
      goto LABEL_196;
    }
    while (1)
    {
      if (*(_QWORD *)(v38 + 8))
      {
        memset(&__p[16], 0, 32);
        *(_OWORD *)__p = 0u;
        *(int8x16_t *)__p = vextq_s8(*(int8x16_t *)(v38 + 8), *(int8x16_t *)(v38 + 8), 8uLL);
        *(_QWORD *)&__p[16] = *(_QWORD *)v38;
        v40 = *(unsigned __int16 *)(v38 + 24);
        if (*(_WORD *)(v38 + 24))
        {
          *(_QWORD *)&__p[24] = operator new(v40 << 6);
          *(_QWORD *)&__p[32] = *(_QWORD *)&__p[24];
          *(_QWORD *)&__p[40] = *(_QWORD *)&__p[24] + (v40 << 6);
          if (*(_WORD *)(v38 + 24))
          {
            v183 = 0;
            v41 = 0;
            while (1)
            {
              v186[0] = 0;
              v186[1] = 0;
              v187 = 0;
              v42 = v41;
              v43 = *(_QWORD *)(v38 + 32);
              v44 = 32 * v41;
              v45 = (uint64_t *)(v43 + v44);
              v46 = *(_QWORD *)(v43 + v44);
              v47 = *(_QWORD *)(v43 + v44 + 8);
              if (v47 == v46)
              {
                v57 = 0;
                v56 = 0;
LABEL_67:
                v182 = vdupq_n_s64((unint64_t)v56);
                v186[0] = 0;
                v186[1] = 0;
                v187 = 0;
LABEL_68:
                v58 = 3.4028e38;
                v59 = -3.4028e38;
                v60 = 3.4028e38;
                v61 = -3.4028e38;
                goto LABEL_69;
              }
              v48 = (v47 - v46) >> 1;
              v49 = *(_QWORD *)(v18[440] + 32);
              v50 = v48 <= 1 ? 1 : (v47 - v46) >> 1;
              if (v50 < 2)
                break;
              if (!(_WORD)v50 || (v50 - 1) >> 16 != 0)
                break;
              v132 = 0;
              v133 = 0;
              v52 = v50 & 0xFFFFFFFFFFFFFFFELL;
              v134 = (unsigned __int16 *)(v46 + 2);
              v135 = v50 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v136 = *(v134 - 1);
                v137 = *v134;
                v134 += 2;
                v132 += *(_QWORD *)(v49 + 16 * v136 + 8);
                v133 += *(_QWORD *)(v49 + 16 * v137 + 8);
                v135 -= 2;
              }
              while (v135);
              v54 = v133 + v132;
              v53 = v50 & 0xFFFFFFFE;
              if (v50 != v52)
                goto LABEL_61;
LABEL_62:
              v55 = *(_QWORD *)(v38 + 64);
              if (v54)
              {
                if (v54 >> 61)
                  abort();
                v56 = (char *)operator new(8 * v54);
                v57 = &v56[8 * v54];
                v186[0] = v56;
                v186[1] = v56;
                v187 = v57;
                v46 = *v45;
                if (*(_QWORD *)(v43 + 32 * v42 + 8) == *v45)
                  goto LABEL_67;
              }
              else
              {
                v57 = 0;
                v56 = 0;
                if (v47 == v46)
                  goto LABEL_67;
              }
              v124 = 0;
              v125 = 0;
              v126 = (_QWORD *)(v55 + v44);
              v127 = (_QWORD *)(v43 + 32 * v42 + 8);
              do
              {
                v124 = (unsigned __int16)++v125;
                v46 = *v45;
              }
              while ((unsigned __int16)v125 < (unint64_t)((*v127 - *v45) >> 1));
              v128 = *(int64x2_t *)v186;
              v57 = v187;
              v186[1] = 0;
              v187 = 0;
              v186[0] = 0;
              v129 = (float *)v128.i64[0];
              v182 = v128;
              v130 = (float *)v128.i64[1];
              if (v128.i64[0] == v128.i64[1])
                goto LABEL_68;
              v131 = v128.i64[1] - v128.i64[0] - 8;
              if (v131 < 0x38)
              {
                v60 = 3.4028e38;
                v61 = -3.4028e38;
                v58 = 3.4028e38;
                v59 = -3.4028e38;
                goto LABEL_162;
              }
              v138 = (v131 >> 3) + 1;
              v139 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
              v140 = (const float *)(v128.i64[0] + 32);
              v141.i64[0] = 0x80000000800000;
              v141.i64[1] = 0x80000000800000;
              v142 = v138 & 0x3FFFFFFFFFFFFFF8;
              v143.i64[0] = 0x80000000800000;
              v143.i64[1] = 0x80000000800000;
              v144 = v139;
              v145 = v139;
              v146 = v139;
              v147.i64[0] = 0x80000000800000;
              v147.i64[1] = 0x80000000800000;
              v148.i64[0] = 0x80000000800000;
              v148.i64[1] = 0x80000000800000;
              do
              {
                v149 = v140 - 8;
                v191 = vld2q_f32(v149);
                v192 = vld2q_f32(v140);
                v139 = vminnmq_f32(v191.val[0], v139);
                v144 = vminnmq_f32(v192.val[0], v144);
                v147 = vmaxnmq_f32(v147, v191.val[0]);
                v148 = vmaxnmq_f32(v148, v192.val[0]);
                v145 = vminnmq_f32(v191.val[1], v145);
                v146 = vminnmq_f32(v192.val[1], v146);
                v141 = vmaxnmq_f32(v141, v191.val[1]);
                v143 = vmaxnmq_f32(v143, v192.val[1]);
                v140 += 16;
                v142 -= 8;
              }
              while (v142);
              v59 = vmaxnmvq_f32(vmaxnmq_f32(v147, v148));
              v58 = vminnmvq_f32(vminnmq_f32(v145, v146));
              v60 = vminnmvq_f32(vminnmq_f32(v139, v144));
              v61 = vmaxnmvq_f32(vmaxnmq_f32(v141, v143));
              if (v138 != (v138 & 0x3FFFFFFFFFFFFFF8))
              {
                v129 += 2 * (v138 & 0x3FFFFFFFFFFFFFF8);
                do
                {
LABEL_162:
                  v150 = *v129;
                  v151 = v129[1];
                  v129 += 2;
                  v60 = fminf(v150, v60);
                  v59 = fmaxf(v59, v150);
                  v58 = fminf(v151, v58);
                  v61 = fmaxf(v61, v151);
                }
                while (v129 != v130);
              }
LABEL_69:
              v181 = v57;
              v62 = *(_QWORD *)(v38 + 96);
              v63 = *(unsigned __int16 *)(v62 + 2 * v183);
              if (*(_WORD *)(v62 + 2 * v183))
              {
                v64 = (char *)operator new(24 * v63);
                v65 = &v64[24 * v63];
                v184 = vdupq_n_s64((unint64_t)v64);
                v41 = v42 + 1;
                if (*(_WORD *)(*(_QWORD *)(v38 + 96) + 2 * v183))
                {
                  v66 = 0;
                  while (2)
                  {
                    memset(v189, 0, 24);
                    v67 = v41;
                    v68 = *(_QWORD *)(v38 + 32);
                    v69 = 32 * v41;
                    v70 = (uint64_t *)(v68 + v69);
                    v71 = *(_QWORD *)(v68 + v69);
                    v72 = *(_QWORD *)(v68 + v69 + 8);
                    if (v72 == v71)
                      goto LABEL_91;
                    v73 = (v72 - v71) >> 1;
                    v74 = *(_QWORD *)(v18[440] + 32);
                    if (v73 <= 1)
                      v75 = 1;
                    else
                      v75 = (v72 - v71) >> 1;
                    if (v75 < 2 || ((_WORD)v75 ? (v76 = (v75 - 1) >> 16 == 0) : (v76 = 0), !v76))
                    {
                      v77 = 0;
                      v78 = 0;
                      v79 = 0;
                      goto LABEL_84;
                    }
                    v100 = 0;
                    v101 = 0;
                    v77 = v75 & 0xFFFFFFFFFFFFFFFELL;
                    v102 = (unsigned __int16 *)(v71 + 2);
                    v103 = v75 & 0xFFFFFFFFFFFFFFFELL;
                    do
                    {
                      v104 = *(v102 - 1);
                      v105 = *v102;
                      v102 += 2;
                      v100 += *(_QWORD *)(v74 + 16 * v104 + 8);
                      v101 += *(_QWORD *)(v74 + 16 * v105 + 8);
                      v103 -= 2;
                    }
                    while (v103);
                    v79 = v101 + v100;
                    v78 = v75 & 0xFFFFFFFE;
                    if (v75 != v77)
                    {
                      do
                      {
LABEL_84:
                        v79 += *(_QWORD *)(v74 + 16 * *(unsigned __int16 *)(v71 + 2 * v77) + 8);
                        v77 = (unsigned __int16)++v78;
                      }
                      while (v73 > (unsigned __int16)v78);
                    }
                    v80 = *(_QWORD *)(v38 + 64);
                    if (v79)
                    {
                      if (v79 >> 61)
                        goto LABEL_203;
                      *(_QWORD *)v189 = operator new(8 * v79);
                      *(_QWORD *)&v189[8] = *(_QWORD *)v189;
                      *(_QWORD *)&v189[16] = *(_QWORD *)v189 + 8 * v79;
                      v72 = *(_QWORD *)(v68 + 32 * v67 + 8);
                      v71 = *v70;
                    }
                    if (v72 != v71)
                    {
                      v81 = 0;
                      v82 = 0;
                      v83 = (_QWORD *)(v80 + v69);
                      v84 = (_QWORD *)(v68 + 32 * v67 + 8);
                      do
                      {
                        v81 = (unsigned __int16)++v82;
                        v71 = *v70;
                      }
                      while ((unsigned __int16)v82 < (unint64_t)((*v84 - *v70) >> 1));
                    }
LABEL_91:
                    v85 = (char *)v184.i64[1];
                    v86.i64[0] = v184.i64[0];
                    if (v184.i64[1] >= (unint64_t)v65)
                    {
                      v87 = (char *)v184.i64[0];
                      v88 = 0xAAAAAAAAAAAAAAABLL * ((v184.i64[1] - v184.i64[0]) >> 3) + 1;
                      if (v88 > 0xAAAAAAAAAAAAAAALL)
LABEL_203:
                        abort();
                      if (0x5555555555555556 * ((uint64_t)&v65[-v184.i64[0]] >> 3) > v88)
                        v88 = 0x5555555555555556 * ((uint64_t)&v65[-v184.i64[0]] >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v65[-v184.i64[0]] >> 3) >= 0x555555555555555)
                        v89 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v89 = v88;
                      if (v89)
                      {
                        if (v89 > 0xAAAAAAAAAAAAAAALL)
                          goto LABEL_204;
                        v90 = (char *)operator new(24 * v89);
                      }
                      else
                      {
                        v90 = 0;
                      }
                      v91 = &v90[8 * ((v184.i64[1] - v184.i64[0]) >> 3)];
                      *(_OWORD *)v91 = *(_OWORD *)v189;
                      *((_QWORD *)v91 + 2) = *(_QWORD *)&v189[16];
                      memset(v189, 0, 24);
                      v92 = v91 + 24;
                      v93 = (_QWORD *)v184.i64[1];
                      if (v184.i64[1] == v184.i64[0])
                      {
                        v184.i64[0] = (uint64_t)&v90[8 * ((v184.i64[1] - v184.i64[0]) >> 3)];
                        if (v184.i64[1])
                          goto LABEL_109;
                      }
                      else
                      {
                        do
                        {
                          *((_QWORD *)v91 - 2) = 0;
                          *((_QWORD *)v91 - 1) = 0;
                          v94 = *(_OWORD *)(v93 - 3);
                          v93 -= 3;
                          *(_OWORD *)(v91 - 24) = v94;
                          v95 = (uint64_t)(v91 - 24);
                          *((_QWORD *)v91 - 1) = v93[2];
                          *v93 = 0;
                          v93[1] = 0;
                          v93[2] = 0;
                          v91 -= 24;
                        }
                        while (v93 != (_QWORD *)v184.i64[0]);
                        v184.i64[0] = v95;
                        v96 = (char *)v184.i64[1];
                        do
                        {
                          v98 = (void *)*((_QWORD *)v96 - 3);
                          v96 -= 24;
                          v97 = v98;
                          if (v98)
                          {
                            *((_QWORD *)v85 - 2) = v97;
                            operator delete(v97);
                          }
                          v85 = v96;
                        }
                        while (v96 != v87);
                        v85 = v87;
                        if (v87)
LABEL_109:
                          operator delete(v85);
                      }
                      v65 = &v90[24 * v89];
                      v99.i64[0] = v184.i64[0];
                      v99.i64[1] = (uint64_t)v92;
                      v184 = v99;
                      if (*(_QWORD *)v189)
                        operator delete(*(void **)v189);
                      goto LABEL_73;
                    }
                    *(_OWORD *)v184.i64[1] = *(_OWORD *)v189;
                    *(_QWORD *)(v184.i64[1] + 16) = *(_QWORD *)&v189[16];
                    v86.i64[1] = v184.i64[1] + 24;
                    v184 = v86;
LABEL_73:
                    ++v66;
                    v41 = v67 + 1;
                    if (v66 >= *(unsigned __int16 *)(*(_QWORD *)(v38 + 96) + 2 * v183))
                      break;
                    continue;
                  }
                }
              }
              else
              {
                v65 = 0;
                v41 = v42 + 1;
                v184 = 0u;
              }
              v106 = *(_QWORD *)&__p[32];
              if (*(_QWORD *)&__p[32] >= *(_QWORD *)&__p[40])
              {
                v108 = *(_QWORD *)&__p[24];
                v109 = (uint64_t)(*(_QWORD *)&__p[32] - *(_QWORD *)&__p[24]) >> 6;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 58)
                  abort();
                v111 = *(_QWORD *)&__p[40] - *(_QWORD *)&__p[24];
                if ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[24]) >> 5 > v110)
                  v110 = v111 >> 5;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFC0)
                  v112 = 0x3FFFFFFFFFFFFFFLL;
                else
                  v112 = v110;
                v190 = &__p[40];
                if (v112 >> 58)
                  goto LABEL_204;
                v113 = (char *)operator new(v112 << 6);
                v114 = (uint64_t)&v113[64 * v109];
                *(_QWORD *)v189 = v113;
                *(_QWORD *)&v189[8] = v114;
                *(float *)v114 = v60;
                *(float *)(v114 + 4) = v58;
                v115 = &v113[64 * v112];
                *(float *)(v114 + 8) = v59;
                *(float *)(v114 + 12) = v61;
                *(int64x2_t *)(v114 + 16) = v182;
                *(_QWORD *)(v114 + 32) = v181;
                *(int64x2_t *)(v114 + 40) = v184;
                *(_QWORD *)(v114 + 56) = v65;
                v107 = v114 + 64;
                *(_QWORD *)&v189[16] = v114 + 64;
                *(_QWORD *)&v189[24] = v115;
                if (v106 == v108)
                {
                  *(_QWORD *)&__p[24] = v114;
                  *(_QWORD *)&__p[32] = v114 + 64;
                  *(_QWORD *)&__p[40] = v115;
                }
                else
                {
                  do
                  {
                    v106 -= 64;
                    v114 = std::construct_at[abi:nn180100]<md::MetaDataRegionPolygon,md::MetaDataRegionPolygon,md::MetaDataRegionPolygon*>(v114 - 64, (__int128 *)v106);
                  }
                  while (v106 != v108);
                  v106 = *(_QWORD *)&__p[24];
                  v116 = *(_QWORD *)&__p[32];
                  *(_QWORD *)&__p[24] = v114;
                  *(_OWORD *)&__p[32] = *(_OWORD *)&v189[16];
                  v107 = *(_QWORD *)&v189[16];
                  while (v116 != v106)
                  {
                    v117 = *(_QWORD *)(v116 - 24);
                    if (v117)
                    {
                      v118 = *(_QWORD *)(v116 - 16);
                      v119 = *(void **)(v116 - 24);
                      if (v118 != v117)
                      {
                        v120 = *(_QWORD *)(v116 - 16);
                        do
                        {
                          v122 = *(void **)(v120 - 24);
                          v120 -= 24;
                          v121 = v122;
                          if (v122)
                          {
                            *(_QWORD *)(v118 - 16) = v121;
                            operator delete(v121);
                          }
                          v118 = v120;
                        }
                        while (v120 != v117);
                        v119 = *(void **)(v116 - 24);
                      }
                      *(_QWORD *)(v116 - 16) = v117;
                      operator delete(v119);
                    }
                    v123 = *(void **)(v116 - 48);
                    if (v123)
                    {
                      *(_QWORD *)(v116 - 40) = v123;
                      operator delete(v123);
                    }
                    v116 -= 64;
                  }
                }
                if (v106)
                  operator delete((void *)v106);
              }
              else
              {
                **(float **)&__p[32] = v60;
                *(float *)(v106 + 4) = v58;
                *(float *)(v106 + 8) = v59;
                *(float *)(v106 + 12) = v61;
                *(int64x2_t *)(v106 + 16) = v182;
                *(_QWORD *)(v106 + 32) = v181;
                *(int64x2_t *)(v106 + 40) = v184;
                v107 = v106 + 64;
                *(_QWORD *)(v106 + 56) = v65;
              }
              *(_QWORD *)&__p[32] = v107;
              if (v186[0])
                operator delete(v186[0]);
              if (++v183 >= (unint64_t)*(unsigned __int16 *)(v38 + 24))
                goto LABEL_164;
            }
            v52 = 0;
            v53 = 0;
            v54 = 0;
            do
            {
LABEL_61:
              v54 += *(_QWORD *)(v49 + 16 * *(unsigned __int16 *)(v46 + 2 * v52) + 8);
              v52 = (unsigned __int16)++v53;
            }
            while (v48 > (unsigned __int16)v53);
            goto LABEL_62;
          }
        }
LABEL_164:
        v152 = v180[94];
        v153 = v180[95];
        if (v152 < v153)
        {
          v39 = *(_QWORD *)&__p[16];
          *(_OWORD *)v152 = *(_OWORD *)__p;
          *(_QWORD *)(v152 + 16) = v39;
          *(_QWORD *)(v152 + 24) = 0;
          *(_QWORD *)(v152 + 32) = 0;
          *(_QWORD *)(v152 + 40) = 0;
          *(_OWORD *)(v152 + 24) = *(_OWORD *)&__p[24];
          *(_QWORD *)(v152 + 40) = *(_QWORD *)&__p[40];
          v180[94] = v152 + 48;
        }
        else
        {
          v154 = v178->i64[0];
          v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v152 - v178->i64[0]) >> 4);
          v156 = v155 + 1;
          if (v155 + 1 > 0x555555555555555)
            abort();
          if (0x5555555555555556 * ((uint64_t)(v153 - v154) >> 4) > v156)
            v156 = 0x5555555555555556 * ((uint64_t)(v153 - v154) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - v154) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v157 = 0x555555555555555;
          else
            v157 = v156;
          v190 = v180 + 95;
          if (v157 > 0x555555555555555)
LABEL_204:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v158 = (char *)operator new(48 * v157);
          v159 = &v158[48 * v155];
          *(_OWORD *)v159 = *(_OWORD *)__p;
          *((_QWORD *)v159 + 2) = *(_QWORD *)&__p[16];
          *(_OWORD *)(v159 + 24) = *(_OWORD *)&__p[24];
          *((_QWORD *)v159 + 5) = *(_QWORD *)&__p[40];
          memset(&__p[24], 0, 24);
          if (v152 == v154)
          {
            v162 = vdupq_n_s64(v152);
            v160 = &v158[48 * v155];
          }
          else
          {
            v160 = &v158[48 * v155];
            do
            {
              v161 = *(_OWORD *)(v152 - 48);
              *((_QWORD *)v160 - 4) = *(_QWORD *)(v152 - 32);
              *((_OWORD *)v160 - 3) = v161;
              *(_OWORD *)(v160 - 24) = *(_OWORD *)(v152 - 24);
              *((_QWORD *)v160 - 1) = *(_QWORD *)(v152 - 8);
              v160 -= 48;
              *(_QWORD *)(v152 - 24) = 0;
              *(_QWORD *)(v152 - 16) = 0;
              *(_QWORD *)(v152 - 8) = 0;
              v152 -= 48;
            }
            while (v152 != v154);
            v162 = *v178;
            v153 = v180[95];
          }
          v163 = v159 + 48;
          v180[93] = v160;
          v180[94] = v159 + 48;
          *(int64x2_t *)&v189[8] = v162;
          v180[95] = &v158[48 * v157];
          *(_QWORD *)&v189[24] = v153;
          *(_QWORD *)v189 = v162.i64[0];
          std::__split_buffer<md::MetaDataRegion>::__destruct_at_end[abi:nn180100]((uint64_t)v189, v162.i64[0]);
          if (*(_QWORD *)v189)
            operator delete(*(void **)v189);
          v164 = *(char **)&__p[24];
          v180[94] = v163;
          if (v164)
          {
            v165 = *(char **)&__p[32];
            v166 = v164;
            if (*(char **)&__p[32] != v164)
            {
              do
              {
                v167 = *((_QWORD *)v165 - 3);
                if (v167)
                {
                  v168 = *((_QWORD *)v165 - 2);
                  v169 = (void *)*((_QWORD *)v165 - 3);
                  if (v168 != v167)
                  {
                    v170 = *((_QWORD *)v165 - 2);
                    do
                    {
                      v172 = *(void **)(v170 - 24);
                      v170 -= 24;
                      v171 = v172;
                      if (v172)
                      {
                        *(_QWORD *)(v168 - 16) = v171;
                        operator delete(v171);
                      }
                      v168 = v170;
                    }
                    while (v170 != v167);
                    v169 = (void *)*((_QWORD *)v165 - 3);
                  }
                  *((_QWORD *)v165 - 2) = v167;
                  operator delete(v169);
                }
                v173 = (void *)*((_QWORD *)v165 - 6);
                if (v173)
                {
                  *((_QWORD *)v165 - 5) = v173;
                  operator delete(v173);
                }
                v165 -= 64;
              }
              while (v165 != v164);
              v166 = *(char **)&__p[24];
            }
            *(_QWORD *)&__p[32] = v164;
            operator delete(v166);
          }
        }
      }
      v38 += 128;
      if (v38 == v179)
        goto LABEL_195;
    }
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (v9)
    goto LABEL_19;
LABEL_15:
  *a3 = 0;
  a3[1] = 0;
  v15 = v185;
  if (!v185)
    return;
LABEL_196:
  v174 = (unint64_t *)&v15->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_19F56BB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, md::MapTileData *a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,__int128 a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  std::__shared_weak_count *v33;
  void *v35;

  if (*a14)
  {
    std::vector<md::MetaDataRegion>::__base_destruct_at_end[abi:nn180100]((uint64_t)a14, *a14);
    operator delete((void *)*a14);
  }
  md::MapTileData::~MapTileData(a11);
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void md::RegionMetaLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = -4;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::RegionMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RegionMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RegionMetaTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19F56C11C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F56C1A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F56C258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F56C580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F56C780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TransitLineTextLabelPart::~TransitLineTextLabelPart(md::TransitLineTextLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E42A1118;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 187);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::CurvedTextLabelPart::~CurvedTextLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A1118;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 187);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::CurvedTextLabelPart::~CurvedTextLabelPart(this);
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v6 + 24) = "VectorKitLabels";
    *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v6 = &off_1E42B5668;
    *(_QWORD *)(v6 + 8) = "VectorKitLabels";
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_QWORD *)(v6 + 248) = 0;
    *(_OWORD *)(v6 + 56) = 0u;
    v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
    if ((_DWORD)v7)
      geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v6 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v6;
  }
  (*(void (**)(uint64_t, md::TransitLineTextLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, this, 1512);
}

float *md::TransitLineTextLabelPart::updateWithStyle(md::TransitLineTextLabelPart *this, md::LabelManager *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = *((_QWORD *)this + 186);
  v5 = *((unsigned __int8 *)this + 1508);
  v6 = (std::mutex *)(v4 + 40);
  std::mutex::lock((std::mutex *)(v4 + 40));
  v8 = *(_QWORD **)(v4 + 24);
  v7 = *(std::__shared_weak_count **)(v4 + 32);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::mutex::unlock(v6);
  if (v8)
  {
    v11 = *(_DWORD *)(*v8 + 16 * v5 + 4);
    v12 = v11 >> 8;
    LODWORD(v8) = HIWORD(v11);
    v13 = HIBYTE(v11);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
    LOBYTE(v12) = 0;
    LOBYTE(v11) = 0;
    LOBYTE(v13) = -1;
    if (!v7)
      goto LABEL_12;
  }
  v14 = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_12:
  *((_BYTE *)this + 1504) = v11;
  *((_BYTE *)this + 1505) = v12;
  *((_BYTE *)this + 1506) = (_BYTE)v8;
  *((_BYTE *)this + 1507) = v13;
  return md::CurvedTextLabelPart::updateWithStyle(this, a2);
}

uint64_t md::TextLabelPart::stagingModelMatrix(md::TextLabelPart *this)
{
  return *((_QWORD *)this + 106);
}

uint64_t md::CurvedTextLabelPart::partType(md::CurvedTextLabelPart *this)
{
  return 5;
}

BOOL md::TextLabelPart::isTextVisible(md::TextLabelPart *this)
{
  return *((float *)this + 138) >= 0.0039062;
}

uint64_t md::TransitLineTextLabelPart::needsCrossfade(uint64_t a1, float *a2, int a3, uint64_t a4)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 1488) + 104));
  if ((v4 & 1) != 0)
    return md::CurvedTextLabelPart::needsCrossfade(a1, a2, a3, a4);
  else
    return 1;
}

uint64_t md::TextLabelPart::publicName(md::TextLabelPart *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 74);
  if (v1)
    return **(_QWORD **)(v1 + 16);
  else
    return 0;
}

uint64_t md::TransitLineTextLabelPart::textColorForSource@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != 3 && a2)
  {
    v6 = *a3;
    if (a2 == 4)
    {
      v7 = *(_QWORD *)(v6 + 272);
      if (!v7)
      {
        result = (uint64_t)md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*a3);
        v7 = *(_QWORD *)result;
        *(_QWORD *)(v6 + 272) = *(_QWORD *)result;
      }
      v5 = (_DWORD *)(v7 + 65);
    }
    else
    {
      v8 = *(unsigned __int8 *)(result + 864) == 1;
      v9 = v6 + 280;
      if (*(_BYTE *)(result + 864) == 1)
        v10 = 6;
      else
        v10 = 0;
      v11 = *(_QWORD *)(v9 + 8 * (*(_BYTE *)(result + 864) == 1));
      if (v11)
      {
        if (vabds_f32(*(float *)(v11 + 8), *(float *)(v6 + 104)) >= 0.01)
        {
          result = md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v6, v11, v10);
          v11 = *(_QWORD *)(v9 + 8 * v8);
        }
      }
      else
      {
        result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v6, v10);
        v11 = result;
        *(_QWORD *)(v9 + 8 * v8) = result;
      }
      v5 = (_DWORD *)(*(_QWORD *)v11 + 8);
    }
  }
  else
  {
    v5 = (_DWORD *)(result + 1504);
  }
  *a4 = *v5;
  return result;
}

void md::CurvedTextLabelPart::~CurvedTextLabelPart(md::CurvedTextLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  *(_QWORD *)this = off_1E4296C68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 185);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*((_BYTE *)this + 1416))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*((_BYTE *)this + 1416))
LABEL_6:
    *((_BYTE *)this + 1416) = 0;
LABEL_7:
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 165);
  if (!v5)
    goto LABEL_11;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 163);
    if (!v8)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 163);
    if (!v8)
      goto LABEL_19;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_19:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 161);
  if (!v11)
    goto LABEL_23;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 159);
    if (!v14)
      goto LABEL_29;
  }
  else
  {
LABEL_23:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 159);
    if (!v14)
      goto LABEL_29;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_29:
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 141);
  if (!v17)
    goto LABEL_33;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 139);
    if (!v20)
      goto LABEL_39;
  }
  else
  {
LABEL_33:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 139);
    if (!v20)
      goto LABEL_39;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_39:
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 137);
  if (!v23)
    goto LABEL_43;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 135);
    if (!v26)
      goto LABEL_49;
  }
  else
  {
LABEL_43:
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 135);
    if (!v26)
      goto LABEL_49;
  }
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_49:
  md::TextLabelPart::~TextLabelPart(this);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CurvedTextLabelPart::~CurvedTextLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::CurvedTextLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, this, 1488);
}

uint64_t md::TransitLineTextLabelPart::TransitLineTextLabelPart(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, float a9, _BYTE *a10, uint64_t *a11, unsigned __int8 a12)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::mutex *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;

  v13 = (_QWORD *)md::CurvedTextLabelPart::CurvedTextLabelPart(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
  *v13 = off_1E42A1118;
  v15 = *a11;
  v14 = a11[1];
  v13[186] = *a11;
  v13[187] = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v15 = *(_QWORD *)(a1 + 1488);
  }
  *(_DWORD *)(a1 + 1504) = -16776961;
  *(_BYTE *)(a1 + 1508) = a12;
  v18 = (std::mutex *)(v15 + 40);
  std::mutex::lock((std::mutex *)(v15 + 40));
  v20 = *(_QWORD **)(v15 + 24);
  v19 = *(std::__shared_weak_count **)(v15 + 32);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  std::mutex::unlock(v18);
  if (v20)
  {
    v23 = *(_DWORD *)(*v20 + 16 * a12 + 4);
    v24 = v23 >> 8;
    LODWORD(v20) = HIWORD(v23);
    v25 = HIBYTE(v23);
    if (!v19)
      goto LABEL_16;
  }
  else
  {
    LOBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v25) = -1;
    if (!v19)
      goto LABEL_16;
  }
  v26 = (unint64_t *)&v19->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_16:
  *(_BYTE *)(a1 + 1504) = v23;
  *(_BYTE *)(a1 + 1505) = v24;
  *(_BYTE *)(a1 + 1506) = (_BYTE)v20;
  *(_BYTE *)(a1 + 1507) = v25;
  return a1;
}

void sub_19F56CF78(_Unwind_Exception *a1)
{
  md::CurvedTextLabelPart *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 187);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::CurvedTextLabelPart::~CurvedTextLabelPart(v1);
  _Unwind_Resume(a1);
}

_QWORD **std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>(_QWORD **__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  uint64_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      abort();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], v8, 1);
    memmove(v6, __src, __len);
    __dst[1] = (_QWORD *)__len;
    __dst[2] = (_QWORD *)(v8 | 0x8000000000000000);
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
      abort();
    v9 = v7 - 1;
    v10 = a1;
    if ((v6 & 0x8000000000000000) != 0)
      v10 = *a1;
    v11 = 2 * v9;
    if (__len > 2 * v9)
      v11 = __len;
    v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v12 = v11 | 7;
    if (v11 >= 0x17)
      v13 = v12 + 1;
    else
      v13 = 23;
    if (v9 <= 0x3FFFFFFFFFFFFFF2)
      v14 = v13;
    else
      v14 = 0x7FFFFFFFFFFFFFF7;
    v15 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], v14, 1);
    v8 = v15;
    if (__len)
      memmove(v15, __src, __len);
    if (v7 != 23)
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v10, v7);
    a1[1] = (void *)__len;
    a1[2] = (void *)(v14 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
  }
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

void std::__shared_ptr_emplace<md::LabelImageKey>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelImageKey>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(a1, __s, v4);
}

void md::LabelStyle::pointIconImageKey(_QWORD *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, char a12, uint64_t a13)
{
  char *v19;
  unsigned __int8 v20;
  uint64_t v21;
  char v22;
  grl *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  grl *v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 v33;
  unint64_t v34;
  int v35;
  grl *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  int v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  int v63;
  char *v64;
  int16x8_t *v65;
  int16x8_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  unint64_t v84;
  __int128 v85;
  __int16 v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  int16x8_t *v90;
  int16x8_t *v91;
  uint64_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  __int32 v97;
  uint64_t v98;
  uint64_t *v99;
  size_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  BOOL v104;
  __int128 v105;
  int *v106;
  int v107;
  size_t v108;
  void **v109;
  void **v110;
  size_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  __int128 v123;
  uint64_t v124;
  __int128 *v125;
  _QWORD v126[3];

  v126[2] = *MEMORY[0x1E0C80C00];
  v19 = (char *)operator new(0x148uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = &off_1E42DB010;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *((_QWORD *)v19 + 7) = 0;
  {
    v117 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v117, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v21 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v19 + 9) = 0;
  *((_QWORD *)v19 + 10) = 0;
  *((_QWORD *)v19 + 8) = v21;
  *((_WORD *)v19 + 44) = 0;
  *((_QWORD *)v19 + 12) = v19 + 128;
  *((_QWORD *)v19 + 13) = v19 + 128;
  *((_QWORD *)v19 + 14) = v19 + 128;
  *((_QWORD *)v19 + 15) = 2;
  v19[136] = 0;
  *(_DWORD *)(v19 + 137) = 16843008;
  v19[141] = 0;
  *((_QWORD *)v19 + 19) = 0;
  *((_QWORD *)v19 + 20) = 0;
  *((_QWORD *)v19 + 18) = 0;
  {
    v118 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v118, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v19 + 21) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v19 + 22) = 0;
  *(_QWORD *)(v19 + 181) = 0;
  v19[192] = 4;
  *(_QWORD *)(v19 + 196) = 0;
  v19[204] = 0;
  *(_QWORD *)(v19 + 212) = 0xFFFF3F800000;
  *((_WORD *)v19 + 110) = 0;
  *((_DWORD *)v19 + 56) = 1065353216;
  *((_QWORD *)v19 + 40) = 0;
  *((_OWORD *)v19 + 15) = 0u;
  *((_OWORD *)v19 + 16) = 0u;
  *((_OWORD *)v19 + 17) = 0u;
  *((_QWORD *)v19 + 36) = 0;
  *a1 = v19 + 24;
  a1[1] = v19;
  v19[136] = 4;
  v22 = a11;
  *((float *)v19 + 20) = md::LabelStyle::iconContentScale(a2);
  if (a12)
  {
    v24 = *(unsigned __int8 *)(a3 + 3360);
    if (a11 == -1)
    {
      v25 = *((_QWORD *)a2 + 37);
      if (!v25)
      {
        v23 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
        v25 = *(_QWORD *)v23;
        *((_QWORD *)a2 + 37) = *(_QWORD *)v23;
      }
      v22 = *(_BYTE *)(v25 + 91);
    }
    if ((v22 - 1) > 8u)
      v26 = 0;
    else
      v26 = dword_19FFB8A88[(v22 - 1)];
    v29 = (grl *)grl::SizeGroupMin(v23);
    v30 = (int)v29;
    v31 = grl::SizeGroupMax(v29);
    v32 = v26 + v24;
    if (v26 + v24 >= v31)
      v32 = v31;
    if (v32 <= v30)
      LOBYTE(v32) = v30;
    v33 = v32 - 4;
    if (v33 >= 6u)
      LOBYTE(v34) = 1;
    else
      v34 = 0x70707060302uLL >> (8 * v33);
    goto LABEL_32;
  }
  v27 = *((_QWORD *)a2 + 37);
  if (!v27)
  {
    v23 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v27 = *(_QWORD *)v23;
    *((_QWORD *)a2 + 37) = *(_QWORD *)v23;
  }
  if (*(_BYTE *)(v27 + 88) == 8)
  {
    v28 = 4;
    if (a11 == -1)
      goto LABEL_23;
  }
  else
  {
    v28 = *(unsigned __int8 *)(a3 + 3360);
    if (a11 == -1)
LABEL_23:
      v22 = *(_BYTE *)(v27 + 92);
  }
  if ((v22 - 1) > 8u)
    v35 = 0;
  else
    v35 = dword_19FFB8A88[(v22 - 1)];
  v36 = (grl *)grl::SizeGroupMin(v23);
  v37 = (int)v36;
  v38 = grl::SizeGroupMax(v36);
  LODWORD(v34) = v35 + v28;
  if (v35 + v28 >= v38)
    LODWORD(v34) = v38;
  if ((int)v34 <= v37)
    LOBYTE(v34) = v37;
LABEL_32:
  v19[192] = v34;
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(a4 + 112);
  v39 = *((_QWORD *)a2 + 37);
  if (!v39)
  {
    v40 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v39 = *v40;
    *((_QWORD *)a2 + 37) = *v40;
  }
  *(_QWORD *)(v19 + 196) = *(_QWORD *)(v39 + 56);
  v19[140] = *(_BYTE *)(v39 + 88);
  v41 = *a5;
  if (!*a5 || (v42 = *(unsigned __int8 *)(v41 + 33), !*(_BYTE *)(v41 + 33)))
  {
    *((_DWORD *)v19 + 54) = 0xFFFF;
    goto LABEL_41;
  }
  v43 = *(_DWORD **)v41;
  if (*v43 == 4)
  {
    v44 = 0;
LABEL_38:
    *((_DWORD *)v19 + 54) = LOWORD(v43[2 * v44 + 1]);
    if (!v39)
    {
LABEL_67:
      v56 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
      v39 = *v56;
      *((_QWORD *)a2 + 37) = *v56;
    }
  }
  else
  {
    v44 = 0;
    v54 = v43 + 2;
    while (v42 - 1 != v44)
    {
      v55 = *v54;
      v54 += 2;
      ++v44;
      if (v55 == 4)
      {
        if (v44 < v42)
          goto LABEL_38;
        break;
      }
    }
    *((_DWORD *)v19 + 54) = 0xFFFF;
    if (!v39)
      goto LABEL_67;
  }
LABEL_41:
  *((_DWORD *)v19 + 56) = *(_DWORD *)(v39 + 32);
  v45 = *(char *)(a13 + 23);
  if (v45 >= 0)
    v46 = (uint64_t *)a13;
  else
    v46 = *(uint64_t **)a13;
  if (v45 >= 0)
    v47 = *(unsigned __int8 *)(a13 + 23);
  else
    v47 = *(_QWORD *)(a13 + 8);
  *((_QWORD *)v19 + 36) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v46, v47);
  v48 = *(_QWORD *)(a13 + 48);
  if (!v48)
  {
    v49 = 0;
    goto LABEL_51;
  }
  if (v48 != a13 + 24)
  {
    v49 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v48 + 16))(*(_QWORD *)(a13 + 48));
LABEL_51:
    v125 = (__int128 *)v49;
    goto LABEL_53;
  }
  v125 = &v123;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a13 + 24) + 24))(a13 + 24, &v123);
LABEL_53:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v123, (_QWORD *)v19 + 37);
  v50 = v125;
  if (v125 == &v123)
  {
    v51 = 4;
    v50 = &v123;
  }
  else
  {
    if (!v125)
      goto LABEL_58;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_58:
  v52 = a8;
  if (!a8)
  {
    v53 = *((_QWORD *)a2 + 37);
    if (v53)
    {
      v52 = *(_DWORD *)(v53 + 64);
      if (!v52)
        goto LABEL_101;
    }
    else
    {
      v57 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
      v58 = *v57;
      *((_QWORD *)a2 + 37) = *v57;
      v52 = *(_DWORD *)(v58 + 64);
      if (!v52)
        goto LABEL_101;
    }
  }
  v59 = *a5;
  if (*a5)
  {
    v60 = *(unsigned __int8 *)(v59 + 33);
    if (*(_BYTE *)(v59 + 33))
    {
      v61 = *(_DWORD **)v59;
      if (*v61 == v52)
      {
        v62 = 0;
LABEL_73:
        v63 = v61[2 * v62 + 1];
        *((_DWORD *)v19 + 21) = v52;
        *((_WORD *)v19 + 44) = v63;
        v19[138] = a8 == 0;
      }
      else
      {
        v62 = 0;
        v106 = v61 + 2;
        while (v60 - 1 != v62)
        {
          v107 = *v106;
          v106 += 2;
          ++v62;
          if (v107 == v52)
          {
            if (v62 < v60)
              goto LABEL_73;
            break;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a9 + 24))
  {
    v64 = (char *)*((_QWORD *)v19 + 12);
    *((_QWORD *)v19 + 13) = v64;
    v65 = *(int16x8_t **)a9;
    v66 = *(int16x8_t **)(a9 + 8);
    v67 = (uint64_t)v66->i64 - *(_QWORD *)a9;
    v68 = v67 >> 2;
    v69 = *((_QWORD *)v19 + 15);
    v70 = v64;
    if (v67 >> 2 <= v69)
      goto LABEL_93;
    v120 = a1;
    v71 = (char *)*((_QWORD *)v19 + 14);
    v72 = (1 << -(char)__clz(v69 + 1));
    if (v69 >= 0xFFFFFFFFFFFFFFFELL)
      v73 = 1;
    else
      v73 = v72;
    if (v73 <= v68)
      v74 = v67 >> 2;
    else
      v74 = v73;
    v70 = (char *)malloc_type_malloc(2 * v74, 0x1000040BDFB0063uLL);
    v75 = (char *)*((_QWORD *)v19 + 12);
    v76 = (char *)*((_QWORD *)v19 + 13);
    if (v75 != v76)
    {
      v77 = v76 - v75 - 2;
      v78 = v70;
      v79 = (char *)*((_QWORD *)v19 + 12);
      if (v77 >= 0x1E)
      {
        v78 = v70;
        v79 = (char *)*((_QWORD *)v19 + 12);
        if ((unint64_t)(v70 - v75) >= 0x20)
        {
          v80 = (v77 >> 1) + 1;
          v81 = 2 * (v80 & 0xFFFFFFFFFFFFFFF0);
          v78 = &v70[v81];
          v82 = (__int128 *)(v75 + 16);
          v83 = v70 + 16;
          v84 = v80 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v85 = *v82;
            *(v83 - 1) = *(v82 - 1);
            *v83 = v85;
            v82 += 2;
            v83 += 2;
            v84 -= 16;
          }
          while (v84);
          if (v80 == (v80 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_90;
          v79 = &v75[v81];
        }
      }
      do
      {
        v86 = *(_WORD *)v79;
        v79 += 2;
        *(_WORD *)v78 = v86;
        v78 += 2;
      }
      while (v79 != v76);
    }
LABEL_90:
    if (v64 != v71)
      free(v75);
    *((_QWORD *)v19 + 12) = v70;
    *((_QWORD *)v19 + 15) = v74;
    a1 = v120;
LABEL_93:
    if (v65 != v66)
    {
      v87 = v70;
      if ((unint64_t)(v67 - 4) >= 0x3C)
      {
        v88 = ((unint64_t)(v67 - 4) >> 2) + 1;
        v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF0);
        v90 = v65 + 2;
        v91 = (int16x8_t *)(v70 + 16);
        v92 = v88 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          v94 = v90[-2];
          v93 = v90[-1];
          v96 = *v90;
          v95 = v90[1];
          v90 += 4;
          v91[-1] = vuzp1q_s16(v94, v93);
          *v91 = vuzp1q_s16(v96, v95);
          v91 += 2;
          v92 -= 16;
        }
        while (v92);
        if (v88 == (v88 & 0x7FFFFFFFFFFFFFF0))
          goto LABEL_100;
        v87 = &v70[2 * (v88 & 0x7FFFFFFFFFFFFFF0)];
        v65 = (int16x8_t *)((char *)v65 + v89);
      }
      do
      {
        v97 = v65->i32[0];
        v65 = (int16x8_t *)((char *)v65 + 4);
        *(_WORD *)v87 = v97;
        v87 += 2;
      }
      while (v65 != v66);
    }
LABEL_100:
    *((_QWORD *)v19 + 13) = &v70[2 * v68];
  }
LABEL_101:
  v98 = *((_QWORD *)a2 + 34);
  if (!v98)
  {
    v99 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)a2);
    v98 = *v99;
    *((_QWORD *)a2 + 34) = *v99;
  }
  v100 = *(unsigned __int8 *)(v98 + 103);
  if (*(char *)(v98 + 103) < 0)
  {
    v101 = *(_QWORD *)(v98 + 88);
    if (a10)
      goto LABEL_127;
  }
  else
  {
    v101 = *(unsigned __int8 *)(v98 + 103);
    if (a10)
      goto LABEL_127;
  }
  v102 = (void **)(v98 + 80);
  v103 = (void **)(v19 + 40);
  if (v101)
    v104 = v103 == v102;
  else
    v104 = 1;
  if (!v104)
  {
    if (v19[63] < 0)
    {
      v109 = *(void ***)(v98 + 80);
      v108 = *(_QWORD *)(v98 + 88);
      if ((v100 & 0x80u) == 0)
        v110 = v102;
      else
        v110 = v109;
      if ((v100 & 0x80u) == 0)
        v111 = v100;
      else
        v111 = v108;
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v103, v110, v111);
    }
    else if ((v100 & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v103, *(void **)(v98 + 80), *(_QWORD *)(v98 + 88));
    }
    else
    {
      v105 = *(_OWORD *)v102;
      *((_QWORD *)v19 + 7) = *(_QWORD *)(v98 + 96);
      *(_OWORD *)v103 = v105;
    }
  }
LABEL_127:
  if (a6 || *(_BYTE *)(a7 + 4))
  {
    v123 = 0uLL;
    v124 = 0;
    {
      v119 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v119, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v125 = (__int128 *)mdm::Allocator::instance(void)::alloc;
    memset(v126, 0, 13);
    if (a6)
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v123, a6);
    if (*(_BYTE *)(a7 + 4))
      LODWORD(v126[1]) = *(_DWORD *)a7;
    v113 = *a1;
    v114 = *a1 + 120;
    if ((__int128 *)v114 != &v123)
    {
      if (*(char *)(v113 + 143) < 0)
      {
        if (v124 >= 0)
          v115 = &v123;
        else
          v115 = (__int128 *)v123;
        if (v124 >= 0)
          v116 = HIBYTE(v124);
        else
          v116 = *((_QWORD *)&v123 + 1);
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)v114, v115, v116);
      }
      else if (v124 < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v114, (void *)v123, *((size_t *)&v123 + 1));
      }
      else
      {
        *(_OWORD *)v114 = v123;
        *(_QWORD *)(v114 + 16) = v124;
      }
    }
    *(_QWORD *)(v113 + 152) = v126[0];
    *(_DWORD *)(v113 + 160) = v126[1];
    *(_BYTE *)(v113 + 164) = BYTE4(v126[1]);
    if (SHIBYTE(v124) < 0)
      (*(void (**)(__int128 *, _QWORD, uint64_t))(*(_QWORD *)v125 + 40))(v125, v123, v124 & 0x7FFFFFFFFFFFFFFFLL);
  }
}

void sub_19F56DB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void md::LabelStyle::pointIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, char a7, int a8, char a9, char a10, char a11, uint64_t a12)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];
  int v22;
  char v23;
  std::string v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  LOBYTE(v22) = 0;
  v23 = 0;
  if (a7)
  {
    v22 = a6;
    v23 = 1;
  }
  v21[0] = 0;
  v21[24] = 0;
  if (*(char *)(a12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a12, *(_QWORD *)(a12 + 8));
  }
  else
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)a12;
    v24.__r_.__value_.__r.__words[2] = *(_QWORD *)(a12 + 16);
  }
  v18 = v25;
  v19 = *(_QWORD *)(a12 + 48);
  if (!v19)
    goto LABEL_9;
  if (v19 != a12 + 24)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
LABEL_9:
    v26 = (_BYTE *)v19;
    goto LABEL_11;
  }
  v26 = v25;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 24))(v19, v25);
LABEL_11:
  md::LabelStyle::pointIcon(a1, a2, a3, a4, a5, 0, &v22, a8, (uint64_t)v21, a9, a10, a11, (uint64_t)&v24);
  if (v26 == v25)
  {
    v20 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_16;
    v20 = 5;
    v18 = v26;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_16:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_19F56DD38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F56DD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19F56DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void md::LabelStyle::pointIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, int *a7, int a8, uint64_t a9, char a10, char a11, char a12, uint64_t a13)
{
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  md::LabelImageKey *v36[2];
  int v37;
  char v38;
  md::LabelImageKey *v39;
  md::LabelImageKey *v40;
  std::string v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a3 + 3032))
  {
    v21 = *((_QWORD *)a2 + 34);
    if (v21)
    {
      if (*(_BYTE *)(v21 + 72))
        goto LABEL_4;
LABEL_35:
      *a1 = 0;
      a1[1] = 0;
      return;
    }
    v34 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)a2);
    v35 = *v34;
    *((_QWORD *)a2 + 34) = *v34;
    if (!*(_BYTE *)(v35 + 72))
      goto LABEL_35;
  }
LABEL_4:
  LOBYTE(v37) = 0;
  v38 = 0;
  if (*((_BYTE *)a7 + 4))
  {
    v37 = *a7;
    v38 = 1;
  }
  if (*(char *)(a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a13, *(_QWORD *)(a13 + 8));
  }
  else
  {
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)a13;
    v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(a13 + 16);
  }
  v22 = v42;
  v23 = *(_QWORD *)(a13 + 48);
  if (!v23)
    goto LABEL_12;
  if (v23 != a13 + 24)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
LABEL_12:
    v43 = (_BYTE *)v23;
    goto LABEL_14;
  }
  v43 = v42;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v23 + 24))(v23, v42);
LABEL_14:
  md::LabelStyle::pointIconImageKey(&v39, a2, a3, a4, a5, a6, (uint64_t)&v37, a8, a9, a10, a11, a12, (uint64_t)&v41);
  if (v43 == v42)
  {
    v24 = 4;
    goto LABEL_18;
  }
  if (v43)
  {
    v24 = 5;
    v22 = v43;
LABEL_18:
    (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v25 = *(_QWORD *)(a3 + 264);
  v26 = (std::__shared_weak_count *)v40;
  v36[0] = v39;
  v36[1] = v40;
  if (v40)
  {
    v27 = (unint64_t *)((char *)v40 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  md::LabelImageLoader::loadImage(a1, v25, v36);
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v32 = (unint64_t *)((char *)v40 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_19F56DFF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F56DFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19F56E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F56E034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void md::CustomImageData::~CustomImageData(md::CustomImageData *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void md::LabelStyle::createIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, std::__shared_count *a4, uint64_t *a5, void **a6, int a7, __int16 a8, char a9, uint64_t a10, char *a11, uint64_t a12)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unsigned __int8 v18;
  uint64_t v19;
  grl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  grl *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t *v34;
  std::__shared_weak_count_vtbl **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _DWORD *v39;
  unint64_t v40;
  int v41;
  int *v42;
  int v43;
  int v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_count *v49;
  uint64_t v50;
  char v51;
  void **p_shared_weak_owners;
  void *v53;
  size_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t *v71;
  std::__shared_count __src;
  uint64_t v77;
  std::__shared_count *p_src;
  _BYTE v79[13];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v16 = (std::__shared_weak_count *)operator new(0x148uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB010;
  v16[1].std::__shared_count = 0u;
  *(_OWORD *)&v16[1].__shared_weak_owners_ = 0u;
  v16[2].__shared_owners_ = 0;
  {
    v67 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v67, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v19 = mdm::Allocator::instance(void)::alloc;
  v16[6].__vftable = 0;
  v16[3].__vftable = 0;
  v16[3].__shared_owners_ = 0;
  v16[2].__shared_weak_owners_ = v19;
  LOWORD(v16[3].__shared_weak_owners_) = 0;
  v16[4].__vftable = (std::__shared_weak_count_vtbl *)&v16[5].__shared_owners_;
  v16[4].__shared_owners_ = (uint64_t)&v16[5].__shared_owners_;
  v16[4].__shared_weak_owners_ = (uint64_t)&v16[5].__shared_owners_;
  v16[5].__vftable = (std::__shared_weak_count_vtbl *)2;
  LOBYTE(v16[5].__shared_weak_owners_) = 0;
  *(_DWORD *)((char *)&v16[5].__shared_weak_owners_ + 1) = 16843008;
  BYTE5(v16[5].__shared_weak_owners_) = 0;
  v16[6].__shared_owners_ = 0;
  v16[6].__shared_weak_owners_ = 0;
  {
    v68 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v68, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v16[7].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
  v16[7].__shared_owners_ = 0;
  *(uint64_t *)((char *)&v16[7].__shared_owners_ + 5) = 0;
  LOBYTE(v16[8].__vftable) = 4;
  *(std::__shared_weak_count_vtbl **)((char *)&v16[8].__vftable + 4) = 0;
  BYTE4(v16[8].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v16[8].__shared_weak_owners_ + 4) = 0xFFFF3F800000;
  WORD2(v16[9].__vftable) = 0;
  LODWORD(v16[9].__shared_owners_) = 1065353216;
  v16[13].__shared_owners_ = 0;
  v16[10].std::__shared_count = 0u;
  *(_OWORD *)&v16[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v16[11].__shared_owners_ = 0u;
  v16[12].__vftable = 0;
  LOBYTE(v16[5].__shared_weak_owners_) = 4;
  *(float *)&v16[3].__shared_owners_ = md::LabelStyle::iconContentScale(a2);
  v21 = *((_QWORD *)a2 + 37);
  if (!v21)
  {
    v20 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v21 = *(_QWORD *)v20;
    *((_QWORD *)a2 + 37) = *(_QWORD *)v20;
  }
  v70 = a8;
  v71 = a1;
  if (*(_BYTE *)(v21 + 88) == 8)
    v22 = 4;
  else
    v22 = *(unsigned __int8 *)(a3 + 3360);
  v23 = a3;
  v24 = 92;
  if (a9)
    v24 = 93;
  v25 = *(unsigned __int8 *)(a10 + v24) - 1;
  if (v25 > 8)
    v26 = 0;
  else
    v26 = dword_19FFB8A88[v25];
  v27 = (grl *)grl::SizeGroupMin(v20);
  v28 = (int)v27;
  v29 = grl::SizeGroupMax(v27);
  v30 = v26 + v22;
  if (v26 + v22 >= v29)
    v30 = v29;
  if (v30 <= v28)
    LOBYTE(v30) = v28;
  LOBYTE(v16[8].__vftable) = v30;
  v16[1].std::__shared_count = a4[7];
  if (a9)
  {
    v31 = *((_QWORD *)a2 + 39);
    v32 = v23;
    v33 = a6;
    if (!v31)
    {
      v34 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>((uint64_t)a2);
      v31 = *v34;
      *((_QWORD *)a2 + 39) = *v34;
      v32 = v23;
      v33 = a6;
    }
    v35 = (std::__shared_weak_count_vtbl **)(v31 + 24);
  }
  else
  {
    v35 = (std::__shared_weak_count_vtbl **)(a10 + 56);
    v32 = v23;
    v33 = a6;
  }
  *(std::__shared_weak_count_vtbl **)((char *)&v16[8].__vftable + 4) = *v35;
  BYTE4(v16[5].__shared_weak_owners_) = *(_BYTE *)(a10 + 88);
  BYTE4(v16[9].__vftable) = *(_BYTE *)(a10 + 96);
  v36 = *a5;
  if (!*a5)
  {
    v41 = 0xFFFF;
    v38 = v71;
    goto LABEL_33;
  }
  v37 = *(unsigned __int8 *)(v36 + 33);
  v38 = v71;
  if (!*(_BYTE *)(v36 + 33))
    goto LABEL_32;
  v39 = *(_DWORD **)v36;
  if (*v39 != 4)
  {
    v40 = 0;
    v42 = v39 + 2;
    while (v37 - 1 != v40)
    {
      v43 = *v42;
      v42 += 2;
      ++v40;
      if (v43 == 4)
      {
        if (v40 < v37)
          goto LABEL_26;
        break;
      }
    }
LABEL_32:
    v41 = 0xFFFF;
    goto LABEL_33;
  }
  v40 = 0;
LABEL_26:
  v41 = LOWORD(v39[2 * v40 + 1]);
LABEL_33:
  LODWORD(v16[9].__vftable) = v41;
  v44 = *(char *)(a12 + 23);
  if (v44 >= 0)
    v45 = (uint64_t *)a12;
  else
    v45 = *(uint64_t **)a12;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a12 + 23);
  else
    v46 = *(_QWORD *)(a12 + 8);
  v16[12].__vftable = (std::__shared_weak_count_vtbl *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v45, v46);
  v47 = *(_QWORD *)(a12 + 48);
  if (!v47)
  {
    v48 = 0;
    goto LABEL_43;
  }
  if (v47 != a12 + 24)
  {
    v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 16))(*(_QWORD *)(a12 + 48));
LABEL_43:
    p_src = (std::__shared_count *)v48;
    goto LABEL_45;
  }
  p_src = &__src;
  (*(void (**)(uint64_t, std::__shared_count *))(*(_QWORD *)(a12 + 24) + 24))(a12 + 24, &__src);
LABEL_45:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&__src, &v16[12].__shared_owners_);
  v49 = p_src;
  if (p_src == &__src)
  {
    v50 = 4;
    v49 = &__src;
  }
  else
  {
    if (!p_src)
      goto LABEL_50;
    v50 = 5;
  }
  (*((void (**)(void))&v49->~__shared_count + v50))();
LABEL_50:
  if (a7)
  {
    HIDWORD(v16[3].__shared_owners_) = a7;
    LOWORD(v16[3].__shared_weak_owners_) = v70;
  }
  if (v33)
  {
    v51 = *((_BYTE *)v33 + 23);
    if (v51 < 0)
    {
      if (!v33[1])
        goto LABEL_69;
    }
    else if (!*((_BYTE *)v33 + 23))
    {
      goto LABEL_69;
    }
    p_shared_weak_owners = (void **)&v16[1].__shared_weak_owners_;
    if (&v16[1].__shared_weak_owners_ != (uint64_t *)v33)
    {
      if (SHIBYTE(v16[2].__shared_owners_) < 0)
      {
        if (v51 >= 0)
          v53 = v33;
        else
          v53 = *v33;
        if (v51 >= 0)
          v54 = *((unsigned __int8 *)v33 + 23);
        else
          v54 = (size_t)v33[1];
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(p_shared_weak_owners, v53, v54);
      }
      else if ((*((_BYTE *)v33 + 23) & 0x80) != 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)p_shared_weak_owners, *v33, (size_t)v33[1]);
      }
      else
      {
        *(_OWORD *)p_shared_weak_owners = *(_OWORD *)v33;
        v16[2].__shared_owners_ = (uint64_t)v33[2];
      }
    }
  }
LABEL_69:
  if (a11[4])
  {
    __src = (std::__shared_count)0;
    v77 = 0;
    {
      v69 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v56 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)&v79[5] = 0;
    p_src = (std::__shared_count *)mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)v79 = 0;
    v57 = *a11;
    v79[8] = *a11;
    v58 = a11[1];
    v79[9] = v58;
    v59 = a11[2];
    v79[10] = v59;
    v60 = a11[3];
    v79[11] = v60;
    if (SHIBYTE(v16[6].__shared_weak_owners_) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v16[6].__vftable, &__src, 0);
      v61 = SHIBYTE(v77);
      v16[7].__shared_owners_ = 0;
      LODWORD(v16[7].__shared_weak_owners_) = *(_DWORD *)&v79[8];
      BYTE4(v16[7].__shared_weak_owners_) = 0;
      if (v61 < 0)
        (*(void (**)(uint64_t, std::__shared_count_vtbl *, uint64_t))(*(_QWORD *)v56 + 40))(v56, __src.__vftable, v77 & 0x7FFFFFFFFFFFFFFFLL);
    }
    else
    {
      v16[6].std::__shared_count = __src;
      v16[6].__shared_weak_owners_ = v77;
      v16[7].__shared_owners_ = 0;
      LOBYTE(v16[7].__shared_weak_owners_) = v57;
      BYTE1(v16[7].__shared_weak_owners_) = v58;
      BYTE2(v16[7].__shared_weak_owners_) = v59;
      BYTE3(v16[7].__shared_weak_owners_) = v60;
      BYTE4(v16[7].__shared_weak_owners_) = 0;
    }
  }
  v62 = *(_QWORD *)(v32 + 264);
  __src.__vftable = (std::__shared_count_vtbl *)&v16[1];
  __src.__shared_owners_ = (uint64_t)v16;
  do
    v63 = __ldxr(p_shared_owners);
  while (__stxr(v63 + 1, p_shared_owners));
  md::LabelImageLoader::loadImage(v38, v62, (md::LabelImageKey **)&__src);
  do
    v64 = __ldaxr(p_shared_owners);
  while (__stlxr(v64 - 1, p_shared_owners));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v16)
  {
    v65 = (unint64_t *)&v16->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19F56E728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (SHIBYTE(a20) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, a18, a20 & 0x7FFFFFFFFFFFFFFFLL);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::LabelStyle::multiPOIBalloonIcon(_QWORD *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, char a5, unsigned int ***a6)
{
  char *v11;
  unint64_t *v12;
  unsigned __int8 v13;
  uint64_t v14;
  grl::Allocator *v15;
  uint64_t v16;
  unint64_t v17;
  grl::Allocator *v22;
  unsigned int **v23;
  unsigned int **v24;
  uint64_t v25;
  unsigned int **v26;
  unsigned int **v27;
  unsigned int *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 v31;
  char *v32;
  grl::IconImage **v33;
  grl::IconImage **v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  char v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *p_shared_weak_owners;
  unint64_t v70;
  unint64_t v71;
  VKImage *v72;
  CFTypeRef v73;
  float v74;
  unint64_t *v75;
  unint64_t v76;
  VKImage *v77;
  id *v78;
  id *v79;
  grl::IconImage **v80;
  grl::IconImage *v81;
  unint64_t *v82;
  unint64_t v83;
  grl::IconImage **v84;
  grl::IconImage **v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  grl::IconImage **v91;
  grl::IconImage *v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  __int128 v96;
  grl::IconImage **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  void **v110;
  VKImage *v111;
  void *v112;
  id *v113;
  void **v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  id *v119;
  VKImage *v120;
  id v121;
  char *v122;
  void **v123;
  void *v124;
  void *v125;
  void **v126;
  void **v127;
  void **v128;
  void (**v129)(void **);
  grl::IconImage **v130;
  _BYTE *v131;
  char v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  _OWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  _OWORD *v153;
  _QWORD *i;
  __int128 v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  grl::Allocator *v166;
  char *v167;
  char *v168;
  char v169;
  grl::IconImage *v170;
  char *v171;
  char *v172;
  unint64_t *v173;
  unint64_t v174;
  grl::IconImage *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  id *v179;
  unint64_t *v180;
  unint64_t v181;
  id *v182;
  id *v183;
  void (**v184)(id *);
  char *v185;
  char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  char *v190;
  char *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  grl::IconImage **v198;
  grl::IconImage **v199;
  void *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unsigned int **v212;
  unsigned int v214;
  _QWORD *v215;
  float *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  grl::IconImage *v221[2];
  void *v222;
  id *v223;
  unint64_t v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  __int128 v230;
  void *__p;
  __int128 v232;
  int v233;
  char v234;
  int v235;
  __int16 v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  grl::IconImage **v243;
  unint64_t v244;
  CFTypeRef cf[2];
  char v246;
  __int16 v247;
  char v248;
  char v249;
  char v250;
  char v251;
  _QWORD *v252;
  _QWORD v253[3];
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  _QWORD v258[2];
  char v259;
  __int16 v260;
  char v261;
  char v262;
  char v263;
  char v264;
  _QWORD *v265;
  _QWORD v266[3];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;

  v271 = *MEMORY[0x1E0C80C00];
  v11 = (char *)operator new(0x148uLL);
  *((_QWORD *)v11 + 1) = 0;
  v12 = (unint64_t *)(v11 + 8);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E42DB010;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((_QWORD *)v11 + 7) = 0;
  {
    v208 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v208, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v211 = a1;
  v14 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 8) = v14;
  *((_WORD *)v11 + 44) = 0;
  *((_QWORD *)v11 + 12) = v11 + 128;
  *((_QWORD *)v11 + 13) = v11 + 128;
  *((_QWORD *)v11 + 14) = v11 + 128;
  *((_QWORD *)v11 + 15) = 2;
  v11[136] = 0;
  *(_DWORD *)(v11 + 137) = 16843008;
  v11[141] = 0;
  *((_QWORD *)v11 + 19) = 0;
  *((_QWORD *)v11 + 20) = 0;
  *((_QWORD *)v11 + 18) = 0;
  {
    v209 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v209, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v11 + 21) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v11 + 22) = 0;
  *(_QWORD *)(v11 + 181) = 0;
  v11[192] = 4;
  *(_QWORD *)(v11 + 196) = 0;
  v11[204] = 0;
  *(_QWORD *)(v11 + 212) = 0xFFFF3F800000;
  *((_WORD *)v11 + 110) = 0;
  *((_DWORD *)v11 + 56) = 1065353216;
  *((_QWORD *)v11 + 40) = 0;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *((_QWORD *)v11 + 36) = 0;
  v218 = (std::__shared_weak_count *)v11;
  v11[136] = 4;
  *((float *)v11 + 20) = md::LabelStyle::iconContentScale(a2);
  v11[192] = 8;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a4 + 112);
  v16 = *((_QWORD *)a2 + 37);
  if (!v16)
  {
    v15 = (grl::Allocator *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    v16 = *(_QWORD *)v15;
    *((_QWORD *)a2 + 37) = *(_QWORD *)v15;
  }
  *(_QWORD *)(v11 + 196) = *(_QWORD *)(v16 + 56);
  v11[141] = a5;
  v215 = *(_QWORD **)(a3 + 264);
  v216 = (float *)(v11 + 24);
  v217 = (std::__shared_weak_count *)v11;
  do
    v17 = __ldxr(v12);
  while (__stxr(v17 + 1, v12));
  v242 = 0;
  v243 = 0;
  v244 = 0;
  v258[0] = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v258[1] = _D8;
  v259 = 0;
  v260 = 0;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v264 = 0;
  v266[0] = 0;
  v266[1] = grl::Allocator::instance(v15);
  v265 = v266;
  v266[2] = 0;
  v270 = 0;
  v267 = 0u;
  v268 = 0u;
  v269 = 0u;
  v22 = (grl::Allocator *)grl::IconModifiers::setGlyphOnly((uint64_t)v258, 1);
  v233 = 1065353216;
  v234 = 4;
  v236 = -1;
  v235 = 0;
  v237 = 0;
  v239 = 0;
  v240 = 0;
  v238 = 0;
  v241 = grl::Allocator::instance(v22);
  grl::IconRequestOptions::setContentScale((float *)&v233, *((float *)v11 + 20));
  grl::IconRequestOptions::setVariant((uint64_t)&v233, *((_WORD *)v11 + 98));
  grl::IconRequestOptions::setDataVariant((uint64_t)&v233, *((_WORD *)v11 + 100));
  grl::IconRequestOptions::setCountryCode((uint64_t)&v233, *((_WORD *)v11 + 108));
  __p = 0;
  v232 = 0uLL;
  v23 = *a6;
  v24 = a6[1];
  v25 = (char *)v24 - (char *)*a6;
  if (v24 == *a6)
  {
    v27 = 0;
    v26 = 0;
  }
  else
  {
    if (v25 < 0)
      abort();
    v26 = (unsigned int **)operator new((char *)v24 - (char *)*a6);
    __p = v26;
    *((_QWORD *)&v232 + 1) = &v26[2 * (v25 >> 4)];
    v27 = v26;
    do
    {
      *v27 = *v23;
      v28 = v23[1];
      v27[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 2);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v23 += 2;
      v27 += 2;
    }
    while (v23 != v24);
    *(_QWORD *)&v232 = v27;
  }
  v229 = 0;
  v230 = 0uLL;
  v226 = 0;
  {
    v210 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v210, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v214 = 0;
  v227 = mdm::Allocator::instance(void)::alloc;
  v228 = 0;
  v224 = 0;
  v225 = &v226;
  v222 = 0;
  v223 = 0;
  do
  {
    v212 = v27;
    if (v26 != v27)
    {
      while (1)
      {
        v39 = **v26;
        if ((_DWORD)v39)
          break;
LABEL_34:
        v26 += 2;
        if (v26 == v27)
          goto LABEL_23;
      }
      v40 = (*v26)[1];
      v41 = v226;
      if (!v226)
      {
LABEL_37:
        grl::IconRequestOptions::setSizeGroup((uint64_t)&v233, 8);
        grl::IconManager::imageForKeyValue(objc_msgSend(*(id *)(v215[14] + 96), "grlIconManager"), **v26, (*v26)[1], (const grl::IconModifiers *)v258, (float *)&v233, 0, v221);
        if (v221[0])
          goto LABEL_64;
        grl::IconRequestOptions::setSizeGroup((uint64_t)&v233, 7);
        grl::IconManager::imageForKeyValue(objc_msgSend(*(id *)(v215[14] + 96), "grlIconManager"), **v26, (*v26)[1], (const grl::IconModifiers *)v258, (float *)&v233, 0, cf);
        v42 = *(_OWORD *)cf;
        cf[0] = 0;
        cf[1] = 0;
        v43 = (std::__shared_weak_count *)v221[1];
        *(_OWORD *)v221 = v42;
        if (!v43)
          goto LABEL_42;
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
          v46 = (std::__shared_weak_count *)cf[1];
          if (!cf[1])
            goto LABEL_63;
        }
        else
        {
LABEL_42:
          v46 = (std::__shared_weak_count *)cf[1];
          if (!cf[1])
            goto LABEL_63;
        }
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
LABEL_63:
        if (!v221[0])
        {
          v102 = (char *)*((_QWORD *)*v26 + 1);
          v101 = (char *)*((_QWORD *)*v26 + 2);
          if (v101 - v102 < 1)
            goto LABEL_178;
          v103 = (v101 - v102) >> 4;
          v104 = (_QWORD *)v230;
          v105 = v229;
          if (v103 <= (uint64_t)(*((_QWORD *)&v230 + 1) - v230) >> 4)
          {
            v136 = v230 - (_QWORD)v229;
            v137 = (uint64_t)(v230 - (_QWORD)v229) >> 4;
            if (v137 >= v103)
            {
              v138 = &v102[16 * v103];
              v140 = (_QWORD *)v230;
            }
            else
            {
              v138 = &v102[16 * v137];
              if (v138 == v101)
              {
                v140 = (_QWORD *)v230;
              }
              else
              {
                v139 = &v102[16 * v137];
                v140 = (_QWORD *)v230;
                do
                {
                  *v140 = *(_QWORD *)v139;
                  v141 = *((_QWORD *)v139 + 1);
                  v140[1] = v141;
                  if (v141)
                  {
                    v142 = (unint64_t *)(v141 + 8);
                    do
                      v143 = __ldxr(v142);
                    while (__stxr(v143 + 1, v142));
                  }
                  v139 += 16;
                  v140 += 2;
                }
                while (v139 != v101);
              }
              *(_QWORD *)&v230 = v140;
              if (v136 < 1)
                goto LABEL_178;
            }
            v152 = &v140[-2 * v103];
            v153 = v140;
            for (i = v152; i < v104; i += 2)
            {
              *v153++ = *(_OWORD *)i;
              *i = 0;
              i[1] = 0;
            }
            *(_QWORD *)&v230 = v153;
            if (v140 != &v105[2 * v103])
            {
              do
              {
                v155 = *((_OWORD *)v152 - 1);
                v152 -= 2;
                *v152 = 0;
                v152[1] = 0;
                v156 = (std::__shared_weak_count *)*(v140 - 1);
                *((_OWORD *)v140 - 1) = v155;
                v140 -= 2;
                if (v156)
                {
                  v157 = (unint64_t *)&v156->__shared_owners_;
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                }
              }
              while (v152 != v105);
            }
            if (v138 == v102)
            {
              v27 = v212;
            }
            else
            {
              v27 = v212;
              do
              {
                v160 = *(_QWORD *)v102;
                v159 = *((_QWORD *)v102 + 1);
                if (v159)
                {
                  v161 = (unint64_t *)(v159 + 8);
                  do
                    v162 = __ldxr(v161);
                  while (__stxr(v162 + 1, v161));
                }
                v163 = (std::__shared_weak_count *)v105[1];
                *v105 = v160;
                v105[1] = v159;
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
                v102 += 16;
                v105 += 2;
              }
              while (v102 != v138);
            }
            goto LABEL_178;
          }
          v106 = v103 + ((uint64_t)(v230 - (_QWORD)v229) >> 4);
          if (v106 >> 60)
            abort();
          v107 = *((_QWORD *)&v230 + 1) - (_QWORD)v229;
          if ((uint64_t)(*((_QWORD *)&v230 + 1) - (_QWORD)v229) >> 3 > v106)
            v106 = v107 >> 3;
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
            v108 = 0xFFFFFFFFFFFFFFFLL;
          else
            v108 = v106;
          if (v108)
          {
            if (v108 >> 60)
              goto LABEL_317;
            v109 = operator new(16 * v108);
          }
          else
          {
            v109 = 0;
          }
          v144 = &v109[2 * v103];
          v145 = v109;
          do
          {
            *v145 = *(_QWORD *)v102;
            v146 = *((_QWORD *)v102 + 1);
            v145[1] = v146;
            if (v146)
            {
              v147 = (unint64_t *)(v146 + 8);
              do
                v148 = __ldxr(v147);
              while (__stxr(v148 + 1, v147));
            }
            v145 += 2;
            v102 += 16;
          }
          while (v145 != (_QWORD *)v144);
          if (v104 == v105)
          {
            v229 = v109;
            *(_QWORD *)&v230 = &v109[2 * v103];
            *((_QWORD *)&v230 + 1) = &v109[2 * v108];
          }
          else
          {
            do
            {
              *v144++ = *(_OWORD *)v105;
              *v105 = 0;
              v105[1] = 0;
              v105 += 2;
            }
            while (v105 != v104);
            v105 = v229;
            v229 = v109;
            *(_QWORD *)&v230 = v144;
            *((_QWORD *)&v230 + 1) = &v109[2 * v108];
            while (v104 != v105)
            {
              v149 = (std::__shared_weak_count *)*(v104 - 1);
              if (v149)
              {
                v150 = (unint64_t *)&v149->__shared_owners_;
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
              v104 -= 2;
            }
          }
          if (v105)
            operator delete(v105);
          goto LABEL_178;
        }
LABEL_64:
        v53 = v226;
        v54 = &v226;
LABEL_66:
        v55 = v54;
        if (v53)
        {
          do
          {
            v54 = (uint64_t **)v53;
            v56 = *((_DWORD *)v53 + 7);
            if ((_DWORD)v39 == v56)
            {
              v57 = *((_DWORD *)v54 + 8);
              if (v40 < v57)
                goto LABEL_65;
              v58 = v57 == (_DWORD)v40;
              if (v57 >= v40)
                v59 = 1;
              else
                v59 = -1;
              if (v58)
                v59 = 0;
              if ((v59 & 0x80) == 0)
                goto LABEL_86;
            }
            else
            {
              if (v39 < v56)
              {
LABEL_65:
                v53 = *v54;
                goto LABEL_66;
              }
              if (v56 >= v39)
                v60 = 1;
              else
                v60 = -1;
              if ((v60 & 0x80) == 0)
                goto LABEL_86;
            }
            v53 = v54[1];
          }
          while (v53);
          v55 = v54 + 1;
        }
        v61 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v227 + 16))(v227, 40, 8);
        *(uint64_t *)((char *)v61 + 28) = v39 | (v40 << 32);
        *v61 = 0;
        v61[1] = 0;
        v61[2] = (uint64_t)v54;
        *v55 = v61;
        if (*v225)
        {
          v225 = (uint64_t **)*v225;
          v61 = *v55;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v226, v61);
        ++v228;
LABEL_86:
        v62 = *(_QWORD *)(v215[14] + 112);
        v63 = *(_QWORD **)v62;
        v64 = *(_QWORD **)(v62 + 8);
        if (v63 != v64)
        {
          while (*v63 != 0x6F66BE14E10A8F81)
          {
            v63 += 5;
            if (v63 == v64)
              goto LABEL_99;
          }
        }
        if (v63 == v64)
        {
LABEL_99:
          v65 = 0;
          v66 = 0;
        }
        else
        {
          v65 = v63[3];
          v66 = (std::__shared_weak_count *)v63[4];
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
            p_shared_weak_owners = (unint64_t *)&v66->__shared_weak_owners_;
            do
              v70 = __ldxr(p_shared_weak_owners);
            while (__stxr(v70 + 1, p_shared_weak_owners));
            do
              v71 = __ldaxr(v67);
            while (__stlxr(v71 - 1, v67));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
        v72 = [VKImage alloc];
        grl::IconImage::image(v221[0], cf);
        v73 = cf[1];
        v74 = v216[14];
        v219 = v65;
        v220 = v66;
        if (v66)
        {
          v75 = (unint64_t *)&v66->__shared_weak_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = -[VKImage initWithCGImage:scale:resourceStore:](v72, "initWithCGImage:scale:resourceStore:", v73, &v219, v74);

        if (v220)
          std::__shared_weak_count::__release_weak(v220);
        cf[0] = &off_1E42B4870;
        if (cf[1])
          CFRelease(cf[1]);
        v78 = (id *)v222;
        v79 = v223;
        if (v222 != v223)
        {
          while (-[VKImage compareTo:](v77, "compareTo:", v78[1]))
          {
            v78 += 3;
            if (v78 == v79)
              goto LABEL_110;
          }
          if (v78 != v79)
          {
            if (v214)
              goto LABEL_175;
LABEL_174:
            v214 = grl::IconManager::identifierForMapKeyValue(objc_msgSend(*(id *)(v215[14] + 96), "grlIconManager"), **v26, (*v26)[1], 1, v216[14]);
LABEL_175:
            v131 = v242;
            v130 = v243;

            if (v66)
              std::__shared_weak_count::__release_weak(v66);
            v27 = v212;
            if ((unint64_t)((char *)v130 - v131) >= 0x50)
            {
              v132 = 0;
              v133 = (std::__shared_weak_count *)v221[1];
              if (!v221[1])
                goto LABEL_33;
LABEL_181:
              v134 = (unint64_t *)&v133->__shared_owners_;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
LABEL_33:
              if ((v132 & 1) == 0)
                goto LABEL_23;
              goto LABEL_34;
            }
LABEL_178:
            v132 = 1;
            v133 = (std::__shared_weak_count *)v221[1];
            if (!v221[1])
              goto LABEL_33;
            goto LABEL_181;
          }
        }
LABEL_110:
        v80 = v243;
        if ((unint64_t)v243 >= v244)
        {
          v85 = (grl::IconImage **)v242;
          v86 = ((char *)v243 - (_BYTE *)v242) >> 4;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 60)
            goto LABEL_316;
          v88 = v244 - (_QWORD)v242;
          if ((uint64_t)(v244 - (_QWORD)v242) >> 3 > v87)
            v87 = v88 >> 3;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
            v89 = 0xFFFFFFFFFFFFFFFLL;
          else
            v89 = v87;
          if (v89 >> 60)
            goto LABEL_317;
          v90 = (char *)operator new(16 * v89);
          v91 = (grl::IconImage **)&v90[16 * v86];
          v92 = v221[1];
          *(_OWORD *)v91 = *(_OWORD *)v221;
          if (v92)
          {
            v93 = (unint64_t *)((char *)v92 + 8);
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
            v80 = v243;
          }
          v95 = &v90[16 * v89];
          v84 = v91 + 2;
          if (v80 == v85)
          {
            v242 = &v90[16 * v86];
            v243 = v91 + 2;
            v244 = (unint64_t)v95;
          }
          else
          {
            do
            {
              v96 = *((_OWORD *)v80 - 1);
              v80 -= 2;
              *((_OWORD *)v91 - 1) = v96;
              v91 -= 2;
              *v80 = 0;
              v80[1] = 0;
            }
            while (v80 != v85);
            v85 = (grl::IconImage **)v242;
            v97 = v243;
            v242 = v91;
            v243 = v84;
            v244 = (unint64_t)v95;
            while (v97 != v85)
            {
              v98 = (std::__shared_weak_count *)*(v97 - 1);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v97 -= 2;
            }
          }
          if (v85)
            operator delete(v85);
        }
        else
        {
          *v243 = v221[0];
          v81 = v221[1];
          v80[1] = v221[1];
          if (v81)
          {
            v82 = (unint64_t *)((char *)v81 + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          v84 = v80 + 2;
        }
        v243 = v84;
        v110 = v223;
        if ((unint64_t)v223 < v224)
        {
          *v223 = &off_1E42B5430;
          v110[1] = 0;
          v111 = v77;
          v112 = v110[1];
          v110[1] = v111;

          v113 = v110 + 3;
          goto LABEL_173;
        }
        v114 = (void **)v222;
        v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)v223 - (_BYTE *)v222) >> 3);
        v116 = v115 + 1;
        if (v115 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          if (0x5555555555555556 * ((uint64_t)(v224 - (_QWORD)v222) >> 3) > v116)
            v116 = 0x5555555555555556 * ((uint64_t)(v224 - (_QWORD)v222) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - (_QWORD)v222) >> 3) >= 0x555555555555555)
            v117 = 0xAAAAAAAAAAAAAAALL;
          else
            v117 = v116;
          if (!v117)
          {
            v118 = 0;
LABEL_165:
            v119 = (id *)&v118[24 * v115];
            *v119 = &off_1E42B5430;
            v119[1] = 0;
            v120 = v77;
            v121 = v119[1];
            v119[1] = v120;

            v122 = &v118[24 * v117];
            v113 = v119 + 3;
            if (v110 == v114)
            {
              v222 = v119;
              v223 = v119 + 3;
              v224 = (unint64_t)v122;
              if (v110)
LABEL_172:
                operator delete(v110);
            }
            else
            {
              do
              {
                *(v119 - 3) = &off_1E42B5430;
                v119 -= 3;
                v119[1] = 0;
                v124 = *(v110 - 2);
                v123 = v110 - 2;
                objc_storeStrong(v119 + 1, v124);
                v125 = *v123;
                *v123 = 0;

                v110 = v123 - 1;
              }
              while (v110 != v114);
              v110 = (void **)v222;
              v126 = v223;
              v222 = v119;
              v223 = v113;
              v224 = (unint64_t)v122;
              if (v126 != v110)
              {
                v127 = v126 - 3;
                v128 = v126 - 3;
                do
                {
                  v129 = (void (**)(void **))*v128;
                  v128 -= 3;
                  (*v129)(v127);
                  _ZF = v127 == v110;
                  v127 = v128;
                }
                while (!_ZF);
              }
              if (v110)
                goto LABEL_172;
            }
LABEL_173:
            v223 = v113;
            if (v214)
              goto LABEL_175;
            goto LABEL_174;
          }
          if (v117 <= 0xAAAAAAAAAAAAAAALL)
          {
            v118 = (char *)operator new(24 * v117);
            goto LABEL_165;
          }
LABEL_317:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
LABEL_316:
        abort();
      }
      while (1)
      {
        v49 = *((_DWORD *)v41 + 7);
        if ((_DWORD)v39 == v49)
        {
          v50 = *((_DWORD *)v41 + 8);
          if (v40 >= v50)
          {
            _ZF = v50 == (_DWORD)v40;
            if (v50 >= v40)
              v52 = 1;
            else
              v52 = -1;
            if (_ZF)
              v52 = 0;
            goto LABEL_47;
          }
        }
        else if (v39 >= v49)
        {
          if (v49 >= v39)
            v52 = 1;
          else
            v52 = -1;
LABEL_47:
          if ((v52 & 0x80) == 0)
            goto LABEL_34;
          ++v41;
        }
        v41 = (uint64_t *)*v41;
        if (!v41)
          goto LABEL_37;
      }
    }
LABEL_23:
    v33 = (grl::IconImage **)v242;
    v34 = v243;
    if ((unint64_t)((char *)v243 - (_BYTE *)v242) > 0x40)
      goto LABEL_240;
    v32 = (char *)__p;
    if (__p)
    {
      v35 = (char *)v232;
      if ((void *)v232 != __p)
      {
        do
        {
          v36 = (std::__shared_weak_count *)*((_QWORD *)v35 - 1);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v35 -= 16;
        }
        while (v35 != v32);
        v32 = (char *)__p;
      }
      operator delete(v32);
    }
    v26 = (unsigned int **)v229;
    v232 = v230;
    v27 = (unsigned int **)v230;
    __p = v229;
    v229 = 0;
    v230 = 0uLL;
  }
  while (__p != v27);
  v33 = (grl::IconImage **)v242;
  v34 = v243;
LABEL_240:
  if (v33 == v34)
  {
    *v211 = 0;
    v211[1] = 0;
    v179 = (id *)v222;
    if (!v222)
      goto LABEL_264;
    goto LABEL_258;
  }
  v166 = (grl::Allocator *)grl::IconRequestOptions::setSizeGroup((uint64_t)&v233, *((_BYTE *)v216 + 168));
  cf[0] = 0;
  cf[1] = _D8;
  v246 = 0;
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v250 = 0;
  v251 = 0;
  v253[0] = 0;
  v253[1] = grl::Allocator::instance(v166);
  v253[2] = 0;
  v252 = v253;
  v257 = 0;
  v254 = 0u;
  v255 = 0u;
  v256 = 0u;
  grl::IconModifiers::setSelected((uint64_t)cf, 1);
  grl::IconModifiers::setComponent((uint64_t)cf, *((_BYTE *)v216 + 117));
  grl::IconManager::multiPOIBalloonContent((grl::Allocator *)objc_msgSend(*(id *)(v215[14] + 96), "grlIconManager"), (uint64_t **)&v242, v214, (const grl::IconModifiers *)cf, (uint64_t)&v233, v221);
  if (!v221[0])
  {
    *v211 = 0;
    v211[1] = 0;
    v178 = (std::__shared_weak_count *)v221[1];
    if (!v221[1])
      goto LABEL_257;
    goto LABEL_253;
  }
  v167 = (char *)md::LabelSettingsStyleCache::styleCaps(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(v215[14] + 336)
                                                                                        + 200));
  v168 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v168 + 1) = 0;
  *((_QWORD *)v168 + 2) = 0;
  *(_QWORD *)v168 = &off_1E42DB240;
  *((_QWORD *)v168 + 3) = &off_1E42AF880;
  v169 = *v167;
  v170 = v221[0];
  v171 = (char *)v221[0] + 24;
  v172 = (char *)v221[0] + 136;
  *((_QWORD *)v168 + 4) = &off_1E42B5430;
  *((_QWORD *)v168 + 5) = 0;
  *((_QWORD *)v168 + 7) = v216;
  *((_QWORD *)v168 + 8) = v217;
  if (v217)
  {
    v173 = (unint64_t *)&v217->__shared_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  *(_OWORD *)(v168 + 72) = xmmword_19FFB2E30;
  *(_OWORD *)(v168 + 88) = xmmword_19FFB2E30;
  *((_QWORD *)v168 + 13) = 0;
  *((_QWORD *)v168 + 14) = 0;
  *((_QWORD *)v168 + 15) = v172;
  *((_QWORD *)v168 + 16) = v171;
  *((_QWORD *)v168 + 17) = 0;
  *((_QWORD *)v168 + 18) = 0;
  *((_QWORD *)v168 + 19) = 0;
  *((_QWORD *)v168 + 20) = 1065353216;
  v168[168] = 0;
  *((_QWORD *)v168 + 3) = &off_1E428FBF0;
  v175 = v221[1];
  *((_QWORD *)v168 + 22) = v170;
  *((_QWORD *)v168 + 23) = v175;
  if (v175)
  {
    v176 = (unint64_t *)((char *)v175 + 8);
    do
      v177 = __ldxr(v176);
    while (__stxr(v177 + 1, v176));
  }
  v168[192] = v169;
  *v211 = v168 + 24;
  v211[1] = v168;
  *((_DWORD *)v168 + 40) = *(_DWORD *)(*(_QWORD *)(v215[14] + 432) + 44);
  md::LabelImageLoader::enqueueIconForRendering(v215, v211);
  v178 = (std::__shared_weak_count *)v221[1];
  if (v221[1])
  {
LABEL_253:
    v180 = (unint64_t *)&v178->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
LABEL_257:
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)cf);
  v179 = (id *)v222;
  if (!v222)
    goto LABEL_264;
LABEL_258:
  if (v223 != v179)
  {
    v182 = v223 - 3;
    v183 = v223 - 3;
    do
    {
      v184 = (void (**)(id *))*v183;
      v183 -= 3;
      (*v184)(v182);
      _ZF = v182 == v179;
      v182 = v183;
    }
    while (!_ZF);
    v179 = (id *)v222;
  }
  operator delete(v179);
LABEL_264:
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v225, v226);
  v185 = (char *)v229;
  if (v229)
  {
    v186 = (char *)v230;
    if ((void *)v230 != v229)
    {
      do
      {
        v187 = (std::__shared_weak_count *)*((_QWORD *)v186 - 1);
        if (v187)
        {
          v188 = (unint64_t *)&v187->__shared_owners_;
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        v186 -= 16;
      }
      while (v186 != v185);
      v185 = (char *)v229;
    }
    operator delete(v185);
  }
  v190 = (char *)__p;
  if (__p)
  {
    v191 = (char *)v232;
    if ((void *)v232 != __p)
    {
      do
      {
        v192 = (std::__shared_weak_count *)*((_QWORD *)v191 - 1);
        if (v192)
        {
          v193 = (unint64_t *)&v192->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        v191 -= 16;
      }
      while (v191 != v190);
      v190 = (char *)__p;
    }
    operator delete(v190);
  }
  v195 = v238;
  if (v238)
  {
    v196 = v239;
    v197 = v238;
    if (v239 != v238)
    {
      do
      {
        if (*(char *)(v196 - 1) < 0)
          operator delete(*(void **)(v196 - 24));
        v196 -= 24;
      }
      while (v196 != v195);
      v197 = v238;
    }
    v239 = v195;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v241 + 40))(v241, v197, v240 - v197);
  }
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)v258);
  v198 = (grl::IconImage **)v242;
  if (v242)
  {
    v199 = v243;
    v200 = v242;
    if (v243 != v242)
    {
      do
      {
        v201 = (std::__shared_weak_count *)*(v199 - 1);
        if (v201)
        {
          v202 = (unint64_t *)&v201->__shared_owners_;
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
        v199 -= 2;
      }
      while (v199 != v198);
      v200 = v242;
    }
    v243 = v198;
    operator delete(v200);
  }
  if (v217)
  {
    v204 = (unint64_t *)&v217->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  if (v218)
  {
    v206 = (unint64_t *)&v218->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
}

void sub_19F56FB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,CFTypeRef cf,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v71);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a45);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a26, (_QWORD *)a27);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a30);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a33);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)&a36);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a71);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a42);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ggl::DiffuseLandmark::BuildingPipelineState::~BuildingPipelineState(ggl::DiffuseLandmark::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::DiffuseLandmark::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::DiffuseLandmarkShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DD8 = 1;
          }
          ggl::DiffuseLandmark::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          unk_1EE586830 = &ggl::DiffuseLandmark::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE586838 = 0;
          if ((v95 & 1) == 0
          {
            ggl::DiffuseLandmark::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(_QWORD *)algn_1EE586A08 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE586A10 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE586A18 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE586A20 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE586A28 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE586A30 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE586840 = (uint64_t)&ggl::DiffuseLandmark::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1EE586848 = xmmword_19FFB3710;
        }
      }
      ggl::DiffuseLandmark::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseLandmark::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::DiffuseLandmarkShader::typedReflection(v90);
      qword_1EE5867D8 = (uint64_t)&ggl::DiffuseLandmarkShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::DiffuseLandmark::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE586868 = 0;
        qword_1EE586870 = (uint64_t)"";
        dword_1EE586878 = 0;
        qword_1EE586880 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE586888 = 3;
      }
      qword_1EE5867E0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE5867E8 = 1;
      qword_1EE5867F0 = 0;
      unk_1EE5867F8 = 1;
      qword_1EE586800 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EE586808 = 0;
      if ((v93 & 1) == 0
      {
        ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5868A8 = 0;
        qword_1EE5868B0 = (uint64_t)"skyfog";
        dword_1EE5868B8 = 3;
        qword_1EE5868C0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE5868C8 = xmmword_19FFB3720;
        qword_1EE5868D8 = 1;
        unk_1EE5868E0 = "view";
        dword_1EE5868E8 = 3;
        qword_1EE5868F0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE5868F8 = vdupq_n_s64(2uLL);
        qword_1EE586908 = 2;
        unk_1EE586910 = "scale";
        dword_1EE586918 = 3;
        qword_1EE586920 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE586928 = xmmword_19FFB3730;
        qword_1EE586938 = 3;
        unk_1EE586940 = "style";
        dword_1EE586948 = 3;
        qword_1EE586950 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1EE586958 = xmmword_19FFB3740;
        qword_1EE586968 = 4;
        unk_1EE586970 = "gradient";
        dword_1EE586978 = 3;
        qword_1EE586980 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1EE586988 = xmmword_19FFB3670;
        qword_1EE586998 = 5;
        unk_1EE5869A0 = "lightConfig";
        dword_1EE5869A8 = 3;
        qword_1EE5869B0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE5869B8 = xmmword_19FFB3750;
        qword_1EE5869C8 = 6;
        unk_1EE5869D0 = "fade";
        dword_1EE5869D8 = 3;
        qword_1EE5869E0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE5869E8 = 2;
      }
      qword_1EE586810 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE586818 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::DiffuseLandmark::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B6FE8;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::DiffuseLandmark::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::DiffuseLandmark::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DiffuseLandmark::BuildingPipelineSetup::constantDataIsEnabled(ggl::DiffuseLandmark::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::DiffuseLandmark::BuildingPipelineSetup::textureIsEnabled(ggl::DiffuseLandmark::BuildingPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0CE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0CE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::operator()(uint64_t a1, uint64_t **a2, unsigned __int8 *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  size_t v31;
  long double v32;
  long double v33;
  double v34;
  double v35;
  double v36;
  long double v37;
  long double v38;
  double v39;
  long double v40;
  double v41;
  unint64_t v42;
  double v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  _QWORD *v47;
  double v48;
  unint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  __int128 v69;
  double *v70;
  __int128 v71;
  __int128 v72;
  void *__p;
  _BYTE *v74;
  uint64_t v75;
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *a2;
  v5 = *a3;
  v7 = (char *)v3[3];
  v6 = v3[4];
  v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)v3[2];
    v11 = (v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v6 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        goto LABEL_67;
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t **)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v4;
    v9 = v16 + 1;
    if (v7 == v10)
    {
      v10 = v7;
    }
    else
    {
      v18 = v7 - v10 - 8;
      if (v18 < 0x58)
        goto LABEL_73;
      if ((unint64_t)(v10 - v15) < 0x20)
        goto LABEL_73;
      v19 = (v18 >> 3) + 1;
      v8 = &v7[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v15[8 * v11 - 16];
      v21 = v7 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_73:
        do
        {
          v24 = (uint64_t *)*((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v16 = v24;
        }
        while (v8 != v10);
        v10 = (char *)v3[2];
      }
    }
    v3[2] = v16;
    v3[3] = v9;
    v3[4] = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v7 = v4;
    v9 = v7 + 8;
  }
  v3[3] = v9;
  __p = 0;
  v74 = 0;
  v75 = 0;
  v76[0] = &off_1E42D8C18;
  v76[1] = &__p;
  v77 = v76;
  md::MuninRoadEdge::walkEdgeGeometry(v4, v5 != 0, (uint64_t)v76);
  v25 = v77;
  if (v77 == v76)
  {
    v26 = 4;
    v25 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_29;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_29:
  v70 = 0;
  v69 = 0uLL;
  v27 = __p;
  v28 = v74 - (_BYTE *)__p;
  if (v74 == __p)
  {
    v72 = 0u;
    v71 = 0u;
    goto LABEL_42;
  }
  if (v28 < 0)
    abort();
  v29 = (double *)operator new(v74 - (_BYTE *)__p);
  v30 = v28 >> 4;
  *(_QWORD *)&v69 = v29;
  v70 = &v29[2 * (v28 >> 4)];
  v31 = v28 & 0xFFFFFFFFFFFFFFF0;
  memcpy(v29, v27, v31);
  *((_QWORD *)&v69 + 1) = (char *)v29 + v31;
  v71 = 0u;
  v72 = 0u;
  if (v31)
  {
    v32 = exp((v29[1] + (*(double *)((char *)v29 + v31 - 8) - v29[1]) * 0.5) * 6.28318531 + -3.14159265);
    v33 = atan(v32) * 114.591559 + -90.0;
    v34 = cos(v33 * 0.034906585);
    v35 = cos(v33 * 0.0698131701);
    v36 = cos(v33 * 0.104719755);
    v37 = v33 * 0.00872664626;
    v38 = tan(v33 * 0.00872664626 + 0.78103484);
    v39 = log(v38);
    v40 = tan(v37 + 0.789761487);
    v41 = log(v40);
    if (v30 == 1)
    {
      v42 = 1;
      if (v31 < 0x11)
        goto LABEL_42;
    }
    else
    {
      std::vector<double>::__append((uint64_t)&v71, v30 - 1);
      v42 = (uint64_t)v31 >> 4;
      if (v31 < 0x11)
        goto LABEL_42;
    }
    v43 = fabs((v41 - v39) * 0.159154943);
    v45 = *(float64x2_t *)v29;
    v44 = (float64x2_t *)(v29 + 2);
    v46 = v45;
    v47 = (_QWORD *)v71;
    if (v42 <= 2)
      v42 = 2;
    v48 = *((double *)&v72 + 1);
    v49 = v42 - 1;
    do
    {
      v50 = *v44++;
      v51 = vsubq_f64(v50, v46);
      v51.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v51, v51)))
                 * ((v34 * -559.82 + 111132.92 + v35 * 1.175 + v36 * -0.0023)
                  * (1.0
                   / v43));
      *v47++ = *(_QWORD *)&v51.f64[0];
      v48 = v51.f64[0] + v48;
      v46 = v50;
      --v49;
    }
    while (v49);
    *((double *)&v72 + 1) = v48;
  }
LABEL_42:
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  v53 = (char *)v3[6];
  v52 = v3[7];
  if ((unint64_t)v53 < v52)
  {
    *(_OWORD *)v53 = v69;
    *((_QWORD *)v53 + 2) = v70;
    *(_OWORD *)(v53 + 24) = v71;
    *(_OWORD *)(v53 + 40) = v72;
    v54 = v53 + 56;
    goto LABEL_66;
  }
  v55 = (char *)v3[5];
  v56 = 0x6DB6DB6DB6DB6DB7 * ((v53 - v55) >> 3) + 1;
  if (v56 > 0x492492492492492)
    abort();
  v57 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v52 - (_QWORD)v55) >> 3);
  if (2 * v57 > v56)
    v56 = 2 * v57;
  if (v57 >= 0x249249249249249)
    v58 = 0x492492492492492;
  else
    v58 = v56;
  if (v58 > 0x492492492492492)
LABEL_67:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v59 = (char *)operator new(56 * v58);
  v60 = &v59[8 * ((v53 - v55) >> 3)];
  v61 = &v59[56 * v58];
  *(_OWORD *)v60 = v69;
  *((_QWORD *)v60 + 2) = v70;
  *(_OWORD *)(v60 + 24) = v71;
  *(_OWORD *)(v60 + 40) = v72;
  v54 = v60 + 56;
  if (v53 == v55)
  {
    v3[5] = v60;
    v3[6] = v54;
    v3[7] = v61;
  }
  else
  {
    v62 = 0;
    do
    {
      v63 = &v60[v62];
      v64 = &v53[v62];
      *(_OWORD *)(v63 - 56) = *(_OWORD *)&v53[v62 - 56];
      *((_QWORD *)v63 - 5) = *(_QWORD *)&v53[v62 - 40];
      *((_QWORD *)v64 - 7) = 0;
      *((_QWORD *)v64 - 6) = 0;
      *((_QWORD *)v64 - 5) = 0;
      *((_OWORD *)v63 - 2) = *(_OWORD *)&v53[v62 - 32];
      *((_QWORD *)v63 - 2) = *(_QWORD *)&v53[v62 - 16];
      *((_QWORD *)v64 - 4) = 0;
      *((_QWORD *)v64 - 3) = 0;
      *((_QWORD *)v64 - 2) = 0;
      *((_QWORD *)v63 - 1) = *(_QWORD *)&v53[v62 - 8];
      v62 -= 56;
    }
    while (&v53[v62] != v55);
    v53 = (char *)v3[5];
    v65 = (char *)v3[6];
    v3[5] = &v60[v62];
    v3[6] = v54;
    v3[7] = v61;
    while (v65 != v53)
    {
      v66 = (void *)*((_QWORD *)v65 - 4);
      if (v66)
      {
        *((_QWORD *)v65 - 3) = v66;
        operator delete(v66);
      }
      v67 = (void *)*((_QWORD *)v65 - 7);
      if (v67)
      {
        *((_QWORD *)v65 - 6) = v67;
        operator delete(v67);
      }
      v65 -= 56;
    }
  }
  if (v53)
    operator delete(v53);
LABEL_66:
  v3[6] = v54;
  return 1;
}

void sub_19F570CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevatedFillMesh::~ElevatedFillMesh(ggl::DaVinci::ElevatedFillMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::ElevatedFillMesh::~ElevatedFillMesh(ggl::DaVinci::ElevatedFillMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevatedFillMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevatedFillMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevatedFillColorPipelineState::~ElevatedFillColorPipelineState(ggl::DaVinci::ElevatedFillColorPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevatedFillColorPipelineSetup::~ElevatedFillColorPipelineSetup(ggl::DaVinci::ElevatedFillColorPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::ElevatedFillColorPipelineSetup::constantDataIsEnabled(ggl::DaVinci::ElevatedFillColorPipelineSetup *this, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (a2 == 3)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 336) != 0;
  return 0;
}

uint64_t ggl::DaVinci::ElevatedFillColorPipelineSetup::textureIsEnabled(ggl::DaVinci::ElevatedFillColorPipelineSetup *this)
{
  return 0;
}

void ggl::DaVinci::ElevatedFillColorWithDistancePipelineState::~ElevatedFillColorWithDistancePipelineState(ggl::DaVinci::ElevatedFillColorWithDistancePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::~ElevatedFillColorWithDistancePipelineSetup(ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::constantDataIsEnabled(ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup *this, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (a2 == 3)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 336) != 0;
  return 0;
}

uint64_t ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::textureIsEnabled(ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup *this)
{
  return 0;
}

void md::CustomTileOverlayResourceFetcher::~CustomTileOverlayResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CustomTileOverlayResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  __int128 v9;

  v4 = *(int **)(a3 + 8);
  v5 = v4[2];
  v6 = *v4;
  v7 = v4[1];
  LOBYTE(v9) = GEOTileKeyMakeEmpty();
  *(_QWORD *)((char *)&v9 + 1) = (v6 << 6) | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | v5 & 0x3F | ((unint64_t)*(float *)(a1 + 8) << 58);
  return v9;
}

void md::CustomTileOverlayResourceDecoder::~CustomTileOverlayResourceDecoder(md::CustomTileOverlayResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::CustomTileOverlayResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;

  if (*((_BYTE *)a2 + 16) && (v5 = *(_QWORD *)a2) != 0 && (v7 = *(id *)(v5 + 16)) != 0)
  {
    v11 = v7;
    v8 = *(id *)(v5 + 16);
    v9 = operator new(0xC0uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E42DD150;
    v10 = v8;
    gdc::Resource::Resource((uint64_t)(v9 + 3), (uint64_t)a1);
    v9[21] = &off_1E42B4A70;
    v9[22] = v10;
    *a3 = v9 + 3;
    a3[1] = v9;

  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_19F571678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResource>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 168) = &off_1E42B4A70;

  v2 = *(void **)(a1 + 32);
  if (v2 != *(void **)(a1 + 48))
    free(v2);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::CustomTileOverlayResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t geo::_retain_ptr<GEOTileLoader * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B10;

  return a1;
}

void geo::_retain_ptr<GEOTileLoader * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B10;

  JUMPOUT(0x1A1AF4E00);
}

void md::TextureResourceDecoder::~TextureResourceDecoder(md::TextureResourceDecoder *this)
{
  *(_QWORD *)this = &off_1E429DEB8;
  *((_QWORD *)this + 1) = &off_1E42B4D50;

}

{
  *(_QWORD *)this = &off_1E429DEB8;
  *((_QWORD *)this + 1) = &off_1E42B4D50;

  JUMPOUT(0x1A1AF4E00);
}

void md::TextureResourceDecoder::decode(id *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  const gdc::ResourceKey *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t (***v16)();
  uint64_t v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf;
  int v25;
  int buf;
  uint8_t buf_4[8];
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t (**v30)();
  const gdc::ResourceKey *v31;
  uint64_t (***v32)();
  uint8_t v33[8];
  const gdc::ResourceKey *v34;
  uint8_t *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3)
    v7 = *(id *)(*(_QWORD *)a3 + 16);
  else
    v7 = 0;
  if (!objc_msgSend(v7, "length"))
  {
LABEL_19:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_50;
  }
  v25 = 0;
  if (!CMPhotoDecompressionDetectContainerFormat())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v15 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - CMPhoto unable to detect container format", v33, 2u);
    }

    goto LABEL_19;
  }
  v30 = &off_1E42D12D0;
  v31 = a2;
  v32 = &v30;
  v28[0] = &off_1E42D1318;
  v28[1] = a2;
  v29 = v28;
  v35 = v33;
  *(_QWORD *)v33 = &off_1E42D1318;
  v34 = a2;
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v8 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v9 = v8;
  v10 = v31;
  v11 = *((_QWORD *)v31 + 10);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    v12 = *((_QWORD *)v10 + 11);
    buf = 134217984;
    *(_QWORD *)buf_4 = v12;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v11, "DecodeTexture", "parent_signpost=%llu", (uint8_t *)&buf, 0xCu);
  }

  v13 = v29;
  if (v29 == v28)
  {
    v14 = 4;
    v13 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_22;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_22:
  v16 = v32;
  if (v32 == &v30)
  {
    v17 = 4;
    v16 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_27;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_27:
  if (objc_msgSend(this[2], "defaultDecompressionSession"))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09560]);
    objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E43478A0, *MEMORY[0x1E0D09570]);
    cf = 0;
    if (CMPhotoDecompressionSessionCreateContainer())
    {
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v19 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - unable to create decompression container", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      v23 = 0;
      CMPhotoDecompressionContainerGetImageCount();
      CFRelease(cf);
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v19 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - unable to get image count or 0 image count", (uint8_t *)&buf, 2u);
      }
    }

    *a4 = 0;
    a4[1] = 0;

  }
  else
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v20 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - missing decompression session", (uint8_t *)&buf, 2u);
    }

    *a4 = 0;
    a4[1] = 0;
  }
  if (v35)
  {
    (*(void (**)(uint8_t *))(*(_QWORD *)v35 + 48))(v35);
    v21 = v35;
    if (v35 == v33)
    {
      v22 = 4;
      v21 = v33;
      goto LABEL_49;
    }
    if (v35)
    {
      v22 = 5;
LABEL_49:
      (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
    }
LABEL_50:

    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F571F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v11 - 128));
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<md::TextureResource,std::allocator<md::TextureResource>,gdc::ResourceKey const&,std::shared_ptr<ggl::IOSurfaceTexture> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = operator new(0xB8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DB550;
  v10 = v8 + 3;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    gdc::Resource::Resource((uint64_t)(v8 + 3), a2);
    v9[21] = a3;
    v9[22] = a4;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  else
  {
    gdc::Resource::Resource((uint64_t)(v8 + 3), a2);
    v9[21] = a3;
    v9[22] = 0;
  }
  *a1 = v10;
  a1[1] = v9;
}

void std::__shared_ptr_emplace<md::TextureResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextureResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TextureResource>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1318;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1318;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "DecodeTexture", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D12D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D12D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "DecodeTexture", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void md::ARWalkingManeuverTextLabelPart::~ARWalkingManeuverTextLabelPart(md::ARWalkingManeuverTextLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARWalkingManeuverTextLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, this, 632);
}

uint64_t md::ARWalkingManeuverTextLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  double v10;
  double v11;
  uint64_t *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  _QWORD *v27;
  float *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  float v32[4];

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 80))(**(_QWORD **)(a1 + 576));
  if ((_DWORD)result != 37)
    return result;
  v12 = *(uint64_t **)(a1 + 576);
  v13 = (float *)*v12;
  v14 = *(float **)(*v12 + 24);
  v15 = v14[20];
  v16 = v14[18];
  if (v15 < v16)
    return 14;
  v17 = v14[21];
  v18 = v14[19];
  if (v17 < v18)
    return 14;
  if (!*(_BYTE *)(a1 + 631))
    goto LABEL_11;
  v19 = v13[250];
  v20 = v19 * 0.15;
  v21 = (float)(v17 - v13[251]) + (float)(v19 * 0.15);
  v22 = (float)(v15 - v16) - fmaxf((float)(v15 - v16) + (float)(v19 * 0.85), v19 * 5.0);
  v23 = v22 * 0.5;
  v24 = v22 < 0.0;
  v25 = 0.0;
  if (v24)
    v25 = v23;
  v26 = (float)(v13[252] + v18) - v20;
  v32[0] = v25 + v16;
  v32[1] = v26;
  v32[2] = v15 - v25;
  v32[3] = v21;
  md::AnimatedTextureLabelPart::setMeshRectForStaging(v12[1], (uint64_t)v32);
  v27 = *(_QWORD **)(a1 + 576);
  v28 = (float *)v27[1];
  v28[162] = *(float *)(*v27 + 1000) * 3.0;
  result = (*(uint64_t (**)(float *, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v28 + 80))(v28, a2, a3, a4);
  if ((_DWORD)result == 37)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) + 24);
    LODWORD(v10) = *(_DWORD *)(v29 + 76);
    v16 = fminf(*(float *)(v29 + 72), v16);
    LODWORD(v11) = *(_DWORD *)(v29 + 84);
    v15 = fmaxf(v15, *(float *)(v29 + 80));
    v18 = fminf(*(float *)&v10, v18);
    v17 = fmaxf(v17, *(float *)&v11);
LABEL_11:
    v30 = *(void **)(a1 + 232);
    if (v30)
    {
      free(v30);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v31 = *(void **)(a1 + 240);
    if (v31)
    {
      free(v31);
      *(_QWORD *)(a1 + 240) = 0;
    }
    *(float *)(a1 + 72) = v16;
    *(float *)(a1 + 76) = v18;
    *(float *)(a1 + 80) = v15;
    *(float *)(a1 + 84) = v17;
    *(_DWORD *)(a1 + 280) = *a3;
    *(_DWORD *)(a1 + 284) = a3[1];
    *(_DWORD *)(a1 + 104) = *a3;
    LODWORD(v9) = a3[1];
    *(_DWORD *)(a1 + 108) = LODWORD(v9);
    md::CollisionObject::setupShapeData(a1 + 72, v9, v10, v11);
    *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    return 37;
  }
  return result;
}

_DWORD *md::ARWalkingManeuverTextLabelPart::pushToRenderModel(uint64_t a1, uint64_t a2, float a3)
{
  _DWORD *result;
  _QWORD *v7;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 128))(**(_QWORD **)(a1 + 576));
  if (*(_BYTE *)(a1 + 631))
  {
    v7 = *(_QWORD **)(a1 + 576);
    result = (_DWORD *)v7[1];
    if (result)
    {
      result[196] = *(_DWORD *)(*v7 + 760);
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, float))(*(_QWORD *)result + 128))(result, a2, a3);
    }
  }
  return result;
}

uint64_t md::ARWalkingManeuverTextLabelPart::stagingModelMatrix(md::ARWalkingManeuverTextLabelPart *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t md::ARWalkingManeuverTextLabelPart::modelMatrix(md::ARWalkingManeuverTextLabelPart *this)
{
  return *((_QWORD *)this + 6);
}

double md::ARWalkingManeuverTextLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3890;
  strcpy(v3, "ARWalkingManeuverTextLabelPart");
  return *(double *)"verTextLabelPart";
}

uint64_t md::ARWalkingManeuverTextLabelPart::ARWalkingManeuverTextLabelPart(uint64_t a1, _QWORD *a2, md::LabelPart *a3, char a4)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  md::LabelPart *v10;
  uint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  malloc_zone_t *zone;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  malloc_zone_t *v19;
  _BYTE v20[12];

  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E4294028;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v12 + 24) = "VectorKitLabels";
    *(_OWORD *)(v12 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v12 = &off_1E42B5668;
    *(_QWORD *)(v12 + 8) = "VectorKitLabels";
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_QWORD *)(v12 + 248) = 0;
    *(_OWORD *)(v12 + 56) = 0u;
    v13 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v12 + 56), 0);
    if ((_DWORD)v13)
      geo::read_write_lock::logFailure(v13, (uint64_t)"initialization", v14);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v12 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v12 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v12;
  }
  *(_QWORD *)(a1 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)a1 = off_1E42A7518;
  *(_DWORD *)(a1 + 628) = 1;
  {
    v16 = operator new();
    *(_QWORD *)(v16 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v16 + 24) = "VectorKitLabels";
    *(_OWORD *)(v16 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v16 = &off_1E42B5668;
    *(_QWORD *)(v16 + 8) = "VectorKitLabels";
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_OWORD *)(v16 + 120) = 0u;
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    *(_OWORD *)(v16 + 168) = 0u;
    *(_OWORD *)(v16 + 184) = 0u;
    *(_OWORD *)(v16 + 200) = 0u;
    *(_OWORD *)(v16 + 216) = 0u;
    *(_OWORD *)(v16 + 232) = 0u;
    *(_QWORD *)(v16 + 248) = 0;
    *(_OWORD *)(v16 + 56) = 0u;
    v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v16 + 56), 0);
    if ((_DWORD)v17)
      geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
    v19 = malloc_create_zone(0, 0);
    *(_QWORD *)(v16 + 48) = v19;
    malloc_set_zone_name(v19, "VectorKitLabels");
    *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v16;
  }
  v10 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 1184, 8);
  v20[0] = 0;
  v20[10] = 0;
  md::HorizontalTextLabelPart::HorizontalTextLabelPart((uint64_t)v10, a2, (uint64_t)v20, 0);
  *(_QWORD *)v10 = off_1E42A7178;
  *((_BYTE *)v10 + 1168) = a4;
  md::LabelPart::setRenderOrder((uint64_t)v10, 1);
  md::CompositeLabelPart::addLabelPart(a1, v10);
  if (a3)
  {
    *(_BYTE *)(a1 + 631) = 1;
    (*(void (**)(md::LabelPart *, _QWORD))(*(_QWORD *)a3 + 824))(a3, 0);
    md::CompositeLabelPart::addLabelPart(a1, a3);
  }
  return a1;
}

void sub_19F572C30(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v6;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  malloc_zone_t *zone;

  v6 = atomic_load(v4);
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v7 + 24) = "VectorKitLabels";
    *(_OWORD *)(v7 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v7 = &off_1E42B5668;
    *(_QWORD *)(v7 + 8) = "VectorKitLabels";
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_QWORD *)(v7 + 248) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    v8 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v7 + 56), 0);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure(v8, (uint64_t)"initialization", v9);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v7 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v7 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    *(_QWORD *)(v3 + 2392) = v7;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 2392) + 40))(*(_QWORD *)(v3 + 2392), v2, 1184);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::SpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::SpecularBuildingTopShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57EA18 = &ggl::SpecularBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57EA20 = 0;
          if ((v95 & 1) == 0
          {
            ggl::SpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE57EA50 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57EA58 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57EA60 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57EA68 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57EA70 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57EA78 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57EA28 = (uint64_t)&ggl::SpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1EE57EA30 = xmmword_19FFB37A0;
        }
      }
      ggl::SpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::SpecularBuildingTopShader::typedReflection(v90);
      qword_1ECE31820 = (uint64_t)&ggl::SpecularBuildingTopShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57EBE0 = 0;
        qword_1EE57EBE8 = (uint64_t)"";
        dword_1EE57EBF0 = 0;
        qword_1EE57EBF8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57EC00 = 1;
      }
      qword_1ECE31828 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31830 = 1;
      qword_1ECE31838 = 0;
      unk_1ECE31840 = 0;
      qword_1ECE31848 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31850 = 0;
      if ((v93 & 1) == 0
      {
        ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57EA90 = 0;
        qword_1EE57EA98 = (uint64_t)"skyfog";
        dword_1EE57EAA0 = 3;
        qword_1EE57EAA8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1EE57EAB0 = xmmword_19FFB3720;
        qword_1EE57EAC0 = 1;
        unk_1EE57EAC8 = "view";
        dword_1EE57EAD0 = 3;
        qword_1EE57EAD8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57EAE0 = vdupq_n_s64(2uLL);
        qword_1EE57EAF0 = 2;
        unk_1EE57EAF8 = "scale";
        dword_1EE57EB00 = 3;
        qword_1EE57EB08 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57EB10 = xmmword_19FFB3730;
        qword_1EE57EB20 = 3;
        unk_1EE57EB28 = "style";
        dword_1EE57EB30 = 3;
        qword_1EE57EB38 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57EB40 = xmmword_19FFB3740;
        qword_1EE57EB50 = 4;
        unk_1EE57EB58 = "gradient";
        dword_1EE57EB60 = 3;
        qword_1EE57EB68 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1EE57EB70 = xmmword_19FFB3670;
        qword_1EE57EB80 = 5;
        unk_1EE57EB88 = "lightConfig";
        dword_1EE57EB90 = 3;
        qword_1EE57EB98 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57EBA0 = xmmword_19FFB3750;
        qword_1EE57EBB0 = 6;
        unk_1EE57EBB8 = "fade";
        dword_1EE57EBC0 = 3;
        qword_1EE57EBC8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57EBD0 = 2;
      }
      qword_1ECE31858 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31860 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::SpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BAA68;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

uint64_t ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

void HillshadeRenderable::~HillshadeRenderable(HillshadeRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MapTileDataRenderable<md::HillshadeTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninRoadLabelGenerator::createLabel(md::MuninRoadLabelGenerator *this, md::MuninRoadLabelCreationParams *a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  void **v15;
  std::__shared_weak_count_vtbl *v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  BOOL v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  md::LabelStyle *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  size_t v51;
  __int128 *p_dst;
  unint64_t v53;
  const void **v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  md::LabelStyle *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned __int8 v77;
  uint64_t v78;
  __int128 v79;
  unsigned __int8 v80;
  uint64_t *v81;
  _QWORD *v82;
  _QWORD *i;
  unsigned __int8 v84;
  md::LabelPart *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  long double v89;
  long double v90;
  long double v91;
  double v92;
  double v93;
  double v94;
  __double2 v95;
  double v96;
  __double2 v97;
  long double v98;
  double v99;
  double v100;
  long double v101;
  double v102;
  __double2 v103;
  double v104;
  double v105;
  __double2 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  geo::read_write_lock *v147;
  const char *v148;
  malloc_zone_t *zone;
  int v150;
  uint64_t v151;
  geo::read_write_lock *v152;
  const char *v153;
  malloc_zone_t *v154;
  uint64_t v155;
  geo::read_write_lock *v156;
  const char *v157;
  malloc_zone_t *v158;
  md::MuninRoadLabelGenerator *v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  __int128 __dst;
  unint64_t v166;
  uint64_t v167;
  uint64_t (**v168)();
  uint64_t (**v169)();
  _QWORD v170[3];
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  std::ios_base v179;
  uint64_t v180;
  int v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  uint64_t v184;
  uint64_t v185;
  md::LabelStyle *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  _BYTE v190[20];

  {
    v141 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v141, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  v9 = v8;
  if (v8)
    *v8 = 0x1000000005;
  v10 = *((unsigned __int8 *)a3 + 106);
  v160 = v7;
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 16, 4);
  v12 = v11;
  if (v11)
    v11[1] = (v10 << 32) | 0x1004F;
  *v11 = *v9;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v9, 8);
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
  v13[1].std::__shared_count = 0u;
  v15 = (void **)&v13[1].__vftable;
  *(_OWORD *)&v13[1].__shared_weak_owners_ = 0u;
  *(_DWORD *)((char *)&v13[2].__vftable + 7) = 0;
  v16 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  v13[1].__vftable = v16;
  if (v16)
  {
    *(_QWORD *)&v17 = -1;
    *((_QWORD *)&v17 + 1) = -1;
    *(_OWORD *)&v16[5].__get_deleter = v17;
    *(_OWORD *)&v16[6].~__shared_weak_count = v17;
    *(_OWORD *)&v16[4].__on_zero_shared_weak = v17;
    *(_OWORD *)&v16[5].~__shared_weak_count_0 = v17;
    *(_OWORD *)&v16[4].~__shared_weak_count = v17;
    *(_OWORD *)&v16[4].__on_zero_shared = v17;
    *(_OWORD *)&v16[3].~__shared_weak_count_0 = v17;
    *(_OWORD *)&v16[3].__get_deleter = v17;
    *(_OWORD *)&v16[2].__on_zero_shared = v17;
    *(_OWORD *)&v16[2].__on_zero_shared_weak = v17;
    *(_OWORD *)&v16[1].__get_deleter = v17;
    *(_OWORD *)&v16[2].~__shared_weak_count = v17;
    *(_OWORD *)&v16->__on_zero_shared_weak = v17;
    *(_OWORD *)&v16[1].~__shared_weak_count_0 = v17;
    *(_OWORD *)&v16->~__shared_weak_count = v17;
    *(_OWORD *)&v16->__on_zero_shared = v17;
  }
  v18 = 0;
  v19 = 0;
  v188 = v13 + 1;
  v189 = v13;
  v20 = BYTE1(v13[2].__shared_owners_);
  while (1)
  {
    v22 = v20;
    v23 = *v15;
    if (v20)
      break;
LABEL_9:
    v23[v22] = v12[v18];
    v20 = BYTE1(v13[2].__shared_owners_) + 1;
    BYTE1(v13[2].__shared_owners_) = v20;
    v19 = 1;
    v21 = v18 == 1;
    v18 = 1;
    if (v21)
    {
      v23 = *v15;
      v22 = v20;
LABEL_27:
      qsort(v23, v22, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
      goto LABEL_28;
    }
  }
  if (v20 > 0x1Fu)
  {
    do
    {
      v27 = 0;
      v28 = (int *)v23;
      while (1)
      {
        v29 = *v28;
        v28 += 2;
        if (v29 == LODWORD(v12[v18]))
          break;
        if (v22 == ++v27)
          goto LABEL_21;
      }
      HIDWORD(v23[v27]) = HIDWORD(v12[v18]);
LABEL_21:
      v21 = v18 == 1;
      v18 = 1;
    }
    while (!v21);
  }
  else
  {
    do
    {
      v24 = 0;
      v25 = (int *)v23;
      while (1)
      {
        v26 = *v25;
        v25 += 2;
        if (v26 == LODWORD(v12[v18]))
          break;
        if (v22 == ++v24)
          goto LABEL_9;
      }
      HIDWORD(v23[v24]) = HIDWORD(v12[v18]);
      v21 = v18 == 1;
      v18 = 1;
    }
    while (!v21);
  }
  if ((v19 & 1) != 0)
    goto LABEL_27;
LABEL_28:
  v30 = *(_QWORD *)a2;
  v168 = (uint64_t (**)())&v13[1];
  v169 = (uint64_t (**)())v13;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  md::LabelManager::styleForFeatureAttributes((uint64_t *)&v186, *(_QWORD *)(v30 + 336), (uint64_t *)&v168, (_QWORD *)(*a3 + 56));
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (v32)
  {
    if (v186)
      goto LABEL_41;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v186)
      goto LABEL_41;
  }
  v33 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *(_QWORD *)v33 = &off_1E42DAC90;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  *(_OWORD *)(v33 + 72) = 0u;
  *(_OWORD *)(v33 + 88) = 0u;
  *((_QWORD *)v33 + 13) = 0;
  *(_OWORD *)(v33 + 24) = 0u;
  *((_DWORD *)v33 + 28) = 1065353216;
  *((_WORD *)v33 + 58) = 256;
  *(_QWORD *)(v33 + 118) = 0x1010000000000;
  v33[126] = 0;
  *((_QWORD *)v33 + 16) = 0x3F800000437F0000;
  *((_QWORD *)v33 + 17) = 0xFC00FC00FC00FC00;
  *((_WORD *)v33 + 72) = 256;
  *(_DWORD *)(v33 + 146) = 0;
  v33[150] = 0;
  *((_QWORD *)v33 + 19) = 0x3FF0000000000000;
  v33[160] = -1;
  *(_OWORD *)(v33 + 164) = 0u;
  *(_OWORD *)(v33 + 180) = 0u;
  *(_OWORD *)(v33 + 196) = 0u;
  *(_OWORD *)(v33 + 212) = 0u;
  *(_OWORD *)(v33 + 228) = 0u;
  *(_OWORD *)(v33 + 244) = 0u;
  *(_OWORD *)(v33 + 260) = 0u;
  *(_OWORD *)(v33 + 271) = 0u;
  *((_QWORD *)v33 + 49) = 0;
  v33[400] = 0;
  *(_WORD *)(v33 + 401) = 0;
  *((_OWORD *)v33 + 18) = 0u;
  *((_OWORD *)v33 + 19) = 0u;
  *((_OWORD *)v33 + 20) = 0u;
  *((_OWORD *)v33 + 21) = 0u;
  *((_OWORD *)v33 + 22) = 0u;
  *((_OWORD *)v33 + 23) = 0u;
  *(_DWORD *)(v33 + 383) = 0;
  *(_OWORD *)(v33 + 466) = 0u;
  *(_OWORD *)(v33 + 440) = 0u;
  *(_OWORD *)(v33 + 456) = 0u;
  *(_OWORD *)(v33 + 408) = 0u;
  *(_OWORD *)(v33 + 424) = 0u;
  v33[164] = 1;
  *(_WORD *)(v33 + 265) = 1;
  *((_DWORD *)v33 + 51) = -1;
  v33[274] = 2;
  *((_DWORD *)v33 + 55) = 1065353216;
  *((_DWORD *)v33 + 60) = 2139095039;
  *(_QWORD *)(v33 + 252) = 0x4334000000000000;
  *((_DWORD *)v33 + 65) = 1101004800;
  v33[285] = 4;
  v33[480] = 1;
  v34 = v187;
  v186 = (md::LabelStyle *)(v33 + 24);
  v187 = (std::__shared_weak_count *)v33;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_41:
  v37 = v186;
  md::LabelStyle::setZoom(v186, 17.0);
  v38 = v187;
  if (v187)
  {
    v39 = (unint64_t *)&v187->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (std::__shared_weak_count *)a3[3];
  a3[2] = (uint64_t)v37;
  a3[3] = (uint64_t)v38;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v182 = 0;
  v183 = 0;
  v184 = 0;
  {
    v142 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v142, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v185 = mdm::Allocator::instance(void)::alloc;
  v168 = (uint64_t (**)())&unk_1E428AEF8;
  v179.__vftable = (std::ios_base_vtbl *)&unk_1E428AF20;
  std::ios_base::init(&v179, &v169);
  v180 = 0;
  v181 = -1;
  v168 = off_1E42DAA38;
  v179.__vftable = (std::ios_base_vtbl *)&off_1E42DAA60;
  std::streambuf::basic_streambuf();
  v169 = off_1E42DA790;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  {
    v143 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v143, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v176 = mdm::Allocator::instance(void)::alloc;
  v177 = 0;
  v178 = 16;
  if (*((_BYTE *)a3 + 125))
  {
    {
      v144 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v144, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v167 = mdm::Allocator::instance(void)::alloc;
    HIBYTE(v166) = 4;
    LODWORD(__dst) = 548314594;
    BYTE4(__dst) = 0;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v168, (uint64_t)&__dst, 4);
    if (SHIBYTE(v166) < 0)
      (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v167 + 40))(v167, __dst, v166 & 0x7FFFFFFFFFFFFFFFLL);
  }
  v47 = *(char *)(*a3 + 47);
  if (v47 >= 0)
    v48 = *a3 + 24;
  else
    v48 = *(_QWORD *)(*a3 + 24);
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(*a3 + 47);
  else
    v49 = *(_QWORD *)(*a3 + 32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v168, v48, v49);
  if (*((_BYTE *)a3 + 126))
  {
    {
      v145 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v145, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v167 = mdm::Allocator::instance(void)::alloc;
    HIBYTE(v166) = 4;
    LODWORD(__dst) = -1348607456;
    BYTE4(__dst) = 0;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v168, (uint64_t)&__dst, 4);
    if (SHIBYTE(v166) < 0)
      (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v167 + 40))(v167, __dst, v166 & 0x7FFFFFFFFFFFFFFFLL);
  }
  v159 = this;
  if ((v178 & 0x10) != 0)
  {
    v53 = v177;
    if (v177 < v172)
    {
      v177 = v172;
      v53 = v172;
    }
    v54 = (const void **)&v171;
  }
  else
  {
    if ((v178 & 8) == 0)
    {
      v51 = 0;
      v167 = v176;
      HIBYTE(v166) = 0;
      p_dst = &__dst;
      goto LABEL_80;
    }
    v54 = (const void **)v170;
    v53 = v170[2];
  }
  v55 = *v54;
  v51 = v53 - (_QWORD)*v54;
  v167 = v176;
  if (v51 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v51 >= 0x17)
  {
    v56 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v56 = v51 | 7;
    v57 = v56 + 1;
    p_dst = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v176 + 16))();
    *((_QWORD *)&__dst + 1) = v51;
    v166 = v57 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_79;
  }
  HIBYTE(v166) = v51;
  p_dst = &__dst;
  if (v51)
LABEL_79:
    memmove(p_dst, v55, v51);
LABEL_80:
  *((_BYTE *)p_dst + v51) = 0;
  v58 = md::TextDataStore::addString(&v182, &__dst, (__int128 *)(*a3 + 56), 0xFFFF);
  v59 = v186;
  v60 = *((_QWORD *)v186 + 35);
  v61 = v160;
  if (v60)
  {
    if (vabds_f32(*(float *)(v60 + 8), *((float *)v186 + 26)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((uint64_t)v186, v60, 0);
      v60 = *((_QWORD *)v59 + 35);
    }
  }
  else
  {
    v60 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>((uint64_t)v186, 0);
    *((_QWORD *)v59 + 35) = v60;
  }
  md::TextDataStore::textDataForZoom(&v163, v182, v183, v58, *(_QWORD *)v60 + 72);
  v62 = v163;
  if (v163)
  {
    v63 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v63->__shared_owners_ = 0;
    v63->__shared_weak_owners_ = 0;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v161 = md::LabelText::LabelText((uint64_t)&v63[1], v62, (uint64_t)v164, 17);
    v162 = v63;
    v64 = (char *)operator new(0x258uLL);
    v65 = v64;
    *((_QWORD *)v64 + 3) = &off_1E428F868;
    v66 = v64 + 24;
    *(_QWORD *)v64 = &off_1E42DB198;
    *((_QWORD *)v64 + 1) = 0;
    v68 = *a3;
    v67 = a3[1];
    *((_QWORD *)v64 + 8) = &unk_1E428F8A8;
    *((_QWORD *)v64 + 9) = v68;
    *((_QWORD *)v64 + 2) = 0;
    *((_QWORD *)v64 + 5) = 0;
    *((_QWORD *)v64 + 6) = 0;
    *((_QWORD *)v64 + 4) = 0;
    *(_QWORD *)(v64 + 55) = 0;
    *((_QWORD *)v64 + 10) = v67;
    if (v67)
    {
      v69 = (unint64_t *)(v67 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    *((_QWORD *)v64 + 11) = 0;
    *((_QWORD *)v64 + 12) = 0;
    v71 = (uint64_t *)(v64 + 88);
    v72 = a3[3];
    *((_QWORD *)v64 + 13) = a3[2];
    *((_QWORD *)v64 + 14) = v72;
    if (v72)
    {
      v73 = (unint64_t *)(v72 + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    *((_QWORD *)v64 + 15) = 0;
    *((_QWORD *)v64 + 16) = 0;
    *((_DWORD *)v64 + 34) = 0;
    *(_QWORD *)(v64 + 140) = 1065353216;
    *((_WORD *)v64 + 74) = 256;
    *(_OWORD *)(v64 + 152) = 0u;
    *(_OWORD *)(v64 + 168) = 0u;
    *((_DWORD *)v64 + 46) = 0;
    *(_QWORD *)(v64 + 188) = 1065353216;
    *(_DWORD *)(v64 + 195) = 0;
    *((_WORD *)v64 + 100) = 4876;
    *((_OWORD *)v64 + 13) = *((_OWORD *)a3 + 3);
    *((_QWORD *)v64 + 28) = a3[8];
    *((_QWORD *)v64 + 29) = a3[9];
    v64[276] = 0;
    *((_DWORD *)v64 + 70) = 0;
    *((_QWORD *)v64 + 30) = 0;
    *((_QWORD *)v64 + 31) = 0;
    v64[264] = 0;
    *((_QWORD *)v64 + 32) = 0;
    *((_OWORD *)v64 + 18) = xmmword_19FFB3480;
    *((_QWORD *)v64 + 38) = EaseLinear;
    *((_QWORD *)v64 + 39) = EaseLinear;
    v64[320] = *((_BYTE *)a3 + 124);
    *(_QWORD *)(v64 + 321) = 0;
    *(_WORD *)(v64 + 329) = 1;
    v75 = operator new();
    *(_QWORD *)(v75 + 32) = 0;
    *(_QWORD *)(v75 + 44) = 0;
    *(_BYTE *)(v75 + 52) = 5;
    *(_QWORD *)v75 = &off_1E42A3D90;
    *(_QWORD *)(v75 + 56) = v66;
    *(_BYTE *)(v75 + 64) = 0;
    *((_QWORD *)v65 + 42) = v75;
    v65[376] = 0;
    *(_OWORD *)(v65 + 344) = 0u;
    *(_OWORD *)(v65 + 360) = 0u;
    *(_DWORD *)(v65 + 377) = 1;
    *((_OWORD *)v65 + 24) = 0u;
    *((_OWORD *)v65 + 25) = 0u;
    *((_OWORD *)v65 + 26) = 0u;
    *((_OWORD *)v65 + 27) = 0u;
    *((_OWORD *)v65 + 28) = 0u;
    *((_OWORD *)v65 + 29) = 0u;
    *(_OWORD *)(v65 + 476) = 0u;
    *((_DWORD *)v65 + 123) = 1132199936;
    *((_WORD *)v65 + 248) = 0;
    *((_DWORD *)v65 + 125) = 1065353216;
    *((_QWORD *)v65 + 63) = 0;
    *(_QWORD *)(v65 + 510) = 0;
    v65[518] = 37;
    *(_OWORD *)(v65 + 519) = 0u;
    *(_OWORD *)(v65 + 535) = 0u;
    *(_OWORD *)(v65 + 547) = 0u;
    *(_WORD *)(v65 + 563) = 37;
    *(_OWORD *)(v65 + 568) = 0u;
    *(_OWORD *)(v65 + 584) = 0u;
    do
      v76 = __ldaxr((unsigned int *)&md::MuninRoadLabel::_totalLabels);
    while (__stlxr(v76 + 1, (unsigned int *)&md::MuninRoadLabel::_totalLabels));
    {
      v146 = operator new();
      *(_QWORD *)(v146 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v146 + 24) = "VectorKitLabels";
      *(_OWORD *)(v146 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v146 = &off_1E42B5668;
      *(_QWORD *)(v146 + 8) = "VectorKitLabels";
      *(_OWORD *)(v146 + 72) = 0u;
      *(_OWORD *)(v146 + 88) = 0u;
      *(_OWORD *)(v146 + 104) = 0u;
      *(_OWORD *)(v146 + 120) = 0u;
      *(_OWORD *)(v146 + 136) = 0u;
      *(_OWORD *)(v146 + 152) = 0u;
      *(_OWORD *)(v146 + 168) = 0u;
      *(_OWORD *)(v146 + 184) = 0u;
      *(_OWORD *)(v146 + 200) = 0u;
      *(_OWORD *)(v146 + 216) = 0u;
      *(_OWORD *)(v146 + 232) = 0u;
      *(_QWORD *)(v146 + 248) = 0;
      *(_OWORD *)(v146 + 56) = 0u;
      v147 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v146 + 56), 0);
      if ((_DWORD)v147)
        geo::read_write_lock::logFailure(v147, (uint64_t)"initialization", v148);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v146 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v146 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v146;
    }
    v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 672, 8);
    *(_DWORD *)(v78 + 8) = 1065353216;
    *(_QWORD *)(v78 + 16) = 0;
    *(_QWORD *)(v78 + 24) = v78;
    v79 = 0uLL;
    *(_OWORD *)(v78 + 32) = 0u;
    *(_OWORD *)(v78 + 48) = 0u;
    *(_QWORD *)(v78 + 64) = 0;
    *(_OWORD *)(v78 + 72) = xmmword_19FFB2E30;
    *(_QWORD *)(v78 + 88) = 1065353216;
    *(_DWORD *)(v78 + 96) = 1065353216;
    *(_OWORD *)(v78 + 100) = 0u;
    *(_DWORD *)(v78 + 116) = 0;
    *(_OWORD *)(v78 + 120) = xmmword_19FFB2E30;
    *(_OWORD *)(v78 + 136) = xmmword_19FFB2E30;
    *(_OWORD *)(v78 + 152) = xmmword_19FFB2E30;
    *(_OWORD *)(v78 + 168) = xmmword_19FFB3480;
    *(_BYTE *)(v78 + 224) = 0;
    *(_OWORD *)(v78 + 184) = 0u;
    *(_BYTE *)(v78 + 200) = 0;
    *(_OWORD *)(v78 + 248) = 0u;
    *(_OWORD *)(v78 + 232) = 0u;
    *(_OWORD *)(v78 + 257) = 0u;
    *(_OWORD *)(v78 + 280) = xmmword_19FFB3580;
    *(_OWORD *)(v78 + 296) = xmmword_19FFB3590;
    *(_OWORD *)(v78 + 312) = xmmword_19FFB2E30;
    *(_QWORD *)(v78 + 328) = 1065353216;
    *(_DWORD *)(v78 + 336) = 1065353216;
    *(_DWORD *)(v78 + 356) = 0;
    *(_OWORD *)(v78 + 340) = 0u;
    *(_OWORD *)(v78 + 360) = xmmword_19FFB2E30;
    *(_OWORD *)(v78 + 376) = xmmword_19FFB2E30;
    *(_OWORD *)(v78 + 392) = xmmword_19FFB2E30;
    *(_OWORD *)(v78 + 408) = xmmword_19FFB3480;
    *(_BYTE *)(v78 + 464) = 0;
    *(_OWORD *)(v78 + 424) = 0u;
    *(_BYTE *)(v78 + 440) = 0;
    *(_OWORD *)(v78 + 472) = 0u;
    *(_OWORD *)(v78 + 488) = 0u;
    *(_OWORD *)(v78 + 497) = 0u;
    *(_OWORD *)(v78 + 520) = xmmword_19FFB3580;
    *(_DWORD *)(v78 + 536) = 1065353216;
    *(_OWORD *)(v78 + 540) = 0u;
    *(_WORD *)(v78 + 556) = 512;
    *(_BYTE *)(v78 + 562) = 0;
    *(_DWORD *)(v78 + 558) = 0;
    *(_WORD *)(v78 + 563) = -1;
    *(_DWORD *)(v78 + 565) = 0;
    *(_QWORD *)v78 = off_1E4294028;
    *(_OWORD *)(v78 + 576) = 0u;
    *(_QWORD *)(v78 + 592) = 0;
    if ((v80 & 1) == 0)
    {
      v79 = 0uLL;
      if (v150)
      {
        v151 = operator new();
        *(_QWORD *)(v151 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v151 + 24) = "VectorKitLabels";
        *(_OWORD *)(v151 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v151 = &off_1E42B5668;
        *(_QWORD *)(v151 + 8) = "VectorKitLabels";
        *(_OWORD *)(v151 + 72) = 0u;
        *(_OWORD *)(v151 + 88) = 0u;
        *(_OWORD *)(v151 + 104) = 0u;
        *(_OWORD *)(v151 + 120) = 0u;
        *(_OWORD *)(v151 + 136) = 0u;
        *(_OWORD *)(v151 + 152) = 0u;
        *(_OWORD *)(v151 + 168) = 0u;
        *(_OWORD *)(v151 + 184) = 0u;
        *(_OWORD *)(v151 + 200) = 0u;
        *(_OWORD *)(v151 + 216) = 0u;
        *(_OWORD *)(v151 + 232) = 0u;
        *(_QWORD *)(v151 + 248) = 0;
        *(_OWORD *)(v151 + 56) = 0u;
        v152 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v151 + 56), 0);
        if ((_DWORD)v152)
          geo::read_write_lock::logFailure(v152, (uint64_t)"initialization", v153);
        v154 = malloc_create_zone(0, 0);
        *(_QWORD *)(v151 + 48) = v154;
        malloc_set_zone_name(v154, "VectorKitLabels");
        *(_QWORD *)(v151 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v151;
        v79 = 0uLL;
      }
    }
    *(_QWORD *)(v78 + 600) = mdm::Allocator::instance(void)::alloc;
    *(_BYTE *)(v78 + 608) = 0;
    *(_BYTE *)(v78 + 616) = 0;
    *(_WORD *)(v78 + 628) = 1;
    *(_BYTE *)(v78 + 630) = 0;
    *(_QWORD *)v78 = off_1E4294E48;
    v81 = (uint64_t *)(v78 + 632);
    *(_WORD *)(v78 + 664) = 512;
    *(_OWORD *)(v78 + 632) = v79;
    *(_OWORD *)(v78 + 648) = v79;
    *(_WORD *)(v78 + 565) = 1;
    v82 = *(_QWORD **)(v78 + 576);
    for (i = *(_QWORD **)(v78 + 584); v82 != i; ++v82)
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v82 + 64))(*v82, 1, 0);
    {
      v155 = operator new();
      *(_QWORD *)(v155 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v155 + 24) = "VectorKitLabels";
      *(_OWORD *)(v155 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v155 = &off_1E42B5668;
      *(_QWORD *)(v155 + 8) = "VectorKitLabels";
      *(_OWORD *)(v155 + 72) = 0u;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *(_OWORD *)(v155 + 120) = 0u;
      *(_OWORD *)(v155 + 136) = 0u;
      *(_OWORD *)(v155 + 152) = 0u;
      *(_OWORD *)(v155 + 168) = 0u;
      *(_OWORD *)(v155 + 184) = 0u;
      *(_OWORD *)(v155 + 200) = 0u;
      *(_OWORD *)(v155 + 216) = 0u;
      *(_OWORD *)(v155 + 232) = 0u;
      *(_QWORD *)(v155 + 248) = 0;
      *(_OWORD *)(v155 + 56) = 0u;
      v156 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v155 + 56), 0);
      if ((_DWORD)v156)
        geo::read_write_lock::logFailure(v156, (uint64_t)"initialization", v157);
      v158 = malloc_create_zone(0, 0);
      *(_QWORD *)(v155 + 48) = v158;
      malloc_set_zone_name(v158, "VectorKitLabels");
      *(_QWORD *)(v155 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v155;
    }
    v85 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 1168, 8);
    v190[0] = 0;
    v190[10] = 0;
    md::HorizontalTextLabelPart::HorizontalTextLabelPart((uint64_t)v85, &v161, (uint64_t)v190, 0);
    md::CompositeLabelPart::addLabelPart(v78, v85);
    v86 = operator new();
    v87 = *v81;
    *v81 = v86;
    if (v87)
      MEMORY[0x1A1AF4E00](v87, 0x1000C40AE2C30F4);
    (*(void (**)(md::LabelPart *, uint64_t, _QWORD))(*(_QWORD *)v85 + 64))(v85, 1, 0);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v85 + 40))(v85, *v81);
    v88 = *v71;
    *v71 = v78;
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    v89 = *((double *)v65 + 26);
    v90 = *((double *)v65 + 27);
    v91 = *((double *)v65 + 28);
    v92 = sqrt(v89 * v89 + v90 * v90);
    v93 = atan2(v91, v92 * 0.996647189);
    v94 = atan2(v90, v89);
    v95 = __sincos_stret(v93);
    v96 = atan2(v91 + v95.__sinval * v95.__sinval * 42841.3115 * v95.__sinval, v92 + v95.__cosval * v95.__cosval * -42697.6727 * v95.__cosval);
    v97 = __sincos_stret(v96);
    v98 = tan(v96 * 0.5 + 0.785398163);
    v99 = v92 / v97.__cosval
        - 6378137.0 / sqrt(1.0 - v97.__sinval * v97.__sinval * 0.00669437999)
        + *((double *)v65 + 29);
    v100 = atan(v98) * 2.0 + -1.57079633;
    v101 = fmod(v94 + 3.14159265, 6.28318531);
    v102 = fmod(v101 + 6.28318531, 6.28318531) + -3.14159265;
    v103 = __sincos_stret(v100);
    v104 = 6378137.0 / sqrt(1.0 - v103.__sinval * v103.__sinval * 0.00669437999);
    v105 = (v104 + v99) * v103.__cosval;
    v106 = __sincos_stret(v102);
    *((double *)v65 + 30) = v105 * v106.__cosval;
    *((double *)v65 + 31) = v105 * v106.__sinval;
    *((double *)v65 + 32) = (v99 + v104 * 0.99330562) * v103.__sinval;
    v61 = v160;
    if (v65[276])
      v65[276] = 0;
    *((_DWORD *)v65 + 68) = *((_DWORD *)a3 + 29);
    *((_QWORD *)v65 + 33) = *(uint64_t *)((char *)a3 + 108);
    v65[276] = 1;
    *((_DWORD *)v65 + 70) = *((_DWORD *)a3 + 30);
    v107 = *((_QWORD *)v65 + 11);
    *(_QWORD *)(v107 + 640) = a3[10];
    *(_QWORD *)(v107 + 648) = a3[11];
    *(_QWORD *)(v107 + 656) = a3[12];
    *(_BYTE *)(v107 + 665) = *((_BYTE *)a3 + 104);
    *(_BYTE *)(v107 + 664) = *((_BYTE *)a3 + 105);
    v109 = *((_QWORD *)v65 + 13);
    v108 = *((_QWORD *)v65 + 14);
    if (v108)
    {
      v110 = (unint64_t *)(v108 + 8);
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v112 = (std::__shared_weak_count *)*((_QWORD *)v65 + 16);
    *((_QWORD *)v65 + 15) = v109;
    *((_QWORD *)v65 + 16) = v108;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    *((_DWORD *)v65 + 35) = 1065353216;
    v65[149] = 1;
    (*(void (**)(_QWORD, char *))(**((_QWORD **)v65 + 11) + 24))(*((_QWORD *)v65 + 11), v65 + 120);
    v115 = *((_QWORD *)v65 + 42);
    *(_QWORD *)(v115 + 32) = 0x800000008;
    *(_QWORD *)(v115 + 44) = 1;
    *(_QWORD *)v159 = v66;
    *((_QWORD *)v159 + 1) = v65;
    v116 = v162;
    if (v162)
    {
      v117 = (unint64_t *)&v162->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = v164;
    if (!v164)
    {
LABEL_123:
      if ((SHIBYTE(v166) & 0x80000000) == 0)
        goto LABEL_125;
      goto LABEL_124;
    }
  }
  else
  {
    *(_QWORD *)v159 = 0;
    *((_QWORD *)v159 + 1) = 0;
    v119 = v164;
    if (!v164)
      goto LABEL_123;
  }
  v120 = (unint64_t *)&v119->__shared_owners_;
  do
    v121 = __ldaxr(v120);
  while (__stlxr(v121 - 1, v120));
  if (v121)
    goto LABEL_123;
  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
  std::__shared_weak_count::__release_weak(v119);
  if (SHIBYTE(v166) < 0)
LABEL_124:
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v167 + 40))(v167, __dst, v166 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_125:
  v179.__vftable = (std::ios_base_vtbl *)&off_1E42DAA60;
  v168 = off_1E42DAA38;
  v169 = off_1E42DA790;
  if (SHIBYTE(v175) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v176 + 40))(v176, v173, v175 & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](&v179);
  v122 = v182;
  if (v182)
  {
    v123 = v183;
    v124 = v182;
    if (v183 != v182)
    {
      do
      {
        v125 = *((_QWORD *)v123 - 4);
        if (v125)
        {
          v126 = *((_QWORD *)v123 - 3);
          v127 = *((_QWORD *)v123 - 4);
          if (v126 != v125)
          {
            do
            {
              v128 = *(std::__shared_weak_count **)(v126 - 8);
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v128->__on_zero_shared)(v128, v127);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              v126 -= 16;
            }
            while (v126 != v125);
            v127 = *((_QWORD *)v123 - 4);
          }
          *((_QWORD *)v123 - 3) = v125;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v123 - 1) + 40))(*((_QWORD *)v123 - 1), v127, *((_QWORD *)v123 - 2) - v127);
        }
        v131 = (std::__shared_weak_count *)*((_QWORD *)v123 - 5);
        if (v131)
        {
          v132 = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v131->__on_zero_shared)(v131, v124);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        v123 -= 56;
      }
      while (v123 != v122);
      v124 = v182;
    }
    v183 = v122;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v185 + 40))(v185, v124, v184 - (_QWORD)v124);
  }
  v134 = v187;
  if (v187)
  {
    v135 = (unint64_t *)&v187->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v189;
  if (v189)
  {
    v138 = (unint64_t *)&v189->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v61 + 40))(v61, v12, 16);
}

void sub_19F574E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 200);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 184);
  if (v15)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a15 + 40))(a15, v15, 16);
  _Unwind_Resume(a1);
}

uint64_t std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E42DAA38;
  *(_QWORD *)(a1 + 120) = &off_1E42DAA60;
  v2 = a1 + 120;
  *(_QWORD *)(a1 + 8) = off_1E42DA790;
  if (*(char *)(a1 + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 88) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v2);
  return a1;
}

void md::TextDataStore::~TextDataStore(md::TextDataStore *this)
{
  if (*(_QWORD *)this)
  {
    std::vector<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this, *(_QWORD *)this);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), *(_QWORD *)this, *((_QWORD *)this + 2) - *(_QWORD *)this);
  }
}

void std::vector<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 56)
  {
    v5 = *(_QWORD *)(i - 32);
    if (v5)
    {
      v6 = *(_QWORD *)(i - 24);
      v7 = *(_QWORD *)(i - 32);
      if (v6 != v5)
      {
        do
        {
          v8 = *(std::__shared_weak_count **)(v6 - 8);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 -= 16;
        }
        while (v6 != v5);
        v7 = *(_QWORD *)(i - 32);
      }
      *(_QWORD *)(i - 24) = v5;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), v7, *(_QWORD *)(i - 16) - v7);
    }
    v11 = *(std::__shared_weak_count **)(i - 40);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__shared_ptr_emplace<md::MuninRoadLabel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninRoadLabel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninRoadLabel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringbuf(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42DA790;
  if (*(char *)(a1 + 87) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL);
  return std::streambuf::~streambuf();
}

void std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringbuf(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42DA790;
  if (*(char *)(a1 + 87) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AF4E00);
}

double std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 48);
  if (v5 < v6)
  {
    *(_QWORD *)(a1 + 96) = v6;
    v5 = v6;
  }
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18)
    goto LABEL_14;
  if (v5)
  {
    v7 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v7 = (_QWORD *)*v7;
    v8 = v5 - (_QWORD)v7;
    if (a3)
      goto LABEL_10;
LABEL_17:
    v9 = a3;
    goto LABEL_20;
  }
  v8 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_10:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0)
        v9 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
      else
        v9 = v6 - *(_QWORD *)(a1 + 40);
      goto LABEL_20;
    }
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  v9 = v8;
LABEL_20:
  v10 = -1;
  v12 = v9 + a2;
  if (v12 >= 0 && v8 >= v12 && (!v12 || ((a4 & 8) == 0 || *(_QWORD *)(a1 + 24)) && ((a4 & 0x10) == 0 || v6)))
  {
    if ((a4 & 8) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + v12;
      *(_QWORD *)(a1 + 32) = v5;
    }
    if ((a4 & 0x10) != 0)
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + v12;
    v10 = v12;
  }
LABEL_15:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v10;
  return result;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::underflow(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;

  v1 = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 < v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    v1 = v2;
  }
  if ((*(_BYTE *)(a1 + 104) & 8) == 0)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 < v1)
  {
    *(_QWORD *)(a1 + 32) = v1;
    v3 = v1;
  }
  v4 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)v4 < v3)
    return *v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 < v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    v2 = v3;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) >= v4)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 != -1)
  {
    if ((*(_BYTE *)(a1 + 104) & 0x10) != 0 || *(unsigned __int8 *)(v4 - 1) == a2)
    {
      *(_QWORD *)(a1 + 24) = v4 - 1;
      *(_QWORD *)(a1 + 32) = v2;
      *(_BYTE *)(v4 - 1) = a2;
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 24) = v4 - 1;
  *(_QWORD *)(a1 + 32) = v2;
  return 0;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::overflow(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *__src;
  char *__srca;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (a2 == -1)
    return 0;
  v2 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 **)(a1 + 48);
  v6 = *(unsigned __int8 **)(a1 + 56);
  if (v7 == v6)
  {
    if ((*(_BYTE *)(a1 + 104) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 96);
    v12 = (char **)(a1 + 64);
    v13 = *(char *)(a1 + 87);
    if (v13 < 0)
    {
      v15 = *(_QWORD *)(a1 + 72);
      v16 = *(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL;
      v14 = v16 - 1;
      if (v15 != v16 - 1)
      {
        v22 = *v12;
        v20 = v15 + 1;
        v14 = *(_QWORD *)(a1 + 72);
LABEL_27:
        *(_QWORD *)(a1 + 72) = v20;
LABEL_28:
        *(_WORD *)&v22[v14] = 0;
        if (*(char *)(a1 + 87) < 0)
        {
          v28 = *(_QWORD *)(a1 + 72);
          v27 = *(_QWORD *)(a1 + 80);
          v24 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v28 < v24)
          {
            v23 = HIBYTE(v27);
            v26 = v24 - v28;
            if (v24 == v28)
            {
LABEL_65:
              v42 = &v7[-v10];
              if (*(char *)(a1 + 87) < 0)
              {
                v12 = *(char ***)(a1 + 64);
                v43 = *(_QWORD *)(a1 + 72);
              }
              else
              {
                v43 = *(unsigned __int8 *)(a1 + 87);
              }
              v6 = (unsigned __int8 *)v12 + v43;
              v7 = &v42[(_QWORD)v12];
              *(_QWORD *)(a1 + 40) = v12;
              *(_QWORD *)(a1 + 48) = &v42[(_QWORD)v12];
              *(_QWORD *)(a1 + 56) = v6;
              v8 = (unint64_t)v12 + v11 - v10;
              goto LABEL_69;
            }
            goto LABEL_34;
          }
          v32 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 72) = v24;
        }
        else
        {
          LODWORD(v23) = *(unsigned __int8 *)(a1 + 87);
          v24 = 22;
          if (v23 <= 0x15)
          {
            v25 = *(unsigned __int8 *)(a1 + 87);
            v26 = 22 - v25;
            if (v25 == 22)
              goto LABEL_65;
LABEL_34:
            if ((v23 & 0x80) != 0)
            {
              v29 = *(_QWORD *)(a1 + 72);
              v34 = *(_QWORD *)(a1 + 80);
              v30 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              v31 = HIBYTE(v34);
            }
            else
            {
              v29 = v23;
              v30 = 22;
              LOBYTE(v31) = v23;
            }
            v49 = v11;
            v51 = v10;
            if (v30 - v29 >= v26)
            {
              v37 = (char *)(a1 + 64);
              if ((v31 & 0x80) != 0)
                v37 = *v12;
              goto LABEL_60;
            }
            v35 = 0x7FFFFFFFFFFFFFF7;
            if (0x7FFFFFFFFFFFFFF7 - v30 >= v29 + v26 - v30)
            {
              __srca = (char *)(a1 + 64);
              if ((v23 & 0x80) != 0)
                __srca = *v12;
              if (v30 < 0x3FFFFFFFFFFFFFF3)
              {
                v36 = 2 * v30;
                if (v29 + v26 > 2 * v30)
                  v36 = v29 + v26;
                if (v36 >= 0x17)
                {
                  v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                  v39 = v36 | 7;
                  if (v39 == 23)
                    v39 = v38;
                  v35 = v39 + 1;
                }
                else
                {
                  v35 = 23;
                }
              }
              v45 = v35;
              v40 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88));
              v37 = v40;
              if (v29)
                memmove(v40, __srca, v29);
              if (v30 != 22)
                (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), __srca);
              *(_QWORD *)(a1 + 72) = v29;
              *(_QWORD *)(a1 + 80) = v45 | 0x8000000000000000;
              *(_QWORD *)(a1 + 64) = v37;
LABEL_60:
              bzero(&v37[v29], v26);
              v41 = v29 + v26;
              if (*(char *)(a1 + 87) < 0)
                *(_QWORD *)(a1 + 72) = v41;
              else
                *(_BYTE *)(a1 + 87) = v41 & 0x7F;
              v11 = v49;
              v10 = v51;
              v33 = &v37[v41];
              goto LABEL_64;
            }
LABEL_78:
            abort();
          }
          *(_BYTE *)(a1 + 87) = 22;
          v32 = a1 + 64;
        }
        v33 = (char *)(v32 + v24);
LABEL_64:
        *v33 = 0;
        goto LABEL_65;
      }
      if (v16 == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_78;
      __src = *v12;
      if (v14 >= 0x3FFFFFFFFFFFFFF3)
      {
        v48 = *(_QWORD *)(a1 + 96);
        v50 = *(_QWORD *)(a1 + 40);
        v19 = 0x7FFFFFFFFFFFFFF7;
LABEL_21:
        v20 = 1;
        v21 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), v19, 1);
        v22 = v21;
        if (!v14 || (memmove(v21, __src, v14), v20 = v14 + 1, v14 != 22))
          (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), __src, v20);
        v11 = v48;
        v10 = v50;
        *(_QWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v19 | 0x8000000000000000;
        goto LABEL_27;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 87) != 22)
      {
        v14 = *(unsigned __int8 *)(a1 + 87);
        *(_BYTE *)(a1 + 87) = (v13 + 1) & 0x7F;
        v22 = (char *)(a1 + 64);
        goto LABEL_28;
      }
      v14 = 22;
      __src = (char *)(a1 + 64);
    }
    v48 = *(_QWORD *)(a1 + 96);
    v50 = *(_QWORD *)(a1 + 40);
    if (v14 + 1 > 2 * v14)
      v17 = v14 + 1;
    else
      v17 = 2 * v14;
    v18 = (v17 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v18 = v17 | 7;
    if (v17 >= 0x17)
      v19 = v18 + 1;
    else
      v19 = 23;
    goto LABEL_21;
  }
  v8 = *(_QWORD *)(a1 + 96);
LABEL_69:
  if ((unint64_t)(v7 + 1) >= v8)
    v8 = (unint64_t)(v7 + 1);
  *(_QWORD *)(a1 + 96) = v8;
  if ((*(_BYTE *)(a1 + 104) & 8) != 0)
  {
    v44 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v44 = (_QWORD *)*v44;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)(a1 + 24) = (char *)v44 + v4 - v5;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v7 == v6)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, v2);
  *(_QWORD *)(a1 + 48) = v7 + 1;
  *v7 = v2;
  return v2;
}

void std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = off_1E42DAA38;
  *(_QWORD *)(a1 + 120) = &off_1E42DAA60;
  v1 = a1 + 120;
  *(_QWORD *)(a1 + 8) = off_1E42DA790;
  if (*(char *)(a1 + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 88) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  JUMPOUT(0x1A1AF4E00);
}

void `virtual thunk to'std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_1E42DAA38;
  *((_QWORD *)v1 + 15) = &off_1E42DAA60;
  *((_QWORD *)v1 + 1) = off_1E42DA790;
  if (v1[95] < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v1 + 12) + 40))(*((_QWORD *)v1 + 12), *((_QWORD *)v1 + 9), *((_QWORD *)v1 + 11) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x1A1AF4D64);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_1E42DAA38;
  *((_QWORD *)v1 + 15) = &off_1E42DAA60;
  *((_QWORD *)v1 + 1) = off_1E42DA790;
  if (v1[95] < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v1 + 12) + 40))(*((_QWORD *)v1 + 12), *((_QWORD *)v1 + 9), *((_QWORD *)v1 + 11) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1 + 120);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelStyle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelStyle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelStyle>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;

  v2 = (std::__shared_weak_count *)a1[59];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[57];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[57];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[55];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[53];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[53];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = a1[51];
  a1[51] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = a1[49];
  a1[49] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a1[45];
  if (v16)
  {
    v17 = a1[46];
    v18 = (void *)a1[45];
    if (v17 != v16)
    {
      do
      {
        v19 = *(uint64_t **)(v17 - 8);
        *(_QWORD *)(v17 - 8) = 0;
        if (v19)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          MEMORY[0x1A1AF4E00](v19, 0x1020C4034E03FFCLL);
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = (void *)a1[45];
    }
    a1[46] = v16;
    operator delete(v18);
  }
  v21 = (std::__shared_weak_count *)a1[44];
  if (!v21)
    goto LABEL_39;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (char *)a1[11];
    if (!v24)
      goto LABEL_50;
  }
  else
  {
LABEL_39:
    v24 = (char *)a1[11];
    if (!v24)
      goto LABEL_50;
  }
  v25 = (char *)a1[12];
  v26 = v24;
  if (v25 != v24)
  {
    do
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v25 -= 24;
    }
    while (v25 != v24);
    v26 = (char *)a1[11];
  }
  a1[12] = v24;
  operator delete(v26);
LABEL_50:
  v30 = (std::__shared_weak_count *)a1[10];
  if (!v30)
    goto LABEL_54;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = (std::__shared_weak_count *)a1[8];
    if (!v33)
      goto LABEL_62;
  }
  else
  {
LABEL_54:
    v33 = (std::__shared_weak_count *)a1[8];
    if (!v33)
      goto LABEL_62;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_62:
  v36 = (std::__shared_weak_count *)a1[6];
  if (!v36)
    goto LABEL_66;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v39 = (std::__shared_weak_count *)a1[4];
    if (!v39)
      return;
  }
  else
  {
LABEL_66:
    v39 = (std::__shared_weak_count *)a1[4];
    if (!v39)
      return;
  }
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
}

void md::ARMapEngineConfiguration::~ARMapEngineConfiguration(md::ARMapEngineConfiguration *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42A00C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)this = off_1E429CEB0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42A00C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)this = off_1E429CEB0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ARMapEngineConfiguration::supportsAsyncRender(md::ARMapEngineConfiguration *this)
{
  return 0;
}

md::PassList *md::ARMapEngineConfiguration::createPassList@<X0>(md::FrameGraphResourceRegistry *a1@<X1>, md::PassList **a2@<X8>)
{
  md::PassList *v5;
  md::PassList *result;

  v5 = (md::PassList *)operator new();
  result = md::PassList::PassList(v5, a1);
  *(_QWORD *)v5 = &off_1E428B998;
  *a2 = v5;
  return result;
}

void sub_19F5764F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void md::ARMapEngineConfiguration::createRenderLayers(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD *v7;
  id *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  id v32;
  __int128 *v33;
  char *v34;
  unsigned __int8 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int8x8_t *v98;
  int8x8_t v99;
  uint8x8_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _WORD *v109;
  _WORD *v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  uint64_t v113;
  size_t prime;
  unint64_t v115;
  int8x8_t v116;
  unint64_t v117;
  uint8x8_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  md::ARMeshRenderLayer *v124;
  uint64_t v125;
  ggl::ARCameraImageShader *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  uint64_t v130;
  geo::read_write_lock *v131;
  const char *v132;
  malloc_zone_t *zone;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  malloc_zone_t *v137;
  uint64_t v138;
  geo::read_write_lock *v139;
  const char *v140;
  malloc_zone_t *v141;
  uint64_t v142;
  geo::read_write_lock *v143;
  const char *v144;
  malloc_zone_t *v145;
  unsigned __int8 v146;
  unsigned __int8 v147;
  unsigned __int8 v148;
  _QWORD *v149;
  uint64_t v151;
  id v152;
  VKSharedResources *v153;
  __int16 v154[2];
  char v155;
  _QWORD v156[3];
  _QWORD *v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = operator new(0x20uLL);
  a4[1] = v7 + 2;
  a4[2] = v7 + 2;
  *v7 = 0u;
  v7[1] = 0u;
  *a4 = v7;
  v8 = *(id **)(a3 + 856);
  v9 = *(_QWORD *)(a2 + 1120);
  v10 = *(_QWORD *)(v9 + 16);
  v149 = a4;
  if ((v10 & (v10 - 1)) != 0)
  {
    v12 = 0x3F812BA5755E8568;
    if (v10 <= 0x3F812BA5755E8568)
      v12 = 0x3F812BA5755E8568 % v10;
    v11 = *(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 * v12);
    do
    {
      do
        v11 = (_QWORD *)*v11;
      while (v11[1] != 0x3F812BA5755E8568);
    }
    while (v11[2] != 0x3F812BA5755E8568);
  }
  else
  {
    v11 = *(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 * ((v10 - 1) & 0x3F812BA5755E8568));
    do
    {
      do
        v11 = (_QWORD *)*v11;
      while (v11[1] != 0x3F812BA5755E8568);
    }
    while (v11[2] != 0x3F812BA5755E8568);
  }
  v152 = *(id *)(v11[5] + 128);
  v154[0] = 2048;
  v13 = operator new();
  md::DebugRenderLayer::DebugRenderLayer(v13, (uint64_t)v8, v152, v154, 3);
  v14 = *((_QWORD *)v7 + 3);
  *((_QWORD *)v7 + 3) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = operator new();
  v153 = (VKSharedResources *)v152;
  v16 = operator new(2uLL);
  *v16 = 1024;
  *(_QWORD *)v15 = off_1E428C468;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v17 = operator new(2uLL);
  *(_QWORD *)v15 = off_1E429E2A8;
  *(_QWORD *)(v15 + 8) = v17;
  *v17++ = *v16;
  *(_QWORD *)(v15 + 16) = v17;
  *(_QWORD *)(v15 + 24) = v17;
  *(_WORD *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 34) = 0;
  *(_QWORD *)(v15 + 40) = v8;
  operator delete(v16);
  *(_QWORD *)v15 = &off_1E42A0050;
  *(_OWORD *)(v15 + 48) = 0u;
  v18 = (uint64_t *)(v15 + 48);
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_QWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 120) = 32;
  v19 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  v151 = a2;
  *v19 = 0;
  v19[1] = 0;
  *(_QWORD *)(v15 + 104) = v19;
  *(_QWORD *)(v15 + 112) = v19;
  *(_QWORD *)(v15 + 128) = 0;
  v20 = operator new(0xE8uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_1E42E1280;
  v21 = ggl::BufferData::BufferData((uint64_t)(v20 + 3), qword_1EE551F38, 2, 1, 6, 1);
  v20[28] = ggl::ARCameraImage::Constants::reflection(void)::reflection;
  v20[3] = &off_1E42B8E10;
  v22 = *(std::__shared_weak_count **)(v15 + 88);
  *(_QWORD *)(v15 + 80) = v21;
  *(_QWORD *)(v15 + 88) = v20;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = operator new();
  *(_BYTE *)v25 = 0;
  *(_QWORD *)(v25 + 12) = 0;
  *(_QWORD *)(v25 + 4) = 0;
  *(_BYTE *)(v25 + 20) = 0;
  *(_DWORD *)(v25 + 24) = 1065353216;
  *(_BYTE *)(v25 + 28) = 0;
  *(_DWORD *)(v25 + 32) = 0;
  v26 = *v18;
  *v18 = v25;
  if (v26)
  {
    MEMORY[0x1A1AF4E00](v26, 0x1000C4049ECCB0CLL);
    v25 = *v18;
  }
  *(_BYTE *)v25 = -1;
  *(_OWORD *)(v25 + 4) = xmmword_19FFB34C0;
  v27 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v153, "shaderLibrary", v149) + 80);
  v28 = *(_QWORD *)(v27 + 104);
  v29 = *(std::__shared_weak_count **)(v27 + 112);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v156[0] = 0;
  v32 = v8[13];
  v33 = (__int128 *)objc_msgSend(v32, "format");
  v34 = (char *)operator new(0x198uLL);
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *(_QWORD *)v34 = &off_1E42E3F20;
  v158 = *v33;
  v159 = v33[1];
  if ((v35 & 1) == 0)
  {
    if ((_DWORD)v126)
    {
      if ((v127 & 1) == 0)
      {
        if ((_DWORD)v126)
        {
          if ((v146 & 1) == 0
          {
            if ((v148 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::ARCameraImagePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE588278 = &ggl::pipelineDataARCameraImagePipelineDeviceStructs(void)::ref;
          qword_1EE588280 = 0;
          if ((v147 & 1) == 0
          {
            ggl::pipelineDataARCameraImagePipelineConstantStructs(void)::ref = (uint64_t)ggl::ARCameraImage::Constants::reflection(void)::reflection;
          }
          qword_1EE588288 = (uint64_t)&ggl::pipelineDataARCameraImagePipelineConstantStructs(void)::ref;
          *(int64x2_t *)algn_1EE588290 = vdupq_n_s64(1uLL);
        }
      }
      ggl::ARCameraImagePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARCameraImagePipelineSetup::typedReflection(void)::ref;
      ggl::ARCameraImageShader::typedReflection(v126);
      qword_1EE588220 = (uint64_t)&ggl::ARCameraImageShader::typedReflection(void)::ref;
      if ((v128 & 1) == 0
      {
        ggl::pipelineStateARCameraImagePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5882B0 = 0;
        qword_1EE5882B8 = (uint64_t)"";
        dword_1EE5882C0 = 0;
        qword_1EE5882C8 = (uint64_t)&ggl::pipelineStateARCameraImagePipelineAttributeBinding_0(void)::attr;
        unk_1EE5882D0 = 2;
      }
      qword_1EE588228 = (uint64_t)&ggl::pipelineStateARCameraImagePipelineAttributeStructBinding(void)::attr;
      unk_1EE588230 = 1;
      qword_1EE588238 = 0;
      unk_1EE588240 = 1;
      qword_1EE588248 = (uint64_t)&ggl::pipelineStateARCameraImagePipelineDeviceStructBinding(void)::ref;
      unk_1EE588250 = 0;
      if ((v129 & 1) == 0
      {
        ggl::pipelineStateARCameraImagePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE5882F0 = 0;
        qword_1EE5882F8 = (uint64_t)"cameraImageConstants";
        dword_1EE588300 = 3;
        qword_1EE588308 = (uint64_t)&ggl::pipelineStateARCameraImagePipelineConstantCameraImageConstantsBinding(void)::reflection;
        unk_1EE588310 = 2;
      }
      qword_1EE588258 = (uint64_t)&ggl::pipelineStateARCameraImagePipelineConstantStructBinding(void)::ref;
      unk_1EE588260 = 1;
    }
  }
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    *((_DWORD *)v34 + 14) = 0;
    *((_QWORD *)v34 + 5) = 0;
    *((_QWORD *)v34 + 6) = 0;
    *((_QWORD *)v34 + 3) = &off_1E42B6760;
    *((_QWORD *)v34 + 4) = 0;
    *((_QWORD *)v34 + 8) = &ggl::ARCameraImagePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v34 + 9) = v28;
    *((_QWORD *)v34 + 10) = v29;
    do
      v38 = __ldxr(v36);
    while (__stxr(v38 + 1, v36));
  }
  else
  {
    *((_DWORD *)v34 + 14) = 0;
    *((_QWORD *)v34 + 5) = 0;
    *((_QWORD *)v34 + 6) = 0;
    *((_QWORD *)v34 + 3) = &off_1E42B6760;
    *((_QWORD *)v34 + 4) = 0;
    *((_QWORD *)v34 + 8) = &ggl::ARCameraImagePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v34 + 9) = v28;
    *((_QWORD *)v34 + 10) = 0;
  }
  v34[136] = 0;
  *(_OWORD *)(v34 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v34 + 156) = 0;
  *(_QWORD *)(v34 + 172) = 0;
  *(_QWORD *)(v34 + 164) = 0;
  v34[184] = 0;
  *(_OWORD *)(v34 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v34 + 204) = 0;
  *(_QWORD *)(v34 + 220) = 0;
  *(_QWORD *)(v34 + 212) = 0;
  v34[232] = 0;
  *(_OWORD *)(v34 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v34 + 252) = 0;
  *(_QWORD *)(v34 + 268) = 0;
  *(_QWORD *)(v34 + 260) = 0;
  v39 = v159;
  *(_OWORD *)(v34 + 280) = v158;
  *(_OWORD *)(v34 + 296) = v39;
  v34[312] = 0;
  *((_QWORD *)v34 + 48) = 0;
  *((_OWORD *)v34 + 22) = 0u;
  *((_OWORD *)v34 + 23) = 0u;
  *((_OWORD *)v34 + 20) = 0u;
  *((_OWORD *)v34 + 21) = 0u;
  *((_QWORD *)v34 + 49) = 0x100000001;
  v34[400] = 0;
  v34[88] = 0;
  *(_WORD *)(v34 + 89) = v154[1];
  v34[91] = v155;
  *(_OWORD *)(v34 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v34 + 108) = v156[0];
  *((_DWORD *)v34 + 29) = 0;
  *((_QWORD *)v34 + 15) = 0;
  *((_DWORD *)v34 + 32) = 0;
  v34[132] = 15;
  if (v29)
  {
    v40 = (unint64_t *)&v29->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *((_QWORD *)v34 + 3) = &off_1E42BB4E0;
  v42 = *(std::__shared_weak_count **)(v15 + 64);
  *(_QWORD *)(v15 + 56) = v34 + 24;
  *(_QWORD *)(v15 + 64) = v34;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  if (v29)
  {
    v45 = (unint64_t *)&v29->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v47 = operator new();
  *(_DWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)(v47 + 24) = 0;
  *(_QWORD *)v47 = &off_1E42B5DE8;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 36) = 65537;
  *(_DWORD *)(v47 + 44) = 0;
  *(_QWORD *)(v47 + 48) = 1;
  *(_WORD *)(v47 + 56) = 0;
  *(_BYTE *)(v47 + 58) = 3;
  *(_QWORD *)(v47 + 67) = 0;
  *(_QWORD *)(v47 + 59) = 0;
  *(_BYTE *)(v47 + 75) = 0;
  *(_QWORD *)(v47 + 132) = 0;
  *(_QWORD *)(v47 + 124) = 0;
  *(_WORD *)(v47 + 188) = 257;
  *(_QWORD *)(v47 + 192) = 0;
  *(_QWORD *)(v47 + 200) = 0;
  *(_BYTE *)(v47 + 208) = 0;
  v48 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = v47;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (uint64_t *)operator new();
  *(_QWORD *)&v158 = &off_1E42D1DC8;
  *((_QWORD *)&v158 + 1) = v15;
  *((_QWORD *)&v159 + 1) = &v158;
  v156[0] = &off_1E42D71F0;
  v157 = v156;
  v49[1] = 0;
  v49[2] = 0;
  *v49 = 0;
  {
    v130 = operator new();
    *(_QWORD *)(v130 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v130 + 24) = "GeoGL";
    *(_OWORD *)(v130 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v130 = &off_1E42B5668;
    *(_QWORD *)(v130 + 8) = "GeoGL";
    *(_OWORD *)(v130 + 72) = 0u;
    *(_OWORD *)(v130 + 88) = 0u;
    *(_OWORD *)(v130 + 104) = 0u;
    *(_OWORD *)(v130 + 120) = 0u;
    *(_OWORD *)(v130 + 136) = 0u;
    *(_OWORD *)(v130 + 152) = 0u;
    *(_OWORD *)(v130 + 168) = 0u;
    *(_OWORD *)(v130 + 184) = 0u;
    *(_OWORD *)(v130 + 200) = 0u;
    *(_OWORD *)(v130 + 216) = 0u;
    *(_OWORD *)(v130 + 232) = 0u;
    *(_QWORD *)(v130 + 248) = 0;
    *(_OWORD *)(v130 + 56) = 0u;
    v131 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v130 + 56), 0);
    if ((_DWORD)v131)
      geo::read_write_lock::logFailure(v131, (uint64_t)"initialization", v132);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v130 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v130 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v130;
  }
  v51 = ggl::Allocator::instance(void)::alloc;
  v49[4] = 0;
  v49[3] = v51;
  v49[5] = 0;
  v49[6] = 0;
  {
    v134 = operator new();
    *(_QWORD *)(v134 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v134 + 24) = "GeoGL";
    *(_OWORD *)(v134 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v134 = &off_1E42B5668;
    *(_QWORD *)(v134 + 8) = "GeoGL";
    *(_OWORD *)(v134 + 72) = 0u;
    *(_OWORD *)(v134 + 88) = 0u;
    *(_OWORD *)(v134 + 104) = 0u;
    *(_OWORD *)(v134 + 120) = 0u;
    *(_OWORD *)(v134 + 136) = 0u;
    *(_OWORD *)(v134 + 152) = 0u;
    *(_OWORD *)(v134 + 168) = 0u;
    *(_OWORD *)(v134 + 184) = 0u;
    *(_OWORD *)(v134 + 200) = 0u;
    *(_OWORD *)(v134 + 216) = 0u;
    *(_OWORD *)(v134 + 232) = 0u;
    *(_QWORD *)(v134 + 248) = 0;
    *(_OWORD *)(v134 + 56) = 0u;
    v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
    if ((_DWORD)v135)
      geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
    v137 = malloc_create_zone(0, 0);
    *(_QWORD *)(v134 + 48) = v137;
    malloc_set_zone_name(v137, "GeoGL");
    *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v134;
  }
  v49[7] = ggl::Allocator::instance(void)::alloc;
  v52 = *((_QWORD *)&v159 + 1);
  if (!*((_QWORD *)&v159 + 1))
    goto LABEL_53;
  if (*((__int128 **)&v159 + 1) != &v158)
  {
    v52 = (*(uint64_t (**)(void))(**((_QWORD **)&v159 + 1) + 16))();
LABEL_53:
    v49[11] = v52;
    goto LABEL_55;
  }
  v49[11] = (uint64_t)(v49 + 8);
  (*(void (**)(__int128 *, uint64_t *))(v158 + 24))(&v158, v49 + 8);
LABEL_55:
  v53 = (uint64_t)v157;
  if (!v157)
  {
LABEL_58:
    v49[15] = v53;
    goto LABEL_60;
  }
  if (v157 != v156)
  {
    v53 = (*(uint64_t (**)(void))(*v157 + 16))();
    goto LABEL_58;
  }
  v49[15] = (uint64_t)(v49 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v156[0] + 24))((uint64_t)v156, v49 + 12);
LABEL_60:
  v49[16] = 2000;
  v54 = *v49;
  if ((unint64_t)(v49[2] - *v49) > 0x31F)
    goto LABEL_73;
  v55 = v49[1];
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[3] + 16))(v49[3], 800, 8);
  v57 = v55 - v54;
  v58 = v56 + ((v55 - v54) & 0xFFFFFFFFFFFFFFF8);
  v60 = *v49;
  v59 = v49[1];
  v61 = v59 - *v49;
  if (v59 == *v49)
  {
    v63 = v56 + ((v55 - v54) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_71;
  }
  v62 = v61 - 8;
  if ((unint64_t)(v61 - 8) >= 0x58)
  {
    v63 = v56 + ((v55 - v54) & 0xFFFFFFFFFFFFFFF8);
    if (v59 - (v57 & 0xFFFFFFFFFFFFFFF8) - v56 >= 0x20)
    {
      v64 = v57 >> 3;
      v65 = (v62 >> 3) + 1;
      v66 = (_OWORD *)(v56 + 8 * v64 - 16);
      v67 = (__int128 *)(v59 - 16);
      v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v69 = *v67;
        *(v66 - 1) = *(v67 - 1);
        *v66 = v69;
        v66 -= 2;
        v67 -= 2;
        v68 -= 4;
      }
      while (v68);
      v63 = v58 - 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
      v59 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
      if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_70;
    }
  }
  else
  {
    v63 = v56 + ((v55 - v54) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v70 = *(_QWORD *)(v59 - 8);
    v59 -= 8;
    *(_QWORD *)(v63 - 8) = v70;
    v63 -= 8;
  }
  while (v59 != v60);
LABEL_70:
  v59 = *v49;
LABEL_71:
  *v49 = v63;
  v49[1] = v58;
  v71 = v49[2];
  v49[2] = v56 + 800;
  if (v59)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[3] + 40))(v49[3], v59, v71 - v59);
LABEL_73:
  v72 = v49[4];
  if ((unint64_t)(v49[6] - v72) > 0x31F)
    goto LABEL_86;
  v73 = v49[5];
  v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[7] + 16))(v49[7], 800, 8);
  v75 = v73 - v72;
  v76 = v74 + ((v73 - v72) & 0xFFFFFFFFFFFFFFF8);
  v78 = v49[4];
  v77 = v49[5];
  v79 = v77 - v78;
  if (v77 == v78)
  {
    v81 = v74 + ((v73 - v72) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_84;
  }
  v80 = v79 - 8;
  if ((unint64_t)(v79 - 8) >= 0x58)
  {
    v81 = v74 + ((v73 - v72) & 0xFFFFFFFFFFFFFFF8);
    if (v77 - (v75 & 0xFFFFFFFFFFFFFFF8) - v74 >= 0x20)
    {
      v82 = v75 >> 3;
      v83 = (v80 >> 3) + 1;
      v84 = (_OWORD *)(v74 + 8 * v82 - 16);
      v85 = (__int128 *)(v77 - 16);
      v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v87 = *v85;
        *(v84 - 1) = *(v85 - 1);
        *v84 = v87;
        v84 -= 2;
        v85 -= 2;
        v86 -= 4;
      }
      while (v86);
      v81 = v76 - 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
      v77 -= 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
      if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_83;
    }
  }
  else
  {
    v81 = v74 + ((v73 - v72) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v88 = *(_QWORD *)(v77 - 8);
    v77 -= 8;
    *(_QWORD *)(v81 - 8) = v88;
    v81 -= 8;
  }
  while (v77 != v78);
LABEL_83:
  v77 = v49[4];
LABEL_84:
  v49[4] = v81;
  v49[5] = v76;
  v89 = v49[6];
  v49[6] = v74 + 800;
  if (v77)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[7] + 40))(v49[7], v77, v89 - v77);
LABEL_86:
  v90 = *(_QWORD *)(v15 + 96);
  *(_QWORD *)(v15 + 96) = v49;
  if (v90)
  {
    v91 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v90);
    MEMORY[0x1A1AF4E00](v91, 0x10A0C40D234DDC7);
  }
  v92 = v157;
  if (v157 == v156)
  {
    v93 = 4;
    v92 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_93;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_93:
  v94 = (__int128 *)*((_QWORD *)&v159 + 1);
  if (*((__int128 **)&v159 + 1) == &v158)
  {
    v95 = 4;
    v94 = &v158;
  }
  else
  {
    if (!*((_QWORD *)&v159 + 1))
      goto LABEL_98;
    v95 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v94 + 8 * v95))();
LABEL_98:

  v96 = *(_QWORD *)v7;
  *(_QWORD *)v7 = v15;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = operator new();
  v98 = *(int8x8_t **)(v151 + 1120);
  v99 = v98[2];
  if (v99)
  {
    v100 = (uint8x8_t)vcnt_s8(v99);
    v100.i16[0] = vaddlv_u8(v100);
    if (v100.u32[0] > 1uLL)
    {
      v101 = 0x20A1ED17D78F322BLL;
      if (*(_QWORD *)&v99 <= 0x20A1ED17D78F322BuLL)
        v101 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v99;
    }
    else
    {
      v101 = (*(_QWORD *)&v99 - 1) & 0x20A1ED17D78F322BLL;
    }
    v102 = *(_QWORD **)(*(_QWORD *)&v98[1] + 8 * v101);
    if (v102)
    {
      v103 = (_QWORD *)*v102;
      if (v103)
      {
        if (v100.u32[0] < 2uLL)
        {
          v104 = *(_QWORD *)&v99 - 1;
          while (1)
          {
            v106 = v103[1];
            if (v106 == 0x20A1ED17D78F322BLL)
            {
              if (v103[2] == 0x20A1ED17D78F322BLL)
                goto LABEL_143;
            }
            else if ((v106 & v104) != v101)
            {
              goto LABEL_120;
            }
            v103 = (_QWORD *)*v103;
            if (!v103)
              goto LABEL_120;
          }
        }
        do
        {
          v105 = v103[1];
          if (v105 == 0x20A1ED17D78F322BLL)
          {
            if (v103[2] == 0x20A1ED17D78F322BLL)
            {
LABEL_143:
              v107 = v103[5];
              goto LABEL_121;
            }
          }
          else
          {
            if (v105 >= *(_QWORD *)&v99)
              v105 %= *(_QWORD *)&v99;
            if (v105 != v101)
              break;
          }
          v103 = (_QWORD *)*v103;
        }
        while (v103);
      }
    }
  }
LABEL_120:
  v107 = 0;
LABEL_121:
  v108 = md::LabelsLogic::labelManagerForWorldType(v107, 3u);
  v109 = operator new(2uLL);
  *v109 = 1536;
  *(_QWORD *)v97 = off_1E428C468;
  *(_QWORD *)(v97 + 8) = 0;
  *(_QWORD *)(v97 + 16) = 0;
  *(_QWORD *)(v97 + 24) = 0;
  v110 = operator new(2uLL);
  *(_QWORD *)(v97 + 8) = v110;
  *v110++ = *v109;
  *(_QWORD *)(v97 + 16) = v110;
  *(_QWORD *)(v97 + 24) = v110;
  *(_WORD *)(v97 + 32) = 0;
  *(_BYTE *)(v97 + 34) = 1;
  *(_QWORD *)v97 = off_1E429E2A8;
  *(_QWORD *)(v97 + 40) = v8;
  operator delete(v109);
  *(_QWORD *)(v97 + 48) = 0;
  *(_QWORD *)v97 = &off_1E428C9F8;
  *(_QWORD *)(v97 + 56) = 0;
  {
    v138 = operator new();
    *(_QWORD *)(v138 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v138 + 24) = "VectorKitLabels";
    *(_OWORD *)(v138 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v138 = &off_1E42B5668;
    *(_QWORD *)(v138 + 8) = "VectorKitLabels";
    *(_OWORD *)(v138 + 72) = 0u;
    *(_OWORD *)(v138 + 88) = 0u;
    *(_OWORD *)(v138 + 104) = 0u;
    *(_OWORD *)(v138 + 120) = 0u;
    *(_OWORD *)(v138 + 136) = 0u;
    *(_OWORD *)(v138 + 152) = 0u;
    *(_OWORD *)(v138 + 168) = 0u;
    *(_OWORD *)(v138 + 184) = 0u;
    *(_OWORD *)(v138 + 200) = 0u;
    *(_OWORD *)(v138 + 216) = 0u;
    *(_OWORD *)(v138 + 232) = 0u;
    *(_QWORD *)(v138 + 248) = 0;
    *(_OWORD *)(v138 + 56) = 0u;
    v139 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v138 + 56), 0);
    if ((_DWORD)v139)
      geo::read_write_lock::logFailure(v139, (uint64_t)"initialization", v140);
    v141 = malloc_create_zone(0, 0);
    *(_QWORD *)(v138 + 48) = v141;
    malloc_set_zone_name(v141, "VectorKitLabels");
    *(_QWORD *)(v138 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v138;
  }
  *(_QWORD *)(v97 + 64) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v97 + 72) = 0;
  {
    v142 = operator new();
    *(_QWORD *)(v142 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v142 + 24) = "VectorKitLabels";
    *(_OWORD *)(v142 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v142 = &off_1E42B5668;
    *(_QWORD *)(v142 + 8) = "VectorKitLabels";
    *(_OWORD *)(v142 + 72) = 0u;
    *(_OWORD *)(v142 + 88) = 0u;
    *(_OWORD *)(v142 + 104) = 0u;
    *(_OWORD *)(v142 + 120) = 0u;
    *(_OWORD *)(v142 + 136) = 0u;
    *(_OWORD *)(v142 + 152) = 0u;
    *(_OWORD *)(v142 + 168) = 0u;
    *(_OWORD *)(v142 + 184) = 0u;
    *(_OWORD *)(v142 + 200) = 0u;
    *(_OWORD *)(v142 + 216) = 0u;
    *(_OWORD *)(v142 + 232) = 0u;
    *(_QWORD *)(v142 + 248) = 0;
    *(_OWORD *)(v142 + 56) = 0u;
    v143 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v142 + 56), 0);
    if ((_DWORD)v143)
      geo::read_write_lock::logFailure(v143, (uint64_t)"initialization", v144);
    v145 = malloc_create_zone(0, 0);
    *(_QWORD *)(v142 + 48) = v145;
    malloc_set_zone_name(v145, "VectorKitLabels");
    *(_QWORD *)(v142 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v142;
  }
  v113 = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v97 + 120) = 0u;
  *(_QWORD *)(v97 + 80) = v113;
  *(_QWORD *)(v97 + 88) = 0;
  *(_DWORD *)(v97 + 96) = 1065353216;
  *(_QWORD *)(v97 + 104) = v97 + 104;
  *(_QWORD *)(v97 + 112) = v97 + 104;
  *(_OWORD *)(v97 + 136) = 0u;
  *(_QWORD *)(v97 + 152) = 0;
  *(_DWORD *)(v97 + 160) = 1065353216;
  *(_QWORD *)(v97 + 168) = 0;
  *(_QWORD *)(v97 + 176) = 0;
  prime = std::__next_prime(0x64uLL);
  v115 = prime;
  v116 = *(int8x8_t *)(v97 + 136);
  if (prime > *(_QWORD *)&v116)
    goto LABEL_124;
  if (prime < *(_QWORD *)&v116)
  {
    v117 = vcvtps_u32_f32((float)*(unint64_t *)(v97 + 152) / *(float *)(v97 + 160));
    if (*(_QWORD *)&v116 < 3uLL || (v118 = (uint8x8_t)vcnt_s8(v116), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
    {
      v117 = std::__next_prime(v117);
    }
    else
    {
      v119 = 1 << -(char)__clz(v117 - 1);
      if (v117 >= 2)
        v117 = v119;
    }
    if (v115 <= v117)
      v115 = v117;
    if (v115 < *(_QWORD *)&v116)
LABEL_124:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v97 + 128, v115);
  }
  *(_QWORD *)(v97 + 168) = v97 + 104;
  *(_QWORD *)(v97 + 184) = *(_QWORD *)v108;
  v120 = *((_QWORD *)v108 + 1);
  *(_QWORD *)(v97 + 192) = v120;
  if (v120)
  {
    v121 = (unint64_t *)(v120 + 8);
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v123 = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v97;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = (md::ARMeshRenderLayer *)operator new();
  md::ARMeshRenderLayer::ARMeshRenderLayer(v124, v8, v153, *(gdc::Registry **)(a1 + 56));
  v125 = *((_QWORD *)v7 + 2);
  *((_QWORD *)v7 + 2) = v124;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);

}

void sub_19F57786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void (***v38)(void);
  void (**v39)(void);
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;

  v28 = (_QWORD *)v25[11];
  if (v28 == v26)
  {
    v29 = 4;
  }
  else
  {
    if (!v28)
    {
      v30 = *v22;
      if (*v22)
        goto LABEL_20;
      goto LABEL_5;
    }
    v29 = 5;
    v26 = (_QWORD *)v25[11];
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v29))(v26);
  v30 = *v22;
  if (*v22)
  {
LABEL_20:
    v25[5] = v30;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[7] + 40))(v25[7], v30, v25[6] - v30);
    v31 = *v25;
    if (!*v25)
    {
LABEL_7:
      v32 = a18;
      if (a18 == &a15)
      {
        v33 = 4;
        v32 = &a15;
      }
      else
      {
        if (!a18)
          goto LABEL_12;
        v33 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_12:
      v34 = a22;
      if (a22 == &a19)
      {
        v35 = 4;
        v34 = &a19;
      }
      else
      {
        if (!a22)
        {
LABEL_17:
          MEMORY[0x1A1AF4E00](v25, 0x10A0C40D234DDC7);
          v36 = (_QWORD *)v23[13];
          while (1)
          {
            if (v36[1])
            {
              v37 = 0;
              v38 = (void (***)(void))(v36 + 2);
              do
              {
                v39 = *v38;
                v38 += 15;
                (*v39)();
                ++v37;
              }
              while (v37 < v36[1]);
            }
            v36[1] = 0;
            v36 = (_QWORD *)*v36;
            if (!v36)
            {
              v40 = (_QWORD **)v23[13];
              v23[14] = v40;
              v41 = *v40;
              *v40 = 0;
              if (v41)
              {
                do
                {
                  v42 = (_QWORD *)*v41;
                  free(v41);
                  v41 = v42;
                }
                while (v42);
                v40 = (_QWORD **)v23[13];
              }
              free(v40);
              v43 = v23[12];
              v23[12] = 0;
              if (v43)
              {
                v44 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v43);
                MEMORY[0x1A1AF4E00](v44, 0x10A0C40D234DDC7);
              }
              v45 = (std::__shared_weak_count *)v23[11];
              if (v45)
              {
                p_shared_owners = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(p_shared_owners);
                while (__stlxr(v47 - 1, p_shared_owners));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              v48 = v23[9];
              v23[9] = 0;
              if (v48)
                (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
              v49 = (std::__shared_weak_count *)v23[8];
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = *v24;
              *v24 = 0;
              if (v52)
                MEMORY[0x1A1AF4E00](v52, 0x1000C4049ECCB0CLL);
              *v23 = off_1E428C468;
              v53 = (void *)v23[1];
              if (v53)
              {
                v23[2] = v53;
                operator delete(v53);
              }

              MEMORY[0x1A1AF4E00](v23, 0x10A1C406F996460);
              std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](a9);
              _Unwind_Resume(a1);
            }
          }
        }
        v35 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
      goto LABEL_17;
    }
LABEL_6:
    v25[1] = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[3] + 40))(v25[3], v31, v25[2] - v31);
    goto LABEL_7;
  }
LABEL_5:
  v31 = *v25;
  if (!*v25)
    goto LABEL_7;
  goto LABEL_6;
}

unint64_t md::ARMapEngineConfiguration::destroyRenderLayers(uint64_t a1, uint64_t a2, uint64_t a3, ggl::TextureCube *a4)
{
  return detachEnvironmentTexture(*(ggl::MetalDevice **)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 440), *(gdc::Registry **)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 440), *(gdc::Registry **)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 464), a4);
}

void md::ARMapEngineConfiguration::createMode(uint64_t a1@<X0>, int a2@<W1>, md::InitialMapEngineMode **a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[2];
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  unint64_t v20[3];

  switch(a2)
  {
    case 14:
      v4 = (_QWORD *)(a1 + 40);
      v5 = (_QWORD *)(a1 + 56);
      v6 = operator new();
      md::ARWalkingMapEngineMode::ARWalkingMapEngineMode(v6, v4, v5, 14);
      *(_QWORD *)v6 = &off_1E42A9308;
      *(_OWORD *)(v6 + 616) = 0u;
      **(_BYTE **)(v6 + 608) = 1;
      goto LABEL_8;
    case 15:
      v11 = (_QWORD *)(a1 + 40);
      v12 = (_QWORD *)(a1 + 56);
      v6 = operator new();
      md::ARWalkingMapEngineMode::ARWalkingMapEngineMode(v6, v11, v12, 15);
      *(_QWORD *)v6 = &off_1E42A93B8;
      *(_QWORD *)(v6 + 616) = 0;
      **(_BYTE **)(v6 + 608) = 0;
      v20[0] = 0xEACB5D682A22B993;
      v20[1] = (unint64_t)"md::ARCameraRouteLocationProviderLogic]";
      v20[2] = 38;
      *(_QWORD *)&v17 = 0x2A64A6E0A1B666D6;
      *((_QWORD *)&v17 + 1) = "md::ARCameraRouteLocationProviderContext]";
      v18 = 40;
      v19 = 1;
      v14[0] = &v15;
      v14[1] = 1;
      v15 = xmmword_1E42F8E88;
      v16 = 21;
      v13[0] = v14;
      v13[1] = 0;
      gdc::LogicExecutionGraphBuilder::addLogic(v6 + 232, v20, &v17, 0, (uint64_t)v14, (uint64_t)v13);
      goto LABEL_8;
    case 16:
      v7 = (_QWORD *)(a1 + 40);
      v8 = (_QWORD *)(a1 + 56);
      v6 = operator new();
      md::ARWalkingMapEngineMode::ARWalkingMapEngineMode(v6, v7, v8, 16);
      *(_QWORD *)v6 = &off_1E42A92A8;
      *(_QWORD *)(v6 + 616) = 0;
      goto LABEL_5;
    case 17:
      v9 = (_QWORD *)(a1 + 40);
      v10 = (_QWORD *)(a1 + 56);
      v6 = operator new();
      md::ARWalkingMapEngineMode::ARWalkingMapEngineMode(v6, v9, v10, 17);
      *(_QWORD *)v6 = &off_1E42A9840;
      *(_OWORD *)(v6 + 616) = 0u;
LABEL_5:
      **(_BYTE **)(v6 + 608) = 0;
LABEL_8:
      *a3 = (md::InitialMapEngineMode *)v6;
      break;
    default:
      md::MapEngineConfiguration::createMode(a1, a2, a3);
      break;
  }
}

void sub_19F577FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C40B51D6698);
  _Unwind_Resume(a1);
}

BOOL md::ARMapEngineConfiguration::shouldRebuildCurrentMode(md::ARMapEngineConfiguration *this, md::MapEngine *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  unsigned __int8 v5;
  _BOOL8 v6;

  v2 = *((_QWORD *)a2 + 141);
  v3 = *(_BYTE **)v2;
  v4 = *(_BYTE **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 27)
    {
      v3 += 16;
      if (v3 == v4)
        goto LABEL_7;
    }
  }
  if (v3 == v4)
LABEL_7:
    v5 = 0;
  else
    v5 = v3[8];
  v6 = *((unsigned __int8 *)this + 32) != v5;
  *((_BYTE *)this + 32) = v5;
  return v6;
}

void md::MapEngineConfiguration::~MapEngineConfiguration(md::MapEngineConfiguration *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E429CEB0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<gdc::Registry *,std::shared_ptr<gdc::Registry>::__shared_ptr_default_delete<gdc::Registry,gdc::Registry>,std::allocator<gdc::Registry>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

gdc::Registry *std::__shared_ptr_pointer<gdc::Registry *,std::shared_ptr<gdc::Registry>::__shared_ptr_default_delete<gdc::Registry,gdc::Registry>,std::allocator<gdc::Registry>>::__on_zero_shared(uint64_t a1)
{
  gdc::Registry *result;

  result = *(gdc::Registry **)(a1 + 24);
  if (result)
  {
    gdc::Registry::~Registry(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomClimateStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomClimateStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomClimateStyle>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomStyle>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<ggl::Texture2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E53B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Texture2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E53B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

__int16 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(__int16 *result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;

  v5 = *a2;
  v6 = *a2;
  v7 = (unsigned __int16)*result;
  v8 = *(_DWORD *)(a5 + 40 * *a2 + 32);
  v9 = *(_DWORD *)(a5 + 40 * (unsigned __int16)*result + 32);
  v10 = *a3;
  v11 = *(_DWORD *)(a5 + 40 * *a3 + 32);
  if (v8 < v9)
  {
    if (v11 < v8)
    {
      *result = v10;
LABEL_9:
      *a3 = v7;
      v5 = v7;
      v6 = v7;
      goto LABEL_12;
    }
    *result = v6;
    *a2 = v7;
    v5 = *a3;
    if (*(_DWORD *)(a5 + 40 * *a3 + 32) < v9)
    {
      *a2 = v5;
      goto LABEL_9;
    }
LABEL_11:
    v6 = v5;
    goto LABEL_12;
  }
  if (v11 >= v8)
  {
    v5 = *a3;
    v6 = *a3;
    goto LABEL_12;
  }
  *a2 = v10;
  *a3 = v6;
  v12 = *result;
  if (*(_DWORD *)(a5 + 40 * *a2 + 32) < *(_DWORD *)(a5 + 40 * (unsigned __int16)*result + 32))
  {
    *result = *a2;
    *a2 = v12;
    v5 = *a3;
    goto LABEL_11;
  }
LABEL_12:
  if (*(_DWORD *)(a5 + 40 * *a4 + 32) < *(_DWORD *)(a5 + 40 * v5 + 32))
  {
    *a3 = *a4;
    *a4 = v6;
    v13 = *a2;
    if (*(_DWORD *)(a5 + 40 * *a3 + 32) < *(_DWORD *)(a5 + 40 * *a2 + 32))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *result;
      if (*(_DWORD *)(a5 + 40 * *a2 + 32) < *(_DWORD *)(a5 + 40 * (unsigned __int16)*result + 32))
      {
        *result = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  __int16 *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned int v33;
  unsigned __int16 v34;
  __int16 v35;
  unsigned __int16 v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a1;
      if (*(_DWORD *)(**a3 + 40 * *(a2 - 1) + 32) < *(_DWORD *)(**a3 + 40 * *a1 + 32))
      {
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = **a3;
      v10 = a1[1];
      v11 = *a1;
      v12 = *(_DWORD *)(v9 + 40 * v10 + 32);
      v13 = *(_DWORD *)(v9 + 40 * *a1 + 32);
      v14 = *(a2 - 1);
      v15 = *(_DWORD *)(v9 + 40 * v14 + 32);
      if (v12 >= v13)
      {
        if (v15 < v12)
        {
          a1[1] = v14;
          *(a2 - 1) = v10;
          v36 = *a1;
          if (*(_DWORD *)(v9 + 40 * a1[1] + 32) < *(_DWORD *)(v9 + 40 * *a1 + 32))
          {
            *a1 = a1[1];
            a1[1] = v36;
          }
        }
      }
      else if (v15 >= v12)
      {
        *a1 = v10;
        a1[1] = v11;
        if (*(_DWORD *)(v9 + 40 * *(a2 - 1) + 32) < v13)
        {
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v14;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v26 = a1 + 1;
      v27 = a1 + 2;
      v28 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v29 = a1[3];
      v30 = **a3;
      if (*(_DWORD *)(v30 + 40 * *(a2 - 1) + 32) < *(_DWORD *)(v30 + 40 * v29 + 32))
      {
        *v28 = *(a2 - 1);
        *(a2 - 1) = v29;
        v31 = *v28;
        v32 = *v27;
        v33 = *(_DWORD *)(v30 + 40 * *v28 + 32);
        if (v33 < *(_DWORD *)(v30 + 40 * *v27 + 32))
        {
          *v27 = v31;
          *v28 = v32;
          v34 = *v26;
          if (v33 < *(_DWORD *)(v30 + 40 * *v26 + 32))
          {
            a1[1] = v31;
            a1[2] = v34;
            v35 = *a1;
            if (v33 < *(_DWORD *)(v30 + 40 * *a1 + 32))
            {
              *a1 = v31;
              a1[1] = v35;
            }
          }
        }
      }
      return 1;
    default:
      v17 = a1 + 2;
      v16 = a1[2];
      v18 = a1[1];
      v19 = **a3;
      v20 = *a1;
      v21 = *(_DWORD *)(v19 + 40 * v18 + 32);
      v22 = *(_DWORD *)(v19 + 40 * *a1 + 32);
      v23 = *(_DWORD *)(v19 + 40 * v16 + 32);
      if (v21 >= v22)
      {
        if (v23 >= v21)
          goto LABEL_23;
        a1[1] = v16;
        *v17 = v18;
        v24 = a1;
        v25 = (__int16 *)(a1 + 1);
      }
      else
      {
        v24 = a1;
        v25 = (__int16 *)(a1 + 2);
        if (v23 < v21)
          goto LABEL_22;
        *a1 = v18;
        a1[1] = v20;
        v24 = a1 + 1;
        v25 = (__int16 *)(a1 + 2);
      }
      if (v23 >= v22)
        goto LABEL_23;
LABEL_22:
      *v24 = v16;
      *v25 = v20;
LABEL_23:
      v37 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v38 = 0;
      v39 = 6;
      break;
  }
  while (1)
  {
    v41 = *v37;
    v42 = *v17;
    v43 = *(_DWORD *)(v19 + 40 * *v37 + 32);
    if (v43 < *(_DWORD *)(v19 + 40 * v42 + 32))
    {
      v44 = v39;
      do
      {
        *(unsigned __int16 *)((char *)a1 + v44) = v42;
        v45 = v44 - 2;
        if (v44 == 2)
        {
          v40 = a1;
          goto LABEL_26;
        }
        LOWORD(v42) = *(unsigned __int16 *)((char *)a1 + v44 - 4);
        v44 -= 2;
      }
      while (v43 < *(_DWORD *)(v19 + 40 * (unsigned __int16)v42 + 32));
      v40 = (unsigned __int16 *)((char *)a1 + v45);
LABEL_26:
      *v40 = v41;
      if (++v38 == 8)
        return v37 + 1 == a2;
    }
    v17 = v37;
    v39 += 2;
    if (++v37 == a2)
      return 1;
  }
}

void ggl::CircleMultiStroke::FillPipelineSetup::~FillPipelineSetup(ggl::CircleMultiStroke::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::CircleMultiStroke::FillPipelineSetup::constantDataIsEnabled(ggl::CircleMultiStroke::FillPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

uint64_t ggl::CircleMultiStroke::FillPipelineSetup::textureIsEnabled(ggl::CircleMultiStroke::FillPipelineSetup *this)
{
  return 0;
}

uint64_t ggl::CircleMultiStroke::FillPipelineSetup::FillPipelineSetup(ggl::CircleMultiStroke::FillPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
      unk_1ECE43A80 = 1;
    }
    ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE300A8 = &ggl::CircleMultiStroke::pipelineDataFillPipelineDeviceStructs(void)::ref;
    qword_1ECE300B0 = 0;
    if ((v5 & 1) == 0
    {
      ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::CircleMultiStroke::Style::reflection(void)::reflection;
      unk_1ECE300E0 = ggl::Tile::View::reflection(void)::reflection;
      qword_1ECE300E8 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
      unk_1ECE300F0 = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
    }
    qword_1ECE300B8 = (uint64_t)&ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref;
    unk_1ECE300C0 = xmmword_19FFB3690;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B8B40;
  return result;
}

void md::AttributesTileData::~AttributesTileData(md::AttributesTileData *this)
{
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void karo::graphics::BasicViewNode::~BasicViewNode(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::graphics::BasicViewNode::computeView(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void md::MapStandardLabeler::~MapStandardLabeler(md::MapStandardLabeler *this)
{
  md::MapStandardLabeler::~MapStandardLabeler(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E4294B28;
  *((_QWORD *)this + 1) = &unk_1E4294D18;
  *((_QWORD *)this + 2) = &unk_1E4294D60;
  v2 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 + 72);
      v6 = *(_QWORD *)(v3 + 64);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(_QWORD *)(v3 + 64);
      }
      *(_QWORD *)(v3 + 72) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 88) + 40))(*(_QWORD *)(v3 + 88), v6, *(_QWORD *)(v3 + 80) - v6);
    }
    std::mutex::~mutex((std::mutex *)v3);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v9)
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  md::StandardLabeler::~StandardLabeler(this);
}

uint64_t md::MapStandardLabeler::render(md::MapStandardLabeler *this, const md::LayoutContext *a2, md::LabelRenderModel *a3, __n128 a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (***v10)(_QWORD);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  md::MapStandardLabeler *v31;

  md::StandardLabeler::render((uint64_t)this, a2, a3, a4);
  v7 = **(uint64_t ***)(*((_QWORD *)this + 3) + 112);
  if (v7 != *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 3) + 112) + 8) && *v7 != 0xD369A4D92C8FFE6CLL)
  {
    v8 = v7 + 5;
    do
    {
      v9 = *v8;
      v8 += 5;
    }
    while (v9 != 0xD369A4D92C8FFE6CLL);
    v7 = v8 - 5;
  }
  v10 = (uint64_t (***)(_QWORD))v7[3];
  v11 = (std::__shared_weak_count *)v7[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result = (**v10)(v10);
  v16 = result;
  v17 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 3391));
  if ((v17 & 1) != 0)
  {
    result = *(_QWORD *)(*((_QWORD *)this + 50) + 32);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t, char *, const md::LayoutContext *, uint64_t))(*(_QWORD *)result + 16))(result, (char *)a3 + 8, a2, v16);
      *((_BYTE *)this + 369) = 0;
    }
  }
  else if (*((_BYTE *)this + 369))
  {
    *((_BYTE *)this + 369) = 0;
    result = *(_QWORD *)(*((_QWORD *)this + 50) + 32);
    if (result)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, v16);
    }
    else
    {
      v18 = *(unsigned __int8 **)(*((_QWORD *)this + 3) + 232);
      if (v18[106])
      {
        v19 = *(_QWORD **)(v16 + 8);
        v20 = v19[3];
        v21 = v19[4];
        v22 = v21 - v20;
        if (v21 == v20)
          goto LABEL_26;
        v23 = 0;
        v24 = v22 >> 3;
        while (1)
        {
          v25 = *(unsigned __int8 **)(v20 + 8 * v23);
          if (*v25 == v18[104])
          {
            v26 = *((_QWORD *)v25 + 1);
            v27 = v19[15];
            if (v26 < (v19[16] - v27) >> 3)
              break;
          }
          if (++v23 >= v24)
            goto LABEL_26;
        }
        v28 = *(_QWORD *)(v27 + 8 * v26);
        if (!v28)
LABEL_26:
          v29 = 0;
        else
          v29 = *(_QWORD **)(*(_QWORD *)(v28 + 24) + 8 * v18[105]);
        v30 = v29[9];
        if (v29[10] != v30)
          v29[10] = v30;
        v29[4] = 0;
      }
      else
      {
        v31 = (md::MapStandardLabeler *)std::__throw_bad_optional_access[abi:nn180100]();
        return md::MapStandardLabeler::updateOcclusionQueries(v31);
      }
    }
  }
  return result;
}

void md::MapStandardLabeler::updateOcclusionQueries(md::MapStandardLabeler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  const double *v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  const double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float v45;
  uint64_t v46;
  int v47;
  double v48;
  double v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  float64x2x2_t v59;
  float64x2x2_t v60;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 432);
  v4 = *(_QWORD *)(v3 + 1232);
  if (*(_BYTE *)(v2 + 3348))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5 || (v6 = *(_QWORD *)(v4 + 272)) == 0)
  {
    v14 = *((_QWORD *)this + 9);
    v15 = *((_QWORD *)this + 10);
    if (v14 != v15)
    {
      v16 = 0;
      v17 = 0;
      if (*(float *)(v3 + 424) > 15.0)
      {
        do
        {
          v18 = *(_BYTE **)v14;
          if (*(_BYTE *)(*(_QWORD *)v14 + 482))
          {
            if (v18[1217])
            {
              md::Label::submitOcclusionQuery((uint64_t)v18, *(_QWORD *)(*((_QWORD *)this + 3) + 360), *(_QWORD *)(*((_QWORD *)this + 3) + 432), v18[1217]);
              v17 = 1;
            }
            else
            {
              v18[485] = 2;
              v18[480] = 0;
              v18[482] = 0;
              v16 = 1;
              v18[1284] = 0;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
      else
      {
        do
        {
          v19 = *(_BYTE **)v14;
          if (*(_BYTE *)(*(_QWORD *)v14 + 482))
          {
            v20 = v19[1217];
            if (v20 < 2)
            {
              v19[485] = 2;
              v19[480] = 0;
              v19[482] = 0;
              v16 = 1;
              v19[1284] = 0;
            }
            else
            {
              md::Label::submitOcclusionQuery((uint64_t)v19, *(_QWORD *)(*((_QWORD *)this + 3) + 360), *(_QWORD *)(*((_QWORD *)this + 3) + 432), v20);
              v17 = 1;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
LABEL_54:
      if ((v16 & 1) != 0 && (v17 & 1) == 0)
      {
        v52 = *((_QWORD *)this + 3);
        *(_BYTE *)(v52 + 3045) = 1;
        *(_BYTE *)(v52 + 3047) = 1;
        v53 = atomic_load((unsigned __int8 *)(v52 + 3048));
        if ((v53 & 1) == 0)
        {
          v54 = atomic_load((unsigned __int8 *)(v52 + 3058));
          if ((v54 & 1) != 0)
          {
            v55 = *(_QWORD *)(v52 + 136);
            if (v55)
            {
              v56 = *(_QWORD *)(v55 + 56);
              if (v56)
              {
                v58 = v52;
                v57 = 9;
                (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v56 + 48))(v56, &v58, &v57);
              }
            }
          }
        }
      }
    }
    return;
  }
  v7 = *(char **)(v6 + 64);
  v8 = *(char **)(v6 + 72);
  if (v7 == v8)
  {
    v12 = 1.79769313e308;
    v13 = -1.79769313e308;
    v10 = 1.79769313e308;
    v11 = -1.79769313e308;
  }
  else
  {
    v9 = v8 - v7 - 16;
    if (v9 >= 0x30)
    {
      v21 = (v9 >> 4) + 1;
      v22 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v23 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v24 = (const double *)(v7 + 32);
      v25 = v21 & 0x1FFFFFFFFFFFFFFCLL;
      v26 = v23;
      v27 = v22;
      v28 = v22;
      v29 = v22;
      v30 = v23;
      v31 = v23;
      do
      {
        v32 = v24 - 4;
        v59 = vld2q_f64(v32);
        v60 = vld2q_f64(v24);
        v22 = vminnmq_f64(v59.val[0], v22);
        v27 = vminnmq_f64(v60.val[0], v27);
        v30 = vmaxnmq_f64(v30, v59.val[0]);
        v31 = vmaxnmq_f64(v31, v60.val[0]);
        v28 = vminnmq_f64(v59.val[1], v28);
        v29 = vminnmq_f64(v60.val[1], v29);
        v23 = vmaxnmq_f64(v23, v59.val[1]);
        v26 = vmaxnmq_f64(v26, v60.val[1]);
        v24 += 8;
        v25 -= 4;
      }
      while (v25);
      v13 = vmaxnmvq_f64(vmaxnmq_f64(v30, v31));
      v12 = vminnmvq_f64(vminnmq_f64(v28, v29));
      v10 = vminnmvq_f64(vminnmq_f64(v22, v27));
      v11 = vmaxnmvq_f64(vmaxnmq_f64(v23, v26));
      if (v21 == (v21 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_28;
      v7 += 16 * (v21 & 0x1FFFFFFFFFFFFFFCLL);
    }
    else
    {
      v10 = 1.79769313e308;
      v11 = -1.79769313e308;
      v12 = 1.79769313e308;
      v13 = -1.79769313e308;
    }
    do
    {
      v33 = *(double *)v7;
      v34 = *((double *)v7 + 1);
      v7 += 16;
      v10 = fmin(v33, v10);
      v13 = fmax(v13, v33);
      v12 = fmin(v34, v12);
      v11 = fmax(v11, v34);
    }
    while (v7 != v8);
  }
LABEL_28:
  v35 = v13 - v10;
  v36 = v11 - v12;
  if (v35 >= 0.0)
    v37 = v35 * 1.20000005;
  else
    v37 = 0.0;
  if (v36 >= 0.0)
    v38 = v36 * 1.20000005;
  else
    v38 = 0.0;
  v39 = (uint64_t *)*((_QWORD *)this + 9);
  v40 = (uint64_t *)*((_QWORD *)this + 10);
  if (v39 != v40)
  {
    v16 = 0;
    v17 = 0;
    v41 = v10 + (v35 - v37) * 0.5;
    v42 = v12 + (v36 - v38) * 0.5;
    v43 = v41 + v37;
    v44 = v42 + v38;
    v45 = *(float *)(v3 + 424);
    while (1)
    {
      v46 = *v39;
      if (*(_BYTE *)(*v39 + 482))
      {
        v47 = *(unsigned __int8 *)(v46 + 1217);
        if (*(_BYTE *)(v46 + 1217))
        {
          if (v47 != 1)
            goto LABEL_45;
          if (*(unsigned __int8 *)(v46 + 1210) - 2 < 8 && (v48 = *(double *)(v46 + 592), v48 >= v41))
          {
            v49 = *(double *)(v46 + 600);
            v50 = v48 < v43;
            if (v49 < v42)
              v50 = 0;
            v51 = v50 && v49 < v44;
            if (v51)
              LOBYTE(v47) = 2;
            else
              LOBYTE(v47) = 1;
            if (v51 || v45 > 15.0)
              goto LABEL_45;
          }
          else if (v45 > 15.0)
          {
            LOBYTE(v47) = 1;
LABEL_45:
            md::Label::submitOcclusionQuery(v46, *(_QWORD *)(*((_QWORD *)this + 3) + 360), *(_QWORD *)(*((_QWORD *)this + 3) + 432), v47);
            v17 = 1;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(v46 + 485) = 2;
        *(_BYTE *)(v46 + 480) = 0;
        *(_BYTE *)(v46 + 482) = 0;
        v16 = 1;
        *(_BYTE *)(v46 + 1284) = 0;
      }
LABEL_37:
      v39 += 2;
      if (v39 == v40)
        goto LABEL_54;
    }
  }
}

void md::MapStandardLabeler::debugDraw(float **this, NSMutableString *a2, md::DebugConsole *a3)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21[2];
  float v22;
  float v23;
  uint64_t v24;

  md::StandardLabeler::debugDraw((md::StandardLabeler *)this, a2, a3);
  if (*((_BYTE *)this + 452) && this[55])
  {
    *((_DWORD *)a3 + 24) = -16776961;
    v5 = this[55];
    v6 = v5[6];
    v7 = v5[2];
    if (v6 == 1.0)
    {
      v16 = v5[3];
    }
    else
    {
      v8 = v5[7];
      v9 = fabsf(v7 * v6);
      v10 = fabsf(v8 * v7);
      v11 = v5[3];
      v12 = -(float)(v8 * v11);
      v13 = v11 * v6;
      v14 = fabsf(v12);
      v15 = fabsf(v13);
      v7 = v14 + v9;
      v16 = v15 + v10;
    }
    v17 = v5[4];
    v18 = v5[5];
    v19 = v17 + v7;
    v21[0] = v17 + v7;
    v21[1] = v18 + v16;
    *((float *)a3 + 2) = v17 - v7;
    *((float *)a3 + 3) = v18 - v16;
    v24 = *((_QWORD *)a3 + 1);
    v20 = v24;
    *((float *)a3 + 2) = v17 + v7;
    *((float *)a3 + 3) = v18 + v16;
    v22 = *(float *)&v20;
    v23 = v18 + v16;
    ggl::DebugConsole::drawLine((uint64_t)a3, &v22);
    ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v24);
    v22 = v19;
    v23 = *((float *)&v20 + 1);
    ggl::DebugConsole::drawLine((uint64_t)a3, &v22);
    ggl::DebugConsole::drawLine((uint64_t)a3, v21);
  }
}

void md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[128];
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v23 = a2;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v23, "count"));
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = v23;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v8, "uniqueIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          objc_msgSend(v8, "uniqueIdentifier");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "length") == 0;

          if (!v11)
          {
            v12 = v3;
            objc_msgSend(v8, "uniqueIdentifier");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "addObject:", v13);

          }
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v5);
  }

  v14 = *(_QWORD *)(a1 + 48);
  v15 = v4;
  v16 = v3;
  v29 = 0;
  v17 = operator new(0x38uLL);
  *v17 = &off_1E42CEFA8;
  v17[1] = &off_1E42B53F0;
  v17[2] = v15;
  v17[4] = &off_1E42B4A90;
  v17[5] = v16;
  v29 = v17;
  v18 = std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::__clone((uint64_t)v17);
  v32 = v18;
  if ((_BYTE *)(v14 + 640) != v31)
  {
    v19 = *(_BYTE **)(v14 + 664);
    if (v19 == (_BYTE *)(v14 + 640))
    {
      v18 = v31;
      (*(void (**)(void))(*(_QWORD *)(v14 + 640) + 24))();
      (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 664) + 32))(*(_QWORD *)(v14 + 664));
      *(_QWORD *)(v14 + 664) = v32;
      v32 = v31;
      v20 = 4;
      goto LABEL_19;
    }
    v32 = *(_BYTE **)(v14 + 664);
    *(_QWORD *)(v14 + 664) = v18;
    v18 = v19;
  }
  if (v18 == v31)
  {
    v20 = 4;
    v18 = v31;
  }
  else
  {
    if (!v18)
      goto LABEL_20;
    v20 = 5;
  }
LABEL_19:
  (*(void (**)(_BYTE *))(*(_QWORD *)v18 + 8 * v20))(v18);
LABEL_20:
  *(_BYTE *)(v14 + 758) = 1;
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
    goto LABEL_24;
  }
  if (v29)
  {
    v22 = 5;
LABEL_24:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  *(_BYTE *)(a1 + 372) = 1;

}

void sub_19F579490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  void *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == &a19)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t md::MapStandardLabeler::transitSupport(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 49);
}

uint64_t md::MapStandardLabeler::externalObjectsModerator(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t md::MapStandardLabeler::externalMeshModerator(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 52);
}

uint64_t md::StandardLabeler::customFeatureSupport(md::StandardLabeler *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t md::MapStandardLabeler::trafficTilePool(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 54);
}

uint64_t md::MapStandardLabeler::isTransitNodeAlongSelectedLine(md::MapStandardLabeler *this, unint64_t a2)
{
  uint64_t v2;
  _QWORD *i;
  unint64_t v4;
  _QWORD *j;
  unint64_t v7;

  v2 = *((_QWORD *)this + 50);
  if (*(_BYTE *)(v2 + 433))
  {
    for (i = *(_QWORD **)(v2 + 168); i; i = (_QWORD *)*i)
    {
      v4 = i[4];
      if (v4 <= a2)
      {
        if (v4 >= a2)
          return 1;
        ++i;
      }
    }
  }
  else
  {
    for (j = *(_QWORD **)(v2 + 136); j; j = (_QWORD *)*j)
    {
      v7 = j[4];
      if (v7 <= a2)
      {
        if (v7 >= a2)
          return 1;
        ++j;
      }
    }
  }
  return 0;
}

uint64_t md::MapStandardLabeler::displayStyleDidChange(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;

  v1 = *(_QWORD *)(this + 392);
  if (*(_QWORD *)(v1 + 408))
  {
    v2 = *(_QWORD **)(v1 + 392);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 400) + 40))(*(_QWORD *)(v1 + 400));
        v2 = v3;
      }
      while (v3);
    }
    *(_QWORD *)(v1 + 392) = 0;
    v4 = *(_QWORD *)(v1 + 376);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)(v1 + 368) + 8 * i) = 0;
    }
    *(_QWORD *)(v1 + 408) = 0;
  }
  return this;
}

void md::MapStandardLabeler::mapTypeDidChange(md::MapStandardLabeler *this)
{
  _BOOL4 v1;
  unsigned __int8 v2;
  md::LabelTransitSupport *v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(*((_QWORD *)this + 49) + 113) != 0;
  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 3391));
  if (v1 != (v2 & 1))
  {
    *((_BYTE *)this + 369) = 1;
    v3 = (md::LabelTransitSupport *)*((_QWORD *)this + 49);
    v4 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 3391));
    md::LabelTransitSupport::setInTransitMode(v3, v4 & 1);
  }
}

void `non-virtual thunk to'md::MapStandardLabeler::mapTypeDidChange(md::MapStandardLabeler *this)
{
  _BOOL4 v1;
  unsigned __int8 v2;
  md::LabelTransitSupport *v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(*((_QWORD *)this + 48) + 113) != 0;
  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 2) + 3391));
  if (v1 != (v2 & 1))
  {
    *((_BYTE *)this + 361) = 1;
    v3 = (md::LabelTransitSupport *)*((_QWORD *)this + 48);
    v4 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 2) + 3391));
    md::LabelTransitSupport::setInTransitMode(v3, v4 & 1);
  }
}

void `non-virtual thunk to'md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(uint64_t a1, void *a2)
{
  md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(a1 - 16, a2);
}

uint64_t `non-virtual thunk to'md::MapStandardLabeler::externalMeshModerator(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t `non-virtual thunk to'md::MapStandardLabeler::trafficTilePool(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 52);
}

uint64_t `non-virtual thunk to'md::MapStandardLabeler::isTransitNodeAlongSelectedLine(md::MapStandardLabeler *this, unint64_t a2)
{
  uint64_t v2;
  _QWORD *i;
  unint64_t v4;
  _QWORD *j;
  unint64_t v7;

  v2 = *((_QWORD *)this + 48);
  if (*(_BYTE *)(v2 + 433))
  {
    for (i = *(_QWORD **)(v2 + 168); i; i = (_QWORD *)*i)
    {
      v4 = i[4];
      if (v4 <= a2)
      {
        if (v4 >= a2)
          return 1;
        ++i;
      }
    }
  }
  else
  {
    for (j = *(_QWORD **)(v2 + 136); j; j = (_QWORD *)*j)
    {
      v7 = j[4];
      if (v7 <= a2)
      {
        if (v7 >= a2)
          return 1;
        ++j;
      }
    }
  }
  return 0;
}

uint64_t geo::_retain_ptr<NSMutableSet<NSString *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A90;

  return a1;
}

void geo::_retain_ptr<NSMutableSet<NSString *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A90;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CEFA8;
  *(_QWORD *)(a1 + 32) = &off_1E42B4A90;

  *(_QWORD *)(a1 + 8) = &off_1E42B53F0;
  return a1;
}

void std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CEFA8;
  *(_QWORD *)(a1 + 32) = &off_1E42B4A90;

  *(_QWORD *)(a1 + 8) = &off_1E42B53F0;
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_1E42CEFA8;
  std::__compressed_pair_elem<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CEFA8;
  return std::__compressed_pair_elem<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E42B4A90;

  *(_QWORD *)(a1 + 8) = &off_1E42B53F0;
}

void std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E42B4A90;

  *(_QWORD *)(a1 + 8) = &off_1E42B53F0;
  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::operator()(uint64_t a1, void **a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  v2 = *a2;
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v2, "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "containsObject:", v4);

  return v5;
}

void sub_19F5799EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__compressed_pair_elem<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;

  *a1 = &off_1E42B53F0;
  a1[1] = 0;
  v4 = *(id *)(a2 + 8);
  v5 = (void *)a1[1];
  a1[1] = v4;

  a1[3] = &off_1E42B4A90;
  a1[4] = 0;
  v6 = *(id *)(a2 + 32);
  v7 = (void *)a1[4];
  a1[4] = v6;

  return a1;
}

void UserAnnotationCollidableItem::~UserAnnotationCollidableItem(UserAnnotationCollidableItem *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t UserAnnotationCollidableItem::collidesWithObject(UserAnnotationCollidableItem *this, const md::CollisionObject *a2)
{
  return 1;
}

uint64_t md::LabelCollidableItem::isHighlighted(md::LabelCollidableItem *this)
{
  return 0;
}

uint64_t md::LabelCollidableItem::isAlwaysVisible(md::LabelCollidableItem *this)
{
  return 0;
}

uint64_t md::LabelCollidableItem::isCollidable(md::LabelCollidableItem *this)
{
  return 1;
}

void md::LabelCollidableItem::orientation(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v4);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 24) - v8);
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::LabelExternalObjectsModerator *,std::shared_ptr<md::LabelExternalObjectsModerator>::__shared_ptr_default_delete<md::LabelExternalObjectsModerator,md::LabelExternalObjectsModerator>,std::allocator<md::LabelExternalObjectsModerator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::LabelExternalObjectsModerator *std::__shared_ptr_pointer<md::LabelExternalObjectsModerator *,std::shared_ptr<md::LabelExternalObjectsModerator>::__shared_ptr_default_delete<md::LabelExternalObjectsModerator,md::LabelExternalObjectsModerator>,std::allocator<md::LabelExternalObjectsModerator>>::__on_zero_shared(uint64_t a1)
{
  md::LabelExternalObjectsModerator *result;

  result = *(md::LabelExternalObjectsModerator **)(a1 + 24);
  if (result)
  {
    md::LabelExternalObjectsModerator::~LabelExternalObjectsModerator(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void sub_19F57A4A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57A50C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57A51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57A538()
{
  JUMPOUT(0x19F57A568);
}

void sub_19F57A540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57A55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19F57A914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,id location)
{
  void *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19F57AA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F57AD48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57B07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_19F57B4DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_19F57B870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F57BA80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57BB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57BDB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57BE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F57BEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F57C304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F57C484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57C508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57C840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,id location)
{
  void *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19F57C980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57CAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57CE50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F57D03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19F57D1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F57D9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F57DC84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F57DF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, id a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,__int16 *a21)
{
  void *v21;
  void *v22;
  __int16 *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == &a16)
  {
    v25 = 4;
    v24 = &a16;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19F5801D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id location,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62,char a63)
{
  uint64_t a66;
  char a67;
  _QWORD *v68;
  uint64_t v69;

  if (a67)
  {
    v68 = (_QWORD *)a66;
    if ((char *)a66 == &a63)
    {
      v69 = 4;
      v68 = &a63;
    }
    else
    {
      if (!a66)
        goto LABEL_7;
      v69 = 5;
    }
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
LABEL_7:
  objc_destroyWeak(&location);
  objc_destroyWeak(&a62);

  _Unwind_Resume(a1);
}

void sub_19F580A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  id *v23;
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak((id *)(v25 - 112));

  _Unwind_Resume(a1);
}

void sub_19F580F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19F5814E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F581568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

void sub_19F581E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F58256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14)
{
  void *v14;
  char *v16;
  uint64_t v17;

  if (a14)
  {
    v16 = a13;
    if (a13 == &a10)
    {
      v17 = 4;
      v16 = &a10;
    }
    else
    {
      if (!a13)
        goto LABEL_7;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  }
LABEL_7:

  _Unwind_Resume(a1);
}

void sub_19F5826E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZZ86__VKMapCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__3clE18VKFlyoverTourState_block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(unsigned int *)(a1 + 48));
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v4 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(unsigned int *)(a1 + 48);
        if (v5 > 6)
          v6 = &stru_1E4315B30;
        else
          v6 = (const __CFString *)*((_QWORD *)&off_1E42ED4A0 + v5);
        v7 = 138412290;
        v8 = v6;
        _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Flyover Tour: state change: %@", (uint8_t *)&v7, 0xCu);
      }

    }
  }

}

void sub_19F5834D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZZ86__VKMapCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__2clERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  id v2;
  uint64_t *v3;
  void *v4;
  NSObject *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(a1 + 32);
  if (v2 && *(_QWORD *)(a1 + 40))
  {
    v3 = *(uint64_t **)(a1 + 48);
    if (*((char *)v3 + 23) < 0)
      v3 = (uint64_t *)*v3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v5 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 138412290;
      v7 = v4;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_INFO, "Flyover Tour: label change: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_19F58387C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::VKFlyoverTour>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E4289F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::VKFlyoverTour>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E4289F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_emplace<md::VKFlyoverTour>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  md::AnimationData **v9;
  md::AnimationData *v10;
  uint64_t v11;

  v2 = a1 + 31;
  v3 = (_QWORD *)a1[34];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[30];
  if (v5 == a1 + 27)
  {
    v6 = 4;
    v5 = a1 + 27;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = (_QWORD *)a1[26];
  if (result == a1 + 23)
  {
    v8 = 4;
    result = a1 + 23;
  }
  else
  {
    if (!result)
      goto LABEL_16;
    v8 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_16:
  v9 = (md::AnimationData **)a1[4];
  a1[4] = 0;
  if (v9)
  {
    v10 = *v9;
    *v9 = 0;
    if (v10)
    {
      md::AnimationData::~AnimationData(v10);
      MEMORY[0x1A1AF4E00]();
    }
    result = (_QWORD *)MEMORY[0x1A1AF4E00](v9, 0x1020C40F7B62AD5);
  }
  v11 = a1[3];
  a1[3] = 0;
  if (v11)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v11 + 8));
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void ___ZZ91__VKMapCameraController_startFlyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__1clEPK12GEOPDFlyover_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(WeakRetained, "flyoverTourAnimation:animateToStart:labelChanged:stateChange:", v4, *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, 6);
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v6 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v7 = 0;
          _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, "Flyover Tour: failed to load", v7, 2u);
        }

      }
    }
  }

}

void sub_19F583E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_128c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE184c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE240c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE296c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v2 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v2;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  result = *(double *)(a2 + 344);
  *(double *)(a1 + 344) = result;
  return result;
}

void sub_19F5841DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F584298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5843A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F584508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5845BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c24_ZTSN2gm10QuaternionIdEE(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  double result;

  v2 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

void sub_19F584674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F584758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F584818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F584888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F58499C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F584A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE96c24_ZTSN2gm10QuaternionIdEE(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  double result;

  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v2 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v2;
    *(_BYTE *)(a1 + 40) = 1;
  }
  v3 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v3;
  result = *(double *)(a2 + 120);
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE96(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    *(_BYTE *)(result + 40) = 0;
  return result;
}

void sub_19F584B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F584C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL15_southKoreaRectv_block_invoke()
{
  _southKoreaRect(void)::koreaRect = 0x3FEB1C71C71C71C7;
  _southKoreaRect(void)::koreaRect = 0x3FE3378DDC9A7115;
  _southKoreaRect(void)::koreaRect = 0x3FEB8E38E38E38E4;
  _southKoreaRect(void)::koreaRect = 0x3FE3BDE17FAB3362;
}

uint64_t ggl::crc32::compute<18ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  return ggl::crc32::crc32Table[v14 ^ a1[16]] ^ ~(v14 >> 8);
}

uint64_t ggl::VertexDataTyped<ggl::Stars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Stars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Stars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::Stars::StarsMesh::~StarsMesh(ggl::Stars::StarsMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Stars::StarsMesh::~StarsMesh(ggl::Stars::StarsMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Stars::StarsMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Stars::StarsMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Stars::StarVertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Stars::StarVertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Stars::StarsPipelineState::~StarsPipelineState(ggl::Stars::StarsPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Stars::StarsPipelineSetup::~StarsPipelineSetup(ggl::Stars::StarsPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Stars::StarsPipelineSetup::constantDataIsEnabled(ggl::Stars::StarsPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::Stars::StarsPipelineSetup::textureIsEnabled(ggl::Stars::StarsPipelineSetup *this)
{
  return 0;
}

md::RoadSharedResources **std::unique_ptr<md::RoadSharedResources>::~unique_ptr[abi:nn180100](md::RoadSharedResources **a1)
{
  md::RoadSharedResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::RoadSharedResources::~RoadSharedResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::PatternedSharedResources **std::unique_ptr<md::PatternedSharedResources>::~unique_ptr[abi:nn180100](md::PatternedSharedResources **a1)
{
  md::PatternedSharedResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::MultiSizeIconLabelPart::~MultiSizeIconLabelPart(md::MultiSizeIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::MultiSizeIconLabelPart::~MultiSizeIconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::MultiSizeIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, this, 944);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E429CFD8;
  v2 = *((_QWORD *)this + 109);
  if (v2)
  {
    v3 = *((_QWORD *)this + 110);
    v4 = *((_QWORD *)this + 109);
    if (v3 != v2)
    {
      do
      {
        free(*(void **)(v3 - 48));
        free(*(void **)(v3 - 40));
        free(*(void **)(v3 - 24));
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 109);
    }
    *((_QWORD *)this + 110) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 112) + 40))(*((_QWORD *)this + 112), v4, *((_QWORD *)this + 111) - v4);
  }
  v5 = *((_QWORD *)this + 105);
  if (v5)
  {
    v6 = *((_QWORD *)this + 106);
    v7 = *((_QWORD *)this + 105);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *((_QWORD *)this + 105);
    }
    *((_QWORD *)this + 106) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 108) + 40))(*((_QWORD *)this + 108), v7, *((_QWORD *)this + 107) - v7);
  }
  *(_QWORD *)this = off_1E42956E8;
  v11 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
}

float md::MultiSizeIconLabelPart::updateWithStyle(md::LabelStyle ***this, md::LabelManager *a2)
{
  float result;
  md::LabelStyle **v5;
  md::LabelStyle **v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  md::LabelStyle *v10;
  uint64_t v11;
  uint64_t v12;

  md::ImageLabelPart::updateWithStyle((md::ImageLabelPart *)this, a2);
  v5 = this[104];
  if (v5)
    (*((void (**)(md::LabelStyle **, md::LabelManager *))*v5 + 9))(v5, a2);
  if ((unint64_t)((char *)this[106] - (char *)this[105]) >= 0x11)
  {
    v6 = this[4];
    v7 = 1;
    v8 = 916;
    do
    {
      v9 = (float *)((char *)this + v8);
      v10 = *v6;
      if (v7 - 1 >= *((unsigned __int8 *)*v6 + 126))
        goto LABEL_5;
      if (!*((_BYTE *)v10 + 457))
        md::LabelStyle::prepareAlternateStyles(*v6);
      if (*((_BYTE *)v10 + v8 - 556))
      {
        v11 = *(_QWORD *)((char *)v10 + v8 - 548);
        *((_BYTE *)this + v8) = *(_BYTE *)(v11 + 95);
        v12 = *(_QWORD *)(v11 + 8);
        result = *(float *)(v11 + 16);
        *(v9 - 1) = result;
        *(_QWORD *)(v9 - 3) = v12;
      }
      else
      {
LABEL_5:
        *(v9 - 1) = 1.0;
        *(_QWORD *)(v9 - 3) = 0;
        *((_BYTE *)this + v8) = 0;
      }
      ++v7;
      v8 += 16;
    }
    while (v7 < ((char *)this[106] - (char *)this[105]) >> 4);
  }
  if (*((_BYTE *)this + 936))
  {
    result = *(float *)&this[2 * *((unsigned __int8 *)this + 936) + 112];
    *((float *)this + 144) = result;
  }
  return result;
}

uint64_t md::MultiSizeIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t result;
  int32x2_t v9;
  float32x2_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float32x2_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int8 v23;
  int32x2_t *v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  char v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  if ((_DWORD)result == 37)
  {
    if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 880))
    {
      v15 = *(_QWORD *)(a1 + 848) - *(_QWORD *)(a1 + 840);
      if (v15)
      {
        std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a1 + 872), v15 >> 4);
        v16 = *(_QWORD *)(a1 + 840);
        if (*(_QWORD *)(a1 + 848) != v16)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          do
          {
            md::IconLabelPart::prepareCollisionObject(a1, 0, (_QWORD *)(v16 + v17), *(_QWORD *)(a1 + 872) + v18);
            ++v19;
            v16 = *(_QWORD *)(a1 + 840);
            v18 += 208;
            v17 += 16;
          }
          while (v19 < (*(_QWORD *)(a1 + 848) - v16) >> 4);
        }
      }
    }
    if (*(_BYTE *)(a1 + 628))
    {
      v11 = *(uint64_t **)(a1 + 840);
      if (*(uint64_t **)(a1 + 848) != v11)
      {
        v12 = *v11;
        v13 = atomic_load((unsigned __int8 *)(v12 + 144));
        v14 = (v13 & 1) != 0 ? *(float *)(v12 + 72) - *(float *)(v12 + 64) : -INFINITY;
        v20 = (float32x2_t *)(a1 + 620);
        v21 = **(_QWORD **)(a1 + 840);
        v22 = atomic_load((unsigned __int8 *)(v21 + 144));
        if ((v22 & 1) != 0)
          *(float *)v9.i32 = *(float *)(v21 + 76) - *(float *)(v21 + 68);
        else
          v9.i32[0] = -8388608;
        *(float *)v9.i32 = 0.5 - (float)(fminf(*(float *)v9.i32, v14) * 0.5);
        v23 = *(_BYTE *)(a1 + 631);
        v24 = *(int32x2_t **)(a1 + 872);
        v10 = *v20;
        v25 = (int32x2_t)vmaxnm_f32(*v20, (float32x2_t)vdup_lane_s32(v9, 0));
        v24[12] = v25;
        v24[24].i8[7] = v23;
        v26 = *(_QWORD *)(a1 + 840);
        if ((unint64_t)(*(_QWORD *)(a1 + 848) - v26) >= 0x11)
        {
          v27 = 0;
          v28 = 1;
          v29 = 407;
          do
          {
            v33 = *(_QWORD *)(v26 + v27 + 16);
            v34 = atomic_load((unsigned __int8 *)(v33 + 144));
            if ((v34 & 1) != 0)
              *(float *)v25.i32 = *(float *)(v33 + 72) - *(float *)(v33 + 64);
            else
              v25.i32[0] = -8388608;
            v35 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + v27 + 16);
            v36 = atomic_load((unsigned __int8 *)(v35 + 144));
            if ((v36 & 1) != 0)
              v30 = *(float *)(v35 + 76) - *(float *)(v35 + 68);
            else
              v30 = -INFINITY;
            *(float *)v25.i32 = 0.5 - (float)(fminf(v30, *(float *)v25.i32) * 0.5);
            v31 = *(_BYTE *)(a1 + v27 + 916);
            v32 = (_BYTE *)(*(_QWORD *)(a1 + 872) + v29);
            v10 = *(float32x2_t *)(a1 + v27 + 904);
            v25 = (int32x2_t)vmaxnm_f32(v10, (float32x2_t)vdup_lane_s32(v25, 0));
            *(int32x2_t *)(v32 - 103) = v25;
            *v32 = v31;
            ++v28;
            v26 = *(_QWORD *)(a1 + 840);
            v29 += 208;
            v27 += 16;
          }
          while (v28 < (*(_QWORD *)(a1 + 848) - v26) >> 4);
        }
      }
    }
    v37 = *(_QWORD *)(a1 + 872);
    v38 = *(_QWORD *)(a1 + 880);
    if (v37 != v38)
    {
      v39 = *a3;
      v40 = *a4;
      v41 = vadd_f32(*a4, *a3);
      do
      {
        *(float32x2_t *)(v37 + 32) = v41;
        md::CollisionObject::setupShapeData(v37, *(double *)&v39, *(double *)&v40, *(double *)&v10);
        v37 += 208;
      }
      while (v37 != v38);
    }
    v42 = *(_QWORD *)(a1 + 832);
    if (v42)
      (*(void (**)(uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)v42 + 80))(v42, a2, a3, a4);
    return md::IconLabelPart::layoutForStaging(a1, a2, a3, a4);
  }
  return result;
}

float md::MultiSizeIconLabelPart::resolveForDisplay(md::MultiSizeIconLabelPart *this, float result)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (*((_BYTE *)this + 938))
  {
    v3 = *((unsigned __int8 *)this + 937);
    v4 = *((_QWORD *)this + 105);
    if (v3 < (*((_QWORD *)this + 106) - v4) >> 4)
    {
      *((_BYTE *)this + 936) = v3;
      v5 = *(_OWORD *)(v4 + 16 * v3);
      v6 = *(_QWORD *)(v4 + 16 * v3 + 8);
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
      *((_OWORD *)this + 40) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      (*(void (**)(md::MultiSizeIconLabelPart *, uint64_t, char *, char *))(*(_QWORD *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
      if (*((_BYTE *)this + 936))
      {
        result = *((float *)this + 4 * *((unsigned __int8 *)this + 936) + 224);
        *((float *)this + 144) = result;
      }
    }
  }
  return result;
}

uint64_t md::MultiSizeIconLabelPart::alternateStyleIndex(md::MultiSizeIconLabelPart *this)
{
  return (*((_BYTE *)this + 937) - 1);
}

uint64_t md::MultiSizeIconLabelPart::setMinAlternateStyleIndex(uint64_t this, char a2)
{
  unsigned int v2;

  v2 = (a2 + 1);
  if ((((*(_DWORD *)(this + 848) - *(_DWORD *)(this + 840)) >> 4) - 1) < v2)
    v2 = (((*(_DWORD *)(this + 848) - *(_DWORD *)(this + 840)) >> 4) - 1);
  if (*(unsigned __int8 *)(this + 937) > v2)
    LOBYTE(v2) = *(_BYTE *)(this + 937);
  *(_BYTE *)(this + 937) = v2;
  return this;
}

uint64_t md::MultiSizeIconLabelPart::collisionBoundsForStaging(md::MultiSizeIconLabelPart *this)
{
  return *((_QWORD *)this + 109) + 80;
}

float md::MultiSizeIconLabelPart::animationSize(md::MultiSizeIconLabelPart *this)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * *((unsigned __int8 *)this + 936));
  v2 = atomic_load((unsigned __int8 *)(v1 + 144));
  if ((v2 & 1) != 0)
    return *(float *)(v1 + 56) - *(float *)(v1 + 48);
  else
    return -INFINITY;
}

uint64_t md::MultiSizeIconLabelPart::checkResourcesReady(md::MultiSizeIconLabelPart *this, LabelManager *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *((_QWORD *)this + 105);
  v3 = *((_QWORD *)this + 106);
  if (v2 == v3)
    return 37;
  while (1)
  {
    v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)v2 + 142));
    if ((v4 & 1) == 0)
      return 15;
    v5 = atomic_load((unsigned __int8 *)(*(_QWORD *)v2 + 143));
    if ((v5 & 1) == 0)
      break;
    v2 += 16;
    if (v2 == v3)
      return 37;
  }
  return 16;
}

uint64_t md::MultiSizeIconLabelPart::collisionWillStart(uint64_t this)
{
  *(_WORD *)(this + 937) = 0;
  return this;
}

uint64_t md::MultiSizeIconLabelPart::setCollisionResult(uint64_t this, char a2)
{
  *(_BYTE *)(this + 938) = a2;
  return this;
}

uint64_t md::MultiSizeIconLabelPart::collidesWithItem(md::MultiSizeIconLabelPart *this, const md::LabelCollidableItem *a2, char a3)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  if ((a3 & 1) != 0)
    return (*(uint64_t (**)(const md::LabelCollidableItem *, char *))(*(_QWORD *)a2 + 16))(a2, (char *)this + 72);
  v6 = *((unsigned __int8 *)this + 937);
  v7 = *((_QWORD *)this + 109);
  if (0x4EC4EC4EC4EC4EC5 * ((*((_QWORD *)this + 110) - v7) >> 4) <= v6)
    return 1;
  do
  {
    result = (*(uint64_t (**)(const md::LabelCollidableItem *, unint64_t))(*(_QWORD *)a2 + 16))(a2, v7 + 208 * v6);
    if (!(_DWORD)result)
      break;
    LOBYTE(v6) = *((_BYTE *)this + 937) + 1;
    *((_BYTE *)this + 937) = v6;
    v6 = v6;
    v7 = *((_QWORD *)this + 109);
  }
  while (0x4EC4EC4EC4EC4EC5 * ((*((_QWORD *)this + 110) - v7) >> 4) > (unint64_t)v6);
  return result;
}

uint64_t md::MultiSizeIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  int v5;
  int v6;
  _BOOL8 v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 938))
  {
    v5 = *(unsigned __int8 *)(a1 + 937);
    v6 = *(unsigned __int8 *)(a1 + 936);
    v8 = v5 == v6;
    v7 = v5 != v6;
    v8 = !v8 || a3 == 0;
    if (!v8)
      goto LABEL_9;
  }
  else
  {
    if (a3)
    {
LABEL_9:
      v9 = (unsigned __int8 *)(a1 + 768);
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 48);
      LOBYTE(v10) = atomic_load((unsigned __int8 *)(v10 + 1240));
      v13 = *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v11 + 552))(v11, v12, 0, v10 & 1, 0);
      return md::LabelIconStyleMonitor::needsCrossfade(v9, v13, a4);
    }
    return 0;
  }
  return v7;
}

uint64_t md::MultiSizeIconLabelPart::debugString@<X0>(md::MultiSizeIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  void *v29[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v24 = v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v9, &v25);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v24 = v4 + 24;
  v32[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  v31 = 16;
  md::PointIconLabelPart::debugString(this, __p);
  if ((v23 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v12 = v23;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)v11, v12);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)" Alt cnt=", 9);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" idx=", 5);
  std::ostream::operator<<();
  if ((v31 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v15 = v28;
    }
    v16 = (const void **)&v27;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v14 = 0;
      a2[23] = 0;
      goto LABEL_24;
    }
    v16 = (const void **)v26;
    v15 = v26[2];
  }
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_23;
  }
  a2[23] = v14;
  if (v14)
LABEL_23:
    memmove(a2, v17, v14);
LABEL_24:
  a2[v14] = 0;
  v24 = *v6;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v6[3];
  v25 = v10 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v32);
}

void sub_19F585E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::MultiSizeIconLabelPart::partCollidesWithObject(md::MultiSizeIconLabelPart *this, const md::CollisionObject *a2)
{
  unint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v6;
  md::CollisionObject *v7;

  v2 = *((unsigned __int8 *)this + 937);
  v3 = *((_QWORD *)this + 109);
  if (0x4EC4EC4EC4EC4EC5 * ((*((_QWORD *)this + 110) - v3) >> 4) <= v2)
    return 1;
  v4 = (float *)(v3 + 208 * *((unsigned __int8 *)this + 937));
  if (v4[22] <= *((float *)a2 + 20)
    || v4[20] >= *((float *)a2 + 22)
    || *(float *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 92) <= *((float *)a2 + 21)
    || v4[21] >= *((float *)a2 + 23)
    || !*((_QWORD *)a2 + 20) && !*((_QWORD *)a2 + 21)
    || (*(_BYTE *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 200) & *((_BYTE *)a2 + 200)) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 168);
  if (*((_QWORD *)a2 + 21))
  {
    v7 = a2;
    a2 = (const md::CollisionObject *)(v3 + 208 * v2);
    if (v6)
      return md::CollisionObject::circlesCollideWithCircles(v7, a2);
    return md::CollisionObject::circlesCollideWithRects(v7, a2);
  }
  if (v6)
  {
    v7 = (md::CollisionObject *)(v3 + 208 * *((unsigned __int8 *)this + 937));
    return md::CollisionObject::circlesCollideWithRects(v7, a2);
  }
  if (*((_BYTE *)a2 + 196) || *(_BYTE *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 196))
    return md::CollisionObject::rectsCollideWithRectsOBB(a2, (const md::CollisionObject *)v4);
  else
    return md::CollisionObject::rectsCollideWithRects(a2, (const md::CollisionObject *)v4);
}

void std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1[1];
  v5 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = 0;
      do
      {
        if (v4 + v11)
        {
          v12 = v4 + v11;
          *(_OWORD *)v12 = xmmword_19FFB2E30;
          *(_QWORD *)(v12 + 16) = 1065353216;
          *(_DWORD *)(v12 + 24) = 1065353216;
          *(_QWORD *)(v12 + 36) = 0;
          *(_QWORD *)(v12 + 28) = 0;
          *(_DWORD *)(v12 + 44) = 0;
          *(_OWORD *)(v12 + 48) = xmmword_19FFB2E30;
          *(_OWORD *)(v12 + 64) = xmmword_19FFB2E30;
          *(_OWORD *)(v12 + 80) = xmmword_19FFB2E30;
          *(_OWORD *)(v12 + 96) = xmmword_19FFB3480;
          *(_BYTE *)(v12 + 152) = 0;
          *(_QWORD *)(v12 + 112) = 0;
          *(_QWORD *)(v12 + 120) = 0;
          *(_BYTE *)(v12 + 128) = 0;
          *(_OWORD *)(v12 + 160) = 0uLL;
          *(_OWORD *)(v12 + 176) = 0uLL;
          *(_OWORD *)(v12 + 185) = 0uLL;
        }
        v11 += 208;
      }
      while (208 * a2 != v11);
      a1[1] = v4 + 208 * a2;
    }
    else
    {
      a1[1] = v4;
    }
  }
  else
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x13B13B13B13B13BLL)
      abort();
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x9D89D89D89D89DLL)
      v9 = 0x13B13B13B13B13BLL;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 208 * v9, 8);
    else
      v10 = 0;
    v13 = 0;
    v14 = v10 + 208 * v6;
    v15 = v14 + 208 * a2;
    v16 = xmmword_19FFB2E30;
    v17 = xmmword_19FFB3480;
    do
    {
      if (v14 + v13)
      {
        v18 = v14 + v13;
        *(_OWORD *)v18 = xmmword_19FFB2E30;
        *(_QWORD *)(v18 + 16) = 1065353216;
        *(_DWORD *)(v18 + 24) = 1065353216;
        *(_QWORD *)(v18 + 36) = 0;
        *(_QWORD *)(v18 + 28) = 0;
        *(_DWORD *)(v18 + 44) = 0;
        *(_OWORD *)(v18 + 48) = xmmword_19FFB2E30;
        *(_OWORD *)(v18 + 64) = xmmword_19FFB2E30;
        *(_OWORD *)(v18 + 80) = xmmword_19FFB2E30;
        *(_OWORD *)(v18 + 96) = xmmword_19FFB3480;
        *(_BYTE *)(v18 + 152) = 0;
        *(_QWORD *)(v18 + 112) = 0;
        *(_QWORD *)(v18 + 120) = 0;
        *(_BYTE *)(v18 + 128) = 0;
        *(_OWORD *)(v18 + 160) = 0uLL;
        *(_OWORD *)(v18 + 176) = 0uLL;
        *(_OWORD *)(v18 + 185) = 0uLL;
      }
      v13 += 208;
    }
    while (208 * a2 != v13);
    v19 = v10 + 208 * v9;
    v21 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      v26 = a1[2];
      a1[2] = v19;
      if (v20)
LABEL_28:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v26 - v20);
    }
    else
    {
      v22 = 0;
      do
      {
        *(_OWORD *)(v14 + v22 - 208) = v16;
        v23 = v14 + v22 - 208;
        *(_QWORD *)(v23 + 16) = 1065353216;
        *(_DWORD *)(v23 + 24) = 1065353216;
        *(_QWORD *)(v23 + 36) = 0;
        *(_QWORD *)(v23 + 28) = 0;
        *(_DWORD *)(v23 + 44) = 0;
        *(_OWORD *)(v23 + 48) = v16;
        *(_OWORD *)(v23 + 64) = v16;
        *(_OWORD *)(v23 + 80) = v16;
        *(_OWORD *)(v23 + 96) = v17;
        *(_BYTE *)(v23 + 152) = 0;
        *(_QWORD *)(v23 + 112) = 0;
        *(_QWORD *)(v23 + 120) = 0;
        *(_BYTE *)(v23 + 128) = 0;
        *(_OWORD *)(v23 + 160) = 0u;
        *(_OWORD *)(v23 + 176) = 0u;
        *(_OWORD *)(v23 + 185) = 0u;
        v22 -= 208;
        md::CollisionObject::operator=(v23, v20 + v22);
        v17 = xmmword_19FFB3480;
        v16 = xmmword_19FFB2E30;
      }
      while (v20 + v22 != v21);
      v24 = v14 + v22;
      v20 = *a1;
      v25 = a1[1];
      *a1 = v24;
      a1[1] = v15;
      v26 = a1[2];
      for (a1[2] = v19; v25 != v20; v25 -= 208)
      {
        free(*(void **)(v25 - 48));
        free(*(void **)(v25 - 40));
        free(*(void **)(v25 - 24));
      }
      if (v20)
        goto LABEL_28;
    }
  }
}

uint64_t md::CollisionObject::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    free(*(void **)(a1 + 168));
    free(*(void **)(a1 + 160));
    free(*(void **)(a1 + 184));
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 184) = 0;
    *(_DWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_DWORD *)(a2 + 176) = 0;
  }
  return a1;
}

void md::StorefrontLabelFeature::~StorefrontLabelFeature(md::StorefrontLabelFeature *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E429DB28;
  v2 = *((_QWORD *)this + 84);
  if (v2)
  {
    v3 = *((_QWORD *)this + 85);
    v4 = (void *)*((_QWORD *)this + 84);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 84);
    }
    *((_QWORD *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E429DB28;
  v2 = *((_QWORD *)this + 84);
  if (v2)
  {
    v3 = *((_QWORD *)this + 85);
    v4 = (void *)*((_QWORD *)this + 84);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 84);
    }
    *((_QWORD *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PointLabelFeature::resetCustomFeatureAnnotation(uint64_t this)
{
  atomic_store(0, (unsigned __int8 *)(this + 395));
  return this;
}

__int128 *md::StorefrontLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(a1 + 464);
  if (v2)
  {
    v3 = *a2;
    v4 = a1 + 464;
    do
    {
      v5 = *(_DWORD *)(v2 + 32);
      v6 = v5 >= v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 464 && v3 >= *(_DWORD *)(v4 + 32))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned __int8 *)(v4 + 121));
      if (v8)
        return (__int128 *)(v8 + 96);
    }
  }
  if ((v10 & 1) != 0)
    return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
  {
    qword_1ECE2FD68 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1ECE2FD58 = 0u;
    dword_1ECE2FD70 = 2139095039;
    word_1ECE2FD74 = 256;
    byte_1ECE2FD76 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

void md::LabelFeature::secondaryLabelPoint(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[48] = 0;
}

unint64_t md::StorefrontLabelFeature::facingVector(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 464);
  if (v2)
  {
    v3 = *a2;
    v4 = a1 + 464;
    do
    {
      v5 = *(_DWORD *)(v2 + 32);
      v6 = v5 >= v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 == a1 + 464
      || v3 < *(_DWORD *)(v4 + 32)
      || (v9 = *(_QWORD *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned __int8 *)(v4 + 121))) == 0)
    {
      v8 = 0;
      v2 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v9 + 60) & 0xFFFFFFFFFFFFFF00;
      v2 = *(_QWORD *)(v9 + 60);
    }
  }
  else
  {
    v8 = 0;
  }
  return v2 | v8;
}

uint64_t md::PointLabelFeature::clientFeatureID(md::PointLabelFeature *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 63);
  if (v1)
    return *(_QWORD *)(v1 + 24);
  else
    return 0;
}

uint64_t md::PointLabelFeature::businessID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 47);
}

uint64_t md::PointLabelFeature::animationID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 48);
}

uint64_t md::PointLabelFeature::hasValidCustomFeatureAnnotation(md::PointLabelFeature *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 395);
  return v1 & 1;
}

id md::PointLabelFeature::customFeatureAnnotation(id *this)
{
  return this[66];
}

float md::StorefrontLabelFeature::elevationOffset()
{
  return 4.0;
}

float md::LabelFeature::minLabelSpacing(md::LabelFeature *this, int a2, const md::LabelLayoutContext *a3)
{
  return 0.0;
}

uint64_t md::PointLabelFeature::isMuninLandmark(md::PointLabelFeature *this)
{
  return *((unsigned __int8 *)this + 651);
}

uint64_t md::PointLabelFeature::venueID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 76);
}

uint64_t md::PointLabelFeature::venueBuildingID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 77);
}

uint64_t md::PointLabelFeature::venueLevelID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 78);
}

uint64_t md::PointLabelFeature::venueComponentID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 79);
}

uint64_t md::PointLabelFeature::venueFloorOrdinal(md::PointLabelFeature *this)
{
  return *((__int16 *)this + 320);
}

uint64_t md::PointLabelFeature::venueLookInsideFloorOrdinal@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(this + 642))
  {
    *(_WORD *)(a2 + 2) = *(_WORD *)(this + 644);
    *(_BYTE *)a2 = 1;
  }
  return this;
}

uint64_t md::PointLabelFeature::venueComponentType(md::PointLabelFeature *this)
{
  return *((unsigned __int8 *)this + 646);
}

uint64_t md::LabelFeature::containsPixel()
{
  return 0;
}

uint64_t md::StorefrontLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  unint64_t v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  void *__p[2];
  unsigned __int8 v43;
  uint64_t v44;
  _QWORD v45[2];
  _QWORD v46[3];
  uint64_t v47;
  unint64_t v48;
  void *v49[2];
  __int128 v50;
  int v51;
  uint64_t v52[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v52[0] = MEMORY[0x1E0DE4FE0] + 64;
  v44 = v13;
  *(_QWORD *)((char *)&v45[-1] + *(_QWORD *)(v13 - 24)) = v14;
  v15 = (std::ios_base *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24));
  std::ios_base::init(v15, v45);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v44 = v10 + 24;
  v52[0] = v11;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x1E0DE4FB8];
  v45[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v49 = 0u;
  v50 = 0u;
  v51 = 16;
  md::PointLabelFeature::debugString(a1, a2, a3, a4, __p);
  if ((v43 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v18 = v43;
  else
    v18 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v44, (uint64_t)v17, v18);
  if ((char)v43 < 0)
  {
    operator delete(__p[0]);
    v19 = *(_QWORD *)(a1 + 464);
    if (!v19)
      goto LABEL_22;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 464);
    if (!v19)
      goto LABEL_22;
  }
  v20 = *a3;
  v21 = a1 + 464;
  do
  {
    v22 = *(_DWORD *)(v19 + 32);
    v23 = v22 >= v20;
    if (v22 >= v20)
      v24 = (uint64_t *)v19;
    else
      v24 = (uint64_t *)(v19 + 8);
    if (v23)
      v21 = v19;
    v19 = *v24;
  }
  while (*v24);
  if (v21 != a1 + 464 && v20 >= *(_DWORD *)(v21 + 32))
  {
    v25 = v44;
    *(_DWORD *)((char *)v45 + *(_QWORD *)(v44 - 24)) = *(_DWORD *)((_BYTE *)v45 + *(_QWORD *)(v44 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v45[1] + *(_QWORD *)(v25 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v44, (uint64_t)" Size:(", 7);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")\n", 2);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v44, (uint64_t)" Coordinate:(", 13);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)")\n", 2);
    *(_QWORD *)((char *)&v45[1] + *(_QWORD *)(v44 - 24)) = 4;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v44, (uint64_t)" Normal:(", 9);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)")\n", 2);
  }
LABEL_22:
  if ((v51 & 0x10) != 0)
  {
    v35 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v35 = v48;
    }
    v36 = (const void **)&v47;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v34 = 0;
      a5[23] = 0;
      goto LABEL_37;
    }
    v36 = (const void **)v46;
    v35 = v46[2];
  }
  v37 = *v36;
  v34 = v35 - (_QWORD)*v36;
  if (v34 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v34 >= 0x17)
  {
    v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v38 = v34 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    *((_QWORD *)a5 + 1) = v34;
    *((_QWORD *)a5 + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)a5 = v40;
    a5 = v40;
    goto LABEL_36;
  }
  a5[23] = v34;
  if (v34)
LABEL_36:
    memmove(a5, v37, v34);
LABEL_37:
  a5[v34] = 0;
  v44 = *v12;
  *(_QWORD *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24)) = v12[3];
  v45[0] = v16 + 16;
  if (SBYTE7(v50) < 0)
    operator delete(v49[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v52);
}

void sub_19F586D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::StorefrontLabelFeature::debugDraw(_QWORD *a1, uint64_t a2, float32x2_t *a3, _DWORD *a4)
{
  double v4;
  double v5;
  _QWORD *v6;
  _QWORD *v7;
  float64x2_t *v12;
  float v13;
  double v14;
  double v15;
  double v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  float v30;
  double v31;
  double v33;
  long double v34;
  long double v35;
  double v36;
  long double v37;
  double v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  __double2 v47;
  float32x2_t v48;
  uint64_t v49;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float32x2_t v59;
  float32x2_t v60;
  double v61;
  float v62;
  double v63;
  float v64;
  double v65;
  double v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  double v71;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v81;
  double v82;
  float64x2_t v83;
  double v85;
  float64x2_t v86;
  float64x2_t v90;
  float32x2_t v91;
  float32x2_t v93;
  float32x2_t v96;
  _QWORD *v97;
  _QWORD *v98;
  md::LabelFeature *v99;
  float v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  float32x2_t v105;
  float64x2_t v106;
  double v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  _QWORD v111[3];

  v111[1] = *MEMORY[0x1E0C80C00];
  v4 = 1.0;
  if (*(_BYTE *)(a2 + 448))
    v5 = 0.0000000249532021;
  else
    v5 = 1.0;
  v6 = (_QWORD *)a1[57];
  v7 = a1 + 58;
  if (v6 != a1 + 58)
  {
    v12 = (float64x2_t *)(a2 + 1304);
    v101 = a2 + 440;
    v13 = v5 * 6.0;
    v100 = v13;
    v14 = 6.28318531;
    v15 = -3.14159265;
    v16 = -1.57079633;
    do
    {
      v17 = (unsigned int *)(v6 + 4);
      if (!*a4 || *v17 == *a4)
      {
        v18 = *v7;
        if (*v7)
        {
          v19 = *v17;
          v20 = v7;
          do
          {
            v21 = *(_DWORD *)(v18 + 32);
            _CF = v21 >= v19;
            if (v21 >= v19)
              v23 = (uint64_t *)v18;
            else
              v23 = (uint64_t *)(v18 + 8);
            if (_CF)
              v20 = (_QWORD *)v18;
            v18 = *v23;
          }
          while (*v23);
          if (v20 != v7 && v19 >= *((_DWORD *)v20 + 8))
          {
            v24 = *(_QWORD *)(a1[84] + 16 * *((unsigned __int8 *)v20 + 121));
            if (v24)
            {
              v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 112))(a1, v6 + 4);
              v26 = v25;
              if (*(_BYTE *)(a2 + 448))
              {
                v27 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v25);
                v28 = *v27;
                v29 = v27[1];
                v30 = *(float *)(v26 + 40);
                v31 = v5 * v30;
                _ZF = v30 == 3.4028e38;
                v33 = 0.0;
                if (!_ZF)
                  v33 = v31;
              }
              else if (*(_BYTE *)(v25 + 44))
              {
                v28 = *(double *)v25;
                v29 = *(double *)(v25 + 8);
                v33 = *(double *)(v25 + 16);
              }
              else
              {
                v34 = *(double *)(v25 + 24) * v14;
                v35 = exp(v15 + *(double *)(v25 + 32) * v14);
                v36 = v16 + atan(v35) * 2.0;
                v37 = fmod(v34, v14);
                v38 = fmod(v37 + v14, v14) + v15;
                v39 = __sincos_stret(v36);
                v40 = sqrt(v4 + v39.__sinval * v39.__sinval * -0.00669437999);
                v41 = v5;
                v42 = v14;
                v43 = v16;
                v44 = v15;
                v45 = 6378137.0 / v40;
                v46 = 6378137.0 / v40 * v39.__cosval;
                v47 = __sincos_stret(v38);
                v28 = v46 * v47.__cosval;
                v29 = v46 * v47.__sinval;
                *(double *)v26 = v46 * v47.__cosval;
                *(double *)(v26 + 8) = v46 * v47.__sinval;
                v33 = v39.__sinval * 0.99330562 * v45;
                v15 = v44;
                v16 = v43;
                v14 = v42;
                v5 = v41;
                v4 = 1.0;
                *(double *)(v26 + 16) = v33;
                *(_BYTE *)(v26 + 44) = 1;
              }
              v103 = v33;
              v104 = v28;
              v106.f64[0] = v28;
              v106.f64[1] = v29;
              v102 = v29;
              v107 = v33;
              if (!md::LabelLayoutContext::isDistanceClipped(v101, (uint64_t)&v106))
              {
                v48 = (float32x2_t)(*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 136))(a1, v6 + 4);
                if ((v49 & 0xFF00000000) == 0)
                {
                  v99 = (md::LabelFeature *)std::__throw_bad_optional_access[abi:nn180100]();
                  md::LabelFeature::publicShieldName(v99);
                  return;
                }
                _D1 = *(double *)(a2 + 1360);
                v51 = *(double *)(a2 + 1392);
                v52 = v12[2];
                v53 = v12[4];
                v54 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v12[6], *v12, v104), v52, v102), v53, v103), v4 / (*(double *)(a2 + 1424) + *(double *)(a2 + 1328) * v104 + _D1 * v102 + v51 * v103));
                _Q18 = vaddq_f64(v106, vcvtq_f64_f32(vmul_n_f32(v48, v100)));
                __asm { FMLA            D3, D1, V18.D[1] }
                v59 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v12[6], *v12, _Q18.f64[0]), v52, _Q18, 1), v53, v103 + (float)(*(float *)&v49 * v100)), v4 / (_D3 + v51 * (v103 + (float)(*(float *)&v49 * v100)))));
                v105 = v59;
                v60 = vcvt_f32_f64(v54);
                a3[13].i32[0] = 0x40000000;
                a3[1] = v60;
                ggl::DebugConsole::drawSymbol(a3, 1);
                a3[1] = v59;
                ggl::DebugConsole::drawSymbol(a3, 0);
                a3[1] = v60;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v105);
                v61 = *(float *)(v24 + 56);
                v62 = *(float *)(v24 + 84);
                v63 = *(float *)(v24 + 80);
                v64 = *(float *)(v24 + 88);
                v65 = (float)(v64 * 0.5);
                v66 = (float)(v62 * 0.5);
                v67 = *(double *)(v24 + 16) - (v66 * v61 + v65 * v63);
                v68 = vcvtq_f64_f32(*(float32x2_t *)(v24 + 48));
                v69 = vcvtq_f64_f32(*(float32x2_t *)(v24 + 72));
                _Q4 = vsubq_f64(*(float64x2_t *)v24, vmlaq_n_f64(vmulq_n_f64(v68, v66), v69, v65));
                v71 = v64;
                _Q6 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL);
                _D17 = *(_QWORD *)(a2 + 1328);
                _D18 = *(_QWORD *)(a2 + 1360);
                __asm { FMLA            D20, D18, V4.D[1] }
                v76 = *v12;
                v77 = v12[2];
                v78 = v12[6];
                v79 = vmlaq_laneq_f64(vmlaq_n_f64(v78, *v12, _Q4.f64[0]), v77, _Q4, 1);
                _Q4 = vmlaq_n_f64(_Q4, v69, v71);
                v81 = v62;
                v82 = v81 * v61;
                v83 = vmulq_n_f64(v68, v81);
                _Q7 = (float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL);
                v69.f64[1] = _Q7.f64[1];
                v69.f64[0] = v82;
                v85 = v67 + v71 * v63;
                v86.f64[1] = _Q6.f64[1];
                v86.f64[0] = v85;
                _Q3 = vaddq_f64(v69, v86);
                _Q2 = vaddq_f64(v83, _Q4);
                _Q7.f64[1] = v82;
                _Q6.f64[1] = v67;
                _Q0 = vaddq_f64(_Q7, _Q6);
                _Q6.f64[0] = *(float64_t *)(a2 + 1392);
                v90 = v12[4];
                __asm { FMLA            D7, D18, V4.D[1] }
                v91 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v78, *v12, _Q4.f64[0]), v77, _Q4, 1), v90, v85), v4 / (_Q7.f64[0] + _Q6.f64[0] * v85)));
                v108 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v79, v90, v67), v4 / (_D20 + _Q6.f64[0] * v67)));
                v109 = v91;
                __asm { FMLA            D1, D18, V2.D[1] }
                v93 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v78, v76, _Q2.f64[0]), v77, _Q2, 1), v90, _Q3.f64[0]), v4 / vmlad_n_f64(_D1, _Q6.f64[0], _Q3.f64[0])));
                __asm
                {
                  FMLA            D19, D17, V3.D[1]
                  FMLA            D19, D6, V0.D[1]
                }
                v96 = vcvt_f32_f64(vmulq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v78, v76, _Q3, 1), v77, _Q0.f64[0]), v90, _Q0, 1), v4 / _D19));
                v110 = v93;
                v111[0] = v96;
                a3[1] = v108;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v109);
                a3[1] = v91;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v110);
                a3[1] = v93;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v111);
                a3[1] = v96;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v108);
              }
            }
          }
        }
      }
      v97 = (_QWORD *)v6[1];
      if (v97)
      {
        do
        {
          v98 = v97;
          v97 = (_QWORD *)*v97;
        }
        while (v97);
      }
      else
      {
        do
        {
          v98 = (_QWORD *)v6[2];
          _ZF = *v98 == (_QWORD)v6;
          v6 = v98;
        }
        while (!_ZF);
      }
      v6 = v98;
    }
    while (v98 != v7);
  }
}

uint64_t md::LabelFeature::publicShieldName(md::LabelFeature *this)
{
  return 0;
}

double md::PointLabelFeatureBase::routeOffsetInMeters(md::PointLabelFeatureBase *this)
{
  return 0.0;
}

uint64_t md::PointLabelFeatureBase::collisionPriority(md::PointLabelFeatureBase *this)
{
  return 0;
}

uint64_t md::PointLabelFeature::populateMultiPoiAttributeKey()
{
  return 0;
}

uint64_t md::PointLabelFeature::nextMultiPoiFallbackAttributeKey()
{
  return 0;
}

void md::ARProcessMeshComponentsLogic::~ARProcessMeshComponentsLogic(md::ARProcessMeshComponentsLogic *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42A48F8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42A48F8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARProcessMeshComponentsContext]";
  v4[3] = 34;
  v4[4] = result;
  *v4 = &off_1E42B14C8;
  v4[1] = 0x3C394DB2AC35C8;
  *a2 = v4;
  return result;
}

void sub_19F5874B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x3C394DB2AC35C8 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARProcessMeshComponentsLogic::runBeforeLayout(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *i;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *j;
  uint64_t v80;
  _QWORD *v81;
  uint64_t k;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t *v99;
  unint64_t *v100;
  _QWORD *v101;
  float64_t **v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  BOOL v118;
  unsigned __int8 *v119;
  void **v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  size_t v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  uint64_t *v135;
  uint64_t *v136;
  void **v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142;
  _OWORD *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float64_t **v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v167;
  uint64_t v168;
  float *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  void **v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  size_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  BOOL v204;
  unsigned __int8 *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  _OWORD *v211;
  uint64_t *v212;
  uint64_t *v213;
  void **v214;
  unint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  __int128 *v219;
  _OWORD *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v228;
  void *v229;
  unint64_t *v230;
  _BYTE *v231;
  uint64_t v232;
  _BYTE v233[32];
  void *v234[2];
  _BYTE *v235;
  unint64_t v236;
  _BYTE v237[40];
  uint64_t *v238;
  void **v239;
  __int128 v240;
  _QWORD v241[5];

  v1 = a1[18];
  v2 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v1);
  v3 = gdc::Registry::storage<arComponents::CustomBoxCreateDesc>(v1);
  v4 = (_QWORD *)v3;
  v5 = v3 + 32;
  v7 = v2[7];
  v6 = v2[8];
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= (unint64_t)(v6 - v7))
    v8 = v2 + 4;
  else
    v8 = (_QWORD *)(v3 + 32);
  if (v2 + 4 == v8 && v7 != v6)
  {
    do
    {
      v103 = *(unsigned int *)(v7 + 4);
      v104 = v4[4];
      v105 = (v4[5] - v104) >> 3;
      if (v103 >> 7 < v105)
      {
        v106 = *(_QWORD *)(v104 + 8 * (v103 >> 7));
        if (v106)
        {
          v107 = *(unsigned __int16 *)(v106 + 2 * (v103 & 0x7F));
          v109 = v4[7];
          v108 = v4[8];
          v110 = (v108 - v109) >> 3;
          if (v110 > v107)
          {
            v111 = v109 + 8 * v107;
            if (v111 != v108 && *(_DWORD *)(v111 + 4) == (_DWORD)v103)
            {
              v113 = *(_QWORD *)v7;
              v114 = *(_QWORD *)v7 >> 39;
              if (v114 < v105
                && (v115 = *(_QWORD *)(v104 + 8 * v114)) != 0
                && (v116 = *(unsigned __int16 *)(v115 + 2 * (HIDWORD(v113) & 0x7F)), v110 > v116)
                && ((v117 = v109 + 8 * v116, v117 != v108)
                  ? (v118 = *(_DWORD *)(v117 + 4) == HIDWORD(v113))
                  : (v118 = 0),
                    v118))
              {
                v102 = (float64_t **)(v4[10] + 24 * v116);
              }
              else
              {
                v102 = (float64_t **)v4[11];
              }
              md::ARProcessMeshComponentsLogic::prepareCustomBoxMeshes(md::LayoutContext const&)::$_0::operator()((uint64_t)a1, v113, v102);
            }
          }
        }
      }
      v7 += 8;
    }
    while (v7 != v6);
  }
  if ((_QWORD *)v5 == v8)
  {
    v147 = v4[7];
    v148 = v4[8];
    if (v147 != v148)
    {
      v149 = (float64_t **)v4[10];
      do
      {
        v150 = *(unsigned int *)(v147 + 4);
        v151 = v2[4];
        if (v150 >> 7 < (v2[5] - v151) >> 3)
        {
          v152 = *(_QWORD *)(v151 + 8 * (v150 >> 7));
          if (v152)
          {
            v153 = *(unsigned __int16 *)(v152 + 2 * (v150 & 0x7F));
            v155 = v2[7];
            v154 = v2[8];
            if (v153 < (v154 - v155) >> 3)
            {
              v156 = v155 + 8 * v153;
              if (v156 != v154 && *(_DWORD *)(v156 + 4) == (_DWORD)v150)
                md::ARProcessMeshComponentsLogic::prepareCustomBoxMeshes(md::LayoutContext const&)::$_0::operator()((uint64_t)a1, *(_QWORD *)v147, v149);
            }
          }
        }
        v149 += 3;
        v147 += 8;
      }
      while (v147 != v148);
    }
  }
  v10 = gdc::Registry::storage<arComponents::IcoSphereMesh>(a1[18]);
  v11 = *(unint64_t **)(v10 + 56);
  for (i = *(unint64_t **)(v10 + 64); v11 != i; ++v11)
  {
    v13 = *v11;
    md::ARMeshRenderResources::generateIcoSphereCached((md::ARMeshRenderResources *)&v238, 2u);
    v14 = a1[18];
    v15 = (std::__shared_weak_count *)v239;
    v234[0] = v238;
    v234[1] = v239;
    if (v239)
    {
      v16 = (unint64_t *)(v239 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>(v14);
    gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v18, v13, (uint64_t *)v234);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v21 = a1[18];
    *(_OWORD *)v234 = v240;
    v235 = (_BYTE *)v241[0];
    v22 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>(v21);
    gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v22, v13, (__int128 *)v234);
    v23 = (_QWORD *)gdc::Registry::storage<arComponents::IcoSphereMesh>(a1[18]);
    gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::remove(v23, v13);
    v24 = (std::__shared_weak_count *)v239;
    if (v239)
    {
      v25 = (unint64_t *)(v239 + 1);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v27 = 0;
  v28 = 0xCBF29CE484222325;
  v234[0] = v237;
  v234[1] = v237;
  v235 = v237;
  v236 = 4;
  v229 = v233;
  v230 = (unint64_t *)v233;
  v231 = v233;
  v232 = 4;
  v29 = 0xCBF29CE484222325;
  do
    v29 = 0x100000001B3 * (v29 ^ aStdStringViewG_775[v27++ + 38]);
  while (v27 != 122);
  v30 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(a1[18], v29);
  v31 = v30;
  v33 = v30[7];
  v32 = v30[8];
  v34 = v32 - v33;
  if (v32 != v33)
  {
    if ((v35 = *(unsigned int *)(v33 + 4), v36 = v30[4], v37 = (v30[5] - v36) >> 3, v35 >> 7 >= v37)
      || (v38 = *(_QWORD *)(v36 + 8 * (v35 >> 7))) == 0
      || (v39 = *(unsigned __int16 *)(v38 + 2 * (v35 & 0x7F)), v39 >= v34 >> 3)
      || ((v40 = v33 + 8 * v39, v40 != v32) ? (v41 = *(_DWORD *)(v40 + 4) == (_DWORD)v35) : (v41 = 0), !v41))
    {
      v42 = v33 + 8;
      if (v33 + 8 == v32)
      {
LABEL_82:
        v49 = (unint64_t *)v234[1];
        goto LABEL_83;
      }
      v43 = v34 >> 3;
      while (1)
      {
        v44 = *(unsigned int *)(v42 + 4);
        if (v44 >> 7 < v37)
        {
          v45 = *(_QWORD *)(v36 + 8 * (v44 >> 7));
          if (v45)
          {
            v46 = *(unsigned __int16 *)(v45 + 2 * (v44 & 0x7F));
            if (v43 > v46)
            {
              v47 = v33 + 8 * v46;
              if (v47 != v32 && *(_DWORD *)(v47 + 4) == (_DWORD)v44)
                break;
            }
          }
        }
        v42 += 8;
        if (v42 == v32)
          goto LABEL_82;
      }
      v33 = v42;
    }
  }
  v49 = (unint64_t *)v234[1];
  if (v32 != v33)
  {
    while (1)
    {
      v50 = *(_QWORD *)v33;
      v51 = v234[0];
      v52 = ((char *)v49 - (char *)v234[0]) >> 3;
      if (v236 < v52 + 1)
        break;
LABEL_70:
      *v49 = v50;
      v49 = (unint64_t *)((char *)v234[1] + 8);
      v234[1] = (char *)v234[1] + 8;
      v70 = v31[8];
      v71 = v33 + 8;
      if (v33 + 8 != v70)
      {
        v72 = v31[4];
        v73 = v31[7];
        while (1)
        {
          v74 = *(unsigned int *)(v71 + 4);
          if (v74 >> 7 < (v31[5] - v72) >> 3)
          {
            v75 = *(_QWORD *)(v72 + 8 * (v74 >> 7));
            if (v75)
            {
              v76 = *(unsigned __int16 *)(v75 + 2 * (v74 & 0x7F));
              if ((v70 - v73) >> 3 > v76)
              {
                v77 = v73 + 8 * v76;
                if (v77 != v70 && *(_DWORD *)(v77 + 4) == (_DWORD)v74)
                  break;
              }
            }
          }
          v71 += 8;
          if (v71 == v70)
            goto LABEL_50;
        }
        v70 = v71;
      }
LABEL_50:
      v33 = v70;
      if (v32 == v70)
        goto LABEL_83;
    }
    v53 = v235;
    v54 = (1 << -(char)__clz(v236 + 1));
    if (v236 >= 0xFFFFFFFFFFFFFFFELL)
      v55 = 1;
    else
      v55 = v54;
    if (v55 <= v52 + 1)
      v56 = v52 + 1;
    else
      v56 = v55;
    v57 = malloc_type_malloc(8 * v56, 0x100004000313F17uLL);
    v58 = (char *)v57;
    v59 = (uint64_t *)v234[0];
    v60 = (uint64_t *)v234[1];
    if (v234[0] != v234[1])
    {
      v61 = (char *)v234[1] - (char *)v234[0] - 8;
      if (v61 < 0x18)
      {
        v62 = v57;
      }
      else
      {
        v62 = v57;
        if ((unint64_t)((char *)v57 - (char *)v234[0]) >= 0x20)
        {
          v63 = (v61 >> 3) + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v62 = (_QWORD *)((char *)v57 + v64);
          v65 = (__int128 *)((char *)v234[0] + 16);
          v66 = v57 + 1;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_67;
          v59 = (uint64_t *)((char *)v59 + v64);
        }
      }
      do
      {
        v69 = *v59++;
        *v62++ = v69;
      }
      while (v59 != v60);
    }
LABEL_67:
    if (v51 != v53)
      free(v234[0]);
    v49 = (unint64_t *)&v58[8 * v52];
    v234[0] = v58;
    v234[1] = v49;
    v236 = v56;
    goto LABEL_70;
  }
LABEL_83:
  for (j = (unint64_t *)v234[0]; j != v49; ++j)
    gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::updateRequestStatus(a1[18], *j, 3);
  v80 = a1[18];
  v81 = (_QWORD *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(v80);
  for (k = 0; k != 120; ++k)
    v28 = 0x100000001B3 * (v28 ^ aStdStringViewG_106[k + 38]);
  v83 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(v80, v28);
  v84 = (_QWORD *)v83;
  v85 = v83 + 32;
  v87 = v81[7];
  v86 = v81[8];
  if (*(_QWORD *)(v83 + 64) - *(_QWORD *)(v83 + 56) >= (unint64_t)(v86 - v87))
    v88 = v81 + 4;
  else
    v88 = (_QWORD *)(v83 + 32);
  if (v81 + 4 == v88)
  {
    v238 = a1;
    v239 = &v229;
    if (v87 != v86)
    {
      v158 = (float *)(v81[10] + 4);
      do
      {
        v159 = *(unsigned int *)(v87 + 4);
        v160 = v84[4];
        if (v159 >> 7 < (v84[5] - v160) >> 3)
        {
          v161 = *(_QWORD *)(v160 + 8 * (v159 >> 7));
          if (v161)
          {
            v162 = *(unsigned __int16 *)(v161 + 2 * (v159 & 0x7F));
            v164 = v84[7];
            v163 = v84[8];
            if (v162 < (v163 - v164) >> 3)
            {
              v165 = v164 + 8 * v162;
              if (v165 != v163 && *(_DWORD *)(v165 + 4) == (_DWORD)v159)
                md::ARProcessMeshComponentsLogic::preparePlaneMeshes(md::LayoutContext const&)::$_0::operator()(&v238, *(_QWORD *)v87, *(v158 - 1), *v158);
            }
          }
        }
        v87 += 8;
        v158 += 2;
      }
      while (v87 != v86);
    }
  }
  if ((_QWORD *)v85 == v88)
  {
    v238 = a1;
    v239 = &v229;
    v168 = v84[7];
    v167 = v84[8];
    while (v168 != v167)
    {
      v170 = *(unsigned int *)(v168 + 4);
      v171 = v81[4];
      v172 = (v81[5] - v171) >> 3;
      if (v170 >> 7 < v172)
      {
        v173 = *(_QWORD *)(v171 + 8 * (v170 >> 7));
        if (v173)
        {
          v174 = *(unsigned __int16 *)(v173 + 2 * (v170 & 0x7F));
          v176 = v81[7];
          v175 = v81[8];
          v177 = (v175 - v176) >> 3;
          if (v177 > v174)
          {
            v178 = v176 + 8 * v174;
            if (v178 != v175 && *(_DWORD *)(v178 + 4) == (_DWORD)v170)
            {
              v180 = *(_QWORD *)v168;
              v181 = *(_QWORD *)v168 >> 39;
              if (v181 < v172
                && (v182 = *(_QWORD *)(v171 + 8 * v181)) != 0
                && (v183 = *(unsigned __int16 *)(v182 + 2 * (HIDWORD(v180) & 0x7F)), v177 > v183)
                && ((v184 = v176 + 8 * v183, v184 != v175)
                  ? (v185 = *(_DWORD *)(v184 + 4) == HIDWORD(v180))
                  : (v185 = 0),
                    v185))
              {
                v169 = (float *)(v81[10] + 8 * v183);
              }
              else
              {
                v169 = (float *)v81[11];
              }
              md::ARProcessMeshComponentsLogic::preparePlaneMeshes(md::LayoutContext const&)::$_0::operator()(&v238, v180, *v169, v169[1]);
            }
          }
        }
      }
      v168 += 8;
    }
  }
  v89 = (unint64_t *)v229;
  v90 = v230;
  if (v229 != v230)
  {
    do
      gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::updateRequestStatus(a1[18], *v89++, 4);
    while (v89 != v90);
  }
  v91 = a1[18];
  v238 = v241;
  v239 = (void **)v241;
  *(_QWORD *)&v240 = v241;
  *((_QWORD *)&v240 + 1) = 4;
  v92 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v91);
  v93 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(v91);
  v94 = (_QWORD *)v93;
  v96 = v92[7];
  v95 = v92[8];
  if (*(_QWORD *)(v93 + 64) - *(_QWORD *)(v93 + 56) >= (unint64_t)(v95 - v96))
    v97 = v92 + 4;
  else
    v97 = (_QWORD *)(v93 + 32);
  v226 = v97;
  v228 = v93 + 32;
  if (v92 + 4 == v97 && v96 != v95)
  {
    v119 = (unsigned __int8 *)v92[10];
    while (1)
    {
      v121 = *(unsigned int *)(v96 + 4);
      v122 = v94[4];
      if (v121 >> 7 >= (v94[5] - v122) >> 3)
        goto LABEL_135;
      v123 = *(_QWORD *)(v122 + 8 * (v121 >> 7));
      if (!v123)
        goto LABEL_135;
      v124 = *(unsigned __int16 *)(v123 + 2 * (v121 & 0x7F));
      v126 = v94[7];
      v125 = v94[8];
      if (v124 >= (v125 - v126) >> 3)
        goto LABEL_135;
      v127 = v126 + 8 * v124;
      if (v127 == v125 || *(_DWORD *)(v127 + 4) != (_DWORD)v121)
        goto LABEL_135;
      v129 = *(_QWORD *)v96;
      gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v91, *(_QWORD *)v96, *v119);
      v130 = v238;
      v120 = v239;
      v131 = (((char *)v239 - (char *)v238) >> 3) + 1;
      if (*((_QWORD *)&v240 + 1) < v131)
        break;
LABEL_134:
      *v120 = (void *)v129;
      ++v239;
LABEL_135:
      ++v119;
      v96 += 8;
      if (v96 == v95)
        goto LABEL_102;
    }
    v224 = (uint64_t *)v240;
    v225 = ((char *)v239 - (char *)v238) >> 3;
    v132 = (1 << -(char)__clz(*((_QWORD *)&v240 + 1) + 1));
    if (*((_QWORD *)&v240 + 1) >= 0xFFFFFFFFFFFFFFFELL)
      v132 = 1;
    if (v132 <= v131)
      v133 = (((char *)v239 - (char *)v238) >> 3) + 1;
    else
      v133 = v132;
    v134 = malloc_type_malloc(8 * v133, 0x100004000313F17uLL);
    v135 = (uint64_t *)v134;
    v136 = v238;
    v137 = v239;
    if (v238 != (uint64_t *)v239)
    {
      v138 = (char *)v239 - (char *)v238 - 8;
      if (v138 < 0x18)
      {
        v139 = v134;
      }
      else
      {
        v139 = v134;
        if ((unint64_t)((char *)v134 - (char *)v238) >= 0x20)
        {
          v140 = (v138 >> 3) + 1;
          v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
          v139 = (_QWORD *)((char *)v134 + v141);
          v142 = (__int128 *)(v238 + 2);
          v143 = v134 + 1;
          v144 = v140 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v145 = *v142;
            *(v143 - 1) = *(v142 - 1);
            *v143 = v145;
            v142 += 2;
            v143 += 2;
            v144 -= 4;
          }
          while (v144);
          if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_159;
          v136 = (uint64_t *)((char *)v136 + v141);
        }
      }
      do
      {
        v146 = *v136++;
        *v139++ = v146;
      }
      while (v136 != (uint64_t *)v137);
    }
LABEL_159:
    if (v130 != v224)
      free(v238);
    v120 = (void **)&v135[v225];
    v238 = v135;
    v239 = v120;
    *((_QWORD *)&v240 + 1) = v133;
    goto LABEL_134;
  }
LABEL_102:
  if ((_QWORD *)v228 == v226)
  {
    v186 = v94[7];
    v187 = v94[8];
    while (1)
    {
      if (v186 == v187)
        goto LABEL_103;
      v189 = *(unsigned int *)(v186 + 4);
      v190 = v92[4];
      v191 = (v92[5] - v190) >> 3;
      if (v189 >> 7 < v191)
      {
        v192 = *(_QWORD *)(v190 + 8 * (v189 >> 7));
        if (v192)
        {
          v193 = *(unsigned __int16 *)(v192 + 2 * (v189 & 0x7F));
          v195 = v92[7];
          v194 = v92[8];
          v196 = (v194 - v195) >> 3;
          if (v196 > v193)
          {
            v197 = v195 + 8 * v193;
            if (v197 != v194 && *(_DWORD *)(v197 + 4) == (_DWORD)v189)
              break;
          }
        }
      }
LABEL_210:
      v186 += 8;
    }
    v199 = *(_QWORD *)v186;
    v200 = *(_QWORD *)v186 >> 39;
    if (v200 < v191
      && (v201 = *(_QWORD *)(v190 + 8 * v200)) != 0
      && (v202 = *(unsigned __int16 *)(v201 + 2 * (HIDWORD(v199) & 0x7F)), v196 > v202)
      && ((v203 = v195 + 8 * v202, v203 != v194) ? (v204 = *(_DWORD *)(v203 + 4) == HIDWORD(v199)) : (v204 = 0), v204))
    {
      v205 = (unsigned __int8 *)(v92[10] + v202);
    }
    else
    {
      v205 = (unsigned __int8 *)v92[11];
    }
    gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v91, *(_QWORD *)v186, *v205);
    v206 = v238;
    v188 = v239;
    v207 = ((char *)v239 - (char *)v238) >> 3;
    if (*((_QWORD *)&v240 + 1) >= (unint64_t)(v207 + 1))
    {
LABEL_209:
      *v188 = (void *)v199;
      ++v239;
      goto LABEL_210;
    }
    v208 = (uint64_t *)v240;
    v209 = (1 << -(char)__clz(*((_QWORD *)&v240 + 1) + 1));
    if (*((_QWORD *)&v240 + 1) >= 0xFFFFFFFFFFFFFFFELL)
      v209 = 1;
    if (v209 <= v207 + 1)
      v210 = v207 + 1;
    else
      v210 = v209;
    v211 = malloc_type_malloc(8 * v210, 0x100004000313F17uLL);
    v212 = (uint64_t *)v211;
    v213 = v238;
    v214 = v239;
    if (v238 != (uint64_t *)v239)
    {
      v215 = (char *)v239 - (char *)v238 - 8;
      if (v215 < 0x18)
      {
        v216 = v211;
      }
      else
      {
        v216 = v211;
        if ((unint64_t)((char *)v211 - (char *)v238) >= 0x20)
        {
          v217 = (v215 >> 3) + 1;
          v218 = 8 * (v217 & 0x3FFFFFFFFFFFFFFCLL);
          v216 = (_QWORD *)((char *)v211 + v218);
          v219 = (__int128 *)(v238 + 2);
          v220 = v211 + 1;
          v221 = v217 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v222 = *v219;
            *(v220 - 1) = *(v219 - 1);
            *v220 = v222;
            v219 += 2;
            v220 += 2;
            v221 -= 4;
          }
          while (v221);
          if (v217 == (v217 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_244;
          v213 = (uint64_t *)((char *)v213 + v218);
        }
      }
      do
      {
        v223 = *v213++;
        *v216++ = v223;
      }
      while (v213 != (uint64_t *)v214);
    }
LABEL_244:
    if (v206 != v208)
      free(v238);
    v188 = (void **)&v212[v207];
    v238 = v212;
    v239 = v188;
    *((_QWORD *)&v240 + 1) = v210;
    goto LABEL_209;
  }
LABEL_103:
  v99 = (unint64_t *)v238;
  v100 = (unint64_t *)v239;
  if (v238 != (uint64_t *)v239)
  {
    do
    {
      v101 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(v91);
      gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::remove(v101, *v99++);
    }
    while (v99 != v100);
    v99 = (unint64_t *)v238;
  }
  if (v99 != (unint64_t *)v240)
    free(v99);
  if (v229 != v231)
    free(v229);
  if (v234[0] != v235)
    free(v234[0]);
}

void sub_19F5883DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  if (a13 != a15)
    free(a13);
  if (a21 != a23)
  {
    free(a21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_775[v16++ + 38]);
  while (v16 != 122);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Initiated>]";
  *(_QWORD *)(v14 + 24) = 122;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4038;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 122; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_775[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Initiated>]";
  v22[2] = 122;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F5887E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEB22B1DADB49C565;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEB22B1DADB49C565;
      if (*(_QWORD *)&v3 <= 0xEB22B1DADB49C565)
        v5 = 0xEB22B1DADB49C565 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEB22B1DADB49C565;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEB22B1DADB49C565)
            {
              if (v7[2] == 0xEB22B1DADB49C565)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEB22B1DADB49C565)
          {
            if (v7[2] == 0xEB22B1DADB49C565)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::XYPlaneMeshRequestData]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2208;
  *(_QWORD *)(v11 + 8) = 0xEB22B1DADB49C565;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEB22B1DADB49C565, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEB22B1DADB49C565;
  v15[1] = "arComponents::XYPlaneMeshRequestData]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEB22B1DADB49C565, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F588A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_106[v16++ + 38]);
  while (v16 != 120);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Pending>]";
  *(_QWORD *)(v14 + 24) = 120;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4068;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 120; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_106[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Pending>]";
  v22[2] = 120;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F588C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::updateRequestStatus(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  char *v53;
  _QWORD *j;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *i;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;

  v6 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  v7 = v6[4];
  if (a2 >> 39 < (v6[5] - v7) >> 3)
  {
    v8 = *(_QWORD *)(v7 + 8 * (a2 >> 39));
    if (v8)
    {
      v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      v11 = v6[7];
      v10 = v6[8];
      if (v9 < (v10 - v11) >> 3)
      {
        v12 = v11 + 8 * v9;
        if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2))
        {
          v14 = v6[10];
          v15 = (_BYTE *)(v14 + v9);
          if (v14 + v9 != v6[11] && v14 != 0)
          {
            v17 = *v15;
            if (v17 != a3)
            {
              gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(a1, a2, v17);
              if (a3 == 4)
              {
                v26 = 0;
                v27 = 0xCBF29CE484222325;
                do
                  v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_776[v26++ + 38]);
                while (v26 != 122);
                v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(a1, v27);
                v61 = a2;
                v29 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v28 + 4, (uint64_t)&v61);
                if ((v30 & 1) != 0)
                {
                  v38 = (_BYTE *)v28[11];
                  v37 = v28[12];
                  if ((unint64_t)v38 >= v37)
                  {
                    v46 = (char *)v28[10];
                    v47 = v38 - v46;
                    v48 = v38 - v46 + 1;
                    if (v48 < 0)
                      goto LABEL_74;
                    v49 = v37 - (_QWORD)v46;
                    if (2 * v49 > v48)
                      v48 = 2 * v49;
                    if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
                      v50 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v50 = v48;
                    if (v50)
                      v51 = (char *)operator new(v50);
                    else
                      v51 = 0;
                    v56 = &v51[v50];
                    v39 = (uint64_t)&v51[v47 + 1];
                    v57 = (char *)(v46 - v38);
                    if (v46 == v38)
                      v57 = 0;
                    v28[10] = (uint64_t)&v51[v47 + (_QWORD)v57];
                    v28[11] = v39;
                    v28[12] = (uint64_t)v56;
                    if (v46)
                      operator delete(v46);
                  }
                  else
                  {
                    v39 = (uint64_t)(v38 + 1);
                  }
                  v28[11] = v39;
                  v31 = v28[31];
                }
                else
                {
                  v31 = v28[31];
                  if (v28[10] + (((uint64_t)v29 - v28[7]) >> 3) != v28[11])
                  {
                    v32 = (_QWORD *)v28[16];
                    if (v32)
                    {
                      while (1)
                      {
                        v63 = &v61;
                        v64 = 1;
                        v62 = v31;
                        v33 = v32[6];
                        if (!v33)
                          goto LABEL_73;
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v33 + 48))(v33, &v62, &v63);
                        v32 = (_QWORD *)*v32;
                        if (!v32)
                          goto LABEL_71;
                      }
                    }
                    goto LABEL_71;
                  }
                }
                for (i = (_QWORD *)v28[22]; i; i = (_QWORD *)*i)
                {
                  v63 = &v61;
                  v64 = 1;
                  v62 = v31;
                  v59 = i[6];
                  if (!v59)
                    goto LABEL_73;
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v59 + 48))(v59, &v62, &v63);
                }
              }
              else if (a3 == 3)
              {
                v18 = 0;
                v19 = 0xCBF29CE484222325;
                do
                  v19 = 0x100000001B3 * (v19 ^ aStdStringViewG_106[v18++ + 38]);
                while (v18 != 120);
                v20 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(a1, v19);
                v61 = a2;
                v21 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v20 + 4, (uint64_t)&v61);
                if ((v22 & 1) != 0)
                {
                  v35 = (_BYTE *)v20[11];
                  v34 = v20[12];
                  if ((unint64_t)v35 >= v34)
                  {
                    v40 = (char *)v20[10];
                    v41 = v35 - v40;
                    v42 = v35 - v40 + 1;
                    if (v42 < 0)
                      goto LABEL_74;
                    v43 = v34 - (_QWORD)v40;
                    if (2 * v43 > v42)
                      v42 = 2 * v43;
                    if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
                      v44 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v44 = v42;
                    if (v44)
                      v45 = (char *)operator new(v44);
                    else
                      v45 = 0;
                    v52 = &v45[v44];
                    v36 = (uint64_t)&v45[v41 + 1];
                    v53 = (char *)(v40 - v35);
                    if (v40 == v35)
                      v53 = 0;
                    v20[10] = (uint64_t)&v45[v41 + (_QWORD)v53];
                    v20[11] = v36;
                    v20[12] = (uint64_t)v52;
                    if (v40)
                      operator delete(v40);
                  }
                  else
                  {
                    v36 = (uint64_t)(v35 + 1);
                  }
                  v20[11] = v36;
                  v23 = v20[31];
                }
                else
                {
                  v23 = v20[31];
                  if (v20[10] + (((uint64_t)v21 - v20[7]) >> 3) != v20[11])
                  {
                    v24 = (_QWORD *)v20[16];
                    if (v24)
                    {
                      while (1)
                      {
                        v63 = &v61;
                        v64 = 1;
                        v62 = v23;
                        v25 = v24[6];
                        if (!v25)
                          break;
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v25 + 48))(v25, &v62, &v63);
                        v24 = (_QWORD *)*v24;
                        if (!v24)
                          goto LABEL_71;
                      }
LABEL_73:
                      std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
                      abort();
                    }
                    goto LABEL_71;
                  }
                }
                for (j = (_QWORD *)v20[22]; j; j = (_QWORD *)*j)
                {
                  v63 = &v61;
                  v64 = 1;
                  v62 = v23;
                  v55 = j[6];
                  if (!v55)
                    goto LABEL_73;
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v55 + 48))(v55, &v62, &v63);
                }
              }
LABEL_71:
              *v15 = a3;
              v60 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(a1);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v60, a2);
            }
          }
        }
      }
    }
  }
}

void md::ARProcessMeshComponentsLogic::preparePlaneMeshes(md::LayoutContext const&)::$_0::operator()(_QWORD *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __int128 v18;
  float16x8_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x2_t v24;
  __int32 v25;
  float32x4_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  __int128 v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  int16x8_t *p_on_zero_shared;
  int16x8_t *v51;
  unint64_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  unint64_t v57;
  _WORD *v58;
  char *v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float32x4_t v79;
  float32x4_t v80;
  char *v81;
  unint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  const float *v93;
  unint64_t v94;
  char *v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t **v121;
  uint64_t **v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t *v173;
  char *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 *v179;
  _OWORD *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v186;
  char *v187;
  uint64_t v188;
  _BYTE *v190;
  __int128 v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  __int128 v194;
  unint64_t v195;
  std::__shared_weak_count_vtbl *v196;
  float32x4_t v197;
  unint64_t v198;
  float16x8_t *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  unint64_t v203;
  float16x8_t *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  unint64_t v208;
  unint64_t v209;
  __int16 v210;
  std::__shared_weak_count_vtbl *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  void *__p;
  _BYTE *v215;
  uint64_t v216;
  unint64_t v217[3];
  char *v218;
  char *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  float v225[4];
  uint64_t v226;
  float32x4x3_t v227;
  float32x4x3_t v228;

  v226 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v225[0] = a3;
  *(_QWORD *)&v225[1] = 0;
  v218 = 0;
  v219 = 0;
  v220 = 0;
  memset(v217, 0, sizeof(v217));
  __p = 0;
  v215 = 0;
  v216 = 0;
  md::GeometryLogic::createXYPlane(&v218, v217, (unint64_t *)&__p, 0.0, 0.0);
  v8 = v218;
  v7 = v219;
  v9 = __p;
  v190 = v215;
  v10 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v11 = (v7 - v8) / 12;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04F0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], 12, 0, 0, 6, v11);
  v10[9].__shared_weak_owners_ = (uint64_t)"/Plane/VertexData";
  v10[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedVboReflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B81E0;
  v10[9].__shared_owners_ = (uint64_t)&unk_1E42B8200;
  v212 = v12;
  v213 = v10;
  v207 = 0uLL;
  v13 = v10[1].__shared_owners_ * v11;
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = v12;
  if (v13)
    v15 = v10[4].__vftable;
  else
    v15 = 0;
  v207 = v14;
  v208 = 0;
  v209 = v13;
  v211 = v15;
  v210 = 1;
  v16 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v187 = v7;
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
  v17 = ggl::BufferData::BufferData((uint64_t)&v16[1], qword_1EE5517E8, 3, 1, 6, (v7 - v8) / 12);
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F28;
  v205 = v17;
  v206 = v16;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = v17;
  if (v16[1].__shared_owners_ * v11)
    v19 = (float16x8_t *)v16[4].__vftable;
  else
    v19 = 0;
  v186 = a1;
  v188 = a2;
  v202 = v18;
  v203 = v16[1].__shared_owners_ * v11;
  v204 = v19;
  v20 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
  v21 = ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE5517A8, 3, 1, 6, v11);
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F48;
  v200 = v21;
  v201 = v20;
  v22.i64[0] = 0;
  v22.i64[1] = v21;
  v197 = v22;
  v198 = v20[1].__shared_owners_ * v11;
  v199 = (float16x8_t *)v20[4].__vftable;
  v23.i32[0] = *((_DWORD *)v8 + 2);
  v22.i64[0] = *(_QWORD *)v8;
  v15->~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))v8;
  LODWORD(v15->~__shared_weak_count_0) = v23.i32[0];
  v24 = *(int32x2_t *)(v8 + 12);
  v25 = *((_DWORD *)v8 + 5);
  *(int32x2_t *)((char *)&v15->~__shared_weak_count_0 + 4) = v24;
  HIDWORD(v15->__on_zero_shared) = v25;
  v26.i64[0] = *((_QWORD *)v8 + 3);
  v27 = *((_DWORD *)v8 + 8);
  v15->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v26.i64[0];
  LODWORD(v15->__on_zero_shared_weak) = v27;
  v28 = *(_QWORD *)(v8 + 36);
  v29 = *((_DWORD *)v8 + 11);
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v15->__on_zero_shared_weak + 4) = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  *(int32x2_t *)v30.f32 = vzip1_s32(*(int32x2_t *)v22.f32, v24);
  v30.i64[1] = __PAIR64__(v28, v26.u32[0]);
  HIDWORD(v15[1].~__shared_weak_count) = v29;
  v31.i64[0] = __PAIR64__(v24.u32[1], v22.u32[1]);
  v31.i64[1] = __PAIR64__(HIDWORD(v28), vdup_lane_s32(*(int32x2_t *)v26.f32, 1).u32[0]);
  v23.i32[1] = v25;
  v23.i64[1] = __PAIR64__(v29, v27);
  __asm { FMOV            V5.4S, #1.0 }
  v37 = vdivq_f32(_Q5, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v30, v30), v31, v31), v23, v23)));
  v38 = (int32x4_t)vmlaq_f32(_Q5, v23, v37);
  v39 = (int32x4_t)vmulq_f32(v37, (float32x4_t)vdupq_n_s32(0x3E90019Du));
  *(int32x2_t *)&v22.u32[2] = v24;
  v26.i64[1] = v28;
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  *v199 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v39, v39), v22), (float32x4_t)vzip1q_s32(v38, v38)), v40)), vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v39, v39), v26), (float32x4_t)vzip2q_s32(v38, v38)), v40));
  v41 = (float32x4_t)vdupq_lane_s64(__SPAIR64__(LODWORD(a4), LODWORD(v225[0])), 0);
  *v19 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(*(float32x4_t *)v217[0], v41)), vmulq_f32(*(float32x4_t *)(v217[0] + 16), v41));
  v42 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v42->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  v44 = (v190 - v9) >> 2;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v42[1], 2, 1, 0, 6, v44);
  v45 = 0;
  LODWORD(v42[10].__vftable) = 0;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v42[1].__shared_owners_ = 2;
  v42[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v42[9].__shared_weak_owners_ = (uint64_t)"/Plane/IndexData";
  *(_QWORD *)&v46 = 0;
  if ((unint64_t)(v190 - v9) >= 4)
    v45 = v42[4].__vftable;
  *((_QWORD *)&v46 + 1) = v42 + 1;
  v194 = v46;
  v195 = 2 * v44;
  v196 = v45;
  if (v190 != v9)
  {
    v47 = (char *)__p;
    if (v44 <= 1)
      v48 = 1;
    else
      v48 = (v190 - v9) >> 2;
    if (v48 <= 0xF)
    {
      v49 = 0;
LABEL_18:
      v57 = v48 - v49;
      v58 = (_WORD *)((char *)v45 + 2 * v49);
      v59 = &v47[4 * v49];
      do
      {
        v60 = *(_DWORD *)v59;
        v59 += 4;
        *v58++ = v60;
        --v57;
      }
      while (v57);
      goto LABEL_20;
    }
    v49 = v48 & 0xFFFFFFFFFFFFFFF0;
    p_on_zero_shared = (int16x8_t *)&v45->__on_zero_shared;
    v51 = (int16x8_t *)((char *)__p + 32);
    v52 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = v51[-2];
      v53 = v51[-1];
      v56 = *v51;
      v55 = v51[1];
      v51 += 4;
      p_on_zero_shared[-1] = vuzp1q_s16(v54, v53);
      *p_on_zero_shared = vuzp1q_s16(v56, v55);
      p_on_zero_shared += 2;
      v52 -= 16;
    }
    while (v52);
    if (v48 != v49)
      goto LABEL_18;
  }
LABEL_20:
  v61 = operator new(0xA8uLL);
  v62 = v61;
  v61[1] = 0;
  v61[2] = 0;
  *v61 = &off_1E42E48F8;
  v63 = v61 + 3;
  v223 = v212;
  v224 = v213;
  if (v213)
  {
    v64 = &v213->__shared_owners_;
    do
      v65 = __ldxr((unint64_t *)v64);
    while (__stxr(v65 + 1, (unint64_t *)v64));
  }
  v221 = v42 + 1;
  v222 = v42;
  do
    v66 = __ldxr(p_shared_owners);
  while (__stxr(v66 + 1, p_shared_owners));
  ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)(v61 + 3), (uint64_t)"/DV/CustomPlane", &v223, (uint64_t *)&v221);
  do
    v67 = __ldaxr(p_shared_owners);
  while (__stlxr(v67 - 1, p_shared_owners));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  v68 = v224;
  if (v224)
  {
    v69 = (unint64_t *)&v224->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v193 = (std::__shared_weak_count *)v62;
  if (v187 == v8)
  {
    v76 = 3.4028e38;
    v78 = -3.4028e38;
    v77 = -3.4028e38;
    v73 = -3.4028e38;
    v75 = 3.4028e38;
    v74 = 3.4028e38;
    goto LABEL_46;
  }
  if (v11 <= 1)
    v71 = 1;
  else
    v71 = v11;
  if (v71 <= 7)
  {
    v72 = 0;
    v73 = -3.4028e38;
    v74 = 3.4028e38;
    v75 = 3.4028e38;
    v76 = 3.4028e38;
    v77 = -3.4028e38;
    v78 = -3.4028e38;
LABEL_44:
    v94 = v71 - v72;
    v95 = &v218[12 * v72 + 8];
    do
    {
      v96 = *((float *)v95 - 2);
      v97 = *((float *)v95 - 1);
      v74 = fminf(v96, v74);
      v73 = fmaxf(v73, v96);
      v75 = fminf(v97, v75);
      v77 = fmaxf(v77, v97);
      v98 = *(float *)v95;
      v95 += 12;
      v76 = fminf(v98, v76);
      v78 = fmaxf(v78, v98);
      --v94;
    }
    while (v94);
    goto LABEL_46;
  }
  v79 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v72 = v71 & 0xFFFFFFFFFFFFFFF8;
  v80.i64[0] = 0x80000000800000;
  v80.i64[1] = 0x80000000800000;
  v81 = v218;
  v82 = v71 & 0xFFFFFFFFFFFFFFF8;
  v83 = v79;
  v84 = v79;
  v85 = v79;
  v86 = v79;
  v87 = v79;
  v88.i64[0] = 0x80000000800000;
  v88.i64[1] = 0x80000000800000;
  v89.i64[0] = 0x80000000800000;
  v89.i64[1] = 0x80000000800000;
  v90.i64[0] = 0x80000000800000;
  v90.i64[1] = 0x80000000800000;
  v91.i64[0] = 0x80000000800000;
  v91.i64[1] = 0x80000000800000;
  v92.i64[0] = 0x80000000800000;
  v92.i64[1] = 0x80000000800000;
  do
  {
    v93 = (const float *)v81;
    v81 += 96;
    v227 = vld3q_f32(v93);
    v93 += 12;
    v79 = vminnmq_f32(v227.val[0], v79);
    v228 = vld3q_f32(v93);
    v83 = vminnmq_f32(v228.val[0], v83);
    v80 = vmaxnmq_f32(v80, v227.val[0]);
    v88 = vmaxnmq_f32(v88, v228.val[0]);
    v84 = vminnmq_f32(v227.val[1], v84);
    v85 = vminnmq_f32(v228.val[1], v85);
    v89 = vmaxnmq_f32(v89, v227.val[1]);
    v90 = vmaxnmq_f32(v90, v228.val[1]);
    v86 = vminnmq_f32(v227.val[2], v86);
    v87 = vminnmq_f32(v228.val[2], v87);
    v91 = vmaxnmq_f32(v91, v227.val[2]);
    v92 = vmaxnmq_f32(v92, v228.val[2]);
    v82 -= 8;
  }
  while (v82);
  v78 = vmaxnmvq_f32(vmaxnmq_f32(v91, v92));
  v77 = vmaxnmvq_f32(vmaxnmq_f32(v89, v90));
  v73 = vmaxnmvq_f32(vmaxnmq_f32(v80, v88));
  v76 = vminnmvq_f32(vminnmq_f32(v86, v87));
  v75 = vminnmvq_f32(vminnmq_f32(v84, v85));
  v74 = vminnmvq_f32(vminnmq_f32(v79, v83));
  if (v71 != v72)
    goto LABEL_44;
LABEL_46:
  v99 = v205;
  v100 = v206;
  v223 = v205;
  v224 = v206;
  if (v206)
  {
    v101 = (unint64_t *)&v206->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  if (v205)
  {
    v104 = (uint64_t **)(v62 + 18);
    v103 = (uint64_t *)v62[18];
    if (v103)
    {
      while (1)
      {
        v104 = (uint64_t **)v103;
        if (!v103[4])
          break;
        v103 = (uint64_t *)*v103;
        if (!*v104)
          goto LABEL_53;
      }
      v105 = v103;
      if (!v206)
        goto LABEL_60;
    }
    else
    {
LABEL_53:
      v105 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v62[19] + 16))(v62[19], 56, 8);
      *v105 = 0;
      v105[1] = 0;
      v105[5] = 0;
      v105[6] = 0;
      v105[4] = 0;
      v105[2] = (uint64_t)v104;
      *v104 = v105;
      v106 = *(_QWORD *)v62[17];
      v107 = v105;
      if (v106)
      {
        v62[17] = v106;
        v107 = *v104;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v62[18], v107);
      ++v62[20];
      v99 = v223;
      v100 = v224;
      if (!v224)
        goto LABEL_60;
    }
    v108 = (unint64_t *)&v100->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
LABEL_60:
    v110 = (std::__shared_weak_count *)v105[6];
    v105[5] = v99;
    v105[6] = (uint64_t)v100;
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  v113 = v224;
  if (v224)
  {
    v114 = (unint64_t *)&v224->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v200;
  v117 = v201;
  v221 = (std::__shared_weak_count *)v200;
  v222 = v201;
  if (v201)
  {
    v118 = (unint64_t *)&v201->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  if (v200)
  {
    v121 = (uint64_t **)(v63 + 15);
    v120 = (uint64_t *)v63[15];
    if (v120)
    {
      while (1)
      {
        while (1)
        {
          v122 = (uint64_t **)v120;
          v123 = v120[4];
          if (v123 < 2)
            break;
          v120 = *v122;
          v121 = v122;
          if (!*v122)
            goto LABEL_81;
        }
        if (v123)
          break;
        v120 = v122[1];
        if (!v120)
        {
          v121 = v122 + 1;
          goto LABEL_81;
        }
      }
      v124 = (uint64_t *)v122;
      if (!v201)
        goto LABEL_88;
    }
    else
    {
      v122 = (uint64_t **)(v63 + 15);
LABEL_81:
      v124 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v63[16] + 16))(v63[16], 56, 8);
      v124[5] = 0;
      v124[6] = 0;
      v124[4] = 1;
      *v124 = 0;
      v124[1] = 0;
      v124[2] = (uint64_t)v122;
      *v121 = v124;
      v125 = *(_QWORD *)v63[14];
      v126 = v124;
      if (v125)
      {
        v63[14] = v125;
        v126 = *v121;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v63[15], v126);
      ++v63[17];
      v116 = (uint64_t)v221;
      v117 = v222;
      if (!v222)
        goto LABEL_88;
    }
    v127 = (unint64_t *)&v117->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
LABEL_88:
    v129 = (std::__shared_weak_count *)v124[6];
    v124[5] = v116;
    v124[6] = (uint64_t)v117;
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
  }
  v132 = v222;
  if (v222)
  {
    v133 = (unint64_t *)&v222->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v193)
  {
    v135 = (unint64_t *)&v193->__shared_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    *(_QWORD *)&v191 = __PAIR64__(LODWORD(v75), LODWORD(v74));
    *((_QWORD *)&v191 + 1) = __PAIR64__(LODWORD(v73), LODWORD(v76));
    v192 = __PAIR64__(LODWORD(v78), LODWORD(v77));
    do
      v137 = __ldaxr(v135);
    while (__stlxr(v137 - 1, v135));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  else
  {
    *(_QWORD *)&v191 = __PAIR64__(LODWORD(v75), LODWORD(v74));
    *((_QWORD *)&v191 + 1) = __PAIR64__(LODWORD(v73), LODWORD(v76));
    v192 = __PAIR64__(LODWORD(v78), LODWORD(v77));
  }
  if (v196 && v195)
  {
    if ((_QWORD)v194 && *(_BYTE *)(*((_QWORD *)&v194 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v194 + 64))();
    v139 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 56);
    v138 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 64);
    if (v138 == v139)
      v139 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v194 + 1) + 72);
    if (v139)
      v139 = 0;
    if (v138 <= v195)
      v138 = v195;
    if (v138 == v139)
      v138 = v139 + *(_QWORD *)(*((_QWORD *)&v194 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v194 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v194 + 1) + 56) = v139;
    *(_QWORD *)(*((_QWORD *)&v194 + 1) + 64) = v138;
  }
  if (v42)
  {
    v140 = (unint64_t *)&v42->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v199 && v198)
  {
    if (v197.i64[0] && *(_BYTE *)(v197.i64[1] + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v197.i64[0] + 64))();
    v143 = *(_QWORD *)(v197.i64[1] + 56);
    v142 = *(_QWORD *)(v197.i64[1] + 64);
    if (v142 == v143)
      v143 = *(_QWORD *)(v197.i64[1] + 80) - *(_QWORD *)(v197.i64[1] + 72);
    if (v143)
      v143 = 0;
    if (v142 <= v198)
      v142 = v198;
    if (v142 == v143)
      v142 = v143 + *(_QWORD *)(v197.i64[1] + 80) - *(_QWORD *)(v197.i64[1] + 72);
    *(_QWORD *)(v197.i64[1] + 56) = v143;
    *(_QWORD *)(v197.i64[1] + 64) = v142;
  }
  if (v201)
  {
    v144 = (unint64_t *)&v201->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  if (v204 && v203)
  {
    if ((_QWORD)v202 && *(_BYTE *)(*((_QWORD *)&v202 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v202 + 64))();
    v147 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 56);
    v146 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 64);
    if (v146 == v147)
      v147 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v202 + 1) + 72);
    if (v147)
      v147 = 0;
    if (v146 <= v203)
      v146 = v203;
    if (v146 == v147)
      v146 = v147 + *(_QWORD *)(*((_QWORD *)&v202 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v202 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v202 + 1) + 56) = v147;
    *(_QWORD *)(*((_QWORD *)&v202 + 1) + 64) = v146;
  }
  if (v206)
  {
    v148 = (unint64_t *)&v206->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v211 && v209 != v208)
  {
    v150 = *((_QWORD *)&v207 + 1);
    if ((_QWORD)v207 && *(_BYTE *)(*((_QWORD *)&v207 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v207 + 64))();
    if ((_BYTE)v210 && !HIBYTE(v210))
    {
      v152 = *(_QWORD *)(*((_QWORD *)&v207 + 1) + 56);
      v151 = *(_QWORD *)(*((_QWORD *)&v207 + 1) + 64);
      if (v151 == v152)
        v152 = *(_QWORD *)(*((_QWORD *)&v207 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v207 + 1) + 72);
      if (v208 < v152)
        v152 = v208;
      if (v151 <= v209)
        v151 = v209;
      if (v151 == v152)
        v151 = v152 + *(_QWORD *)(*((_QWORD *)&v207 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v207 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v207 + 1) + 56) = v152;
      *(_QWORD *)(v150 + 64) = v151;
    }
  }
  if (v213)
  {
    v153 = &v213->__shared_owners_;
    do
      v154 = __ldaxr((unint64_t *)v153);
    while (__stlxr(v154 - 1, (unint64_t *)v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  if (__p)
    operator delete(__p);
  if (v217[0])
    operator delete((void *)v217[0]);
  if (v218)
    operator delete(v218);
  v155 = *(_QWORD *)(v6 + 144);
  *(_QWORD *)&v207 = v63;
  *((_QWORD *)&v207 + 1) = v193;
  if (v193)
  {
    v156 = (unint64_t *)&v193->__shared_owners_;
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 1, v156));
  }
  v158 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>(v155);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v158, v188, (uint64_t *)&v207);
  if (v193)
  {
    v159 = (unint64_t *)&v193->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v161 = *(_QWORD *)(v6 + 144);
  v207 = v191;
  v208 = v192;
  v162 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>(v161);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v162, v188, &v207);
  v163 = v186[1];
  v165 = *(char **)v163;
  v164 = *(uint64_t **)(v163 + 8);
  v166 = ((uint64_t)v164 - *(_QWORD *)v163) >> 3;
  v167 = *(_QWORD *)(v163 + 24);
  if (v167 < v166 + 1)
  {
    v168 = *(char **)(v163 + 16);
    v169 = (1 << -(char)__clz(v167 + 1));
    if (v167 >= 0xFFFFFFFFFFFFFFFELL)
      v169 = 1;
    if (v169 <= v166 + 1)
      v170 = v166 + 1;
    else
      v170 = v169;
    v171 = (char *)malloc_type_malloc(8 * v170, 0x100004000313F17uLL);
    v172 = v171;
    v173 = *(uint64_t **)v163;
    v174 = *(char **)(v163 + 8);
    if (*(char **)v163 == v174)
      goto LABEL_213;
    v175 = v174 - (char *)v173 - 8;
    if (v175 < 0x18)
    {
      v176 = v171;
    }
    else
    {
      v176 = v171;
      if ((unint64_t)(v171 - (char *)v173) >= 0x20)
      {
        v177 = (v175 >> 3) + 1;
        v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
        v176 = &v171[v178];
        v179 = (__int128 *)(v173 + 2);
        v180 = v171 + 16;
        v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v182 = *v179;
          *(v180 - 1) = *(v179 - 1);
          *v180 = v182;
          v179 += 2;
          v180 += 2;
          v181 -= 4;
        }
        while (v181);
        if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_213;
        v173 = (uint64_t *)((char *)v173 + v178);
      }
    }
    do
    {
      v183 = *v173++;
      *(_QWORD *)v176 = v183;
      v176 += 8;
    }
    while (v173 != (uint64_t *)v174);
LABEL_213:
    if (v165 != v168)
      free(*(void **)v163);
    v164 = (uint64_t *)&v172[8 * v166];
    *(_QWORD *)v163 = v172;
    *(_QWORD *)(v163 + 8) = v164;
    *(_QWORD *)(v163 + 24) = v170;
  }
  *v164 = v188;
  *(_QWORD *)(v163 + 8) += 8;
  if (v193)
  {
    v184 = (unint64_t *)&v193->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
}

void sub_19F58A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p)
{
  uint64_t v55;
  void *v57;
  void *v58;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v55 - 184);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a47);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  if (__p)
  {
    operator delete(__p);
    v57 = *(void **)(v55 - 248);
    if (!v57)
    {
LABEL_3:
      v58 = *(void **)(v55 - 224);
      if (!v58)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v57 = *(void **)(v55 - 248);
    if (!v57)
      goto LABEL_3;
  }
  operator delete(v57);
  v58 = *(void **)(v55 - 224);
  if (!v58)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v58);
  _Unwind_Resume(a1);
}

void sub_19F58A0D0()
{
  JUMPOUT(0x19F58A08CLL);
}

void sub_19F58A0D8()
{
  JUMPOUT(0x19F58A08CLL);
}

void sub_19F58A0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  JUMPOUT(0x19F58A0F4);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEA76D1997073A299;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEA76D1997073A299;
      if (*(_QWORD *)&v3 <= 0xEA76D1997073A299)
        v5 = 0xEA76D1997073A299 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEA76D1997073A299;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEA76D1997073A299)
            {
              if (v7[2] == 0xEA76D1997073A299)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEA76D1997073A299)
          {
            if (v7[2] == 0xEA76D1997073A299)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>]";
  *(_QWORD *)(v11 + 24) = 65;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B40C8;
  *(_QWORD *)(v11 + 8) = 0xEA76D1997073A299;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEA76D1997073A299, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEA76D1997073A299;
  v15[1] = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>]";
  v15[2] = 65;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEA76D1997073A299, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F58A310(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE3EFBE7A1F01161ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE3EFBE7A1F01161ELL;
      if (*(_QWORD *)&v3 <= 0xE3EFBE7A1F01161ELL)
        v5 = 0xE3EFBE7A1F01161ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE3EFBE7A1F01161ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE3EFBE7A1F01161ELL)
            {
              if (v7[2] == 0xE3EFBE7A1F01161ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE3EFBE7A1F01161ELL)
          {
            if (v7[2] == 0xE3EFBE7A1F01161ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange]";
  *(_QWORD *)(v11 + 24) = 76;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3FD8;
  *(_QWORD *)(v11 + 8) = 0xE3EFBE7A1F01161ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE3EFBE7A1F01161ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE3EFBE7A1F01161ELL;
  v15[1] = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange]";
  v15[2] = 76;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE3EFBE7A1F01161ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F58A538(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>();
}

void gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(uint64_t a1, size_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t **v19;
  unint64_t *v21;
  unint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t i;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  uint64_t v58;
  _QWORD v59[2];

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_786[v6++ + 38]);
  while (v6 != 116);
  v9 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v8);
  v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = v9[7];
      v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = HIDWORD(a2);
        v16 = v14 + 8 * v12;
        if (v16 != v13 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
        {
          v18 = v9[10];
          v19 = (unint64_t **)(v18 + 24 * v12);
          if (v19 != (unint64_t **)v9[11] && v18 != 0)
          {
            v21 = *v19;
            v22 = v19[1];
            if (*v19 != v22)
            {
LABEL_16:
              v23 = *(unsigned __int16 *)(a1 + 40);
              v24 = *(_QWORD *)(a1 + 48);
              v25 = (*(_QWORD *)(a1 + 56) - v24) >> 3;
              while (1)
              {
                v26 = *v21;
                v27 = HIDWORD(*v21);
                if (v23 != (unsigned __int16)*v21 || v25 <= v27)
                  break;
                v29 = (unsigned __int16 *)(v24 + 8 * v27);
                if (*v29 != v23 || v29[1] != WORD1(v26) || *((_DWORD *)v29 + 1) != (_DWORD)v27)
                  break;
                if (++v21 == v22)
                  goto LABEL_39;
              }
              while (--v22 != v21)
              {
                v30 = *v22;
                v31 = HIDWORD(*v22);
                if (v23 == (unsigned __int16)*v22 && v25 > v31)
                {
                  v33 = (unsigned __int16 *)(v24 + 8 * v31);
                  if (*v33 == v23 && v33[1] == WORD1(v30) && *((_DWORD *)v33 + 1) == (_DWORD)v31)
                  {
                    *v21++ = v30;
                    *v22 = v26;
                    if (v21 != v22)
                      goto LABEL_16;
                    goto LABEL_39;
                  }
                }
              }
            }
            v22 = v21;
LABEL_39:
            v34 = *v19;
            v35 = v22;
            if (*v19 != v22)
            {
              do
              {
                v36 = 0;
                v37 = *v34;
                v38 = 0xCBF29CE484222325;
                do
                  v38 = 0x100000001B3 * (v38 ^ aStdStringViewG_787[v36++ + 38]);
                while (v36 != 112);
                v39 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v38);
                v40 = v39[4];
                if (v37 >> 39 < (v39[5] - v40) >> 3
                  && (v41 = *(_QWORD *)(v40 + 8 * (v37 >> 39))) != 0
                  && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v37) & 0x7F)),
                      v44 = v39[7],
                      v43 = v39[8],
                      v42 < (v43 - v44) >> 3)
                  && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == HIDWORD(v37)) : (v46 = 0), v46))
                {
                  v47 = v39[11];
                  v48 = v39[10] + 12 * v42;
                }
                else
                {
                  v47 = v39[11];
                  v48 = v47;
                }
                if (v48 == v47)
                  v48 = 0;
                v49 = *(unsigned __int8 *)(v48 + 8);
                *(_BYTE *)(v48 + 8) = a3;
                gdc::component::DataRequestObserver::updateStatusCounts(a1, v37, a2, v49, a3);
                ++v34;
              }
              while (v34 != v22);
              v15 = HIDWORD(a2);
              v35 = *v19;
            }
            if (v22 == v35)
            {
              for (i = 0; i != 116; ++i)
                v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_786[i + 38]);
              v51 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v7);
              v57 = a2;
              if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v51 + 4, v15))
              {
                v52 = (_QWORD *)v51[28];
                if (v52)
                {
                  v53 = v51[31];
                  while (1)
                  {
                    v59[0] = &v57;
                    v59[1] = 1;
                    v58 = v53;
                    v54 = v52[6];
                    if (!v54)
                      break;
                    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v54 + 48))(v54, &v58, v59);
                    v52 = (_QWORD *)*v52;
                    if (!v52)
                      return;
                  }
                  std::__throw_bad_function_call[abi:nn180100]();
                  gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v55, v56);
                }
              }
            }
            else if (v22 != v19[1])
            {
              v19[1] = v22;
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_786[v16++ + 38]);
  while (v16 != 116);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>]";
  *(_QWORD *)(v14 + 24) = 116;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4308;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 116; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_786[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>]";
  v22[2] = 116;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F58AC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_787[v16++ + 38]);
  while (v16 != 112);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>]";
  *(_QWORD *)(v14 + 24) = 112;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B43C8;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 112; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_787[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>]";
  v22[2] = 112;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F58AE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3)
    return 0;
  v3 = *(_QWORD *)(*a1 + 8 * v2);
  if (!v3)
    return 0;
  v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3)
    return 0;
  v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7)
    return 0;
  v11 = (_QWORD *)(a1[6] + 24 * v5);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (_QWORD *)v8);
  v12 = a1[7];
  if (v11 != (_QWORD *)(v12 - 24))
  {
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(v11, *(char **)(v12 - 24), *(char **)(v12 - 16), (uint64_t)(*(_QWORD *)(v12 - 16) - *(_QWORD *)(v12 - 24)) >> 3);
    v12 = a1[7];
  }
  v14 = v12 - 24;
  v13 = *(void **)(v12 - 24);
  if (v13)
  {
    *(_QWORD *)(v12 - 16) = v13;
    operator delete(v13);
  }
  a1[7] = v14;
  return 1;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 12 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 4);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 12);
  *(_BYTE *)(v14 + 8) = v16;
  a1[11] -= 12;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v24 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v24);
  if ((v6 & 1) != 0)
  {
    v12 = (_QWORD *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v15 = (_QWORD *)a1[10];
      v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v15) + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v15) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(24 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * (v12 - v15)];
      *(_OWORD *)v20 = *a3;
      *((_QWORD *)v20 + 2) = *((_QWORD *)a3 + 2);
      v14 = v20 + 24;
      if (v12 != v15)
      {
        do
        {
          v21 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v20 - 1) = *(v12 - 1);
          *(_OWORD *)(v20 - 24) = v21;
          v20 -= 24;
          v12 -= 3;
        }
        while (v12 != v15);
        v12 = (_QWORD *)a1[10];
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v14;
      a1[12] = (uint64_t)&v19[24 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *a3;
      v12[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)v12 = v13;
      v14 = v12 + 3;
    }
    a1[11] = (uint64_t)v14;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)(a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3));
    *v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    v7[2] = *((_DWORD *)a3 + 2);
    v7[3] = *((_DWORD *)a3 + 3);
    v7[4] = *((_DWORD *)a3 + 4);
    v7[5] = *((_DWORD *)a3 + 5);
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v26 = &v24;
          v27 = 1;
          v25 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v25, &v26);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)a1[22];
  if (v22)
  {
    while (1)
    {
      v26 = &v24;
      v27 = 1;
      v25 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v25, &v26);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t i;
  _QWORD v32[3];
  unint64_t v33;

  v4 = result;
  switch(a3)
  {
    case 1:
      v5 = 0;
      v6 = 0xCBF29CE484222325;
      v7 = 0xCBF29CE484222325;
      do
        v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_107[v5++ + 38]);
      while (v5 != 119);
      v33 = v7;
      v8 = *(int8x8_t *)(result + 128);
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v10 = v7;
          if (*(_QWORD *)&v8 <= v7)
            v10 = v7 % *(_QWORD *)&v8;
        }
        else
        {
          v10 = (*(_QWORD *)&v8 - 1) & v7;
        }
        v20 = *(_QWORD **)(*(_QWORD *)(result + 120) + 8 * v10);
        if (v20)
        {
          v21 = (_QWORD *)*v20;
          if (v21)
          {
            if (v9.u32[0] < 2uLL)
            {
              v22 = *(_QWORD *)&v8 - 1;
              while (1)
              {
                v24 = v21[1];
                if (v24 == v7)
                {
                  if (v21[2] == v7)
                    goto LABEL_41;
                }
                else if ((v24 & v22) != v10)
                {
                  goto LABEL_33;
                }
                v21 = (_QWORD *)*v21;
                if (!v21)
                  goto LABEL_33;
              }
            }
            do
            {
              v23 = v21[1];
              if (v23 == v7)
              {
                if (v21[2] == v7)
                {
LABEL_41:
                  v26 = (_QWORD *)v21[3];
                  goto LABEL_40;
                }
              }
              else
              {
                if (v23 >= *(_QWORD *)&v8)
                  v23 %= *(_QWORD *)&v8;
                if (v23 != v10)
                  break;
              }
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
        }
      }
LABEL_33:
      v25 = operator new();
      v26 = (_QWORD *)v25;
      v27 = 0;
      v28 = 0xCBF29CE484222325;
      do
        v28 = 0x100000001B3 * (v28 ^ aStdStringViewG_107[v27++ + 38]);
      while (v27 != 119);
      *(_QWORD *)(v25 + 16) = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Failed>]";
      *(_QWORD *)(v25 + 24) = 119;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 80) = 0u;
      *(_OWORD *)(v25 + 96) = 0u;
      *(_OWORD *)(v25 + 112) = 0u;
      *(_OWORD *)(v25 + 128) = 0u;
      *(_DWORD *)(v25 + 144) = 1065353216;
      *(_OWORD *)(v25 + 152) = 0u;
      *(_OWORD *)(v25 + 168) = 0u;
      *(_QWORD *)(v25 + 184) = 0;
      *(_DWORD *)(v25 + 192) = 1065353216;
      *(_OWORD *)(v25 + 200) = 0u;
      *(_OWORD *)(v25 + 216) = 0u;
      *(_QWORD *)(v25 + 232) = 0;
      *(_DWORD *)(v25 + 240) = 1065353216;
      *(_QWORD *)v25 = &off_1E42B4008;
      *(_QWORD *)(v25 + 8) = v28;
      *(_QWORD *)(v25 + 248) = v4;
      v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v4 + 120), v7, &v33);
      v30 = v29[3];
      v29[3] = v26;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      for (i = 0; i != 119; ++i)
        v6 = 0x100000001B3 * (v6 ^ aStdStringViewG_107[i + 38]);
      v32[0] = v6;
      v32[1] = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Failed>]";
      v32[2] = 119;
      gdc::Registry::_registerStorageDataSignals(v4, v7, (uint64_t)v32, v26 + 13);
LABEL_40:
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(v26, a2);
      break;
    case 2:
      v11 = 0;
      v12 = 0xCBF29CE484222325;
      do
        v12 = 0x100000001B3 * (v12 ^ aStdStringViewG_775[v11++ + 38]);
      while (v11 != 122);
      v13 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(result, v12);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(v13, a2);
      break;
    case 3:
      v14 = 0;
      v15 = 0xCBF29CE484222325;
      do
        v15 = 0x100000001B3 * (v15 ^ aStdStringViewG_106[v14++ + 38]);
      while (v14 != 120);
      v16 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(result, v15);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(v16, a2);
      break;
    case 4:
      v17 = 0;
      v18 = 0xCBF29CE484222325;
      do
        v18 = 0x100000001B3 * (v18 ^ aStdStringViewG_776[v17++ + 38]);
      while (v17 != 122);
      v19 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(result, v18);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(v19, a2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_19F58BA2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_776[v16++ + 38]);
  while (v16 != 122);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Completed>]";
  *(_QWORD *)(v14 + 24) = 122;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4098;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 122; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_776[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<gdc::component::DataRequestStatus::Completed>]";
  v22[2] = 122;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F58BC94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove();
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 8);
  v15 -= 8;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::IcoSphereMesh>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD4B151FA42BB996FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD4B151FA42BB996FLL;
      if (*(_QWORD *)&v3 <= 0xD4B151FA42BB996FLL)
        v5 = 0xD4B151FA42BB996FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD4B151FA42BB996FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD4B151FA42BB996FLL)
            {
              if (v7[2] == 0xD4B151FA42BB996FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD4B151FA42BB996FLL)
          {
            if (v7[2] == 0xD4B151FA42BB996FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::IcoSphereMesh]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1938;
  *(_QWORD *)(v11 + 8) = 0xD4B151FA42BB996FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD4B151FA42BB996FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD4B151FA42BB996FLL;
  v15[1] = "arComponents::IcoSphereMesh]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD4B151FA42BB996FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F58C5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v18 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    v19 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v19, v20);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::ARProcessMeshComponentsLogic::prepareCustomBoxMeshes(md::LayoutContext const&)::$_0::operator()(uint64_t a1, uint64_t a2, float64_t **a3)
{
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  float64x2_t v22;
  unint64_t v23;
  float16x8_t *v24;
  float64_t **v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int32x2_t v37;
  unint64_t v38;
  float32x4_t v39;
  int32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count_vtbl *v63;
  __int128 v64;
  const double **v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  int16x8_t *p_on_zero_shared;
  char *v70;
  unint64_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  unint64_t v76;
  _WORD *v77;
  char *v78;
  int v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  _QWORD *v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  const double *v100;
  unint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  const double *v112;
  const double *v113;
  const double *v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unint64_t v119;
  double *v120;
  float v121;
  float v122;
  double v123;
  float v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t **v147;
  uint64_t **v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  float64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  __int128 v195;
  unint64_t v196;
  __int128 v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  float64x2_t v201;
  unint64_t v202;
  unint64_t v203;
  __int16 v204;
  float16x8_t *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  __int16 v211;
  std::__shared_weak_count_vtbl *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  unint64_t v216;
  unint64_t v217;
  __int16 v218;
  std::__shared_weak_count_vtbl *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  float64x2x3_t v232;
  float64x2x3_t v233;
  float64x2x3_t v234;
  float64x2x3_t v235;

  v225 = 0;
  v226 = 0;
  v227 = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  md::GeometryLogic::createBox(&v225, &v222);
  v6 = v225;
  v7 = v226;
  v8 = v222;
  v194 = v223;
  v9 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v10 = (v7 - v6) / 12;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04F0;
  v11 = ggl::BufferData::BufferData((uint64_t)&v9[1], 12, 0, 0, 6, v10);
  v9[9].__shared_weak_owners_ = (uint64_t)"/ARMesh/VertexData";
  v9[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedVboReflection;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B81E0;
  v9[9].__shared_owners_ = (uint64_t)&unk_1E42B8200;
  v220 = v11;
  v221 = v9;
  v215 = 0uLL;
  v12 = v9[1].__shared_owners_ * v10;
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = v11;
  if (v12)
    v14 = v9[4].__vftable;
  else
    v14 = 0;
  v193 = v6;
  v215 = v13;
  v216 = 0;
  v217 = v12;
  v219 = v14;
  v218 = 1;
  v15 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
  v16 = ggl::BufferData::BufferData((uint64_t)&v15[1], qword_1EE5517E8, 3, 1, 6, v10);
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F28;
  v213 = v16;
  v214 = v15;
  v208 = 0uLL;
  v17 = v15[1].__shared_owners_ * v10;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = v16;
  if (v17)
    v19 = v15[4].__vftable;
  else
    v19 = 0;
  v192 = v7;
  v208 = v18;
  v209 = 0;
  v210 = v17;
  v212 = v19;
  v211 = 1;
  v20 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v191 = a2;
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
  v21 = ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE5517A8, 3, 1, 6, v10);
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F48;
  v206 = v21;
  v207 = v20;
  v201 = 0uLL;
  v22.f64[0] = 0.0;
  *(_QWORD *)&v22.f64[1] = v21;
  v23 = v20[1].__shared_owners_ * v10;
  v24 = (float16x8_t *)v20[4].__vftable;
  v201 = v22;
  v202 = 0;
  v203 = v23;
  v205 = v24;
  v204 = 1;
  v25 = a3;
  v26.f64[0] = **a3;
  v27.f64[0] = (*a3)[1];
  v28.f64[0] = (*a3)[2];
  v30.f64[0] = (*a3)[6];
  v29.f64[0] = (*a3)[7];
  v31.f64[0] = (*a3)[8];
  v33.f64[0] = (*a3)[12];
  v32.f64[0] = (*a3)[13];
  v34.f64[0] = (*a3)[14];
  v36.f64[0] = (*a3)[18];
  v35.f64[0] = (*a3)[19];
  v22.f64[0] = (*a3)[20];
  v30.f64[1] = (*a3)[9];
  v26.f64[1] = (*a3)[3];
  *(float32x2_t *)&v26.f64[0] = vcvt_f32_f64(v26);
  v27.f64[1] = (*a3)[4];
  *(float32x2_t *)&v27.f64[0] = vcvt_f32_f64(v27);
  v28.f64[1] = (*a3)[5];
  v37 = vzip1_s32(*(int32x2_t *)&v26.f64[0], *(int32x2_t *)&v27.f64[0]);
  *(float32x2_t *)&v28.f64[0] = vcvt_f32_f64(v28);
  v38 = __PAIR64__(HIDWORD(v26.f64[0]), LODWORD(v28.f64[0]));
  v39 = vcvt_hight_f32_f64(*(int32x2_t *)&v26.f64[0], v30);
  *(float32x2_t *)&v30.f64[0] = vcvt_f32_f64(v30);
  v29.f64[1] = (*a3)[10];
  v31.f64[1] = (*a3)[11];
  v36.f64[1] = (*a3)[21];
  v33.f64[1] = (*a3)[15];
  v35.f64[1] = (*a3)[22];
  v32.f64[1] = (*a3)[16];
  v22.f64[1] = (*a3)[23];
  v34.f64[1] = (*a3)[17];
  v40 = vzip2_s32(*(int32x2_t *)&v27.f64[0], *(int32x2_t *)&v28.f64[0]);
  v41 = vcvt_hight_f32_f64(*(int32x2_t *)&v27.f64[0], v29);
  *(float32x2_t *)&v29.f64[0] = vcvt_f32_f64(v29);
  v42 = vcvt_hight_f32_f64(*(int32x2_t *)&v28.f64[0], v31);
  *(float32x2_t *)&v31.f64[0] = vcvt_f32_f64(v31);
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v40;
  v14->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))vzip1_s32(*(int32x2_t *)&v30.f64[0], *(int32x2_t *)&v29.f64[0]);
  *(int32x2_t *)&v29.f64[0] = vzip2_s32(*(int32x2_t *)&v29.f64[0], *(int32x2_t *)&v31.f64[0]);
  HIDWORD(v31.f64[0]) = HIDWORD(v30.f64[0]);
  v14->__on_zero_shared_weak = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v31.f64[0];
  v14[1].~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v29.f64[0];
  __asm { FMOV            V6.4S, #1.0 }
  v48 = vdivq_f32(_Q6, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v39, v39), v41, v41), v42, v42)));
  v49 = (int32x4_t)vmlaq_f32(_Q6, v42, v48);
  v50 = (float32x4_t)vdupq_n_s32(0x3E90019Du);
  v51 = (int32x4_t)vmulq_f32(v48, v50);
  v42.i64[0] = 0x3F0000003F000000;
  v42.i64[1] = 0x3F0000003F000000;
  *v24 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v51, v51), (float32x4_t)vzip1q_s32((int32x4_t)v39, (int32x4_t)v41)), (float32x4_t)vzip1q_s32(v49, v49)), v42)), vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v51, v51), (float32x4_t)vzip2q_s32((int32x4_t)v39, (int32x4_t)v41)), (float32x4_t)vzip2q_s32(v49, v49)), v42));
  *(float32x2_t *)&v33.f64[0] = vcvt_f32_f64(v33);
  *(float32x2_t *)&v32.f64[0] = vcvt_f32_f64(v32);
  *(int32x2_t *)v51.i8 = vzip1_s32(*(int32x2_t *)&v33.f64[0], *(int32x2_t *)&v32.f64[0]);
  *(float32x2_t *)&v34.f64[0] = vcvt_f32_f64(v34);
  v49.i64[0] = __PAIR64__(HIDWORD(v33.f64[0]), LODWORD(v34.f64[0]));
  v52 = vcvt_hight_f32_f64(*(int32x2_t *)&v33.f64[0], v36);
  *(float32x2_t *)&v36.f64[0] = vcvt_f32_f64(v36);
  *(int32x2_t *)v39.f32 = vzip2_s32(*(int32x2_t *)&v32.f64[0], *(int32x2_t *)&v34.f64[0]);
  v53 = vcvt_hight_f32_f64(*(int32x2_t *)&v32.f64[0], v35);
  *(float32x2_t *)&v35.f64[0] = vcvt_f32_f64(v35);
  v54 = vcvt_hight_f32_f64(*(int32x2_t *)&v34.f64[0], v22);
  *(float32x2_t *)&v22.f64[0] = vcvt_f32_f64(v22);
  v14[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51.i64[0];
  v14[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v49.i64[0];
  v14[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v39.i64[0];
  v14[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))vzip1_s32(*(int32x2_t *)&v36.f64[0], *(int32x2_t *)&v35.f64[0]);
  *(int32x2_t *)&v35.f64[0] = vzip2_s32(*(int32x2_t *)&v35.f64[0], *(int32x2_t *)&v22.f64[0]);
  HIDWORD(v22.f64[0]) = HIDWORD(v36.f64[0]);
  v14[2].~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v22.f64[0];
  v14[2].~__shared_weak_count_0 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v35.f64[0];
  v55 = vdivq_f32(_Q6, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v52, v52), v53, v53), v54, v54)));
  v56 = (int32x4_t)vmlaq_f32(_Q6, v54, v55);
  v57 = (int32x4_t)vmulq_f32(v55, v50);
  v24[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v57, v57), (float32x4_t)vzip1q_s32((int32x4_t)v52, (int32x4_t)v53)), (float32x4_t)vzip1q_s32(v56, v56)), v42)), vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v57, v57), (float32x4_t)vzip2q_s32((int32x4_t)v52, (int32x4_t)v53)), (float32x4_t)vzip2q_s32(v56, v56)), v42));
  v58 = v212;
  *(_OWORD *)&v212->~__shared_weak_count = xmmword_19FFB38A0;
  *(_OWORD *)&v58->__on_zero_shared = xmmword_19FFB38A0;
  v59 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v60 = v194 - v8;
  v59->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v59->__shared_owners_;
  v62 = (v194 - v8) >> 2;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v59[1], 2, 1, 0, 6, v62);
  v63 = 0;
  LODWORD(v59[10].__vftable) = 0;
  v59[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v59[1].__shared_owners_ = 2;
  v59[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v59[9].__shared_weak_owners_ = (uint64_t)"/ARMesh/IndexData";
  v200 = v59;
  *(_QWORD *)&v64 = 0;
  if ((unint64_t)(v194 - v8) >= 4)
    v63 = v59[4].__vftable;
  *((_QWORD *)&v64 + 1) = v59 + 1;
  v197 = v64;
  v198 = 2 * v62;
  v199 = v63;
  _ZF = v194 == v8;
  v65 = (const double **)v25;
  if (!_ZF)
  {
    v66 = v222;
    if (v62 <= 1)
      v67 = 1;
    else
      v67 = v60 >> 2;
    if (v67 <= 0xF)
    {
      v68 = 0;
LABEL_18:
      v76 = v67 - v68;
      v77 = (_WORD *)((char *)v63 + 2 * v68);
      v78 = &v66[4 * v68];
      do
      {
        v79 = *(_DWORD *)v78;
        v78 += 4;
        *v77++ = v79;
        --v76;
      }
      while (v76);
      goto LABEL_20;
    }
    v68 = v67 & 0xFFFFFFFFFFFFFFF0;
    p_on_zero_shared = (int16x8_t *)&v63->__on_zero_shared;
    v70 = v222 + 32;
    v71 = v67 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v73 = *((int16x8_t *)v70 - 2);
      v72 = *((int16x8_t *)v70 - 1);
      v75 = *(int16x8_t *)v70;
      v74 = *((int16x8_t *)v70 + 1);
      v70 += 64;
      p_on_zero_shared[-1] = vuzp1q_s16(v73, v72);
      *p_on_zero_shared = vuzp1q_s16(v75, v74);
      p_on_zero_shared += 2;
      v71 -= 16;
    }
    while (v71);
    if (v67 != v68)
      goto LABEL_18;
  }
LABEL_20:
  v80 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v81 = v80;
  v80->__shared_owners_ = 0;
  v80->__shared_weak_owners_ = 0;
  v80->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E48F8;
  v82 = &v80[1].__vftable;
  v230 = v220;
  v231 = v221;
  if (v221)
  {
    v83 = &v221->__shared_owners_;
    do
      v84 = __ldxr((unint64_t *)v83);
    while (__stxr(v84 + 1, (unint64_t *)v83));
  }
  v228 = v59 + 1;
  v229 = v59;
  do
    v85 = __ldxr(p_shared_owners);
  while (__stxr(v85 + 1, p_shared_owners));
  ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)&v80[1], (uint64_t)"/ARMesh/CustomBox", &v230, (uint64_t *)&v228);
  do
    v86 = __ldaxr(p_shared_owners);
  while (__stlxr(v86 - 1, p_shared_owners));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  v87 = v231;
  if (v231)
  {
    v88 = (unint64_t *)&v231->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v192 == v193)
  {
    v95 = 3.4028e38;
    v97 = -3.4028e38;
    v96 = -3.4028e38;
    v92 = -3.4028e38;
    v94 = 3.4028e38;
    v93 = 3.4028e38;
    goto LABEL_46;
  }
  if (v10 <= 1)
    v90 = 1;
  else
    v90 = v10;
  if (v90 <= 7)
  {
    v91 = 0;
    v92 = -3.4028e38;
    v93 = 3.4028e38;
    v94 = 3.4028e38;
    v95 = 3.4028e38;
    v96 = -3.4028e38;
    v97 = -3.4028e38;
LABEL_44:
    v119 = v90 - v91;
    v120 = (double *)&(*v65)[3 * v91 + 2];
    do
    {
      v121 = *(v120 - 2);
      v122 = *(v120 - 1);
      v123 = *v120;
      v120 += 3;
      v124 = v123;
      v93 = fminf(v93, v121);
      v92 = fmaxf(v92, v121);
      v94 = fminf(v94, v122);
      v96 = fmaxf(v96, v122);
      v95 = fminf(v95, v124);
      v97 = fmaxf(v97, v124);
      --v119;
    }
    while (v119);
    goto LABEL_46;
  }
  v98 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v91 = v90 & 0xFFFFFFFFFFFFFFF8;
  v99.i64[0] = 0x80000000800000;
  v99.i64[1] = 0x80000000800000;
  v100 = *v65;
  v101 = v90 & 0xFFFFFFFFFFFFFFF8;
  v102 = v98;
  v103 = v98;
  v104 = v98;
  v105 = v98;
  v106 = v98;
  v107.i64[0] = 0x80000000800000;
  v107.i64[1] = 0x80000000800000;
  v108.i64[0] = 0x80000000800000;
  v108.i64[1] = 0x80000000800000;
  v109.i64[0] = 0x80000000800000;
  v109.i64[1] = 0x80000000800000;
  v110.i64[0] = 0x80000000800000;
  v110.i64[1] = 0x80000000800000;
  v111.i64[0] = 0x80000000800000;
  v111.i64[1] = 0x80000000800000;
  do
  {
    v112 = v100 + 12;
    v113 = v100;
    v232 = vld3q_f64(v113);
    v113 += 6;
    v233 = vld3q_f64(v113);
    v234 = vld3q_f64(v112);
    v114 = v100 + 18;
    v235 = vld3q_f64(v114);
    v115 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v232.val[0]), v233.val[0]);
    v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v234.val[0]), v235.val[0]);
    v117 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v232.val[1]), v233.val[1]);
    v118 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v234.val[1]), v235.val[1]);
    v232.val[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v232.val[2]), v233.val[2]);
    v232.val[1] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v234.val[2]), v235.val[2]);
    v98 = vminnmq_f32(v98, v115);
    v102 = vminnmq_f32(v102, v116);
    v99 = vmaxnmq_f32(v99, v115);
    v107 = vmaxnmq_f32(v107, v116);
    v103 = vminnmq_f32(v103, v117);
    v104 = vminnmq_f32(v104, v118);
    v108 = vmaxnmq_f32(v108, v117);
    v109 = vmaxnmq_f32(v109, v118);
    v105 = vminnmq_f32(v105, (float32x4_t)v232.val[0]);
    v106 = vminnmq_f32(v106, (float32x4_t)v232.val[1]);
    v110 = vmaxnmq_f32(v110, (float32x4_t)v232.val[0]);
    v111 = vmaxnmq_f32(v111, (float32x4_t)v232.val[1]);
    v100 += 24;
    v101 -= 8;
  }
  while (v101);
  v97 = vmaxnmvq_f32(vmaxnmq_f32(v110, v111));
  v96 = vmaxnmvq_f32(vmaxnmq_f32(v108, v109));
  v92 = vmaxnmvq_f32(vmaxnmq_f32(v99, v107));
  v95 = vminnmvq_f32(vminnmq_f32(v105, v106));
  v94 = vminnmvq_f32(vminnmq_f32(v103, v104));
  v93 = vminnmvq_f32(vminnmq_f32(v98, v102));
  if (v90 != v91)
    goto LABEL_44;
LABEL_46:
  v125 = v213;
  v126 = v214;
  v230 = v213;
  v231 = v214;
  if (v214)
  {
    v127 = &v214->__shared_owners_;
    do
      v128 = __ldxr((unint64_t *)v127);
    while (__stxr(v128 + 1, (unint64_t *)v127));
  }
  if (v213)
  {
    v130 = (uint64_t **)&v81[6];
    v129 = v81[6].__vftable;
    if (v129)
    {
      while (1)
      {
        v130 = (uint64_t **)v129;
        if (!v129->__on_zero_shared_weak)
          break;
        v129 = (std::__shared_weak_count_vtbl *)v129->~__shared_weak_count;
        if (!*v130)
          goto LABEL_53;
      }
      v131 = (uint64_t *)v129;
      if (!v214)
        goto LABEL_60;
    }
    else
    {
LABEL_53:
      v131 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[6].__shared_owners_ + 16))(v81[6].__shared_owners_, 56, 8);
      *v131 = 0;
      v131[1] = 0;
      v131[5] = 0;
      v131[6] = 0;
      v131[4] = 0;
      v131[2] = (uint64_t)v130;
      *v130 = v131;
      v132 = *(_QWORD *)v81[5].__shared_weak_owners_;
      v133 = v131;
      if (v132)
      {
        v81[5].__shared_weak_owners_ = v132;
        v133 = *v130;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v81[6].__vftable, v133);
      ++v81[6].__shared_weak_owners_;
      v125 = v230;
      v126 = v231;
      if (!v231)
        goto LABEL_60;
    }
    v134 = (unint64_t *)&v126->__shared_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
LABEL_60:
    v136 = (std::__shared_weak_count *)v131[6];
    v131[5] = v125;
    v131[6] = (uint64_t)v126;
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
  }
  v139 = v231;
  if (v231)
  {
    v140 = (unint64_t *)&v231->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v206;
  v143 = v207;
  v228 = (std::__shared_weak_count *)v206;
  v229 = v207;
  if (v207)
  {
    v144 = &v207->__shared_owners_;
    do
      v145 = __ldxr((unint64_t *)v144);
    while (__stxr(v145 + 1, (unint64_t *)v144));
  }
  if (v206)
  {
    v147 = (uint64_t **)(v82 + 15);
    v146 = (uint64_t *)v82[15];
    if (v146)
    {
      while (1)
      {
        while (1)
        {
          v148 = (uint64_t **)v146;
          v149 = v146[4];
          if (v149 < 2)
            break;
          v146 = *v148;
          v147 = v148;
          if (!*v148)
            goto LABEL_81;
        }
        if (v149)
          break;
        v146 = v148[1];
        if (!v146)
        {
          v147 = v148 + 1;
          goto LABEL_81;
        }
      }
      v150 = (uint64_t *)v148;
      if (!v207)
        goto LABEL_88;
    }
    else
    {
      v148 = (uint64_t **)(v82 + 15);
LABEL_81:
      v150 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v82[16] + 16))(v82[16], 56, 8);
      v150[5] = 0;
      v150[6] = 0;
      v150[4] = 1;
      *v150 = 0;
      v150[1] = 0;
      v150[2] = (uint64_t)v148;
      *v147 = v150;
      v151 = *(_QWORD *)v82[14];
      v152 = v150;
      if (v151)
      {
        v82[14] = v151;
        v152 = *v147;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v82[15], v152);
      ++v82[17];
      v142 = (uint64_t)v228;
      v143 = v229;
      if (!v229)
        goto LABEL_88;
    }
    v153 = (unint64_t *)&v143->__shared_owners_;
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
LABEL_88:
    v155 = (std::__shared_weak_count *)v150[6];
    v150[5] = v142;
    v150[6] = (uint64_t)v143;
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
  }
  v158 = v229;
  if (v229)
  {
    v159 = (unint64_t *)&v229->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  if (v81)
  {
    v161 = (unint64_t *)&v81->__shared_owners_;
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
    *(_QWORD *)&v195 = __PAIR64__(LODWORD(v94), LODWORD(v93));
    *((_QWORD *)&v195 + 1) = __PAIR64__(LODWORD(v92), LODWORD(v95));
    v196 = __PAIR64__(LODWORD(v97), LODWORD(v96));
    do
      v163 = __ldaxr(v161);
    while (__stlxr(v163 - 1, v161));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  else
  {
    *(_QWORD *)&v195 = __PAIR64__(LODWORD(v94), LODWORD(v93));
    *((_QWORD *)&v195 + 1) = __PAIR64__(LODWORD(v92), LODWORD(v95));
    v196 = __PAIR64__(LODWORD(v97), LODWORD(v96));
  }
  if (v199 && v198)
  {
    if ((_QWORD)v197 && *(_BYTE *)(*((_QWORD *)&v197 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v197 + 64))();
    v165 = *(_QWORD *)(*((_QWORD *)&v197 + 1) + 56);
    v164 = *(_QWORD *)(*((_QWORD *)&v197 + 1) + 64);
    if (v164 == v165)
      v165 = *(_QWORD *)(*((_QWORD *)&v197 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v197 + 1) + 72);
    if (v165)
      v165 = 0;
    if (v164 <= v198)
      v164 = v198;
    if (v164 == v165)
      v164 = v165 + *(_QWORD *)(*((_QWORD *)&v197 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v197 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v197 + 1) + 56) = v165;
    *(_QWORD *)(*((_QWORD *)&v197 + 1) + 64) = v164;
  }
  if (v200)
  {
    v166 = (unint64_t *)&v200->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  if (v205 && v203 != v202)
  {
    v168 = v201.f64[1];
    if (*(_QWORD *)&v201.f64[0] && *(_BYTE *)(*(_QWORD *)&v201.f64[1] + 17) != 2)
      (*(void (**)(void))(**(_QWORD **)&v201.f64[0] + 64))();
    if ((_BYTE)v204 && !HIBYTE(v204))
    {
      v170 = *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 56);
      v169 = *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 64);
      if (v169 == v170)
        v170 = *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 80) - *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 72);
      if (v202 < v170)
        v170 = v202;
      if (v169 <= v203)
        v169 = v203;
      if (v169 == v170)
        v169 = v170 + *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 80) - *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 72);
      *(_QWORD *)(*(_QWORD *)&v201.f64[1] + 56) = v170;
      *(_QWORD *)(*(_QWORD *)&v168 + 64) = v169;
    }
  }
  if (v207)
  {
    v171 = &v207->__shared_owners_;
    do
      v172 = __ldaxr((unint64_t *)v171);
    while (__stlxr(v172 - 1, (unint64_t *)v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v212 && v210 != v209)
  {
    v173 = *((_QWORD *)&v208 + 1);
    if ((_QWORD)v208 && *(_BYTE *)(*((_QWORD *)&v208 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v208 + 64))();
    if ((_BYTE)v211 && !HIBYTE(v211))
    {
      v175 = *(_QWORD *)(*((_QWORD *)&v208 + 1) + 56);
      v174 = *(_QWORD *)(*((_QWORD *)&v208 + 1) + 64);
      if (v174 == v175)
        v175 = *(_QWORD *)(*((_QWORD *)&v208 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v208 + 1) + 72);
      if (v209 < v175)
        v175 = v209;
      if (v174 <= v210)
        v174 = v210;
      if (v174 == v175)
        v174 = v175 + *(_QWORD *)(*((_QWORD *)&v208 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v208 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v208 + 1) + 56) = v175;
      *(_QWORD *)(v173 + 64) = v174;
    }
  }
  if (v214)
  {
    v176 = &v214->__shared_owners_;
    do
      v177 = __ldaxr((unint64_t *)v176);
    while (__stlxr(v177 - 1, (unint64_t *)v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  if (v219 && v217 != v216)
  {
    v178 = *((_QWORD *)&v215 + 1);
    if ((_QWORD)v215 && *(_BYTE *)(*((_QWORD *)&v215 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v215 + 64))();
    if ((_BYTE)v218 && !HIBYTE(v218))
    {
      v180 = *(_QWORD *)(*((_QWORD *)&v215 + 1) + 56);
      v179 = *(_QWORD *)(*((_QWORD *)&v215 + 1) + 64);
      if (v179 == v180)
        v180 = *(_QWORD *)(*((_QWORD *)&v215 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v215 + 1) + 72);
      if (v216 < v180)
        v180 = v216;
      if (v179 <= v217)
        v179 = v217;
      if (v179 == v180)
        v179 = v180 + *(_QWORD *)(*((_QWORD *)&v215 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v215 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v215 + 1) + 56) = v180;
      *(_QWORD *)(v178 + 64) = v179;
    }
  }
  if (v221)
  {
    v181 = &v221->__shared_owners_;
    do
      v182 = __ldaxr((unint64_t *)v181);
    while (__stlxr(v182 - 1, (unint64_t *)v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v225)
    operator delete(v225);
  v183 = *(_QWORD *)(a1 + 144);
  v215 = v195;
  v216 = v196;
  v184 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>(v183);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v184, v191, &v215);
  v185 = (uint64_t *)gdc::Registry::storage<arComponents::CustomBoxCreateDesc>(*(_QWORD *)(a1 + 144));
  *(_QWORD *)&v201.f64[0] = v191;
  if (geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(v185 + 4, HIDWORD(v191))
    && (v186 = (_QWORD *)v185[28]) != 0)
  {
    v187 = v185[31];
    while (1)
    {
      *(_QWORD *)&v215 = &v201;
      *((_QWORD *)&v215 + 1) = 1;
      *(_QWORD *)&v208 = v187;
      v188 = v186[6];
      if (!v188)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v188 + 48))(v188, &v208, &v215);
      v186 = (_QWORD *)*v186;
      if (!v186)
        goto LABEL_197;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  else
  {
LABEL_197:
    if (v81)
    {
      v189 = (unint64_t *)&v81->__shared_owners_;
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
}

void sub_19F58D660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v45 - 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a45);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v45 - 240);
  v47 = *(void **)(v45 - 224);
  if (v47)
  {
    *(_QWORD *)(v45 - 216) = v47;
    operator delete(v47);
    v48 = *(void **)(v45 - 200);
    if (!v48)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v48 = *(void **)(v45 - 200);
    if (!v48)
      goto LABEL_3;
  }
  operator delete(v48);
  _Unwind_Resume(a1);
}

void sub_19F58D714()
{
  JUMPOUT(0x19F58D6E0);
}

void sub_19F58D71C()
{
  JUMPOUT(0x19F58D6E0);
}

void sub_19F58D724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *gdc::ManagedObjectHolder<md::ARProcessMeshComponentsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B14C8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARProcessMeshComponentsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B14C8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARProcessMeshComponentsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void altitude::Map::~Map(altitude::Map *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42C6768;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42C6768;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void altitude::MapRequest::~MapRequest(altitude::MapRequest *this)
{
  altitude::MapRequest::~MapRequest(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void *v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  void (**v23)(_QWORD);
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;

  *(_QWORD *)this = &off_1E42C38C0;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (char *)*((_QWORD *)this + 43);
    if (!v12)
      goto LABEL_28;
  }
  else
  {
LABEL_17:
    v12 = (char *)*((_QWORD *)this + 43);
    if (!v12)
      goto LABEL_28;
  }
  v13 = (char *)*((_QWORD *)this + 44);
  v14 = v12;
  if (v13 != v12)
  {
    do
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v13 -= 16;
    }
    while (v13 != v12);
    v14 = (char *)*((_QWORD *)this + 43);
  }
  *((_QWORD *)this + 44) = v12;
  operator delete(v14);
LABEL_28:
  v18 = (void (***)(_QWORD))*((_QWORD *)this + 40);
  if (v18)
  {
    v19 = (void (***)(_QWORD))*((_QWORD *)this + 41);
    v20 = (void *)*((_QWORD *)this + 40);
    if (v19 != v18)
    {
      v21 = v19 - 5;
      v22 = v19 - 5;
      do
      {
        v23 = *v22;
        v22 -= 5;
        (*v23)(v21);
        v24 = v21 == v18;
        v21 = v22;
      }
      while (!v24);
      v20 = (void *)*((_QWORD *)this + 40);
    }
    *((_QWORD *)this + 41) = v18;
    operator delete(v20);
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v28 = (void *)*((_QWORD *)this + 34);
      if (!v28)
        goto LABEL_41;
      goto LABEL_40;
    }
  }
  v28 = (void *)*((_QWORD *)this + 34);
  if (v28)
  {
LABEL_40:
    *((_QWORD *)this + 35) = v28;
    operator delete(v28);
  }
LABEL_41:
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (!v29)
    goto LABEL_45;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v32)
      goto LABEL_55;
  }
  else
  {
LABEL_45:
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v32)
      goto LABEL_55;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_55:
  karo::Job::~Job(this);
}

void altitude::MapRequest::jobStep(altitude::MapRequest *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  _QWORD *v46;
  __int16 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  char *v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  uint64_t *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  BOOL v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  const unsigned __int8 *v138;
  size_t v139;
  _QWORD *v140;
  const unsigned __int8 *v141;
  size_t v142;
  _QWORD *v143;
  ggl::Data *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  const unsigned __int8 *v148;
  size_t v149;
  _QWORD *v150;
  ggl::Data *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  const unsigned __int8 *v155;
  size_t v156;
  _QWORD *v157;
  ggl::Data *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  __n128 *v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  __n128 *v172;
  const unsigned __int8 *v173;
  size_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  uint64_t v177;
  _QWORD *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  __n128 *v183;
  unint64_t v184;
  __n128 *v185;
  NSObject *v186;
  _DWORD *v187;
  int v188;
  unsigned __int32 v189;
  int v190;
  uint64_t v191;
  char *SubJob;
  std::__shared_weak_count *v193;
  void (**v194)(karo::AsyncRequestManager::RequestHandle *__hidden);
  unint64_t *v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t i;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  int v210;
  NSObject *v211;
  _DWORD *v212;
  int v213;
  unsigned __int32 v214;
  int v215;
  __n128 v216;
  unint64_t v217;
  uint64_t v218;
  __n128 *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  __n128 *v223;
  uint64_t v224;
  __n128 *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  __n128 *v229;
  uint64_t v230;
  __n128 *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  __n128 *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  char *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t *Job;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  char *v266;
  char *v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  BOOL v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  __int128 v280;
  char *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  void (***v287)(_QWORD);
  void (**v288)(_QWORD *);
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  _DWORD *v297;
  int v298;
  unsigned __int32 v299;
  int v300;
  char *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _DWORD *v307;
  int v308;
  unsigned __int32 v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  void (**v314)(karo::AsyncRequestManager::RequestHandle *__hidden);
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  std::__shared_weak_count_vtbl *v324;
  uint64_t v325;
  void (__cdecl *v326)(std::__shared_weak_count *__hidden);
  unint64_t *v327;
  unint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  void (__cdecl *v332)(std::__shared_count *__hidden);
  uint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  char *v336;
  char *v337;
  void (***v338)(char *);
  void (**v339)(char *);
  NSObject *v340;
  _DWORD *v341;
  int v342;
  int v343;
  unint64_t *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int *v371;
  unsigned int v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  unsigned int *v380;
  unsigned int v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  unsigned int *v393;
  unsigned int v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t *v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  int v414;
  char *v415;
  _QWORD *v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t *v430;
  unint64_t v431;
  unsigned int *v432;
  unsigned int v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  unsigned int *v437;
  unsigned int v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  std::__shared_weak_count *v444;
  uint64_t *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  uint64_t *v452;
  __int128 v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t *v458;
  unint64_t v459;
  int v460;
  unint64_t v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  unsigned int *v473;
  unsigned int v474;
  uint64_t *v475;
  unint64_t v476;
  __int128 v477;
  int v478;
  uint64_t *v479;
  std::__shared_weak_count *v480;
  void (**v481)(karo::AsyncRequestManager::RequestHandle *__hidden);
  std::__shared_weak_count *v482;
  std::__shared_weak_count *v483;
  uint64_t *v484;
  std::__shared_weak_count *v485;
  std::__shared_weak_count_vtbl *v486;
  std::__shared_weak_count *v487;
  uint8_t buf[16];
  __n128 v489;
  __n128 v490;
  __n128 v491;
  uint64_t v492;

  v492 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + 68);
  switch(*((_DWORD *)this + 110))
  {
    case 0:
      karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::reference((uint64_t **)buf, *((_QWORD *)this + 25), (uint64_t)this + 240);
      v4 = *(_QWORD *)buf;
      v3 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
      *((_QWORD *)this + 38) = v4;
      *((_QWORD *)this + 39) = v3;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = *((_QWORD *)this + 38);
      v15 = *(_QWORD *)(v13 + 8);
      v14 = *(std::__shared_weak_count **)(v13 + 16);
      if (v14)
      {
        v16 = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v15)
      {
        v19 = *((_QWORD *)this + 38);
        v20 = *(_QWORD *)(v19 + 8);
        v21 = *(std::__shared_weak_count **)(v19 + 16);
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          do
            v24 = __ldxr(v22);
          while (__stxr(v24 + 1, v22));
        }
        v25 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
        *((_QWORD *)this + 28) = v20;
        *((_QWORD *)this + 29) = v21;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        if (v21)
        {
          v28 = (unint64_t *)&v21->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        return;
      }
      v108 = *((_QWORD *)this + 34);
      v107 = *((_QWORD *)this + 35);
      v109 = v107 - v108;
      v110 = (v107 - v108) >> 5;
      v111 = v110 == 1 || v110 == 4;
      if (!v111)
      {
        (*(void (**)(altitude::MapRequest *))(*(_QWORD *)this + 16))(this);
LABEL_632:
        ++*((_DWORD *)this + 110);
        return;
      }
      if (*((_BYTE *)this + 444))
      {
        v113 = *((_QWORD *)this + 40);
        v112 = (_QWORD *)*((_QWORD *)this + 41);
        v114 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v112 - v113) >> 3);
        v115 = v110 - v114;
        if (v110 <= v114)
        {
          if (v110 < v114)
          {
            v285 = (_QWORD *)(v113 + 40 * v110);
            if (v112 != v285)
            {
              v286 = v112 - 5;
              v287 = (void (***)(_QWORD))(v112 - 5);
              do
              {
                v288 = (void (**)(_QWORD *))*v287;
                v287 -= 5;
                (*v288)(v286);
                v111 = v286 == v285;
                v286 = v287;
              }
              while (!v111);
            }
            *((_QWORD *)this + 41) = v285;
          }
          goto LABEL_477;
        }
        v116 = *((_QWORD *)this + 42);
        if (0xCCCCCCCCCCCCCCCDLL * ((v116 - (uint64_t)v112) >> 3) >= v115)
        {
          v305 = &v112[5 * v115];
          v306 = 40 * v110 - 8 * (((uint64_t)v112 - v113) >> 3);
          do
          {
            *v112 = &off_1E42C2C18;
            v112[1] = 0;
            v112[3] = 0;
            v112[4] = 0;
            v112[2] = 0;
            v112 += 5;
            v306 -= 40;
          }
          while (v306);
          *((_QWORD *)this + 41) = v305;
LABEL_477:
          if (v107 != v108)
          {
            v362 = 0;
            v363 = 0;
            do
            {
              v364 = *((_QWORD *)this + 24);
              v365 = *((_QWORD *)this + 52) + 32 * v362;
              v366 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
              v367 = atomic_load((unsigned int *)this + 4);
              (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v364 + 104))(buf, v364, v365, v366, v367, 1, 1);
              v368 = *((_QWORD *)this + 40);
              v369 = v368 + 40 * v362;
              v370 = *(_QWORD *)(v369 + 8);
              if (v370)
              {
                v371 = (unsigned int *)(v370 + 128);
                do
                  v372 = __ldaxr(v371);
                while (__stlxr(v372 - 1, v371));
              }
              v373 = *(_QWORD *)&buf[8];
              v374 = v489.n128_u64[0];
              if (v489.n128_u64[0])
              {
                v375 = (unint64_t *)(v489.n128_u64[0] + 8);
                do
                  v376 = __ldxr(v375);
                while (__stxr(v376 + 1, v375));
              }
              v377 = *(std::__shared_weak_count **)(v369 + 16);
              *(_QWORD *)(v369 + 8) = v373;
              *(_QWORD *)(v369 + 16) = v374;
              if (v377)
              {
                v378 = (unint64_t *)&v377->__shared_owners_;
                do
                  v379 = __ldaxr(v378);
                while (__stlxr(v379 - 1, v378));
                if (!v379)
                {
                  ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                  std::__shared_weak_count::__release_weak(v377);
                }
                v373 = *(_QWORD *)(v369 + 8);
              }
              if (v373)
              {
                v380 = (unsigned int *)(v373 + 128);
                do
                  v381 = __ldaxr(v380);
                while (__stlxr(v381 + 1, v380));
              }
              v383 = v489.n128_u64[1];
              v382 = v490.n128_u64[0];
              if (v490.n128_u64[0])
              {
                v384 = (unint64_t *)(v490.n128_u64[0] + 8);
                do
                  v385 = __ldxr(v384);
                while (__stxr(v385 + 1, v384));
              }
              *(_QWORD *)(v368 + 40 * v362 + 24) = v383;
              v386 = v368 + 40 * v362;
              v387 = *(std::__shared_weak_count **)(v386 + 32);
              *(_QWORD *)(v386 + 32) = v382;
              if (v387)
              {
                v388 = (unint64_t *)&v387->__shared_owners_;
                do
                  v389 = __ldaxr(v388);
                while (__stlxr(v389 - 1, v388));
                if (!v389)
                {
                  ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                  std::__shared_weak_count::__release_weak(v387);
                }
              }
              *(_QWORD *)buf = &off_1E42C2C18;
              v390 = (std::__shared_weak_count *)v490.n128_u64[0];
              if (v490.n128_u64[0])
              {
                v391 = (unint64_t *)(v490.n128_u64[0] + 8);
                do
                  v392 = __ldaxr(v391);
                while (__stlxr(v392 - 1, v391));
                if (!v392)
                {
                  ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                  std::__shared_weak_count::__release_weak(v390);
                }
              }
              *(_QWORD *)buf = &off_1E42C2D08;
              if (*(_QWORD *)&buf[8])
              {
                v393 = (unsigned int *)(*(_QWORD *)&buf[8] + 128);
                do
                  v394 = __ldaxr(v393);
                while (__stlxr(v394 - 1, v393));
              }
              v395 = (std::__shared_weak_count *)v489.n128_u64[0];
              if (v489.n128_u64[0])
              {
                v396 = (unint64_t *)(v489.n128_u64[0] + 8);
                do
                  v397 = __ldaxr(v396);
                while (__stlxr(v397 - 1, v396));
                if (!v397)
                {
                  ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                  std::__shared_weak_count::__release_weak(v395);
                }
              }
              v398 = *((_QWORD *)this + 40) + 40 * v362;
              v481 = *(void (***)(karo::AsyncRequestManager::RequestHandle *__hidden))(v398 + 8);
              v399 = *(std::__shared_weak_count **)(v398 + 16);
              v482 = v399;
              if (v399)
              {
                v400 = (unint64_t *)&v399->__shared_owners_;
                do
                  v401 = __ldxr(v400);
                while (__stxr(v401 + 1, v400));
                karo::Job::addBlockingSubJob((uint64_t *)this, &v481, -1, 0);
                do
                  v402 = __ldaxr(v400);
                while (__stlxr(v402 - 1, v400));
                if (!v402)
                {
                  ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                  std::__shared_weak_count::__release_weak(v399);
                }
              }
              else
              {
                karo::Job::addBlockingSubJob((uint64_t *)this, &v481, -1, 0);
              }
              v362 = ++v363;
            }
            while (v110 > v363);
          }
          goto LABEL_632;
        }
        if ((v109 & 0x8000000000000000) == 0)
        {
          v117 = 0x999999999999999ALL * ((v116 - v113) >> 3);
          if (v117 <= v110)
            v117 = (v107 - v108) >> 5;
          if (0xCCCCCCCCCCCCCCCDLL * ((v116 - v113) >> 3) >= 0x333333333333333)
            v118 = 0x666666666666666;
          else
            v118 = v117;
          if (v118 <= 0x666666666666666)
          {
            v119 = (char *)operator new(40 * v118);
            v120 = &v119[40 * v114];
            v121 = &v119[40 * v110];
            v122 = 40 * v110 - 40 * v114;
            v123 = v120;
            do
            {
              *(_QWORD *)v123 = &off_1E42C2C18;
              *((_QWORD *)v123 + 1) = 0;
              *((_QWORD *)v123 + 3) = 0;
              *((_QWORD *)v123 + 4) = 0;
              *((_QWORD *)v123 + 2) = 0;
              v123 += 40;
              v122 -= 40;
            }
            while (v122);
            v124 = &v119[40 * v118];
            v125 = (char *)*((_QWORD *)this + 40);
            v126 = (char *)*((_QWORD *)this + 41);
            if (v126 == v125)
            {
              *((_QWORD *)this + 40) = v120;
              *((_QWORD *)this + 41) = v121;
              *((_QWORD *)this + 42) = v124;
            }
            else
            {
              v127 = v120;
              do
              {
                *((_QWORD *)v127 - 5) = &off_1E42C2D08;
                v127 -= 40;
                v128 = *((_QWORD *)v126 - 4);
                *((_QWORD *)v127 + 1) = v128;
                v129 = *((_QWORD *)v126 - 3);
                *((_QWORD *)v127 + 2) = v129;
                if (v129)
                {
                  v130 = (unint64_t *)(v129 + 8);
                  do
                    v131 = __ldxr(v130);
                  while (__stxr(v131 + 1, v130));
                  v128 = *((_QWORD *)v120 - 4);
                }
                if (v128)
                {
                  v132 = (unsigned int *)(v128 + 128);
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 + 1, v132));
                }
                *((_QWORD *)v120 - 5) = &off_1E42C2C18;
                *((_QWORD *)v120 - 2) = *((_QWORD *)v126 - 2);
                v134 = *((_QWORD *)v126 - 1);
                *((_QWORD *)v120 - 1) = v134;
                if (v134)
                {
                  v135 = (unint64_t *)(v134 + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v126 -= 40;
                v120 = v127;
              }
              while (v126 != v125);
              v126 = (char *)*((_QWORD *)this + 40);
              v336 = (char *)*((_QWORD *)this + 41);
              *((_QWORD *)this + 40) = v127;
              *((_QWORD *)this + 41) = v121;
              *((_QWORD *)this + 42) = v124;
              if (v336 != v126)
              {
                v337 = v336 - 40;
                v338 = (void (***)(char *))(v336 - 40);
                do
                {
                  v339 = *v338;
                  v338 -= 5;
                  (*v339)(v337);
                  v111 = v337 == v126;
                  v337 = (char *)v338;
                }
                while (!v111);
              }
            }
            if (v126)
              operator delete(v126);
            goto LABEL_477;
          }
LABEL_635:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
LABEL_634:
        abort();
      }
      v267 = (char *)*((_QWORD *)this + 43);
      v266 = (char *)*((_QWORD *)this + 44);
      v268 = (v266 - v267) >> 4;
      v269 = v110 - v268;
      if (v110 <= v268)
      {
        if (v110 < v268)
        {
          v301 = &v267[16 * v110];
          while (v266 != v301)
          {
            v302 = (std::__shared_weak_count *)*((_QWORD *)v266 - 1);
            if (v302)
            {
              v303 = (unint64_t *)&v302->__shared_owners_;
              do
                v304 = __ldaxr(v303);
              while (__stlxr(v304 - 1, v303));
              if (!v304)
              {
                ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                std::__shared_weak_count::__release_weak(v302);
              }
            }
            v266 -= 16;
          }
          *((_QWORD *)this + 44) = v301;
        }
      }
      else
      {
        v270 = *((_QWORD *)this + 45);
        if (v269 <= (v270 - (uint64_t)v266) >> 4)
        {
          bzero(*((void **)this + 44), 16 * v269);
          *((_QWORD *)this + 44) = &v266[16 * v269];
        }
        else
        {
          if (v109 < 0)
            goto LABEL_634;
          v271 = v270 - (_QWORD)v267;
          v272 = v271 >> 3;
          if (v271 >> 3 <= v110)
            v272 = (v107 - v108) >> 5;
          v273 = (unint64_t)v271 >= 0x7FFFFFFFFFFFFFF0;
          v274 = 0xFFFFFFFFFFFFFFFLL;
          if (!v273)
            v274 = v272;
          if (v274 >> 60)
            goto LABEL_635;
          v275 = 16 * v274;
          v276 = (char *)operator new(16 * v274);
          v277 = &v276[16 * v268];
          v278 = &v276[v275];
          bzero(v277, 16 * v269);
          v279 = &v277[16 * v269];
          if (v266 == v267)
          {
            *((_QWORD *)this + 43) = v277;
            *((_QWORD *)this + 44) = v279;
            *((_QWORD *)this + 45) = v278;
          }
          else
          {
            do
            {
              v280 = *((_OWORD *)v266 - 1);
              v266 -= 16;
              *((_OWORD *)v277 - 1) = v280;
              v277 -= 16;
              *(_QWORD *)v266 = 0;
              *((_QWORD *)v266 + 1) = 0;
            }
            while (v266 != v267);
            v266 = (char *)*((_QWORD *)this + 43);
            v281 = (char *)*((_QWORD *)this + 44);
            *((_QWORD *)this + 43) = v277;
            *((_QWORD *)this + 44) = v279;
            *((_QWORD *)this + 45) = v278;
            while (v281 != v266)
            {
              v282 = (std::__shared_weak_count *)*((_QWORD *)v281 - 1);
              if (v282)
              {
                v283 = (unint64_t *)&v282->__shared_owners_;
                do
                  v284 = __ldaxr(v283);
                while (__stlxr(v284 - 1, v283));
                if (!v284)
                {
                  ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                  std::__shared_weak_count::__release_weak(v282);
                }
              }
              v281 -= 16;
            }
          }
          if (v266)
            operator delete(v266);
        }
      }
      if (v107 != v108)
      {
        v413 = 0;
        v414 = 0;
        do
        {
          v415 = (char *)operator new(0x40uLL);
          *((_QWORD *)v415 + 1) = 0;
          *((_QWORD *)v415 + 2) = 0;
          *(_QWORD *)v415 = &off_1E42E5FF0;
          *((_QWORD *)v415 + 7) = 0;
          *(_OWORD *)(v415 + 24) = 0u;
          *(_OWORD *)(v415 + 40) = 0u;
          v416 = (_QWORD *)(*((_QWORD *)this + 43) + 16 * v413);
          v417 = (std::__shared_weak_count *)v416[1];
          *v416 = v415 + 24;
          v416[1] = v415;
          if (v417)
          {
            v418 = (unint64_t *)&v417->__shared_owners_;
            do
              v419 = __ldaxr(v418);
            while (__stlxr(v419 - 1, v418));
            if (!v419)
            {
              ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
              std::__shared_weak_count::__release_weak(v417);
            }
          }
          v420 = operator new(0x88uLL);
          v420[1] = 0;
          v420[2] = 0;
          *v420 = &off_1E42E5DF8;
          v420[3] = &off_1E42C3568;
          v420[4] = 0;
          *((_DWORD *)v420 + 10) = 29;
          *((_BYTE *)v420 + 44) = 0;
          *((_OWORD *)v420 + 3) = 0u;
          *((_OWORD *)v420 + 4) = 0u;
          *((_OWORD *)v420 + 5) = 0u;
          *((_OWORD *)v420 + 6) = 0u;
          *((_OWORD *)v420 + 7) = 0u;
          *((_BYTE *)v420 + 128) = 0;
          v421 = *(_QWORD *)(*((_QWORD *)this + 43) + 16 * v413);
          v422 = *(std::__shared_weak_count **)(v421 + 16);
          *(_QWORD *)(v421 + 8) = v420 + 3;
          *(_QWORD *)(v421 + 16) = v420;
          if (v422)
          {
            v423 = (unint64_t *)&v422->__shared_owners_;
            do
              v424 = __ldaxr(v423);
            while (__stlxr(v424 - 1, v423));
            if (!v424)
            {
              ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
              std::__shared_weak_count::__release_weak(v422);
            }
          }
          v425 = *((_QWORD *)this + 24);
          v426 = *((_QWORD *)this + 52) + 32 * v413;
          v427 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
          v428 = atomic_load((unsigned int *)this + 4);
          (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v425 + 104))(buf, v425, v426, v427, v428, 1, 1);
          v429 = *(_QWORD *)&buf[8];
          v481 = &off_1E42C2D08;
          v482 = *(std::__shared_weak_count **)&buf[8];
          v483 = (std::__shared_weak_count *)v489.n128_u64[0];
          if (v489.n128_u64[0])
          {
            v430 = (unint64_t *)(v489.n128_u64[0] + 8);
            do
              v431 = __ldxr(v430);
            while (__stxr(v431 + 1, v430));
          }
          if (v429)
          {
            v432 = (unsigned int *)(v429 + 128);
            do
              v433 = __ldaxr(v432);
            while (__stlxr(v433 + 1, v432));
          }
          *(_QWORD *)buf = &off_1E42C2C18;
          v434 = (std::__shared_weak_count *)v490.n128_u64[0];
          if (v490.n128_u64[0])
          {
            v435 = (unint64_t *)(v490.n128_u64[0] + 8);
            do
              v436 = __ldaxr(v435);
            while (__stlxr(v436 - 1, v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
          *(_QWORD *)buf = &off_1E42C2D08;
          if (*(_QWORD *)&buf[8])
          {
            v437 = (unsigned int *)(*(_QWORD *)&buf[8] + 128);
            do
              v438 = __ldaxr(v437);
            while (__stlxr(v438 - 1, v437));
          }
          v439 = (std::__shared_weak_count *)v489.n128_u64[0];
          if (v489.n128_u64[0])
          {
            v440 = (unint64_t *)(v489.n128_u64[0] + 8);
            do
              v441 = __ldaxr(v440);
            while (__stlxr(v441 - 1, v440));
            if (!v441)
            {
              ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
              std::__shared_weak_count::__release_weak(v439);
            }
          }
          v478 = v414;
          v442 = v110;
          v444 = v482;
          v443 = v483;
          v486 = (std::__shared_weak_count_vtbl *)v482;
          v487 = v483;
          if (v483)
          {
            v445 = &v483->__shared_owners_;
            do
              v446 = __ldxr((unint64_t *)v445);
            while (__stxr(v446 + 1, (unint64_t *)v445));
          }
          v447 = *((_QWORD *)this + 43);
          v448 = *((_QWORD *)this + 1);
          v449 = operator new(0xE8uLL);
          v450 = (std::__shared_weak_count *)v449;
          v449[1] = 0;
          v451 = v449 + 1;
          v449[2] = 0;
          *v449 = &off_1E42E6488;
          v452 = v449 + 3;
          v453 = *(_OWORD *)(v447 + 16 * v413);
          v454 = *(std::__shared_weak_count **)(v447 + 16 * v413 + 8);
          v477 = v453;
          if (v454)
          {
            v455 = (unint64_t *)&v454->__shared_owners_;
            do
              v456 = __ldxr(v455);
            while (__stxr(v456 + 1, v455));
            karo::Job::Job((uint64_t)(v449 + 3), v448);
            v450[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C68D8;
            *(_OWORD *)&v450[8].__shared_owners_ = v477;
            do
              v457 = __ldxr(v455);
            while (__stxr(v457 + 1, v455));
          }
          else
          {
            karo::Job::Job((uint64_t)(v449 + 3), v448);
            v450[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C68D8;
            *(_OWORD *)&v450[8].__shared_owners_ = v477;
          }
          v450[9].__vftable = 0;
          v450[9].__shared_owners_ = 0;
          *(_QWORD *)buf = v444;
          *(_QWORD *)&buf[8] = v443;
          if (v443)
          {
            v458 = (unint64_t *)&v443->__shared_owners_;
            v110 = v442;
            do
              v459 = __ldxr(v458);
            while (__stxr(v459 + 1, v458));
            karo::Job::addBlockingSubJob(v452, buf, 0, 0);
            v460 = v478;
            do
              v461 = __ldaxr(v458);
            while (__stlxr(v461 - 1, v458));
            if (!v461)
            {
              ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
              std::__shared_weak_count::__release_weak(v443);
            }
          }
          else
          {
            karo::Job::addBlockingSubJob(v452, buf, 0, 0);
            v110 = v442;
            v460 = v478;
          }
          if (v454)
          {
            v462 = (unint64_t *)&v454->__shared_owners_;
            do
              v463 = __ldaxr(v462);
            while (__stlxr(v463 - 1, v462));
            if (!v463)
            {
              ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
              std::__shared_weak_count::__release_weak(v454);
            }
          }
          v484 = v452;
          v485 = v450;
          do
            v464 = __ldxr(v451);
          while (__stxr(v464 + 1, v451));
          karo::Job::addBlockingSubJob((uint64_t *)this, &v484, -1, 1);
          do
            v465 = __ldaxr(v451);
          while (__stlxr(v465 - 1, v451));
          if (!v465)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
          v466 = *((_QWORD *)this + 27);
          *(_QWORD *)buf = v452;
          *(_QWORD *)&buf[8] = v450;
          do
            v467 = __ldxr(v451);
          while (__stxr(v467 + 1, v451));
          karo::JobManager::queueJob(v466, buf);
          do
            v468 = __ldaxr(v451);
          while (__stlxr(v468 - 1, v451));
          if (!v468)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
          do
            v469 = __ldaxr(v451);
          while (__stlxr(v469 - 1, v451));
          if (!v469)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
          v470 = v487;
          if (v487)
          {
            v471 = (unint64_t *)&v487->__shared_owners_;
            do
              v472 = __ldaxr(v471);
            while (__stlxr(v472 - 1, v471));
            if (!v472)
            {
              ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
              std::__shared_weak_count::__release_weak(v470);
            }
          }
          v481 = &off_1E42C2D08;
          if (v482)
          {
            v473 = (unsigned int *)&v482[5].__shared_owners_;
            do
              v474 = __ldaxr(v473);
            while (__stlxr(v474 - 1, v473));
          }
          if (v483)
          {
            v475 = &v483->__shared_owners_;
            do
              v476 = __ldaxr((unint64_t *)v475);
            while (__stlxr(v476 - 1, (unint64_t *)v475));
            if (!v476)
            {
              ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
              std::__shared_weak_count::__release_weak(v483);
            }
          }
          v413 = (v460 + 1);
          v414 = v460 + 1;
        }
        while (v110 > v413);
      }
      goto LABEL_632;
    case 1:
      if (*((_BYTE *)this + 444))
      {
        v30 = *((_QWORD *)this + 40);
        if (*((_QWORD *)this + 41) != v30)
        {
          v31 = 0;
          v32 = 1;
          while ((*(unsigned int (**)(unint64_t))(*(_QWORD *)(v30 + 40 * v31) + 16))(v30 + 40 * v31))
          {
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31) + 16))(*((_QWORD *)this + 40) + 40 * v31) != 4
              || !(*(uint64_t (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31) + 40))(*((_QWORD *)this + 40) + 40 * v31)
              || (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31) + 40))(*((_QWORD *)this + 40) + 40 * v31) == 4
              && *(_DWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31)
                                                                        + 24))(*((_QWORD *)this + 40) + 40 * v31) == 0x2000000)
            {
              goto LABEL_247;
            }
            v33 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40)
                                                                                             + 40 * v31)
                                                                                 + 24))(*((_QWORD *)this + 40) + 40 * v31);
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31) + 40))(*((_QWORD *)this + 40) + 40 * v31) < 0xBuLL
              || *v33 != 255
              || v33[1] != 216
              || v33[2] != 255
              || v33[3] != 224
              || v33[6] != 74
              || v33[7] != 70
              || v33[8] != 73
              || v33[9] != 70
              || v33[10])
            {
              v34 = (_BYTE *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31)
                                                                         + 24))(*((_QWORD *)this + 40) + 40 * v31);
              if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40 * v31) + 40))(*((_QWORD *)this + 40) + 40 * v31) & 0xFFFFFFFCuLL) < 0xC
                || v34[4] != 102
                || v34[5] != 116
                || v34[6] != 121
                || v34[7] != 112
                || v34[8] != 104
                || v34[9] != 101
                || v34[10] != 105
                || v34[11] != 99)
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                v186 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
                {
                  v187 = (_DWORD *)(*((_QWORD *)this + 34) + 32 * v31);
                  v189 = v187[4];
                  v188 = v187[5];
                  v190 = v187[6];
                  LODWORD(v187) = v187[7];
                  *(_DWORD *)buf = 67109888;
                  *(_DWORD *)&buf[4] = v188;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v190;
                  *(_WORD *)&buf[14] = 1024;
                  v489.n128_u32[0] = v189;
                  v489.n128_u16[2] = 1024;
                  *(unsigned __int32 *)((char *)&v489.n128_u32[1] + 2) = v187;
                  _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_ERROR, "Trying to page non JPEG or HEIF data: %d %d %d %d", buf, 0x1Au);
                }
                goto LABEL_246;
              }
            }
            v31 = v32;
            v30 = *((_QWORD *)this + 40);
            ++v32;
            if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 41) - v30) >> 3) <= v31)
              goto LABEL_76;
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v211 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
          {
            v307 = (_DWORD *)(*((_QWORD *)this + 34) + 32 * v31);
            v309 = v307[4];
            v308 = v307[5];
            v310 = v307[6];
            LODWORD(v307) = v307[7];
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v308;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v310;
            *(_WORD *)&buf[14] = 1024;
            v489.n128_u32[0] = v309;
            v489.n128_u16[2] = 1024;
            *(unsigned __int32 *)((char *)&v489.n128_u32[1] + 2) = v307;
            _os_log_impl(&dword_19F029000, v211, OS_LOG_TYPE_ERROR, "Failed to download image %d %d %d %d", buf, 0x1Au);
          }
          goto LABEL_277;
        }
      }
      else
      {
        v35 = *((_QWORD *)this + 43);
        if (*((_QWORD *)this + 44) != v35)
        {
          v31 = 0;
          v36 = 0;
          while (1)
          {
            v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 16 * v31) + 8) + 8);
            if (!v37)
              break;
            v38 = *(uint64_t **)(v37 + 16);
            v40 = *v38;
            v39 = (std::__shared_weak_count *)v38[1];
            if (v39)
            {
              v41 = (unint64_t *)&v39->__shared_owners_;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
              do
                v43 = __ldaxr(v41);
              while (__stlxr(v43 - 1, v41));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            if (!v40)
              break;
            v35 = *((_QWORD *)this + 43);
            v31 = ++v36;
            if (v36 >= (unint64_t)((*((_QWORD *)this + 44) - v35) >> 4))
              goto LABEL_76;
          }
          v210 = **(_DWORD **)(*((_QWORD *)this + 43) + 16 * v31);
          if (v210 == 3)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v186 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
            {
              v297 = (_DWORD *)(*((_QWORD *)this + 34) + 32 * v31);
              v299 = v297[4];
              v298 = v297[5];
              v300 = v297[6];
              LODWORD(v297) = v297[7];
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&buf[4] = v298;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v300;
              *(_WORD *)&buf[14] = 1024;
              v489.n128_u32[0] = v299;
              v489.n128_u16[2] = 1024;
              *(unsigned __int32 *)((char *)&v489.n128_u32[1] + 2) = v297;
              _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_ERROR, "Failed to decode image %d %d %d %d", buf, 0x1Au);
            }
LABEL_246:

            (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 24) + 120))(*((_QWORD *)this + 24), *((_QWORD *)this + 52) + 32 * v31);
            goto LABEL_247;
          }
          if (v210 != 1)
          {
LABEL_247:
            (*(void (**)(altitude::MapRequest *))(*(_QWORD *)this + 16))(this);
            return;
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v211 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
          {
            v212 = (_DWORD *)(*((_QWORD *)this + 34) + 32 * v31);
            v214 = v212[4];
            v213 = v212[5];
            v215 = v212[6];
            LODWORD(v212) = v212[7];
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v213;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v215;
            *(_WORD *)&buf[14] = 1024;
            v489.n128_u32[0] = v214;
            v489.n128_u16[2] = 1024;
            *(unsigned __int32 *)((char *)&v489.n128_u32[1] + 2) = v212;
            _os_log_impl(&dword_19F029000, v211, OS_LOG_TYPE_ERROR, "Failed to download image %d %d %d %d", buf, 0x1Au);
          }
LABEL_277:

          goto LABEL_247;
        }
      }
LABEL_76:
      v44 = (char *)operator new(0x80uLL);
      *((_QWORD *)v44 + 1) = 0;
      *((_QWORD *)v44 + 2) = 0;
      *(_QWORD *)v44 = &off_1E42E5F80;
      *((_QWORD *)v44 + 5) = 0;
      *((_QWORD *)v44 + 6) = 0;
      *((_OWORD *)v44 + 4) = 0u;
      *((_OWORD *)v44 + 5) = 0u;
      *((_OWORD *)v44 + 6) = 0u;
      *(_OWORD *)(v44 + 105) = 0u;
      *(_QWORD *)&buf[8] = v44;
      v45 = *((_DWORD *)this + 112);
      *((_DWORD *)v44 + 8) = v45;
      *((_QWORD *)v44 + 3) = &off_1E42C39D0;
      *(_QWORD *)buf = v44 + 24;
      v46 = operator new(0x58uLL);
      v46[1] = 0;
      v46[2] = 0;
      *v46 = &off_1E42E6418;
      v46[3] = &off_1E42C6768;
      v47 = *((_WORD *)this + 124);
      v46[4] = *((_QWORD *)this + 30);
      *((_DWORD *)v46 + 10) = v45;
      *((_WORD *)v46 + 24) = v47;
      *(_QWORD *)((char *)v46 + 52) = *(_QWORD *)((char *)this + 252);
      v46[9] = 0;
      v46[10] = 0;
      v48 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
      *((_QWORD *)this + 28) = v46 + 3;
      *((_QWORD *)this + 29) = v46;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = *((_QWORD *)this + 28);
      v52 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = *(std::__shared_weak_count **)(v51 + 56);
      *(_QWORD *)(v51 + 48) = *(_QWORD *)buf;
      *(_QWORD *)(v51 + 56) = v52;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      ++*((_DWORD *)this + 110);
      if (*(_QWORD *)&buf[8])
      {
        v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
      }
LABEL_94:
      if (v2)
      {
        v61 = *((_QWORD *)this + 40);
        v60 = *((_QWORD *)this + 41);
        if (v60 == v61)
        {
          v63 = 0;
          v64 = *((_QWORD *)this + 41);
        }
        else
        {
          v62 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v61 + 24))(*((_QWORD *)this + 40));
          if ((unint64_t)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40)) >= 0xC
            && v62[4] == 102
            && v62[5] == 116
            && v62[6] == 121
            && v62[7] == 112
            && v62[8] == 104
            && v62[9] == 101
            && v62[10] == 105)
          {
            v63 = 2 * (v62[11] == 99);
          }
          else
          {
            v63 = 0;
          }
          v60 = *((_QWORD *)this + 40);
          v64 = *((_QWORD *)this + 41);
        }
        v137 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - v60) >> 3);
        if (v137 == 1)
        {
          v173 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
          v174 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40));
          v175 = (std::__shared_weak_count *)operator new(0x30uLL);
          v175->__shared_owners_ = 0;
          v176 = (unint64_t *)&v175->__shared_owners_;
          v175->__shared_weak_owners_ = 0;
          v175->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
          ggl::Data::Data((ggl::Data *)&v175[1], v173, v174);
          v177 = *(_QWORD *)(*((_QWORD *)this + 28) + 48);
          v178 = operator new(0x38uLL);
          v178[1] = 0;
          v178[2] = 0;
          *v178 = &off_1E42E6338;
          *((_DWORD *)v178 + 6) = 0;
          *((_DWORD *)v178 + 7) = v63;
          v178[5] = 0;
          v178[6] = 0;
          v178[4] = 0;
          v179 = *(std::__shared_weak_count **)(v177 + 48);
          *(_QWORD *)(v177 + 40) = v178 + 3;
          *(_QWORD *)(v177 + 48) = v178;
          if (v179)
          {
            v180 = (unint64_t *)&v179->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          v182 = *(_QWORD *)(v177 + 40);
          v183 = *(__n128 **)(v182 + 16);
          if ((unint64_t)v183 >= *(_QWORD *)(v182 + 24))
          {
            v216.n128_u64[0] = (unint64_t)&v175[1];
            v216.n128_u64[1] = (unint64_t)v175;
            v185 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v182 + 8, v216);
          }
          else
          {
            v183->n128_u64[0] = (unint64_t)&v175[1];
            v183->n128_u64[1] = (unint64_t)v175;
            do
              v184 = __ldxr(v176);
            while (__stxr(v184 + 1, v176));
            v185 = v183 + 1;
          }
          *(_QWORD *)(v182 + 16) = v185;
          do
            v217 = __ldaxr(v176);
          while (__stlxr(v217 - 1, v176));
          if (!v217)
            goto LABEL_321;
        }
        else if (v137 == 4)
        {
          v490 = 0u;
          v491 = 0u;
          *(_OWORD *)buf = 0u;
          v489 = 0u;
          v138 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
          v139 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40));
          v140 = operator new(0x30uLL);
          v140[1] = 0;
          v140[2] = 0;
          *v140 = &off_1E42E42D8;
          *(_QWORD *)buf = ggl::Data::Data((ggl::Data *)(v140 + 3), v138, v139);
          *(_QWORD *)&buf[8] = v140;
          v141 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40)
                                                                             + 24))(*((_QWORD *)this + 40) + 40);
          v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 40) + 40))(*((_QWORD *)this + 40) + 40);
          v143 = operator new(0x30uLL);
          v143[2] = 0;
          *v143 = &off_1E42E42D8;
          v143[1] = 0;
          v144 = ggl::Data::Data((ggl::Data *)(v143 + 3), v141, v142);
          v145 = (std::__shared_weak_count *)v489.n128_u64[1];
          v489.n128_u64[0] = (unint64_t)v144;
          v489.n128_u64[1] = (unint64_t)v143;
          if (v145)
          {
            v146 = (unint64_t *)&v145->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
          }
          v148 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 80)
                                                                             + 24))(*((_QWORD *)this + 40) + 80);
          v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 80) + 40))(*((_QWORD *)this + 40) + 80);
          v150 = operator new(0x30uLL);
          v150[2] = 0;
          *v150 = &off_1E42E42D8;
          v150[1] = 0;
          v151 = ggl::Data::Data((ggl::Data *)(v150 + 3), v148, v149);
          v152 = (std::__shared_weak_count *)v490.n128_u64[1];
          v490.n128_u64[0] = (unint64_t)v151;
          v490.n128_u64[1] = (unint64_t)v150;
          if (v152)
          {
            v153 = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          v155 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 120)
                                                                             + 24))(*((_QWORD *)this + 40) + 120);
          v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 120) + 40))(*((_QWORD *)this + 40) + 120);
          v157 = operator new(0x30uLL);
          v157[2] = 0;
          *v157 = &off_1E42E42D8;
          v157[1] = 0;
          v158 = ggl::Data::Data((ggl::Data *)(v157 + 3), v155, v156);
          v159 = (std::__shared_weak_count *)v491.n128_u64[1];
          v491.n128_u64[0] = (unint64_t)v158;
          v491.n128_u64[1] = (unint64_t)v157;
          if (v159)
          {
            v160 = (unint64_t *)&v159->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = *(_QWORD *)(*((_QWORD *)this + 28) + 48);
          v163 = operator new(0x38uLL);
          v163[1] = 0;
          v163[2] = 0;
          *v163 = &off_1E42E6338;
          *((_DWORD *)v163 + 6) = 1;
          *((_DWORD *)v163 + 7) = v63;
          v163[5] = 0;
          v163[6] = 0;
          v163[4] = 0;
          v164 = *(std::__shared_weak_count **)(v162 + 48);
          *(_QWORD *)(v162 + 40) = v163 + 3;
          *(_QWORD *)(v162 + 48) = v163;
          if (v164)
          {
            v165 = (unint64_t *)&v164->__shared_owners_;
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          v167 = *(_QWORD *)(v162 + 40);
          v168 = *(__n128 **)(v167 + 16);
          if ((unint64_t)v168 >= *(_QWORD *)(v167 + 24))
          {
            v172 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v167 + 8, *(__n128 *)buf);
          }
          else
          {
            v168->n128_u64[0] = *(_QWORD *)buf;
            v169 = *(_QWORD *)&buf[8];
            v168->n128_u64[1] = *(_QWORD *)&buf[8];
            if (v169)
            {
              v170 = (unint64_t *)(v169 + 8);
              do
                v171 = __ldxr(v170);
              while (__stxr(v171 + 1, v170));
            }
            v172 = v168 + 1;
          }
          *(_QWORD *)(v167 + 16) = v172;
          v218 = *(_QWORD *)(v162 + 40);
          v219 = *(__n128 **)(v218 + 16);
          if ((unint64_t)v219 >= *(_QWORD *)(v218 + 24))
          {
            v223 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v218 + 8, v489);
          }
          else
          {
            v219->n128_u64[0] = v489.n128_u64[0];
            v220 = v489.n128_u64[1];
            v219->n128_u64[1] = v489.n128_u64[1];
            if (v220)
            {
              v221 = (unint64_t *)(v220 + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
            }
            v223 = v219 + 1;
          }
          *(_QWORD *)(v218 + 16) = v223;
          v224 = *(_QWORD *)(v162 + 40);
          v225 = *(__n128 **)(v224 + 16);
          if ((unint64_t)v225 >= *(_QWORD *)(v224 + 24))
          {
            v229 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v224 + 8, v490);
          }
          else
          {
            v225->n128_u64[0] = v490.n128_u64[0];
            v226 = v490.n128_u64[1];
            v225->n128_u64[1] = v490.n128_u64[1];
            if (v226)
            {
              v227 = (unint64_t *)(v226 + 8);
              do
                v228 = __ldxr(v227);
              while (__stxr(v228 + 1, v227));
            }
            v229 = v225 + 1;
          }
          *(_QWORD *)(v224 + 16) = v229;
          v230 = *(_QWORD *)(v162 + 40);
          v231 = *(__n128 **)(v230 + 16);
          if ((unint64_t)v231 >= *(_QWORD *)(v230 + 24))
          {
            v235 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v230 + 8, v491);
            v232 = (std::__shared_weak_count *)v491.n128_u64[1];
          }
          else
          {
            v231->n128_u64[0] = v491.n128_u64[0];
            v232 = (std::__shared_weak_count *)v491.n128_u64[1];
            v231->n128_u64[1] = v491.n128_u64[1];
            if (v232)
            {
              v233 = (unint64_t *)&v232->__shared_owners_;
              do
                v234 = __ldxr(v233);
              while (__stxr(v234 + 1, v233));
            }
            v235 = v231 + 1;
          }
          *(_QWORD *)(v230 + 16) = v235;
          if (v232)
          {
            v236 = (unint64_t *)&v232->__shared_owners_;
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
              std::__shared_weak_count::__release_weak(v232);
            }
          }
          if (v490.n128_u64[1])
          {
            v238 = (unint64_t *)(v490.n128_u64[1] + 8);
            do
              v239 = __ldaxr(v238);
            while (__stlxr(v239 - 1, v238));
            if (!v239)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)v490.n128_u64[1] + 16))(v490.n128_u64[1]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v490.n128_u64[1]);
            }
          }
          if (v489.n128_u64[1])
          {
            v240 = (unint64_t *)(v489.n128_u64[1] + 8);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)v489.n128_u64[1] + 16))(v489.n128_u64[1]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v489.n128_u64[1]);
            }
          }
          v175 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v242 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
LABEL_321:
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
        }
        v244 = (char *)operator new(0x58uLL);
        *((_QWORD *)v244 + 1) = 0;
        *((_QWORD *)v244 + 2) = 0;
        *(_QWORD *)v244 = &off_1E42DED18;
        *((_QWORD *)v244 + 5) = 0;
        *((_QWORD *)v244 + 6) = 0;
        *((_QWORD *)v244 + 4) = 0;
        *((_DWORD *)v244 + 14) = 0;
        *(_QWORD *)&v245 = 0x100000001;
        *((_QWORD *)&v245 + 1) = 0x100000001;
        *(_OWORD *)(v244 + 60) = v245;
        *(_QWORD *)(v244 + 76) = 0x100000001;
        *((_DWORD *)v244 + 21) = 0;
        *(_QWORD *)&buf[8] = v244;
        *((_QWORD *)v244 + 3) = &off_1E42B63B0;
        *(_QWORD *)buf = v244 + 24;
        v246 = *((_QWORD *)this + 1);
        v247 = *((_QWORD *)this + 28);
        v248 = (std::__shared_weak_count *)operator new(0x180uLL);
        v248->__shared_owners_ = 0;
        v248->__shared_weak_owners_ = 0;
        v248->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6290;
        Job = altitude::TextureMapLoadJob::TextureMapLoadJob((uint64_t)&v248[1], v246, (_QWORD *)(v247 + 48), *((_BYTE *)this + 296), buf);
        v250 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
        *((_QWORD *)this + 50) = Job;
        *((_QWORD *)this + 51) = v248;
        if (v250)
        {
          v251 = (unint64_t *)&v250->__shared_owners_;
          do
            v252 = __ldaxr(v251);
          while (__stlxr(v252 - 1, v251));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
            std::__shared_weak_count::__release_weak(v250);
          }
          v248 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
          v481 = (void (**)(karo::AsyncRequestManager::RequestHandle *__hidden))*((_QWORD *)this + 50);
          v482 = v248;
          if (!v248)
            goto LABEL_332;
        }
        else
        {
          v481 = (void (**)(karo::AsyncRequestManager::RequestHandle *__hidden))Job;
          v482 = v248;
        }
        v253 = (unint64_t *)&v248->__shared_owners_;
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
LABEL_332:
        karo::Job::addBlockingSubJob((uint64_t *)this, &v481, -1, 1);
        v255 = v482;
        if (v482)
        {
          v256 = (unint64_t *)&v482->__shared_owners_;
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        v258 = *((_QWORD *)this + 27);
        v259 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
        v486 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 50);
        v487 = v259;
        if (v259)
        {
          v260 = (unint64_t *)&v259->__shared_owners_;
          do
            v261 = __ldxr(v260);
          while (__stxr(v261 + 1, v260));
          karo::JobManager::queueJob(v258, &v486);
          do
            v262 = __ldaxr(v260);
          while (__stlxr(v262 - 1, v260));
          if (!v262)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
        else
        {
          karo::JobManager::queueJob(v258, &v486);
        }
        v263 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v264 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 - 1, v264));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
            std::__shared_weak_count::__release_weak(v263);
          }
        }
        goto LABEL_632;
      }
      if (*((_QWORD *)this + 48))
        goto LABEL_108;
      v191 = (uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 5;
      if (v191 == 1)
      {
        v289 = *(_QWORD *)(*((_QWORD *)this + 44) - 16);
        v291 = *(_QWORD *)(v289 + 8);
        v290 = *(_QWORD *)(v289 + 16);
        if (v290)
        {
          v292 = (unint64_t *)(v290 + 8);
          do
            v293 = __ldxr(v292);
          while (__stxr(v293 + 1, v292));
        }
        v294 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
        *((_QWORD *)this + 48) = v291;
        *((_QWORD *)this + 49) = v290;
        if (v294)
        {
          v295 = (unint64_t *)&v294->__shared_owners_;
          do
            v296 = __ldaxr(v295);
          while (__stlxr(v296 - 1, v295));
          if (!v296)
          {
            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
            std::__shared_weak_count::__release_weak(v294);
          }
        }
        goto LABEL_108;
      }
      if (v191 != 4)
        goto LABEL_108;
      if (!*(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 0))
      {
        v318 = operator new();
        *(_QWORD *)v318 = &off_1E42C3568;
        *(_QWORD *)(v318 + 8) = 0;
        *(_DWORD *)(v318 + 16) = 29;
        *(_BYTE *)(v318 + 20) = 0;
        *(_OWORD *)(v318 + 24) = 0u;
        *(_OWORD *)(v318 + 40) = 0u;
        *(_OWORD *)(v318 + 56) = 0u;
        *(_OWORD *)(v318 + 72) = 0u;
        *(_OWORD *)(v318 + 88) = 0u;
        *(_BYTE *)(v318 + 104) = 0;
        v319 = (_QWORD *)operator new();
        *v319 = &off_1E42E8360;
        v319[1] = 0;
        v319[2] = 0;
        v319[3] = v318;
        v320 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
        *((_QWORD *)this + 46) = v318;
        *((_QWORD *)this + 47) = v319;
        if (v320)
        {
          v321 = (unint64_t *)&v320->__shared_owners_;
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        v323 = operator new();
        v324 = (std::__shared_weak_count_vtbl *)v323;
        v326 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*((_QWORD *)this + 46);
        v325 = *((_QWORD *)this + 47);
        *(_QWORD *)buf = v326;
        *(_QWORD *)&buf[8] = v325;
        if (v325)
        {
          v327 = (unint64_t *)(v325 + 8);
          do
            v328 = __ldxr(v327);
          while (__stxr(v328 + 1, v327));
        }
        karo::Job::Job(v323, *((_QWORD *)this + 1));
        v324->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42C6910;
        v324[4].__get_deleter = 0;
        v324[4].__on_zero_shared_weak = 0;
        v324[4].__on_zero_shared = 0;
        v329 = (char *)*((_QWORD *)this + 43);
        v330 = (char *)*((_QWORD *)this + 44);
        v331 = v330 - v329;
        if (v330 != v329)
        {
          if (v331 < 0)
            abort();
          v332 = (void (__cdecl *)(std::__shared_count *__hidden))operator new(v330 - v329);
          v324[4].__on_zero_shared = v332;
          v324[4].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v332;
          v324[4].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v332
                                                                                               + 16 * (v331 >> 4));
          do
          {
            *(_QWORD *)v332 = *(_QWORD *)v329;
            v333 = *((_QWORD *)v329 + 1);
            *((_QWORD *)v332 + 1) = v333;
            if (v333)
            {
              v334 = (unint64_t *)(v333 + 8);
              do
                v335 = __ldxr(v334);
              while (__stxr(v335 + 1, v334));
            }
            v329 += 16;
            v332 = (void (__cdecl *)(std::__shared_count *__hidden))((char *)v332 + 16);
          }
          while (v329 != v330);
          v324[4].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v332;
        }
        v347 = *(_QWORD *)&buf[8];
        v324[5].~__shared_weak_count = v326;
        v324[5].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v347;
        if (v347)
        {
          v348 = (unint64_t *)(v347 + 8);
          do
            v349 = __ldxr(v348);
          while (__stxr(v349 + 1, v348));
        }
        v350 = (std::__shared_weak_count *)operator new();
        v350->__shared_owners_ = 0;
        v351 = (unint64_t *)&v350->__shared_owners_;
        v350->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8D00;
        v350->__shared_weak_owners_ = 0;
        v350[1].__vftable = v324;
        if (*(_QWORD *)&buf[8])
        {
          v352 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v353 = __ldaxr(v352);
          while (__stlxr(v353 - 1, v352));
          if (!v353)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        v354 = *((_QWORD *)this + 27);
        v481 = (void (**)(karo::AsyncRequestManager::RequestHandle *__hidden))v324;
        v482 = v350;
        do
          v355 = __ldxr(v351);
        while (__stxr(v355 + 1, v351));
        karo::JobManager::queueJob(v354, &v481);
        v356 = v482;
        if (v482)
        {
          v357 = (unint64_t *)&v482->__shared_owners_;
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
            std::__shared_weak_count::__release_weak(v356);
          }
        }
        v486 = v324;
        v487 = v350;
        do
          v359 = __ldxr(v351);
        while (__stxr(v359 + 1, v351));
        karo::Job::addBlockingSubJob((uint64_t *)this, &v486, 0, 1);
        do
          v360 = __ldaxr(v351);
        while (__stlxr(v360 - 1, v351));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
        do
          v361 = __ldaxr(v351);
        while (__stlxr(v361 - 1, v351));
        goto LABEL_544;
      }
      SubJob = karo::Job::getSubJob((pthread_mutex_t **)this, 0);
      v194 = *(void (***)(karo::AsyncRequestManager::RequestHandle *__hidden))SubJob;
      v193 = (std::__shared_weak_count *)*((_QWORD *)SubJob + 1);
      v481 = *(void (***)(karo::AsyncRequestManager::RequestHandle *__hidden))SubJob;
      v482 = v193;
      if (v193)
      {
        v195 = (unint64_t *)&v193->__shared_owners_;
        do
          v196 = __ldxr(v195);
        while (__stxr(v196 + 1, v195));
      }
      pthread_mutex_lock((pthread_mutex_t *)v194[19]);
      v197 = *((_DWORD *)v194 + 40);
      pthread_mutex_unlock((pthread_mutex_t *)v194[19]);
      if ((v197 & 2) != 0)
      {
        (*(void (**)(altitude::MapRequest *))(*(_QWORD *)this + 16))(this);
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      }
      else
      {
        v199 = *((_QWORD *)this + 46);
        v198 = *((_QWORD *)this + 47);
        if (v198)
        {
          v200 = (unint64_t *)(v198 + 8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v202 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
        *((_QWORD *)this + 48) = v199;
        *((_QWORD *)this + 49) = v198;
        if (v202)
        {
          v203 = (unint64_t *)&v202->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        v205 = *((_QWORD *)this + 43);
        for (i = *((_QWORD *)this + 44); i != v205; i -= 16)
        {
          v207 = *(std::__shared_weak_count **)(i - 8);
          if (v207)
          {
            v208 = (unint64_t *)&v207->__shared_owners_;
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
        }
        *((_QWORD *)this + 44) = v205;
        v193 = v482;
      }
      if (v193)
      {
        v345 = (unint64_t *)&v193->__shared_owners_;
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      if ((v197 & 2) == 0)
      {
LABEL_108:
        if (!*((_BYTE *)this + 296))
          goto LABEL_123;
        v65 = *((_QWORD *)this + 48);
        v66 = *(_QWORD *)(v65 + 8);
        if (!v66)
          goto LABEL_123;
        v67 = *(_DWORD *)(v66 + 8) - 22;
        if (v67 < 0x24 && ((0xFFFCFFFC1uLL >> v67) & 1) != 0)
          goto LABEL_123;
        if (*(_QWORD *)(v66 + 24) - *(_QWORD *)(v66 + 16) != 16)
          goto LABEL_123;
        v68 = *(_DWORD *)(v65 + 16);
        if (*(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 1))
        {
          v69 = karo::Job::getSubJob((pthread_mutex_t **)this, 1);
          v71 = *(uint64_t **)v69;
          v70 = (std::__shared_weak_count *)*((_QWORD *)v69 + 1);
          v484 = *(uint64_t **)v69;
          v485 = v70;
          if (v70)
          {
            v72 = (unint64_t *)&v70->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          pthread_mutex_lock((pthread_mutex_t *)v71[19]);
          v74 = *((_DWORD *)v71 + 40);
          pthread_mutex_unlock((pthread_mutex_t *)v71[19]);
          if ((v74 & 2) != 0)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v340 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v340, OS_LOG_TYPE_ERROR))
            {
              v341 = (_DWORD *)*((_QWORD *)this + 34);
              v343 = v341[5];
              v342 = v341[6];
              LODWORD(v341) = v341[4];
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v343;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v342;
              *(_WORD *)&buf[14] = 1024;
              v489.n128_u32[0] = v341;
              _os_log_impl(&dword_19F029000, v340, OS_LOG_TYPE_ERROR, "Failed to mipmap image %d %d %d", buf, 0x14u);
            }

            (*(void (**)(altitude::MapRequest *))(*(_QWORD *)this + 16))(this);
            pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
            *((_DWORD *)this + 40) |= 1u;
            pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
            if (!v70)
              return;
            v344 = (unint64_t *)&v70->__shared_owners_;
            do
              v105 = __ldaxr(v344);
            while (__stlxr(v105 - 1, v344));
            goto LABEL_171;
          }
          if (v70)
          {
            v75 = (unint64_t *)&v70->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
LABEL_123:
          ++*((_DWORD *)this + 110);
LABEL_124:
          if (*((_BYTE *)this + 444))
          {
            (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 112)
                                                                                               + 8)
                                                                                 + 24))(&v486);
            *(_QWORD *)buf = &off_1E42D8438;
            *(_QWORD *)&buf[8] = this;
            v489.n128_u64[1] = (unint64_t)buf;
            v481 = 0;
            v482 = 0;
            (*((void (**)(std::__shared_weak_count_vtbl *, uint8_t *, void (***)(karo::AsyncRequestManager::RequestHandle *__hidden)))v486->~__shared_weak_count
             + 2))(v486, buf, &v481);
            v77 = v482;
            if (!v482)
              goto LABEL_134;
            v78 = (unint64_t *)&v482->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
          }
          else
          {
            (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 112)
                                                                                               + 8)
                                                                                 + 24))(&v486);
            *(_QWORD *)buf = &off_1E42D8480;
            *(_QWORD *)&buf[8] = this;
            v489.n128_u64[1] = (unint64_t)buf;
            v481 = 0;
            v482 = 0;
            (*((void (**)(std::__shared_weak_count_vtbl *, uint8_t *, void (***)(karo::AsyncRequestManager::RequestHandle *__hidden)))v486->~__shared_weak_count
             + 2))(v486, buf, &v481);
            v77 = v482;
            if (!v482)
              goto LABEL_134;
            v80 = (unint64_t *)&v482->__shared_owners_;
            do
              v79 = __ldaxr(v80);
            while (__stlxr(v79 - 1, v80));
          }
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
LABEL_134:
          v81 = (uint8_t *)v489.n128_u64[1];
          if ((uint8_t *)v489.n128_u64[1] == buf)
          {
            v82 = 4;
            v81 = buf;
          }
          else
          {
            if (!v489.n128_u64[1])
            {
LABEL_139:
              if (v486)
              {
                v83 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v486->~__shared_weak_count + 3))(v486);
                v84 = v486;
                v486 = 0;
                *(_QWORD *)buf = v84;
                (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v83 + 48))(v83, buf);
                v85 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (v85)
                  (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
                v86 = v486;
                v486 = 0;
                if (v86)
                  (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
              }
              karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::reference(&v479, *((_QWORD *)this + 25), (uint64_t)this + 240);
              v88 = v479;
              v87 = v480;
              if (v480)
              {
                v89 = (unint64_t *)&v480->__shared_owners_;
                do
                  v90 = __ldxr(v89);
                while (__stxr(v90 + 1, v89));
                v70 = v87;
              }
              else
              {
                v70 = 0;
              }
              std::mutex::lock((std::mutex *)(v88 + 3));
              if (v87)
              {
                v91 = (unint64_t *)&v87->__shared_owners_;
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 - 1, v91));
                if (!v92)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              v93 = (std::__shared_weak_count *)v88[2];
              if (v93)
              {
                v94 = (unint64_t *)&v93->__shared_owners_;
                do
                  v95 = __ldxr(v94);
                while (__stxr(v95 + 1, v94));
                do
                  v96 = __ldaxr(v94);
                while (__stlxr(v96 - 1, v94));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              v98 = *((_QWORD *)this + 28);
              v97 = *((_QWORD *)this + 29);
              if (v97)
              {
                v99 = (unint64_t *)(v97 + 8);
                do
                  v100 = __ldxr(v99);
                while (__stxr(v100 + 1, v99));
              }
              v101 = (std::__shared_weak_count *)v88[2];
              v88[1] = v98;
              v88[2] = v97;
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
              *((_DWORD *)this + 40) |= 1u;
              pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
              std::mutex::unlock((std::mutex *)(v88 + 3));
              if (!v70)
                return;
              v104 = (unint64_t *)&v70->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
LABEL_171:
              if (v105)
                return;
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              v106 = v70;
              goto LABEL_173;
            }
            v82 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v81 + 8 * v82))();
          goto LABEL_139;
        }
        v311 = operator new();
        v312 = v311;
        v314 = (void (**)(karo::AsyncRequestManager::RequestHandle *__hidden))*((_QWORD *)this + 48);
        v313 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
        v481 = v314;
        v482 = v313;
        if (v313)
        {
          v315 = (unint64_t *)&v313->__shared_owners_;
          do
            v316 = __ldxr(v315);
          while (__stxr(v316 + 1, v315));
          karo::Job::Job(v311, *((_QWORD *)this + 1));
          *(_QWORD *)v312 = &off_1E42C69B8;
          *(_QWORD *)(v312 + 176) = v314;
          *(_QWORD *)(v312 + 184) = v313;
          do
            v317 = __ldxr(v315);
          while (__stxr(v317 + 1, v315));
        }
        else
        {
          karo::Job::Job(v311, *((_QWORD *)this + 1));
          *(_QWORD *)v312 = &off_1E42C69B8;
          *(_QWORD *)(v312 + 176) = v314;
          *(_QWORD *)(v312 + 184) = 0;
        }
        *(_DWORD *)(v312 + 192) = v68;
        v350 = (std::__shared_weak_count *)operator new();
        v350->__shared_owners_ = 0;
        v403 = (unint64_t *)&v350->__shared_owners_;
        v350->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8DA8;
        v350->__shared_weak_owners_ = 0;
        v350[1].__vftable = (std::__shared_weak_count_vtbl *)v312;
        if (v313)
        {
          v404 = (unint64_t *)&v313->__shared_owners_;
          do
            v405 = __ldaxr(v404);
          while (__stlxr(v405 - 1, v404));
          if (!v405)
          {
            ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
            std::__shared_weak_count::__release_weak(v313);
          }
        }
        v406 = *((_QWORD *)this + 27);
        *(_QWORD *)buf = v312;
        *(_QWORD *)&buf[8] = v350;
        do
          v407 = __ldxr(v403);
        while (__stxr(v407 + 1, v403));
        karo::JobManager::queueJob(v406, buf);
        v408 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v409 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v410 = __ldaxr(v409);
          while (__stlxr(v410 - 1, v409));
          if (!v410)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        v486 = (std::__shared_weak_count_vtbl *)v312;
        v487 = v350;
        do
          v411 = __ldxr(v403);
        while (__stxr(v411 + 1, v403));
        karo::Job::addBlockingSubJob((uint64_t *)this, &v486, 1, 1);
        do
          v412 = __ldaxr(v403);
        while (__stlxr(v412 - 1, v403));
        if (!v412)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
        do
          v361 = __ldaxr(v403);
        while (__stlxr(v361 - 1, v403));
LABEL_544:
        if (v361)
          return;
        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
        v106 = v350;
LABEL_173:
        std::__shared_weak_count::__release_weak(v106);
      }
      return;
    case 2:
      goto LABEL_94;
    case 3:
      goto LABEL_124;
    default:
      return;
  }
}

void sub_19F590224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F590238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F59024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F5902A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  karo::Job *v23;

  karo::Job::~Job(v23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  MEMORY[0x1A1AF4E00](v23, 0x10A1C40B452C71ALL);
  _Unwind_Resume(a1);
}

void sub_19F5902DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F5902F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;
  void *v25;

  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_19F590318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

BOOL altitude::MapRequest::succeeded(pthread_mutex_t **this)
{
  int v2;

  pthread_mutex_lock(this[19]);
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  return (v2 & 2) == 0 && this[28] != 0;
}

void karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::reference(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t **v41;
  std::mutex *v42;
  char *v43;
  std::__shared_weak_count *v44;

  v6 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  v8 = (uint64_t **)(a2 + 80);
  v7 = *(_QWORD **)(a2 + 80);
  if (!v7)
    goto LABEL_8;
  v9 = (uint64_t **)(a2 + 80);
  do
  {
    v10 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v7 + 4), a3);
    v11 = v7 + 1;
    if (!v10)
    {
      v11 = v7;
      v9 = (uint64_t **)v7;
    }
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v9 == v8 || (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a3, (uint64_t)(v9 + 4)) & 1) != 0)
  {
LABEL_8:
    v12 = 0;
  }
  else
  {
    v37 = (std::__shared_weak_count *)v9[13];
    if (v37 && (v38 = std::__shared_weak_count::lock(v37)) != 0)
    {
      v12 = v38;
      v39 = v9[12];
      if (v39)
      {
        *a1 = v39;
        a1[1] = (uint64_t *)v38;
LABEL_40:
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_45;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  v41 = a1;
  v42 = v6;
  v13 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_1E42E5CE0;
  v40 = a2;
  *((_QWORD *)v13 + 3) = a2;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 6) = 850045863;
  *((_QWORD *)v13 + 5) = 0;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  v14 = *(_QWORD *)a3;
  *((_QWORD *)v13 + 13) = 0;
  *((_QWORD *)v13 + 14) = v14;
  *((_WORD *)v13 + 60) = *(_WORD *)(a3 + 8);
  *(_QWORD *)(v13 + 124) = *(_QWORD *)(a3 + 12);
  *((_QWORD *)v13 + 18) = 0;
  *((_QWORD *)v13 + 19) = 0;
  *((_QWORD *)v13 + 20) = 0;
  v15 = *(char **)(a3 + 32);
  v16 = *(char **)(a3 + 40);
  v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v17 < 0)
      abort();
    v18 = operator new(v16 - v15);
    *((_QWORD *)v13 + 18) = v18;
    *((_QWORD *)v13 + 19) = v18;
    *((_QWORD *)v13 + 20) = &v18[2 * (v17 >> 5)];
    do
    {
      *v18 = *(_OWORD *)v15;
      v18[1] = *((_OWORD *)v15 + 1);
      v18 += 2;
      v15 += 32;
    }
    while (v15 != v16);
    *((_QWORD *)v13 + 19) = v18;
  }
  v13[168] = *(_BYTE *)(a3 + 56);
  v43 = v13 + 24;
  v44 = (std::__shared_weak_count *)v13;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = *v8;
  v22 = (uint64_t **)(a2 + 80);
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        v22 = (uint64_t **)v21;
        v23 = (uint64_t)(v21 + 4);
        if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](a3, (uint64_t)(v21 + 4)))
          break;
        v21 = *v22;
        v8 = v22;
        if (!*v22)
          goto LABEL_25;
      }
      if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](v23, a3))
        break;
      v8 = v22 + 1;
      v21 = v22[1];
      if (!v21)
        goto LABEL_25;
    }
    v24 = (char *)v22;
  }
  else
  {
LABEL_25:
    v24 = (char *)operator new(0x70uLL);
    *((_QWORD *)v24 + 4) = *(_QWORD *)a3;
    *((_WORD *)v24 + 20) = *(_WORD *)(a3 + 8);
    *(_QWORD *)(v24 + 44) = *(_QWORD *)(a3 + 12);
    *((_QWORD *)v24 + 9) = 0;
    *((_QWORD *)v24 + 10) = 0;
    *((_QWORD *)v24 + 8) = 0;
    v25 = *(char **)(a3 + 32);
    v26 = *(char **)(a3 + 40);
    v27 = v26 - v25;
    if (v26 != v25)
    {
      if (v27 < 0)
        abort();
      v28 = operator new(v26 - v25);
      *((_QWORD *)v24 + 8) = v28;
      *((_QWORD *)v24 + 9) = v28;
      *((_QWORD *)v24 + 10) = &v28[2 * (v27 >> 5)];
      do
      {
        *v28 = *(_OWORD *)v25;
        v28[1] = *((_OWORD *)v25 + 1);
        v28 += 2;
        v25 += 32;
      }
      while (v25 != v26);
      *((_QWORD *)v24 + 9) = v28;
    }
    v24[88] = *(_BYTE *)(a3 + 56);
    *((_QWORD *)v24 + 12) = 0;
    *((_QWORD *)v24 + 13) = 0;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v22;
    *v8 = (uint64_t *)v24;
    v29 = **(_QWORD **)(v40 + 72);
    v30 = (uint64_t *)v24;
    if (v29)
    {
      *(_QWORD *)(v40 + 72) = v29;
      v30 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v40 + 80), v30);
    ++*(_QWORD *)(v40 + 88);
  }
  v6 = v42;
  v12 = v44;
  if (v44)
  {
    p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)v24 + 13);
  *((_QWORD *)v24 + 12) = v43;
  *((_QWORD *)v24 + 13) = v44;
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  *v41 = (uint64_t *)v43;
  v41[1] = (uint64_t *)v44;
  if (v44)
    goto LABEL_40;
LABEL_45:
  std::mutex::unlock(v6);
}

void sub_19F590794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8480;
  a2[1] = v2;
  return result;
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  __int128 v6;
  unint64_t v7;
  _QWORD v8[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = (std::__shared_weak_count *)operator new(0x58uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v4[1].__shared_weak_owners_ = 0;
  v4[2].__vftable = 0;
  v4[1].__shared_owners_ = 0;
  LODWORD(v4[2].__shared_owners_) = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v4[2].__shared_owners_ + 4) = v6;
  *(std::__shared_weak_count_vtbl **)((char *)&v4[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v4[3].__shared_owners_) = 0;
  v8[0] = v4 + 1;
  v8[1] = v4;
  altitude::TextureMap::loadImage(*(_QWORD *)(*(_QWORD *)(v2 + 224) + 48), *(_QWORD *)(v2 + 384), v8, v3);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8438;
  a2[1] = v2;
  return result;
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
  altitude::TextureMapLoadJob::uploadTextures(*(altitude::TextureMapLoadJob **)(*(_QWORD *)(a1 + 8) + 400), *a2, 1);
}

void std::__shared_ptr_pointer<altitude::util::MipmapAndCompressImageJob *,std::shared_ptr<altitude::util::MipmapAndCompressImageJob>::__shared_ptr_default_delete<altitude::util::MipmapAndCompressImageJob,altitude::util::MipmapAndCompressImageJob>,std::allocator<altitude::util::MipmapAndCompressImageJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::util::MipmapAndCompressImageJob *,std::shared_ptr<altitude::util::MipmapAndCompressImageJob>::__shared_ptr_default_delete<altitude::util::MipmapAndCompressImageJob,altitude::util::MipmapAndCompressImageJob>,std::allocator<altitude::util::MipmapAndCompressImageJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<altitude::util::MergeImagesJob *,std::shared_ptr<altitude::util::MergeImagesJob>::__shared_ptr_default_delete<altitude::util::MergeImagesJob,altitude::util::MergeImagesJob>,std::allocator<altitude::util::MergeImagesJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::util::MergeImagesJob *,std::shared_ptr<altitude::util::MergeImagesJob>::__shared_ptr_default_delete<altitude::util::MergeImagesJob,altitude::util::MergeImagesJob>,std::allocator<altitude::util::MergeImagesJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<karo::media::Image *,std::shared_ptr<karo::media::Image>::__shared_ptr_default_delete<karo::media::Image,karo::media::Image>,std::allocator<karo::media::Image>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::Image *,std::shared_ptr<karo::media::Image>::__shared_ptr_default_delete<karo::media::Image,karo::media::Image>,std::allocator<karo::media::Image>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<altitude::TextureMapLoadJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::TextureMapLoadJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::TextureMapLoadJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::Map>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::Map>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::Map>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::TextureMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::TextureMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::TextureMap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::util::LoadImageJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::util::LoadImageJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::util::LoadImageJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<karo::media::Image>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::Image>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<karo::media::Image>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::MapImageData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::MapImageData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::MapImageData>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t std::less<altitude::MapRequestId>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4)
    return 1;
  if (v3 > v4)
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 9);
  v6 = *(unsigned __int8 *)(a2 + 9);
  v7 = v5 >= v6;
  if (v5 != v6)
    return !v7;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a2 + 12);
  v10 = v8 < v9;
  if (v8 == v9)
  {
    v11 = *(_DWORD *)(a1 + 16);
    v12 = *(_DWORD *)(a2 + 16);
    v10 = v11 < v12;
    if (v11 == v12)
    {
      if (!*(_BYTE *)(a1 + 56) || *(_BYTE *)(a2 + 56))
      {
        if (!*(_BYTE *)(a1 + 56) && *(_BYTE *)(a2 + 56))
          return 0;
        v13 = *(_DWORD **)(a1 + 32);
        v14 = *(_DWORD **)(a2 + 32);
        v15 = v13[4];
        v16 = v14[4];
        if (v15 == v16 && v13[5] == v14[5] && v13[6] == v14[6] && v14[7] == v13[7])
        {
          v7 = *v13 >= *v14;
          if (*v13 != *v14)
            return !v7;
          v17 = v13[1];
          v18 = v14[1];
          v7 = v17 >= v18;
          if (v17 != v18)
            return !v7;
          v19 = v13[2];
          v20 = v14[2];
          goto LABEL_31;
        }
        if (v15 >= v16)
        {
          if (v15 > v16)
            return 0;
          v21 = v13[5];
          v22 = v14[5];
          if (v21 >= v22)
          {
            if (v21 > v22)
              return 0;
            v23 = v13[6];
            v24 = v14[6];
            if (v23 >= v24)
            {
              if (v23 <= v24)
              {
                v19 = v13[7];
                v20 = v14[7];
LABEL_31:
                v7 = v19 >= v20;
                return !v7;
              }
              return 0;
            }
          }
        }
      }
      return 1;
    }
  }
  return v10;
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  void *v20;
  unint64_t *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v3 = a1 + 24;
  v2 = *(_QWORD *)(a1 + 24);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v4 = *(_QWORD **)(v2 + 80);
  if (v4)
  {
    v5 = (uint64_t *)(v2 + 80);
    do
    {
      v6 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v4 + 4), a1 + 112);
      v7 = v4 + 1;
      if (!v6)
      {
        v7 = v4;
        v5 = v4;
      }
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 != (uint64_t *)(v2 + 80)
      && (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a1 + 112, (uint64_t)(v5 + 4)) & 1) == 0)
    {
      v8 = (std::__shared_weak_count *)v5[13];
      if (v8)
      {
        v9 = std::__shared_weak_count::lock(v8);
        v10 = v9;
        if (v9)
        {
          v11 = v5[12];
          if (v11)
          {
            if (v11 != v3)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              goto LABEL_31;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = (uint64_t *)v5[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        v16 = v5;
        do
        {
          v15 = (uint64_t *)v16[2];
          v17 = *v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (!v17);
      }
      if (*(uint64_t **)(v2 + 72) == v5)
        *(_QWORD *)(v2 + 72) = v15;
      v18 = *(uint64_t **)(v2 + 80);
      --*(_QWORD *)(v2 + 88);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v18, v5);
      v19 = (std::__shared_weak_count *)v5[13];
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      v20 = (void *)v5[8];
      if (v20)
      {
        v5[9] = (uint64_t)v20;
        operator delete(v20);
      }
      operator delete(v5);
      if (v10)
      {
        v21 = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldaxr(v21);
        while (__stlxr(v13 - 1, v21));
LABEL_31:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(_QWORD *)(a1 + 152) = v22;
    operator delete(v22);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v23 = *(std::__shared_weak_count **)(a1 + 40);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19F591054(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(void **)(v1 + 144);
  if (v3)
  {
    *(_QWORD *)(v1 + 152) = v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(v1 + 48));
  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(a1);
}

void altitude::MapRequestManager::~MapRequestManager(altitude::MapRequestManager *this)
{
  altitude::MapRequestManager::~MapRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C5070;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C2D90;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::MapRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[12];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F591470(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    while (v4[12] != a2)
    {
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F591514(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  _QWORD *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 72);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 72);
    do
    {
      v6 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v4 + 4), a2);
      v7 = v4 + 1;
      if (!v6)
      {
        v7 = v4;
        v5 = v4;
      }
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 != (uint64_t *)(a1 + 72)
      && (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v5 + 4)) & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5[12] + 16))(v5[12]);
      std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v5);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F5915D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::MapRequestManager::createRequest@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *result;

  v5 = operator new();
  v6 = a1[4];
  v7 = a1[6];
  v8 = a1[12];
  v9 = karo::Job::Job(v5, v6);
  *(_BYTE *)(v9 + 176) = 0;
  *(_QWORD *)(v9 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v9 = &off_1E42C38C0;
  *(_QWORD *)(v9 + 192) = v8;
  v10 = a1[14];
  *(_QWORD *)(v9 + 200) = a1[13];
  *(_QWORD *)(v9 + 208) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 216) = v7;
  v13 = *a2;
  *(_QWORD *)(v5 + 232) = 0;
  *(_QWORD *)(v5 + 240) = v13;
  *(_WORD *)(v5 + 248) = *((_WORD *)a2 + 4);
  v14 = *(uint64_t *)((char *)a2 + 12);
  *(_QWORD *)(v5 + 272) = 0;
  *(_QWORD *)(v5 + 252) = v14;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  v16 = a2[4];
  v15 = a2[5];
  v17 = v15 - v16;
  if (v15 == v16)
  {
    v23 = 0;
    v19 = 0;
  }
  else
  {
    if (v17 < 0)
      abort();
    v18 = (char *)operator new(v15 - v16);
    v19 = v18;
    v20 = 0;
    *(_QWORD *)(v5 + 272) = v18;
    *(_QWORD *)(v5 + 280) = v18;
    *(_QWORD *)(v5 + 288) = &v18[32 * (v17 >> 5)];
    do
    {
      v21 = v16 + v20;
      v22 = &v18[v20];
      *(_OWORD *)v22 = *(_OWORD *)(v16 + v20);
      *((_OWORD *)v22 + 1) = *(_OWORD *)(v16 + v20 + 16);
      v20 += 32;
    }
    while (v21 + 32 != v15);
    v23 = &v18[v20];
    *(_QWORD *)(v5 + 280) = &v18[v20];
  }
  *(_BYTE *)(v5 + 296) = *((_BYTE *)a2 + 56);
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 428) = 0u;
  *(_BYTE *)(v5 + 444) = *(_BYTE *)(v6 + 68);
  *(_DWORD *)(v5 + 448) = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 44);
  v24 = v23 - v19;
  if (v23 == v19)
  {
    v30 = 0;
    v25 = 0;
  }
  else
  {
    if (v24 < 0)
      abort();
    v25 = (char *)operator new(v23 - v19);
    v26 = 0;
    *(_QWORD *)(v5 + 416) = v25;
    *(_QWORD *)(v5 + 424) = v25;
    *(_QWORD *)(v5 + 432) = &v25[32 * (v24 >> 5)];
    do
    {
      v27 = &v25[v26];
      v29 = *(_OWORD *)&v19[v26 + 16];
      v28 = (uint64_t)&v19[v26 + 32];
      *(_OWORD *)v27 = *(_OWORD *)&v19[v26];
      *((_OWORD *)v27 + 1) = v29;
      v26 += 32;
    }
    while ((char *)v28 != v23);
    v30 = v26 >> 5;
  }
  *(_QWORD *)(v5 + 424) = &v25[32 * v30];
  *a3 = v5;
  result = (_QWORD *)operator new();
  *result = &off_1E42E84B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a3[1] = (uint64_t)result;
  return result;
}

void sub_19F5918DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19F5918F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, md::DynamicTrafficTileList *a12, void **a13)
{
  karo::Job *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v20;
  void *v21;

  v20 = (void *)*((_QWORD *)v13 + 52);
  if (v20)
  {
    *((_QWORD *)v13 + 53) = v20;
    operator delete(v20);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(a12);
  std::vector<karo::AsyncFileLoader::FileObject>::~vector[abi:nn180100](a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16);
  v21 = *v18;
  if (*v18)
  {
    *((_QWORD *)v13 + 35) = v21;
    operator delete(v21);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v14);
  karo::Job::~Job(v13);
  MEMORY[0x1A1AF4E00]();
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 64);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 68);
      v12 = *(_DWORD *)(v8 + 72);
      v13 = *(_BYTE *)(v8 + 76);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 80;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F591B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F591C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  karo::Job *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  pthread_mutex_t **v21;
  pthread_mutex_t *v22;

  v6 = (pthread_mutex_t **)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v9 = *(_QWORD **)(a1 + 72);
  v7 = (_QWORD *)(a1 + 72);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v8 + 4), a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)) & 1) != 0)
  {
LABEL_8:
    v13 = 0;
    v14 = 0;
    goto LABEL_9;
  }
  v18 = (karo::Job *)v10[12];
  v13 = (std::__shared_weak_count *)v10[13];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(*v6);
  if (v18)
  {
    karo::Job::waitToFinish(v18, a3);
    v22 = (pthread_mutex_t *)*((_QWORD *)v18 + 19);
    v21 = (pthread_mutex_t **)((char *)v18 + 152);
    pthread_mutex_lock(v22);
    v14 = (_BYTE)v21[1] & 1;
    v6 = v21;
LABEL_9:
    pthread_mutex_unlock(*v6);
    if (!v13)
      return v14;
    goto LABEL_10;
  }
  v14 = 0;
  if (!v13)
    return v14;
LABEL_10:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v14;
}

void sub_19F591DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD *)(a1 + 72);
  v9 = *(_QWORD **)(a1 + 72);
  if (!v9)
    goto LABEL_8;
  v10 = (_QWORD *)(a1 + 72);
  do
  {
    v11 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v9 + 4), a2);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v41, a1, a2, a3);
    v40 = v41;
    *(_OWORD *)a4 = v41;
    v13 = (_QWORD *)*v8;
    v14 = v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v14 = v13;
          v15 = (uint64_t)(v13 + 4);
          if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v13 + 4)))
            break;
          v13 = (_QWORD *)*v14;
          v8 = v14;
          if (!*v14)
            goto LABEL_14;
        }
        if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](v15, a2))
          break;
        v8 = v14 + 1;
        v13 = (_QWORD *)v14[1];
        if (!v13)
          goto LABEL_14;
      }
      v16 = (char *)v14;
      v23 = v40;
      v24 = *((_QWORD *)&v40 + 1);
      if (!*((_QWORD *)&v40 + 1))
        goto LABEL_30;
    }
    else
    {
LABEL_14:
      v16 = (char *)operator new(0x70uLL);
      *((_QWORD *)v16 + 4) = *(_QWORD *)a2;
      *((_WORD *)v16 + 20) = *(_WORD *)(a2 + 8);
      *(_QWORD *)(v16 + 44) = *(_QWORD *)(a2 + 12);
      *((_QWORD *)v16 + 9) = 0;
      *((_QWORD *)v16 + 10) = 0;
      *((_QWORD *)v16 + 8) = 0;
      v17 = *(char **)(a2 + 32);
      v18 = *(char **)(a2 + 40);
      v19 = v18 - v17;
      if (v18 != v17)
      {
        if (v19 < 0)
          abort();
        v20 = operator new(v18 - v17);
        *((_QWORD *)v16 + 8) = v20;
        *((_QWORD *)v16 + 9) = v20;
        *((_QWORD *)v16 + 10) = &v20[2 * (v19 >> 5)];
        do
        {
          *v20 = *(_OWORD *)v17;
          v20[1] = *((_OWORD *)v17 + 1);
          v20 += 2;
          v17 += 32;
        }
        while (v17 != v18);
        *((_QWORD *)v16 + 9) = v20;
      }
      v16[88] = *(_BYTE *)(a2 + 56);
      *((_QWORD *)v16 + 12) = 0;
      *((_QWORD *)v16 + 13) = 0;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v14;
      *v8 = v16;
      v21 = **(_QWORD **)(a1 + 64);
      v22 = (uint64_t *)v16;
      if (v21)
      {
        *(_QWORD *)(a1 + 64) = v21;
        v22 = (uint64_t *)*v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v22);
      ++*(_QWORD *)(a1 + 80);
      v23 = *(_OWORD *)a4;
      v24 = a4[1];
      if (!v24)
        goto LABEL_30;
    }
    v29 = (unint64_t *)(v24 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
LABEL_30:
    v31 = (std::__shared_weak_count *)*((_QWORD *)v16 + 13);
    *((_OWORD *)v16 + 6) = v23;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *(_QWORD *)(a1 + 48);
    if (v34)
    {
      v35 = *a4;
      v36 = (std::__shared_weak_count *)a4[1];
      *(_QWORD *)&v41 = v35;
      *((_QWORD *)&v41 + 1) = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        karo::JobManager::queueJob(v34, &v41);
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      else
      {
        karo::JobManager::queueJob(v34, &v41);
      }
    }
    return;
  }
  v26 = v10[12];
  v25 = v10[13];
  if (v25)
  {
    v27 = (unint64_t *)(v25 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *a4 = v26;
  a4[1] = v25;
}

void sub_19F5920BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void altitude::MapRequestManager::request(_QWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  NSObject *v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a1[13] && a1[6])
  {
    (*(void (**)(_QWORD *, int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*a1 + 80))(a1, a2, a3, a4, a5, a6, 0);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v9 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (_DWORD *)*((_QWORD *)a2 + 4);
      v12 = v10[4];
      v11 = v10[5];
      v13 = v10[6];
      LODWORD(v10) = v10[7];
      v14 = *a2;
      v15 = a2[1];
      v16 = *((unsigned __int8 *)a2 + 9);
      v17 = a2[3];
      v18 = a2[4];
      v19 = *((unsigned __int8 *)a2 + 56);
      v20[0] = 67111424;
      v20[1] = v11;
      v21 = 1024;
      v22 = v13;
      v23 = 1024;
      v24 = v12;
      v25 = 1024;
      v26 = (int)v10;
      v27 = 1024;
      v28 = v14;
      v29 = 1024;
      v30 = v15;
      v31 = 1024;
      v32 = v16;
      v33 = 1024;
      v34 = v17;
      v35 = 1024;
      v36 = v18;
      v37 = 1024;
      v38 = v19;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Missing input! Unable to fetch request %d %d %d %d | %d | %d | %d | %d | %d | %d", (uint8_t *)v20, 0x3Eu);
    }

    a7[1] = 0;
    a7[2] = 0;
    *a7 = &off_1E42C2D08;
  }
}

void std::__shared_ptr_pointer<altitude::MapRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::MapRequest>,std::allocator<altitude::MapRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::MapRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::MapRequest>,std::allocator<altitude::MapRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void **std::vector<karo::AsyncFileLoader::FileObject>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 40;
      v6 = v3 - 40;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 40;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, a2);
  v8 = (std::__shared_weak_count *)a2[13];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (void *)a2[8];
      if (!v11)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v11 = (void *)a2[8];
  if (v11)
  {
LABEL_14:
    a2[9] = (uint64_t)v11;
    operator delete(v11);
  }
LABEL_15:
  operator delete(a2);
}

void sub_19F5924A4(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[13];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (void *)a1[8];
    if (v5)
    {
      a1[9] = v5;
      operator delete(v5);
    }
    operator delete(a1);
  }
}

uint64_t gdc::LayerDataSource::fallbackSettings(gdc::LayerDataSource *this)
{
  return 0;
}

void gdc::LayerDataSource::~LayerDataSource(gdc::LayerDataSource *this)
{
  gdc::LayerDataSource *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  void *v28;
  _BYTE *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  _BYTE *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  _BYTE *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;

  *(_QWORD *)this = off_1E42B0758;
  std::mutex::~mutex((std::mutex *)((char *)this + 480));
  v2 = (gdc::LayerDataSource *)*((_QWORD *)this + 58);
  if (v2 == (gdc::LayerDataSource *)((char *)this + 440))
  {
    v3 = 4;
    v2 = (gdc::LayerDataSource *)((char *)this + 440);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  std::mutex::~mutex((std::mutex *)((char *)this + 376));
  v4 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 304));
  v5 = *((_QWORD *)this + 31);
  if (v5)
  {
    v6 = *((_QWORD *)this + 32);
    v7 = (void *)*((_QWORD *)this + 31);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 88);
        if (v8 != *(void **)(v6 - 72))
          free(v8);
        if (*(_BYTE *)(v6 - 112))
          *(_BYTE *)(v6 - 112) = 0;
        v9 = *(void **)(v6 - 192);
        if (v9 != *(void **)(v6 - 176))
          free(v9);
        v6 -= 208;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v5;
    operator delete(v7);
  }
  v10 = *((_QWORD *)this + 28);
  if (v10)
  {
    v11 = *((_QWORD *)this + 29);
    v12 = (void *)*((_QWORD *)this + 28);
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 88);
        if (v13 != *(void **)(v11 - 72))
          free(v13);
        v11 -= 96;
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v10;
    operator delete(v12);
  }
  v14 = *((_QWORD *)this + 25);
  if (v14)
  {
    v15 = *((_QWORD *)this + 26);
    v16 = (void *)*((_QWORD *)this + 25);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v14;
    operator delete(v16);
  }
  v20 = (_QWORD *)*((_QWORD *)this + 22);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v22)
    operator delete(v22);
  v23 = (_BYTE *)*((_QWORD *)this + 17);
  if (v23)
  {
    while (1)
    {
      v29 = *(_BYTE **)v23;
      v30 = (std::__shared_weak_count *)*((_QWORD *)v23 + 17);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
          break;
      }
      if (v23[112])
        goto LABEL_59;
LABEL_60:
      v33 = (void *)*((_QWORD *)v23 + 4);
      if (v33 != *((void **)v23 + 6))
        free(v33);
      operator delete(v23);
      v23 = v29;
      if (!v29)
        goto LABEL_44;
    }
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (!v23[112])
      goto LABEL_60;
LABEL_59:
    v23[112] = 0;
    goto LABEL_60;
  }
LABEL_44:
  v24 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v24)
    operator delete(v24);
  v25 = (_BYTE *)*((_QWORD *)this + 12);
  if (v25)
  {
    while (1)
    {
      v34 = *(_BYTE **)v25;
      v35 = (std::__shared_weak_count *)*((_QWORD *)v25 + 17);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
          break;
      }
      if (v25[112])
        goto LABEL_70;
LABEL_71:
      v38 = (void *)*((_QWORD *)v25 + 4);
      if (v38 != *((void **)v25 + 6))
        free(v38);
      operator delete(v25);
      v25 = v34;
      if (!v34)
        goto LABEL_47;
    }
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!v25[112])
      goto LABEL_71;
LABEL_70:
    v25[112] = 0;
    goto LABEL_71;
  }
LABEL_47:
  v26 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v26)
    operator delete(v26);
  v27 = (_BYTE *)*((_QWORD *)this + 7);
  if (v27)
  {
    while (1)
    {
      v39 = *(_BYTE **)v27;
      v40 = (std::__shared_weak_count *)*((_QWORD *)v27 + 17);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
          break;
      }
      if (v27[112])
        goto LABEL_81;
LABEL_82:
      v43 = (void *)*((_QWORD *)v27 + 4);
      if (v43 != *((void **)v27 + 6))
        free(v43);
      operator delete(v27);
      v27 = v39;
      if (!v39)
        goto LABEL_50;
    }
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (!v27[112])
      goto LABEL_82;
LABEL_81:
    v27[112] = 0;
    goto LABEL_82;
  }
LABEL_50:
  v28 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v28)
    operator delete(v28);
}

uint64_t ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::PolygonShadowedStroke::ShadowPathMesh::~ShadowPathMesh(ggl::PolygonShadowedStroke::ShadowPathMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolygonShadowedStroke::ShadowPathMesh::~ShadowPathMesh(ggl::PolygonShadowedStroke::ShadowPathMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolygonShadowedStroke::ShadowPathMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolygonShadowedStroke::ShadowPathMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::~ShadowPathPipelineSetup(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::constantDataIsEnabled(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::textureIsEnabled(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *this)
{
  return 0;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ElevatedStrokeConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

uint64_t gdc::Registry::storage<md::ls::ElevatedStrokeConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB3E1F50BFD41E071;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB3E1F50BFD41E071;
      if (*(_QWORD *)&v3 <= 0xB3E1F50BFD41E071)
        v5 = 0xB3E1F50BFD41E071 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB3E1F50BFD41E071;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB3E1F50BFD41E071)
            {
              if (v7[2] == 0xB3E1F50BFD41E071)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB3E1F50BFD41E071)
          {
            if (v7[2] == 0xB3E1F50BFD41E071)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ElevatedStrokeConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274058;
  *(_QWORD *)(v11 + 8) = 0xB3E1F50BFD41E071;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB3E1F50BFD41E071, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB3E1F50BFD41E071;
  v15[1] = "md::ls::ElevatedStrokeConstantDataHandle]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB3E1F50BFD41E071, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F593218(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void sub_19F593458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F593504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F5935B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F593690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F593728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F593A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5490;

  return a1;
}

void geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5490;

  JUMPOUT(0x1A1AF4E00);
}

void md::ARCameraRouteLocationProvider::~ARCameraRouteLocationProvider(md::ARCameraRouteLocationProvider *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42A6328;
  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *((_QWORD *)this + 6) = &off_1E42B4C30;

}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42A6328;
  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      *((_QWORD *)this + 6) = &off_1E42B4C30;

      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void md::ARCameraRouteLocationProvider::update(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  long double v25;
  long double v26;
  double v27;
  long double v28;
  double v29;
  long double v30;
  double v31;
  long double v32;
  long double v33;
  long double v34;
  long double v35;
  long double v36;
  __double2 v37;
  long double v38;
  long double v39;
  long double v40;
  long double v41;
  long double v42;
  float64x2_t v43;
  uint64_t v44;
  long double v45;
  float64x2_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = a3;
  v8 = *(void **)(a1 + 56);
  if (v8)
  {
    v9 = v8;
    v10 = v9;
    v11 = *a5;
    v12 = a5[1];
    while (v11 != v12)
    {
      if (v11)
      {
        if (!*(_DWORD *)(v11 + 16))
          *(double *)(a1 + 72) = *(double *)(a1 + 72)
                               + (float)((float)(*(float *)(v11 + 12) - *(float *)(v11 + 4))
                                       / sqrtf((float)((float)(*(float *)(v11 + 8) - *(float *)v11)* (float)(*(float *)(v11 + 8) - *(float *)v11))+ (float)((float)(*(float *)(v11 + 12) - *(float *)(v11 + 4))* (float)(*(float *)(v11 + 12) - *(float *)(v11 + 4)))));
      }
      v11 += 24;
    }
    v13 = *(double *)(a1 + 72);
    objc_msgSend(v9, "distance");
    *(double *)(a1 + 72) = fmin(fmax(v13, 0.0), v14);
    v15 = objc_msgSend(v10, "coordinateAtOffset:");
    v16 = *(double *)(a1 + 80);
    v17 = v10;
    objc_msgSend(v17, "pointWithAltitudeCorrectionAtRouteCoordinate:", v15);
    v19 = v18;
    v21 = v20;
    v47 = v22;
    objc_msgSend(v17, "courseAtRouteCoordinateIndex:", v15);
    v24 = v23;
    v25 = tan(v19 * 0.00872664626 + 0.785398163);
    v26 = log(v25) * 0.159154943 + 0.5;
    v27 = v21 * 0.00277777778 + 0.5;
    v28 = tan(v19 * 0.00872664626 + 0.789761487);
    v29 = log(v28);
    v30 = tan(v19 * 0.00872664626 + 0.78103484);
    v31 = fabs((v29 - log(v30)) * 0.159154943);
    v32 = cos(v19 * 0.034906585) * -559.82 + 111132.92;
    v33 = v32 + cos(v19 * 0.0698131701) * 1.175;
    v34 = v33 + cos(v19 * 0.104719755) * -0.0023;
    v35 = fmod(360.0 - v24, 360.0);
    v36 = fmod(v35 + 360.0, 360.0);
    v37 = __sincos_stret(v36 * 0.0174532925);
    v38 = v31 * v16 / v34;
    v39 = (v27 + v38 * v37.__cosval) * 6.28318531;
    v40 = exp((v26 + v38 * v37.__sinval) * 6.28318531 + -3.14159265);
    v45 = atan(v40);
    v41 = fmod(v39, 6.28318531);
    v42 = fmod(v41 + 6.28318531, 6.28318531);
    v43.f64[0] = v45;
    v43.f64[1] = v42;
    v46 = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v43);

    *(float64x2_t *)(a1 + 24) = v46;
    *(_QWORD *)(a1 + 40) = v47;
    v44 = *(_QWORD *)(a1 + 112);
    if (v44)
    {
      v48 = v15;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 48))(v44, &v48);
    }

  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }

}

void sub_19F593F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t md::ARCameraRouteLocationProvider::location(md::ARCameraRouteLocationProvider *this)
{
  return (uint64_t)this + 24;
}

uint64_t md::ARCameraLocationProvider::heading(md::ARCameraLocationProvider *this)
{
  return (uint64_t)this + 8;
}

uint64_t geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C30;

  return a1;
}

void geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C30;

  JUMPOUT(0x1A1AF4E00);
}

void md::ARCameraRouteLocationProvider::setRoute(md::ARCameraRouteLocationProvider *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  GEOComposedRoute *v4;
  GEOComposedRoute *v5;
  void *v6;
  GEOComposedRoute *v7;
  GEOComposedRoute *v8;

  v7 = a2;
  v8 = v7;
  if ((geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*((void **)this + 7), (void **)&v8) & 1) == 0)
  {
    v3 = v7;
    v4 = v3;
    if (v3)
      v5 = v3;
    v6 = (void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v4;

    *((_QWORD *)this + 9) = 0;
  }

}

void sub_19F59405C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void md::ARAddEnvironmentProbeLogic::~ARAddEnvironmentProbeLogic(md::ARAddEnvironmentProbeLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARAddEnvironmentProbeContext]";
  v4[3] = 32;
  v4[4] = result;
  *v4 = &off_1E42B13B0;
  v4[1] = 0x62E8209F98919A2ELL;
  *a2 = v4;
  return result;
}

void sub_19F59419C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v4 <= 0x37F8C546A65FE3EEuLL)
      v6 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v4 <= 0x37F8C546A65FE3EEuLL)
      v6 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v4 <= 0x37F8C546A65FE3EEuLL)
      v6 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v4 <= 0x37F8C546A65FE3EEuLL)
      v6 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v5 <= 0x37F8C546A65FE3EEuLL)
      v7 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x37F8C546A65FE3EELL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x37F8C546A65FE3EELL)
      {
        if (v9[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x37F8C546A65FE3EELL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x37F8C546A65FE3EELL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARAddEnvironmentProbeLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *updated;
  uint64_t *v15;
  uint64_t j;
  uint64_t v17;
  id v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  int v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  gdc::Registry *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v69;
  uint64_t v70;
  id v71;
  void *v73;
  id *v74;
  uint64_t i;
  std::__shared_weak_count *v76;
  uint64_t v77;
  id v78;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "arEnableEnvironmentMap");

  if ((v5 & 1) == 0)
    return;
  v78 = *(id *)(*(_QWORD *)a3 + 80);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = (_QWORD *)gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(v6);
  v8 = gdc::Registry::storage<arComponents::WorldTransform>(v6);
  v9 = (_QWORD *)v8;
  v10 = v8 + 32;
  v12 = v7[7];
  v11 = v7[8];
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) >= (unint64_t)(v11 - v12))
    v13 = v7 + 4;
  else
    v13 = (_QWORD *)(v8 + 32);
  if (v7 + 4 == v13)
  {
    v74 = &v78;
    for (i = a1; v12 != v11; v12 += 8)
    {
      v42 = *(unsigned int *)(v12 + 4);
      v43 = v9[4];
      v44 = (v9[5] - v43) >> 3;
      if (v42 >> 7 < v44)
      {
        v45 = *(_QWORD *)(v43 + 8 * (v42 >> 7));
        if (v45)
        {
          v46 = *(unsigned __int16 *)(v45 + 2 * (v42 & 0x7F));
          v48 = v9[7];
          v47 = v9[8];
          v49 = (v47 - v48) >> 3;
          if (v49 > v46)
          {
            v50 = v48 + 8 * v46;
            if (v50 != v47 && *(_DWORD *)(v50 + 4) == (_DWORD)v42)
            {
              v52 = *(_QWORD *)v12;
              v53 = *(_QWORD *)v12 >> 39;
              if (v53 < v44
                && (v54 = *(_QWORD *)(v43 + 8 * v53)) != 0
                && (v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v52) & 0x7F)), v49 > v55)
                && ((v56 = v48 + 8 * v55, v56 != v47) ? (v57 = *(_DWORD *)(v56 + 4) == HIDWORD(v52)) : (v57 = 0), v57))
              {
                v41 = v9[10] + 80 * v55;
              }
              else
              {
                v41 = v9[11];
              }
              md::ARAddEnvironmentProbeLogic::processRequests(ARSession *)::$_0::operator()((uint64_t)&v74, v52, v41);
            }
          }
        }
      }
    }
  }
  if ((_QWORD *)v10 == v13)
  {
    v74 = &v78;
    i = a1;
    v58 = v9[7];
    v59 = v9[8];
    if (v58 != v59)
    {
      v60 = v9[10];
      do
      {
        v61 = *(unsigned int *)(v58 + 4);
        v62 = v7[4];
        if (v61 >> 7 < (v7[5] - v62) >> 3)
        {
          v63 = *(_QWORD *)(v62 + 8 * (v61 >> 7));
          if (v63)
          {
            v64 = *(unsigned __int16 *)(v63 + 2 * (v61 & 0x7F));
            v66 = v7[7];
            v65 = v7[8];
            if (v64 < (v65 - v66) >> 3)
            {
              v67 = v66 + 8 * v64;
              if (v67 != v65 && *(_DWORD *)(v67 + 4) == (_DWORD)v61)
                md::ARAddEnvironmentProbeLogic::processRequests(ARSession *)::$_0::operator()((uint64_t)&v74, *(_QWORD *)v58, v60);
            }
          }
        }
        v60 += 80;
        v58 += 8;
      }
      while (v58 != v59);
    }
  }

  updated = (_QWORD *)gdc::Registry::storage<arComponents::UpdateEnvironentProbeTexture>(*(_QWORD *)(a1 + 120));
  v15 = (uint64_t *)updated[7];
  v69 = (uint64_t *)updated[8];
  if (v15 == v69)
    return;
  for (j = updated[10]; ; j += 24)
  {
    v17 = *v15;
    v18 = *(id *)(j + 8);
    objc_msgSend(v18, "environmentTexture");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
      break;
LABEL_9:

    if (++v15 == v69)
      return;
  }
  v20 = (std::__shared_weak_count *)operator new(0x58uLL);
  v20->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v20[1].__shared_weak_owners_ = 0;
  v20[2].__vftable = 0;
  v20[1].__shared_owners_ = 0;
  LODWORD(v20[2].__shared_owners_) = 0;
  *(_OWORD *)((char *)&v20[2].__shared_owners_ + 4) = xmmword_19FFB2E60;
  *(std::__shared_weak_count_vtbl **)((char *)&v20[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v20[3].__shared_owners_) = 0;
  v22 = objc_msgSend(v19, "mipmapLevelCount");
  v23 = objc_msgSend(v19, "width");
  v70 = v17;
  v71 = v18;
  v73 = v19;
  v24 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v24->__shared_owners_ = 0;
  v25 = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5EA8;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAB0;
  v24[1].__shared_weak_owners_ = 0;
  v24[2].__vftable = 0;
  v24[1].__shared_owners_ = 0;
  LODWORD(v24[2].__shared_owners_) = 0;
  *(_OWORD *)&v24[3].__shared_owners_ = xmmword_19FFB38B0;
  v24[4].__vftable = (std::__shared_weak_count_vtbl *)1;
  v24[4].__shared_owners_ = 0;
  v24[2].__shared_weak_owners_ = (uint64_t)&unk_1E42B5EC8;
  v24[3].__vftable = (std::__shared_weak_count_vtbl *)"";
  LODWORD(v24[4].__shared_weak_owners_) = v22;
  v24[5].std::__shared_count = 0u;
  *(_OWORD *)&v24[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[6].__shared_owners_ = 0u;
  v24[7].std::__shared_count = 0u;
  *(_OWORD *)&v24[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[8].__shared_owners_ = 0u;
  LOWORD(v24[9].__vftable) = 0;
  HIDWORD(v24[9].__vftable) = v23;
  LOBYTE(v24[9].__shared_owners_) = 1;
  v24[9].__shared_weak_owners_ = (uint64_t)&v20[1];
  v24[10].__vftable = (std::__shared_weak_count_vtbl *)v20;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = *(gdc::Registry **)(a1 + 120);
  do
    v28 = __ldxr(v25);
  while (__stxr(v28 + 1, v25));
  v74 = v73;
  i = (uint64_t)&v24[1];
  v76 = v24;
  do
    v29 = __ldxr(v25);
  while (__stxr(v29 + 1, v25));
  v30 = gdc::Registry::create(v27);
  v31 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>((uint64_t)v27);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v31, v30);
  v32 = (uint64_t *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>((uint64_t)v27);
  gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::emplace(v32, v30, (uint64_t)&v74);
  do
    v33 = __ldaxr(v25);
  while (__stlxr(v33 - 1, v25));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }

  do
    v34 = __ldaxr(v25);
  while (__stlxr(v34 - 1, v25));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  v35 = (uint64_t *)gdc::Registry::storage<arComponents::UpdateEnvironentProbeTexture>(*(_QWORD *)(a1 + 120));
  v77 = v70;
  if (!geo::sparse_map<gdc::Entity,arComponents::UpdateEnvironentProbeTexture>::erase(v35 + 4, HIDWORD(v70))|| (v36 = (_QWORD *)v35[28]) == 0)
  {
    do
LABEL_30:
      v39 = __ldaxr(v25);
    while (__stlxr(v39 - 1, v25));
    v18 = v71;
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    v19 = v73;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    goto LABEL_9;
  }
  v37 = (void *)v35[31];
  while (1)
  {
    v74 = (id *)&v77;
    i = 1;
    v78 = v37;
    v38 = v36[6];
    if (!v38)
      break;
    (*(void (**)(uint64_t, id *, id **))(*(_QWORD *)v38 + 48))(v38, &v78, &v74);
    v36 = (_QWORD *)*v36;
    if (!v36)
      goto LABEL_30;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F594E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_19F594E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F594E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::UpdateEnvironentProbeTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1D70BA3BBBE79160;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1D70BA3BBBE79160;
      if (*(_QWORD *)&v3 <= 0x1D70BA3BBBE79160uLL)
        v5 = 0x1D70BA3BBBE79160uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1D70BA3BBBE79160;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1D70BA3BBBE79160)
            {
              if (v7[2] == 0x1D70BA3BBBE79160)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1D70BA3BBBE79160)
          {
            if (v7[2] == 0x1D70BA3BBBE79160)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::UpdateEnvironentProbeTexture]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B25F8;
  *(_QWORD *)(v11 + 8) = 0x1D70BA3BBBE79160;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1D70BA3BBBE79160uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1D70BA3BBBE79160;
  v15[1] = "arComponents::UpdateEnvironentProbeTexture]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1D70BA3BBBE79160, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F595240(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;

  v65 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v65);
  if ((v6 & 1) != 0)
  {
    v22 = a1[11];
    v21 = a1[12];
    if (v22 >= v21)
    {
      v31 = a1[10];
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v31) >> 3);
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_70;
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 3);
      v34 = 2 * v33;
      if (2 * v33 <= v32 + 1)
        v34 = v32 + 1;
      if (v33 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v34;
      if (v35)
      {
        if (v35 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v36 = (char *)operator new(24 * v35);
      }
      else
      {
        v36 = 0;
      }
      v37 = &v36[24 * v32];
      *((_QWORD *)v37 + 1) = 0;
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 2) = 0;
      objc_storeStrong((id *)v37, *(id *)a3);
      v39 = *(_QWORD *)(a3 + 8);
      v38 = *(_QWORD *)(a3 + 16);
      if (v38)
      {
        v40 = (unint64_t *)(v38 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      *((_QWORD *)v37 + 1) = v39;
      v42 = &v36[24 * v32];
      v43 = (std::__shared_weak_count *)*((_QWORD *)v42 + 2);
      *((_QWORD *)v42 + 2) = v38;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = &v36[24 * v35];
      v30 = (uint64_t)(v37 + 24);
      v48 = (_QWORD *)a1[10];
      v47 = (_QWORD *)a1[11];
      if (v47 == v48)
      {
        a1[10] = (uint64_t)v37;
        a1[11] = v30;
        a1[12] = (uint64_t)v46;
      }
      else
      {
        do
        {
          v51 = v37;
          *((_QWORD *)v37 - 3) = 0;
          *((_QWORD *)v37 - 2) = 0;
          v37 -= 24;
          *((_QWORD *)v37 + 2) = 0;
          v52 = (void *)*(v47 - 3);
          v47 -= 3;
          objc_storeStrong((id *)v37, v52);
          v54 = v47[1];
          v53 = v47[2];
          if (v53)
          {
            v55 = (unint64_t *)(v53 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v57 = (std::__shared_weak_count *)*((_QWORD *)v51 - 1);
          *((_QWORD *)v51 - 2) = v54;
          *((_QWORD *)v51 - 1) = v53;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        while (v47 != v48);
        v47 = (_QWORD *)a1[10];
        v60 = (_QWORD *)a1[11];
        a1[10] = (uint64_t)v37;
        a1[11] = v30;
        a1[12] = (uint64_t)v46;
        while (v60 != v47)
        {
          v62 = (std::__shared_weak_count *)*(v60 - 1);
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v61 = (void *)*(v60 - 3);
          v60 -= 3;

        }
      }
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      objc_storeStrong((id *)v22, *(id *)a3);
      v24 = *(_QWORD *)(a3 + 8);
      v23 = *(_QWORD *)(a3 + 16);
      if (v23)
      {
        v25 = (unint64_t *)(v23 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = *(std::__shared_weak_count **)(v22 + 16);
      *(_QWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 16) = v23;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v22 + 24;
    }
    a1[11] = v30;
    v18 = a1[31];
  }
  else
  {
    v7 = a1[10];
    v8 = ((uint64_t)v5 - a1[7]) >> 3;
    v9 = v7 + 24 * v8;
    objc_storeStrong((id *)v9, *(id *)a3);
    v11 = *(_QWORD *)(a3 + 8);
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)(v9 + 8) = v11;
    v14 = v7 + 24 * v8;
    v15 = *(std::__shared_weak_count **)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v10;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = a1[31];
    if (v9 != a1[11])
    {
      v19 = (_QWORD *)a1[16];
      if (v19)
      {
        while (1)
        {
          v67 = &v65;
          v68 = 1;
          v66 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v66, &v67);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_69:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_70:
        abort();
      }
      return;
    }
  }
  v49 = (_QWORD *)a1[22];
  if (v49)
  {
    while (1)
    {
      v67 = &v65;
      v68 = 1;
      v66 = v18;
      v50 = v49[6];
      if (!v50)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v50 + 48))(v50, &v66, &v67);
      v49 = (_QWORD *)*v49;
      if (!v49)
        return;
    }
    goto LABEL_69;
  }
}

uint64_t geo::sparse_map<gdc::Entity,arComponents::UpdateEnvironentProbeTexture>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3)
    return 0;
  v3 = *(_QWORD *)(*a1 + 8 * v2);
  if (!v3)
    return 0;
  v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3)
    return 0;
  v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7)
    return 0;
  v10 = a1[6];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (_QWORD *)v8);
  v11 = *(id *)(a1[7] - 16);
  v12 = v10 + 24 * v5;
  v13 = *(void **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v11;

  v14 = a1[7];
  *(_QWORD *)(v14 - 24) = &off_1E42B5070;
  v14 -= 24;

  a1[7] = v14;
  return 1;
}

uint64_t geo::_retain_ptr<AREnvironmentProbeAnchor * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5070;

  return a1;
}

void geo::_retain_ptr<AREnvironmentProbeAnchor * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5070;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureCube>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::UpdateEnvironentProbeTexture>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        *(_QWORD *)(v3 - 24) = &off_1E42B5070;
        v3 -= 24;

      }
      while (v3 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)a1[4];
  if (v6)
  {
    v7 = (_QWORD *)a1[5];
    v8 = (void *)a1[4];
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          MEMORY[0x1A1AF4E00](v9, 0x1000C40104B78CFLL);
      }
      while (v7 != v6);
      v8 = (void *)a1[4];
    }
    a1[5] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8CEA2E362F0B4EBDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8CEA2E362F0B4EBDLL;
      if (*(_QWORD *)&v3 <= 0x8CEA2E362F0B4EBDLL)
        v5 = 0x8CEA2E362F0B4EBDLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8CEA2E362F0B4EBDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8CEA2E362F0B4EBDLL)
            {
              if (v7[2] == 0x8CEA2E362F0B4EBDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8CEA2E362F0B4EBDLL)
          {
            if (v7[2] == 0x8CEA2E362F0B4EBDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::PendingEnvironmentProbeCreation]";
  *(_QWORD *)(v11 + 24) = 45;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2658;
  *(_QWORD *)(v11 + 8) = 0x8CEA2E362F0B4EBDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8CEA2E362F0B4EBDLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8CEA2E362F0B4EBDLL;
  v15[1] = "arComponents::PendingEnvironmentProbeCreation]";
  v15[2] = 45;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8CEA2E362F0B4EBDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F595BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARAddEnvironmentProbeLogic::processRequests(ARSession *)::$_0::operator()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  double v14;
  void *v15;
  _QWORD *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;

  v6 = *(_QWORD *)(a1 + 8);
  objc_msgSend(**(id **)a1, "currentFrame");
  v21 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "camera");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "transform");
  v19 = v9;
  v20 = v8;
  v17 = v11;
  v18 = v10;

  v12 = *(double *)(a3 + 56);
  v13 = objc_alloc((Class)getAREnvironmentProbeAnchorClass());
  v14 = v12 * 100.0;
  *(float *)&v14 = v12 * 100.0;
  v15 = (void *)objc_msgSend(v13, "initWithTransform:extent:", v20, v19, v18, v17, *(double *)vdupq_lane_s32(*(int32x2_t *)&v14, 0).i64);
  objc_msgSend(**(id **)a1, "addAnchor:", v15);
  v16 = (_QWORD *)gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(*(_QWORD *)(v6 + 120));
  gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::remove(v16, a2);

}

void sub_19F595CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

Class initAREnvironmentProbeAnchor(void)
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_3270);
  result = objc_getClass("AREnvironmentProbeAnchor");
  classAREnvironmentProbeAnchor = (uint64_t)result;
  getAREnvironmentProbeAnchorClass = (uint64_t (*)(void))AREnvironmentProbeAnchorFunction;
  return result;
}

id AREnvironmentProbeAnchorFunction(void)
{
  return (id)classAREnvironmentProbeAnchor;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return ___ZL9LoadARKitv_block_invoke();
}

void ___ZL9LoadARKitv_block_invoke()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit"));
}

void gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::ARAddEnvironmentProbeContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B13B0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARAddEnvironmentProbeContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B13B0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARAddEnvironmentProbeContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

md::LabelLineStitchSegment *md::LabelLineStitchSegment::LabelLineStitchSegment(md::LabelLineStitchSegment *this, const md::LabelLineSegment *a2)
{
  char *v3;
  _DWORD *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _DWORD v12[2];

  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (char *)this + 8;
  *(_QWORD *)this = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 2139095039;
  *((_WORD *)this + 38) = 0;
  *((_BYTE *)this + 78) = 0;
  *((_DWORD *)this + 30) = 2139095039;
  v4 = (_DWORD *)((char *)this + 120);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_WORD *)this + 62) = 0;
  *((_BYTE *)this + 126) = 0;
  *((_WORD *)this + 64) = 1;
  md::LabelLineStitchSegment::point((md::LabelLineStitchSegment *)&v9, this, 0);
  v5 = v10;
  *((_OWORD *)this + 2) = v9;
  *((_OWORD *)this + 3) = v5;
  *((_QWORD *)this + 8) = v11;
  *((_DWORD *)this + 18) = v12[0];
  *(_DWORD *)((char *)this + 75) = *(_DWORD *)((char *)v12 + 3);
  if (*(_QWORD *)this)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  }
  else if (*(_QWORD *)v3)
  {
    v6 = *(unsigned int *)(*(_QWORD *)v3 + 56);
  }
  else
  {
    v6 = 0;
  }
  md::LabelLineStitchSegment::point((md::LabelLineStitchSegment *)&v9, this, v6 - 1);
  v7 = v10;
  *((_OWORD *)this + 5) = v9;
  *((_OWORD *)this + 6) = v7;
  *((_QWORD *)this + 14) = v11;
  *v4 = v12[0];
  *(_DWORD *)((char *)v4 + 3) = *(_DWORD *)((char *)v12 + 3);
  return this;
}

_QWORD *md::LabelLineStitchSegment::LabelLineStitchSegment(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _DWORD v12[2];

  *a1 = 0;
  a1[1] = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  a1[8] = 0;
  *((_DWORD *)a1 + 18) = 2139095039;
  *((_WORD *)a1 + 38) = 0;
  *((_BYTE *)a1 + 78) = 0;
  *((_DWORD *)a1 + 30) = 2139095039;
  v3 = a1 + 15;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  a1[14] = 0;
  *((_WORD *)a1 + 62) = 0;
  *((_BYTE *)a1 + 126) = 0;
  *((_WORD *)a1 + 64) = 1;
  md::LabelLineStitchSegment::point((md::LabelLineStitchSegment *)&v9, a1, 0);
  v4 = v10;
  *((_OWORD *)a1 + 2) = v9;
  *((_OWORD *)a1 + 3) = v4;
  a1[8] = v11;
  *((_DWORD *)a1 + 18) = v12[0];
  *(_DWORD *)((char *)a1 + 75) = *(_DWORD *)((char *)v12 + 3);
  if (*a1)
  {
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  }
  else
  {
    v6 = a1[1];
    if (v6)
      v5 = *(unsigned int *)(v6 + 56);
    else
      v5 = 0;
  }
  md::LabelLineStitchSegment::point((md::LabelLineStitchSegment *)&v9, a1, v5 - 1);
  v7 = v10;
  *((_OWORD *)a1 + 5) = v9;
  *((_OWORD *)a1 + 6) = v7;
  a1[14] = v11;
  *v3 = v12[0];
  *(_DWORD *)((char *)v3 + 3) = *(_DWORD *)((char *)v12 + 3);
  return a1;
}

void sub_19F596248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKStateCaptureHandler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F59652C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F596698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F596910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::FlyoverMorphRenderable::~FlyoverMorphRenderable(altitude::FlyoverMorphRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5BB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5BB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMorphRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5BB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5BB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::construct_at[abi:nn180100]<ggl::FlyoverMorph::MorphMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::FlyoverMorph::MorphMesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *zone;
  int v41;
  int v42;
  uint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  malloc_zone_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *a4;
  v8 = (std::__shared_weak_count *)a4[1];
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if ((v12 & 1) == 0)
  {
    v48 = a2;
    a2 = v48;
    if (v33)
    {
      if ((v34 & 1) == 0
      {
        ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
      }
      ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
      unk_1EE5761A8 = 1;
      a2 = v48;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = "/meshes/flyover";
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v13 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v14 = &unk_1ECE44000;
  if ((v15 & 1) == 0)
  {
    v49 = a2;
    v14 = &unk_1ECE44000;
    v36 = v35;
    v13 = a1 + 64;
    a2 = v49;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v14 = &unk_1ECE44000;
      v13 = a1 + 64;
      a2 = v49;
    }
  }
  v16 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v17 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v16;
  if ((v16 & 1) == 0)
  {
    v47 = v13;
    v50 = a2;
    v14 = (_QWORD *)&unk_1ECE44000;
    v42 = v41;
    v13 = v47;
    a2 = v50;
    if (v42)
    {
      v43 = operator new();
      *(_QWORD *)(v43 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v43 + 24) = "GeoGL";
      *(_OWORD *)(v43 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v43 = &off_1E42B5668;
      *(_QWORD *)(v43 + 8) = "GeoGL";
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 168) = 0u;
      *(_OWORD *)(v43 + 184) = 0u;
      *(_OWORD *)(v43 + 200) = 0u;
      *(_OWORD *)(v43 + 216) = 0u;
      *(_OWORD *)(v43 + 232) = 0u;
      *(_QWORD *)(v43 + 248) = 0;
      *(_OWORD *)(v43 + 56) = 0u;
      v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v43 + 56), 0);
      if ((_DWORD)v44)
        geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
      v46 = malloc_create_zone(0, 0);
      *(_QWORD *)(v43 + 48) = v46;
      malloc_set_zone_name(v46, "GeoGL");
      *(_QWORD *)(v43 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v43;
      v14 = &unk_1ECE44000;
      v13 = v47;
      a2 = v50;
      v17 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v14[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)a1 = &off_1E42BD4B8;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD4D8;
  v51 = a2;
  v52 = a3;
  if (a3)
  {
    v18 = (unint64_t *)&a3->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v13, &v51, &v53, 1uLL);
  v20 = v52;
  if (v52)
  {
    v21 = (unint64_t *)&v52->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v8)
  {
    v23 = (unint64_t *)&v8->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v8;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = &off_1E42B6130;
  *(_QWORD *)(a1 + 16) = &unk_1E42B6150;
  if (v8)
  {
    v28 = (unint64_t *)&v8->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a3)
  {
    v30 = (unint64_t *)&a3->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::FlyoverMorph::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorph::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorph::MorphPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMorph::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorph::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorph::MorphPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::FlyoverMorphNightRenderable::~FlyoverMorphNightRenderable(altitude::FlyoverMorphNightRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMorphNightRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::FlyoverMorphNight::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphNight::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorphNight::MorphPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMorphNight::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphNight::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorphNight::MorphPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::FlyoverMorphBorderRenderable::~FlyoverMorphBorderRenderable(altitude::FlyoverMorphBorderRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMorphBorderRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5D68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>,std::allocator<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>,std::allocator<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::GEOFlyoverMetadataResourceDecoder::~GEOFlyoverMetadataResourceDecoder(md::GEOFlyoverMetadataResourceDecoder *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42A9500;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42A9500;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

void md::GEOFlyoverMetadataResourceDecoder::decode(md::GEOFlyoverMetadataResourceDecoder *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  int8x16_t v20;
  double v21;
  int8x16_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _Unwind_Exception *v31;
  _Unwind_Exception *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;

  if (!*((_BYTE *)a3 + 16))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v35 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
  v6 = *((_QWORD *)this + 4);
  if (!v6)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    v32 = v31;
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    _Unwind_Resume(v32);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)v6 + 48))(&v33, v6, &v35);
  if (!v33)
  {
    *a4 = 0;
    a4[1] = 0;
    v28 = v34;
    if (!v34)
      return;
    goto LABEL_11;
  }
  v8 = (int *)*((_QWORD *)a2 + 1);
  v10 = v8[1];
  v9 = v8[2];
  v11 = *v8;
  v12 = *(id **)a3;
  v13 = objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)a3 + 16)), "bytes");
  v14 = gdc::DataObject::length(v12);
  geo::c3mm::loadFromChunk(v13, v14, v33, v9 | ((unint64_t)(~(-1 << v9) - v10) << 32), v11, v15, v16, v17, v18, v19, v20, v21, v22);
  v23 = operator new(0xC0uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E42DD348;
  v24 = gdc::Resource::Resource((uint64_t)(v23 + 4), (uint64_t)a2);
  v23[3] = &off_1E42A3230;
  v25 = v34;
  v23[22] = v33;
  v23[23] = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  *a4 = v24;
  a4[1] = (uint64_t)v23;
  v28 = v34;
  if (v34)
  {
LABEL_11:
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void md::GEOFlyoverMetadataResource::~GEOFlyoverMetadataResource(md::GEOFlyoverMetadataResource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E42A3230;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5 != *((void **)this + 4))
    free(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E42A3230;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5 != *((void **)this + 4))
    free(v5);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::GEOFlyoverMetadataResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::crc32::compute<17ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  return ggl::crc32::crc32Table[v13 ^ a1[15]] ^ ~(v13 >> 8);
}

void ggl::GridUVShader::typedReflection(ggl::GridUVShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GridUVShader::typedReflection(void)::ref = (uint64_t)"GridUVShader";
      ggl::gridUVShaderVertexFunctionDescriptor(v2);
      qword_1EE577D88 = (uint64_t)&ggl::gridUVShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<19ul>("GridUVShaderVertex");
      dword_1EE577D90 = (int)v3;
      ggl::gridUVShaderFragmentFunctionDescriptor(v3);
      qword_1EE577D98 = (uint64_t)&ggl::gridUVShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE577DA0 = ggl::crc32::compute<21ul>("GridUVShaderFragment");
      qword_1EE577DA8 = (uint64_t)ggl::gridUVShaderShaderConstants(void)::ref;
      unk_1EE577DB0 = 4;
      qword_1EE577DB8 = (uint64_t)&ggl::gridUVShaderShaderTextures(void)::ref;
      unk_1EE577DC0 = 0;
      qword_1EE577DC8 = (uint64_t)&ggl::gridUVShaderShaderSamplers(void)::ref;
      unk_1EE577DD0 = 0;
    }
  }
}

void ggl::gridUVShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::gridUVShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GridUVShaderVertex");
      *(_DWORD *)algn_1EE578064 = 0;
      qword_1EE578068 = (uint64_t)"GridUVShader";
      unk_1EE578070 = ggl::gridUVShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE578078 = 1;
      unk_1EE578080 = &ggl::gridUVShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE578088 = 4;
      unk_1EE578090 = &ggl::gridUVShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE578098 = 0;
      unk_1EE5780A0 = &ggl::gridUVShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE5780A8 = 0;
      unk_1EE5780B0 = &ggl::gridUVShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE5780C0 = 0;
      unk_1EE5780C8 = 0;
      qword_1EE5780B8 = 0;
    }
  }
}

void ggl::gridUVShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::gridUVShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("GridUVShaderFragment");
      *(_DWORD *)algn_1EE57814C = 1;
      qword_1EE578150 = (uint64_t)"GridUVShader";
      unk_1EE578158 = 0;
      qword_1EE578160 = 0;
      unk_1EE578168 = &ggl::gridUVShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE578170 = 2;
      unk_1EE578178 = &ggl::gridUVShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE578180 = 0;
      unk_1EE578188 = &ggl::gridUVShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE578190 = 0;
      unk_1EE578198 = &ggl::gridUVShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE5781A8 = 0;
      unk_1EE5781B0 = 0;
      qword_1EE5781A0 = 0;
    }
  }
}

uint64_t ggl::Grid::GridPipelineState::GridPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::GridShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1ECE43AA8 = 1;
          }
          ggl::Grid::GridPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          unk_1EE580A00 = &ggl::Grid::pipelineDataGridPipelineDeviceStructs(void)::ref;
          qword_1EE580A08 = 0;
          if ((v97 & 1) == 0
          {
            ggl::Grid::pipelineDataGridPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE580AB8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE580AC0 = (uint64_t)ggl::GridBase::GridView::reflection(void)::reflection;
            unk_1EE580AC8 = ggl::Grid::Style::reflection(void)::reflection;
          }
          qword_1EE580A10 = (uint64_t)&ggl::Grid::pipelineDataGridPipelineConstantStructs(void)::ref;
          unk_1EE580A18 = xmmword_19FFB3690;
        }
      }
      ggl::Grid::GridPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Grid::GridPipelineSetup::typedReflection(void)::ref;
      ggl::GridShader::typedReflection(v92);
      qword_1ECE32038 = (uint64_t)&ggl::GridShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::Grid::pipelineStateGridPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE580BC8 = 0;
        qword_1EE580BD0 = (uint64_t)"";
        dword_1EE580BD8 = 0;
        qword_1EE580BE0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineAttributeBinding_0(void)::attr;
        unk_1EE580BE8 = 1;
      }
      qword_1ECE32040 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE32048 = 1;
      qword_1ECE32050 = 0;
      unk_1ECE32058 = 0;
      qword_1ECE32060 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32068 = 0;
      if ((v95 & 1) == 0
      {
        ggl::Grid::pipelineStateGridPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE580B08 = 0;
        qword_1EE580B10 = (uint64_t)"view";
        dword_1EE580B18 = 3;
        qword_1EE580B20 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantViewBinding(void)::reflection;
        unk_1EE580B28 = xmmword_19FFB35A0;
        qword_1EE580B38 = 1;
        unk_1EE580B40 = "transform";
        dword_1EE580B48 = 3;
        qword_1EE580B50 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantTransformBinding(void)::reflection;
        unk_1EE580B58 = xmmword_19FFB3660;
        qword_1EE580B68 = 2;
        unk_1EE580B70 = "gridView";
        dword_1EE580B78 = 3;
        qword_1EE580B80 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantGridViewBinding(void)::reflection;
        unk_1EE580B88 = xmmword_19FFB3000;
        qword_1EE580B98 = 3;
        unk_1EE580BA0 = "style";
        dword_1EE580BA8 = 3;
        qword_1EE580BB0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantStyleBinding(void)::reflection;
        unk_1EE580BB8 = 6;
      }
      qword_1ECE32070 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantStructBinding(void)::ref;
      unk_1ECE32078 = 4;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Grid::GridPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 305) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42BBA68;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::Grid::GridPipelineSetup::textureIsEnabled(ggl::Grid::GridPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::Grid::GridPipelineSetup::GridPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42BBA38;
  v17 = (uint64_t *)a1[8];
  v18 = *a4;
  v19 = a4[1];
  *v17 = *a4;
  v17[1] = 0;
  v20 = (_QWORD *)a1[20];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)v20[1];
  *v20 = v18;
  v20[1] = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = a1[8];
  v27 = *a5;
  v28 = a5[1];
  *(_QWORD *)(v26 + 16) = *a5;
  *(_QWORD *)(v26 + 24) = 0;
  v29 = a1[20];
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(v29 + 24);
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 24) = v28;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = a1[8];
  v36 = *a6;
  v37 = a6[1];
  *(_QWORD *)(v35 + 32) = *a6;
  *(_QWORD *)(v35 + 40) = 0;
  v38 = a1[20];
  if (v37)
  {
    v39 = (unint64_t *)(v37 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(std::__shared_weak_count **)(v38 + 40);
  *(_QWORD *)(v38 + 32) = v36;
  *(_QWORD *)(v38 + 40) = v37;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = a1[8];
  v45 = *a7;
  v46 = a7[1];
  *(_QWORD *)(v44 + 48) = *a7;
  *(_QWORD *)(v44 + 56) = 0;
  v47 = a1[20];
  if (v46)
  {
    v48 = (unint64_t *)(v46 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(std::__shared_weak_count **)(v47 + 56);
  *(_QWORD *)(v47 + 48) = v45;
  *(_QWORD *)(v47 + 56) = v46;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return a1;
}

void ggl::Grid::GridUVPipelineState::~GridUVPipelineState(ggl::Grid::GridUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Grid::GridUVPipelineSetup::~GridUVPipelineSetup(ggl::Grid::GridUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Grid::GridUVPipelineSetup::constantDataIsEnabled(ggl::Grid::GridUVPipelineSetup *this, uint64_t a2)
{
  if ((unint64_t)(a2 - 2) < 2 || a2 == 0)
    return 1;
  if (a2 == 1)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 305) != 0;
  return 0;
}

uint64_t ggl::Grid::GridUVPipelineSetup::textureIsEnabled(ggl::Grid::GridUVPipelineSetup *this)
{
  return 0;
}

void md::TransitPillIconLabelPart::~TransitPillIconLabelPart(md::TransitPillIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::TransitPillIconLabelPart::~TransitPillIconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::TransitPillIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, this, 824);
}

{
  unsigned __int8 v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E42A14B8;
  if (*((_BYTE *)this + 817))
  {
    *(_WORD *)((char *)this + 817) = 256;
    v2 = atomic_load((unsigned __int8 *)this + 819);
    if ((v2 & 1) != 0)
      *(_BYTE *)(*((_QWORD *)this + 93) + 68) = 0;
  }
  v3 = atomic_load((unsigned __int8 *)this + 819);
  if ((v3 & 1) == 0)
  {
    if ((*((char *)this + 783) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 98) + 40))(*((_QWORD *)this + 98), *((_QWORD *)this + 95), *((_QWORD *)this + 97) & 0x7FFFFFFFFFFFFFFFLL);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
    if (!v4)
      goto LABEL_13;
    goto LABEL_10;
  }
  *(_BYTE *)(*((_QWORD *)this + 93) + 67) = 1;
  if (*((char *)this + 783) < 0)
    goto LABEL_9;
LABEL_6:
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
  if (!v4)
    goto LABEL_13;
LABEL_10:
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_13:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
    if (!v7)
      goto LABEL_19;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
  if (!v7)
    goto LABEL_19;
LABEL_14:
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

void md::TransitPillIconLabelPart::updateWithStyle(md::TransitPillIconLabelPart *this, md::LabelManager *a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  _BYTE *v10;
  _QWORD *v11;
  _BYTE *v12;
  _QWORD *v13;
  float32x2_t *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;

  if (*((_QWORD *)this + 91))
    md::TransitPillIconLabelPart::checkExternalIconRequest(this, a2);
  v4 = atomic_load((unsigned __int8 *)this + 819);
  if ((v4 & 1) != 0)
  {
    md::ImageLabelPart::updateWithStyle(this, a2);
    v5 = (uint64_t *)*((_QWORD *)this + 4);
    v6 = *v5;
    v7 = *(_QWORD *)(*v5 + 296);
    if (!v7)
    {
      v8 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v5, 0);
      v7 = *v8;
      *(_QWORD *)(v6 + 296) = *v8;
      v6 = *v5;
    }
    v9 = *(_BYTE *)(v7 + 89) == 2;
    *((_BYTE *)this + 676) = v9;
    if (v9)
    {
      v10 = *(_BYTE **)(v6 + 296);
      if (!v10)
      {
        v11 = (_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v6, 0);
        v10 = (_BYTE *)*v11;
        *(_QWORD *)(v6 + 296) = *v11;
      }
      *((_BYTE *)this + 656) = v10[72];
      *((_BYTE *)this + 657) = v10[73];
      *((_BYTE *)this + 658) = v10[74];
      *((_BYTE *)this + 659) = v10[75];
      v6 = *v5;
    }
    v12 = *(_BYTE **)(v6 + 296);
    if (!v12)
    {
      v13 = (_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v6, 0);
      v12 = (_BYTE *)*v13;
      *(_QWORD *)(v6 + 296) = *v13;
    }
    *((_BYTE *)this + 660) = v12[76];
    *((_BYTE *)this + 661) = v12[77];
    *((_BYTE *)this + 662) = v12[78];
    *((_BYTE *)this + 663) = v12[79];
    v14 = (float32x2_t *)*((_QWORD *)this + 93);
    *((_DWORD *)this + 159) = v14[6].i32[0];
    *((_DWORD *)this + 160) = v14[6].i32[1];
    v15 = *(float *)(*((_QWORD *)this + 2) + 760);
    *((float *)this + 162) = v15;
    v16 = *v5;
    v17 = *(_QWORD *)(*v5 + 296);
    if (!v17)
    {
      v18 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v5, 0);
      v17 = *v18;
      *(_QWORD *)(v16 + 296) = *v18;
      v15 = *((float *)this + 162);
      v14 = (float32x2_t *)*((_QWORD *)this + 93);
    }
    v19 = *(float *)(v17 + 36);
    *((float *)this + 161) = v19;
    if (!v14[8].i8[6])
      v19 = 1.0;
    v20 = v19 * v15;
    v21 = v14[8].u8[0];
    if (*((unsigned __int8 *)this + 677) == v21)
    {
      if (!v14[8].i8[0])
      {
        v23 = v14[7].f32[0] * v20;
        v24 = v14[7].f32[1] * v20;
        if (vabds_f32(*((float *)this + 167), v23) < 1.0 && vabds_f32(*((float *)this + 168), v24) < 1.0)
          goto LABEL_26;
        *((float *)this + 167) = v23;
        *((float *)this + 168) = v24;
        goto LABEL_25;
      }
      v22 = v14[5].f32[1] * v20;
      if (vabds_f32(*((float *)this + 166), v22) >= 1.0)
      {
        *((float *)this + 166) = v22;
LABEL_25:
        *((_BYTE *)this + 678) = 1;
      }
    }
    else
    {
      *((_BYTE *)this + 677) = v21;
      *((_BYTE *)this + 678) = 1;
      *((float *)this + 166) = v14[5].f32[1] * v20;
      *(float32x2_t *)((char *)this + 668) = vmul_n_f32(v14[7], v20);
    }
LABEL_26:
    *((_BYTE *)this + 722) |= *((_BYTE *)this + 678);
  }
}

uint64_t md::TransitPillIconLabelPart::layoutForStaging(md::TransitPillIconLabelPart *this, md::LabelManager *a2, float *a3)
{
  unsigned __int8 v6;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  double v11;
  int8x16_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int8x16_t v18;
  int8x16_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int v22;
  int8x16_t *v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  uint64_t v33;
  _QWORD *v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  __int32 v47;
  float32x2_t v48;

  if (*((_QWORD *)this + 91))
  {
    md::TransitPillIconLabelPart::checkExternalIconRequest(this, a2);
    if (*((_QWORD *)this + 91))
      return 15;
  }
  v6 = atomic_load((unsigned __int8 *)this + 819);
  if ((v6 & 1) == 0)
    return 16;
  v8 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 93) + 65));
  if ((v8 & 1) == 0)
    return 15;
  v9 = *((_QWORD *)a2 + 54);
  if (*(_BYTE *)(v9 + 8))
  {
    v10 = 1.0;
    v11 = 0.0;
    v12.i64[0] = 0;
  }
  else
  {
    v13 = (double *)*((_QWORD *)this + 2);
    v14 = v13[74];
    v15 = v13[75];
    v16 = v13[76];
    v17 = 1.0 / sqrt(v14 * v14 + v15 * v15 + v16 * v16);
    v11 = v17 * v14;
    *(double *)v12.i64 = v17 * v15;
    v10 = v17 * v16;
  }
  *(double *)v18.i64 = *(double *)(v9 + 160) * v11 + *(double *)(v9 + 168) * *(double *)v12.i64;
  *(double *)v19.i64 = *(double *)v18.i64 + *(double *)(v9 + 176) * v10;
  *(float *)v19.i32 = *(double *)v19.i64;
  *(float *)v19.i32 = -*(float *)v19.i32;
  if (vabds_f32(*(float *)v19.i32, *((float *)this + 163)) > 0.2)
  {
    *((_DWORD *)this + 163) = v19.i32[0];
    *((_BYTE *)this + 678) = 1;
    *((_BYTE *)this + 722) = 1;
  }
  v20 = atomic_load((unsigned __int8 *)this + 819);
  if ((v20 & 1) != 0)
  {
    v21 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 93) + 65));
    if ((v21 & 1) != 0
      && (*((_BYTE *)this + 628)
       || *((_BYTE *)this + 678)
       || *((float *)this + 20) < *((float *)this + 18)
       || *((float *)this + 21) < *((float *)this + 19)))
    {
      *((_BYTE *)this + 628) = 0;
      v22 = *((unsigned __int8 *)this + 677);
      if (*((_BYTE *)this + 677))
        v19.i32[0] = *((_DWORD *)this + 166);
      else
        *(float *)v19.i32 = fminf(*((float *)this + 168), *((float *)this + 167));
      *(float *)v19.i32 = 0.5 - *(float *)v19.i32;
      v23 = (int8x16_t *)((char *)this + 72);
      *((float32x2_t *)this + 21) = vmaxnm_f32(*(float32x2_t *)((char *)this + 620), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 0));
      *((_BYTE *)this + 271) = *((_BYTE *)this + 631);
      *((_BYTE *)this + 678) = 0;
      if (v22)
      {
        v24 = *((float *)this + 163);
        v25 = *((float *)this + 166);
        v47 = LODWORD(v25);
        if (v24 == 1.0)
        {
          *(double *)v19.i64 = md::CollisionObject::resetWithCircles((void **)this + 9, 1u);
          v26 = *((_QWORD *)this + 30);
          v27 = *((_DWORD *)this + 62);
          *((_DWORD *)this + 62) = v27 + 1;
          v28 = v26 + 12 * v27;
          *(_QWORD *)v28 = 0;
          *(_DWORD *)(v28 + 8) = v47;
          if (*(float *)&v47 != 0.0)
          {
            v18 = *v23;
            v29.i64[0] = v23->i64[0];
            v29.i32[2] = v47;
            v29.i32[3] = v47;
            v30 = *(int32x4_t *)v23;
            *(float *)v30.i32 = -*(float *)&v47;
            v31 = (float32x4_t)v30;
            v31.f32[1] = -*(float *)&v47;
            v32 = (int8x16_t)vcgtq_f32(v29, v31);
            v30.i32[2] = v47;
            v12 = (int8x16_t)vtrn1q_s32(v30, v30);
            v19 = vbslq_s8(v32, v12, *v23);
            *v23 = v19;
          }
        }
        else
        {
          v39 = v25 * v24;
          v40 = -v25;
          v46 = -(float)(v25 * v24);
          md::CollisionObject::resetWithRects((void **)this + 9, 1u);
          v41 = *((unsigned int *)this + 62);
          v42 = *((_QWORD *)this + 29) + 16 * v41;
          *(float *)v42 = v40;
          *(float *)(v42 + 4) = v46;
          *(_DWORD *)(v42 + 8) = v47;
          *(float *)(v42 + 12) = v39;
          v18.i64[0] = *(_QWORD *)((char *)this + 76);
          v12.i64[0] = __PAIR64__(v47, v18.u32[0]);
          *(float *)v19.i32 = fminf(*((float *)this + 18), v40);
          *(float *)v12.i32 = v46;
          *((_DWORD *)this + 62) = v41 + 1;
          *((_DWORD *)this + 18) = v19.i32[0];
          *(int8x8_t *)v19.i8 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v47, v18.u32[0]), (float32x2_t)__PAIR64__(v18.u32[1], LODWORD(v46))), *(int8x8_t *)v12.i8, *(int8x8_t *)v18.i8);
          *(_QWORD *)((char *)this + 76) = v19.i64[0];
          *((float *)this + 21) = fmaxf(*((float *)this + 21), v39);
        }
      }
      else
      {
        v48 = *(float32x2_t *)((char *)this + 668);
        md::CollisionObject::resetWithRects((void **)this + 9, 1u);
        v33 = *((unsigned int *)this + 62);
        v34 = (_QWORD *)(*((_QWORD *)this + 29) + 16 * v33);
        *(float32x2_t *)v35.i8 = vneg_f32(v48);
        *v34 = v35.i64[0];
        v34[1] = v48;
        v36 = *(int8x16_t *)((char *)this + 72);
        v37.i64[0] = *((_QWORD *)this + 9);
        *(float32x2_t *)&v37.u32[2] = v48;
        v12.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
        v38.i64[0] = v35.i64[0];
        v38.i64[1] = v12.i64[0];
        *((_DWORD *)this + 62) = v33 + 1;
        v18 = (int8x16_t)vcgtq_f32(v37, v38);
        v35.u64[1] = (unint64_t)v48;
        v19 = vbslq_s8(v18, v35, v36);
        *(int8x16_t *)((char *)this + 72) = v19;
      }
    }
  }
  v43 = *((_QWORD *)a2 + 54);
  v19.i32[0] = *((_DWORD *)this + 159);
  v18.i32[0] = *(_DWORD *)(v43 + 456);
  v12.i32[0] = *(_DWORD *)(v43 + 460);
  v44 = *((float *)this + 160);
  v45 = a3[1] + (float)(*(float *)v12.i32 * *(float *)v19.i32);
  *(float *)v12.i32 = v44 * *(float *)v12.i32;
  *(float *)v19.i32 = -(float)(*(float *)v12.i32 - (float)(*(float *)v18.i32 * *(float *)v19.i32));
  *(float *)v18.i32 = v45 + (float)(v44 * *(float *)v18.i32);
  *(float *)v19.i32 = *(float *)v19.i32 + *a3;
  *((_DWORD *)this + 70) = v19.i32[0];
  *((_DWORD *)this + 71) = v18.i32[0];
  *((_DWORD *)this + 26) = v19.i32[0];
  *((_DWORD *)this + 27) = v18.i32[0];
  md::CollisionObject::setupShapeData((uint64_t)this + 72, *(double *)v19.i64, *(double *)v18.i64, *(double *)v12.i64);
  return 37;
}

void md::TransitPillIconLabelPart::updateForDisplay(md::TransitPillIconLabelPart *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  float32x2_t v10;
  float v11;
  float v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  uint64_t v20;
  _QWORD *v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  float v32;
  float v33;
  __int32 v34;
  float32x2_t v35;

  v1 = atomic_load((unsigned __int8 *)this + 819);
  if ((v1 & 1) != 0)
  {
    *((_DWORD *)this + 153) = *((_DWORD *)this + 147);
    v3 = *(_QWORD *)((char *)this + 572);
    *(_QWORD *)((char *)this + 596) = v3;
    v4 = v3;
    *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
    *((_BYTE *)this + 617) = *((_BYTE *)this + 593);
    *((_BYTE *)this + 556) = *((_BYTE *)this + 633) + 4 * *((_BYTE *)this + 594);
    v5 = *((_QWORD *)this + 93);
    *(_DWORD *)(v5 + 12) = v4;
    *(_BYTE *)(v5 + 66) = *((_BYTE *)this + 676);
    *(_BYTE *)(v5 + 28) = *((_BYTE *)this + 656);
    *(_BYTE *)(v5 + 29) = *((_BYTE *)this + 657);
    *(_BYTE *)(v5 + 30) = *((_BYTE *)this + 658);
    *(_BYTE *)(v5 + 31) = *((_BYTE *)this + 659);
    v6 = (_BYTE *)*((_QWORD *)this + 93);
    v6[32] = *((_BYTE *)this + 660);
    v6[33] = *((_BYTE *)this + 661);
    v6[34] = *((_BYTE *)this + 662);
    v6[35] = *((_BYTE *)this + 663);
    v7 = *((_DWORD *)this + 161);
    *((_DWORD *)this + 172) = v7;
    *(_DWORD *)(*((_QWORD *)this + 93) + 20) = v7;
    *((_QWORD *)this + 85) = *(_QWORD *)((char *)this + 636);
    if (*((_BYTE *)this + 722)
      || *((float *)this + 80) < *((float *)this + 78)
      || *((float *)this + 81) < *((float *)this + 79))
    {
      v8 = (int8x16_t *)((char *)this + 312);
      *((_BYTE *)this + 722) = 0;
      v9 = *((unsigned __int8 *)this + 677);
      *((_BYTE *)this + 721) = v9;
      v10 = *(float32x2_t *)((char *)this + 668);
      *((float32x2_t *)this + 89) = v10;
      v11 = *((float *)this + 166);
      *((float *)this + 177) = v11;
      v12 = *((float *)this + 163);
      *((float *)this + 174) = v12;
      if (!v9)
      {
        v35 = v10;
        md::CollisionObject::resetWithRects((void **)this + 39, 1u);
        v20 = *((unsigned int *)this + 122);
        v21 = (_QWORD *)(*((_QWORD *)this + 59) + 16 * v20);
        *(float32x2_t *)v22.i8 = vneg_f32(v35);
        *v21 = v22.i64[0];
        v21[1] = v35;
        v23 = *v8;
        v24.i64[0] = v8->i64[0];
        *(float32x2_t *)&v24.u32[2] = v35;
        v25.i64[0] = v22.i64[0];
        v25.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
        *((_DWORD *)this + 122) = v20 + 1;
        v22.u64[1] = (unint64_t)v35;
        v19 = vbslq_s8((int8x16_t)vcgtq_f32(v24, v25), v22, v23);
LABEL_10:
        *v8 = v19;
        return;
      }
      v34 = LODWORD(v11);
      if (v12 == 1.0)
      {
        md::CollisionObject::resetWithCircles((void **)this + 39, 1u);
        v13 = *((_QWORD *)this + 60);
        v14 = *((_DWORD *)this + 122);
        *((_DWORD *)this + 122) = v14 + 1;
        v15 = v13 + 12 * v14;
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = v34;
        if (*(float *)&v34 == 0.0)
          return;
        v16.i64[0] = v8->i64[0];
        v16.i32[2] = v34;
        v16.i32[3] = v34;
        v17 = *(int32x4_t *)v8;
        *(float *)v17.i32 = -*(float *)&v34;
        v18 = (float32x4_t)v17;
        v18.f32[1] = -*(float *)&v34;
        v17.i32[2] = v34;
        v19 = vbslq_s8((int8x16_t)vcgtq_f32(v16, v18), (int8x16_t)vtrn1q_s32(v17, v17), *v8);
        goto LABEL_10;
      }
      v26 = v12 * v11;
      v27 = -v11;
      v33 = -(float)(v12 * v11);
      md::CollisionObject::resetWithRects((void **)this + 39, 1u);
      v28 = *((unsigned int *)this + 122);
      v29 = *((_QWORD *)this + 59) + 16 * v28;
      *(float *)v29 = v27;
      *(float *)(v29 + 4) = v33;
      *(_DWORD *)(v29 + 8) = v34;
      *(float *)(v29 + 12) = v26;
      v30 = *(int8x8_t *)((char *)this + 316);
      v31 = (int8x8_t)__PAIR64__(v34, v30.u32[0]);
      v32 = fminf(*((float *)this + 78), v27);
      *(float *)v31.i32 = v33;
      *((_DWORD *)this + 122) = v28 + 1;
      *((float *)this + 78) = v32;
      *(int8x8_t *)((char *)this + 316) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v34, v30.u32[0]), (float32x2_t)__PAIR64__(v30.u32[1], LODWORD(v33))), v31, v30);
      *((float *)this + 81) = fmaxf(*((float *)this + 81), v26);
    }
  }
}

uint64_t md::TransitPillIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  unsigned __int8 v4;
  unsigned __int8 v7;
  double v10;
  float32x2_t v11;
  float32x2_t v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;

  v4 = atomic_load((unsigned __int8 *)(a1 + 819));
  if ((v4 & 1) == 0)
    return 16;
  v7 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 744) + 65));
  if ((v7 & 1) == 0)
    return 15;
  v10 = *(double *)(a1 + 680);
  v11 = vmul_n_f32(*(float32x2_t *)&v10, *(float *)(a2 + 896));
  v12 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*(float32x2_t *)&v10, *(float *)(a2 + 900)));
  LODWORD(v10) = vsub_f32(v11, v12).u32[0];
  HIDWORD(v10) = vadd_f32(v11, v12).i32[1];
  v13 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v10, *a4));
  *(double *)(a1 + 520) = v13;
  *(double *)(a1 + 344) = v13;
  md::CollisionObject::setupShapeData(a1 + 312, v13, *(double *)&v12, v10);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_DWORD *)(v14 + 1040);
  *(_DWORD *)(a1 + 692) = v15;
  v16 = *(_QWORD *)(a1 + 744);
  *(_DWORD *)(v16 + 16) = v15;
  if (*(_BYTE *)(a2 + 448))
  {
    v17 = 1.0;
    v18 = 0.0;
    v19 = 0.0;
  }
  else
  {
    v20 = *(double *)(v14 + 408);
    v21 = *(double *)(v14 + 416);
    v22 = *(double *)(v14 + 424);
    v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
    v18 = v23 * v20;
    v19 = v23 * v21;
    v17 = v23 * v22;
  }
  v24 = *(double *)(a2 + 600) * v18 + *(double *)(a2 + 608) * v19 + *(double *)(a2 + 616) * v17;
  *(float *)(v16 + 24) = -v24;
  *(_DWORD *)(v16 + 36) = a4->i32[0];
  *(_DWORD *)(v16 + 40) = a4->i32[1];
  return 37;
}

uint64_t md::TransitPillIconLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  *(float *)(result + 552) = fmaxf(fminf(*(float *)(result + 600) * a3, 1.0), 0.0);
  v3 = atomic_load((unsigned __int8 *)(result + 819));
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 744);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(result + 552);
    v6 = *(_QWORD **)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    if ((unint64_t)v6 < v7)
    {
      if (v6)
        *v6 = v5;
      v8 = v6 + 1;
LABEL_28:
      *(_QWORD *)(a2 + 16) = v8;
      return result;
    }
    v9 = *(_QWORD *)(a2 + 8);
    v10 = ((uint64_t)v6 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v7 - v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (v11)
    {
      v13 = 8 * v11;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), 8 * v11, 8);
      v14 = (_QWORD *)(result + 8 * v10);
      v11 = result + v13;
      if (result)
        *v14 = v5;
    }
    else
    {
      v14 = (_QWORD *)(8 * v10);
    }
    v8 = v14 + 1;
    v16 = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    if (v15 == v16)
    {
LABEL_26:
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = v8;
      v25 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v11;
      if (v15)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 32) + 40))(*(_QWORD *)(a2 + 32), v15, v25 - v15);
      goto LABEL_28;
    }
    v17 = v15 - v16 - 8;
    if (v17 < 0x38)
    {
      v19 = *(_QWORD *)(a2 + 16);
    }
    else if ((unint64_t)(v15 - (_QWORD)v14) < 0x20)
    {
      v19 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      v18 = (v17 >> 3) + 1;
      v19 = v15 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = v14 - 2;
      v21 = (__int128 *)(v15 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v14 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_25;
    }
    do
    {
      v24 = *(_QWORD *)(v19 - 8);
      v19 -= 8;
      *--v14 = v24;
    }
    while (v19 != v16);
LABEL_25:
    v15 = *(_QWORD *)(a2 + 8);
    goto LABEL_26;
  }
  return result;
}

uint64_t md::TransitPillIconLabelPart::markActive(uint64_t this)
{
  unsigned __int8 v1;

  if (!*(_BYTE *)(this + 817))
  {
    *(_BYTE *)(this + 817) = 1;
    v1 = atomic_load((unsigned __int8 *)(this + 819));
    if ((v1 & 1) != 0)
      *(_BYTE *)(*(_QWORD *)(this + 744) + 68) = 1;
  }
  return this;
}

uint64_t md::TransitPillIconLabelPart::markInactive(uint64_t this)
{
  unsigned __int8 v1;

  if (*(_BYTE *)(this + 817))
  {
    *(_WORD *)(this + 817) = 256;
    v1 = atomic_load((unsigned __int8 *)(this + 819));
    if ((v1 & 1) != 0)
      *(_BYTE *)(*(_QWORD *)(this + 744) + 68) = 0;
  }
  return this;
}

void md::TransitPillIconLabelPart::transferResource(md::TransitPillIconLabelPart *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  *a2 = v4;
  v5 = *((_QWORD *)this + 93);
  v6 = *((_QWORD *)this + 94);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)v4[1];
    *v4 = v5;
    v4[1] = v6;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *v4 = v5;
    v4[1] = 0;
  }
}

float md::TransitPillIconLabelPart::calloutAnchorRect(md::TransitPillIconLabelPart *this)
{
  if (*((_BYTE *)this + 721))
    return -*((float *)this + 177);
  else
    return -*((float *)this + 178);
}

void md::TransitPillIconLabelPart::populateImageInfos(float32x2_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unsigned __int8 v7;
  float *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  float32x2_t v12;
  std::__shared_weak_count **v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  float32x2_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;

  v4 = (std::__shared_weak_count *)operator new(0x148uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB010;
  v4[1].std::__shared_count = 0u;
  v6 = v4 + 1;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = 0u;
  v4[2].__shared_owners_ = 0;
  v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
  {
    v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v6 = v4 + 1;
    if (v20)
    {
      v21 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      v6 = v4 + 1;
    }
  }
  v9 = *((_QWORD *)v8 + 299);
  v4[3].__vftable = 0;
  v4[3].__shared_owners_ = 0;
  v4[2].__shared_weak_owners_ = v9;
  LOWORD(v4[3].__shared_weak_owners_) = 0;
  v4[4].__vftable = (std::__shared_weak_count_vtbl *)&v4[5].__shared_owners_;
  v4[4].__shared_owners_ = (uint64_t)&v4[5].__shared_owners_;
  v4[4].__shared_weak_owners_ = (uint64_t)&v4[5].__shared_owners_;
  v4[5].__vftable = (std::__shared_weak_count_vtbl *)2;
  LODWORD(v4[5].__shared_weak_owners_) = 16842752;
  WORD2(v4[5].__shared_weak_owners_) = 1;
  v4[6].__shared_owners_ = 0;
  v4[6].__shared_weak_owners_ = 0;
  v4[6].__vftable = 0;
  if ((v10 & 1) == 0)
  {
    v24 = p_shared_owners;
    v25 = v6;
    v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    p_shared_owners = v24;
    v6 = v25;
    if (v22)
    {
      v23 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v23, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      p_shared_owners = v24;
      v6 = v25;
    }
  }
  v4[7].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v8 + 299);
  v4[7].__shared_owners_ = 0;
  *(uint64_t *)((char *)&v4[7].__shared_owners_ + 5) = 0;
  LOBYTE(v4[8].__vftable) = 4;
  *(std::__shared_weak_count_vtbl **)((char *)&v4[8].__vftable + 4) = 0;
  BYTE4(v4[8].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v4[8].__shared_weak_owners_ + 4) = 0xFFFF3F800000;
  WORD2(v4[9].__vftable) = 0;
  LODWORD(v4[9].__shared_owners_) = 1065353216;
  v4[13].__shared_owners_ = 0;
  v4[10].std::__shared_count = 0u;
  *(_OWORD *)&v4[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[11].__shared_owners_ = 0u;
  v4[12].__vftable = 0;
  v29 = v6;
  v30 = v4;
  LOWORD(v4[5].__shared_weak_owners_) = 2052;
  HIDWORD(v4[3].__shared_owners_) = 65558;
  LOWORD(v4[3].__shared_weak_owners_) = 1;
  LODWORD(v4[3].__shared_owners_) = a1[101].i32[1];
  v26 = v6;
  v27 = v4;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = vmla_f32(a1[45], (float32x2_t)0x3F0000003F000000, vsub_f32(a1[46], a1[45]));
  v28 = v12;
  v13 = *(std::__shared_weak_count ***)(a2 + 8);
  if ((unint64_t)v13 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelImageInfo>(a2, (uint64_t)&v26);
    v4 = v27;
    *(_QWORD *)(a2 + 8) = v14;
    if (!v4)
      goto LABEL_14;
  }
  else
  {
    if (v13)
    {
      *v13 = v6;
      v13[1] = v4;
      v26 = 0;
      v27 = 0;
      v13[2] = (std::__shared_weak_count *)v12;
      v4 = 0;
    }
    *(_QWORD *)(a2 + 8) = v13 + 3;
    if (!v4)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v4->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v17 = v30;
    if (!v30)
      return;
    goto LABEL_15;
  }
LABEL_14:
  v17 = v30;
  if (!v30)
    return;
LABEL_15:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_19F599E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t md::TransitPillIconLabelPart::needsCrossfade(md::TransitPillIconLabelPart *this, md::LabelManager *a2, int a3)
{
  unsigned __int8 v7;
  int v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  if (*((_BYTE *)this + 818))
    return 1;
  if (*((_QWORD *)this + 91))
    md::TransitPillIconLabelPart::checkExternalIconRequest(this, a2);
  v7 = atomic_load((unsigned __int8 *)this + 819);
  if ((v7 & 1) != 0)
  {
    v8 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 64) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 64))
                            + 432);
    v9 = (_BYTE *)*((_QWORD *)this + 93);
    if (v8 && v9[68])
    {
      (*(void (**)(_BYTE *))(*(_QWORD *)v9 + 24))(v9);
      v9 = (_BYTE *)*((_QWORD *)this + 93);
    }
    if (v9[69])
      return 1;
  }
  if (a3 && *((_BYTE *)this + 816))
  {
    v10 = (uint64_t *)*((_QWORD *)this + 4);
    v11 = *v10;
    v12 = *(_QWORD *)(*v10 + 296);
    if (!v12)
    {
      v13 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v10, 0);
      v12 = *v13;
      *(_QWORD *)(v11 + 296) = *v13;
    }
    if (*(_BYTE *)(v12 + 88) != 6)
      return 1;
    v14 = *v10;
    v15 = *(_QWORD *)(*v10 + 272);
    if (!v15)
    {
      v16 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v10);
      v15 = *v16;
      *(_QWORD *)(v14 + 272) = *v16;
    }
    if (*(char *)(v15 + 263) < 0)
      v17 = *(_QWORD *)(v15 + 248);
    else
      v17 = *(unsigned __int8 *)(v15 + 263);
    v18 = (unsigned __int8 *)(v15 + 80);
    v19 = 80;
    if (v17)
    {
      v19 = 240;
      v18 = (unsigned __int8 *)(v15 + 240);
    }
    v20 = *((unsigned __int8 *)this + 783);
    if ((v20 & 0x80u) == 0)
      v21 = *((unsigned __int8 *)this + 783);
    else
      v21 = *((_QWORD *)this + 96);
    v22 = v18[23];
    v23 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v22 = *((_QWORD *)v18 + 1);
    if (v21 != v22)
      return 1;
    v24 = (const void **)((char *)this + 760);
    v25 = *(unsigned __int8 **)(v15 + v19);
    if (v23 >= 0)
      v26 = v18;
    else
      v26 = v25;
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*v24, v26, *((_QWORD *)this + 96)))
        return 1;
    }
    else if (*((_BYTE *)this + 783))
    {
      while (*(unsigned __int8 *)v24 == *v26)
      {
        v24 = (const void **)((char *)v24 + 1);
        ++v26;
        if (!--v20)
          goto LABEL_37;
      }
      return 1;
    }
LABEL_37:
    v27 = *((unsigned __int8 *)this + 800);
    v28 = *v10;
    v29 = *(_QWORD *)(*v10 + 296);
    if (!v29)
    {
      v30 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v10, 0);
      v29 = *v30;
      *(_QWORD *)(v28 + 296) = *v30;
    }
    if (v27 == *(unsigned __int8 *)(v29 + 92))
    {
      v31 = *v10;
      v32 = *(_QWORD *)(*v10 + 296);
      if (!v32)
      {
        v33 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v10, 0);
        v32 = *v33;
        *(_QWORD *)(v31 + 296) = *v33;
      }
      if (*(_DWORD *)(v32 + 56) == *((_DWORD *)this + 198) && *(_DWORD *)(v32 + 60) == *((_DWORD *)this + 199))
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t md::TransitPillIconLabelPart::debugString@<X0>(md::TransitPillIconLabelPart *this@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  void *p_p;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  void *v24;
  char v25;
  size_t v26;
  const void **v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *__p;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[3];
  uint64_t v40;
  unint64_t v41;
  void *v42[2];
  __int128 v43;
  int v44;
  uint64_t v45[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v45[0] = MEMORY[0x1E0DE4FE0] + 64;
  v37 = v9;
  *(_QWORD *)((char *)&v38[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24));
  std::ios_base::init(v11, v38);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v37 = v6 + 24;
  v45[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v38[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v42 = 0u;
  v43 = 0u;
  v44 = 16;
  md::ImageLabelPart::debugString(this, &__p);
  if ((v36 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v36 & 0x80u) == 0)
    v14 = v36;
  else
    v14 = v35;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)p_p, v14);
  if ((char)v36 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"\nTransitPillIcon", 16);
  v15 = atomic_load((unsigned __int8 *)this + 819);
  if ((v15 & 1) != 0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"\n  isActive:", 12);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", scale=", 8);
    v18 = *v17;
    *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 16) = 1;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)" distScale=", 11);
    std::ostream::operator<<();
    if (*((_BYTE *)this + 721))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)" radius:", 8);
      *(_QWORD *)((char *)&v38[1] + *(_QWORD *)(v37 - 24)) = 2;
      std::ostream::operator<<();
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)" halfExt:", 9);
      *(_QWORD *)((char *)&v38[1] + *(_QWORD *)(v37 - 24)) = 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"(", 1);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    }
    v21 = *((_QWORD *)this + 93);
    if (v21)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(&__p, v21, a2);
      v22 = v36;
      if ((v36 & 0x80u) == 0)
        v23 = v36;
      else
        v23 = v35;
      if (v23)
      {
        if ((v36 & 0x80u) == 0)
          v24 = &__p;
        else
          v24 = __p;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)v24, v23);
        v22 = v36;
      }
      if ((v22 & 0x80) != 0)
      {
        operator delete(__p);
        v25 = v44;
        if ((v44 & 0x10) == 0)
          goto LABEL_25;
LABEL_29:
        v28 = *((_QWORD *)&v43 + 1);
        if (*((_QWORD *)&v43 + 1) < v41)
        {
          *((_QWORD *)&v43 + 1) = v41;
          v28 = v41;
        }
        v27 = (const void **)&v40;
        goto LABEL_32;
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"\n  No external icon", 19);
  }
  v25 = v44;
  if ((v44 & 0x10) != 0)
    goto LABEL_29;
LABEL_25:
  if ((v25 & 8) == 0)
  {
    v26 = 0;
    a3[23] = 0;
    goto LABEL_40;
  }
  v27 = (const void **)v39;
  v28 = v39[2];
LABEL_32:
  v29 = *v27;
  v26 = v28 - (_QWORD)*v27;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v32 = operator new(v30 + 1);
    *((_QWORD *)a3 + 1) = v26;
    *((_QWORD *)a3 + 2) = v31 | 0x8000000000000000;
    *(_QWORD *)a3 = v32;
    a3 = v32;
    goto LABEL_39;
  }
  a3[23] = v26;
  if (v26)
LABEL_39:
    memmove(a3, v29, v26);
LABEL_40:
  a3[v26] = 0;
  v37 = *v8;
  *(_QWORD *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24)) = v8[3];
  v38[0] = v12 + 16;
  if (SBYTE7(v43) < 0)
    operator delete(v42[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v45);
}

void sub_19F59A430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::TransitPillIconLabelPart::populateDebugNode(md::TransitPillIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v4;
  char *ChildNode;
  uint64_t v6;
  float v7;
  double v8;
  float v9;
  double v10;
  char *v11;
  uint64_t v12[3];
  _BYTE v13[16];
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD v25[7];
  int v26;
  _BYTE v27[24];

  md::ImageLabelPart::populateDebugNode(this, a2);
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v27 = v4;
  *(_OWORD *)&v27[8] = xmmword_19FFB3800;
  strcpy(v4, "TransitPillIconLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)v27);
  operator delete(v4);
  v27[23] = 9;
  strcpy(v27, "Is Active");
  v6 = *((unsigned __int8 *)this + 817);
  v26 = 0;
  memset(&v25[4], 0, 24);
  v25[0] = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, (uint64_t)v25);
  v7 = *((float *)this + 173);
  v27[23] = 5;
  strcpy(v27, "Scale");
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 2;
  v20 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, (uint64_t)v19);
  if (*((_BYTE *)this + 721))
  {
    v27[23] = 6;
    strcpy(v27, "Radius");
    v8 = *((float *)this + 177);
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v18 = 2;
    v14 = v8;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, (uint64_t)v13);
    return;
  }
  v27[23] = 8;
  strcpy(v27, "Half Ext");
  v9 = *((float *)this + 178);
  v10 = *((float *)this + 179);
  v11 = (char *)operator new(0x80uLL);
  v12[1] = (uint64_t)(v11 + 128);
  v12[2] = (uint64_t)(v11 + 128);
  *((double *)v11 + 2) = v9;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_DWORD *)v11 + 14) = 2;
  *((_QWORD *)v11 + 12) = 0;
  *((double *)v11 + 10) = v10;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_DWORD *)v11 + 30) = 2;
  v12[0] = (uint64_t)v11;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, v12);
  if (v11[119] < 0)
  {
    operator delete(*((void **)v11 + 12));
    if ((v11[55] & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    operator delete(*((void **)v11 + 4));
    goto LABEL_5;
  }
  if (v11[55] < 0)
    goto LABEL_7;
LABEL_5:
  operator delete(v11);
}

void md::TransitPillIconLabelPart::checkExternalIconRequest(md::TransitPillIconLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v2 = (uint64_t *)*((_QWORD *)this + 91);
  if (v2 && *((_BYTE *)v2 + 57))
  {
    v6 = *v2;
    v5 = v2[1];
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (_QWORD *)((char *)this + 728);
    *((_QWORD *)this + 93) = v6;
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
    *((_QWORD *)this + 94) = v5;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (char *)this + 744;
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
    *v9 = 0;
    *((_QWORD *)this + 92) = 0;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (*(_QWORD *)v13)
    {
      *(_BYTE *)(*(_QWORD *)v13 + 68) = *((_BYTE *)this + 817);
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 64) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 64));
      md::LabelExternalObjectsModerator::registerIconForAsynchModeUpdates(v17, (uint64_t *)this + 93);
      atomic_store(1u, (unsigned __int8 *)this + 819);
    }
  }
}

uint64_t std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelImageInfo>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v2 = v8 + v7;
    if (v8)
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v8 + 24 * v3 + 16) = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    v9 = 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  }
  v10 = v9 + 24;
  v11 = *(_QWORD **)a1;
  v12 = *(_QWORD **)(a1 + 8);
  if (v12 == *(_QWORD **)a1)
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)(v9 - 24) = v13;
      v9 -= 24;
      *v12 = 0;
      v12[1] = 0;
      *(_QWORD *)(v9 + 16) = v12[2];
    }
    while (v12 != v11);
    v12 = *(_QWORD **)a1;
    v14 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    while (v14 != v12)
    {
      v16 = (std::__shared_weak_count *)*(v14 - 2);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v14 -= 3;
    }
  }
  if (v12)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v12, v15 - (_QWORD)v12);
  return v10;
}

void md::LogicBase::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  const void *v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[7];
  int v12;
  char v13[24];
  __int128 __dst;
  unint64_t v15;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = *(const void **)(a1 + 16);
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v15 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v15) = *(_QWORD *)(a1 + 24);
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v5, v3);
  *((_BYTE *)p_dst + v3) = 0;
  v9 = SHIBYTE(v15);
  if (SHIBYTE(v15) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v15;
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v13[23] = 6;
  strcpy(v13, "Active");
  v10 = *(unsigned __int8 *)(a1 + 56);
  v12 = 0;
  memset(&v11[4], 0, 24);
  v11[0] = v10;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v13, (uint64_t)v11);
  if (v9 < 0)
    operator delete((void *)__dst);
}

void md::LogicBase::_debugConsoleString(_BYTE *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

void ggl::FlyoverMasked::FlyoverPipelineState::~FlyoverPipelineState(ggl::FlyoverMasked::FlyoverPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverMasked::FlyoverPipelineState::FlyoverPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::FlyoverMaskedShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::FlyoverMasked::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          unk_1EE575F10 = &ggl::FlyoverMasked::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
          qword_1EE575F18 = 0;
          if ((v23 & 1) == 0
          {
            ggl::FlyoverMasked::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            *(_QWORD *)algn_1EE575F48 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE575F50 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE575F58 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE575F60 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1EE575F20 = (uint64_t)&ggl::FlyoverMasked::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE575F28 = xmmword_19FFB38C0;
        }
      }
      ggl::FlyoverMasked::FlyoverPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMasked::FlyoverPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMaskedShader::typedReflection(v18);
      qword_1EE587058 = (uint64_t)&ggl::FlyoverMaskedShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::FlyoverMasked::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5870B8 = 0;
        qword_1EE5870C0 = (uint64_t)"";
        dword_1EE5870C8 = 0;
        qword_1EE5870D0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineAttributeBinding_0(void)::attr;
        unk_1EE5870D8 = 2;
      }
      qword_1EE587060 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE587068 = 1;
      qword_1EE587070 = 0;
      unk_1EE587078 = 3;
      qword_1EE587080 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineDeviceStructBinding(void)::ref;
      unk_1EE587088 = 0;
      if ((v21 & 1) == 0
      {
        ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5870F8 = 0;
        qword_1EE587100 = (uint64_t)"sharedConstants";
        dword_1EE587108 = 3;
        qword_1EE587110 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE587118 = xmmword_19FFB3030;
        qword_1EE587128 = 1;
        unk_1EE587130 = "transform";
        dword_1EE587138 = 3;
        qword_1EE587140 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantTransformBinding(void)::reflection;
        unk_1EE587148 = vdupq_n_s64(2uLL);
        qword_1EE587158 = 2;
        unk_1EE587160 = "clip";
        dword_1EE587168 = 3;
        qword_1EE587170 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantClipBinding(void)::reflection;
        unk_1EE587178 = xmmword_19FFB3040;
        qword_1EE587188 = 3;
        unk_1EE587190 = "material";
        dword_1EE587198 = 3;
        qword_1EE5871A0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE5871A8 = xmmword_19FFB3050;
        qword_1EE5871B8 = 4;
        unk_1EE5871C0 = "texcoords";
        dword_1EE5871C8 = 3;
        qword_1EE5871D0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1EE5871D8 = 2;
      }
      qword_1EE587090 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE587098 = 5;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverMasked::FlyoverPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42B6570;
  return a1;
}

void ggl::FlyoverMasked::FlyoverPipelineSetup::~FlyoverPipelineSetup(ggl::FlyoverMasked::FlyoverPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverMasked::FlyoverPipelineSetup::constantDataIsEnabled(ggl::FlyoverMasked::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverMasked::FlyoverPipelineSetup::textureIsEnabled(ggl::FlyoverMasked::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void md::SelectedTransitTileResourceFetcher::~SelectedTransitTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::SelectedTransitTileResourceFetcher::tileKey()
{
  return GEOTransitLineSelectionTileKeyMake();
}

__n128 md::SelectedTransitTileResourceFetcher::tileLoaderAdditionalInfo@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __n128 v3;

  v3.n128_u64[1] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  result = v3;
  *(__n128 *)(a2 + 4) = v3;
  *(_BYTE *)a2 = 1;
  return result;
}

void std::__shared_ptr_emplace<md::GEOVectorTileResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GEOVectorTileResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::GEOVectorTileResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::StackLabelPart::~StackLabelPart(md::StackLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::StackLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, this, 696);
}

void md::StackLabelPart::updateWithStyle(md::StackLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  float v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = (uint64_t *)*((_QWORD *)this + 72);
  v4 = (uint64_t *)*((_QWORD *)this + 73);
  if (v3 == v4)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v6 = *(float *)(*v8 + 172);
  }
  else
  {
    v6 = -3.4028e38;
    do
    {
      v7 = *v3++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(_QWORD *)v7 + 72))(v7, a2);
      v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7));
    }
    while (v3 != v4);
    v8 = (uint64_t *)*((_QWORD *)this + 4);
  }
  *((float *)this + 42) = v6;
  v9 = *((unsigned __int8 *)this + 562);
  if (v9 > 0xC)
    goto LABEL_20;
  if (((1 << v9) & 0x1B80) != 0)
  {
    v10 = *v8;
    v11 = *(_QWORD *)(*v8 + 312);
    if (!v11)
    {
      v12 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(*v8);
      v11 = *v12;
      *(_QWORD *)(v10 + 312) = *v12;
    }
    v13 = *(_DWORD *)(v11 + 32);
LABEL_11:
    *((_DWORD *)this + 159) = v13;
    goto LABEL_12;
  }
  if (v9 == 1)
  {
    v16 = *v8;
    v17 = *(_QWORD *)(*v8 + 272);
    if (!v17)
    {
      v18 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
      v17 = *v18;
      *(_QWORD *)(v16 + 272) = *v18;
    }
    v13 = *(_DWORD *)(v17 + 48);
    goto LABEL_11;
  }
  if (v9 == 6)
  {
    v14 = *v8;
    v15 = *(_QWORD *)(*v8 + 272);
    if (v15)
    {
      *((_DWORD *)this + 159) = *(_DWORD *)(v15 + 44);
      v13 = *(_DWORD *)(v15 + 40);
    }
    else
    {
      v21 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
      v22 = *v21;
      *(_QWORD *)(v14 + 272) = *v21;
      v23 = *v8;
      v24 = *(_QWORD *)(*v8 + 272);
      *((_DWORD *)this + 159) = *(_DWORD *)(v22 + 44);
      if (!v24)
      {
        v25 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v23);
        v24 = *v25;
        *(_QWORD *)(v23 + 272) = *v25;
      }
      v13 = *(_DWORD *)(v24 + 40);
    }
  }
  else
  {
LABEL_20:
    v19 = *v8;
    v20 = *(_QWORD *)(*v8 + 272);
    if (v20)
    {
      *((_DWORD *)this + 159) = *(_DWORD *)(v20 + 36);
    }
    else
    {
      v26 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
      v27 = *v26;
      *(_QWORD *)(v19 + 272) = *v26;
      v28 = *v8;
      v20 = *(_QWORD *)(*v8 + 272);
      *((_DWORD *)this + 159) = *(_DWORD *)(v27 + 36);
      if (!v20)
      {
        v29 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v28);
        v20 = *v29;
        *(_QWORD *)(v28 + 272) = *v29;
      }
    }
    v13 = *(_DWORD *)(v20 + 24);
  }
LABEL_12:
  *((_DWORD *)this + 158) = v13;
}

uint64_t md::StackLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  uint64_t v20;
  float v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  int v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  int v39;
  uint64_t v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  BOOL v66;
  float32x2_t *v67;
  uint64_t v68;
  _QWORD *v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  void *v93;
  void *v94;
  double v95;
  float32x2_t v97;
  float32x2_t v98;
  float v99;
  int v100;
  float v101;
  float v102[2];

  *(_QWORD *)(a1 + 640) = 0;
  v11 = (*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3;
  v12 = v11 - 1;
  if (*(_BYTE *)(a1 + 691))
  {
    LODWORD(v11) = -1;
    v13 = -1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  a6.n128_u32[0] = 0;
  v14 = v11;
  v100 = v12;
  if ((_DWORD)v11 != v12)
  {
    v19 = v12 - v11;
    v20 = 8 * v12;
    v21 = 0.0;
    do
    {
      v22 = *(_QWORD **)(*(_QWORD *)(a1 + 576) + v20);
      (*(void (**)(_QWORD *, uint64_t, float32x2_t *, float32x2_t *, __n128, __n128))(*v22 + 80))(v22, a2, a3, a4, a5, a6);
      v23 = v22[3];
      a6.n128_u32[0] = *(_DWORD *)(v23 + 80);
      LODWORD(a7) = *(_DWORD *)(v23 + 72);
      v24 = 0.0;
      a5.n128_u32[0] = 0;
      if (a6.n128_f32[0] >= *(float *)&a7)
      {
        v25 = *(float *)(v23 + 84);
        v26 = *(float *)(v23 + 76);
        if (v25 >= v26)
        {
          v24 = a6.n128_f32[0] - *(float *)&a7;
          a5.n128_f32[0] = v25 - v26;
        }
      }
      if (*(_BYTE *)(a1 + 688))
      {
        a6.n128_f32[0] = *(float *)(a1 + 640) + v24;
        a5.n128_f32[0] = fmaxf(*(float *)(a1 + 644), a5.n128_f32[0]);
        *(_DWORD *)(a1 + 644) = a5.n128_u32[0];
      }
      else
      {
        *(float *)(a1 + 644) = (float)((float)(a5.n128_f32[0] + v21) + *(float *)(a1 + 644))
                             + (*(float (**)(_QWORD *, _QWORD))(*v22 + 280))(v22, 0);
        v21 = (*(float (**)(_QWORD *, _QWORD))(*v22 + 288))(v22, 0);
        a5.n128_u32[0] = *(_DWORD *)(a1 + 640);
        a6.n128_f32[0] = fmaxf(a5.n128_f32[0], v24);
      }
      *(_DWORD *)(a1 + 640) = a6.n128_u32[0];
      v20 += 8 * v13;
      v19 += v13;
    }
    while (v19);
  }
  v15 = *(unsigned __int8 *)(a1 + 688);
  v16 = *(_QWORD *)(a1 + 584);
  v17 = *(_QWORD *)(a1 + 576);
  if (*(_BYTE *)(a1 + 688))
  {
    a6.n128_f32[0] = a6.n128_f32[0] + (float)(*(float *)(a1 + 636) * (float)(unint64_t)(((v16 - v17) >> 3) - 1));
    *(_DWORD *)(a1 + 640) = a6.n128_u32[0];
    v18 = *(float *)(a1 + 644);
  }
  else
  {
    v18 = *(float *)(a1 + 644) + (float)(*(float *)(a1 + 632) * (float)(unint64_t)(((v16 - v17) >> 3) - 1));
    *(float *)(a1 + 644) = v18;
  }
  LODWORD(a7) = 0.5;
  v27 = a6.n128_f32[0] * 0.5;
  *(float *)(a1 + 648) = a6.n128_f32[0] * 0.5;
  *(float *)(a1 + 652) = v18 * -0.5;
  if (*(_BYTE *)(a1 + 693) == 1)
  {
    v28 = v16 - v17;
    if ((unint64_t)(v16 - v17) >= 9)
    {
      v29 = v14 - v100;
      if (v14 == v100)
      {
        v30 = *a3;
        v31 = *a4;
        v32 = 37;
        goto LABEL_72;
      }
      v33 = (v28 >> 3) - 1;
      v34 = 636;
      if (!v15)
        v34 = 632;
      v35 = *(float *)(a1 + v34);
      v36 = (float)(unint64_t)v33;
      v37 = 640;
      if (!v15)
        v37 = 644;
      v38 = *(float *)(a1 + v37) - (float)(v35 * v36);
      *(float *)&a7 = v35 * 0.5;
      if (v15)
      {
        v39 = 0;
        v40 = v17 + 8 * v100;
        v41 = 0.0;
        v42 = 3.4028e38;
        do
        {
          v43 = *(float **)(*(_QWORD *)v40 + 24);
          v44 = v43[20];
          v45 = v43[18];
          v46 = 0.0;
          if (v44 >= v45)
          {
            v46 = 0.0;
            if (v43[21] >= v43[19])
              v46 = v44 - v45;
          }
          v41 = v46 + v41;
          v47 = vabds_f32(v41, vabds_f32(v38, v41));
          if (v47 < v42)
          {
            if (v39 >= 0)
              v48 = v39;
            else
              v48 = -v39;
            *(float *)(a1 + 648) = v41 + (float)(*(float *)&a7 * (float)((2 * v48) | 1u));
            v42 = v47;
          }
          v39 += v13;
          v40 += 8 * v13;
        }
        while (v29 != v39);
      }
      else
      {
        v49 = v17 + 8 * v100;
        v50 = 0.0;
        v51 = 3.4028e38;
        do
        {
          v52 = *(float **)(*(_QWORD *)v49 + 24);
          v53 = 0.0;
          if (v52[20] >= v52[18])
          {
            v54 = v52[21];
            v55 = v52[19];
            if (v54 >= v55)
              v53 = v54 - v55;
          }
          v50 = v53 + v50;
          v56 = vabds_f32(v50, vabds_f32(v38, v50));
          if (v56 < v51)
          {
            if (v15 >= 0)
              v57 = v15;
            else
              v57 = -v15;
            *(float *)(a1 + 652) = v50 + (float)(*(float *)&a7 * (float)((2 * v57) | 1u));
            v51 = v56;
          }
          v15 += v13;
          v49 += 8 * v13;
        }
        while (v29 != v15);
      }
    }
  }
  v30 = *a3;
  v31 = *a4;
  if (v14 == v100)
  {
    v32 = 37;
  }
  else
  {
    v97 = *a4;
    v98 = *a3;
    v58 = 0;
    v59 = v14 - (v100 + v13);
    v60 = 8 * v100;
    v61 = 0.0;
    v62 = -0.5;
    v63 = 0.0;
    do
    {
      v67 = a3;
      v68 = a2;
      v69 = *(_QWORD **)(*(_QWORD *)(a1 + 576) + v60 + 8 * v58);
      v70 = (float *)v69[3];
      v71 = v70[20];
      v72 = v70[18];
      v73 = 0.0;
      v74 = 0.0;
      if (v71 >= v72)
      {
        v75 = v70[21];
        v76 = v70[19];
        if (v75 >= v76)
        {
          v73 = v71 - v72;
          v74 = v75 - v76;
        }
      }
      v77 = *(unsigned __int8 *)(a1 + 656);
      if (*(_BYTE *)(a1 + 688))
      {
        v78 = v63 + (float)(v73 * 0.5);
        v63 = (float)(v73 + v63) + *(float *)(a1 + 636);
        if (v77 == 3)
        {
          v79 = v74 * v62;
        }
        else if (v77 == 4)
        {
          v79 = -(float)(*(float *)(a1 + 644) + (float)(v74 * v62));
        }
        else
        {
          v79 = *(float *)(a1 + 644) * v62;
        }
      }
      else
      {
        if (v58)
          v80 = (*(float (**)(_QWORD, _QWORD))(*v69 + 280))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + v60 + 8 * v58), 0);
        else
          v80 = 0.0;
        v79 = v61 - (float)(v80 + (float)(v74 * 0.5));
        v81 = *(float *)(a1 + 632);
        v61 = v61
            - (float)((float)((float)(v74 + v80) + v81)
                    + (*(float (**)(_QWORD *, _QWORD))(*v69 + 288))(v69, 0));
        if (v77 == 2)
        {
          v62 = -0.5;
          v78 = *(float *)(a1 + 640) + (float)(v73 * -0.5);
        }
        else
        {
          v62 = -0.5;
          if (v77 == 1)
            v78 = v73 * 0.5;
          else
            v78 = *(float *)(a1 + 640) * 0.5;
        }
      }
      a2 = v68;
      a3 = v67;
      v82 = v78 - *(float *)(a1 + 648);
      v83 = v79 - *(float *)(a1 + 652);
      if (*(_BYTE *)(a1 + 268))
      {
        v84 = *(float *)(a1 + 88);
        v85 = *(float *)(a1 + 92);
        v86 = v85 * v83;
        v83 = (float)(v84 * v83) + (float)(v85 * v82);
        v82 = -(float)(v86 - (float)(v84 * v82));
      }
      v64 = a4->f32[1] + v83;
      v102[0] = a4->f32[0] + v82;
      v102[1] = v64;
      v65 = (*(uint64_t (**)(_QWORD *, uint64_t, float32x2_t *, float *))(*v69 + 80))(v69, a2, v67, v102);
      v66 = (_DWORD)v65 != 37 || v59 == 0;
      v59 -= v13;
      v58 += v13;
    }
    while (!v66);
    v32 = v65;
    v18 = *(float *)(a1 + 644);
    LODWORD(a7) = 0.5;
    v27 = *(float *)(a1 + 640) * 0.5;
    v31 = v97;
    v30 = v98;
  }
LABEL_72:
  a6.n128_u32[0] = 0.5;
  v87 = v18 * 0.5;
  v88 = -v27;
  v89 = -(float)(v18 * 0.5);
  v99 = v27;
  v101 = v89;
  if (*(_BYTE *)(a1 + 630))
  {
    md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
    v90 = *(unsigned int *)(a1 + 248);
    v91 = *(_QWORD *)(a1 + 232) + 16 * v90;
    *(float *)v91 = v88;
    *(float *)(v91 + 4) = v101;
    *(float *)(v91 + 8) = v99;
    *(float *)(v91 + 12) = v87;
    a6.n128_u64[0] = *(_QWORD *)(a1 + 76);
    a7 = COERCE_DOUBLE(__PAIR64__(LODWORD(v99), a6.n128_u32[0]));
    v92 = fminf(*(float *)(a1 + 72), v88);
    *(float *)&a7 = v101;
    *(_DWORD *)(a1 + 248) = v90 + 1;
    *(float *)(a1 + 72) = v92;
    *(int8x8_t *)(a1 + 76) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(LODWORD(v99), a6.n128_u32[0]), (float32x2_t)__PAIR64__(a6.n128_u32[1], LODWORD(v101))), *(int8x8_t *)&a7, (int8x8_t)a6.n128_u64[0]);
    *(float *)(a1 + 84) = fmaxf(*(float *)(a1 + 84), v87);
  }
  else
  {
    v93 = *(void **)(a1 + 232);
    if (v93)
    {
      free(v93);
      v89 = v101;
      *(_QWORD *)(a1 + 232) = 0;
    }
    v94 = *(void **)(a1 + 240);
    if (v94)
    {
      free(v94);
      v89 = v101;
      *(_QWORD *)(a1 + 240) = 0;
    }
    *(float *)(a1 + 72) = v88;
    *(float *)(a1 + 76) = v89;
    *(float *)(a1 + 80) = v99;
    *(float *)(a1 + 84) = v87;
  }
  v95 = COERCE_DOUBLE(vadd_f32(v31, v30));
  *(double *)(a1 + 280) = v95;
  *(double *)(a1 + 104) = v95;
  md::CollisionObject::setupShapeData(a1 + 72, v95, a6.n128_f64[0], a7);
  return v32;
}

double md::StackLabelPart::updateForDisplay(md::StackLabelPart *this)
{
  char *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  double result;

  v2 = (char *)this + 632;
  v3 = (uint64_t *)*((_QWORD *)this + 72);
  v4 = (uint64_t *)*((_QWORD *)this + 73);
  while (v3 != v4)
  {
    v5 = *v3++;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  }
  *(_OWORD *)(v2 + 28) = *(_OWORD *)v2;
  *((_BYTE *)this + 684) = *((_BYTE *)this + 656);
  result = *((double *)this + 81);
  *(double *)(v2 + 44) = result;
  return result;
}

uint64_t md::StackLabelPart::layoutForDisplay(float32x2_t *a1, uint64_t a2, md::LabelAnimator *a3, float *a4, float *a5)
{
  __n128 v10;
  double v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  _QWORD *v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float32x2_t v46;
  __int128 v47;
  float32x2_t v48;
  uint64_t v49;
  __int128 v50;
  void *v51;
  void *v52;
  float v54;
  float v55;
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  uint64_t v59;

  v10.n128_f32[0] = md::CompositeLabelPart::updateAnimationForDisplay((md::CompositeLabelPart *)a1, a3);
  v13 = *a5;
  v12 = a5[1];
  if (a1[77].i8[0])
  {
    v13 = a1[77].f32[1] + v13;
    v10.n128_u32[0] = a1[78].u32[0];
    v12 = v10.n128_f32[0] + v12;
  }
  v14 = (uint64_t)&a1[39];
  v16 = *a4;
  v15 = a4[1];
  v17 = (*(_QWORD *)&a1[73] - *(_QWORD *)&a1[72]) >> 3;
  v18 = v17 - 1;
  if (a1[86].i8[3])
    LODWORD(v17) = -1;
  else
    v18 = 0;
  v19 = v17 - v18;
  if ((_DWORD)v17 == v18)
  {
    v20 = 37;
  }
  else
  {
    v54 = *a4;
    v55 = a4[1];
    v21 = 0;
    if (a1[86].i8[3])
      v22 = -1;
    else
      v22 = 1;
    v23 = 8 * v18;
    v24 = 0.0;
    v25 = 0.0;
    v57 = v13;
    while (1)
    {
      v26 = *(_QWORD **)(*(_QWORD *)&a1[72] + v23 + 8 * v21);
      v59 = 0;
      (*(void (**)(_QWORD *, uint64_t, md::LabelAnimator *, float *, uint64_t *, __n128))(*v26 + 120))(v26, a2, a3, a4, &v59, v10);
      v27 = (float *)v26[3];
      v28 = v27[80];
      v29 = v27[78];
      v30 = 0.0;
      v31 = 0.0;
      if (v28 >= v29)
      {
        v32 = v27[81];
        v33 = v27[79];
        if (v32 >= v33)
        {
          v30 = v28 - v29;
          v31 = v32 - v33;
        }
      }
      v34 = a1[85].u8[4];
      if (a1[86].i8[0])
      {
        v35 = v25 + (float)(v30 * 0.5);
        v25 = (float)(v30 + v25) + a1[83].f32[0];
        if (v34 == 3)
        {
          v36 = v31 * -0.5;
        }
        else if (v34 == 4)
        {
          v36 = -(float)(a1[84].f32[0] + (float)(v31 * -0.5));
        }
        else
        {
          v36 = a1[84].f32[0] * -0.5;
        }
      }
      else
      {
        v37 = v12;
        if (v21)
          v38 = (*(float (**)(_QWORD *, uint64_t))(*v26 + 280))(v26, 1);
        else
          v38 = 0.0;
        v36 = v24 - (float)(v38 + (float)(v31 * 0.5));
        v39 = a1[82].f32[1];
        v24 = v24
            - (float)((float)((float)(v31 + v38) + v39)
                    + (*(float (**)(_QWORD *, uint64_t))(*v26 + 288))(v26, 1));
        if (v34 == 2)
        {
          v35 = a1[83].f32[1] + (float)(v30 * -0.5);
        }
        else if (v34 == 1)
        {
          v35 = v30 * 0.5;
        }
        else
        {
          v35 = a1[83].f32[1] * 0.5;
        }
        v12 = v37;
        v13 = v57;
      }
      v40 = v35 - a1[84].f32[1];
      v41 = v36 - a1[85].f32[0];
      if (a1[63].i8[4])
      {
        v42 = a1[41].f32[0];
        v43 = a1[41].f32[1];
        v44 = v43 * v41;
        v41 = (float)(v42 * v41) + (float)(v43 * v40);
        v40 = -(float)(v44 - (float)(v42 * v40));
      }
      *(float *)&v59 = v40 + v13;
      *((float *)&v59 + 1) = v41 + v12;
      v45 = (*(uint64_t (**)(_QWORD *, uint64_t, md::LabelAnimator *, float *, uint64_t *))(*v26 + 120))(v26, a2, a3, a4, &v59);
      if ((_DWORD)v45 != 37)
        break;
      v21 += v22;
      if (v19 == (_DWORD)v21)
      {
        v20 = 37;
        goto LABEL_36;
      }
    }
    v20 = v45;
LABEL_36:
    v14 = (uint64_t)&a1[39];
    v16 = v54;
    v15 = v55;
  }
  v46 = vmul_f32(*(float32x2_t *)(v14 + 356), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)&v47 = vneg_f32(v46);
  v56 = (float32x2_t)v47;
  v58 = v46;
  if (a1[78].i8[6])
  {
    md::CollisionObject::resetWithRects((void **)v14, 1u);
    v48 = a1[59];
    v49 = a1[61].u32[0];
    a1[61].i32[0] = v49 + 1;
    v11 = *(double *)&v58;
    *(float32x2_t *)&v50 = v56;
    *((float32x2_t *)&v50 + 1) = v58;
    *(_OWORD *)(*(_QWORD *)&v48 + 16 * v49) = v50;
    v46 = vminnm_f32(a1[39], v56);
    *(float32x2_t *)&v47 = vmaxnm_f32(a1[40], v58);
    a1[39] = v46;
    a1[40] = (float32x2_t)v47;
  }
  else
  {
    v51 = (void *)a1[59];
    if (v51)
    {
      free(v51);
      *(float32x2_t *)&v47 = v56;
      v46 = v58;
      a1[59] = 0;
    }
    v52 = (void *)a1[60];
    if (v52)
    {
      free(v52);
      *(float32x2_t *)&v47 = v56;
      v46 = v58;
      a1[60] = 0;
    }
    *((float32x2_t *)&v47 + 1) = v46;
    *(_OWORD *)v14 = v47;
  }
  v46.f32[0] = v16 + v13;
  a1[65].f32[0] = v16 + v13;
  *(float *)&v47 = v15 + v12;
  a1[65].f32[1] = v15 + v12;
  a1[43].f32[0] = v16 + v13;
  a1[43].f32[1] = v15 + v12;
  md::CollisionObject::setupShapeData(v14, *(double *)&v46, *(double *)&v47, v11);
  return v20;
}

uint64_t md::StackLabelPart::isVisuallySimilar(md::StackLabelPart *this, const md::LabelPart *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v2 = *((_QWORD *)this + 73);
  v3 = *((_QWORD *)this + 72);
  if (v2 - v3 == *((_QWORD *)a2 + 73) - *((_QWORD *)a2 + 72))
  {
    if (v2 == v3)
    {
LABEL_8:
      if (*((unsigned __int8 *)this + 656) == *((unsigned __int8 *)a2 + 656)
        && *((unsigned __int8 *)this + 688) == *((unsigned __int8 *)a2 + 688))
      {
        return *((unsigned __int8 *)this + 690) == *((unsigned __int8 *)a2 + 690);
      }
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(v3 + 8 * v6);
        v8 = *(_QWORD *)(*((_QWORD *)a2 + 72) + 8 * v6);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
        if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 224))(v8))
          break;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
        if (!(_DWORD)result)
          return result;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, v8) & 1) == 0)
          break;
        ++v6;
        v3 = *((_QWORD *)this + 72);
        if (v6 >= (*((_QWORD *)this + 73) - v3) >> 3)
          goto LABEL_8;
      }
    }
  }
  return 0;
}

float md::StackLabelPart::topLeftAlignInset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  float result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;

  if (*(_QWORD *)(a1 + 576) == *(_QWORD *)(a1 + 584))
    return 0.0;
  v6 = gss::LabelPositionToMask(a3);
  if (*(_BYTE *)(a1 + 688))
  {
    if ((v6 & 0x38) == 0)
      goto LABEL_8;
  }
  else if ((v6 & 0xE) == 0)
  {
LABEL_8:
    v8 = *(_QWORD **)(a1 + 576);
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 690))
    goto LABEL_8;
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 584) - 8);
LABEL_10:
  v9 = *v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v8 + 312))(*v8, a2, a3);
  if (*(_BYTE *)(a1 + 688))
  {
    v10 = a1 + 632;
    if ((_DWORD)a2)
      v10 = a1 + 660;
    if (*(_BYTE *)(v10 + 24))
    {
      if (*(_BYTE *)(v10 + 24) == 4)
      {
        v11 = *(float *)(v10 + 12);
        v12 = *(_QWORD *)(v9 + 24);
        v13 = (float *)(v12 + 72);
        v14 = 312;
        if ((_DWORD)a2)
          v13 = (float *)(v12 + 312);
        else
          v14 = 72;
        v15 = 0.0;
        if (v13[2] >= *(float *)(v12 + v14))
        {
          v16 = v13[3];
          v17 = v13[1];
          v18 = v16 < v17;
          v15 = v16 - v17;
          if (v18)
            v15 = 0.0;
        }
        return (float)(v11 + result) - v15;
      }
    }
    else
    {
      v19 = *(float *)(v10 + 12);
      v20 = *(_QWORD *)(v9 + 24);
      v21 = (float *)(v20 + 72);
      v22 = 312;
      if ((_DWORD)a2)
        v21 = (float *)(v20 + 312);
      else
        v22 = 72;
      v23 = 0.0;
      if (v21[2] >= *(float *)(v20 + v22))
      {
        v24 = v21[3];
        v25 = v21[1];
        if (v24 >= v25)
          v23 = v24 - v25;
      }
      return result + (float)((float)(v19 - v23) * 0.5);
    }
  }
  return result;
}

float md::StackLabelPart::topRightAlignInset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  float result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;

  if (*(_QWORD *)(a1 + 576) == *(_QWORD *)(a1 + 584))
    return 0.0;
  v6 = gss::LabelPositionToMask(a3);
  if (*(_BYTE *)(a1 + 688))
  {
    if ((v6 & 0x38) == 0)
      goto LABEL_8;
  }
  else if ((v6 & 0xE) == 0)
  {
LABEL_8:
    v8 = *(_QWORD **)(a1 + 576);
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 690))
    goto LABEL_8;
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 584) - 8);
LABEL_10:
  v9 = *v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v8 + 312))(*v8, a2, a3);
  if (*(_BYTE *)(a1 + 688))
  {
    v10 = a1 + 632;
    if ((_DWORD)a2)
      v10 = a1 + 660;
    if (*(_BYTE *)(v10 + 24))
    {
      if (*(_BYTE *)(v10 + 24) == 4)
      {
        v11 = *(float *)(v10 + 12);
        v12 = *(_QWORD *)(v9 + 24);
        v13 = (float *)(v12 + 72);
        v14 = 312;
        if ((_DWORD)a2)
          v13 = (float *)(v12 + 312);
        else
          v14 = 72;
        v15 = 0.0;
        if (v13[2] >= *(float *)(v12 + v14))
        {
          v16 = v13[3];
          v17 = v13[1];
          v18 = v16 < v17;
          v15 = v16 - v17;
          if (v18)
            v15 = 0.0;
        }
        return (float)(v11 + result) - v15;
      }
    }
    else
    {
      v19 = *(float *)(v10 + 12);
      v20 = *(_QWORD *)(v9 + 24);
      v21 = (float *)(v20 + 72);
      v22 = 312;
      if ((_DWORD)a2)
        v21 = (float *)(v20 + 312);
      else
        v22 = 72;
      v23 = 0.0;
      if (v21[2] >= *(float *)(v20 + v22))
      {
        v24 = v21[3];
        v25 = v21[1];
        if (v24 >= v25)
          v23 = v24 - v25;
      }
      return result + (float)((float)(v19 - v23) * 0.5);
    }
  }
  return result;
}

float md::StackLabelPart::bottomAlignInset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char v7;
  _QWORD *v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;

  if (*(_QWORD *)(a1 + 576) == *(_QWORD *)(a1 + 584))
    return 0.0;
  v6 = *(unsigned __int8 *)(a1 + 690);
  if (!*(_BYTE *)(a1 + 690))
  {
LABEL_6:
    if (*(_BYTE *)(a1 + 689))
      goto LABEL_7;
LABEL_12:
    if (!v6)
      goto LABEL_8;
    goto LABEL_13;
  }
  v7 = gss::LabelPositionToMask(a3);
  if (*(_BYTE *)(a1 + 688))
  {
    if ((v7 & 0x38) != 0)
    {
LABEL_5:
      v6 = *(_BYTE *)(a1 + 690) == 0;
      goto LABEL_6;
    }
  }
  else if ((v7 & 0xE) != 0)
  {
    goto LABEL_5;
  }
  v6 = 0;
  if (!*(_BYTE *)(a1 + 689))
    goto LABEL_12;
LABEL_7:
  if (v6)
  {
LABEL_8:
    v8 = (_QWORD *)(*(_QWORD *)(a1 + 584) - 8);
    goto LABEL_14;
  }
LABEL_13:
  v8 = *(_QWORD **)(a1 + 576);
LABEL_14:
  v10 = *v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v8 + 328))(*v8, a2, a3);
  v11 = a1 + 632;
  if ((_DWORD)a2)
    v11 = a1 + 660;
  if (!*(_BYTE *)(a1 + 688))
  {
    if (!*(_BYTE *)(a1 + 689) || *(_BYTE *)(a1 + 691))
      return result;
    goto LABEL_22;
  }
  if (*(_BYTE *)(v11 + 24))
  {
    if (*(_BYTE *)(v11 + 24) != 3)
      return result;
LABEL_22:
    v12 = *(float *)(v11 + 12);
    v13 = *(_QWORD *)(v10 + 24);
    v14 = (float *)(v13 + 72);
    v15 = 312;
    if ((_DWORD)a2)
      v14 = (float *)(v13 + 312);
    else
      v15 = 72;
    v16 = 0.0;
    if (v14[2] >= *(float *)(v13 + v15))
    {
      v17 = v14[3];
      v18 = v14[1];
      v19 = v17 < v18;
      v16 = v17 - v18;
      if (v19)
        v16 = 0.0;
    }
    return (float)(v12 + result) - v16;
  }
  v20 = *(float *)(v11 + 12);
  v21 = *(_QWORD *)(v10 + 24);
  v22 = (float *)(v21 + 72);
  v23 = 312;
  if ((_DWORD)a2)
    v22 = (float *)(v21 + 312);
  else
    v23 = 72;
  v24 = 0.0;
  if (v22[2] >= *(float *)(v21 + v23))
  {
    v25 = v22[3];
    v26 = v22[1];
    if (v25 >= v26)
      v24 = v25 - v26;
  }
  return result + (float)((float)(v20 - v24) * 0.5);
}

uint64_t md::StackLabelPart::setTextAlignment(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 352))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t md::StackLabelPart::setAlignment(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;

  if (!(_DWORD)a2 && !*(_BYTE *)(result + 688))
    *(_BYTE *)(result + 656) = a3;
  v5 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v5 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 360))(v7, a2, a3))
  {
    v7 = *v5++;
  }
  return result;
}

uint64_t md::StackLabelPart::setRadialPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  char v11;
  char v12;

  v6 = *(uint64_t **)(a1 + 576);
  v7 = *(uint64_t **)(a1 + 584);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 368))(v8, a2, a3);
  }
  result = gss::LabelPositionToMask(a2);
  v10 = *(_BYTE *)(a1 + 690);
  if (v10)
  {
    if ((result & 0x83) != 0)
      v11 = 0;
    else
      v11 = a3;
    if ((result & 0x38) != 0)
      v11 = 1;
    if (*(_BYTE *)(a1 + 688))
      v10 = v11;
    else
      v10 = (result & 0xE) != 0;
  }
  *(_BYTE *)(a1 + 691) = v10;
  if (*(_BYTE *)(a1 + 692))
  {
    result = gss::LabelPositionToMask(a2);
    if ((result & 0x38) != 0)
      v12 = 2;
    else
      v12 = 1;
    *(_BYTE *)(a1 + 656) = v12;
    *(_BYTE *)(a1 + 684) = v12;
  }
  return result;
}

uint64_t md::StackLabelPart::populateCollisionObjects(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, float a7, float a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v19;
  uint64_t v20;
  const float *v21;
  float32x2_t v22;
  float v23;
  uint64_t v24;
  __int128 v25;
  float32x2_t v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  uint64_t (*v35)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, float *, float, float);
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float32x2_t *v57;
  uint64_t v58;
  float32x2_t v59;

  if (a1[78].i8[6])
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a2 + 16);
    if (v14 - v13 == -208)
    {
      for (; v14 != v13; v14 -= 208)
      {
        free(*(void **)(v14 - 48));
        free(*(void **)(v14 - 40));
        free(*(void **)(v14 - 24));
      }
      *(_QWORD *)(a2 + 16) = v13;
    }
    else
    {
      std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a2 + 8), 1uLL);
      v13 = *(_QWORD *)(a2 + 16);
    }
    v21 = (const float *)&a1[1];
    v22 = vld1_dup_f32(v21);
    *(float32x2_t *)(v13 - 112) = vadd_f32(a1[21], v22);
    v23 = *a6;
    *(float *)(v13 - 192) = *a6;
    *(float *)(v13 - 188) = a6[1];
    *(_BYTE *)(v13 - 12) = fabsf(v23 + -1.0) > 0.000001;
    v59 = vmul_f32(a1[80], (float32x2_t)0x3F0000003F000000);
    md::CollisionObject::resetWithRects((void **)(v13 - 208), 1u);
    v24 = *(unsigned int *)(v13 - 32);
    *(float32x2_t *)&v25 = vneg_f32(v59);
    *((float32x2_t *)&v25 + 1) = v59;
    *(_OWORD *)(*(_QWORD *)(v13 - 48) + 16 * v24) = v25;
    v26 = *(float32x2_t *)(v13 - 200);
    *(float32x2_t *)&v25 = vminnm_f32(*(float32x2_t *)(v13 - 208), *(float32x2_t *)&v25);
    *(_DWORD *)(v13 - 32) = v24 + 1;
    v27 = COERCE_DOUBLE(vmaxnm_f32(v26, v59));
    *(_QWORD *)(v13 - 208) = v25;
    *(double *)(v13 - 200) = v27;
    *(float *)(v13 - 176) = a7;
    *(float *)(v13 - 172) = a8;
    return md::CollisionObject::setupShapeData(v13 - 208, *(double *)&v25, v27, *(double *)&v59);
  }
  result = gss::LabelPositionToMask(a3);
  v19 = a1[86].u8[2];
  v58 = a2;
  if (!a1[86].i8[2])
  {
    v57 = a1 + 72;
    v20 = (*(_QWORD *)&a1[73] - *(_QWORD *)&a1[72]) >> 3;
    v28 = 1;
    goto LABEL_18;
  }
  if (!a1[86].i8[0])
  {
    v57 = a1 + 72;
    v20 = (*(_QWORD *)&a1[73] - *(_QWORD *)&a1[72]) >> 3;
    v19 = result & 0xE;
    if ((result & 0xE) == 0)
    {
      v28 = 1;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((result & 0x38) != 0)
  {
    v57 = a1 + 72;
    v20 = (*(_QWORD *)&a1[73] - *(_QWORD *)&a1[72]) >> 3;
LABEL_17:
    v19 = v20 - 1;
    v28 = -1;
    LODWORD(v20) = -1;
    goto LABEL_18;
  }
  v19 = 0;
  v57 = a1 + 72;
  v20 = (*(_QWORD *)&a1[73] - *(_QWORD *)&a1[72]) >> 3;
  v28 = 1;
  if ((result & 0x83) == 0 && (_DWORD)a4)
    goto LABEL_17;
LABEL_18:
  v29 = v20 - v19;
  if ((_DWORD)v20 != v19)
  {
    v30 = 0;
    v31 = 8 * v19;
    v32 = 0.0;
    v33 = 1.0;
    v34 = 0.0;
    v56 = a8;
    do
    {
      v37 = a4;
      v38 = *(_QWORD **)(*(_QWORD *)v57 + v31 + 8 * v30);
      v39 = (float *)v38[3];
      v40 = v39[20];
      v41 = v39[18];
      v42 = 0.0;
      v43 = 0.0;
      if (v40 >= v41)
      {
        v44 = v39[21];
        v45 = v39[19];
        if (v44 >= v45)
        {
          v42 = v40 - v41;
          v43 = v44 - v45;
        }
      }
      if (a1[86].i8[0])
      {
        v46 = v34 + (float)(v42 * 0.5);
        v34 = (float)(v42 + v34) + a1[79].f32[1];
        if ((_DWORD)a5 == 3)
        {
          v47 = v43 * -0.5;
        }
        else if ((_DWORD)a5 == 4)
        {
          v47 = -(float)(a1[80].f32[1] + (float)(v43 * -0.5));
        }
        else
        {
          v47 = a1[80].f32[1] * -0.5;
        }
      }
      else
      {
        v48 = a7;
        if (v30)
          v49 = (*(float (**)(_QWORD, _QWORD))(*v38 + 280))(*(_QWORD *)(*(_QWORD *)v57 + v31 + 8 * v30), 0);
        else
          v49 = 0.0;
        v47 = v32 - (float)(v49 + (float)(v43 * 0.5));
        v50 = a1[79].f32[0];
        v32 = v32
            - (float)((float)((float)(v43 + v49) + v50)
                    + (*(float (**)(_QWORD *, _QWORD))(*v38 + 288))(v38, 0));
        if ((_DWORD)a5 == 2)
        {
          v46 = a1[80].f32[0] + (float)(v42 * -0.5);
        }
        else if ((_DWORD)a5 == 1)
        {
          v46 = v42 * 0.5;
        }
        else
        {
          v46 = a1[80].f32[0] * 0.5;
        }
        a8 = v56;
        a7 = v48;
        v33 = 1.0;
      }
      v51 = v46 - a1[81].f32[0];
      v52 = v47 - a1[81].f32[1];
      v53 = *a6;
      if (*a6 != v33)
      {
        v54 = a6[1];
        v55 = v54 * v52;
        v52 = (float)(v52 * v53) + (float)(v54 * v51);
        v51 = -(float)(v55 - (float)(v53 * v51));
      }
      v35 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, float *, float, float))(*v38 + 584);
      v36 = v38;
      a4 = v37;
      result = v35(v36, v58, a3, v37, a5, a6, v51 + a7, v52 + a8);
      v30 += v28;
    }
    while (v29 != (_DWORD)v30);
  }
  return result;
}

uint64_t md::StackLabelPart::debugCompositeClassName@<X0>(md::StackLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[3];
  uint64_t v25;
  unint64_t v26;
  void *__p[2];
  __int128 v28;
  int v29;
  uint64_t v30[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v30[0] = MEMORY[0x1E0DE4FE0] + 64;
  v22 = v7;
  *(_QWORD *)((char *)&v23[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v23[-1] + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v4 + 24;
  v30[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  v29 = 16;
  if (*((float *)this + 166) == *((float *)this + 165))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Stack, Margin=", 14);
    v11 = v22;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v22 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v22 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v23[1] + *(_QWORD *)(v11 - 24)) = 1;
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Stack, Margin:H=", 16);
    v12 = v22;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v22 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v22 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v23[1] + *(_QWORD *)(v12 - 24)) = 1;
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", V=", 4);
  }
  std::ostream::operator<<();
  if ((v29 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v15 = v26;
    }
    v16 = (const void **)&v25;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v14 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    v16 = (const void **)v24;
    v15 = v24[2];
  }
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_18;
  }
  a2[23] = v14;
  if (v14)
LABEL_18:
    memmove(a2, v17, v14);
LABEL_19:
  a2[v14] = 0;
  v22 = *v6;
  *(_QWORD *)((char *)&v23[-1] + *(_QWORD *)(v22 - 24)) = v6[3];
  v23[0] = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v30);
}

void sub_19F59CF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::StackLabelPart::StackLabelPart(uint64_t result, int a2)
{
  uint64_t v2;
  float *v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  malloc_zone_t *zone;
  uint64_t v11;
  int v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1065353216;
  v2 = result + 280;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = result;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(result + 88) = 1065353216;
  *(_DWORD *)(result + 96) = 1065353216;
  *(_OWORD *)(result + 100) = 0u;
  *(_DWORD *)(result + 116) = 0;
  *(_OWORD *)(result + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 168) = xmmword_19FFB3480;
  *(_BYTE *)(result + 224) = 0;
  *(_BYTE *)(result + 200) = 0;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 257) = 0u;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(result + 232) = 0u;
  *(_OWORD *)(result + 280) = xmmword_19FFB3580;
  *(_OWORD *)(result + 296) = xmmword_19FFB3590;
  *(_OWORD *)(result + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(result + 328) = 1065353216;
  *(_DWORD *)(result + 336) = 1065353216;
  *(_DWORD *)(result + 356) = 0;
  *(_OWORD *)(result + 340) = 0u;
  *(_OWORD *)(result + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 408) = xmmword_19FFB3480;
  *(_BYTE *)(result + 464) = 0;
  *(_OWORD *)(result + 424) = 0u;
  *(_BYTE *)(result + 440) = 0;
  *(_OWORD *)(result + 497) = 0u;
  *(_OWORD *)(result + 472) = 0u;
  *(_OWORD *)(result + 488) = 0u;
  *(_OWORD *)(result + 520) = xmmword_19FFB3580;
  *(_DWORD *)(result + 536) = 1065353216;
  *(_OWORD *)(result + 540) = 0u;
  *(_WORD *)(result + 556) = 512;
  *(_BYTE *)(result + 562) = 0;
  *(_DWORD *)(result + 558) = 0;
  *(_WORD *)(result + 563) = -1;
  *(_DWORD *)(result + 565) = 0;
  *(_QWORD *)result = off_1E4294028;
  *(_OWORD *)(result + 576) = 0u;
  *(_QWORD *)(result + 592) = 0;
  v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v4 & 1) == 0)
  {
    v13 = result;
    v12 = a2;
    v3 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    a2 = v12;
    v6 = v5;
    result = v13;
    if (v6)
    {
      v11 = v2;
      v7 = operator new();
      *(_QWORD *)(v7 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v7 + 24) = "VectorKitLabels";
      *(_OWORD *)(v7 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v7 = &off_1E42B5668;
      *(_QWORD *)(v7 + 8) = "VectorKitLabels";
      *(_OWORD *)(v7 + 72) = 0u;
      *(_OWORD *)(v7 + 88) = 0u;
      *(_OWORD *)(v7 + 104) = 0u;
      *(_OWORD *)(v7 + 120) = 0u;
      *(_OWORD *)(v7 + 136) = 0u;
      *(_OWORD *)(v7 + 152) = 0u;
      *(_OWORD *)(v7 + 168) = 0u;
      *(_OWORD *)(v7 + 184) = 0u;
      *(_OWORD *)(v7 + 200) = 0u;
      *(_OWORD *)(v7 + 216) = 0u;
      *(_OWORD *)(v7 + 232) = 0u;
      *(_QWORD *)(v7 + 248) = 0;
      *(_OWORD *)(v7 + 56) = 0u;
      v8 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v7 + 56), 0);
      if ((_DWORD)v8)
        geo::read_write_lock::logFailure(v8, (uint64_t)"initialization", v9);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v7 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v7 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v7;
      v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      result = v13;
      a2 = v12;
      v2 = v11;
    }
  }
  *(_QWORD *)(result + 600) = *((_QWORD *)v3 + 299);
  *(_BYTE *)(result + 608) = 0;
  *(_BYTE *)(result + 616) = 0;
  *(_WORD *)(result + 628) = 1;
  *(_BYTE *)(result + 630) = 0;
  *(_QWORD *)result = off_1E428FE10;
  *(_QWORD *)(result + 632) = 0;
  *(_QWORD *)(result + 648) = 0;
  *(_QWORD *)(result + 640) = 0;
  *(_QWORD *)(result + 668) = 0;
  *(_QWORD *)(result + 676) = 0;
  *(_QWORD *)(result + 660) = 0;
  *(_BYTE *)(result + 688) = a2 == 1;
  *(_BYTE *)(result + 689) = 1;
  *(_BYTE *)(result + 656) = 0;
  *(_BYTE *)(result + 684) = 0;
  *(_DWORD *)(v2 + 410) = 0;
  return result;
}

uint64_t md::StackLabelPart::StackLabelPart(uint64_t result, int a2, int a3, int a4, char a5)
{
  unsigned __int8 v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;

  *(_DWORD *)(result + 8) = 1065353216;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = result;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(result + 88) = 1065353216;
  *(_DWORD *)(result + 96) = 1065353216;
  *(_OWORD *)(result + 100) = 0u;
  *(_DWORD *)(result + 116) = 0;
  *(_OWORD *)(result + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 168) = xmmword_19FFB3480;
  *(_BYTE *)(result + 224) = 0;
  *(_BYTE *)(result + 200) = 0;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 257) = 0u;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(result + 232) = 0u;
  *(_OWORD *)(result + 280) = xmmword_19FFB3580;
  *(_OWORD *)(result + 296) = xmmword_19FFB3590;
  *(_OWORD *)(result + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(result + 328) = 1065353216;
  *(_DWORD *)(result + 336) = 1065353216;
  *(_DWORD *)(result + 356) = 0;
  *(_OWORD *)(result + 340) = 0u;
  *(_OWORD *)(result + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(result + 408) = xmmword_19FFB3480;
  *(_BYTE *)(result + 464) = 0;
  *(_OWORD *)(result + 424) = 0u;
  *(_BYTE *)(result + 440) = 0;
  *(_OWORD *)(result + 497) = 0u;
  *(_OWORD *)(result + 472) = 0u;
  *(_OWORD *)(result + 488) = 0u;
  *(_OWORD *)(result + 520) = xmmword_19FFB3580;
  *(_DWORD *)(result + 536) = 1065353216;
  *(_OWORD *)(result + 540) = 0u;
  *(_WORD *)(result + 556) = 512;
  *(_BYTE *)(result + 562) = 0;
  *(_DWORD *)(result + 558) = 0;
  *(_WORD *)(result + 563) = -1;
  *(_DWORD *)(result + 565) = 0;
  *(_QWORD *)result = off_1E4294028;
  *(_OWORD *)(result + 576) = 0u;
  *(_QWORD *)(result + 592) = 0;
  if ((v5 & 1) == 0)
  {
    v17 = result;
    v13 = a4;
    v14 = a3;
    v15 = a2;
    v16 = a5;
    a2 = v15;
    a5 = v16;
    a4 = v13;
    a3 = v14;
    v8 = v7;
    result = v17;
    if (v8)
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v9 + 24) = "VectorKitLabels";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "VectorKitLabels";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v9;
      result = v17;
      a4 = v13;
      a3 = v14;
      a2 = v15;
      a5 = v16;
    }
  }
  *(_QWORD *)(result + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(result + 608) = 0;
  *(_BYTE *)(result + 616) = 0;
  *(_WORD *)(result + 628) = 1;
  *(_BYTE *)(result + 630) = 0;
  *(_QWORD *)result = off_1E428FE10;
  *(_QWORD *)(result + 632) = 0;
  *(_QWORD *)(result + 648) = 0;
  *(_QWORD *)(result + 640) = 0;
  *(_QWORD *)(result + 668) = 0;
  *(_QWORD *)(result + 676) = 0;
  *(_QWORD *)(result + 660) = 0;
  *(_BYTE *)(result + 688) = a2 == 1;
  *(_BYTE *)(result + 689) = 1;
  *(_BYTE *)(result + 690) = a4 == 1;
  *(_BYTE *)(result + 691) = 0;
  *(_BYTE *)(result + 692) = a3 == 5;
  *(_BYTE *)(result + 693) = a5;
  if (a3 == 5)
    v6 = 2;
  else
    v6 = a3;
  *(_BYTE *)(result + 656) = v6;
  *(_BYTE *)(result + 684) = v6;
  return result;
}

void md::PuckLogic::~PuckLogic(md::PuckLogic *this)
{
  md::PuckLogic::~PuckLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  *(_QWORD *)this = &off_1E42AFD40;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  v3 = (_QWORD *)((char *)this + 392);
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  *v3 = 0;
  v3[1] = 0;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  v3[4] = 0;
  v3[5] = 0;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  objc_msgSend(*((id *)this + 55), "stop");
  v12 = (void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;

  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::PuckLogic::didBecomeInactive(md::PuckLogic *this)
{
  uint64_t v2;
  void *v3;
  _BYTE v4[96];
  int v5;
  char v6;

  if (*((_BYTE *)this + 328))
  {
    v2 = *((_QWORD *)this + 34);
    v4[0] = 0;
    v5 = 1;
    md::RegistryManager::removeRegistry(v2, (uint64_t)v4);
    if (v5 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FA3C0[v5])(&v6, v4);
    *((_QWORD *)this + 36) = 0;
  }
  *((_BYTE *)this + 328) = 0;
  objc_msgSend(*((id *)this + 55), "stop");
  v3 = (void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;

}

void sub_19F59D5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E42FA3C0[a21])(v21 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[10];

  if (*(_QWORD *)(a3 + 8) == 0x9AEE7E062376E454 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::PuckLogic::debugConsoleString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  id v3;
  id v4;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  id v10;
  int v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t *v57;
  _QWORD *v58;
  _BYTE *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  _BYTE *v77;
  int v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  size_t v85;
  unint64_t v86;
  const void **v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t *v94;
  uint64_t *v95;
  _BYTE *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  unsigned __int8 *v114;
  int v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  _QWORD *v120;
  char __p[18];
  char v122;
  _QWORD v123[2];
  _QWORD v124[3];
  _QWORD v125[3];
  uint64_t v126;
  unint64_t v127;
  void *v128;
  char v129;
  unint64_t v130;
  int v131;
  uint64_t v132;

  v7 = *(_QWORD *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v123);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"NavigationPuck: \n", 17);
  v8 = *(id *)(v7 + 48);
  if (v8)
  {
    v3 = *(id *)(v7 + 48);
    objc_msgSend(v3, "puck");
  }
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  if (v8)

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"NavigationPuck.enabled: \n", 25);
  v10 = *(id *)(v7 + 48);
  if (v10)
  {
    v3 = *(id *)(v7 + 48);
    if (objc_msgSend(v3, "puck"))
    {
      v4 = *(id *)(v7 + 48);
      objc_msgSend(v4, "puck");
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  if (v11)

  if (v10)
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Entities exist: \n", 17);
  if (*(_BYTE *)(a1 + 481))
    v13 = "true";
  else
    v13 = "false";
  if (*(_BYTE *)(a1 + 481))
    v14 = 4;
  else
    v14 = 5;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Entities injected: \n", 20);
  if (*(_BYTE *)(a1 + 482))
    v15 = "true";
  else
    v15 = "false";
  if (*(_BYTE *)(a1 + 482))
    v16 = 4;
  else
    v16 = 5;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"CameraType globe: \n", 19);
  if (*(_BYTE *)(a1 + 483))
    v17 = "true";
  else
    v17 = "false";
  if (*(_BYTE *)(a1 + 483))
    v18 = 4;
  else
    v18 = 5;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck asset available: \n", 23);
  if (*(_BYTE *)(a1 + 484))
    v19 = "true";
  else
    v19 = "false";
  if (*(_BYTE *)(a1 + 484))
    v20 = 4;
  else
    v20 = 5;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Injectable tiles in view: \n", 27);
  if (*(_BYTE *)(a1 + 485))
    v21 = "true";
  else
    v21 = "false";
  if (*(_BYTE *)(a1 + 485))
    v22 = 4;
  else
    v22 = 5;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v21, v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"IDs found: \n", 12);
  if (*(_BYTE *)(a1 + 487))
    v23 = "true";
  else
    v23 = "false";
  if (*(_BYTE *)(a1 + 487))
    v24 = 4;
  else
    v24 = 5;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck Position: [\n\t", 18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"x: ", 3);
  v25 = (_QWORD *)std::ostream::operator<<();
  v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n\t", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"y: ", 3);
  v27 = (_QWORD *)std::ostream::operator<<();
  v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n\t", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"z: ", 3);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"\n\t", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)"z (meters): ", 12);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"]\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck facing camera: ", 20);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck occlusion behavior: ", 25);
  v33 = *(unsigned __int8 *)(a1 + 192);
  if (v33 == 2)
  {
    v34 = 8;
    v122 = 8;
    strcpy(__p, "Occluded");
  }
  else if (v33 == 1)
  {
    v34 = 11;
    v122 = 11;
    strcpy(__p, "NonOccluded");
  }
  else if (*(_BYTE *)(a1 + 192))
  {
    v34 = 0;
    v122 = 0;
    __p[0] = 0;
  }
  else
  {
    v34 = 17;
    v122 = 17;
    strcpy(__p, "PartiallyOccluded");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)__p, v34);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  if (v122 < 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck visibility: ", 17);
  if (*(_BYTE *)(a1 + 269) == 1)
  {
    v35 = 6;
    v122 = 6;
    strcpy(__p, "Always");
  }
  else if (*(_BYTE *)(a1 + 269))
  {
    v35 = 0;
    v122 = 0;
    __p[0] = 0;
  }
  else
  {
    v35 = 4;
    v122 = 4;
    strcpy(__p, "Auto");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)__p, v35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  if (v122 < 0)
    operator delete(*(void **)__p);
  v36 = *(id *)(v7 + 48);
  if (v36)
  {
    v37 = v36;
    v38 = objc_msgSend(*(id *)(v7 + 48), "puck");

    if (v38)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck course angle (radians): ", 29);
      v39 = *(id *)(v7 + 48);
      objc_msgSend(v39, "puck");
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);

    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck Bounds: [\n\t", 16);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Min: [\n\t\t", 9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"x: ", 3);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"y: ", 3);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"z: ", 3);
    v43 = (_QWORD *)std::ostream::operator<<();
    v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n\t]\n\t", 5);
    v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"Max: [\n\t\t", 9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"x: ", 3);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)"y: ", 3);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)"z: ", 3);
    v48 = (_QWORD *)std::ostream::operator<<();
    v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)"\n\t]\n", 4);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n]\n", 3);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Billboard-factor: ", 18);
  v50 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
  v120 = a3;
  v51 = *(_QWORD *)(a1 + 288);
  if (v51)
  {
    v52 = (_QWORD *)gdc::Registry::storage<md::components::OcclusionType>(*(_QWORD *)(a1 + 288));
    v53 = gdc::Registry::storage<md::components::Visibility>(v51);
    v54 = (_QWORD *)v53;
    v55 = v53 + 32;
    v57 = (unint64_t *)v52[7];
    v56 = (uint64_t *)v52[8];
    if (*(_QWORD *)(v53 + 64) - *(_QWORD *)(v53 + 56) >= (unint64_t)((char *)v56 - (char *)v57))
      v58 = v52 + 4;
    else
      v58 = (_QWORD *)(v53 + 32);
    if (v52 + 4 == v58 && v57 != (unint64_t *)v56)
    {
      v59 = (_BYTE *)v52[10];
      do
      {
        v60 = *((unsigned int *)v57 + 1);
        v61 = v54[4];
        v62 = (v54[5] - v61) >> 3;
        if (v60 >> 7 >= v62)
          goto LABEL_78;
        v63 = *(_QWORD *)(v61 + 8 * (v60 >> 7));
        if (!v63)
          goto LABEL_78;
        v64 = *(unsigned __int16 *)(v63 + 2 * (v60 & 0x7F));
        v66 = v54[7];
        v65 = v54[8];
        v67 = (v65 - v66) >> 3;
        if (v67 <= v64)
          goto LABEL_78;
        v68 = v66 + 8 * v64;
        if (v68 == v65 || *(_DWORD *)(v68 + 4) != (_DWORD)v60)
          goto LABEL_78;
        v70 = *v57;
        v71 = *v57 >> 39;
        if (v71 < v62
          && (v72 = *(_QWORD *)(v61 + 8 * v71)) != 0
          && (v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v70) & 0x7F)), v67 > v73)
          && ((v74 = HIDWORD(v70), v75 = v66 + 8 * v73, v75 != v65)
            ? (v76 = *(_DWORD *)(v75 + 4) == (_DWORD)v74)
            : (v76 = 0),
              v76))
        {
          v77 = (_BYTE *)(v54[10] + v73);
          v78 = *v59;
          if (!*v59)
          {
LABEL_98:
            v79 = "Non-occluded Puck: ";
            v80 = 19;
            goto LABEL_99;
          }
        }
        else
        {
          v77 = (_BYTE *)v54[11];
          v78 = *v59;
          if (!*v59)
            goto LABEL_98;
        }
        if (v78 == 1)
        {
          v79 = "Occluded Puck: ";
          v80 = 15;
LABEL_99:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v79, v80);
          if (*v77)
            v81 = "visible";
          else
            v81 = "not visible";
          if (*v77)
            v82 = 7;
          else
            v82 = 11;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v81, v82);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
        }
LABEL_78:
        ++v59;
        ++v57;
      }
      while (v57 != (unint64_t *)v56);
    }
    if ((_QWORD *)v55 == v58)
    {
      v94 = (unint64_t *)v54[7];
      v95 = (uint64_t *)v54[8];
      if (v94 != (unint64_t *)v95)
      {
        v96 = (_BYTE *)v54[10];
        while (1)
        {
          v97 = *((unsigned int *)v94 + 1);
          v98 = v52[4];
          v99 = (v52[5] - v98) >> 3;
          if (v97 >> 7 >= v99)
            goto LABEL_132;
          v100 = *(_QWORD *)(v98 + 8 * (v97 >> 7));
          if (!v100)
            goto LABEL_132;
          v101 = *(unsigned __int16 *)(v100 + 2 * (v97 & 0x7F));
          v103 = v52[7];
          v102 = v52[8];
          v104 = (v102 - v103) >> 3;
          if (v104 <= v101)
            goto LABEL_132;
          v105 = v103 + 8 * v101;
          if (v105 == v102 || *(_DWORD *)(v105 + 4) != (_DWORD)v97)
            goto LABEL_132;
          if ((v107 = *v94, v108 = *v94 >> 39, v108 < v99)
            && (v109 = *(_QWORD *)(v98 + 8 * v108)) != 0
            && (v110 = *(unsigned __int16 *)(v109 + 2 * (HIDWORD(v107) & 0x7F)), v104 > v110)
            && ((v111 = HIDWORD(v107), v112 = v103 + 8 * v110, v112 != v102)
              ? (v113 = *(_DWORD *)(v112 + 4) == (_DWORD)v111)
              : (v113 = 0),
                v113))
          {
            v114 = (unsigned __int8 *)(v52[10] + v110);
          }
          else
          {
            v114 = (unsigned __int8 *)v52[11];
          }
          v115 = *v114;
          if (v115 == 1)
            break;
          if (!v115)
          {
            v116 = "Non-occluded Puck: ";
            v117 = 19;
LABEL_153:
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v116, v117);
            if (*v96)
              v118 = "visible";
            else
              v118 = "not visible";
            if (*v96)
              v119 = 7;
            else
              v119 = 11;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v118, v119);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
          }
LABEL_132:
          ++v96;
          if (++v94 == (unint64_t *)v95)
            goto LABEL_107;
        }
        v116 = "Occluded Puck: ";
        v117 = 15;
        goto LABEL_153;
      }
    }
  }
LABEL_107:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck Render Mode: ", 18);
  v83 = v120;
  if (*(_BYTE *)(a1 + 480))
  {
    if (*(_BYTE *)(a1 + 480) != 1)
      goto LABEL_112;
    v84 = "3D";
  }
  else
  {
    v84 = "2D";
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v84, 2);
LABEL_112:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  if ((v131 & 0x10) != 0)
  {
    v86 = v130;
    if (v130 < v127)
    {
      v130 = v127;
      v86 = v127;
    }
    v87 = (const void **)&v126;
  }
  else
  {
    if ((v131 & 8) == 0)
    {
      v85 = 0;
      *((_BYTE *)v120 + 23) = 0;
      goto LABEL_127;
    }
    v87 = (const void **)v125;
    v86 = v125[2];
  }
  v88 = *v87;
  v85 = v86 - (_QWORD)*v87;
  if (v85 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v85 >= 0x17)
  {
    v89 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v89 = v85 | 7;
    v90 = v89 + 1;
    v91 = operator new(v89 + 1);
    v120[1] = v85;
    v120[2] = v90 | 0x8000000000000000;
    *v120 = v91;
    v83 = v91;
    goto LABEL_126;
  }
  *((_BYTE *)v120 + 23) = v85;
  if (v85)
LABEL_126:
    memmove(v83, v88, v85);
LABEL_127:
  *((_BYTE *)v83 + v85) = 0;
  v123[0] = *MEMORY[0x1E0DE4F50];
  v92 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v123 + *(_QWORD *)(v123[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v124[0] = v92;
  v124[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v129 < 0)
    operator delete(v128);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v132);
}

void sub_19F59E234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PuckLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t gdc::Registry::storage<md::components::RenderableInjected>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2D19D14B1A606548;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2D19D14B1A606548;
      if (*(_QWORD *)&v3 <= 0x2D19D14B1A606548uLL)
        v5 = 0x2D19D14B1A606548uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2D19D14B1A606548;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2D19D14B1A606548)
            {
              if (v7[2] == 0x2D19D14B1A606548)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2D19D14B1A606548)
          {
            if (v7[2] == 0x2D19D14B1A606548)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::RenderableInjected]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3198;
  *(_QWORD *)(v11 + 8) = 0x2D19D14B1A606548;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2D19D14B1A606548uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2D19D14B1A606548;
  v15[1] = "md::components::RenderableInjected]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2D19D14B1A606548, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F59E588(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::updateAndLogChange<BOOL>(_BYTE *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*a1 != a2)
  {
    if (GEOGetVectorKitPuckLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitPuckLogicLog(void)::onceToken, &__block_literal_global_3515);
    v6 = GEOGetVectorKitPuckLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitPuckLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v7 = *a1;
      v8 = 136315650;
      v9 = a3;
      v10 = 1024;
      v11 = v7;
      v12 = 1024;
      v13 = a2;
      _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_INFO, "State %s changed from %d to %d", (uint8_t *)&v8, 0x18u);
    }
    *a1 = a2;
  }
}

uint64_t md::PuckStyleInfo::update(uint64_t a1, uint64_t a2, id *a3, uint64_t *a4, uint16x4_t *a5, float a6)
{
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint16x4_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  float *v25;
  float v26;
  _BOOL4 v27;
  BOOL v28;
  unsigned int v29;
  float v30;
  _BOOL4 v31;
  unsigned int v33;
  float v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  float *v38;
  float v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  float *v44;
  float v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  float v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  float *v57;
  float v58;
  _BOOL4 v59;
  BOOL v60;
  unsigned int v61;
  int hasValueForKeyAtZAtEnd;
  float v63;
  float v64;
  _BOOL4 v65;
  unsigned int v67;
  float v68;
  int v69;
  unint64_t v70;
  float *v71;
  float v72;
  _BOOL4 v73;
  BOOL v74;
  unsigned int v75;
  float v76;
  float v77;
  _BOOL4 v78;
  float v80;
  uint64_t v81;
  unsigned int v82;
  float *v83;
  float v84;
  _BOOL4 v85;
  BOOL v86;
  unsigned int v87;
  float v88;
  _BOOL4 v89;
  float v91;
  unsigned int v92;
  float v93;
  uint64_t v94;
  unsigned int v95;
  float *v96;
  float v97;
  _BOOL4 v98;
  BOOL v99;
  unsigned int v100;
  int v101;
  float v102;
  float v103;
  _BOOL4 v104;
  unsigned int v106;
  float v107;
  int v108;
  uint64_t v109;
  float *v110;
  float v111;
  _BOOL4 v112;
  BOOL v113;
  float v114;
  id v115;
  void *v116;
  void *v117;
  unsigned __int16 v118;
  gss::Allocator *v119;
  gss::Allocator *v120;
  unsigned int *v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  char *v128;
  unsigned int *v129;
  unsigned int *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int *v135;
  uint64_t v136;
  __int128 v137;
  unsigned int v138;
  float v139;
  _BOOL4 v140;
  unsigned int v141;
  float v142;
  float v143;
  float v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  float *v150;
  float v151;
  _BOOL4 v152;
  unsigned int v153;
  float v154;
  _BOOL4 v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  char *v163;
  unsigned int *v164;
  unsigned int *v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  float v189;
  float v190;
  id v191;
  float v192;
  id v193;
  uint64_t v194;
  unsigned int v195;
  float *v196;
  float v197;
  _BOOL4 v198;
  unsigned int v200;
  float v201;
  float v202;
  _BOOL4 v203;
  unsigned int v205;
  char v206;
  char v207;
  float v208;
  unint64_t v209;
  float v210;
  float *v211;
  float v212;
  BOOL v213;
  unsigned int v214;
  float v215;
  float v216;
  float v217;
  float v218;
  gss::Allocator *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  uint64_t v224;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  unsigned int v231;
  float *v232;
  float v233;
  _BOOL4 v234;
  unsigned int v235;
  float v236;
  _BOOL4 v237;
  unsigned int v238;
  float v239;
  _QWORD v240[2];
  uint16x4_t v241;
  std::__shared_weak_count *v242;
  _QWORD v243[2];
  unsigned __int8 v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  _BYTE v247[15];
  char v248;
  uint64_t v249[3];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int *v256;
  unint64_t v257;
  gss::Allocator *v258;
  uint16x4_t v259;
  std::__shared_weak_count *v260;
  _QWORD v261[2];
  unsigned __int8 v262;
  char v263;

  if ((v12 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorLinear, (uint64_t)&md::kDefaultArrowColor);
  }
  if ((v13 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorStaleLinear, (uint64_t)&md::kDefaultArrowColorStale);
  }
  if ((v14 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultCircleColorLinear, (uint64_t)&md::kDefaultCircleColor);
  }
  v15 = *a5;
  v16 = (std::__shared_weak_count *)a5[1];
  v241 = v15;
  v242 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v260 = v16;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  else
  {
    v260 = 0;
  }
  v261[0] = 0;
  v261[1] = 0;
  v259 = v15;
  v262 = 0;
  if (v15)
    v15.i32[0] = (*(uint64_t (**)(uint16x4_t, _QWORD *))(**(_QWORD **)&v15 + 48))(v15, v261);
  v262 = v15.i8[0];
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v15.i32[0] = v262;
  }
  v22 = 1.0;
  if (!v15.i32[0])
    goto LABEL_48;
  v23 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v24 = 23;
  else
    v24 = (int)a6;
  v25 = *(float **)v23;
  if (!*(_QWORD *)v23)
  {
    v27 = 0;
    goto LABEL_32;
  }
  v26 = *v25;
  v27 = *v25 == 1.0;
  if (!*(_BYTE *)(v23 + 10) || (v26 != 0.0 ? (v28 = v26 == 1.0) : (v28 = 1), v28))
  {
LABEL_32:
    v29 = *(unsigned __int8 *)(v23 + v27 + 11);
    if (v29 != 2)
      goto LABEL_35;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0xF7u, v24, 0) & 1) != 0)
    goto LABEL_36;
  v29 = 1;
LABEL_35:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v23, 0xF7u, v24, v29))
  {
LABEL_36:
    if (v25)
    {
      v30 = *v25;
      v31 = *v25 == 1.0;
      if (*(_BYTE *)(v23 + 10))
      {
        if (v30 != 0.0 && v30 != 1.0)
        {
LABEL_46:
          v241.i8[0] = 1;
          LOBYTE(v255) = 1;
          v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v23, 0xF7u, v24, 0, &v241);
          v22 = v34
              + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v23, 0xF7u, v24, 1u, &v255)- v34)* v30);
          goto LABEL_48;
        }
      }
    }
    else
    {
      v31 = 0;
    }
    v33 = *(unsigned __int8 *)(v23 + v31 + 11);
    v30 = 0.0;
    if (v33 != 2)
    {
      v22 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v23, 0xF7u, v24, v33, 0);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
LABEL_48:
  *(float *)(a1 + 8) = v22;
  v35 = v262;
  if (!v262)
    goto LABEL_65;
  v36 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v37 = 23;
  else
    v37 = (int)a6;
  v38 = *(float **)v36;
  if (*(_QWORD *)v36
    && (v39 = *v38, LODWORD(v38) = *v38 == 1.0, *(_BYTE *)(v36 + 10))
    && (v39 != 0.0 ? (v40 = v39 == 1.0) : (v40 = 1), !v40)
    || (v41 = *(unsigned __int8 *)(v36 + v38 + 11), v41 == 2))
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0x18Fu, v37, 0) & 1) != 0)goto LABEL_63;
    v41 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v36, 0x18Fu, v37, v41))
  {
LABEL_65:
    *(_OWORD *)(a1 + 16) = md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultCircleColorLinear;
    if (!v35)
      goto LABEL_82;
    goto LABEL_66;
  }
LABEL_63:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v241, v36, 0x18Fu, v37, 2u, 0);
  v35 = v262;
  *(float32x4_t *)(a1 + 16) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v241)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v35)
  {
LABEL_82:
    *(_OWORD *)(a1 + 48) = md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorStaleLinear;
    if (!v35)
      goto LABEL_99;
    goto LABEL_83;
  }
LABEL_66:
  v42 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v43 = 23;
  else
    v43 = (int)a6;
  v44 = *(float **)v42;
  if (*(_QWORD *)v42
    && (v45 = *v44, LODWORD(v44) = *v44 == 1.0, *(_BYTE *)(v42 + 10))
    && (v45 != 0.0 ? (v46 = v45 == 1.0) : (v46 = 1), !v46)
    || (v47 = *(unsigned __int8 *)(v42 + v44 + 11), v47 == 2))
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0xF9u, v43, 0) & 1) != 0)
      goto LABEL_80;
    v47 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v42, 0xF9u, v43, v47))
    goto LABEL_82;
LABEL_80:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v241, v42, 0xF9u, v43, 2u, 0);
  v35 = v262;
  *(float32x4_t *)(a1 + 48) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v241)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v35)
    goto LABEL_99;
LABEL_83:
  v48 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v49 = 23;
  else
    v49 = (int)a6;
  v50 = *(float **)v48;
  if (*(_QWORD *)v48
    && (v51 = *v50, LODWORD(v50) = *v50 == 1.0, *(_BYTE *)(v48 + 10))
    && (v51 != 0.0 ? (v52 = v51 == 1.0) : (v52 = 1), !v52)
    || (v53 = *(unsigned __int8 *)(v48 + v50 + 11), v53 == 2))
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0xF8u, v49, 0) & 1) != 0)
      goto LABEL_97;
    v53 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v48, 0xF8u, v49, v53))
  {
LABEL_99:
    *(_OWORD *)(a1 + 32) = md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorLinear;
    if (!v35)
      goto LABEL_98;
    goto LABEL_100;
  }
LABEL_97:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v241, v48, 0xF8u, v49, 2u, 0);
  v54 = v262;
  *(float32x4_t *)(a1 + 32) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v241)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v54)
  {
LABEL_98:
    *(_DWORD *)(a1 + 12) = 1065353216;
LABEL_150:
    v80 = *(float *)a1;
    goto LABEL_151;
  }
LABEL_100:
  v55 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v56 = 23;
  else
    v56 = (int)a6;
  v57 = *(float **)v55;
  if (!*(_QWORD *)v55)
  {
    v59 = 0;
    goto LABEL_112;
  }
  v58 = *v57;
  v59 = *v57 == 1.0;
  if (!*(_BYTE *)(v55 + 10) || (v58 != 0.0 ? (v60 = v58 == 1.0) : (v60 = 1), v60))
  {
LABEL_112:
    v61 = *(unsigned __int8 *)(v55 + v59 + 11);
    if (v61 != 2)
      goto LABEL_115;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0xF6u, v56, 0) & 1) != 0)
    goto LABEL_116;
  v61 = 1;
LABEL_115:
  hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v55, 0xF6u, v56, v61);
  v63 = 1.0;
  if (!hasValueForKeyAtZAtEnd)
    goto LABEL_128;
LABEL_116:
  if (v57)
  {
    v64 = *v57;
    v65 = *v57 == 1.0;
    if (*(_BYTE *)(v55 + 10))
    {
      if (v64 != 0.0 && v64 != 1.0)
        goto LABEL_126;
    }
  }
  else
  {
    v65 = 0;
  }
  v67 = *(unsigned __int8 *)(v55 + v65 + 11);
  v64 = 0.0;
  if (v67 == 2)
  {
LABEL_126:
    v241.i8[0] = 1;
    LOBYTE(v255) = 1;
    v68 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0xF6u, v56, 0, &v241);
    v63 = v68
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0xF6u, v56, 1u, &v255)- v68)* v64);
    goto LABEL_128;
  }
  v63 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0xF6u, v56, v67, 0);
LABEL_128:
  v69 = v262;
  *(float *)(a1 + 12) = v63;
  if (!v69)
    goto LABEL_150;
  v70 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  v71 = *(float **)v70;
  if (!*(_QWORD *)v70)
  {
    v73 = 0;
    goto LABEL_138;
  }
  v72 = *v71;
  v73 = *v71 == 1.0;
  if (!*(_BYTE *)(v70 + 10) || (v72 != 0.0 ? (v74 = v72 == 1.0) : (v74 = 1), v74))
  {
LABEL_138:
    v75 = *(unsigned __int8 *)(v70 + v73 + 11);
    if (v75 != 2)
      goto LABEL_141;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v70, 0xFAu, v56, 0) & 1) != 0)
    goto LABEL_142;
  v75 = 1;
LABEL_141:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v70, 0xFAu, v56, v75))
    goto LABEL_150;
LABEL_142:
  v76 = fminf(fmaxf(a6, 0.0), 23.0);
  if (v71)
  {
    v77 = *v71;
    v78 = *v71 == 1.0;
    if (*(_BYTE *)(v70 + 10))
    {
      if (v77 != 0.0 && v77 != 1.0)
        goto LABEL_256;
    }
  }
  else
  {
    v78 = 0;
  }
  v141 = *(unsigned __int8 *)(v70 + v78 + 11);
  v77 = 0.0;
  if (v141 == 2)
  {
LABEL_256:
    v241.i8[0] = 1;
    LOBYTE(v255) = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v70, 0xFAu, 0, (BOOL *)&v241, v76);
    v143 = v142;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v70, 0xFAu, 1u, (BOOL *)&v255, v76);
    v80 = v143 + (float)((float)(v144 - v143) * v77);
    goto LABEL_151;
  }
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v70, 0xFAu, v141, 0, v76);
LABEL_151:
  *(float *)a1 = v80;
  if (!v262)
  {
LABEL_176:
    v91 = *(float *)(a1 + 4);
    goto LABEL_181;
  }
  v81 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v82 = 23;
  else
    v82 = (int)a6;
  v83 = *(float **)v81;
  if (!*(_QWORD *)v81)
  {
    v85 = 0;
    goto LABEL_164;
  }
  v84 = *v83;
  v85 = *v83 == 1.0;
  if (!*(_BYTE *)(v81 + 10) || (v84 != 0.0 ? (v86 = v84 == 1.0) : (v86 = 1), v86))
  {
LABEL_164:
    v87 = *(unsigned __int8 *)(v81 + v85 + 11);
    if (v87 != 2)
      goto LABEL_167;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0xFBu, v82, 0) & 1) != 0)
    goto LABEL_168;
  v87 = 1;
LABEL_167:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v81, 0xFBu, v82, v87))
    goto LABEL_176;
LABEL_168:
  if (v83)
  {
    v88 = *v83;
    v89 = *v83 == 1.0;
    if (*(_BYTE *)(v81 + 10))
    {
      if (v88 != 0.0 && v88 != 1.0)
        goto LABEL_179;
    }
  }
  else
  {
    v89 = 0;
  }
  v92 = *(unsigned __int8 *)(v81 + v89 + 11);
  v88 = 0.0;
  if (v92 == 2)
  {
LABEL_179:
    v241.i8[0] = 1;
    LOBYTE(v255) = 1;
    v93 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0xFBu, v82, 0, &v241);
    v91 = v93
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0xFBu, v82, 1u, &v255)- v93)* v88);
    goto LABEL_181;
  }
  v91 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0xFBu, v82, v92, 0);
LABEL_181:
  *(float *)(a1 + 4) = v91;
  if (!v262)
  {
    *(_DWORD *)(a1 + 68) = 0;
LABEL_220:
    *(_WORD *)(a1 + 72) = 0;
LABEL_221:
    v114 = 1.2;
    goto LABEL_222;
  }
  v94 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v95 = 23;
  else
    v95 = (int)a6;
  v96 = *(float **)v94;
  if (!*(_QWORD *)v94)
  {
    v98 = 0;
    goto LABEL_195;
  }
  v97 = *v96;
  v98 = *v96 == 1.0;
  if (!*(_BYTE *)(v94 + 10) || (v97 != 0.0 ? (v99 = v97 == 1.0) : (v99 = 1), v99))
  {
LABEL_195:
    v100 = *(unsigned __int8 *)(v94 + v98 + 11);
    if (v100 != 2)
      goto LABEL_198;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0x1B9u, v95, 0) & 1) != 0)
    goto LABEL_199;
  v100 = 1;
LABEL_198:
  v101 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v94, 0x1B9u, v95, v100);
  v102 = 0.0;
  if (!v101)
    goto LABEL_211;
LABEL_199:
  if (v96)
  {
    v103 = *v96;
    v104 = *v96 == 1.0;
    if (*(_BYTE *)(v94 + 10))
    {
      if (v103 != 0.0 && v103 != 1.0)
        goto LABEL_209;
    }
  }
  else
  {
    v104 = 0;
  }
  v106 = *(unsigned __int8 *)(v94 + v104 + 11);
  v103 = 0.0;
  if (v106 == 2)
  {
LABEL_209:
    v241.i8[0] = 1;
    LOBYTE(v255) = 1;
    v107 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x1B9u, v95, 0, &v241);
    v102 = v107
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x1B9u, v95, 1u, &v255)- v107)* v103);
    goto LABEL_211;
  }
  v102 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x1B9u, v95, v106, 0);
LABEL_211:
  v108 = v262;
  *(float *)(a1 + 68) = v102;
  if (!v108)
    goto LABEL_220;
  v109 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  v110 = *(float **)v109;
  if (!*(_QWORD *)v109)
  {
    v112 = 0;
    goto LABEL_244;
  }
  v111 = *v110;
  v112 = *v110 == 1.0;
  if (!*(_BYTE *)(v109 + 10) || (v111 != 0.0 ? (v113 = v111 == 1.0) : (v113 = 1), v113))
  {
LABEL_244:
    v138 = *(unsigned __int8 *)(v109 + v112 + 11);
    if (v138 != 2)
      goto LABEL_247;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v109, 0x1C4u, v95, 0) & 1) != 0)
    goto LABEL_248;
  v138 = 1;
LABEL_247:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v109, 0x1C4u, v95, v138) & 1) == 0)
  {
    *(_BYTE *)(a1 + 72) = 0;
    goto LABEL_265;
  }
LABEL_248:
  if (v110)
  {
    v139 = *v110;
    v140 = *v110 == 1.0;
    if (*(_BYTE *)(v109 + 10) && v139 != 0.0 && v139 != 1.0)
      goto LABEL_259;
  }
  else
  {
    v140 = 0;
  }
  v145 = *(unsigned __int8 *)(v109 + v140 + 11);
  v139 = 0.0;
  if (v145 != 2)
  {
    v147 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v109, 0x1C4u, v95, v145, 0);
    goto LABEL_264;
  }
LABEL_259:
  v241.i8[0] = 1;
  LOBYTE(v255) = 1;
  v146 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v109, 0x1C4u, v95, 0, &v241);
  v147 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v109, 0x1C4u, v95, 1u, &v255);
  if (v139 < 1.0)
    LOBYTE(v147) = v146;
LABEL_264:
  v148 = v262;
  *(_BYTE *)(a1 + 72) = v147;
  if (!v148)
  {
    *(_BYTE *)(a1 + 73) = 0;
    goto LABEL_221;
  }
LABEL_265:
  v149 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  v150 = *(float **)v149;
  if (!*(_QWORD *)v149)
  {
    v152 = 0;
    goto LABEL_271;
  }
  v151 = *v150;
  v152 = *v150 == 1.0;
  if (!*(_BYTE *)(v149 + 10) || v151 == 0.0 || v151 == 1.0)
  {
LABEL_271:
    v153 = *(unsigned __int8 *)(v149 + v152 + 11);
    if (v153 != 2)
      goto LABEL_274;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v149, 0x1C5u, v95, 0) & 1) != 0)
    goto LABEL_275;
  v153 = 1;
LABEL_274:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v149, 0x1C5u, v95, v153) & 1) == 0)
  {
    *(_BYTE *)(a1 + 73) = 0;
    goto LABEL_411;
  }
LABEL_275:
  if (v150)
  {
    v154 = *v150;
    v155 = *v150 == 1.0;
    if (*(_BYTE *)(v149 + 10) && v154 != 0.0 && v154 != 1.0)
      goto LABEL_406;
  }
  else
  {
    v155 = 0;
  }
  v226 = *(unsigned __int8 *)(v149 + v155 + 11);
  v154 = 0.0;
  if (v226 != 2)
  {
    v228 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v149, 0x1C5u, v95, v226, 0);
    goto LABEL_410;
  }
LABEL_406:
  v241.i8[0] = 1;
  LOBYTE(v255) = 1;
  v227 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v149, 0x1C5u, v95, 0, &v241);
  v228 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v149, 0x1C5u, v95, 1u, &v255);
  if (v154 < 1.0)
    LOBYTE(v228) = v227;
LABEL_410:
  v229 = v262;
  *(_BYTE *)(a1 + 73) = v228;
  if (!v229)
    goto LABEL_221;
LABEL_411:
  v230 = *(_QWORD *)(*(_QWORD *)&v259 + 24);
  if ((int)a6 >= 0x17)
    v231 = 23;
  else
    v231 = (int)a6;
  v232 = *(float **)v230;
  if (!*(_QWORD *)v230)
  {
    v234 = 0;
    goto LABEL_420;
  }
  v233 = *v232;
  v234 = *v232 == 1.0;
  if (!*(_BYTE *)(v230 + 10) || v233 == 0.0 || v233 == 1.0)
  {
LABEL_420:
    v235 = *(unsigned __int8 *)(v230 + v234 + 11);
    if (v235 != 2)
      goto LABEL_423;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v259 + 24), 0x1A1u, v231, 0) & 1) != 0)
    goto LABEL_424;
  v235 = 1;
LABEL_423:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v230, 0x1A1u, v231, v235))
    goto LABEL_221;
LABEL_424:
  if (v232)
  {
    v236 = *v232;
    v237 = *v232 == 1.0;
    if (*(_BYTE *)(v230 + 10) && v236 != 0.0 && v236 != 1.0)
      goto LABEL_431;
  }
  else
  {
    v237 = 0;
  }
  v238 = *(unsigned __int8 *)(v230 + v237 + 11);
  v236 = 0.0;
  if (v238 == 2)
  {
LABEL_431:
    v241.i8[0] = 1;
    LOBYTE(v255) = 1;
    v239 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v230, 0x1A1u, v231, 0, &v241);
    v114 = v239
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v230, 0x1A1u, v231, 1u, &v255)- v239)* v236);
    goto LABEL_222;
  }
  v114 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v230, 0x1A1u, v231, v238, 0);
LABEL_222:
  v115 = *(id *)(a2 + 40);
  objc_msgSend(v115, "routeInfo");
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "route");
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  v118 = objc_msgSend(v117, "transportType");

  v255 = 0;
  v256 = 0;
  v257 = 0;
  v120 = (gss::Allocator *)gss::Allocator::instance(v119);
  v258 = v120;
  v121 = v256;
  if ((unint64_t)v256 < v257)
  {
    if (v256)
      *(_QWORD *)v256 = 0xB00000005;
    v122 = (unint64_t *)(v121 + 2);
    goto LABEL_288;
  }
  v123 = ((char *)v256 - (char *)v255) >> 3;
  v124 = v123 + 1;
  if ((unint64_t)(v123 + 1) >> 61)
    abort();
  v125 = v257 - (_QWORD)v255;
  if ((uint64_t)(v257 - (_QWORD)v255) >> 2 > v124)
    v124 = v125 >> 2;
  if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
    v126 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v126 = v124;
  if (v126)
  {
    v120 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v120 + 16))(v120, 8 * v126, 4);
    v127 = (unsigned int *)((char *)v120 + 8 * v123);
    v128 = (char *)v120 + 8 * v126;
    if (v120)
      *(_QWORD *)v127 = 0xB00000005;
  }
  else
  {
    v128 = 0;
    v127 = (unsigned int *)(8 * v123);
  }
  v122 = (unint64_t *)(v127 + 2);
  v130 = v255;
  v129 = v256;
  if (v256 != v255)
  {
    v131 = (char *)v256 - (char *)v255 - 8;
    if (v131 < 0x38)
    {
      v133 = v256;
    }
    else if ((unint64_t)((char *)v256 - (char *)v127) < 0x20)
    {
      v133 = v256;
    }
    else
    {
      v132 = (v131 >> 3) + 1;
      v133 = &v256[-2 * (v132 & 0x3FFFFFFFFFFFFFFCLL)];
      v134 = v127 - 4;
      v135 = v256 - 4;
      v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v137 = *(_OWORD *)v135;
        *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
        *(_OWORD *)v134 = v137;
        v134 -= 8;
        v135 -= 8;
        v136 -= 4;
      }
      while (v136);
      v127 -= 2 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
      if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_285;
    }
    do
    {
      v156 = *((_QWORD *)v133 - 1);
      v133 -= 2;
      *((_QWORD *)v127 - 1) = v156;
      v127 -= 2;
    }
    while (v133 != v130);
LABEL_285:
    v129 = v255;
  }
  v255 = v127;
  v256 = (unsigned int *)v122;
  v157 = v257;
  v257 = (unint64_t)v128;
  if (v129)
    v120 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, unsigned int *, unint64_t))(*(_QWORD *)v258 + 40))(v258, v129, v157 - (_QWORD)v129);
LABEL_288:
  v256 = (unsigned int *)v122;
  if ((unint64_t)v122 < v257)
  {
    *v122 = ((unint64_t)v118 << 32) | 0x10010;
    v158 = (unsigned int *)(v122 + 1);
    goto LABEL_313;
  }
  v159 = ((char *)v122 - (char *)v255) >> 3;
  if ((unint64_t)(v159 + 1) >> 61)
    abort();
  v160 = (uint64_t)(v257 - (_QWORD)v255) >> 2;
  if (v160 <= v159 + 1)
    v160 = v159 + 1;
  if (v257 - (unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8)
    v161 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v161 = v160;
  if (v161)
  {
    v120 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v258 + 16))(v258, 8 * v161, 4);
    v162 = (unsigned int *)((char *)v120 + 8 * v159);
    v163 = (char *)v120 + 8 * v161;
    if (v120)
      *(_QWORD *)v162 = ((unint64_t)v118 << 32) | 0x10010;
  }
  else
  {
    v163 = 0;
    v162 = (unsigned int *)(8 * v159);
  }
  v158 = v162 + 2;
  v165 = v255;
  v164 = v256;
  if (v256 != v255)
  {
    v166 = (char *)v256 - (char *)v255 - 8;
    if (v166 < 0x38)
    {
      v168 = v256;
    }
    else if ((unint64_t)((char *)v256 - (char *)v162) < 0x20)
    {
      v168 = v256;
    }
    else
    {
      v167 = (v166 >> 3) + 1;
      v168 = &v256[-2 * (v167 & 0x3FFFFFFFFFFFFFFCLL)];
      v169 = v162 - 4;
      v170 = v256 - 4;
      v171 = v167 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v172 = *(_OWORD *)v170;
        *((_OWORD *)v169 - 1) = *((_OWORD *)v170 - 1);
        *(_OWORD *)v169 = v172;
        v169 -= 8;
        v170 -= 8;
        v171 -= 4;
      }
      while (v171);
      v162 -= 2 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
      if (v167 == (v167 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_310;
    }
    do
    {
      v173 = *((_QWORD *)v168 - 1);
      v168 -= 2;
      *((_QWORD *)v162 - 1) = v173;
      v162 -= 2;
    }
    while (v168 != v165);
LABEL_310:
    v164 = v255;
  }
  v255 = v162;
  v256 = v158;
  v174 = v257;
  v257 = (unint64_t)v163;
  if (v164)
    v120 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, unsigned int *, unint64_t))(*(_QWORD *)v258 + 40))(v258, v164, v174 - (_QWORD)v164);
LABEL_313:
  v256 = v158;
  v251 = 0;
  v252 = 0;
  v253 = 0;
  v254 = gss::Allocator::instance(v120);
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v251, &v255, v249);
  memset(v247, 0, sizeof(v247));
  v248 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x10002u) = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x1004Du) = 1;
  v175 = *(_QWORD *)(*a4 + 520);
  v176 = *(std::__shared_weak_count **)(*a4 + 528);
  v241 = (uint16x4_t)v175;
  v242 = v176;
  if (v176)
  {
    v177 = (unint64_t *)&v176->__shared_owners_;
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
  }
  v179 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v175);
  if (v176)
  {
    v180 = (unint64_t *)&v176->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x10001u) = v179;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x1000Du) = BYTE1(v179);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x1000Eu) = BYTE2(v179);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x10033u) = BYTE4(v179);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v247, 0x1003Cu) = BYTE5(v179);
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v245, *a4, (gss::FeatureAttributeSet *)v249, (gss::QueryOverrides *)v247);
  v182 = v245;
  v183 = v246;
  v240[0] = v245;
  v240[1] = v246;
  if (v246)
  {
    v184 = (unint64_t *)&v246->__shared_owners_;
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
    v242 = v183;
    do
      v186 = __ldxr(v184);
    while (__stxr(v186 + 1, v184));
  }
  else
  {
    v242 = 0;
  }
  v243[0] = 0;
  v243[1] = 0;
  v241 = (uint16x4_t)v182;
  v244 = 0;
  if (v182)
    LODWORD(v182) = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v182 + 48))(v182, v243);
  v244 = v182;
  if (v183)
  {
    v187 = (unint64_t *)&v183->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
    LODWORD(v182) = v244;
  }
  if ((_DWORD)v182)
  {
    md::RouteLineSection::halfWidthAtZoom(&v241, a6);
    v190 = v189;
    v191 = *a3;
    v192 = v190 + v190;
    if (objc_msgSend(v191, "alphaAtlas"))
    {
      v193 = *a3;
      v192 = *(float *)(objc_msgSend(v193, "alphaAtlas") + 16) * v192;

    }
    v194 = *(_QWORD *)(*(_QWORD *)&v241 + 24);
    if ((int)a6 >= 0x17)
      v195 = 23;
    else
      v195 = (int)a6;
    v196 = *(float **)v194;
    if (*(_QWORD *)v194)
    {
      v197 = *v196;
      v198 = *v196 == 1.0;
      if (*(_BYTE *)(v194 + 10))
      {
        if (v197 != 0.0 && v197 != 1.0)
        {
LABEL_352:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v241 + 24), 0x13Fu, v195, 0) & 1) != 0)goto LABEL_355;
          v200 = 1;
LABEL_354:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v194, 0x13Fu, v195, v200))
            goto LABEL_383;
LABEL_355:
          v201 = fminf(fmaxf(a6, 0.0), 23.0);
          if (v196)
          {
            v202 = *v196;
            v203 = *v196 == 1.0;
            if (*(_BYTE *)(v194 + 10))
            {
              if (v202 != 0.0 && v202 != 1.0)
                goto LABEL_365;
            }
          }
          else
          {
            v203 = 0;
          }
          v205 = *(unsigned __int8 *)(v194 + v203 + 11);
          v202 = 0.0;
          if (v205 != 2)
          {
            v207 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v194, v205, 0, v201);
            goto LABEL_369;
          }
LABEL_365:
          LOBYTE(v240[0]) = 1;
          v263 = 1;
          v206 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v194, 0, (BOOL *)v240, v201);
          v207 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v194, 1u, (BOOL *)&v263, v201);
          if (v202 < 1.0)
            v207 = v206;
LABEL_369:
          if (v207 == 2)
            v208 = 0.5;
          else
            v208 = 0.0;
          if (v207)
          {
            if (v244)
            {
LABEL_374:
              v209 = *(_QWORD *)(*(_QWORD *)&v241 + 24);
              v210 = fminf(fmaxf(a6, 0.0), 23.0);
              v211 = *(float **)v209;
              if (*(_QWORD *)v209
                && (v212 = *v211, LODWORD(v211) = *v211 == 1.0, *(_BYTE *)(v209 + 10))
                && (v212 != 0.0 ? (v213 = v212 == 1.0) : (v213 = 1), !v213)
                || (v214 = *(unsigned __int8 *)(v209 + v211 + 11), v212 = 0.0, v214 == 2))
              {
                LOBYTE(v240[0]) = 1;
                v263 = 1;
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v209, 0x61u, 0, (BOOL *)v240, v210);
                v216 = v215;
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v209, 0x61u, 1u, (BOOL *)&v263, v210);
                v218 = v216 + (float)((float)(v217 - v216) * v212);
              }
              else
              {
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v241 + 24), 0x61u, v214, 0, v210);
              }
              goto LABEL_386;
            }
LABEL_384:
            v218 = 0.0;
LABEL_386:
            *(float *)a1 = fmaxf(*(float *)a1, (float)(v192 + (float)((float)(v208 + v208) * v218)) * v114);
            goto LABEL_387;
          }
LABEL_383:
          v208 = 1.0;
          if (v244)
            goto LABEL_374;
          goto LABEL_384;
        }
      }
    }
    else
    {
      v198 = 0;
    }
    v200 = *(unsigned __int8 *)(v194 + v198 + 11);
    if (v200 != 2)
      goto LABEL_354;
    goto LABEL_352;
  }
LABEL_387:
  v219 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v241);
  v220 = v246;
  if (v246)
  {
    v221 = (unint64_t *)&v246->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  if (v247[14])
    v223 = 1;
  else
    v223 = *(_QWORD *)v247 == 0;
  if (!v223)
  {
    v224 = gss::Allocator::instance(v219);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v224 + 40))(v224, *(_QWORD *)v247, *(unsigned __int16 *)&v247[12]);
  }
  if (v249[0])
  {
    v249[1] = v249[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v250 + 40))(v250, v249[0], v249[2] - v249[0]);
  }
  if (v251)
  {
    v252 = v251;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v254 + 40))(v254, v251, v253 - v251);
  }
  if (v255)
  {
    v256 = v255;
    (*(void (**)(gss::Allocator *, unsigned int *, unint64_t))(*(_QWORD *)v258 + 40))(v258, v255, v257 - (_QWORD)v255);
  }
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v259);
}

void sub_19F59FDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v1 - 176);
  _Unwind_Resume(a1);
}

double gm::operator*<double,3,4,4>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double result;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;

  v3 = a3[1];
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v49 = *a3;
  v7 = a2[6];
  v8 = a2[7];
  v9 = a3[2];
  v48 = v3;
  v10 = *a3 * *a2 + v3 * v5 + v9 * v7;
  v11 = a3[4];
  v47 = a3[3];
  v12 = a3[5];
  v46 = v11;
  v14 = v12;
  v13 = a3[6];
  v15 = v11 * *a2 + v12 * v5 + v13 * v7;
  v17 = a3[7];
  v16 = a3[8];
  v19 = v16;
  v18 = a3[9];
  v20 = a3[10];
  v21 = v16 * *a2 + v18 * v5 + v20 * v7;
  v23 = a3[11];
  v22 = a3[12];
  v24 = a3[13];
  v25 = v22 * *a2 + v24 * v5;
  v26 = a3[14];
  v27 = v25 + v26 * v7;
  v29 = a2[4];
  v28 = a2[5];
  v30 = *a3 * v4 + v3 * v29;
  v31 = v11 * v4 + v12 * v29;
  v32 = v16 * v4 + v18 * v29;
  v34 = a2[8];
  v33 = a2[9];
  v36 = v26;
  v35 = a3[15];
  v37 = v27 + v35 * v33;
  v38 = v30 + v9 * v8;
  v39 = v31 + v13 * v8;
  v40 = v32 + v20 * v8;
  v41 = v22 * v4 + v24 * v29 + v26 * v8;
  v42 = a2[10];
  v43 = a2[11];
  result = v41 + v35 * v42;
  *a1 = v10 + v47 * v33;
  a1[1] = v38 + v47 * v42;
  a1[6] = v21 + v23 * v33;
  a1[7] = v40 + v23 * v42;
  a1[2] = v49 * v6 + v48 * v28 + v9 * v34 + v47 * v43;
  a1[3] = v15 + v17 * v33;
  a1[4] = v39 + v17 * v42;
  a1[5] = v46 * v6 + v14 * v28 + v13 * v34 + v17 * v43;
  a1[8] = v19 * v6 + v18 * v28 + v20 * v34 + v23 * v43;
  a1[9] = v37;
  v45 = v22 * v6 + v24 * v28 + v36 * v34 + a3[15] * v43;
  a1[10] = result;
  a1[11] = v45;
  return result;
}

void md::PuckLogic::update3DPuckRenderStates(md::PuckStyleInfo const&,md::PuckStyleInfo const&,BOOL)::$_1::operator()(_QWORD *a1, uint64_t a2, char a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  uint64_t *v26;

  if (a3 == 1)
  {
    v11 = (uint64_t *)a1[2];
    v8 = *(_QWORD *)(*a1 + 8);
    if (**(_BYTE **)*a1)
    {
      v12 = *((unsigned __int8 *)v11 + 16);
      if (*a5 != v12)
      {
        *a5 = v12;
        v13 = (uint64_t *)gdc::Registry::storage<md::components::VisibilityChanged>(*(_QWORD *)(v8 + 288));
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v13, a2);
      }
    }
    else
    {
      *a5 = 0;
    }
    v21 = *v11;
    if (*a4 != *v11)
    {
      v22 = v11[1];
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v18 = (std::__shared_weak_count *)a4[1];
      *a4 = v21;
      a4[1] = v22;
      if (!v18)
        goto LABEL_28;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      goto LABEL_26;
    }
  }
  else if (!a3)
  {
    v7 = (uint64_t *)a1[1];
    v8 = *(_QWORD *)(*a1 + 8);
    if (**(_BYTE **)*a1)
    {
      v9 = *((unsigned __int8 *)v7 + 16);
      if (*a5 != v9)
      {
        *a5 = v9;
        v10 = (uint64_t *)gdc::Registry::storage<md::components::VisibilityChanged>(*(_QWORD *)(v8 + 288));
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v10, a2);
      }
    }
    else
    {
      *a5 = 0;
    }
    v14 = *v7;
    if (*a4 != *v7)
    {
      v15 = v7[1];
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = (std::__shared_weak_count *)a4[1];
      *a4 = v14;
      a4[1] = v15;
      if (!v18)
        goto LABEL_28;
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_26:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_28:
      v26 = (uint64_t *)gdc::Registry::storage<md::components::CustomRenderStateChanged>(*(_QWORD *)(v8 + 288));
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v26, a2);
    }
  }
}

void gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = *(float *)a2;
  v4 = *(float *)(a2 + 4);
  v6 = *(float *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  if (*(float *)a2 >= 0.04045)
    v7 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
  else
    v7 = v3 * 0.077399;
  if (v4 >= 0.04045)
    v8 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  else
    v8 = v4 * 0.077399;
  if (v6 >= 0.04045)
    v9 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  else
    v9 = v6 * 0.077399;
  *(float *)a1 = v7;
  *(float *)(a1 + 4) = v8;
  *(float *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return a1;
}

_BYTE *md::RouteLineSection::halfWidthAtZoom(_BYTE *result, float a2)
{
  _BYTE *v3;
  uint64_t v4;
  float *v5;
  float v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  float *v10;
  float v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  float *v15;
  float v16;
  BOOL v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  float *v21;
  float v22;
  _BOOL4 v23;
  BOOL v24;
  unsigned int v25;
  float v26;
  float v27;
  _BOOL4 v28;
  unsigned int v30;
  unint64_t v31;
  float v32;
  float *v33;
  float v34;
  BOOL v35;
  unsigned int v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  if (!result[32])
    return result;
  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 24);
  v5 = *(float **)v4;
  if (*(_QWORD *)v4
    && (v6 = *v5, LODWORD(v5) = *v5 == 1.0, *(_BYTE *)(v4 + 10))
    && (v6 != 0.0 ? (v7 = v6 == 1.0) : (v7 = 1), !v7)
    || (v8 = *(unsigned __int8 *)(v4 + v5 + 11), v8 == 2))
  {
    v38 = 1;
    v37 = 1;
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v4, 0xF3u, 0, &v38);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v4, 0xF3u, 1u, &v37);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)result + 24), 0xF3u, v8, 0);
  }
  v9 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  v10 = *(float **)v9;
  if (*(_QWORD *)v9
    && (v11 = *v10, LODWORD(v10) = *v10 == 1.0, *(_BYTE *)(v9 + 10))
    && (v11 != 0.0 ? (v12 = v11 == 1.0) : (v12 = 1), !v12)
    || (v13 = *(unsigned __int8 *)(v9 + v10 + 11), v13 == 2))
  {
    v40 = 1;
    v39 = 1;
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v9, 0xF4u, 0, &v40);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v9, 0xF4u, 1u, &v39);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)v3 + 24), 0xF4u, v13, 0);
  }
  v14 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  v15 = *(float **)v14;
  if (*(_QWORD *)v14
    && (v16 = *v15, LODWORD(v15) = *v15 == 1.0, *(_BYTE *)(v14 + 10))
    && (v16 != 0.0 ? (v17 = v16 == 1.0) : (v17 = 1), !v17)
    || (v18 = *(unsigned __int8 *)(v14 + v15 + 11), v18 == 2))
  {
    v42 = 1;
    v41 = 1;
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v14, 0xF5u, 0, &v42);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v14, 0xF5u, 1u, &v41);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)v3 + 24), 0xF5u, v18, 0);
  }
  v19 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if ((int)a2 >= 0x17)
    v20 = 23;
  else
    v20 = (int)a2;
  v21 = *(float **)v19;
  if (!*(_QWORD *)v19)
  {
    v23 = 0;
    goto LABEL_45;
  }
  v22 = *v21;
  v23 = *v21 == 1.0;
  if (!*(_BYTE *)(v19 + 10) || (v22 != 0.0 ? (v24 = v22 == 1.0) : (v24 = 1), v24))
  {
LABEL_45:
    v25 = *(unsigned __int8 *)(v19 + v23 + 11);
    if (v25 != 2)
      goto LABEL_48;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)v3 + 24), 0x1B5u, v20, 0) & 1) != 0)
    goto LABEL_49;
  v25 = 1;
LABEL_48:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v19, 0x1B5u, v20, v25))
  {
LABEL_49:
    v26 = fminf(fmaxf(a2, 0.0), 23.0);
    if (v21)
    {
      v27 = *v21;
      v28 = *v21 == 1.0;
      if (*(_BYTE *)(v19 + 10))
      {
        if (v27 != 0.0 && v27 != 1.0)
        {
LABEL_59:
          v44 = 1;
          v43 = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v19, 0x1B5u, 0, (BOOL *)&v44, v26);
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v19, 0x1B5u, 1u, (BOOL *)&v43, v26);
          goto LABEL_61;
        }
      }
    }
    else
    {
      v28 = 0;
    }
    v30 = *(unsigned __int8 *)(v19 + v28 + 11);
    if (v30 != 2)
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v19, 0x1B5u, v30, 0, v26);
      goto LABEL_61;
    }
    goto LABEL_59;
  }
LABEL_61:
  v31 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  v32 = fminf(fmaxf(a2, 0.0), 23.0);
  v33 = *(float **)v31;
  if (!*(_QWORD *)v31
    || (v34 = *v33, LODWORD(v33) = *v33 == 1.0, !*(_BYTE *)(v31 + 10))
    || (v34 != 0.0 ? (v35 = v34 == 1.0) : (v35 = 1), v35))
  {
    v36 = *(unsigned __int8 *)(v31 + v33 + 11);
    if (v36 != 2)
      return (_BYTE *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x5Eu, v36, 0, v32);
  }
  v46 = 1;
  v45 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x5Eu, 0, (BOOL *)&v46, v32);
  return (_BYTE *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x5Eu, 1u, (BOOL *)&v45, v32);
}

